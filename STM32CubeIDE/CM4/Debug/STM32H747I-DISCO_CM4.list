
STM32H747I-DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .shared_ram   00000b40  38000000  38000000  0001d000  2**2
                  ALLOC
  2 .text         000173d8  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000031ec  08117678  08117678  00018678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0811a864  0811a864  0001b864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  0811a86c  0811a86c  0001b86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0811a874  0811a874  0001b874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000090  10000000  0811a878  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000b97c  10000090  0811a908  0001c090  2**2
                  ALLOC
  9 ._user_heap_stack 00002004  1000ba0c  0811a908  0001ca0c  2**0
                  ALLOC
 10 .lwip_sec     00044b83  30000000  30000000  0001d000  2**2
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000434bb  00000000  00000000  0001c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000997a  00000000  00000000  0005f57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d40  00000000  00000000  00068ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002355  00000000  00000000  0006bc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00054bbd  00000000  00000000  0006df8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000418cd  00000000  00000000  000c2b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001dde40  00000000  00000000  00104417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002e2257  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cb58  00000000  00000000  002e229c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  002eedf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000090 	.word	0x10000090
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08117660 	.word	0x08117660

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000094 	.word	0x10000094
 81002dc:	08117660 	.word	0x08117660

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8100390:	b580      	push	{r7, lr}
 8100392:	b082      	sub	sp, #8
 8100394:	af00      	add	r7, sp, #0
 8100396:	6078      	str	r0, [r7, #4]
  if((SemMask &  __HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID))!= 0)
 8100398:	687b      	ldr	r3, [r7, #4]
 810039a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810039e:	2b00      	cmp	r3, #0
 81003a0:	d005      	beq.n	81003ae <HAL_HSEM_FreeCallback+0x1e>
  {
    /* Re-Activate HSEM notification */
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 81003a2:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 81003a6:	f006 f991 	bl	81066cc <HAL_HSEM_ActivateNotification>
    /* New message received */
    prvCoreInterruptHandler();
 81003aa:	f000 f86b 	bl	8100484 <prvCoreInterruptHandler>
  }

  if((SemMask & __HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP)) !=0){
 81003ae:	687b      	ldr	r3, [r7, #4]
 81003b0:	2b00      	cmp	r3, #0
 81003b2:	da05      	bge.n	81003c0 <HAL_HSEM_FreeCallback+0x30>
	/* Re-Activate HSEM notification */
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 81003b4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 81003b8:	f006 f988 	bl	81066cc <HAL_HSEM_ActivateNotification>
	/* TX queue is empty => wake-up task trying to send a message */
	prvCoreWakeupInterruptHandler();
 81003bc:	f000 f886 	bl	81004cc <prvCoreWakeupInterruptHandler>
  }
}
 81003c0:	bf00      	nop
 81003c2:	3708      	adds	r7, #8
 81003c4:	46bd      	mov	sp, r7
 81003c6:	bd80      	pop	{r7, pc}

081003c8 <ipc_init>:

int ipc_init(void)
{
 81003c8:	b580      	push	{r7, lr}
 81003ca:	b084      	sub	sp, #16
 81003cc:	af02      	add	r7, sp, #8
    /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81003ce:	4b20      	ldr	r3, [pc, #128]	@ (8100450 <ipc_init+0x88>)
 81003d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003d4:	4a1e      	ldr	r2, [pc, #120]	@ (8100450 <ipc_init+0x88>)
 81003d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81003da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81003de:	4b1c      	ldr	r3, [pc, #112]	@ (8100450 <ipc_init+0x88>)
 81003e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81003e8:	607b      	str	r3, [r7, #4]
 81003ea:	687b      	ldr	r3, [r7, #4]
#ifdef CORE_CM4
  	HAL_HSEM_Take(HSEM_INIT_CM4, 0);
 81003ec:	2100      	movs	r1, #0
 81003ee:	201b      	movs	r0, #27
 81003f0:	f006 f934 	bl	810665c <HAL_HSEM_Take>
#endif
	memset((void*)(&shared_ram.cm7_to_cm4_buffer), 0, CM7_TO_CM4_BUFFER_SIZE);
 81003f4:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 81003f8:	2100      	movs	r1, #0
 81003fa:	4816      	ldr	r0, [pc, #88]	@ (8100454 <ipc_init+0x8c>)
 81003fc:	f016 faf3 	bl	81169e6 <memset>
	memset((void*)(&shared_ram.cm4_to_cm7_buffer), 0, CM4_TO_CM7_BUFFER_SIZE);
 8100400:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8100404:	2100      	movs	r1, #0
 8100406:	4814      	ldr	r0, [pc, #80]	@ (8100458 <ipc_init+0x90>)
 8100408:	f016 faed 	bl	81169e6 <memset>
    shared_ram.cm7_to_cm4_handle = xMessageBufferCreateStatic(CM7_TO_CM4_BUFFER_SIZE, (uint8_t*)shared_ram.cm7_to_cm4_buffer,(StaticMessageBuffer_t*) &shared_ram.cm7_to_cm4_xmsg);
 810040c:	4b13      	ldr	r3, [pc, #76]	@ (810045c <ipc_init+0x94>)
 810040e:	9300      	str	r3, [sp, #0]
 8100410:	4b10      	ldr	r3, [pc, #64]	@ (8100454 <ipc_init+0x8c>)
 8100412:	2201      	movs	r2, #1
 8100414:	2100      	movs	r1, #0
 8100416:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 810041a:	f009 f99b 	bl	8109754 <xStreamBufferGenericCreateStatic>
 810041e:	4603      	mov	r3, r0
 8100420:	4a0f      	ldr	r2, [pc, #60]	@ (8100460 <ipc_init+0x98>)
 8100422:	6013      	str	r3, [r2, #0]
    shared_ram.cm4_to_cm7_handle = xMessageBufferCreateStatic(CM4_TO_CM7_BUFFER_SIZE, (uint8_t*)shared_ram.cm4_to_cm7_buffer,(StaticMessageBuffer_t*) &shared_ram.cm4_to_cm7_xmsg);
 8100424:	4b0f      	ldr	r3, [pc, #60]	@ (8100464 <ipc_init+0x9c>)
 8100426:	9300      	str	r3, [sp, #0]
 8100428:	4b0b      	ldr	r3, [pc, #44]	@ (8100458 <ipc_init+0x90>)
 810042a:	2201      	movs	r2, #1
 810042c:	2100      	movs	r1, #0
 810042e:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8100432:	f009 f98f 	bl	8109754 <xStreamBufferGenericCreateStatic>
 8100436:	4603      	mov	r3, r0
 8100438:	4a09      	ldr	r2, [pc, #36]	@ (8100460 <ipc_init+0x98>)
 810043a:	6053      	str	r3, [r2, #4]
    HAL_HSEM_Release(HSEM_INIT_CM4, 0);
    // Wait for CM4 to complete initialization
    HAL_HSEM_Take(HSEM_INIT_CM7, 0);
#elif defined(CORE_CM4)
    // Signal CM7 that CM4 has completed initialization
    HAL_HSEM_Release(HSEM_INIT_CM7, 0);
 810043c:	2100      	movs	r1, #0
 810043e:	201a      	movs	r0, #26
 8100440:	f006 f930 	bl	81066a4 <HAL_HSEM_Release>
#endif



    return 0;
 8100444:	2300      	movs	r3, #0
}
 8100446:	4618      	mov	r0, r3
 8100448:	3708      	adds	r7, #8
 810044a:	46bd      	mov	sp, r7
 810044c:	bd80      	pop	{r7, pc}
 810044e:	bf00      	nop
 8100450:	58024400 	.word	0x58024400
 8100454:	38000050 	.word	0x38000050
 8100458:	380005c8 	.word	0x380005c8
 810045c:	38000008 	.word	0x38000008
 8100460:	38000000 	.word	0x38000000
 8100464:	3800002c 	.word	0x3800002c

08100468 <ipc_start>:

int ipc_start(void){
 8100468:	b580      	push	{r7, lr}
 810046a:	af00      	add	r7, sp, #0
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 810046c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8100470:	f006 f92c 	bl	81066cc <HAL_HSEM_ActivateNotification>
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 8100474:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8100478:	f006 f928 	bl	81066cc <HAL_HSEM_ActivateNotification>
    return 0;
 810047c:	2300      	movs	r3, #0
}
 810047e:	4618      	mov	r0, r3
 8100480:	bd80      	pop	{r7, pc}
	...

08100484 <prvCoreInterruptHandler>:

static void prvCoreInterruptHandler(void)
{
 8100484:	b580      	push	{r7, lr}
 8100486:	b082      	sub	sp, #8
 8100488:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 810048a:	2300      	movs	r3, #0
 810048c:	607b      	str	r3, [r7, #4]

    if (!xrx_data_buf)
 810048e:	4b0d      	ldr	r3, [pc, #52]	@ (81004c4 <prvCoreInterruptHandler+0x40>)
 8100490:	681b      	ldr	r3, [r3, #0]
 8100492:	2b00      	cmp	r3, #0
 8100494:	d012      	beq.n	81004bc <prvCoreInterruptHandler+0x38>
    {
    	return;
    }


	xMessageBufferSendCompletedFromISR(xrx_data_buf,
 8100496:	4b0b      	ldr	r3, [pc, #44]	@ (81004c4 <prvCoreInterruptHandler+0x40>)
 8100498:	681b      	ldr	r3, [r3, #0]
 810049a:	1d3a      	adds	r2, r7, #4
 810049c:	4611      	mov	r1, r2
 810049e:	4618      	mov	r0, r3
 81004a0:	f009 fbb4 	bl	8109c0c <xStreamBufferSendCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 81004a4:	687b      	ldr	r3, [r7, #4]
 81004a6:	2b00      	cmp	r3, #0
 81004a8:	d009      	beq.n	81004be <prvCoreInterruptHandler+0x3a>
 81004aa:	4b07      	ldr	r3, [pc, #28]	@ (81004c8 <prvCoreInterruptHandler+0x44>)
 81004ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81004b0:	601a      	str	r2, [r3, #0]
 81004b2:	f3bf 8f4f 	dsb	sy
 81004b6:	f3bf 8f6f 	isb	sy
 81004ba:	e000      	b.n	81004be <prvCoreInterruptHandler+0x3a>
    	return;
 81004bc:	bf00      	nop
}
 81004be:	3708      	adds	r7, #8
 81004c0:	46bd      	mov	sp, r7
 81004c2:	bd80      	pop	{r7, pc}
 81004c4:	38000000 	.word	0x38000000
 81004c8:	e000ed04 	.word	0xe000ed04

081004cc <prvCoreWakeupInterruptHandler>:

static void prvCoreWakeupInterruptHandler(void)
{
 81004cc:	b580      	push	{r7, lr}
 81004ce:	b082      	sub	sp, #8
 81004d0:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 81004d2:	2300      	movs	r3, #0
 81004d4:	607b      	str	r3, [r7, #4]

    if (!xtx_data_buf)
 81004d6:	4b0d      	ldr	r3, [pc, #52]	@ (810050c <prvCoreWakeupInterruptHandler+0x40>)
 81004d8:	685b      	ldr	r3, [r3, #4]
 81004da:	2b00      	cmp	r3, #0
 81004dc:	d012      	beq.n	8100504 <prvCoreWakeupInterruptHandler+0x38>
    {
    	return;
    }


	xMessageBufferReceiveCompletedFromISR(xtx_data_buf,
 81004de:	4b0b      	ldr	r3, [pc, #44]	@ (810050c <prvCoreWakeupInterruptHandler+0x40>)
 81004e0:	685b      	ldr	r3, [r3, #4]
 81004e2:	1d3a      	adds	r2, r7, #4
 81004e4:	4611      	mov	r1, r2
 81004e6:	4618      	mov	r0, r3
 81004e8:	f009 fbd4 	bl	8109c94 <xStreamBufferReceiveCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 81004ec:	687b      	ldr	r3, [r7, #4]
 81004ee:	2b00      	cmp	r3, #0
 81004f0:	d009      	beq.n	8100506 <prvCoreWakeupInterruptHandler+0x3a>
 81004f2:	4b07      	ldr	r3, [pc, #28]	@ (8100510 <prvCoreWakeupInterruptHandler+0x44>)
 81004f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81004f8:	601a      	str	r2, [r3, #0]
 81004fa:	f3bf 8f4f 	dsb	sy
 81004fe:	f3bf 8f6f 	isb	sy
 8100502:	e000      	b.n	8100506 <prvCoreWakeupInterruptHandler+0x3a>
    	return;
 8100504:	bf00      	nop
}
 8100506:	3708      	adds	r7, #8
 8100508:	46bd      	mov	sp, r7
 810050a:	bd80      	pop	{r7, pc}
 810050c:	38000000 	.word	0x38000000
 8100510:	e000ed04 	.word	0xe000ed04

08100514 <vGenerateRemoteInterrupt>:

void vGenerateRemoteInterrupt(void * xUpdatedMessageBuffer)
{
 8100514:	b580      	push	{r7, lr}
 8100516:	b084      	sub	sp, #16
 8100518:	af00      	add	r7, sp, #0
 810051a:	6078      	str	r0, [r7, #4]
    MessageBufferHandle_t xUpdatedBuffer =
 810051c:	687b      	ldr	r3, [r7, #4]
 810051e:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100520:	f3bf 8f4f 	dsb	sy
}
 8100524:	bf00      	nop
        (MessageBufferHandle_t)xUpdatedMessageBuffer;

	__DSB();
    if (xUpdatedBuffer == xtx_data_buf)
 8100526:	4b12      	ldr	r3, [pc, #72]	@ (8100570 <vGenerateRemoteInterrupt+0x5c>)
 8100528:	685b      	ldr	r3, [r3, #4]
 810052a:	68fa      	ldr	r2, [r7, #12]
 810052c:	429a      	cmp	r2, r3
 810052e:	d10b      	bne.n	8100548 <vGenerateRemoteInterrupt+0x34>
    {

        /* Take the HW Semaphore with Process1 ID  */
        if(HAL_HSEM_Take(HSEM_TX_ID, HSEM_PROCESS) == HAL_OK)
 8100530:	211b      	movs	r1, #27
 8100532:	201d      	movs	r0, #29
 8100534:	f006 f892 	bl	810665c <HAL_HSEM_Take>
 8100538:	4603      	mov	r3, r0
 810053a:	2b00      	cmp	r3, #0
 810053c:	d114      	bne.n	8100568 <vGenerateRemoteInterrupt+0x54>
        {
            /* Release the HW Semaphore */
            HAL_HSEM_Release(HSEM_TX_ID, HSEM_PROCESS);
 810053e:	211b      	movs	r1, #27
 8100540:	201d      	movs	r0, #29
 8100542:	f006 f8af 	bl	81066a4 <HAL_HSEM_Release>
		{
			/* Release the HW Semaphore */
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
		}
    }
}
 8100546:	e00f      	b.n	8100568 <vGenerateRemoteInterrupt+0x54>
    else if(xUpdatedBuffer == xrx_data_buf){
 8100548:	4b09      	ldr	r3, [pc, #36]	@ (8100570 <vGenerateRemoteInterrupt+0x5c>)
 810054a:	681b      	ldr	r3, [r3, #0]
 810054c:	68fa      	ldr	r2, [r7, #12]
 810054e:	429a      	cmp	r2, r3
 8100550:	d10a      	bne.n	8100568 <vGenerateRemoteInterrupt+0x54>
		if(HAL_HSEM_Take(HSEM_RX_WAKEUP, HSEM_PROCESS) == HAL_OK)
 8100552:	211b      	movs	r1, #27
 8100554:	201e      	movs	r0, #30
 8100556:	f006 f881 	bl	810665c <HAL_HSEM_Take>
 810055a:	4603      	mov	r3, r0
 810055c:	2b00      	cmp	r3, #0
 810055e:	d103      	bne.n	8100568 <vGenerateRemoteInterrupt+0x54>
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
 8100560:	211b      	movs	r1, #27
 8100562:	201e      	movs	r0, #30
 8100564:	f006 f89e 	bl	81066a4 <HAL_HSEM_Release>
}
 8100568:	bf00      	nop
 810056a:	3710      	adds	r7, #16
 810056c:	46bd      	mov	sp, r7
 810056e:	bd80      	pop	{r7, pc}
 8100570:	38000000 	.word	0x38000000

08100574 <ipc_sendmsg>:

size_t ipc_sendmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 8100574:	b580      	push	{r7, lr}
 8100576:	b086      	sub	sp, #24
 8100578:	af00      	add	r7, sp, #0
 810057a:	60f8      	str	r0, [r7, #12]
 810057c:	60b9      	str	r1, [r7, #8]
 810057e:	607a      	str	r2, [r7, #4]
	size_t len;

    if(xtx_data_buf == 0)
 8100580:	4b0f      	ldr	r3, [pc, #60]	@ (81005c0 <ipc_sendmsg+0x4c>)
 8100582:	685b      	ldr	r3, [r3, #4]
 8100584:	2b00      	cmp	r3, #0
 8100586:	d101      	bne.n	810058c <ipc_sendmsg+0x18>
      return 0;
 8100588:	2300      	movs	r3, #0
 810058a:	e015      	b.n	81005b8 <ipc_sendmsg+0x44>

    if(timeout < 0)
 810058c:	687b      	ldr	r3, [r7, #4]
 810058e:	2b00      	cmp	r3, #0
 8100590:	da09      	bge.n	81005a6 <ipc_sendmsg+0x32>
    	len = xMessageBufferSend(xtx_data_buf, msg, size, portMAX_DELAY);
 8100592:	4b0b      	ldr	r3, [pc, #44]	@ (81005c0 <ipc_sendmsg+0x4c>)
 8100594:	6858      	ldr	r0, [r3, #4]
 8100596:	f04f 33ff 	mov.w	r3, #4294967295
 810059a:	68ba      	ldr	r2, [r7, #8]
 810059c:	68f9      	ldr	r1, [r7, #12]
 810059e:	f009 f993 	bl	81098c8 <xStreamBufferSend>
 81005a2:	6178      	str	r0, [r7, #20]
 81005a4:	e007      	b.n	81005b6 <ipc_sendmsg+0x42>
    else
    	len = xMessageBufferSend(xtx_data_buf, msg, size, (TickType_t)timeout);
 81005a6:	4b06      	ldr	r3, [pc, #24]	@ (81005c0 <ipc_sendmsg+0x4c>)
 81005a8:	6858      	ldr	r0, [r3, #4]
 81005aa:	687b      	ldr	r3, [r7, #4]
 81005ac:	68ba      	ldr	r2, [r7, #8]
 81005ae:	68f9      	ldr	r1, [r7, #12]
 81005b0:	f009 f98a 	bl	81098c8 <xStreamBufferSend>
 81005b4:	6178      	str	r0, [r7, #20]

    return len;
 81005b6:	697b      	ldr	r3, [r7, #20]
}
 81005b8:	4618      	mov	r0, r3
 81005ba:	3718      	adds	r7, #24
 81005bc:	46bd      	mov	sp, r7
 81005be:	bd80      	pop	{r7, pc}
 81005c0:	38000000 	.word	0x38000000

081005c4 <ipc_recvmsg>:

size_t ipc_recvmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 81005c4:	b580      	push	{r7, lr}
 81005c6:	b086      	sub	sp, #24
 81005c8:	af00      	add	r7, sp, #0
 81005ca:	60f8      	str	r0, [r7, #12]
 81005cc:	60b9      	str	r1, [r7, #8]
 81005ce:	607a      	str	r2, [r7, #4]
    size_t len;

    if (timeout < 0)
 81005d0:	687b      	ldr	r3, [r7, #4]
 81005d2:	2b00      	cmp	r3, #0
 81005d4:	da09      	bge.n	81005ea <ipc_recvmsg+0x26>
        len = xMessageBufferReceive(xrx_data_buf, msg, size, portMAX_DELAY);
 81005d6:	4b0b      	ldr	r3, [pc, #44]	@ (8100604 <ipc_recvmsg+0x40>)
 81005d8:	6818      	ldr	r0, [r3, #0]
 81005da:	f04f 33ff 	mov.w	r3, #4294967295
 81005de:	68ba      	ldr	r2, [r7, #8]
 81005e0:	68f9      	ldr	r1, [r7, #12]
 81005e2:	f009 fa58 	bl	8109a96 <xStreamBufferReceive>
 81005e6:	6178      	str	r0, [r7, #20]
 81005e8:	e007      	b.n	81005fa <ipc_recvmsg+0x36>
    else
        len = xMessageBufferReceive(xrx_data_buf, msg, size, (TickType_t)timeout);
 81005ea:	4b06      	ldr	r3, [pc, #24]	@ (8100604 <ipc_recvmsg+0x40>)
 81005ec:	6818      	ldr	r0, [r3, #0]
 81005ee:	687b      	ldr	r3, [r7, #4]
 81005f0:	68ba      	ldr	r2, [r7, #8]
 81005f2:	68f9      	ldr	r1, [r7, #12]
 81005f4:	f009 fa4f 	bl	8109a96 <xStreamBufferReceive>
 81005f8:	6178      	str	r0, [r7, #20]

    return len;
 81005fa:	697b      	ldr	r3, [r7, #20]
}
 81005fc:	4618      	mov	r0, r3
 81005fe:	3718      	adds	r7, #24
 8100600:	46bd      	mov	sp, r7
 8100602:	bd80      	pop	{r7, pc}
 8100604:	38000000 	.word	0x38000000

08100608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100608:	b580      	push	{r7, lr}
 810060a:	b082      	sub	sp, #8
 810060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810060e:	4b2b      	ldr	r3, [pc, #172]	@ (81006bc <main+0xb4>)
 8100610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100614:	4a29      	ldr	r2, [pc, #164]	@ (81006bc <main+0xb4>)
 8100616:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810061a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810061e:	4b27      	ldr	r3, [pc, #156]	@ (81006bc <main+0xb4>)
 8100620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100628:	607b      	str	r3, [r7, #4]
 810062a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810062c:	2001      	movs	r0, #1
 810062e:	f006 f84d 	bl	81066cc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100632:	f006 f8f1 	bl	8106818 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100636:	2201      	movs	r2, #1
 8100638:	2102      	movs	r1, #2
 810063a:	2000      	movs	r0, #0
 810063c:	f006 f872 	bl	8106724 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100640:	4b1f      	ldr	r3, [pc, #124]	@ (81006c0 <main+0xb8>)
 8100642:	681b      	ldr	r3, [r3, #0]
 8100644:	091b      	lsrs	r3, r3, #4
 8100646:	f003 030f 	and.w	r3, r3, #15
 810064a:	2b07      	cmp	r3, #7
 810064c:	d108      	bne.n	8100660 <main+0x58>
 810064e:	4b1d      	ldr	r3, [pc, #116]	@ (81006c4 <main+0xbc>)
 8100650:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100654:	4a1b      	ldr	r2, [pc, #108]	@ (81006c4 <main+0xbc>)
 8100656:	f043 0301 	orr.w	r3, r3, #1
 810065a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810065e:	e007      	b.n	8100670 <main+0x68>
 8100660:	4b18      	ldr	r3, [pc, #96]	@ (81006c4 <main+0xbc>)
 8100662:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100666:	4a17      	ldr	r2, [pc, #92]	@ (81006c4 <main+0xbc>)
 8100668:	f043 0301 	orr.w	r3, r3, #1
 810066c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100670:	f003 ff40 	bl	81044f4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MDMA_Init();
 8100674:	f000 f83a 	bl	81006ec <_ZL12MX_MDMA_Initv>
  MX_GPIO_Init();
 8100678:	f000 f852 	bl	8100720 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */
  ipc_init();
 810067c:	f7ff fea4 	bl	81003c8 <ipc_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100680:	f006 fdee 	bl	8107260 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_EDaemonN */
  Task_EDaemonNHandle = osThreadNew(StartTask_EDaemonN, NULL, &Task_EDaemonN_attributes);
 8100684:	4a10      	ldr	r2, [pc, #64]	@ (81006c8 <main+0xc0>)
 8100686:	2100      	movs	r1, #0
 8100688:	4810      	ldr	r0, [pc, #64]	@ (81006cc <main+0xc4>)
 810068a:	f006 fe48 	bl	810731e <osThreadNew>
 810068e:	4603      	mov	r3, r0
 8100690:	4a0f      	ldr	r2, [pc, #60]	@ (81006d0 <main+0xc8>)
 8100692:	6013      	str	r3, [r2, #0]

  /* creation of Task_EventMgrM4 */
  Task_EventMgrM4Handle = osThreadNew(StartTask_EventMgrM4, NULL, &Task_EventMgrM4_attributes);
 8100694:	4a0f      	ldr	r2, [pc, #60]	@ (81006d4 <main+0xcc>)
 8100696:	2100      	movs	r1, #0
 8100698:	480f      	ldr	r0, [pc, #60]	@ (81006d8 <main+0xd0>)
 810069a:	f006 fe40 	bl	810731e <osThreadNew>
 810069e:	4603      	mov	r3, r0
 81006a0:	4a0e      	ldr	r2, [pc, #56]	@ (81006dc <main+0xd4>)
 81006a2:	6013      	str	r3, [r2, #0]

  /* creation of Task_EConnMgr */
  Task_EConnMgrHandle = osThreadNew(StartTask_EdiabasConnMgr, NULL, &Task_EConnMgr_attributes);
 81006a4:	4a0e      	ldr	r2, [pc, #56]	@ (81006e0 <main+0xd8>)
 81006a6:	2100      	movs	r1, #0
 81006a8:	480e      	ldr	r0, [pc, #56]	@ (81006e4 <main+0xdc>)
 81006aa:	f006 fe38 	bl	810731e <osThreadNew>
 81006ae:	4603      	mov	r3, r0
 81006b0:	4a0d      	ldr	r2, [pc, #52]	@ (81006e8 <main+0xe0>)
 81006b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 81006b4:	f006 fdf8 	bl	81072a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81006b8:	bf00      	nop
 81006ba:	e7fd      	b.n	81006b8 <main+0xb0>
 81006bc:	58024400 	.word	0x58024400
 81006c0:	e000ed00 	.word	0xe000ed00
 81006c4:	58026400 	.word	0x58026400
 81006c8:	0811a5d4 	.word	0x0811a5d4
 81006cc:	08100cc3 	.word	0x08100cc3
 81006d0:	100000ac 	.word	0x100000ac
 81006d4:	0811a5f8 	.word	0x0811a5f8
 81006d8:	081013c9 	.word	0x081013c9
 81006dc:	100000b0 	.word	0x100000b0
 81006e0:	0811a61c 	.word	0x0811a61c
 81006e4:	08100bc5 	.word	0x08100bc5
 81006e8:	100000b4 	.word	0x100000b4

081006ec <_ZL12MX_MDMA_Initv>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 81006ec:	b480      	push	{r7}
 81006ee:	b083      	sub	sp, #12
 81006f0:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 81006f2:	4b0a      	ldr	r3, [pc, #40]	@ (810071c <_ZL12MX_MDMA_Initv+0x30>)
 81006f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81006f8:	4a08      	ldr	r2, [pc, #32]	@ (810071c <_ZL12MX_MDMA_Initv+0x30>)
 81006fa:	f043 0301 	orr.w	r3, r3, #1
 81006fe:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8100702:	4b06      	ldr	r3, [pc, #24]	@ (810071c <_ZL12MX_MDMA_Initv+0x30>)
 8100704:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100708:	f003 0301 	and.w	r3, r3, #1
 810070c:	607b      	str	r3, [r7, #4]
 810070e:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 8100710:	bf00      	nop
 8100712:	370c      	adds	r7, #12
 8100714:	46bd      	mov	sp, r7
 8100716:	f85d 7b04 	ldr.w	r7, [sp], #4
 810071a:	4770      	bx	lr
 810071c:	58024400 	.word	0x58024400

08100720 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100720:	b480      	push	{r7}
 8100722:	b087      	sub	sp, #28
 8100724:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100726:	4b30      	ldr	r3, [pc, #192]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810072c:	4a2e      	ldr	r2, [pc, #184]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 810072e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100732:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100736:	4b2c      	ldr	r3, [pc, #176]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810073c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100740:	617b      	str	r3, [r7, #20]
 8100742:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100744:	4b28      	ldr	r3, [pc, #160]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810074a:	4a27      	ldr	r2, [pc, #156]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 810074c:	f043 0310 	orr.w	r3, r3, #16
 8100750:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100754:	4b24      	ldr	r3, [pc, #144]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810075a:	f003 0310 	and.w	r3, r3, #16
 810075e:	613b      	str	r3, [r7, #16]
 8100760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100762:	4b21      	ldr	r3, [pc, #132]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100768:	4a1f      	ldr	r2, [pc, #124]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 810076a:	f043 0304 	orr.w	r3, r3, #4
 810076e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100772:	4b1d      	ldr	r3, [pc, #116]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100778:	f003 0304 	and.w	r3, r3, #4
 810077c:	60fb      	str	r3, [r7, #12]
 810077e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100780:	4b19      	ldr	r3, [pc, #100]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100786:	4a18      	ldr	r2, [pc, #96]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100788:	f043 0301 	orr.w	r3, r3, #1
 810078c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100790:	4b15      	ldr	r3, [pc, #84]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100796:	f003 0301 	and.w	r3, r3, #1
 810079a:	60bb      	str	r3, [r7, #8]
 810079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810079e:	4b12      	ldr	r3, [pc, #72]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 81007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007a4:	4a10      	ldr	r2, [pc, #64]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 81007a6:	f043 0302 	orr.w	r3, r3, #2
 81007aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81007ae:	4b0e      	ldr	r3, [pc, #56]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 81007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007b4:	f003 0302 	and.w	r3, r3, #2
 81007b8:	607b      	str	r3, [r7, #4]
 81007ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 81007bc:	4b0a      	ldr	r3, [pc, #40]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 81007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007c2:	4a09      	ldr	r2, [pc, #36]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 81007c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81007c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81007cc:	4b06      	ldr	r3, [pc, #24]	@ (81007e8 <_ZL12MX_GPIO_Initv+0xc8>)
 81007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81007d6:	603b      	str	r3, [r7, #0]
 81007d8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81007da:	bf00      	nop
 81007dc:	371c      	adds	r7, #28
 81007de:	46bd      	mov	sp, r7
 81007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007e4:	4770      	bx	lr
 81007e6:	bf00      	nop
 81007e8:	58024400 	.word	0x58024400

081007ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81007ec:	b580      	push	{r7, lr}
 81007ee:	b082      	sub	sp, #8
 81007f0:	af00      	add	r7, sp, #0
 81007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 81007f4:	687b      	ldr	r3, [r7, #4]
 81007f6:	681b      	ldr	r3, [r3, #0]
 81007f8:	4a04      	ldr	r2, [pc, #16]	@ (810080c <HAL_TIM_PeriodElapsedCallback+0x20>)
 81007fa:	4293      	cmp	r3, r2
 81007fc:	d101      	bne.n	8100802 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 81007fe:	f003 fed7 	bl	81045b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100802:	bf00      	nop
 8100804:	3708      	adds	r7, #8
 8100806:	46bd      	mov	sp, r7
 8100808:	bd80      	pop	{r7, pc}
 810080a:	bf00      	nop
 810080c:	40001000 	.word	0x40001000

08100810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100810:	b480      	push	{r7}
 8100812:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8100814:	b672      	cpsid	i
}
 8100816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100818:	bf00      	nop
 810081a:	e7fd      	b.n	8100818 <Error_Handler+0x8>

0810081c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 810081c:	b580      	push	{r7, lr}
 810081e:	b082      	sub	sp, #8
 8100820:	af00      	add	r7, sp, #0
 8100822:	6078      	str	r0, [r7, #4]
 8100824:	6039      	str	r1, [r7, #0]
 8100826:	687b      	ldr	r3, [r7, #4]
 8100828:	2b01      	cmp	r3, #1
 810082a:	d11c      	bne.n	8100866 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 810082c:	683b      	ldr	r3, [r7, #0]
 810082e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8100832:	4293      	cmp	r3, r2
 8100834:	d117      	bne.n	8100866 <_Z41__static_initialization_and_destruction_0ii+0x4a>
QueueHandle_t queueToEventManagerCM4 = xQueueCreate(8, sizeof(SMessage));
 8100836:	2200      	movs	r2, #0
 8100838:	2118      	movs	r1, #24
 810083a:	2008      	movs	r0, #8
 810083c:	f007 ff8d 	bl	810875a <xQueueGenericCreate>
 8100840:	4603      	mov	r3, r0
 8100842:	4a0b      	ldr	r2, [pc, #44]	@ (8100870 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8100844:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToNativeDaemon = xQueueCreate(16, sizeof(SMessage));
 8100846:	2200      	movs	r2, #0
 8100848:	2118      	movs	r1, #24
 810084a:	2010      	movs	r0, #16
 810084c:	f007 ff85 	bl	810875a <xQueueGenericCreate>
 8100850:	4603      	mov	r3, r0
 8100852:	4a08      	ldr	r2, [pc, #32]	@ (8100874 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8100854:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToEdiabasConnMgr = xQueueCreate(64, sizeof(SMessage));
 8100856:	2200      	movs	r2, #0
 8100858:	2118      	movs	r1, #24
 810085a:	2040      	movs	r0, #64	@ 0x40
 810085c:	f007 ff7d 	bl	810875a <xQueueGenericCreate>
 8100860:	4603      	mov	r3, r0
 8100862:	4a05      	ldr	r2, [pc, #20]	@ (8100878 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8100864:	6013      	str	r3, [r2, #0]
}
 8100866:	bf00      	nop
 8100868:	3708      	adds	r7, #8
 810086a:	46bd      	mov	sp, r7
 810086c:	bd80      	pop	{r7, pc}
 810086e:	bf00      	nop
 8100870:	100000b8 	.word	0x100000b8
 8100874:	100000bc 	.word	0x100000bc
 8100878:	100000c0 	.word	0x100000c0

0810087c <_GLOBAL__sub_I_huart1>:
 810087c:	b580      	push	{r7, lr}
 810087e:	af00      	add	r7, sp, #0
 8100880:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8100884:	2001      	movs	r0, #1
 8100886:	f7ff ffc9 	bl	810081c <_Z41__static_initialization_and_destruction_0ii>
 810088a:	bd80      	pop	{r7, pc}

0810088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810088c:	b580      	push	{r7, lr}
 810088e:	b082      	sub	sp, #8
 8100890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100892:	4b10      	ldr	r3, [pc, #64]	@ (81008d4 <HAL_MspInit+0x48>)
 8100894:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100898:	4a0e      	ldr	r2, [pc, #56]	@ (81008d4 <HAL_MspInit+0x48>)
 810089a:	f043 0302 	orr.w	r3, r3, #2
 810089e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81008a2:	4b0c      	ldr	r3, [pc, #48]	@ (81008d4 <HAL_MspInit+0x48>)
 81008a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81008a8:	f003 0302 	and.w	r3, r3, #2
 81008ac:	607b      	str	r3, [r7, #4]
 81008ae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 81008b0:	2200      	movs	r2, #0
 81008b2:	210f      	movs	r1, #15
 81008b4:	f06f 0001 	mvn.w	r0, #1
 81008b8:	f003 ff66 	bl	8104788 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 81008bc:	2200      	movs	r2, #0
 81008be:	2105      	movs	r1, #5
 81008c0:	207e      	movs	r0, #126	@ 0x7e
 81008c2:	f003 ff61 	bl	8104788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 81008c6:	207e      	movs	r0, #126	@ 0x7e
 81008c8:	f003 ff78 	bl	81047bc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81008cc:	bf00      	nop
 81008ce:	3708      	adds	r7, #8
 81008d0:	46bd      	mov	sp, r7
 81008d2:	bd80      	pop	{r7, pc}
 81008d4:	58024400 	.word	0x58024400

081008d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81008d8:	b580      	push	{r7, lr}
 81008da:	b090      	sub	sp, #64	@ 0x40
 81008dc:	af00      	add	r7, sp, #0
 81008de:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81008e0:	687b      	ldr	r3, [r7, #4]
 81008e2:	2b0f      	cmp	r3, #15
 81008e4:	d827      	bhi.n	8100936 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 81008e6:	2200      	movs	r2, #0
 81008e8:	6879      	ldr	r1, [r7, #4]
 81008ea:	2036      	movs	r0, #54	@ 0x36
 81008ec:	f003 ff4c 	bl	8104788 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 81008f0:	2036      	movs	r0, #54	@ 0x36
 81008f2:	f003 ff63 	bl	81047bc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 81008f6:	4a29      	ldr	r2, [pc, #164]	@ (810099c <HAL_InitTick+0xc4>)
 81008f8:	687b      	ldr	r3, [r7, #4]
 81008fa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 81008fc:	4b28      	ldr	r3, [pc, #160]	@ (81009a0 <HAL_InitTick+0xc8>)
 81008fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100902:	4a27      	ldr	r2, [pc, #156]	@ (81009a0 <HAL_InitTick+0xc8>)
 8100904:	f043 0310 	orr.w	r3, r3, #16
 8100908:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810090c:	4b24      	ldr	r3, [pc, #144]	@ (81009a0 <HAL_InitTick+0xc8>)
 810090e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100912:	f003 0310 	and.w	r3, r3, #16
 8100916:	60fb      	str	r3, [r7, #12]
 8100918:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810091a:	f107 0210 	add.w	r2, r7, #16
 810091e:	f107 0314 	add.w	r3, r7, #20
 8100922:	4611      	mov	r1, r2
 8100924:	4618      	mov	r0, r3
 8100926:	f006 f947 	bl	8106bb8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 810092a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810092c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 810092e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8100930:	2b00      	cmp	r3, #0
 8100932:	d106      	bne.n	8100942 <HAL_InitTick+0x6a>
 8100934:	e001      	b.n	810093a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8100936:	2301      	movs	r3, #1
 8100938:	e02b      	b.n	8100992 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810093a:	f006 f927 	bl	8106b8c <HAL_RCC_GetPCLK1Freq>
 810093e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8100940:	e004      	b.n	810094c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100942:	f006 f923 	bl	8106b8c <HAL_RCC_GetPCLK1Freq>
 8100946:	4603      	mov	r3, r0
 8100948:	005b      	lsls	r3, r3, #1
 810094a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 810094c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810094e:	4a15      	ldr	r2, [pc, #84]	@ (81009a4 <HAL_InitTick+0xcc>)
 8100950:	fba2 2303 	umull	r2, r3, r2, r3
 8100954:	0c9b      	lsrs	r3, r3, #18
 8100956:	3b01      	subs	r3, #1
 8100958:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 810095a:	4b13      	ldr	r3, [pc, #76]	@ (81009a8 <HAL_InitTick+0xd0>)
 810095c:	4a13      	ldr	r2, [pc, #76]	@ (81009ac <HAL_InitTick+0xd4>)
 810095e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8100960:	4b11      	ldr	r3, [pc, #68]	@ (81009a8 <HAL_InitTick+0xd0>)
 8100962:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8100966:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8100968:	4a0f      	ldr	r2, [pc, #60]	@ (81009a8 <HAL_InitTick+0xd0>)
 810096a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810096c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 810096e:	4b0e      	ldr	r3, [pc, #56]	@ (81009a8 <HAL_InitTick+0xd0>)
 8100970:	2200      	movs	r2, #0
 8100972:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100974:	4b0c      	ldr	r3, [pc, #48]	@ (81009a8 <HAL_InitTick+0xd0>)
 8100976:	2200      	movs	r2, #0
 8100978:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 810097a:	480b      	ldr	r0, [pc, #44]	@ (81009a8 <HAL_InitTick+0xd0>)
 810097c:	f006 f95e 	bl	8106c3c <HAL_TIM_Base_Init>
 8100980:	4603      	mov	r3, r0
 8100982:	2b00      	cmp	r3, #0
 8100984:	d104      	bne.n	8100990 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8100986:	4808      	ldr	r0, [pc, #32]	@ (81009a8 <HAL_InitTick+0xd0>)
 8100988:	f006 f9ba 	bl	8106d00 <HAL_TIM_Base_Start_IT>
 810098c:	4603      	mov	r3, r0
 810098e:	e000      	b.n	8100992 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8100990:	2301      	movs	r3, #1
}
 8100992:	4618      	mov	r0, r3
 8100994:	3740      	adds	r7, #64	@ 0x40
 8100996:	46bd      	mov	sp, r7
 8100998:	bd80      	pop	{r7, pc}
 810099a:	bf00      	nop
 810099c:	1000001c 	.word	0x1000001c
 81009a0:	58024400 	.word	0x58024400
 81009a4:	431bde83 	.word	0x431bde83
 81009a8:	100000c4 	.word	0x100000c4
 81009ac:	40001000 	.word	0x40001000

081009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81009b0:	b480      	push	{r7}
 81009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81009b4:	bf00      	nop
 81009b6:	e7fd      	b.n	81009b4 <NMI_Handler+0x4>

081009b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81009b8:	b480      	push	{r7}
 81009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81009bc:	bf00      	nop
 81009be:	e7fd      	b.n	81009bc <HardFault_Handler+0x4>

081009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81009c0:	b480      	push	{r7}
 81009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81009c4:	bf00      	nop
 81009c6:	e7fd      	b.n	81009c4 <MemManage_Handler+0x4>

081009c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81009c8:	b480      	push	{r7}
 81009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81009cc:	bf00      	nop
 81009ce:	e7fd      	b.n	81009cc <BusFault_Handler+0x4>

081009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81009d0:	b480      	push	{r7}
 81009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81009d4:	bf00      	nop
 81009d6:	e7fd      	b.n	81009d4 <UsageFault_Handler+0x4>

081009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81009d8:	b480      	push	{r7}
 81009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81009dc:	bf00      	nop
 81009de:	46bd      	mov	sp, r7
 81009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009e4:	4770      	bx	lr
	...

081009e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 81009e8:	b580      	push	{r7, lr}
 81009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 81009ec:	4802      	ldr	r0, [pc, #8]	@ (81009f8 <TIM6_DAC_IRQHandler+0x10>)
 81009ee:	f006 f9ff 	bl	8106df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 81009f2:	bf00      	nop
 81009f4:	bd80      	pop	{r7, pc}
 81009f6:	bf00      	nop
 81009f8:	100000c4 	.word	0x100000c4

081009fc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 81009fc:	b580      	push	{r7, lr}
 81009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8100a00:	4802      	ldr	r0, [pc, #8]	@ (8100a0c <ETH_IRQHandler+0x10>)
 8100a02:	f004 fad3 	bl	8104fac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8100a06:	bf00      	nop
 8100a08:	bd80      	pop	{r7, pc}
 8100a0a:	bf00      	nop
 8100a0c:	10000194 	.word	0x10000194

08100a10 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8100a10:	b580      	push	{r7, lr}
 8100a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8100a14:	4802      	ldr	r0, [pc, #8]	@ (8100a20 <ETH_WKUP_IRQHandler+0x10>)
 8100a16:	f004 fac9 	bl	8104fac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8100a1a:	bf00      	nop
 8100a1c:	bd80      	pop	{r7, pc}
 8100a1e:	bf00      	nop
 8100a20:	10000194 	.word	0x10000194

08100a24 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8100a24:	b580      	push	{r7, lr}
 8100a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8100a28:	f005 fe62 	bl	81066f0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100a2c:	bf00      	nop
 8100a2e:	bd80      	pop	{r7, pc}

08100a30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8100a30:	b480      	push	{r7}
 8100a32:	af00      	add	r7, sp, #0
	return 1;
 8100a34:	2301      	movs	r3, #1
}
 8100a36:	4618      	mov	r0, r3
 8100a38:	46bd      	mov	sp, r7
 8100a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a3e:	4770      	bx	lr

08100a40 <_kill>:

int _kill(int pid, int sig)
{
 8100a40:	b480      	push	{r7}
 8100a42:	b083      	sub	sp, #12
 8100a44:	af00      	add	r7, sp, #0
 8100a46:	6078      	str	r0, [r7, #4]
 8100a48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8100a4a:	4b05      	ldr	r3, [pc, #20]	@ (8100a60 <_kill+0x20>)
 8100a4c:	2216      	movs	r2, #22
 8100a4e:	601a      	str	r2, [r3, #0]
	return -1;
 8100a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100a54:	4618      	mov	r0, r3
 8100a56:	370c      	adds	r7, #12
 8100a58:	46bd      	mov	sp, r7
 8100a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a5e:	4770      	bx	lr
 8100a60:	1000ba04 	.word	0x1000ba04

08100a64 <_exit>:

void _exit (int status)
{
 8100a64:	b580      	push	{r7, lr}
 8100a66:	b082      	sub	sp, #8
 8100a68:	af00      	add	r7, sp, #0
 8100a6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8100a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8100a70:	6878      	ldr	r0, [r7, #4]
 8100a72:	f7ff ffe5 	bl	8100a40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8100a76:	bf00      	nop
 8100a78:	e7fd      	b.n	8100a76 <_exit+0x12>

08100a7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8100a7a:	b580      	push	{r7, lr}
 8100a7c:	b086      	sub	sp, #24
 8100a7e:	af00      	add	r7, sp, #0
 8100a80:	60f8      	str	r0, [r7, #12]
 8100a82:	60b9      	str	r1, [r7, #8]
 8100a84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100a86:	2300      	movs	r3, #0
 8100a88:	617b      	str	r3, [r7, #20]
 8100a8a:	e00a      	b.n	8100aa2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8100a8c:	f3af 8000 	nop.w
 8100a90:	4601      	mov	r1, r0
 8100a92:	68bb      	ldr	r3, [r7, #8]
 8100a94:	1c5a      	adds	r2, r3, #1
 8100a96:	60ba      	str	r2, [r7, #8]
 8100a98:	b2ca      	uxtb	r2, r1
 8100a9a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100a9c:	697b      	ldr	r3, [r7, #20]
 8100a9e:	3301      	adds	r3, #1
 8100aa0:	617b      	str	r3, [r7, #20]
 8100aa2:	697a      	ldr	r2, [r7, #20]
 8100aa4:	687b      	ldr	r3, [r7, #4]
 8100aa6:	429a      	cmp	r2, r3
 8100aa8:	dbf0      	blt.n	8100a8c <_read+0x12>
	}

return len;
 8100aaa:	687b      	ldr	r3, [r7, #4]
}
 8100aac:	4618      	mov	r0, r3
 8100aae:	3718      	adds	r7, #24
 8100ab0:	46bd      	mov	sp, r7
 8100ab2:	bd80      	pop	{r7, pc}

08100ab4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8100ab4:	b580      	push	{r7, lr}
 8100ab6:	b086      	sub	sp, #24
 8100ab8:	af00      	add	r7, sp, #0
 8100aba:	60f8      	str	r0, [r7, #12]
 8100abc:	60b9      	str	r1, [r7, #8]
 8100abe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100ac0:	2300      	movs	r3, #0
 8100ac2:	617b      	str	r3, [r7, #20]
 8100ac4:	e009      	b.n	8100ada <_write+0x26>
	{
		__io_putchar(*ptr++);
 8100ac6:	68bb      	ldr	r3, [r7, #8]
 8100ac8:	1c5a      	adds	r2, r3, #1
 8100aca:	60ba      	str	r2, [r7, #8]
 8100acc:	781b      	ldrb	r3, [r3, #0]
 8100ace:	4618      	mov	r0, r3
 8100ad0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100ad4:	697b      	ldr	r3, [r7, #20]
 8100ad6:	3301      	adds	r3, #1
 8100ad8:	617b      	str	r3, [r7, #20]
 8100ada:	697a      	ldr	r2, [r7, #20]
 8100adc:	687b      	ldr	r3, [r7, #4]
 8100ade:	429a      	cmp	r2, r3
 8100ae0:	dbf1      	blt.n	8100ac6 <_write+0x12>
	}
	return len;
 8100ae2:	687b      	ldr	r3, [r7, #4]
}
 8100ae4:	4618      	mov	r0, r3
 8100ae6:	3718      	adds	r7, #24
 8100ae8:	46bd      	mov	sp, r7
 8100aea:	bd80      	pop	{r7, pc}

08100aec <_close>:

int _close(int file)
{
 8100aec:	b480      	push	{r7}
 8100aee:	b083      	sub	sp, #12
 8100af0:	af00      	add	r7, sp, #0
 8100af2:	6078      	str	r0, [r7, #4]
	return -1;
 8100af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100af8:	4618      	mov	r0, r3
 8100afa:	370c      	adds	r7, #12
 8100afc:	46bd      	mov	sp, r7
 8100afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b02:	4770      	bx	lr

08100b04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8100b04:	b480      	push	{r7}
 8100b06:	b083      	sub	sp, #12
 8100b08:	af00      	add	r7, sp, #0
 8100b0a:	6078      	str	r0, [r7, #4]
 8100b0c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8100b0e:	683b      	ldr	r3, [r7, #0]
 8100b10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8100b14:	605a      	str	r2, [r3, #4]
	return 0;
 8100b16:	2300      	movs	r3, #0
}
 8100b18:	4618      	mov	r0, r3
 8100b1a:	370c      	adds	r7, #12
 8100b1c:	46bd      	mov	sp, r7
 8100b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b22:	4770      	bx	lr

08100b24 <_isatty>:

int _isatty(int file)
{
 8100b24:	b480      	push	{r7}
 8100b26:	b083      	sub	sp, #12
 8100b28:	af00      	add	r7, sp, #0
 8100b2a:	6078      	str	r0, [r7, #4]
	return 1;
 8100b2c:	2301      	movs	r3, #1
}
 8100b2e:	4618      	mov	r0, r3
 8100b30:	370c      	adds	r7, #12
 8100b32:	46bd      	mov	sp, r7
 8100b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b38:	4770      	bx	lr

08100b3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8100b3a:	b480      	push	{r7}
 8100b3c:	b085      	sub	sp, #20
 8100b3e:	af00      	add	r7, sp, #0
 8100b40:	60f8      	str	r0, [r7, #12]
 8100b42:	60b9      	str	r1, [r7, #8]
 8100b44:	607a      	str	r2, [r7, #4]
	return 0;
 8100b46:	2300      	movs	r3, #0
}
 8100b48:	4618      	mov	r0, r3
 8100b4a:	3714      	adds	r7, #20
 8100b4c:	46bd      	mov	sp, r7
 8100b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b52:	4770      	bx	lr

08100b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100b54:	b480      	push	{r7}
 8100b56:	b087      	sub	sp, #28
 8100b58:	af00      	add	r7, sp, #0
 8100b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100b5c:	4a14      	ldr	r2, [pc, #80]	@ (8100bb0 <_sbrk+0x5c>)
 8100b5e:	4b15      	ldr	r3, [pc, #84]	@ (8100bb4 <_sbrk+0x60>)
 8100b60:	1ad3      	subs	r3, r2, r3
 8100b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100b64:	697b      	ldr	r3, [r7, #20]
 8100b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100b68:	4b13      	ldr	r3, [pc, #76]	@ (8100bb8 <_sbrk+0x64>)
 8100b6a:	681b      	ldr	r3, [r3, #0]
 8100b6c:	2b00      	cmp	r3, #0
 8100b6e:	d102      	bne.n	8100b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100b70:	4b11      	ldr	r3, [pc, #68]	@ (8100bb8 <_sbrk+0x64>)
 8100b72:	4a12      	ldr	r2, [pc, #72]	@ (8100bbc <_sbrk+0x68>)
 8100b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100b76:	4b10      	ldr	r3, [pc, #64]	@ (8100bb8 <_sbrk+0x64>)
 8100b78:	681a      	ldr	r2, [r3, #0]
 8100b7a:	687b      	ldr	r3, [r7, #4]
 8100b7c:	4413      	add	r3, r2
 8100b7e:	693a      	ldr	r2, [r7, #16]
 8100b80:	429a      	cmp	r2, r3
 8100b82:	d205      	bcs.n	8100b90 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8100b84:	4b0e      	ldr	r3, [pc, #56]	@ (8100bc0 <_sbrk+0x6c>)
 8100b86:	220c      	movs	r2, #12
 8100b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8100b8e:	e009      	b.n	8100ba4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8100b90:	4b09      	ldr	r3, [pc, #36]	@ (8100bb8 <_sbrk+0x64>)
 8100b92:	681b      	ldr	r3, [r3, #0]
 8100b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100b96:	4b08      	ldr	r3, [pc, #32]	@ (8100bb8 <_sbrk+0x64>)
 8100b98:	681a      	ldr	r2, [r3, #0]
 8100b9a:	687b      	ldr	r3, [r7, #4]
 8100b9c:	4413      	add	r3, r2
 8100b9e:	4a06      	ldr	r2, [pc, #24]	@ (8100bb8 <_sbrk+0x64>)
 8100ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100ba2:	68fb      	ldr	r3, [r7, #12]
}
 8100ba4:	4618      	mov	r0, r3
 8100ba6:	371c      	adds	r7, #28
 8100ba8:	46bd      	mov	sp, r7
 8100baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bae:	4770      	bx	lr
 8100bb0:	10048000 	.word	0x10048000
 8100bb4:	00001000 	.word	0x00001000
 8100bb8:	10000110 	.word	0x10000110
 8100bbc:	1000ba10 	.word	0x1000ba10
 8100bc0:	1000ba04 	.word	0x1000ba04

08100bc4 <_Z24StartTask_EdiabasConnMgrPv>:
#include <string.h>

extern QueueHandle_t queueToEdiabasConnMgr;

void StartTask_EdiabasConnMgr(void *argument)
{
 8100bc4:	b590      	push	{r4, r7, lr}
 8100bc6:	b087      	sub	sp, #28
 8100bc8:	af00      	add	r7, sp, #0
 8100bca:	6078      	str	r0, [r7, #4]
	osDelay(30000);
 8100bcc:	f247 5030 	movw	r0, #30000	@ 0x7530
 8100bd0:	f006 fc37 	bl	8107442 <osDelay>
	MX_LWIP_Init();
 8100bd4:	f002 fcc0 	bl	8103558 <MX_LWIP_Init>

	const char* message = "Hello UDP message!\n\r";
 8100bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8100c50 <_Z24StartTask_EdiabasConnMgrPv+0x8c>)
 8100bda:	617b      	str	r3, [r7, #20]

	osDelay(1000);
 8100bdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8100be0:	f006 fc2f 	bl	8107442 <osDelay>

//	memp_init();

	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 192, 168, 1, 1);
 8100be4:	4b1b      	ldr	r3, [pc, #108]	@ (8100c54 <_Z24StartTask_EdiabasConnMgrPv+0x90>)
 8100be6:	60bb      	str	r3, [r7, #8]

	struct udp_pcb* my_udp = udp_new();
 8100be8:	f015 fb8a 	bl	8116300 <udp_new>
 8100bec:	6138      	str	r0, [r7, #16]
	udp_connect(my_udp, &PC_IPADDR, 55151);
 8100bee:	f107 0308 	add.w	r3, r7, #8
 8100bf2:	f24d 726f 	movw	r2, #55151	@ 0xd76f
 8100bf6:	4619      	mov	r1, r3
 8100bf8:	6938      	ldr	r0, [r7, #16]
 8100bfa:	f015 fb13 	bl	8116224 <udp_connect>
	struct pbuf* udp_buffer = NULL;
 8100bfe:	2300      	movs	r3, #0
 8100c00:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {
	  osDelay(1000);
 8100c02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8100c06:	f006 fc1c 	bl	8107442 <osDelay>
	  /* !! PBUF_RAM is critical for correct operation !! */
	  udp_buffer = pbuf_alloc(PBUF_TRANSPORT, strlen(message), PBUF_RAM);
 8100c0a:	6978      	ldr	r0, [r7, #20]
 8100c0c:	f7ff fb68 	bl	81002e0 <strlen>
 8100c10:	4603      	mov	r3, r0
 8100c12:	b29b      	uxth	r3, r3
 8100c14:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8100c18:	4619      	mov	r1, r3
 8100c1a:	2036      	movs	r0, #54	@ 0x36
 8100c1c:	f00e fbd0 	bl	810f3c0 <pbuf_alloc>
 8100c20:	60f8      	str	r0, [r7, #12]

	  if (udp_buffer != NULL)
 8100c22:	68fb      	ldr	r3, [r7, #12]
 8100c24:	2b00      	cmp	r3, #0
 8100c26:	d0ec      	beq.n	8100c02 <_Z24StartTask_EdiabasConnMgrPv+0x3e>
	  {
	    memcpy(udp_buffer->payload, message, strlen(message));
 8100c28:	68fb      	ldr	r3, [r7, #12]
 8100c2a:	685c      	ldr	r4, [r3, #4]
 8100c2c:	6978      	ldr	r0, [r7, #20]
 8100c2e:	f7ff fb57 	bl	81002e0 <strlen>
 8100c32:	4603      	mov	r3, r0
 8100c34:	461a      	mov	r2, r3
 8100c36:	6979      	ldr	r1, [r7, #20]
 8100c38:	4620      	mov	r0, r4
 8100c3a:	f015 fff4 	bl	8116c26 <memcpy>
	    udp_send(my_udp, udp_buffer);
 8100c3e:	68f9      	ldr	r1, [r7, #12]
 8100c40:	6938      	ldr	r0, [r7, #16]
 8100c42:	f015 f87d 	bl	8115d40 <udp_send>
	    pbuf_free(udp_buffer);
 8100c46:	68f8      	ldr	r0, [r7, #12]
 8100c48:	f00e fea2 	bl	810f990 <pbuf_free>
	  osDelay(1000);
 8100c4c:	e7d9      	b.n	8100c02 <_Z24StartTask_EdiabasConnMgrPv+0x3e>
 8100c4e:	bf00      	nop
 8100c50:	081176a8 	.word	0x081176a8
 8100c54:	0101a8c0 	.word	0x0101a8c0

08100c58 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8100c58:	b480      	push	{r7}
 8100c5a:	b083      	sub	sp, #12
 8100c5c:	af00      	add	r7, sp, #0
 8100c5e:	6078      	str	r0, [r7, #4]
 8100c60:	6039      	str	r1, [r7, #0]
 8100c62:	683b      	ldr	r3, [r7, #0]
 8100c64:	4618      	mov	r0, r3
 8100c66:	370c      	adds	r7, #12
 8100c68:	46bd      	mov	sp, r7
 8100c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c6e:	4770      	bx	lr

08100c70 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8100c70:	b480      	push	{r7}
 8100c72:	b083      	sub	sp, #12
 8100c74:	af00      	add	r7, sp, #0
 8100c76:	6078      	str	r0, [r7, #4]
 8100c78:	687b      	ldr	r3, [r7, #4]
 8100c7a:	4618      	mov	r0, r3
 8100c7c:	370c      	adds	r7, #12
 8100c7e:	46bd      	mov	sp, r7
 8100c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c84:	4770      	bx	lr

08100c86 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8100c86:	b480      	push	{r7}
 8100c88:	b083      	sub	sp, #12
 8100c8a:	af00      	add	r7, sp, #0
 8100c8c:	6078      	str	r0, [r7, #4]
 8100c8e:	687b      	ldr	r3, [r7, #4]
 8100c90:	4618      	mov	r0, r3
 8100c92:	370c      	adds	r7, #12
 8100c94:	46bd      	mov	sp, r7
 8100c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c9a:	4770      	bx	lr

08100c9c <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8100c9c:	b580      	push	{r7, lr}
 8100c9e:	b082      	sub	sp, #8
 8100ca0:	af00      	add	r7, sp, #0
 8100ca2:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8100ca4:	687b      	ldr	r3, [r7, #4]
 8100ca6:	689b      	ldr	r3, [r3, #8]
 8100ca8:	2b00      	cmp	r3, #0
 8100caa:	d005      	beq.n	8100cb8 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8100cac:	687b      	ldr	r3, [r7, #4]
 8100cae:	689b      	ldr	r3, [r3, #8]
 8100cb0:	6878      	ldr	r0, [r7, #4]
 8100cb2:	6879      	ldr	r1, [r7, #4]
 8100cb4:	2203      	movs	r2, #3
 8100cb6:	4798      	blx	r3
    }
 8100cb8:	687b      	ldr	r3, [r7, #4]
 8100cba:	4618      	mov	r0, r3
 8100cbc:	3708      	adds	r7, #8
 8100cbe:	46bd      	mov	sp, r7
 8100cc0:	bd80      	pop	{r7, pc}

08100cc2 <_Z18StartTask_EDaemonNPv>:
#include "cm_ipc.h"

extern QueueHandle_t queueToNativeDaemon;

void StartTask_EDaemonN(void *argument)
{
 8100cc2:	b580      	push	{r7, lr}
 8100cc4:	b086      	sub	sp, #24
 8100cc6:	af00      	add	r7, sp, #0
 8100cc8:	6078      	str	r0, [r7, #4]
	ipc_start();
 8100cca:	f7ff fbcd 	bl	8100468 <ipc_start>
	EdiabasDaemonNativeTask EdiabasDaemonNativeTaskInstance;
 8100cce:	f107 030c 	add.w	r3, r7, #12
 8100cd2:	4618      	mov	r0, r3
 8100cd4:	f000 f80a 	bl	8100cec <_ZN23EdiabasDaemonNativeTaskC1Ev>

	for(;;)
	{
		EdiabasDaemonNativeTaskInstance.process();
 8100cd8:	f107 030c 	add.w	r3, r7, #12
 8100cdc:	4618      	mov	r0, r3
 8100cde:	f000 f85c 	bl	8100d9a <_ZN23EdiabasDaemonNativeTask7processEv>
		osDelay(1);
 8100ce2:	2001      	movs	r0, #1
 8100ce4:	f006 fbad 	bl	8107442 <osDelay>
		EdiabasDaemonNativeTaskInstance.process();
 8100ce8:	bf00      	nop
 8100cea:	e7f5      	b.n	8100cd8 <_Z18StartTask_EDaemonNPv+0x16>

08100cec <_ZN23EdiabasDaemonNativeTaskC1Ev>:
	}
}

EdiabasDaemonNativeTask::EdiabasDaemonNativeTask() : event_bus(EventBusManager(queueToNativeDaemon, EVENT_CLIENT_DAEMON_NATIVE)) {}
 8100cec:	b580      	push	{r7, lr}
 8100cee:	b082      	sub	sp, #8
 8100cf0:	af00      	add	r7, sp, #0
 8100cf2:	6078      	str	r0, [r7, #4]
 8100cf4:	687b      	ldr	r3, [r7, #4]
 8100cf6:	4a05      	ldr	r2, [pc, #20]	@ (8100d0c <_ZN23EdiabasDaemonNativeTaskC1Ev+0x20>)
 8100cf8:	6811      	ldr	r1, [r2, #0]
 8100cfa:	2204      	movs	r2, #4
 8100cfc:	4618      	mov	r0, r3
 8100cfe:	f000 fa97 	bl	8101230 <_ZN15EventBusManagerC1EP15QueueDefinition12EEventClient>
 8100d02:	687b      	ldr	r3, [r7, #4]
 8100d04:	4618      	mov	r0, r3
 8100d06:	3708      	adds	r7, #8
 8100d08:	46bd      	mov	sp, r7
 8100d0a:	bd80      	pop	{r7, pc}
 8100d0c:	100000bc 	.word	0x100000bc

08100d10 <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClient>:

void EdiabasDaemonNativeTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender)
{
 8100d10:	b082      	sub	sp, #8
 8100d12:	b480      	push	{r7}
 8100d14:	b083      	sub	sp, #12
 8100d16:	af00      	add	r7, sp, #0
 8100d18:	6078      	str	r0, [r7, #4]
 8100d1a:	f107 0010 	add.w	r0, r7, #16
 8100d1e:	e880 000c 	stmia.w	r0, {r2, r3}
 8100d22:	460b      	mov	r3, r1
 8100d24:	70fb      	strb	r3, [r7, #3]
////	case EVENT_CLIENT_DATA_MANAGER:
//		event_bus.send(event, msg, eventReceiver);
//	default:
//		break;;
//	}
}
 8100d26:	bf00      	nop
 8100d28:	370c      	adds	r7, #12
 8100d2a:	46bd      	mov	sp, r7
 8100d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d30:	b002      	add	sp, #8
 8100d32:	4770      	bx	lr

08100d34 <_ZZN23EdiabasDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientE_clES0_S1_S2_>:
	size_t ret = ipc_recvmsg(&msg, len, 0);
	if(ret == len)
	{
		ipc_sendmsg(&msg, len, 0);
	}
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender){this->OnEvent(event, msg, eventSender);});
 8100d34:	b082      	sub	sp, #8
 8100d36:	b5b0      	push	{r4, r5, r7, lr}
 8100d38:	b086      	sub	sp, #24
 8100d3a:	af04      	add	r7, sp, #16
 8100d3c:	6078      	str	r0, [r7, #4]
 8100d3e:	f107 0018 	add.w	r0, r7, #24
 8100d42:	e880 000c 	stmia.w	r0, {r2, r3}
 8100d46:	460b      	mov	r3, r1
 8100d48:	70fb      	strb	r3, [r7, #3]
 8100d4a:	687b      	ldr	r3, [r7, #4]
 8100d4c:	681c      	ldr	r4, [r3, #0]
 8100d4e:	78fd      	ldrb	r5, [r7, #3]
 8100d50:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8100d54:	9302      	str	r3, [sp, #8]
 8100d56:	466a      	mov	r2, sp
 8100d58:	f107 0320 	add.w	r3, r7, #32
 8100d5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8100d60:	e882 0003 	stmia.w	r2, {r0, r1}
 8100d64:	f107 0318 	add.w	r3, r7, #24
 8100d68:	cb0c      	ldmia	r3, {r2, r3}
 8100d6a:	4629      	mov	r1, r5
 8100d6c:	4620      	mov	r0, r4
 8100d6e:	f7ff ffcf 	bl	8100d10 <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClient>
 8100d72:	bf00      	nop
 8100d74:	3708      	adds	r7, #8
 8100d76:	46bd      	mov	sp, r7
 8100d78:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8100d7c:	b002      	add	sp, #8
 8100d7e:	4770      	bx	lr

08100d80 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8100d80:	b580      	push	{r7, lr}
 8100d82:	b082      	sub	sp, #8
 8100d84:	af00      	add	r7, sp, #0
 8100d86:	6078      	str	r0, [r7, #4]
 8100d88:	687b      	ldr	r3, [r7, #4]
 8100d8a:	4618      	mov	r0, r3
 8100d8c:	f7ff ff86 	bl	8100c9c <_ZNSt14_Function_baseD1Ev>
 8100d90:	687b      	ldr	r3, [r7, #4]
 8100d92:	4618      	mov	r0, r3
 8100d94:	3708      	adds	r7, #8
 8100d96:	46bd      	mov	sp, r7
 8100d98:	bd80      	pop	{r7, pc}

08100d9a <_ZN23EdiabasDaemonNativeTask7processEv>:
{
 8100d9a:	b590      	push	{r4, r7, lr}
 8100d9c:	b091      	sub	sp, #68	@ 0x44
 8100d9e:	af00      	add	r7, sp, #0
 8100da0:	6078      	str	r0, [r7, #4]
	size_t len = sizeof(msg);
 8100da2:	2318      	movs	r3, #24
 8100da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	size_t ret = ipc_recvmsg(&msg, len, 0);
 8100da6:	f107 030c 	add.w	r3, r7, #12
 8100daa:	2200      	movs	r2, #0
 8100dac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8100dae:	4618      	mov	r0, r3
 8100db0:	f7ff fc08 	bl	81005c4 <ipc_recvmsg>
 8100db4:	63b8      	str	r0, [r7, #56]	@ 0x38
	if(ret == len)
 8100db6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8100db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8100dba:	429a      	cmp	r2, r3
 8100dbc:	d106      	bne.n	8100dcc <_ZN23EdiabasDaemonNativeTask7processEv+0x32>
		ipc_sendmsg(&msg, len, 0);
 8100dbe:	f107 030c 	add.w	r3, r7, #12
 8100dc2:	2200      	movs	r2, #0
 8100dc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8100dc6:	4618      	mov	r0, r3
 8100dc8:	f7ff fbd4 	bl	8100574 <ipc_sendmsg>
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender){this->OnEvent(event, msg, eventSender);});
 8100dcc:	687c      	ldr	r4, [r7, #4]
 8100dce:	687b      	ldr	r3, [r7, #4]
 8100dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8100dd2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8100dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100dda:	4611      	mov	r1, r2
 8100ddc:	4618      	mov	r0, r3
 8100dde:	f000 f823 	bl	8100e28 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_>
 8100de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100de6:	4619      	mov	r1, r3
 8100de8:	4620      	mov	r0, r4
 8100dea:	f000 fa3b 	bl	8101264 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE>
 8100dee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100df2:	4618      	mov	r0, r3
 8100df4:	f7ff ffc4 	bl	8100d80 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEED1Ev>
}
 8100df8:	bf00      	nop
 8100dfa:	3744      	adds	r7, #68	@ 0x44
 8100dfc:	46bd      	mov	sp, r7
 8100dfe:	bd90      	pop	{r4, r7, pc}

08100e00 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8100e00:	b480      	push	{r7}
 8100e02:	b083      	sub	sp, #12
 8100e04:	af00      	add	r7, sp, #0
 8100e06:	6078      	str	r0, [r7, #4]
 8100e08:	687b      	ldr	r3, [r7, #4]
 8100e0a:	461a      	mov	r2, r3
 8100e0c:	2300      	movs	r3, #0
 8100e0e:	6013      	str	r3, [r2, #0]
 8100e10:	6053      	str	r3, [r2, #4]
 8100e12:	687b      	ldr	r3, [r7, #4]
 8100e14:	2200      	movs	r2, #0
 8100e16:	609a      	str	r2, [r3, #8]
 8100e18:	687b      	ldr	r3, [r7, #4]
 8100e1a:	4618      	mov	r0, r3
 8100e1c:	370c      	adds	r7, #12
 8100e1e:	46bd      	mov	sp, r7
 8100e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e24:	4770      	bx	lr
	...

08100e28 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8100e28:	b590      	push	{r4, r7, lr}
 8100e2a:	b083      	sub	sp, #12
 8100e2c:	af00      	add	r7, sp, #0
 8100e2e:	6078      	str	r0, [r7, #4]
 8100e30:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8100e32:	687b      	ldr	r3, [r7, #4]
 8100e34:	461a      	mov	r2, r3
 8100e36:	2300      	movs	r3, #0
 8100e38:	6013      	str	r3, [r2, #0]
 8100e3a:	6053      	str	r3, [r2, #4]
 8100e3c:	6093      	str	r3, [r2, #8]
 8100e3e:	687b      	ldr	r3, [r7, #4]
 8100e40:	4618      	mov	r0, r3
 8100e42:	f7ff ffdd 	bl	8100e00 <_ZNSt14_Function_baseC1Ev>
 8100e46:	687b      	ldr	r3, [r7, #4]
 8100e48:	2200      	movs	r2, #0
 8100e4a:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8100e4c:	6838      	ldr	r0, [r7, #0]
 8100e4e:	f000 f81b 	bl	8100e88 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E21_M_not_empty_functionIS5_EEbRKT_>
 8100e52:	4603      	mov	r3, r0
 8100e54:	2b00      	cmp	r3, #0
 8100e56:	d00e      	beq.n	8100e76 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8100e58:	687c      	ldr	r4, [r7, #4]
 8100e5a:	6838      	ldr	r0, [r7, #0]
 8100e5c:	f000 f81f 	bl	8100e9e <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8100e60:	4603      	mov	r3, r0
 8100e62:	4619      	mov	r1, r3
 8100e64:	4620      	mov	r0, r4
 8100e66:	f000 f825 	bl	8100eb4 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8100e6a:	687b      	ldr	r3, [r7, #4]
 8100e6c:	4a04      	ldr	r2, [pc, #16]	@ (8100e80 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_+0x58>)
 8100e6e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8100e70:	687b      	ldr	r3, [r7, #4]
 8100e72:	4a04      	ldr	r2, [pc, #16]	@ (8100e84 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_+0x5c>)
 8100e74:	609a      	str	r2, [r3, #8]
	    }
	}
 8100e76:	687b      	ldr	r3, [r7, #4]
 8100e78:	4618      	mov	r0, r3
 8100e7a:	370c      	adds	r7, #12
 8100e7c:	46bd      	mov	sp, r7
 8100e7e:	bd90      	pop	{r4, r7, pc}
 8100e80:	08100ed9 	.word	0x08100ed9
 8100e84:	08100f19 	.word	0x08100f19

08100e88 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8100e88:	b480      	push	{r7}
 8100e8a:	b083      	sub	sp, #12
 8100e8c:	af00      	add	r7, sp, #0
 8100e8e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8100e90:	2301      	movs	r3, #1
 8100e92:	4618      	mov	r0, r3
 8100e94:	370c      	adds	r7, #12
 8100e96:	46bd      	mov	sp, r7
 8100e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e9c:	4770      	bx	lr

08100e9e <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100e9e:	b480      	push	{r7}
 8100ea0:	b083      	sub	sp, #12
 8100ea2:	af00      	add	r7, sp, #0
 8100ea4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100ea6:	687b      	ldr	r3, [r7, #4]
 8100ea8:	4618      	mov	r0, r3
 8100eaa:	370c      	adds	r7, #12
 8100eac:	46bd      	mov	sp, r7
 8100eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100eb2:	4770      	bx	lr

08100eb4 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8100eb4:	b590      	push	{r4, r7, lr}
 8100eb6:	b083      	sub	sp, #12
 8100eb8:	af00      	add	r7, sp, #0
 8100eba:	6078      	str	r0, [r7, #4]
 8100ebc:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8100ebe:	6838      	ldr	r0, [r7, #0]
 8100ec0:	f7ff ffed 	bl	8100e9e <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8100ec4:	4603      	mov	r3, r0
 8100ec6:	4622      	mov	r2, r4
 8100ec8:	4619      	mov	r1, r3
 8100eca:	6878      	ldr	r0, [r7, #4]
 8100ecc:	f000 f843 	bl	8100f56 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8100ed0:	bf00      	nop
 8100ed2:	370c      	adds	r7, #12
 8100ed4:	46bd      	mov	sp, r7
 8100ed6:	bd90      	pop	{r4, r7, pc}

08100ed8 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8100ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8100eda:	b085      	sub	sp, #20
 8100edc:	af00      	add	r7, sp, #0
 8100ede:	60f8      	str	r0, [r7, #12]
 8100ee0:	60b9      	str	r1, [r7, #8]
 8100ee2:	607a      	str	r2, [r7, #4]
 8100ee4:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8100ee6:	68f8      	ldr	r0, [r7, #12]
 8100ee8:	f000 f84e 	bl	8100f88 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100eec:	4604      	mov	r4, r0
 8100eee:	68b8      	ldr	r0, [r7, #8]
 8100ef0:	f000 f85b 	bl	8100faa <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8100ef4:	4605      	mov	r5, r0
 8100ef6:	6878      	ldr	r0, [r7, #4]
 8100ef8:	f000 f862 	bl	8100fc0 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8100efc:	4606      	mov	r6, r0
 8100efe:	6838      	ldr	r0, [r7, #0]
 8100f00:	f000 f869 	bl	8100fd6 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8100f04:	4603      	mov	r3, r0
 8100f06:	4632      	mov	r2, r6
 8100f08:	4629      	mov	r1, r5
 8100f0a:	4620      	mov	r0, r4
 8100f0c:	f000 f86e 	bl	8100fec <_ZSt10__invoke_rIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8100f10:	bf00      	nop
      }
 8100f12:	3714      	adds	r7, #20
 8100f14:	46bd      	mov	sp, r7
 8100f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08100f18 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8100f18:	b590      	push	{r4, r7, lr}
 8100f1a:	b085      	sub	sp, #20
 8100f1c:	af00      	add	r7, sp, #0
 8100f1e:	60f8      	str	r0, [r7, #12]
 8100f20:	60b9      	str	r1, [r7, #8]
 8100f22:	4613      	mov	r3, r2
 8100f24:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8100f26:	79fb      	ldrb	r3, [r7, #7]
 8100f28:	2b01      	cmp	r3, #1
 8100f2a:	d109      	bne.n	8100f40 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8100f2c:	68f8      	ldr	r0, [r7, #12]
 8100f2e:	f000 f881 	bl	8101034 <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>
 8100f32:	4604      	mov	r4, r0
 8100f34:	68b8      	ldr	r0, [r7, #8]
 8100f36:	f000 f827 	bl	8100f88 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100f3a:	4603      	mov	r3, r0
 8100f3c:	6023      	str	r3, [r4, #0]
	    break;
 8100f3e:	e005      	b.n	8100f4c <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8100f40:	79fb      	ldrb	r3, [r7, #7]
 8100f42:	461a      	mov	r2, r3
 8100f44:	68b9      	ldr	r1, [r7, #8]
 8100f46:	68f8      	ldr	r0, [r7, #12]
 8100f48:	f000 f880 	bl	810104c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8100f4c:	2300      	movs	r3, #0
      }
 8100f4e:	4618      	mov	r0, r3
 8100f50:	3714      	adds	r7, #20
 8100f52:	46bd      	mov	sp, r7
 8100f54:	bd90      	pop	{r4, r7, pc}

08100f56 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8100f56:	b590      	push	{r4, r7, lr}
 8100f58:	b085      	sub	sp, #20
 8100f5a:	af00      	add	r7, sp, #0
 8100f5c:	60f8      	str	r0, [r7, #12]
 8100f5e:	60b9      	str	r1, [r7, #8]
 8100f60:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8100f62:	68f8      	ldr	r0, [r7, #12]
 8100f64:	f7ff fe84 	bl	8100c70 <_ZNSt9_Any_data9_M_accessEv>
 8100f68:	4603      	mov	r3, r0
 8100f6a:	4619      	mov	r1, r3
 8100f6c:	2004      	movs	r0, #4
 8100f6e:	f7ff fe73 	bl	8100c58 <_ZnwjPv>
 8100f72:	4604      	mov	r4, r0
 8100f74:	68b8      	ldr	r0, [r7, #8]
 8100f76:	f7ff ff92 	bl	8100e9e <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8100f7a:	4603      	mov	r3, r0
 8100f7c:	681b      	ldr	r3, [r3, #0]
 8100f7e:	6023      	str	r3, [r4, #0]
	  }
 8100f80:	bf00      	nop
 8100f82:	3714      	adds	r7, #20
 8100f84:	46bd      	mov	sp, r7
 8100f86:	bd90      	pop	{r4, r7, pc}

08100f88 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8100f88:	b580      	push	{r7, lr}
 8100f8a:	b084      	sub	sp, #16
 8100f8c:	af00      	add	r7, sp, #0
 8100f8e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8100f90:	6878      	ldr	r0, [r7, #4]
 8100f92:	f000 f895 	bl	81010c0 <_ZNKSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERKT_v>
 8100f96:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8100f98:	68f8      	ldr	r0, [r7, #12]
 8100f9a:	f000 f89d 	bl	81010d8 <_ZSt11__addressofIKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EPT_RS6_>
 8100f9e:	4603      	mov	r3, r0
 8100fa0:	bf00      	nop
	}
 8100fa2:	4618      	mov	r0, r3
 8100fa4:	3710      	adds	r7, #16
 8100fa6:	46bd      	mov	sp, r7
 8100fa8:	bd80      	pop	{r7, pc}

08100faa <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100faa:	b480      	push	{r7}
 8100fac:	b083      	sub	sp, #12
 8100fae:	af00      	add	r7, sp, #0
 8100fb0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100fb2:	687b      	ldr	r3, [r7, #4]
 8100fb4:	4618      	mov	r0, r3
 8100fb6:	370c      	adds	r7, #12
 8100fb8:	46bd      	mov	sp, r7
 8100fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fbe:	4770      	bx	lr

08100fc0 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100fc0:	b480      	push	{r7}
 8100fc2:	b083      	sub	sp, #12
 8100fc4:	af00      	add	r7, sp, #0
 8100fc6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100fc8:	687b      	ldr	r3, [r7, #4]
 8100fca:	4618      	mov	r0, r3
 8100fcc:	370c      	adds	r7, #12
 8100fce:	46bd      	mov	sp, r7
 8100fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fd4:	4770      	bx	lr

08100fd6 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100fd6:	b480      	push	{r7}
 8100fd8:	b083      	sub	sp, #12
 8100fda:	af00      	add	r7, sp, #0
 8100fdc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100fde:	687b      	ldr	r3, [r7, #4]
 8100fe0:	4618      	mov	r0, r3
 8100fe2:	370c      	adds	r7, #12
 8100fe4:	46bd      	mov	sp, r7
 8100fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fea:	4770      	bx	lr

08100fec <_ZSt10__invoke_rIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8100fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8100ff0:	b086      	sub	sp, #24
 8100ff2:	af02      	add	r7, sp, #8
 8100ff4:	60f8      	str	r0, [r7, #12]
 8100ff6:	60b9      	str	r1, [r7, #8]
 8100ff8:	607a      	str	r2, [r7, #4]
 8100ffa:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8100ffc:	68f8      	ldr	r0, [r7, #12]
 8100ffe:	f000 f876 	bl	81010ee <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8101002:	4604      	mov	r4, r0
 8101004:	68b8      	ldr	r0, [r7, #8]
 8101006:	f7ff ffd0 	bl	8100faa <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 810100a:	4605      	mov	r5, r0
 810100c:	6878      	ldr	r0, [r7, #4]
 810100e:	f7ff ffd7 	bl	8100fc0 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8101012:	4606      	mov	r6, r0
 8101014:	6838      	ldr	r0, [r7, #0]
 8101016:	f7ff ffde 	bl	8100fd6 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810101a:	4603      	mov	r3, r0
 810101c:	9300      	str	r3, [sp, #0]
 810101e:	4633      	mov	r3, r6
 8101020:	462a      	mov	r2, r5
 8101022:	4621      	mov	r1, r4
 8101024:	4640      	mov	r0, r8
 8101026:	f000 f86d 	bl	8101104 <_ZSt13__invoke_implIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 810102a:	bf00      	nop
 810102c:	3710      	adds	r7, #16
 810102e:	46bd      	mov	sp, r7
 8101030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08101034 <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>:
      _M_access() noexcept
 8101034:	b580      	push	{r7, lr}
 8101036:	b082      	sub	sp, #8
 8101038:	af00      	add	r7, sp, #0
 810103a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810103c:	6878      	ldr	r0, [r7, #4]
 810103e:	f7ff fe17 	bl	8100c70 <_ZNSt9_Any_data9_M_accessEv>
 8101042:	4603      	mov	r3, r0
 8101044:	4618      	mov	r0, r3
 8101046:	3708      	adds	r7, #8
 8101048:	46bd      	mov	sp, r7
 810104a:	bd80      	pop	{r7, pc}

0810104c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 810104c:	b590      	push	{r4, r7, lr}
 810104e:	b085      	sub	sp, #20
 8101050:	af00      	add	r7, sp, #0
 8101052:	60f8      	str	r0, [r7, #12]
 8101054:	60b9      	str	r1, [r7, #8]
 8101056:	4613      	mov	r3, r2
 8101058:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 810105a:	79fb      	ldrb	r3, [r7, #7]
 810105c:	2b03      	cmp	r3, #3
 810105e:	d82a      	bhi.n	81010b6 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8101060:	a201      	add	r2, pc, #4	@ (adr r2, 8101068 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 8101062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101066:	bf00      	nop
 8101068:	08101079 	.word	0x08101079
 810106c:	08101087 	.word	0x08101087
 8101070:	0810109b 	.word	0x0810109b
 8101074:	081010ad 	.word	0x081010ad
	      __dest._M_access<const type_info*>() = nullptr;
 8101078:	68f8      	ldr	r0, [r7, #12]
 810107a:	f000 f86e 	bl	810115a <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 810107e:	4603      	mov	r3, r0
 8101080:	2200      	movs	r2, #0
 8101082:	601a      	str	r2, [r3, #0]
	      break;
 8101084:	e017      	b.n	81010b6 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8101086:	68f8      	ldr	r0, [r7, #12]
 8101088:	f7ff ffd4 	bl	8101034 <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>
 810108c:	4604      	mov	r4, r0
 810108e:	68b8      	ldr	r0, [r7, #8]
 8101090:	f7ff ff7a 	bl	8100f88 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8101094:	4603      	mov	r3, r0
 8101096:	6023      	str	r3, [r4, #0]
	      break;
 8101098:	e00d      	b.n	81010b6 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 810109a:	68b8      	ldr	r0, [r7, #8]
 810109c:	f7ff ff74 	bl	8100f88 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 81010a0:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 81010a2:	4619      	mov	r1, r3
 81010a4:	68f8      	ldr	r0, [r7, #12]
 81010a6:	f000 f864 	bl	8101172 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 81010aa:	e004      	b.n	81010b6 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 81010ac:	4621      	mov	r1, r4
 81010ae:	68f8      	ldr	r0, [r7, #12]
 81010b0:	f000 f871 	bl	8101196 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 81010b4:	bf00      	nop
	  return false;
 81010b6:	2300      	movs	r3, #0
	}
 81010b8:	4618      	mov	r0, r3
 81010ba:	3714      	adds	r7, #20
 81010bc:	46bd      	mov	sp, r7
 81010be:	bd90      	pop	{r4, r7, pc}

081010c0 <_ZNKSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERKT_v>:
      _M_access() const noexcept
 81010c0:	b580      	push	{r7, lr}
 81010c2:	b082      	sub	sp, #8
 81010c4:	af00      	add	r7, sp, #0
 81010c6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 81010c8:	6878      	ldr	r0, [r7, #4]
 81010ca:	f7ff fddc 	bl	8100c86 <_ZNKSt9_Any_data9_M_accessEv>
 81010ce:	4603      	mov	r3, r0
 81010d0:	4618      	mov	r0, r3
 81010d2:	3708      	adds	r7, #8
 81010d4:	46bd      	mov	sp, r7
 81010d6:	bd80      	pop	{r7, pc}

081010d8 <_ZSt11__addressofIKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 81010d8:	b480      	push	{r7}
 81010da:	b083      	sub	sp, #12
 81010dc:	af00      	add	r7, sp, #0
 81010de:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 81010e0:	687b      	ldr	r3, [r7, #4]
 81010e2:	4618      	mov	r0, r3
 81010e4:	370c      	adds	r7, #12
 81010e6:	46bd      	mov	sp, r7
 81010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ec:	4770      	bx	lr

081010ee <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81010ee:	b480      	push	{r7}
 81010f0:	b083      	sub	sp, #12
 81010f2:	af00      	add	r7, sp, #0
 81010f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81010f6:	687b      	ldr	r3, [r7, #4]
 81010f8:	4618      	mov	r0, r3
 81010fa:	370c      	adds	r7, #12
 81010fc:	46bd      	mov	sp, r7
 81010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101102:	4770      	bx	lr

08101104 <_ZSt13__invoke_implIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8101104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8101106:	b089      	sub	sp, #36	@ 0x24
 8101108:	af04      	add	r7, sp, #16
 810110a:	7338      	strb	r0, [r7, #12]
 810110c:	60b9      	str	r1, [r7, #8]
 810110e:	607a      	str	r2, [r7, #4]
 8101110:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8101112:	68b8      	ldr	r0, [r7, #8]
 8101114:	f7ff ffeb 	bl	81010ee <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8101118:	4606      	mov	r6, r0
 810111a:	6878      	ldr	r0, [r7, #4]
 810111c:	f7ff ff45 	bl	8100faa <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8101120:	4603      	mov	r3, r0
 8101122:	781d      	ldrb	r5, [r3, #0]
 8101124:	6838      	ldr	r0, [r7, #0]
 8101126:	f7ff ff4b 	bl	8100fc0 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 810112a:	4604      	mov	r4, r0
 810112c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810112e:	f7ff ff52 	bl	8100fd6 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8101132:	4603      	mov	r3, r0
 8101134:	781b      	ldrb	r3, [r3, #0]
 8101136:	9302      	str	r3, [sp, #8]
 8101138:	466a      	mov	r2, sp
 810113a:	f104 0308 	add.w	r3, r4, #8
 810113e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8101142:	e882 0003 	stmia.w	r2, {r0, r1}
 8101146:	e894 000c 	ldmia.w	r4, {r2, r3}
 810114a:	4629      	mov	r1, r5
 810114c:	4630      	mov	r0, r6
 810114e:	f7ff fdf1 	bl	8100d34 <_ZZN23EdiabasDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientE_clES0_S1_S2_>
 8101152:	bf00      	nop
 8101154:	3714      	adds	r7, #20
 8101156:	46bd      	mov	sp, r7
 8101158:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810115a <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 810115a:	b580      	push	{r7, lr}
 810115c:	b082      	sub	sp, #8
 810115e:	af00      	add	r7, sp, #0
 8101160:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8101162:	6878      	ldr	r0, [r7, #4]
 8101164:	f7ff fd84 	bl	8100c70 <_ZNSt9_Any_data9_M_accessEv>
 8101168:	4603      	mov	r3, r0
 810116a:	4618      	mov	r0, r3
 810116c:	3708      	adds	r7, #8
 810116e:	46bd      	mov	sp, r7
 8101170:	bd80      	pop	{r7, pc}

08101172 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8101172:	b590      	push	{r4, r7, lr}
 8101174:	b083      	sub	sp, #12
 8101176:	af00      	add	r7, sp, #0
 8101178:	6078      	str	r0, [r7, #4]
 810117a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 810117c:	6838      	ldr	r0, [r7, #0]
 810117e:	f000 f816 	bl	81011ae <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS7_E4typeE>
 8101182:	4603      	mov	r3, r0
 8101184:	4622      	mov	r2, r4
 8101186:	4619      	mov	r1, r3
 8101188:	6878      	ldr	r0, [r7, #4]
 810118a:	f000 f81b 	bl	81011c4 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 810118e:	bf00      	nop
 8101190:	370c      	adds	r7, #12
 8101192:	46bd      	mov	sp, r7
 8101194:	bd90      	pop	{r4, r7, pc}

08101196 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8101196:	b580      	push	{r7, lr}
 8101198:	b082      	sub	sp, #8
 810119a:	af00      	add	r7, sp, #0
 810119c:	6078      	str	r0, [r7, #4]
 810119e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 81011a0:	6878      	ldr	r0, [r7, #4]
 81011a2:	f000 f828 	bl	81011f6 <_ZNSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>
	}
 81011a6:	bf00      	nop
 81011a8:	3708      	adds	r7, #8
 81011aa:	46bd      	mov	sp, r7
 81011ac:	bd80      	pop	{r7, pc}

081011ae <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81011ae:	b480      	push	{r7}
 81011b0:	b083      	sub	sp, #12
 81011b2:	af00      	add	r7, sp, #0
 81011b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81011b6:	687b      	ldr	r3, [r7, #4]
 81011b8:	4618      	mov	r0, r3
 81011ba:	370c      	adds	r7, #12
 81011bc:	46bd      	mov	sp, r7
 81011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011c2:	4770      	bx	lr

081011c4 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 81011c4:	b590      	push	{r4, r7, lr}
 81011c6:	b085      	sub	sp, #20
 81011c8:	af00      	add	r7, sp, #0
 81011ca:	60f8      	str	r0, [r7, #12]
 81011cc:	60b9      	str	r1, [r7, #8]
 81011ce:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 81011d0:	68f8      	ldr	r0, [r7, #12]
 81011d2:	f7ff fd4d 	bl	8100c70 <_ZNSt9_Any_data9_M_accessEv>
 81011d6:	4603      	mov	r3, r0
 81011d8:	4619      	mov	r1, r3
 81011da:	2004      	movs	r0, #4
 81011dc:	f7ff fd3c 	bl	8100c58 <_ZnwjPv>
 81011e0:	4604      	mov	r4, r0
 81011e2:	68b8      	ldr	r0, [r7, #8]
 81011e4:	f7ff ffe3 	bl	81011ae <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS7_E4typeE>
 81011e8:	4603      	mov	r3, r0
 81011ea:	681b      	ldr	r3, [r3, #0]
 81011ec:	6023      	str	r3, [r4, #0]
	  }
 81011ee:	bf00      	nop
 81011f0:	3714      	adds	r7, #20
 81011f2:	46bd      	mov	sp, r7
 81011f4:	bd90      	pop	{r4, r7, pc}

081011f6 <_ZNSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>:
      _M_access() noexcept
 81011f6:	b580      	push	{r7, lr}
 81011f8:	b082      	sub	sp, #8
 81011fa:	af00      	add	r7, sp, #0
 81011fc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 81011fe:	6878      	ldr	r0, [r7, #4]
 8101200:	f7ff fd36 	bl	8100c70 <_ZNSt9_Any_data9_M_accessEv>
 8101204:	4603      	mov	r3, r0
 8101206:	4618      	mov	r0, r3
 8101208:	3708      	adds	r7, #8
 810120a:	46bd      	mov	sp, r7
 810120c:	bd80      	pop	{r7, pc}

0810120e <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 810120e:	b480      	push	{r7}
 8101210:	b083      	sub	sp, #12
 8101212:	af00      	add	r7, sp, #0
 8101214:	6078      	str	r0, [r7, #4]
 8101216:	687b      	ldr	r3, [r7, #4]
 8101218:	689b      	ldr	r3, [r3, #8]
 810121a:	2b00      	cmp	r3, #0
 810121c:	bf0c      	ite	eq
 810121e:	2301      	moveq	r3, #1
 8101220:	2300      	movne	r3, #0
 8101222:	b2db      	uxtb	r3, r3
 8101224:	4618      	mov	r0, r3
 8101226:	370c      	adds	r7, #12
 8101228:	46bd      	mov	sp, r7
 810122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810122e:	4770      	bx	lr

08101230 <_ZN15EventBusManagerC1EP15QueueDefinition12EEventClient>:
#include "EventBusManager.h"

extern QueueHandle_t queueToEventManagerCM4;

EventBusManager::EventBusManager(QueueHandle_t queueSelf, EEventClient senderSelf)
 8101230:	b480      	push	{r7}
 8101232:	b085      	sub	sp, #20
 8101234:	af00      	add	r7, sp, #0
 8101236:	60f8      	str	r0, [r7, #12]
 8101238:	60b9      	str	r1, [r7, #8]
 810123a:	4613      	mov	r3, r2
 810123c:	71fb      	strb	r3, [r7, #7]
					 : queue_self(queueSelf),
 810123e:	68fb      	ldr	r3, [r7, #12]
 8101240:	68ba      	ldr	r2, [r7, #8]
 8101242:	601a      	str	r2, [r3, #0]
					   sender_self(senderSelf),
 8101244:	68fb      	ldr	r3, [r7, #12]
 8101246:	79fa      	ldrb	r2, [r7, #7]
 8101248:	711a      	strb	r2, [r3, #4]
					   queue_event_manager(queueToEventManagerCM4){}
 810124a:	4b05      	ldr	r3, [pc, #20]	@ (8101260 <_ZN15EventBusManagerC1EP15QueueDefinition12EEventClient+0x30>)
 810124c:	681a      	ldr	r2, [r3, #0]
 810124e:	68fb      	ldr	r3, [r7, #12]
 8101250:	609a      	str	r2, [r3, #8]
 8101252:	68fb      	ldr	r3, [r7, #12]
 8101254:	4618      	mov	r0, r3
 8101256:	3714      	adds	r7, #20
 8101258:	46bd      	mov	sp, r7
 810125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810125e:	4770      	bx	lr
 8101260:	100000b8 	.word	0x100000b8

08101264 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE>:
	}
	return false;
}

void EventBusManager::receive(OnEventFunction on_event_function)
{
 8101264:	b590      	push	{r4, r7, lr}
 8101266:	b08f      	sub	sp, #60	@ 0x3c
 8101268:	af04      	add	r7, sp, #16
 810126a:	6078      	str	r0, [r7, #4]
 810126c:	6039      	str	r1, [r7, #0]
	if(queue_self)
 810126e:	687b      	ldr	r3, [r7, #4]
 8101270:	681b      	ldr	r3, [r3, #0]
 8101272:	2b00      	cmp	r3, #0
 8101274:	d024      	beq.n	81012c0 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x5c>
	{
		SMessage msg;
		BaseType_t ret = pdTRUE;
 8101276:	2301      	movs	r3, #1
 8101278:	627b      	str	r3, [r7, #36]	@ 0x24

		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 810127a:	e011      	b.n	81012a0 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x3c>
		{
//			LOG_DEBUG("Bus Manager msg received, result[%d}, event[%d]", ret, msg.event_type);
			on_event_function(msg.event_type, msg.message_data, msg.event_sender);
 810127c:	7b3c      	ldrb	r4, [r7, #12]
 810127e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8101282:	9302      	str	r3, [sp, #8]
 8101284:	466a      	mov	r2, sp
 8101286:	f107 0318 	add.w	r3, r7, #24
 810128a:	e893 0003 	ldmia.w	r3, {r0, r1}
 810128e:	e882 0003 	stmia.w	r2, {r0, r1}
 8101292:	f107 0310 	add.w	r3, r7, #16
 8101296:	cb0c      	ldmia	r3, {r2, r3}
 8101298:	4621      	mov	r1, r4
 810129a:	6838      	ldr	r0, [r7, #0]
 810129c:	f000 f814 	bl	81012c8 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientEEclES0_S1_S2_>
		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 81012a0:	687b      	ldr	r3, [r7, #4]
 81012a2:	681b      	ldr	r3, [r3, #0]
 81012a4:	f107 010c 	add.w	r1, r7, #12
 81012a8:	2200      	movs	r2, #0
 81012aa:	4618      	mov	r0, r3
 81012ac:	f007 fe0a 	bl	8108ec4 <xQueueReceive>
 81012b0:	4603      	mov	r3, r0
 81012b2:	2b01      	cmp	r3, #1
 81012b4:	bf0c      	ite	eq
 81012b6:	2301      	moveq	r3, #1
 81012b8:	2300      	movne	r3, #0
 81012ba:	b2db      	uxtb	r3, r3
 81012bc:	2b00      	cmp	r3, #0
 81012be:	d1dd      	bne.n	810127c <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x18>
		}
	}
}
 81012c0:	bf00      	nop
 81012c2:	372c      	adds	r7, #44	@ 0x2c
 81012c4:	46bd      	mov	sp, r7
 81012c6:	bd90      	pop	{r4, r7, pc}

081012c8 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientEEclES0_S1_S2_>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 81012c8:	b082      	sub	sp, #8
 81012ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81012ce:	b082      	sub	sp, #8
 81012d0:	af00      	add	r7, sp, #0
 81012d2:	6078      	str	r0, [r7, #4]
 81012d4:	f107 0020 	add.w	r0, r7, #32
 81012d8:	e880 000c 	stmia.w	r0, {r2, r3}
 81012dc:	460b      	mov	r3, r1
 81012de:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 81012e0:	687b      	ldr	r3, [r7, #4]
 81012e2:	4618      	mov	r0, r3
 81012e4:	f7ff ff93 	bl	810120e <_ZNKSt14_Function_base8_M_emptyEv>
 81012e8:	4603      	mov	r3, r0
 81012ea:	2b00      	cmp	r3, #0
 81012ec:	d001      	beq.n	81012f2 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientEEclES0_S1_S2_+0x2a>
	  __throw_bad_function_call();
 81012ee:	f015 f928 	bl	8116542 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 81012f2:	687b      	ldr	r3, [r7, #4]
 81012f4:	68dc      	ldr	r4, [r3, #12]
 81012f6:	687d      	ldr	r5, [r7, #4]
 81012f8:	1cfb      	adds	r3, r7, #3
 81012fa:	4618      	mov	r0, r3
 81012fc:	f7ff fe55 	bl	8100faa <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8101300:	4606      	mov	r6, r0
 8101302:	f107 0020 	add.w	r0, r7, #32
 8101306:	f7ff fe5b 	bl	8100fc0 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 810130a:	4680      	mov	r8, r0
 810130c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101310:	4618      	mov	r0, r3
 8101312:	f7ff fe60 	bl	8100fd6 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8101316:	4603      	mov	r3, r0
 8101318:	4642      	mov	r2, r8
 810131a:	4631      	mov	r1, r6
 810131c:	4628      	mov	r0, r5
 810131e:	47a0      	blx	r4
 8101320:	bf00      	nop
      }
 8101322:	3708      	adds	r7, #8
 8101324:	46bd      	mov	sp, r7
 8101326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810132a:	b002      	add	sp, #8
 810132c:	4770      	bx	lr

0810132e <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 810132e:	b580      	push	{r7, lr}
 8101330:	b082      	sub	sp, #8
 8101332:	af00      	add	r7, sp, #0
 8101334:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8101336:	687b      	ldr	r3, [r7, #4]
 8101338:	2200      	movs	r2, #0
 810133a:	701a      	strb	r2, [r3, #0]
      _M_reset();
 810133c:	6878      	ldr	r0, [r7, #4]
 810133e:	f000 f805 	bl	810134c <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8101342:	687b      	ldr	r3, [r7, #4]
 8101344:	4618      	mov	r0, r3
 8101346:	3708      	adds	r7, #8
 8101348:	46bd      	mov	sp, r7
 810134a:	bd80      	pop	{r7, pc}

0810134c <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 810134c:	b480      	push	{r7}
 810134e:	b083      	sub	sp, #12
 8101350:	af00      	add	r7, sp, #0
 8101352:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8101354:	687b      	ldr	r3, [r7, #4]
 8101356:	2200      	movs	r2, #0
 8101358:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 810135a:	687a      	ldr	r2, [r7, #4]
 810135c:	687b      	ldr	r3, [r7, #4]
 810135e:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8101360:	687a      	ldr	r2, [r7, #4]
 8101362:	687b      	ldr	r3, [r7, #4]
 8101364:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8101366:	687b      	ldr	r3, [r7, #4]
 8101368:	2200      	movs	r2, #0
 810136a:	611a      	str	r2, [r3, #16]
    }
 810136c:	bf00      	nop
 810136e:	370c      	adds	r7, #12
 8101370:	46bd      	mov	sp, r7
 8101372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101376:	4770      	bx	lr

08101378 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8101378:	b580      	push	{r7, lr}
 810137a:	b082      	sub	sp, #8
 810137c:	af00      	add	r7, sp, #0
 810137e:	6078      	str	r0, [r7, #4]
 8101380:	687b      	ldr	r3, [r7, #4]
 8101382:	4618      	mov	r0, r3
 8101384:	f000 f957 	bl	8101636 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8101388:	687b      	ldr	r3, [r7, #4]
 810138a:	4618      	mov	r0, r3
 810138c:	3708      	adds	r7, #8
 810138e:	46bd      	mov	sp, r7
 8101390:	bd80      	pop	{r7, pc}

08101392 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8101392:	b580      	push	{r7, lr}
 8101394:	b082      	sub	sp, #8
 8101396:	af00      	add	r7, sp, #0
 8101398:	6078      	str	r0, [r7, #4]
 810139a:	687b      	ldr	r3, [r7, #4]
 810139c:	4618      	mov	r0, r3
 810139e:	f7ff ffeb 	bl	8101378 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 81013a2:	687b      	ldr	r3, [r7, #4]
 81013a4:	4618      	mov	r0, r3
 81013a6:	3708      	adds	r7, #8
 81013a8:	46bd      	mov	sp, r7
 81013aa:	bd80      	pop	{r7, pc}

081013ac <_ZN19EventManagerCM4TaskC1Ev>:
	{
		/* event queues of clients */
		EVENT_QUEUE_DAEMON_NATIVE = EVENT_CLIENT_DAEMON_NATIVE,
	};

	EventManagerCM4Task() {};
 81013ac:	b580      	push	{r7, lr}
 81013ae:	b082      	sub	sp, #8
 81013b0:	af00      	add	r7, sp, #0
 81013b2:	6078      	str	r0, [r7, #4]
 81013b4:	687b      	ldr	r3, [r7, #4]
 81013b6:	4618      	mov	r0, r3
 81013b8:	f7ff ffeb 	bl	8101392 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 81013bc:	687b      	ldr	r3, [r7, #4]
 81013be:	4618      	mov	r0, r3
 81013c0:	3708      	adds	r7, #8
 81013c2:	46bd      	mov	sp, r7
 81013c4:	bd80      	pop	{r7, pc}
	...

081013c8 <_Z20StartTask_EventMgrM4Pv>:

extern QueueHandle_t queueToEventManagerCM4;
extern QueueHandle_t queueToNativeDaemon;

void StartTask_EventMgrM4(void *argument)
{
 81013c8:	b580      	push	{r7, lr}
 81013ca:	b088      	sub	sp, #32
 81013cc:	af00      	add	r7, sp, #0
 81013ce:	6078      	str	r0, [r7, #4]
	EventManagerCM4Task eventManagerInstance;
 81013d0:	f107 0308 	add.w	r3, r7, #8
 81013d4:	4618      	mov	r0, r3
 81013d6:	f7ff ffe9 	bl	81013ac <_ZN19EventManagerCM4TaskC1Ev>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_DAEMON_NATIVE, queueToNativeDaemon);
 81013da:	4b09      	ldr	r3, [pc, #36]	@ (8101400 <_Z20StartTask_EventMgrM4Pv+0x38>)
 81013dc:	681a      	ldr	r2, [r3, #0]
 81013de:	f107 0308 	add.w	r3, r7, #8
 81013e2:	2104      	movs	r1, #4
 81013e4:	4618      	mov	r0, r3
 81013e6:	f000 f80d 	bl	8101404 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>

	for(;;)
	{
		eventManagerInstance.process();
 81013ea:	f107 0308 	add.w	r3, r7, #8
 81013ee:	4618      	mov	r0, r3
 81013f0:	f000 f81b 	bl	810142a <_ZN19EventManagerCM4Task7processEv>
		osDelay(1);
 81013f4:	2001      	movs	r0, #1
 81013f6:	f006 f824 	bl	8107442 <osDelay>
		eventManagerInstance.process();
 81013fa:	bf00      	nop
 81013fc:	e7f5      	b.n	81013ea <_Z20StartTask_EventMgrM4Pv+0x22>
 81013fe:	bf00      	nop
 8101400:	100000bc 	.word	0x100000bc

08101404 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>:
	}
}


void EventManagerCM4Task::addQueue(EEventQueue eventClient, QueueHandle_t queueHandle)
{
 8101404:	b580      	push	{r7, lr}
 8101406:	b086      	sub	sp, #24
 8101408:	af00      	add	r7, sp, #0
 810140a:	60f8      	str	r0, [r7, #12]
 810140c:	460b      	mov	r3, r1
 810140e:	607a      	str	r2, [r7, #4]
 8101410:	72fb      	strb	r3, [r7, #11]
	queue_handles.emplace(eventClient, queueHandle);
 8101412:	68f9      	ldr	r1, [r7, #12]
 8101414:	f107 0010 	add.w	r0, r7, #16
 8101418:	1d3b      	adds	r3, r7, #4
 810141a:	f107 020b 	add.w	r2, r7, #11
 810141e:	f000 f91f 	bl	8101660 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>
}
 8101422:	bf00      	nop
 8101424:	3718      	adds	r7, #24
 8101426:	46bd      	mov	sp, r7
 8101428:	bd80      	pop	{r7, pc}

0810142a <_ZN19EventManagerCM4Task7processEv>:
	queue_handles.erase(eventClient);
}


void EventManagerCM4Task::process()
{
 810142a:	b580      	push	{r7, lr}
 810142c:	b086      	sub	sp, #24
 810142e:	af00      	add	r7, sp, #0
 8101430:	6078      	str	r0, [r7, #4]
	send(receive());
 8101432:	f107 030c 	add.w	r3, r7, #12
 8101436:	6879      	ldr	r1, [r7, #4]
 8101438:	4618      	mov	r0, r3
 810143a:	f000 f835 	bl	81014a8 <_ZN19EventManagerCM4Task7receiveEv>
 810143e:	f107 030c 	add.w	r3, r7, #12
 8101442:	4619      	mov	r1, r3
 8101444:	6878      	ldr	r0, [r7, #4]
 8101446:	f000 f88d 	bl	8101564 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>
 810144a:	f107 030c 	add.w	r3, r7, #12
 810144e:	4618      	mov	r0, r3
 8101450:	f000 f920 	bl	8101694 <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>
}
 8101454:	bf00      	nop
 8101456:	3718      	adds	r7, #24
 8101458:	46bd      	mov	sp, r7
 810145a:	bd80      	pop	{r7, pc}

0810145c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 810145c:	b580      	push	{r7, lr}
 810145e:	b082      	sub	sp, #8
 8101460:	af00      	add	r7, sp, #0
 8101462:	6078      	str	r0, [r7, #4]
 8101464:	6878      	ldr	r0, [r7, #4]
 8101466:	f000 f940 	bl	81016ea <_ZNSaI8SMessageED1Ev>
 810146a:	687b      	ldr	r3, [r7, #4]
 810146c:	4618      	mov	r0, r3
 810146e:	3708      	adds	r7, #8
 8101470:	46bd      	mov	sp, r7
 8101472:	bd80      	pop	{r7, pc}

08101474 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8101474:	b580      	push	{r7, lr}
 8101476:	b082      	sub	sp, #8
 8101478:	af00      	add	r7, sp, #0
 810147a:	6078      	str	r0, [r7, #4]
 810147c:	687b      	ldr	r3, [r7, #4]
 810147e:	4618      	mov	r0, r3
 8101480:	f000 f923 	bl	81016ca <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>
 8101484:	687b      	ldr	r3, [r7, #4]
 8101486:	4618      	mov	r0, r3
 8101488:	3708      	adds	r7, #8
 810148a:	46bd      	mov	sp, r7
 810148c:	bd80      	pop	{r7, pc}

0810148e <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 810148e:	b580      	push	{r7, lr}
 8101490:	b082      	sub	sp, #8
 8101492:	af00      	add	r7, sp, #0
 8101494:	6078      	str	r0, [r7, #4]
 8101496:	687b      	ldr	r3, [r7, #4]
 8101498:	4618      	mov	r0, r3
 810149a:	f7ff ffeb 	bl	8101474 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>
 810149e:	687b      	ldr	r3, [r7, #4]
 81014a0:	4618      	mov	r0, r3
 81014a2:	3708      	adds	r7, #8
 81014a4:	46bd      	mov	sp, r7
 81014a6:	bd80      	pop	{r7, pc}

081014a8 <_ZN19EventManagerCM4Task7receiveEv>:

std::vector<SMessage> EventManagerCM4Task::receive()
{
 81014a8:	b5b0      	push	{r4, r5, r7, lr}
 81014aa:	b092      	sub	sp, #72	@ 0x48
 81014ac:	af00      	add	r7, sp, #0
 81014ae:	6078      	str	r0, [r7, #4]
 81014b0:	6039      	str	r1, [r7, #0]
	std::vector<SMessage> receivedMessages;
 81014b2:	6878      	ldr	r0, [r7, #4]
 81014b4:	f7ff ffeb 	bl	810148e <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>
	SMessage msg;

	BaseType_t ret = pdTRUE;
 81014b8:	2301      	movs	r3, #1
 81014ba:	647b      	str	r3, [r7, #68]	@ 0x44
	do
	{
		ret = xQueueReceive(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(0));
 81014bc:	4b28      	ldr	r3, [pc, #160]	@ (8101560 <_ZN19EventManagerCM4Task7receiveEv+0xb8>)
 81014be:	681b      	ldr	r3, [r3, #0]
 81014c0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 81014c4:	2200      	movs	r2, #0
 81014c6:	4618      	mov	r0, r3
 81014c8:	f007 fcfc 	bl	8108ec4 <xQueueReceive>
 81014cc:	6478      	str	r0, [r7, #68]	@ 0x44
		if(ret == pdTRUE)
 81014ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81014d0:	2b01      	cmp	r3, #1
 81014d2:	d105      	bne.n	81014e0 <_ZN19EventManagerCM4Task7receiveEv+0x38>
		{
			receivedMessages.push_back(msg);
 81014d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81014d8:	4619      	mov	r1, r3
 81014da:	6878      	ldr	r0, [r7, #4]
 81014dc:	f000 f930 	bl	8101740 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>
		}
	}while(ret == pdTRUE);
 81014e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81014e2:	2b01      	cmp	r3, #1
 81014e4:	d0ea      	beq.n	81014bc <_ZN19EventManagerCM4Task7receiveEv+0x14>

	if(receivedMessages.size() > 0)
 81014e6:	6878      	ldr	r0, [r7, #4]
 81014e8:	f000 f950 	bl	810178c <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81014ec:	4603      	mov	r3, r0
 81014ee:	2b00      	cmp	r3, #0
 81014f0:	bf14      	ite	ne
 81014f2:	2301      	movne	r3, #1
 81014f4:	2300      	moveq	r3, #0
 81014f6:	b2db      	uxtb	r3, r3
 81014f8:	2b00      	cmp	r3, #0
 81014fa:	d02b      	beq.n	8101554 <_ZN19EventManagerCM4Task7receiveEv+0xac>
	{
		for(auto msg : receivedMessages)
 81014fc:	687b      	ldr	r3, [r7, #4]
 81014fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8101500:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8101502:	f000 f959 	bl	81017b8 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 8101506:	4603      	mov	r3, r0
 8101508:	60fb      	str	r3, [r7, #12]
 810150a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 810150c:	f000 f964 	bl	81017d8 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 8101510:	4603      	mov	r3, r0
 8101512:	60bb      	str	r3, [r7, #8]
 8101514:	e013      	b.n	810153e <_ZN19EventManagerCM4Task7receiveEv+0x96>
 8101516:	f107 030c 	add.w	r3, r7, #12
 810151a:	4618      	mov	r0, r3
 810151c:	f000 f996 	bl	810184c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 8101520:	4603      	mov	r3, r0
 8101522:	f107 0410 	add.w	r4, r7, #16
 8101526:	461d      	mov	r5, r3
 8101528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810152a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810152c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8101530:	e884 0003 	stmia.w	r4, {r0, r1}
 8101534:	f107 030c 	add.w	r3, r7, #12
 8101538:	4618      	mov	r0, r3
 810153a:	f000 f976 	bl	810182a <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 810153e:	f107 0208 	add.w	r2, r7, #8
 8101542:	f107 030c 	add.w	r3, r7, #12
 8101546:	4611      	mov	r1, r2
 8101548:	4618      	mov	r0, r3
 810154a:	f000 f956 	bl	81017fa <_ZN9__gnu_cxxneIP8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 810154e:	4603      	mov	r3, r0
 8101550:	2b00      	cmp	r3, #0
 8101552:	d1e0      	bne.n	8101516 <_ZN19EventManagerCM4Task7receiveEv+0x6e>
		{
//			LOG_DEBUG("EVENT_MANAGER: Received message. r[%d], s[%d], e[%d]", msg.event_receiver, msg.event_sender, msg.event_type);
		}
	}

	return receivedMessages;
 8101554:	bf00      	nop
}
 8101556:	6878      	ldr	r0, [r7, #4]
 8101558:	3748      	adds	r7, #72	@ 0x48
 810155a:	46bd      	mov	sp, r7
 810155c:	bdb0      	pop	{r4, r5, r7, pc}
 810155e:	bf00      	nop
 8101560:	100000b8 	.word	0x100000b8

08101564 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>:

void EventManagerCM4Task::send(const std::vector<SMessage>& messages)
{
 8101564:	b5b0      	push	{r4, r5, r7, lr}
 8101566:	b090      	sub	sp, #64	@ 0x40
 8101568:	af00      	add	r7, sp, #0
 810156a:	6078      	str	r0, [r7, #4]
 810156c:	6039      	str	r1, [r7, #0]
	for(auto msg : messages)
 810156e:	683b      	ldr	r3, [r7, #0]
 8101570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8101572:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8101574:	f000 f976 	bl	8101864 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>
 8101578:	4603      	mov	r3, r0
 810157a:	61bb      	str	r3, [r7, #24]
 810157c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 810157e:	f000 f981 	bl	8101884 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>
 8101582:	4603      	mov	r3, r0
 8101584:	617b      	str	r3, [r7, #20]
 8101586:	e046      	b.n	8101616 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xb2>
 8101588:	f107 0318 	add.w	r3, r7, #24
 810158c:	4618      	mov	r0, r3
 810158e:	f000 f9b3 	bl	81018f8 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 8101592:	4603      	mov	r3, r0
 8101594:	f107 041c 	add.w	r4, r7, #28
 8101598:	461d      	mov	r5, r3
 810159a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810159c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810159e:	e895 0003 	ldmia.w	r5, {r0, r1}
 81015a2:	e884 0003 	stmia.w	r4, {r0, r1}
	{
		auto eventReceiver = static_cast<EEventQueue>(msg.event_receiver);
 81015a6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 81015aa:	74fb      	strb	r3, [r7, #19]
		auto it = queue_handles.find(eventReceiver);
 81015ac:	687b      	ldr	r3, [r7, #4]
 81015ae:	f107 0213 	add.w	r2, r7, #19
 81015b2:	4611      	mov	r1, r2
 81015b4:	4618      	mov	r0, r3
 81015b6:	f000 f9ab 	bl	8101910 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 81015ba:	4603      	mov	r3, r0
 81015bc:	60fb      	str	r3, [r7, #12]

		if(it != queue_handles.end())
 81015be:	687b      	ldr	r3, [r7, #4]
 81015c0:	4618      	mov	r0, r3
 81015c2:	f000 f9b4 	bl	810192e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 81015c6:	4603      	mov	r3, r0
 81015c8:	637b      	str	r3, [r7, #52]	@ 0x34
 81015ca:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 81015ce:	f107 030c 	add.w	r3, r7, #12
 81015d2:	4611      	mov	r1, r2
 81015d4:	4618      	mov	r0, r3
 81015d6:	f000 f9b7 	bl	8101948 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 81015da:	4603      	mov	r3, r0
 81015dc:	2b00      	cmp	r3, #0
 81015de:	d015      	beq.n	810160c <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xa8>
		{
			QueueHandle_t targetQueue = queue_handles[eventReceiver];
 81015e0:	687b      	ldr	r3, [r7, #4]
 81015e2:	f107 0213 	add.w	r2, r7, #19
 81015e6:	4611      	mov	r1, r2
 81015e8:	4618      	mov	r0, r3
 81015ea:	f000 f9c1 	bl	8101970 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 81015ee:	4603      	mov	r3, r0
 81015f0:	681b      	ldr	r3, [r3, #0]
 81015f2:	63bb      	str	r3, [r7, #56]	@ 0x38
			if(targetQueue)
 81015f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81015f6:	2b00      	cmp	r3, #0
 81015f8:	d008      	beq.n	810160c <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xa8>
			{
				if(xQueueSend(targetQueue, static_cast<void*>(&msg), static_cast<TickType_t>(10)) != pdTRUE)
 81015fa:	f107 011c 	add.w	r1, r7, #28
 81015fe:	2300      	movs	r3, #0
 8101600:	220a      	movs	r2, #10
 8101602:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101604:	f007 fa2e 	bl	8108a64 <xQueueGenericSend>
 8101608:	4603      	mov	r3, r0
 810160a:	2b01      	cmp	r3, #1
	for(auto msg : messages)
 810160c:	f107 0318 	add.w	r3, r7, #24
 8101610:	4618      	mov	r0, r3
 8101612:	f000 f960 	bl	81018d6 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 8101616:	f107 0214 	add.w	r2, r7, #20
 810161a:	f107 0318 	add.w	r3, r7, #24
 810161e:	4611      	mov	r1, r2
 8101620:	4618      	mov	r0, r3
 8101622:	f000 f940 	bl	81018a6 <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8101626:	4603      	mov	r3, r0
 8101628:	2b00      	cmp	r3, #0
 810162a:	d1ad      	bne.n	8101588 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x24>
//					LOG_DEBUG("[FATAL] Could not send message. e[%d], r[%d]", msg.event_type, msg.event_receiver);
				}
			}
		}
	}
}
 810162c:	bf00      	nop
 810162e:	bf00      	nop
 8101630:	3740      	adds	r7, #64	@ 0x40
 8101632:	46bd      	mov	sp, r7
 8101634:	bdb0      	pop	{r4, r5, r7, pc}

08101636 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8101636:	b580      	push	{r7, lr}
 8101638:	b082      	sub	sp, #8
 810163a:	af00      	add	r7, sp, #0
 810163c:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 810163e:	6878      	ldr	r0, [r7, #4]
 8101640:	f000 f9f2 	bl	8101a28 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 8101644:	687b      	ldr	r3, [r7, #4]
 8101646:	4618      	mov	r0, r3
 8101648:	f000 f9fa 	bl	8101a40 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>
 810164c:	687b      	ldr	r3, [r7, #4]
 810164e:	3304      	adds	r3, #4
 8101650:	4618      	mov	r0, r3
 8101652:	f7ff fe6c 	bl	810132e <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8101656:	687b      	ldr	r3, [r7, #4]
 8101658:	4618      	mov	r0, r3
 810165a:	3708      	adds	r7, #8
 810165c:	46bd      	mov	sp, r7
 810165e:	bd80      	pop	{r7, pc}

08101660 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>:
       *
       *  Insertion requires logarithmic time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 8101660:	b5b0      	push	{r4, r5, r7, lr}
 8101662:	b084      	sub	sp, #16
 8101664:	af00      	add	r7, sp, #0
 8101666:	60f8      	str	r0, [r7, #12]
 8101668:	60b9      	str	r1, [r7, #8]
 810166a:	607a      	str	r2, [r7, #4]
 810166c:	603b      	str	r3, [r7, #0]
		      }
		    return {__i, false};
		  }
	      }
#endif
	  return _M_t._M_emplace_unique(std::forward<_Args>(__args)...);
 810166e:	68bc      	ldr	r4, [r7, #8]
 8101670:	6878      	ldr	r0, [r7, #4]
 8101672:	f000 f9fc 	bl	8101a6e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8101676:	4605      	mov	r5, r0
 8101678:	6838      	ldr	r0, [r7, #0]
 810167a:	f000 fa03 	bl	8101a84 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810167e:	4603      	mov	r3, r0
 8101680:	68f8      	ldr	r0, [r7, #12]
 8101682:	462a      	mov	r2, r5
 8101684:	4621      	mov	r1, r4
 8101686:	f000 fa08 	bl	8101a9a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>
 810168a:	bf00      	nop
	}
 810168c:	68f8      	ldr	r0, [r7, #12]
 810168e:	3710      	adds	r7, #16
 8101690:	46bd      	mov	sp, r7
 8101692:	bdb0      	pop	{r4, r5, r7, pc}

08101694 <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8101694:	b5b0      	push	{r4, r5, r7, lr}
 8101696:	b082      	sub	sp, #8
 8101698:	af00      	add	r7, sp, #0
 810169a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 810169c:	687b      	ldr	r3, [r7, #4]
 810169e:	681c      	ldr	r4, [r3, #0]
 81016a0:	687b      	ldr	r3, [r7, #4]
 81016a2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 81016a4:	687b      	ldr	r3, [r7, #4]
 81016a6:	4618      	mov	r0, r3
 81016a8:	f000 fa4c 	bl	8101b44 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81016ac:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 81016ae:	461a      	mov	r2, r3
 81016b0:	4629      	mov	r1, r5
 81016b2:	4620      	mov	r0, r4
 81016b4:	f000 fa51 	bl	8101b5a <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 81016b8:	687b      	ldr	r3, [r7, #4]
 81016ba:	4618      	mov	r0, r3
 81016bc:	f000 f822 	bl	8101704 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>
 81016c0:	687b      	ldr	r3, [r7, #4]
 81016c2:	4618      	mov	r0, r3
 81016c4:	3708      	adds	r7, #8
 81016c6:	46bd      	mov	sp, r7
 81016c8:	bdb0      	pop	{r4, r5, r7, pc}

081016ca <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 81016ca:	b580      	push	{r7, lr}
 81016cc:	b082      	sub	sp, #8
 81016ce:	af00      	add	r7, sp, #0
 81016d0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 81016d2:	6878      	ldr	r0, [r7, #4]
 81016d4:	f000 fa4f 	bl	8101b76 <_ZNSaI8SMessageEC1Ev>
 81016d8:	687b      	ldr	r3, [r7, #4]
 81016da:	4618      	mov	r0, r3
 81016dc:	f000 fa57 	bl	8101b8e <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 81016e0:	687b      	ldr	r3, [r7, #4]
 81016e2:	4618      	mov	r0, r3
 81016e4:	3708      	adds	r7, #8
 81016e6:	46bd      	mov	sp, r7
 81016e8:	bd80      	pop	{r7, pc}

081016ea <_ZNSaI8SMessageED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 81016ea:	b580      	push	{r7, lr}
 81016ec:	b082      	sub	sp, #8
 81016ee:	af00      	add	r7, sp, #0
 81016f0:	6078      	str	r0, [r7, #4]
 81016f2:	6878      	ldr	r0, [r7, #4]
 81016f4:	f000 fa5f 	bl	8101bb6 <_ZNSt15__new_allocatorI8SMessageED1Ev>
 81016f8:	687b      	ldr	r3, [r7, #4]
 81016fa:	4618      	mov	r0, r3
 81016fc:	3708      	adds	r7, #8
 81016fe:	46bd      	mov	sp, r7
 8101700:	bd80      	pop	{r7, pc}
	...

08101704 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8101704:	b580      	push	{r7, lr}
 8101706:	b082      	sub	sp, #8
 8101708:	af00      	add	r7, sp, #0
 810170a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 810170c:	687b      	ldr	r3, [r7, #4]
 810170e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8101710:	687b      	ldr	r3, [r7, #4]
 8101712:	689a      	ldr	r2, [r3, #8]
 8101714:	687b      	ldr	r3, [r7, #4]
 8101716:	681b      	ldr	r3, [r3, #0]
 8101718:	1ad3      	subs	r3, r2, r3
 810171a:	10db      	asrs	r3, r3, #3
 810171c:	4a07      	ldr	r2, [pc, #28]	@ (810173c <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev+0x38>)
 810171e:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8101722:	461a      	mov	r2, r3
 8101724:	6878      	ldr	r0, [r7, #4]
 8101726:	f000 fa51 	bl	8101bcc <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      }
 810172a:	687b      	ldr	r3, [r7, #4]
 810172c:	4618      	mov	r0, r3
 810172e:	f7ff fe95 	bl	810145c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>
 8101732:	687b      	ldr	r3, [r7, #4]
 8101734:	4618      	mov	r0, r3
 8101736:	3708      	adds	r7, #8
 8101738:	46bd      	mov	sp, r7
 810173a:	bd80      	pop	{r7, pc}
 810173c:	aaaaaaab 	.word	0xaaaaaaab

08101740 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 8101740:	b580      	push	{r7, lr}
 8101742:	b082      	sub	sp, #8
 8101744:	af00      	add	r7, sp, #0
 8101746:	6078      	str	r0, [r7, #4]
 8101748:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 810174a:	687b      	ldr	r3, [r7, #4]
 810174c:	685a      	ldr	r2, [r3, #4]
 810174e:	687b      	ldr	r3, [r7, #4]
 8101750:	689b      	ldr	r3, [r3, #8]
 8101752:	429a      	cmp	r2, r3
 8101754:	d00d      	beq.n	8101772 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8101756:	6878      	ldr	r0, [r7, #4]
 8101758:	687b      	ldr	r3, [r7, #4]
 810175a:	685b      	ldr	r3, [r3, #4]
 810175c:	683a      	ldr	r2, [r7, #0]
 810175e:	4619      	mov	r1, r3
 8101760:	f000 fa47 	bl	8101bf2 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8101764:	687b      	ldr	r3, [r7, #4]
 8101766:	685b      	ldr	r3, [r3, #4]
 8101768:	f103 0218 	add.w	r2, r3, #24
 810176c:	687b      	ldr	r3, [r7, #4]
 810176e:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8101770:	e008      	b.n	8101784 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8101772:	6878      	ldr	r0, [r7, #4]
 8101774:	f000 f830 	bl	81017d8 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 8101778:	4603      	mov	r3, r0
 810177a:	683a      	ldr	r2, [r7, #0]
 810177c:	4619      	mov	r1, r3
 810177e:	6878      	ldr	r0, [r7, #4]
 8101780:	f000 fa60 	bl	8101c44 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8101784:	bf00      	nop
 8101786:	3708      	adds	r7, #8
 8101788:	46bd      	mov	sp, r7
 810178a:	bd80      	pop	{r7, pc}

0810178c <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 810178c:	b480      	push	{r7}
 810178e:	b083      	sub	sp, #12
 8101790:	af00      	add	r7, sp, #0
 8101792:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8101794:	687b      	ldr	r3, [r7, #4]
 8101796:	685a      	ldr	r2, [r3, #4]
 8101798:	687b      	ldr	r3, [r7, #4]
 810179a:	681b      	ldr	r3, [r3, #0]
 810179c:	1ad3      	subs	r3, r2, r3
 810179e:	10db      	asrs	r3, r3, #3
 81017a0:	4a04      	ldr	r2, [pc, #16]	@ (81017b4 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv+0x28>)
 81017a2:	fb02 f303 	mul.w	r3, r2, r3
 81017a6:	4618      	mov	r0, r3
 81017a8:	370c      	adds	r7, #12
 81017aa:	46bd      	mov	sp, r7
 81017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017b0:	4770      	bx	lr
 81017b2:	bf00      	nop
 81017b4:	aaaaaaab 	.word	0xaaaaaaab

081017b8 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 81017b8:	b580      	push	{r7, lr}
 81017ba:	b084      	sub	sp, #16
 81017bc:	af00      	add	r7, sp, #0
 81017be:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 81017c0:	687a      	ldr	r2, [r7, #4]
 81017c2:	f107 030c 	add.w	r3, r7, #12
 81017c6:	4611      	mov	r1, r2
 81017c8:	4618      	mov	r0, r3
 81017ca:	f000 fb03 	bl	8101dd4 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 81017ce:	68fb      	ldr	r3, [r7, #12]
 81017d0:	4618      	mov	r0, r3
 81017d2:	3710      	adds	r7, #16
 81017d4:	46bd      	mov	sp, r7
 81017d6:	bd80      	pop	{r7, pc}

081017d8 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 81017d8:	b580      	push	{r7, lr}
 81017da:	b084      	sub	sp, #16
 81017dc:	af00      	add	r7, sp, #0
 81017de:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 81017e0:	687b      	ldr	r3, [r7, #4]
 81017e2:	1d1a      	adds	r2, r3, #4
 81017e4:	f107 030c 	add.w	r3, r7, #12
 81017e8:	4611      	mov	r1, r2
 81017ea:	4618      	mov	r0, r3
 81017ec:	f000 faf2 	bl	8101dd4 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 81017f0:	68fb      	ldr	r3, [r7, #12]
 81017f2:	4618      	mov	r0, r3
 81017f4:	3710      	adds	r7, #16
 81017f6:	46bd      	mov	sp, r7
 81017f8:	bd80      	pop	{r7, pc}

081017fa <_ZN9__gnu_cxxneIP8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 81017fa:	b590      	push	{r4, r7, lr}
 81017fc:	b083      	sub	sp, #12
 81017fe:	af00      	add	r7, sp, #0
 8101800:	6078      	str	r0, [r7, #4]
 8101802:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8101804:	6878      	ldr	r0, [r7, #4]
 8101806:	f000 faf5 	bl	8101df4 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 810180a:	4603      	mov	r3, r0
 810180c:	681c      	ldr	r4, [r3, #0]
 810180e:	6838      	ldr	r0, [r7, #0]
 8101810:	f000 faf0 	bl	8101df4 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101814:	4603      	mov	r3, r0
 8101816:	681b      	ldr	r3, [r3, #0]
 8101818:	429c      	cmp	r4, r3
 810181a:	bf14      	ite	ne
 810181c:	2301      	movne	r3, #1
 810181e:	2300      	moveq	r3, #0
 8101820:	b2db      	uxtb	r3, r3
 8101822:	4618      	mov	r0, r3
 8101824:	370c      	adds	r7, #12
 8101826:	46bd      	mov	sp, r7
 8101828:	bd90      	pop	{r4, r7, pc}

0810182a <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810182a:	b480      	push	{r7}
 810182c:	b083      	sub	sp, #12
 810182e:	af00      	add	r7, sp, #0
 8101830:	6078      	str	r0, [r7, #4]
	++_M_current;
 8101832:	687b      	ldr	r3, [r7, #4]
 8101834:	681b      	ldr	r3, [r3, #0]
 8101836:	f103 0218 	add.w	r2, r3, #24
 810183a:	687b      	ldr	r3, [r7, #4]
 810183c:	601a      	str	r2, [r3, #0]
	return *this;
 810183e:	687b      	ldr	r3, [r7, #4]
      }
 8101840:	4618      	mov	r0, r3
 8101842:	370c      	adds	r7, #12
 8101844:	46bd      	mov	sp, r7
 8101846:	f85d 7b04 	ldr.w	r7, [sp], #4
 810184a:	4770      	bx	lr

0810184c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810184c:	b480      	push	{r7}
 810184e:	b083      	sub	sp, #12
 8101850:	af00      	add	r7, sp, #0
 8101852:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8101854:	687b      	ldr	r3, [r7, #4]
 8101856:	681b      	ldr	r3, [r3, #0]
 8101858:	4618      	mov	r0, r3
 810185a:	370c      	adds	r7, #12
 810185c:	46bd      	mov	sp, r7
 810185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101862:	4770      	bx	lr

08101864 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8101864:	b580      	push	{r7, lr}
 8101866:	b084      	sub	sp, #16
 8101868:	af00      	add	r7, sp, #0
 810186a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 810186c:	687a      	ldr	r2, [r7, #4]
 810186e:	f107 030c 	add.w	r3, r7, #12
 8101872:	4611      	mov	r1, r2
 8101874:	4618      	mov	r0, r3
 8101876:	f000 fac8 	bl	8101e0a <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 810187a:	68fb      	ldr	r3, [r7, #12]
 810187c:	4618      	mov	r0, r3
 810187e:	3710      	adds	r7, #16
 8101880:	46bd      	mov	sp, r7
 8101882:	bd80      	pop	{r7, pc}

08101884 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8101884:	b580      	push	{r7, lr}
 8101886:	b084      	sub	sp, #16
 8101888:	af00      	add	r7, sp, #0
 810188a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 810188c:	687b      	ldr	r3, [r7, #4]
 810188e:	1d1a      	adds	r2, r3, #4
 8101890:	f107 030c 	add.w	r3, r7, #12
 8101894:	4611      	mov	r1, r2
 8101896:	4618      	mov	r0, r3
 8101898:	f000 fab7 	bl	8101e0a <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 810189c:	68fb      	ldr	r3, [r7, #12]
 810189e:	4618      	mov	r0, r3
 81018a0:	3710      	adds	r7, #16
 81018a2:	46bd      	mov	sp, r7
 81018a4:	bd80      	pop	{r7, pc}

081018a6 <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 81018a6:	b590      	push	{r4, r7, lr}
 81018a8:	b083      	sub	sp, #12
 81018aa:	af00      	add	r7, sp, #0
 81018ac:	6078      	str	r0, [r7, #4]
 81018ae:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 81018b0:	6878      	ldr	r0, [r7, #4]
 81018b2:	f000 faba 	bl	8101e2a <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81018b6:	4603      	mov	r3, r0
 81018b8:	681c      	ldr	r4, [r3, #0]
 81018ba:	6838      	ldr	r0, [r7, #0]
 81018bc:	f000 fab5 	bl	8101e2a <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81018c0:	4603      	mov	r3, r0
 81018c2:	681b      	ldr	r3, [r3, #0]
 81018c4:	429c      	cmp	r4, r3
 81018c6:	bf14      	ite	ne
 81018c8:	2301      	movne	r3, #1
 81018ca:	2300      	moveq	r3, #0
 81018cc:	b2db      	uxtb	r3, r3
 81018ce:	4618      	mov	r0, r3
 81018d0:	370c      	adds	r7, #12
 81018d2:	46bd      	mov	sp, r7
 81018d4:	bd90      	pop	{r4, r7, pc}

081018d6 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 81018d6:	b480      	push	{r7}
 81018d8:	b083      	sub	sp, #12
 81018da:	af00      	add	r7, sp, #0
 81018dc:	6078      	str	r0, [r7, #4]
	++_M_current;
 81018de:	687b      	ldr	r3, [r7, #4]
 81018e0:	681b      	ldr	r3, [r3, #0]
 81018e2:	f103 0218 	add.w	r2, r3, #24
 81018e6:	687b      	ldr	r3, [r7, #4]
 81018e8:	601a      	str	r2, [r3, #0]
	return *this;
 81018ea:	687b      	ldr	r3, [r7, #4]
      }
 81018ec:	4618      	mov	r0, r3
 81018ee:	370c      	adds	r7, #12
 81018f0:	46bd      	mov	sp, r7
 81018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018f6:	4770      	bx	lr

081018f8 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 81018f8:	b480      	push	{r7}
 81018fa:	b083      	sub	sp, #12
 81018fc:	af00      	add	r7, sp, #0
 81018fe:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8101900:	687b      	ldr	r3, [r7, #4]
 8101902:	681b      	ldr	r3, [r3, #0]
 8101904:	4618      	mov	r0, r3
 8101906:	370c      	adds	r7, #12
 8101908:	46bd      	mov	sp, r7
 810190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810190e:	4770      	bx	lr

08101910 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 8101910:	b580      	push	{r7, lr}
 8101912:	b082      	sub	sp, #8
 8101914:	af00      	add	r7, sp, #0
 8101916:	6078      	str	r0, [r7, #4]
 8101918:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 810191a:	687b      	ldr	r3, [r7, #4]
 810191c:	6839      	ldr	r1, [r7, #0]
 810191e:	4618      	mov	r0, r3
 8101920:	f000 fa8e 	bl	8101e40 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 8101924:	4603      	mov	r3, r0
 8101926:	4618      	mov	r0, r3
 8101928:	3708      	adds	r7, #8
 810192a:	46bd      	mov	sp, r7
 810192c:	bd80      	pop	{r7, pc}

0810192e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 810192e:	b580      	push	{r7, lr}
 8101930:	b082      	sub	sp, #8
 8101932:	af00      	add	r7, sp, #0
 8101934:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8101936:	687b      	ldr	r3, [r7, #4]
 8101938:	4618      	mov	r0, r3
 810193a:	f000 fabd 	bl	8101eb8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 810193e:	4603      	mov	r3, r0
 8101940:	4618      	mov	r0, r3
 8101942:	3708      	adds	r7, #8
 8101944:	46bd      	mov	sp, r7
 8101946:	bd80      	pop	{r7, pc}

08101948 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8101948:	b480      	push	{r7}
 810194a:	b083      	sub	sp, #12
 810194c:	af00      	add	r7, sp, #0
 810194e:	6078      	str	r0, [r7, #4]
 8101950:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8101952:	687b      	ldr	r3, [r7, #4]
 8101954:	681a      	ldr	r2, [r3, #0]
 8101956:	683b      	ldr	r3, [r7, #0]
 8101958:	681b      	ldr	r3, [r3, #0]
 810195a:	429a      	cmp	r2, r3
 810195c:	bf14      	ite	ne
 810195e:	2301      	movne	r3, #1
 8101960:	2300      	moveq	r3, #0
 8101962:	b2db      	uxtb	r3, r3
 8101964:	4618      	mov	r0, r3
 8101966:	370c      	adds	r7, #12
 8101968:	46bd      	mov	sp, r7
 810196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810196e:	4770      	bx	lr

08101970 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8101970:	b590      	push	{r4, r7, lr}
 8101972:	b08b      	sub	sp, #44	@ 0x2c
 8101974:	af02      	add	r7, sp, #8
 8101976:	6078      	str	r0, [r7, #4]
 8101978:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 810197a:	6839      	ldr	r1, [r7, #0]
 810197c:	6878      	ldr	r0, [r7, #4]
 810197e:	f000 faac 	bl	8101eda <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8101982:	4603      	mov	r3, r0
 8101984:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8101986:	6878      	ldr	r0, [r7, #4]
 8101988:	f7ff ffd1 	bl	810192e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 810198c:	4603      	mov	r3, r0
 810198e:	60fb      	str	r3, [r7, #12]
 8101990:	f107 020c 	add.w	r2, r7, #12
 8101994:	f107 0308 	add.w	r3, r7, #8
 8101998:	4611      	mov	r1, r2
 810199a:	4618      	mov	r0, r3
 810199c:	f000 faac 	bl	8101ef8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 81019a0:	4603      	mov	r3, r0
 81019a2:	2b00      	cmp	r3, #0
 81019a4:	d112      	bne.n	81019cc <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x5c>
 81019a6:	6878      	ldr	r0, [r7, #4]
 81019a8:	f000 faba 	bl	8101f20 <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 81019ac:	f107 0308 	add.w	r3, r7, #8
 81019b0:	4618      	mov	r0, r3
 81019b2:	f000 fac2 	bl	8101f3a <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 81019b6:	4603      	mov	r3, r0
 81019b8:	461a      	mov	r2, r3
 81019ba:	f107 0310 	add.w	r3, r7, #16
 81019be:	6839      	ldr	r1, [r7, #0]
 81019c0:	4618      	mov	r0, r3
 81019c2:	f000 fac8 	bl	8101f56 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81019c6:	4603      	mov	r3, r0
 81019c8:	2b00      	cmp	r3, #0
 81019ca:	d001      	beq.n	81019d0 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 81019cc:	2301      	movs	r3, #1
 81019ce:	e000      	b.n	81019d2 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x62>
 81019d0:	2300      	movs	r3, #0
 81019d2:	2b00      	cmp	r3, #0
 81019d4:	d01b      	beq.n	8101a0e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 81019d6:	687c      	ldr	r4, [r7, #4]
 81019d8:	f107 0208 	add.w	r2, r7, #8
 81019dc:	f107 0314 	add.w	r3, r7, #20
 81019e0:	4611      	mov	r1, r2
 81019e2:	4618      	mov	r0, r3
 81019e4:	f000 fadb 	bl	8101f9e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 81019e8:	f107 0318 	add.w	r3, r7, #24
 81019ec:	6839      	ldr	r1, [r7, #0]
 81019ee:	4618      	mov	r0, r3
 81019f0:	f000 fac6 	bl	8101f80 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 81019f4:	f107 0218 	add.w	r2, r7, #24
 81019f8:	f107 031c 	add.w	r3, r7, #28
 81019fc:	9300      	str	r3, [sp, #0]
 81019fe:	4613      	mov	r3, r2
 8101a00:	4a08      	ldr	r2, [pc, #32]	@ (8101a24 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb4>)
 8101a02:	6979      	ldr	r1, [r7, #20]
 8101a04:	4620      	mov	r0, r4
 8101a06:	f000 fada 	bl	8101fbe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8101a0a:	4603      	mov	r3, r0
 8101a0c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8101a0e:	f107 0308 	add.w	r3, r7, #8
 8101a12:	4618      	mov	r0, r3
 8101a14:	f000 fa91 	bl	8101f3a <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8101a18:	4603      	mov	r3, r0
 8101a1a:	3304      	adds	r3, #4
      }
 8101a1c:	4618      	mov	r0, r3
 8101a1e:	3724      	adds	r7, #36	@ 0x24
 8101a20:	46bd      	mov	sp, r7
 8101a22:	bd90      	pop	{r4, r7, pc}
 8101a24:	0811a640 	.word	0x0811a640

08101a28 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8101a28:	b580      	push	{r7, lr}
 8101a2a:	b082      	sub	sp, #8
 8101a2c:	af00      	add	r7, sp, #0
 8101a2e:	6078      	str	r0, [r7, #4]
 8101a30:	6878      	ldr	r0, [r7, #4]
 8101a32:	f000 fb0a 	bl	810204a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 8101a36:	687b      	ldr	r3, [r7, #4]
 8101a38:	4618      	mov	r0, r3
 8101a3a:	3708      	adds	r7, #8
 8101a3c:	46bd      	mov	sp, r7
 8101a3e:	bd80      	pop	{r7, pc}

08101a40 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>:
      _Rb_tree_key_compare()
 8101a40:	b480      	push	{r7}
 8101a42:	b083      	sub	sp, #12
 8101a44:	af00      	add	r7, sp, #0
 8101a46:	6078      	str	r0, [r7, #4]
      { }
 8101a48:	687b      	ldr	r3, [r7, #4]
 8101a4a:	4618      	mov	r0, r3
 8101a4c:	370c      	adds	r7, #12
 8101a4e:	46bd      	mov	sp, r7
 8101a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a54:	4770      	bx	lr

08101a56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8101a56:	b580      	push	{r7, lr}
 8101a58:	b082      	sub	sp, #8
 8101a5a:	af00      	add	r7, sp, #0
 8101a5c:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 8101a5e:	6878      	ldr	r0, [r7, #4]
 8101a60:	f000 fb27 	bl	81020b2 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>
 8101a64:	4603      	mov	r3, r0
 8101a66:	4618      	mov	r0, r3
 8101a68:	3708      	adds	r7, #8
 8101a6a:	46bd      	mov	sp, r7
 8101a6c:	bd80      	pop	{r7, pc}

08101a6e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101a6e:	b480      	push	{r7}
 8101a70:	b083      	sub	sp, #12
 8101a72:	af00      	add	r7, sp, #0
 8101a74:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101a76:	687b      	ldr	r3, [r7, #4]
 8101a78:	4618      	mov	r0, r3
 8101a7a:	370c      	adds	r7, #12
 8101a7c:	46bd      	mov	sp, r7
 8101a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a82:	4770      	bx	lr

08101a84 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101a84:	b480      	push	{r7}
 8101a86:	b083      	sub	sp, #12
 8101a88:	af00      	add	r7, sp, #0
 8101a8a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101a8c:	687b      	ldr	r3, [r7, #4]
 8101a8e:	4618      	mov	r0, r3
 8101a90:	370c      	adds	r7, #12
 8101a92:	46bd      	mov	sp, r7
 8101a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a98:	4770      	bx	lr

08101a9a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101a9a:	b590      	push	{r4, r7, lr}
 8101a9c:	b08d      	sub	sp, #52	@ 0x34
 8101a9e:	af00      	add	r7, sp, #0
 8101aa0:	60f8      	str	r0, [r7, #12]
 8101aa2:	60b9      	str	r1, [r7, #8]
 8101aa4:	607a      	str	r2, [r7, #4]
 8101aa6:	603b      	str	r3, [r7, #0]
      _M_emplace_unique(_Args&&... __args)
      -> pair<iterator, bool>
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8101aa8:	6878      	ldr	r0, [r7, #4]
 8101aaa:	f7ff ffe0 	bl	8101a6e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8101aae:	4604      	mov	r4, r0
 8101ab0:	6838      	ldr	r0, [r7, #0]
 8101ab2:	f7ff ffe7 	bl	8101a84 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8101ab6:	4603      	mov	r3, r0
 8101ab8:	f107 0018 	add.w	r0, r7, #24
 8101abc:	4622      	mov	r2, r4
 8101abe:	68b9      	ldr	r1, [r7, #8]
 8101ac0:	f000 fb03 	bl	81020ca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>
	auto __res = _M_get_insert_unique_pos(__z._M_key());
 8101ac4:	f107 0318 	add.w	r3, r7, #24
 8101ac8:	4618      	mov	r0, r3
 8101aca:	f000 fbb7 	bl	810223c <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8101ace:	4602      	mov	r2, r0
 8101ad0:	f107 0310 	add.w	r3, r7, #16
 8101ad4:	68b9      	ldr	r1, [r7, #8]
 8101ad6:	4618      	mov	r0, r3
 8101ad8:	f000 fb2b 	bl	8102132 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
	if (__res.second)
 8101adc:	697b      	ldr	r3, [r7, #20]
 8101ade:	2b00      	cmp	r3, #0
 8101ae0:	d015      	beq.n	8101b0e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x74>
	  return {__z._M_insert(__res), true};
 8101ae2:	f107 0018 	add.w	r0, r7, #24
 8101ae6:	f107 0310 	add.w	r3, r7, #16
 8101aea:	e893 0006 	ldmia.w	r3, {r1, r2}
 8101aee:	f000 fbb3 	bl	8102258 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8101af2:	4603      	mov	r3, r0
 8101af4:	623b      	str	r3, [r7, #32]
 8101af6:	2301      	movs	r3, #1
 8101af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8101afc:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 8101b00:	f107 0320 	add.w	r3, r7, #32
 8101b04:	4619      	mov	r1, r3
 8101b06:	68f8      	ldr	r0, [r7, #12]
 8101b08:	f000 fbbf 	bl	810228a <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
 8101b0c:	e011      	b.n	8101b32 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x98>
	return {iterator(__res.first), false};
 8101b0e:	693a      	ldr	r2, [r7, #16]
 8101b10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101b14:	4611      	mov	r1, r2
 8101b16:	4618      	mov	r0, r3
 8101b18:	f000 fbd0 	bl	81022bc <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8101b1c:	2300      	movs	r3, #0
 8101b1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8101b22:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 8101b26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101b2a:	4619      	mov	r1, r3
 8101b2c:	68f8      	ldr	r0, [r7, #12]
 8101b2e:	f000 fbac 	bl	810228a <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
      }
 8101b32:	f107 0318 	add.w	r3, r7, #24
 8101b36:	4618      	mov	r0, r3
 8101b38:	f000 fae6 	bl	8102108 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8101b3c:	68f8      	ldr	r0, [r7, #12]
 8101b3e:	3734      	adds	r7, #52	@ 0x34
 8101b40:	46bd      	mov	sp, r7
 8101b42:	bd90      	pop	{r4, r7, pc}

08101b44 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8101b44:	b480      	push	{r7}
 8101b46:	b083      	sub	sp, #12
 8101b48:	af00      	add	r7, sp, #0
 8101b4a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8101b4c:	687b      	ldr	r3, [r7, #4]
 8101b4e:	4618      	mov	r0, r3
 8101b50:	370c      	adds	r7, #12
 8101b52:	46bd      	mov	sp, r7
 8101b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b58:	4770      	bx	lr

08101b5a <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8101b5a:	b580      	push	{r7, lr}
 8101b5c:	b084      	sub	sp, #16
 8101b5e:	af00      	add	r7, sp, #0
 8101b60:	60f8      	str	r0, [r7, #12]
 8101b62:	60b9      	str	r1, [r7, #8]
 8101b64:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8101b66:	68b9      	ldr	r1, [r7, #8]
 8101b68:	68f8      	ldr	r0, [r7, #12]
 8101b6a:	f000 fbc2 	bl	81022f2 <_ZSt8_DestroyIP8SMessageEvT_S2_>
    }
 8101b6e:	bf00      	nop
 8101b70:	3710      	adds	r7, #16
 8101b72:	46bd      	mov	sp, r7
 8101b74:	bd80      	pop	{r7, pc}

08101b76 <_ZNSaI8SMessageEC1Ev>:
 8101b76:	b580      	push	{r7, lr}
 8101b78:	b082      	sub	sp, #8
 8101b7a:	af00      	add	r7, sp, #0
 8101b7c:	6078      	str	r0, [r7, #4]
 8101b7e:	6878      	ldr	r0, [r7, #4]
 8101b80:	f000 fbc4 	bl	810230c <_ZNSt15__new_allocatorI8SMessageEC1Ev>
 8101b84:	687b      	ldr	r3, [r7, #4]
 8101b86:	4618      	mov	r0, r3
 8101b88:	3708      	adds	r7, #8
 8101b8a:	46bd      	mov	sp, r7
 8101b8c:	bd80      	pop	{r7, pc}

08101b8e <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8101b8e:	b480      	push	{r7}
 8101b90:	b083      	sub	sp, #12
 8101b92:	af00      	add	r7, sp, #0
 8101b94:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8101b96:	687b      	ldr	r3, [r7, #4]
 8101b98:	2200      	movs	r2, #0
 8101b9a:	601a      	str	r2, [r3, #0]
 8101b9c:	687b      	ldr	r3, [r7, #4]
 8101b9e:	2200      	movs	r2, #0
 8101ba0:	605a      	str	r2, [r3, #4]
 8101ba2:	687b      	ldr	r3, [r7, #4]
 8101ba4:	2200      	movs	r2, #0
 8101ba6:	609a      	str	r2, [r3, #8]
	{ }
 8101ba8:	687b      	ldr	r3, [r7, #4]
 8101baa:	4618      	mov	r0, r3
 8101bac:	370c      	adds	r7, #12
 8101bae:	46bd      	mov	sp, r7
 8101bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bb4:	4770      	bx	lr

08101bb6 <_ZNSt15__new_allocatorI8SMessageED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8101bb6:	b480      	push	{r7}
 8101bb8:	b083      	sub	sp, #12
 8101bba:	af00      	add	r7, sp, #0
 8101bbc:	6078      	str	r0, [r7, #4]
 8101bbe:	687b      	ldr	r3, [r7, #4]
 8101bc0:	4618      	mov	r0, r3
 8101bc2:	370c      	adds	r7, #12
 8101bc4:	46bd      	mov	sp, r7
 8101bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bca:	4770      	bx	lr

08101bcc <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8101bcc:	b580      	push	{r7, lr}
 8101bce:	b084      	sub	sp, #16
 8101bd0:	af00      	add	r7, sp, #0
 8101bd2:	60f8      	str	r0, [r7, #12]
 8101bd4:	60b9      	str	r1, [r7, #8]
 8101bd6:	607a      	str	r2, [r7, #4]
	if (__p)
 8101bd8:	68bb      	ldr	r3, [r7, #8]
 8101bda:	2b00      	cmp	r3, #0
 8101bdc:	d005      	beq.n	8101bea <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8101bde:	68fb      	ldr	r3, [r7, #12]
 8101be0:	687a      	ldr	r2, [r7, #4]
 8101be2:	68b9      	ldr	r1, [r7, #8]
 8101be4:	4618      	mov	r0, r3
 8101be6:	f000 fb9c 	bl	8102322 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>
      }
 8101bea:	bf00      	nop
 8101bec:	3710      	adds	r7, #16
 8101bee:	46bd      	mov	sp, r7
 8101bf0:	bd80      	pop	{r7, pc}

08101bf2 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8101bf2:	b580      	push	{r7, lr}
 8101bf4:	b084      	sub	sp, #16
 8101bf6:	af00      	add	r7, sp, #0
 8101bf8:	60f8      	str	r0, [r7, #12]
 8101bfa:	60b9      	str	r1, [r7, #8]
 8101bfc:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8101bfe:	6878      	ldr	r0, [r7, #4]
 8101c00:	f000 fb9e 	bl	8102340 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8101c04:	4603      	mov	r3, r0
 8101c06:	461a      	mov	r2, r3
 8101c08:	68b9      	ldr	r1, [r7, #8]
 8101c0a:	68f8      	ldr	r0, [r7, #12]
 8101c0c:	f000 fba3 	bl	8102356 <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>
	}
 8101c10:	bf00      	nop
 8101c12:	3710      	adds	r7, #16
 8101c14:	46bd      	mov	sp, r7
 8101c16:	bd80      	pop	{r7, pc}

08101c18 <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8101c18:	b580      	push	{r7, lr}
 8101c1a:	b082      	sub	sp, #8
 8101c1c:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8101c1e:	4618      	mov	r0, r3
 8101c20:	f000 f805 	bl	8101c2e <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8101c24:	4603      	mov	r3, r0
      }
 8101c26:	4618      	mov	r0, r3
 8101c28:	3708      	adds	r7, #8
 8101c2a:	46bd      	mov	sp, r7
 8101c2c:	bd80      	pop	{r7, pc}

08101c2e <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8101c2e:	b480      	push	{r7}
 8101c30:	b083      	sub	sp, #12
 8101c32:	af00      	add	r7, sp, #0
 8101c34:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8101c36:	2301      	movs	r3, #1
      }
 8101c38:	4618      	mov	r0, r3
 8101c3a:	370c      	adds	r7, #12
 8101c3c:	46bd      	mov	sp, r7
 8101c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c42:	4770      	bx	lr

08101c44 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8101c44:	b5b0      	push	{r4, r5, r7, lr}
 8101c46:	b08c      	sub	sp, #48	@ 0x30
 8101c48:	af00      	add	r7, sp, #0
 8101c4a:	60f8      	str	r0, [r7, #12]
 8101c4c:	60b9      	str	r1, [r7, #8]
 8101c4e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8101c50:	4a5e      	ldr	r2, [pc, #376]	@ (8101dcc <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 8101c52:	2101      	movs	r1, #1
 8101c54:	68f8      	ldr	r0, [r7, #12]
 8101c56:	f000 fb99 	bl	810238c <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>
 8101c5a:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8101c5c:	68fb      	ldr	r3, [r7, #12]
 8101c5e:	681b      	ldr	r3, [r3, #0]
 8101c60:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8101c62:	68fb      	ldr	r3, [r7, #12]
 8101c64:	685b      	ldr	r3, [r3, #4]
 8101c66:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8101c68:	68f8      	ldr	r0, [r7, #12]
 8101c6a:	f7ff fda5 	bl	81017b8 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 8101c6e:	4603      	mov	r3, r0
 8101c70:	617b      	str	r3, [r7, #20]
 8101c72:	f107 0214 	add.w	r2, r7, #20
 8101c76:	f107 0308 	add.w	r3, r7, #8
 8101c7a:	4611      	mov	r1, r2
 8101c7c:	4618      	mov	r0, r3
 8101c7e:	f000 fbcd 	bl	810241c <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8101c82:	4603      	mov	r3, r0
 8101c84:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8101c86:	68fb      	ldr	r3, [r7, #12]
 8101c88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8101c8a:	4618      	mov	r0, r3
 8101c8c:	f000 fbe0 	bl	8102450 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>
 8101c90:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8101c92:	69bb      	ldr	r3, [r7, #24]
 8101c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8101c96:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8101c98:	69fa      	ldr	r2, [r7, #28]
 8101c9a:	4613      	mov	r3, r2
 8101c9c:	005b      	lsls	r3, r3, #1
 8101c9e:	4413      	add	r3, r2
 8101ca0:	00db      	lsls	r3, r3, #3
 8101ca2:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8101ca4:	69bb      	ldr	r3, [r7, #24]
 8101ca6:	189d      	adds	r5, r3, r2
 8101ca8:	6878      	ldr	r0, [r7, #4]
 8101caa:	f000 fb49 	bl	8102340 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8101cae:	4603      	mov	r3, r0
 8101cb0:	461a      	mov	r2, r3
 8101cb2:	4629      	mov	r1, r5
 8101cb4:	4620      	mov	r0, r4
 8101cb6:	f7ff ff9c 	bl	8101bf2 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8101cba:	2300      	movs	r3, #0
 8101cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8101cbe:	f7ff ffab 	bl	8101c18 <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8101cc2:	4603      	mov	r3, r0
 8101cc4:	2b00      	cmp	r3, #0
 8101cc6:	d027      	beq.n	8101d18 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8101cc8:	f107 0308 	add.w	r3, r7, #8
 8101ccc:	4618      	mov	r0, r3
 8101cce:	f000 f891 	bl	8101df4 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101cd2:	4603      	mov	r3, r0
 8101cd4:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8101cd6:	68fb      	ldr	r3, [r7, #12]
 8101cd8:	4618      	mov	r0, r3
 8101cda:	f7ff ff33 	bl	8101b44 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101cde:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8101ce0:	69ba      	ldr	r2, [r7, #24]
 8101ce2:	4621      	mov	r1, r4
 8101ce4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101ce6:	f000 fbc7 	bl	8102478 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8101cea:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8101cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101cee:	3318      	adds	r3, #24
 8101cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8101cf2:	f107 0308 	add.w	r3, r7, #8
 8101cf6:	4618      	mov	r0, r3
 8101cf8:	f000 f87c 	bl	8101df4 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101cfc:	4603      	mov	r3, r0
 8101cfe:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8101d00:	68fb      	ldr	r3, [r7, #12]
 8101d02:	4618      	mov	r0, r3
 8101d04:	f7ff ff1e 	bl	8101b44 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101d08:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8101d0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101d0c:	6a39      	ldr	r1, [r7, #32]
 8101d0e:	4620      	mov	r0, r4
 8101d10:	f000 fbb2 	bl	8102478 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8101d14:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8101d16:	e026      	b.n	8101d66 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8101d18:	f107 0308 	add.w	r3, r7, #8
 8101d1c:	4618      	mov	r0, r3
 8101d1e:	f000 f869 	bl	8101df4 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101d22:	4603      	mov	r3, r0
 8101d24:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8101d26:	68fb      	ldr	r3, [r7, #12]
 8101d28:	4618      	mov	r0, r3
 8101d2a:	f7ff ff0b 	bl	8101b44 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101d2e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8101d30:	69ba      	ldr	r2, [r7, #24]
 8101d32:	4621      	mov	r1, r4
 8101d34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101d36:	f000 fbb3 	bl	81024a0 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8101d3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8101d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101d3e:	3318      	adds	r3, #24
 8101d40:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8101d42:	f107 0308 	add.w	r3, r7, #8
 8101d46:	4618      	mov	r0, r3
 8101d48:	f000 f854 	bl	8101df4 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101d4c:	4603      	mov	r3, r0
 8101d4e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8101d50:	68fb      	ldr	r3, [r7, #12]
 8101d52:	4618      	mov	r0, r3
 8101d54:	f7ff fef6 	bl	8101b44 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101d58:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8101d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101d5c:	6a39      	ldr	r1, [r7, #32]
 8101d5e:	4620      	mov	r0, r4
 8101d60:	f000 fb9e 	bl	81024a0 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8101d64:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8101d66:	f7ff ff57 	bl	8101c18 <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8101d6a:	4603      	mov	r3, r0
 8101d6c:	f083 0301 	eor.w	r3, r3, #1
 8101d70:	b2db      	uxtb	r3, r3
 8101d72:	2b00      	cmp	r3, #0
 8101d74:	d009      	beq.n	8101d8a <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8101d76:	68fb      	ldr	r3, [r7, #12]
 8101d78:	4618      	mov	r0, r3
 8101d7a:	f7ff fee3 	bl	8101b44 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101d7e:	4603      	mov	r3, r0
 8101d80:	461a      	mov	r2, r3
 8101d82:	6a39      	ldr	r1, [r7, #32]
 8101d84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101d86:	f7ff fee8 	bl	8101b5a <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8101d8a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8101d8c:	68fb      	ldr	r3, [r7, #12]
 8101d8e:	689a      	ldr	r2, [r3, #8]
 8101d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101d92:	1ad3      	subs	r3, r2, r3
 8101d94:	10db      	asrs	r3, r3, #3
 8101d96:	4a0e      	ldr	r2, [pc, #56]	@ (8101dd0 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 8101d98:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8101d9c:	461a      	mov	r2, r3
 8101d9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8101da0:	f7ff ff14 	bl	8101bcc <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8101da4:	68fb      	ldr	r3, [r7, #12]
 8101da6:	69ba      	ldr	r2, [r7, #24]
 8101da8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8101daa:	68fb      	ldr	r3, [r7, #12]
 8101dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101dae:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8101db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8101db2:	4613      	mov	r3, r2
 8101db4:	005b      	lsls	r3, r3, #1
 8101db6:	4413      	add	r3, r2
 8101db8:	00db      	lsls	r3, r3, #3
 8101dba:	461a      	mov	r2, r3
 8101dbc:	69bb      	ldr	r3, [r7, #24]
 8101dbe:	441a      	add	r2, r3
 8101dc0:	68fb      	ldr	r3, [r7, #12]
 8101dc2:	609a      	str	r2, [r3, #8]
    }
 8101dc4:	bf00      	nop
 8101dc6:	3730      	adds	r7, #48	@ 0x30
 8101dc8:	46bd      	mov	sp, r7
 8101dca:	bdb0      	pop	{r4, r5, r7, pc}
 8101dcc:	081176c0 	.word	0x081176c0
 8101dd0:	aaaaaaab 	.word	0xaaaaaaab

08101dd4 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8101dd4:	b480      	push	{r7}
 8101dd6:	b083      	sub	sp, #12
 8101dd8:	af00      	add	r7, sp, #0
 8101dda:	6078      	str	r0, [r7, #4]
 8101ddc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8101dde:	683b      	ldr	r3, [r7, #0]
 8101de0:	681a      	ldr	r2, [r3, #0]
 8101de2:	687b      	ldr	r3, [r7, #4]
 8101de4:	601a      	str	r2, [r3, #0]
 8101de6:	687b      	ldr	r3, [r7, #4]
 8101de8:	4618      	mov	r0, r3
 8101dea:	370c      	adds	r7, #12
 8101dec:	46bd      	mov	sp, r7
 8101dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101df2:	4770      	bx	lr

08101df4 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8101df4:	b480      	push	{r7}
 8101df6:	b083      	sub	sp, #12
 8101df8:	af00      	add	r7, sp, #0
 8101dfa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8101dfc:	687b      	ldr	r3, [r7, #4]
 8101dfe:	4618      	mov	r0, r3
 8101e00:	370c      	adds	r7, #12
 8101e02:	46bd      	mov	sp, r7
 8101e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e08:	4770      	bx	lr

08101e0a <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8101e0a:	b480      	push	{r7}
 8101e0c:	b083      	sub	sp, #12
 8101e0e:	af00      	add	r7, sp, #0
 8101e10:	6078      	str	r0, [r7, #4]
 8101e12:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8101e14:	683b      	ldr	r3, [r7, #0]
 8101e16:	681a      	ldr	r2, [r3, #0]
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	601a      	str	r2, [r3, #0]
 8101e1c:	687b      	ldr	r3, [r7, #4]
 8101e1e:	4618      	mov	r0, r3
 8101e20:	370c      	adds	r7, #12
 8101e22:	46bd      	mov	sp, r7
 8101e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e28:	4770      	bx	lr

08101e2a <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8101e2a:	b480      	push	{r7}
 8101e2c:	b083      	sub	sp, #12
 8101e2e:	af00      	add	r7, sp, #0
 8101e30:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8101e32:	687b      	ldr	r3, [r7, #4]
 8101e34:	4618      	mov	r0, r3
 8101e36:	370c      	adds	r7, #12
 8101e38:	46bd      	mov	sp, r7
 8101e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e3e:	4770      	bx	lr

08101e40 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101e40:	b590      	push	{r4, r7, lr}
 8101e42:	b085      	sub	sp, #20
 8101e44:	af00      	add	r7, sp, #0
 8101e46:	6078      	str	r0, [r7, #4]
 8101e48:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8101e4a:	6878      	ldr	r0, [r7, #4]
 8101e4c:	f7ff fe03 	bl	8101a56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8101e50:	4604      	mov	r4, r0
 8101e52:	6878      	ldr	r0, [r7, #4]
 8101e54:	f000 fb3d 	bl	81024d2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8101e58:	4602      	mov	r2, r0
 8101e5a:	683b      	ldr	r3, [r7, #0]
 8101e5c:	4621      	mov	r1, r4
 8101e5e:	6878      	ldr	r0, [r7, #4]
 8101e60:	f000 fb43 	bl	81024ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8101e64:	4603      	mov	r3, r0
 8101e66:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8101e68:	6878      	ldr	r0, [r7, #4]
 8101e6a:	f000 f825 	bl	8101eb8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8101e6e:	4603      	mov	r3, r0
 8101e70:	60fb      	str	r3, [r7, #12]
 8101e72:	f107 020c 	add.w	r2, r7, #12
 8101e76:	f107 0308 	add.w	r3, r7, #8
 8101e7a:	4611      	mov	r1, r2
 8101e7c:	4618      	mov	r0, r3
 8101e7e:	f000 f83b 	bl	8101ef8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101e82:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8101e84:	2b00      	cmp	r3, #0
 8101e86:	d10d      	bne.n	8101ea4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x64>
	      || _M_impl._M_key_compare(__k,
 8101e88:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8101e8a:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8101e8c:	4618      	mov	r0, r3
 8101e8e:	f000 fb5d 	bl	810254c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8101e92:	4603      	mov	r3, r0
 8101e94:	461a      	mov	r2, r3
 8101e96:	6839      	ldr	r1, [r7, #0]
 8101e98:	4620      	mov	r0, r4
 8101e9a:	f000 f85c 	bl	8101f56 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101e9e:	4603      	mov	r3, r0
 8101ea0:	2b00      	cmp	r3, #0
 8101ea2:	d004      	beq.n	8101eae <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8101ea4:	6878      	ldr	r0, [r7, #4]
 8101ea6:	f000 f807 	bl	8101eb8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8101eaa:	4603      	mov	r3, r0
 8101eac:	e000      	b.n	8101eb0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x70>
 8101eae:	68bb      	ldr	r3, [r7, #8]
    }
 8101eb0:	4618      	mov	r0, r3
 8101eb2:	3714      	adds	r7, #20
 8101eb4:	46bd      	mov	sp, r7
 8101eb6:	bd90      	pop	{r4, r7, pc}

08101eb8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8101eb8:	b580      	push	{r7, lr}
 8101eba:	b084      	sub	sp, #16
 8101ebc:	af00      	add	r7, sp, #0
 8101ebe:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	1d1a      	adds	r2, r3, #4
 8101ec4:	f107 030c 	add.w	r3, r7, #12
 8101ec8:	4611      	mov	r1, r2
 8101eca:	4618      	mov	r0, r3
 8101ecc:	f000 f9f6 	bl	81022bc <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8101ed0:	68fb      	ldr	r3, [r7, #12]
 8101ed2:	4618      	mov	r0, r3
 8101ed4:	3710      	adds	r7, #16
 8101ed6:	46bd      	mov	sp, r7
 8101ed8:	bd80      	pop	{r7, pc}

08101eda <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8101eda:	b580      	push	{r7, lr}
 8101edc:	b082      	sub	sp, #8
 8101ede:	af00      	add	r7, sp, #0
 8101ee0:	6078      	str	r0, [r7, #4]
 8101ee2:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8101ee4:	687b      	ldr	r3, [r7, #4]
 8101ee6:	6839      	ldr	r1, [r7, #0]
 8101ee8:	4618      	mov	r0, r3
 8101eea:	f000 fb3b 	bl	8102564 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8101eee:	4603      	mov	r3, r0
 8101ef0:	4618      	mov	r0, r3
 8101ef2:	3708      	adds	r7, #8
 8101ef4:	46bd      	mov	sp, r7
 8101ef6:	bd80      	pop	{r7, pc}

08101ef8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8101ef8:	b480      	push	{r7}
 8101efa:	b083      	sub	sp, #12
 8101efc:	af00      	add	r7, sp, #0
 8101efe:	6078      	str	r0, [r7, #4]
 8101f00:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8101f02:	687b      	ldr	r3, [r7, #4]
 8101f04:	681a      	ldr	r2, [r3, #0]
 8101f06:	683b      	ldr	r3, [r7, #0]
 8101f08:	681b      	ldr	r3, [r3, #0]
 8101f0a:	429a      	cmp	r2, r3
 8101f0c:	bf0c      	ite	eq
 8101f0e:	2301      	moveq	r3, #1
 8101f10:	2300      	movne	r3, #0
 8101f12:	b2db      	uxtb	r3, r3
 8101f14:	4618      	mov	r0, r3
 8101f16:	370c      	adds	r7, #12
 8101f18:	46bd      	mov	sp, r7
 8101f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f1e:	4770      	bx	lr

08101f20 <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8101f20:	b590      	push	{r4, r7, lr}
 8101f22:	b083      	sub	sp, #12
 8101f24:	af00      	add	r7, sp, #0
 8101f26:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8101f28:	687b      	ldr	r3, [r7, #4]
 8101f2a:	4618      	mov	r0, r3
 8101f2c:	f000 fb31 	bl	8102592 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8101f30:	bf00      	nop
 8101f32:	4620      	mov	r0, r4
 8101f34:	370c      	adds	r7, #12
 8101f36:	46bd      	mov	sp, r7
 8101f38:	bd90      	pop	{r4, r7, pc}

08101f3a <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8101f3a:	b580      	push	{r7, lr}
 8101f3c:	b082      	sub	sp, #8
 8101f3e:	af00      	add	r7, sp, #0
 8101f40:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8101f42:	687b      	ldr	r3, [r7, #4]
 8101f44:	681b      	ldr	r3, [r3, #0]
 8101f46:	4618      	mov	r0, r3
 8101f48:	f000 fb2e 	bl	81025a8 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8101f4c:	4603      	mov	r3, r0
 8101f4e:	4618      	mov	r0, r3
 8101f50:	3708      	adds	r7, #8
 8101f52:	46bd      	mov	sp, r7
 8101f54:	bd80      	pop	{r7, pc}

08101f56 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8101f56:	b480      	push	{r7}
 8101f58:	b085      	sub	sp, #20
 8101f5a:	af00      	add	r7, sp, #0
 8101f5c:	60f8      	str	r0, [r7, #12]
 8101f5e:	60b9      	str	r1, [r7, #8]
 8101f60:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8101f62:	68bb      	ldr	r3, [r7, #8]
 8101f64:	781a      	ldrb	r2, [r3, #0]
 8101f66:	687b      	ldr	r3, [r7, #4]
 8101f68:	781b      	ldrb	r3, [r3, #0]
 8101f6a:	429a      	cmp	r2, r3
 8101f6c:	bf34      	ite	cc
 8101f6e:	2301      	movcc	r3, #1
 8101f70:	2300      	movcs	r3, #0
 8101f72:	b2db      	uxtb	r3, r3
 8101f74:	4618      	mov	r0, r3
 8101f76:	3714      	adds	r7, #20
 8101f78:	46bd      	mov	sp, r7
 8101f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f7e:	4770      	bx	lr

08101f80 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8101f80:	b580      	push	{r7, lr}
 8101f82:	b082      	sub	sp, #8
 8101f84:	af00      	add	r7, sp, #0
 8101f86:	6078      	str	r0, [r7, #4]
 8101f88:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	6839      	ldr	r1, [r7, #0]
 8101f8e:	4618      	mov	r0, r3
 8101f90:	f000 fb18 	bl	81025c4 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	4618      	mov	r0, r3
 8101f98:	3708      	adds	r7, #8
 8101f9a:	46bd      	mov	sp, r7
 8101f9c:	bd80      	pop	{r7, pc}

08101f9e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8101f9e:	b480      	push	{r7}
 8101fa0:	b083      	sub	sp, #12
 8101fa2:	af00      	add	r7, sp, #0
 8101fa4:	6078      	str	r0, [r7, #4]
 8101fa6:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8101fa8:	683b      	ldr	r3, [r7, #0]
 8101faa:	681a      	ldr	r2, [r3, #0]
 8101fac:	687b      	ldr	r3, [r7, #4]
 8101fae:	601a      	str	r2, [r3, #0]
 8101fb0:	687b      	ldr	r3, [r7, #4]
 8101fb2:	4618      	mov	r0, r3
 8101fb4:	370c      	adds	r7, #12
 8101fb6:	46bd      	mov	sp, r7
 8101fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fbc:	4770      	bx	lr

08101fbe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101fbe:	b5b0      	push	{r4, r5, r7, lr}
 8101fc0:	b08c      	sub	sp, #48	@ 0x30
 8101fc2:	af02      	add	r7, sp, #8
 8101fc4:	60f8      	str	r0, [r7, #12]
 8101fc6:	60b9      	str	r1, [r7, #8]
 8101fc8:	607a      	str	r2, [r7, #4]
 8101fca:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8101fcc:	6878      	ldr	r0, [r7, #4]
 8101fce:	f000 fb08 	bl	81025e2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8101fd2:	4604      	mov	r4, r0
 8101fd4:	6838      	ldr	r0, [r7, #0]
 8101fd6:	f000 fb0f 	bl	81025f8 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8101fda:	4605      	mov	r5, r0
 8101fdc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101fde:	f000 fb16 	bl	810260e <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8101fe2:	4603      	mov	r3, r0
 8101fe4:	f107 001c 	add.w	r0, r7, #28
 8101fe8:	9300      	str	r3, [sp, #0]
 8101fea:	462b      	mov	r3, r5
 8101fec:	4622      	mov	r2, r4
 8101fee:	68f9      	ldr	r1, [r7, #12]
 8101ff0:	f000 fb18 	bl	8102624 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8101ff4:	f107 031c 	add.w	r3, r7, #28
 8101ff8:	4618      	mov	r0, r3
 8101ffa:	f000 f91f 	bl	810223c <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8101ffe:	4603      	mov	r3, r0
 8102000:	f107 0014 	add.w	r0, r7, #20
 8102004:	68ba      	ldr	r2, [r7, #8]
 8102006:	68f9      	ldr	r1, [r7, #12]
 8102008:	f000 fb2f 	bl	810266a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 810200c:	69bb      	ldr	r3, [r7, #24]
 810200e:	2b00      	cmp	r3, #0
 8102010:	d009      	beq.n	8102026 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8102012:	f107 001c 	add.w	r0, r7, #28
 8102016:	f107 0314 	add.w	r3, r7, #20
 810201a:	e893 0006 	ldmia.w	r3, {r1, r2}
 810201e:	f000 f91b 	bl	8102258 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8102022:	4604      	mov	r4, r0
 8102024:	e007      	b.n	8102036 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8102026:	697a      	ldr	r2, [r7, #20]
 8102028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810202c:	4611      	mov	r1, r2
 810202e:	4618      	mov	r0, r3
 8102030:	f000 f944 	bl	81022bc <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102034:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8102036:	f107 031c 	add.w	r3, r7, #28
 810203a:	4618      	mov	r0, r3
 810203c:	f000 f864 	bl	8102108 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8102040:	4623      	mov	r3, r4
 8102042:	4618      	mov	r0, r3
 8102044:	3728      	adds	r7, #40	@ 0x28
 8102046:	46bd      	mov	sp, r7
 8102048:	bdb0      	pop	{r4, r5, r7, pc}

0810204a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 810204a:	b480      	push	{r7}
 810204c:	b083      	sub	sp, #12
 810204e:	af00      	add	r7, sp, #0
 8102050:	6078      	str	r0, [r7, #4]
 8102052:	687b      	ldr	r3, [r7, #4]
 8102054:	4618      	mov	r0, r3
 8102056:	370c      	adds	r7, #12
 8102058:	46bd      	mov	sp, r7
 810205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810205e:	4770      	bx	lr

08102060 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8102060:	b480      	push	{r7}
 8102062:	b083      	sub	sp, #12
 8102064:	af00      	add	r7, sp, #0
 8102066:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8102068:	687b      	ldr	r3, [r7, #4]
 810206a:	68db      	ldr	r3, [r3, #12]
 810206c:	4618      	mov	r0, r3
 810206e:	370c      	adds	r7, #12
 8102070:	46bd      	mov	sp, r7
 8102072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102076:	4770      	bx	lr

08102078 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8102078:	b480      	push	{r7}
 810207a:	b083      	sub	sp, #12
 810207c:	af00      	add	r7, sp, #0
 810207e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8102080:	687b      	ldr	r3, [r7, #4]
 8102082:	689b      	ldr	r3, [r3, #8]
 8102084:	4618      	mov	r0, r3
 8102086:	370c      	adds	r7, #12
 8102088:	46bd      	mov	sp, r7
 810208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810208e:	4770      	bx	lr

08102090 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8102090:	b580      	push	{r7, lr}
 8102092:	b082      	sub	sp, #8
 8102094:	af00      	add	r7, sp, #0
 8102096:	6078      	str	r0, [r7, #4]
 8102098:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 810209a:	6839      	ldr	r1, [r7, #0]
 810209c:	6878      	ldr	r0, [r7, #4]
 810209e:	f000 fc07 	bl	81028b0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 81020a2:	6839      	ldr	r1, [r7, #0]
 81020a4:	6878      	ldr	r0, [r7, #4]
 81020a6:	f000 fc18 	bl	81028da <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 81020aa:	bf00      	nop
 81020ac:	3708      	adds	r7, #8
 81020ae:	46bd      	mov	sp, r7
 81020b0:	bd80      	pop	{r7, pc}

081020b2 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 81020b2:	b480      	push	{r7}
 81020b4:	b083      	sub	sp, #12
 81020b6:	af00      	add	r7, sp, #0
 81020b8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 81020ba:	687b      	ldr	r3, [r7, #4]
 81020bc:	689b      	ldr	r3, [r3, #8]
 81020be:	4618      	mov	r0, r3
 81020c0:	370c      	adds	r7, #12
 81020c2:	46bd      	mov	sp, r7
 81020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020c8:	4770      	bx	lr

081020ca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 81020ca:	b590      	push	{r4, r7, lr}
 81020cc:	b085      	sub	sp, #20
 81020ce:	af00      	add	r7, sp, #0
 81020d0:	60f8      	str	r0, [r7, #12]
 81020d2:	60b9      	str	r1, [r7, #8]
 81020d4:	607a      	str	r2, [r7, #4]
 81020d6:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 81020d8:	68fb      	ldr	r3, [r7, #12]
 81020da:	68ba      	ldr	r2, [r7, #8]
 81020dc:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 81020de:	6878      	ldr	r0, [r7, #4]
 81020e0:	f7ff fcc5 	bl	8101a6e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81020e4:	4604      	mov	r4, r0
 81020e6:	6838      	ldr	r0, [r7, #0]
 81020e8:	f7ff fccc 	bl	8101a84 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81020ec:	4603      	mov	r3, r0
 81020ee:	461a      	mov	r2, r3
 81020f0:	4621      	mov	r1, r4
 81020f2:	68b8      	ldr	r0, [r7, #8]
 81020f4:	f000 fc03 	bl	81028fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 81020f8:	4602      	mov	r2, r0
 81020fa:	68fb      	ldr	r3, [r7, #12]
 81020fc:	605a      	str	r2, [r3, #4]
	  { }
 81020fe:	68fb      	ldr	r3, [r7, #12]
 8102100:	4618      	mov	r0, r3
 8102102:	3714      	adds	r7, #20
 8102104:	46bd      	mov	sp, r7
 8102106:	bd90      	pop	{r4, r7, pc}

08102108 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 8102108:	b580      	push	{r7, lr}
 810210a:	b082      	sub	sp, #8
 810210c:	af00      	add	r7, sp, #0
 810210e:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	685b      	ldr	r3, [r3, #4]
 8102114:	2b00      	cmp	r3, #0
 8102116:	d007      	beq.n	8102128 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 8102118:	687b      	ldr	r3, [r7, #4]
 810211a:	681a      	ldr	r2, [r3, #0]
 810211c:	687b      	ldr	r3, [r7, #4]
 810211e:	685b      	ldr	r3, [r3, #4]
 8102120:	4619      	mov	r1, r3
 8102122:	4610      	mov	r0, r2
 8102124:	f7ff ffb4 	bl	8102090 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	}
 8102128:	687b      	ldr	r3, [r7, #4]
 810212a:	4618      	mov	r0, r3
 810212c:	3708      	adds	r7, #8
 810212e:	46bd      	mov	sp, r7
 8102130:	bd80      	pop	{r7, pc}

08102132 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102132:	b590      	push	{r4, r7, lr}
 8102134:	b08b      	sub	sp, #44	@ 0x2c
 8102136:	af00      	add	r7, sp, #0
 8102138:	60f8      	str	r0, [r7, #12]
 810213a:	60b9      	str	r1, [r7, #8]
 810213c:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 810213e:	68b8      	ldr	r0, [r7, #8]
 8102140:	f7ff fc89 	bl	8101a56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8102144:	4603      	mov	r3, r0
 8102146:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8102148:	68b8      	ldr	r0, [r7, #8]
 810214a:	f000 f9c2 	bl	81024d2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 810214e:	4603      	mov	r3, r0
 8102150:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8102152:	2301      	movs	r3, #1
 8102154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 8102158:	e01f      	b.n	810219a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x68>
	  __y = __x;
 810215a:	69bb      	ldr	r3, [r7, #24]
 810215c:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 810215e:	68bc      	ldr	r4, [r7, #8]
 8102160:	69bb      	ldr	r3, [r7, #24]
 8102162:	4618      	mov	r0, r3
 8102164:	f000 fbe7 	bl	8102936 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8102168:	4603      	mov	r3, r0
 810216a:	461a      	mov	r2, r3
 810216c:	6879      	ldr	r1, [r7, #4]
 810216e:	4620      	mov	r0, r4
 8102170:	f7ff fef1 	bl	8101f56 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102174:	4603      	mov	r3, r0
 8102176:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 810217a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810217e:	2b00      	cmp	r3, #0
 8102180:	d005      	beq.n	810218e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x5c>
 8102182:	69bb      	ldr	r3, [r7, #24]
 8102184:	4618      	mov	r0, r3
 8102186:	f7ff ff77 	bl	8102078 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 810218a:	4603      	mov	r3, r0
 810218c:	e004      	b.n	8102198 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 810218e:	69bb      	ldr	r3, [r7, #24]
 8102190:	4618      	mov	r0, r3
 8102192:	f7ff ff65 	bl	8102060 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8102196:	4603      	mov	r3, r0
 8102198:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 810219a:	69bb      	ldr	r3, [r7, #24]
 810219c:	2b00      	cmp	r3, #0
 810219e:	d1dc      	bne.n	810215a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x28>
      iterator __j = iterator(__y);
 81021a0:	697a      	ldr	r2, [r7, #20]
 81021a2:	f107 0310 	add.w	r3, r7, #16
 81021a6:	4611      	mov	r1, r2
 81021a8:	4618      	mov	r0, r3
 81021aa:	f000 f887 	bl	81022bc <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 81021ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81021b2:	2b00      	cmp	r3, #0
 81021b4:	d01d      	beq.n	81021f2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 81021b6:	68b8      	ldr	r0, [r7, #8]
 81021b8:	f000 fbd0 	bl	810295c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 81021bc:	4603      	mov	r3, r0
 81021be:	61fb      	str	r3, [r7, #28]
 81021c0:	f107 021c 	add.w	r2, r7, #28
 81021c4:	f107 0310 	add.w	r3, r7, #16
 81021c8:	4611      	mov	r1, r2
 81021ca:	4618      	mov	r0, r3
 81021cc:	f7ff fe94 	bl	8101ef8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 81021d0:	4603      	mov	r3, r0
 81021d2:	2b00      	cmp	r3, #0
 81021d4:	d008      	beq.n	81021e8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 81021d6:	f107 0214 	add.w	r2, r7, #20
 81021da:	f107 0318 	add.w	r3, r7, #24
 81021de:	4619      	mov	r1, r3
 81021e0:	68f8      	ldr	r0, [r7, #12]
 81021e2:	f000 fbcc 	bl	810297e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 81021e6:	e025      	b.n	8102234 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 81021e8:	f107 0310 	add.w	r3, r7, #16
 81021ec:	4618      	mov	r0, r3
 81021ee:	f000 fbdf 	bl	81029b0 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 81021f2:	68bc      	ldr	r4, [r7, #8]
 81021f4:	693b      	ldr	r3, [r7, #16]
 81021f6:	4618      	mov	r0, r3
 81021f8:	f000 f9a8 	bl	810254c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81021fc:	4603      	mov	r3, r0
 81021fe:	687a      	ldr	r2, [r7, #4]
 8102200:	4619      	mov	r1, r3
 8102202:	4620      	mov	r0, r4
 8102204:	f7ff fea7 	bl	8101f56 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102208:	4603      	mov	r3, r0
 810220a:	2b00      	cmp	r3, #0
 810220c:	d008      	beq.n	8102220 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 810220e:	f107 0214 	add.w	r2, r7, #20
 8102212:	f107 0318 	add.w	r3, r7, #24
 8102216:	4619      	mov	r1, r3
 8102218:	68f8      	ldr	r0, [r7, #12]
 810221a:	f000 fbb0 	bl	810297e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 810221e:	e009      	b.n	8102234 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8102220:	2300      	movs	r3, #0
 8102222:	623b      	str	r3, [r7, #32]
 8102224:	f107 0220 	add.w	r2, r7, #32
 8102228:	f107 0310 	add.w	r3, r7, #16
 810222c:	4619      	mov	r1, r3
 810222e:	68f8      	ldr	r0, [r7, #12]
 8102230:	f000 fbcf 	bl	81029d2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102234:	68f8      	ldr	r0, [r7, #12]
 8102236:	372c      	adds	r7, #44	@ 0x2c
 8102238:	46bd      	mov	sp, r7
 810223a:	bd90      	pop	{r4, r7, pc}

0810223c <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 810223c:	b580      	push	{r7, lr}
 810223e:	b082      	sub	sp, #8
 8102240:	af00      	add	r7, sp, #0
 8102242:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 8102244:	687b      	ldr	r3, [r7, #4]
 8102246:	685b      	ldr	r3, [r3, #4]
 8102248:	4618      	mov	r0, r3
 810224a:	f000 fb74 	bl	8102936 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 810224e:	4603      	mov	r3, r0
 8102250:	4618      	mov	r0, r3
 8102252:	3708      	adds	r7, #8
 8102254:	46bd      	mov	sp, r7
 8102256:	bd80      	pop	{r7, pc}

08102258 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 8102258:	b580      	push	{r7, lr}
 810225a:	b086      	sub	sp, #24
 810225c:	af00      	add	r7, sp, #0
 810225e:	60f8      	str	r0, [r7, #12]
 8102260:	1d3b      	adds	r3, r7, #4
 8102262:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 8102266:	68fb      	ldr	r3, [r7, #12]
 8102268:	6818      	ldr	r0, [r3, #0]
 810226a:	6879      	ldr	r1, [r7, #4]
 810226c:	68ba      	ldr	r2, [r7, #8]
 810226e:	68fb      	ldr	r3, [r7, #12]
 8102270:	685b      	ldr	r3, [r3, #4]
 8102272:	f000 fbc3 	bl	81029fc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8102276:	4603      	mov	r3, r0
 8102278:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 810227a:	68fb      	ldr	r3, [r7, #12]
 810227c:	2200      	movs	r2, #0
 810227e:	605a      	str	r2, [r3, #4]
	  return __it;
 8102280:	697b      	ldr	r3, [r7, #20]
	}
 8102282:	4618      	mov	r0, r3
 8102284:	3718      	adds	r7, #24
 8102286:	46bd      	mov	sp, r7
 8102288:	bd80      	pop	{r7, pc}

0810228a <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 810228a:	b580      	push	{r7, lr}
 810228c:	b084      	sub	sp, #16
 810228e:	af00      	add	r7, sp, #0
 8102290:	60f8      	str	r0, [r7, #12]
 8102292:	60b9      	str	r1, [r7, #8]
 8102294:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8102296:	68b8      	ldr	r0, [r7, #8]
 8102298:	f000 fbed 	bl	8102a76 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>
 810229c:	4602      	mov	r2, r0
 810229e:	68fb      	ldr	r3, [r7, #12]
 81022a0:	6812      	ldr	r2, [r2, #0]
 81022a2:	601a      	str	r2, [r3, #0]
 81022a4:	6878      	ldr	r0, [r7, #4]
 81022a6:	f000 fbf1 	bl	8102a8c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 81022aa:	4603      	mov	r3, r0
 81022ac:	781a      	ldrb	r2, [r3, #0]
 81022ae:	68fb      	ldr	r3, [r7, #12]
 81022b0:	711a      	strb	r2, [r3, #4]
 81022b2:	68fb      	ldr	r3, [r7, #12]
 81022b4:	4618      	mov	r0, r3
 81022b6:	3710      	adds	r7, #16
 81022b8:	46bd      	mov	sp, r7
 81022ba:	bd80      	pop	{r7, pc}

081022bc <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 81022bc:	b480      	push	{r7}
 81022be:	b083      	sub	sp, #12
 81022c0:	af00      	add	r7, sp, #0
 81022c2:	6078      	str	r0, [r7, #4]
 81022c4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 81022c6:	687b      	ldr	r3, [r7, #4]
 81022c8:	683a      	ldr	r2, [r7, #0]
 81022ca:	601a      	str	r2, [r3, #0]
 81022cc:	687b      	ldr	r3, [r7, #4]
 81022ce:	4618      	mov	r0, r3
 81022d0:	370c      	adds	r7, #12
 81022d2:	46bd      	mov	sp, r7
 81022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022d8:	4770      	bx	lr

081022da <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 81022da:	b480      	push	{r7}
 81022dc:	b083      	sub	sp, #12
 81022de:	af00      	add	r7, sp, #0
 81022e0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 81022e2:	687b      	ldr	r3, [r7, #4]
 81022e4:	695b      	ldr	r3, [r3, #20]
 81022e6:	4618      	mov	r0, r3
 81022e8:	370c      	adds	r7, #12
 81022ea:	46bd      	mov	sp, r7
 81022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022f0:	4770      	bx	lr

081022f2 <_ZSt8_DestroyIP8SMessageEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 81022f2:	b580      	push	{r7, lr}
 81022f4:	b082      	sub	sp, #8
 81022f6:	af00      	add	r7, sp, #0
 81022f8:	6078      	str	r0, [r7, #4]
 81022fa:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 81022fc:	6839      	ldr	r1, [r7, #0]
 81022fe:	6878      	ldr	r0, [r7, #4]
 8102300:	f000 fbcf 	bl	8102aa2 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>
    }
 8102304:	bf00      	nop
 8102306:	3708      	adds	r7, #8
 8102308:	46bd      	mov	sp, r7
 810230a:	bd80      	pop	{r7, pc}

0810230c <_ZNSt15__new_allocatorI8SMessageEC1Ev>:
 810230c:	b480      	push	{r7}
 810230e:	b083      	sub	sp, #12
 8102310:	af00      	add	r7, sp, #0
 8102312:	6078      	str	r0, [r7, #4]
 8102314:	687b      	ldr	r3, [r7, #4]
 8102316:	4618      	mov	r0, r3
 8102318:	370c      	adds	r7, #12
 810231a:	46bd      	mov	sp, r7
 810231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102320:	4770      	bx	lr

08102322 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8102322:	b580      	push	{r7, lr}
 8102324:	b084      	sub	sp, #16
 8102326:	af00      	add	r7, sp, #0
 8102328:	60f8      	str	r0, [r7, #12]
 810232a:	60b9      	str	r1, [r7, #8]
 810232c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 810232e:	687a      	ldr	r2, [r7, #4]
 8102330:	68b9      	ldr	r1, [r7, #8]
 8102332:	68f8      	ldr	r0, [r7, #12]
 8102334:	f000 fbc0 	bl	8102ab8 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>
 8102338:	bf00      	nop
 810233a:	3710      	adds	r7, #16
 810233c:	46bd      	mov	sp, r7
 810233e:	bd80      	pop	{r7, pc}

08102340 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102340:	b480      	push	{r7}
 8102342:	b083      	sub	sp, #12
 8102344:	af00      	add	r7, sp, #0
 8102346:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102348:	687b      	ldr	r3, [r7, #4]
 810234a:	4618      	mov	r0, r3
 810234c:	370c      	adds	r7, #12
 810234e:	46bd      	mov	sp, r7
 8102350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102354:	4770      	bx	lr

08102356 <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8102356:	b5b0      	push	{r4, r5, r7, lr}
 8102358:	b084      	sub	sp, #16
 810235a:	af00      	add	r7, sp, #0
 810235c:	60f8      	str	r0, [r7, #12]
 810235e:	60b9      	str	r1, [r7, #8]
 8102360:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8102362:	68bb      	ldr	r3, [r7, #8]
 8102364:	4619      	mov	r1, r3
 8102366:	2018      	movs	r0, #24
 8102368:	f7fe fc76 	bl	8100c58 <_ZnwjPv>
 810236c:	4604      	mov	r4, r0
 810236e:	6878      	ldr	r0, [r7, #4]
 8102370:	f7ff ffe6 	bl	8102340 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8102374:	4603      	mov	r3, r0
 8102376:	461d      	mov	r5, r3
 8102378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810237a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810237c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8102380:	e884 0003 	stmia.w	r4, {r0, r1}
 8102384:	bf00      	nop
 8102386:	3710      	adds	r7, #16
 8102388:	46bd      	mov	sp, r7
 810238a:	bdb0      	pop	{r4, r5, r7, pc}

0810238c <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 810238c:	b590      	push	{r4, r7, lr}
 810238e:	b087      	sub	sp, #28
 8102390:	af00      	add	r7, sp, #0
 8102392:	60f8      	str	r0, [r7, #12]
 8102394:	60b9      	str	r1, [r7, #8]
 8102396:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8102398:	68f8      	ldr	r0, [r7, #12]
 810239a:	f000 fba0 	bl	8102ade <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 810239e:	4604      	mov	r4, r0
 81023a0:	68f8      	ldr	r0, [r7, #12]
 81023a2:	f7ff f9f3 	bl	810178c <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81023a6:	4603      	mov	r3, r0
 81023a8:	1ae2      	subs	r2, r4, r3
 81023aa:	68bb      	ldr	r3, [r7, #8]
 81023ac:	429a      	cmp	r2, r3
 81023ae:	bf34      	ite	cc
 81023b0:	2301      	movcc	r3, #1
 81023b2:	2300      	movcs	r3, #0
 81023b4:	b2db      	uxtb	r3, r3
 81023b6:	2b00      	cmp	r3, #0
 81023b8:	d002      	beq.n	81023c0 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 81023ba:	6878      	ldr	r0, [r7, #4]
 81023bc:	f014 f8be 	bl	811653c <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 81023c0:	68f8      	ldr	r0, [r7, #12]
 81023c2:	f7ff f9e3 	bl	810178c <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81023c6:	4604      	mov	r4, r0
 81023c8:	68f8      	ldr	r0, [r7, #12]
 81023ca:	f7ff f9df 	bl	810178c <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81023ce:	4603      	mov	r3, r0
 81023d0:	613b      	str	r3, [r7, #16]
 81023d2:	f107 0208 	add.w	r2, r7, #8
 81023d6:	f107 0310 	add.w	r3, r7, #16
 81023da:	4611      	mov	r1, r2
 81023dc:	4618      	mov	r0, r3
 81023de:	f000 fb8f 	bl	8102b00 <_ZSt3maxIjERKT_S2_S2_>
 81023e2:	4603      	mov	r3, r0
 81023e4:	681b      	ldr	r3, [r3, #0]
 81023e6:	4423      	add	r3, r4
 81023e8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 81023ea:	68f8      	ldr	r0, [r7, #12]
 81023ec:	f7ff f9ce 	bl	810178c <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81023f0:	4602      	mov	r2, r0
 81023f2:	697b      	ldr	r3, [r7, #20]
 81023f4:	4293      	cmp	r3, r2
 81023f6:	d306      	bcc.n	8102406 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x7a>
 81023f8:	68f8      	ldr	r0, [r7, #12]
 81023fa:	f000 fb70 	bl	8102ade <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81023fe:	4602      	mov	r2, r0
 8102400:	697b      	ldr	r3, [r7, #20]
 8102402:	4293      	cmp	r3, r2
 8102404:	d904      	bls.n	8102410 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x84>
 8102406:	68f8      	ldr	r0, [r7, #12]
 8102408:	f000 fb69 	bl	8102ade <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 810240c:	4603      	mov	r3, r0
 810240e:	e000      	b.n	8102412 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x86>
 8102410:	697b      	ldr	r3, [r7, #20]
      }
 8102412:	4618      	mov	r0, r3
 8102414:	371c      	adds	r7, #28
 8102416:	46bd      	mov	sp, r7
 8102418:	bd90      	pop	{r4, r7, pc}
	...

0810241c <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 810241c:	b590      	push	{r4, r7, lr}
 810241e:	b083      	sub	sp, #12
 8102420:	af00      	add	r7, sp, #0
 8102422:	6078      	str	r0, [r7, #4]
 8102424:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8102426:	6878      	ldr	r0, [r7, #4]
 8102428:	f7ff fce4 	bl	8101df4 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 810242c:	4603      	mov	r3, r0
 810242e:	681c      	ldr	r4, [r3, #0]
 8102430:	6838      	ldr	r0, [r7, #0]
 8102432:	f7ff fcdf 	bl	8101df4 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8102436:	4603      	mov	r3, r0
 8102438:	681b      	ldr	r3, [r3, #0]
 810243a:	1ae3      	subs	r3, r4, r3
 810243c:	10db      	asrs	r3, r3, #3
 810243e:	4a03      	ldr	r2, [pc, #12]	@ (810244c <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8102440:	fb02 f303 	mul.w	r3, r2, r3
 8102444:	4618      	mov	r0, r3
 8102446:	370c      	adds	r7, #12
 8102448:	46bd      	mov	sp, r7
 810244a:	bd90      	pop	{r4, r7, pc}
 810244c:	aaaaaaab 	.word	0xaaaaaaab

08102450 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8102450:	b580      	push	{r7, lr}
 8102452:	b082      	sub	sp, #8
 8102454:	af00      	add	r7, sp, #0
 8102456:	6078      	str	r0, [r7, #4]
 8102458:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 810245a:	683b      	ldr	r3, [r7, #0]
 810245c:	2b00      	cmp	r3, #0
 810245e:	d006      	beq.n	810246e <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x1e>
 8102460:	687b      	ldr	r3, [r7, #4]
 8102462:	6839      	ldr	r1, [r7, #0]
 8102464:	4618      	mov	r0, r3
 8102466:	f000 fb5f 	bl	8102b28 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>
 810246a:	4603      	mov	r3, r0
 810246c:	e000      	b.n	8102470 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x20>
 810246e:	2300      	movs	r3, #0
      }
 8102470:	4618      	mov	r0, r3
 8102472:	3708      	adds	r7, #8
 8102474:	46bd      	mov	sp, r7
 8102476:	bd80      	pop	{r7, pc}

08102478 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8102478:	b590      	push	{r4, r7, lr}
 810247a:	b087      	sub	sp, #28
 810247c:	af02      	add	r7, sp, #8
 810247e:	60f8      	str	r0, [r7, #12]
 8102480:	60b9      	str	r1, [r7, #8]
 8102482:	607a      	str	r2, [r7, #4]
 8102484:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8102486:	f88d 4000 	strb.w	r4, [sp]
 810248a:	683b      	ldr	r3, [r7, #0]
 810248c:	687a      	ldr	r2, [r7, #4]
 810248e:	68b9      	ldr	r1, [r7, #8]
 8102490:	68f8      	ldr	r0, [r7, #12]
 8102492:	f000 fb58 	bl	8102b46 <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8102496:	4603      	mov	r3, r0
      }
 8102498:	4618      	mov	r0, r3
 810249a:	3714      	adds	r7, #20
 810249c:	46bd      	mov	sp, r7
 810249e:	bd90      	pop	{r4, r7, pc}

081024a0 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 81024a0:	b590      	push	{r4, r7, lr}
 81024a2:	b085      	sub	sp, #20
 81024a4:	af00      	add	r7, sp, #0
 81024a6:	60f8      	str	r0, [r7, #12]
 81024a8:	60b9      	str	r1, [r7, #8]
 81024aa:	607a      	str	r2, [r7, #4]
 81024ac:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 81024ae:	68f8      	ldr	r0, [r7, #12]
 81024b0:	f000 fb5b 	bl	8102b6a <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 81024b4:	4604      	mov	r4, r0
 81024b6:	68b8      	ldr	r0, [r7, #8]
 81024b8:	f000 fb57 	bl	8102b6a <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 81024bc:	4601      	mov	r1, r0
 81024be:	683b      	ldr	r3, [r7, #0]
 81024c0:	687a      	ldr	r2, [r7, #4]
 81024c2:	4620      	mov	r0, r4
 81024c4:	f000 fb60 	bl	8102b88 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>
 81024c8:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 81024ca:	4618      	mov	r0, r3
 81024cc:	3714      	adds	r7, #20
 81024ce:	46bd      	mov	sp, r7
 81024d0:	bd90      	pop	{r4, r7, pc}

081024d2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 81024d2:	b480      	push	{r7}
 81024d4:	b083      	sub	sp, #12
 81024d6:	af00      	add	r7, sp, #0
 81024d8:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	3304      	adds	r3, #4
 81024de:	4618      	mov	r0, r3
 81024e0:	370c      	adds	r7, #12
 81024e2:	46bd      	mov	sp, r7
 81024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024e8:	4770      	bx	lr

081024ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81024ea:	b590      	push	{r4, r7, lr}
 81024ec:	b087      	sub	sp, #28
 81024ee:	af00      	add	r7, sp, #0
 81024f0:	60f8      	str	r0, [r7, #12]
 81024f2:	60b9      	str	r1, [r7, #8]
 81024f4:	607a      	str	r2, [r7, #4]
 81024f6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 81024f8:	e01a      	b.n	8102530 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 81024fa:	68fc      	ldr	r4, [r7, #12]
 81024fc:	68b8      	ldr	r0, [r7, #8]
 81024fe:	f000 fa1a 	bl	8102936 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8102502:	4603      	mov	r3, r0
 8102504:	683a      	ldr	r2, [r7, #0]
 8102506:	4619      	mov	r1, r3
 8102508:	4620      	mov	r0, r4
 810250a:	f7ff fd24 	bl	8101f56 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810250e:	4603      	mov	r3, r0
 8102510:	f083 0301 	eor.w	r3, r3, #1
 8102514:	b2db      	uxtb	r3, r3
 8102516:	2b00      	cmp	r3, #0
 8102518:	d006      	beq.n	8102528 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x3e>
	  __y = __x, __x = _S_left(__x);
 810251a:	68bb      	ldr	r3, [r7, #8]
 810251c:	607b      	str	r3, [r7, #4]
 810251e:	68b8      	ldr	r0, [r7, #8]
 8102520:	f7ff fdaa 	bl	8102078 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8102524:	60b8      	str	r0, [r7, #8]
 8102526:	e003      	b.n	8102530 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __x = _S_right(__x);
 8102528:	68b8      	ldr	r0, [r7, #8]
 810252a:	f7ff fd99 	bl	8102060 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 810252e:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8102530:	68bb      	ldr	r3, [r7, #8]
 8102532:	2b00      	cmp	r3, #0
 8102534:	d1e1      	bne.n	81024fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x10>
      return iterator(__y);
 8102536:	f107 0314 	add.w	r3, r7, #20
 810253a:	6879      	ldr	r1, [r7, #4]
 810253c:	4618      	mov	r0, r3
 810253e:	f7ff febd 	bl	81022bc <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102542:	697b      	ldr	r3, [r7, #20]
    }
 8102544:	4618      	mov	r0, r3
 8102546:	371c      	adds	r7, #28
 8102548:	46bd      	mov	sp, r7
 810254a:	bd90      	pop	{r4, r7, pc}

0810254c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 810254c:	b580      	push	{r7, lr}
 810254e:	b082      	sub	sp, #8
 8102550:	af00      	add	r7, sp, #0
 8102552:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8102554:	6878      	ldr	r0, [r7, #4]
 8102556:	f000 f9ee 	bl	8102936 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 810255a:	4603      	mov	r3, r0
 810255c:	4618      	mov	r0, r3
 810255e:	3708      	adds	r7, #8
 8102560:	46bd      	mov	sp, r7
 8102562:	bd80      	pop	{r7, pc}

08102564 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8102564:	b590      	push	{r4, r7, lr}
 8102566:	b083      	sub	sp, #12
 8102568:	af00      	add	r7, sp, #0
 810256a:	6078      	str	r0, [r7, #4]
 810256c:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 810256e:	6878      	ldr	r0, [r7, #4]
 8102570:	f7ff fa71 	bl	8101a56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8102574:	4604      	mov	r4, r0
 8102576:	6878      	ldr	r0, [r7, #4]
 8102578:	f7ff ffab 	bl	81024d2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 810257c:	4602      	mov	r2, r0
 810257e:	683b      	ldr	r3, [r7, #0]
 8102580:	4621      	mov	r1, r4
 8102582:	6878      	ldr	r0, [r7, #4]
 8102584:	f7ff ffb1 	bl	81024ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8102588:	4603      	mov	r3, r0
 810258a:	4618      	mov	r0, r3
 810258c:	370c      	adds	r7, #12
 810258e:	46bd      	mov	sp, r7
 8102590:	bd90      	pop	{r4, r7, pc}

08102592 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8102592:	b480      	push	{r7}
 8102594:	b083      	sub	sp, #12
 8102596:	af00      	add	r7, sp, #0
 8102598:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 810259a:	bf00      	nop
 810259c:	4618      	mov	r0, r3
 810259e:	370c      	adds	r7, #12
 81025a0:	46bd      	mov	sp, r7
 81025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025a6:	4770      	bx	lr

081025a8 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr()
 81025a8:	b580      	push	{r7, lr}
 81025aa:	b082      	sub	sp, #8
 81025ac:	af00      	add	r7, sp, #0
 81025ae:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 81025b0:	687b      	ldr	r3, [r7, #4]
 81025b2:	3310      	adds	r3, #16
 81025b4:	4618      	mov	r0, r3
 81025b6:	f000 faf8 	bl	8102baa <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 81025ba:	4603      	mov	r3, r0
 81025bc:	4618      	mov	r0, r3
 81025be:	3708      	adds	r7, #8
 81025c0:	46bd      	mov	sp, r7
 81025c2:	bd80      	pop	{r7, pc}

081025c4 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>:
      _Tuple_impl(const _Head& __head)
 81025c4:	b580      	push	{r7, lr}
 81025c6:	b082      	sub	sp, #8
 81025c8:	af00      	add	r7, sp, #0
 81025ca:	6078      	str	r0, [r7, #4]
 81025cc:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	6839      	ldr	r1, [r7, #0]
 81025d2:	4618      	mov	r0, r3
 81025d4:	f000 faf5 	bl	8102bc2 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>
      { }
 81025d8:	687b      	ldr	r3, [r7, #4]
 81025da:	4618      	mov	r0, r3
 81025dc:	3708      	adds	r7, #8
 81025de:	46bd      	mov	sp, r7
 81025e0:	bd80      	pop	{r7, pc}

081025e2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81025e2:	b480      	push	{r7}
 81025e4:	b083      	sub	sp, #12
 81025e6:	af00      	add	r7, sp, #0
 81025e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81025ea:	687b      	ldr	r3, [r7, #4]
 81025ec:	4618      	mov	r0, r3
 81025ee:	370c      	adds	r7, #12
 81025f0:	46bd      	mov	sp, r7
 81025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025f6:	4770      	bx	lr

081025f8 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81025f8:	b480      	push	{r7}
 81025fa:	b083      	sub	sp, #12
 81025fc:	af00      	add	r7, sp, #0
 81025fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102600:	687b      	ldr	r3, [r7, #4]
 8102602:	4618      	mov	r0, r3
 8102604:	370c      	adds	r7, #12
 8102606:	46bd      	mov	sp, r7
 8102608:	f85d 7b04 	ldr.w	r7, [sp], #4
 810260c:	4770      	bx	lr

0810260e <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810260e:	b480      	push	{r7}
 8102610:	b083      	sub	sp, #12
 8102612:	af00      	add	r7, sp, #0
 8102614:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102616:	687b      	ldr	r3, [r7, #4]
 8102618:	4618      	mov	r0, r3
 810261a:	370c      	adds	r7, #12
 810261c:	46bd      	mov	sp, r7
 810261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102622:	4770      	bx	lr

08102624 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8102624:	b5b0      	push	{r4, r5, r7, lr}
 8102626:	b084      	sub	sp, #16
 8102628:	af00      	add	r7, sp, #0
 810262a:	60f8      	str	r0, [r7, #12]
 810262c:	60b9      	str	r1, [r7, #8]
 810262e:	607a      	str	r2, [r7, #4]
 8102630:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8102632:	68fb      	ldr	r3, [r7, #12]
 8102634:	68ba      	ldr	r2, [r7, #8]
 8102636:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8102638:	6878      	ldr	r0, [r7, #4]
 810263a:	f7ff ffd2 	bl	81025e2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810263e:	4604      	mov	r4, r0
 8102640:	6838      	ldr	r0, [r7, #0]
 8102642:	f7ff ffd9 	bl	81025f8 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102646:	4605      	mov	r5, r0
 8102648:	6a38      	ldr	r0, [r7, #32]
 810264a:	f7ff ffe0 	bl	810260e <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810264e:	4603      	mov	r3, r0
 8102650:	462a      	mov	r2, r5
 8102652:	4621      	mov	r1, r4
 8102654:	68b8      	ldr	r0, [r7, #8]
 8102656:	f000 fac3 	bl	8102be0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 810265a:	4602      	mov	r2, r0
 810265c:	68fb      	ldr	r3, [r7, #12]
 810265e:	605a      	str	r2, [r3, #4]
	  { }
 8102660:	68fb      	ldr	r3, [r7, #12]
 8102662:	4618      	mov	r0, r3
 8102664:	3710      	adds	r7, #16
 8102666:	46bd      	mov	sp, r7
 8102668:	bdb0      	pop	{r4, r5, r7, pc}

0810266a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 810266a:	b590      	push	{r4, r7, lr}
 810266c:	b08d      	sub	sp, #52	@ 0x34
 810266e:	af00      	add	r7, sp, #0
 8102670:	60f8      	str	r0, [r7, #12]
 8102672:	60b9      	str	r1, [r7, #8]
 8102674:	607a      	str	r2, [r7, #4]
 8102676:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8102678:	1d3b      	adds	r3, r7, #4
 810267a:	4618      	mov	r0, r3
 810267c:	f000 fad3 	bl	8102c26 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>
 8102680:	4603      	mov	r3, r0
 8102682:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8102684:	69bc      	ldr	r4, [r7, #24]
 8102686:	68b8      	ldr	r0, [r7, #8]
 8102688:	f7ff ff23 	bl	81024d2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 810268c:	4603      	mov	r3, r0
 810268e:	429c      	cmp	r4, r3
 8102690:	bf0c      	ite	eq
 8102692:	2301      	moveq	r3, #1
 8102694:	2300      	movne	r3, #0
 8102696:	b2db      	uxtb	r3, r3
 8102698:	2b00      	cmp	r3, #0
 810269a:	d030      	beq.n	81026fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 810269c:	68b8      	ldr	r0, [r7, #8]
 810269e:	f7ff fe1c 	bl	81022da <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 81026a2:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 81026a4:	2b00      	cmp	r3, #0
 81026a6:	d013      	beq.n	81026d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 81026a8:	68bc      	ldr	r4, [r7, #8]
 81026aa:	68b8      	ldr	r0, [r7, #8]
 81026ac:	f000 facc 	bl	8102c48 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81026b0:	4603      	mov	r3, r0
 81026b2:	681b      	ldr	r3, [r3, #0]
 81026b4:	4618      	mov	r0, r3
 81026b6:	f7ff ff49 	bl	810254c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81026ba:	4603      	mov	r3, r0
 81026bc:	683a      	ldr	r2, [r7, #0]
 81026be:	4619      	mov	r1, r3
 81026c0:	4620      	mov	r0, r4
 81026c2:	f7ff fc48 	bl	8101f56 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81026c6:	4603      	mov	r3, r0
 81026c8:	2b00      	cmp	r3, #0
 81026ca:	d001      	beq.n	81026d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 81026cc:	2301      	movs	r3, #1
 81026ce:	e000      	b.n	81026d2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 81026d0:	2300      	movs	r3, #0
	  if (size() > 0
 81026d2:	2b00      	cmp	r3, #0
 81026d4:	d00c      	beq.n	81026f0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 81026d6:	2300      	movs	r3, #0
 81026d8:	61fb      	str	r3, [r7, #28]
 81026da:	68b8      	ldr	r0, [r7, #8]
 81026dc:	f000 fab4 	bl	8102c48 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81026e0:	4602      	mov	r2, r0
 81026e2:	f107 031c 	add.w	r3, r7, #28
 81026e6:	4619      	mov	r1, r3
 81026e8:	68f8      	ldr	r0, [r7, #12]
 81026ea:	f000 f972 	bl	81029d2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81026ee:	e0db      	b.n	81028a8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 81026f0:	68fb      	ldr	r3, [r7, #12]
 81026f2:	683a      	ldr	r2, [r7, #0]
 81026f4:	68b9      	ldr	r1, [r7, #8]
 81026f6:	4618      	mov	r0, r3
 81026f8:	f7ff fd1b 	bl	8102132 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 81026fc:	e0d4      	b.n	81028a8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 81026fe:	68bc      	ldr	r4, [r7, #8]
 8102700:	69bb      	ldr	r3, [r7, #24]
 8102702:	4618      	mov	r0, r3
 8102704:	f7ff ff22 	bl	810254c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102708:	4603      	mov	r3, r0
 810270a:	461a      	mov	r2, r3
 810270c:	6839      	ldr	r1, [r7, #0]
 810270e:	4620      	mov	r0, r4
 8102710:	f7ff fc21 	bl	8101f56 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102714:	4603      	mov	r3, r0
 8102716:	2b00      	cmp	r3, #0
 8102718:	d057      	beq.n	81027ca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 810271a:	69bb      	ldr	r3, [r7, #24]
 810271c:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 810271e:	69bc      	ldr	r4, [r7, #24]
 8102720:	68b8      	ldr	r0, [r7, #8]
 8102722:	f000 fa9d 	bl	8102c60 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8102726:	4603      	mov	r3, r0
 8102728:	681b      	ldr	r3, [r3, #0]
 810272a:	429c      	cmp	r4, r3
 810272c:	bf0c      	ite	eq
 810272e:	2301      	moveq	r3, #1
 8102730:	2300      	movne	r3, #0
 8102732:	b2db      	uxtb	r3, r3
 8102734:	2b00      	cmp	r3, #0
 8102736:	d00d      	beq.n	8102754 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8102738:	68b8      	ldr	r0, [r7, #8]
 810273a:	f000 fa91 	bl	8102c60 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 810273e:	4604      	mov	r4, r0
 8102740:	68b8      	ldr	r0, [r7, #8]
 8102742:	f000 fa8d 	bl	8102c60 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8102746:	4603      	mov	r3, r0
 8102748:	461a      	mov	r2, r3
 810274a:	4621      	mov	r1, r4
 810274c:	68f8      	ldr	r0, [r7, #12]
 810274e:	f000 fa93 	bl	8102c78 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8102752:	e0a9      	b.n	81028a8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8102754:	68bc      	ldr	r4, [r7, #8]
 8102756:	f107 0314 	add.w	r3, r7, #20
 810275a:	4618      	mov	r0, r3
 810275c:	f000 f928 	bl	81029b0 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
 8102760:	4603      	mov	r3, r0
 8102762:	681b      	ldr	r3, [r3, #0]
 8102764:	4618      	mov	r0, r3
 8102766:	f7ff fef1 	bl	810254c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810276a:	4603      	mov	r3, r0
 810276c:	683a      	ldr	r2, [r7, #0]
 810276e:	4619      	mov	r1, r3
 8102770:	4620      	mov	r0, r4
 8102772:	f7ff fbf0 	bl	8101f56 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102776:	4603      	mov	r3, r0
 8102778:	2b00      	cmp	r3, #0
 810277a:	d01f      	beq.n	81027bc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 810277c:	697b      	ldr	r3, [r7, #20]
 810277e:	4618      	mov	r0, r3
 8102780:	f7ff fc6e 	bl	8102060 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8102784:	4603      	mov	r3, r0
 8102786:	2b00      	cmp	r3, #0
 8102788:	bf0c      	ite	eq
 810278a:	2301      	moveq	r3, #1
 810278c:	2300      	movne	r3, #0
 810278e:	b2db      	uxtb	r3, r3
 8102790:	2b00      	cmp	r3, #0
 8102792:	d00a      	beq.n	81027aa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8102794:	2300      	movs	r3, #0
 8102796:	623b      	str	r3, [r7, #32]
 8102798:	f107 0214 	add.w	r2, r7, #20
 810279c:	f107 0320 	add.w	r3, r7, #32
 81027a0:	4619      	mov	r1, r3
 81027a2:	68f8      	ldr	r0, [r7, #12]
 81027a4:	f000 f915 	bl	81029d2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81027a8:	e07e      	b.n	81028a8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 81027aa:	f107 0218 	add.w	r2, r7, #24
 81027ae:	f107 0318 	add.w	r3, r7, #24
 81027b2:	4619      	mov	r1, r3
 81027b4:	68f8      	ldr	r0, [r7, #12]
 81027b6:	f000 fa5f 	bl	8102c78 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 81027ba:	e075      	b.n	81028a8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 81027bc:	68fb      	ldr	r3, [r7, #12]
 81027be:	683a      	ldr	r2, [r7, #0]
 81027c0:	68b9      	ldr	r1, [r7, #8]
 81027c2:	4618      	mov	r0, r3
 81027c4:	f7ff fcb5 	bl	8102132 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 81027c8:	e06e      	b.n	81028a8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 81027ca:	68bc      	ldr	r4, [r7, #8]
 81027cc:	69bb      	ldr	r3, [r7, #24]
 81027ce:	4618      	mov	r0, r3
 81027d0:	f7ff febc 	bl	810254c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81027d4:	4603      	mov	r3, r0
 81027d6:	683a      	ldr	r2, [r7, #0]
 81027d8:	4619      	mov	r1, r3
 81027da:	4620      	mov	r0, r4
 81027dc:	f7ff fbbb 	bl	8101f56 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81027e0:	4603      	mov	r3, r0
 81027e2:	2b00      	cmp	r3, #0
 81027e4:	d056      	beq.n	8102894 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 81027e6:	69bb      	ldr	r3, [r7, #24]
 81027e8:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 81027ea:	69bc      	ldr	r4, [r7, #24]
 81027ec:	68b8      	ldr	r0, [r7, #8]
 81027ee:	f000 fa2b 	bl	8102c48 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81027f2:	4603      	mov	r3, r0
 81027f4:	681b      	ldr	r3, [r3, #0]
 81027f6:	429c      	cmp	r4, r3
 81027f8:	bf0c      	ite	eq
 81027fa:	2301      	moveq	r3, #1
 81027fc:	2300      	movne	r3, #0
 81027fe:	b2db      	uxtb	r3, r3
 8102800:	2b00      	cmp	r3, #0
 8102802:	d00c      	beq.n	810281e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 8102804:	2300      	movs	r3, #0
 8102806:	627b      	str	r3, [r7, #36]	@ 0x24
 8102808:	68b8      	ldr	r0, [r7, #8]
 810280a:	f000 fa1d 	bl	8102c48 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 810280e:	4602      	mov	r2, r0
 8102810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8102814:	4619      	mov	r1, r3
 8102816:	68f8      	ldr	r0, [r7, #12]
 8102818:	f000 f8db 	bl	81029d2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 810281c:	e044      	b.n	81028a8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 810281e:	68bc      	ldr	r4, [r7, #8]
 8102820:	f107 0310 	add.w	r3, r7, #16
 8102824:	4618      	mov	r0, r3
 8102826:	f000 fa40 	bl	8102caa <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>
 810282a:	4603      	mov	r3, r0
 810282c:	681b      	ldr	r3, [r3, #0]
 810282e:	4618      	mov	r0, r3
 8102830:	f7ff fe8c 	bl	810254c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102834:	4603      	mov	r3, r0
 8102836:	461a      	mov	r2, r3
 8102838:	6839      	ldr	r1, [r7, #0]
 810283a:	4620      	mov	r0, r4
 810283c:	f7ff fb8b 	bl	8101f56 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102840:	4603      	mov	r3, r0
 8102842:	2b00      	cmp	r3, #0
 8102844:	d01f      	beq.n	8102886 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8102846:	69bb      	ldr	r3, [r7, #24]
 8102848:	4618      	mov	r0, r3
 810284a:	f7ff fc09 	bl	8102060 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 810284e:	4603      	mov	r3, r0
 8102850:	2b00      	cmp	r3, #0
 8102852:	bf0c      	ite	eq
 8102854:	2301      	moveq	r3, #1
 8102856:	2300      	movne	r3, #0
 8102858:	b2db      	uxtb	r3, r3
 810285a:	2b00      	cmp	r3, #0
 810285c:	d00a      	beq.n	8102874 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 810285e:	2300      	movs	r3, #0
 8102860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8102862:	f107 0218 	add.w	r2, r7, #24
 8102866:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810286a:	4619      	mov	r1, r3
 810286c:	68f8      	ldr	r0, [r7, #12]
 810286e:	f000 f8b0 	bl	81029d2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102872:	e019      	b.n	81028a8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8102874:	f107 0210 	add.w	r2, r7, #16
 8102878:	f107 0310 	add.w	r3, r7, #16
 810287c:	4619      	mov	r1, r3
 810287e:	68f8      	ldr	r0, [r7, #12]
 8102880:	f000 f9fa 	bl	8102c78 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8102884:	e010      	b.n	81028a8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8102886:	68fb      	ldr	r3, [r7, #12]
 8102888:	683a      	ldr	r2, [r7, #0]
 810288a:	68b9      	ldr	r1, [r7, #8]
 810288c:	4618      	mov	r0, r3
 810288e:	f7ff fc50 	bl	8102132 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8102892:	e009      	b.n	81028a8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 8102894:	2300      	movs	r3, #0
 8102896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102898:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 810289c:	f107 0318 	add.w	r3, r7, #24
 81028a0:	4619      	mov	r1, r3
 81028a2:	68f8      	ldr	r0, [r7, #12]
 81028a4:	f000 f895 	bl	81029d2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81028a8:	68f8      	ldr	r0, [r7, #12]
 81028aa:	3734      	adds	r7, #52	@ 0x34
 81028ac:	46bd      	mov	sp, r7
 81028ae:	bd90      	pop	{r4, r7, pc}

081028b0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 81028b0:	b590      	push	{r4, r7, lr}
 81028b2:	b083      	sub	sp, #12
 81028b4:	af00      	add	r7, sp, #0
 81028b6:	6078      	str	r0, [r7, #4]
 81028b8:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 81028ba:	6878      	ldr	r0, [r7, #4]
 81028bc:	f000 fa06 	bl	8102ccc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81028c0:	4604      	mov	r4, r0
 81028c2:	6838      	ldr	r0, [r7, #0]
 81028c4:	f7ff fe70 	bl	81025a8 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 81028c8:	4603      	mov	r3, r0
 81028ca:	4619      	mov	r1, r3
 81028cc:	4620      	mov	r0, r4
 81028ce:	f000 fa08 	bl	8102ce2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>
      }
 81028d2:	bf00      	nop
 81028d4:	370c      	adds	r7, #12
 81028d6:	46bd      	mov	sp, r7
 81028d8:	bd90      	pop	{r4, r7, pc}

081028da <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 81028da:	b580      	push	{r7, lr}
 81028dc:	b082      	sub	sp, #8
 81028de:	af00      	add	r7, sp, #0
 81028e0:	6078      	str	r0, [r7, #4]
 81028e2:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 81028e4:	6878      	ldr	r0, [r7, #4]
 81028e6:	f000 f9f1 	bl	8102ccc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81028ea:	4603      	mov	r3, r0
 81028ec:	2201      	movs	r2, #1
 81028ee:	6839      	ldr	r1, [r7, #0]
 81028f0:	4618      	mov	r0, r3
 81028f2:	f000 fa03 	bl	8102cfc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>
 81028f6:	bf00      	nop
 81028f8:	3708      	adds	r7, #8
 81028fa:	46bd      	mov	sp, r7
 81028fc:	bd80      	pop	{r7, pc}

081028fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 81028fe:	b590      	push	{r4, r7, lr}
 8102900:	b087      	sub	sp, #28
 8102902:	af00      	add	r7, sp, #0
 8102904:	60f8      	str	r0, [r7, #12]
 8102906:	60b9      	str	r1, [r7, #8]
 8102908:	607a      	str	r2, [r7, #4]
	  _Link_type __tmp = _M_get_node();
 810290a:	68f8      	ldr	r0, [r7, #12]
 810290c:	f000 fa05 	bl	8102d1a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8102910:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8102912:	68b8      	ldr	r0, [r7, #8]
 8102914:	f7ff f8ab 	bl	8101a6e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102918:	4604      	mov	r4, r0
 810291a:	6878      	ldr	r0, [r7, #4]
 810291c:	f7ff f8b2 	bl	8101a84 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102920:	4603      	mov	r3, r0
 8102922:	4622      	mov	r2, r4
 8102924:	6979      	ldr	r1, [r7, #20]
 8102926:	68f8      	ldr	r0, [r7, #12]
 8102928:	f000 fa08 	bl	8102d3c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 810292c:	697b      	ldr	r3, [r7, #20]
	}
 810292e:	4618      	mov	r0, r3
 8102930:	371c      	adds	r7, #28
 8102932:	46bd      	mov	sp, r7
 8102934:	bd90      	pop	{r4, r7, pc}

08102936 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8102936:	b580      	push	{r7, lr}
 8102938:	b084      	sub	sp, #16
 810293a:	af00      	add	r7, sp, #0
 810293c:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 810293e:	6878      	ldr	r0, [r7, #4]
 8102940:	f000 fa21 	bl	8102d86 <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102944:	4602      	mov	r2, r0
 8102946:	f107 030c 	add.w	r3, r7, #12
 810294a:	4611      	mov	r1, r2
 810294c:	4618      	mov	r0, r3
 810294e:	f000 fa28 	bl	8102da2 <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>
 8102952:	4603      	mov	r3, r0
      }
 8102954:	4618      	mov	r0, r3
 8102956:	3710      	adds	r7, #16
 8102958:	46bd      	mov	sp, r7
 810295a:	bd80      	pop	{r7, pc}

0810295c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 810295c:	b580      	push	{r7, lr}
 810295e:	b084      	sub	sp, #16
 8102960:	af00      	add	r7, sp, #0
 8102962:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8102964:	687b      	ldr	r3, [r7, #4]
 8102966:	68da      	ldr	r2, [r3, #12]
 8102968:	f107 030c 	add.w	r3, r7, #12
 810296c:	4611      	mov	r1, r2
 810296e:	4618      	mov	r0, r3
 8102970:	f7ff fca4 	bl	81022bc <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102974:	68fb      	ldr	r3, [r7, #12]
 8102976:	4618      	mov	r0, r3
 8102978:	3710      	adds	r7, #16
 810297a:	46bd      	mov	sp, r7
 810297c:	bd80      	pop	{r7, pc}

0810297e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 810297e:	b580      	push	{r7, lr}
 8102980:	b084      	sub	sp, #16
 8102982:	af00      	add	r7, sp, #0
 8102984:	60f8      	str	r0, [r7, #12]
 8102986:	60b9      	str	r1, [r7, #8]
 8102988:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 810298a:	68b8      	ldr	r0, [r7, #8]
 810298c:	f000 fa15 	bl	8102dba <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>
 8102990:	4603      	mov	r3, r0
 8102992:	681a      	ldr	r2, [r3, #0]
 8102994:	68fb      	ldr	r3, [r7, #12]
 8102996:	601a      	str	r2, [r3, #0]
 8102998:	6878      	ldr	r0, [r7, #4]
 810299a:	f000 fa19 	bl	8102dd0 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 810299e:	4603      	mov	r3, r0
 81029a0:	681a      	ldr	r2, [r3, #0]
 81029a2:	68fb      	ldr	r3, [r7, #12]
 81029a4:	605a      	str	r2, [r3, #4]
 81029a6:	68fb      	ldr	r3, [r7, #12]
 81029a8:	4618      	mov	r0, r3
 81029aa:	3710      	adds	r7, #16
 81029ac:	46bd      	mov	sp, r7
 81029ae:	bd80      	pop	{r7, pc}

081029b0 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 81029b0:	b580      	push	{r7, lr}
 81029b2:	b082      	sub	sp, #8
 81029b4:	af00      	add	r7, sp, #0
 81029b6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 81029b8:	687b      	ldr	r3, [r7, #4]
 81029ba:	681b      	ldr	r3, [r3, #0]
 81029bc:	4618      	mov	r0, r3
 81029be:	f013 fd51 	bl	8116464 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 81029c2:	4602      	mov	r2, r0
 81029c4:	687b      	ldr	r3, [r7, #4]
 81029c6:	601a      	str	r2, [r3, #0]
	return *this;
 81029c8:	687b      	ldr	r3, [r7, #4]
      }
 81029ca:	4618      	mov	r0, r3
 81029cc:	3708      	adds	r7, #8
 81029ce:	46bd      	mov	sp, r7
 81029d0:	bd80      	pop	{r7, pc}

081029d2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 81029d2:	b480      	push	{r7}
 81029d4:	b085      	sub	sp, #20
 81029d6:	af00      	add	r7, sp, #0
 81029d8:	60f8      	str	r0, [r7, #12]
 81029da:	60b9      	str	r1, [r7, #8]
 81029dc:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 81029de:	68bb      	ldr	r3, [r7, #8]
 81029e0:	681a      	ldr	r2, [r3, #0]
 81029e2:	68fb      	ldr	r3, [r7, #12]
 81029e4:	601a      	str	r2, [r3, #0]
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	681a      	ldr	r2, [r3, #0]
 81029ea:	68fb      	ldr	r3, [r7, #12]
 81029ec:	605a      	str	r2, [r3, #4]
 81029ee:	68fb      	ldr	r3, [r7, #12]
 81029f0:	4618      	mov	r0, r3
 81029f2:	3714      	adds	r7, #20
 81029f4:	46bd      	mov	sp, r7
 81029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029fa:	4770      	bx	lr

081029fc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81029fc:	b5b0      	push	{r4, r5, r7, lr}
 81029fe:	b086      	sub	sp, #24
 8102a00:	af00      	add	r7, sp, #0
 8102a02:	60f8      	str	r0, [r7, #12]
 8102a04:	60b9      	str	r1, [r7, #8]
 8102a06:	607a      	str	r2, [r7, #4]
 8102a08:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8102a0a:	68bb      	ldr	r3, [r7, #8]
 8102a0c:	2b00      	cmp	r3, #0
 8102a0e:	d117      	bne.n	8102a40 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8102a10:	68f8      	ldr	r0, [r7, #12]
 8102a12:	f7ff fd5e 	bl	81024d2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102a16:	4602      	mov	r2, r0
 8102a18:	687b      	ldr	r3, [r7, #4]
 8102a1a:	4293      	cmp	r3, r2
 8102a1c:	d010      	beq.n	8102a40 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8102a1e:	68fc      	ldr	r4, [r7, #12]
 8102a20:	6838      	ldr	r0, [r7, #0]
 8102a22:	f7ff ff88 	bl	8102936 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8102a26:	4605      	mov	r5, r0
 8102a28:	6878      	ldr	r0, [r7, #4]
 8102a2a:	f7ff fd8f 	bl	810254c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102a2e:	4603      	mov	r3, r0
 8102a30:	461a      	mov	r2, r3
 8102a32:	4629      	mov	r1, r5
 8102a34:	4620      	mov	r0, r4
 8102a36:	f7ff fa8e 	bl	8101f56 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102a3a:	4603      	mov	r3, r0
 8102a3c:	2b00      	cmp	r3, #0
 8102a3e:	d001      	beq.n	8102a44 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
 8102a40:	2301      	movs	r3, #1
 8102a42:	e000      	b.n	8102a46 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4a>
 8102a44:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8102a46:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8102a48:	68fb      	ldr	r3, [r7, #12]
 8102a4a:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8102a4c:	7df8      	ldrb	r0, [r7, #23]
 8102a4e:	687a      	ldr	r2, [r7, #4]
 8102a50:	6839      	ldr	r1, [r7, #0]
 8102a52:	f013 fd09 	bl	8116468 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8102a56:	68fb      	ldr	r3, [r7, #12]
 8102a58:	695b      	ldr	r3, [r3, #20]
 8102a5a:	1c5a      	adds	r2, r3, #1
 8102a5c:	68fb      	ldr	r3, [r7, #12]
 8102a5e:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8102a60:	f107 0310 	add.w	r3, r7, #16
 8102a64:	6839      	ldr	r1, [r7, #0]
 8102a66:	4618      	mov	r0, r3
 8102a68:	f7ff fc28 	bl	81022bc <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102a6c:	693b      	ldr	r3, [r7, #16]
    }
 8102a6e:	4618      	mov	r0, r3
 8102a70:	3718      	adds	r7, #24
 8102a72:	46bd      	mov	sp, r7
 8102a74:	bdb0      	pop	{r4, r5, r7, pc}

08102a76 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102a76:	b480      	push	{r7}
 8102a78:	b083      	sub	sp, #12
 8102a7a:	af00      	add	r7, sp, #0
 8102a7c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102a7e:	687b      	ldr	r3, [r7, #4]
 8102a80:	4618      	mov	r0, r3
 8102a82:	370c      	adds	r7, #12
 8102a84:	46bd      	mov	sp, r7
 8102a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a8a:	4770      	bx	lr

08102a8c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102a8c:	b480      	push	{r7}
 8102a8e:	b083      	sub	sp, #12
 8102a90:	af00      	add	r7, sp, #0
 8102a92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	4618      	mov	r0, r3
 8102a98:	370c      	adds	r7, #12
 8102a9a:	46bd      	mov	sp, r7
 8102a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aa0:	4770      	bx	lr

08102aa2 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8102aa2:	b480      	push	{r7}
 8102aa4:	b083      	sub	sp, #12
 8102aa6:	af00      	add	r7, sp, #0
 8102aa8:	6078      	str	r0, [r7, #4]
 8102aaa:	6039      	str	r1, [r7, #0]
 8102aac:	bf00      	nop
 8102aae:	370c      	adds	r7, #12
 8102ab0:	46bd      	mov	sp, r7
 8102ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ab6:	4770      	bx	lr

08102ab8 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8102ab8:	b580      	push	{r7, lr}
 8102aba:	b084      	sub	sp, #16
 8102abc:	af00      	add	r7, sp, #0
 8102abe:	60f8      	str	r0, [r7, #12]
 8102ac0:	60b9      	str	r1, [r7, #8]
 8102ac2:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8102ac4:	687a      	ldr	r2, [r7, #4]
 8102ac6:	4613      	mov	r3, r2
 8102ac8:	005b      	lsls	r3, r3, #1
 8102aca:	4413      	add	r3, r2
 8102acc:	00db      	lsls	r3, r3, #3
 8102ace:	4619      	mov	r1, r3
 8102ad0:	68b8      	ldr	r0, [r7, #8]
 8102ad2:	f013 fc5d 	bl	8116390 <_ZdlPvj>
      }
 8102ad6:	bf00      	nop
 8102ad8:	3710      	adds	r7, #16
 8102ada:	46bd      	mov	sp, r7
 8102adc:	bd80      	pop	{r7, pc}

08102ade <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8102ade:	b580      	push	{r7, lr}
 8102ae0:	b082      	sub	sp, #8
 8102ae2:	af00      	add	r7, sp, #0
 8102ae4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	4618      	mov	r0, r3
 8102aea:	f000 f999 	bl	8102e20 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8102aee:	4603      	mov	r3, r0
 8102af0:	4618      	mov	r0, r3
 8102af2:	f000 f979 	bl	8102de8 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>
 8102af6:	4603      	mov	r3, r0
 8102af8:	4618      	mov	r0, r3
 8102afa:	3708      	adds	r7, #8
 8102afc:	46bd      	mov	sp, r7
 8102afe:	bd80      	pop	{r7, pc}

08102b00 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8102b00:	b480      	push	{r7}
 8102b02:	b083      	sub	sp, #12
 8102b04:	af00      	add	r7, sp, #0
 8102b06:	6078      	str	r0, [r7, #4]
 8102b08:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8102b0a:	687b      	ldr	r3, [r7, #4]
 8102b0c:	681a      	ldr	r2, [r3, #0]
 8102b0e:	683b      	ldr	r3, [r7, #0]
 8102b10:	681b      	ldr	r3, [r3, #0]
 8102b12:	429a      	cmp	r2, r3
 8102b14:	d201      	bcs.n	8102b1a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8102b16:	683b      	ldr	r3, [r7, #0]
 8102b18:	e000      	b.n	8102b1c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8102b1a:	687b      	ldr	r3, [r7, #4]
    }
 8102b1c:	4618      	mov	r0, r3
 8102b1e:	370c      	adds	r7, #12
 8102b20:	46bd      	mov	sp, r7
 8102b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b26:	4770      	bx	lr

08102b28 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8102b28:	b580      	push	{r7, lr}
 8102b2a:	b082      	sub	sp, #8
 8102b2c:	af00      	add	r7, sp, #0
 8102b2e:	6078      	str	r0, [r7, #4]
 8102b30:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8102b32:	2200      	movs	r2, #0
 8102b34:	6839      	ldr	r1, [r7, #0]
 8102b36:	6878      	ldr	r0, [r7, #4]
 8102b38:	f000 f97e 	bl	8102e38 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>
 8102b3c:	4603      	mov	r3, r0
 8102b3e:	4618      	mov	r0, r3
 8102b40:	3708      	adds	r7, #8
 8102b42:	46bd      	mov	sp, r7
 8102b44:	bd80      	pop	{r7, pc}

08102b46 <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8102b46:	b580      	push	{r7, lr}
 8102b48:	b084      	sub	sp, #16
 8102b4a:	af00      	add	r7, sp, #0
 8102b4c:	60f8      	str	r0, [r7, #12]
 8102b4e:	60b9      	str	r1, [r7, #8]
 8102b50:	607a      	str	r2, [r7, #4]
 8102b52:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8102b54:	683b      	ldr	r3, [r7, #0]
 8102b56:	687a      	ldr	r2, [r7, #4]
 8102b58:	68b9      	ldr	r1, [r7, #8]
 8102b5a:	68f8      	ldr	r0, [r7, #12]
 8102b5c:	f000 f99a 	bl	8102e94 <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8102b60:	4603      	mov	r3, r0
      }
 8102b62:	4618      	mov	r0, r3
 8102b64:	3710      	adds	r7, #16
 8102b66:	46bd      	mov	sp, r7
 8102b68:	bd80      	pop	{r7, pc}

08102b6a <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8102b6a:	b580      	push	{r7, lr}
 8102b6c:	b084      	sub	sp, #16
 8102b6e:	af00      	add	r7, sp, #0
 8102b70:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8102b72:	f107 030c 	add.w	r3, r7, #12
 8102b76:	6879      	ldr	r1, [r7, #4]
 8102b78:	4618      	mov	r0, r3
 8102b7a:	f000 f9a8 	bl	8102ece <_ZNSt13move_iteratorIP8SMessageEC1ES1_>
 8102b7e:	68fb      	ldr	r3, [r7, #12]
 8102b80:	4618      	mov	r0, r3
 8102b82:	3710      	adds	r7, #16
 8102b84:	46bd      	mov	sp, r7
 8102b86:	bd80      	pop	{r7, pc}

08102b88 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8102b88:	b580      	push	{r7, lr}
 8102b8a:	b084      	sub	sp, #16
 8102b8c:	af00      	add	r7, sp, #0
 8102b8e:	60f8      	str	r0, [r7, #12]
 8102b90:	60b9      	str	r1, [r7, #8]
 8102b92:	607a      	str	r2, [r7, #4]
 8102b94:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8102b96:	687a      	ldr	r2, [r7, #4]
 8102b98:	68b9      	ldr	r1, [r7, #8]
 8102b9a:	68f8      	ldr	r0, [r7, #12]
 8102b9c:	f000 f9a9 	bl	8102ef2 <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8102ba0:	4603      	mov	r3, r0
    }
 8102ba2:	4618      	mov	r0, r3
 8102ba4:	3710      	adds	r7, #16
 8102ba6:	46bd      	mov	sp, r7
 8102ba8:	bd80      	pop	{r7, pc}

08102baa <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8102baa:	b580      	push	{r7, lr}
 8102bac:	b082      	sub	sp, #8
 8102bae:	af00      	add	r7, sp, #0
 8102bb0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8102bb2:	6878      	ldr	r0, [r7, #4]
 8102bb4:	f000 f9b1 	bl	8102f1a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8102bb8:	4603      	mov	r3, r0
 8102bba:	4618      	mov	r0, r3
 8102bbc:	3708      	adds	r7, #8
 8102bbe:	46bd      	mov	sp, r7
 8102bc0:	bd80      	pop	{r7, pc}

08102bc2 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8102bc2:	b480      	push	{r7}
 8102bc4:	b083      	sub	sp, #12
 8102bc6:	af00      	add	r7, sp, #0
 8102bc8:	6078      	str	r0, [r7, #4]
 8102bca:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8102bcc:	687b      	ldr	r3, [r7, #4]
 8102bce:	683a      	ldr	r2, [r7, #0]
 8102bd0:	601a      	str	r2, [r3, #0]
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	4618      	mov	r0, r3
 8102bd6:	370c      	adds	r7, #12
 8102bd8:	46bd      	mov	sp, r7
 8102bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bde:	4770      	bx	lr

08102be0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8102be0:	b5b0      	push	{r4, r5, r7, lr}
 8102be2:	b088      	sub	sp, #32
 8102be4:	af02      	add	r7, sp, #8
 8102be6:	60f8      	str	r0, [r7, #12]
 8102be8:	60b9      	str	r1, [r7, #8]
 8102bea:	607a      	str	r2, [r7, #4]
 8102bec:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8102bee:	68f8      	ldr	r0, [r7, #12]
 8102bf0:	f000 f893 	bl	8102d1a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8102bf4:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8102bf6:	68b8      	ldr	r0, [r7, #8]
 8102bf8:	f7ff fcf3 	bl	81025e2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102bfc:	4604      	mov	r4, r0
 8102bfe:	6878      	ldr	r0, [r7, #4]
 8102c00:	f7ff fcfa 	bl	81025f8 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102c04:	4605      	mov	r5, r0
 8102c06:	6838      	ldr	r0, [r7, #0]
 8102c08:	f7ff fd01 	bl	810260e <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102c0c:	4603      	mov	r3, r0
 8102c0e:	9300      	str	r3, [sp, #0]
 8102c10:	462b      	mov	r3, r5
 8102c12:	4622      	mov	r2, r4
 8102c14:	6979      	ldr	r1, [r7, #20]
 8102c16:	68f8      	ldr	r0, [r7, #12]
 8102c18:	f000 f98a 	bl	8102f30 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8102c1c:	697b      	ldr	r3, [r7, #20]
	}
 8102c1e:	4618      	mov	r0, r3
 8102c20:	3718      	adds	r7, #24
 8102c22:	46bd      	mov	sp, r7
 8102c24:	bdb0      	pop	{r4, r5, r7, pc}

08102c26 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8102c26:	b580      	push	{r7, lr}
 8102c28:	b084      	sub	sp, #16
 8102c2a:	af00      	add	r7, sp, #0
 8102c2c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8102c2e:	687b      	ldr	r3, [r7, #4]
 8102c30:	681a      	ldr	r2, [r3, #0]
 8102c32:	f107 030c 	add.w	r3, r7, #12
 8102c36:	4611      	mov	r1, r2
 8102c38:	4618      	mov	r0, r3
 8102c3a:	f7ff fb3f 	bl	81022bc <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102c3e:	68fb      	ldr	r3, [r7, #12]
 8102c40:	4618      	mov	r0, r3
 8102c42:	3710      	adds	r7, #16
 8102c44:	46bd      	mov	sp, r7
 8102c46:	bd80      	pop	{r7, pc}

08102c48 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8102c48:	b480      	push	{r7}
 8102c4a:	b083      	sub	sp, #12
 8102c4c:	af00      	add	r7, sp, #0
 8102c4e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8102c50:	687b      	ldr	r3, [r7, #4]
 8102c52:	3310      	adds	r3, #16
 8102c54:	4618      	mov	r0, r3
 8102c56:	370c      	adds	r7, #12
 8102c58:	46bd      	mov	sp, r7
 8102c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c5e:	4770      	bx	lr

08102c60 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8102c60:	b480      	push	{r7}
 8102c62:	b083      	sub	sp, #12
 8102c64:	af00      	add	r7, sp, #0
 8102c66:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8102c68:	687b      	ldr	r3, [r7, #4]
 8102c6a:	330c      	adds	r3, #12
 8102c6c:	4618      	mov	r0, r3
 8102c6e:	370c      	adds	r7, #12
 8102c70:	46bd      	mov	sp, r7
 8102c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c76:	4770      	bx	lr

08102c78 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8102c78:	b580      	push	{r7, lr}
 8102c7a:	b084      	sub	sp, #16
 8102c7c:	af00      	add	r7, sp, #0
 8102c7e:	60f8      	str	r0, [r7, #12]
 8102c80:	60b9      	str	r1, [r7, #8]
 8102c82:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8102c84:	68b8      	ldr	r0, [r7, #8]
 8102c86:	f000 f8a3 	bl	8102dd0 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8102c8a:	4603      	mov	r3, r0
 8102c8c:	681a      	ldr	r2, [r3, #0]
 8102c8e:	68fb      	ldr	r3, [r7, #12]
 8102c90:	601a      	str	r2, [r3, #0]
 8102c92:	6878      	ldr	r0, [r7, #4]
 8102c94:	f000 f89c 	bl	8102dd0 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8102c98:	4603      	mov	r3, r0
 8102c9a:	681a      	ldr	r2, [r3, #0]
 8102c9c:	68fb      	ldr	r3, [r7, #12]
 8102c9e:	605a      	str	r2, [r3, #4]
 8102ca0:	68fb      	ldr	r3, [r7, #12]
 8102ca2:	4618      	mov	r0, r3
 8102ca4:	3710      	adds	r7, #16
 8102ca6:	46bd      	mov	sp, r7
 8102ca8:	bd80      	pop	{r7, pc}

08102caa <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8102caa:	b580      	push	{r7, lr}
 8102cac:	b082      	sub	sp, #8
 8102cae:	af00      	add	r7, sp, #0
 8102cb0:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8102cb2:	687b      	ldr	r3, [r7, #4]
 8102cb4:	681b      	ldr	r3, [r3, #0]
 8102cb6:	4618      	mov	r0, r3
 8102cb8:	f013 fbd2 	bl	8116460 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8102cbc:	4602      	mov	r2, r0
 8102cbe:	687b      	ldr	r3, [r7, #4]
 8102cc0:	601a      	str	r2, [r3, #0]
	return *this;
 8102cc2:	687b      	ldr	r3, [r7, #4]
      }
 8102cc4:	4618      	mov	r0, r3
 8102cc6:	3708      	adds	r7, #8
 8102cc8:	46bd      	mov	sp, r7
 8102cca:	bd80      	pop	{r7, pc}

08102ccc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8102ccc:	b480      	push	{r7}
 8102cce:	b083      	sub	sp, #12
 8102cd0:	af00      	add	r7, sp, #0
 8102cd2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8102cd4:	687b      	ldr	r3, [r7, #4]
 8102cd6:	4618      	mov	r0, r3
 8102cd8:	370c      	adds	r7, #12
 8102cda:	46bd      	mov	sp, r7
 8102cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ce0:	4770      	bx	lr

08102ce2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8102ce2:	b580      	push	{r7, lr}
 8102ce4:	b082      	sub	sp, #8
 8102ce6:	af00      	add	r7, sp, #0
 8102ce8:	6078      	str	r0, [r7, #4]
 8102cea:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8102cec:	6839      	ldr	r1, [r7, #0]
 8102cee:	6878      	ldr	r0, [r7, #4]
 8102cf0:	f000 f94b 	bl	8102f8a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>
	}
 8102cf4:	bf00      	nop
 8102cf6:	3708      	adds	r7, #8
 8102cf8:	46bd      	mov	sp, r7
 8102cfa:	bd80      	pop	{r7, pc}

08102cfc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8102cfc:	b580      	push	{r7, lr}
 8102cfe:	b084      	sub	sp, #16
 8102d00:	af00      	add	r7, sp, #0
 8102d02:	60f8      	str	r0, [r7, #12]
 8102d04:	60b9      	str	r1, [r7, #8]
 8102d06:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8102d08:	687a      	ldr	r2, [r7, #4]
 8102d0a:	68b9      	ldr	r1, [r7, #8]
 8102d0c:	68f8      	ldr	r0, [r7, #12]
 8102d0e:	f000 f947 	bl	8102fa0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>
 8102d12:	bf00      	nop
 8102d14:	3710      	adds	r7, #16
 8102d16:	46bd      	mov	sp, r7
 8102d18:	bd80      	pop	{r7, pc}

08102d1a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8102d1a:	b580      	push	{r7, lr}
 8102d1c:	b082      	sub	sp, #8
 8102d1e:	af00      	add	r7, sp, #0
 8102d20:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8102d22:	6878      	ldr	r0, [r7, #4]
 8102d24:	f7ff ffd2 	bl	8102ccc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102d28:	4603      	mov	r3, r0
 8102d2a:	2101      	movs	r1, #1
 8102d2c:	4618      	mov	r0, r3
 8102d2e:	f000 f94a 	bl	8102fc6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>
 8102d32:	4603      	mov	r3, r0
 8102d34:	4618      	mov	r0, r3
 8102d36:	3708      	adds	r7, #8
 8102d38:	46bd      	mov	sp, r7
 8102d3a:	bd80      	pop	{r7, pc}

08102d3c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8102d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8102d3e:	b085      	sub	sp, #20
 8102d40:	af00      	add	r7, sp, #0
 8102d42:	60f8      	str	r0, [r7, #12]
 8102d44:	60b9      	str	r1, [r7, #8]
 8102d46:	607a      	str	r2, [r7, #4]
 8102d48:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8102d4a:	68bb      	ldr	r3, [r7, #8]
 8102d4c:	4619      	mov	r1, r3
 8102d4e:	2018      	movs	r0, #24
 8102d50:	f7fd ff82 	bl	8100c58 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8102d54:	68f8      	ldr	r0, [r7, #12]
 8102d56:	f7ff ffb9 	bl	8102ccc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102d5a:	4604      	mov	r4, r0
 8102d5c:	68b8      	ldr	r0, [r7, #8]
 8102d5e:	f7ff fc23 	bl	81025a8 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102d62:	4605      	mov	r5, r0
 8102d64:	6878      	ldr	r0, [r7, #4]
 8102d66:	f7fe fe82 	bl	8101a6e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102d6a:	4606      	mov	r6, r0
 8102d6c:	6838      	ldr	r0, [r7, #0]
 8102d6e:	f7fe fe89 	bl	8101a84 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102d72:	4603      	mov	r3, r0
 8102d74:	4632      	mov	r2, r6
 8102d76:	4629      	mov	r1, r5
 8102d78:	4620      	mov	r0, r4
 8102d7a:	f000 f933 	bl	8102fe4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>
	}
 8102d7e:	bf00      	nop
 8102d80:	3714      	adds	r7, #20
 8102d82:	46bd      	mov	sp, r7
 8102d84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08102d86 <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr() const
 8102d86:	b580      	push	{r7, lr}
 8102d88:	b082      	sub	sp, #8
 8102d8a:	af00      	add	r7, sp, #0
 8102d8c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8102d8e:	687b      	ldr	r3, [r7, #4]
 8102d90:	3310      	adds	r3, #16
 8102d92:	4618      	mov	r0, r3
 8102d94:	f000 f93e 	bl	8103014 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 8102d98:	4603      	mov	r3, r0
 8102d9a:	4618      	mov	r0, r3
 8102d9c:	3708      	adds	r7, #8
 8102d9e:	46bd      	mov	sp, r7
 8102da0:	bd80      	pop	{r7, pc}

08102da2 <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8102da2:	b480      	push	{r7}
 8102da4:	b083      	sub	sp, #12
 8102da6:	af00      	add	r7, sp, #0
 8102da8:	6078      	str	r0, [r7, #4]
 8102daa:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8102dac:	683b      	ldr	r3, [r7, #0]
 8102dae:	4618      	mov	r0, r3
 8102db0:	370c      	adds	r7, #12
 8102db2:	46bd      	mov	sp, r7
 8102db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102db8:	4770      	bx	lr

08102dba <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102dba:	b480      	push	{r7}
 8102dbc:	b083      	sub	sp, #12
 8102dbe:	af00      	add	r7, sp, #0
 8102dc0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	4618      	mov	r0, r3
 8102dc6:	370c      	adds	r7, #12
 8102dc8:	46bd      	mov	sp, r7
 8102dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dce:	4770      	bx	lr

08102dd0 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102dd0:	b480      	push	{r7}
 8102dd2:	b083      	sub	sp, #12
 8102dd4:	af00      	add	r7, sp, #0
 8102dd6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102dd8:	687b      	ldr	r3, [r7, #4]
 8102dda:	4618      	mov	r0, r3
 8102ddc:	370c      	adds	r7, #12
 8102dde:	46bd      	mov	sp, r7
 8102de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102de4:	4770      	bx	lr
	...

08102de8 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8102de8:	b580      	push	{r7, lr}
 8102dea:	b084      	sub	sp, #16
 8102dec:	af00      	add	r7, sp, #0
 8102dee:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8102df0:	4b0a      	ldr	r3, [pc, #40]	@ (8102e1c <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8102df2:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8102df4:	6878      	ldr	r0, [r7, #4]
 8102df6:	f000 f919 	bl	810302c <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>
 8102dfa:	4603      	mov	r3, r0
 8102dfc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8102dfe:	f107 0208 	add.w	r2, r7, #8
 8102e02:	f107 030c 	add.w	r3, r7, #12
 8102e06:	4611      	mov	r1, r2
 8102e08:	4618      	mov	r0, r3
 8102e0a:	f000 f91b 	bl	8103044 <_ZSt3minIjERKT_S2_S2_>
 8102e0e:	4603      	mov	r3, r0
 8102e10:	681b      	ldr	r3, [r3, #0]
      }
 8102e12:	4618      	mov	r0, r3
 8102e14:	3710      	adds	r7, #16
 8102e16:	46bd      	mov	sp, r7
 8102e18:	bd80      	pop	{r7, pc}
 8102e1a:	bf00      	nop
 8102e1c:	05555555 	.word	0x05555555

08102e20 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8102e20:	b480      	push	{r7}
 8102e22:	b083      	sub	sp, #12
 8102e24:	af00      	add	r7, sp, #0
 8102e26:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8102e28:	687b      	ldr	r3, [r7, #4]
 8102e2a:	4618      	mov	r0, r3
 8102e2c:	370c      	adds	r7, #12
 8102e2e:	46bd      	mov	sp, r7
 8102e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e34:	4770      	bx	lr
	...

08102e38 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8102e38:	b580      	push	{r7, lr}
 8102e3a:	b084      	sub	sp, #16
 8102e3c:	af00      	add	r7, sp, #0
 8102e3e:	60f8      	str	r0, [r7, #12]
 8102e40:	60b9      	str	r1, [r7, #8]
 8102e42:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8102e44:	68f8      	ldr	r0, [r7, #12]
 8102e46:	f000 f911 	bl	810306c <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 8102e4a:	4602      	mov	r2, r0
 8102e4c:	68bb      	ldr	r3, [r7, #8]
 8102e4e:	4293      	cmp	r3, r2
 8102e50:	bf8c      	ite	hi
 8102e52:	2301      	movhi	r3, #1
 8102e54:	2300      	movls	r3, #0
 8102e56:	b2db      	uxtb	r3, r3
 8102e58:	2b00      	cmp	r3, #0
 8102e5a:	bf14      	ite	ne
 8102e5c:	2301      	movne	r3, #1
 8102e5e:	2300      	moveq	r3, #0
 8102e60:	b2db      	uxtb	r3, r3
 8102e62:	2b00      	cmp	r3, #0
 8102e64:	d007      	beq.n	8102e76 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8102e66:	68bb      	ldr	r3, [r7, #8]
 8102e68:	4a09      	ldr	r2, [pc, #36]	@ (8102e90 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x58>)
 8102e6a:	4293      	cmp	r3, r2
 8102e6c:	d901      	bls.n	8102e72 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8102e6e:	f013 fb62 	bl	8116536 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8102e72:	f013 fb5d 	bl	8116530 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8102e76:	68ba      	ldr	r2, [r7, #8]
 8102e78:	4613      	mov	r3, r2
 8102e7a:	005b      	lsls	r3, r3, #1
 8102e7c:	4413      	add	r3, r2
 8102e7e:	00db      	lsls	r3, r3, #3
 8102e80:	4618      	mov	r0, r3
 8102e82:	f013 fa87 	bl	8116394 <_Znwj>
 8102e86:	4603      	mov	r3, r0
      }
 8102e88:	4618      	mov	r0, r3
 8102e8a:	3710      	adds	r7, #16
 8102e8c:	46bd      	mov	sp, r7
 8102e8e:	bd80      	pop	{r7, pc}
 8102e90:	0aaaaaaa 	.word	0x0aaaaaaa

08102e94 <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8102e94:	b5b0      	push	{r4, r5, r7, lr}
 8102e96:	b084      	sub	sp, #16
 8102e98:	af00      	add	r7, sp, #0
 8102e9a:	60f8      	str	r0, [r7, #12]
 8102e9c:	60b9      	str	r1, [r7, #8]
 8102e9e:	607a      	str	r2, [r7, #4]
 8102ea0:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8102ea2:	68f8      	ldr	r0, [r7, #12]
 8102ea4:	f000 f8f0 	bl	8103088 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102ea8:	4604      	mov	r4, r0
 8102eaa:	68b8      	ldr	r0, [r7, #8]
 8102eac:	f000 f8ec 	bl	8103088 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102eb0:	4605      	mov	r5, r0
 8102eb2:	6878      	ldr	r0, [r7, #4]
 8102eb4:	f000 f8e8 	bl	8103088 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102eb8:	4602      	mov	r2, r0
 8102eba:	683b      	ldr	r3, [r7, #0]
 8102ebc:	4629      	mov	r1, r5
 8102ebe:	4620      	mov	r0, r4
 8102ec0:	f000 f8ee 	bl	81030a0 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8102ec4:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8102ec6:	4618      	mov	r0, r3
 8102ec8:	3710      	adds	r7, #16
 8102eca:	46bd      	mov	sp, r7
 8102ecc:	bdb0      	pop	{r4, r5, r7, pc}

08102ece <_ZNSt13move_iteratorIP8SMessageEC1ES1_>:
      move_iterator(iterator_type __i)
 8102ece:	b580      	push	{r7, lr}
 8102ed0:	b082      	sub	sp, #8
 8102ed2:	af00      	add	r7, sp, #0
 8102ed4:	6078      	str	r0, [r7, #4]
 8102ed6:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8102ed8:	463b      	mov	r3, r7
 8102eda:	4618      	mov	r0, r3
 8102edc:	f000 f90a 	bl	81030f4 <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>
 8102ee0:	4603      	mov	r3, r0
 8102ee2:	681a      	ldr	r2, [r3, #0]
 8102ee4:	687b      	ldr	r3, [r7, #4]
 8102ee6:	601a      	str	r2, [r3, #0]
 8102ee8:	687b      	ldr	r3, [r7, #4]
 8102eea:	4618      	mov	r0, r3
 8102eec:	3708      	adds	r7, #8
 8102eee:	46bd      	mov	sp, r7
 8102ef0:	bd80      	pop	{r7, pc}

08102ef2 <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8102ef2:	b580      	push	{r7, lr}
 8102ef4:	b086      	sub	sp, #24
 8102ef6:	af00      	add	r7, sp, #0
 8102ef8:	60f8      	str	r0, [r7, #12]
 8102efa:	60b9      	str	r1, [r7, #8]
 8102efc:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8102efe:	2301      	movs	r3, #1
 8102f00:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8102f02:	2301      	movs	r3, #1
 8102f04:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8102f06:	687a      	ldr	r2, [r7, #4]
 8102f08:	68b9      	ldr	r1, [r7, #8]
 8102f0a:	68f8      	ldr	r0, [r7, #12]
 8102f0c:	f000 f8fd 	bl	810310a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>
 8102f10:	4603      	mov	r3, r0
    }
 8102f12:	4618      	mov	r0, r3
 8102f14:	3718      	adds	r7, #24
 8102f16:	46bd      	mov	sp, r7
 8102f18:	bd80      	pop	{r7, pc}

08102f1a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() noexcept
 8102f1a:	b480      	push	{r7}
 8102f1c:	b083      	sub	sp, #12
 8102f1e:	af00      	add	r7, sp, #0
 8102f20:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8102f22:	687b      	ldr	r3, [r7, #4]
 8102f24:	4618      	mov	r0, r3
 8102f26:	370c      	adds	r7, #12
 8102f28:	46bd      	mov	sp, r7
 8102f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f2e:	4770      	bx	lr

08102f30 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8102f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8102f34:	b086      	sub	sp, #24
 8102f36:	af02      	add	r7, sp, #8
 8102f38:	60f8      	str	r0, [r7, #12]
 8102f3a:	60b9      	str	r1, [r7, #8]
 8102f3c:	607a      	str	r2, [r7, #4]
 8102f3e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8102f40:	68bb      	ldr	r3, [r7, #8]
 8102f42:	4619      	mov	r1, r3
 8102f44:	2018      	movs	r0, #24
 8102f46:	f7fd fe87 	bl	8100c58 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8102f4a:	68f8      	ldr	r0, [r7, #12]
 8102f4c:	f7ff febe 	bl	8102ccc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102f50:	4604      	mov	r4, r0
 8102f52:	68b8      	ldr	r0, [r7, #8]
 8102f54:	f7ff fb28 	bl	81025a8 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102f58:	4605      	mov	r5, r0
 8102f5a:	6878      	ldr	r0, [r7, #4]
 8102f5c:	f7ff fb41 	bl	81025e2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102f60:	4606      	mov	r6, r0
 8102f62:	6838      	ldr	r0, [r7, #0]
 8102f64:	f7ff fb48 	bl	81025f8 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102f68:	4680      	mov	r8, r0
 8102f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102f6c:	f7ff fb4f 	bl	810260e <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102f70:	4603      	mov	r3, r0
 8102f72:	9300      	str	r3, [sp, #0]
 8102f74:	4643      	mov	r3, r8
 8102f76:	4632      	mov	r2, r6
 8102f78:	4629      	mov	r1, r5
 8102f7a:	4620      	mov	r0, r4
 8102f7c:	f000 f8d5 	bl	810312a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8102f80:	bf00      	nop
 8102f82:	3710      	adds	r7, #16
 8102f84:	46bd      	mov	sp, r7
 8102f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08102f8a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8102f8a:	b480      	push	{r7}
 8102f8c:	b083      	sub	sp, #12
 8102f8e:	af00      	add	r7, sp, #0
 8102f90:	6078      	str	r0, [r7, #4]
 8102f92:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8102f94:	bf00      	nop
 8102f96:	370c      	adds	r7, #12
 8102f98:	46bd      	mov	sp, r7
 8102f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f9e:	4770      	bx	lr

08102fa0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8102fa0:	b580      	push	{r7, lr}
 8102fa2:	b084      	sub	sp, #16
 8102fa4:	af00      	add	r7, sp, #0
 8102fa6:	60f8      	str	r0, [r7, #12]
 8102fa8:	60b9      	str	r1, [r7, #8]
 8102faa:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8102fac:	687a      	ldr	r2, [r7, #4]
 8102fae:	4613      	mov	r3, r2
 8102fb0:	005b      	lsls	r3, r3, #1
 8102fb2:	4413      	add	r3, r2
 8102fb4:	00db      	lsls	r3, r3, #3
 8102fb6:	4619      	mov	r1, r3
 8102fb8:	68b8      	ldr	r0, [r7, #8]
 8102fba:	f013 f9e9 	bl	8116390 <_ZdlPvj>
      }
 8102fbe:	bf00      	nop
 8102fc0:	3710      	adds	r7, #16
 8102fc2:	46bd      	mov	sp, r7
 8102fc4:	bd80      	pop	{r7, pc}

08102fc6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8102fc6:	b580      	push	{r7, lr}
 8102fc8:	b082      	sub	sp, #8
 8102fca:	af00      	add	r7, sp, #0
 8102fcc:	6078      	str	r0, [r7, #4]
 8102fce:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8102fd0:	2200      	movs	r2, #0
 8102fd2:	6839      	ldr	r1, [r7, #0]
 8102fd4:	6878      	ldr	r0, [r7, #4]
 8102fd6:	f000 f8c7 	bl	8103168 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>
 8102fda:	4603      	mov	r3, r0
 8102fdc:	4618      	mov	r0, r3
 8102fde:	3708      	adds	r7, #8
 8102fe0:	46bd      	mov	sp, r7
 8102fe2:	bd80      	pop	{r7, pc}

08102fe4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8102fe4:	b590      	push	{r4, r7, lr}
 8102fe6:	b085      	sub	sp, #20
 8102fe8:	af00      	add	r7, sp, #0
 8102fea:	60f8      	str	r0, [r7, #12]
 8102fec:	60b9      	str	r1, [r7, #8]
 8102fee:	607a      	str	r2, [r7, #4]
 8102ff0:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8102ff2:	6878      	ldr	r0, [r7, #4]
 8102ff4:	f7fe fd3b 	bl	8101a6e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102ff8:	4604      	mov	r4, r0
 8102ffa:	6838      	ldr	r0, [r7, #0]
 8102ffc:	f7fe fd42 	bl	8101a84 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8103000:	4603      	mov	r3, r0
 8103002:	4622      	mov	r2, r4
 8103004:	68b9      	ldr	r1, [r7, #8]
 8103006:	68f8      	ldr	r0, [r7, #12]
 8103008:	f000 f8dc 	bl	81031c4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>
	}
 810300c:	bf00      	nop
 810300e:	3714      	adds	r7, #20
 8103010:	46bd      	mov	sp, r7
 8103012:	bd90      	pop	{r4, r7, pc}

08103014 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8103014:	b580      	push	{r7, lr}
 8103016:	b082      	sub	sp, #8
 8103018:	af00      	add	r7, sp, #0
 810301a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 810301c:	6878      	ldr	r0, [r7, #4]
 810301e:	f000 f8ef 	bl	8103200 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8103022:	4603      	mov	r3, r0
 8103024:	4618      	mov	r0, r3
 8103026:	3708      	adds	r7, #8
 8103028:	46bd      	mov	sp, r7
 810302a:	bd80      	pop	{r7, pc}

0810302c <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 810302c:	b580      	push	{r7, lr}
 810302e:	b082      	sub	sp, #8
 8103030:	af00      	add	r7, sp, #0
 8103032:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8103034:	6878      	ldr	r0, [r7, #4]
 8103036:	f000 f8ee 	bl	8103216 <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>
 810303a:	4603      	mov	r3, r0
      }
 810303c:	4618      	mov	r0, r3
 810303e:	3708      	adds	r7, #8
 8103040:	46bd      	mov	sp, r7
 8103042:	bd80      	pop	{r7, pc}

08103044 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8103044:	b480      	push	{r7}
 8103046:	b083      	sub	sp, #12
 8103048:	af00      	add	r7, sp, #0
 810304a:	6078      	str	r0, [r7, #4]
 810304c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 810304e:	683b      	ldr	r3, [r7, #0]
 8103050:	681a      	ldr	r2, [r3, #0]
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	681b      	ldr	r3, [r3, #0]
 8103056:	429a      	cmp	r2, r3
 8103058:	d201      	bcs.n	810305e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 810305a:	683b      	ldr	r3, [r7, #0]
 810305c:	e000      	b.n	8103060 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 810305e:	687b      	ldr	r3, [r7, #4]
    }
 8103060:	4618      	mov	r0, r3
 8103062:	370c      	adds	r7, #12
 8103064:	46bd      	mov	sp, r7
 8103066:	f85d 7b04 	ldr.w	r7, [sp], #4
 810306a:	4770      	bx	lr

0810306c <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 810306c:	b480      	push	{r7}
 810306e:	b083      	sub	sp, #12
 8103070:	af00      	add	r7, sp, #0
 8103072:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8103074:	4b03      	ldr	r3, [pc, #12]	@ (8103084 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8103076:	4618      	mov	r0, r3
 8103078:	370c      	adds	r7, #12
 810307a:	46bd      	mov	sp, r7
 810307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103080:	4770      	bx	lr
 8103082:	bf00      	nop
 8103084:	05555555 	.word	0x05555555

08103088 <_ZSt12__niter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8103088:	b480      	push	{r7}
 810308a:	b083      	sub	sp, #12
 810308c:	af00      	add	r7, sp, #0
 810308e:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8103090:	687b      	ldr	r3, [r7, #4]
 8103092:	4618      	mov	r0, r3
 8103094:	370c      	adds	r7, #12
 8103096:	46bd      	mov	sp, r7
 8103098:	f85d 7b04 	ldr.w	r7, [sp], #4
 810309c:	4770      	bx	lr
	...

081030a0 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 81030a0:	b580      	push	{r7, lr}
 81030a2:	b086      	sub	sp, #24
 81030a4:	af00      	add	r7, sp, #0
 81030a6:	60f8      	str	r0, [r7, #12]
 81030a8:	60b9      	str	r1, [r7, #8]
 81030aa:	607a      	str	r2, [r7, #4]
 81030ac:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 81030ae:	68ba      	ldr	r2, [r7, #8]
 81030b0:	68fb      	ldr	r3, [r7, #12]
 81030b2:	1ad3      	subs	r3, r2, r3
 81030b4:	10db      	asrs	r3, r3, #3
 81030b6:	4a0e      	ldr	r2, [pc, #56]	@ (81030f0 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x50>)
 81030b8:	fb02 f303 	mul.w	r3, r2, r3
 81030bc:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 81030be:	697b      	ldr	r3, [r7, #20]
 81030c0:	2b00      	cmp	r3, #0
 81030c2:	dd09      	ble.n	81030d8 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x38>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 81030c4:	697a      	ldr	r2, [r7, #20]
 81030c6:	4613      	mov	r3, r2
 81030c8:	005b      	lsls	r3, r3, #1
 81030ca:	4413      	add	r3, r2
 81030cc:	00db      	lsls	r3, r3, #3
 81030ce:	461a      	mov	r2, r3
 81030d0:	68f9      	ldr	r1, [r7, #12]
 81030d2:	6878      	ldr	r0, [r7, #4]
 81030d4:	f013 fc6d 	bl	81169b2 <memmove>
      return __result + __count;
 81030d8:	697a      	ldr	r2, [r7, #20]
 81030da:	4613      	mov	r3, r2
 81030dc:	005b      	lsls	r3, r3, #1
 81030de:	4413      	add	r3, r2
 81030e0:	00db      	lsls	r3, r3, #3
 81030e2:	461a      	mov	r2, r3
 81030e4:	687b      	ldr	r3, [r7, #4]
 81030e6:	4413      	add	r3, r2
    }
 81030e8:	4618      	mov	r0, r3
 81030ea:	3718      	adds	r7, #24
 81030ec:	46bd      	mov	sp, r7
 81030ee:	bd80      	pop	{r7, pc}
 81030f0:	aaaaaaab 	.word	0xaaaaaaab

081030f4 <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 81030f4:	b480      	push	{r7}
 81030f6:	b083      	sub	sp, #12
 81030f8:	af00      	add	r7, sp, #0
 81030fa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	4618      	mov	r0, r3
 8103100:	370c      	adds	r7, #12
 8103102:	46bd      	mov	sp, r7
 8103104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103108:	4770      	bx	lr

0810310a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 810310a:	b580      	push	{r7, lr}
 810310c:	b084      	sub	sp, #16
 810310e:	af00      	add	r7, sp, #0
 8103110:	60f8      	str	r0, [r7, #12]
 8103112:	60b9      	str	r1, [r7, #8]
 8103114:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8103116:	687a      	ldr	r2, [r7, #4]
 8103118:	68b9      	ldr	r1, [r7, #8]
 810311a:	68f8      	ldr	r0, [r7, #12]
 810311c:	f000 f887 	bl	810322e <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8103120:	4603      	mov	r3, r0
 8103122:	4618      	mov	r0, r3
 8103124:	3710      	adds	r7, #16
 8103126:	46bd      	mov	sp, r7
 8103128:	bd80      	pop	{r7, pc}

0810312a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 810312a:	b5b0      	push	{r4, r5, r7, lr}
 810312c:	b086      	sub	sp, #24
 810312e:	af02      	add	r7, sp, #8
 8103130:	60f8      	str	r0, [r7, #12]
 8103132:	60b9      	str	r1, [r7, #8]
 8103134:	607a      	str	r2, [r7, #4]
 8103136:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8103138:	6878      	ldr	r0, [r7, #4]
 810313a:	f7ff fa52 	bl	81025e2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810313e:	4604      	mov	r4, r0
 8103140:	6838      	ldr	r0, [r7, #0]
 8103142:	f7ff fa59 	bl	81025f8 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8103146:	4605      	mov	r5, r0
 8103148:	6a38      	ldr	r0, [r7, #32]
 810314a:	f7ff fa60 	bl	810260e <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810314e:	4603      	mov	r3, r0
 8103150:	9300      	str	r3, [sp, #0]
 8103152:	462b      	mov	r3, r5
 8103154:	4622      	mov	r2, r4
 8103156:	68b9      	ldr	r1, [r7, #8]
 8103158:	68f8      	ldr	r0, [r7, #12]
 810315a:	f000 f890 	bl	810327e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>
	}
 810315e:	bf00      	nop
 8103160:	3710      	adds	r7, #16
 8103162:	46bd      	mov	sp, r7
 8103164:	bdb0      	pop	{r4, r5, r7, pc}
	...

08103168 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8103168:	b580      	push	{r7, lr}
 810316a:	b084      	sub	sp, #16
 810316c:	af00      	add	r7, sp, #0
 810316e:	60f8      	str	r0, [r7, #12]
 8103170:	60b9      	str	r1, [r7, #8]
 8103172:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8103174:	68f8      	ldr	r0, [r7, #12]
 8103176:	f000 f8ab 	bl	81032d0 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>
 810317a:	4602      	mov	r2, r0
 810317c:	68bb      	ldr	r3, [r7, #8]
 810317e:	4293      	cmp	r3, r2
 8103180:	bf8c      	ite	hi
 8103182:	2301      	movhi	r3, #1
 8103184:	2300      	movls	r3, #0
 8103186:	b2db      	uxtb	r3, r3
 8103188:	2b00      	cmp	r3, #0
 810318a:	bf14      	ite	ne
 810318c:	2301      	movne	r3, #1
 810318e:	2300      	moveq	r3, #0
 8103190:	b2db      	uxtb	r3, r3
 8103192:	2b00      	cmp	r3, #0
 8103194:	d007      	beq.n	81031a6 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8103196:	68bb      	ldr	r3, [r7, #8]
 8103198:	4a09      	ldr	r2, [pc, #36]	@ (81031c0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x58>)
 810319a:	4293      	cmp	r3, r2
 810319c:	d901      	bls.n	81031a2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 810319e:	f013 f9ca 	bl	8116536 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 81031a2:	f013 f9c5 	bl	8116530 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 81031a6:	68ba      	ldr	r2, [r7, #8]
 81031a8:	4613      	mov	r3, r2
 81031aa:	005b      	lsls	r3, r3, #1
 81031ac:	4413      	add	r3, r2
 81031ae:	00db      	lsls	r3, r3, #3
 81031b0:	4618      	mov	r0, r3
 81031b2:	f013 f8ef 	bl	8116394 <_Znwj>
 81031b6:	4603      	mov	r3, r0
      }
 81031b8:	4618      	mov	r0, r3
 81031ba:	3710      	adds	r7, #16
 81031bc:	46bd      	mov	sp, r7
 81031be:	bd80      	pop	{r7, pc}
 81031c0:	0aaaaaaa 	.word	0x0aaaaaaa

081031c4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 81031c4:	b5b0      	push	{r4, r5, r7, lr}
 81031c6:	b084      	sub	sp, #16
 81031c8:	af00      	add	r7, sp, #0
 81031ca:	60f8      	str	r0, [r7, #12]
 81031cc:	60b9      	str	r1, [r7, #8]
 81031ce:	607a      	str	r2, [r7, #4]
 81031d0:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 81031d2:	68bb      	ldr	r3, [r7, #8]
 81031d4:	4619      	mov	r1, r3
 81031d6:	2008      	movs	r0, #8
 81031d8:	f7fd fd3e 	bl	8100c58 <_ZnwjPv>
 81031dc:	4604      	mov	r4, r0
 81031de:	6878      	ldr	r0, [r7, #4]
 81031e0:	f7fe fc45 	bl	8101a6e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81031e4:	4605      	mov	r5, r0
 81031e6:	6838      	ldr	r0, [r7, #0]
 81031e8:	f7fe fc4c 	bl	8101a84 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81031ec:	4603      	mov	r3, r0
 81031ee:	461a      	mov	r2, r3
 81031f0:	4629      	mov	r1, r5
 81031f2:	4620      	mov	r0, r4
 81031f4:	f000 f87a 	bl	81032ec <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>
 81031f8:	bf00      	nop
 81031fa:	3710      	adds	r7, #16
 81031fc:	46bd      	mov	sp, r7
 81031fe:	bdb0      	pop	{r4, r5, r7, pc}

08103200 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() const noexcept
 8103200:	b480      	push	{r7}
 8103202:	b083      	sub	sp, #12
 8103204:	af00      	add	r7, sp, #0
 8103206:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	4618      	mov	r0, r3
 810320c:	370c      	adds	r7, #12
 810320e:	46bd      	mov	sp, r7
 8103210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103214:	4770      	bx	lr

08103216 <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8103216:	b580      	push	{r7, lr}
 8103218:	b082      	sub	sp, #8
 810321a:	af00      	add	r7, sp, #0
 810321c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 810321e:	6878      	ldr	r0, [r7, #4]
 8103220:	f7ff ff24 	bl	810306c <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 8103224:	4603      	mov	r3, r0
 8103226:	4618      	mov	r0, r3
 8103228:	3708      	adds	r7, #8
 810322a:	46bd      	mov	sp, r7
 810322c:	bd80      	pop	{r7, pc}

0810322e <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 810322e:	b590      	push	{r4, r7, lr}
 8103230:	b085      	sub	sp, #20
 8103232:	af00      	add	r7, sp, #0
 8103234:	60f8      	str	r0, [r7, #12]
 8103236:	60b9      	str	r1, [r7, #8]
 8103238:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 810323a:	68f8      	ldr	r0, [r7, #12]
 810323c:	f000 f86f 	bl	810331e <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8103240:	4604      	mov	r4, r0
 8103242:	68b8      	ldr	r0, [r7, #8]
 8103244:	f000 f86b 	bl	810331e <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8103248:	4603      	mov	r3, r0
 810324a:	687a      	ldr	r2, [r7, #4]
 810324c:	4619      	mov	r1, r3
 810324e:	4620      	mov	r0, r4
 8103250:	f000 f876 	bl	8103340 <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>
 8103254:	4603      	mov	r3, r0
    }
 8103256:	4618      	mov	r0, r3
 8103258:	3714      	adds	r7, #20
 810325a:	46bd      	mov	sp, r7
 810325c:	bd90      	pop	{r4, r7, pc}

0810325e <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 810325e:	b580      	push	{r7, lr}
 8103260:	b082      	sub	sp, #8
 8103262:	af00      	add	r7, sp, #0
 8103264:	6078      	str	r0, [r7, #4]
 8103266:	6039      	str	r1, [r7, #0]
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	683a      	ldr	r2, [r7, #0]
 810326c:	4611      	mov	r1, r2
 810326e:	4618      	mov	r0, r3
 8103270:	f000 f889 	bl	8103386 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	4618      	mov	r0, r3
 8103278:	3708      	adds	r7, #8
 810327a:	46bd      	mov	sp, r7
 810327c:	bd80      	pop	{r7, pc}

0810327e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 810327e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8103280:	b087      	sub	sp, #28
 8103282:	af00      	add	r7, sp, #0
 8103284:	60f8      	str	r0, [r7, #12]
 8103286:	60b9      	str	r1, [r7, #8]
 8103288:	607a      	str	r2, [r7, #4]
 810328a:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 810328c:	68bb      	ldr	r3, [r7, #8]
 810328e:	4619      	mov	r1, r3
 8103290:	2008      	movs	r0, #8
 8103292:	f7fd fce1 	bl	8100c58 <_ZnwjPv>
 8103296:	4604      	mov	r4, r0
 8103298:	6878      	ldr	r0, [r7, #4]
 810329a:	f7ff f9a2 	bl	81025e2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810329e:	6838      	ldr	r0, [r7, #0]
 81032a0:	f7ff f9aa 	bl	81025f8 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81032a4:	4602      	mov	r2, r0
 81032a6:	f107 0314 	add.w	r3, r7, #20
 81032aa:	4611      	mov	r1, r2
 81032ac:	4618      	mov	r0, r3
 81032ae:	f7ff ffd6 	bl	810325e <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 81032b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81032b4:	f7ff f9ab 	bl	810260e <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81032b8:	f107 0214 	add.w	r2, r7, #20
 81032bc:	4633      	mov	r3, r6
 81032be:	4629      	mov	r1, r5
 81032c0:	4620      	mov	r0, r4
 81032c2:	f000 f870 	bl	81033a6 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 81032c6:	bf00      	nop
 81032c8:	371c      	adds	r7, #28
 81032ca:	46bd      	mov	sp, r7
 81032cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

081032d0 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 81032d0:	b480      	push	{r7}
 81032d2:	b083      	sub	sp, #12
 81032d4:	af00      	add	r7, sp, #0
 81032d6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 81032d8:	4b03      	ldr	r3, [pc, #12]	@ (81032e8 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv+0x18>)
      }
 81032da:	4618      	mov	r0, r3
 81032dc:	370c      	adds	r7, #12
 81032de:	46bd      	mov	sp, r7
 81032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032e4:	4770      	bx	lr
 81032e6:	bf00      	nop
 81032e8:	05555555 	.word	0x05555555

081032ec <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 81032ec:	b580      	push	{r7, lr}
 81032ee:	b084      	sub	sp, #16
 81032f0:	af00      	add	r7, sp, #0
 81032f2:	60f8      	str	r0, [r7, #12]
 81032f4:	60b9      	str	r1, [r7, #8]
 81032f6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 81032f8:	68b8      	ldr	r0, [r7, #8]
 81032fa:	f7fe fbb8 	bl	8101a6e <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81032fe:	4603      	mov	r3, r0
 8103300:	781a      	ldrb	r2, [r3, #0]
 8103302:	68fb      	ldr	r3, [r7, #12]
 8103304:	701a      	strb	r2, [r3, #0]
 8103306:	6878      	ldr	r0, [r7, #4]
 8103308:	f7fe fbbc 	bl	8101a84 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810330c:	4603      	mov	r3, r0
 810330e:	681a      	ldr	r2, [r3, #0]
 8103310:	68fb      	ldr	r3, [r7, #12]
 8103312:	605a      	str	r2, [r3, #4]
 8103314:	68fb      	ldr	r3, [r7, #12]
 8103316:	4618      	mov	r0, r3
 8103318:	3710      	adds	r7, #16
 810331a:	46bd      	mov	sp, r7
 810331c:	bd80      	pop	{r7, pc}

0810331e <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 810331e:	b580      	push	{r7, lr}
 8103320:	b082      	sub	sp, #8
 8103322:	af00      	add	r7, sp, #0
 8103324:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8103326:	1d3b      	adds	r3, r7, #4
 8103328:	4618      	mov	r0, r3
 810332a:	f000 f850 	bl	81033ce <_ZNKSt13move_iteratorIP8SMessageE4baseEv>
 810332e:	4603      	mov	r3, r0
 8103330:	4618      	mov	r0, r3
 8103332:	f000 f858 	bl	81033e6 <_ZSt12__miter_baseIP8SMessageET_S2_>
 8103336:	4603      	mov	r3, r0
 8103338:	4618      	mov	r0, r3
 810333a:	3708      	adds	r7, #8
 810333c:	46bd      	mov	sp, r7
 810333e:	bd80      	pop	{r7, pc}

08103340 <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8103340:	b5b0      	push	{r4, r5, r7, lr}
 8103342:	b084      	sub	sp, #16
 8103344:	af00      	add	r7, sp, #0
 8103346:	60f8      	str	r0, [r7, #12]
 8103348:	60b9      	str	r1, [r7, #8]
 810334a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 810334c:	68f8      	ldr	r0, [r7, #12]
 810334e:	f7ff fe9b 	bl	8103088 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8103352:	4604      	mov	r4, r0
 8103354:	68b8      	ldr	r0, [r7, #8]
 8103356:	f7ff fe97 	bl	8103088 <_ZSt12__niter_baseIP8SMessageET_S2_>
 810335a:	4605      	mov	r5, r0
 810335c:	687b      	ldr	r3, [r7, #4]
 810335e:	4618      	mov	r0, r3
 8103360:	f7ff fe92 	bl	8103088 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8103364:	4603      	mov	r3, r0
 8103366:	461a      	mov	r2, r3
 8103368:	4629      	mov	r1, r5
 810336a:	4620      	mov	r0, r4
 810336c:	f000 f846 	bl	81033fc <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 8103370:	4602      	mov	r2, r0
 8103372:	1d3b      	adds	r3, r7, #4
 8103374:	4611      	mov	r1, r2
 8103376:	4618      	mov	r0, r3
 8103378:	f000 f850 	bl	810341c <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>
 810337c:	4603      	mov	r3, r0
    }
 810337e:	4618      	mov	r0, r3
 8103380:	3710      	adds	r7, #16
 8103382:	46bd      	mov	sp, r7
 8103384:	bdb0      	pop	{r4, r5, r7, pc}

08103386 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8103386:	b480      	push	{r7}
 8103388:	b083      	sub	sp, #12
 810338a:	af00      	add	r7, sp, #0
 810338c:	6078      	str	r0, [r7, #4]
 810338e:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8103390:	687b      	ldr	r3, [r7, #4]
 8103392:	683a      	ldr	r2, [r7, #0]
 8103394:	6812      	ldr	r2, [r2, #0]
 8103396:	601a      	str	r2, [r3, #0]
      { }
 8103398:	687b      	ldr	r3, [r7, #4]
 810339a:	4618      	mov	r0, r3
 810339c:	370c      	adds	r7, #12
 810339e:	46bd      	mov	sp, r7
 81033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033a4:	4770      	bx	lr

081033a6 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 81033a6:	b5b0      	push	{r4, r5, r7, lr}
 81033a8:	b086      	sub	sp, #24
 81033aa:	af02      	add	r7, sp, #8
 81033ac:	60f8      	str	r0, [r7, #12]
 81033ae:	7239      	strb	r1, [r7, #8]
 81033b0:	607a      	str	r2, [r7, #4]
 81033b2:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 81033b4:	463a      	mov	r2, r7
 81033b6:	f88d 4000 	strb.w	r4, [sp]
 81033ba:	462b      	mov	r3, r5
 81033bc:	6879      	ldr	r1, [r7, #4]
 81033be:	68f8      	ldr	r0, [r7, #12]
 81033c0:	f000 f838 	bl	8103434 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 81033c4:	68fb      	ldr	r3, [r7, #12]
 81033c6:	4618      	mov	r0, r3
 81033c8:	3710      	adds	r7, #16
 81033ca:	46bd      	mov	sp, r7
 81033cc:	bdb0      	pop	{r4, r5, r7, pc}

081033ce <_ZNKSt13move_iteratorIP8SMessageE4baseEv>:
      base() const
 81033ce:	b480      	push	{r7}
 81033d0:	b083      	sub	sp, #12
 81033d2:	af00      	add	r7, sp, #0
 81033d4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 81033d6:	687b      	ldr	r3, [r7, #4]
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	4618      	mov	r0, r3
 81033dc:	370c      	adds	r7, #12
 81033de:	46bd      	mov	sp, r7
 81033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033e4:	4770      	bx	lr

081033e6 <_ZSt12__miter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 81033e6:	b480      	push	{r7}
 81033e8:	b083      	sub	sp, #12
 81033ea:	af00      	add	r7, sp, #0
 81033ec:	6078      	str	r0, [r7, #4]
    { return __it; }
 81033ee:	687b      	ldr	r3, [r7, #4]
 81033f0:	4618      	mov	r0, r3
 81033f2:	370c      	adds	r7, #12
 81033f4:	46bd      	mov	sp, r7
 81033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033fa:	4770      	bx	lr

081033fc <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 81033fc:	b580      	push	{r7, lr}
 81033fe:	b084      	sub	sp, #16
 8103400:	af00      	add	r7, sp, #0
 8103402:	60f8      	str	r0, [r7, #12]
 8103404:	60b9      	str	r1, [r7, #8]
 8103406:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8103408:	687a      	ldr	r2, [r7, #4]
 810340a:	68b9      	ldr	r1, [r7, #8]
 810340c:	68f8      	ldr	r0, [r7, #12]
 810340e:	f000 f82b 	bl	8103468 <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 8103412:	4603      	mov	r3, r0
 8103414:	4618      	mov	r0, r3
 8103416:	3710      	adds	r7, #16
 8103418:	46bd      	mov	sp, r7
 810341a:	bd80      	pop	{r7, pc}

0810341c <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 810341c:	b480      	push	{r7}
 810341e:	b083      	sub	sp, #12
 8103420:	af00      	add	r7, sp, #0
 8103422:	6078      	str	r0, [r7, #4]
 8103424:	6039      	str	r1, [r7, #0]
    { return __res; }
 8103426:	683b      	ldr	r3, [r7, #0]
 8103428:	4618      	mov	r0, r3
 810342a:	370c      	adds	r7, #12
 810342c:	46bd      	mov	sp, r7
 810342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103432:	4770      	bx	lr

08103434 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8103434:	b580      	push	{r7, lr}
 8103436:	b084      	sub	sp, #16
 8103438:	af00      	add	r7, sp, #0
 810343a:	60f8      	str	r0, [r7, #12]
 810343c:	60b9      	str	r1, [r7, #8]
 810343e:	607a      	str	r2, [r7, #4]
 8103440:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8103442:	68b8      	ldr	r0, [r7, #8]
 8103444:	f000 f820 	bl	8103488 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8103448:	4603      	mov	r3, r0
 810344a:	4618      	mov	r0, r3
 810344c:	f000 f829 	bl	81034a2 <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>
 8103450:	4603      	mov	r3, r0
 8103452:	781a      	ldrb	r2, [r3, #0]
 8103454:	68fb      	ldr	r3, [r7, #12]
 8103456:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8103458:	68fb      	ldr	r3, [r7, #12]
 810345a:	2200      	movs	r2, #0
 810345c:	605a      	str	r2, [r3, #4]
      { }
 810345e:	68fb      	ldr	r3, [r7, #12]
 8103460:	4618      	mov	r0, r3
 8103462:	3710      	adds	r7, #16
 8103464:	46bd      	mov	sp, r7
 8103466:	bd80      	pop	{r7, pc}

08103468 <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8103468:	b580      	push	{r7, lr}
 810346a:	b084      	sub	sp, #16
 810346c:	af00      	add	r7, sp, #0
 810346e:	60f8      	str	r0, [r7, #12]
 8103470:	60b9      	str	r1, [r7, #8]
 8103472:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8103474:	687a      	ldr	r2, [r7, #4]
 8103476:	68b9      	ldr	r1, [r7, #8]
 8103478:	68f8      	ldr	r0, [r7, #12]
 810347a:	f000 f81d 	bl	81034b8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>
 810347e:	4603      	mov	r3, r0
    }
 8103480:	4618      	mov	r0, r3
 8103482:	3710      	adds	r7, #16
 8103484:	46bd      	mov	sp, r7
 8103486:	bd80      	pop	{r7, pc}

08103488 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8103488:	b580      	push	{r7, lr}
 810348a:	b082      	sub	sp, #8
 810348c:	af00      	add	r7, sp, #0
 810348e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	4618      	mov	r0, r3
 8103494:	f000 f83a 	bl	810350c <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8103498:	4603      	mov	r3, r0
 810349a:	4618      	mov	r0, r3
 810349c:	3708      	adds	r7, #8
 810349e:	46bd      	mov	sp, r7
 81034a0:	bd80      	pop	{r7, pc}

081034a2 <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81034a2:	b480      	push	{r7}
 81034a4:	b083      	sub	sp, #12
 81034a6:	af00      	add	r7, sp, #0
 81034a8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	4618      	mov	r0, r3
 81034ae:	370c      	adds	r7, #12
 81034b0:	46bd      	mov	sp, r7
 81034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034b6:	4770      	bx	lr

081034b8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 81034b8:	b580      	push	{r7, lr}
 81034ba:	b086      	sub	sp, #24
 81034bc:	af00      	add	r7, sp, #0
 81034be:	60f8      	str	r0, [r7, #12]
 81034c0:	60b9      	str	r1, [r7, #8]
 81034c2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 81034c4:	68ba      	ldr	r2, [r7, #8]
 81034c6:	68fb      	ldr	r3, [r7, #12]
 81034c8:	1ad3      	subs	r3, r2, r3
 81034ca:	10db      	asrs	r3, r3, #3
 81034cc:	4a0e      	ldr	r2, [pc, #56]	@ (8103508 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x50>)
 81034ce:	fb02 f303 	mul.w	r3, r2, r3
 81034d2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 81034d4:	697b      	ldr	r3, [r7, #20]
 81034d6:	2b00      	cmp	r3, #0
 81034d8:	d009      	beq.n	81034ee <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 81034da:	697a      	ldr	r2, [r7, #20]
 81034dc:	4613      	mov	r3, r2
 81034de:	005b      	lsls	r3, r3, #1
 81034e0:	4413      	add	r3, r2
 81034e2:	00db      	lsls	r3, r3, #3
 81034e4:	461a      	mov	r2, r3
 81034e6:	68f9      	ldr	r1, [r7, #12]
 81034e8:	6878      	ldr	r0, [r7, #4]
 81034ea:	f013 fa62 	bl	81169b2 <memmove>
	  return __result + _Num;
 81034ee:	697a      	ldr	r2, [r7, #20]
 81034f0:	4613      	mov	r3, r2
 81034f2:	005b      	lsls	r3, r3, #1
 81034f4:	4413      	add	r3, r2
 81034f6:	00db      	lsls	r3, r3, #3
 81034f8:	461a      	mov	r2, r3
 81034fa:	687b      	ldr	r3, [r7, #4]
 81034fc:	4413      	add	r3, r2
	}
 81034fe:	4618      	mov	r0, r3
 8103500:	3718      	adds	r7, #24
 8103502:	46bd      	mov	sp, r7
 8103504:	bd80      	pop	{r7, pc}
 8103506:	bf00      	nop
 8103508:	aaaaaaab 	.word	0xaaaaaaab

0810350c <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810350c:	b580      	push	{r7, lr}
 810350e:	b082      	sub	sp, #8
 8103510:	af00      	add	r7, sp, #0
 8103512:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8103514:	6878      	ldr	r0, [r7, #4]
 8103516:	f000 f805 	bl	8103524 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>
 810351a:	4603      	mov	r3, r0
 810351c:	4618      	mov	r0, r3
 810351e:	3708      	adds	r7, #8
 8103520:	46bd      	mov	sp, r7
 8103522:	bd80      	pop	{r7, pc}

08103524 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8103524:	b580      	push	{r7, lr}
 8103526:	b082      	sub	sp, #8
 8103528:	af00      	add	r7, sp, #0
 810352a:	6078      	str	r0, [r7, #4]
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	4618      	mov	r0, r3
 8103530:	f000 f805 	bl	810353e <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>
 8103534:	4603      	mov	r3, r0
 8103536:	4618      	mov	r0, r3
 8103538:	3708      	adds	r7, #8
 810353a:	46bd      	mov	sp, r7
 810353c:	bd80      	pop	{r7, pc}

0810353e <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 810353e:	b480      	push	{r7}
 8103540:	b083      	sub	sp, #12
 8103542:	af00      	add	r7, sp, #0
 8103544:	6078      	str	r0, [r7, #4]
 8103546:	687b      	ldr	r3, [r7, #4]
 8103548:	681b      	ldr	r3, [r3, #0]
 810354a:	4618      	mov	r0, r3
 810354c:	370c      	adds	r7, #12
 810354e:	46bd      	mov	sp, r7
 8103550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103554:	4770      	bx	lr
	...

08103558 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8103558:	b580      	push	{r7, lr}
 810355a:	b084      	sub	sp, #16
 810355c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 810355e:	4b92      	ldr	r3, [pc, #584]	@ (81037a8 <MX_LWIP_Init+0x250>)
 8103560:	22c0      	movs	r2, #192	@ 0xc0
 8103562:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8103564:	4b90      	ldr	r3, [pc, #576]	@ (81037a8 <MX_LWIP_Init+0x250>)
 8103566:	22a8      	movs	r2, #168	@ 0xa8
 8103568:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 810356a:	4b8f      	ldr	r3, [pc, #572]	@ (81037a8 <MX_LWIP_Init+0x250>)
 810356c:	2201      	movs	r2, #1
 810356e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 11;
 8103570:	4b8d      	ldr	r3, [pc, #564]	@ (81037a8 <MX_LWIP_Init+0x250>)
 8103572:	220b      	movs	r2, #11
 8103574:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8103576:	4b8d      	ldr	r3, [pc, #564]	@ (81037ac <MX_LWIP_Init+0x254>)
 8103578:	22ff      	movs	r2, #255	@ 0xff
 810357a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 810357c:	4b8b      	ldr	r3, [pc, #556]	@ (81037ac <MX_LWIP_Init+0x254>)
 810357e:	22ff      	movs	r2, #255	@ 0xff
 8103580:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8103582:	4b8a      	ldr	r3, [pc, #552]	@ (81037ac <MX_LWIP_Init+0x254>)
 8103584:	22ff      	movs	r2, #255	@ 0xff
 8103586:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8103588:	4b88      	ldr	r3, [pc, #544]	@ (81037ac <MX_LWIP_Init+0x254>)
 810358a:	2200      	movs	r2, #0
 810358c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 810358e:	4b88      	ldr	r3, [pc, #544]	@ (81037b0 <MX_LWIP_Init+0x258>)
 8103590:	2200      	movs	r2, #0
 8103592:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8103594:	4b86      	ldr	r3, [pc, #536]	@ (81037b0 <MX_LWIP_Init+0x258>)
 8103596:	2200      	movs	r2, #0
 8103598:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 810359a:	4b85      	ldr	r3, [pc, #532]	@ (81037b0 <MX_LWIP_Init+0x258>)
 810359c:	2200      	movs	r2, #0
 810359e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 81035a0:	4b83      	ldr	r3, [pc, #524]	@ (81037b0 <MX_LWIP_Init+0x258>)
 81035a2:	2200      	movs	r2, #0
 81035a4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 81035a6:	2100      	movs	r1, #0
 81035a8:	2000      	movs	r0, #0
 81035aa:	f012 f81f 	bl	81155ec <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 81035ae:	4b7e      	ldr	r3, [pc, #504]	@ (81037a8 <MX_LWIP_Init+0x250>)
 81035b0:	781b      	ldrb	r3, [r3, #0]
 81035b2:	061a      	lsls	r2, r3, #24
 81035b4:	4b7c      	ldr	r3, [pc, #496]	@ (81037a8 <MX_LWIP_Init+0x250>)
 81035b6:	785b      	ldrb	r3, [r3, #1]
 81035b8:	041b      	lsls	r3, r3, #16
 81035ba:	431a      	orrs	r2, r3
 81035bc:	4b7a      	ldr	r3, [pc, #488]	@ (81037a8 <MX_LWIP_Init+0x250>)
 81035be:	789b      	ldrb	r3, [r3, #2]
 81035c0:	021b      	lsls	r3, r3, #8
 81035c2:	4313      	orrs	r3, r2
 81035c4:	4a78      	ldr	r2, [pc, #480]	@ (81037a8 <MX_LWIP_Init+0x250>)
 81035c6:	78d2      	ldrb	r2, [r2, #3]
 81035c8:	4313      	orrs	r3, r2
 81035ca:	061a      	lsls	r2, r3, #24
 81035cc:	4b76      	ldr	r3, [pc, #472]	@ (81037a8 <MX_LWIP_Init+0x250>)
 81035ce:	781b      	ldrb	r3, [r3, #0]
 81035d0:	0619      	lsls	r1, r3, #24
 81035d2:	4b75      	ldr	r3, [pc, #468]	@ (81037a8 <MX_LWIP_Init+0x250>)
 81035d4:	785b      	ldrb	r3, [r3, #1]
 81035d6:	041b      	lsls	r3, r3, #16
 81035d8:	4319      	orrs	r1, r3
 81035da:	4b73      	ldr	r3, [pc, #460]	@ (81037a8 <MX_LWIP_Init+0x250>)
 81035dc:	789b      	ldrb	r3, [r3, #2]
 81035de:	021b      	lsls	r3, r3, #8
 81035e0:	430b      	orrs	r3, r1
 81035e2:	4971      	ldr	r1, [pc, #452]	@ (81037a8 <MX_LWIP_Init+0x250>)
 81035e4:	78c9      	ldrb	r1, [r1, #3]
 81035e6:	430b      	orrs	r3, r1
 81035e8:	021b      	lsls	r3, r3, #8
 81035ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 81035ee:	431a      	orrs	r2, r3
 81035f0:	4b6d      	ldr	r3, [pc, #436]	@ (81037a8 <MX_LWIP_Init+0x250>)
 81035f2:	781b      	ldrb	r3, [r3, #0]
 81035f4:	0619      	lsls	r1, r3, #24
 81035f6:	4b6c      	ldr	r3, [pc, #432]	@ (81037a8 <MX_LWIP_Init+0x250>)
 81035f8:	785b      	ldrb	r3, [r3, #1]
 81035fa:	041b      	lsls	r3, r3, #16
 81035fc:	4319      	orrs	r1, r3
 81035fe:	4b6a      	ldr	r3, [pc, #424]	@ (81037a8 <MX_LWIP_Init+0x250>)
 8103600:	789b      	ldrb	r3, [r3, #2]
 8103602:	021b      	lsls	r3, r3, #8
 8103604:	430b      	orrs	r3, r1
 8103606:	4968      	ldr	r1, [pc, #416]	@ (81037a8 <MX_LWIP_Init+0x250>)
 8103608:	78c9      	ldrb	r1, [r1, #3]
 810360a:	430b      	orrs	r3, r1
 810360c:	0a1b      	lsrs	r3, r3, #8
 810360e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8103612:	431a      	orrs	r2, r3
 8103614:	4b64      	ldr	r3, [pc, #400]	@ (81037a8 <MX_LWIP_Init+0x250>)
 8103616:	781b      	ldrb	r3, [r3, #0]
 8103618:	0619      	lsls	r1, r3, #24
 810361a:	4b63      	ldr	r3, [pc, #396]	@ (81037a8 <MX_LWIP_Init+0x250>)
 810361c:	785b      	ldrb	r3, [r3, #1]
 810361e:	041b      	lsls	r3, r3, #16
 8103620:	4319      	orrs	r1, r3
 8103622:	4b61      	ldr	r3, [pc, #388]	@ (81037a8 <MX_LWIP_Init+0x250>)
 8103624:	789b      	ldrb	r3, [r3, #2]
 8103626:	021b      	lsls	r3, r3, #8
 8103628:	430b      	orrs	r3, r1
 810362a:	495f      	ldr	r1, [pc, #380]	@ (81037a8 <MX_LWIP_Init+0x250>)
 810362c:	78c9      	ldrb	r1, [r1, #3]
 810362e:	430b      	orrs	r3, r1
 8103630:	0e1b      	lsrs	r3, r3, #24
 8103632:	4313      	orrs	r3, r2
 8103634:	4a5f      	ldr	r2, [pc, #380]	@ (81037b4 <MX_LWIP_Init+0x25c>)
 8103636:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8103638:	4b5c      	ldr	r3, [pc, #368]	@ (81037ac <MX_LWIP_Init+0x254>)
 810363a:	781b      	ldrb	r3, [r3, #0]
 810363c:	061a      	lsls	r2, r3, #24
 810363e:	4b5b      	ldr	r3, [pc, #364]	@ (81037ac <MX_LWIP_Init+0x254>)
 8103640:	785b      	ldrb	r3, [r3, #1]
 8103642:	041b      	lsls	r3, r3, #16
 8103644:	431a      	orrs	r2, r3
 8103646:	4b59      	ldr	r3, [pc, #356]	@ (81037ac <MX_LWIP_Init+0x254>)
 8103648:	789b      	ldrb	r3, [r3, #2]
 810364a:	021b      	lsls	r3, r3, #8
 810364c:	4313      	orrs	r3, r2
 810364e:	4a57      	ldr	r2, [pc, #348]	@ (81037ac <MX_LWIP_Init+0x254>)
 8103650:	78d2      	ldrb	r2, [r2, #3]
 8103652:	4313      	orrs	r3, r2
 8103654:	061a      	lsls	r2, r3, #24
 8103656:	4b55      	ldr	r3, [pc, #340]	@ (81037ac <MX_LWIP_Init+0x254>)
 8103658:	781b      	ldrb	r3, [r3, #0]
 810365a:	0619      	lsls	r1, r3, #24
 810365c:	4b53      	ldr	r3, [pc, #332]	@ (81037ac <MX_LWIP_Init+0x254>)
 810365e:	785b      	ldrb	r3, [r3, #1]
 8103660:	041b      	lsls	r3, r3, #16
 8103662:	4319      	orrs	r1, r3
 8103664:	4b51      	ldr	r3, [pc, #324]	@ (81037ac <MX_LWIP_Init+0x254>)
 8103666:	789b      	ldrb	r3, [r3, #2]
 8103668:	021b      	lsls	r3, r3, #8
 810366a:	430b      	orrs	r3, r1
 810366c:	494f      	ldr	r1, [pc, #316]	@ (81037ac <MX_LWIP_Init+0x254>)
 810366e:	78c9      	ldrb	r1, [r1, #3]
 8103670:	430b      	orrs	r3, r1
 8103672:	021b      	lsls	r3, r3, #8
 8103674:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8103678:	431a      	orrs	r2, r3
 810367a:	4b4c      	ldr	r3, [pc, #304]	@ (81037ac <MX_LWIP_Init+0x254>)
 810367c:	781b      	ldrb	r3, [r3, #0]
 810367e:	0619      	lsls	r1, r3, #24
 8103680:	4b4a      	ldr	r3, [pc, #296]	@ (81037ac <MX_LWIP_Init+0x254>)
 8103682:	785b      	ldrb	r3, [r3, #1]
 8103684:	041b      	lsls	r3, r3, #16
 8103686:	4319      	orrs	r1, r3
 8103688:	4b48      	ldr	r3, [pc, #288]	@ (81037ac <MX_LWIP_Init+0x254>)
 810368a:	789b      	ldrb	r3, [r3, #2]
 810368c:	021b      	lsls	r3, r3, #8
 810368e:	430b      	orrs	r3, r1
 8103690:	4946      	ldr	r1, [pc, #280]	@ (81037ac <MX_LWIP_Init+0x254>)
 8103692:	78c9      	ldrb	r1, [r1, #3]
 8103694:	430b      	orrs	r3, r1
 8103696:	0a1b      	lsrs	r3, r3, #8
 8103698:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 810369c:	431a      	orrs	r2, r3
 810369e:	4b43      	ldr	r3, [pc, #268]	@ (81037ac <MX_LWIP_Init+0x254>)
 81036a0:	781b      	ldrb	r3, [r3, #0]
 81036a2:	0619      	lsls	r1, r3, #24
 81036a4:	4b41      	ldr	r3, [pc, #260]	@ (81037ac <MX_LWIP_Init+0x254>)
 81036a6:	785b      	ldrb	r3, [r3, #1]
 81036a8:	041b      	lsls	r3, r3, #16
 81036aa:	4319      	orrs	r1, r3
 81036ac:	4b3f      	ldr	r3, [pc, #252]	@ (81037ac <MX_LWIP_Init+0x254>)
 81036ae:	789b      	ldrb	r3, [r3, #2]
 81036b0:	021b      	lsls	r3, r3, #8
 81036b2:	430b      	orrs	r3, r1
 81036b4:	493d      	ldr	r1, [pc, #244]	@ (81037ac <MX_LWIP_Init+0x254>)
 81036b6:	78c9      	ldrb	r1, [r1, #3]
 81036b8:	430b      	orrs	r3, r1
 81036ba:	0e1b      	lsrs	r3, r3, #24
 81036bc:	4313      	orrs	r3, r2
 81036be:	4a3e      	ldr	r2, [pc, #248]	@ (81037b8 <MX_LWIP_Init+0x260>)
 81036c0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 81036c2:	4b3b      	ldr	r3, [pc, #236]	@ (81037b0 <MX_LWIP_Init+0x258>)
 81036c4:	781b      	ldrb	r3, [r3, #0]
 81036c6:	061a      	lsls	r2, r3, #24
 81036c8:	4b39      	ldr	r3, [pc, #228]	@ (81037b0 <MX_LWIP_Init+0x258>)
 81036ca:	785b      	ldrb	r3, [r3, #1]
 81036cc:	041b      	lsls	r3, r3, #16
 81036ce:	431a      	orrs	r2, r3
 81036d0:	4b37      	ldr	r3, [pc, #220]	@ (81037b0 <MX_LWIP_Init+0x258>)
 81036d2:	789b      	ldrb	r3, [r3, #2]
 81036d4:	021b      	lsls	r3, r3, #8
 81036d6:	4313      	orrs	r3, r2
 81036d8:	4a35      	ldr	r2, [pc, #212]	@ (81037b0 <MX_LWIP_Init+0x258>)
 81036da:	78d2      	ldrb	r2, [r2, #3]
 81036dc:	4313      	orrs	r3, r2
 81036de:	061a      	lsls	r2, r3, #24
 81036e0:	4b33      	ldr	r3, [pc, #204]	@ (81037b0 <MX_LWIP_Init+0x258>)
 81036e2:	781b      	ldrb	r3, [r3, #0]
 81036e4:	0619      	lsls	r1, r3, #24
 81036e6:	4b32      	ldr	r3, [pc, #200]	@ (81037b0 <MX_LWIP_Init+0x258>)
 81036e8:	785b      	ldrb	r3, [r3, #1]
 81036ea:	041b      	lsls	r3, r3, #16
 81036ec:	4319      	orrs	r1, r3
 81036ee:	4b30      	ldr	r3, [pc, #192]	@ (81037b0 <MX_LWIP_Init+0x258>)
 81036f0:	789b      	ldrb	r3, [r3, #2]
 81036f2:	021b      	lsls	r3, r3, #8
 81036f4:	430b      	orrs	r3, r1
 81036f6:	492e      	ldr	r1, [pc, #184]	@ (81037b0 <MX_LWIP_Init+0x258>)
 81036f8:	78c9      	ldrb	r1, [r1, #3]
 81036fa:	430b      	orrs	r3, r1
 81036fc:	021b      	lsls	r3, r3, #8
 81036fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8103702:	431a      	orrs	r2, r3
 8103704:	4b2a      	ldr	r3, [pc, #168]	@ (81037b0 <MX_LWIP_Init+0x258>)
 8103706:	781b      	ldrb	r3, [r3, #0]
 8103708:	0619      	lsls	r1, r3, #24
 810370a:	4b29      	ldr	r3, [pc, #164]	@ (81037b0 <MX_LWIP_Init+0x258>)
 810370c:	785b      	ldrb	r3, [r3, #1]
 810370e:	041b      	lsls	r3, r3, #16
 8103710:	4319      	orrs	r1, r3
 8103712:	4b27      	ldr	r3, [pc, #156]	@ (81037b0 <MX_LWIP_Init+0x258>)
 8103714:	789b      	ldrb	r3, [r3, #2]
 8103716:	021b      	lsls	r3, r3, #8
 8103718:	430b      	orrs	r3, r1
 810371a:	4925      	ldr	r1, [pc, #148]	@ (81037b0 <MX_LWIP_Init+0x258>)
 810371c:	78c9      	ldrb	r1, [r1, #3]
 810371e:	430b      	orrs	r3, r1
 8103720:	0a1b      	lsrs	r3, r3, #8
 8103722:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8103726:	431a      	orrs	r2, r3
 8103728:	4b21      	ldr	r3, [pc, #132]	@ (81037b0 <MX_LWIP_Init+0x258>)
 810372a:	781b      	ldrb	r3, [r3, #0]
 810372c:	0619      	lsls	r1, r3, #24
 810372e:	4b20      	ldr	r3, [pc, #128]	@ (81037b0 <MX_LWIP_Init+0x258>)
 8103730:	785b      	ldrb	r3, [r3, #1]
 8103732:	041b      	lsls	r3, r3, #16
 8103734:	4319      	orrs	r1, r3
 8103736:	4b1e      	ldr	r3, [pc, #120]	@ (81037b0 <MX_LWIP_Init+0x258>)
 8103738:	789b      	ldrb	r3, [r3, #2]
 810373a:	021b      	lsls	r3, r3, #8
 810373c:	430b      	orrs	r3, r1
 810373e:	491c      	ldr	r1, [pc, #112]	@ (81037b0 <MX_LWIP_Init+0x258>)
 8103740:	78c9      	ldrb	r1, [r1, #3]
 8103742:	430b      	orrs	r3, r1
 8103744:	0e1b      	lsrs	r3, r3, #24
 8103746:	4313      	orrs	r3, r2
 8103748:	4a1c      	ldr	r2, [pc, #112]	@ (81037bc <MX_LWIP_Init+0x264>)
 810374a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 810374c:	4b1c      	ldr	r3, [pc, #112]	@ (81037c0 <MX_LWIP_Init+0x268>)
 810374e:	9302      	str	r3, [sp, #8]
 8103750:	4b1c      	ldr	r3, [pc, #112]	@ (81037c4 <MX_LWIP_Init+0x26c>)
 8103752:	9301      	str	r3, [sp, #4]
 8103754:	2300      	movs	r3, #0
 8103756:	9300      	str	r3, [sp, #0]
 8103758:	4b18      	ldr	r3, [pc, #96]	@ (81037bc <MX_LWIP_Init+0x264>)
 810375a:	4a17      	ldr	r2, [pc, #92]	@ (81037b8 <MX_LWIP_Init+0x260>)
 810375c:	4915      	ldr	r1, [pc, #84]	@ (81037b4 <MX_LWIP_Init+0x25c>)
 810375e:	481a      	ldr	r0, [pc, #104]	@ (81037c8 <MX_LWIP_Init+0x270>)
 8103760:	f00b faa0 	bl	810eca4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8103764:	4818      	ldr	r0, [pc, #96]	@ (81037c8 <MX_LWIP_Init+0x270>)
 8103766:	f00b fc4f 	bl	810f008 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 810376a:	4817      	ldr	r0, [pc, #92]	@ (81037c8 <MX_LWIP_Init+0x270>)
 810376c:	f00b fc5c 	bl	810f028 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8103770:	4916      	ldr	r1, [pc, #88]	@ (81037cc <MX_LWIP_Init+0x274>)
 8103772:	4815      	ldr	r0, [pc, #84]	@ (81037c8 <MX_LWIP_Init+0x270>)
 8103774:	f00b fd5a 	bl	810f22c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8103778:	2224      	movs	r2, #36	@ 0x24
 810377a:	2100      	movs	r1, #0
 810377c:	4814      	ldr	r0, [pc, #80]	@ (81037d0 <MX_LWIP_Init+0x278>)
 810377e:	f013 f932 	bl	81169e6 <memset>
  attributes.name = "EthLink";
 8103782:	4b13      	ldr	r3, [pc, #76]	@ (81037d0 <MX_LWIP_Init+0x278>)
 8103784:	4a13      	ldr	r2, [pc, #76]	@ (81037d4 <MX_LWIP_Init+0x27c>)
 8103786:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8103788:	4b11      	ldr	r3, [pc, #68]	@ (81037d0 <MX_LWIP_Init+0x278>)
 810378a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810378e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8103790:	4b0f      	ldr	r3, [pc, #60]	@ (81037d0 <MX_LWIP_Init+0x278>)
 8103792:	2210      	movs	r2, #16
 8103794:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8103796:	4a0e      	ldr	r2, [pc, #56]	@ (81037d0 <MX_LWIP_Init+0x278>)
 8103798:	490b      	ldr	r1, [pc, #44]	@ (81037c8 <MX_LWIP_Init+0x270>)
 810379a:	480f      	ldr	r0, [pc, #60]	@ (81037d8 <MX_LWIP_Init+0x280>)
 810379c:	f003 fdbf 	bl	810731e <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 81037a0:	bf00      	nop
 81037a2:	46bd      	mov	sp, r7
 81037a4:	bd80      	pop	{r7, pc}
 81037a6:	bf00      	nop
 81037a8:	10000154 	.word	0x10000154
 81037ac:	10000158 	.word	0x10000158
 81037b0:	1000015c 	.word	0x1000015c
 81037b4:	10000148 	.word	0x10000148
 81037b8:	1000014c 	.word	0x1000014c
 81037bc:	10000150 	.word	0x10000150
 81037c0:	08115529 	.word	0x08115529
 81037c4:	08103cc5 	.word	0x08103cc5
 81037c8:	10000114 	.word	0x10000114
 81037cc:	081037dd 	.word	0x081037dd
 81037d0:	10000160 	.word	0x10000160
 81037d4:	081176dc 	.word	0x081176dc
 81037d8:	08104049 	.word	0x08104049

081037dc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 81037dc:	b480      	push	{r7}
 81037de:	b083      	sub	sp, #12
 81037e0:	af00      	add	r7, sp, #0
 81037e2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 81037e4:	bf00      	nop
 81037e6:	370c      	adds	r7, #12
 81037e8:	46bd      	mov	sp, r7
 81037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037ee:	4770      	bx	lr

081037f0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 81037f0:	b580      	push	{r7, lr}
 81037f2:	b082      	sub	sp, #8
 81037f4:	af00      	add	r7, sp, #0
 81037f6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 81037f8:	4b04      	ldr	r3, [pc, #16]	@ (810380c <HAL_ETH_RxCpltCallback+0x1c>)
 81037fa:	681b      	ldr	r3, [r3, #0]
 81037fc:	4618      	mov	r0, r3
 81037fe:	f004 f825 	bl	810784c <osSemaphoreRelease>
}
 8103802:	bf00      	nop
 8103804:	3708      	adds	r7, #8
 8103806:	46bd      	mov	sp, r7
 8103808:	bd80      	pop	{r7, pc}
 810380a:	bf00      	nop
 810380c:	1000018c 	.word	0x1000018c

08103810 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8103810:	b580      	push	{r7, lr}
 8103812:	b082      	sub	sp, #8
 8103814:	af00      	add	r7, sp, #0
 8103816:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8103818:	4b04      	ldr	r3, [pc, #16]	@ (810382c <HAL_ETH_TxCpltCallback+0x1c>)
 810381a:	681b      	ldr	r3, [r3, #0]
 810381c:	4618      	mov	r0, r3
 810381e:	f004 f815 	bl	810784c <osSemaphoreRelease>
}
 8103822:	bf00      	nop
 8103824:	3708      	adds	r7, #8
 8103826:	46bd      	mov	sp, r7
 8103828:	bd80      	pop	{r7, pc}
 810382a:	bf00      	nop
 810382c:	10000190 	.word	0x10000190

08103830 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8103830:	b580      	push	{r7, lr}
 8103832:	b082      	sub	sp, #8
 8103834:	af00      	add	r7, sp, #0
 8103836:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8103838:	6878      	ldr	r0, [r7, #4]
 810383a:	f001 ffd2 	bl	81057e2 <HAL_ETH_GetDMAError>
 810383e:	4603      	mov	r3, r0
 8103840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103844:	2b80      	cmp	r3, #128	@ 0x80
 8103846:	d104      	bne.n	8103852 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8103848:	4b04      	ldr	r3, [pc, #16]	@ (810385c <HAL_ETH_ErrorCallback+0x2c>)
 810384a:	681b      	ldr	r3, [r3, #0]
 810384c:	4618      	mov	r0, r3
 810384e:	f003 fffd 	bl	810784c <osSemaphoreRelease>
  }
}
 8103852:	bf00      	nop
 8103854:	3708      	adds	r7, #8
 8103856:	46bd      	mov	sp, r7
 8103858:	bd80      	pop	{r7, pc}
 810385a:	bf00      	nop
 810385c:	1000018c 	.word	0x1000018c

08103860 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8103860:	b580      	push	{r7, lr}
 8103862:	b0aa      	sub	sp, #168	@ 0xa8
 8103864:	af00      	add	r7, sp, #0
 8103866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8103868:	2300      	movs	r3, #0
 810386a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 810386e:	2300      	movs	r3, #0
 8103870:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8103874:	2300      	movs	r3, #0
 8103876:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 810387a:	f107 0310 	add.w	r3, r7, #16
 810387e:	2264      	movs	r2, #100	@ 0x64
 8103880:	2100      	movs	r1, #0
 8103882:	4618      	mov	r0, r3
 8103884:	f013 f8af 	bl	81169e6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8103888:	4b89      	ldr	r3, [pc, #548]	@ (8103ab0 <low_level_init+0x250>)
 810388a:	4a8a      	ldr	r2, [pc, #552]	@ (8103ab4 <low_level_init+0x254>)
 810388c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 810388e:	2300      	movs	r3, #0
 8103890:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8103892:	2380      	movs	r3, #128	@ 0x80
 8103894:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8103896:	23e1      	movs	r3, #225	@ 0xe1
 8103898:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 810389a:	2300      	movs	r3, #0
 810389c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 810389e:	2300      	movs	r3, #0
 81038a0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 81038a2:	2300      	movs	r3, #0
 81038a4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 81038a6:	4a82      	ldr	r2, [pc, #520]	@ (8103ab0 <low_level_init+0x250>)
 81038a8:	f107 0308 	add.w	r3, r7, #8
 81038ac:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 81038ae:	4b80      	ldr	r3, [pc, #512]	@ (8103ab0 <low_level_init+0x250>)
 81038b0:	2200      	movs	r2, #0
 81038b2:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 81038b4:	4b7e      	ldr	r3, [pc, #504]	@ (8103ab0 <low_level_init+0x250>)
 81038b6:	4a80      	ldr	r2, [pc, #512]	@ (8103ab8 <low_level_init+0x258>)
 81038b8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 81038ba:	4b7d      	ldr	r3, [pc, #500]	@ (8103ab0 <low_level_init+0x250>)
 81038bc:	4a7f      	ldr	r2, [pc, #508]	@ (8103abc <low_level_init+0x25c>)
 81038be:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 81038c0:	4b7b      	ldr	r3, [pc, #492]	@ (8103ab0 <low_level_init+0x250>)
 81038c2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81038c6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 81038c8:	4879      	ldr	r0, [pc, #484]	@ (8103ab0 <low_level_init+0x250>)
 81038ca:	f000 ff99 	bl	8104800 <HAL_ETH_Init>
 81038ce:	4603      	mov	r3, r0
 81038d0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 81038d4:	2238      	movs	r2, #56	@ 0x38
 81038d6:	2100      	movs	r1, #0
 81038d8:	4879      	ldr	r0, [pc, #484]	@ (8103ac0 <low_level_init+0x260>)
 81038da:	f013 f884 	bl	81169e6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 81038de:	4b78      	ldr	r3, [pc, #480]	@ (8103ac0 <low_level_init+0x260>)
 81038e0:	2221      	movs	r2, #33	@ 0x21
 81038e2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 81038e4:	4b76      	ldr	r3, [pc, #472]	@ (8103ac0 <low_level_init+0x260>)
 81038e6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 81038ea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 81038ec:	4b74      	ldr	r3, [pc, #464]	@ (8103ac0 <low_level_init+0x260>)
 81038ee:	2200      	movs	r2, #0
 81038f0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 81038f2:	4874      	ldr	r0, [pc, #464]	@ (8103ac4 <low_level_init+0x264>)
 81038f4:	f00b f890 	bl	810ea18 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 81038f8:	687b      	ldr	r3, [r7, #4]
 81038fa:	2206      	movs	r2, #6
 81038fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8103900:	4b6b      	ldr	r3, [pc, #428]	@ (8103ab0 <low_level_init+0x250>)
 8103902:	685b      	ldr	r3, [r3, #4]
 8103904:	781a      	ldrb	r2, [r3, #0]
 8103906:	687b      	ldr	r3, [r7, #4]
 8103908:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 810390c:	4b68      	ldr	r3, [pc, #416]	@ (8103ab0 <low_level_init+0x250>)
 810390e:	685b      	ldr	r3, [r3, #4]
 8103910:	785a      	ldrb	r2, [r3, #1]
 8103912:	687b      	ldr	r3, [r7, #4]
 8103914:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8103918:	4b65      	ldr	r3, [pc, #404]	@ (8103ab0 <low_level_init+0x250>)
 810391a:	685b      	ldr	r3, [r3, #4]
 810391c:	789a      	ldrb	r2, [r3, #2]
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8103924:	4b62      	ldr	r3, [pc, #392]	@ (8103ab0 <low_level_init+0x250>)
 8103926:	685b      	ldr	r3, [r3, #4]
 8103928:	78da      	ldrb	r2, [r3, #3]
 810392a:	687b      	ldr	r3, [r7, #4]
 810392c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8103930:	4b5f      	ldr	r3, [pc, #380]	@ (8103ab0 <low_level_init+0x250>)
 8103932:	685b      	ldr	r3, [r3, #4]
 8103934:	791a      	ldrb	r2, [r3, #4]
 8103936:	687b      	ldr	r3, [r7, #4]
 8103938:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 810393c:	4b5c      	ldr	r3, [pc, #368]	@ (8103ab0 <low_level_init+0x250>)
 810393e:	685b      	ldr	r3, [r3, #4]
 8103940:	795a      	ldrb	r2, [r3, #5]
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8103948:	687b      	ldr	r3, [r7, #4]
 810394a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 810394e:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8103950:	687b      	ldr	r3, [r7, #4]
 8103952:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8103956:	f043 030a 	orr.w	r3, r3, #10
 810395a:	b2da      	uxtb	r2, r3
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8103962:	2200      	movs	r2, #0
 8103964:	2100      	movs	r1, #0
 8103966:	2001      	movs	r0, #1
 8103968:	f003 fe94 	bl	8107694 <osSemaphoreNew>
 810396c:	4603      	mov	r3, r0
 810396e:	4a56      	ldr	r2, [pc, #344]	@ (8103ac8 <low_level_init+0x268>)
 8103970:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8103972:	2200      	movs	r2, #0
 8103974:	2100      	movs	r1, #0
 8103976:	2001      	movs	r0, #1
 8103978:	f003 fe8c 	bl	8107694 <osSemaphoreNew>
 810397c:	4603      	mov	r3, r0
 810397e:	4a53      	ldr	r2, [pc, #332]	@ (8103acc <low_level_init+0x26c>)
 8103980:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8103982:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8103986:	2224      	movs	r2, #36	@ 0x24
 8103988:	2100      	movs	r1, #0
 810398a:	4618      	mov	r0, r3
 810398c:	f013 f82b 	bl	81169e6 <memset>
  attributes.name = "EthIf";
 8103990:	4b4f      	ldr	r3, [pc, #316]	@ (8103ad0 <low_level_init+0x270>)
 8103992:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8103994:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8103998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 810399c:	2330      	movs	r3, #48	@ 0x30
 810399e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 81039a2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 81039a6:	461a      	mov	r2, r3
 81039a8:	6879      	ldr	r1, [r7, #4]
 81039aa:	484a      	ldr	r0, [pc, #296]	@ (8103ad4 <low_level_init+0x274>)
 81039ac:	f003 fcb7 	bl	810731e <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 81039b0:	4949      	ldr	r1, [pc, #292]	@ (8103ad8 <low_level_init+0x278>)
 81039b2:	484a      	ldr	r0, [pc, #296]	@ (8103adc <low_level_init+0x27c>)
 81039b4:	f000 fc7b 	bl	81042ae <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 81039b8:	4848      	ldr	r0, [pc, #288]	@ (8103adc <low_level_init+0x27c>)
 81039ba:	f000 fcaa 	bl	8104312 <LAN8742_Init>
 81039be:	4603      	mov	r3, r0
 81039c0:	2b00      	cmp	r3, #0
 81039c2:	d006      	beq.n	81039d2 <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 81039c4:	6878      	ldr	r0, [r7, #4]
 81039c6:	f00b fc01 	bl	810f1cc <netif_set_link_down>
    netif_set_down(netif);
 81039ca:	6878      	ldr	r0, [r7, #4]
 81039cc:	f00b fb98 	bl	810f100 <netif_set_down>
 81039d0:	e06b      	b.n	8103aaa <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 81039d2:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 81039d6:	2b00      	cmp	r3, #0
 81039d8:	d165      	bne.n	8103aa6 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 81039da:	4840      	ldr	r0, [pc, #256]	@ (8103adc <low_level_init+0x27c>)
 81039dc:	f000 fce6 	bl	81043ac <LAN8742_GetLinkState>
 81039e0:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 81039e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 81039e8:	2b01      	cmp	r3, #1
 81039ea:	dc06      	bgt.n	81039fa <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 81039ec:	6878      	ldr	r0, [r7, #4]
 81039ee:	f00b fbed 	bl	810f1cc <netif_set_link_down>
      netif_set_down(netif);
 81039f2:	6878      	ldr	r0, [r7, #4]
 81039f4:	f00b fb84 	bl	810f100 <netif_set_down>
 81039f8:	e057      	b.n	8103aaa <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 81039fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 81039fe:	3b02      	subs	r3, #2
 8103a00:	2b03      	cmp	r3, #3
 8103a02:	d82b      	bhi.n	8103a5c <low_level_init+0x1fc>
 8103a04:	a201      	add	r2, pc, #4	@ (adr r2, 8103a0c <low_level_init+0x1ac>)
 8103a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a0a:	bf00      	nop
 8103a0c:	08103a1d 	.word	0x08103a1d
 8103a10:	08103a2f 	.word	0x08103a2f
 8103a14:	08103a3f 	.word	0x08103a3f
 8103a18:	08103a4f 	.word	0x08103a4f
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8103a1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8103a20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8103a24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8103a28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8103a2c:	e01f      	b.n	8103a6e <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8103a2e:	2300      	movs	r3, #0
 8103a30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8103a34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8103a38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8103a3c:	e017      	b.n	8103a6e <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8103a3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8103a42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8103a46:	2300      	movs	r3, #0
 8103a48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8103a4c:	e00f      	b.n	8103a6e <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8103a4e:	2300      	movs	r3, #0
 8103a50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8103a54:	2300      	movs	r3, #0
 8103a56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8103a5a:	e008      	b.n	8103a6e <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8103a5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8103a60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8103a64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8103a68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8103a6c:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8103a6e:	f107 0310 	add.w	r3, r7, #16
 8103a72:	4619      	mov	r1, r3
 8103a74:	480e      	ldr	r0, [pc, #56]	@ (8103ab0 <low_level_init+0x250>)
 8103a76:	f001 fc69 	bl	810534c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8103a7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8103a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8103a80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8103a84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8103a86:	f107 0310 	add.w	r3, r7, #16
 8103a8a:	4619      	mov	r1, r3
 8103a8c:	4808      	ldr	r0, [pc, #32]	@ (8103ab0 <low_level_init+0x250>)
 8103a8e:	f001 fe31 	bl	81056f4 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8103a92:	4807      	ldr	r0, [pc, #28]	@ (8103ab0 <low_level_init+0x250>)
 8103a94:	f000 ffb2 	bl	81049fc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8103a98:	6878      	ldr	r0, [r7, #4]
 8103a9a:	f00b fac5 	bl	810f028 <netif_set_up>
    netif_set_link_up(netif);
 8103a9e:	6878      	ldr	r0, [r7, #4]
 8103aa0:	f00b fb60 	bl	810f164 <netif_set_link_up>
 8103aa4:	e001      	b.n	8103aaa <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8103aa6:	f7fc feb3 	bl	8100810 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8103aaa:	37a8      	adds	r7, #168	@ 0xa8
 8103aac:	46bd      	mov	sp, r7
 8103aae:	bd80      	pop	{r7, pc}
 8103ab0:	10000194 	.word	0x10000194
 8103ab4:	40028000 	.word	0x40028000
 8103ab8:	30040100 	.word	0x30040100
 8103abc:	30040000 	.word	0x30040000
 8103ac0:	10000244 	.word	0x10000244
 8103ac4:	0811a644 	.word	0x0811a644
 8103ac8:	1000018c 	.word	0x1000018c
 8103acc:	10000190 	.word	0x10000190
 8103ad0:	081176e4 	.word	0x081176e4
 8103ad4:	08103c71 	.word	0x08103c71
 8103ad8:	10000000 	.word	0x10000000
 8103adc:	1000027c 	.word	0x1000027c

08103ae0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8103ae0:	b580      	push	{r7, lr}
 8103ae2:	b092      	sub	sp, #72	@ 0x48
 8103ae4:	af00      	add	r7, sp, #0
 8103ae6:	6078      	str	r0, [r7, #4]
 8103ae8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8103aea:	2300      	movs	r3, #0
 8103aec:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8103aee:	2300      	movs	r3, #0
 8103af0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8103af2:	2300      	movs	r3, #0
 8103af4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8103af8:	f107 030c 	add.w	r3, r7, #12
 8103afc:	2230      	movs	r2, #48	@ 0x30
 8103afe:	2100      	movs	r1, #0
 8103b00:	4618      	mov	r0, r3
 8103b02:	f012 ff70 	bl	81169e6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8103b06:	f107 030c 	add.w	r3, r7, #12
 8103b0a:	2230      	movs	r2, #48	@ 0x30
 8103b0c:	2100      	movs	r1, #0
 8103b0e:	4618      	mov	r0, r3
 8103b10:	f012 ff69 	bl	81169e6 <memset>

  for(q = p; q != NULL; q = q->next)
 8103b14:	683b      	ldr	r3, [r7, #0]
 8103b16:	643b      	str	r3, [r7, #64]	@ 0x40
 8103b18:	e045      	b.n	8103ba6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8103b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8103b1c:	2b03      	cmp	r3, #3
 8103b1e:	d902      	bls.n	8103b26 <low_level_output+0x46>
      return ERR_IF;
 8103b20:	f06f 030b 	mvn.w	r3, #11
 8103b24:	e07f      	b.n	8103c26 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8103b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8103b28:	6859      	ldr	r1, [r3, #4]
 8103b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8103b2c:	4613      	mov	r3, r2
 8103b2e:	005b      	lsls	r3, r3, #1
 8103b30:	4413      	add	r3, r2
 8103b32:	009b      	lsls	r3, r3, #2
 8103b34:	3348      	adds	r3, #72	@ 0x48
 8103b36:	443b      	add	r3, r7
 8103b38:	3b3c      	subs	r3, #60	@ 0x3c
 8103b3a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8103b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8103b3e:	895b      	ldrh	r3, [r3, #10]
 8103b40:	4619      	mov	r1, r3
 8103b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8103b44:	4613      	mov	r3, r2
 8103b46:	005b      	lsls	r3, r3, #1
 8103b48:	4413      	add	r3, r2
 8103b4a:	009b      	lsls	r3, r3, #2
 8103b4c:	3348      	adds	r3, #72	@ 0x48
 8103b4e:	443b      	add	r3, r7
 8103b50:	3b38      	subs	r3, #56	@ 0x38
 8103b52:	6019      	str	r1, [r3, #0]

    if(i>0)
 8103b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8103b56:	2b00      	cmp	r3, #0
 8103b58:	d011      	beq.n	8103b7e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8103b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8103b5c:	1e5a      	subs	r2, r3, #1
 8103b5e:	f107 000c 	add.w	r0, r7, #12
 8103b62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8103b64:	460b      	mov	r3, r1
 8103b66:	005b      	lsls	r3, r3, #1
 8103b68:	440b      	add	r3, r1
 8103b6a:	009b      	lsls	r3, r3, #2
 8103b6c:	18c1      	adds	r1, r0, r3
 8103b6e:	4613      	mov	r3, r2
 8103b70:	005b      	lsls	r3, r3, #1
 8103b72:	4413      	add	r3, r2
 8103b74:	009b      	lsls	r3, r3, #2
 8103b76:	3348      	adds	r3, #72	@ 0x48
 8103b78:	443b      	add	r3, r7
 8103b7a:	3b34      	subs	r3, #52	@ 0x34
 8103b7c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8103b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8103b80:	681b      	ldr	r3, [r3, #0]
 8103b82:	2b00      	cmp	r3, #0
 8103b84:	d109      	bne.n	8103b9a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8103b86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8103b88:	4613      	mov	r3, r2
 8103b8a:	005b      	lsls	r3, r3, #1
 8103b8c:	4413      	add	r3, r2
 8103b8e:	009b      	lsls	r3, r3, #2
 8103b90:	3348      	adds	r3, #72	@ 0x48
 8103b92:	443b      	add	r3, r7
 8103b94:	3b34      	subs	r3, #52	@ 0x34
 8103b96:	2200      	movs	r2, #0
 8103b98:	601a      	str	r2, [r3, #0]
    }

    i++;
 8103b9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8103b9c:	3301      	adds	r3, #1
 8103b9e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8103ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8103ba2:	681b      	ldr	r3, [r3, #0]
 8103ba4:	643b      	str	r3, [r7, #64]	@ 0x40
 8103ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8103ba8:	2b00      	cmp	r3, #0
 8103baa:	d1b6      	bne.n	8103b1a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8103bac:	683b      	ldr	r3, [r7, #0]
 8103bae:	891b      	ldrh	r3, [r3, #8]
 8103bb0:	461a      	mov	r2, r3
 8103bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8103c30 <low_level_output+0x150>)
 8103bb4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8103bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8103c30 <low_level_output+0x150>)
 8103bb8:	f107 030c 	add.w	r3, r7, #12
 8103bbc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8103bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8103c30 <low_level_output+0x150>)
 8103bc0:	683b      	ldr	r3, [r7, #0]
 8103bc2:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8103bc4:	6838      	ldr	r0, [r7, #0]
 8103bc6:	f00b ff89 	bl	810fadc <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8103bca:	4919      	ldr	r1, [pc, #100]	@ (8103c30 <low_level_output+0x150>)
 8103bcc:	4819      	ldr	r0, [pc, #100]	@ (8103c34 <low_level_output+0x154>)
 8103bce:	f001 f802 	bl	8104bd6 <HAL_ETH_Transmit_IT>
 8103bd2:	4603      	mov	r3, r0
 8103bd4:	2b00      	cmp	r3, #0
 8103bd6:	d103      	bne.n	8103be0 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8103bd8:	2300      	movs	r3, #0
 8103bda:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8103bde:	e01b      	b.n	8103c18 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8103be0:	4814      	ldr	r0, [pc, #80]	@ (8103c34 <low_level_output+0x154>)
 8103be2:	f001 fdf1 	bl	81057c8 <HAL_ETH_GetError>
 8103be6:	4603      	mov	r3, r0
 8103be8:	f003 0302 	and.w	r3, r3, #2
 8103bec:	2b00      	cmp	r3, #0
 8103bee:	d00d      	beq.n	8103c0c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8103bf0:	4b11      	ldr	r3, [pc, #68]	@ (8103c38 <low_level_output+0x158>)
 8103bf2:	681b      	ldr	r3, [r3, #0]
 8103bf4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8103bf8:	4618      	mov	r0, r3
 8103bfa:	f003 fdd5 	bl	81077a8 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8103bfe:	480d      	ldr	r0, [pc, #52]	@ (8103c34 <low_level_output+0x154>)
 8103c00:	f001 f970 	bl	8104ee4 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8103c04:	23fe      	movs	r3, #254	@ 0xfe
 8103c06:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8103c0a:	e005      	b.n	8103c18 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8103c0c:	6838      	ldr	r0, [r7, #0]
 8103c0e:	f00b febf 	bl	810f990 <pbuf_free>
        errval =  ERR_IF;
 8103c12:	23f4      	movs	r3, #244	@ 0xf4
 8103c14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8103c18:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8103c1c:	f113 0f02 	cmn.w	r3, #2
 8103c20:	d0d3      	beq.n	8103bca <low_level_output+0xea>

  return errval;
 8103c22:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8103c26:	4618      	mov	r0, r3
 8103c28:	3748      	adds	r7, #72	@ 0x48
 8103c2a:	46bd      	mov	sp, r7
 8103c2c:	bd80      	pop	{r7, pc}
 8103c2e:	bf00      	nop
 8103c30:	10000244 	.word	0x10000244
 8103c34:	10000194 	.word	0x10000194
 8103c38:	10000190 	.word	0x10000190

08103c3c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8103c3c:	b580      	push	{r7, lr}
 8103c3e:	b084      	sub	sp, #16
 8103c40:	af00      	add	r7, sp, #0
 8103c42:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8103c44:	2300      	movs	r3, #0
 8103c46:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8103c48:	4b07      	ldr	r3, [pc, #28]	@ (8103c68 <low_level_input+0x2c>)
 8103c4a:	781b      	ldrb	r3, [r3, #0]
 8103c4c:	2b00      	cmp	r3, #0
 8103c4e:	d105      	bne.n	8103c5c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8103c50:	f107 030c 	add.w	r3, r7, #12
 8103c54:	4619      	mov	r1, r3
 8103c56:	4805      	ldr	r0, [pc, #20]	@ (8103c6c <low_level_input+0x30>)
 8103c58:	f001 f80e 	bl	8104c78 <HAL_ETH_ReadData>
  }

  return p;
 8103c5c:	68fb      	ldr	r3, [r7, #12]
}
 8103c5e:	4618      	mov	r0, r3
 8103c60:	3710      	adds	r7, #16
 8103c62:	46bd      	mov	sp, r7
 8103c64:	bd80      	pop	{r7, pc}
 8103c66:	bf00      	nop
 8103c68:	10000188 	.word	0x10000188
 8103c6c:	10000194 	.word	0x10000194

08103c70 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8103c70:	b580      	push	{r7, lr}
 8103c72:	b084      	sub	sp, #16
 8103c74:	af00      	add	r7, sp, #0
 8103c76:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8103c78:	2300      	movs	r3, #0
 8103c7a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8103c80:	4b0f      	ldr	r3, [pc, #60]	@ (8103cc0 <ethernetif_input+0x50>)
 8103c82:	681b      	ldr	r3, [r3, #0]
 8103c84:	f04f 31ff 	mov.w	r1, #4294967295
 8103c88:	4618      	mov	r0, r3
 8103c8a:	f003 fd8d 	bl	81077a8 <osSemaphoreAcquire>
 8103c8e:	4603      	mov	r3, r0
 8103c90:	2b00      	cmp	r3, #0
 8103c92:	d1f5      	bne.n	8103c80 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8103c94:	68b8      	ldr	r0, [r7, #8]
 8103c96:	f7ff ffd1 	bl	8103c3c <low_level_input>
 8103c9a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8103c9c:	68fb      	ldr	r3, [r7, #12]
 8103c9e:	2b00      	cmp	r3, #0
 8103ca0:	d00a      	beq.n	8103cb8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8103ca2:	68bb      	ldr	r3, [r7, #8]
 8103ca4:	691b      	ldr	r3, [r3, #16]
 8103ca6:	68b9      	ldr	r1, [r7, #8]
 8103ca8:	68f8      	ldr	r0, [r7, #12]
 8103caa:	4798      	blx	r3
 8103cac:	4603      	mov	r3, r0
 8103cae:	2b00      	cmp	r3, #0
 8103cb0:	d002      	beq.n	8103cb8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8103cb2:	68f8      	ldr	r0, [r7, #12]
 8103cb4:	f00b fe6c 	bl	810f990 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8103cb8:	68fb      	ldr	r3, [r7, #12]
 8103cba:	2b00      	cmp	r3, #0
 8103cbc:	d1ea      	bne.n	8103c94 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8103cbe:	e7df      	b.n	8103c80 <ethernetif_input+0x10>
 8103cc0:	1000018c 	.word	0x1000018c

08103cc4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8103cc4:	b580      	push	{r7, lr}
 8103cc6:	b082      	sub	sp, #8
 8103cc8:	af00      	add	r7, sp, #0
 8103cca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8103ccc:	687b      	ldr	r3, [r7, #4]
 8103cce:	2b00      	cmp	r3, #0
 8103cd0:	d106      	bne.n	8103ce0 <ethernetif_init+0x1c>
 8103cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8103d0c <ethernetif_init+0x48>)
 8103cd4:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8103cd8:	490d      	ldr	r1, [pc, #52]	@ (8103d10 <ethernetif_init+0x4c>)
 8103cda:	480e      	ldr	r0, [pc, #56]	@ (8103d14 <ethernetif_init+0x50>)
 8103cdc:	f012 fe04 	bl	81168e8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8103ce0:	687b      	ldr	r3, [r7, #4]
 8103ce2:	2273      	movs	r2, #115	@ 0x73
 8103ce4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	2274      	movs	r2, #116	@ 0x74
 8103cec:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8103cf0:	687b      	ldr	r3, [r7, #4]
 8103cf2:	4a09      	ldr	r2, [pc, #36]	@ (8103d18 <ethernetif_init+0x54>)
 8103cf4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8103cf6:	687b      	ldr	r3, [r7, #4]
 8103cf8:	4a08      	ldr	r2, [pc, #32]	@ (8103d1c <ethernetif_init+0x58>)
 8103cfa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8103cfc:	6878      	ldr	r0, [r7, #4]
 8103cfe:	f7ff fdaf 	bl	8103860 <low_level_init>

  return ERR_OK;
 8103d02:	2300      	movs	r3, #0
}
 8103d04:	4618      	mov	r0, r3
 8103d06:	3708      	adds	r7, #8
 8103d08:	46bd      	mov	sp, r7
 8103d0a:	bd80      	pop	{r7, pc}
 8103d0c:	081176ec 	.word	0x081176ec
 8103d10:	0811774c 	.word	0x0811774c
 8103d14:	0811775c 	.word	0x0811775c
 8103d18:	0810c331 	.word	0x0810c331
 8103d1c:	08103ae1 	.word	0x08103ae1

08103d20 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8103d20:	b580      	push	{r7, lr}
 8103d22:	b084      	sub	sp, #16
 8103d24:	af00      	add	r7, sp, #0
 8103d26:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8103d28:	687b      	ldr	r3, [r7, #4]
 8103d2a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8103d2c:	68f9      	ldr	r1, [r7, #12]
 8103d2e:	4809      	ldr	r0, [pc, #36]	@ (8103d54 <pbuf_free_custom+0x34>)
 8103d30:	f00a ff62 	bl	810ebf8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8103d34:	4b08      	ldr	r3, [pc, #32]	@ (8103d58 <pbuf_free_custom+0x38>)
 8103d36:	781b      	ldrb	r3, [r3, #0]
 8103d38:	2b01      	cmp	r3, #1
 8103d3a:	d107      	bne.n	8103d4c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8103d3c:	4b06      	ldr	r3, [pc, #24]	@ (8103d58 <pbuf_free_custom+0x38>)
 8103d3e:	2200      	movs	r2, #0
 8103d40:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8103d42:	4b06      	ldr	r3, [pc, #24]	@ (8103d5c <pbuf_free_custom+0x3c>)
 8103d44:	681b      	ldr	r3, [r3, #0]
 8103d46:	4618      	mov	r0, r3
 8103d48:	f003 fd80 	bl	810784c <osSemaphoreRelease>
  }
}
 8103d4c:	bf00      	nop
 8103d4e:	3710      	adds	r7, #16
 8103d50:	46bd      	mov	sp, r7
 8103d52:	bd80      	pop	{r7, pc}
 8103d54:	0811a644 	.word	0x0811a644
 8103d58:	10000188 	.word	0x10000188
 8103d5c:	1000018c 	.word	0x1000018c

08103d60 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8103d60:	b580      	push	{r7, lr}
 8103d62:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8103d64:	f000 fc38 	bl	81045d8 <HAL_GetTick>
 8103d68:	4603      	mov	r3, r0
}
 8103d6a:	4618      	mov	r0, r3
 8103d6c:	bd80      	pop	{r7, pc}
	...

08103d70 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8103d70:	b580      	push	{r7, lr}
 8103d72:	b090      	sub	sp, #64	@ 0x40
 8103d74:	af00      	add	r7, sp, #0
 8103d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103d78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8103d7c:	2200      	movs	r2, #0
 8103d7e:	601a      	str	r2, [r3, #0]
 8103d80:	605a      	str	r2, [r3, #4]
 8103d82:	609a      	str	r2, [r3, #8]
 8103d84:	60da      	str	r2, [r3, #12]
 8103d86:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	681b      	ldr	r3, [r3, #0]
 8103d8c:	4a7f      	ldr	r2, [pc, #508]	@ (8103f8c <HAL_ETH_MspInit+0x21c>)
 8103d8e:	4293      	cmp	r3, r2
 8103d90:	f040 80f8 	bne.w	8103f84 <HAL_ETH_MspInit+0x214>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8103d94:	4b7e      	ldr	r3, [pc, #504]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103d96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103d9a:	4a7d      	ldr	r2, [pc, #500]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103d9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8103da0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103da4:	4b7a      	ldr	r3, [pc, #488]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103da6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103daa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8103db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8103db2:	4b77      	ldr	r3, [pc, #476]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103db8:	4a75      	ldr	r2, [pc, #468]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103dba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8103dbe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103dc2:	4b73      	ldr	r3, [pc, #460]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8103dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8103dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8103dd0:	4b6f      	ldr	r3, [pc, #444]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103dd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103dd6:	4a6e      	ldr	r2, [pc, #440]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103ddc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103de0:	4b6b      	ldr	r3, [pc, #428]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103de2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103dea:	623b      	str	r3, [r7, #32]
 8103dec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8103dee:	4b68      	ldr	r3, [pc, #416]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103df4:	4a66      	ldr	r2, [pc, #408]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103df6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8103dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103dfe:	4b64      	ldr	r3, [pc, #400]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103e08:	61fb      	str	r3, [r7, #28]
 8103e0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8103e0c:	4b60      	ldr	r3, [pc, #384]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e12:	4a5f      	ldr	r2, [pc, #380]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e14:	f043 0310 	orr.w	r3, r3, #16
 8103e18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103e1c:	4b5c      	ldr	r3, [pc, #368]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e22:	f003 0310 	and.w	r3, r3, #16
 8103e26:	61bb      	str	r3, [r7, #24]
 8103e28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8103e2a:	4b59      	ldr	r3, [pc, #356]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e30:	4a57      	ldr	r2, [pc, #348]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e32:	f043 0304 	orr.w	r3, r3, #4
 8103e36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103e3a:	4b55      	ldr	r3, [pc, #340]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e40:	f003 0304 	and.w	r3, r3, #4
 8103e44:	617b      	str	r3, [r7, #20]
 8103e46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8103e48:	4b51      	ldr	r3, [pc, #324]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e4e:	4a50      	ldr	r2, [pc, #320]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e50:	f043 0301 	orr.w	r3, r3, #1
 8103e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103e58:	4b4d      	ldr	r3, [pc, #308]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e5e:	f003 0301 	and.w	r3, r3, #1
 8103e62:	613b      	str	r3, [r7, #16]
 8103e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8103e66:	4b4a      	ldr	r3, [pc, #296]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e6c:	4a48      	ldr	r2, [pc, #288]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e6e:	f043 0302 	orr.w	r3, r3, #2
 8103e72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103e76:	4b46      	ldr	r3, [pc, #280]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e7c:	f003 0302 	and.w	r3, r3, #2
 8103e80:	60fb      	str	r3, [r7, #12]
 8103e82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8103e84:	4b42      	ldr	r3, [pc, #264]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e8a:	4a41      	ldr	r2, [pc, #260]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8103e90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103e94:	4b3e      	ldr	r3, [pc, #248]	@ (8103f90 <HAL_ETH_MspInit+0x220>)
 8103e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103e9e:	60bb      	str	r3, [r7, #8]
 8103ea0:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> ETH_RXD3
    PH6     ------> ETH_RXD2
    PA3     ------> ETH_COL
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8103ea2:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8103ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103ea8:	2302      	movs	r3, #2
 8103eaa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103eac:	2300      	movs	r3, #0
 8103eae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8103eb0:	2303      	movs	r3, #3
 8103eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8103eb4:	230b      	movs	r3, #11
 8103eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8103eb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8103ebc:	4619      	mov	r1, r3
 8103ebe:	4835      	ldr	r0, [pc, #212]	@ (8103f94 <HAL_ETH_MspInit+0x224>)
 8103ec0:	f002 fa1c 	bl	81062fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8103ec4:	2304      	movs	r3, #4
 8103ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103ec8:	2302      	movs	r3, #2
 8103eca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103ecc:	2300      	movs	r3, #0
 8103ece:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8103ed0:	2303      	movs	r3, #3
 8103ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8103ed4:	230b      	movs	r3, #11
 8103ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8103ed8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8103edc:	4619      	mov	r1, r3
 8103ede:	482e      	ldr	r0, [pc, #184]	@ (8103f98 <HAL_ETH_MspInit+0x228>)
 8103ee0:	f002 fa0c 	bl	81062fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8103ee4:	233e      	movs	r3, #62	@ 0x3e
 8103ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103ee8:	2302      	movs	r3, #2
 8103eea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103eec:	2300      	movs	r3, #0
 8103eee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8103ef0:	2303      	movs	r3, #3
 8103ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8103ef4:	230b      	movs	r3, #11
 8103ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8103ef8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8103efc:	4619      	mov	r1, r3
 8103efe:	4827      	ldr	r0, [pc, #156]	@ (8103f9c <HAL_ETH_MspInit+0x22c>)
 8103f00:	f002 f9fc 	bl	81062fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_7
 8103f04:	238f      	movs	r3, #143	@ 0x8f
 8103f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103f08:	2302      	movs	r3, #2
 8103f0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103f0c:	2300      	movs	r3, #0
 8103f0e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8103f10:	2303      	movs	r3, #3
 8103f12:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8103f14:	230b      	movs	r3, #11
 8103f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103f18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8103f1c:	4619      	mov	r1, r3
 8103f1e:	4820      	ldr	r0, [pc, #128]	@ (8103fa0 <HAL_ETH_MspInit+0x230>)
 8103f20:	f002 f9ec 	bl	81062fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8103f24:	2302      	movs	r3, #2
 8103f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103f28:	2302      	movs	r3, #2
 8103f2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103f2c:	2300      	movs	r3, #0
 8103f2e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8103f30:	2303      	movs	r3, #3
 8103f32:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8103f34:	230b      	movs	r3, #11
 8103f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8103f38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8103f3c:	4619      	mov	r1, r3
 8103f3e:	4819      	ldr	r0, [pc, #100]	@ (8103fa4 <HAL_ETH_MspInit+0x234>)
 8103f40:	f002 f9dc 	bl	81062fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8103f44:	2340      	movs	r3, #64	@ 0x40
 8103f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103f48:	2302      	movs	r3, #2
 8103f4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103f4c:	2300      	movs	r3, #0
 8103f4e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8103f50:	2303      	movs	r3, #3
 8103f52:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8103f54:	230b      	movs	r3, #11
 8103f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8103f58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8103f5c:	4619      	mov	r1, r3
 8103f5e:	4812      	ldr	r0, [pc, #72]	@ (8103fa8 <HAL_ETH_MspInit+0x238>)
 8103f60:	f002 f9cc 	bl	81062fc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8103f64:	2200      	movs	r2, #0
 8103f66:	2105      	movs	r1, #5
 8103f68:	203d      	movs	r0, #61	@ 0x3d
 8103f6a:	f000 fc0d 	bl	8104788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8103f6e:	203d      	movs	r0, #61	@ 0x3d
 8103f70:	f000 fc24 	bl	81047bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8103f74:	2200      	movs	r2, #0
 8103f76:	2105      	movs	r1, #5
 8103f78:	203e      	movs	r0, #62	@ 0x3e
 8103f7a:	f000 fc05 	bl	8104788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8103f7e:	203e      	movs	r0, #62	@ 0x3e
 8103f80:	f000 fc1c 	bl	81047bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8103f84:	bf00      	nop
 8103f86:	3740      	adds	r7, #64	@ 0x40
 8103f88:	46bd      	mov	sp, r7
 8103f8a:	bd80      	pop	{r7, pc}
 8103f8c:	40028000 	.word	0x40028000
 8103f90:	58024400 	.word	0x58024400
 8103f94:	58021800 	.word	0x58021800
 8103f98:	58021000 	.word	0x58021000
 8103f9c:	58020800 	.word	0x58020800
 8103fa0:	58020000 	.word	0x58020000
 8103fa4:	58020400 	.word	0x58020400
 8103fa8:	58021c00 	.word	0x58021c00

08103fac <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8103fac:	b580      	push	{r7, lr}
 8103fae:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8103fb0:	4802      	ldr	r0, [pc, #8]	@ (8103fbc <ETH_PHY_IO_Init+0x10>)
 8103fb2:	f001 fbb9 	bl	8105728 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8103fb6:	2300      	movs	r3, #0
}
 8103fb8:	4618      	mov	r0, r3
 8103fba:	bd80      	pop	{r7, pc}
 8103fbc:	10000194 	.word	0x10000194

08103fc0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8103fc0:	b480      	push	{r7}
 8103fc2:	af00      	add	r7, sp, #0
  return 0;
 8103fc4:	2300      	movs	r3, #0
}
 8103fc6:	4618      	mov	r0, r3
 8103fc8:	46bd      	mov	sp, r7
 8103fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fce:	4770      	bx	lr

08103fd0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8103fd0:	b580      	push	{r7, lr}
 8103fd2:	b084      	sub	sp, #16
 8103fd4:	af00      	add	r7, sp, #0
 8103fd6:	60f8      	str	r0, [r7, #12]
 8103fd8:	60b9      	str	r1, [r7, #8]
 8103fda:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8103fdc:	687b      	ldr	r3, [r7, #4]
 8103fde:	68ba      	ldr	r2, [r7, #8]
 8103fe0:	68f9      	ldr	r1, [r7, #12]
 8103fe2:	4807      	ldr	r0, [pc, #28]	@ (8104000 <ETH_PHY_IO_ReadReg+0x30>)
 8103fe4:	f001 f90a 	bl	81051fc <HAL_ETH_ReadPHYRegister>
 8103fe8:	4603      	mov	r3, r0
 8103fea:	2b00      	cmp	r3, #0
 8103fec:	d002      	beq.n	8103ff4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8103fee:	f04f 33ff 	mov.w	r3, #4294967295
 8103ff2:	e000      	b.n	8103ff6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8103ff4:	2300      	movs	r3, #0
}
 8103ff6:	4618      	mov	r0, r3
 8103ff8:	3710      	adds	r7, #16
 8103ffa:	46bd      	mov	sp, r7
 8103ffc:	bd80      	pop	{r7, pc}
 8103ffe:	bf00      	nop
 8104000:	10000194 	.word	0x10000194

08104004 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8104004:	b580      	push	{r7, lr}
 8104006:	b084      	sub	sp, #16
 8104008:	af00      	add	r7, sp, #0
 810400a:	60f8      	str	r0, [r7, #12]
 810400c:	60b9      	str	r1, [r7, #8]
 810400e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	68ba      	ldr	r2, [r7, #8]
 8104014:	68f9      	ldr	r1, [r7, #12]
 8104016:	4807      	ldr	r0, [pc, #28]	@ (8104034 <ETH_PHY_IO_WriteReg+0x30>)
 8104018:	f001 f944 	bl	81052a4 <HAL_ETH_WritePHYRegister>
 810401c:	4603      	mov	r3, r0
 810401e:	2b00      	cmp	r3, #0
 8104020:	d002      	beq.n	8104028 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8104022:	f04f 33ff 	mov.w	r3, #4294967295
 8104026:	e000      	b.n	810402a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8104028:	2300      	movs	r3, #0
}
 810402a:	4618      	mov	r0, r3
 810402c:	3710      	adds	r7, #16
 810402e:	46bd      	mov	sp, r7
 8104030:	bd80      	pop	{r7, pc}
 8104032:	bf00      	nop
 8104034:	10000194 	.word	0x10000194

08104038 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8104038:	b580      	push	{r7, lr}
 810403a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 810403c:	f000 facc 	bl	81045d8 <HAL_GetTick>
 8104040:	4603      	mov	r3, r0
}
 8104042:	4618      	mov	r0, r3
 8104044:	bd80      	pop	{r7, pc}
	...

08104048 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8104048:	b580      	push	{r7, lr}
 810404a:	b0a0      	sub	sp, #128	@ 0x80
 810404c:	af00      	add	r7, sp, #0
 810404e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8104050:	f107 0308 	add.w	r3, r7, #8
 8104054:	2264      	movs	r2, #100	@ 0x64
 8104056:	2100      	movs	r1, #0
 8104058:	4618      	mov	r0, r3
 810405a:	f012 fcc4 	bl	81169e6 <memset>
  int32_t PHYLinkState = 0;
 810405e:	2300      	movs	r3, #0
 8104060:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8104062:	2300      	movs	r3, #0
 8104064:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8104066:	2300      	movs	r3, #0
 8104068:	67bb      	str	r3, [r7, #120]	@ 0x78
 810406a:	2300      	movs	r3, #0
 810406c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 810406e:	687b      	ldr	r3, [r7, #4]
 8104070:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8104072:	483a      	ldr	r0, [pc, #232]	@ (810415c <ethernet_link_thread+0x114>)
 8104074:	f000 f99a 	bl	81043ac <LAN8742_GetLinkState>
 8104078:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 810407a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810407c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8104080:	089b      	lsrs	r3, r3, #2
 8104082:	f003 0301 	and.w	r3, r3, #1
 8104086:	b2db      	uxtb	r3, r3
 8104088:	2b00      	cmp	r3, #0
 810408a:	d00c      	beq.n	81040a6 <ethernet_link_thread+0x5e>
 810408c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810408e:	2b01      	cmp	r3, #1
 8104090:	dc09      	bgt.n	81040a6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8104092:	4833      	ldr	r0, [pc, #204]	@ (8104160 <ethernet_link_thread+0x118>)
 8104094:	f000 fd27 	bl	8104ae6 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8104098:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810409a:	f00b f831 	bl	810f100 <netif_set_down>
    netif_set_link_down(netif);
 810409e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 81040a0:	f00b f894 	bl	810f1cc <netif_set_link_down>
 81040a4:	e055      	b.n	8104152 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 81040a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81040a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81040ac:	f003 0304 	and.w	r3, r3, #4
 81040b0:	2b00      	cmp	r3, #0
 81040b2:	d14e      	bne.n	8104152 <ethernet_link_thread+0x10a>
 81040b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81040b6:	2b01      	cmp	r3, #1
 81040b8:	dd4b      	ble.n	8104152 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 81040ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81040bc:	3b02      	subs	r3, #2
 81040be:	2b03      	cmp	r3, #3
 81040c0:	d82a      	bhi.n	8104118 <ethernet_link_thread+0xd0>
 81040c2:	a201      	add	r2, pc, #4	@ (adr r2, 81040c8 <ethernet_link_thread+0x80>)
 81040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81040c8:	081040d9 	.word	0x081040d9
 81040cc:	081040eb 	.word	0x081040eb
 81040d0:	081040fb 	.word	0x081040fb
 81040d4:	0810410b 	.word	0x0810410b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 81040d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81040dc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 81040de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81040e2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 81040e4:	2301      	movs	r3, #1
 81040e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 81040e8:	e017      	b.n	810411a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 81040ea:	2300      	movs	r3, #0
 81040ec:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 81040ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81040f2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 81040f4:	2301      	movs	r3, #1
 81040f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 81040f8:	e00f      	b.n	810411a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 81040fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81040fe:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8104100:	2300      	movs	r3, #0
 8104102:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8104104:	2301      	movs	r3, #1
 8104106:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8104108:	e007      	b.n	810411a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 810410a:	2300      	movs	r3, #0
 810410c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 810410e:	2300      	movs	r3, #0
 8104110:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8104112:	2301      	movs	r3, #1
 8104114:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8104116:	e000      	b.n	810411a <ethernet_link_thread+0xd2>
    default:
      break;
 8104118:	bf00      	nop
    }

    if(linkchanged)
 810411a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 810411c:	2b00      	cmp	r3, #0
 810411e:	d018      	beq.n	8104152 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8104120:	f107 0308 	add.w	r3, r7, #8
 8104124:	4619      	mov	r1, r3
 8104126:	480e      	ldr	r0, [pc, #56]	@ (8104160 <ethernet_link_thread+0x118>)
 8104128:	f001 f910 	bl	810534c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 810412c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810412e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8104130:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8104132:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8104134:	f107 0308 	add.w	r3, r7, #8
 8104138:	4619      	mov	r1, r3
 810413a:	4809      	ldr	r0, [pc, #36]	@ (8104160 <ethernet_link_thread+0x118>)
 810413c:	f001 fada 	bl	81056f4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8104140:	4807      	ldr	r0, [pc, #28]	@ (8104160 <ethernet_link_thread+0x118>)
 8104142:	f000 fc5b 	bl	81049fc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8104146:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8104148:	f00a ff6e 	bl	810f028 <netif_set_up>
      netif_set_link_up(netif);
 810414c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810414e:	f00b f809 	bl	810f164 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8104152:	2064      	movs	r0, #100	@ 0x64
 8104154:	f003 f975 	bl	8107442 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8104158:	e78b      	b.n	8104072 <ethernet_link_thread+0x2a>
 810415a:	bf00      	nop
 810415c:	1000027c 	.word	0x1000027c
 8104160:	10000194 	.word	0x10000194

08104164 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8104164:	b580      	push	{r7, lr}
 8104166:	b086      	sub	sp, #24
 8104168:	af02      	add	r7, sp, #8
 810416a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 810416c:	4812      	ldr	r0, [pc, #72]	@ (81041b8 <HAL_ETH_RxAllocateCallback+0x54>)
 810416e:	f00a fccf 	bl	810eb10 <memp_malloc_pool>
 8104172:	60f8      	str	r0, [r7, #12]
  if (p)
 8104174:	68fb      	ldr	r3, [r7, #12]
 8104176:	2b00      	cmp	r3, #0
 8104178:	d014      	beq.n	81041a4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 810417a:	68fb      	ldr	r3, [r7, #12]
 810417c:	f103 0220 	add.w	r2, r3, #32
 8104180:	687b      	ldr	r3, [r7, #4]
 8104182:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8104184:	68fb      	ldr	r3, [r7, #12]
 8104186:	4a0d      	ldr	r2, [pc, #52]	@ (81041bc <HAL_ETH_RxAllocateCallback+0x58>)
 8104188:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 810418a:	687b      	ldr	r3, [r7, #4]
 810418c:	681b      	ldr	r3, [r3, #0]
 810418e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8104192:	9201      	str	r2, [sp, #4]
 8104194:	9300      	str	r3, [sp, #0]
 8104196:	68fb      	ldr	r3, [r7, #12]
 8104198:	2241      	movs	r2, #65	@ 0x41
 810419a:	2100      	movs	r1, #0
 810419c:	2000      	movs	r0, #0
 810419e:	f00b fa3d 	bl	810f61c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 81041a2:	e005      	b.n	81041b0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 81041a4:	4b06      	ldr	r3, [pc, #24]	@ (81041c0 <HAL_ETH_RxAllocateCallback+0x5c>)
 81041a6:	2201      	movs	r2, #1
 81041a8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 81041aa:	687b      	ldr	r3, [r7, #4]
 81041ac:	2200      	movs	r2, #0
 81041ae:	601a      	str	r2, [r3, #0]
}
 81041b0:	bf00      	nop
 81041b2:	3710      	adds	r7, #16
 81041b4:	46bd      	mov	sp, r7
 81041b6:	bd80      	pop	{r7, pc}
 81041b8:	0811a644 	.word	0x0811a644
 81041bc:	08103d21 	.word	0x08103d21
 81041c0:	10000188 	.word	0x10000188

081041c4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 81041c4:	b480      	push	{r7}
 81041c6:	b089      	sub	sp, #36	@ 0x24
 81041c8:	af00      	add	r7, sp, #0
 81041ca:	60f8      	str	r0, [r7, #12]
 81041cc:	60b9      	str	r1, [r7, #8]
 81041ce:	607a      	str	r2, [r7, #4]
 81041d0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 81041d2:	68fb      	ldr	r3, [r7, #12]
 81041d4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 81041d6:	68bb      	ldr	r3, [r7, #8]
 81041d8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 81041da:	2300      	movs	r3, #0
 81041dc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 81041de:	687b      	ldr	r3, [r7, #4]
 81041e0:	3b20      	subs	r3, #32
 81041e2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 81041e4:	69fb      	ldr	r3, [r7, #28]
 81041e6:	2200      	movs	r2, #0
 81041e8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 81041ea:	69fb      	ldr	r3, [r7, #28]
 81041ec:	2200      	movs	r2, #0
 81041ee:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 81041f0:	69fb      	ldr	r3, [r7, #28]
 81041f2:	887a      	ldrh	r2, [r7, #2]
 81041f4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 81041f6:	69bb      	ldr	r3, [r7, #24]
 81041f8:	681b      	ldr	r3, [r3, #0]
 81041fa:	2b00      	cmp	r3, #0
 81041fc:	d103      	bne.n	8104206 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 81041fe:	69bb      	ldr	r3, [r7, #24]
 8104200:	69fa      	ldr	r2, [r7, #28]
 8104202:	601a      	str	r2, [r3, #0]
 8104204:	e003      	b.n	810420e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8104206:	697b      	ldr	r3, [r7, #20]
 8104208:	681b      	ldr	r3, [r3, #0]
 810420a:	69fa      	ldr	r2, [r7, #28]
 810420c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 810420e:	697b      	ldr	r3, [r7, #20]
 8104210:	69fa      	ldr	r2, [r7, #28]
 8104212:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8104214:	69bb      	ldr	r3, [r7, #24]
 8104216:	681b      	ldr	r3, [r3, #0]
 8104218:	61fb      	str	r3, [r7, #28]
 810421a:	e009      	b.n	8104230 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 810421c:	69fb      	ldr	r3, [r7, #28]
 810421e:	891a      	ldrh	r2, [r3, #8]
 8104220:	887b      	ldrh	r3, [r7, #2]
 8104222:	4413      	add	r3, r2
 8104224:	b29a      	uxth	r2, r3
 8104226:	69fb      	ldr	r3, [r7, #28]
 8104228:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 810422a:	69fb      	ldr	r3, [r7, #28]
 810422c:	681b      	ldr	r3, [r3, #0]
 810422e:	61fb      	str	r3, [r7, #28]
 8104230:	69fb      	ldr	r3, [r7, #28]
 8104232:	2b00      	cmp	r3, #0
 8104234:	d1f2      	bne.n	810421c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8104236:	bf00      	nop
 8104238:	bf00      	nop
 810423a:	3724      	adds	r7, #36	@ 0x24
 810423c:	46bd      	mov	sp, r7
 810423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104242:	4770      	bx	lr

08104244 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8104244:	b580      	push	{r7, lr}
 8104246:	b082      	sub	sp, #8
 8104248:	af00      	add	r7, sp, #0
 810424a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 810424c:	6878      	ldr	r0, [r7, #4]
 810424e:	f00b fb9f 	bl	810f990 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8104252:	bf00      	nop
 8104254:	3708      	adds	r7, #8
 8104256:	46bd      	mov	sp, r7
 8104258:	bd80      	pop	{r7, pc}
	...

0810425c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810425c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8104294 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8104260:	f000 f92c 	bl	81044bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8104264:	480c      	ldr	r0, [pc, #48]	@ (8104298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8104266:	490d      	ldr	r1, [pc, #52]	@ (810429c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8104268:	4a0d      	ldr	r2, [pc, #52]	@ (81042a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810426a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810426c:	e002      	b.n	8104274 <LoopCopyDataInit>

0810426e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810426e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8104270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8104272:	3304      	adds	r3, #4

08104274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8104274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8104276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8104278:	d3f9      	bcc.n	810426e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810427a:	4a0a      	ldr	r2, [pc, #40]	@ (81042a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810427c:	4c0a      	ldr	r4, [pc, #40]	@ (81042a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 810427e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8104280:	e001      	b.n	8104286 <LoopFillZerobss>

08104282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8104282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8104284:	3204      	adds	r2, #4

08104286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8104286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8104288:	d3fb      	bcc.n	8104282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810428a:	f012 fca5 	bl	8116bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810428e:	f7fc f9bb 	bl	8100608 <main>
  bx  lr
 8104292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8104294:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8104298:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810429c:	10000090 	.word	0x10000090
  ldr r2, =_sidata
 81042a0:	0811a878 	.word	0x0811a878
  ldr r2, =_sbss
 81042a4:	10000090 	.word	0x10000090
  ldr r4, =_ebss
 81042a8:	1000ba0c 	.word	0x1000ba0c

081042ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81042ac:	e7fe      	b.n	81042ac <ADC3_IRQHandler>

081042ae <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 81042ae:	b480      	push	{r7}
 81042b0:	b083      	sub	sp, #12
 81042b2:	af00      	add	r7, sp, #0
 81042b4:	6078      	str	r0, [r7, #4]
 81042b6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 81042b8:	687b      	ldr	r3, [r7, #4]
 81042ba:	2b00      	cmp	r3, #0
 81042bc:	d00b      	beq.n	81042d6 <LAN8742_RegisterBusIO+0x28>
 81042be:	683b      	ldr	r3, [r7, #0]
 81042c0:	68db      	ldr	r3, [r3, #12]
 81042c2:	2b00      	cmp	r3, #0
 81042c4:	d007      	beq.n	81042d6 <LAN8742_RegisterBusIO+0x28>
 81042c6:	683b      	ldr	r3, [r7, #0]
 81042c8:	689b      	ldr	r3, [r3, #8]
 81042ca:	2b00      	cmp	r3, #0
 81042cc:	d003      	beq.n	81042d6 <LAN8742_RegisterBusIO+0x28>
 81042ce:	683b      	ldr	r3, [r7, #0]
 81042d0:	691b      	ldr	r3, [r3, #16]
 81042d2:	2b00      	cmp	r3, #0
 81042d4:	d102      	bne.n	81042dc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 81042d6:	f04f 33ff 	mov.w	r3, #4294967295
 81042da:	e014      	b.n	8104306 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 81042dc:	683b      	ldr	r3, [r7, #0]
 81042de:	681a      	ldr	r2, [r3, #0]
 81042e0:	687b      	ldr	r3, [r7, #4]
 81042e2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 81042e4:	683b      	ldr	r3, [r7, #0]
 81042e6:	685a      	ldr	r2, [r3, #4]
 81042e8:	687b      	ldr	r3, [r7, #4]
 81042ea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 81042ec:	683b      	ldr	r3, [r7, #0]
 81042ee:	68da      	ldr	r2, [r3, #12]
 81042f0:	687b      	ldr	r3, [r7, #4]
 81042f2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 81042f4:	683b      	ldr	r3, [r7, #0]
 81042f6:	689a      	ldr	r2, [r3, #8]
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 81042fc:	683b      	ldr	r3, [r7, #0]
 81042fe:	691a      	ldr	r2, [r3, #16]
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8104304:	2300      	movs	r3, #0
}
 8104306:	4618      	mov	r0, r3
 8104308:	370c      	adds	r7, #12
 810430a:	46bd      	mov	sp, r7
 810430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104310:	4770      	bx	lr

08104312 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8104312:	b580      	push	{r7, lr}
 8104314:	b086      	sub	sp, #24
 8104316:	af00      	add	r7, sp, #0
 8104318:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 810431a:	2300      	movs	r3, #0
 810431c:	60fb      	str	r3, [r7, #12]
 810431e:	2300      	movs	r3, #0
 8104320:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8104322:	2300      	movs	r3, #0
 8104324:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8104326:	687b      	ldr	r3, [r7, #4]
 8104328:	685b      	ldr	r3, [r3, #4]
 810432a:	2b00      	cmp	r3, #0
 810432c:	d139      	bne.n	81043a2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 810432e:	687b      	ldr	r3, [r7, #4]
 8104330:	689b      	ldr	r3, [r3, #8]
 8104332:	2b00      	cmp	r3, #0
 8104334:	d002      	beq.n	810433c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8104336:	687b      	ldr	r3, [r7, #4]
 8104338:	689b      	ldr	r3, [r3, #8]
 810433a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	2220      	movs	r2, #32
 8104340:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8104342:	2300      	movs	r3, #0
 8104344:	617b      	str	r3, [r7, #20]
 8104346:	e01c      	b.n	8104382 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8104348:	687b      	ldr	r3, [r7, #4]
 810434a:	695b      	ldr	r3, [r3, #20]
 810434c:	f107 020c 	add.w	r2, r7, #12
 8104350:	2112      	movs	r1, #18
 8104352:	6978      	ldr	r0, [r7, #20]
 8104354:	4798      	blx	r3
 8104356:	4603      	mov	r3, r0
 8104358:	2b00      	cmp	r3, #0
 810435a:	da03      	bge.n	8104364 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 810435c:	f06f 0304 	mvn.w	r3, #4
 8104360:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8104362:	e00b      	b.n	810437c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8104364:	68fb      	ldr	r3, [r7, #12]
 8104366:	f003 031f 	and.w	r3, r3, #31
 810436a:	697a      	ldr	r2, [r7, #20]
 810436c:	429a      	cmp	r2, r3
 810436e:	d105      	bne.n	810437c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8104370:	687b      	ldr	r3, [r7, #4]
 8104372:	697a      	ldr	r2, [r7, #20]
 8104374:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8104376:	2300      	movs	r3, #0
 8104378:	613b      	str	r3, [r7, #16]
         break;
 810437a:	e005      	b.n	8104388 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 810437c:	697b      	ldr	r3, [r7, #20]
 810437e:	3301      	adds	r3, #1
 8104380:	617b      	str	r3, [r7, #20]
 8104382:	697b      	ldr	r3, [r7, #20]
 8104384:	2b1f      	cmp	r3, #31
 8104386:	d9df      	bls.n	8104348 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	681b      	ldr	r3, [r3, #0]
 810438c:	2b1f      	cmp	r3, #31
 810438e:	d902      	bls.n	8104396 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8104390:	f06f 0302 	mvn.w	r3, #2
 8104394:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8104396:	693b      	ldr	r3, [r7, #16]
 8104398:	2b00      	cmp	r3, #0
 810439a:	d102      	bne.n	81043a2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	2201      	movs	r2, #1
 81043a0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 81043a2:	693b      	ldr	r3, [r7, #16]
 }
 81043a4:	4618      	mov	r0, r3
 81043a6:	3718      	adds	r7, #24
 81043a8:	46bd      	mov	sp, r7
 81043aa:	bd80      	pop	{r7, pc}

081043ac <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 81043ac:	b580      	push	{r7, lr}
 81043ae:	b084      	sub	sp, #16
 81043b0:	af00      	add	r7, sp, #0
 81043b2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 81043b4:	2300      	movs	r3, #0
 81043b6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 81043b8:	687b      	ldr	r3, [r7, #4]
 81043ba:	695b      	ldr	r3, [r3, #20]
 81043bc:	687a      	ldr	r2, [r7, #4]
 81043be:	6810      	ldr	r0, [r2, #0]
 81043c0:	f107 020c 	add.w	r2, r7, #12
 81043c4:	2101      	movs	r1, #1
 81043c6:	4798      	blx	r3
 81043c8:	4603      	mov	r3, r0
 81043ca:	2b00      	cmp	r3, #0
 81043cc:	da02      	bge.n	81043d4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 81043ce:	f06f 0304 	mvn.w	r3, #4
 81043d2:	e06e      	b.n	81044b2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	695b      	ldr	r3, [r3, #20]
 81043d8:	687a      	ldr	r2, [r7, #4]
 81043da:	6810      	ldr	r0, [r2, #0]
 81043dc:	f107 020c 	add.w	r2, r7, #12
 81043e0:	2101      	movs	r1, #1
 81043e2:	4798      	blx	r3
 81043e4:	4603      	mov	r3, r0
 81043e6:	2b00      	cmp	r3, #0
 81043e8:	da02      	bge.n	81043f0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 81043ea:	f06f 0304 	mvn.w	r3, #4
 81043ee:	e060      	b.n	81044b2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 81043f0:	68fb      	ldr	r3, [r7, #12]
 81043f2:	f003 0304 	and.w	r3, r3, #4
 81043f6:	2b00      	cmp	r3, #0
 81043f8:	d101      	bne.n	81043fe <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 81043fa:	2301      	movs	r3, #1
 81043fc:	e059      	b.n	81044b2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 81043fe:	687b      	ldr	r3, [r7, #4]
 8104400:	695b      	ldr	r3, [r3, #20]
 8104402:	687a      	ldr	r2, [r7, #4]
 8104404:	6810      	ldr	r0, [r2, #0]
 8104406:	f107 020c 	add.w	r2, r7, #12
 810440a:	2100      	movs	r1, #0
 810440c:	4798      	blx	r3
 810440e:	4603      	mov	r3, r0
 8104410:	2b00      	cmp	r3, #0
 8104412:	da02      	bge.n	810441a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8104414:	f06f 0304 	mvn.w	r3, #4
 8104418:	e04b      	b.n	81044b2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 810441a:	68fb      	ldr	r3, [r7, #12]
 810441c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8104420:	2b00      	cmp	r3, #0
 8104422:	d11b      	bne.n	810445c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8104424:	68fb      	ldr	r3, [r7, #12]
 8104426:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810442a:	2b00      	cmp	r3, #0
 810442c:	d006      	beq.n	810443c <LAN8742_GetLinkState+0x90>
 810442e:	68fb      	ldr	r3, [r7, #12]
 8104430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104434:	2b00      	cmp	r3, #0
 8104436:	d001      	beq.n	810443c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8104438:	2302      	movs	r3, #2
 810443a:	e03a      	b.n	81044b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 810443c:	68fb      	ldr	r3, [r7, #12]
 810443e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8104442:	2b00      	cmp	r3, #0
 8104444:	d001      	beq.n	810444a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8104446:	2303      	movs	r3, #3
 8104448:	e033      	b.n	81044b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 810444a:	68fb      	ldr	r3, [r7, #12]
 810444c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104450:	2b00      	cmp	r3, #0
 8104452:	d001      	beq.n	8104458 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8104454:	2304      	movs	r3, #4
 8104456:	e02c      	b.n	81044b2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8104458:	2305      	movs	r3, #5
 810445a:	e02a      	b.n	81044b2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	695b      	ldr	r3, [r3, #20]
 8104460:	687a      	ldr	r2, [r7, #4]
 8104462:	6810      	ldr	r0, [r2, #0]
 8104464:	f107 020c 	add.w	r2, r7, #12
 8104468:	211f      	movs	r1, #31
 810446a:	4798      	blx	r3
 810446c:	4603      	mov	r3, r0
 810446e:	2b00      	cmp	r3, #0
 8104470:	da02      	bge.n	8104478 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8104472:	f06f 0304 	mvn.w	r3, #4
 8104476:	e01c      	b.n	81044b2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8104478:	68fb      	ldr	r3, [r7, #12]
 810447a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810447e:	2b00      	cmp	r3, #0
 8104480:	d101      	bne.n	8104486 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8104482:	2306      	movs	r3, #6
 8104484:	e015      	b.n	81044b2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8104486:	68fb      	ldr	r3, [r7, #12]
 8104488:	f003 031c 	and.w	r3, r3, #28
 810448c:	2b18      	cmp	r3, #24
 810448e:	d101      	bne.n	8104494 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8104490:	2302      	movs	r3, #2
 8104492:	e00e      	b.n	81044b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8104494:	68fb      	ldr	r3, [r7, #12]
 8104496:	f003 031c 	and.w	r3, r3, #28
 810449a:	2b08      	cmp	r3, #8
 810449c:	d101      	bne.n	81044a2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 810449e:	2303      	movs	r3, #3
 81044a0:	e007      	b.n	81044b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 81044a2:	68fb      	ldr	r3, [r7, #12]
 81044a4:	f003 031c 	and.w	r3, r3, #28
 81044a8:	2b14      	cmp	r3, #20
 81044aa:	d101      	bne.n	81044b0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 81044ac:	2304      	movs	r3, #4
 81044ae:	e000      	b.n	81044b2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 81044b0:	2305      	movs	r3, #5
    }
  }
}
 81044b2:	4618      	mov	r0, r3
 81044b4:	3710      	adds	r7, #16
 81044b6:	46bd      	mov	sp, r7
 81044b8:	bd80      	pop	{r7, pc}
	...

081044bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81044bc:	b480      	push	{r7}
 81044be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81044c0:	4b0b      	ldr	r3, [pc, #44]	@ (81044f0 <SystemInit+0x34>)
 81044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81044c6:	4a0a      	ldr	r2, [pc, #40]	@ (81044f0 <SystemInit+0x34>)
 81044c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81044cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81044d0:	4b07      	ldr	r3, [pc, #28]	@ (81044f0 <SystemInit+0x34>)
 81044d2:	691b      	ldr	r3, [r3, #16]
 81044d4:	4a06      	ldr	r2, [pc, #24]	@ (81044f0 <SystemInit+0x34>)
 81044d6:	f043 0310 	orr.w	r3, r3, #16
 81044da:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81044dc:	4b04      	ldr	r3, [pc, #16]	@ (81044f0 <SystemInit+0x34>)
 81044de:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 81044e2:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81044e4:	bf00      	nop
 81044e6:	46bd      	mov	sp, r7
 81044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044ec:	4770      	bx	lr
 81044ee:	bf00      	nop
 81044f0:	e000ed00 	.word	0xe000ed00

081044f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81044f4:	b580      	push	{r7, lr}
 81044f6:	b082      	sub	sp, #8
 81044f8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81044fa:	4b28      	ldr	r3, [pc, #160]	@ (810459c <HAL_Init+0xa8>)
 81044fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104500:	4a26      	ldr	r2, [pc, #152]	@ (810459c <HAL_Init+0xa8>)
 8104502:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8104506:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810450a:	4b24      	ldr	r3, [pc, #144]	@ (810459c <HAL_Init+0xa8>)
 810450c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104510:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8104514:	603b      	str	r3, [r7, #0]
 8104516:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8104518:	4b21      	ldr	r3, [pc, #132]	@ (81045a0 <HAL_Init+0xac>)
 810451a:	681b      	ldr	r3, [r3, #0]
 810451c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8104520:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8104524:	4a1e      	ldr	r2, [pc, #120]	@ (81045a0 <HAL_Init+0xac>)
 8104526:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810452a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810452c:	4b1c      	ldr	r3, [pc, #112]	@ (81045a0 <HAL_Init+0xac>)
 810452e:	681b      	ldr	r3, [r3, #0]
 8104530:	4a1b      	ldr	r2, [pc, #108]	@ (81045a0 <HAL_Init+0xac>)
 8104532:	f043 0301 	orr.w	r3, r3, #1
 8104536:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8104538:	2003      	movs	r0, #3
 810453a:	f000 f91a 	bl	8104772 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810453e:	f002 f979 	bl	8106834 <HAL_RCC_GetSysClockFreq>
 8104542:	4602      	mov	r2, r0
 8104544:	4b15      	ldr	r3, [pc, #84]	@ (810459c <HAL_Init+0xa8>)
 8104546:	699b      	ldr	r3, [r3, #24]
 8104548:	0a1b      	lsrs	r3, r3, #8
 810454a:	f003 030f 	and.w	r3, r3, #15
 810454e:	4915      	ldr	r1, [pc, #84]	@ (81045a4 <HAL_Init+0xb0>)
 8104550:	5ccb      	ldrb	r3, [r1, r3]
 8104552:	f003 031f 	and.w	r3, r3, #31
 8104556:	fa22 f303 	lsr.w	r3, r2, r3
 810455a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810455c:	4b0f      	ldr	r3, [pc, #60]	@ (810459c <HAL_Init+0xa8>)
 810455e:	699b      	ldr	r3, [r3, #24]
 8104560:	f003 030f 	and.w	r3, r3, #15
 8104564:	4a0f      	ldr	r2, [pc, #60]	@ (81045a4 <HAL_Init+0xb0>)
 8104566:	5cd3      	ldrb	r3, [r2, r3]
 8104568:	f003 031f 	and.w	r3, r3, #31
 810456c:	687a      	ldr	r2, [r7, #4]
 810456e:	fa22 f303 	lsr.w	r3, r2, r3
 8104572:	4a0d      	ldr	r2, [pc, #52]	@ (81045a8 <HAL_Init+0xb4>)
 8104574:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104576:	4b0c      	ldr	r3, [pc, #48]	@ (81045a8 <HAL_Init+0xb4>)
 8104578:	681b      	ldr	r3, [r3, #0]
 810457a:	4a0c      	ldr	r2, [pc, #48]	@ (81045ac <HAL_Init+0xb8>)
 810457c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810457e:	200f      	movs	r0, #15
 8104580:	f7fc f9aa 	bl	81008d8 <HAL_InitTick>
 8104584:	4603      	mov	r3, r0
 8104586:	2b00      	cmp	r3, #0
 8104588:	d001      	beq.n	810458e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810458a:	2301      	movs	r3, #1
 810458c:	e002      	b.n	8104594 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810458e:	f7fc f97d 	bl	810088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8104592:	2300      	movs	r3, #0
}
 8104594:	4618      	mov	r0, r3
 8104596:	3708      	adds	r7, #8
 8104598:	46bd      	mov	sp, r7
 810459a:	bd80      	pop	{r7, pc}
 810459c:	58024400 	.word	0x58024400
 81045a0:	40024400 	.word	0x40024400
 81045a4:	0811a650 	.word	0x0811a650
 81045a8:	10000018 	.word	0x10000018
 81045ac:	10000014 	.word	0x10000014

081045b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81045b0:	b480      	push	{r7}
 81045b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81045b4:	4b06      	ldr	r3, [pc, #24]	@ (81045d0 <HAL_IncTick+0x20>)
 81045b6:	781b      	ldrb	r3, [r3, #0]
 81045b8:	461a      	mov	r2, r3
 81045ba:	4b06      	ldr	r3, [pc, #24]	@ (81045d4 <HAL_IncTick+0x24>)
 81045bc:	681b      	ldr	r3, [r3, #0]
 81045be:	4413      	add	r3, r2
 81045c0:	4a04      	ldr	r2, [pc, #16]	@ (81045d4 <HAL_IncTick+0x24>)
 81045c2:	6013      	str	r3, [r2, #0]
}
 81045c4:	bf00      	nop
 81045c6:	46bd      	mov	sp, r7
 81045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045cc:	4770      	bx	lr
 81045ce:	bf00      	nop
 81045d0:	10000020 	.word	0x10000020
 81045d4:	1000029c 	.word	0x1000029c

081045d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81045d8:	b480      	push	{r7}
 81045da:	af00      	add	r7, sp, #0
  return uwTick;
 81045dc:	4b03      	ldr	r3, [pc, #12]	@ (81045ec <HAL_GetTick+0x14>)
 81045de:	681b      	ldr	r3, [r3, #0]
}
 81045e0:	4618      	mov	r0, r3
 81045e2:	46bd      	mov	sp, r7
 81045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045e8:	4770      	bx	lr
 81045ea:	bf00      	nop
 81045ec:	1000029c 	.word	0x1000029c

081045f0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 81045f0:	b480      	push	{r7}
 81045f2:	b083      	sub	sp, #12
 81045f4:	af00      	add	r7, sp, #0
 81045f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 81045f8:	4b06      	ldr	r3, [pc, #24]	@ (8104614 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 81045fa:	685b      	ldr	r3, [r3, #4]
 81045fc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8104600:	4904      	ldr	r1, [pc, #16]	@ (8104614 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8104602:	687b      	ldr	r3, [r7, #4]
 8104604:	4313      	orrs	r3, r2
 8104606:	604b      	str	r3, [r1, #4]
}
 8104608:	bf00      	nop
 810460a:	370c      	adds	r7, #12
 810460c:	46bd      	mov	sp, r7
 810460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104612:	4770      	bx	lr
 8104614:	58000400 	.word	0x58000400

08104618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104618:	b480      	push	{r7}
 810461a:	b085      	sub	sp, #20
 810461c:	af00      	add	r7, sp, #0
 810461e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8104620:	687b      	ldr	r3, [r7, #4]
 8104622:	f003 0307 	and.w	r3, r3, #7
 8104626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8104628:	4b0c      	ldr	r3, [pc, #48]	@ (810465c <__NVIC_SetPriorityGrouping+0x44>)
 810462a:	68db      	ldr	r3, [r3, #12]
 810462c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810462e:	68ba      	ldr	r2, [r7, #8]
 8104630:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8104634:	4013      	ands	r3, r2
 8104636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8104638:	68fb      	ldr	r3, [r7, #12]
 810463a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810463c:	68bb      	ldr	r3, [r7, #8]
 810463e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8104640:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8104644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810464a:	4a04      	ldr	r2, [pc, #16]	@ (810465c <__NVIC_SetPriorityGrouping+0x44>)
 810464c:	68bb      	ldr	r3, [r7, #8]
 810464e:	60d3      	str	r3, [r2, #12]
}
 8104650:	bf00      	nop
 8104652:	3714      	adds	r7, #20
 8104654:	46bd      	mov	sp, r7
 8104656:	f85d 7b04 	ldr.w	r7, [sp], #4
 810465a:	4770      	bx	lr
 810465c:	e000ed00 	.word	0xe000ed00

08104660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8104660:	b480      	push	{r7}
 8104662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104664:	4b04      	ldr	r3, [pc, #16]	@ (8104678 <__NVIC_GetPriorityGrouping+0x18>)
 8104666:	68db      	ldr	r3, [r3, #12]
 8104668:	0a1b      	lsrs	r3, r3, #8
 810466a:	f003 0307 	and.w	r3, r3, #7
}
 810466e:	4618      	mov	r0, r3
 8104670:	46bd      	mov	sp, r7
 8104672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104676:	4770      	bx	lr
 8104678:	e000ed00 	.word	0xe000ed00

0810467c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810467c:	b480      	push	{r7}
 810467e:	b083      	sub	sp, #12
 8104680:	af00      	add	r7, sp, #0
 8104682:	4603      	mov	r3, r0
 8104684:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810468a:	2b00      	cmp	r3, #0
 810468c:	db0b      	blt.n	81046a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810468e:	88fb      	ldrh	r3, [r7, #6]
 8104690:	f003 021f 	and.w	r2, r3, #31
 8104694:	4907      	ldr	r1, [pc, #28]	@ (81046b4 <__NVIC_EnableIRQ+0x38>)
 8104696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810469a:	095b      	lsrs	r3, r3, #5
 810469c:	2001      	movs	r0, #1
 810469e:	fa00 f202 	lsl.w	r2, r0, r2
 81046a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81046a6:	bf00      	nop
 81046a8:	370c      	adds	r7, #12
 81046aa:	46bd      	mov	sp, r7
 81046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046b0:	4770      	bx	lr
 81046b2:	bf00      	nop
 81046b4:	e000e100 	.word	0xe000e100

081046b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81046b8:	b480      	push	{r7}
 81046ba:	b083      	sub	sp, #12
 81046bc:	af00      	add	r7, sp, #0
 81046be:	4603      	mov	r3, r0
 81046c0:	6039      	str	r1, [r7, #0]
 81046c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81046c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81046c8:	2b00      	cmp	r3, #0
 81046ca:	db0a      	blt.n	81046e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81046cc:	683b      	ldr	r3, [r7, #0]
 81046ce:	b2da      	uxtb	r2, r3
 81046d0:	490c      	ldr	r1, [pc, #48]	@ (8104704 <__NVIC_SetPriority+0x4c>)
 81046d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81046d6:	0112      	lsls	r2, r2, #4
 81046d8:	b2d2      	uxtb	r2, r2
 81046da:	440b      	add	r3, r1
 81046dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81046e0:	e00a      	b.n	81046f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81046e2:	683b      	ldr	r3, [r7, #0]
 81046e4:	b2da      	uxtb	r2, r3
 81046e6:	4908      	ldr	r1, [pc, #32]	@ (8104708 <__NVIC_SetPriority+0x50>)
 81046e8:	88fb      	ldrh	r3, [r7, #6]
 81046ea:	f003 030f 	and.w	r3, r3, #15
 81046ee:	3b04      	subs	r3, #4
 81046f0:	0112      	lsls	r2, r2, #4
 81046f2:	b2d2      	uxtb	r2, r2
 81046f4:	440b      	add	r3, r1
 81046f6:	761a      	strb	r2, [r3, #24]
}
 81046f8:	bf00      	nop
 81046fa:	370c      	adds	r7, #12
 81046fc:	46bd      	mov	sp, r7
 81046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104702:	4770      	bx	lr
 8104704:	e000e100 	.word	0xe000e100
 8104708:	e000ed00 	.word	0xe000ed00

0810470c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810470c:	b480      	push	{r7}
 810470e:	b089      	sub	sp, #36	@ 0x24
 8104710:	af00      	add	r7, sp, #0
 8104712:	60f8      	str	r0, [r7, #12]
 8104714:	60b9      	str	r1, [r7, #8]
 8104716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8104718:	68fb      	ldr	r3, [r7, #12]
 810471a:	f003 0307 	and.w	r3, r3, #7
 810471e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8104720:	69fb      	ldr	r3, [r7, #28]
 8104722:	f1c3 0307 	rsb	r3, r3, #7
 8104726:	2b04      	cmp	r3, #4
 8104728:	bf28      	it	cs
 810472a:	2304      	movcs	r3, #4
 810472c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810472e:	69fb      	ldr	r3, [r7, #28]
 8104730:	3304      	adds	r3, #4
 8104732:	2b06      	cmp	r3, #6
 8104734:	d902      	bls.n	810473c <NVIC_EncodePriority+0x30>
 8104736:	69fb      	ldr	r3, [r7, #28]
 8104738:	3b03      	subs	r3, #3
 810473a:	e000      	b.n	810473e <NVIC_EncodePriority+0x32>
 810473c:	2300      	movs	r3, #0
 810473e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104740:	f04f 32ff 	mov.w	r2, #4294967295
 8104744:	69bb      	ldr	r3, [r7, #24]
 8104746:	fa02 f303 	lsl.w	r3, r2, r3
 810474a:	43da      	mvns	r2, r3
 810474c:	68bb      	ldr	r3, [r7, #8]
 810474e:	401a      	ands	r2, r3
 8104750:	697b      	ldr	r3, [r7, #20]
 8104752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104754:	f04f 31ff 	mov.w	r1, #4294967295
 8104758:	697b      	ldr	r3, [r7, #20]
 810475a:	fa01 f303 	lsl.w	r3, r1, r3
 810475e:	43d9      	mvns	r1, r3
 8104760:	687b      	ldr	r3, [r7, #4]
 8104762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104764:	4313      	orrs	r3, r2
         );
}
 8104766:	4618      	mov	r0, r3
 8104768:	3724      	adds	r7, #36	@ 0x24
 810476a:	46bd      	mov	sp, r7
 810476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104770:	4770      	bx	lr

08104772 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104772:	b580      	push	{r7, lr}
 8104774:	b082      	sub	sp, #8
 8104776:	af00      	add	r7, sp, #0
 8104778:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810477a:	6878      	ldr	r0, [r7, #4]
 810477c:	f7ff ff4c 	bl	8104618 <__NVIC_SetPriorityGrouping>
}
 8104780:	bf00      	nop
 8104782:	3708      	adds	r7, #8
 8104784:	46bd      	mov	sp, r7
 8104786:	bd80      	pop	{r7, pc}

08104788 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104788:	b580      	push	{r7, lr}
 810478a:	b086      	sub	sp, #24
 810478c:	af00      	add	r7, sp, #0
 810478e:	4603      	mov	r3, r0
 8104790:	60b9      	str	r1, [r7, #8]
 8104792:	607a      	str	r2, [r7, #4]
 8104794:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8104796:	f7ff ff63 	bl	8104660 <__NVIC_GetPriorityGrouping>
 810479a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810479c:	687a      	ldr	r2, [r7, #4]
 810479e:	68b9      	ldr	r1, [r7, #8]
 81047a0:	6978      	ldr	r0, [r7, #20]
 81047a2:	f7ff ffb3 	bl	810470c <NVIC_EncodePriority>
 81047a6:	4602      	mov	r2, r0
 81047a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81047ac:	4611      	mov	r1, r2
 81047ae:	4618      	mov	r0, r3
 81047b0:	f7ff ff82 	bl	81046b8 <__NVIC_SetPriority>
}
 81047b4:	bf00      	nop
 81047b6:	3718      	adds	r7, #24
 81047b8:	46bd      	mov	sp, r7
 81047ba:	bd80      	pop	{r7, pc}

081047bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81047bc:	b580      	push	{r7, lr}
 81047be:	b082      	sub	sp, #8
 81047c0:	af00      	add	r7, sp, #0
 81047c2:	4603      	mov	r3, r0
 81047c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81047c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81047ca:	4618      	mov	r0, r3
 81047cc:	f7ff ff56 	bl	810467c <__NVIC_EnableIRQ>
}
 81047d0:	bf00      	nop
 81047d2:	3708      	adds	r7, #8
 81047d4:	46bd      	mov	sp, r7
 81047d6:	bd80      	pop	{r7, pc}

081047d8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81047d8:	b480      	push	{r7}
 81047da:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81047dc:	4b07      	ldr	r3, [pc, #28]	@ (81047fc <HAL_GetCurrentCPUID+0x24>)
 81047de:	681b      	ldr	r3, [r3, #0]
 81047e0:	091b      	lsrs	r3, r3, #4
 81047e2:	f003 030f 	and.w	r3, r3, #15
 81047e6:	2b07      	cmp	r3, #7
 81047e8:	d101      	bne.n	81047ee <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81047ea:	2303      	movs	r3, #3
 81047ec:	e000      	b.n	81047f0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81047ee:	2301      	movs	r3, #1
  }
}
 81047f0:	4618      	mov	r0, r3
 81047f2:	46bd      	mov	sp, r7
 81047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047f8:	4770      	bx	lr
 81047fa:	bf00      	nop
 81047fc:	e000ed00 	.word	0xe000ed00

08104800 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8104800:	b580      	push	{r7, lr}
 8104802:	b084      	sub	sp, #16
 8104804:	af00      	add	r7, sp, #0
 8104806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	2b00      	cmp	r3, #0
 810480c:	d101      	bne.n	8104812 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 810480e:	2301      	movs	r3, #1
 8104810:	e0e7      	b.n	81049e2 <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8104812:	687b      	ldr	r3, [r7, #4]
 8104814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104818:	2b00      	cmp	r3, #0
 810481a:	d106      	bne.n	810482a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 810481c:	687b      	ldr	r3, [r7, #4]
 810481e:	2223      	movs	r2, #35	@ 0x23
 8104820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8104824:	6878      	ldr	r0, [r7, #4]
 8104826:	f7ff faa3 	bl	8103d70 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810482a:	4b70      	ldr	r3, [pc, #448]	@ (81049ec <HAL_ETH_Init+0x1ec>)
 810482c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104830:	4a6e      	ldr	r2, [pc, #440]	@ (81049ec <HAL_ETH_Init+0x1ec>)
 8104832:	f043 0302 	orr.w	r3, r3, #2
 8104836:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810483a:	4b6c      	ldr	r3, [pc, #432]	@ (81049ec <HAL_ETH_Init+0x1ec>)
 810483c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104840:	f003 0302 	and.w	r3, r3, #2
 8104844:	60bb      	str	r3, [r7, #8]
 8104846:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8104848:	687b      	ldr	r3, [r7, #4]
 810484a:	7a1b      	ldrb	r3, [r3, #8]
 810484c:	2b00      	cmp	r3, #0
 810484e:	d103      	bne.n	8104858 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8104850:	2000      	movs	r0, #0
 8104852:	f7ff fecd 	bl	81045f0 <HAL_SYSCFG_ETHInterfaceSelect>
 8104856:	e003      	b.n	8104860 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8104858:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 810485c:	f7ff fec8 	bl	81045f0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8104860:	4b63      	ldr	r3, [pc, #396]	@ (81049f0 <HAL_ETH_Init+0x1f0>)
 8104862:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8104864:	687b      	ldr	r3, [r7, #4]
 8104866:	681b      	ldr	r3, [r3, #0]
 8104868:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810486c:	681b      	ldr	r3, [r3, #0]
 810486e:	687a      	ldr	r2, [r7, #4]
 8104870:	6812      	ldr	r2, [r2, #0]
 8104872:	f043 0301 	orr.w	r3, r3, #1
 8104876:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810487a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 810487c:	f7ff feac 	bl	81045d8 <HAL_GetTick>
 8104880:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8104882:	e011      	b.n	81048a8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8104884:	f7ff fea8 	bl	81045d8 <HAL_GetTick>
 8104888:	4602      	mov	r2, r0
 810488a:	68fb      	ldr	r3, [r7, #12]
 810488c:	1ad3      	subs	r3, r2, r3
 810488e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8104892:	d909      	bls.n	81048a8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	2204      	movs	r2, #4
 8104898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 810489c:	687b      	ldr	r3, [r7, #4]
 810489e:	22e0      	movs	r2, #224	@ 0xe0
 81048a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 81048a4:	2301      	movs	r3, #1
 81048a6:	e09c      	b.n	81049e2 <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	681b      	ldr	r3, [r3, #0]
 81048ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81048b0:	681b      	ldr	r3, [r3, #0]
 81048b2:	f003 0301 	and.w	r3, r3, #1
 81048b6:	2b00      	cmp	r3, #0
 81048b8:	d1e4      	bne.n	8104884 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 81048ba:	6878      	ldr	r0, [r7, #4]
 81048bc:	f000 ff34 	bl	8105728 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 81048c0:	f002 f932 	bl	8106b28 <HAL_RCC_GetHCLKFreq>
 81048c4:	4603      	mov	r3, r0
 81048c6:	4a4b      	ldr	r2, [pc, #300]	@ (81049f4 <HAL_ETH_Init+0x1f4>)
 81048c8:	fba2 2303 	umull	r2, r3, r2, r3
 81048cc:	0c9a      	lsrs	r2, r3, #18
 81048ce:	687b      	ldr	r3, [r7, #4]
 81048d0:	681b      	ldr	r3, [r3, #0]
 81048d2:	3a01      	subs	r2, #1
 81048d4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 81048d8:	6878      	ldr	r0, [r7, #4]
 81048da:	f001 f931 	bl	8105b40 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 81048de:	687b      	ldr	r3, [r7, #4]
 81048e0:	681b      	ldr	r3, [r3, #0]
 81048e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81048e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 81048ea:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 81048ee:	687a      	ldr	r2, [r7, #4]
 81048f0:	6812      	ldr	r2, [r2, #0]
 81048f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81048f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81048fa:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 81048fe:	687b      	ldr	r3, [r7, #4]
 8104900:	695b      	ldr	r3, [r3, #20]
 8104902:	f003 0303 	and.w	r3, r3, #3
 8104906:	2b00      	cmp	r3, #0
 8104908:	d009      	beq.n	810491e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 810490a:	687b      	ldr	r3, [r7, #4]
 810490c:	2201      	movs	r2, #1
 810490e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8104912:	687b      	ldr	r3, [r7, #4]
 8104914:	22e0      	movs	r2, #224	@ 0xe0
 8104916:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 810491a:	2301      	movs	r3, #1
 810491c:	e061      	b.n	81049e2 <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 810491e:	687b      	ldr	r3, [r7, #4]
 8104920:	681b      	ldr	r3, [r3, #0]
 8104922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104926:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810492a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810492e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8104932:	687a      	ldr	r2, [r7, #4]
 8104934:	6952      	ldr	r2, [r2, #20]
 8104936:	0051      	lsls	r1, r2, #1
 8104938:	687a      	ldr	r2, [r7, #4]
 810493a:	6812      	ldr	r2, [r2, #0]
 810493c:	430b      	orrs	r3, r1
 810493e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104942:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8104946:	6878      	ldr	r0, [r7, #4]
 8104948:	f001 f997 	bl	8105c7a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 810494c:	6878      	ldr	r0, [r7, #4]
 810494e:	f001 f9dd 	bl	8105d0c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8104952:	687b      	ldr	r3, [r7, #4]
 8104954:	685b      	ldr	r3, [r3, #4]
 8104956:	3305      	adds	r3, #5
 8104958:	781b      	ldrb	r3, [r3, #0]
 810495a:	021a      	lsls	r2, r3, #8
 810495c:	687b      	ldr	r3, [r7, #4]
 810495e:	685b      	ldr	r3, [r3, #4]
 8104960:	3304      	adds	r3, #4
 8104962:	781b      	ldrb	r3, [r3, #0]
 8104964:	4619      	mov	r1, r3
 8104966:	687b      	ldr	r3, [r7, #4]
 8104968:	681b      	ldr	r3, [r3, #0]
 810496a:	430a      	orrs	r2, r1
 810496c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104970:	687b      	ldr	r3, [r7, #4]
 8104972:	685b      	ldr	r3, [r3, #4]
 8104974:	3303      	adds	r3, #3
 8104976:	781b      	ldrb	r3, [r3, #0]
 8104978:	061a      	lsls	r2, r3, #24
 810497a:	687b      	ldr	r3, [r7, #4]
 810497c:	685b      	ldr	r3, [r3, #4]
 810497e:	3302      	adds	r3, #2
 8104980:	781b      	ldrb	r3, [r3, #0]
 8104982:	041b      	lsls	r3, r3, #16
 8104984:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8104986:	687b      	ldr	r3, [r7, #4]
 8104988:	685b      	ldr	r3, [r3, #4]
 810498a:	3301      	adds	r3, #1
 810498c:	781b      	ldrb	r3, [r3, #0]
 810498e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104990:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8104992:	687b      	ldr	r3, [r7, #4]
 8104994:	685b      	ldr	r3, [r3, #4]
 8104996:	781b      	ldrb	r3, [r3, #0]
 8104998:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810499a:	687b      	ldr	r3, [r7, #4]
 810499c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810499e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81049a0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 81049a4:	687b      	ldr	r3, [r7, #4]
 81049a6:	681b      	ldr	r3, [r3, #0]
 81049a8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 81049ac:	687b      	ldr	r3, [r7, #4]
 81049ae:	681a      	ldr	r2, [r3, #0]
 81049b0:	4b11      	ldr	r3, [pc, #68]	@ (81049f8 <HAL_ETH_Init+0x1f8>)
 81049b2:	430b      	orrs	r3, r1
 81049b4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 81049b8:	687b      	ldr	r3, [r7, #4]
 81049ba:	681b      	ldr	r3, [r3, #0]
 81049bc:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 81049c0:	687a      	ldr	r2, [r7, #4]
 81049c2:	6812      	ldr	r2, [r2, #0]
 81049c4:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 81049c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 81049cc:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 81049d0:	687b      	ldr	r3, [r7, #4]
 81049d2:	2200      	movs	r2, #0
 81049d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 81049d8:	687b      	ldr	r3, [r7, #4]
 81049da:	2210      	movs	r2, #16
 81049dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81049e0:	2300      	movs	r3, #0
}
 81049e2:	4618      	mov	r0, r3
 81049e4:	3710      	adds	r7, #16
 81049e6:	46bd      	mov	sp, r7
 81049e8:	bd80      	pop	{r7, pc}
 81049ea:	bf00      	nop
 81049ec:	58024400 	.word	0x58024400
 81049f0:	58000400 	.word	0x58000400
 81049f4:	431bde83 	.word	0x431bde83
 81049f8:	0c020060 	.word	0x0c020060

081049fc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 81049fc:	b580      	push	{r7, lr}
 81049fe:	b082      	sub	sp, #8
 8104a00:	af00      	add	r7, sp, #0
 8104a02:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8104a04:	687b      	ldr	r3, [r7, #4]
 8104a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104a0a:	2b10      	cmp	r3, #16
 8104a0c:	d166      	bne.n	8104adc <HAL_ETH_Start_IT+0xe0>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8104a0e:	687b      	ldr	r3, [r7, #4]
 8104a10:	2223      	movs	r2, #35	@ 0x23
 8104a12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8104a16:	687b      	ldr	r3, [r7, #4]
 8104a18:	2201      	movs	r2, #1
 8104a1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8104a1c:	687b      	ldr	r3, [r7, #4]
 8104a1e:	2204      	movs	r2, #4
 8104a20:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8104a22:	6878      	ldr	r0, [r7, #4]
 8104a24:	f000 f9e5 	bl	8104df2 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8104a28:	687b      	ldr	r3, [r7, #4]
 8104a2a:	681b      	ldr	r3, [r3, #0]
 8104a2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104a30:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8104a34:	687a      	ldr	r2, [r7, #4]
 8104a36:	6812      	ldr	r2, [r2, #0]
 8104a38:	f043 0301 	orr.w	r3, r3, #1
 8104a3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104a40:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8104a44:	687b      	ldr	r3, [r7, #4]
 8104a46:	681b      	ldr	r3, [r3, #0]
 8104a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104a4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8104a50:	687a      	ldr	r2, [r7, #4]
 8104a52:	6812      	ldr	r2, [r2, #0]
 8104a54:	f043 0301 	orr.w	r3, r3, #1
 8104a58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104a5c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8104a60:	687b      	ldr	r3, [r7, #4]
 8104a62:	681b      	ldr	r3, [r3, #0]
 8104a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104a68:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8104a6c:	687a      	ldr	r2, [r7, #4]
 8104a6e:	6812      	ldr	r2, [r2, #0]
 8104a70:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8104a74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104a78:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8104a7c:	687b      	ldr	r3, [r7, #4]
 8104a7e:	681b      	ldr	r3, [r3, #0]
 8104a80:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8104a84:	687b      	ldr	r3, [r7, #4]
 8104a86:	681b      	ldr	r3, [r3, #0]
 8104a88:	f042 0201 	orr.w	r2, r2, #1
 8104a8c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8104a90:	687b      	ldr	r3, [r7, #4]
 8104a92:	681b      	ldr	r3, [r3, #0]
 8104a94:	681a      	ldr	r2, [r3, #0]
 8104a96:	687b      	ldr	r3, [r7, #4]
 8104a98:	681b      	ldr	r3, [r3, #0]
 8104a9a:	f042 0202 	orr.w	r2, r2, #2
 8104a9e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	681b      	ldr	r3, [r3, #0]
 8104aa4:	681a      	ldr	r2, [r3, #0]
 8104aa6:	687b      	ldr	r3, [r7, #4]
 8104aa8:	681b      	ldr	r3, [r3, #0]
 8104aaa:	f042 0201 	orr.w	r2, r2, #1
 8104aae:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8104ab0:	687b      	ldr	r3, [r7, #4]
 8104ab2:	681b      	ldr	r3, [r3, #0]
 8104ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104ab8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8104abc:	687a      	ldr	r2, [r7, #4]
 8104abe:	6812      	ldr	r2, [r2, #0]
 8104ac0:	f443 4350 	orr.w	r3, r3, #53248	@ 0xd000
 8104ac4:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8104ac8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104acc:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8104ad0:	687b      	ldr	r3, [r7, #4]
 8104ad2:	2223      	movs	r2, #35	@ 0x23
 8104ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8104ad8:	2300      	movs	r3, #0
 8104ada:	e000      	b.n	8104ade <HAL_ETH_Start_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8104adc:	2301      	movs	r3, #1
  }
}
 8104ade:	4618      	mov	r0, r3
 8104ae0:	3708      	adds	r7, #8
 8104ae2:	46bd      	mov	sp, r7
 8104ae4:	bd80      	pop	{r7, pc}

08104ae6 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8104ae6:	b480      	push	{r7}
 8104ae8:	b085      	sub	sp, #20
 8104aea:	af00      	add	r7, sp, #0
 8104aec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8104aee:	687b      	ldr	r3, [r7, #4]
 8104af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104af4:	2b23      	cmp	r3, #35	@ 0x23
 8104af6:	d167      	bne.n	8104bc8 <HAL_ETH_Stop_IT+0xe2>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8104af8:	687b      	ldr	r3, [r7, #4]
 8104afa:	2223      	movs	r2, #35	@ 0x23
 8104afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8104b00:	687b      	ldr	r3, [r7, #4]
 8104b02:	681b      	ldr	r3, [r3, #0]
 8104b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104b08:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8104b0c:	687a      	ldr	r2, [r7, #4]
 8104b0e:	6812      	ldr	r2, [r2, #0]
 8104b10:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8104b14:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8104b18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104b1c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8104b20:	687b      	ldr	r3, [r7, #4]
 8104b22:	681b      	ldr	r3, [r3, #0]
 8104b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104b28:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8104b2c:	687a      	ldr	r2, [r7, #4]
 8104b2e:	6812      	ldr	r2, [r2, #0]
 8104b30:	f023 0301 	bic.w	r3, r3, #1
 8104b34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104b38:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8104b3c:	687b      	ldr	r3, [r7, #4]
 8104b3e:	681b      	ldr	r3, [r3, #0]
 8104b40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104b44:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8104b48:	687a      	ldr	r2, [r7, #4]
 8104b4a:	6812      	ldr	r2, [r2, #0]
 8104b4c:	f023 0301 	bic.w	r3, r3, #1
 8104b50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104b54:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8104b58:	687b      	ldr	r3, [r7, #4]
 8104b5a:	681b      	ldr	r3, [r3, #0]
 8104b5c:	681a      	ldr	r2, [r3, #0]
 8104b5e:	687b      	ldr	r3, [r7, #4]
 8104b60:	681b      	ldr	r3, [r3, #0]
 8104b62:	f022 0201 	bic.w	r2, r2, #1
 8104b66:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8104b68:	687b      	ldr	r3, [r7, #4]
 8104b6a:	681b      	ldr	r3, [r3, #0]
 8104b6c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8104b70:	687b      	ldr	r3, [r7, #4]
 8104b72:	681b      	ldr	r3, [r3, #0]
 8104b74:	f042 0201 	orr.w	r2, r2, #1
 8104b78:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	681b      	ldr	r3, [r3, #0]
 8104b80:	681a      	ldr	r2, [r3, #0]
 8104b82:	687b      	ldr	r3, [r7, #4]
 8104b84:	681b      	ldr	r3, [r3, #0]
 8104b86:	f022 0202 	bic.w	r2, r2, #2
 8104b8a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8104b8c:	2300      	movs	r3, #0
 8104b8e:	60fb      	str	r3, [r7, #12]
 8104b90:	e00e      	b.n	8104bb0 <HAL_ETH_Stop_IT+0xca>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8104b92:	687b      	ldr	r3, [r7, #4]
 8104b94:	68fa      	ldr	r2, [r7, #12]
 8104b96:	3212      	adds	r2, #18
 8104b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104b9c:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8104b9e:	68bb      	ldr	r3, [r7, #8]
 8104ba0:	68db      	ldr	r3, [r3, #12]
 8104ba2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8104ba6:	68bb      	ldr	r3, [r7, #8]
 8104ba8:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8104baa:	68fb      	ldr	r3, [r7, #12]
 8104bac:	3301      	adds	r3, #1
 8104bae:	60fb      	str	r3, [r7, #12]
 8104bb0:	68fb      	ldr	r3, [r7, #12]
 8104bb2:	2b03      	cmp	r3, #3
 8104bb4:	d9ed      	bls.n	8104b92 <HAL_ETH_Stop_IT+0xac>
    }

    heth->RxDescList.ItMode = 0U;
 8104bb6:	687b      	ldr	r3, [r7, #4]
 8104bb8:	2200      	movs	r2, #0
 8104bba:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8104bbc:	687b      	ldr	r3, [r7, #4]
 8104bbe:	2210      	movs	r2, #16
 8104bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8104bc4:	2300      	movs	r3, #0
 8104bc6:	e000      	b.n	8104bca <HAL_ETH_Stop_IT+0xe4>
  }
  else
  {
    return HAL_ERROR;
 8104bc8:	2301      	movs	r3, #1
  }
}
 8104bca:	4618      	mov	r0, r3
 8104bcc:	3714      	adds	r7, #20
 8104bce:	46bd      	mov	sp, r7
 8104bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bd4:	4770      	bx	lr

08104bd6 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8104bd6:	b580      	push	{r7, lr}
 8104bd8:	b082      	sub	sp, #8
 8104bda:	af00      	add	r7, sp, #0
 8104bdc:	6078      	str	r0, [r7, #4]
 8104bde:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8104be0:	683b      	ldr	r3, [r7, #0]
 8104be2:	2b00      	cmp	r3, #0
 8104be4:	d109      	bne.n	8104bfa <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8104be6:	687b      	ldr	r3, [r7, #4]
 8104be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104bec:	f043 0201 	orr.w	r2, r3, #1
 8104bf0:	687b      	ldr	r3, [r7, #4]
 8104bf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8104bf6:	2301      	movs	r3, #1
 8104bf8:	e03a      	b.n	8104c70 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8104bfa:	687b      	ldr	r3, [r7, #4]
 8104bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104c00:	2b23      	cmp	r3, #35	@ 0x23
 8104c02:	d134      	bne.n	8104c6e <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8104c04:	683b      	ldr	r3, [r7, #0]
 8104c06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104c08:	687b      	ldr	r3, [r7, #4]
 8104c0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8104c0c:	2201      	movs	r2, #1
 8104c0e:	6839      	ldr	r1, [r7, #0]
 8104c10:	6878      	ldr	r0, [r7, #4]
 8104c12:	f001 f8d8 	bl	8105dc6 <ETH_Prepare_Tx_Descriptors>
 8104c16:	4603      	mov	r3, r0
 8104c18:	2b00      	cmp	r3, #0
 8104c1a:	d009      	beq.n	8104c30 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8104c1c:	687b      	ldr	r3, [r7, #4]
 8104c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104c22:	f043 0202 	orr.w	r2, r3, #2
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8104c2c:	2301      	movs	r3, #1
 8104c2e:	e01f      	b.n	8104c70 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8104c30:	f3bf 8f4f 	dsb	sy
}
 8104c34:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8104c36:	687b      	ldr	r3, [r7, #4]
 8104c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104c3a:	1c5a      	adds	r2, r3, #1
 8104c3c:	687b      	ldr	r3, [r7, #4]
 8104c3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8104c40:	687b      	ldr	r3, [r7, #4]
 8104c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104c44:	2b03      	cmp	r3, #3
 8104c46:	d904      	bls.n	8104c52 <HAL_ETH_Transmit_IT+0x7c>
 8104c48:	687b      	ldr	r3, [r7, #4]
 8104c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104c4c:	1f1a      	subs	r2, r3, #4
 8104c4e:	687b      	ldr	r3, [r7, #4]
 8104c50:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8104c52:	687b      	ldr	r3, [r7, #4]
 8104c54:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8104c56:	687b      	ldr	r3, [r7, #4]
 8104c58:	681a      	ldr	r2, [r3, #0]
 8104c5a:	687b      	ldr	r3, [r7, #4]
 8104c5c:	3106      	adds	r1, #6
 8104c5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8104c62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104c66:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8104c6a:	2300      	movs	r3, #0
 8104c6c:	e000      	b.n	8104c70 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8104c6e:	2301      	movs	r3, #1
  }
}
 8104c70:	4618      	mov	r0, r3
 8104c72:	3708      	adds	r7, #8
 8104c74:	46bd      	mov	sp, r7
 8104c76:	bd80      	pop	{r7, pc}

08104c78 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8104c78:	b580      	push	{r7, lr}
 8104c7a:	b088      	sub	sp, #32
 8104c7c:	af00      	add	r7, sp, #0
 8104c7e:	6078      	str	r0, [r7, #4]
 8104c80:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8104c82:	2300      	movs	r3, #0
 8104c84:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8104c86:	2300      	movs	r3, #0
 8104c88:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8104c8a:	683b      	ldr	r3, [r7, #0]
 8104c8c:	2b00      	cmp	r3, #0
 8104c8e:	d109      	bne.n	8104ca4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8104c90:	687b      	ldr	r3, [r7, #4]
 8104c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104c96:	f043 0201 	orr.w	r2, r3, #1
 8104c9a:	687b      	ldr	r3, [r7, #4]
 8104c9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8104ca0:	2301      	movs	r3, #1
 8104ca2:	e0a2      	b.n	8104dea <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8104ca4:	687b      	ldr	r3, [r7, #4]
 8104ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104caa:	2b23      	cmp	r3, #35	@ 0x23
 8104cac:	d001      	beq.n	8104cb2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8104cae:	2301      	movs	r3, #1
 8104cb0:	e09b      	b.n	8104dea <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8104cb2:	687b      	ldr	r3, [r7, #4]
 8104cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104cb6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8104cb8:	687b      	ldr	r3, [r7, #4]
 8104cba:	69fa      	ldr	r2, [r7, #28]
 8104cbc:	3212      	adds	r2, #18
 8104cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104cc2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8104cc4:	687b      	ldr	r3, [r7, #4]
 8104cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104cc8:	f1c3 0304 	rsb	r3, r3, #4
 8104ccc:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8104cce:	e064      	b.n	8104d9a <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8104cd0:	69bb      	ldr	r3, [r7, #24]
 8104cd2:	68db      	ldr	r3, [r3, #12]
 8104cd4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8104cd8:	2b00      	cmp	r3, #0
 8104cda:	d007      	beq.n	8104cec <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8104cdc:	69bb      	ldr	r3, [r7, #24]
 8104cde:	685a      	ldr	r2, [r3, #4]
 8104ce0:	687b      	ldr	r3, [r7, #4]
 8104ce2:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8104ce4:	69bb      	ldr	r3, [r7, #24]
 8104ce6:	681a      	ldr	r2, [r3, #0]
 8104ce8:	687b      	ldr	r3, [r7, #4]
 8104cea:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8104cec:	69bb      	ldr	r3, [r7, #24]
 8104cee:	68db      	ldr	r3, [r3, #12]
 8104cf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104cf4:	2b00      	cmp	r3, #0
 8104cf6:	d103      	bne.n	8104d00 <HAL_ETH_ReadData+0x88>
 8104cf8:	687b      	ldr	r3, [r7, #4]
 8104cfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8104cfc:	2b00      	cmp	r3, #0
 8104cfe:	d03a      	beq.n	8104d76 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8104d00:	69bb      	ldr	r3, [r7, #24]
 8104d02:	68db      	ldr	r3, [r3, #12]
 8104d04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104d08:	2b00      	cmp	r3, #0
 8104d0a:	d005      	beq.n	8104d18 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8104d0c:	687b      	ldr	r3, [r7, #4]
 8104d0e:	2200      	movs	r2, #0
 8104d10:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8104d12:	687b      	ldr	r3, [r7, #4]
 8104d14:	2200      	movs	r2, #0
 8104d16:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8104d18:	69bb      	ldr	r3, [r7, #24]
 8104d1a:	68db      	ldr	r3, [r3, #12]
 8104d1c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8104d20:	687b      	ldr	r3, [r7, #4]
 8104d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104d24:	1ad3      	subs	r3, r2, r3
 8104d26:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8104d28:	69bb      	ldr	r3, [r7, #24]
 8104d2a:	68db      	ldr	r3, [r3, #12]
 8104d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8104d30:	2b00      	cmp	r3, #0
 8104d32:	d005      	beq.n	8104d40 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8104d34:	69bb      	ldr	r3, [r7, #24]
 8104d36:	68da      	ldr	r2, [r3, #12]
 8104d38:	687b      	ldr	r3, [r7, #4]
 8104d3a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8104d3c:	2301      	movs	r3, #1
 8104d3e:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8104d46:	687b      	ldr	r3, [r7, #4]
 8104d48:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8104d4c:	69bb      	ldr	r3, [r7, #24]
 8104d4e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8104d50:	461a      	mov	r2, r3
 8104d52:	68bb      	ldr	r3, [r7, #8]
 8104d54:	b29b      	uxth	r3, r3
 8104d56:	f7ff fa35 	bl	81041c4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8104d5a:	687b      	ldr	r3, [r7, #4]
 8104d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104d5e:	1c5a      	adds	r2, r3, #1
 8104d60:	687b      	ldr	r3, [r7, #4]
 8104d62:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8104d68:	68bb      	ldr	r3, [r7, #8]
 8104d6a:	441a      	add	r2, r3
 8104d6c:	687b      	ldr	r3, [r7, #4]
 8104d6e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8104d70:	69bb      	ldr	r3, [r7, #24]
 8104d72:	2200      	movs	r2, #0
 8104d74:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8104d76:	69fb      	ldr	r3, [r7, #28]
 8104d78:	3301      	adds	r3, #1
 8104d7a:	61fb      	str	r3, [r7, #28]
 8104d7c:	69fb      	ldr	r3, [r7, #28]
 8104d7e:	2b03      	cmp	r3, #3
 8104d80:	d902      	bls.n	8104d88 <HAL_ETH_ReadData+0x110>
 8104d82:	69fb      	ldr	r3, [r7, #28]
 8104d84:	3b04      	subs	r3, #4
 8104d86:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8104d88:	687b      	ldr	r3, [r7, #4]
 8104d8a:	69fa      	ldr	r2, [r7, #28]
 8104d8c:	3212      	adds	r2, #18
 8104d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104d92:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8104d94:	697b      	ldr	r3, [r7, #20]
 8104d96:	3301      	adds	r3, #1
 8104d98:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8104d9a:	69bb      	ldr	r3, [r7, #24]
 8104d9c:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8104d9e:	2b00      	cmp	r3, #0
 8104da0:	db06      	blt.n	8104db0 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8104da2:	697a      	ldr	r2, [r7, #20]
 8104da4:	68fb      	ldr	r3, [r7, #12]
 8104da6:	429a      	cmp	r2, r3
 8104da8:	d202      	bcs.n	8104db0 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8104daa:	7cfb      	ldrb	r3, [r7, #19]
 8104dac:	2b00      	cmp	r3, #0
 8104dae:	d08f      	beq.n	8104cd0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8104db0:	687b      	ldr	r3, [r7, #4]
 8104db2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8104db4:	697b      	ldr	r3, [r7, #20]
 8104db6:	441a      	add	r2, r3
 8104db8:	687b      	ldr	r3, [r7, #4]
 8104dba:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8104dbc:	687b      	ldr	r3, [r7, #4]
 8104dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104dc0:	2b00      	cmp	r3, #0
 8104dc2:	d002      	beq.n	8104dca <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8104dc4:	6878      	ldr	r0, [r7, #4]
 8104dc6:	f000 f814 	bl	8104df2 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	69fa      	ldr	r2, [r7, #28]
 8104dce:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8104dd0:	7cfb      	ldrb	r3, [r7, #19]
 8104dd2:	2b01      	cmp	r3, #1
 8104dd4:	d108      	bne.n	8104de8 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8104dd6:	687b      	ldr	r3, [r7, #4]
 8104dd8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8104dda:	683b      	ldr	r3, [r7, #0]
 8104ddc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	2200      	movs	r2, #0
 8104de2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8104de4:	2300      	movs	r3, #0
 8104de6:	e000      	b.n	8104dea <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8104de8:	2301      	movs	r3, #1
}
 8104dea:	4618      	mov	r0, r3
 8104dec:	3720      	adds	r7, #32
 8104dee:	46bd      	mov	sp, r7
 8104df0:	bd80      	pop	{r7, pc}

08104df2 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8104df2:	b580      	push	{r7, lr}
 8104df4:	b088      	sub	sp, #32
 8104df6:	af00      	add	r7, sp, #0
 8104df8:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8104dfa:	2300      	movs	r3, #0
 8104dfc:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8104dfe:	2301      	movs	r3, #1
 8104e00:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8104e02:	687b      	ldr	r3, [r7, #4]
 8104e04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104e06:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8104e08:	687b      	ldr	r3, [r7, #4]
 8104e0a:	69fa      	ldr	r2, [r7, #28]
 8104e0c:	3212      	adds	r2, #18
 8104e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104e12:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8104e14:	687b      	ldr	r3, [r7, #4]
 8104e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104e18:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8104e1a:	e038      	b.n	8104e8e <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8104e1c:	697b      	ldr	r3, [r7, #20]
 8104e1e:	691b      	ldr	r3, [r3, #16]
 8104e20:	2b00      	cmp	r3, #0
 8104e22:	d112      	bne.n	8104e4a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8104e24:	f107 0308 	add.w	r3, r7, #8
 8104e28:	4618      	mov	r0, r3
 8104e2a:	f7ff f99b 	bl	8104164 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8104e2e:	68bb      	ldr	r3, [r7, #8]
 8104e30:	2b00      	cmp	r3, #0
 8104e32:	d102      	bne.n	8104e3a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8104e34:	2300      	movs	r3, #0
 8104e36:	74fb      	strb	r3, [r7, #19]
 8104e38:	e007      	b.n	8104e4a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8104e3a:	68bb      	ldr	r3, [r7, #8]
 8104e3c:	461a      	mov	r2, r3
 8104e3e:	697b      	ldr	r3, [r7, #20]
 8104e40:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8104e42:	68bb      	ldr	r3, [r7, #8]
 8104e44:	461a      	mov	r2, r3
 8104e46:	697b      	ldr	r3, [r7, #20]
 8104e48:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8104e4a:	7cfb      	ldrb	r3, [r7, #19]
 8104e4c:	2b00      	cmp	r3, #0
 8104e4e:	d01e      	beq.n	8104e8e <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8104e50:	687b      	ldr	r3, [r7, #4]
 8104e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104e54:	2b00      	cmp	r3, #0
 8104e56:	d004      	beq.n	8104e62 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8104e58:	697b      	ldr	r3, [r7, #20]
 8104e5a:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8104e5e:	60da      	str	r2, [r3, #12]
 8104e60:	e003      	b.n	8104e6a <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8104e62:	697b      	ldr	r3, [r7, #20]
 8104e64:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8104e68:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8104e6a:	69fb      	ldr	r3, [r7, #28]
 8104e6c:	3301      	adds	r3, #1
 8104e6e:	61fb      	str	r3, [r7, #28]
 8104e70:	69fb      	ldr	r3, [r7, #28]
 8104e72:	2b03      	cmp	r3, #3
 8104e74:	d902      	bls.n	8104e7c <ETH_UpdateDescriptor+0x8a>
 8104e76:	69fb      	ldr	r3, [r7, #28]
 8104e78:	3b04      	subs	r3, #4
 8104e7a:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8104e7c:	687b      	ldr	r3, [r7, #4]
 8104e7e:	69fa      	ldr	r2, [r7, #28]
 8104e80:	3212      	adds	r2, #18
 8104e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104e86:	617b      	str	r3, [r7, #20]
      desccount--;
 8104e88:	69bb      	ldr	r3, [r7, #24]
 8104e8a:	3b01      	subs	r3, #1
 8104e8c:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8104e8e:	69bb      	ldr	r3, [r7, #24]
 8104e90:	2b00      	cmp	r3, #0
 8104e92:	d002      	beq.n	8104e9a <ETH_UpdateDescriptor+0xa8>
 8104e94:	7cfb      	ldrb	r3, [r7, #19]
 8104e96:	2b00      	cmp	r3, #0
 8104e98:	d1c0      	bne.n	8104e1c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104e9e:	69ba      	ldr	r2, [r7, #24]
 8104ea0:	429a      	cmp	r2, r3
 8104ea2:	d01b      	beq.n	8104edc <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8104ea4:	69fb      	ldr	r3, [r7, #28]
 8104ea6:	3301      	adds	r3, #1
 8104ea8:	f003 0303 	and.w	r3, r3, #3
 8104eac:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8104eae:	f3bf 8f5f 	dmb	sy
}
 8104eb2:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	6919      	ldr	r1, [r3, #16]
 8104eb8:	68fa      	ldr	r2, [r7, #12]
 8104eba:	4613      	mov	r3, r2
 8104ebc:	005b      	lsls	r3, r3, #1
 8104ebe:	4413      	add	r3, r2
 8104ec0:	00db      	lsls	r3, r3, #3
 8104ec2:	18ca      	adds	r2, r1, r3
 8104ec4:	687b      	ldr	r3, [r7, #4]
 8104ec6:	681b      	ldr	r3, [r3, #0]
 8104ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104ecc:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8104ed0:	687b      	ldr	r3, [r7, #4]
 8104ed2:	69fa      	ldr	r2, [r7, #28]
 8104ed4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	69ba      	ldr	r2, [r7, #24]
 8104eda:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8104edc:	bf00      	nop
 8104ede:	3720      	adds	r7, #32
 8104ee0:	46bd      	mov	sp, r7
 8104ee2:	bd80      	pop	{r7, pc}

08104ee4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8104ee4:	b580      	push	{r7, lr}
 8104ee6:	b086      	sub	sp, #24
 8104ee8:	af00      	add	r7, sp, #0
 8104eea:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8104eec:	687b      	ldr	r3, [r7, #4]
 8104eee:	3318      	adds	r3, #24
 8104ef0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8104ef2:	68bb      	ldr	r3, [r7, #8]
 8104ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104ef6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8104ef8:	68bb      	ldr	r3, [r7, #8]
 8104efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104efc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8104efe:	2301      	movs	r3, #1
 8104f00:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8104f02:	e047      	b.n	8104f94 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8104f04:	2301      	movs	r3, #1
 8104f06:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8104f08:	697b      	ldr	r3, [r7, #20]
 8104f0a:	3b01      	subs	r3, #1
 8104f0c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8104f0e:	68ba      	ldr	r2, [r7, #8]
 8104f10:	693b      	ldr	r3, [r7, #16]
 8104f12:	3304      	adds	r3, #4
 8104f14:	009b      	lsls	r3, r3, #2
 8104f16:	4413      	add	r3, r2
 8104f18:	685b      	ldr	r3, [r3, #4]
 8104f1a:	2b00      	cmp	r3, #0
 8104f1c:	d10a      	bne.n	8104f34 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8104f1e:	693b      	ldr	r3, [r7, #16]
 8104f20:	3301      	adds	r3, #1
 8104f22:	613b      	str	r3, [r7, #16]
 8104f24:	693b      	ldr	r3, [r7, #16]
 8104f26:	2b03      	cmp	r3, #3
 8104f28:	d902      	bls.n	8104f30 <HAL_ETH_ReleaseTxPacket+0x4c>
 8104f2a:	693b      	ldr	r3, [r7, #16]
 8104f2c:	3b04      	subs	r3, #4
 8104f2e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8104f30:	2300      	movs	r3, #0
 8104f32:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8104f34:	7bbb      	ldrb	r3, [r7, #14]
 8104f36:	2b00      	cmp	r3, #0
 8104f38:	d02c      	beq.n	8104f94 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8104f3a:	687b      	ldr	r3, [r7, #4]
 8104f3c:	68d9      	ldr	r1, [r3, #12]
 8104f3e:	693a      	ldr	r2, [r7, #16]
 8104f40:	4613      	mov	r3, r2
 8104f42:	005b      	lsls	r3, r3, #1
 8104f44:	4413      	add	r3, r2
 8104f46:	00db      	lsls	r3, r3, #3
 8104f48:	440b      	add	r3, r1
 8104f4a:	68db      	ldr	r3, [r3, #12]
 8104f4c:	2b00      	cmp	r3, #0
 8104f4e:	db1f      	blt.n	8104f90 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8104f50:	68ba      	ldr	r2, [r7, #8]
 8104f52:	693b      	ldr	r3, [r7, #16]
 8104f54:	3304      	adds	r3, #4
 8104f56:	009b      	lsls	r3, r3, #2
 8104f58:	4413      	add	r3, r2
 8104f5a:	685b      	ldr	r3, [r3, #4]
 8104f5c:	4618      	mov	r0, r3
 8104f5e:	f7ff f971 	bl	8104244 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8104f62:	68ba      	ldr	r2, [r7, #8]
 8104f64:	693b      	ldr	r3, [r7, #16]
 8104f66:	3304      	adds	r3, #4
 8104f68:	009b      	lsls	r3, r3, #2
 8104f6a:	4413      	add	r3, r2
 8104f6c:	2200      	movs	r2, #0
 8104f6e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8104f70:	693b      	ldr	r3, [r7, #16]
 8104f72:	3301      	adds	r3, #1
 8104f74:	613b      	str	r3, [r7, #16]
 8104f76:	693b      	ldr	r3, [r7, #16]
 8104f78:	2b03      	cmp	r3, #3
 8104f7a:	d902      	bls.n	8104f82 <HAL_ETH_ReleaseTxPacket+0x9e>
 8104f7c:	693b      	ldr	r3, [r7, #16]
 8104f7e:	3b04      	subs	r3, #4
 8104f80:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8104f82:	68bb      	ldr	r3, [r7, #8]
 8104f84:	697a      	ldr	r2, [r7, #20]
 8104f86:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8104f88:	68bb      	ldr	r3, [r7, #8]
 8104f8a:	693a      	ldr	r2, [r7, #16]
 8104f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8104f8e:	e001      	b.n	8104f94 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8104f90:	2300      	movs	r3, #0
 8104f92:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8104f94:	697b      	ldr	r3, [r7, #20]
 8104f96:	2b00      	cmp	r3, #0
 8104f98:	d002      	beq.n	8104fa0 <HAL_ETH_ReleaseTxPacket+0xbc>
 8104f9a:	7bfb      	ldrb	r3, [r7, #15]
 8104f9c:	2b00      	cmp	r3, #0
 8104f9e:	d1b1      	bne.n	8104f04 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8104fa0:	2300      	movs	r3, #0
}
 8104fa2:	4618      	mov	r0, r3
 8104fa4:	3718      	adds	r7, #24
 8104fa6:	46bd      	mov	sp, r7
 8104fa8:	bd80      	pop	{r7, pc}
	...

08104fac <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8104fac:	b580      	push	{r7, lr}
 8104fae:	b088      	sub	sp, #32
 8104fb0:	af00      	add	r7, sp, #0
 8104fb2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8104fb4:	687b      	ldr	r3, [r7, #4]
 8104fb6:	681b      	ldr	r3, [r3, #0]
 8104fb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8104fbc:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104fc6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8104fca:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8104fcc:	687b      	ldr	r3, [r7, #4]
 8104fce:	681b      	ldr	r3, [r3, #0]
 8104fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104fd4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8104fd8:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8104fda:	4b77      	ldr	r3, [pc, #476]	@ (81051b8 <HAL_ETH_IRQHandler+0x20c>)
 8104fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104fde:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 8104fe0:	4b76      	ldr	r3, [pc, #472]	@ (81051bc <HAL_ETH_IRQHandler+0x210>)
 8104fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104fe4:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8104fe6:	69bb      	ldr	r3, [r7, #24]
 8104fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104fec:	2b00      	cmp	r3, #0
 8104fee:	d010      	beq.n	8105012 <HAL_ETH_IRQHandler+0x66>
 8104ff0:	697b      	ldr	r3, [r7, #20]
 8104ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104ff6:	2b00      	cmp	r3, #0
 8104ff8:	d00b      	beq.n	8105012 <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8104ffa:	687b      	ldr	r3, [r7, #4]
 8104ffc:	681b      	ldr	r3, [r3, #0]
 8104ffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105002:	461a      	mov	r2, r3
 8105004:	f248 0340 	movw	r3, #32832	@ 0x8040
 8105008:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 810500c:	6878      	ldr	r0, [r7, #4]
 810500e:	f7fe fbef 	bl	81037f0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8105012:	69bb      	ldr	r3, [r7, #24]
 8105014:	f003 0301 	and.w	r3, r3, #1
 8105018:	2b00      	cmp	r3, #0
 810501a:	d010      	beq.n	810503e <HAL_ETH_IRQHandler+0x92>
 810501c:	697b      	ldr	r3, [r7, #20]
 810501e:	f003 0301 	and.w	r3, r3, #1
 8105022:	2b00      	cmp	r3, #0
 8105024:	d00b      	beq.n	810503e <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8105026:	687b      	ldr	r3, [r7, #4]
 8105028:	681b      	ldr	r3, [r3, #0]
 810502a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810502e:	461a      	mov	r2, r3
 8105030:	f248 0301 	movw	r3, #32769	@ 0x8001
 8105034:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8105038:	6878      	ldr	r0, [r7, #4]
 810503a:	f7fe fbe9 	bl	8103810 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 810503e:	69bb      	ldr	r3, [r7, #24]
 8105040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8105044:	2b00      	cmp	r3, #0
 8105046:	d047      	beq.n	81050d8 <HAL_ETH_IRQHandler+0x12c>
 8105048:	697b      	ldr	r3, [r7, #20]
 810504a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810504e:	2b00      	cmp	r3, #0
 8105050:	d042      	beq.n	81050d8 <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8105052:	687b      	ldr	r3, [r7, #4]
 8105054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105058:	f043 0208 	orr.w	r2, r3, #8
 810505c:	687b      	ldr	r3, [r7, #4]
 810505e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8105062:	69bb      	ldr	r3, [r7, #24]
 8105064:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8105068:	2b00      	cmp	r3, #0
 810506a:	d01e      	beq.n	81050aa <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 810506c:	687b      	ldr	r3, [r7, #4]
 810506e:	681b      	ldr	r3, [r3, #0]
 8105070:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105074:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8105078:	f241 1302 	movw	r3, #4354	@ 0x1102
 810507c:	4013      	ands	r3, r2
 810507e:	687a      	ldr	r2, [r7, #4]
 8105080:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8105084:	687b      	ldr	r3, [r7, #4]
 8105086:	681b      	ldr	r3, [r3, #0]
 8105088:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810508c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8105090:	687a      	ldr	r2, [r7, #4]
 8105092:	6812      	ldr	r2, [r2, #0]
 8105094:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8105098:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810509c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 81050a0:	687b      	ldr	r3, [r7, #4]
 81050a2:	22e0      	movs	r2, #224	@ 0xe0
 81050a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 81050a8:	e013      	b.n	81050d2 <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 81050aa:	687b      	ldr	r3, [r7, #4]
 81050ac:	681b      	ldr	r3, [r3, #0]
 81050ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81050b2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 81050b6:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 81050ba:	687b      	ldr	r3, [r7, #4]
 81050bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 81050c0:	687b      	ldr	r3, [r7, #4]
 81050c2:	681b      	ldr	r3, [r3, #0]
 81050c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81050c8:	461a      	mov	r2, r3
 81050ca:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 81050ce:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 81050d2:	6878      	ldr	r0, [r7, #4]
 81050d4:	f7fe fbac 	bl	8103830 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 81050d8:	69fb      	ldr	r3, [r7, #28]
 81050da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81050de:	2b00      	cmp	r3, #0
 81050e0:	d104      	bne.n	81050ec <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 81050e2:	69fb      	ldr	r3, [r7, #28]
 81050e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 81050e8:	2b00      	cmp	r3, #0
 81050ea:	d019      	beq.n	8105120 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 81050ec:	687b      	ldr	r3, [r7, #4]
 81050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81050f2:	f043 0210 	orr.w	r2, r3, #16
 81050f6:	687b      	ldr	r3, [r7, #4]
 81050f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 81050fc:	687b      	ldr	r3, [r7, #4]
 81050fe:	681b      	ldr	r3, [r3, #0]
 8105100:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8105104:	687b      	ldr	r3, [r7, #4]
 8105106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 810510a:	687b      	ldr	r3, [r7, #4]
 810510c:	22e0      	movs	r2, #224	@ 0xe0
 810510e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8105112:	6878      	ldr	r0, [r7, #4]
 8105114:	f7fe fb8c 	bl	8103830 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8105118:	687b      	ldr	r3, [r7, #4]
 810511a:	2200      	movs	r2, #0
 810511c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8105120:	69fb      	ldr	r3, [r7, #28]
 8105122:	f003 0310 	and.w	r3, r3, #16
 8105126:	2b00      	cmp	r3, #0
 8105128:	d00f      	beq.n	810514a <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 810512a:	687b      	ldr	r3, [r7, #4]
 810512c:	681b      	ldr	r3, [r3, #0]
 810512e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8105132:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8105136:	687b      	ldr	r3, [r7, #4]
 8105138:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 810513c:	6878      	ldr	r0, [r7, #4]
 810513e:	f000 f83f 	bl	81051c0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8105142:	687b      	ldr	r3, [r7, #4]
 8105144:	2200      	movs	r2, #0
 8105146:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 810514a:	69fb      	ldr	r3, [r7, #28]
 810514c:	f003 0320 	and.w	r3, r3, #32
 8105150:	2b00      	cmp	r3, #0
 8105152:	d00f      	beq.n	8105174 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8105154:	687b      	ldr	r3, [r7, #4]
 8105156:	681b      	ldr	r3, [r3, #0]
 8105158:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 810515c:	f003 020f 	and.w	r2, r3, #15
 8105160:	687b      	ldr	r3, [r7, #4]
 8105162:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8105166:	6878      	ldr	r0, [r7, #4]
 8105168:	f000 f834 	bl	81051d4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 810516c:	687b      	ldr	r3, [r7, #4]
 810516e:	2200      	movs	r2, #0
 8105170:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8105174:	f7ff fb30 	bl	81047d8 <HAL_GetCurrentCPUID>
 8105178:	4603      	mov	r3, r0
 810517a:	2b03      	cmp	r3, #3
 810517c:	d10c      	bne.n	8105198 <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 810517e:	693b      	ldr	r3, [r7, #16]
 8105180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8105184:	2b00      	cmp	r3, #0
 8105186:	d013      	beq.n	81051b0 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8105188:	4b0b      	ldr	r3, [pc, #44]	@ (81051b8 <HAL_ETH_IRQHandler+0x20c>)
 810518a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 810518e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8105190:	6878      	ldr	r0, [r7, #4]
 8105192:	f000 f829 	bl	81051e8 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8105196:	e00b      	b.n	81051b0 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8105198:	68fb      	ldr	r3, [r7, #12]
 810519a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810519e:	2b00      	cmp	r3, #0
 81051a0:	d006      	beq.n	81051b0 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 81051a2:	4b06      	ldr	r3, [pc, #24]	@ (81051bc <HAL_ETH_IRQHandler+0x210>)
 81051a4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 81051a8:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 81051aa:	6878      	ldr	r0, [r7, #4]
 81051ac:	f000 f81c 	bl	81051e8 <HAL_ETH_WakeUpCallback>
}
 81051b0:	bf00      	nop
 81051b2:	3720      	adds	r7, #32
 81051b4:	46bd      	mov	sp, r7
 81051b6:	bd80      	pop	{r7, pc}
 81051b8:	58000080 	.word	0x58000080
 81051bc:	580000c0 	.word	0x580000c0

081051c0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 81051c0:	b480      	push	{r7}
 81051c2:	b083      	sub	sp, #12
 81051c4:	af00      	add	r7, sp, #0
 81051c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 81051c8:	bf00      	nop
 81051ca:	370c      	adds	r7, #12
 81051cc:	46bd      	mov	sp, r7
 81051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051d2:	4770      	bx	lr

081051d4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 81051d4:	b480      	push	{r7}
 81051d6:	b083      	sub	sp, #12
 81051d8:	af00      	add	r7, sp, #0
 81051da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 81051dc:	bf00      	nop
 81051de:	370c      	adds	r7, #12
 81051e0:	46bd      	mov	sp, r7
 81051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051e6:	4770      	bx	lr

081051e8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 81051e8:	b480      	push	{r7}
 81051ea:	b083      	sub	sp, #12
 81051ec:	af00      	add	r7, sp, #0
 81051ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 81051f0:	bf00      	nop
 81051f2:	370c      	adds	r7, #12
 81051f4:	46bd      	mov	sp, r7
 81051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051fa:	4770      	bx	lr

081051fc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 81051fc:	b580      	push	{r7, lr}
 81051fe:	b086      	sub	sp, #24
 8105200:	af00      	add	r7, sp, #0
 8105202:	60f8      	str	r0, [r7, #12]
 8105204:	60b9      	str	r1, [r7, #8]
 8105206:	607a      	str	r2, [r7, #4]
 8105208:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 810520a:	68fb      	ldr	r3, [r7, #12]
 810520c:	681b      	ldr	r3, [r3, #0]
 810520e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8105212:	f003 0301 	and.w	r3, r3, #1
 8105216:	2b00      	cmp	r3, #0
 8105218:	d001      	beq.n	810521e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 810521a:	2301      	movs	r3, #1
 810521c:	e03e      	b.n	810529c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 810521e:	68fb      	ldr	r3, [r7, #12]
 8105220:	681b      	ldr	r3, [r3, #0]
 8105222:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8105226:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8105228:	697b      	ldr	r3, [r7, #20]
 810522a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 810522e:	68bb      	ldr	r3, [r7, #8]
 8105230:	055b      	lsls	r3, r3, #21
 8105232:	4313      	orrs	r3, r2
 8105234:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8105236:	697b      	ldr	r3, [r7, #20]
 8105238:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 810523c:	687b      	ldr	r3, [r7, #4]
 810523e:	041b      	lsls	r3, r3, #16
 8105240:	4313      	orrs	r3, r2
 8105242:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8105244:	697b      	ldr	r3, [r7, #20]
 8105246:	f043 030c 	orr.w	r3, r3, #12
 810524a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 810524c:	697b      	ldr	r3, [r7, #20]
 810524e:	f043 0301 	orr.w	r3, r3, #1
 8105252:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8105254:	68fb      	ldr	r3, [r7, #12]
 8105256:	681b      	ldr	r3, [r3, #0]
 8105258:	697a      	ldr	r2, [r7, #20]
 810525a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 810525e:	f7ff f9bb 	bl	81045d8 <HAL_GetTick>
 8105262:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8105264:	e009      	b.n	810527a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8105266:	f7ff f9b7 	bl	81045d8 <HAL_GetTick>
 810526a:	4602      	mov	r2, r0
 810526c:	693b      	ldr	r3, [r7, #16]
 810526e:	1ad3      	subs	r3, r2, r3
 8105270:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8105274:	d901      	bls.n	810527a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8105276:	2301      	movs	r3, #1
 8105278:	e010      	b.n	810529c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810527a:	68fb      	ldr	r3, [r7, #12]
 810527c:	681b      	ldr	r3, [r3, #0]
 810527e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8105282:	f003 0301 	and.w	r3, r3, #1
 8105286:	2b00      	cmp	r3, #0
 8105288:	d1ed      	bne.n	8105266 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 810528a:	68fb      	ldr	r3, [r7, #12]
 810528c:	681b      	ldr	r3, [r3, #0]
 810528e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8105292:	b29b      	uxth	r3, r3
 8105294:	461a      	mov	r2, r3
 8105296:	683b      	ldr	r3, [r7, #0]
 8105298:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810529a:	2300      	movs	r3, #0
}
 810529c:	4618      	mov	r0, r3
 810529e:	3718      	adds	r7, #24
 81052a0:	46bd      	mov	sp, r7
 81052a2:	bd80      	pop	{r7, pc}

081052a4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 81052a4:	b580      	push	{r7, lr}
 81052a6:	b086      	sub	sp, #24
 81052a8:	af00      	add	r7, sp, #0
 81052aa:	60f8      	str	r0, [r7, #12]
 81052ac:	60b9      	str	r1, [r7, #8]
 81052ae:	607a      	str	r2, [r7, #4]
 81052b0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 81052b2:	68fb      	ldr	r3, [r7, #12]
 81052b4:	681b      	ldr	r3, [r3, #0]
 81052b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81052ba:	f003 0301 	and.w	r3, r3, #1
 81052be:	2b00      	cmp	r3, #0
 81052c0:	d001      	beq.n	81052c6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 81052c2:	2301      	movs	r3, #1
 81052c4:	e03c      	b.n	8105340 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 81052c6:	68fb      	ldr	r3, [r7, #12]
 81052c8:	681b      	ldr	r3, [r3, #0]
 81052ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81052ce:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 81052d0:	697b      	ldr	r3, [r7, #20]
 81052d2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 81052d6:	68bb      	ldr	r3, [r7, #8]
 81052d8:	055b      	lsls	r3, r3, #21
 81052da:	4313      	orrs	r3, r2
 81052dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 81052de:	697b      	ldr	r3, [r7, #20]
 81052e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 81052e4:	687b      	ldr	r3, [r7, #4]
 81052e6:	041b      	lsls	r3, r3, #16
 81052e8:	4313      	orrs	r3, r2
 81052ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 81052ec:	697b      	ldr	r3, [r7, #20]
 81052ee:	f023 030c 	bic.w	r3, r3, #12
 81052f2:	f043 0304 	orr.w	r3, r3, #4
 81052f6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 81052f8:	697b      	ldr	r3, [r7, #20]
 81052fa:	f043 0301 	orr.w	r3, r3, #1
 81052fe:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8105300:	683b      	ldr	r3, [r7, #0]
 8105302:	b29a      	uxth	r2, r3
 8105304:	4b10      	ldr	r3, [pc, #64]	@ (8105348 <HAL_ETH_WritePHYRegister+0xa4>)
 8105306:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 810530a:	4a0f      	ldr	r2, [pc, #60]	@ (8105348 <HAL_ETH_WritePHYRegister+0xa4>)
 810530c:	697b      	ldr	r3, [r7, #20]
 810530e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8105312:	f7ff f961 	bl	81045d8 <HAL_GetTick>
 8105316:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8105318:	e009      	b.n	810532e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 810531a:	f7ff f95d 	bl	81045d8 <HAL_GetTick>
 810531e:	4602      	mov	r2, r0
 8105320:	693b      	ldr	r3, [r7, #16]
 8105322:	1ad3      	subs	r3, r2, r3
 8105324:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8105328:	d901      	bls.n	810532e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 810532a:	2301      	movs	r3, #1
 810532c:	e008      	b.n	8105340 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810532e:	68fb      	ldr	r3, [r7, #12]
 8105330:	681b      	ldr	r3, [r3, #0]
 8105332:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8105336:	f003 0301 	and.w	r3, r3, #1
 810533a:	2b00      	cmp	r3, #0
 810533c:	d1ed      	bne.n	810531a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 810533e:	2300      	movs	r3, #0
}
 8105340:	4618      	mov	r0, r3
 8105342:	3718      	adds	r7, #24
 8105344:	46bd      	mov	sp, r7
 8105346:	bd80      	pop	{r7, pc}
 8105348:	40028000 	.word	0x40028000

0810534c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 810534c:	b480      	push	{r7}
 810534e:	b083      	sub	sp, #12
 8105350:	af00      	add	r7, sp, #0
 8105352:	6078      	str	r0, [r7, #4]
 8105354:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8105356:	683b      	ldr	r3, [r7, #0]
 8105358:	2b00      	cmp	r3, #0
 810535a:	d101      	bne.n	8105360 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 810535c:	2301      	movs	r3, #1
 810535e:	e1c3      	b.n	81056e8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8105360:	687b      	ldr	r3, [r7, #4]
 8105362:	681b      	ldr	r3, [r3, #0]
 8105364:	681b      	ldr	r3, [r3, #0]
 8105366:	f003 020c 	and.w	r2, r3, #12
 810536a:	683b      	ldr	r3, [r7, #0]
 810536c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 810536e:	687b      	ldr	r3, [r7, #4]
 8105370:	681b      	ldr	r3, [r3, #0]
 8105372:	681b      	ldr	r3, [r3, #0]
 8105374:	f003 0310 	and.w	r3, r3, #16
 8105378:	2b00      	cmp	r3, #0
 810537a:	bf14      	ite	ne
 810537c:	2301      	movne	r3, #1
 810537e:	2300      	moveq	r3, #0
 8105380:	b2db      	uxtb	r3, r3
 8105382:	461a      	mov	r2, r3
 8105384:	683b      	ldr	r3, [r7, #0]
 8105386:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 810538a:	687b      	ldr	r3, [r7, #4]
 810538c:	681b      	ldr	r3, [r3, #0]
 810538e:	681b      	ldr	r3, [r3, #0]
 8105390:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8105394:	683b      	ldr	r3, [r7, #0]
 8105396:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8105398:	687b      	ldr	r3, [r7, #4]
 810539a:	681b      	ldr	r3, [r3, #0]
 810539c:	681b      	ldr	r3, [r3, #0]
 810539e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81053a2:	2b00      	cmp	r3, #0
 81053a4:	bf0c      	ite	eq
 81053a6:	2301      	moveq	r3, #1
 81053a8:	2300      	movne	r3, #0
 81053aa:	b2db      	uxtb	r3, r3
 81053ac:	461a      	mov	r2, r3
 81053ae:	683b      	ldr	r3, [r7, #0]
 81053b0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 81053b4:	687b      	ldr	r3, [r7, #4]
 81053b6:	681b      	ldr	r3, [r3, #0]
 81053b8:	681b      	ldr	r3, [r3, #0]
 81053ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 81053be:	2b00      	cmp	r3, #0
 81053c0:	bf14      	ite	ne
 81053c2:	2301      	movne	r3, #1
 81053c4:	2300      	moveq	r3, #0
 81053c6:	b2db      	uxtb	r3, r3
 81053c8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 81053ca:	683b      	ldr	r3, [r7, #0]
 81053cc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 81053ce:	687b      	ldr	r3, [r7, #4]
 81053d0:	681b      	ldr	r3, [r3, #0]
 81053d2:	681b      	ldr	r3, [r3, #0]
 81053d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81053d8:	2b00      	cmp	r3, #0
 81053da:	bf0c      	ite	eq
 81053dc:	2301      	moveq	r3, #1
 81053de:	2300      	movne	r3, #0
 81053e0:	b2db      	uxtb	r3, r3
 81053e2:	461a      	mov	r2, r3
 81053e4:	683b      	ldr	r3, [r7, #0]
 81053e6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 81053e8:	687b      	ldr	r3, [r7, #4]
 81053ea:	681b      	ldr	r3, [r3, #0]
 81053ec:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 81053ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81053f2:	2b00      	cmp	r3, #0
 81053f4:	bf14      	ite	ne
 81053f6:	2301      	movne	r3, #1
 81053f8:	2300      	moveq	r3, #0
 81053fa:	b2db      	uxtb	r3, r3
 81053fc:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 81053fe:	683b      	ldr	r3, [r7, #0]
 8105400:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8105402:	687b      	ldr	r3, [r7, #4]
 8105404:	681b      	ldr	r3, [r3, #0]
 8105406:	681b      	ldr	r3, [r3, #0]
 8105408:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810540c:	2b00      	cmp	r3, #0
 810540e:	bf14      	ite	ne
 8105410:	2301      	movne	r3, #1
 8105412:	2300      	moveq	r3, #0
 8105414:	b2db      	uxtb	r3, r3
 8105416:	461a      	mov	r2, r3
 8105418:	683b      	ldr	r3, [r7, #0]
 810541a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 810541c:	687b      	ldr	r3, [r7, #4]
 810541e:	681b      	ldr	r3, [r3, #0]
 8105420:	681b      	ldr	r3, [r3, #0]
 8105422:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8105426:	683b      	ldr	r3, [r7, #0]
 8105428:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 810542a:	687b      	ldr	r3, [r7, #4]
 810542c:	681b      	ldr	r3, [r3, #0]
 810542e:	681b      	ldr	r3, [r3, #0]
 8105430:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8105434:	683b      	ldr	r3, [r7, #0]
 8105436:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8105438:	687b      	ldr	r3, [r7, #4]
 810543a:	681b      	ldr	r3, [r3, #0]
 810543c:	681b      	ldr	r3, [r3, #0]
 810543e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105442:	2b00      	cmp	r3, #0
 8105444:	bf14      	ite	ne
 8105446:	2301      	movne	r3, #1
 8105448:	2300      	moveq	r3, #0
 810544a:	b2db      	uxtb	r3, r3
 810544c:	461a      	mov	r2, r3
 810544e:	683b      	ldr	r3, [r7, #0]
 8105450:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8105452:	687b      	ldr	r3, [r7, #4]
 8105454:	681b      	ldr	r3, [r3, #0]
 8105456:	681b      	ldr	r3, [r3, #0]
 8105458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810545c:	2b00      	cmp	r3, #0
 810545e:	bf0c      	ite	eq
 8105460:	2301      	moveq	r3, #1
 8105462:	2300      	movne	r3, #0
 8105464:	b2db      	uxtb	r3, r3
 8105466:	461a      	mov	r2, r3
 8105468:	683b      	ldr	r3, [r7, #0]
 810546a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 810546c:	687b      	ldr	r3, [r7, #4]
 810546e:	681b      	ldr	r3, [r3, #0]
 8105470:	681b      	ldr	r3, [r3, #0]
 8105472:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8105476:	2b00      	cmp	r3, #0
 8105478:	bf0c      	ite	eq
 810547a:	2301      	moveq	r3, #1
 810547c:	2300      	movne	r3, #0
 810547e:	b2db      	uxtb	r3, r3
 8105480:	461a      	mov	r2, r3
 8105482:	683b      	ldr	r3, [r7, #0]
 8105484:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8105486:	687b      	ldr	r3, [r7, #4]
 8105488:	681b      	ldr	r3, [r3, #0]
 810548a:	681b      	ldr	r3, [r3, #0]
 810548c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8105490:	2b00      	cmp	r3, #0
 8105492:	bf14      	ite	ne
 8105494:	2301      	movne	r3, #1
 8105496:	2300      	moveq	r3, #0
 8105498:	b2db      	uxtb	r3, r3
 810549a:	461a      	mov	r2, r3
 810549c:	683b      	ldr	r3, [r7, #0]
 810549e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 81054a0:	687b      	ldr	r3, [r7, #4]
 81054a2:	681b      	ldr	r3, [r3, #0]
 81054a4:	681b      	ldr	r3, [r3, #0]
 81054a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81054aa:	2b00      	cmp	r3, #0
 81054ac:	bf14      	ite	ne
 81054ae:	2301      	movne	r3, #1
 81054b0:	2300      	moveq	r3, #0
 81054b2:	b2db      	uxtb	r3, r3
 81054b4:	461a      	mov	r2, r3
 81054b6:	683b      	ldr	r3, [r7, #0]
 81054b8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 81054ba:	687b      	ldr	r3, [r7, #4]
 81054bc:	681b      	ldr	r3, [r3, #0]
 81054be:	681b      	ldr	r3, [r3, #0]
 81054c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81054c4:	2b00      	cmp	r3, #0
 81054c6:	bf14      	ite	ne
 81054c8:	2301      	movne	r3, #1
 81054ca:	2300      	moveq	r3, #0
 81054cc:	b2db      	uxtb	r3, r3
 81054ce:	461a      	mov	r2, r3
 81054d0:	683b      	ldr	r3, [r7, #0]
 81054d2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 81054d4:	687b      	ldr	r3, [r7, #4]
 81054d6:	681b      	ldr	r3, [r3, #0]
 81054d8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 81054da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81054de:	2b00      	cmp	r3, #0
 81054e0:	bf14      	ite	ne
 81054e2:	2301      	movne	r3, #1
 81054e4:	2300      	moveq	r3, #0
 81054e6:	b2db      	uxtb	r3, r3
 81054e8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 81054ea:	683b      	ldr	r3, [r7, #0]
 81054ec:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 81054ee:	687b      	ldr	r3, [r7, #4]
 81054f0:	681b      	ldr	r3, [r3, #0]
 81054f2:	681b      	ldr	r3, [r3, #0]
 81054f4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 81054f8:	683b      	ldr	r3, [r7, #0]
 81054fa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	681b      	ldr	r3, [r3, #0]
 8105500:	681b      	ldr	r3, [r3, #0]
 8105502:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105506:	2b00      	cmp	r3, #0
 8105508:	bf14      	ite	ne
 810550a:	2301      	movne	r3, #1
 810550c:	2300      	moveq	r3, #0
 810550e:	b2db      	uxtb	r3, r3
 8105510:	461a      	mov	r2, r3
 8105512:	683b      	ldr	r3, [r7, #0]
 8105514:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8105516:	687b      	ldr	r3, [r7, #4]
 8105518:	681b      	ldr	r3, [r3, #0]
 810551a:	681b      	ldr	r3, [r3, #0]
 810551c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8105520:	683b      	ldr	r3, [r7, #0]
 8105522:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8105524:	687b      	ldr	r3, [r7, #4]
 8105526:	681b      	ldr	r3, [r3, #0]
 8105528:	685b      	ldr	r3, [r3, #4]
 810552a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 810552e:	683b      	ldr	r3, [r7, #0]
 8105530:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8105532:	687b      	ldr	r3, [r7, #4]
 8105534:	681b      	ldr	r3, [r3, #0]
 8105536:	685b      	ldr	r3, [r3, #4]
 8105538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810553c:	2b00      	cmp	r3, #0
 810553e:	bf0c      	ite	eq
 8105540:	2301      	moveq	r3, #1
 8105542:	2300      	movne	r3, #0
 8105544:	b2db      	uxtb	r3, r3
 8105546:	461a      	mov	r2, r3
 8105548:	683b      	ldr	r3, [r7, #0]
 810554a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 810554e:	687b      	ldr	r3, [r7, #4]
 8105550:	681b      	ldr	r3, [r3, #0]
 8105552:	685b      	ldr	r3, [r3, #4]
 8105554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105558:	2b00      	cmp	r3, #0
 810555a:	bf14      	ite	ne
 810555c:	2301      	movne	r3, #1
 810555e:	2300      	moveq	r3, #0
 8105560:	b2db      	uxtb	r3, r3
 8105562:	461a      	mov	r2, r3
 8105564:	683b      	ldr	r3, [r7, #0]
 8105566:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 810556a:	687b      	ldr	r3, [r7, #4]
 810556c:	681b      	ldr	r3, [r3, #0]
 810556e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8105570:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8105574:	2b00      	cmp	r3, #0
 8105576:	bf14      	ite	ne
 8105578:	2301      	movne	r3, #1
 810557a:	2300      	moveq	r3, #0
 810557c:	b2db      	uxtb	r3, r3
 810557e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8105580:	683b      	ldr	r3, [r7, #0]
 8105582:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	681b      	ldr	r3, [r3, #0]
 810558a:	685b      	ldr	r3, [r3, #4]
 810558c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8105590:	2b00      	cmp	r3, #0
 8105592:	bf14      	ite	ne
 8105594:	2301      	movne	r3, #1
 8105596:	2300      	moveq	r3, #0
 8105598:	b2db      	uxtb	r3, r3
 810559a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 810559c:	683b      	ldr	r3, [r7, #0]
 810559e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	681b      	ldr	r3, [r3, #0]
 81055a6:	685b      	ldr	r3, [r3, #4]
 81055a8:	0e5b      	lsrs	r3, r3, #25
 81055aa:	f003 021f 	and.w	r2, r3, #31
 81055ae:	683b      	ldr	r3, [r7, #0]
 81055b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 81055b2:	687b      	ldr	r3, [r7, #4]
 81055b4:	681b      	ldr	r3, [r3, #0]
 81055b6:	68db      	ldr	r3, [r3, #12]
 81055b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81055bc:	2b00      	cmp	r3, #0
 81055be:	bf14      	ite	ne
 81055c0:	2301      	movne	r3, #1
 81055c2:	2300      	moveq	r3, #0
 81055c4:	b2db      	uxtb	r3, r3
 81055c6:	461a      	mov	r2, r3
 81055c8:	683b      	ldr	r3, [r7, #0]
 81055ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 81055ce:	687b      	ldr	r3, [r7, #4]
 81055d0:	681b      	ldr	r3, [r3, #0]
 81055d2:	68db      	ldr	r3, [r3, #12]
 81055d4:	f003 020f 	and.w	r2, r3, #15
 81055d8:	683b      	ldr	r3, [r7, #0]
 81055da:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 81055dc:	687b      	ldr	r3, [r7, #4]
 81055de:	681b      	ldr	r3, [r3, #0]
 81055e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81055e2:	f003 0302 	and.w	r3, r3, #2
 81055e6:	2b00      	cmp	r3, #0
 81055e8:	bf14      	ite	ne
 81055ea:	2301      	movne	r3, #1
 81055ec:	2300      	moveq	r3, #0
 81055ee:	b2db      	uxtb	r3, r3
 81055f0:	461a      	mov	r2, r3
 81055f2:	683b      	ldr	r3, [r7, #0]
 81055f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 81055f8:	687b      	ldr	r3, [r7, #4]
 81055fa:	681b      	ldr	r3, [r3, #0]
 81055fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81055fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8105602:	2b00      	cmp	r3, #0
 8105604:	bf0c      	ite	eq
 8105606:	2301      	moveq	r3, #1
 8105608:	2300      	movne	r3, #0
 810560a:	b2db      	uxtb	r3, r3
 810560c:	461a      	mov	r2, r3
 810560e:	683b      	ldr	r3, [r7, #0]
 8105610:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8105614:	687b      	ldr	r3, [r7, #4]
 8105616:	681b      	ldr	r3, [r3, #0]
 8105618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810561a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810561e:	683b      	ldr	r3, [r7, #0]
 8105620:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8105622:	687b      	ldr	r3, [r7, #4]
 8105624:	681b      	ldr	r3, [r3, #0]
 8105626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105628:	0c1b      	lsrs	r3, r3, #16
 810562a:	b29a      	uxth	r2, r3
 810562c:	683b      	ldr	r3, [r7, #0]
 810562e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8105630:	687b      	ldr	r3, [r7, #4]
 8105632:	681b      	ldr	r3, [r3, #0]
 8105634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105638:	f003 0301 	and.w	r3, r3, #1
 810563c:	2b00      	cmp	r3, #0
 810563e:	bf14      	ite	ne
 8105640:	2301      	movne	r3, #1
 8105642:	2300      	moveq	r3, #0
 8105644:	b2db      	uxtb	r3, r3
 8105646:	461a      	mov	r2, r3
 8105648:	683b      	ldr	r3, [r7, #0]
 810564a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 810564e:	687b      	ldr	r3, [r7, #4]
 8105650:	681b      	ldr	r3, [r3, #0]
 8105652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105656:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 810565a:	2b00      	cmp	r3, #0
 810565c:	bf14      	ite	ne
 810565e:	2301      	movne	r3, #1
 8105660:	2300      	moveq	r3, #0
 8105662:	b2db      	uxtb	r3, r3
 8105664:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8105666:	683b      	ldr	r3, [r7, #0]
 8105668:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 810566c:	687b      	ldr	r3, [r7, #4]
 810566e:	681b      	ldr	r3, [r3, #0]
 8105670:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8105674:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8105678:	683b      	ldr	r3, [r7, #0]
 810567a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 810567c:	687b      	ldr	r3, [r7, #4]
 810567e:	681b      	ldr	r3, [r3, #0]
 8105680:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8105684:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8105688:	683b      	ldr	r3, [r7, #0]
 810568a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810568c:	687b      	ldr	r3, [r7, #4]
 810568e:	681b      	ldr	r3, [r3, #0]
 8105690:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8105694:	f003 0308 	and.w	r3, r3, #8
 8105698:	2b00      	cmp	r3, #0
 810569a:	bf14      	ite	ne
 810569c:	2301      	movne	r3, #1
 810569e:	2300      	moveq	r3, #0
 81056a0:	b2db      	uxtb	r3, r3
 81056a2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 81056a4:	683b      	ldr	r3, [r7, #0]
 81056a6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 81056aa:	687b      	ldr	r3, [r7, #4]
 81056ac:	681b      	ldr	r3, [r3, #0]
 81056ae:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 81056b2:	f003 0310 	and.w	r3, r3, #16
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	bf14      	ite	ne
 81056ba:	2301      	movne	r3, #1
 81056bc:	2300      	moveq	r3, #0
 81056be:	b2db      	uxtb	r3, r3
 81056c0:	461a      	mov	r2, r3
 81056c2:	683b      	ldr	r3, [r7, #0]
 81056c4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	681b      	ldr	r3, [r3, #0]
 81056cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 81056d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81056d4:	2b00      	cmp	r3, #0
 81056d6:	bf0c      	ite	eq
 81056d8:	2301      	moveq	r3, #1
 81056da:	2300      	movne	r3, #0
 81056dc:	b2db      	uxtb	r3, r3
 81056de:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 81056e0:	683b      	ldr	r3, [r7, #0]
 81056e2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 81056e6:	2300      	movs	r3, #0
}
 81056e8:	4618      	mov	r0, r3
 81056ea:	370c      	adds	r7, #12
 81056ec:	46bd      	mov	sp, r7
 81056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056f2:	4770      	bx	lr

081056f4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 81056f4:	b580      	push	{r7, lr}
 81056f6:	b082      	sub	sp, #8
 81056f8:	af00      	add	r7, sp, #0
 81056fa:	6078      	str	r0, [r7, #4]
 81056fc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 81056fe:	683b      	ldr	r3, [r7, #0]
 8105700:	2b00      	cmp	r3, #0
 8105702:	d101      	bne.n	8105708 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8105704:	2301      	movs	r3, #1
 8105706:	e00b      	b.n	8105720 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8105708:	687b      	ldr	r3, [r7, #4]
 810570a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810570e:	2b10      	cmp	r3, #16
 8105710:	d105      	bne.n	810571e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8105712:	6839      	ldr	r1, [r7, #0]
 8105714:	6878      	ldr	r0, [r7, #4]
 8105716:	f000 f871 	bl	81057fc <ETH_SetMACConfig>

    return HAL_OK;
 810571a:	2300      	movs	r3, #0
 810571c:	e000      	b.n	8105720 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 810571e:	2301      	movs	r3, #1
  }
}
 8105720:	4618      	mov	r0, r3
 8105722:	3708      	adds	r7, #8
 8105724:	46bd      	mov	sp, r7
 8105726:	bd80      	pop	{r7, pc}

08105728 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8105728:	b580      	push	{r7, lr}
 810572a:	b084      	sub	sp, #16
 810572c:	af00      	add	r7, sp, #0
 810572e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8105730:	687b      	ldr	r3, [r7, #4]
 8105732:	681b      	ldr	r3, [r3, #0]
 8105734:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8105738:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 810573a:	68fb      	ldr	r3, [r7, #12]
 810573c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8105740:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8105742:	f001 f9f1 	bl	8106b28 <HAL_RCC_GetHCLKFreq>
 8105746:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8105748:	68bb      	ldr	r3, [r7, #8]
 810574a:	4a1a      	ldr	r2, [pc, #104]	@ (81057b4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 810574c:	4293      	cmp	r3, r2
 810574e:	d804      	bhi.n	810575a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8105750:	68fb      	ldr	r3, [r7, #12]
 8105752:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8105756:	60fb      	str	r3, [r7, #12]
 8105758:	e022      	b.n	81057a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 810575a:	68bb      	ldr	r3, [r7, #8]
 810575c:	4a16      	ldr	r2, [pc, #88]	@ (81057b8 <HAL_ETH_SetMDIOClockRange+0x90>)
 810575e:	4293      	cmp	r3, r2
 8105760:	d204      	bcs.n	810576c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8105762:	68fb      	ldr	r3, [r7, #12]
 8105764:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8105768:	60fb      	str	r3, [r7, #12]
 810576a:	e019      	b.n	81057a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 810576c:	68bb      	ldr	r3, [r7, #8]
 810576e:	4a13      	ldr	r2, [pc, #76]	@ (81057bc <HAL_ETH_SetMDIOClockRange+0x94>)
 8105770:	4293      	cmp	r3, r2
 8105772:	d915      	bls.n	81057a0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8105774:	68bb      	ldr	r3, [r7, #8]
 8105776:	4a12      	ldr	r2, [pc, #72]	@ (81057c0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8105778:	4293      	cmp	r3, r2
 810577a:	d804      	bhi.n	8105786 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 810577c:	68fb      	ldr	r3, [r7, #12]
 810577e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8105782:	60fb      	str	r3, [r7, #12]
 8105784:	e00c      	b.n	81057a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8105786:	68bb      	ldr	r3, [r7, #8]
 8105788:	4a0e      	ldr	r2, [pc, #56]	@ (81057c4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 810578a:	4293      	cmp	r3, r2
 810578c:	d804      	bhi.n	8105798 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 810578e:	68fb      	ldr	r3, [r7, #12]
 8105790:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8105794:	60fb      	str	r3, [r7, #12]
 8105796:	e003      	b.n	81057a0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8105798:	68fb      	ldr	r3, [r7, #12]
 810579a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 810579e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	681b      	ldr	r3, [r3, #0]
 81057a4:	68fa      	ldr	r2, [r7, #12]
 81057a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 81057aa:	bf00      	nop
 81057ac:	3710      	adds	r7, #16
 81057ae:	46bd      	mov	sp, r7
 81057b0:	bd80      	pop	{r7, pc}
 81057b2:	bf00      	nop
 81057b4:	02160ebf 	.word	0x02160ebf
 81057b8:	03938700 	.word	0x03938700
 81057bc:	05f5e0ff 	.word	0x05f5e0ff
 81057c0:	08f0d17f 	.word	0x08f0d17f
 81057c4:	0ee6b27f 	.word	0x0ee6b27f

081057c8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 81057c8:	b480      	push	{r7}
 81057ca:	b083      	sub	sp, #12
 81057cc:	af00      	add	r7, sp, #0
 81057ce:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 81057d0:	687b      	ldr	r3, [r7, #4]
 81057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 81057d6:	4618      	mov	r0, r3
 81057d8:	370c      	adds	r7, #12
 81057da:	46bd      	mov	sp, r7
 81057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057e0:	4770      	bx	lr

081057e2 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 81057e2:	b480      	push	{r7}
 81057e4:	b083      	sub	sp, #12
 81057e6:	af00      	add	r7, sp, #0
 81057e8:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 81057ea:	687b      	ldr	r3, [r7, #4]
 81057ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 81057f0:	4618      	mov	r0, r3
 81057f2:	370c      	adds	r7, #12
 81057f4:	46bd      	mov	sp, r7
 81057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057fa:	4770      	bx	lr

081057fc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 81057fc:	b480      	push	{r7}
 81057fe:	b085      	sub	sp, #20
 8105800:	af00      	add	r7, sp, #0
 8105802:	6078      	str	r0, [r7, #4]
 8105804:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8105806:	683b      	ldr	r3, [r7, #0]
 8105808:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 810580a:	683b      	ldr	r3, [r7, #0]
 810580c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 810580e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8105810:	683b      	ldr	r3, [r7, #0]
 8105812:	791b      	ldrb	r3, [r3, #4]
 8105814:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8105816:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8105818:	683b      	ldr	r3, [r7, #0]
 810581a:	7b1b      	ldrb	r3, [r3, #12]
 810581c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 810581e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8105820:	683b      	ldr	r3, [r7, #0]
 8105822:	7b5b      	ldrb	r3, [r3, #13]
 8105824:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8105826:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8105828:	683b      	ldr	r3, [r7, #0]
 810582a:	7b9b      	ldrb	r3, [r3, #14]
 810582c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 810582e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8105830:	683b      	ldr	r3, [r7, #0]
 8105832:	7bdb      	ldrb	r3, [r3, #15]
 8105834:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8105836:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8105838:	683a      	ldr	r2, [r7, #0]
 810583a:	7c12      	ldrb	r2, [r2, #16]
 810583c:	2a00      	cmp	r2, #0
 810583e:	d102      	bne.n	8105846 <ETH_SetMACConfig+0x4a>
 8105840:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8105844:	e000      	b.n	8105848 <ETH_SetMACConfig+0x4c>
 8105846:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8105848:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810584a:	683a      	ldr	r2, [r7, #0]
 810584c:	7c52      	ldrb	r2, [r2, #17]
 810584e:	2a00      	cmp	r2, #0
 8105850:	d102      	bne.n	8105858 <ETH_SetMACConfig+0x5c>
 8105852:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8105856:	e000      	b.n	810585a <ETH_SetMACConfig+0x5e>
 8105858:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810585a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 810585c:	683b      	ldr	r3, [r7, #0]
 810585e:	7c9b      	ldrb	r3, [r3, #18]
 8105860:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8105862:	431a      	orrs	r2, r3
               macconf->Speed |
 8105864:	683b      	ldr	r3, [r7, #0]
 8105866:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8105868:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 810586a:	683b      	ldr	r3, [r7, #0]
 810586c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 810586e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8105870:	683b      	ldr	r3, [r7, #0]
 8105872:	7f1b      	ldrb	r3, [r3, #28]
 8105874:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8105876:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8105878:	683b      	ldr	r3, [r7, #0]
 810587a:	7f5b      	ldrb	r3, [r3, #29]
 810587c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 810587e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8105880:	683a      	ldr	r2, [r7, #0]
 8105882:	7f92      	ldrb	r2, [r2, #30]
 8105884:	2a00      	cmp	r2, #0
 8105886:	d102      	bne.n	810588e <ETH_SetMACConfig+0x92>
 8105888:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810588c:	e000      	b.n	8105890 <ETH_SetMACConfig+0x94>
 810588e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8105890:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8105892:	683b      	ldr	r3, [r7, #0]
 8105894:	7fdb      	ldrb	r3, [r3, #31]
 8105896:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8105898:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810589a:	683a      	ldr	r2, [r7, #0]
 810589c:	f892 2020 	ldrb.w	r2, [r2, #32]
 81058a0:	2a00      	cmp	r2, #0
 81058a2:	d102      	bne.n	81058aa <ETH_SetMACConfig+0xae>
 81058a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81058a8:	e000      	b.n	81058ac <ETH_SetMACConfig+0xb0>
 81058aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 81058ac:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 81058ae:	683b      	ldr	r3, [r7, #0]
 81058b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 81058b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 81058b4:	683b      	ldr	r3, [r7, #0]
 81058b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81058ba:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 81058bc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 81058be:	683b      	ldr	r3, [r7, #0]
 81058c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 81058c2:	4313      	orrs	r3, r2
 81058c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 81058c6:	687b      	ldr	r3, [r7, #4]
 81058c8:	681b      	ldr	r3, [r3, #0]
 81058ca:	681a      	ldr	r2, [r3, #0]
 81058cc:	4b57      	ldr	r3, [pc, #348]	@ (8105a2c <ETH_SetMACConfig+0x230>)
 81058ce:	4013      	ands	r3, r2
 81058d0:	687a      	ldr	r2, [r7, #4]
 81058d2:	6812      	ldr	r2, [r2, #0]
 81058d4:	68f9      	ldr	r1, [r7, #12]
 81058d6:	430b      	orrs	r3, r1
 81058d8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81058da:	683b      	ldr	r3, [r7, #0]
 81058dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81058de:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81058e0:	683b      	ldr	r3, [r7, #0]
 81058e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81058e6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81058e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81058ea:	683b      	ldr	r3, [r7, #0]
 81058ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81058f0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81058f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81058f4:	683b      	ldr	r3, [r7, #0]
 81058f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 81058fa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81058fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 81058fe:	683a      	ldr	r2, [r7, #0]
 8105900:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8105904:	2a00      	cmp	r2, #0
 8105906:	d102      	bne.n	810590e <ETH_SetMACConfig+0x112>
 8105908:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 810590c:	e000      	b.n	8105910 <ETH_SetMACConfig+0x114>
 810590e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8105910:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8105912:	683b      	ldr	r3, [r7, #0]
 8105914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8105916:	4313      	orrs	r3, r2
 8105918:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 810591a:	687b      	ldr	r3, [r7, #4]
 810591c:	681b      	ldr	r3, [r3, #0]
 810591e:	685a      	ldr	r2, [r3, #4]
 8105920:	4b43      	ldr	r3, [pc, #268]	@ (8105a30 <ETH_SetMACConfig+0x234>)
 8105922:	4013      	ands	r3, r2
 8105924:	687a      	ldr	r2, [r7, #4]
 8105926:	6812      	ldr	r2, [r2, #0]
 8105928:	68f9      	ldr	r1, [r7, #12]
 810592a:	430b      	orrs	r3, r1
 810592c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810592e:	683b      	ldr	r3, [r7, #0]
 8105930:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8105934:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8105936:	683b      	ldr	r3, [r7, #0]
 8105938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810593a:	4313      	orrs	r3, r2
 810593c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 810593e:	687b      	ldr	r3, [r7, #4]
 8105940:	681b      	ldr	r3, [r3, #0]
 8105942:	68db      	ldr	r3, [r3, #12]
 8105944:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8105948:	f023 0301 	bic.w	r3, r3, #1
 810594c:	687a      	ldr	r2, [r7, #4]
 810594e:	6812      	ldr	r2, [r2, #0]
 8105950:	68f9      	ldr	r1, [r7, #12]
 8105952:	430b      	orrs	r3, r1
 8105954:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8105956:	683b      	ldr	r3, [r7, #0]
 8105958:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 810595c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 810595e:	683b      	ldr	r3, [r7, #0]
 8105960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8105962:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8105964:	683a      	ldr	r2, [r7, #0]
 8105966:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 810596a:	2a00      	cmp	r2, #0
 810596c:	d101      	bne.n	8105972 <ETH_SetMACConfig+0x176>
 810596e:	2280      	movs	r2, #128	@ 0x80
 8105970:	e000      	b.n	8105974 <ETH_SetMACConfig+0x178>
 8105972:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8105974:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8105976:	683b      	ldr	r3, [r7, #0]
 8105978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810597a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810597c:	4313      	orrs	r3, r2
 810597e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8105980:	687b      	ldr	r3, [r7, #4]
 8105982:	681b      	ldr	r3, [r3, #0]
 8105984:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8105986:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 810598a:	4013      	ands	r3, r2
 810598c:	687a      	ldr	r2, [r7, #4]
 810598e:	6812      	ldr	r2, [r2, #0]
 8105990:	68f9      	ldr	r1, [r7, #12]
 8105992:	430b      	orrs	r3, r1
 8105994:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8105996:	683b      	ldr	r3, [r7, #0]
 8105998:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 810599c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 810599e:	683b      	ldr	r3, [r7, #0]
 81059a0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 81059a4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 81059a6:	4313      	orrs	r3, r2
 81059a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 81059aa:	687b      	ldr	r3, [r7, #4]
 81059ac:	681b      	ldr	r3, [r3, #0]
 81059ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81059b2:	f023 0103 	bic.w	r1, r3, #3
 81059b6:	687b      	ldr	r3, [r7, #4]
 81059b8:	681b      	ldr	r3, [r3, #0]
 81059ba:	68fa      	ldr	r2, [r7, #12]
 81059bc:	430a      	orrs	r2, r1
 81059be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 81059c2:	687b      	ldr	r3, [r7, #4]
 81059c4:	681b      	ldr	r3, [r3, #0]
 81059c6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 81059ca:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 81059ce:	683b      	ldr	r3, [r7, #0]
 81059d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81059d2:	687b      	ldr	r3, [r7, #4]
 81059d4:	681b      	ldr	r3, [r3, #0]
 81059d6:	430a      	orrs	r2, r1
 81059d8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 81059dc:	683b      	ldr	r3, [r7, #0]
 81059de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81059e0:	683a      	ldr	r2, [r7, #0]
 81059e2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 81059e6:	2a00      	cmp	r2, #0
 81059e8:	d101      	bne.n	81059ee <ETH_SetMACConfig+0x1f2>
 81059ea:	2240      	movs	r2, #64	@ 0x40
 81059ec:	e000      	b.n	81059f0 <ETH_SetMACConfig+0x1f4>
 81059ee:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 81059f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 81059f2:	683b      	ldr	r3, [r7, #0]
 81059f4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 81059f8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81059fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 81059fc:	683b      	ldr	r3, [r7, #0]
 81059fe:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8105a02:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8105a04:	4313      	orrs	r3, r2
 8105a06:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8105a08:	687b      	ldr	r3, [r7, #4]
 8105a0a:	681b      	ldr	r3, [r3, #0]
 8105a0c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8105a10:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	681b      	ldr	r3, [r3, #0]
 8105a18:	68fa      	ldr	r2, [r7, #12]
 8105a1a:	430a      	orrs	r2, r1
 8105a1c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8105a20:	bf00      	nop
 8105a22:	3714      	adds	r7, #20
 8105a24:	46bd      	mov	sp, r7
 8105a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a2a:	4770      	bx	lr
 8105a2c:	00048083 	.word	0x00048083
 8105a30:	c0f88000 	.word	0xc0f88000

08105a34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8105a34:	b480      	push	{r7}
 8105a36:	b085      	sub	sp, #20
 8105a38:	af00      	add	r7, sp, #0
 8105a3a:	6078      	str	r0, [r7, #4]
 8105a3c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8105a3e:	687b      	ldr	r3, [r7, #4]
 8105a40:	681b      	ldr	r3, [r3, #0]
 8105a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105a46:	681b      	ldr	r3, [r3, #0]
 8105a48:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 8105a4c:	f023 0302 	bic.w	r3, r3, #2
 8105a50:	683a      	ldr	r2, [r7, #0]
 8105a52:	6811      	ldr	r1, [r2, #0]
 8105a54:	687a      	ldr	r2, [r7, #4]
 8105a56:	6812      	ldr	r2, [r2, #0]
 8105a58:	430b      	orrs	r3, r1
 8105a5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105a5e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8105a60:	683b      	ldr	r3, [r7, #0]
 8105a62:	791b      	ldrb	r3, [r3, #4]
 8105a64:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8105a66:	683b      	ldr	r3, [r7, #0]
 8105a68:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8105a6a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8105a6c:	683b      	ldr	r3, [r7, #0]
 8105a6e:	7b1b      	ldrb	r3, [r3, #12]
 8105a70:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8105a72:	4313      	orrs	r3, r2
 8105a74:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8105a76:	687b      	ldr	r3, [r7, #4]
 8105a78:	681b      	ldr	r3, [r3, #0]
 8105a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105a7e:	685b      	ldr	r3, [r3, #4]
 8105a80:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8105a84:	f023 0301 	bic.w	r3, r3, #1
 8105a88:	687a      	ldr	r2, [r7, #4]
 8105a8a:	6812      	ldr	r2, [r2, #0]
 8105a8c:	68f9      	ldr	r1, [r7, #12]
 8105a8e:	430b      	orrs	r3, r1
 8105a90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105a94:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8105a96:	683b      	ldr	r3, [r7, #0]
 8105a98:	7b5b      	ldrb	r3, [r3, #13]
 8105a9a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8105a9c:	683b      	ldr	r3, [r7, #0]
 8105a9e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8105aa0:	4313      	orrs	r3, r2
 8105aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8105aa4:	687b      	ldr	r3, [r7, #4]
 8105aa6:	681b      	ldr	r3, [r3, #0]
 8105aa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105aac:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8105ab0:	4b21      	ldr	r3, [pc, #132]	@ (8105b38 <ETH_SetDMAConfig+0x104>)
 8105ab2:	4013      	ands	r3, r2
 8105ab4:	687a      	ldr	r2, [r7, #4]
 8105ab6:	6812      	ldr	r2, [r2, #0]
 8105ab8:	68f9      	ldr	r1, [r7, #12]
 8105aba:	430b      	orrs	r3, r1
 8105abc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105ac0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8105ac4:	683b      	ldr	r3, [r7, #0]
 8105ac6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8105ac8:	683b      	ldr	r3, [r7, #0]
 8105aca:	7d1b      	ldrb	r3, [r3, #20]
 8105acc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8105ace:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8105ad0:	683b      	ldr	r3, [r7, #0]
 8105ad2:	7f5b      	ldrb	r3, [r3, #29]
 8105ad4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8105ad6:	4313      	orrs	r3, r2
 8105ad8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8105ada:	687b      	ldr	r3, [r7, #4]
 8105adc:	681b      	ldr	r3, [r3, #0]
 8105ade:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105ae2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8105ae6:	4b15      	ldr	r3, [pc, #84]	@ (8105b3c <ETH_SetDMAConfig+0x108>)
 8105ae8:	4013      	ands	r3, r2
 8105aea:	687a      	ldr	r2, [r7, #4]
 8105aec:	6812      	ldr	r2, [r2, #0]
 8105aee:	68f9      	ldr	r1, [r7, #12]
 8105af0:	430b      	orrs	r3, r1
 8105af2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105af6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8105afa:	683b      	ldr	r3, [r7, #0]
 8105afc:	7f1b      	ldrb	r3, [r3, #28]
 8105afe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8105b00:	683b      	ldr	r3, [r7, #0]
 8105b02:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8105b04:	4313      	orrs	r3, r2
 8105b06:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8105b08:	687b      	ldr	r3, [r7, #4]
 8105b0a:	681b      	ldr	r3, [r3, #0]
 8105b0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105b10:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8105b14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8105b18:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8105b1c:	687a      	ldr	r2, [r7, #4]
 8105b1e:	6812      	ldr	r2, [r2, #0]
 8105b20:	68f9      	ldr	r1, [r7, #12]
 8105b22:	430b      	orrs	r3, r1
 8105b24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105b28:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8105b2c:	bf00      	nop
 8105b2e:	3714      	adds	r7, #20
 8105b30:	46bd      	mov	sp, r7
 8105b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b36:	4770      	bx	lr
 8105b38:	fffec000 	.word	0xfffec000
 8105b3c:	ffc0efef 	.word	0xffc0efef

08105b40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8105b40:	b580      	push	{r7, lr}
 8105b42:	b0a4      	sub	sp, #144	@ 0x90
 8105b44:	af00      	add	r7, sp, #0
 8105b46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8105b48:	2301      	movs	r3, #1
 8105b4a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8105b4e:	2300      	movs	r3, #0
 8105b50:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8105b52:	2300      	movs	r3, #0
 8105b54:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8105b58:	2300      	movs	r3, #0
 8105b5a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8105b5e:	2301      	movs	r3, #1
 8105b60:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8105b64:	2301      	movs	r3, #1
 8105b66:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8105b6a:	2301      	movs	r3, #1
 8105b6c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8105b70:	2300      	movs	r3, #0
 8105b72:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8105b76:	2301      	movs	r3, #1
 8105b78:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8105b7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8105b80:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8105b82:	2300      	movs	r3, #0
 8105b84:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8105b88:	2300      	movs	r3, #0
 8105b8a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8105b8c:	2300      	movs	r3, #0
 8105b8e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8105b92:	2300      	movs	r3, #0
 8105b94:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8105b98:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8105b9c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8105b9e:	2300      	movs	r3, #0
 8105ba0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8105ba4:	2300      	movs	r3, #0
 8105ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8105ba8:	2301      	movs	r3, #1
 8105baa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8105bae:	2300      	movs	r3, #0
 8105bb0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8105bb4:	2300      	movs	r3, #0
 8105bb6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8105bba:	2300      	movs	r3, #0
 8105bbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8105bbe:	2300      	movs	r3, #0
 8105bc0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8105bc2:	2300      	movs	r3, #0
 8105bc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8105bc6:	2300      	movs	r3, #0
 8105bc8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8105bcc:	2300      	movs	r3, #0
 8105bce:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8105bd2:	2301      	movs	r3, #1
 8105bd4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8105bd8:	2320      	movs	r3, #32
 8105bda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8105bde:	2301      	movs	r3, #1
 8105be0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8105be4:	2300      	movs	r3, #0
 8105be6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8105bea:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8105bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8105bf0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8105bf4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8105bf6:	2300      	movs	r3, #0
 8105bf8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8105bfc:	2302      	movs	r3, #2
 8105bfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8105c02:	2300      	movs	r3, #0
 8105c04:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8105c08:	2300      	movs	r3, #0
 8105c0a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8105c0e:	2300      	movs	r3, #0
 8105c10:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8105c14:	2301      	movs	r3, #1
 8105c16:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8105c1a:	2300      	movs	r3, #0
 8105c1c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8105c1e:	2301      	movs	r3, #1
 8105c20:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8105c24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8105c28:	4619      	mov	r1, r3
 8105c2a:	6878      	ldr	r0, [r7, #4]
 8105c2c:	f7ff fde6 	bl	81057fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8105c30:	2301      	movs	r3, #1
 8105c32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8105c34:	2301      	movs	r3, #1
 8105c36:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8105c38:	2300      	movs	r3, #0
 8105c3a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8105c3c:	2300      	movs	r3, #0
 8105c3e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8105c42:	2300      	movs	r3, #0
 8105c44:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8105c46:	2300      	movs	r3, #0
 8105c48:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8105c4a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8105c4e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8105c50:	2300      	movs	r3, #0
 8105c52:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8105c54:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8105c58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8105c5a:	2300      	movs	r3, #0
 8105c5c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8105c60:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8105c64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8105c66:	f107 0308 	add.w	r3, r7, #8
 8105c6a:	4619      	mov	r1, r3
 8105c6c:	6878      	ldr	r0, [r7, #4]
 8105c6e:	f7ff fee1 	bl	8105a34 <ETH_SetDMAConfig>
}
 8105c72:	bf00      	nop
 8105c74:	3790      	adds	r7, #144	@ 0x90
 8105c76:	46bd      	mov	sp, r7
 8105c78:	bd80      	pop	{r7, pc}

08105c7a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8105c7a:	b480      	push	{r7}
 8105c7c:	b085      	sub	sp, #20
 8105c7e:	af00      	add	r7, sp, #0
 8105c80:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8105c82:	2300      	movs	r3, #0
 8105c84:	60fb      	str	r3, [r7, #12]
 8105c86:	e01d      	b.n	8105cc4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	68d9      	ldr	r1, [r3, #12]
 8105c8c:	68fa      	ldr	r2, [r7, #12]
 8105c8e:	4613      	mov	r3, r2
 8105c90:	005b      	lsls	r3, r3, #1
 8105c92:	4413      	add	r3, r2
 8105c94:	00db      	lsls	r3, r3, #3
 8105c96:	440b      	add	r3, r1
 8105c98:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8105c9a:	68bb      	ldr	r3, [r7, #8]
 8105c9c:	2200      	movs	r2, #0
 8105c9e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8105ca0:	68bb      	ldr	r3, [r7, #8]
 8105ca2:	2200      	movs	r2, #0
 8105ca4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8105ca6:	68bb      	ldr	r3, [r7, #8]
 8105ca8:	2200      	movs	r2, #0
 8105caa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8105cac:	68bb      	ldr	r3, [r7, #8]
 8105cae:	2200      	movs	r2, #0
 8105cb0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8105cb2:	68b9      	ldr	r1, [r7, #8]
 8105cb4:	687b      	ldr	r3, [r7, #4]
 8105cb6:	68fa      	ldr	r2, [r7, #12]
 8105cb8:	3206      	adds	r2, #6
 8105cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8105cbe:	68fb      	ldr	r3, [r7, #12]
 8105cc0:	3301      	adds	r3, #1
 8105cc2:	60fb      	str	r3, [r7, #12]
 8105cc4:	68fb      	ldr	r3, [r7, #12]
 8105cc6:	2b03      	cmp	r3, #3
 8105cc8:	d9de      	bls.n	8105c88 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8105cca:	687b      	ldr	r3, [r7, #4]
 8105ccc:	2200      	movs	r2, #0
 8105cce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8105cd0:	687b      	ldr	r3, [r7, #4]
 8105cd2:	681b      	ldr	r3, [r3, #0]
 8105cd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105cd8:	461a      	mov	r2, r3
 8105cda:	2303      	movs	r3, #3
 8105cdc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8105ce0:	687b      	ldr	r3, [r7, #4]
 8105ce2:	68da      	ldr	r2, [r3, #12]
 8105ce4:	687b      	ldr	r3, [r7, #4]
 8105ce6:	681b      	ldr	r3, [r3, #0]
 8105ce8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105cec:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8105cf0:	687b      	ldr	r3, [r7, #4]
 8105cf2:	68da      	ldr	r2, [r3, #12]
 8105cf4:	687b      	ldr	r3, [r7, #4]
 8105cf6:	681b      	ldr	r3, [r3, #0]
 8105cf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105cfc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8105d00:	bf00      	nop
 8105d02:	3714      	adds	r7, #20
 8105d04:	46bd      	mov	sp, r7
 8105d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d0a:	4770      	bx	lr

08105d0c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8105d0c:	b480      	push	{r7}
 8105d0e:	b085      	sub	sp, #20
 8105d10:	af00      	add	r7, sp, #0
 8105d12:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8105d14:	2300      	movs	r3, #0
 8105d16:	60fb      	str	r3, [r7, #12]
 8105d18:	e023      	b.n	8105d62 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8105d1a:	687b      	ldr	r3, [r7, #4]
 8105d1c:	6919      	ldr	r1, [r3, #16]
 8105d1e:	68fa      	ldr	r2, [r7, #12]
 8105d20:	4613      	mov	r3, r2
 8105d22:	005b      	lsls	r3, r3, #1
 8105d24:	4413      	add	r3, r2
 8105d26:	00db      	lsls	r3, r3, #3
 8105d28:	440b      	add	r3, r1
 8105d2a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8105d2c:	68bb      	ldr	r3, [r7, #8]
 8105d2e:	2200      	movs	r2, #0
 8105d30:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8105d32:	68bb      	ldr	r3, [r7, #8]
 8105d34:	2200      	movs	r2, #0
 8105d36:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8105d38:	68bb      	ldr	r3, [r7, #8]
 8105d3a:	2200      	movs	r2, #0
 8105d3c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8105d3e:	68bb      	ldr	r3, [r7, #8]
 8105d40:	2200      	movs	r2, #0
 8105d42:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8105d44:	68bb      	ldr	r3, [r7, #8]
 8105d46:	2200      	movs	r2, #0
 8105d48:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8105d4a:	68bb      	ldr	r3, [r7, #8]
 8105d4c:	2200      	movs	r2, #0
 8105d4e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8105d50:	68b9      	ldr	r1, [r7, #8]
 8105d52:	687b      	ldr	r3, [r7, #4]
 8105d54:	68fa      	ldr	r2, [r7, #12]
 8105d56:	3212      	adds	r2, #18
 8105d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8105d5c:	68fb      	ldr	r3, [r7, #12]
 8105d5e:	3301      	adds	r3, #1
 8105d60:	60fb      	str	r3, [r7, #12]
 8105d62:	68fb      	ldr	r3, [r7, #12]
 8105d64:	2b03      	cmp	r3, #3
 8105d66:	d9d8      	bls.n	8105d1a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8105d68:	687b      	ldr	r3, [r7, #4]
 8105d6a:	2200      	movs	r2, #0
 8105d6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8105d6e:	687b      	ldr	r3, [r7, #4]
 8105d70:	2200      	movs	r2, #0
 8105d72:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8105d74:	687b      	ldr	r3, [r7, #4]
 8105d76:	2200      	movs	r2, #0
 8105d78:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8105d7a:	687b      	ldr	r3, [r7, #4]
 8105d7c:	2200      	movs	r2, #0
 8105d7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8105d80:	687b      	ldr	r3, [r7, #4]
 8105d82:	2200      	movs	r2, #0
 8105d84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8105d86:	687b      	ldr	r3, [r7, #4]
 8105d88:	681b      	ldr	r3, [r3, #0]
 8105d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105d8e:	461a      	mov	r2, r3
 8105d90:	2303      	movs	r3, #3
 8105d92:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8105d96:	687b      	ldr	r3, [r7, #4]
 8105d98:	691a      	ldr	r2, [r3, #16]
 8105d9a:	687b      	ldr	r3, [r7, #4]
 8105d9c:	681b      	ldr	r3, [r3, #0]
 8105d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105da2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8105da6:	687b      	ldr	r3, [r7, #4]
 8105da8:	691b      	ldr	r3, [r3, #16]
 8105daa:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8105dae:	687b      	ldr	r3, [r7, #4]
 8105db0:	681b      	ldr	r3, [r3, #0]
 8105db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105db6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8105dba:	bf00      	nop
 8105dbc:	3714      	adds	r7, #20
 8105dbe:	46bd      	mov	sp, r7
 8105dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dc4:	4770      	bx	lr

08105dc6 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8105dc6:	b480      	push	{r7}
 8105dc8:	b091      	sub	sp, #68	@ 0x44
 8105dca:	af00      	add	r7, sp, #0
 8105dcc:	60f8      	str	r0, [r7, #12]
 8105dce:	60b9      	str	r1, [r7, #8]
 8105dd0:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8105dd2:	68fb      	ldr	r3, [r7, #12]
 8105dd4:	3318      	adds	r3, #24
 8105dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8105dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105dda:	691b      	ldr	r3, [r3, #16]
 8105ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8105dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105de0:	691b      	ldr	r3, [r3, #16]
 8105de2:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8105de4:	2300      	movs	r3, #0
 8105de6:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8105de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105dea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8105dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105df0:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8105df2:	68bb      	ldr	r3, [r7, #8]
 8105df4:	689b      	ldr	r3, [r3, #8]
 8105df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8105df8:	2300      	movs	r3, #0
 8105dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8105dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105dfe:	68db      	ldr	r3, [r3, #12]
 8105e00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8105e04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8105e08:	d007      	beq.n	8105e1a <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8105e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105e0e:	3304      	adds	r3, #4
 8105e10:	009b      	lsls	r3, r3, #2
 8105e12:	4413      	add	r3, r2
 8105e14:	685b      	ldr	r3, [r3, #4]
 8105e16:	2b00      	cmp	r3, #0
 8105e18:	d001      	beq.n	8105e1e <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8105e1a:	2302      	movs	r3, #2
 8105e1c:	e267      	b.n	81062ee <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8105e1e:	68bb      	ldr	r3, [r7, #8]
 8105e20:	681b      	ldr	r3, [r3, #0]
 8105e22:	f003 0304 	and.w	r3, r3, #4
 8105e26:	2b00      	cmp	r3, #0
 8105e28:	d044      	beq.n	8105eb4 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8105e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e2c:	68db      	ldr	r3, [r3, #12]
 8105e2e:	0c1b      	lsrs	r3, r3, #16
 8105e30:	041b      	lsls	r3, r3, #16
 8105e32:	68ba      	ldr	r2, [r7, #8]
 8105e34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8105e36:	431a      	orrs	r2, r3
 8105e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e3a:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8105e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e3e:	68db      	ldr	r3, [r3, #12]
 8105e40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8105e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e46:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8105e48:	68fb      	ldr	r3, [r7, #12]
 8105e4a:	681b      	ldr	r3, [r3, #0]
 8105e4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8105e4e:	68fb      	ldr	r3, [r7, #12]
 8105e50:	681b      	ldr	r3, [r3, #0]
 8105e52:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8105e56:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8105e58:	68bb      	ldr	r3, [r7, #8]
 8105e5a:	681b      	ldr	r3, [r3, #0]
 8105e5c:	f003 0308 	and.w	r3, r3, #8
 8105e60:	2b00      	cmp	r3, #0
 8105e62:	d027      	beq.n	8105eb4 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8105e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e66:	689b      	ldr	r3, [r3, #8]
 8105e68:	b29a      	uxth	r2, r3
 8105e6a:	68bb      	ldr	r3, [r7, #8]
 8105e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e6e:	041b      	lsls	r3, r3, #16
 8105e70:	431a      	orrs	r2, r3
 8105e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e74:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8105e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e78:	68db      	ldr	r3, [r3, #12]
 8105e7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8105e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e80:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8105e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e84:	68db      	ldr	r3, [r3, #12]
 8105e86:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8105e8a:	68bb      	ldr	r3, [r7, #8]
 8105e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105e8e:	431a      	orrs	r2, r3
 8105e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e92:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8105e94:	68fb      	ldr	r3, [r7, #12]
 8105e96:	681b      	ldr	r3, [r3, #0]
 8105e98:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8105e9a:	68fb      	ldr	r3, [r7, #12]
 8105e9c:	681b      	ldr	r3, [r3, #0]
 8105e9e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8105ea2:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8105ea4:	68fb      	ldr	r3, [r7, #12]
 8105ea6:	681b      	ldr	r3, [r3, #0]
 8105ea8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8105eaa:	68fb      	ldr	r3, [r7, #12]
 8105eac:	681b      	ldr	r3, [r3, #0]
 8105eae:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8105eb2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8105eb4:	68bb      	ldr	r3, [r7, #8]
 8105eb6:	681b      	ldr	r3, [r3, #0]
 8105eb8:	f003 0310 	and.w	r3, r3, #16
 8105ebc:	2b00      	cmp	r3, #0
 8105ebe:	d010      	beq.n	8105ee2 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8105ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ec2:	689b      	ldr	r3, [r3, #8]
 8105ec4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8105ec8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8105ecc:	68ba      	ldr	r2, [r7, #8]
 8105ece:	6992      	ldr	r2, [r2, #24]
 8105ed0:	431a      	orrs	r2, r3
 8105ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ed4:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8105ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ed8:	68db      	ldr	r3, [r3, #12]
 8105eda:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8105ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ee0:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8105ee2:	68bb      	ldr	r3, [r7, #8]
 8105ee4:	681b      	ldr	r3, [r3, #0]
 8105ee6:	f003 0304 	and.w	r3, r3, #4
 8105eea:	2b00      	cmp	r3, #0
 8105eec:	d105      	bne.n	8105efa <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8105eee:	68bb      	ldr	r3, [r7, #8]
 8105ef0:	681b      	ldr	r3, [r3, #0]
 8105ef2:	f003 0310 	and.w	r3, r3, #16
 8105ef6:	2b00      	cmp	r3, #0
 8105ef8:	d036      	beq.n	8105f68 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8105efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105efc:	68db      	ldr	r3, [r3, #12]
 8105efe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8105f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f04:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8105f06:	f3bf 8f5f 	dmb	sy
}
 8105f0a:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8105f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f0e:	68db      	ldr	r3, [r3, #12]
 8105f10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8105f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f16:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8105f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105f1a:	3301      	adds	r3, #1
 8105f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105f20:	2b03      	cmp	r3, #3
 8105f22:	d902      	bls.n	8105f2a <ETH_Prepare_Tx_Descriptors+0x164>
 8105f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105f26:	3b04      	subs	r3, #4
 8105f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8105f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8105f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105f32:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8105f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105f36:	3301      	adds	r3, #1
 8105f38:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8105f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f3c:	68db      	ldr	r3, [r3, #12]
 8105f3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8105f42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8105f46:	d10f      	bne.n	8105f68 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8105f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f4a:	6a3a      	ldr	r2, [r7, #32]
 8105f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105f50:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8105f52:	f3bf 8f5f 	dmb	sy
}
 8105f56:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8105f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f5a:	68db      	ldr	r3, [r3, #12]
 8105f5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8105f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f62:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8105f64:	2302      	movs	r3, #2
 8105f66:	e1c2      	b.n	81062ee <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8105f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105f6a:	3301      	adds	r3, #1
 8105f6c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8105f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105f70:	681b      	ldr	r3, [r3, #0]
 8105f72:	461a      	mov	r2, r3
 8105f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f76:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8105f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f7a:	689b      	ldr	r3, [r3, #8]
 8105f7c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8105f80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8105f84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105f86:	6852      	ldr	r2, [r2, #4]
 8105f88:	431a      	orrs	r2, r3
 8105f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f8c:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8105f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105f90:	689b      	ldr	r3, [r3, #8]
 8105f92:	2b00      	cmp	r3, #0
 8105f94:	d014      	beq.n	8105fc0 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8105f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105f98:	689b      	ldr	r3, [r3, #8]
 8105f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8105f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105f9e:	681b      	ldr	r3, [r3, #0]
 8105fa0:	461a      	mov	r2, r3
 8105fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fa4:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8105fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fa8:	689b      	ldr	r3, [r3, #8]
 8105faa:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8105fae:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8105fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105fb4:	6852      	ldr	r2, [r2, #4]
 8105fb6:	0412      	lsls	r2, r2, #16
 8105fb8:	431a      	orrs	r2, r3
 8105fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fbc:	609a      	str	r2, [r3, #8]
 8105fbe:	e00a      	b.n	8105fd6 <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8105fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fc2:	2200      	movs	r2, #0
 8105fc4:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8105fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fc8:	689b      	ldr	r3, [r3, #8]
 8105fca:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8105fce:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8105fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105fd4:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8105fd6:	68bb      	ldr	r3, [r7, #8]
 8105fd8:	681b      	ldr	r3, [r3, #0]
 8105fda:	f003 0310 	and.w	r3, r3, #16
 8105fde:	2b00      	cmp	r3, #0
 8105fe0:	d019      	beq.n	8106016 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8105fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fe4:	68db      	ldr	r3, [r3, #12]
 8105fe6:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8105fea:	68bb      	ldr	r3, [r7, #8]
 8105fec:	6a1b      	ldr	r3, [r3, #32]
 8105fee:	04db      	lsls	r3, r3, #19
 8105ff0:	431a      	orrs	r2, r3
 8105ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ff4:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8105ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ff8:	68db      	ldr	r3, [r3, #12]
 8105ffa:	0c9b      	lsrs	r3, r3, #18
 8105ffc:	049b      	lsls	r3, r3, #18
 8105ffe:	68ba      	ldr	r2, [r7, #8]
 8106000:	69d2      	ldr	r2, [r2, #28]
 8106002:	431a      	orrs	r2, r3
 8106004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106006:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8106008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810600a:	68db      	ldr	r3, [r3, #12]
 810600c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8106010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106012:	60da      	str	r2, [r3, #12]
 8106014:	e028      	b.n	8106068 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8106016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106018:	68db      	ldr	r3, [r3, #12]
 810601a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810601e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8106022:	68ba      	ldr	r2, [r7, #8]
 8106024:	6852      	ldr	r2, [r2, #4]
 8106026:	431a      	orrs	r2, r3
 8106028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810602a:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 810602c:	68bb      	ldr	r3, [r7, #8]
 810602e:	681b      	ldr	r3, [r3, #0]
 8106030:	f003 0301 	and.w	r3, r3, #1
 8106034:	2b00      	cmp	r3, #0
 8106036:	d008      	beq.n	810604a <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8106038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810603a:	68db      	ldr	r3, [r3, #12]
 810603c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8106040:	68bb      	ldr	r3, [r7, #8]
 8106042:	695b      	ldr	r3, [r3, #20]
 8106044:	431a      	orrs	r2, r3
 8106046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106048:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 810604a:	68bb      	ldr	r3, [r7, #8]
 810604c:	681b      	ldr	r3, [r3, #0]
 810604e:	f003 0320 	and.w	r3, r3, #32
 8106052:	2b00      	cmp	r3, #0
 8106054:	d008      	beq.n	8106068 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8106056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106058:	68db      	ldr	r3, [r3, #12]
 810605a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 810605e:	68bb      	ldr	r3, [r7, #8]
 8106060:	691b      	ldr	r3, [r3, #16]
 8106062:	431a      	orrs	r2, r3
 8106064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106066:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8106068:	68bb      	ldr	r3, [r7, #8]
 810606a:	681b      	ldr	r3, [r3, #0]
 810606c:	f003 0304 	and.w	r3, r3, #4
 8106070:	2b00      	cmp	r3, #0
 8106072:	d008      	beq.n	8106086 <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8106074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106076:	689b      	ldr	r3, [r3, #8]
 8106078:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 810607c:	68bb      	ldr	r3, [r7, #8]
 810607e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106080:	431a      	orrs	r2, r3
 8106082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106084:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8106086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106088:	68db      	ldr	r3, [r3, #12]
 810608a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 810608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106090:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8106092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106094:	68db      	ldr	r3, [r3, #12]
 8106096:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 810609a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810609c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 810609e:	f3bf 8f5f 	dmb	sy
}
 81060a2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 81060a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060a6:	68db      	ldr	r3, [r3, #12]
 81060a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 81060ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060ae:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 81060b0:	68bb      	ldr	r3, [r7, #8]
 81060b2:	681b      	ldr	r3, [r3, #0]
 81060b4:	f003 0302 	and.w	r3, r3, #2
 81060b8:	2b00      	cmp	r3, #0
 81060ba:	f000 80d9 	beq.w	8106270 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 81060be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060c0:	68db      	ldr	r3, [r3, #12]
 81060c2:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 81060c6:	68bb      	ldr	r3, [r7, #8]
 81060c8:	68db      	ldr	r3, [r3, #12]
 81060ca:	431a      	orrs	r2, r3
 81060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060ce:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 81060d0:	e0ce      	b.n	8106270 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 81060d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060d4:	68db      	ldr	r3, [r3, #12]
 81060d6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 81060da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060dc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 81060de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81060e0:	3301      	adds	r3, #1
 81060e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81060e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81060e6:	2b03      	cmp	r3, #3
 81060e8:	d902      	bls.n	81060f0 <ETH_Prepare_Tx_Descriptors+0x32a>
 81060ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81060ec:	3b04      	subs	r3, #4
 81060ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 81060f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81060f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81060f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81060f8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 81060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060fc:	68db      	ldr	r3, [r3, #12]
 81060fe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8106102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106104:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8106106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106108:	68db      	ldr	r3, [r3, #12]
 810610a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810610e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8106112:	d007      	beq.n	8106124 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8106114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8106116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8106118:	3304      	adds	r3, #4
 810611a:	009b      	lsls	r3, r3, #2
 810611c:	4413      	add	r3, r2
 810611e:	685b      	ldr	r3, [r3, #4]
 8106120:	2b00      	cmp	r3, #0
 8106122:	d029      	beq.n	8106178 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8106124:	6a3b      	ldr	r3, [r7, #32]
 8106126:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8106128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810612a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810612c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106130:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8106132:	2300      	movs	r3, #0
 8106134:	63bb      	str	r3, [r7, #56]	@ 0x38
 8106136:	e019      	b.n	810616c <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8106138:	f3bf 8f5f 	dmb	sy
}
 810613c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 810613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106140:	68db      	ldr	r3, [r3, #12]
 8106142:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8106146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106148:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 810614a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810614c:	3301      	adds	r3, #1
 810614e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8106152:	2b03      	cmp	r3, #3
 8106154:	d902      	bls.n	810615c <ETH_Prepare_Tx_Descriptors+0x396>
 8106156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8106158:	3b04      	subs	r3, #4
 810615a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810615e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8106160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106164:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8106166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106168:	3301      	adds	r3, #1
 810616a:	63bb      	str	r3, [r7, #56]	@ 0x38
 810616c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810616e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106170:	429a      	cmp	r2, r3
 8106172:	d3e1      	bcc.n	8106138 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8106174:	2302      	movs	r3, #2
 8106176:	e0ba      	b.n	81062ee <ETH_Prepare_Tx_Descriptors+0x528>
    }

    descnbr += 1U;
 8106178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810617a:	3301      	adds	r3, #1
 810617c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 810617e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106180:	689b      	ldr	r3, [r3, #8]
 8106182:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8106184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106186:	681b      	ldr	r3, [r3, #0]
 8106188:	461a      	mov	r2, r3
 810618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810618c:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 810618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106190:	689b      	ldr	r3, [r3, #8]
 8106192:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8106196:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810619a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810619c:	6852      	ldr	r2, [r2, #4]
 810619e:	431a      	orrs	r2, r3
 81061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061a2:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 81061a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81061a6:	689b      	ldr	r3, [r3, #8]
 81061a8:	2b00      	cmp	r3, #0
 81061aa:	d014      	beq.n	81061d6 <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 81061ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81061ae:	689b      	ldr	r3, [r3, #8]
 81061b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 81061b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81061b4:	681b      	ldr	r3, [r3, #0]
 81061b6:	461a      	mov	r2, r3
 81061b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061ba:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 81061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061be:	689b      	ldr	r3, [r3, #8]
 81061c0:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 81061c4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 81061c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81061ca:	6852      	ldr	r2, [r2, #4]
 81061cc:	0412      	lsls	r2, r2, #16
 81061ce:	431a      	orrs	r2, r3
 81061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061d2:	609a      	str	r2, [r3, #8]
 81061d4:	e00a      	b.n	81061ec <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 81061d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061d8:	2200      	movs	r2, #0
 81061da:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 81061dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061de:	689b      	ldr	r3, [r3, #8]
 81061e0:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 81061e4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 81061e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81061ea:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 81061ec:	68bb      	ldr	r3, [r7, #8]
 81061ee:	681b      	ldr	r3, [r3, #0]
 81061f0:	f003 0310 	and.w	r3, r3, #16
 81061f4:	2b00      	cmp	r3, #0
 81061f6:	d00f      	beq.n	8106218 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 81061f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061fa:	68db      	ldr	r3, [r3, #12]
 81061fc:	0c9b      	lsrs	r3, r3, #18
 81061fe:	049b      	lsls	r3, r3, #18
 8106200:	68ba      	ldr	r2, [r7, #8]
 8106202:	69d2      	ldr	r2, [r2, #28]
 8106204:	431a      	orrs	r2, r3
 8106206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106208:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 810620a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810620c:	68db      	ldr	r3, [r3, #12]
 810620e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8106212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106214:	60da      	str	r2, [r3, #12]
 8106216:	e019      	b.n	810624c <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8106218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810621a:	68db      	ldr	r3, [r3, #12]
 810621c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8106220:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8106224:	68ba      	ldr	r2, [r7, #8]
 8106226:	6852      	ldr	r2, [r2, #4]
 8106228:	431a      	orrs	r2, r3
 810622a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810622c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 810622e:	68bb      	ldr	r3, [r7, #8]
 8106230:	681b      	ldr	r3, [r3, #0]
 8106232:	f003 0301 	and.w	r3, r3, #1
 8106236:	2b00      	cmp	r3, #0
 8106238:	d008      	beq.n	810624c <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 810623a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810623c:	68db      	ldr	r3, [r3, #12]
 810623e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8106242:	68bb      	ldr	r3, [r7, #8]
 8106244:	695b      	ldr	r3, [r3, #20]
 8106246:	431a      	orrs	r2, r3
 8106248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810624a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 810624c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810624e:	3301      	adds	r3, #1
 8106250:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8106252:	f3bf 8f5f 	dmb	sy
}
 8106256:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8106258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810625a:	68db      	ldr	r3, [r3, #12]
 810625c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8106260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106262:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8106264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106266:	68db      	ldr	r3, [r3, #12]
 8106268:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 810626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810626e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8106270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106272:	689b      	ldr	r3, [r3, #8]
 8106274:	2b00      	cmp	r3, #0
 8106276:	f47f af2c 	bne.w	81060d2 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 810627a:	687b      	ldr	r3, [r7, #4]
 810627c:	2b00      	cmp	r3, #0
 810627e:	d006      	beq.n	810628e <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8106280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106282:	689b      	ldr	r3, [r3, #8]
 8106284:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8106288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810628a:	609a      	str	r2, [r3, #8]
 810628c:	e005      	b.n	810629a <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 810628e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106290:	689b      	ldr	r3, [r3, #8]
 8106292:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8106296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106298:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 810629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810629c:	68db      	ldr	r3, [r3, #12]
 810629e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 81062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062a4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 81062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81062a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81062aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81062ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81062ae:	3304      	adds	r3, #4
 81062b0:	009b      	lsls	r3, r3, #2
 81062b2:	440b      	add	r3, r1
 81062b4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 81062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81062b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81062ba:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81062bc:	f3ef 8310 	mrs	r3, PRIMASK
 81062c0:	613b      	str	r3, [r7, #16]
  return(result);
 81062c2:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 81062c4:	61fb      	str	r3, [r7, #28]
 81062c6:	2301      	movs	r3, #1
 81062c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 81062ca:	697b      	ldr	r3, [r7, #20]
 81062cc:	f383 8810 	msr	PRIMASK, r3
}
 81062d0:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 81062d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81062d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 81062d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81062d8:	4413      	add	r3, r2
 81062da:	1c5a      	adds	r2, r3, #1
 81062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81062de:	629a      	str	r2, [r3, #40]	@ 0x28
 81062e0:	69fb      	ldr	r3, [r7, #28]
 81062e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 81062e4:	69bb      	ldr	r3, [r7, #24]
 81062e6:	f383 8810 	msr	PRIMASK, r3
}
 81062ea:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 81062ec:	2300      	movs	r3, #0
}
 81062ee:	4618      	mov	r0, r3
 81062f0:	3744      	adds	r7, #68	@ 0x44
 81062f2:	46bd      	mov	sp, r7
 81062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062f8:	4770      	bx	lr
	...

081062fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81062fc:	b480      	push	{r7}
 81062fe:	b089      	sub	sp, #36	@ 0x24
 8106300:	af00      	add	r7, sp, #0
 8106302:	6078      	str	r0, [r7, #4]
 8106304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8106306:	2300      	movs	r3, #0
 8106308:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810630a:	4b89      	ldr	r3, [pc, #548]	@ (8106530 <HAL_GPIO_Init+0x234>)
 810630c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810630e:	e194      	b.n	810663a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106310:	683b      	ldr	r3, [r7, #0]
 8106312:	681a      	ldr	r2, [r3, #0]
 8106314:	2101      	movs	r1, #1
 8106316:	69fb      	ldr	r3, [r7, #28]
 8106318:	fa01 f303 	lsl.w	r3, r1, r3
 810631c:	4013      	ands	r3, r2
 810631e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106320:	693b      	ldr	r3, [r7, #16]
 8106322:	2b00      	cmp	r3, #0
 8106324:	f000 8186 	beq.w	8106634 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8106328:	683b      	ldr	r3, [r7, #0]
 810632a:	685b      	ldr	r3, [r3, #4]
 810632c:	f003 0303 	and.w	r3, r3, #3
 8106330:	2b01      	cmp	r3, #1
 8106332:	d005      	beq.n	8106340 <HAL_GPIO_Init+0x44>
 8106334:	683b      	ldr	r3, [r7, #0]
 8106336:	685b      	ldr	r3, [r3, #4]
 8106338:	f003 0303 	and.w	r3, r3, #3
 810633c:	2b02      	cmp	r3, #2
 810633e:	d130      	bne.n	81063a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106340:	687b      	ldr	r3, [r7, #4]
 8106342:	689b      	ldr	r3, [r3, #8]
 8106344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8106346:	69fb      	ldr	r3, [r7, #28]
 8106348:	005b      	lsls	r3, r3, #1
 810634a:	2203      	movs	r2, #3
 810634c:	fa02 f303 	lsl.w	r3, r2, r3
 8106350:	43db      	mvns	r3, r3
 8106352:	69ba      	ldr	r2, [r7, #24]
 8106354:	4013      	ands	r3, r2
 8106356:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8106358:	683b      	ldr	r3, [r7, #0]
 810635a:	68da      	ldr	r2, [r3, #12]
 810635c:	69fb      	ldr	r3, [r7, #28]
 810635e:	005b      	lsls	r3, r3, #1
 8106360:	fa02 f303 	lsl.w	r3, r2, r3
 8106364:	69ba      	ldr	r2, [r7, #24]
 8106366:	4313      	orrs	r3, r2
 8106368:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810636a:	687b      	ldr	r3, [r7, #4]
 810636c:	69ba      	ldr	r2, [r7, #24]
 810636e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8106370:	687b      	ldr	r3, [r7, #4]
 8106372:	685b      	ldr	r3, [r3, #4]
 8106374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8106376:	2201      	movs	r2, #1
 8106378:	69fb      	ldr	r3, [r7, #28]
 810637a:	fa02 f303 	lsl.w	r3, r2, r3
 810637e:	43db      	mvns	r3, r3
 8106380:	69ba      	ldr	r2, [r7, #24]
 8106382:	4013      	ands	r3, r2
 8106384:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8106386:	683b      	ldr	r3, [r7, #0]
 8106388:	685b      	ldr	r3, [r3, #4]
 810638a:	091b      	lsrs	r3, r3, #4
 810638c:	f003 0201 	and.w	r2, r3, #1
 8106390:	69fb      	ldr	r3, [r7, #28]
 8106392:	fa02 f303 	lsl.w	r3, r2, r3
 8106396:	69ba      	ldr	r2, [r7, #24]
 8106398:	4313      	orrs	r3, r2
 810639a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810639c:	687b      	ldr	r3, [r7, #4]
 810639e:	69ba      	ldr	r2, [r7, #24]
 81063a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81063a2:	683b      	ldr	r3, [r7, #0]
 81063a4:	685b      	ldr	r3, [r3, #4]
 81063a6:	f003 0303 	and.w	r3, r3, #3
 81063aa:	2b03      	cmp	r3, #3
 81063ac:	d017      	beq.n	81063de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	68db      	ldr	r3, [r3, #12]
 81063b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81063b4:	69fb      	ldr	r3, [r7, #28]
 81063b6:	005b      	lsls	r3, r3, #1
 81063b8:	2203      	movs	r2, #3
 81063ba:	fa02 f303 	lsl.w	r3, r2, r3
 81063be:	43db      	mvns	r3, r3
 81063c0:	69ba      	ldr	r2, [r7, #24]
 81063c2:	4013      	ands	r3, r2
 81063c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81063c6:	683b      	ldr	r3, [r7, #0]
 81063c8:	689a      	ldr	r2, [r3, #8]
 81063ca:	69fb      	ldr	r3, [r7, #28]
 81063cc:	005b      	lsls	r3, r3, #1
 81063ce:	fa02 f303 	lsl.w	r3, r2, r3
 81063d2:	69ba      	ldr	r2, [r7, #24]
 81063d4:	4313      	orrs	r3, r2
 81063d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81063d8:	687b      	ldr	r3, [r7, #4]
 81063da:	69ba      	ldr	r2, [r7, #24]
 81063dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81063de:	683b      	ldr	r3, [r7, #0]
 81063e0:	685b      	ldr	r3, [r3, #4]
 81063e2:	f003 0303 	and.w	r3, r3, #3
 81063e6:	2b02      	cmp	r3, #2
 81063e8:	d123      	bne.n	8106432 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81063ea:	69fb      	ldr	r3, [r7, #28]
 81063ec:	08da      	lsrs	r2, r3, #3
 81063ee:	687b      	ldr	r3, [r7, #4]
 81063f0:	3208      	adds	r2, #8
 81063f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81063f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81063f8:	69fb      	ldr	r3, [r7, #28]
 81063fa:	f003 0307 	and.w	r3, r3, #7
 81063fe:	009b      	lsls	r3, r3, #2
 8106400:	220f      	movs	r2, #15
 8106402:	fa02 f303 	lsl.w	r3, r2, r3
 8106406:	43db      	mvns	r3, r3
 8106408:	69ba      	ldr	r2, [r7, #24]
 810640a:	4013      	ands	r3, r2
 810640c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810640e:	683b      	ldr	r3, [r7, #0]
 8106410:	691a      	ldr	r2, [r3, #16]
 8106412:	69fb      	ldr	r3, [r7, #28]
 8106414:	f003 0307 	and.w	r3, r3, #7
 8106418:	009b      	lsls	r3, r3, #2
 810641a:	fa02 f303 	lsl.w	r3, r2, r3
 810641e:	69ba      	ldr	r2, [r7, #24]
 8106420:	4313      	orrs	r3, r2
 8106422:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8106424:	69fb      	ldr	r3, [r7, #28]
 8106426:	08da      	lsrs	r2, r3, #3
 8106428:	687b      	ldr	r3, [r7, #4]
 810642a:	3208      	adds	r2, #8
 810642c:	69b9      	ldr	r1, [r7, #24]
 810642e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8106432:	687b      	ldr	r3, [r7, #4]
 8106434:	681b      	ldr	r3, [r3, #0]
 8106436:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8106438:	69fb      	ldr	r3, [r7, #28]
 810643a:	005b      	lsls	r3, r3, #1
 810643c:	2203      	movs	r2, #3
 810643e:	fa02 f303 	lsl.w	r3, r2, r3
 8106442:	43db      	mvns	r3, r3
 8106444:	69ba      	ldr	r2, [r7, #24]
 8106446:	4013      	ands	r3, r2
 8106448:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810644a:	683b      	ldr	r3, [r7, #0]
 810644c:	685b      	ldr	r3, [r3, #4]
 810644e:	f003 0203 	and.w	r2, r3, #3
 8106452:	69fb      	ldr	r3, [r7, #28]
 8106454:	005b      	lsls	r3, r3, #1
 8106456:	fa02 f303 	lsl.w	r3, r2, r3
 810645a:	69ba      	ldr	r2, [r7, #24]
 810645c:	4313      	orrs	r3, r2
 810645e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8106460:	687b      	ldr	r3, [r7, #4]
 8106462:	69ba      	ldr	r2, [r7, #24]
 8106464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8106466:	683b      	ldr	r3, [r7, #0]
 8106468:	685b      	ldr	r3, [r3, #4]
 810646a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810646e:	2b00      	cmp	r3, #0
 8106470:	f000 80e0 	beq.w	8106634 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8106474:	4b2f      	ldr	r3, [pc, #188]	@ (8106534 <HAL_GPIO_Init+0x238>)
 8106476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810647a:	4a2e      	ldr	r2, [pc, #184]	@ (8106534 <HAL_GPIO_Init+0x238>)
 810647c:	f043 0302 	orr.w	r3, r3, #2
 8106480:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8106484:	4b2b      	ldr	r3, [pc, #172]	@ (8106534 <HAL_GPIO_Init+0x238>)
 8106486:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810648a:	f003 0302 	and.w	r3, r3, #2
 810648e:	60fb      	str	r3, [r7, #12]
 8106490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8106492:	4a29      	ldr	r2, [pc, #164]	@ (8106538 <HAL_GPIO_Init+0x23c>)
 8106494:	69fb      	ldr	r3, [r7, #28]
 8106496:	089b      	lsrs	r3, r3, #2
 8106498:	3302      	adds	r3, #2
 810649a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810649e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81064a0:	69fb      	ldr	r3, [r7, #28]
 81064a2:	f003 0303 	and.w	r3, r3, #3
 81064a6:	009b      	lsls	r3, r3, #2
 81064a8:	220f      	movs	r2, #15
 81064aa:	fa02 f303 	lsl.w	r3, r2, r3
 81064ae:	43db      	mvns	r3, r3
 81064b0:	69ba      	ldr	r2, [r7, #24]
 81064b2:	4013      	ands	r3, r2
 81064b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81064b6:	687b      	ldr	r3, [r7, #4]
 81064b8:	4a20      	ldr	r2, [pc, #128]	@ (810653c <HAL_GPIO_Init+0x240>)
 81064ba:	4293      	cmp	r3, r2
 81064bc:	d052      	beq.n	8106564 <HAL_GPIO_Init+0x268>
 81064be:	687b      	ldr	r3, [r7, #4]
 81064c0:	4a1f      	ldr	r2, [pc, #124]	@ (8106540 <HAL_GPIO_Init+0x244>)
 81064c2:	4293      	cmp	r3, r2
 81064c4:	d031      	beq.n	810652a <HAL_GPIO_Init+0x22e>
 81064c6:	687b      	ldr	r3, [r7, #4]
 81064c8:	4a1e      	ldr	r2, [pc, #120]	@ (8106544 <HAL_GPIO_Init+0x248>)
 81064ca:	4293      	cmp	r3, r2
 81064cc:	d02b      	beq.n	8106526 <HAL_GPIO_Init+0x22a>
 81064ce:	687b      	ldr	r3, [r7, #4]
 81064d0:	4a1d      	ldr	r2, [pc, #116]	@ (8106548 <HAL_GPIO_Init+0x24c>)
 81064d2:	4293      	cmp	r3, r2
 81064d4:	d025      	beq.n	8106522 <HAL_GPIO_Init+0x226>
 81064d6:	687b      	ldr	r3, [r7, #4]
 81064d8:	4a1c      	ldr	r2, [pc, #112]	@ (810654c <HAL_GPIO_Init+0x250>)
 81064da:	4293      	cmp	r3, r2
 81064dc:	d01f      	beq.n	810651e <HAL_GPIO_Init+0x222>
 81064de:	687b      	ldr	r3, [r7, #4]
 81064e0:	4a1b      	ldr	r2, [pc, #108]	@ (8106550 <HAL_GPIO_Init+0x254>)
 81064e2:	4293      	cmp	r3, r2
 81064e4:	d019      	beq.n	810651a <HAL_GPIO_Init+0x21e>
 81064e6:	687b      	ldr	r3, [r7, #4]
 81064e8:	4a1a      	ldr	r2, [pc, #104]	@ (8106554 <HAL_GPIO_Init+0x258>)
 81064ea:	4293      	cmp	r3, r2
 81064ec:	d013      	beq.n	8106516 <HAL_GPIO_Init+0x21a>
 81064ee:	687b      	ldr	r3, [r7, #4]
 81064f0:	4a19      	ldr	r2, [pc, #100]	@ (8106558 <HAL_GPIO_Init+0x25c>)
 81064f2:	4293      	cmp	r3, r2
 81064f4:	d00d      	beq.n	8106512 <HAL_GPIO_Init+0x216>
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	4a18      	ldr	r2, [pc, #96]	@ (810655c <HAL_GPIO_Init+0x260>)
 81064fa:	4293      	cmp	r3, r2
 81064fc:	d007      	beq.n	810650e <HAL_GPIO_Init+0x212>
 81064fe:	687b      	ldr	r3, [r7, #4]
 8106500:	4a17      	ldr	r2, [pc, #92]	@ (8106560 <HAL_GPIO_Init+0x264>)
 8106502:	4293      	cmp	r3, r2
 8106504:	d101      	bne.n	810650a <HAL_GPIO_Init+0x20e>
 8106506:	2309      	movs	r3, #9
 8106508:	e02d      	b.n	8106566 <HAL_GPIO_Init+0x26a>
 810650a:	230a      	movs	r3, #10
 810650c:	e02b      	b.n	8106566 <HAL_GPIO_Init+0x26a>
 810650e:	2308      	movs	r3, #8
 8106510:	e029      	b.n	8106566 <HAL_GPIO_Init+0x26a>
 8106512:	2307      	movs	r3, #7
 8106514:	e027      	b.n	8106566 <HAL_GPIO_Init+0x26a>
 8106516:	2306      	movs	r3, #6
 8106518:	e025      	b.n	8106566 <HAL_GPIO_Init+0x26a>
 810651a:	2305      	movs	r3, #5
 810651c:	e023      	b.n	8106566 <HAL_GPIO_Init+0x26a>
 810651e:	2304      	movs	r3, #4
 8106520:	e021      	b.n	8106566 <HAL_GPIO_Init+0x26a>
 8106522:	2303      	movs	r3, #3
 8106524:	e01f      	b.n	8106566 <HAL_GPIO_Init+0x26a>
 8106526:	2302      	movs	r3, #2
 8106528:	e01d      	b.n	8106566 <HAL_GPIO_Init+0x26a>
 810652a:	2301      	movs	r3, #1
 810652c:	e01b      	b.n	8106566 <HAL_GPIO_Init+0x26a>
 810652e:	bf00      	nop
 8106530:	580000c0 	.word	0x580000c0
 8106534:	58024400 	.word	0x58024400
 8106538:	58000400 	.word	0x58000400
 810653c:	58020000 	.word	0x58020000
 8106540:	58020400 	.word	0x58020400
 8106544:	58020800 	.word	0x58020800
 8106548:	58020c00 	.word	0x58020c00
 810654c:	58021000 	.word	0x58021000
 8106550:	58021400 	.word	0x58021400
 8106554:	58021800 	.word	0x58021800
 8106558:	58021c00 	.word	0x58021c00
 810655c:	58022000 	.word	0x58022000
 8106560:	58022400 	.word	0x58022400
 8106564:	2300      	movs	r3, #0
 8106566:	69fa      	ldr	r2, [r7, #28]
 8106568:	f002 0203 	and.w	r2, r2, #3
 810656c:	0092      	lsls	r2, r2, #2
 810656e:	4093      	lsls	r3, r2
 8106570:	69ba      	ldr	r2, [r7, #24]
 8106572:	4313      	orrs	r3, r2
 8106574:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8106576:	4938      	ldr	r1, [pc, #224]	@ (8106658 <HAL_GPIO_Init+0x35c>)
 8106578:	69fb      	ldr	r3, [r7, #28]
 810657a:	089b      	lsrs	r3, r3, #2
 810657c:	3302      	adds	r3, #2
 810657e:	69ba      	ldr	r2, [r7, #24]
 8106580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8106584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8106588:	681b      	ldr	r3, [r3, #0]
 810658a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810658c:	693b      	ldr	r3, [r7, #16]
 810658e:	43db      	mvns	r3, r3
 8106590:	69ba      	ldr	r2, [r7, #24]
 8106592:	4013      	ands	r3, r2
 8106594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8106596:	683b      	ldr	r3, [r7, #0]
 8106598:	685b      	ldr	r3, [r3, #4]
 810659a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810659e:	2b00      	cmp	r3, #0
 81065a0:	d003      	beq.n	81065aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81065a2:	69ba      	ldr	r2, [r7, #24]
 81065a4:	693b      	ldr	r3, [r7, #16]
 81065a6:	4313      	orrs	r3, r2
 81065a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81065aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81065ae:	69bb      	ldr	r3, [r7, #24]
 81065b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81065b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81065b6:	685b      	ldr	r3, [r3, #4]
 81065b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81065ba:	693b      	ldr	r3, [r7, #16]
 81065bc:	43db      	mvns	r3, r3
 81065be:	69ba      	ldr	r2, [r7, #24]
 81065c0:	4013      	ands	r3, r2
 81065c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81065c4:	683b      	ldr	r3, [r7, #0]
 81065c6:	685b      	ldr	r3, [r3, #4]
 81065c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81065cc:	2b00      	cmp	r3, #0
 81065ce:	d003      	beq.n	81065d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81065d0:	69ba      	ldr	r2, [r7, #24]
 81065d2:	693b      	ldr	r3, [r7, #16]
 81065d4:	4313      	orrs	r3, r2
 81065d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81065d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81065dc:	69bb      	ldr	r3, [r7, #24]
 81065de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81065e0:	697b      	ldr	r3, [r7, #20]
 81065e2:	685b      	ldr	r3, [r3, #4]
 81065e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81065e6:	693b      	ldr	r3, [r7, #16]
 81065e8:	43db      	mvns	r3, r3
 81065ea:	69ba      	ldr	r2, [r7, #24]
 81065ec:	4013      	ands	r3, r2
 81065ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81065f0:	683b      	ldr	r3, [r7, #0]
 81065f2:	685b      	ldr	r3, [r3, #4]
 81065f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81065f8:	2b00      	cmp	r3, #0
 81065fa:	d003      	beq.n	8106604 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81065fc:	69ba      	ldr	r2, [r7, #24]
 81065fe:	693b      	ldr	r3, [r7, #16]
 8106600:	4313      	orrs	r3, r2
 8106602:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8106604:	697b      	ldr	r3, [r7, #20]
 8106606:	69ba      	ldr	r2, [r7, #24]
 8106608:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810660a:	697b      	ldr	r3, [r7, #20]
 810660c:	681b      	ldr	r3, [r3, #0]
 810660e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106610:	693b      	ldr	r3, [r7, #16]
 8106612:	43db      	mvns	r3, r3
 8106614:	69ba      	ldr	r2, [r7, #24]
 8106616:	4013      	ands	r3, r2
 8106618:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810661a:	683b      	ldr	r3, [r7, #0]
 810661c:	685b      	ldr	r3, [r3, #4]
 810661e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106622:	2b00      	cmp	r3, #0
 8106624:	d003      	beq.n	810662e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8106626:	69ba      	ldr	r2, [r7, #24]
 8106628:	693b      	ldr	r3, [r7, #16]
 810662a:	4313      	orrs	r3, r2
 810662c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810662e:	697b      	ldr	r3, [r7, #20]
 8106630:	69ba      	ldr	r2, [r7, #24]
 8106632:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8106634:	69fb      	ldr	r3, [r7, #28]
 8106636:	3301      	adds	r3, #1
 8106638:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810663a:	683b      	ldr	r3, [r7, #0]
 810663c:	681a      	ldr	r2, [r3, #0]
 810663e:	69fb      	ldr	r3, [r7, #28]
 8106640:	fa22 f303 	lsr.w	r3, r2, r3
 8106644:	2b00      	cmp	r3, #0
 8106646:	f47f ae63 	bne.w	8106310 <HAL_GPIO_Init+0x14>
  }
}
 810664a:	bf00      	nop
 810664c:	bf00      	nop
 810664e:	3724      	adds	r7, #36	@ 0x24
 8106650:	46bd      	mov	sp, r7
 8106652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106656:	4770      	bx	lr
 8106658:	58000400 	.word	0x58000400

0810665c <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 810665c:	b480      	push	{r7}
 810665e:	b083      	sub	sp, #12
 8106660:	af00      	add	r7, sp, #0
 8106662:	6078      	str	r0, [r7, #4]
 8106664:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8106666:	490e      	ldr	r1, [pc, #56]	@ (81066a0 <HAL_HSEM_Take+0x44>)
 8106668:	683b      	ldr	r3, [r7, #0]
 810666a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810666e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106672:	687a      	ldr	r2, [r7, #4]
 8106674:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8106678:	4a09      	ldr	r2, [pc, #36]	@ (81066a0 <HAL_HSEM_Take+0x44>)
 810667a:	687b      	ldr	r3, [r7, #4]
 810667c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8106680:	683b      	ldr	r3, [r7, #0]
 8106682:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8106686:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810668a:	429a      	cmp	r2, r3
 810668c:	d101      	bne.n	8106692 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 810668e:	2300      	movs	r3, #0
 8106690:	e000      	b.n	8106694 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8106692:	2301      	movs	r3, #1
}
 8106694:	4618      	mov	r0, r3
 8106696:	370c      	adds	r7, #12
 8106698:	46bd      	mov	sp, r7
 810669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810669e:	4770      	bx	lr
 81066a0:	58026400 	.word	0x58026400

081066a4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81066a4:	b480      	push	{r7}
 81066a6:	b083      	sub	sp, #12
 81066a8:	af00      	add	r7, sp, #0
 81066aa:	6078      	str	r0, [r7, #4]
 81066ac:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81066ae:	4906      	ldr	r1, [pc, #24]	@ (81066c8 <HAL_HSEM_Release+0x24>)
 81066b0:	683b      	ldr	r3, [r7, #0]
 81066b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81066b6:	687b      	ldr	r3, [r7, #4]
 81066b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81066bc:	bf00      	nop
 81066be:	370c      	adds	r7, #12
 81066c0:	46bd      	mov	sp, r7
 81066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066c6:	4770      	bx	lr
 81066c8:	58026400 	.word	0x58026400

081066cc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81066cc:	b480      	push	{r7}
 81066ce:	b083      	sub	sp, #12
 81066d0:	af00      	add	r7, sp, #0
 81066d2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81066d4:	4b05      	ldr	r3, [pc, #20]	@ (81066ec <HAL_HSEM_ActivateNotification+0x20>)
 81066d6:	681a      	ldr	r2, [r3, #0]
 81066d8:	4904      	ldr	r1, [pc, #16]	@ (81066ec <HAL_HSEM_ActivateNotification+0x20>)
 81066da:	687b      	ldr	r3, [r7, #4]
 81066dc:	4313      	orrs	r3, r2
 81066de:	600b      	str	r3, [r1, #0]
#endif
}
 81066e0:	bf00      	nop
 81066e2:	370c      	adds	r7, #12
 81066e4:	46bd      	mov	sp, r7
 81066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066ea:	4770      	bx	lr
 81066ec:	58026510 	.word	0x58026510

081066f0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 81066f0:	b580      	push	{r7, lr}
 81066f2:	b082      	sub	sp, #8
 81066f4:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81066f6:	4b0a      	ldr	r3, [pc, #40]	@ (8106720 <HAL_HSEM_IRQHandler+0x30>)
 81066f8:	68db      	ldr	r3, [r3, #12]
 81066fa:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81066fc:	4b08      	ldr	r3, [pc, #32]	@ (8106720 <HAL_HSEM_IRQHandler+0x30>)
 81066fe:	681a      	ldr	r2, [r3, #0]
 8106700:	687b      	ldr	r3, [r7, #4]
 8106702:	43db      	mvns	r3, r3
 8106704:	4906      	ldr	r1, [pc, #24]	@ (8106720 <HAL_HSEM_IRQHandler+0x30>)
 8106706:	4013      	ands	r3, r2
 8106708:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810670a:	4a05      	ldr	r2, [pc, #20]	@ (8106720 <HAL_HSEM_IRQHandler+0x30>)
 810670c:	687b      	ldr	r3, [r7, #4]
 810670e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8106710:	6878      	ldr	r0, [r7, #4]
 8106712:	f7f9 fe3d 	bl	8100390 <HAL_HSEM_FreeCallback>
}
 8106716:	bf00      	nop
 8106718:	3708      	adds	r7, #8
 810671a:	46bd      	mov	sp, r7
 810671c:	bd80      	pop	{r7, pc}
 810671e:	bf00      	nop
 8106720:	58026510 	.word	0x58026510

08106724 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8106724:	b580      	push	{r7, lr}
 8106726:	b084      	sub	sp, #16
 8106728:	af00      	add	r7, sp, #0
 810672a:	60f8      	str	r0, [r7, #12]
 810672c:	460b      	mov	r3, r1
 810672e:	607a      	str	r2, [r7, #4]
 8106730:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8106732:	4b37      	ldr	r3, [pc, #220]	@ (8106810 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106734:	681b      	ldr	r3, [r3, #0]
 8106736:	f023 0201 	bic.w	r2, r3, #1
 810673a:	4935      	ldr	r1, [pc, #212]	@ (8106810 <HAL_PWREx_EnterSTOPMode+0xec>)
 810673c:	68fb      	ldr	r3, [r7, #12]
 810673e:	4313      	orrs	r3, r2
 8106740:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8106742:	687b      	ldr	r3, [r7, #4]
 8106744:	2b00      	cmp	r3, #0
 8106746:	d123      	bne.n	8106790 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8106748:	f7fe f846 	bl	81047d8 <HAL_GetCurrentCPUID>
 810674c:	4603      	mov	r3, r0
 810674e:	2b03      	cmp	r3, #3
 8106750:	d158      	bne.n	8106804 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8106752:	4b2f      	ldr	r3, [pc, #188]	@ (8106810 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106754:	691b      	ldr	r3, [r3, #16]
 8106756:	4a2e      	ldr	r2, [pc, #184]	@ (8106810 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106758:	f023 0301 	bic.w	r3, r3, #1
 810675c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810675e:	4b2d      	ldr	r3, [pc, #180]	@ (8106814 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106760:	691b      	ldr	r3, [r3, #16]
 8106762:	4a2c      	ldr	r2, [pc, #176]	@ (8106814 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106764:	f043 0304 	orr.w	r3, r3, #4
 8106768:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810676a:	f3bf 8f4f 	dsb	sy
}
 810676e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8106770:	f3bf 8f6f 	isb	sy
}
 8106774:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106776:	7afb      	ldrb	r3, [r7, #11]
 8106778:	2b01      	cmp	r3, #1
 810677a:	d101      	bne.n	8106780 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810677c:	bf30      	wfi
 810677e:	e000      	b.n	8106782 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106780:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106782:	4b24      	ldr	r3, [pc, #144]	@ (8106814 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106784:	691b      	ldr	r3, [r3, #16]
 8106786:	4a23      	ldr	r2, [pc, #140]	@ (8106814 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106788:	f023 0304 	bic.w	r3, r3, #4
 810678c:	6113      	str	r3, [r2, #16]
 810678e:	e03c      	b.n	810680a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8106790:	687b      	ldr	r3, [r7, #4]
 8106792:	2b01      	cmp	r3, #1
 8106794:	d123      	bne.n	81067de <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8106796:	f7fe f81f 	bl	81047d8 <HAL_GetCurrentCPUID>
 810679a:	4603      	mov	r3, r0
 810679c:	2b01      	cmp	r3, #1
 810679e:	d133      	bne.n	8106808 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81067a0:	4b1b      	ldr	r3, [pc, #108]	@ (8106810 <HAL_PWREx_EnterSTOPMode+0xec>)
 81067a2:	695b      	ldr	r3, [r3, #20]
 81067a4:	4a1a      	ldr	r2, [pc, #104]	@ (8106810 <HAL_PWREx_EnterSTOPMode+0xec>)
 81067a6:	f023 0302 	bic.w	r3, r3, #2
 81067aa:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81067ac:	4b19      	ldr	r3, [pc, #100]	@ (8106814 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81067ae:	691b      	ldr	r3, [r3, #16]
 81067b0:	4a18      	ldr	r2, [pc, #96]	@ (8106814 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81067b2:	f043 0304 	orr.w	r3, r3, #4
 81067b6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81067b8:	f3bf 8f4f 	dsb	sy
}
 81067bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81067be:	f3bf 8f6f 	isb	sy
}
 81067c2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81067c4:	7afb      	ldrb	r3, [r7, #11]
 81067c6:	2b01      	cmp	r3, #1
 81067c8:	d101      	bne.n	81067ce <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81067ca:	bf30      	wfi
 81067cc:	e000      	b.n	81067d0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81067ce:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81067d0:	4b10      	ldr	r3, [pc, #64]	@ (8106814 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81067d2:	691b      	ldr	r3, [r3, #16]
 81067d4:	4a0f      	ldr	r2, [pc, #60]	@ (8106814 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81067d6:	f023 0304 	bic.w	r3, r3, #4
 81067da:	6113      	str	r3, [r2, #16]
 81067dc:	e015      	b.n	810680a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81067de:	f7fd fffb 	bl	81047d8 <HAL_GetCurrentCPUID>
 81067e2:	4603      	mov	r3, r0
 81067e4:	2b03      	cmp	r3, #3
 81067e6:	d106      	bne.n	81067f6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81067e8:	4b09      	ldr	r3, [pc, #36]	@ (8106810 <HAL_PWREx_EnterSTOPMode+0xec>)
 81067ea:	691b      	ldr	r3, [r3, #16]
 81067ec:	4a08      	ldr	r2, [pc, #32]	@ (8106810 <HAL_PWREx_EnterSTOPMode+0xec>)
 81067ee:	f023 0304 	bic.w	r3, r3, #4
 81067f2:	6113      	str	r3, [r2, #16]
 81067f4:	e009      	b.n	810680a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81067f6:	4b06      	ldr	r3, [pc, #24]	@ (8106810 <HAL_PWREx_EnterSTOPMode+0xec>)
 81067f8:	695b      	ldr	r3, [r3, #20]
 81067fa:	4a05      	ldr	r2, [pc, #20]	@ (8106810 <HAL_PWREx_EnterSTOPMode+0xec>)
 81067fc:	f023 0304 	bic.w	r3, r3, #4
 8106800:	6153      	str	r3, [r2, #20]
 8106802:	e002      	b.n	810680a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106804:	bf00      	nop
 8106806:	e000      	b.n	810680a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106808:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810680a:	3710      	adds	r7, #16
 810680c:	46bd      	mov	sp, r7
 810680e:	bd80      	pop	{r7, pc}
 8106810:	58024800 	.word	0x58024800
 8106814:	e000ed00 	.word	0xe000ed00

08106818 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8106818:	b580      	push	{r7, lr}
 810681a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810681c:	f7fd ffdc 	bl	81047d8 <HAL_GetCurrentCPUID>
 8106820:	4603      	mov	r3, r0
 8106822:	2b03      	cmp	r3, #3
 8106824:	d101      	bne.n	810682a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8106826:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8106828:	e001      	b.n	810682e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810682a:	bf40      	sev
    __WFE ();
 810682c:	bf20      	wfe
}
 810682e:	bf00      	nop
 8106830:	bd80      	pop	{r7, pc}
	...

08106834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8106834:	b480      	push	{r7}
 8106836:	b089      	sub	sp, #36	@ 0x24
 8106838:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810683a:	4bb3      	ldr	r3, [pc, #716]	@ (8106b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810683c:	691b      	ldr	r3, [r3, #16]
 810683e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8106842:	2b18      	cmp	r3, #24
 8106844:	f200 8155 	bhi.w	8106af2 <HAL_RCC_GetSysClockFreq+0x2be>
 8106848:	a201      	add	r2, pc, #4	@ (adr r2, 8106850 <HAL_RCC_GetSysClockFreq+0x1c>)
 810684a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810684e:	bf00      	nop
 8106850:	081068b5 	.word	0x081068b5
 8106854:	08106af3 	.word	0x08106af3
 8106858:	08106af3 	.word	0x08106af3
 810685c:	08106af3 	.word	0x08106af3
 8106860:	08106af3 	.word	0x08106af3
 8106864:	08106af3 	.word	0x08106af3
 8106868:	08106af3 	.word	0x08106af3
 810686c:	08106af3 	.word	0x08106af3
 8106870:	081068db 	.word	0x081068db
 8106874:	08106af3 	.word	0x08106af3
 8106878:	08106af3 	.word	0x08106af3
 810687c:	08106af3 	.word	0x08106af3
 8106880:	08106af3 	.word	0x08106af3
 8106884:	08106af3 	.word	0x08106af3
 8106888:	08106af3 	.word	0x08106af3
 810688c:	08106af3 	.word	0x08106af3
 8106890:	081068e1 	.word	0x081068e1
 8106894:	08106af3 	.word	0x08106af3
 8106898:	08106af3 	.word	0x08106af3
 810689c:	08106af3 	.word	0x08106af3
 81068a0:	08106af3 	.word	0x08106af3
 81068a4:	08106af3 	.word	0x08106af3
 81068a8:	08106af3 	.word	0x08106af3
 81068ac:	08106af3 	.word	0x08106af3
 81068b0:	081068e7 	.word	0x081068e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81068b4:	4b94      	ldr	r3, [pc, #592]	@ (8106b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81068b6:	681b      	ldr	r3, [r3, #0]
 81068b8:	f003 0320 	and.w	r3, r3, #32
 81068bc:	2b00      	cmp	r3, #0
 81068be:	d009      	beq.n	81068d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81068c0:	4b91      	ldr	r3, [pc, #580]	@ (8106b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81068c2:	681b      	ldr	r3, [r3, #0]
 81068c4:	08db      	lsrs	r3, r3, #3
 81068c6:	f003 0303 	and.w	r3, r3, #3
 81068ca:	4a90      	ldr	r2, [pc, #576]	@ (8106b0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81068cc:	fa22 f303 	lsr.w	r3, r2, r3
 81068d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81068d2:	e111      	b.n	8106af8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81068d4:	4b8d      	ldr	r3, [pc, #564]	@ (8106b0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81068d6:	61bb      	str	r3, [r7, #24]
      break;
 81068d8:	e10e      	b.n	8106af8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81068da:	4b8d      	ldr	r3, [pc, #564]	@ (8106b10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81068dc:	61bb      	str	r3, [r7, #24]
      break;
 81068de:	e10b      	b.n	8106af8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81068e0:	4b8c      	ldr	r3, [pc, #560]	@ (8106b14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81068e2:	61bb      	str	r3, [r7, #24]
      break;
 81068e4:	e108      	b.n	8106af8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81068e6:	4b88      	ldr	r3, [pc, #544]	@ (8106b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81068e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81068ea:	f003 0303 	and.w	r3, r3, #3
 81068ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81068f0:	4b85      	ldr	r3, [pc, #532]	@ (8106b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81068f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81068f4:	091b      	lsrs	r3, r3, #4
 81068f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81068fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81068fc:	4b82      	ldr	r3, [pc, #520]	@ (8106b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81068fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106900:	f003 0301 	and.w	r3, r3, #1
 8106904:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8106906:	4b80      	ldr	r3, [pc, #512]	@ (8106b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810690a:	08db      	lsrs	r3, r3, #3
 810690c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106910:	68fa      	ldr	r2, [r7, #12]
 8106912:	fb02 f303 	mul.w	r3, r2, r3
 8106916:	ee07 3a90 	vmov	s15, r3
 810691a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810691e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8106922:	693b      	ldr	r3, [r7, #16]
 8106924:	2b00      	cmp	r3, #0
 8106926:	f000 80e1 	beq.w	8106aec <HAL_RCC_GetSysClockFreq+0x2b8>
 810692a:	697b      	ldr	r3, [r7, #20]
 810692c:	2b02      	cmp	r3, #2
 810692e:	f000 8083 	beq.w	8106a38 <HAL_RCC_GetSysClockFreq+0x204>
 8106932:	697b      	ldr	r3, [r7, #20]
 8106934:	2b02      	cmp	r3, #2
 8106936:	f200 80a1 	bhi.w	8106a7c <HAL_RCC_GetSysClockFreq+0x248>
 810693a:	697b      	ldr	r3, [r7, #20]
 810693c:	2b00      	cmp	r3, #0
 810693e:	d003      	beq.n	8106948 <HAL_RCC_GetSysClockFreq+0x114>
 8106940:	697b      	ldr	r3, [r7, #20]
 8106942:	2b01      	cmp	r3, #1
 8106944:	d056      	beq.n	81069f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8106946:	e099      	b.n	8106a7c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106948:	4b6f      	ldr	r3, [pc, #444]	@ (8106b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810694a:	681b      	ldr	r3, [r3, #0]
 810694c:	f003 0320 	and.w	r3, r3, #32
 8106950:	2b00      	cmp	r3, #0
 8106952:	d02d      	beq.n	81069b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106954:	4b6c      	ldr	r3, [pc, #432]	@ (8106b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106956:	681b      	ldr	r3, [r3, #0]
 8106958:	08db      	lsrs	r3, r3, #3
 810695a:	f003 0303 	and.w	r3, r3, #3
 810695e:	4a6b      	ldr	r2, [pc, #428]	@ (8106b0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106960:	fa22 f303 	lsr.w	r3, r2, r3
 8106964:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106966:	687b      	ldr	r3, [r7, #4]
 8106968:	ee07 3a90 	vmov	s15, r3
 810696c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106970:	693b      	ldr	r3, [r7, #16]
 8106972:	ee07 3a90 	vmov	s15, r3
 8106976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810697a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810697e:	4b62      	ldr	r3, [pc, #392]	@ (8106b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106986:	ee07 3a90 	vmov	s15, r3
 810698a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810698e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106992:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8106b18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810699a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810699e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81069a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81069a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81069aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81069ae:	e087      	b.n	8106ac0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81069b0:	693b      	ldr	r3, [r7, #16]
 81069b2:	ee07 3a90 	vmov	s15, r3
 81069b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8106b1c <HAL_RCC_GetSysClockFreq+0x2e8>
 81069be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81069c2:	4b51      	ldr	r3, [pc, #324]	@ (8106b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81069c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81069c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81069ca:	ee07 3a90 	vmov	s15, r3
 81069ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81069d2:	ed97 6a02 	vldr	s12, [r7, #8]
 81069d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8106b18 <HAL_RCC_GetSysClockFreq+0x2e4>
 81069da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81069de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81069e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81069e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81069ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 81069ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81069f2:	e065      	b.n	8106ac0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81069f4:	693b      	ldr	r3, [r7, #16]
 81069f6:	ee07 3a90 	vmov	s15, r3
 81069fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8106b20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8106a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a06:	4b40      	ldr	r3, [pc, #256]	@ (8106b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a0e:	ee07 3a90 	vmov	s15, r3
 8106a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a16:	ed97 6a02 	vldr	s12, [r7, #8]
 8106a1a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8106b18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106a36:	e043      	b.n	8106ac0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106a38:	693b      	ldr	r3, [r7, #16]
 8106a3a:	ee07 3a90 	vmov	s15, r3
 8106a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a42:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8106b24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8106a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8106b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a52:	ee07 3a90 	vmov	s15, r3
 8106a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8106a5e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8106b18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106a7a:	e021      	b.n	8106ac0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106a7c:	693b      	ldr	r3, [r7, #16]
 8106a7e:	ee07 3a90 	vmov	s15, r3
 8106a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a86:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8106b20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8106a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8106b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a96:	ee07 3a90 	vmov	s15, r3
 8106a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106aa2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8106b18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106aba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106abe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8106ac0:	4b11      	ldr	r3, [pc, #68]	@ (8106b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106ac4:	0a5b      	lsrs	r3, r3, #9
 8106ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106aca:	3301      	adds	r3, #1
 8106acc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8106ace:	683b      	ldr	r3, [r7, #0]
 8106ad0:	ee07 3a90 	vmov	s15, r3
 8106ad4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8106adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106ae4:	ee17 3a90 	vmov	r3, s15
 8106ae8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8106aea:	e005      	b.n	8106af8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8106aec:	2300      	movs	r3, #0
 8106aee:	61bb      	str	r3, [r7, #24]
      break;
 8106af0:	e002      	b.n	8106af8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8106af2:	4b07      	ldr	r3, [pc, #28]	@ (8106b10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106af4:	61bb      	str	r3, [r7, #24]
      break;
 8106af6:	bf00      	nop
  }

  return sysclockfreq;
 8106af8:	69bb      	ldr	r3, [r7, #24]
}
 8106afa:	4618      	mov	r0, r3
 8106afc:	3724      	adds	r7, #36	@ 0x24
 8106afe:	46bd      	mov	sp, r7
 8106b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b04:	4770      	bx	lr
 8106b06:	bf00      	nop
 8106b08:	58024400 	.word	0x58024400
 8106b0c:	03d09000 	.word	0x03d09000
 8106b10:	003d0900 	.word	0x003d0900
 8106b14:	017d7840 	.word	0x017d7840
 8106b18:	46000000 	.word	0x46000000
 8106b1c:	4c742400 	.word	0x4c742400
 8106b20:	4a742400 	.word	0x4a742400
 8106b24:	4bbebc20 	.word	0x4bbebc20

08106b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106b28:	b580      	push	{r7, lr}
 8106b2a:	b082      	sub	sp, #8
 8106b2c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106b2e:	f7ff fe81 	bl	8106834 <HAL_RCC_GetSysClockFreq>
 8106b32:	4602      	mov	r2, r0
 8106b34:	4b11      	ldr	r3, [pc, #68]	@ (8106b7c <HAL_RCC_GetHCLKFreq+0x54>)
 8106b36:	699b      	ldr	r3, [r3, #24]
 8106b38:	0a1b      	lsrs	r3, r3, #8
 8106b3a:	f003 030f 	and.w	r3, r3, #15
 8106b3e:	4910      	ldr	r1, [pc, #64]	@ (8106b80 <HAL_RCC_GetHCLKFreq+0x58>)
 8106b40:	5ccb      	ldrb	r3, [r1, r3]
 8106b42:	f003 031f 	and.w	r3, r3, #31
 8106b46:	fa22 f303 	lsr.w	r3, r2, r3
 8106b4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8106b7c <HAL_RCC_GetHCLKFreq+0x54>)
 8106b4e:	699b      	ldr	r3, [r3, #24]
 8106b50:	f003 030f 	and.w	r3, r3, #15
 8106b54:	4a0a      	ldr	r2, [pc, #40]	@ (8106b80 <HAL_RCC_GetHCLKFreq+0x58>)
 8106b56:	5cd3      	ldrb	r3, [r2, r3]
 8106b58:	f003 031f 	and.w	r3, r3, #31
 8106b5c:	687a      	ldr	r2, [r7, #4]
 8106b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8106b62:	4a08      	ldr	r2, [pc, #32]	@ (8106b84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106b64:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8106b66:	4b07      	ldr	r3, [pc, #28]	@ (8106b84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106b68:	681b      	ldr	r3, [r3, #0]
 8106b6a:	4a07      	ldr	r2, [pc, #28]	@ (8106b88 <HAL_RCC_GetHCLKFreq+0x60>)
 8106b6c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8106b6e:	4b05      	ldr	r3, [pc, #20]	@ (8106b84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106b70:	681b      	ldr	r3, [r3, #0]
}
 8106b72:	4618      	mov	r0, r3
 8106b74:	3708      	adds	r7, #8
 8106b76:	46bd      	mov	sp, r7
 8106b78:	bd80      	pop	{r7, pc}
 8106b7a:	bf00      	nop
 8106b7c:	58024400 	.word	0x58024400
 8106b80:	0811a650 	.word	0x0811a650
 8106b84:	10000018 	.word	0x10000018
 8106b88:	10000014 	.word	0x10000014

08106b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106b8c:	b580      	push	{r7, lr}
 8106b8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8106b90:	f7ff ffca 	bl	8106b28 <HAL_RCC_GetHCLKFreq>
 8106b94:	4602      	mov	r2, r0
 8106b96:	4b06      	ldr	r3, [pc, #24]	@ (8106bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8106b98:	69db      	ldr	r3, [r3, #28]
 8106b9a:	091b      	lsrs	r3, r3, #4
 8106b9c:	f003 0307 	and.w	r3, r3, #7
 8106ba0:	4904      	ldr	r1, [pc, #16]	@ (8106bb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8106ba2:	5ccb      	ldrb	r3, [r1, r3]
 8106ba4:	f003 031f 	and.w	r3, r3, #31
 8106ba8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106bac:	4618      	mov	r0, r3
 8106bae:	bd80      	pop	{r7, pc}
 8106bb0:	58024400 	.word	0x58024400
 8106bb4:	0811a650 	.word	0x0811a650

08106bb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8106bb8:	b480      	push	{r7}
 8106bba:	b083      	sub	sp, #12
 8106bbc:	af00      	add	r7, sp, #0
 8106bbe:	6078      	str	r0, [r7, #4]
 8106bc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8106bc2:	687b      	ldr	r3, [r7, #4]
 8106bc4:	223f      	movs	r2, #63	@ 0x3f
 8106bc6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8106bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8106c34 <HAL_RCC_GetClockConfig+0x7c>)
 8106bca:	691b      	ldr	r3, [r3, #16]
 8106bcc:	f003 0207 	and.w	r2, r3, #7
 8106bd0:	687b      	ldr	r3, [r7, #4]
 8106bd2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8106bd4:	4b17      	ldr	r3, [pc, #92]	@ (8106c34 <HAL_RCC_GetClockConfig+0x7c>)
 8106bd6:	699b      	ldr	r3, [r3, #24]
 8106bd8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8106bdc:	687b      	ldr	r3, [r7, #4]
 8106bde:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8106be0:	4b14      	ldr	r3, [pc, #80]	@ (8106c34 <HAL_RCC_GetClockConfig+0x7c>)
 8106be2:	699b      	ldr	r3, [r3, #24]
 8106be4:	f003 020f 	and.w	r2, r3, #15
 8106be8:	687b      	ldr	r3, [r7, #4]
 8106bea:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8106bec:	4b11      	ldr	r3, [pc, #68]	@ (8106c34 <HAL_RCC_GetClockConfig+0x7c>)
 8106bee:	699b      	ldr	r3, [r3, #24]
 8106bf0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8106bf4:	687b      	ldr	r3, [r7, #4]
 8106bf6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8106bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8106c34 <HAL_RCC_GetClockConfig+0x7c>)
 8106bfa:	69db      	ldr	r3, [r3, #28]
 8106bfc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8106c00:	687b      	ldr	r3, [r7, #4]
 8106c02:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8106c04:	4b0b      	ldr	r3, [pc, #44]	@ (8106c34 <HAL_RCC_GetClockConfig+0x7c>)
 8106c06:	69db      	ldr	r3, [r3, #28]
 8106c08:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8106c10:	4b08      	ldr	r3, [pc, #32]	@ (8106c34 <HAL_RCC_GetClockConfig+0x7c>)
 8106c12:	6a1b      	ldr	r3, [r3, #32]
 8106c14:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8106c18:	687b      	ldr	r3, [r7, #4]
 8106c1a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8106c1c:	4b06      	ldr	r3, [pc, #24]	@ (8106c38 <HAL_RCC_GetClockConfig+0x80>)
 8106c1e:	681b      	ldr	r3, [r3, #0]
 8106c20:	f003 020f 	and.w	r2, r3, #15
 8106c24:	683b      	ldr	r3, [r7, #0]
 8106c26:	601a      	str	r2, [r3, #0]
}
 8106c28:	bf00      	nop
 8106c2a:	370c      	adds	r7, #12
 8106c2c:	46bd      	mov	sp, r7
 8106c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c32:	4770      	bx	lr
 8106c34:	58024400 	.word	0x58024400
 8106c38:	52002000 	.word	0x52002000

08106c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8106c3c:	b580      	push	{r7, lr}
 8106c3e:	b082      	sub	sp, #8
 8106c40:	af00      	add	r7, sp, #0
 8106c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106c44:	687b      	ldr	r3, [r7, #4]
 8106c46:	2b00      	cmp	r3, #0
 8106c48:	d101      	bne.n	8106c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8106c4a:	2301      	movs	r3, #1
 8106c4c:	e049      	b.n	8106ce2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106c4e:	687b      	ldr	r3, [r7, #4]
 8106c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8106c54:	b2db      	uxtb	r3, r3
 8106c56:	2b00      	cmp	r3, #0
 8106c58:	d106      	bne.n	8106c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106c5a:	687b      	ldr	r3, [r7, #4]
 8106c5c:	2200      	movs	r2, #0
 8106c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106c62:	6878      	ldr	r0, [r7, #4]
 8106c64:	f000 f841 	bl	8106cea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106c68:	687b      	ldr	r3, [r7, #4]
 8106c6a:	2202      	movs	r2, #2
 8106c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106c70:	687b      	ldr	r3, [r7, #4]
 8106c72:	681a      	ldr	r2, [r3, #0]
 8106c74:	687b      	ldr	r3, [r7, #4]
 8106c76:	3304      	adds	r3, #4
 8106c78:	4619      	mov	r1, r3
 8106c7a:	4610      	mov	r0, r2
 8106c7c:	f000 f9e8 	bl	8107050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106c80:	687b      	ldr	r3, [r7, #4]
 8106c82:	2201      	movs	r2, #1
 8106c84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106c88:	687b      	ldr	r3, [r7, #4]
 8106c8a:	2201      	movs	r2, #1
 8106c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106c90:	687b      	ldr	r3, [r7, #4]
 8106c92:	2201      	movs	r2, #1
 8106c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106c98:	687b      	ldr	r3, [r7, #4]
 8106c9a:	2201      	movs	r2, #1
 8106c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106ca0:	687b      	ldr	r3, [r7, #4]
 8106ca2:	2201      	movs	r2, #1
 8106ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106ca8:	687b      	ldr	r3, [r7, #4]
 8106caa:	2201      	movs	r2, #1
 8106cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	2201      	movs	r2, #1
 8106cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106cb8:	687b      	ldr	r3, [r7, #4]
 8106cba:	2201      	movs	r2, #1
 8106cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106cc0:	687b      	ldr	r3, [r7, #4]
 8106cc2:	2201      	movs	r2, #1
 8106cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106cc8:	687b      	ldr	r3, [r7, #4]
 8106cca:	2201      	movs	r2, #1
 8106ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106cd0:	687b      	ldr	r3, [r7, #4]
 8106cd2:	2201      	movs	r2, #1
 8106cd4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106cd8:	687b      	ldr	r3, [r7, #4]
 8106cda:	2201      	movs	r2, #1
 8106cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8106ce0:	2300      	movs	r3, #0
}
 8106ce2:	4618      	mov	r0, r3
 8106ce4:	3708      	adds	r7, #8
 8106ce6:	46bd      	mov	sp, r7
 8106ce8:	bd80      	pop	{r7, pc}

08106cea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8106cea:	b480      	push	{r7}
 8106cec:	b083      	sub	sp, #12
 8106cee:	af00      	add	r7, sp, #0
 8106cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8106cf2:	bf00      	nop
 8106cf4:	370c      	adds	r7, #12
 8106cf6:	46bd      	mov	sp, r7
 8106cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cfc:	4770      	bx	lr
	...

08106d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8106d00:	b480      	push	{r7}
 8106d02:	b085      	sub	sp, #20
 8106d04:	af00      	add	r7, sp, #0
 8106d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8106d08:	687b      	ldr	r3, [r7, #4]
 8106d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8106d0e:	b2db      	uxtb	r3, r3
 8106d10:	2b01      	cmp	r3, #1
 8106d12:	d001      	beq.n	8106d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8106d14:	2301      	movs	r3, #1
 8106d16:	e054      	b.n	8106dc2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106d18:	687b      	ldr	r3, [r7, #4]
 8106d1a:	2202      	movs	r2, #2
 8106d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8106d20:	687b      	ldr	r3, [r7, #4]
 8106d22:	681b      	ldr	r3, [r3, #0]
 8106d24:	68da      	ldr	r2, [r3, #12]
 8106d26:	687b      	ldr	r3, [r7, #4]
 8106d28:	681b      	ldr	r3, [r3, #0]
 8106d2a:	f042 0201 	orr.w	r2, r2, #1
 8106d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106d30:	687b      	ldr	r3, [r7, #4]
 8106d32:	681b      	ldr	r3, [r3, #0]
 8106d34:	4a26      	ldr	r2, [pc, #152]	@ (8106dd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8106d36:	4293      	cmp	r3, r2
 8106d38:	d022      	beq.n	8106d80 <HAL_TIM_Base_Start_IT+0x80>
 8106d3a:	687b      	ldr	r3, [r7, #4]
 8106d3c:	681b      	ldr	r3, [r3, #0]
 8106d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106d42:	d01d      	beq.n	8106d80 <HAL_TIM_Base_Start_IT+0x80>
 8106d44:	687b      	ldr	r3, [r7, #4]
 8106d46:	681b      	ldr	r3, [r3, #0]
 8106d48:	4a22      	ldr	r2, [pc, #136]	@ (8106dd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8106d4a:	4293      	cmp	r3, r2
 8106d4c:	d018      	beq.n	8106d80 <HAL_TIM_Base_Start_IT+0x80>
 8106d4e:	687b      	ldr	r3, [r7, #4]
 8106d50:	681b      	ldr	r3, [r3, #0]
 8106d52:	4a21      	ldr	r2, [pc, #132]	@ (8106dd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8106d54:	4293      	cmp	r3, r2
 8106d56:	d013      	beq.n	8106d80 <HAL_TIM_Base_Start_IT+0x80>
 8106d58:	687b      	ldr	r3, [r7, #4]
 8106d5a:	681b      	ldr	r3, [r3, #0]
 8106d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8106ddc <HAL_TIM_Base_Start_IT+0xdc>)
 8106d5e:	4293      	cmp	r3, r2
 8106d60:	d00e      	beq.n	8106d80 <HAL_TIM_Base_Start_IT+0x80>
 8106d62:	687b      	ldr	r3, [r7, #4]
 8106d64:	681b      	ldr	r3, [r3, #0]
 8106d66:	4a1e      	ldr	r2, [pc, #120]	@ (8106de0 <HAL_TIM_Base_Start_IT+0xe0>)
 8106d68:	4293      	cmp	r3, r2
 8106d6a:	d009      	beq.n	8106d80 <HAL_TIM_Base_Start_IT+0x80>
 8106d6c:	687b      	ldr	r3, [r7, #4]
 8106d6e:	681b      	ldr	r3, [r3, #0]
 8106d70:	4a1c      	ldr	r2, [pc, #112]	@ (8106de4 <HAL_TIM_Base_Start_IT+0xe4>)
 8106d72:	4293      	cmp	r3, r2
 8106d74:	d004      	beq.n	8106d80 <HAL_TIM_Base_Start_IT+0x80>
 8106d76:	687b      	ldr	r3, [r7, #4]
 8106d78:	681b      	ldr	r3, [r3, #0]
 8106d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8106de8 <HAL_TIM_Base_Start_IT+0xe8>)
 8106d7c:	4293      	cmp	r3, r2
 8106d7e:	d115      	bne.n	8106dac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106d80:	687b      	ldr	r3, [r7, #4]
 8106d82:	681b      	ldr	r3, [r3, #0]
 8106d84:	689a      	ldr	r2, [r3, #8]
 8106d86:	4b19      	ldr	r3, [pc, #100]	@ (8106dec <HAL_TIM_Base_Start_IT+0xec>)
 8106d88:	4013      	ands	r3, r2
 8106d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106d8c:	68fb      	ldr	r3, [r7, #12]
 8106d8e:	2b06      	cmp	r3, #6
 8106d90:	d015      	beq.n	8106dbe <HAL_TIM_Base_Start_IT+0xbe>
 8106d92:	68fb      	ldr	r3, [r7, #12]
 8106d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106d98:	d011      	beq.n	8106dbe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8106d9a:	687b      	ldr	r3, [r7, #4]
 8106d9c:	681b      	ldr	r3, [r3, #0]
 8106d9e:	681a      	ldr	r2, [r3, #0]
 8106da0:	687b      	ldr	r3, [r7, #4]
 8106da2:	681b      	ldr	r3, [r3, #0]
 8106da4:	f042 0201 	orr.w	r2, r2, #1
 8106da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106daa:	e008      	b.n	8106dbe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106dac:	687b      	ldr	r3, [r7, #4]
 8106dae:	681b      	ldr	r3, [r3, #0]
 8106db0:	681a      	ldr	r2, [r3, #0]
 8106db2:	687b      	ldr	r3, [r7, #4]
 8106db4:	681b      	ldr	r3, [r3, #0]
 8106db6:	f042 0201 	orr.w	r2, r2, #1
 8106dba:	601a      	str	r2, [r3, #0]
 8106dbc:	e000      	b.n	8106dc0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106dbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106dc0:	2300      	movs	r3, #0
}
 8106dc2:	4618      	mov	r0, r3
 8106dc4:	3714      	adds	r7, #20
 8106dc6:	46bd      	mov	sp, r7
 8106dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106dcc:	4770      	bx	lr
 8106dce:	bf00      	nop
 8106dd0:	40010000 	.word	0x40010000
 8106dd4:	40000400 	.word	0x40000400
 8106dd8:	40000800 	.word	0x40000800
 8106ddc:	40000c00 	.word	0x40000c00
 8106de0:	40010400 	.word	0x40010400
 8106de4:	40001800 	.word	0x40001800
 8106de8:	40014000 	.word	0x40014000
 8106dec:	00010007 	.word	0x00010007

08106df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8106df0:	b580      	push	{r7, lr}
 8106df2:	b084      	sub	sp, #16
 8106df4:	af00      	add	r7, sp, #0
 8106df6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8106df8:	687b      	ldr	r3, [r7, #4]
 8106dfa:	681b      	ldr	r3, [r3, #0]
 8106dfc:	68db      	ldr	r3, [r3, #12]
 8106dfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8106e00:	687b      	ldr	r3, [r7, #4]
 8106e02:	681b      	ldr	r3, [r3, #0]
 8106e04:	691b      	ldr	r3, [r3, #16]
 8106e06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8106e08:	68bb      	ldr	r3, [r7, #8]
 8106e0a:	f003 0302 	and.w	r3, r3, #2
 8106e0e:	2b00      	cmp	r3, #0
 8106e10:	d020      	beq.n	8106e54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8106e12:	68fb      	ldr	r3, [r7, #12]
 8106e14:	f003 0302 	and.w	r3, r3, #2
 8106e18:	2b00      	cmp	r3, #0
 8106e1a:	d01b      	beq.n	8106e54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8106e1c:	687b      	ldr	r3, [r7, #4]
 8106e1e:	681b      	ldr	r3, [r3, #0]
 8106e20:	f06f 0202 	mvn.w	r2, #2
 8106e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8106e26:	687b      	ldr	r3, [r7, #4]
 8106e28:	2201      	movs	r2, #1
 8106e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106e2c:	687b      	ldr	r3, [r7, #4]
 8106e2e:	681b      	ldr	r3, [r3, #0]
 8106e30:	699b      	ldr	r3, [r3, #24]
 8106e32:	f003 0303 	and.w	r3, r3, #3
 8106e36:	2b00      	cmp	r3, #0
 8106e38:	d003      	beq.n	8106e42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8106e3a:	6878      	ldr	r0, [r7, #4]
 8106e3c:	f000 f8e9 	bl	8107012 <HAL_TIM_IC_CaptureCallback>
 8106e40:	e005      	b.n	8106e4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8106e42:	6878      	ldr	r0, [r7, #4]
 8106e44:	f000 f8db 	bl	8106ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106e48:	6878      	ldr	r0, [r7, #4]
 8106e4a:	f000 f8ec 	bl	8107026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106e4e:	687b      	ldr	r3, [r7, #4]
 8106e50:	2200      	movs	r2, #0
 8106e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8106e54:	68bb      	ldr	r3, [r7, #8]
 8106e56:	f003 0304 	and.w	r3, r3, #4
 8106e5a:	2b00      	cmp	r3, #0
 8106e5c:	d020      	beq.n	8106ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8106e5e:	68fb      	ldr	r3, [r7, #12]
 8106e60:	f003 0304 	and.w	r3, r3, #4
 8106e64:	2b00      	cmp	r3, #0
 8106e66:	d01b      	beq.n	8106ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8106e68:	687b      	ldr	r3, [r7, #4]
 8106e6a:	681b      	ldr	r3, [r3, #0]
 8106e6c:	f06f 0204 	mvn.w	r2, #4
 8106e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8106e72:	687b      	ldr	r3, [r7, #4]
 8106e74:	2202      	movs	r2, #2
 8106e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8106e78:	687b      	ldr	r3, [r7, #4]
 8106e7a:	681b      	ldr	r3, [r3, #0]
 8106e7c:	699b      	ldr	r3, [r3, #24]
 8106e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106e82:	2b00      	cmp	r3, #0
 8106e84:	d003      	beq.n	8106e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106e86:	6878      	ldr	r0, [r7, #4]
 8106e88:	f000 f8c3 	bl	8107012 <HAL_TIM_IC_CaptureCallback>
 8106e8c:	e005      	b.n	8106e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106e8e:	6878      	ldr	r0, [r7, #4]
 8106e90:	f000 f8b5 	bl	8106ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106e94:	6878      	ldr	r0, [r7, #4]
 8106e96:	f000 f8c6 	bl	8107026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106e9a:	687b      	ldr	r3, [r7, #4]
 8106e9c:	2200      	movs	r2, #0
 8106e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8106ea0:	68bb      	ldr	r3, [r7, #8]
 8106ea2:	f003 0308 	and.w	r3, r3, #8
 8106ea6:	2b00      	cmp	r3, #0
 8106ea8:	d020      	beq.n	8106eec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8106eaa:	68fb      	ldr	r3, [r7, #12]
 8106eac:	f003 0308 	and.w	r3, r3, #8
 8106eb0:	2b00      	cmp	r3, #0
 8106eb2:	d01b      	beq.n	8106eec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8106eb4:	687b      	ldr	r3, [r7, #4]
 8106eb6:	681b      	ldr	r3, [r3, #0]
 8106eb8:	f06f 0208 	mvn.w	r2, #8
 8106ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8106ebe:	687b      	ldr	r3, [r7, #4]
 8106ec0:	2204      	movs	r2, #4
 8106ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8106ec4:	687b      	ldr	r3, [r7, #4]
 8106ec6:	681b      	ldr	r3, [r3, #0]
 8106ec8:	69db      	ldr	r3, [r3, #28]
 8106eca:	f003 0303 	and.w	r3, r3, #3
 8106ece:	2b00      	cmp	r3, #0
 8106ed0:	d003      	beq.n	8106eda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106ed2:	6878      	ldr	r0, [r7, #4]
 8106ed4:	f000 f89d 	bl	8107012 <HAL_TIM_IC_CaptureCallback>
 8106ed8:	e005      	b.n	8106ee6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106eda:	6878      	ldr	r0, [r7, #4]
 8106edc:	f000 f88f 	bl	8106ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106ee0:	6878      	ldr	r0, [r7, #4]
 8106ee2:	f000 f8a0 	bl	8107026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106ee6:	687b      	ldr	r3, [r7, #4]
 8106ee8:	2200      	movs	r2, #0
 8106eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8106eec:	68bb      	ldr	r3, [r7, #8]
 8106eee:	f003 0310 	and.w	r3, r3, #16
 8106ef2:	2b00      	cmp	r3, #0
 8106ef4:	d020      	beq.n	8106f38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8106ef6:	68fb      	ldr	r3, [r7, #12]
 8106ef8:	f003 0310 	and.w	r3, r3, #16
 8106efc:	2b00      	cmp	r3, #0
 8106efe:	d01b      	beq.n	8106f38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8106f00:	687b      	ldr	r3, [r7, #4]
 8106f02:	681b      	ldr	r3, [r3, #0]
 8106f04:	f06f 0210 	mvn.w	r2, #16
 8106f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8106f0a:	687b      	ldr	r3, [r7, #4]
 8106f0c:	2208      	movs	r2, #8
 8106f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	681b      	ldr	r3, [r3, #0]
 8106f14:	69db      	ldr	r3, [r3, #28]
 8106f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106f1a:	2b00      	cmp	r3, #0
 8106f1c:	d003      	beq.n	8106f26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106f1e:	6878      	ldr	r0, [r7, #4]
 8106f20:	f000 f877 	bl	8107012 <HAL_TIM_IC_CaptureCallback>
 8106f24:	e005      	b.n	8106f32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106f26:	6878      	ldr	r0, [r7, #4]
 8106f28:	f000 f869 	bl	8106ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106f2c:	6878      	ldr	r0, [r7, #4]
 8106f2e:	f000 f87a 	bl	8107026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106f32:	687b      	ldr	r3, [r7, #4]
 8106f34:	2200      	movs	r2, #0
 8106f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8106f38:	68bb      	ldr	r3, [r7, #8]
 8106f3a:	f003 0301 	and.w	r3, r3, #1
 8106f3e:	2b00      	cmp	r3, #0
 8106f40:	d00c      	beq.n	8106f5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8106f42:	68fb      	ldr	r3, [r7, #12]
 8106f44:	f003 0301 	and.w	r3, r3, #1
 8106f48:	2b00      	cmp	r3, #0
 8106f4a:	d007      	beq.n	8106f5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8106f4c:	687b      	ldr	r3, [r7, #4]
 8106f4e:	681b      	ldr	r3, [r3, #0]
 8106f50:	f06f 0201 	mvn.w	r2, #1
 8106f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8106f56:	6878      	ldr	r0, [r7, #4]
 8106f58:	f7f9 fc48 	bl	81007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8106f5c:	68bb      	ldr	r3, [r7, #8]
 8106f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106f62:	2b00      	cmp	r3, #0
 8106f64:	d104      	bne.n	8106f70 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8106f66:	68bb      	ldr	r3, [r7, #8]
 8106f68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8106f6c:	2b00      	cmp	r3, #0
 8106f6e:	d00c      	beq.n	8106f8a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8106f70:	68fb      	ldr	r3, [r7, #12]
 8106f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106f76:	2b00      	cmp	r3, #0
 8106f78:	d007      	beq.n	8106f8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8106f7a:	687b      	ldr	r3, [r7, #4]
 8106f7c:	681b      	ldr	r3, [r3, #0]
 8106f7e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8106f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8106f84:	6878      	ldr	r0, [r7, #4]
 8106f86:	f000 f913 	bl	81071b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8106f8a:	68bb      	ldr	r3, [r7, #8]
 8106f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106f90:	2b00      	cmp	r3, #0
 8106f92:	d00c      	beq.n	8106fae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8106f94:	68fb      	ldr	r3, [r7, #12]
 8106f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106f9a:	2b00      	cmp	r3, #0
 8106f9c:	d007      	beq.n	8106fae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8106f9e:	687b      	ldr	r3, [r7, #4]
 8106fa0:	681b      	ldr	r3, [r3, #0]
 8106fa2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8106fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8106fa8:	6878      	ldr	r0, [r7, #4]
 8106faa:	f000 f90b 	bl	81071c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8106fae:	68bb      	ldr	r3, [r7, #8]
 8106fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106fb4:	2b00      	cmp	r3, #0
 8106fb6:	d00c      	beq.n	8106fd2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8106fb8:	68fb      	ldr	r3, [r7, #12]
 8106fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106fbe:	2b00      	cmp	r3, #0
 8106fc0:	d007      	beq.n	8106fd2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8106fc2:	687b      	ldr	r3, [r7, #4]
 8106fc4:	681b      	ldr	r3, [r3, #0]
 8106fc6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8106fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8106fcc:	6878      	ldr	r0, [r7, #4]
 8106fce:	f000 f834 	bl	810703a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8106fd2:	68bb      	ldr	r3, [r7, #8]
 8106fd4:	f003 0320 	and.w	r3, r3, #32
 8106fd8:	2b00      	cmp	r3, #0
 8106fda:	d00c      	beq.n	8106ff6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8106fdc:	68fb      	ldr	r3, [r7, #12]
 8106fde:	f003 0320 	and.w	r3, r3, #32
 8106fe2:	2b00      	cmp	r3, #0
 8106fe4:	d007      	beq.n	8106ff6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	681b      	ldr	r3, [r3, #0]
 8106fea:	f06f 0220 	mvn.w	r2, #32
 8106fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8106ff0:	6878      	ldr	r0, [r7, #4]
 8106ff2:	f000 f8d3 	bl	810719c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8106ff6:	bf00      	nop
 8106ff8:	3710      	adds	r7, #16
 8106ffa:	46bd      	mov	sp, r7
 8106ffc:	bd80      	pop	{r7, pc}

08106ffe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8106ffe:	b480      	push	{r7}
 8107000:	b083      	sub	sp, #12
 8107002:	af00      	add	r7, sp, #0
 8107004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8107006:	bf00      	nop
 8107008:	370c      	adds	r7, #12
 810700a:	46bd      	mov	sp, r7
 810700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107010:	4770      	bx	lr

08107012 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8107012:	b480      	push	{r7}
 8107014:	b083      	sub	sp, #12
 8107016:	af00      	add	r7, sp, #0
 8107018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810701a:	bf00      	nop
 810701c:	370c      	adds	r7, #12
 810701e:	46bd      	mov	sp, r7
 8107020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107024:	4770      	bx	lr

08107026 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8107026:	b480      	push	{r7}
 8107028:	b083      	sub	sp, #12
 810702a:	af00      	add	r7, sp, #0
 810702c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810702e:	bf00      	nop
 8107030:	370c      	adds	r7, #12
 8107032:	46bd      	mov	sp, r7
 8107034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107038:	4770      	bx	lr

0810703a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810703a:	b480      	push	{r7}
 810703c:	b083      	sub	sp, #12
 810703e:	af00      	add	r7, sp, #0
 8107040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8107042:	bf00      	nop
 8107044:	370c      	adds	r7, #12
 8107046:	46bd      	mov	sp, r7
 8107048:	f85d 7b04 	ldr.w	r7, [sp], #4
 810704c:	4770      	bx	lr
	...

08107050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8107050:	b480      	push	{r7}
 8107052:	b085      	sub	sp, #20
 8107054:	af00      	add	r7, sp, #0
 8107056:	6078      	str	r0, [r7, #4]
 8107058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810705a:	687b      	ldr	r3, [r7, #4]
 810705c:	681b      	ldr	r3, [r3, #0]
 810705e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107060:	687b      	ldr	r3, [r7, #4]
 8107062:	4a46      	ldr	r2, [pc, #280]	@ (810717c <TIM_Base_SetConfig+0x12c>)
 8107064:	4293      	cmp	r3, r2
 8107066:	d013      	beq.n	8107090 <TIM_Base_SetConfig+0x40>
 8107068:	687b      	ldr	r3, [r7, #4]
 810706a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810706e:	d00f      	beq.n	8107090 <TIM_Base_SetConfig+0x40>
 8107070:	687b      	ldr	r3, [r7, #4]
 8107072:	4a43      	ldr	r2, [pc, #268]	@ (8107180 <TIM_Base_SetConfig+0x130>)
 8107074:	4293      	cmp	r3, r2
 8107076:	d00b      	beq.n	8107090 <TIM_Base_SetConfig+0x40>
 8107078:	687b      	ldr	r3, [r7, #4]
 810707a:	4a42      	ldr	r2, [pc, #264]	@ (8107184 <TIM_Base_SetConfig+0x134>)
 810707c:	4293      	cmp	r3, r2
 810707e:	d007      	beq.n	8107090 <TIM_Base_SetConfig+0x40>
 8107080:	687b      	ldr	r3, [r7, #4]
 8107082:	4a41      	ldr	r2, [pc, #260]	@ (8107188 <TIM_Base_SetConfig+0x138>)
 8107084:	4293      	cmp	r3, r2
 8107086:	d003      	beq.n	8107090 <TIM_Base_SetConfig+0x40>
 8107088:	687b      	ldr	r3, [r7, #4]
 810708a:	4a40      	ldr	r2, [pc, #256]	@ (810718c <TIM_Base_SetConfig+0x13c>)
 810708c:	4293      	cmp	r3, r2
 810708e:	d108      	bne.n	81070a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107090:	68fb      	ldr	r3, [r7, #12]
 8107092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107098:	683b      	ldr	r3, [r7, #0]
 810709a:	685b      	ldr	r3, [r3, #4]
 810709c:	68fa      	ldr	r2, [r7, #12]
 810709e:	4313      	orrs	r3, r2
 81070a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81070a2:	687b      	ldr	r3, [r7, #4]
 81070a4:	4a35      	ldr	r2, [pc, #212]	@ (810717c <TIM_Base_SetConfig+0x12c>)
 81070a6:	4293      	cmp	r3, r2
 81070a8:	d01f      	beq.n	81070ea <TIM_Base_SetConfig+0x9a>
 81070aa:	687b      	ldr	r3, [r7, #4]
 81070ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81070b0:	d01b      	beq.n	81070ea <TIM_Base_SetConfig+0x9a>
 81070b2:	687b      	ldr	r3, [r7, #4]
 81070b4:	4a32      	ldr	r2, [pc, #200]	@ (8107180 <TIM_Base_SetConfig+0x130>)
 81070b6:	4293      	cmp	r3, r2
 81070b8:	d017      	beq.n	81070ea <TIM_Base_SetConfig+0x9a>
 81070ba:	687b      	ldr	r3, [r7, #4]
 81070bc:	4a31      	ldr	r2, [pc, #196]	@ (8107184 <TIM_Base_SetConfig+0x134>)
 81070be:	4293      	cmp	r3, r2
 81070c0:	d013      	beq.n	81070ea <TIM_Base_SetConfig+0x9a>
 81070c2:	687b      	ldr	r3, [r7, #4]
 81070c4:	4a30      	ldr	r2, [pc, #192]	@ (8107188 <TIM_Base_SetConfig+0x138>)
 81070c6:	4293      	cmp	r3, r2
 81070c8:	d00f      	beq.n	81070ea <TIM_Base_SetConfig+0x9a>
 81070ca:	687b      	ldr	r3, [r7, #4]
 81070cc:	4a2f      	ldr	r2, [pc, #188]	@ (810718c <TIM_Base_SetConfig+0x13c>)
 81070ce:	4293      	cmp	r3, r2
 81070d0:	d00b      	beq.n	81070ea <TIM_Base_SetConfig+0x9a>
 81070d2:	687b      	ldr	r3, [r7, #4]
 81070d4:	4a2e      	ldr	r2, [pc, #184]	@ (8107190 <TIM_Base_SetConfig+0x140>)
 81070d6:	4293      	cmp	r3, r2
 81070d8:	d007      	beq.n	81070ea <TIM_Base_SetConfig+0x9a>
 81070da:	687b      	ldr	r3, [r7, #4]
 81070dc:	4a2d      	ldr	r2, [pc, #180]	@ (8107194 <TIM_Base_SetConfig+0x144>)
 81070de:	4293      	cmp	r3, r2
 81070e0:	d003      	beq.n	81070ea <TIM_Base_SetConfig+0x9a>
 81070e2:	687b      	ldr	r3, [r7, #4]
 81070e4:	4a2c      	ldr	r2, [pc, #176]	@ (8107198 <TIM_Base_SetConfig+0x148>)
 81070e6:	4293      	cmp	r3, r2
 81070e8:	d108      	bne.n	81070fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81070ea:	68fb      	ldr	r3, [r7, #12]
 81070ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81070f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81070f2:	683b      	ldr	r3, [r7, #0]
 81070f4:	68db      	ldr	r3, [r3, #12]
 81070f6:	68fa      	ldr	r2, [r7, #12]
 81070f8:	4313      	orrs	r3, r2
 81070fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81070fc:	68fb      	ldr	r3, [r7, #12]
 81070fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8107102:	683b      	ldr	r3, [r7, #0]
 8107104:	695b      	ldr	r3, [r3, #20]
 8107106:	4313      	orrs	r3, r2
 8107108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810710a:	687b      	ldr	r3, [r7, #4]
 810710c:	68fa      	ldr	r2, [r7, #12]
 810710e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107110:	683b      	ldr	r3, [r7, #0]
 8107112:	689a      	ldr	r2, [r3, #8]
 8107114:	687b      	ldr	r3, [r7, #4]
 8107116:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107118:	683b      	ldr	r3, [r7, #0]
 810711a:	681a      	ldr	r2, [r3, #0]
 810711c:	687b      	ldr	r3, [r7, #4]
 810711e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107120:	687b      	ldr	r3, [r7, #4]
 8107122:	4a16      	ldr	r2, [pc, #88]	@ (810717c <TIM_Base_SetConfig+0x12c>)
 8107124:	4293      	cmp	r3, r2
 8107126:	d00f      	beq.n	8107148 <TIM_Base_SetConfig+0xf8>
 8107128:	687b      	ldr	r3, [r7, #4]
 810712a:	4a18      	ldr	r2, [pc, #96]	@ (810718c <TIM_Base_SetConfig+0x13c>)
 810712c:	4293      	cmp	r3, r2
 810712e:	d00b      	beq.n	8107148 <TIM_Base_SetConfig+0xf8>
 8107130:	687b      	ldr	r3, [r7, #4]
 8107132:	4a17      	ldr	r2, [pc, #92]	@ (8107190 <TIM_Base_SetConfig+0x140>)
 8107134:	4293      	cmp	r3, r2
 8107136:	d007      	beq.n	8107148 <TIM_Base_SetConfig+0xf8>
 8107138:	687b      	ldr	r3, [r7, #4]
 810713a:	4a16      	ldr	r2, [pc, #88]	@ (8107194 <TIM_Base_SetConfig+0x144>)
 810713c:	4293      	cmp	r3, r2
 810713e:	d003      	beq.n	8107148 <TIM_Base_SetConfig+0xf8>
 8107140:	687b      	ldr	r3, [r7, #4]
 8107142:	4a15      	ldr	r2, [pc, #84]	@ (8107198 <TIM_Base_SetConfig+0x148>)
 8107144:	4293      	cmp	r3, r2
 8107146:	d103      	bne.n	8107150 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107148:	683b      	ldr	r3, [r7, #0]
 810714a:	691a      	ldr	r2, [r3, #16]
 810714c:	687b      	ldr	r3, [r7, #4]
 810714e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107150:	687b      	ldr	r3, [r7, #4]
 8107152:	2201      	movs	r2, #1
 8107154:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8107156:	687b      	ldr	r3, [r7, #4]
 8107158:	691b      	ldr	r3, [r3, #16]
 810715a:	f003 0301 	and.w	r3, r3, #1
 810715e:	2b01      	cmp	r3, #1
 8107160:	d105      	bne.n	810716e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8107162:	687b      	ldr	r3, [r7, #4]
 8107164:	691b      	ldr	r3, [r3, #16]
 8107166:	f023 0201 	bic.w	r2, r3, #1
 810716a:	687b      	ldr	r3, [r7, #4]
 810716c:	611a      	str	r2, [r3, #16]
  }
}
 810716e:	bf00      	nop
 8107170:	3714      	adds	r7, #20
 8107172:	46bd      	mov	sp, r7
 8107174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107178:	4770      	bx	lr
 810717a:	bf00      	nop
 810717c:	40010000 	.word	0x40010000
 8107180:	40000400 	.word	0x40000400
 8107184:	40000800 	.word	0x40000800
 8107188:	40000c00 	.word	0x40000c00
 810718c:	40010400 	.word	0x40010400
 8107190:	40014000 	.word	0x40014000
 8107194:	40014400 	.word	0x40014400
 8107198:	40014800 	.word	0x40014800

0810719c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810719c:	b480      	push	{r7}
 810719e:	b083      	sub	sp, #12
 81071a0:	af00      	add	r7, sp, #0
 81071a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81071a4:	bf00      	nop
 81071a6:	370c      	adds	r7, #12
 81071a8:	46bd      	mov	sp, r7
 81071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071ae:	4770      	bx	lr

081071b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81071b0:	b480      	push	{r7}
 81071b2:	b083      	sub	sp, #12
 81071b4:	af00      	add	r7, sp, #0
 81071b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81071b8:	bf00      	nop
 81071ba:	370c      	adds	r7, #12
 81071bc:	46bd      	mov	sp, r7
 81071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071c2:	4770      	bx	lr

081071c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81071c4:	b480      	push	{r7}
 81071c6:	b083      	sub	sp, #12
 81071c8:	af00      	add	r7, sp, #0
 81071ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81071cc:	bf00      	nop
 81071ce:	370c      	adds	r7, #12
 81071d0:	46bd      	mov	sp, r7
 81071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071d6:	4770      	bx	lr

081071d8 <__NVIC_SetPriority>:
{
 81071d8:	b480      	push	{r7}
 81071da:	b083      	sub	sp, #12
 81071dc:	af00      	add	r7, sp, #0
 81071de:	4603      	mov	r3, r0
 81071e0:	6039      	str	r1, [r7, #0]
 81071e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81071e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81071e8:	2b00      	cmp	r3, #0
 81071ea:	db0a      	blt.n	8107202 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81071ec:	683b      	ldr	r3, [r7, #0]
 81071ee:	b2da      	uxtb	r2, r3
 81071f0:	490c      	ldr	r1, [pc, #48]	@ (8107224 <__NVIC_SetPriority+0x4c>)
 81071f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81071f6:	0112      	lsls	r2, r2, #4
 81071f8:	b2d2      	uxtb	r2, r2
 81071fa:	440b      	add	r3, r1
 81071fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8107200:	e00a      	b.n	8107218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8107202:	683b      	ldr	r3, [r7, #0]
 8107204:	b2da      	uxtb	r2, r3
 8107206:	4908      	ldr	r1, [pc, #32]	@ (8107228 <__NVIC_SetPriority+0x50>)
 8107208:	88fb      	ldrh	r3, [r7, #6]
 810720a:	f003 030f 	and.w	r3, r3, #15
 810720e:	3b04      	subs	r3, #4
 8107210:	0112      	lsls	r2, r2, #4
 8107212:	b2d2      	uxtb	r2, r2
 8107214:	440b      	add	r3, r1
 8107216:	761a      	strb	r2, [r3, #24]
}
 8107218:	bf00      	nop
 810721a:	370c      	adds	r7, #12
 810721c:	46bd      	mov	sp, r7
 810721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107222:	4770      	bx	lr
 8107224:	e000e100 	.word	0xe000e100
 8107228:	e000ed00 	.word	0xe000ed00

0810722c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 810722c:	b580      	push	{r7, lr}
 810722e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8107230:	4b05      	ldr	r3, [pc, #20]	@ (8107248 <SysTick_Handler+0x1c>)
 8107232:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8107234:	f003 fd5a 	bl	810acec <xTaskGetSchedulerState>
 8107238:	4603      	mov	r3, r0
 810723a:	2b01      	cmp	r3, #1
 810723c:	d001      	beq.n	8107242 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 810723e:	f001 f913 	bl	8108468 <xPortSysTickHandler>
  }
}
 8107242:	bf00      	nop
 8107244:	bd80      	pop	{r7, pc}
 8107246:	bf00      	nop
 8107248:	e000e010 	.word	0xe000e010

0810724c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810724c:	b580      	push	{r7, lr}
 810724e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8107250:	2100      	movs	r1, #0
 8107252:	f06f 0004 	mvn.w	r0, #4
 8107256:	f7ff ffbf 	bl	81071d8 <__NVIC_SetPriority>
#endif
}
 810725a:	bf00      	nop
 810725c:	bd80      	pop	{r7, pc}
	...

08107260 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8107260:	b480      	push	{r7}
 8107262:	b083      	sub	sp, #12
 8107264:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8107266:	f3ef 8305 	mrs	r3, IPSR
 810726a:	603b      	str	r3, [r7, #0]
  return(result);
 810726c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810726e:	2b00      	cmp	r3, #0
 8107270:	d003      	beq.n	810727a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8107272:	f06f 0305 	mvn.w	r3, #5
 8107276:	607b      	str	r3, [r7, #4]
 8107278:	e00c      	b.n	8107294 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810727a:	4b0a      	ldr	r3, [pc, #40]	@ (81072a4 <osKernelInitialize+0x44>)
 810727c:	681b      	ldr	r3, [r3, #0]
 810727e:	2b00      	cmp	r3, #0
 8107280:	d105      	bne.n	810728e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8107282:	4b08      	ldr	r3, [pc, #32]	@ (81072a4 <osKernelInitialize+0x44>)
 8107284:	2201      	movs	r2, #1
 8107286:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8107288:	2300      	movs	r3, #0
 810728a:	607b      	str	r3, [r7, #4]
 810728c:	e002      	b.n	8107294 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810728e:	f04f 33ff 	mov.w	r3, #4294967295
 8107292:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8107294:	687b      	ldr	r3, [r7, #4]
}
 8107296:	4618      	mov	r0, r3
 8107298:	370c      	adds	r7, #12
 810729a:	46bd      	mov	sp, r7
 810729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072a0:	4770      	bx	lr
 81072a2:	bf00      	nop
 81072a4:	100002a0 	.word	0x100002a0

081072a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 81072a8:	b580      	push	{r7, lr}
 81072aa:	b082      	sub	sp, #8
 81072ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81072ae:	f3ef 8305 	mrs	r3, IPSR
 81072b2:	603b      	str	r3, [r7, #0]
  return(result);
 81072b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 81072b6:	2b00      	cmp	r3, #0
 81072b8:	d003      	beq.n	81072c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 81072ba:	f06f 0305 	mvn.w	r3, #5
 81072be:	607b      	str	r3, [r7, #4]
 81072c0:	e010      	b.n	81072e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 81072c2:	4b0b      	ldr	r3, [pc, #44]	@ (81072f0 <osKernelStart+0x48>)
 81072c4:	681b      	ldr	r3, [r3, #0]
 81072c6:	2b01      	cmp	r3, #1
 81072c8:	d109      	bne.n	81072de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 81072ca:	f7ff ffbf 	bl	810724c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 81072ce:	4b08      	ldr	r3, [pc, #32]	@ (81072f0 <osKernelStart+0x48>)
 81072d0:	2202      	movs	r2, #2
 81072d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 81072d4:	f003 f85c 	bl	810a390 <vTaskStartScheduler>
      stat = osOK;
 81072d8:	2300      	movs	r3, #0
 81072da:	607b      	str	r3, [r7, #4]
 81072dc:	e002      	b.n	81072e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 81072de:	f04f 33ff 	mov.w	r3, #4294967295
 81072e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 81072e4:	687b      	ldr	r3, [r7, #4]
}
 81072e6:	4618      	mov	r0, r3
 81072e8:	3708      	adds	r7, #8
 81072ea:	46bd      	mov	sp, r7
 81072ec:	bd80      	pop	{r7, pc}
 81072ee:	bf00      	nop
 81072f0:	100002a0 	.word	0x100002a0

081072f4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 81072f4:	b580      	push	{r7, lr}
 81072f6:	b082      	sub	sp, #8
 81072f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81072fa:	f3ef 8305 	mrs	r3, IPSR
 81072fe:	603b      	str	r3, [r7, #0]
  return(result);
 8107300:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8107302:	2b00      	cmp	r3, #0
 8107304:	d003      	beq.n	810730e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8107306:	f003 f96f 	bl	810a5e8 <xTaskGetTickCountFromISR>
 810730a:	6078      	str	r0, [r7, #4]
 810730c:	e002      	b.n	8107314 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 810730e:	f003 f95b 	bl	810a5c8 <xTaskGetTickCount>
 8107312:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8107314:	687b      	ldr	r3, [r7, #4]
}
 8107316:	4618      	mov	r0, r3
 8107318:	3708      	adds	r7, #8
 810731a:	46bd      	mov	sp, r7
 810731c:	bd80      	pop	{r7, pc}

0810731e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810731e:	b580      	push	{r7, lr}
 8107320:	b08e      	sub	sp, #56	@ 0x38
 8107322:	af04      	add	r7, sp, #16
 8107324:	60f8      	str	r0, [r7, #12]
 8107326:	60b9      	str	r1, [r7, #8]
 8107328:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810732a:	2300      	movs	r3, #0
 810732c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810732e:	f3ef 8305 	mrs	r3, IPSR
 8107332:	617b      	str	r3, [r7, #20]
  return(result);
 8107334:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8107336:	2b00      	cmp	r3, #0
 8107338:	d17e      	bne.n	8107438 <osThreadNew+0x11a>
 810733a:	68fb      	ldr	r3, [r7, #12]
 810733c:	2b00      	cmp	r3, #0
 810733e:	d07b      	beq.n	8107438 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8107340:	2380      	movs	r3, #128	@ 0x80
 8107342:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8107344:	2318      	movs	r3, #24
 8107346:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8107348:	2300      	movs	r3, #0
 810734a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810734c:	f04f 33ff 	mov.w	r3, #4294967295
 8107350:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8107352:	687b      	ldr	r3, [r7, #4]
 8107354:	2b00      	cmp	r3, #0
 8107356:	d045      	beq.n	81073e4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8107358:	687b      	ldr	r3, [r7, #4]
 810735a:	681b      	ldr	r3, [r3, #0]
 810735c:	2b00      	cmp	r3, #0
 810735e:	d002      	beq.n	8107366 <osThreadNew+0x48>
        name = attr->name;
 8107360:	687b      	ldr	r3, [r7, #4]
 8107362:	681b      	ldr	r3, [r3, #0]
 8107364:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8107366:	687b      	ldr	r3, [r7, #4]
 8107368:	699b      	ldr	r3, [r3, #24]
 810736a:	2b00      	cmp	r3, #0
 810736c:	d002      	beq.n	8107374 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810736e:	687b      	ldr	r3, [r7, #4]
 8107370:	699b      	ldr	r3, [r3, #24]
 8107372:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8107374:	69fb      	ldr	r3, [r7, #28]
 8107376:	2b00      	cmp	r3, #0
 8107378:	d008      	beq.n	810738c <osThreadNew+0x6e>
 810737a:	69fb      	ldr	r3, [r7, #28]
 810737c:	2b38      	cmp	r3, #56	@ 0x38
 810737e:	d805      	bhi.n	810738c <osThreadNew+0x6e>
 8107380:	687b      	ldr	r3, [r7, #4]
 8107382:	685b      	ldr	r3, [r3, #4]
 8107384:	f003 0301 	and.w	r3, r3, #1
 8107388:	2b00      	cmp	r3, #0
 810738a:	d001      	beq.n	8107390 <osThreadNew+0x72>
        return (NULL);
 810738c:	2300      	movs	r3, #0
 810738e:	e054      	b.n	810743a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8107390:	687b      	ldr	r3, [r7, #4]
 8107392:	695b      	ldr	r3, [r3, #20]
 8107394:	2b00      	cmp	r3, #0
 8107396:	d003      	beq.n	81073a0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8107398:	687b      	ldr	r3, [r7, #4]
 810739a:	695b      	ldr	r3, [r3, #20]
 810739c:	089b      	lsrs	r3, r3, #2
 810739e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81073a0:	687b      	ldr	r3, [r7, #4]
 81073a2:	689b      	ldr	r3, [r3, #8]
 81073a4:	2b00      	cmp	r3, #0
 81073a6:	d00e      	beq.n	81073c6 <osThreadNew+0xa8>
 81073a8:	687b      	ldr	r3, [r7, #4]
 81073aa:	68db      	ldr	r3, [r3, #12]
 81073ac:	2ba7      	cmp	r3, #167	@ 0xa7
 81073ae:	d90a      	bls.n	81073c6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81073b0:	687b      	ldr	r3, [r7, #4]
 81073b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81073b4:	2b00      	cmp	r3, #0
 81073b6:	d006      	beq.n	81073c6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81073b8:	687b      	ldr	r3, [r7, #4]
 81073ba:	695b      	ldr	r3, [r3, #20]
 81073bc:	2b00      	cmp	r3, #0
 81073be:	d002      	beq.n	81073c6 <osThreadNew+0xa8>
        mem = 1;
 81073c0:	2301      	movs	r3, #1
 81073c2:	61bb      	str	r3, [r7, #24]
 81073c4:	e010      	b.n	81073e8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 81073c6:	687b      	ldr	r3, [r7, #4]
 81073c8:	689b      	ldr	r3, [r3, #8]
 81073ca:	2b00      	cmp	r3, #0
 81073cc:	d10c      	bne.n	81073e8 <osThreadNew+0xca>
 81073ce:	687b      	ldr	r3, [r7, #4]
 81073d0:	68db      	ldr	r3, [r3, #12]
 81073d2:	2b00      	cmp	r3, #0
 81073d4:	d108      	bne.n	81073e8 <osThreadNew+0xca>
 81073d6:	687b      	ldr	r3, [r7, #4]
 81073d8:	691b      	ldr	r3, [r3, #16]
 81073da:	2b00      	cmp	r3, #0
 81073dc:	d104      	bne.n	81073e8 <osThreadNew+0xca>
          mem = 0;
 81073de:	2300      	movs	r3, #0
 81073e0:	61bb      	str	r3, [r7, #24]
 81073e2:	e001      	b.n	81073e8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 81073e4:	2300      	movs	r3, #0
 81073e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 81073e8:	69bb      	ldr	r3, [r7, #24]
 81073ea:	2b01      	cmp	r3, #1
 81073ec:	d110      	bne.n	8107410 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81073ee:	687b      	ldr	r3, [r7, #4]
 81073f0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 81073f2:	687a      	ldr	r2, [r7, #4]
 81073f4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81073f6:	9202      	str	r2, [sp, #8]
 81073f8:	9301      	str	r3, [sp, #4]
 81073fa:	69fb      	ldr	r3, [r7, #28]
 81073fc:	9300      	str	r3, [sp, #0]
 81073fe:	68bb      	ldr	r3, [r7, #8]
 8107400:	6a3a      	ldr	r2, [r7, #32]
 8107402:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8107404:	68f8      	ldr	r0, [r7, #12]
 8107406:	f002 fdcf 	bl	8109fa8 <xTaskCreateStatic>
 810740a:	4603      	mov	r3, r0
 810740c:	613b      	str	r3, [r7, #16]
 810740e:	e013      	b.n	8107438 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8107410:	69bb      	ldr	r3, [r7, #24]
 8107412:	2b00      	cmp	r3, #0
 8107414:	d110      	bne.n	8107438 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8107416:	6a3b      	ldr	r3, [r7, #32]
 8107418:	b29a      	uxth	r2, r3
 810741a:	f107 0310 	add.w	r3, r7, #16
 810741e:	9301      	str	r3, [sp, #4]
 8107420:	69fb      	ldr	r3, [r7, #28]
 8107422:	9300      	str	r3, [sp, #0]
 8107424:	68bb      	ldr	r3, [r7, #8]
 8107426:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8107428:	68f8      	ldr	r0, [r7, #12]
 810742a:	f002 fe1d 	bl	810a068 <xTaskCreate>
 810742e:	4603      	mov	r3, r0
 8107430:	2b01      	cmp	r3, #1
 8107432:	d001      	beq.n	8107438 <osThreadNew+0x11a>
            hTask = NULL;
 8107434:	2300      	movs	r3, #0
 8107436:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8107438:	693b      	ldr	r3, [r7, #16]
}
 810743a:	4618      	mov	r0, r3
 810743c:	3728      	adds	r7, #40	@ 0x28
 810743e:	46bd      	mov	sp, r7
 8107440:	bd80      	pop	{r7, pc}

08107442 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8107442:	b580      	push	{r7, lr}
 8107444:	b084      	sub	sp, #16
 8107446:	af00      	add	r7, sp, #0
 8107448:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810744a:	f3ef 8305 	mrs	r3, IPSR
 810744e:	60bb      	str	r3, [r7, #8]
  return(result);
 8107450:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8107452:	2b00      	cmp	r3, #0
 8107454:	d003      	beq.n	810745e <osDelay+0x1c>
    stat = osErrorISR;
 8107456:	f06f 0305 	mvn.w	r3, #5
 810745a:	60fb      	str	r3, [r7, #12]
 810745c:	e007      	b.n	810746e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810745e:	2300      	movs	r3, #0
 8107460:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8107462:	687b      	ldr	r3, [r7, #4]
 8107464:	2b00      	cmp	r3, #0
 8107466:	d002      	beq.n	810746e <osDelay+0x2c>
      vTaskDelay(ticks);
 8107468:	6878      	ldr	r0, [r7, #4]
 810746a:	f002 ff5b 	bl	810a324 <vTaskDelay>
    }
  }

  return (stat);
 810746e:	68fb      	ldr	r3, [r7, #12]
}
 8107470:	4618      	mov	r0, r3
 8107472:	3710      	adds	r7, #16
 8107474:	46bd      	mov	sp, r7
 8107476:	bd80      	pop	{r7, pc}

08107478 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8107478:	b580      	push	{r7, lr}
 810747a:	b088      	sub	sp, #32
 810747c:	af00      	add	r7, sp, #0
 810747e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8107480:	2300      	movs	r3, #0
 8107482:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8107484:	f3ef 8305 	mrs	r3, IPSR
 8107488:	60bb      	str	r3, [r7, #8]
  return(result);
 810748a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 810748c:	2b00      	cmp	r3, #0
 810748e:	d174      	bne.n	810757a <osMutexNew+0x102>
    if (attr != NULL) {
 8107490:	687b      	ldr	r3, [r7, #4]
 8107492:	2b00      	cmp	r3, #0
 8107494:	d003      	beq.n	810749e <osMutexNew+0x26>
      type = attr->attr_bits;
 8107496:	687b      	ldr	r3, [r7, #4]
 8107498:	685b      	ldr	r3, [r3, #4]
 810749a:	61bb      	str	r3, [r7, #24]
 810749c:	e001      	b.n	81074a2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 810749e:	2300      	movs	r3, #0
 81074a0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 81074a2:	69bb      	ldr	r3, [r7, #24]
 81074a4:	f003 0301 	and.w	r3, r3, #1
 81074a8:	2b00      	cmp	r3, #0
 81074aa:	d002      	beq.n	81074b2 <osMutexNew+0x3a>
      rmtx = 1U;
 81074ac:	2301      	movs	r3, #1
 81074ae:	617b      	str	r3, [r7, #20]
 81074b0:	e001      	b.n	81074b6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 81074b2:	2300      	movs	r3, #0
 81074b4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 81074b6:	69bb      	ldr	r3, [r7, #24]
 81074b8:	f003 0308 	and.w	r3, r3, #8
 81074bc:	2b00      	cmp	r3, #0
 81074be:	d15c      	bne.n	810757a <osMutexNew+0x102>
      mem = -1;
 81074c0:	f04f 33ff 	mov.w	r3, #4294967295
 81074c4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 81074c6:	687b      	ldr	r3, [r7, #4]
 81074c8:	2b00      	cmp	r3, #0
 81074ca:	d015      	beq.n	81074f8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 81074cc:	687b      	ldr	r3, [r7, #4]
 81074ce:	689b      	ldr	r3, [r3, #8]
 81074d0:	2b00      	cmp	r3, #0
 81074d2:	d006      	beq.n	81074e2 <osMutexNew+0x6a>
 81074d4:	687b      	ldr	r3, [r7, #4]
 81074d6:	68db      	ldr	r3, [r3, #12]
 81074d8:	2b4f      	cmp	r3, #79	@ 0x4f
 81074da:	d902      	bls.n	81074e2 <osMutexNew+0x6a>
          mem = 1;
 81074dc:	2301      	movs	r3, #1
 81074de:	613b      	str	r3, [r7, #16]
 81074e0:	e00c      	b.n	81074fc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 81074e2:	687b      	ldr	r3, [r7, #4]
 81074e4:	689b      	ldr	r3, [r3, #8]
 81074e6:	2b00      	cmp	r3, #0
 81074e8:	d108      	bne.n	81074fc <osMutexNew+0x84>
 81074ea:	687b      	ldr	r3, [r7, #4]
 81074ec:	68db      	ldr	r3, [r3, #12]
 81074ee:	2b00      	cmp	r3, #0
 81074f0:	d104      	bne.n	81074fc <osMutexNew+0x84>
            mem = 0;
 81074f2:	2300      	movs	r3, #0
 81074f4:	613b      	str	r3, [r7, #16]
 81074f6:	e001      	b.n	81074fc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 81074f8:	2300      	movs	r3, #0
 81074fa:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 81074fc:	693b      	ldr	r3, [r7, #16]
 81074fe:	2b01      	cmp	r3, #1
 8107500:	d112      	bne.n	8107528 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8107502:	697b      	ldr	r3, [r7, #20]
 8107504:	2b00      	cmp	r3, #0
 8107506:	d007      	beq.n	8107518 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8107508:	687b      	ldr	r3, [r7, #4]
 810750a:	689b      	ldr	r3, [r3, #8]
 810750c:	4619      	mov	r1, r3
 810750e:	2004      	movs	r0, #4
 8107510:	f001 f9b3 	bl	810887a <xQueueCreateMutexStatic>
 8107514:	61f8      	str	r0, [r7, #28]
 8107516:	e016      	b.n	8107546 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8107518:	687b      	ldr	r3, [r7, #4]
 810751a:	689b      	ldr	r3, [r3, #8]
 810751c:	4619      	mov	r1, r3
 810751e:	2001      	movs	r0, #1
 8107520:	f001 f9ab 	bl	810887a <xQueueCreateMutexStatic>
 8107524:	61f8      	str	r0, [r7, #28]
 8107526:	e00e      	b.n	8107546 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8107528:	693b      	ldr	r3, [r7, #16]
 810752a:	2b00      	cmp	r3, #0
 810752c:	d10b      	bne.n	8107546 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 810752e:	697b      	ldr	r3, [r7, #20]
 8107530:	2b00      	cmp	r3, #0
 8107532:	d004      	beq.n	810753e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8107534:	2004      	movs	r0, #4
 8107536:	f001 f988 	bl	810884a <xQueueCreateMutex>
 810753a:	61f8      	str	r0, [r7, #28]
 810753c:	e003      	b.n	8107546 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 810753e:	2001      	movs	r0, #1
 8107540:	f001 f983 	bl	810884a <xQueueCreateMutex>
 8107544:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8107546:	69fb      	ldr	r3, [r7, #28]
 8107548:	2b00      	cmp	r3, #0
 810754a:	d00c      	beq.n	8107566 <osMutexNew+0xee>
        if (attr != NULL) {
 810754c:	687b      	ldr	r3, [r7, #4]
 810754e:	2b00      	cmp	r3, #0
 8107550:	d003      	beq.n	810755a <osMutexNew+0xe2>
          name = attr->name;
 8107552:	687b      	ldr	r3, [r7, #4]
 8107554:	681b      	ldr	r3, [r3, #0]
 8107556:	60fb      	str	r3, [r7, #12]
 8107558:	e001      	b.n	810755e <osMutexNew+0xe6>
        } else {
          name = NULL;
 810755a:	2300      	movs	r3, #0
 810755c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 810755e:	68f9      	ldr	r1, [r7, #12]
 8107560:	69f8      	ldr	r0, [r7, #28]
 8107562:	f002 f86f 	bl	8109644 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8107566:	69fb      	ldr	r3, [r7, #28]
 8107568:	2b00      	cmp	r3, #0
 810756a:	d006      	beq.n	810757a <osMutexNew+0x102>
 810756c:	697b      	ldr	r3, [r7, #20]
 810756e:	2b00      	cmp	r3, #0
 8107570:	d003      	beq.n	810757a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8107572:	69fb      	ldr	r3, [r7, #28]
 8107574:	f043 0301 	orr.w	r3, r3, #1
 8107578:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 810757a:	69fb      	ldr	r3, [r7, #28]
}
 810757c:	4618      	mov	r0, r3
 810757e:	3720      	adds	r7, #32
 8107580:	46bd      	mov	sp, r7
 8107582:	bd80      	pop	{r7, pc}

08107584 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8107584:	b580      	push	{r7, lr}
 8107586:	b086      	sub	sp, #24
 8107588:	af00      	add	r7, sp, #0
 810758a:	6078      	str	r0, [r7, #4]
 810758c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 810758e:	687b      	ldr	r3, [r7, #4]
 8107590:	f023 0301 	bic.w	r3, r3, #1
 8107594:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8107596:	687b      	ldr	r3, [r7, #4]
 8107598:	f003 0301 	and.w	r3, r3, #1
 810759c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 810759e:	2300      	movs	r3, #0
 81075a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81075a2:	f3ef 8305 	mrs	r3, IPSR
 81075a6:	60bb      	str	r3, [r7, #8]
  return(result);
 81075a8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 81075aa:	2b00      	cmp	r3, #0
 81075ac:	d003      	beq.n	81075b6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 81075ae:	f06f 0305 	mvn.w	r3, #5
 81075b2:	617b      	str	r3, [r7, #20]
 81075b4:	e02c      	b.n	8107610 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 81075b6:	693b      	ldr	r3, [r7, #16]
 81075b8:	2b00      	cmp	r3, #0
 81075ba:	d103      	bne.n	81075c4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 81075bc:	f06f 0303 	mvn.w	r3, #3
 81075c0:	617b      	str	r3, [r7, #20]
 81075c2:	e025      	b.n	8107610 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 81075c4:	68fb      	ldr	r3, [r7, #12]
 81075c6:	2b00      	cmp	r3, #0
 81075c8:	d011      	beq.n	81075ee <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 81075ca:	6839      	ldr	r1, [r7, #0]
 81075cc:	6938      	ldr	r0, [r7, #16]
 81075ce:	f001 f9a4 	bl	810891a <xQueueTakeMutexRecursive>
 81075d2:	4603      	mov	r3, r0
 81075d4:	2b01      	cmp	r3, #1
 81075d6:	d01b      	beq.n	8107610 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 81075d8:	683b      	ldr	r3, [r7, #0]
 81075da:	2b00      	cmp	r3, #0
 81075dc:	d003      	beq.n	81075e6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 81075de:	f06f 0301 	mvn.w	r3, #1
 81075e2:	617b      	str	r3, [r7, #20]
 81075e4:	e014      	b.n	8107610 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 81075e6:	f06f 0302 	mvn.w	r3, #2
 81075ea:	617b      	str	r3, [r7, #20]
 81075ec:	e010      	b.n	8107610 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 81075ee:	6839      	ldr	r1, [r7, #0]
 81075f0:	6938      	ldr	r0, [r7, #16]
 81075f2:	f001 fd49 	bl	8109088 <xQueueSemaphoreTake>
 81075f6:	4603      	mov	r3, r0
 81075f8:	2b01      	cmp	r3, #1
 81075fa:	d009      	beq.n	8107610 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 81075fc:	683b      	ldr	r3, [r7, #0]
 81075fe:	2b00      	cmp	r3, #0
 8107600:	d003      	beq.n	810760a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8107602:	f06f 0301 	mvn.w	r3, #1
 8107606:	617b      	str	r3, [r7, #20]
 8107608:	e002      	b.n	8107610 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 810760a:	f06f 0302 	mvn.w	r3, #2
 810760e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8107610:	697b      	ldr	r3, [r7, #20]
}
 8107612:	4618      	mov	r0, r3
 8107614:	3718      	adds	r7, #24
 8107616:	46bd      	mov	sp, r7
 8107618:	bd80      	pop	{r7, pc}

0810761a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 810761a:	b580      	push	{r7, lr}
 810761c:	b086      	sub	sp, #24
 810761e:	af00      	add	r7, sp, #0
 8107620:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8107622:	687b      	ldr	r3, [r7, #4]
 8107624:	f023 0301 	bic.w	r3, r3, #1
 8107628:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 810762a:	687b      	ldr	r3, [r7, #4]
 810762c:	f003 0301 	and.w	r3, r3, #1
 8107630:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8107632:	2300      	movs	r3, #0
 8107634:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8107636:	f3ef 8305 	mrs	r3, IPSR
 810763a:	60bb      	str	r3, [r7, #8]
  return(result);
 810763c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 810763e:	2b00      	cmp	r3, #0
 8107640:	d003      	beq.n	810764a <osMutexRelease+0x30>
    stat = osErrorISR;
 8107642:	f06f 0305 	mvn.w	r3, #5
 8107646:	617b      	str	r3, [r7, #20]
 8107648:	e01f      	b.n	810768a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 810764a:	693b      	ldr	r3, [r7, #16]
 810764c:	2b00      	cmp	r3, #0
 810764e:	d103      	bne.n	8107658 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8107650:	f06f 0303 	mvn.w	r3, #3
 8107654:	617b      	str	r3, [r7, #20]
 8107656:	e018      	b.n	810768a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8107658:	68fb      	ldr	r3, [r7, #12]
 810765a:	2b00      	cmp	r3, #0
 810765c:	d009      	beq.n	8107672 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 810765e:	6938      	ldr	r0, [r7, #16]
 8107660:	f001 f926 	bl	81088b0 <xQueueGiveMutexRecursive>
 8107664:	4603      	mov	r3, r0
 8107666:	2b01      	cmp	r3, #1
 8107668:	d00f      	beq.n	810768a <osMutexRelease+0x70>
        stat = osErrorResource;
 810766a:	f06f 0302 	mvn.w	r3, #2
 810766e:	617b      	str	r3, [r7, #20]
 8107670:	e00b      	b.n	810768a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8107672:	2300      	movs	r3, #0
 8107674:	2200      	movs	r2, #0
 8107676:	2100      	movs	r1, #0
 8107678:	6938      	ldr	r0, [r7, #16]
 810767a:	f001 f9f3 	bl	8108a64 <xQueueGenericSend>
 810767e:	4603      	mov	r3, r0
 8107680:	2b01      	cmp	r3, #1
 8107682:	d002      	beq.n	810768a <osMutexRelease+0x70>
        stat = osErrorResource;
 8107684:	f06f 0302 	mvn.w	r3, #2
 8107688:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 810768a:	697b      	ldr	r3, [r7, #20]
}
 810768c:	4618      	mov	r0, r3
 810768e:	3718      	adds	r7, #24
 8107690:	46bd      	mov	sp, r7
 8107692:	bd80      	pop	{r7, pc}

08107694 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8107694:	b580      	push	{r7, lr}
 8107696:	b08a      	sub	sp, #40	@ 0x28
 8107698:	af02      	add	r7, sp, #8
 810769a:	60f8      	str	r0, [r7, #12]
 810769c:	60b9      	str	r1, [r7, #8]
 810769e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 81076a0:	2300      	movs	r3, #0
 81076a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81076a4:	f3ef 8305 	mrs	r3, IPSR
 81076a8:	613b      	str	r3, [r7, #16]
  return(result);
 81076aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 81076ac:	2b00      	cmp	r3, #0
 81076ae:	d175      	bne.n	810779c <osSemaphoreNew+0x108>
 81076b0:	68fb      	ldr	r3, [r7, #12]
 81076b2:	2b00      	cmp	r3, #0
 81076b4:	d072      	beq.n	810779c <osSemaphoreNew+0x108>
 81076b6:	68ba      	ldr	r2, [r7, #8]
 81076b8:	68fb      	ldr	r3, [r7, #12]
 81076ba:	429a      	cmp	r2, r3
 81076bc:	d86e      	bhi.n	810779c <osSemaphoreNew+0x108>
    mem = -1;
 81076be:	f04f 33ff 	mov.w	r3, #4294967295
 81076c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 81076c4:	687b      	ldr	r3, [r7, #4]
 81076c6:	2b00      	cmp	r3, #0
 81076c8:	d015      	beq.n	81076f6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 81076ca:	687b      	ldr	r3, [r7, #4]
 81076cc:	689b      	ldr	r3, [r3, #8]
 81076ce:	2b00      	cmp	r3, #0
 81076d0:	d006      	beq.n	81076e0 <osSemaphoreNew+0x4c>
 81076d2:	687b      	ldr	r3, [r7, #4]
 81076d4:	68db      	ldr	r3, [r3, #12]
 81076d6:	2b4f      	cmp	r3, #79	@ 0x4f
 81076d8:	d902      	bls.n	81076e0 <osSemaphoreNew+0x4c>
        mem = 1;
 81076da:	2301      	movs	r3, #1
 81076dc:	61bb      	str	r3, [r7, #24]
 81076de:	e00c      	b.n	81076fa <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 81076e0:	687b      	ldr	r3, [r7, #4]
 81076e2:	689b      	ldr	r3, [r3, #8]
 81076e4:	2b00      	cmp	r3, #0
 81076e6:	d108      	bne.n	81076fa <osSemaphoreNew+0x66>
 81076e8:	687b      	ldr	r3, [r7, #4]
 81076ea:	68db      	ldr	r3, [r3, #12]
 81076ec:	2b00      	cmp	r3, #0
 81076ee:	d104      	bne.n	81076fa <osSemaphoreNew+0x66>
          mem = 0;
 81076f0:	2300      	movs	r3, #0
 81076f2:	61bb      	str	r3, [r7, #24]
 81076f4:	e001      	b.n	81076fa <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 81076f6:	2300      	movs	r3, #0
 81076f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 81076fa:	69bb      	ldr	r3, [r7, #24]
 81076fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107700:	d04c      	beq.n	810779c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8107702:	68fb      	ldr	r3, [r7, #12]
 8107704:	2b01      	cmp	r3, #1
 8107706:	d128      	bne.n	810775a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8107708:	69bb      	ldr	r3, [r7, #24]
 810770a:	2b01      	cmp	r3, #1
 810770c:	d10a      	bne.n	8107724 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 810770e:	687b      	ldr	r3, [r7, #4]
 8107710:	689b      	ldr	r3, [r3, #8]
 8107712:	2203      	movs	r2, #3
 8107714:	9200      	str	r2, [sp, #0]
 8107716:	2200      	movs	r2, #0
 8107718:	2100      	movs	r1, #0
 810771a:	2001      	movs	r0, #1
 810771c:	f000 ffa0 	bl	8108660 <xQueueGenericCreateStatic>
 8107720:	61f8      	str	r0, [r7, #28]
 8107722:	e005      	b.n	8107730 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8107724:	2203      	movs	r2, #3
 8107726:	2100      	movs	r1, #0
 8107728:	2001      	movs	r0, #1
 810772a:	f001 f816 	bl	810875a <xQueueGenericCreate>
 810772e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8107730:	69fb      	ldr	r3, [r7, #28]
 8107732:	2b00      	cmp	r3, #0
 8107734:	d022      	beq.n	810777c <osSemaphoreNew+0xe8>
 8107736:	68bb      	ldr	r3, [r7, #8]
 8107738:	2b00      	cmp	r3, #0
 810773a:	d01f      	beq.n	810777c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810773c:	2300      	movs	r3, #0
 810773e:	2200      	movs	r2, #0
 8107740:	2100      	movs	r1, #0
 8107742:	69f8      	ldr	r0, [r7, #28]
 8107744:	f001 f98e 	bl	8108a64 <xQueueGenericSend>
 8107748:	4603      	mov	r3, r0
 810774a:	2b01      	cmp	r3, #1
 810774c:	d016      	beq.n	810777c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 810774e:	69f8      	ldr	r0, [r7, #28]
 8107750:	f001 fe2c 	bl	81093ac <vQueueDelete>
            hSemaphore = NULL;
 8107754:	2300      	movs	r3, #0
 8107756:	61fb      	str	r3, [r7, #28]
 8107758:	e010      	b.n	810777c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 810775a:	69bb      	ldr	r3, [r7, #24]
 810775c:	2b01      	cmp	r3, #1
 810775e:	d108      	bne.n	8107772 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8107760:	687b      	ldr	r3, [r7, #4]
 8107762:	689b      	ldr	r3, [r3, #8]
 8107764:	461a      	mov	r2, r3
 8107766:	68b9      	ldr	r1, [r7, #8]
 8107768:	68f8      	ldr	r0, [r7, #12]
 810776a:	f001 f90d 	bl	8108988 <xQueueCreateCountingSemaphoreStatic>
 810776e:	61f8      	str	r0, [r7, #28]
 8107770:	e004      	b.n	810777c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8107772:	68b9      	ldr	r1, [r7, #8]
 8107774:	68f8      	ldr	r0, [r7, #12]
 8107776:	f001 f940 	bl	81089fa <xQueueCreateCountingSemaphore>
 810777a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 810777c:	69fb      	ldr	r3, [r7, #28]
 810777e:	2b00      	cmp	r3, #0
 8107780:	d00c      	beq.n	810779c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8107782:	687b      	ldr	r3, [r7, #4]
 8107784:	2b00      	cmp	r3, #0
 8107786:	d003      	beq.n	8107790 <osSemaphoreNew+0xfc>
          name = attr->name;
 8107788:	687b      	ldr	r3, [r7, #4]
 810778a:	681b      	ldr	r3, [r3, #0]
 810778c:	617b      	str	r3, [r7, #20]
 810778e:	e001      	b.n	8107794 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8107790:	2300      	movs	r3, #0
 8107792:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8107794:	6979      	ldr	r1, [r7, #20]
 8107796:	69f8      	ldr	r0, [r7, #28]
 8107798:	f001 ff54 	bl	8109644 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 810779c:	69fb      	ldr	r3, [r7, #28]
}
 810779e:	4618      	mov	r0, r3
 81077a0:	3720      	adds	r7, #32
 81077a2:	46bd      	mov	sp, r7
 81077a4:	bd80      	pop	{r7, pc}
	...

081077a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 81077a8:	b580      	push	{r7, lr}
 81077aa:	b086      	sub	sp, #24
 81077ac:	af00      	add	r7, sp, #0
 81077ae:	6078      	str	r0, [r7, #4]
 81077b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 81077b2:	687b      	ldr	r3, [r7, #4]
 81077b4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 81077b6:	2300      	movs	r3, #0
 81077b8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 81077ba:	693b      	ldr	r3, [r7, #16]
 81077bc:	2b00      	cmp	r3, #0
 81077be:	d103      	bne.n	81077c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 81077c0:	f06f 0303 	mvn.w	r3, #3
 81077c4:	617b      	str	r3, [r7, #20]
 81077c6:	e039      	b.n	810783c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81077c8:	f3ef 8305 	mrs	r3, IPSR
 81077cc:	60fb      	str	r3, [r7, #12]
  return(result);
 81077ce:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 81077d0:	2b00      	cmp	r3, #0
 81077d2:	d022      	beq.n	810781a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 81077d4:	683b      	ldr	r3, [r7, #0]
 81077d6:	2b00      	cmp	r3, #0
 81077d8:	d003      	beq.n	81077e2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 81077da:	f06f 0303 	mvn.w	r3, #3
 81077de:	617b      	str	r3, [r7, #20]
 81077e0:	e02c      	b.n	810783c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 81077e2:	2300      	movs	r3, #0
 81077e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 81077e6:	f107 0308 	add.w	r3, r7, #8
 81077ea:	461a      	mov	r2, r3
 81077ec:	2100      	movs	r1, #0
 81077ee:	6938      	ldr	r0, [r7, #16]
 81077f0:	f001 fd5a 	bl	81092a8 <xQueueReceiveFromISR>
 81077f4:	4603      	mov	r3, r0
 81077f6:	2b01      	cmp	r3, #1
 81077f8:	d003      	beq.n	8107802 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 81077fa:	f06f 0302 	mvn.w	r3, #2
 81077fe:	617b      	str	r3, [r7, #20]
 8107800:	e01c      	b.n	810783c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8107802:	68bb      	ldr	r3, [r7, #8]
 8107804:	2b00      	cmp	r3, #0
 8107806:	d019      	beq.n	810783c <osSemaphoreAcquire+0x94>
 8107808:	4b0f      	ldr	r3, [pc, #60]	@ (8107848 <osSemaphoreAcquire+0xa0>)
 810780a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810780e:	601a      	str	r2, [r3, #0]
 8107810:	f3bf 8f4f 	dsb	sy
 8107814:	f3bf 8f6f 	isb	sy
 8107818:	e010      	b.n	810783c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 810781a:	6839      	ldr	r1, [r7, #0]
 810781c:	6938      	ldr	r0, [r7, #16]
 810781e:	f001 fc33 	bl	8109088 <xQueueSemaphoreTake>
 8107822:	4603      	mov	r3, r0
 8107824:	2b01      	cmp	r3, #1
 8107826:	d009      	beq.n	810783c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8107828:	683b      	ldr	r3, [r7, #0]
 810782a:	2b00      	cmp	r3, #0
 810782c:	d003      	beq.n	8107836 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 810782e:	f06f 0301 	mvn.w	r3, #1
 8107832:	617b      	str	r3, [r7, #20]
 8107834:	e002      	b.n	810783c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8107836:	f06f 0302 	mvn.w	r3, #2
 810783a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 810783c:	697b      	ldr	r3, [r7, #20]
}
 810783e:	4618      	mov	r0, r3
 8107840:	3718      	adds	r7, #24
 8107842:	46bd      	mov	sp, r7
 8107844:	bd80      	pop	{r7, pc}
 8107846:	bf00      	nop
 8107848:	e000ed04 	.word	0xe000ed04

0810784c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 810784c:	b580      	push	{r7, lr}
 810784e:	b086      	sub	sp, #24
 8107850:	af00      	add	r7, sp, #0
 8107852:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8107854:	687b      	ldr	r3, [r7, #4]
 8107856:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8107858:	2300      	movs	r3, #0
 810785a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 810785c:	693b      	ldr	r3, [r7, #16]
 810785e:	2b00      	cmp	r3, #0
 8107860:	d103      	bne.n	810786a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8107862:	f06f 0303 	mvn.w	r3, #3
 8107866:	617b      	str	r3, [r7, #20]
 8107868:	e02c      	b.n	81078c4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810786a:	f3ef 8305 	mrs	r3, IPSR
 810786e:	60fb      	str	r3, [r7, #12]
  return(result);
 8107870:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8107872:	2b00      	cmp	r3, #0
 8107874:	d01a      	beq.n	81078ac <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8107876:	2300      	movs	r3, #0
 8107878:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 810787a:	f107 0308 	add.w	r3, r7, #8
 810787e:	4619      	mov	r1, r3
 8107880:	6938      	ldr	r0, [r7, #16]
 8107882:	f001 fa8f 	bl	8108da4 <xQueueGiveFromISR>
 8107886:	4603      	mov	r3, r0
 8107888:	2b01      	cmp	r3, #1
 810788a:	d003      	beq.n	8107894 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 810788c:	f06f 0302 	mvn.w	r3, #2
 8107890:	617b      	str	r3, [r7, #20]
 8107892:	e017      	b.n	81078c4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8107894:	68bb      	ldr	r3, [r7, #8]
 8107896:	2b00      	cmp	r3, #0
 8107898:	d014      	beq.n	81078c4 <osSemaphoreRelease+0x78>
 810789a:	4b0d      	ldr	r3, [pc, #52]	@ (81078d0 <osSemaphoreRelease+0x84>)
 810789c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81078a0:	601a      	str	r2, [r3, #0]
 81078a2:	f3bf 8f4f 	dsb	sy
 81078a6:	f3bf 8f6f 	isb	sy
 81078aa:	e00b      	b.n	81078c4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 81078ac:	2300      	movs	r3, #0
 81078ae:	2200      	movs	r2, #0
 81078b0:	2100      	movs	r1, #0
 81078b2:	6938      	ldr	r0, [r7, #16]
 81078b4:	f001 f8d6 	bl	8108a64 <xQueueGenericSend>
 81078b8:	4603      	mov	r3, r0
 81078ba:	2b01      	cmp	r3, #1
 81078bc:	d002      	beq.n	81078c4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 81078be:	f06f 0302 	mvn.w	r3, #2
 81078c2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 81078c4:	697b      	ldr	r3, [r7, #20]
}
 81078c6:	4618      	mov	r0, r3
 81078c8:	3718      	adds	r7, #24
 81078ca:	46bd      	mov	sp, r7
 81078cc:	bd80      	pop	{r7, pc}
 81078ce:	bf00      	nop
 81078d0:	e000ed04 	.word	0xe000ed04

081078d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 81078d4:	b580      	push	{r7, lr}
 81078d6:	b08a      	sub	sp, #40	@ 0x28
 81078d8:	af02      	add	r7, sp, #8
 81078da:	60f8      	str	r0, [r7, #12]
 81078dc:	60b9      	str	r1, [r7, #8]
 81078de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 81078e0:	2300      	movs	r3, #0
 81078e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81078e4:	f3ef 8305 	mrs	r3, IPSR
 81078e8:	613b      	str	r3, [r7, #16]
  return(result);
 81078ea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 81078ec:	2b00      	cmp	r3, #0
 81078ee:	d15f      	bne.n	81079b0 <osMessageQueueNew+0xdc>
 81078f0:	68fb      	ldr	r3, [r7, #12]
 81078f2:	2b00      	cmp	r3, #0
 81078f4:	d05c      	beq.n	81079b0 <osMessageQueueNew+0xdc>
 81078f6:	68bb      	ldr	r3, [r7, #8]
 81078f8:	2b00      	cmp	r3, #0
 81078fa:	d059      	beq.n	81079b0 <osMessageQueueNew+0xdc>
    mem = -1;
 81078fc:	f04f 33ff 	mov.w	r3, #4294967295
 8107900:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8107902:	687b      	ldr	r3, [r7, #4]
 8107904:	2b00      	cmp	r3, #0
 8107906:	d029      	beq.n	810795c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8107908:	687b      	ldr	r3, [r7, #4]
 810790a:	689b      	ldr	r3, [r3, #8]
 810790c:	2b00      	cmp	r3, #0
 810790e:	d012      	beq.n	8107936 <osMessageQueueNew+0x62>
 8107910:	687b      	ldr	r3, [r7, #4]
 8107912:	68db      	ldr	r3, [r3, #12]
 8107914:	2b4f      	cmp	r3, #79	@ 0x4f
 8107916:	d90e      	bls.n	8107936 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8107918:	687b      	ldr	r3, [r7, #4]
 810791a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 810791c:	2b00      	cmp	r3, #0
 810791e:	d00a      	beq.n	8107936 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8107920:	687b      	ldr	r3, [r7, #4]
 8107922:	695a      	ldr	r2, [r3, #20]
 8107924:	68fb      	ldr	r3, [r7, #12]
 8107926:	68b9      	ldr	r1, [r7, #8]
 8107928:	fb01 f303 	mul.w	r3, r1, r3
 810792c:	429a      	cmp	r2, r3
 810792e:	d302      	bcc.n	8107936 <osMessageQueueNew+0x62>
        mem = 1;
 8107930:	2301      	movs	r3, #1
 8107932:	61bb      	str	r3, [r7, #24]
 8107934:	e014      	b.n	8107960 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8107936:	687b      	ldr	r3, [r7, #4]
 8107938:	689b      	ldr	r3, [r3, #8]
 810793a:	2b00      	cmp	r3, #0
 810793c:	d110      	bne.n	8107960 <osMessageQueueNew+0x8c>
 810793e:	687b      	ldr	r3, [r7, #4]
 8107940:	68db      	ldr	r3, [r3, #12]
 8107942:	2b00      	cmp	r3, #0
 8107944:	d10c      	bne.n	8107960 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8107946:	687b      	ldr	r3, [r7, #4]
 8107948:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 810794a:	2b00      	cmp	r3, #0
 810794c:	d108      	bne.n	8107960 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 810794e:	687b      	ldr	r3, [r7, #4]
 8107950:	695b      	ldr	r3, [r3, #20]
 8107952:	2b00      	cmp	r3, #0
 8107954:	d104      	bne.n	8107960 <osMessageQueueNew+0x8c>
          mem = 0;
 8107956:	2300      	movs	r3, #0
 8107958:	61bb      	str	r3, [r7, #24]
 810795a:	e001      	b.n	8107960 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 810795c:	2300      	movs	r3, #0
 810795e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8107960:	69bb      	ldr	r3, [r7, #24]
 8107962:	2b01      	cmp	r3, #1
 8107964:	d10b      	bne.n	810797e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8107966:	687b      	ldr	r3, [r7, #4]
 8107968:	691a      	ldr	r2, [r3, #16]
 810796a:	687b      	ldr	r3, [r7, #4]
 810796c:	689b      	ldr	r3, [r3, #8]
 810796e:	2100      	movs	r1, #0
 8107970:	9100      	str	r1, [sp, #0]
 8107972:	68b9      	ldr	r1, [r7, #8]
 8107974:	68f8      	ldr	r0, [r7, #12]
 8107976:	f000 fe73 	bl	8108660 <xQueueGenericCreateStatic>
 810797a:	61f8      	str	r0, [r7, #28]
 810797c:	e008      	b.n	8107990 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 810797e:	69bb      	ldr	r3, [r7, #24]
 8107980:	2b00      	cmp	r3, #0
 8107982:	d105      	bne.n	8107990 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8107984:	2200      	movs	r2, #0
 8107986:	68b9      	ldr	r1, [r7, #8]
 8107988:	68f8      	ldr	r0, [r7, #12]
 810798a:	f000 fee6 	bl	810875a <xQueueGenericCreate>
 810798e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8107990:	69fb      	ldr	r3, [r7, #28]
 8107992:	2b00      	cmp	r3, #0
 8107994:	d00c      	beq.n	81079b0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8107996:	687b      	ldr	r3, [r7, #4]
 8107998:	2b00      	cmp	r3, #0
 810799a:	d003      	beq.n	81079a4 <osMessageQueueNew+0xd0>
        name = attr->name;
 810799c:	687b      	ldr	r3, [r7, #4]
 810799e:	681b      	ldr	r3, [r3, #0]
 81079a0:	617b      	str	r3, [r7, #20]
 81079a2:	e001      	b.n	81079a8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 81079a4:	2300      	movs	r3, #0
 81079a6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 81079a8:	6979      	ldr	r1, [r7, #20]
 81079aa:	69f8      	ldr	r0, [r7, #28]
 81079ac:	f001 fe4a 	bl	8109644 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 81079b0:	69fb      	ldr	r3, [r7, #28]
}
 81079b2:	4618      	mov	r0, r3
 81079b4:	3720      	adds	r7, #32
 81079b6:	46bd      	mov	sp, r7
 81079b8:	bd80      	pop	{r7, pc}
	...

081079bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 81079bc:	b580      	push	{r7, lr}
 81079be:	b088      	sub	sp, #32
 81079c0:	af00      	add	r7, sp, #0
 81079c2:	60f8      	str	r0, [r7, #12]
 81079c4:	60b9      	str	r1, [r7, #8]
 81079c6:	603b      	str	r3, [r7, #0]
 81079c8:	4613      	mov	r3, r2
 81079ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 81079cc:	68fb      	ldr	r3, [r7, #12]
 81079ce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 81079d0:	2300      	movs	r3, #0
 81079d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81079d4:	f3ef 8305 	mrs	r3, IPSR
 81079d8:	617b      	str	r3, [r7, #20]
  return(result);
 81079da:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 81079dc:	2b00      	cmp	r3, #0
 81079de:	d028      	beq.n	8107a32 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 81079e0:	69bb      	ldr	r3, [r7, #24]
 81079e2:	2b00      	cmp	r3, #0
 81079e4:	d005      	beq.n	81079f2 <osMessageQueuePut+0x36>
 81079e6:	68bb      	ldr	r3, [r7, #8]
 81079e8:	2b00      	cmp	r3, #0
 81079ea:	d002      	beq.n	81079f2 <osMessageQueuePut+0x36>
 81079ec:	683b      	ldr	r3, [r7, #0]
 81079ee:	2b00      	cmp	r3, #0
 81079f0:	d003      	beq.n	81079fa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 81079f2:	f06f 0303 	mvn.w	r3, #3
 81079f6:	61fb      	str	r3, [r7, #28]
 81079f8:	e038      	b.n	8107a6c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 81079fa:	2300      	movs	r3, #0
 81079fc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 81079fe:	f107 0210 	add.w	r2, r7, #16
 8107a02:	2300      	movs	r3, #0
 8107a04:	68b9      	ldr	r1, [r7, #8]
 8107a06:	69b8      	ldr	r0, [r7, #24]
 8107a08:	f001 f92e 	bl	8108c68 <xQueueGenericSendFromISR>
 8107a0c:	4603      	mov	r3, r0
 8107a0e:	2b01      	cmp	r3, #1
 8107a10:	d003      	beq.n	8107a1a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8107a12:	f06f 0302 	mvn.w	r3, #2
 8107a16:	61fb      	str	r3, [r7, #28]
 8107a18:	e028      	b.n	8107a6c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8107a1a:	693b      	ldr	r3, [r7, #16]
 8107a1c:	2b00      	cmp	r3, #0
 8107a1e:	d025      	beq.n	8107a6c <osMessageQueuePut+0xb0>
 8107a20:	4b15      	ldr	r3, [pc, #84]	@ (8107a78 <osMessageQueuePut+0xbc>)
 8107a22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107a26:	601a      	str	r2, [r3, #0]
 8107a28:	f3bf 8f4f 	dsb	sy
 8107a2c:	f3bf 8f6f 	isb	sy
 8107a30:	e01c      	b.n	8107a6c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8107a32:	69bb      	ldr	r3, [r7, #24]
 8107a34:	2b00      	cmp	r3, #0
 8107a36:	d002      	beq.n	8107a3e <osMessageQueuePut+0x82>
 8107a38:	68bb      	ldr	r3, [r7, #8]
 8107a3a:	2b00      	cmp	r3, #0
 8107a3c:	d103      	bne.n	8107a46 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8107a3e:	f06f 0303 	mvn.w	r3, #3
 8107a42:	61fb      	str	r3, [r7, #28]
 8107a44:	e012      	b.n	8107a6c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8107a46:	2300      	movs	r3, #0
 8107a48:	683a      	ldr	r2, [r7, #0]
 8107a4a:	68b9      	ldr	r1, [r7, #8]
 8107a4c:	69b8      	ldr	r0, [r7, #24]
 8107a4e:	f001 f809 	bl	8108a64 <xQueueGenericSend>
 8107a52:	4603      	mov	r3, r0
 8107a54:	2b01      	cmp	r3, #1
 8107a56:	d009      	beq.n	8107a6c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8107a58:	683b      	ldr	r3, [r7, #0]
 8107a5a:	2b00      	cmp	r3, #0
 8107a5c:	d003      	beq.n	8107a66 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8107a5e:	f06f 0301 	mvn.w	r3, #1
 8107a62:	61fb      	str	r3, [r7, #28]
 8107a64:	e002      	b.n	8107a6c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8107a66:	f06f 0302 	mvn.w	r3, #2
 8107a6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8107a6c:	69fb      	ldr	r3, [r7, #28]
}
 8107a6e:	4618      	mov	r0, r3
 8107a70:	3720      	adds	r7, #32
 8107a72:	46bd      	mov	sp, r7
 8107a74:	bd80      	pop	{r7, pc}
 8107a76:	bf00      	nop
 8107a78:	e000ed04 	.word	0xe000ed04

08107a7c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8107a7c:	b580      	push	{r7, lr}
 8107a7e:	b088      	sub	sp, #32
 8107a80:	af00      	add	r7, sp, #0
 8107a82:	60f8      	str	r0, [r7, #12]
 8107a84:	60b9      	str	r1, [r7, #8]
 8107a86:	607a      	str	r2, [r7, #4]
 8107a88:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8107a8a:	68fb      	ldr	r3, [r7, #12]
 8107a8c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8107a8e:	2300      	movs	r3, #0
 8107a90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8107a92:	f3ef 8305 	mrs	r3, IPSR
 8107a96:	617b      	str	r3, [r7, #20]
  return(result);
 8107a98:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8107a9a:	2b00      	cmp	r3, #0
 8107a9c:	d028      	beq.n	8107af0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8107a9e:	69bb      	ldr	r3, [r7, #24]
 8107aa0:	2b00      	cmp	r3, #0
 8107aa2:	d005      	beq.n	8107ab0 <osMessageQueueGet+0x34>
 8107aa4:	68bb      	ldr	r3, [r7, #8]
 8107aa6:	2b00      	cmp	r3, #0
 8107aa8:	d002      	beq.n	8107ab0 <osMessageQueueGet+0x34>
 8107aaa:	683b      	ldr	r3, [r7, #0]
 8107aac:	2b00      	cmp	r3, #0
 8107aae:	d003      	beq.n	8107ab8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8107ab0:	f06f 0303 	mvn.w	r3, #3
 8107ab4:	61fb      	str	r3, [r7, #28]
 8107ab6:	e037      	b.n	8107b28 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8107ab8:	2300      	movs	r3, #0
 8107aba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8107abc:	f107 0310 	add.w	r3, r7, #16
 8107ac0:	461a      	mov	r2, r3
 8107ac2:	68b9      	ldr	r1, [r7, #8]
 8107ac4:	69b8      	ldr	r0, [r7, #24]
 8107ac6:	f001 fbef 	bl	81092a8 <xQueueReceiveFromISR>
 8107aca:	4603      	mov	r3, r0
 8107acc:	2b01      	cmp	r3, #1
 8107ace:	d003      	beq.n	8107ad8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8107ad0:	f06f 0302 	mvn.w	r3, #2
 8107ad4:	61fb      	str	r3, [r7, #28]
 8107ad6:	e027      	b.n	8107b28 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8107ad8:	693b      	ldr	r3, [r7, #16]
 8107ada:	2b00      	cmp	r3, #0
 8107adc:	d024      	beq.n	8107b28 <osMessageQueueGet+0xac>
 8107ade:	4b15      	ldr	r3, [pc, #84]	@ (8107b34 <osMessageQueueGet+0xb8>)
 8107ae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107ae4:	601a      	str	r2, [r3, #0]
 8107ae6:	f3bf 8f4f 	dsb	sy
 8107aea:	f3bf 8f6f 	isb	sy
 8107aee:	e01b      	b.n	8107b28 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8107af0:	69bb      	ldr	r3, [r7, #24]
 8107af2:	2b00      	cmp	r3, #0
 8107af4:	d002      	beq.n	8107afc <osMessageQueueGet+0x80>
 8107af6:	68bb      	ldr	r3, [r7, #8]
 8107af8:	2b00      	cmp	r3, #0
 8107afa:	d103      	bne.n	8107b04 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8107afc:	f06f 0303 	mvn.w	r3, #3
 8107b00:	61fb      	str	r3, [r7, #28]
 8107b02:	e011      	b.n	8107b28 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8107b04:	683a      	ldr	r2, [r7, #0]
 8107b06:	68b9      	ldr	r1, [r7, #8]
 8107b08:	69b8      	ldr	r0, [r7, #24]
 8107b0a:	f001 f9db 	bl	8108ec4 <xQueueReceive>
 8107b0e:	4603      	mov	r3, r0
 8107b10:	2b01      	cmp	r3, #1
 8107b12:	d009      	beq.n	8107b28 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8107b14:	683b      	ldr	r3, [r7, #0]
 8107b16:	2b00      	cmp	r3, #0
 8107b18:	d003      	beq.n	8107b22 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8107b1a:	f06f 0301 	mvn.w	r3, #1
 8107b1e:	61fb      	str	r3, [r7, #28]
 8107b20:	e002      	b.n	8107b28 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8107b22:	f06f 0302 	mvn.w	r3, #2
 8107b26:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8107b28:	69fb      	ldr	r3, [r7, #28]
}
 8107b2a:	4618      	mov	r0, r3
 8107b2c:	3720      	adds	r7, #32
 8107b2e:	46bd      	mov	sp, r7
 8107b30:	bd80      	pop	{r7, pc}
 8107b32:	bf00      	nop
 8107b34:	e000ed04 	.word	0xe000ed04

08107b38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8107b38:	b480      	push	{r7}
 8107b3a:	b085      	sub	sp, #20
 8107b3c:	af00      	add	r7, sp, #0
 8107b3e:	60f8      	str	r0, [r7, #12]
 8107b40:	60b9      	str	r1, [r7, #8]
 8107b42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8107b44:	68fb      	ldr	r3, [r7, #12]
 8107b46:	4a07      	ldr	r2, [pc, #28]	@ (8107b64 <vApplicationGetIdleTaskMemory+0x2c>)
 8107b48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8107b4a:	68bb      	ldr	r3, [r7, #8]
 8107b4c:	4a06      	ldr	r2, [pc, #24]	@ (8107b68 <vApplicationGetIdleTaskMemory+0x30>)
 8107b4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8107b50:	687b      	ldr	r3, [r7, #4]
 8107b52:	2280      	movs	r2, #128	@ 0x80
 8107b54:	601a      	str	r2, [r3, #0]
}
 8107b56:	bf00      	nop
 8107b58:	3714      	adds	r7, #20
 8107b5a:	46bd      	mov	sp, r7
 8107b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b60:	4770      	bx	lr
 8107b62:	bf00      	nop
 8107b64:	100002a4 	.word	0x100002a4
 8107b68:	1000034c 	.word	0x1000034c

08107b6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8107b6c:	b480      	push	{r7}
 8107b6e:	b085      	sub	sp, #20
 8107b70:	af00      	add	r7, sp, #0
 8107b72:	60f8      	str	r0, [r7, #12]
 8107b74:	60b9      	str	r1, [r7, #8]
 8107b76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8107b78:	68fb      	ldr	r3, [r7, #12]
 8107b7a:	4a07      	ldr	r2, [pc, #28]	@ (8107b98 <vApplicationGetTimerTaskMemory+0x2c>)
 8107b7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8107b7e:	68bb      	ldr	r3, [r7, #8]
 8107b80:	4a06      	ldr	r2, [pc, #24]	@ (8107b9c <vApplicationGetTimerTaskMemory+0x30>)
 8107b82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8107b84:	687b      	ldr	r3, [r7, #4]
 8107b86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8107b8a:	601a      	str	r2, [r3, #0]
}
 8107b8c:	bf00      	nop
 8107b8e:	3714      	adds	r7, #20
 8107b90:	46bd      	mov	sp, r7
 8107b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b96:	4770      	bx	lr
 8107b98:	1000054c 	.word	0x1000054c
 8107b9c:	100005f4 	.word	0x100005f4

08107ba0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8107ba0:	b580      	push	{r7, lr}
 8107ba2:	b08a      	sub	sp, #40	@ 0x28
 8107ba4:	af00      	add	r7, sp, #0
 8107ba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8107ba8:	2300      	movs	r3, #0
 8107baa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8107bac:	f002 fc60 	bl	810a470 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8107bb0:	4b5c      	ldr	r3, [pc, #368]	@ (8107d24 <pvPortMalloc+0x184>)
 8107bb2:	681b      	ldr	r3, [r3, #0]
 8107bb4:	2b00      	cmp	r3, #0
 8107bb6:	d101      	bne.n	8107bbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8107bb8:	f000 f924 	bl	8107e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8107bbc:	4b5a      	ldr	r3, [pc, #360]	@ (8107d28 <pvPortMalloc+0x188>)
 8107bbe:	681a      	ldr	r2, [r3, #0]
 8107bc0:	687b      	ldr	r3, [r7, #4]
 8107bc2:	4013      	ands	r3, r2
 8107bc4:	2b00      	cmp	r3, #0
 8107bc6:	f040 8095 	bne.w	8107cf4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8107bca:	687b      	ldr	r3, [r7, #4]
 8107bcc:	2b00      	cmp	r3, #0
 8107bce:	d01e      	beq.n	8107c0e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8107bd0:	2208      	movs	r2, #8
 8107bd2:	687b      	ldr	r3, [r7, #4]
 8107bd4:	4413      	add	r3, r2
 8107bd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8107bd8:	687b      	ldr	r3, [r7, #4]
 8107bda:	f003 0307 	and.w	r3, r3, #7
 8107bde:	2b00      	cmp	r3, #0
 8107be0:	d015      	beq.n	8107c0e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8107be2:	687b      	ldr	r3, [r7, #4]
 8107be4:	f023 0307 	bic.w	r3, r3, #7
 8107be8:	3308      	adds	r3, #8
 8107bea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8107bec:	687b      	ldr	r3, [r7, #4]
 8107bee:	f003 0307 	and.w	r3, r3, #7
 8107bf2:	2b00      	cmp	r3, #0
 8107bf4:	d00b      	beq.n	8107c0e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8107bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107bfa:	f383 8811 	msr	BASEPRI, r3
 8107bfe:	f3bf 8f6f 	isb	sy
 8107c02:	f3bf 8f4f 	dsb	sy
 8107c06:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8107c08:	bf00      	nop
 8107c0a:	bf00      	nop
 8107c0c:	e7fd      	b.n	8107c0a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8107c0e:	687b      	ldr	r3, [r7, #4]
 8107c10:	2b00      	cmp	r3, #0
 8107c12:	d06f      	beq.n	8107cf4 <pvPortMalloc+0x154>
 8107c14:	4b45      	ldr	r3, [pc, #276]	@ (8107d2c <pvPortMalloc+0x18c>)
 8107c16:	681b      	ldr	r3, [r3, #0]
 8107c18:	687a      	ldr	r2, [r7, #4]
 8107c1a:	429a      	cmp	r2, r3
 8107c1c:	d86a      	bhi.n	8107cf4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8107c1e:	4b44      	ldr	r3, [pc, #272]	@ (8107d30 <pvPortMalloc+0x190>)
 8107c20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8107c22:	4b43      	ldr	r3, [pc, #268]	@ (8107d30 <pvPortMalloc+0x190>)
 8107c24:	681b      	ldr	r3, [r3, #0]
 8107c26:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8107c28:	e004      	b.n	8107c34 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8107c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107c2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8107c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107c30:	681b      	ldr	r3, [r3, #0]
 8107c32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8107c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107c36:	685b      	ldr	r3, [r3, #4]
 8107c38:	687a      	ldr	r2, [r7, #4]
 8107c3a:	429a      	cmp	r2, r3
 8107c3c:	d903      	bls.n	8107c46 <pvPortMalloc+0xa6>
 8107c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107c40:	681b      	ldr	r3, [r3, #0]
 8107c42:	2b00      	cmp	r3, #0
 8107c44:	d1f1      	bne.n	8107c2a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8107c46:	4b37      	ldr	r3, [pc, #220]	@ (8107d24 <pvPortMalloc+0x184>)
 8107c48:	681b      	ldr	r3, [r3, #0]
 8107c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8107c4c:	429a      	cmp	r2, r3
 8107c4e:	d051      	beq.n	8107cf4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8107c50:	6a3b      	ldr	r3, [r7, #32]
 8107c52:	681b      	ldr	r3, [r3, #0]
 8107c54:	2208      	movs	r2, #8
 8107c56:	4413      	add	r3, r2
 8107c58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8107c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107c5c:	681a      	ldr	r2, [r3, #0]
 8107c5e:	6a3b      	ldr	r3, [r7, #32]
 8107c60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8107c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107c64:	685a      	ldr	r2, [r3, #4]
 8107c66:	687b      	ldr	r3, [r7, #4]
 8107c68:	1ad2      	subs	r2, r2, r3
 8107c6a:	2308      	movs	r3, #8
 8107c6c:	005b      	lsls	r3, r3, #1
 8107c6e:	429a      	cmp	r2, r3
 8107c70:	d920      	bls.n	8107cb4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8107c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8107c74:	687b      	ldr	r3, [r7, #4]
 8107c76:	4413      	add	r3, r2
 8107c78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8107c7a:	69bb      	ldr	r3, [r7, #24]
 8107c7c:	f003 0307 	and.w	r3, r3, #7
 8107c80:	2b00      	cmp	r3, #0
 8107c82:	d00b      	beq.n	8107c9c <pvPortMalloc+0xfc>
	__asm volatile
 8107c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107c88:	f383 8811 	msr	BASEPRI, r3
 8107c8c:	f3bf 8f6f 	isb	sy
 8107c90:	f3bf 8f4f 	dsb	sy
 8107c94:	613b      	str	r3, [r7, #16]
}
 8107c96:	bf00      	nop
 8107c98:	bf00      	nop
 8107c9a:	e7fd      	b.n	8107c98 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8107c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107c9e:	685a      	ldr	r2, [r3, #4]
 8107ca0:	687b      	ldr	r3, [r7, #4]
 8107ca2:	1ad2      	subs	r2, r2, r3
 8107ca4:	69bb      	ldr	r3, [r7, #24]
 8107ca6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8107ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107caa:	687a      	ldr	r2, [r7, #4]
 8107cac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8107cae:	69b8      	ldr	r0, [r7, #24]
 8107cb0:	f000 f90a 	bl	8107ec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8107cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8107d2c <pvPortMalloc+0x18c>)
 8107cb6:	681a      	ldr	r2, [r3, #0]
 8107cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107cba:	685b      	ldr	r3, [r3, #4]
 8107cbc:	1ad3      	subs	r3, r2, r3
 8107cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8107d2c <pvPortMalloc+0x18c>)
 8107cc0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8107cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8107d2c <pvPortMalloc+0x18c>)
 8107cc4:	681a      	ldr	r2, [r3, #0]
 8107cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8107d34 <pvPortMalloc+0x194>)
 8107cc8:	681b      	ldr	r3, [r3, #0]
 8107cca:	429a      	cmp	r2, r3
 8107ccc:	d203      	bcs.n	8107cd6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8107cce:	4b17      	ldr	r3, [pc, #92]	@ (8107d2c <pvPortMalloc+0x18c>)
 8107cd0:	681b      	ldr	r3, [r3, #0]
 8107cd2:	4a18      	ldr	r2, [pc, #96]	@ (8107d34 <pvPortMalloc+0x194>)
 8107cd4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8107cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107cd8:	685a      	ldr	r2, [r3, #4]
 8107cda:	4b13      	ldr	r3, [pc, #76]	@ (8107d28 <pvPortMalloc+0x188>)
 8107cdc:	681b      	ldr	r3, [r3, #0]
 8107cde:	431a      	orrs	r2, r3
 8107ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107ce2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8107ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107ce6:	2200      	movs	r2, #0
 8107ce8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8107cea:	4b13      	ldr	r3, [pc, #76]	@ (8107d38 <pvPortMalloc+0x198>)
 8107cec:	681b      	ldr	r3, [r3, #0]
 8107cee:	3301      	adds	r3, #1
 8107cf0:	4a11      	ldr	r2, [pc, #68]	@ (8107d38 <pvPortMalloc+0x198>)
 8107cf2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8107cf4:	f002 fbca 	bl	810a48c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8107cf8:	69fb      	ldr	r3, [r7, #28]
 8107cfa:	f003 0307 	and.w	r3, r3, #7
 8107cfe:	2b00      	cmp	r3, #0
 8107d00:	d00b      	beq.n	8107d1a <pvPortMalloc+0x17a>
	__asm volatile
 8107d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107d06:	f383 8811 	msr	BASEPRI, r3
 8107d0a:	f3bf 8f6f 	isb	sy
 8107d0e:	f3bf 8f4f 	dsb	sy
 8107d12:	60fb      	str	r3, [r7, #12]
}
 8107d14:	bf00      	nop
 8107d16:	bf00      	nop
 8107d18:	e7fd      	b.n	8107d16 <pvPortMalloc+0x176>
	return pvReturn;
 8107d1a:	69fb      	ldr	r3, [r7, #28]
}
 8107d1c:	4618      	mov	r0, r3
 8107d1e:	3728      	adds	r7, #40	@ 0x28
 8107d20:	46bd      	mov	sp, r7
 8107d22:	bd80      	pop	{r7, pc}
 8107d24:	100045fc 	.word	0x100045fc
 8107d28:	10004610 	.word	0x10004610
 8107d2c:	10004600 	.word	0x10004600
 8107d30:	100045f4 	.word	0x100045f4
 8107d34:	10004604 	.word	0x10004604
 8107d38:	10004608 	.word	0x10004608

08107d3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8107d3c:	b580      	push	{r7, lr}
 8107d3e:	b086      	sub	sp, #24
 8107d40:	af00      	add	r7, sp, #0
 8107d42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8107d44:	687b      	ldr	r3, [r7, #4]
 8107d46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8107d48:	687b      	ldr	r3, [r7, #4]
 8107d4a:	2b00      	cmp	r3, #0
 8107d4c:	d04f      	beq.n	8107dee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8107d4e:	2308      	movs	r3, #8
 8107d50:	425b      	negs	r3, r3
 8107d52:	697a      	ldr	r2, [r7, #20]
 8107d54:	4413      	add	r3, r2
 8107d56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8107d58:	697b      	ldr	r3, [r7, #20]
 8107d5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8107d5c:	693b      	ldr	r3, [r7, #16]
 8107d5e:	685a      	ldr	r2, [r3, #4]
 8107d60:	4b25      	ldr	r3, [pc, #148]	@ (8107df8 <vPortFree+0xbc>)
 8107d62:	681b      	ldr	r3, [r3, #0]
 8107d64:	4013      	ands	r3, r2
 8107d66:	2b00      	cmp	r3, #0
 8107d68:	d10b      	bne.n	8107d82 <vPortFree+0x46>
	__asm volatile
 8107d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107d6e:	f383 8811 	msr	BASEPRI, r3
 8107d72:	f3bf 8f6f 	isb	sy
 8107d76:	f3bf 8f4f 	dsb	sy
 8107d7a:	60fb      	str	r3, [r7, #12]
}
 8107d7c:	bf00      	nop
 8107d7e:	bf00      	nop
 8107d80:	e7fd      	b.n	8107d7e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8107d82:	693b      	ldr	r3, [r7, #16]
 8107d84:	681b      	ldr	r3, [r3, #0]
 8107d86:	2b00      	cmp	r3, #0
 8107d88:	d00b      	beq.n	8107da2 <vPortFree+0x66>
	__asm volatile
 8107d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107d8e:	f383 8811 	msr	BASEPRI, r3
 8107d92:	f3bf 8f6f 	isb	sy
 8107d96:	f3bf 8f4f 	dsb	sy
 8107d9a:	60bb      	str	r3, [r7, #8]
}
 8107d9c:	bf00      	nop
 8107d9e:	bf00      	nop
 8107da0:	e7fd      	b.n	8107d9e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8107da2:	693b      	ldr	r3, [r7, #16]
 8107da4:	685a      	ldr	r2, [r3, #4]
 8107da6:	4b14      	ldr	r3, [pc, #80]	@ (8107df8 <vPortFree+0xbc>)
 8107da8:	681b      	ldr	r3, [r3, #0]
 8107daa:	4013      	ands	r3, r2
 8107dac:	2b00      	cmp	r3, #0
 8107dae:	d01e      	beq.n	8107dee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8107db0:	693b      	ldr	r3, [r7, #16]
 8107db2:	681b      	ldr	r3, [r3, #0]
 8107db4:	2b00      	cmp	r3, #0
 8107db6:	d11a      	bne.n	8107dee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8107db8:	693b      	ldr	r3, [r7, #16]
 8107dba:	685a      	ldr	r2, [r3, #4]
 8107dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8107df8 <vPortFree+0xbc>)
 8107dbe:	681b      	ldr	r3, [r3, #0]
 8107dc0:	43db      	mvns	r3, r3
 8107dc2:	401a      	ands	r2, r3
 8107dc4:	693b      	ldr	r3, [r7, #16]
 8107dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8107dc8:	f002 fb52 	bl	810a470 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8107dcc:	693b      	ldr	r3, [r7, #16]
 8107dce:	685a      	ldr	r2, [r3, #4]
 8107dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8107dfc <vPortFree+0xc0>)
 8107dd2:	681b      	ldr	r3, [r3, #0]
 8107dd4:	4413      	add	r3, r2
 8107dd6:	4a09      	ldr	r2, [pc, #36]	@ (8107dfc <vPortFree+0xc0>)
 8107dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8107dda:	6938      	ldr	r0, [r7, #16]
 8107ddc:	f000 f874 	bl	8107ec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8107de0:	4b07      	ldr	r3, [pc, #28]	@ (8107e00 <vPortFree+0xc4>)
 8107de2:	681b      	ldr	r3, [r3, #0]
 8107de4:	3301      	adds	r3, #1
 8107de6:	4a06      	ldr	r2, [pc, #24]	@ (8107e00 <vPortFree+0xc4>)
 8107de8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8107dea:	f002 fb4f 	bl	810a48c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8107dee:	bf00      	nop
 8107df0:	3718      	adds	r7, #24
 8107df2:	46bd      	mov	sp, r7
 8107df4:	bd80      	pop	{r7, pc}
 8107df6:	bf00      	nop
 8107df8:	10004610 	.word	0x10004610
 8107dfc:	10004600 	.word	0x10004600
 8107e00:	1000460c 	.word	0x1000460c

08107e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8107e04:	b480      	push	{r7}
 8107e06:	b085      	sub	sp, #20
 8107e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8107e0a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8107e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8107e10:	4b27      	ldr	r3, [pc, #156]	@ (8107eb0 <prvHeapInit+0xac>)
 8107e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8107e14:	68fb      	ldr	r3, [r7, #12]
 8107e16:	f003 0307 	and.w	r3, r3, #7
 8107e1a:	2b00      	cmp	r3, #0
 8107e1c:	d00c      	beq.n	8107e38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8107e1e:	68fb      	ldr	r3, [r7, #12]
 8107e20:	3307      	adds	r3, #7
 8107e22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8107e24:	68fb      	ldr	r3, [r7, #12]
 8107e26:	f023 0307 	bic.w	r3, r3, #7
 8107e2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8107e2c:	68ba      	ldr	r2, [r7, #8]
 8107e2e:	68fb      	ldr	r3, [r7, #12]
 8107e30:	1ad3      	subs	r3, r2, r3
 8107e32:	4a1f      	ldr	r2, [pc, #124]	@ (8107eb0 <prvHeapInit+0xac>)
 8107e34:	4413      	add	r3, r2
 8107e36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8107e38:	68fb      	ldr	r3, [r7, #12]
 8107e3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8107e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8107eb4 <prvHeapInit+0xb0>)
 8107e3e:	687b      	ldr	r3, [r7, #4]
 8107e40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8107e42:	4b1c      	ldr	r3, [pc, #112]	@ (8107eb4 <prvHeapInit+0xb0>)
 8107e44:	2200      	movs	r2, #0
 8107e46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8107e48:	687b      	ldr	r3, [r7, #4]
 8107e4a:	68ba      	ldr	r2, [r7, #8]
 8107e4c:	4413      	add	r3, r2
 8107e4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8107e50:	2208      	movs	r2, #8
 8107e52:	68fb      	ldr	r3, [r7, #12]
 8107e54:	1a9b      	subs	r3, r3, r2
 8107e56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8107e58:	68fb      	ldr	r3, [r7, #12]
 8107e5a:	f023 0307 	bic.w	r3, r3, #7
 8107e5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8107e60:	68fb      	ldr	r3, [r7, #12]
 8107e62:	4a15      	ldr	r2, [pc, #84]	@ (8107eb8 <prvHeapInit+0xb4>)
 8107e64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8107e66:	4b14      	ldr	r3, [pc, #80]	@ (8107eb8 <prvHeapInit+0xb4>)
 8107e68:	681b      	ldr	r3, [r3, #0]
 8107e6a:	2200      	movs	r2, #0
 8107e6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8107e6e:	4b12      	ldr	r3, [pc, #72]	@ (8107eb8 <prvHeapInit+0xb4>)
 8107e70:	681b      	ldr	r3, [r3, #0]
 8107e72:	2200      	movs	r2, #0
 8107e74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8107e76:	687b      	ldr	r3, [r7, #4]
 8107e78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8107e7a:	683b      	ldr	r3, [r7, #0]
 8107e7c:	68fa      	ldr	r2, [r7, #12]
 8107e7e:	1ad2      	subs	r2, r2, r3
 8107e80:	683b      	ldr	r3, [r7, #0]
 8107e82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8107e84:	4b0c      	ldr	r3, [pc, #48]	@ (8107eb8 <prvHeapInit+0xb4>)
 8107e86:	681a      	ldr	r2, [r3, #0]
 8107e88:	683b      	ldr	r3, [r7, #0]
 8107e8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8107e8c:	683b      	ldr	r3, [r7, #0]
 8107e8e:	685b      	ldr	r3, [r3, #4]
 8107e90:	4a0a      	ldr	r2, [pc, #40]	@ (8107ebc <prvHeapInit+0xb8>)
 8107e92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8107e94:	683b      	ldr	r3, [r7, #0]
 8107e96:	685b      	ldr	r3, [r3, #4]
 8107e98:	4a09      	ldr	r2, [pc, #36]	@ (8107ec0 <prvHeapInit+0xbc>)
 8107e9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8107e9c:	4b09      	ldr	r3, [pc, #36]	@ (8107ec4 <prvHeapInit+0xc0>)
 8107e9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8107ea2:	601a      	str	r2, [r3, #0]
}
 8107ea4:	bf00      	nop
 8107ea6:	3714      	adds	r7, #20
 8107ea8:	46bd      	mov	sp, r7
 8107eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107eae:	4770      	bx	lr
 8107eb0:	100009f4 	.word	0x100009f4
 8107eb4:	100045f4 	.word	0x100045f4
 8107eb8:	100045fc 	.word	0x100045fc
 8107ebc:	10004604 	.word	0x10004604
 8107ec0:	10004600 	.word	0x10004600
 8107ec4:	10004610 	.word	0x10004610

08107ec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8107ec8:	b480      	push	{r7}
 8107eca:	b085      	sub	sp, #20
 8107ecc:	af00      	add	r7, sp, #0
 8107ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8107ed0:	4b28      	ldr	r3, [pc, #160]	@ (8107f74 <prvInsertBlockIntoFreeList+0xac>)
 8107ed2:	60fb      	str	r3, [r7, #12]
 8107ed4:	e002      	b.n	8107edc <prvInsertBlockIntoFreeList+0x14>
 8107ed6:	68fb      	ldr	r3, [r7, #12]
 8107ed8:	681b      	ldr	r3, [r3, #0]
 8107eda:	60fb      	str	r3, [r7, #12]
 8107edc:	68fb      	ldr	r3, [r7, #12]
 8107ede:	681b      	ldr	r3, [r3, #0]
 8107ee0:	687a      	ldr	r2, [r7, #4]
 8107ee2:	429a      	cmp	r2, r3
 8107ee4:	d8f7      	bhi.n	8107ed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8107ee6:	68fb      	ldr	r3, [r7, #12]
 8107ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8107eea:	68fb      	ldr	r3, [r7, #12]
 8107eec:	685b      	ldr	r3, [r3, #4]
 8107eee:	68ba      	ldr	r2, [r7, #8]
 8107ef0:	4413      	add	r3, r2
 8107ef2:	687a      	ldr	r2, [r7, #4]
 8107ef4:	429a      	cmp	r2, r3
 8107ef6:	d108      	bne.n	8107f0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8107ef8:	68fb      	ldr	r3, [r7, #12]
 8107efa:	685a      	ldr	r2, [r3, #4]
 8107efc:	687b      	ldr	r3, [r7, #4]
 8107efe:	685b      	ldr	r3, [r3, #4]
 8107f00:	441a      	add	r2, r3
 8107f02:	68fb      	ldr	r3, [r7, #12]
 8107f04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8107f06:	68fb      	ldr	r3, [r7, #12]
 8107f08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8107f0a:	687b      	ldr	r3, [r7, #4]
 8107f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8107f0e:	687b      	ldr	r3, [r7, #4]
 8107f10:	685b      	ldr	r3, [r3, #4]
 8107f12:	68ba      	ldr	r2, [r7, #8]
 8107f14:	441a      	add	r2, r3
 8107f16:	68fb      	ldr	r3, [r7, #12]
 8107f18:	681b      	ldr	r3, [r3, #0]
 8107f1a:	429a      	cmp	r2, r3
 8107f1c:	d118      	bne.n	8107f50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8107f1e:	68fb      	ldr	r3, [r7, #12]
 8107f20:	681a      	ldr	r2, [r3, #0]
 8107f22:	4b15      	ldr	r3, [pc, #84]	@ (8107f78 <prvInsertBlockIntoFreeList+0xb0>)
 8107f24:	681b      	ldr	r3, [r3, #0]
 8107f26:	429a      	cmp	r2, r3
 8107f28:	d00d      	beq.n	8107f46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8107f2a:	687b      	ldr	r3, [r7, #4]
 8107f2c:	685a      	ldr	r2, [r3, #4]
 8107f2e:	68fb      	ldr	r3, [r7, #12]
 8107f30:	681b      	ldr	r3, [r3, #0]
 8107f32:	685b      	ldr	r3, [r3, #4]
 8107f34:	441a      	add	r2, r3
 8107f36:	687b      	ldr	r3, [r7, #4]
 8107f38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8107f3a:	68fb      	ldr	r3, [r7, #12]
 8107f3c:	681b      	ldr	r3, [r3, #0]
 8107f3e:	681a      	ldr	r2, [r3, #0]
 8107f40:	687b      	ldr	r3, [r7, #4]
 8107f42:	601a      	str	r2, [r3, #0]
 8107f44:	e008      	b.n	8107f58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8107f46:	4b0c      	ldr	r3, [pc, #48]	@ (8107f78 <prvInsertBlockIntoFreeList+0xb0>)
 8107f48:	681a      	ldr	r2, [r3, #0]
 8107f4a:	687b      	ldr	r3, [r7, #4]
 8107f4c:	601a      	str	r2, [r3, #0]
 8107f4e:	e003      	b.n	8107f58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8107f50:	68fb      	ldr	r3, [r7, #12]
 8107f52:	681a      	ldr	r2, [r3, #0]
 8107f54:	687b      	ldr	r3, [r7, #4]
 8107f56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8107f58:	68fa      	ldr	r2, [r7, #12]
 8107f5a:	687b      	ldr	r3, [r7, #4]
 8107f5c:	429a      	cmp	r2, r3
 8107f5e:	d002      	beq.n	8107f66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8107f60:	68fb      	ldr	r3, [r7, #12]
 8107f62:	687a      	ldr	r2, [r7, #4]
 8107f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8107f66:	bf00      	nop
 8107f68:	3714      	adds	r7, #20
 8107f6a:	46bd      	mov	sp, r7
 8107f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f70:	4770      	bx	lr
 8107f72:	bf00      	nop
 8107f74:	100045f4 	.word	0x100045f4
 8107f78:	100045fc 	.word	0x100045fc

08107f7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8107f7c:	b480      	push	{r7}
 8107f7e:	b083      	sub	sp, #12
 8107f80:	af00      	add	r7, sp, #0
 8107f82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8107f84:	687b      	ldr	r3, [r7, #4]
 8107f86:	f103 0208 	add.w	r2, r3, #8
 8107f8a:	687b      	ldr	r3, [r7, #4]
 8107f8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8107f8e:	687b      	ldr	r3, [r7, #4]
 8107f90:	f04f 32ff 	mov.w	r2, #4294967295
 8107f94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8107f96:	687b      	ldr	r3, [r7, #4]
 8107f98:	f103 0208 	add.w	r2, r3, #8
 8107f9c:	687b      	ldr	r3, [r7, #4]
 8107f9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8107fa0:	687b      	ldr	r3, [r7, #4]
 8107fa2:	f103 0208 	add.w	r2, r3, #8
 8107fa6:	687b      	ldr	r3, [r7, #4]
 8107fa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8107faa:	687b      	ldr	r3, [r7, #4]
 8107fac:	2200      	movs	r2, #0
 8107fae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8107fb0:	bf00      	nop
 8107fb2:	370c      	adds	r7, #12
 8107fb4:	46bd      	mov	sp, r7
 8107fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fba:	4770      	bx	lr

08107fbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8107fbc:	b480      	push	{r7}
 8107fbe:	b083      	sub	sp, #12
 8107fc0:	af00      	add	r7, sp, #0
 8107fc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8107fc4:	687b      	ldr	r3, [r7, #4]
 8107fc6:	2200      	movs	r2, #0
 8107fc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8107fca:	bf00      	nop
 8107fcc:	370c      	adds	r7, #12
 8107fce:	46bd      	mov	sp, r7
 8107fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fd4:	4770      	bx	lr

08107fd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8107fd6:	b480      	push	{r7}
 8107fd8:	b085      	sub	sp, #20
 8107fda:	af00      	add	r7, sp, #0
 8107fdc:	6078      	str	r0, [r7, #4]
 8107fde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8107fe0:	687b      	ldr	r3, [r7, #4]
 8107fe2:	685b      	ldr	r3, [r3, #4]
 8107fe4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8107fe6:	683b      	ldr	r3, [r7, #0]
 8107fe8:	68fa      	ldr	r2, [r7, #12]
 8107fea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8107fec:	68fb      	ldr	r3, [r7, #12]
 8107fee:	689a      	ldr	r2, [r3, #8]
 8107ff0:	683b      	ldr	r3, [r7, #0]
 8107ff2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8107ff4:	68fb      	ldr	r3, [r7, #12]
 8107ff6:	689b      	ldr	r3, [r3, #8]
 8107ff8:	683a      	ldr	r2, [r7, #0]
 8107ffa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8107ffc:	68fb      	ldr	r3, [r7, #12]
 8107ffe:	683a      	ldr	r2, [r7, #0]
 8108000:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8108002:	683b      	ldr	r3, [r7, #0]
 8108004:	687a      	ldr	r2, [r7, #4]
 8108006:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8108008:	687b      	ldr	r3, [r7, #4]
 810800a:	681b      	ldr	r3, [r3, #0]
 810800c:	1c5a      	adds	r2, r3, #1
 810800e:	687b      	ldr	r3, [r7, #4]
 8108010:	601a      	str	r2, [r3, #0]
}
 8108012:	bf00      	nop
 8108014:	3714      	adds	r7, #20
 8108016:	46bd      	mov	sp, r7
 8108018:	f85d 7b04 	ldr.w	r7, [sp], #4
 810801c:	4770      	bx	lr

0810801e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810801e:	b480      	push	{r7}
 8108020:	b085      	sub	sp, #20
 8108022:	af00      	add	r7, sp, #0
 8108024:	6078      	str	r0, [r7, #4]
 8108026:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8108028:	683b      	ldr	r3, [r7, #0]
 810802a:	681b      	ldr	r3, [r3, #0]
 810802c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810802e:	68bb      	ldr	r3, [r7, #8]
 8108030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108034:	d103      	bne.n	810803e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8108036:	687b      	ldr	r3, [r7, #4]
 8108038:	691b      	ldr	r3, [r3, #16]
 810803a:	60fb      	str	r3, [r7, #12]
 810803c:	e00c      	b.n	8108058 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810803e:	687b      	ldr	r3, [r7, #4]
 8108040:	3308      	adds	r3, #8
 8108042:	60fb      	str	r3, [r7, #12]
 8108044:	e002      	b.n	810804c <vListInsert+0x2e>
 8108046:	68fb      	ldr	r3, [r7, #12]
 8108048:	685b      	ldr	r3, [r3, #4]
 810804a:	60fb      	str	r3, [r7, #12]
 810804c:	68fb      	ldr	r3, [r7, #12]
 810804e:	685b      	ldr	r3, [r3, #4]
 8108050:	681b      	ldr	r3, [r3, #0]
 8108052:	68ba      	ldr	r2, [r7, #8]
 8108054:	429a      	cmp	r2, r3
 8108056:	d2f6      	bcs.n	8108046 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8108058:	68fb      	ldr	r3, [r7, #12]
 810805a:	685a      	ldr	r2, [r3, #4]
 810805c:	683b      	ldr	r3, [r7, #0]
 810805e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8108060:	683b      	ldr	r3, [r7, #0]
 8108062:	685b      	ldr	r3, [r3, #4]
 8108064:	683a      	ldr	r2, [r7, #0]
 8108066:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8108068:	683b      	ldr	r3, [r7, #0]
 810806a:	68fa      	ldr	r2, [r7, #12]
 810806c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810806e:	68fb      	ldr	r3, [r7, #12]
 8108070:	683a      	ldr	r2, [r7, #0]
 8108072:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8108074:	683b      	ldr	r3, [r7, #0]
 8108076:	687a      	ldr	r2, [r7, #4]
 8108078:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810807a:	687b      	ldr	r3, [r7, #4]
 810807c:	681b      	ldr	r3, [r3, #0]
 810807e:	1c5a      	adds	r2, r3, #1
 8108080:	687b      	ldr	r3, [r7, #4]
 8108082:	601a      	str	r2, [r3, #0]
}
 8108084:	bf00      	nop
 8108086:	3714      	adds	r7, #20
 8108088:	46bd      	mov	sp, r7
 810808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810808e:	4770      	bx	lr

08108090 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8108090:	b480      	push	{r7}
 8108092:	b085      	sub	sp, #20
 8108094:	af00      	add	r7, sp, #0
 8108096:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8108098:	687b      	ldr	r3, [r7, #4]
 810809a:	691b      	ldr	r3, [r3, #16]
 810809c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810809e:	687b      	ldr	r3, [r7, #4]
 81080a0:	685b      	ldr	r3, [r3, #4]
 81080a2:	687a      	ldr	r2, [r7, #4]
 81080a4:	6892      	ldr	r2, [r2, #8]
 81080a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 81080a8:	687b      	ldr	r3, [r7, #4]
 81080aa:	689b      	ldr	r3, [r3, #8]
 81080ac:	687a      	ldr	r2, [r7, #4]
 81080ae:	6852      	ldr	r2, [r2, #4]
 81080b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 81080b2:	68fb      	ldr	r3, [r7, #12]
 81080b4:	685b      	ldr	r3, [r3, #4]
 81080b6:	687a      	ldr	r2, [r7, #4]
 81080b8:	429a      	cmp	r2, r3
 81080ba:	d103      	bne.n	81080c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81080bc:	687b      	ldr	r3, [r7, #4]
 81080be:	689a      	ldr	r2, [r3, #8]
 81080c0:	68fb      	ldr	r3, [r7, #12]
 81080c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81080c4:	687b      	ldr	r3, [r7, #4]
 81080c6:	2200      	movs	r2, #0
 81080c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81080ca:	68fb      	ldr	r3, [r7, #12]
 81080cc:	681b      	ldr	r3, [r3, #0]
 81080ce:	1e5a      	subs	r2, r3, #1
 81080d0:	68fb      	ldr	r3, [r7, #12]
 81080d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81080d4:	68fb      	ldr	r3, [r7, #12]
 81080d6:	681b      	ldr	r3, [r3, #0]
}
 81080d8:	4618      	mov	r0, r3
 81080da:	3714      	adds	r7, #20
 81080dc:	46bd      	mov	sp, r7
 81080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080e2:	4770      	bx	lr

081080e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81080e4:	b480      	push	{r7}
 81080e6:	b085      	sub	sp, #20
 81080e8:	af00      	add	r7, sp, #0
 81080ea:	60f8      	str	r0, [r7, #12]
 81080ec:	60b9      	str	r1, [r7, #8]
 81080ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81080f0:	68fb      	ldr	r3, [r7, #12]
 81080f2:	3b04      	subs	r3, #4
 81080f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81080f6:	68fb      	ldr	r3, [r7, #12]
 81080f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 81080fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81080fe:	68fb      	ldr	r3, [r7, #12]
 8108100:	3b04      	subs	r3, #4
 8108102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8108104:	68bb      	ldr	r3, [r7, #8]
 8108106:	f023 0201 	bic.w	r2, r3, #1
 810810a:	68fb      	ldr	r3, [r7, #12]
 810810c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810810e:	68fb      	ldr	r3, [r7, #12]
 8108110:	3b04      	subs	r3, #4
 8108112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8108114:	4a0c      	ldr	r2, [pc, #48]	@ (8108148 <pxPortInitialiseStack+0x64>)
 8108116:	68fb      	ldr	r3, [r7, #12]
 8108118:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810811a:	68fb      	ldr	r3, [r7, #12]
 810811c:	3b14      	subs	r3, #20
 810811e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8108120:	687a      	ldr	r2, [r7, #4]
 8108122:	68fb      	ldr	r3, [r7, #12]
 8108124:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8108126:	68fb      	ldr	r3, [r7, #12]
 8108128:	3b04      	subs	r3, #4
 810812a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810812c:	68fb      	ldr	r3, [r7, #12]
 810812e:	f06f 0202 	mvn.w	r2, #2
 8108132:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8108134:	68fb      	ldr	r3, [r7, #12]
 8108136:	3b20      	subs	r3, #32
 8108138:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810813a:	68fb      	ldr	r3, [r7, #12]
}
 810813c:	4618      	mov	r0, r3
 810813e:	3714      	adds	r7, #20
 8108140:	46bd      	mov	sp, r7
 8108142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108146:	4770      	bx	lr
 8108148:	0810814d 	.word	0x0810814d

0810814c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810814c:	b480      	push	{r7}
 810814e:	b085      	sub	sp, #20
 8108150:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8108152:	2300      	movs	r3, #0
 8108154:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8108156:	4b13      	ldr	r3, [pc, #76]	@ (81081a4 <prvTaskExitError+0x58>)
 8108158:	681b      	ldr	r3, [r3, #0]
 810815a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810815e:	d00b      	beq.n	8108178 <prvTaskExitError+0x2c>
	__asm volatile
 8108160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108164:	f383 8811 	msr	BASEPRI, r3
 8108168:	f3bf 8f6f 	isb	sy
 810816c:	f3bf 8f4f 	dsb	sy
 8108170:	60fb      	str	r3, [r7, #12]
}
 8108172:	bf00      	nop
 8108174:	bf00      	nop
 8108176:	e7fd      	b.n	8108174 <prvTaskExitError+0x28>
	__asm volatile
 8108178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810817c:	f383 8811 	msr	BASEPRI, r3
 8108180:	f3bf 8f6f 	isb	sy
 8108184:	f3bf 8f4f 	dsb	sy
 8108188:	60bb      	str	r3, [r7, #8]
}
 810818a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810818c:	bf00      	nop
 810818e:	687b      	ldr	r3, [r7, #4]
 8108190:	2b00      	cmp	r3, #0
 8108192:	d0fc      	beq.n	810818e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8108194:	bf00      	nop
 8108196:	bf00      	nop
 8108198:	3714      	adds	r7, #20
 810819a:	46bd      	mov	sp, r7
 810819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081a0:	4770      	bx	lr
 81081a2:	bf00      	nop
 81081a4:	10000024 	.word	0x10000024
	...

081081b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 81081b0:	4b07      	ldr	r3, [pc, #28]	@ (81081d0 <pxCurrentTCBConst2>)
 81081b2:	6819      	ldr	r1, [r3, #0]
 81081b4:	6808      	ldr	r0, [r1, #0]
 81081b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81081ba:	f380 8809 	msr	PSP, r0
 81081be:	f3bf 8f6f 	isb	sy
 81081c2:	f04f 0000 	mov.w	r0, #0
 81081c6:	f380 8811 	msr	BASEPRI, r0
 81081ca:	4770      	bx	lr
 81081cc:	f3af 8000 	nop.w

081081d0 <pxCurrentTCBConst2>:
 81081d0:	1000465c 	.word	0x1000465c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81081d4:	bf00      	nop
 81081d6:	bf00      	nop

081081d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 81081d8:	4808      	ldr	r0, [pc, #32]	@ (81081fc <prvPortStartFirstTask+0x24>)
 81081da:	6800      	ldr	r0, [r0, #0]
 81081dc:	6800      	ldr	r0, [r0, #0]
 81081de:	f380 8808 	msr	MSP, r0
 81081e2:	f04f 0000 	mov.w	r0, #0
 81081e6:	f380 8814 	msr	CONTROL, r0
 81081ea:	b662      	cpsie	i
 81081ec:	b661      	cpsie	f
 81081ee:	f3bf 8f4f 	dsb	sy
 81081f2:	f3bf 8f6f 	isb	sy
 81081f6:	df00      	svc	0
 81081f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81081fa:	bf00      	nop
 81081fc:	e000ed08 	.word	0xe000ed08

08108200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8108200:	b580      	push	{r7, lr}
 8108202:	b086      	sub	sp, #24
 8108204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8108206:	4b47      	ldr	r3, [pc, #284]	@ (8108324 <xPortStartScheduler+0x124>)
 8108208:	681b      	ldr	r3, [r3, #0]
 810820a:	4a47      	ldr	r2, [pc, #284]	@ (8108328 <xPortStartScheduler+0x128>)
 810820c:	4293      	cmp	r3, r2
 810820e:	d10b      	bne.n	8108228 <xPortStartScheduler+0x28>
	__asm volatile
 8108210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108214:	f383 8811 	msr	BASEPRI, r3
 8108218:	f3bf 8f6f 	isb	sy
 810821c:	f3bf 8f4f 	dsb	sy
 8108220:	613b      	str	r3, [r7, #16]
}
 8108222:	bf00      	nop
 8108224:	bf00      	nop
 8108226:	e7fd      	b.n	8108224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8108228:	4b3e      	ldr	r3, [pc, #248]	@ (8108324 <xPortStartScheduler+0x124>)
 810822a:	681b      	ldr	r3, [r3, #0]
 810822c:	4a3f      	ldr	r2, [pc, #252]	@ (810832c <xPortStartScheduler+0x12c>)
 810822e:	4293      	cmp	r3, r2
 8108230:	d10b      	bne.n	810824a <xPortStartScheduler+0x4a>
	__asm volatile
 8108232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108236:	f383 8811 	msr	BASEPRI, r3
 810823a:	f3bf 8f6f 	isb	sy
 810823e:	f3bf 8f4f 	dsb	sy
 8108242:	60fb      	str	r3, [r7, #12]
}
 8108244:	bf00      	nop
 8108246:	bf00      	nop
 8108248:	e7fd      	b.n	8108246 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810824a:	4b39      	ldr	r3, [pc, #228]	@ (8108330 <xPortStartScheduler+0x130>)
 810824c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810824e:	697b      	ldr	r3, [r7, #20]
 8108250:	781b      	ldrb	r3, [r3, #0]
 8108252:	b2db      	uxtb	r3, r3
 8108254:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8108256:	697b      	ldr	r3, [r7, #20]
 8108258:	22ff      	movs	r2, #255	@ 0xff
 810825a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810825c:	697b      	ldr	r3, [r7, #20]
 810825e:	781b      	ldrb	r3, [r3, #0]
 8108260:	b2db      	uxtb	r3, r3
 8108262:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8108264:	78fb      	ldrb	r3, [r7, #3]
 8108266:	b2db      	uxtb	r3, r3
 8108268:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810826c:	b2da      	uxtb	r2, r3
 810826e:	4b31      	ldr	r3, [pc, #196]	@ (8108334 <xPortStartScheduler+0x134>)
 8108270:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8108272:	4b31      	ldr	r3, [pc, #196]	@ (8108338 <xPortStartScheduler+0x138>)
 8108274:	2207      	movs	r2, #7
 8108276:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8108278:	e009      	b.n	810828e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810827a:	4b2f      	ldr	r3, [pc, #188]	@ (8108338 <xPortStartScheduler+0x138>)
 810827c:	681b      	ldr	r3, [r3, #0]
 810827e:	3b01      	subs	r3, #1
 8108280:	4a2d      	ldr	r2, [pc, #180]	@ (8108338 <xPortStartScheduler+0x138>)
 8108282:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8108284:	78fb      	ldrb	r3, [r7, #3]
 8108286:	b2db      	uxtb	r3, r3
 8108288:	005b      	lsls	r3, r3, #1
 810828a:	b2db      	uxtb	r3, r3
 810828c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810828e:	78fb      	ldrb	r3, [r7, #3]
 8108290:	b2db      	uxtb	r3, r3
 8108292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108296:	2b80      	cmp	r3, #128	@ 0x80
 8108298:	d0ef      	beq.n	810827a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810829a:	4b27      	ldr	r3, [pc, #156]	@ (8108338 <xPortStartScheduler+0x138>)
 810829c:	681b      	ldr	r3, [r3, #0]
 810829e:	f1c3 0307 	rsb	r3, r3, #7
 81082a2:	2b04      	cmp	r3, #4
 81082a4:	d00b      	beq.n	81082be <xPortStartScheduler+0xbe>
	__asm volatile
 81082a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81082aa:	f383 8811 	msr	BASEPRI, r3
 81082ae:	f3bf 8f6f 	isb	sy
 81082b2:	f3bf 8f4f 	dsb	sy
 81082b6:	60bb      	str	r3, [r7, #8]
}
 81082b8:	bf00      	nop
 81082ba:	bf00      	nop
 81082bc:	e7fd      	b.n	81082ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 81082be:	4b1e      	ldr	r3, [pc, #120]	@ (8108338 <xPortStartScheduler+0x138>)
 81082c0:	681b      	ldr	r3, [r3, #0]
 81082c2:	021b      	lsls	r3, r3, #8
 81082c4:	4a1c      	ldr	r2, [pc, #112]	@ (8108338 <xPortStartScheduler+0x138>)
 81082c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 81082c8:	4b1b      	ldr	r3, [pc, #108]	@ (8108338 <xPortStartScheduler+0x138>)
 81082ca:	681b      	ldr	r3, [r3, #0]
 81082cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 81082d0:	4a19      	ldr	r2, [pc, #100]	@ (8108338 <xPortStartScheduler+0x138>)
 81082d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 81082d4:	687b      	ldr	r3, [r7, #4]
 81082d6:	b2da      	uxtb	r2, r3
 81082d8:	697b      	ldr	r3, [r7, #20]
 81082da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 81082dc:	4b17      	ldr	r3, [pc, #92]	@ (810833c <xPortStartScheduler+0x13c>)
 81082de:	681b      	ldr	r3, [r3, #0]
 81082e0:	4a16      	ldr	r2, [pc, #88]	@ (810833c <xPortStartScheduler+0x13c>)
 81082e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81082e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 81082e8:	4b14      	ldr	r3, [pc, #80]	@ (810833c <xPortStartScheduler+0x13c>)
 81082ea:	681b      	ldr	r3, [r3, #0]
 81082ec:	4a13      	ldr	r2, [pc, #76]	@ (810833c <xPortStartScheduler+0x13c>)
 81082ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 81082f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81082f4:	f000 f8da 	bl	81084ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81082f8:	4b11      	ldr	r3, [pc, #68]	@ (8108340 <xPortStartScheduler+0x140>)
 81082fa:	2200      	movs	r2, #0
 81082fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81082fe:	f000 f8f9 	bl	81084f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8108302:	4b10      	ldr	r3, [pc, #64]	@ (8108344 <xPortStartScheduler+0x144>)
 8108304:	681b      	ldr	r3, [r3, #0]
 8108306:	4a0f      	ldr	r2, [pc, #60]	@ (8108344 <xPortStartScheduler+0x144>)
 8108308:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 810830c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810830e:	f7ff ff63 	bl	81081d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8108312:	f002 fa35 	bl	810a780 <vTaskSwitchContext>
	prvTaskExitError();
 8108316:	f7ff ff19 	bl	810814c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810831a:	2300      	movs	r3, #0
}
 810831c:	4618      	mov	r0, r3
 810831e:	3718      	adds	r7, #24
 8108320:	46bd      	mov	sp, r7
 8108322:	bd80      	pop	{r7, pc}
 8108324:	e000ed00 	.word	0xe000ed00
 8108328:	410fc271 	.word	0x410fc271
 810832c:	410fc270 	.word	0x410fc270
 8108330:	e000e400 	.word	0xe000e400
 8108334:	10004614 	.word	0x10004614
 8108338:	10004618 	.word	0x10004618
 810833c:	e000ed20 	.word	0xe000ed20
 8108340:	10000024 	.word	0x10000024
 8108344:	e000ef34 	.word	0xe000ef34

08108348 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8108348:	b480      	push	{r7}
 810834a:	b083      	sub	sp, #12
 810834c:	af00      	add	r7, sp, #0
	__asm volatile
 810834e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108352:	f383 8811 	msr	BASEPRI, r3
 8108356:	f3bf 8f6f 	isb	sy
 810835a:	f3bf 8f4f 	dsb	sy
 810835e:	607b      	str	r3, [r7, #4]
}
 8108360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8108362:	4b10      	ldr	r3, [pc, #64]	@ (81083a4 <vPortEnterCritical+0x5c>)
 8108364:	681b      	ldr	r3, [r3, #0]
 8108366:	3301      	adds	r3, #1
 8108368:	4a0e      	ldr	r2, [pc, #56]	@ (81083a4 <vPortEnterCritical+0x5c>)
 810836a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810836c:	4b0d      	ldr	r3, [pc, #52]	@ (81083a4 <vPortEnterCritical+0x5c>)
 810836e:	681b      	ldr	r3, [r3, #0]
 8108370:	2b01      	cmp	r3, #1
 8108372:	d110      	bne.n	8108396 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8108374:	4b0c      	ldr	r3, [pc, #48]	@ (81083a8 <vPortEnterCritical+0x60>)
 8108376:	681b      	ldr	r3, [r3, #0]
 8108378:	b2db      	uxtb	r3, r3
 810837a:	2b00      	cmp	r3, #0
 810837c:	d00b      	beq.n	8108396 <vPortEnterCritical+0x4e>
	__asm volatile
 810837e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108382:	f383 8811 	msr	BASEPRI, r3
 8108386:	f3bf 8f6f 	isb	sy
 810838a:	f3bf 8f4f 	dsb	sy
 810838e:	603b      	str	r3, [r7, #0]
}
 8108390:	bf00      	nop
 8108392:	bf00      	nop
 8108394:	e7fd      	b.n	8108392 <vPortEnterCritical+0x4a>
	}
}
 8108396:	bf00      	nop
 8108398:	370c      	adds	r7, #12
 810839a:	46bd      	mov	sp, r7
 810839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083a0:	4770      	bx	lr
 81083a2:	bf00      	nop
 81083a4:	10000024 	.word	0x10000024
 81083a8:	e000ed04 	.word	0xe000ed04

081083ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 81083ac:	b480      	push	{r7}
 81083ae:	b083      	sub	sp, #12
 81083b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 81083b2:	4b12      	ldr	r3, [pc, #72]	@ (81083fc <vPortExitCritical+0x50>)
 81083b4:	681b      	ldr	r3, [r3, #0]
 81083b6:	2b00      	cmp	r3, #0
 81083b8:	d10b      	bne.n	81083d2 <vPortExitCritical+0x26>
	__asm volatile
 81083ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81083be:	f383 8811 	msr	BASEPRI, r3
 81083c2:	f3bf 8f6f 	isb	sy
 81083c6:	f3bf 8f4f 	dsb	sy
 81083ca:	607b      	str	r3, [r7, #4]
}
 81083cc:	bf00      	nop
 81083ce:	bf00      	nop
 81083d0:	e7fd      	b.n	81083ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 81083d2:	4b0a      	ldr	r3, [pc, #40]	@ (81083fc <vPortExitCritical+0x50>)
 81083d4:	681b      	ldr	r3, [r3, #0]
 81083d6:	3b01      	subs	r3, #1
 81083d8:	4a08      	ldr	r2, [pc, #32]	@ (81083fc <vPortExitCritical+0x50>)
 81083da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 81083dc:	4b07      	ldr	r3, [pc, #28]	@ (81083fc <vPortExitCritical+0x50>)
 81083de:	681b      	ldr	r3, [r3, #0]
 81083e0:	2b00      	cmp	r3, #0
 81083e2:	d105      	bne.n	81083f0 <vPortExitCritical+0x44>
 81083e4:	2300      	movs	r3, #0
 81083e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81083e8:	683b      	ldr	r3, [r7, #0]
 81083ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 81083ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 81083f0:	bf00      	nop
 81083f2:	370c      	adds	r7, #12
 81083f4:	46bd      	mov	sp, r7
 81083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083fa:	4770      	bx	lr
 81083fc:	10000024 	.word	0x10000024

08108400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8108400:	f3ef 8009 	mrs	r0, PSP
 8108404:	f3bf 8f6f 	isb	sy
 8108408:	4b15      	ldr	r3, [pc, #84]	@ (8108460 <pxCurrentTCBConst>)
 810840a:	681a      	ldr	r2, [r3, #0]
 810840c:	f01e 0f10 	tst.w	lr, #16
 8108410:	bf08      	it	eq
 8108412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8108416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810841a:	6010      	str	r0, [r2, #0]
 810841c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8108420:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8108424:	f380 8811 	msr	BASEPRI, r0
 8108428:	f3bf 8f4f 	dsb	sy
 810842c:	f3bf 8f6f 	isb	sy
 8108430:	f002 f9a6 	bl	810a780 <vTaskSwitchContext>
 8108434:	f04f 0000 	mov.w	r0, #0
 8108438:	f380 8811 	msr	BASEPRI, r0
 810843c:	bc09      	pop	{r0, r3}
 810843e:	6819      	ldr	r1, [r3, #0]
 8108440:	6808      	ldr	r0, [r1, #0]
 8108442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108446:	f01e 0f10 	tst.w	lr, #16
 810844a:	bf08      	it	eq
 810844c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8108450:	f380 8809 	msr	PSP, r0
 8108454:	f3bf 8f6f 	isb	sy
 8108458:	4770      	bx	lr
 810845a:	bf00      	nop
 810845c:	f3af 8000 	nop.w

08108460 <pxCurrentTCBConst>:
 8108460:	1000465c 	.word	0x1000465c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8108464:	bf00      	nop
 8108466:	bf00      	nop

08108468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8108468:	b580      	push	{r7, lr}
 810846a:	b082      	sub	sp, #8
 810846c:	af00      	add	r7, sp, #0
	__asm volatile
 810846e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108472:	f383 8811 	msr	BASEPRI, r3
 8108476:	f3bf 8f6f 	isb	sy
 810847a:	f3bf 8f4f 	dsb	sy
 810847e:	607b      	str	r3, [r7, #4]
}
 8108480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8108482:	f002 f8c3 	bl	810a60c <xTaskIncrementTick>
 8108486:	4603      	mov	r3, r0
 8108488:	2b00      	cmp	r3, #0
 810848a:	d003      	beq.n	8108494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810848c:	4b06      	ldr	r3, [pc, #24]	@ (81084a8 <xPortSysTickHandler+0x40>)
 810848e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8108492:	601a      	str	r2, [r3, #0]
 8108494:	2300      	movs	r3, #0
 8108496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8108498:	683b      	ldr	r3, [r7, #0]
 810849a:	f383 8811 	msr	BASEPRI, r3
}
 810849e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 81084a0:	bf00      	nop
 81084a2:	3708      	adds	r7, #8
 81084a4:	46bd      	mov	sp, r7
 81084a6:	bd80      	pop	{r7, pc}
 81084a8:	e000ed04 	.word	0xe000ed04

081084ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 81084ac:	b480      	push	{r7}
 81084ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 81084b0:	4b0b      	ldr	r3, [pc, #44]	@ (81084e0 <vPortSetupTimerInterrupt+0x34>)
 81084b2:	2200      	movs	r2, #0
 81084b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 81084b6:	4b0b      	ldr	r3, [pc, #44]	@ (81084e4 <vPortSetupTimerInterrupt+0x38>)
 81084b8:	2200      	movs	r2, #0
 81084ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 81084bc:	4b0a      	ldr	r3, [pc, #40]	@ (81084e8 <vPortSetupTimerInterrupt+0x3c>)
 81084be:	681b      	ldr	r3, [r3, #0]
 81084c0:	4a0a      	ldr	r2, [pc, #40]	@ (81084ec <vPortSetupTimerInterrupt+0x40>)
 81084c2:	fba2 2303 	umull	r2, r3, r2, r3
 81084c6:	099b      	lsrs	r3, r3, #6
 81084c8:	4a09      	ldr	r2, [pc, #36]	@ (81084f0 <vPortSetupTimerInterrupt+0x44>)
 81084ca:	3b01      	subs	r3, #1
 81084cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 81084ce:	4b04      	ldr	r3, [pc, #16]	@ (81084e0 <vPortSetupTimerInterrupt+0x34>)
 81084d0:	2207      	movs	r2, #7
 81084d2:	601a      	str	r2, [r3, #0]
}
 81084d4:	bf00      	nop
 81084d6:	46bd      	mov	sp, r7
 81084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084dc:	4770      	bx	lr
 81084de:	bf00      	nop
 81084e0:	e000e010 	.word	0xe000e010
 81084e4:	e000e018 	.word	0xe000e018
 81084e8:	10000018 	.word	0x10000018
 81084ec:	10624dd3 	.word	0x10624dd3
 81084f0:	e000e014 	.word	0xe000e014

081084f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81084f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8108504 <vPortEnableVFP+0x10>
 81084f8:	6801      	ldr	r1, [r0, #0]
 81084fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81084fe:	6001      	str	r1, [r0, #0]
 8108500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8108502:	bf00      	nop
 8108504:	e000ed88 	.word	0xe000ed88

08108508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8108508:	b480      	push	{r7}
 810850a:	b085      	sub	sp, #20
 810850c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810850e:	f3ef 8305 	mrs	r3, IPSR
 8108512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8108514:	68fb      	ldr	r3, [r7, #12]
 8108516:	2b0f      	cmp	r3, #15
 8108518:	d915      	bls.n	8108546 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810851a:	4a18      	ldr	r2, [pc, #96]	@ (810857c <vPortValidateInterruptPriority+0x74>)
 810851c:	68fb      	ldr	r3, [r7, #12]
 810851e:	4413      	add	r3, r2
 8108520:	781b      	ldrb	r3, [r3, #0]
 8108522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8108524:	4b16      	ldr	r3, [pc, #88]	@ (8108580 <vPortValidateInterruptPriority+0x78>)
 8108526:	781b      	ldrb	r3, [r3, #0]
 8108528:	7afa      	ldrb	r2, [r7, #11]
 810852a:	429a      	cmp	r2, r3
 810852c:	d20b      	bcs.n	8108546 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810852e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108532:	f383 8811 	msr	BASEPRI, r3
 8108536:	f3bf 8f6f 	isb	sy
 810853a:	f3bf 8f4f 	dsb	sy
 810853e:	607b      	str	r3, [r7, #4]
}
 8108540:	bf00      	nop
 8108542:	bf00      	nop
 8108544:	e7fd      	b.n	8108542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8108546:	4b0f      	ldr	r3, [pc, #60]	@ (8108584 <vPortValidateInterruptPriority+0x7c>)
 8108548:	681b      	ldr	r3, [r3, #0]
 810854a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810854e:	4b0e      	ldr	r3, [pc, #56]	@ (8108588 <vPortValidateInterruptPriority+0x80>)
 8108550:	681b      	ldr	r3, [r3, #0]
 8108552:	429a      	cmp	r2, r3
 8108554:	d90b      	bls.n	810856e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8108556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810855a:	f383 8811 	msr	BASEPRI, r3
 810855e:	f3bf 8f6f 	isb	sy
 8108562:	f3bf 8f4f 	dsb	sy
 8108566:	603b      	str	r3, [r7, #0]
}
 8108568:	bf00      	nop
 810856a:	bf00      	nop
 810856c:	e7fd      	b.n	810856a <vPortValidateInterruptPriority+0x62>
	}
 810856e:	bf00      	nop
 8108570:	3714      	adds	r7, #20
 8108572:	46bd      	mov	sp, r7
 8108574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108578:	4770      	bx	lr
 810857a:	bf00      	nop
 810857c:	e000e3f0 	.word	0xe000e3f0
 8108580:	10004614 	.word	0x10004614
 8108584:	e000ed0c 	.word	0xe000ed0c
 8108588:	10004618 	.word	0x10004618

0810858c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810858c:	b580      	push	{r7, lr}
 810858e:	b084      	sub	sp, #16
 8108590:	af00      	add	r7, sp, #0
 8108592:	6078      	str	r0, [r7, #4]
 8108594:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8108596:	687b      	ldr	r3, [r7, #4]
 8108598:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810859a:	68fb      	ldr	r3, [r7, #12]
 810859c:	2b00      	cmp	r3, #0
 810859e:	d10b      	bne.n	81085b8 <xQueueGenericReset+0x2c>
	__asm volatile
 81085a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81085a4:	f383 8811 	msr	BASEPRI, r3
 81085a8:	f3bf 8f6f 	isb	sy
 81085ac:	f3bf 8f4f 	dsb	sy
 81085b0:	60bb      	str	r3, [r7, #8]
}
 81085b2:	bf00      	nop
 81085b4:	bf00      	nop
 81085b6:	e7fd      	b.n	81085b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 81085b8:	f7ff fec6 	bl	8108348 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81085bc:	68fb      	ldr	r3, [r7, #12]
 81085be:	681a      	ldr	r2, [r3, #0]
 81085c0:	68fb      	ldr	r3, [r7, #12]
 81085c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81085c4:	68f9      	ldr	r1, [r7, #12]
 81085c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 81085c8:	fb01 f303 	mul.w	r3, r1, r3
 81085cc:	441a      	add	r2, r3
 81085ce:	68fb      	ldr	r3, [r7, #12]
 81085d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 81085d2:	68fb      	ldr	r3, [r7, #12]
 81085d4:	2200      	movs	r2, #0
 81085d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 81085d8:	68fb      	ldr	r3, [r7, #12]
 81085da:	681a      	ldr	r2, [r3, #0]
 81085dc:	68fb      	ldr	r3, [r7, #12]
 81085de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81085e0:	68fb      	ldr	r3, [r7, #12]
 81085e2:	681a      	ldr	r2, [r3, #0]
 81085e4:	68fb      	ldr	r3, [r7, #12]
 81085e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81085e8:	3b01      	subs	r3, #1
 81085ea:	68f9      	ldr	r1, [r7, #12]
 81085ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 81085ee:	fb01 f303 	mul.w	r3, r1, r3
 81085f2:	441a      	add	r2, r3
 81085f4:	68fb      	ldr	r3, [r7, #12]
 81085f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 81085f8:	68fb      	ldr	r3, [r7, #12]
 81085fa:	22ff      	movs	r2, #255	@ 0xff
 81085fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8108600:	68fb      	ldr	r3, [r7, #12]
 8108602:	22ff      	movs	r2, #255	@ 0xff
 8108604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8108608:	683b      	ldr	r3, [r7, #0]
 810860a:	2b00      	cmp	r3, #0
 810860c:	d114      	bne.n	8108638 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810860e:	68fb      	ldr	r3, [r7, #12]
 8108610:	691b      	ldr	r3, [r3, #16]
 8108612:	2b00      	cmp	r3, #0
 8108614:	d01a      	beq.n	810864c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8108616:	68fb      	ldr	r3, [r7, #12]
 8108618:	3310      	adds	r3, #16
 810861a:	4618      	mov	r0, r3
 810861c:	f002 f968 	bl	810a8f0 <xTaskRemoveFromEventList>
 8108620:	4603      	mov	r3, r0
 8108622:	2b00      	cmp	r3, #0
 8108624:	d012      	beq.n	810864c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8108626:	4b0d      	ldr	r3, [pc, #52]	@ (810865c <xQueueGenericReset+0xd0>)
 8108628:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810862c:	601a      	str	r2, [r3, #0]
 810862e:	f3bf 8f4f 	dsb	sy
 8108632:	f3bf 8f6f 	isb	sy
 8108636:	e009      	b.n	810864c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8108638:	68fb      	ldr	r3, [r7, #12]
 810863a:	3310      	adds	r3, #16
 810863c:	4618      	mov	r0, r3
 810863e:	f7ff fc9d 	bl	8107f7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8108642:	68fb      	ldr	r3, [r7, #12]
 8108644:	3324      	adds	r3, #36	@ 0x24
 8108646:	4618      	mov	r0, r3
 8108648:	f7ff fc98 	bl	8107f7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810864c:	f7ff feae 	bl	81083ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8108650:	2301      	movs	r3, #1
}
 8108652:	4618      	mov	r0, r3
 8108654:	3710      	adds	r7, #16
 8108656:	46bd      	mov	sp, r7
 8108658:	bd80      	pop	{r7, pc}
 810865a:	bf00      	nop
 810865c:	e000ed04 	.word	0xe000ed04

08108660 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8108660:	b580      	push	{r7, lr}
 8108662:	b08e      	sub	sp, #56	@ 0x38
 8108664:	af02      	add	r7, sp, #8
 8108666:	60f8      	str	r0, [r7, #12]
 8108668:	60b9      	str	r1, [r7, #8]
 810866a:	607a      	str	r2, [r7, #4]
 810866c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810866e:	68fb      	ldr	r3, [r7, #12]
 8108670:	2b00      	cmp	r3, #0
 8108672:	d10b      	bne.n	810868c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8108674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108678:	f383 8811 	msr	BASEPRI, r3
 810867c:	f3bf 8f6f 	isb	sy
 8108680:	f3bf 8f4f 	dsb	sy
 8108684:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8108686:	bf00      	nop
 8108688:	bf00      	nop
 810868a:	e7fd      	b.n	8108688 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810868c:	683b      	ldr	r3, [r7, #0]
 810868e:	2b00      	cmp	r3, #0
 8108690:	d10b      	bne.n	81086aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8108692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108696:	f383 8811 	msr	BASEPRI, r3
 810869a:	f3bf 8f6f 	isb	sy
 810869e:	f3bf 8f4f 	dsb	sy
 81086a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81086a4:	bf00      	nop
 81086a6:	bf00      	nop
 81086a8:	e7fd      	b.n	81086a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 81086aa:	687b      	ldr	r3, [r7, #4]
 81086ac:	2b00      	cmp	r3, #0
 81086ae:	d002      	beq.n	81086b6 <xQueueGenericCreateStatic+0x56>
 81086b0:	68bb      	ldr	r3, [r7, #8]
 81086b2:	2b00      	cmp	r3, #0
 81086b4:	d001      	beq.n	81086ba <xQueueGenericCreateStatic+0x5a>
 81086b6:	2301      	movs	r3, #1
 81086b8:	e000      	b.n	81086bc <xQueueGenericCreateStatic+0x5c>
 81086ba:	2300      	movs	r3, #0
 81086bc:	2b00      	cmp	r3, #0
 81086be:	d10b      	bne.n	81086d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 81086c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81086c4:	f383 8811 	msr	BASEPRI, r3
 81086c8:	f3bf 8f6f 	isb	sy
 81086cc:	f3bf 8f4f 	dsb	sy
 81086d0:	623b      	str	r3, [r7, #32]
}
 81086d2:	bf00      	nop
 81086d4:	bf00      	nop
 81086d6:	e7fd      	b.n	81086d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 81086d8:	687b      	ldr	r3, [r7, #4]
 81086da:	2b00      	cmp	r3, #0
 81086dc:	d102      	bne.n	81086e4 <xQueueGenericCreateStatic+0x84>
 81086de:	68bb      	ldr	r3, [r7, #8]
 81086e0:	2b00      	cmp	r3, #0
 81086e2:	d101      	bne.n	81086e8 <xQueueGenericCreateStatic+0x88>
 81086e4:	2301      	movs	r3, #1
 81086e6:	e000      	b.n	81086ea <xQueueGenericCreateStatic+0x8a>
 81086e8:	2300      	movs	r3, #0
 81086ea:	2b00      	cmp	r3, #0
 81086ec:	d10b      	bne.n	8108706 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 81086ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81086f2:	f383 8811 	msr	BASEPRI, r3
 81086f6:	f3bf 8f6f 	isb	sy
 81086fa:	f3bf 8f4f 	dsb	sy
 81086fe:	61fb      	str	r3, [r7, #28]
}
 8108700:	bf00      	nop
 8108702:	bf00      	nop
 8108704:	e7fd      	b.n	8108702 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8108706:	2350      	movs	r3, #80	@ 0x50
 8108708:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810870a:	697b      	ldr	r3, [r7, #20]
 810870c:	2b50      	cmp	r3, #80	@ 0x50
 810870e:	d00b      	beq.n	8108728 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8108710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108714:	f383 8811 	msr	BASEPRI, r3
 8108718:	f3bf 8f6f 	isb	sy
 810871c:	f3bf 8f4f 	dsb	sy
 8108720:	61bb      	str	r3, [r7, #24]
}
 8108722:	bf00      	nop
 8108724:	bf00      	nop
 8108726:	e7fd      	b.n	8108724 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8108728:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810872a:	683b      	ldr	r3, [r7, #0]
 810872c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 810872e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108730:	2b00      	cmp	r3, #0
 8108732:	d00d      	beq.n	8108750 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8108734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108736:	2201      	movs	r2, #1
 8108738:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810873c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8108740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108742:	9300      	str	r3, [sp, #0]
 8108744:	4613      	mov	r3, r2
 8108746:	687a      	ldr	r2, [r7, #4]
 8108748:	68b9      	ldr	r1, [r7, #8]
 810874a:	68f8      	ldr	r0, [r7, #12]
 810874c:	f000 f840 	bl	81087d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8108750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8108752:	4618      	mov	r0, r3
 8108754:	3730      	adds	r7, #48	@ 0x30
 8108756:	46bd      	mov	sp, r7
 8108758:	bd80      	pop	{r7, pc}

0810875a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810875a:	b580      	push	{r7, lr}
 810875c:	b08a      	sub	sp, #40	@ 0x28
 810875e:	af02      	add	r7, sp, #8
 8108760:	60f8      	str	r0, [r7, #12]
 8108762:	60b9      	str	r1, [r7, #8]
 8108764:	4613      	mov	r3, r2
 8108766:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8108768:	68fb      	ldr	r3, [r7, #12]
 810876a:	2b00      	cmp	r3, #0
 810876c:	d10b      	bne.n	8108786 <xQueueGenericCreate+0x2c>
	__asm volatile
 810876e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108772:	f383 8811 	msr	BASEPRI, r3
 8108776:	f3bf 8f6f 	isb	sy
 810877a:	f3bf 8f4f 	dsb	sy
 810877e:	613b      	str	r3, [r7, #16]
}
 8108780:	bf00      	nop
 8108782:	bf00      	nop
 8108784:	e7fd      	b.n	8108782 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8108786:	68fb      	ldr	r3, [r7, #12]
 8108788:	68ba      	ldr	r2, [r7, #8]
 810878a:	fb02 f303 	mul.w	r3, r2, r3
 810878e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8108790:	69fb      	ldr	r3, [r7, #28]
 8108792:	3350      	adds	r3, #80	@ 0x50
 8108794:	4618      	mov	r0, r3
 8108796:	f7ff fa03 	bl	8107ba0 <pvPortMalloc>
 810879a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810879c:	69bb      	ldr	r3, [r7, #24]
 810879e:	2b00      	cmp	r3, #0
 81087a0:	d011      	beq.n	81087c6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 81087a2:	69bb      	ldr	r3, [r7, #24]
 81087a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81087a6:	697b      	ldr	r3, [r7, #20]
 81087a8:	3350      	adds	r3, #80	@ 0x50
 81087aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 81087ac:	69bb      	ldr	r3, [r7, #24]
 81087ae:	2200      	movs	r2, #0
 81087b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 81087b4:	79fa      	ldrb	r2, [r7, #7]
 81087b6:	69bb      	ldr	r3, [r7, #24]
 81087b8:	9300      	str	r3, [sp, #0]
 81087ba:	4613      	mov	r3, r2
 81087bc:	697a      	ldr	r2, [r7, #20]
 81087be:	68b9      	ldr	r1, [r7, #8]
 81087c0:	68f8      	ldr	r0, [r7, #12]
 81087c2:	f000 f805 	bl	81087d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 81087c6:	69bb      	ldr	r3, [r7, #24]
	}
 81087c8:	4618      	mov	r0, r3
 81087ca:	3720      	adds	r7, #32
 81087cc:	46bd      	mov	sp, r7
 81087ce:	bd80      	pop	{r7, pc}

081087d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 81087d0:	b580      	push	{r7, lr}
 81087d2:	b084      	sub	sp, #16
 81087d4:	af00      	add	r7, sp, #0
 81087d6:	60f8      	str	r0, [r7, #12]
 81087d8:	60b9      	str	r1, [r7, #8]
 81087da:	607a      	str	r2, [r7, #4]
 81087dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 81087de:	68bb      	ldr	r3, [r7, #8]
 81087e0:	2b00      	cmp	r3, #0
 81087e2:	d103      	bne.n	81087ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 81087e4:	69bb      	ldr	r3, [r7, #24]
 81087e6:	69ba      	ldr	r2, [r7, #24]
 81087e8:	601a      	str	r2, [r3, #0]
 81087ea:	e002      	b.n	81087f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 81087ec:	69bb      	ldr	r3, [r7, #24]
 81087ee:	687a      	ldr	r2, [r7, #4]
 81087f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 81087f2:	69bb      	ldr	r3, [r7, #24]
 81087f4:	68fa      	ldr	r2, [r7, #12]
 81087f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 81087f8:	69bb      	ldr	r3, [r7, #24]
 81087fa:	68ba      	ldr	r2, [r7, #8]
 81087fc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 81087fe:	2101      	movs	r1, #1
 8108800:	69b8      	ldr	r0, [r7, #24]
 8108802:	f7ff fec3 	bl	810858c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8108806:	69bb      	ldr	r3, [r7, #24]
 8108808:	78fa      	ldrb	r2, [r7, #3]
 810880a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810880e:	bf00      	nop
 8108810:	3710      	adds	r7, #16
 8108812:	46bd      	mov	sp, r7
 8108814:	bd80      	pop	{r7, pc}

08108816 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8108816:	b580      	push	{r7, lr}
 8108818:	b082      	sub	sp, #8
 810881a:	af00      	add	r7, sp, #0
 810881c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 810881e:	687b      	ldr	r3, [r7, #4]
 8108820:	2b00      	cmp	r3, #0
 8108822:	d00e      	beq.n	8108842 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8108824:	687b      	ldr	r3, [r7, #4]
 8108826:	2200      	movs	r2, #0
 8108828:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 810882a:	687b      	ldr	r3, [r7, #4]
 810882c:	2200      	movs	r2, #0
 810882e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8108830:	687b      	ldr	r3, [r7, #4]
 8108832:	2200      	movs	r2, #0
 8108834:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8108836:	2300      	movs	r3, #0
 8108838:	2200      	movs	r2, #0
 810883a:	2100      	movs	r1, #0
 810883c:	6878      	ldr	r0, [r7, #4]
 810883e:	f000 f911 	bl	8108a64 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8108842:	bf00      	nop
 8108844:	3708      	adds	r7, #8
 8108846:	46bd      	mov	sp, r7
 8108848:	bd80      	pop	{r7, pc}

0810884a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 810884a:	b580      	push	{r7, lr}
 810884c:	b086      	sub	sp, #24
 810884e:	af00      	add	r7, sp, #0
 8108850:	4603      	mov	r3, r0
 8108852:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8108854:	2301      	movs	r3, #1
 8108856:	617b      	str	r3, [r7, #20]
 8108858:	2300      	movs	r3, #0
 810885a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 810885c:	79fb      	ldrb	r3, [r7, #7]
 810885e:	461a      	mov	r2, r3
 8108860:	6939      	ldr	r1, [r7, #16]
 8108862:	6978      	ldr	r0, [r7, #20]
 8108864:	f7ff ff79 	bl	810875a <xQueueGenericCreate>
 8108868:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 810886a:	68f8      	ldr	r0, [r7, #12]
 810886c:	f7ff ffd3 	bl	8108816 <prvInitialiseMutex>

		return xNewQueue;
 8108870:	68fb      	ldr	r3, [r7, #12]
	}
 8108872:	4618      	mov	r0, r3
 8108874:	3718      	adds	r7, #24
 8108876:	46bd      	mov	sp, r7
 8108878:	bd80      	pop	{r7, pc}

0810887a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 810887a:	b580      	push	{r7, lr}
 810887c:	b088      	sub	sp, #32
 810887e:	af02      	add	r7, sp, #8
 8108880:	4603      	mov	r3, r0
 8108882:	6039      	str	r1, [r7, #0]
 8108884:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8108886:	2301      	movs	r3, #1
 8108888:	617b      	str	r3, [r7, #20]
 810888a:	2300      	movs	r3, #0
 810888c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 810888e:	79fb      	ldrb	r3, [r7, #7]
 8108890:	9300      	str	r3, [sp, #0]
 8108892:	683b      	ldr	r3, [r7, #0]
 8108894:	2200      	movs	r2, #0
 8108896:	6939      	ldr	r1, [r7, #16]
 8108898:	6978      	ldr	r0, [r7, #20]
 810889a:	f7ff fee1 	bl	8108660 <xQueueGenericCreateStatic>
 810889e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 81088a0:	68f8      	ldr	r0, [r7, #12]
 81088a2:	f7ff ffb8 	bl	8108816 <prvInitialiseMutex>

		return xNewQueue;
 81088a6:	68fb      	ldr	r3, [r7, #12]
	}
 81088a8:	4618      	mov	r0, r3
 81088aa:	3718      	adds	r7, #24
 81088ac:	46bd      	mov	sp, r7
 81088ae:	bd80      	pop	{r7, pc}

081088b0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 81088b0:	b590      	push	{r4, r7, lr}
 81088b2:	b087      	sub	sp, #28
 81088b4:	af00      	add	r7, sp, #0
 81088b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 81088b8:	687b      	ldr	r3, [r7, #4]
 81088ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 81088bc:	693b      	ldr	r3, [r7, #16]
 81088be:	2b00      	cmp	r3, #0
 81088c0:	d10b      	bne.n	81088da <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 81088c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81088c6:	f383 8811 	msr	BASEPRI, r3
 81088ca:	f3bf 8f6f 	isb	sy
 81088ce:	f3bf 8f4f 	dsb	sy
 81088d2:	60fb      	str	r3, [r7, #12]
}
 81088d4:	bf00      	nop
 81088d6:	bf00      	nop
 81088d8:	e7fd      	b.n	81088d6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 81088da:	693b      	ldr	r3, [r7, #16]
 81088dc:	689c      	ldr	r4, [r3, #8]
 81088de:	f002 f9f5 	bl	810accc <xTaskGetCurrentTaskHandle>
 81088e2:	4603      	mov	r3, r0
 81088e4:	429c      	cmp	r4, r3
 81088e6:	d111      	bne.n	810890c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 81088e8:	693b      	ldr	r3, [r7, #16]
 81088ea:	68db      	ldr	r3, [r3, #12]
 81088ec:	1e5a      	subs	r2, r3, #1
 81088ee:	693b      	ldr	r3, [r7, #16]
 81088f0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 81088f2:	693b      	ldr	r3, [r7, #16]
 81088f4:	68db      	ldr	r3, [r3, #12]
 81088f6:	2b00      	cmp	r3, #0
 81088f8:	d105      	bne.n	8108906 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 81088fa:	2300      	movs	r3, #0
 81088fc:	2200      	movs	r2, #0
 81088fe:	2100      	movs	r1, #0
 8108900:	6938      	ldr	r0, [r7, #16]
 8108902:	f000 f8af 	bl	8108a64 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8108906:	2301      	movs	r3, #1
 8108908:	617b      	str	r3, [r7, #20]
 810890a:	e001      	b.n	8108910 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 810890c:	2300      	movs	r3, #0
 810890e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8108910:	697b      	ldr	r3, [r7, #20]
	}
 8108912:	4618      	mov	r0, r3
 8108914:	371c      	adds	r7, #28
 8108916:	46bd      	mov	sp, r7
 8108918:	bd90      	pop	{r4, r7, pc}

0810891a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 810891a:	b590      	push	{r4, r7, lr}
 810891c:	b087      	sub	sp, #28
 810891e:	af00      	add	r7, sp, #0
 8108920:	6078      	str	r0, [r7, #4]
 8108922:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8108924:	687b      	ldr	r3, [r7, #4]
 8108926:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8108928:	693b      	ldr	r3, [r7, #16]
 810892a:	2b00      	cmp	r3, #0
 810892c:	d10b      	bne.n	8108946 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 810892e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108932:	f383 8811 	msr	BASEPRI, r3
 8108936:	f3bf 8f6f 	isb	sy
 810893a:	f3bf 8f4f 	dsb	sy
 810893e:	60fb      	str	r3, [r7, #12]
}
 8108940:	bf00      	nop
 8108942:	bf00      	nop
 8108944:	e7fd      	b.n	8108942 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8108946:	693b      	ldr	r3, [r7, #16]
 8108948:	689c      	ldr	r4, [r3, #8]
 810894a:	f002 f9bf 	bl	810accc <xTaskGetCurrentTaskHandle>
 810894e:	4603      	mov	r3, r0
 8108950:	429c      	cmp	r4, r3
 8108952:	d107      	bne.n	8108964 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8108954:	693b      	ldr	r3, [r7, #16]
 8108956:	68db      	ldr	r3, [r3, #12]
 8108958:	1c5a      	adds	r2, r3, #1
 810895a:	693b      	ldr	r3, [r7, #16]
 810895c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 810895e:	2301      	movs	r3, #1
 8108960:	617b      	str	r3, [r7, #20]
 8108962:	e00c      	b.n	810897e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8108964:	6839      	ldr	r1, [r7, #0]
 8108966:	6938      	ldr	r0, [r7, #16]
 8108968:	f000 fb8e 	bl	8109088 <xQueueSemaphoreTake>
 810896c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 810896e:	697b      	ldr	r3, [r7, #20]
 8108970:	2b00      	cmp	r3, #0
 8108972:	d004      	beq.n	810897e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8108974:	693b      	ldr	r3, [r7, #16]
 8108976:	68db      	ldr	r3, [r3, #12]
 8108978:	1c5a      	adds	r2, r3, #1
 810897a:	693b      	ldr	r3, [r7, #16]
 810897c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 810897e:	697b      	ldr	r3, [r7, #20]
	}
 8108980:	4618      	mov	r0, r3
 8108982:	371c      	adds	r7, #28
 8108984:	46bd      	mov	sp, r7
 8108986:	bd90      	pop	{r4, r7, pc}

08108988 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8108988:	b580      	push	{r7, lr}
 810898a:	b08a      	sub	sp, #40	@ 0x28
 810898c:	af02      	add	r7, sp, #8
 810898e:	60f8      	str	r0, [r7, #12]
 8108990:	60b9      	str	r1, [r7, #8]
 8108992:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8108994:	68fb      	ldr	r3, [r7, #12]
 8108996:	2b00      	cmp	r3, #0
 8108998:	d10b      	bne.n	81089b2 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 810899a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810899e:	f383 8811 	msr	BASEPRI, r3
 81089a2:	f3bf 8f6f 	isb	sy
 81089a6:	f3bf 8f4f 	dsb	sy
 81089aa:	61bb      	str	r3, [r7, #24]
}
 81089ac:	bf00      	nop
 81089ae:	bf00      	nop
 81089b0:	e7fd      	b.n	81089ae <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 81089b2:	68ba      	ldr	r2, [r7, #8]
 81089b4:	68fb      	ldr	r3, [r7, #12]
 81089b6:	429a      	cmp	r2, r3
 81089b8:	d90b      	bls.n	81089d2 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 81089ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81089be:	f383 8811 	msr	BASEPRI, r3
 81089c2:	f3bf 8f6f 	isb	sy
 81089c6:	f3bf 8f4f 	dsb	sy
 81089ca:	617b      	str	r3, [r7, #20]
}
 81089cc:	bf00      	nop
 81089ce:	bf00      	nop
 81089d0:	e7fd      	b.n	81089ce <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 81089d2:	2302      	movs	r3, #2
 81089d4:	9300      	str	r3, [sp, #0]
 81089d6:	687b      	ldr	r3, [r7, #4]
 81089d8:	2200      	movs	r2, #0
 81089da:	2100      	movs	r1, #0
 81089dc:	68f8      	ldr	r0, [r7, #12]
 81089de:	f7ff fe3f 	bl	8108660 <xQueueGenericCreateStatic>
 81089e2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 81089e4:	69fb      	ldr	r3, [r7, #28]
 81089e6:	2b00      	cmp	r3, #0
 81089e8:	d002      	beq.n	81089f0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 81089ea:	69fb      	ldr	r3, [r7, #28]
 81089ec:	68ba      	ldr	r2, [r7, #8]
 81089ee:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 81089f0:	69fb      	ldr	r3, [r7, #28]
	}
 81089f2:	4618      	mov	r0, r3
 81089f4:	3720      	adds	r7, #32
 81089f6:	46bd      	mov	sp, r7
 81089f8:	bd80      	pop	{r7, pc}

081089fa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 81089fa:	b580      	push	{r7, lr}
 81089fc:	b086      	sub	sp, #24
 81089fe:	af00      	add	r7, sp, #0
 8108a00:	6078      	str	r0, [r7, #4]
 8108a02:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8108a04:	687b      	ldr	r3, [r7, #4]
 8108a06:	2b00      	cmp	r3, #0
 8108a08:	d10b      	bne.n	8108a22 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8108a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108a0e:	f383 8811 	msr	BASEPRI, r3
 8108a12:	f3bf 8f6f 	isb	sy
 8108a16:	f3bf 8f4f 	dsb	sy
 8108a1a:	613b      	str	r3, [r7, #16]
}
 8108a1c:	bf00      	nop
 8108a1e:	bf00      	nop
 8108a20:	e7fd      	b.n	8108a1e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8108a22:	683a      	ldr	r2, [r7, #0]
 8108a24:	687b      	ldr	r3, [r7, #4]
 8108a26:	429a      	cmp	r2, r3
 8108a28:	d90b      	bls.n	8108a42 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8108a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108a2e:	f383 8811 	msr	BASEPRI, r3
 8108a32:	f3bf 8f6f 	isb	sy
 8108a36:	f3bf 8f4f 	dsb	sy
 8108a3a:	60fb      	str	r3, [r7, #12]
}
 8108a3c:	bf00      	nop
 8108a3e:	bf00      	nop
 8108a40:	e7fd      	b.n	8108a3e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8108a42:	2202      	movs	r2, #2
 8108a44:	2100      	movs	r1, #0
 8108a46:	6878      	ldr	r0, [r7, #4]
 8108a48:	f7ff fe87 	bl	810875a <xQueueGenericCreate>
 8108a4c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8108a4e:	697b      	ldr	r3, [r7, #20]
 8108a50:	2b00      	cmp	r3, #0
 8108a52:	d002      	beq.n	8108a5a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8108a54:	697b      	ldr	r3, [r7, #20]
 8108a56:	683a      	ldr	r2, [r7, #0]
 8108a58:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8108a5a:	697b      	ldr	r3, [r7, #20]
	}
 8108a5c:	4618      	mov	r0, r3
 8108a5e:	3718      	adds	r7, #24
 8108a60:	46bd      	mov	sp, r7
 8108a62:	bd80      	pop	{r7, pc}

08108a64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8108a64:	b580      	push	{r7, lr}
 8108a66:	b08e      	sub	sp, #56	@ 0x38
 8108a68:	af00      	add	r7, sp, #0
 8108a6a:	60f8      	str	r0, [r7, #12]
 8108a6c:	60b9      	str	r1, [r7, #8]
 8108a6e:	607a      	str	r2, [r7, #4]
 8108a70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8108a72:	2300      	movs	r3, #0
 8108a74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8108a76:	68fb      	ldr	r3, [r7, #12]
 8108a78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8108a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a7c:	2b00      	cmp	r3, #0
 8108a7e:	d10b      	bne.n	8108a98 <xQueueGenericSend+0x34>
	__asm volatile
 8108a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108a84:	f383 8811 	msr	BASEPRI, r3
 8108a88:	f3bf 8f6f 	isb	sy
 8108a8c:	f3bf 8f4f 	dsb	sy
 8108a90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8108a92:	bf00      	nop
 8108a94:	bf00      	nop
 8108a96:	e7fd      	b.n	8108a94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8108a98:	68bb      	ldr	r3, [r7, #8]
 8108a9a:	2b00      	cmp	r3, #0
 8108a9c:	d103      	bne.n	8108aa6 <xQueueGenericSend+0x42>
 8108a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108aa2:	2b00      	cmp	r3, #0
 8108aa4:	d101      	bne.n	8108aaa <xQueueGenericSend+0x46>
 8108aa6:	2301      	movs	r3, #1
 8108aa8:	e000      	b.n	8108aac <xQueueGenericSend+0x48>
 8108aaa:	2300      	movs	r3, #0
 8108aac:	2b00      	cmp	r3, #0
 8108aae:	d10b      	bne.n	8108ac8 <xQueueGenericSend+0x64>
	__asm volatile
 8108ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108ab4:	f383 8811 	msr	BASEPRI, r3
 8108ab8:	f3bf 8f6f 	isb	sy
 8108abc:	f3bf 8f4f 	dsb	sy
 8108ac0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8108ac2:	bf00      	nop
 8108ac4:	bf00      	nop
 8108ac6:	e7fd      	b.n	8108ac4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8108ac8:	683b      	ldr	r3, [r7, #0]
 8108aca:	2b02      	cmp	r3, #2
 8108acc:	d103      	bne.n	8108ad6 <xQueueGenericSend+0x72>
 8108ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108ad2:	2b01      	cmp	r3, #1
 8108ad4:	d101      	bne.n	8108ada <xQueueGenericSend+0x76>
 8108ad6:	2301      	movs	r3, #1
 8108ad8:	e000      	b.n	8108adc <xQueueGenericSend+0x78>
 8108ada:	2300      	movs	r3, #0
 8108adc:	2b00      	cmp	r3, #0
 8108ade:	d10b      	bne.n	8108af8 <xQueueGenericSend+0x94>
	__asm volatile
 8108ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108ae4:	f383 8811 	msr	BASEPRI, r3
 8108ae8:	f3bf 8f6f 	isb	sy
 8108aec:	f3bf 8f4f 	dsb	sy
 8108af0:	623b      	str	r3, [r7, #32]
}
 8108af2:	bf00      	nop
 8108af4:	bf00      	nop
 8108af6:	e7fd      	b.n	8108af4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8108af8:	f002 f8f8 	bl	810acec <xTaskGetSchedulerState>
 8108afc:	4603      	mov	r3, r0
 8108afe:	2b00      	cmp	r3, #0
 8108b00:	d102      	bne.n	8108b08 <xQueueGenericSend+0xa4>
 8108b02:	687b      	ldr	r3, [r7, #4]
 8108b04:	2b00      	cmp	r3, #0
 8108b06:	d101      	bne.n	8108b0c <xQueueGenericSend+0xa8>
 8108b08:	2301      	movs	r3, #1
 8108b0a:	e000      	b.n	8108b0e <xQueueGenericSend+0xaa>
 8108b0c:	2300      	movs	r3, #0
 8108b0e:	2b00      	cmp	r3, #0
 8108b10:	d10b      	bne.n	8108b2a <xQueueGenericSend+0xc6>
	__asm volatile
 8108b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108b16:	f383 8811 	msr	BASEPRI, r3
 8108b1a:	f3bf 8f6f 	isb	sy
 8108b1e:	f3bf 8f4f 	dsb	sy
 8108b22:	61fb      	str	r3, [r7, #28]
}
 8108b24:	bf00      	nop
 8108b26:	bf00      	nop
 8108b28:	e7fd      	b.n	8108b26 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8108b2a:	f7ff fc0d 	bl	8108348 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8108b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8108b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108b36:	429a      	cmp	r2, r3
 8108b38:	d302      	bcc.n	8108b40 <xQueueGenericSend+0xdc>
 8108b3a:	683b      	ldr	r3, [r7, #0]
 8108b3c:	2b02      	cmp	r3, #2
 8108b3e:	d129      	bne.n	8108b94 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8108b40:	683a      	ldr	r2, [r7, #0]
 8108b42:	68b9      	ldr	r1, [r7, #8]
 8108b44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8108b46:	f000 fc6d 	bl	8109424 <prvCopyDataToQueue>
 8108b4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8108b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108b50:	2b00      	cmp	r3, #0
 8108b52:	d010      	beq.n	8108b76 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8108b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b56:	3324      	adds	r3, #36	@ 0x24
 8108b58:	4618      	mov	r0, r3
 8108b5a:	f001 fec9 	bl	810a8f0 <xTaskRemoveFromEventList>
 8108b5e:	4603      	mov	r3, r0
 8108b60:	2b00      	cmp	r3, #0
 8108b62:	d013      	beq.n	8108b8c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8108b64:	4b3f      	ldr	r3, [pc, #252]	@ (8108c64 <xQueueGenericSend+0x200>)
 8108b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8108b6a:	601a      	str	r2, [r3, #0]
 8108b6c:	f3bf 8f4f 	dsb	sy
 8108b70:	f3bf 8f6f 	isb	sy
 8108b74:	e00a      	b.n	8108b8c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8108b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108b78:	2b00      	cmp	r3, #0
 8108b7a:	d007      	beq.n	8108b8c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8108b7c:	4b39      	ldr	r3, [pc, #228]	@ (8108c64 <xQueueGenericSend+0x200>)
 8108b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8108b82:	601a      	str	r2, [r3, #0]
 8108b84:	f3bf 8f4f 	dsb	sy
 8108b88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8108b8c:	f7ff fc0e 	bl	81083ac <vPortExitCritical>
				return pdPASS;
 8108b90:	2301      	movs	r3, #1
 8108b92:	e063      	b.n	8108c5c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8108b94:	687b      	ldr	r3, [r7, #4]
 8108b96:	2b00      	cmp	r3, #0
 8108b98:	d103      	bne.n	8108ba2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8108b9a:	f7ff fc07 	bl	81083ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8108b9e:	2300      	movs	r3, #0
 8108ba0:	e05c      	b.n	8108c5c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8108ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108ba4:	2b00      	cmp	r3, #0
 8108ba6:	d106      	bne.n	8108bb6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8108ba8:	f107 0314 	add.w	r3, r7, #20
 8108bac:	4618      	mov	r0, r3
 8108bae:	f001 ff2b 	bl	810aa08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8108bb2:	2301      	movs	r3, #1
 8108bb4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8108bb6:	f7ff fbf9 	bl	81083ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8108bba:	f001 fc59 	bl	810a470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8108bbe:	f7ff fbc3 	bl	8108348 <vPortEnterCritical>
 8108bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8108bc8:	b25b      	sxtb	r3, r3
 8108bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108bce:	d103      	bne.n	8108bd8 <xQueueGenericSend+0x174>
 8108bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108bd2:	2200      	movs	r2, #0
 8108bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8108bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108bda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8108bde:	b25b      	sxtb	r3, r3
 8108be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108be4:	d103      	bne.n	8108bee <xQueueGenericSend+0x18a>
 8108be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108be8:	2200      	movs	r2, #0
 8108bea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8108bee:	f7ff fbdd 	bl	81083ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8108bf2:	1d3a      	adds	r2, r7, #4
 8108bf4:	f107 0314 	add.w	r3, r7, #20
 8108bf8:	4611      	mov	r1, r2
 8108bfa:	4618      	mov	r0, r3
 8108bfc:	f001 ff1a 	bl	810aa34 <xTaskCheckForTimeOut>
 8108c00:	4603      	mov	r3, r0
 8108c02:	2b00      	cmp	r3, #0
 8108c04:	d124      	bne.n	8108c50 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8108c06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8108c08:	f000 fd04 	bl	8109614 <prvIsQueueFull>
 8108c0c:	4603      	mov	r3, r0
 8108c0e:	2b00      	cmp	r3, #0
 8108c10:	d018      	beq.n	8108c44 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8108c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c14:	3310      	adds	r3, #16
 8108c16:	687a      	ldr	r2, [r7, #4]
 8108c18:	4611      	mov	r1, r2
 8108c1a:	4618      	mov	r0, r3
 8108c1c:	f001 fe16 	bl	810a84c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8108c20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8108c22:	f000 fc8f 	bl	8109544 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8108c26:	f001 fc31 	bl	810a48c <xTaskResumeAll>
 8108c2a:	4603      	mov	r3, r0
 8108c2c:	2b00      	cmp	r3, #0
 8108c2e:	f47f af7c 	bne.w	8108b2a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8108c32:	4b0c      	ldr	r3, [pc, #48]	@ (8108c64 <xQueueGenericSend+0x200>)
 8108c34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8108c38:	601a      	str	r2, [r3, #0]
 8108c3a:	f3bf 8f4f 	dsb	sy
 8108c3e:	f3bf 8f6f 	isb	sy
 8108c42:	e772      	b.n	8108b2a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8108c44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8108c46:	f000 fc7d 	bl	8109544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8108c4a:	f001 fc1f 	bl	810a48c <xTaskResumeAll>
 8108c4e:	e76c      	b.n	8108b2a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8108c50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8108c52:	f000 fc77 	bl	8109544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8108c56:	f001 fc19 	bl	810a48c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8108c5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8108c5c:	4618      	mov	r0, r3
 8108c5e:	3738      	adds	r7, #56	@ 0x38
 8108c60:	46bd      	mov	sp, r7
 8108c62:	bd80      	pop	{r7, pc}
 8108c64:	e000ed04 	.word	0xe000ed04

08108c68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8108c68:	b580      	push	{r7, lr}
 8108c6a:	b090      	sub	sp, #64	@ 0x40
 8108c6c:	af00      	add	r7, sp, #0
 8108c6e:	60f8      	str	r0, [r7, #12]
 8108c70:	60b9      	str	r1, [r7, #8]
 8108c72:	607a      	str	r2, [r7, #4]
 8108c74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8108c76:	68fb      	ldr	r3, [r7, #12]
 8108c78:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8108c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108c7c:	2b00      	cmp	r3, #0
 8108c7e:	d10b      	bne.n	8108c98 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8108c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108c84:	f383 8811 	msr	BASEPRI, r3
 8108c88:	f3bf 8f6f 	isb	sy
 8108c8c:	f3bf 8f4f 	dsb	sy
 8108c90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8108c92:	bf00      	nop
 8108c94:	bf00      	nop
 8108c96:	e7fd      	b.n	8108c94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8108c98:	68bb      	ldr	r3, [r7, #8]
 8108c9a:	2b00      	cmp	r3, #0
 8108c9c:	d103      	bne.n	8108ca6 <xQueueGenericSendFromISR+0x3e>
 8108c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108ca2:	2b00      	cmp	r3, #0
 8108ca4:	d101      	bne.n	8108caa <xQueueGenericSendFromISR+0x42>
 8108ca6:	2301      	movs	r3, #1
 8108ca8:	e000      	b.n	8108cac <xQueueGenericSendFromISR+0x44>
 8108caa:	2300      	movs	r3, #0
 8108cac:	2b00      	cmp	r3, #0
 8108cae:	d10b      	bne.n	8108cc8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8108cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108cb4:	f383 8811 	msr	BASEPRI, r3
 8108cb8:	f3bf 8f6f 	isb	sy
 8108cbc:	f3bf 8f4f 	dsb	sy
 8108cc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8108cc2:	bf00      	nop
 8108cc4:	bf00      	nop
 8108cc6:	e7fd      	b.n	8108cc4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8108cc8:	683b      	ldr	r3, [r7, #0]
 8108cca:	2b02      	cmp	r3, #2
 8108ccc:	d103      	bne.n	8108cd6 <xQueueGenericSendFromISR+0x6e>
 8108cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108cd2:	2b01      	cmp	r3, #1
 8108cd4:	d101      	bne.n	8108cda <xQueueGenericSendFromISR+0x72>
 8108cd6:	2301      	movs	r3, #1
 8108cd8:	e000      	b.n	8108cdc <xQueueGenericSendFromISR+0x74>
 8108cda:	2300      	movs	r3, #0
 8108cdc:	2b00      	cmp	r3, #0
 8108cde:	d10b      	bne.n	8108cf8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8108ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108ce4:	f383 8811 	msr	BASEPRI, r3
 8108ce8:	f3bf 8f6f 	isb	sy
 8108cec:	f3bf 8f4f 	dsb	sy
 8108cf0:	623b      	str	r3, [r7, #32]
}
 8108cf2:	bf00      	nop
 8108cf4:	bf00      	nop
 8108cf6:	e7fd      	b.n	8108cf4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8108cf8:	f7ff fc06 	bl	8108508 <vPortValidateInterruptPriority>
	__asm volatile
 8108cfc:	f3ef 8211 	mrs	r2, BASEPRI
 8108d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108d04:	f383 8811 	msr	BASEPRI, r3
 8108d08:	f3bf 8f6f 	isb	sy
 8108d0c:	f3bf 8f4f 	dsb	sy
 8108d10:	61fa      	str	r2, [r7, #28]
 8108d12:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8108d14:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8108d16:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8108d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108d1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8108d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108d20:	429a      	cmp	r2, r3
 8108d22:	d302      	bcc.n	8108d2a <xQueueGenericSendFromISR+0xc2>
 8108d24:	683b      	ldr	r3, [r7, #0]
 8108d26:	2b02      	cmp	r3, #2
 8108d28:	d12f      	bne.n	8108d8a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8108d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108d2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8108d30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8108d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8108d3a:	683a      	ldr	r2, [r7, #0]
 8108d3c:	68b9      	ldr	r1, [r7, #8]
 8108d3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8108d40:	f000 fb70 	bl	8109424 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8108d44:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8108d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108d4c:	d112      	bne.n	8108d74 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8108d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108d52:	2b00      	cmp	r3, #0
 8108d54:	d016      	beq.n	8108d84 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8108d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108d58:	3324      	adds	r3, #36	@ 0x24
 8108d5a:	4618      	mov	r0, r3
 8108d5c:	f001 fdc8 	bl	810a8f0 <xTaskRemoveFromEventList>
 8108d60:	4603      	mov	r3, r0
 8108d62:	2b00      	cmp	r3, #0
 8108d64:	d00e      	beq.n	8108d84 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8108d66:	687b      	ldr	r3, [r7, #4]
 8108d68:	2b00      	cmp	r3, #0
 8108d6a:	d00b      	beq.n	8108d84 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8108d6c:	687b      	ldr	r3, [r7, #4]
 8108d6e:	2201      	movs	r2, #1
 8108d70:	601a      	str	r2, [r3, #0]
 8108d72:	e007      	b.n	8108d84 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8108d74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8108d78:	3301      	adds	r3, #1
 8108d7a:	b2db      	uxtb	r3, r3
 8108d7c:	b25a      	sxtb	r2, r3
 8108d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8108d84:	2301      	movs	r3, #1
 8108d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8108d88:	e001      	b.n	8108d8e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8108d8a:	2300      	movs	r3, #0
 8108d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108d90:	617b      	str	r3, [r7, #20]
	__asm volatile
 8108d92:	697b      	ldr	r3, [r7, #20]
 8108d94:	f383 8811 	msr	BASEPRI, r3
}
 8108d98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8108d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8108d9c:	4618      	mov	r0, r3
 8108d9e:	3740      	adds	r7, #64	@ 0x40
 8108da0:	46bd      	mov	sp, r7
 8108da2:	bd80      	pop	{r7, pc}

08108da4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8108da4:	b580      	push	{r7, lr}
 8108da6:	b08e      	sub	sp, #56	@ 0x38
 8108da8:	af00      	add	r7, sp, #0
 8108daa:	6078      	str	r0, [r7, #4]
 8108dac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8108dae:	687b      	ldr	r3, [r7, #4]
 8108db0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8108db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108db4:	2b00      	cmp	r3, #0
 8108db6:	d10b      	bne.n	8108dd0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8108db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108dbc:	f383 8811 	msr	BASEPRI, r3
 8108dc0:	f3bf 8f6f 	isb	sy
 8108dc4:	f3bf 8f4f 	dsb	sy
 8108dc8:	623b      	str	r3, [r7, #32]
}
 8108dca:	bf00      	nop
 8108dcc:	bf00      	nop
 8108dce:	e7fd      	b.n	8108dcc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8108dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108dd4:	2b00      	cmp	r3, #0
 8108dd6:	d00b      	beq.n	8108df0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8108dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108ddc:	f383 8811 	msr	BASEPRI, r3
 8108de0:	f3bf 8f6f 	isb	sy
 8108de4:	f3bf 8f4f 	dsb	sy
 8108de8:	61fb      	str	r3, [r7, #28]
}
 8108dea:	bf00      	nop
 8108dec:	bf00      	nop
 8108dee:	e7fd      	b.n	8108dec <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8108df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108df2:	681b      	ldr	r3, [r3, #0]
 8108df4:	2b00      	cmp	r3, #0
 8108df6:	d103      	bne.n	8108e00 <xQueueGiveFromISR+0x5c>
 8108df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108dfa:	689b      	ldr	r3, [r3, #8]
 8108dfc:	2b00      	cmp	r3, #0
 8108dfe:	d101      	bne.n	8108e04 <xQueueGiveFromISR+0x60>
 8108e00:	2301      	movs	r3, #1
 8108e02:	e000      	b.n	8108e06 <xQueueGiveFromISR+0x62>
 8108e04:	2300      	movs	r3, #0
 8108e06:	2b00      	cmp	r3, #0
 8108e08:	d10b      	bne.n	8108e22 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8108e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108e0e:	f383 8811 	msr	BASEPRI, r3
 8108e12:	f3bf 8f6f 	isb	sy
 8108e16:	f3bf 8f4f 	dsb	sy
 8108e1a:	61bb      	str	r3, [r7, #24]
}
 8108e1c:	bf00      	nop
 8108e1e:	bf00      	nop
 8108e20:	e7fd      	b.n	8108e1e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8108e22:	f7ff fb71 	bl	8108508 <vPortValidateInterruptPriority>
	__asm volatile
 8108e26:	f3ef 8211 	mrs	r2, BASEPRI
 8108e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108e2e:	f383 8811 	msr	BASEPRI, r3
 8108e32:	f3bf 8f6f 	isb	sy
 8108e36:	f3bf 8f4f 	dsb	sy
 8108e3a:	617a      	str	r2, [r7, #20]
 8108e3c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8108e3e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8108e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8108e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108e46:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8108e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108e4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8108e4e:	429a      	cmp	r2, r3
 8108e50:	d22b      	bcs.n	8108eaa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8108e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8108e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8108e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108e5e:	1c5a      	adds	r2, r3, #1
 8108e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e62:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8108e64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8108e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108e6c:	d112      	bne.n	8108e94 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8108e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108e72:	2b00      	cmp	r3, #0
 8108e74:	d016      	beq.n	8108ea4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8108e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e78:	3324      	adds	r3, #36	@ 0x24
 8108e7a:	4618      	mov	r0, r3
 8108e7c:	f001 fd38 	bl	810a8f0 <xTaskRemoveFromEventList>
 8108e80:	4603      	mov	r3, r0
 8108e82:	2b00      	cmp	r3, #0
 8108e84:	d00e      	beq.n	8108ea4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8108e86:	683b      	ldr	r3, [r7, #0]
 8108e88:	2b00      	cmp	r3, #0
 8108e8a:	d00b      	beq.n	8108ea4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8108e8c:	683b      	ldr	r3, [r7, #0]
 8108e8e:	2201      	movs	r2, #1
 8108e90:	601a      	str	r2, [r3, #0]
 8108e92:	e007      	b.n	8108ea4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8108e94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8108e98:	3301      	adds	r3, #1
 8108e9a:	b2db      	uxtb	r3, r3
 8108e9c:	b25a      	sxtb	r2, r3
 8108e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8108ea4:	2301      	movs	r3, #1
 8108ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8108ea8:	e001      	b.n	8108eae <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8108eaa:	2300      	movs	r3, #0
 8108eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8108eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108eb0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8108eb2:	68fb      	ldr	r3, [r7, #12]
 8108eb4:	f383 8811 	msr	BASEPRI, r3
}
 8108eb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8108eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8108ebc:	4618      	mov	r0, r3
 8108ebe:	3738      	adds	r7, #56	@ 0x38
 8108ec0:	46bd      	mov	sp, r7
 8108ec2:	bd80      	pop	{r7, pc}

08108ec4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8108ec4:	b580      	push	{r7, lr}
 8108ec6:	b08c      	sub	sp, #48	@ 0x30
 8108ec8:	af00      	add	r7, sp, #0
 8108eca:	60f8      	str	r0, [r7, #12]
 8108ecc:	60b9      	str	r1, [r7, #8]
 8108ece:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8108ed0:	2300      	movs	r3, #0
 8108ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8108ed4:	68fb      	ldr	r3, [r7, #12]
 8108ed6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8108ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108eda:	2b00      	cmp	r3, #0
 8108edc:	d10b      	bne.n	8108ef6 <xQueueReceive+0x32>
	__asm volatile
 8108ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108ee2:	f383 8811 	msr	BASEPRI, r3
 8108ee6:	f3bf 8f6f 	isb	sy
 8108eea:	f3bf 8f4f 	dsb	sy
 8108eee:	623b      	str	r3, [r7, #32]
}
 8108ef0:	bf00      	nop
 8108ef2:	bf00      	nop
 8108ef4:	e7fd      	b.n	8108ef2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8108ef6:	68bb      	ldr	r3, [r7, #8]
 8108ef8:	2b00      	cmp	r3, #0
 8108efa:	d103      	bne.n	8108f04 <xQueueReceive+0x40>
 8108efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108f00:	2b00      	cmp	r3, #0
 8108f02:	d101      	bne.n	8108f08 <xQueueReceive+0x44>
 8108f04:	2301      	movs	r3, #1
 8108f06:	e000      	b.n	8108f0a <xQueueReceive+0x46>
 8108f08:	2300      	movs	r3, #0
 8108f0a:	2b00      	cmp	r3, #0
 8108f0c:	d10b      	bne.n	8108f26 <xQueueReceive+0x62>
	__asm volatile
 8108f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108f12:	f383 8811 	msr	BASEPRI, r3
 8108f16:	f3bf 8f6f 	isb	sy
 8108f1a:	f3bf 8f4f 	dsb	sy
 8108f1e:	61fb      	str	r3, [r7, #28]
}
 8108f20:	bf00      	nop
 8108f22:	bf00      	nop
 8108f24:	e7fd      	b.n	8108f22 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8108f26:	f001 fee1 	bl	810acec <xTaskGetSchedulerState>
 8108f2a:	4603      	mov	r3, r0
 8108f2c:	2b00      	cmp	r3, #0
 8108f2e:	d102      	bne.n	8108f36 <xQueueReceive+0x72>
 8108f30:	687b      	ldr	r3, [r7, #4]
 8108f32:	2b00      	cmp	r3, #0
 8108f34:	d101      	bne.n	8108f3a <xQueueReceive+0x76>
 8108f36:	2301      	movs	r3, #1
 8108f38:	e000      	b.n	8108f3c <xQueueReceive+0x78>
 8108f3a:	2300      	movs	r3, #0
 8108f3c:	2b00      	cmp	r3, #0
 8108f3e:	d10b      	bne.n	8108f58 <xQueueReceive+0x94>
	__asm volatile
 8108f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108f44:	f383 8811 	msr	BASEPRI, r3
 8108f48:	f3bf 8f6f 	isb	sy
 8108f4c:	f3bf 8f4f 	dsb	sy
 8108f50:	61bb      	str	r3, [r7, #24]
}
 8108f52:	bf00      	nop
 8108f54:	bf00      	nop
 8108f56:	e7fd      	b.n	8108f54 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8108f58:	f7ff f9f6 	bl	8108348 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8108f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108f60:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8108f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108f64:	2b00      	cmp	r3, #0
 8108f66:	d01f      	beq.n	8108fa8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8108f68:	68b9      	ldr	r1, [r7, #8]
 8108f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108f6c:	f000 fac4 	bl	81094f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8108f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108f72:	1e5a      	subs	r2, r3, #1
 8108f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108f76:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8108f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108f7a:	691b      	ldr	r3, [r3, #16]
 8108f7c:	2b00      	cmp	r3, #0
 8108f7e:	d00f      	beq.n	8108fa0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8108f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108f82:	3310      	adds	r3, #16
 8108f84:	4618      	mov	r0, r3
 8108f86:	f001 fcb3 	bl	810a8f0 <xTaskRemoveFromEventList>
 8108f8a:	4603      	mov	r3, r0
 8108f8c:	2b00      	cmp	r3, #0
 8108f8e:	d007      	beq.n	8108fa0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8108f90:	4b3c      	ldr	r3, [pc, #240]	@ (8109084 <xQueueReceive+0x1c0>)
 8108f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8108f96:	601a      	str	r2, [r3, #0]
 8108f98:	f3bf 8f4f 	dsb	sy
 8108f9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8108fa0:	f7ff fa04 	bl	81083ac <vPortExitCritical>
				return pdPASS;
 8108fa4:	2301      	movs	r3, #1
 8108fa6:	e069      	b.n	810907c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8108fa8:	687b      	ldr	r3, [r7, #4]
 8108faa:	2b00      	cmp	r3, #0
 8108fac:	d103      	bne.n	8108fb6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8108fae:	f7ff f9fd 	bl	81083ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8108fb2:	2300      	movs	r3, #0
 8108fb4:	e062      	b.n	810907c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8108fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108fb8:	2b00      	cmp	r3, #0
 8108fba:	d106      	bne.n	8108fca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8108fbc:	f107 0310 	add.w	r3, r7, #16
 8108fc0:	4618      	mov	r0, r3
 8108fc2:	f001 fd21 	bl	810aa08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8108fc6:	2301      	movs	r3, #1
 8108fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8108fca:	f7ff f9ef 	bl	81083ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8108fce:	f001 fa4f 	bl	810a470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8108fd2:	f7ff f9b9 	bl	8108348 <vPortEnterCritical>
 8108fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8108fdc:	b25b      	sxtb	r3, r3
 8108fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108fe2:	d103      	bne.n	8108fec <xQueueReceive+0x128>
 8108fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108fe6:	2200      	movs	r2, #0
 8108fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8108fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108fee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8108ff2:	b25b      	sxtb	r3, r3
 8108ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108ff8:	d103      	bne.n	8109002 <xQueueReceive+0x13e>
 8108ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108ffc:	2200      	movs	r2, #0
 8108ffe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8109002:	f7ff f9d3 	bl	81083ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8109006:	1d3a      	adds	r2, r7, #4
 8109008:	f107 0310 	add.w	r3, r7, #16
 810900c:	4611      	mov	r1, r2
 810900e:	4618      	mov	r0, r3
 8109010:	f001 fd10 	bl	810aa34 <xTaskCheckForTimeOut>
 8109014:	4603      	mov	r3, r0
 8109016:	2b00      	cmp	r3, #0
 8109018:	d123      	bne.n	8109062 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810901a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810901c:	f000 fae4 	bl	81095e8 <prvIsQueueEmpty>
 8109020:	4603      	mov	r3, r0
 8109022:	2b00      	cmp	r3, #0
 8109024:	d017      	beq.n	8109056 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8109026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109028:	3324      	adds	r3, #36	@ 0x24
 810902a:	687a      	ldr	r2, [r7, #4]
 810902c:	4611      	mov	r1, r2
 810902e:	4618      	mov	r0, r3
 8109030:	f001 fc0c 	bl	810a84c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8109034:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109036:	f000 fa85 	bl	8109544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810903a:	f001 fa27 	bl	810a48c <xTaskResumeAll>
 810903e:	4603      	mov	r3, r0
 8109040:	2b00      	cmp	r3, #0
 8109042:	d189      	bne.n	8108f58 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8109044:	4b0f      	ldr	r3, [pc, #60]	@ (8109084 <xQueueReceive+0x1c0>)
 8109046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810904a:	601a      	str	r2, [r3, #0]
 810904c:	f3bf 8f4f 	dsb	sy
 8109050:	f3bf 8f6f 	isb	sy
 8109054:	e780      	b.n	8108f58 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8109056:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109058:	f000 fa74 	bl	8109544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810905c:	f001 fa16 	bl	810a48c <xTaskResumeAll>
 8109060:	e77a      	b.n	8108f58 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8109062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109064:	f000 fa6e 	bl	8109544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8109068:	f001 fa10 	bl	810a48c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810906c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810906e:	f000 fabb 	bl	81095e8 <prvIsQueueEmpty>
 8109072:	4603      	mov	r3, r0
 8109074:	2b00      	cmp	r3, #0
 8109076:	f43f af6f 	beq.w	8108f58 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810907a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810907c:	4618      	mov	r0, r3
 810907e:	3730      	adds	r7, #48	@ 0x30
 8109080:	46bd      	mov	sp, r7
 8109082:	bd80      	pop	{r7, pc}
 8109084:	e000ed04 	.word	0xe000ed04

08109088 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8109088:	b580      	push	{r7, lr}
 810908a:	b08e      	sub	sp, #56	@ 0x38
 810908c:	af00      	add	r7, sp, #0
 810908e:	6078      	str	r0, [r7, #4]
 8109090:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8109092:	2300      	movs	r3, #0
 8109094:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8109096:	687b      	ldr	r3, [r7, #4]
 8109098:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 810909a:	2300      	movs	r3, #0
 810909c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810909e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81090a0:	2b00      	cmp	r3, #0
 81090a2:	d10b      	bne.n	81090bc <xQueueSemaphoreTake+0x34>
	__asm volatile
 81090a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81090a8:	f383 8811 	msr	BASEPRI, r3
 81090ac:	f3bf 8f6f 	isb	sy
 81090b0:	f3bf 8f4f 	dsb	sy
 81090b4:	623b      	str	r3, [r7, #32]
}
 81090b6:	bf00      	nop
 81090b8:	bf00      	nop
 81090ba:	e7fd      	b.n	81090b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 81090bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81090be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81090c0:	2b00      	cmp	r3, #0
 81090c2:	d00b      	beq.n	81090dc <xQueueSemaphoreTake+0x54>
	__asm volatile
 81090c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81090c8:	f383 8811 	msr	BASEPRI, r3
 81090cc:	f3bf 8f6f 	isb	sy
 81090d0:	f3bf 8f4f 	dsb	sy
 81090d4:	61fb      	str	r3, [r7, #28]
}
 81090d6:	bf00      	nop
 81090d8:	bf00      	nop
 81090da:	e7fd      	b.n	81090d8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81090dc:	f001 fe06 	bl	810acec <xTaskGetSchedulerState>
 81090e0:	4603      	mov	r3, r0
 81090e2:	2b00      	cmp	r3, #0
 81090e4:	d102      	bne.n	81090ec <xQueueSemaphoreTake+0x64>
 81090e6:	683b      	ldr	r3, [r7, #0]
 81090e8:	2b00      	cmp	r3, #0
 81090ea:	d101      	bne.n	81090f0 <xQueueSemaphoreTake+0x68>
 81090ec:	2301      	movs	r3, #1
 81090ee:	e000      	b.n	81090f2 <xQueueSemaphoreTake+0x6a>
 81090f0:	2300      	movs	r3, #0
 81090f2:	2b00      	cmp	r3, #0
 81090f4:	d10b      	bne.n	810910e <xQueueSemaphoreTake+0x86>
	__asm volatile
 81090f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81090fa:	f383 8811 	msr	BASEPRI, r3
 81090fe:	f3bf 8f6f 	isb	sy
 8109102:	f3bf 8f4f 	dsb	sy
 8109106:	61bb      	str	r3, [r7, #24]
}
 8109108:	bf00      	nop
 810910a:	bf00      	nop
 810910c:	e7fd      	b.n	810910a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810910e:	f7ff f91b 	bl	8108348 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8109112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109116:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8109118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810911a:	2b00      	cmp	r3, #0
 810911c:	d024      	beq.n	8109168 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 810911e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109120:	1e5a      	subs	r2, r3, #1
 8109122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109124:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8109126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109128:	681b      	ldr	r3, [r3, #0]
 810912a:	2b00      	cmp	r3, #0
 810912c:	d104      	bne.n	8109138 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 810912e:	f001 ff57 	bl	810afe0 <pvTaskIncrementMutexHeldCount>
 8109132:	4602      	mov	r2, r0
 8109134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109136:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810913a:	691b      	ldr	r3, [r3, #16]
 810913c:	2b00      	cmp	r3, #0
 810913e:	d00f      	beq.n	8109160 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109142:	3310      	adds	r3, #16
 8109144:	4618      	mov	r0, r3
 8109146:	f001 fbd3 	bl	810a8f0 <xTaskRemoveFromEventList>
 810914a:	4603      	mov	r3, r0
 810914c:	2b00      	cmp	r3, #0
 810914e:	d007      	beq.n	8109160 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8109150:	4b54      	ldr	r3, [pc, #336]	@ (81092a4 <xQueueSemaphoreTake+0x21c>)
 8109152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8109156:	601a      	str	r2, [r3, #0]
 8109158:	f3bf 8f4f 	dsb	sy
 810915c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8109160:	f7ff f924 	bl	81083ac <vPortExitCritical>
				return pdPASS;
 8109164:	2301      	movs	r3, #1
 8109166:	e098      	b.n	810929a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8109168:	683b      	ldr	r3, [r7, #0]
 810916a:	2b00      	cmp	r3, #0
 810916c:	d112      	bne.n	8109194 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 810916e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109170:	2b00      	cmp	r3, #0
 8109172:	d00b      	beq.n	810918c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8109174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109178:	f383 8811 	msr	BASEPRI, r3
 810917c:	f3bf 8f6f 	isb	sy
 8109180:	f3bf 8f4f 	dsb	sy
 8109184:	617b      	str	r3, [r7, #20]
}
 8109186:	bf00      	nop
 8109188:	bf00      	nop
 810918a:	e7fd      	b.n	8109188 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 810918c:	f7ff f90e 	bl	81083ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8109190:	2300      	movs	r3, #0
 8109192:	e082      	b.n	810929a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8109194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109196:	2b00      	cmp	r3, #0
 8109198:	d106      	bne.n	81091a8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810919a:	f107 030c 	add.w	r3, r7, #12
 810919e:	4618      	mov	r0, r3
 81091a0:	f001 fc32 	bl	810aa08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81091a4:	2301      	movs	r3, #1
 81091a6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81091a8:	f7ff f900 	bl	81083ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 81091ac:	f001 f960 	bl	810a470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81091b0:	f7ff f8ca 	bl	8108348 <vPortEnterCritical>
 81091b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81091b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81091ba:	b25b      	sxtb	r3, r3
 81091bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81091c0:	d103      	bne.n	81091ca <xQueueSemaphoreTake+0x142>
 81091c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81091c4:	2200      	movs	r2, #0
 81091c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81091ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81091cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81091d0:	b25b      	sxtb	r3, r3
 81091d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81091d6:	d103      	bne.n	81091e0 <xQueueSemaphoreTake+0x158>
 81091d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81091da:	2200      	movs	r2, #0
 81091dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81091e0:	f7ff f8e4 	bl	81083ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81091e4:	463a      	mov	r2, r7
 81091e6:	f107 030c 	add.w	r3, r7, #12
 81091ea:	4611      	mov	r1, r2
 81091ec:	4618      	mov	r0, r3
 81091ee:	f001 fc21 	bl	810aa34 <xTaskCheckForTimeOut>
 81091f2:	4603      	mov	r3, r0
 81091f4:	2b00      	cmp	r3, #0
 81091f6:	d132      	bne.n	810925e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81091f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81091fa:	f000 f9f5 	bl	81095e8 <prvIsQueueEmpty>
 81091fe:	4603      	mov	r3, r0
 8109200:	2b00      	cmp	r3, #0
 8109202:	d026      	beq.n	8109252 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8109204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109206:	681b      	ldr	r3, [r3, #0]
 8109208:	2b00      	cmp	r3, #0
 810920a:	d109      	bne.n	8109220 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 810920c:	f7ff f89c 	bl	8108348 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8109210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109212:	689b      	ldr	r3, [r3, #8]
 8109214:	4618      	mov	r0, r3
 8109216:	f001 fd87 	bl	810ad28 <xTaskPriorityInherit>
 810921a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 810921c:	f7ff f8c6 	bl	81083ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8109220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109222:	3324      	adds	r3, #36	@ 0x24
 8109224:	683a      	ldr	r2, [r7, #0]
 8109226:	4611      	mov	r1, r2
 8109228:	4618      	mov	r0, r3
 810922a:	f001 fb0f 	bl	810a84c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810922e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8109230:	f000 f988 	bl	8109544 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8109234:	f001 f92a 	bl	810a48c <xTaskResumeAll>
 8109238:	4603      	mov	r3, r0
 810923a:	2b00      	cmp	r3, #0
 810923c:	f47f af67 	bne.w	810910e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8109240:	4b18      	ldr	r3, [pc, #96]	@ (81092a4 <xQueueSemaphoreTake+0x21c>)
 8109242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8109246:	601a      	str	r2, [r3, #0]
 8109248:	f3bf 8f4f 	dsb	sy
 810924c:	f3bf 8f6f 	isb	sy
 8109250:	e75d      	b.n	810910e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8109252:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8109254:	f000 f976 	bl	8109544 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8109258:	f001 f918 	bl	810a48c <xTaskResumeAll>
 810925c:	e757      	b.n	810910e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 810925e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8109260:	f000 f970 	bl	8109544 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8109264:	f001 f912 	bl	810a48c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8109268:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810926a:	f000 f9bd 	bl	81095e8 <prvIsQueueEmpty>
 810926e:	4603      	mov	r3, r0
 8109270:	2b00      	cmp	r3, #0
 8109272:	f43f af4c 	beq.w	810910e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8109276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109278:	2b00      	cmp	r3, #0
 810927a:	d00d      	beq.n	8109298 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 810927c:	f7ff f864 	bl	8108348 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8109280:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8109282:	f000 f8b7 	bl	81093f4 <prvGetDisinheritPriorityAfterTimeout>
 8109286:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8109288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810928a:	689b      	ldr	r3, [r3, #8]
 810928c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810928e:	4618      	mov	r0, r3
 8109290:	f001 fe22 	bl	810aed8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8109294:	f7ff f88a 	bl	81083ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8109298:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810929a:	4618      	mov	r0, r3
 810929c:	3738      	adds	r7, #56	@ 0x38
 810929e:	46bd      	mov	sp, r7
 81092a0:	bd80      	pop	{r7, pc}
 81092a2:	bf00      	nop
 81092a4:	e000ed04 	.word	0xe000ed04

081092a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 81092a8:	b580      	push	{r7, lr}
 81092aa:	b08e      	sub	sp, #56	@ 0x38
 81092ac:	af00      	add	r7, sp, #0
 81092ae:	60f8      	str	r0, [r7, #12]
 81092b0:	60b9      	str	r1, [r7, #8]
 81092b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 81092b4:	68fb      	ldr	r3, [r7, #12]
 81092b6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 81092b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81092ba:	2b00      	cmp	r3, #0
 81092bc:	d10b      	bne.n	81092d6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 81092be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81092c2:	f383 8811 	msr	BASEPRI, r3
 81092c6:	f3bf 8f6f 	isb	sy
 81092ca:	f3bf 8f4f 	dsb	sy
 81092ce:	623b      	str	r3, [r7, #32]
}
 81092d0:	bf00      	nop
 81092d2:	bf00      	nop
 81092d4:	e7fd      	b.n	81092d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81092d6:	68bb      	ldr	r3, [r7, #8]
 81092d8:	2b00      	cmp	r3, #0
 81092da:	d103      	bne.n	81092e4 <xQueueReceiveFromISR+0x3c>
 81092dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81092de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81092e0:	2b00      	cmp	r3, #0
 81092e2:	d101      	bne.n	81092e8 <xQueueReceiveFromISR+0x40>
 81092e4:	2301      	movs	r3, #1
 81092e6:	e000      	b.n	81092ea <xQueueReceiveFromISR+0x42>
 81092e8:	2300      	movs	r3, #0
 81092ea:	2b00      	cmp	r3, #0
 81092ec:	d10b      	bne.n	8109306 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 81092ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81092f2:	f383 8811 	msr	BASEPRI, r3
 81092f6:	f3bf 8f6f 	isb	sy
 81092fa:	f3bf 8f4f 	dsb	sy
 81092fe:	61fb      	str	r3, [r7, #28]
}
 8109300:	bf00      	nop
 8109302:	bf00      	nop
 8109304:	e7fd      	b.n	8109302 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8109306:	f7ff f8ff 	bl	8108508 <vPortValidateInterruptPriority>
	__asm volatile
 810930a:	f3ef 8211 	mrs	r2, BASEPRI
 810930e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109312:	f383 8811 	msr	BASEPRI, r3
 8109316:	f3bf 8f6f 	isb	sy
 810931a:	f3bf 8f4f 	dsb	sy
 810931e:	61ba      	str	r2, [r7, #24]
 8109320:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8109322:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8109324:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8109326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810932a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810932c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810932e:	2b00      	cmp	r3, #0
 8109330:	d02f      	beq.n	8109392 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8109332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109334:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8109338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 810933c:	68b9      	ldr	r1, [r7, #8]
 810933e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8109340:	f000 f8da 	bl	81094f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8109344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109346:	1e5a      	subs	r2, r3, #1
 8109348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810934a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 810934c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8109350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109354:	d112      	bne.n	810937c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109358:	691b      	ldr	r3, [r3, #16]
 810935a:	2b00      	cmp	r3, #0
 810935c:	d016      	beq.n	810938c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810935e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109360:	3310      	adds	r3, #16
 8109362:	4618      	mov	r0, r3
 8109364:	f001 fac4 	bl	810a8f0 <xTaskRemoveFromEventList>
 8109368:	4603      	mov	r3, r0
 810936a:	2b00      	cmp	r3, #0
 810936c:	d00e      	beq.n	810938c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 810936e:	687b      	ldr	r3, [r7, #4]
 8109370:	2b00      	cmp	r3, #0
 8109372:	d00b      	beq.n	810938c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8109374:	687b      	ldr	r3, [r7, #4]
 8109376:	2201      	movs	r2, #1
 8109378:	601a      	str	r2, [r3, #0]
 810937a:	e007      	b.n	810938c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 810937c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109380:	3301      	adds	r3, #1
 8109382:	b2db      	uxtb	r3, r3
 8109384:	b25a      	sxtb	r2, r3
 8109386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 810938c:	2301      	movs	r3, #1
 810938e:	637b      	str	r3, [r7, #52]	@ 0x34
 8109390:	e001      	b.n	8109396 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8109392:	2300      	movs	r3, #0
 8109394:	637b      	str	r3, [r7, #52]	@ 0x34
 8109396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109398:	613b      	str	r3, [r7, #16]
	__asm volatile
 810939a:	693b      	ldr	r3, [r7, #16]
 810939c:	f383 8811 	msr	BASEPRI, r3
}
 81093a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81093a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 81093a4:	4618      	mov	r0, r3
 81093a6:	3738      	adds	r7, #56	@ 0x38
 81093a8:	46bd      	mov	sp, r7
 81093aa:	bd80      	pop	{r7, pc}

081093ac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 81093ac:	b580      	push	{r7, lr}
 81093ae:	b084      	sub	sp, #16
 81093b0:	af00      	add	r7, sp, #0
 81093b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 81093b4:	687b      	ldr	r3, [r7, #4]
 81093b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 81093b8:	68fb      	ldr	r3, [r7, #12]
 81093ba:	2b00      	cmp	r3, #0
 81093bc:	d10b      	bne.n	81093d6 <vQueueDelete+0x2a>
	__asm volatile
 81093be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81093c2:	f383 8811 	msr	BASEPRI, r3
 81093c6:	f3bf 8f6f 	isb	sy
 81093ca:	f3bf 8f4f 	dsb	sy
 81093ce:	60bb      	str	r3, [r7, #8]
}
 81093d0:	bf00      	nop
 81093d2:	bf00      	nop
 81093d4:	e7fd      	b.n	81093d2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 81093d6:	68f8      	ldr	r0, [r7, #12]
 81093d8:	f000 f95e 	bl	8109698 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 81093dc:	68fb      	ldr	r3, [r7, #12]
 81093de:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 81093e2:	2b00      	cmp	r3, #0
 81093e4:	d102      	bne.n	81093ec <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 81093e6:	68f8      	ldr	r0, [r7, #12]
 81093e8:	f7fe fca8 	bl	8107d3c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 81093ec:	bf00      	nop
 81093ee:	3710      	adds	r7, #16
 81093f0:	46bd      	mov	sp, r7
 81093f2:	bd80      	pop	{r7, pc}

081093f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 81093f4:	b480      	push	{r7}
 81093f6:	b085      	sub	sp, #20
 81093f8:	af00      	add	r7, sp, #0
 81093fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 81093fc:	687b      	ldr	r3, [r7, #4]
 81093fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109400:	2b00      	cmp	r3, #0
 8109402:	d006      	beq.n	8109412 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8109404:	687b      	ldr	r3, [r7, #4]
 8109406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109408:	681b      	ldr	r3, [r3, #0]
 810940a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 810940e:	60fb      	str	r3, [r7, #12]
 8109410:	e001      	b.n	8109416 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8109412:	2300      	movs	r3, #0
 8109414:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8109416:	68fb      	ldr	r3, [r7, #12]
	}
 8109418:	4618      	mov	r0, r3
 810941a:	3714      	adds	r7, #20
 810941c:	46bd      	mov	sp, r7
 810941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109422:	4770      	bx	lr

08109424 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8109424:	b580      	push	{r7, lr}
 8109426:	b086      	sub	sp, #24
 8109428:	af00      	add	r7, sp, #0
 810942a:	60f8      	str	r0, [r7, #12]
 810942c:	60b9      	str	r1, [r7, #8]
 810942e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8109430:	2300      	movs	r3, #0
 8109432:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8109434:	68fb      	ldr	r3, [r7, #12]
 8109436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109438:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810943a:	68fb      	ldr	r3, [r7, #12]
 810943c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810943e:	2b00      	cmp	r3, #0
 8109440:	d10d      	bne.n	810945e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8109442:	68fb      	ldr	r3, [r7, #12]
 8109444:	681b      	ldr	r3, [r3, #0]
 8109446:	2b00      	cmp	r3, #0
 8109448:	d14d      	bne.n	81094e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810944a:	68fb      	ldr	r3, [r7, #12]
 810944c:	689b      	ldr	r3, [r3, #8]
 810944e:	4618      	mov	r0, r3
 8109450:	f001 fcd2 	bl	810adf8 <xTaskPriorityDisinherit>
 8109454:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8109456:	68fb      	ldr	r3, [r7, #12]
 8109458:	2200      	movs	r2, #0
 810945a:	609a      	str	r2, [r3, #8]
 810945c:	e043      	b.n	81094e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810945e:	687b      	ldr	r3, [r7, #4]
 8109460:	2b00      	cmp	r3, #0
 8109462:	d119      	bne.n	8109498 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8109464:	68fb      	ldr	r3, [r7, #12]
 8109466:	6858      	ldr	r0, [r3, #4]
 8109468:	68fb      	ldr	r3, [r7, #12]
 810946a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810946c:	461a      	mov	r2, r3
 810946e:	68b9      	ldr	r1, [r7, #8]
 8109470:	f00d fbd9 	bl	8116c26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8109474:	68fb      	ldr	r3, [r7, #12]
 8109476:	685a      	ldr	r2, [r3, #4]
 8109478:	68fb      	ldr	r3, [r7, #12]
 810947a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810947c:	441a      	add	r2, r3
 810947e:	68fb      	ldr	r3, [r7, #12]
 8109480:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8109482:	68fb      	ldr	r3, [r7, #12]
 8109484:	685a      	ldr	r2, [r3, #4]
 8109486:	68fb      	ldr	r3, [r7, #12]
 8109488:	689b      	ldr	r3, [r3, #8]
 810948a:	429a      	cmp	r2, r3
 810948c:	d32b      	bcc.n	81094e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810948e:	68fb      	ldr	r3, [r7, #12]
 8109490:	681a      	ldr	r2, [r3, #0]
 8109492:	68fb      	ldr	r3, [r7, #12]
 8109494:	605a      	str	r2, [r3, #4]
 8109496:	e026      	b.n	81094e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8109498:	68fb      	ldr	r3, [r7, #12]
 810949a:	68d8      	ldr	r0, [r3, #12]
 810949c:	68fb      	ldr	r3, [r7, #12]
 810949e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81094a0:	461a      	mov	r2, r3
 81094a2:	68b9      	ldr	r1, [r7, #8]
 81094a4:	f00d fbbf 	bl	8116c26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 81094a8:	68fb      	ldr	r3, [r7, #12]
 81094aa:	68da      	ldr	r2, [r3, #12]
 81094ac:	68fb      	ldr	r3, [r7, #12]
 81094ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81094b0:	425b      	negs	r3, r3
 81094b2:	441a      	add	r2, r3
 81094b4:	68fb      	ldr	r3, [r7, #12]
 81094b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81094b8:	68fb      	ldr	r3, [r7, #12]
 81094ba:	68da      	ldr	r2, [r3, #12]
 81094bc:	68fb      	ldr	r3, [r7, #12]
 81094be:	681b      	ldr	r3, [r3, #0]
 81094c0:	429a      	cmp	r2, r3
 81094c2:	d207      	bcs.n	81094d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 81094c4:	68fb      	ldr	r3, [r7, #12]
 81094c6:	689a      	ldr	r2, [r3, #8]
 81094c8:	68fb      	ldr	r3, [r7, #12]
 81094ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81094cc:	425b      	negs	r3, r3
 81094ce:	441a      	add	r2, r3
 81094d0:	68fb      	ldr	r3, [r7, #12]
 81094d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 81094d4:	687b      	ldr	r3, [r7, #4]
 81094d6:	2b02      	cmp	r3, #2
 81094d8:	d105      	bne.n	81094e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81094da:	693b      	ldr	r3, [r7, #16]
 81094dc:	2b00      	cmp	r3, #0
 81094de:	d002      	beq.n	81094e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 81094e0:	693b      	ldr	r3, [r7, #16]
 81094e2:	3b01      	subs	r3, #1
 81094e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 81094e6:	693b      	ldr	r3, [r7, #16]
 81094e8:	1c5a      	adds	r2, r3, #1
 81094ea:	68fb      	ldr	r3, [r7, #12]
 81094ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 81094ee:	697b      	ldr	r3, [r7, #20]
}
 81094f0:	4618      	mov	r0, r3
 81094f2:	3718      	adds	r7, #24
 81094f4:	46bd      	mov	sp, r7
 81094f6:	bd80      	pop	{r7, pc}

081094f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 81094f8:	b580      	push	{r7, lr}
 81094fa:	b082      	sub	sp, #8
 81094fc:	af00      	add	r7, sp, #0
 81094fe:	6078      	str	r0, [r7, #4]
 8109500:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8109502:	687b      	ldr	r3, [r7, #4]
 8109504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109506:	2b00      	cmp	r3, #0
 8109508:	d018      	beq.n	810953c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810950a:	687b      	ldr	r3, [r7, #4]
 810950c:	68da      	ldr	r2, [r3, #12]
 810950e:	687b      	ldr	r3, [r7, #4]
 8109510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109512:	441a      	add	r2, r3
 8109514:	687b      	ldr	r3, [r7, #4]
 8109516:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8109518:	687b      	ldr	r3, [r7, #4]
 810951a:	68da      	ldr	r2, [r3, #12]
 810951c:	687b      	ldr	r3, [r7, #4]
 810951e:	689b      	ldr	r3, [r3, #8]
 8109520:	429a      	cmp	r2, r3
 8109522:	d303      	bcc.n	810952c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8109524:	687b      	ldr	r3, [r7, #4]
 8109526:	681a      	ldr	r2, [r3, #0]
 8109528:	687b      	ldr	r3, [r7, #4]
 810952a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810952c:	687b      	ldr	r3, [r7, #4]
 810952e:	68d9      	ldr	r1, [r3, #12]
 8109530:	687b      	ldr	r3, [r7, #4]
 8109532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109534:	461a      	mov	r2, r3
 8109536:	6838      	ldr	r0, [r7, #0]
 8109538:	f00d fb75 	bl	8116c26 <memcpy>
	}
}
 810953c:	bf00      	nop
 810953e:	3708      	adds	r7, #8
 8109540:	46bd      	mov	sp, r7
 8109542:	bd80      	pop	{r7, pc}

08109544 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8109544:	b580      	push	{r7, lr}
 8109546:	b084      	sub	sp, #16
 8109548:	af00      	add	r7, sp, #0
 810954a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810954c:	f7fe fefc 	bl	8108348 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8109550:	687b      	ldr	r3, [r7, #4]
 8109552:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8109556:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8109558:	e011      	b.n	810957e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810955a:	687b      	ldr	r3, [r7, #4]
 810955c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810955e:	2b00      	cmp	r3, #0
 8109560:	d012      	beq.n	8109588 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8109562:	687b      	ldr	r3, [r7, #4]
 8109564:	3324      	adds	r3, #36	@ 0x24
 8109566:	4618      	mov	r0, r3
 8109568:	f001 f9c2 	bl	810a8f0 <xTaskRemoveFromEventList>
 810956c:	4603      	mov	r3, r0
 810956e:	2b00      	cmp	r3, #0
 8109570:	d001      	beq.n	8109576 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8109572:	f001 fac3 	bl	810aafc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8109576:	7bfb      	ldrb	r3, [r7, #15]
 8109578:	3b01      	subs	r3, #1
 810957a:	b2db      	uxtb	r3, r3
 810957c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810957e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8109582:	2b00      	cmp	r3, #0
 8109584:	dce9      	bgt.n	810955a <prvUnlockQueue+0x16>
 8109586:	e000      	b.n	810958a <prvUnlockQueue+0x46>
					break;
 8109588:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810958a:	687b      	ldr	r3, [r7, #4]
 810958c:	22ff      	movs	r2, #255	@ 0xff
 810958e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8109592:	f7fe ff0b 	bl	81083ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8109596:	f7fe fed7 	bl	8108348 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810959a:	687b      	ldr	r3, [r7, #4]
 810959c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81095a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 81095a2:	e011      	b.n	81095c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81095a4:	687b      	ldr	r3, [r7, #4]
 81095a6:	691b      	ldr	r3, [r3, #16]
 81095a8:	2b00      	cmp	r3, #0
 81095aa:	d012      	beq.n	81095d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81095ac:	687b      	ldr	r3, [r7, #4]
 81095ae:	3310      	adds	r3, #16
 81095b0:	4618      	mov	r0, r3
 81095b2:	f001 f99d 	bl	810a8f0 <xTaskRemoveFromEventList>
 81095b6:	4603      	mov	r3, r0
 81095b8:	2b00      	cmp	r3, #0
 81095ba:	d001      	beq.n	81095c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 81095bc:	f001 fa9e 	bl	810aafc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 81095c0:	7bbb      	ldrb	r3, [r7, #14]
 81095c2:	3b01      	subs	r3, #1
 81095c4:	b2db      	uxtb	r3, r3
 81095c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 81095c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 81095cc:	2b00      	cmp	r3, #0
 81095ce:	dce9      	bgt.n	81095a4 <prvUnlockQueue+0x60>
 81095d0:	e000      	b.n	81095d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 81095d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 81095d4:	687b      	ldr	r3, [r7, #4]
 81095d6:	22ff      	movs	r2, #255	@ 0xff
 81095d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 81095dc:	f7fe fee6 	bl	81083ac <vPortExitCritical>
}
 81095e0:	bf00      	nop
 81095e2:	3710      	adds	r7, #16
 81095e4:	46bd      	mov	sp, r7
 81095e6:	bd80      	pop	{r7, pc}

081095e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 81095e8:	b580      	push	{r7, lr}
 81095ea:	b084      	sub	sp, #16
 81095ec:	af00      	add	r7, sp, #0
 81095ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81095f0:	f7fe feaa 	bl	8108348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 81095f4:	687b      	ldr	r3, [r7, #4]
 81095f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81095f8:	2b00      	cmp	r3, #0
 81095fa:	d102      	bne.n	8109602 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 81095fc:	2301      	movs	r3, #1
 81095fe:	60fb      	str	r3, [r7, #12]
 8109600:	e001      	b.n	8109606 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8109602:	2300      	movs	r3, #0
 8109604:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8109606:	f7fe fed1 	bl	81083ac <vPortExitCritical>

	return xReturn;
 810960a:	68fb      	ldr	r3, [r7, #12]
}
 810960c:	4618      	mov	r0, r3
 810960e:	3710      	adds	r7, #16
 8109610:	46bd      	mov	sp, r7
 8109612:	bd80      	pop	{r7, pc}

08109614 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8109614:	b580      	push	{r7, lr}
 8109616:	b084      	sub	sp, #16
 8109618:	af00      	add	r7, sp, #0
 810961a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810961c:	f7fe fe94 	bl	8108348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8109620:	687b      	ldr	r3, [r7, #4]
 8109622:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8109624:	687b      	ldr	r3, [r7, #4]
 8109626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109628:	429a      	cmp	r2, r3
 810962a:	d102      	bne.n	8109632 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810962c:	2301      	movs	r3, #1
 810962e:	60fb      	str	r3, [r7, #12]
 8109630:	e001      	b.n	8109636 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8109632:	2300      	movs	r3, #0
 8109634:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8109636:	f7fe feb9 	bl	81083ac <vPortExitCritical>

	return xReturn;
 810963a:	68fb      	ldr	r3, [r7, #12]
}
 810963c:	4618      	mov	r0, r3
 810963e:	3710      	adds	r7, #16
 8109640:	46bd      	mov	sp, r7
 8109642:	bd80      	pop	{r7, pc}

08109644 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8109644:	b480      	push	{r7}
 8109646:	b085      	sub	sp, #20
 8109648:	af00      	add	r7, sp, #0
 810964a:	6078      	str	r0, [r7, #4]
 810964c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810964e:	2300      	movs	r3, #0
 8109650:	60fb      	str	r3, [r7, #12]
 8109652:	e014      	b.n	810967e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8109654:	4a0f      	ldr	r2, [pc, #60]	@ (8109694 <vQueueAddToRegistry+0x50>)
 8109656:	68fb      	ldr	r3, [r7, #12]
 8109658:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810965c:	2b00      	cmp	r3, #0
 810965e:	d10b      	bne.n	8109678 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8109660:	490c      	ldr	r1, [pc, #48]	@ (8109694 <vQueueAddToRegistry+0x50>)
 8109662:	68fb      	ldr	r3, [r7, #12]
 8109664:	683a      	ldr	r2, [r7, #0]
 8109666:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810966a:	4a0a      	ldr	r2, [pc, #40]	@ (8109694 <vQueueAddToRegistry+0x50>)
 810966c:	68fb      	ldr	r3, [r7, #12]
 810966e:	00db      	lsls	r3, r3, #3
 8109670:	4413      	add	r3, r2
 8109672:	687a      	ldr	r2, [r7, #4]
 8109674:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8109676:	e006      	b.n	8109686 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8109678:	68fb      	ldr	r3, [r7, #12]
 810967a:	3301      	adds	r3, #1
 810967c:	60fb      	str	r3, [r7, #12]
 810967e:	68fb      	ldr	r3, [r7, #12]
 8109680:	2b07      	cmp	r3, #7
 8109682:	d9e7      	bls.n	8109654 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8109684:	bf00      	nop
 8109686:	bf00      	nop
 8109688:	3714      	adds	r7, #20
 810968a:	46bd      	mov	sp, r7
 810968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109690:	4770      	bx	lr
 8109692:	bf00      	nop
 8109694:	1000461c 	.word	0x1000461c

08109698 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8109698:	b480      	push	{r7}
 810969a:	b085      	sub	sp, #20
 810969c:	af00      	add	r7, sp, #0
 810969e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81096a0:	2300      	movs	r3, #0
 81096a2:	60fb      	str	r3, [r7, #12]
 81096a4:	e016      	b.n	81096d4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 81096a6:	4a10      	ldr	r2, [pc, #64]	@ (81096e8 <vQueueUnregisterQueue+0x50>)
 81096a8:	68fb      	ldr	r3, [r7, #12]
 81096aa:	00db      	lsls	r3, r3, #3
 81096ac:	4413      	add	r3, r2
 81096ae:	685b      	ldr	r3, [r3, #4]
 81096b0:	687a      	ldr	r2, [r7, #4]
 81096b2:	429a      	cmp	r2, r3
 81096b4:	d10b      	bne.n	81096ce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 81096b6:	4a0c      	ldr	r2, [pc, #48]	@ (81096e8 <vQueueUnregisterQueue+0x50>)
 81096b8:	68fb      	ldr	r3, [r7, #12]
 81096ba:	2100      	movs	r1, #0
 81096bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 81096c0:	4a09      	ldr	r2, [pc, #36]	@ (81096e8 <vQueueUnregisterQueue+0x50>)
 81096c2:	68fb      	ldr	r3, [r7, #12]
 81096c4:	00db      	lsls	r3, r3, #3
 81096c6:	4413      	add	r3, r2
 81096c8:	2200      	movs	r2, #0
 81096ca:	605a      	str	r2, [r3, #4]
				break;
 81096cc:	e006      	b.n	81096dc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81096ce:	68fb      	ldr	r3, [r7, #12]
 81096d0:	3301      	adds	r3, #1
 81096d2:	60fb      	str	r3, [r7, #12]
 81096d4:	68fb      	ldr	r3, [r7, #12]
 81096d6:	2b07      	cmp	r3, #7
 81096d8:	d9e5      	bls.n	81096a6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 81096da:	bf00      	nop
 81096dc:	bf00      	nop
 81096de:	3714      	adds	r7, #20
 81096e0:	46bd      	mov	sp, r7
 81096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096e6:	4770      	bx	lr
 81096e8:	1000461c 	.word	0x1000461c

081096ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81096ec:	b580      	push	{r7, lr}
 81096ee:	b086      	sub	sp, #24
 81096f0:	af00      	add	r7, sp, #0
 81096f2:	60f8      	str	r0, [r7, #12]
 81096f4:	60b9      	str	r1, [r7, #8]
 81096f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 81096f8:	68fb      	ldr	r3, [r7, #12]
 81096fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 81096fc:	f7fe fe24 	bl	8108348 <vPortEnterCritical>
 8109700:	697b      	ldr	r3, [r7, #20]
 8109702:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8109706:	b25b      	sxtb	r3, r3
 8109708:	f1b3 3fff 	cmp.w	r3, #4294967295
 810970c:	d103      	bne.n	8109716 <vQueueWaitForMessageRestricted+0x2a>
 810970e:	697b      	ldr	r3, [r7, #20]
 8109710:	2200      	movs	r2, #0
 8109712:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8109716:	697b      	ldr	r3, [r7, #20]
 8109718:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810971c:	b25b      	sxtb	r3, r3
 810971e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109722:	d103      	bne.n	810972c <vQueueWaitForMessageRestricted+0x40>
 8109724:	697b      	ldr	r3, [r7, #20]
 8109726:	2200      	movs	r2, #0
 8109728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810972c:	f7fe fe3e 	bl	81083ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8109730:	697b      	ldr	r3, [r7, #20]
 8109732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109734:	2b00      	cmp	r3, #0
 8109736:	d106      	bne.n	8109746 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8109738:	697b      	ldr	r3, [r7, #20]
 810973a:	3324      	adds	r3, #36	@ 0x24
 810973c:	687a      	ldr	r2, [r7, #4]
 810973e:	68b9      	ldr	r1, [r7, #8]
 8109740:	4618      	mov	r0, r3
 8109742:	f001 f8a9 	bl	810a898 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8109746:	6978      	ldr	r0, [r7, #20]
 8109748:	f7ff fefc 	bl	8109544 <prvUnlockQueue>
	}
 810974c:	bf00      	nop
 810974e:	3718      	adds	r7, #24
 8109750:	46bd      	mov	sp, r7
 8109752:	bd80      	pop	{r7, pc}

08109754 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 8109754:	b580      	push	{r7, lr}
 8109756:	b090      	sub	sp, #64	@ 0x40
 8109758:	af02      	add	r7, sp, #8
 810975a:	60f8      	str	r0, [r7, #12]
 810975c:	60b9      	str	r1, [r7, #8]
 810975e:	607a      	str	r2, [r7, #4]
 8109760:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 8109762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8109764:	62fb      	str	r3, [r7, #44]	@ 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 8109766:	683b      	ldr	r3, [r7, #0]
 8109768:	2b00      	cmp	r3, #0
 810976a:	d10b      	bne.n	8109784 <xStreamBufferGenericCreateStatic+0x30>
	__asm volatile
 810976c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109770:	f383 8811 	msr	BASEPRI, r3
 8109774:	f3bf 8f6f 	isb	sy
 8109778:	f3bf 8f4f 	dsb	sy
 810977c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810977e:	bf00      	nop
 8109780:	bf00      	nop
 8109782:	e7fd      	b.n	8109780 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 8109784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8109786:	2b00      	cmp	r3, #0
 8109788:	d10b      	bne.n	81097a2 <xStreamBufferGenericCreateStatic+0x4e>
	__asm volatile
 810978a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810978e:	f383 8811 	msr	BASEPRI, r3
 8109792:	f3bf 8f6f 	isb	sy
 8109796:	f3bf 8f4f 	dsb	sy
 810979a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810979c:	bf00      	nop
 810979e:	bf00      	nop
 81097a0:	e7fd      	b.n	810979e <xStreamBufferGenericCreateStatic+0x4a>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 81097a2:	68ba      	ldr	r2, [r7, #8]
 81097a4:	68fb      	ldr	r3, [r7, #12]
 81097a6:	429a      	cmp	r2, r3
 81097a8:	d90b      	bls.n	81097c2 <xStreamBufferGenericCreateStatic+0x6e>
	__asm volatile
 81097aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81097ae:	f383 8811 	msr	BASEPRI, r3
 81097b2:	f3bf 8f6f 	isb	sy
 81097b6:	f3bf 8f4f 	dsb	sy
 81097ba:	623b      	str	r3, [r7, #32]
}
 81097bc:	bf00      	nop
 81097be:	bf00      	nop
 81097c0:	e7fd      	b.n	81097be <xStreamBufferGenericCreateStatic+0x6a>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 81097c2:	68bb      	ldr	r3, [r7, #8]
 81097c4:	2b00      	cmp	r3, #0
 81097c6:	d101      	bne.n	81097cc <xStreamBufferGenericCreateStatic+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 81097c8:	2301      	movs	r3, #1
 81097ca:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 81097cc:	687b      	ldr	r3, [r7, #4]
 81097ce:	2b00      	cmp	r3, #0
 81097d0:	d003      	beq.n	81097da <xStreamBufferGenericCreateStatic+0x86>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 81097d2:	2303      	movs	r3, #3
 81097d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 81097d8:	e002      	b.n	81097e0 <xStreamBufferGenericCreateStatic+0x8c>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 81097da:	2302      	movs	r3, #2
 81097dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 81097e0:	68fb      	ldr	r3, [r7, #12]
 81097e2:	2b04      	cmp	r3, #4
 81097e4:	d80b      	bhi.n	81097fe <xStreamBufferGenericCreateStatic+0xaa>
	__asm volatile
 81097e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81097ea:	f383 8811 	msr	BASEPRI, r3
 81097ee:	f3bf 8f6f 	isb	sy
 81097f2:	f3bf 8f4f 	dsb	sy
 81097f6:	61fb      	str	r3, [r7, #28]
}
 81097f8:	bf00      	nop
 81097fa:	bf00      	nop
 81097fc:	e7fd      	b.n	81097fa <xStreamBufferGenericCreateStatic+0xa6>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 81097fe:	2324      	movs	r3, #36	@ 0x24
 8109800:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8109802:	697b      	ldr	r3, [r7, #20]
 8109804:	2b24      	cmp	r3, #36	@ 0x24
 8109806:	d00b      	beq.n	8109820 <xStreamBufferGenericCreateStatic+0xcc>
	__asm volatile
 8109808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810980c:	f383 8811 	msr	BASEPRI, r3
 8109810:	f3bf 8f6f 	isb	sy
 8109814:	f3bf 8f4f 	dsb	sy
 8109818:	61bb      	str	r3, [r7, #24]
}
 810981a:	bf00      	nop
 810981c:	bf00      	nop
 810981e:	e7fd      	b.n	810981c <xStreamBufferGenericCreateStatic+0xc8>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 8109820:	683b      	ldr	r3, [r7, #0]
 8109822:	2b00      	cmp	r3, #0
 8109824:	d015      	beq.n	8109852 <xStreamBufferGenericCreateStatic+0xfe>
 8109826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8109828:	2b00      	cmp	r3, #0
 810982a:	d012      	beq.n	8109852 <xStreamBufferGenericCreateStatic+0xfe>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 810982c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8109830:	9300      	str	r3, [sp, #0]
 8109832:	68bb      	ldr	r3, [r7, #8]
 8109834:	68fa      	ldr	r2, [r7, #12]
 8109836:	6839      	ldr	r1, [r7, #0]
 8109838:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810983a:	f000 fb81 	bl	8109f40 <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 810983e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109840:	7f1b      	ldrb	r3, [r3, #28]
 8109842:	f043 0302 	orr.w	r3, r3, #2
 8109846:	b2da      	uxtb	r2, r3
 8109848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810984a:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 810984c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810984e:	637b      	str	r3, [r7, #52]	@ 0x34
 8109850:	e001      	b.n	8109856 <xStreamBufferGenericCreateStatic+0x102>
		}
		else
		{
			xReturn = NULL;
 8109852:	2300      	movs	r3, #0
 8109854:	637b      	str	r3, [r7, #52]	@ 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 8109856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8109858:	4618      	mov	r0, r3
 810985a:	3738      	adds	r7, #56	@ 0x38
 810985c:	46bd      	mov	sp, r7
 810985e:	bd80      	pop	{r7, pc}

08109860 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8109860:	b480      	push	{r7}
 8109862:	b087      	sub	sp, #28
 8109864:	af00      	add	r7, sp, #0
 8109866:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8109868:	687b      	ldr	r3, [r7, #4]
 810986a:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 810986c:	693b      	ldr	r3, [r7, #16]
 810986e:	2b00      	cmp	r3, #0
 8109870:	d10b      	bne.n	810988a <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8109872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109876:	f383 8811 	msr	BASEPRI, r3
 810987a:	f3bf 8f6f 	isb	sy
 810987e:	f3bf 8f4f 	dsb	sy
 8109882:	60fb      	str	r3, [r7, #12]
}
 8109884:	bf00      	nop
 8109886:	bf00      	nop
 8109888:	e7fd      	b.n	8109886 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 810988a:	693b      	ldr	r3, [r7, #16]
 810988c:	689a      	ldr	r2, [r3, #8]
 810988e:	693b      	ldr	r3, [r7, #16]
 8109890:	681b      	ldr	r3, [r3, #0]
 8109892:	4413      	add	r3, r2
 8109894:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8109896:	693b      	ldr	r3, [r7, #16]
 8109898:	685b      	ldr	r3, [r3, #4]
 810989a:	697a      	ldr	r2, [r7, #20]
 810989c:	1ad3      	subs	r3, r2, r3
 810989e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 81098a0:	697b      	ldr	r3, [r7, #20]
 81098a2:	3b01      	subs	r3, #1
 81098a4:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 81098a6:	693b      	ldr	r3, [r7, #16]
 81098a8:	689b      	ldr	r3, [r3, #8]
 81098aa:	697a      	ldr	r2, [r7, #20]
 81098ac:	429a      	cmp	r2, r3
 81098ae:	d304      	bcc.n	81098ba <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 81098b0:	693b      	ldr	r3, [r7, #16]
 81098b2:	689b      	ldr	r3, [r3, #8]
 81098b4:	697a      	ldr	r2, [r7, #20]
 81098b6:	1ad3      	subs	r3, r2, r3
 81098b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 81098ba:	697b      	ldr	r3, [r7, #20]
}
 81098bc:	4618      	mov	r0, r3
 81098be:	371c      	adds	r7, #28
 81098c0:	46bd      	mov	sp, r7
 81098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098c6:	4770      	bx	lr

081098c8 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 81098c8:	b580      	push	{r7, lr}
 81098ca:	b090      	sub	sp, #64	@ 0x40
 81098cc:	af02      	add	r7, sp, #8
 81098ce:	60f8      	str	r0, [r7, #12]
 81098d0:	60b9      	str	r1, [r7, #8]
 81098d2:	607a      	str	r2, [r7, #4]
 81098d4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 81098d6:	68fb      	ldr	r3, [r7, #12]
 81098d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 81098da:	2300      	movs	r3, #0
 81098dc:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 81098de:	687b      	ldr	r3, [r7, #4]
 81098e0:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 81098e2:	68bb      	ldr	r3, [r7, #8]
 81098e4:	2b00      	cmp	r3, #0
 81098e6:	d10b      	bne.n	8109900 <xStreamBufferSend+0x38>
	__asm volatile
 81098e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81098ec:	f383 8811 	msr	BASEPRI, r3
 81098f0:	f3bf 8f6f 	isb	sy
 81098f4:	f3bf 8f4f 	dsb	sy
 81098f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81098fa:	bf00      	nop
 81098fc:	bf00      	nop
 81098fe:	e7fd      	b.n	81098fc <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8109900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109902:	2b00      	cmp	r3, #0
 8109904:	d10b      	bne.n	810991e <xStreamBufferSend+0x56>
	__asm volatile
 8109906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810990a:	f383 8811 	msr	BASEPRI, r3
 810990e:	f3bf 8f6f 	isb	sy
 8109912:	f3bf 8f4f 	dsb	sy
 8109916:	623b      	str	r3, [r7, #32]
}
 8109918:	bf00      	nop
 810991a:	bf00      	nop
 810991c:	e7fd      	b.n	810991a <xStreamBufferSend+0x52>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 810991e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109920:	7f1b      	ldrb	r3, [r3, #28]
 8109922:	f003 0301 	and.w	r3, r3, #1
 8109926:	2b00      	cmp	r3, #0
 8109928:	d012      	beq.n	8109950 <xStreamBufferSend+0x88>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 810992a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810992c:	3304      	adds	r3, #4
 810992e:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8109930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109932:	687b      	ldr	r3, [r7, #4]
 8109934:	429a      	cmp	r2, r3
 8109936:	d80b      	bhi.n	8109950 <xStreamBufferSend+0x88>
	__asm volatile
 8109938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810993c:	f383 8811 	msr	BASEPRI, r3
 8109940:	f3bf 8f6f 	isb	sy
 8109944:	f3bf 8f4f 	dsb	sy
 8109948:	61fb      	str	r3, [r7, #28]
}
 810994a:	bf00      	nop
 810994c:	bf00      	nop
 810994e:	e7fd      	b.n	810994c <xStreamBufferSend+0x84>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8109950:	683b      	ldr	r3, [r7, #0]
 8109952:	2b00      	cmp	r3, #0
 8109954:	d03f      	beq.n	81099d6 <xStreamBufferSend+0x10e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8109956:	f107 0310 	add.w	r3, r7, #16
 810995a:	4618      	mov	r0, r3
 810995c:	f001 f82c 	bl	810a9b8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8109960:	f7fe fcf2 	bl	8108348 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8109964:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8109966:	f7ff ff7b 	bl	8109860 <xStreamBufferSpacesAvailable>
 810996a:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 810996c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810996e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109970:	429a      	cmp	r2, r3
 8109972:	d218      	bcs.n	81099a6 <xStreamBufferSend+0xde>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8109974:	2000      	movs	r0, #0
 8109976:	f001 fc8d 	bl	810b294 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 810997a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810997c:	695b      	ldr	r3, [r3, #20]
 810997e:	2b00      	cmp	r3, #0
 8109980:	d00b      	beq.n	810999a <xStreamBufferSend+0xd2>
	__asm volatile
 8109982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109986:	f383 8811 	msr	BASEPRI, r3
 810998a:	f3bf 8f6f 	isb	sy
 810998e:	f3bf 8f4f 	dsb	sy
 8109992:	61bb      	str	r3, [r7, #24]
}
 8109994:	bf00      	nop
 8109996:	bf00      	nop
 8109998:	e7fd      	b.n	8109996 <xStreamBufferSend+0xce>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 810999a:	f001 f997 	bl	810accc <xTaskGetCurrentTaskHandle>
 810999e:	4602      	mov	r2, r0
 81099a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81099a2:	615a      	str	r2, [r3, #20]
 81099a4:	e002      	b.n	81099ac <xStreamBufferSend+0xe4>
				}
				else
				{
					taskEXIT_CRITICAL();
 81099a6:	f7fe fd01 	bl	81083ac <vPortExitCritical>
					break;
 81099aa:	e014      	b.n	81099d6 <xStreamBufferSend+0x10e>
				}
			}
			taskEXIT_CRITICAL();
 81099ac:	f7fe fcfe 	bl	81083ac <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 81099b0:	683b      	ldr	r3, [r7, #0]
 81099b2:	2200      	movs	r2, #0
 81099b4:	2100      	movs	r1, #0
 81099b6:	2000      	movs	r0, #0
 81099b8:	f001 fb26 	bl	810b008 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 81099bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81099be:	2200      	movs	r2, #0
 81099c0:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 81099c2:	463a      	mov	r2, r7
 81099c4:	f107 0310 	add.w	r3, r7, #16
 81099c8:	4611      	mov	r1, r2
 81099ca:	4618      	mov	r0, r3
 81099cc:	f001 f832 	bl	810aa34 <xTaskCheckForTimeOut>
 81099d0:	4603      	mov	r3, r0
 81099d2:	2b00      	cmp	r3, #0
 81099d4:	d0c4      	beq.n	8109960 <xStreamBufferSend+0x98>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 81099d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81099d8:	2b00      	cmp	r3, #0
 81099da:	d103      	bne.n	81099e4 <xStreamBufferSend+0x11c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 81099dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81099de:	f7ff ff3f 	bl	8109860 <xStreamBufferSpacesAvailable>
 81099e2:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 81099e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81099e6:	9300      	str	r3, [sp, #0]
 81099e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81099ea:	687a      	ldr	r2, [r7, #4]
 81099ec:	68b9      	ldr	r1, [r7, #8]
 81099ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81099f0:	f000 f814 	bl	8109a1c <prvWriteMessageToBuffer>
 81099f4:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 81099f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81099f8:	2b00      	cmp	r3, #0
 81099fa:	d00a      	beq.n	8109a12 <xStreamBufferSend+0x14a>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 81099fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81099fe:	f000 fa7f 	bl	8109f00 <prvBytesInBuffer>
 8109a02:	4602      	mov	r2, r0
 8109a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109a06:	68db      	ldr	r3, [r3, #12]
 8109a08:	429a      	cmp	r2, r3
 8109a0a:	d302      	bcc.n	8109a12 <xStreamBufferSend+0x14a>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8109a0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8109a0e:	f7f6 fd81 	bl	8100514 <vGenerateRemoteInterrupt>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8109a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8109a14:	4618      	mov	r0, r3
 8109a16:	3738      	adds	r7, #56	@ 0x38
 8109a18:	46bd      	mov	sp, r7
 8109a1a:	bd80      	pop	{r7, pc}

08109a1c <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8109a1c:	b580      	push	{r7, lr}
 8109a1e:	b086      	sub	sp, #24
 8109a20:	af00      	add	r7, sp, #0
 8109a22:	60f8      	str	r0, [r7, #12]
 8109a24:	60b9      	str	r1, [r7, #8]
 8109a26:	607a      	str	r2, [r7, #4]
 8109a28:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8109a2a:	683b      	ldr	r3, [r7, #0]
 8109a2c:	2b00      	cmp	r3, #0
 8109a2e:	d102      	bne.n	8109a36 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8109a30:	2300      	movs	r3, #0
 8109a32:	617b      	str	r3, [r7, #20]
 8109a34:	e01d      	b.n	8109a72 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8109a36:	68fb      	ldr	r3, [r7, #12]
 8109a38:	7f1b      	ldrb	r3, [r3, #28]
 8109a3a:	f003 0301 	and.w	r3, r3, #1
 8109a3e:	2b00      	cmp	r3, #0
 8109a40:	d108      	bne.n	8109a54 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8109a42:	2301      	movs	r3, #1
 8109a44:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8109a46:	687a      	ldr	r2, [r7, #4]
 8109a48:	683b      	ldr	r3, [r7, #0]
 8109a4a:	4293      	cmp	r3, r2
 8109a4c:	bf28      	it	cs
 8109a4e:	4613      	movcs	r3, r2
 8109a50:	607b      	str	r3, [r7, #4]
 8109a52:	e00e      	b.n	8109a72 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8109a54:	683a      	ldr	r2, [r7, #0]
 8109a56:	6a3b      	ldr	r3, [r7, #32]
 8109a58:	429a      	cmp	r2, r3
 8109a5a:	d308      	bcc.n	8109a6e <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8109a5c:	2301      	movs	r3, #1
 8109a5e:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8109a60:	1d3b      	adds	r3, r7, #4
 8109a62:	2204      	movs	r2, #4
 8109a64:	4619      	mov	r1, r3
 8109a66:	68f8      	ldr	r0, [r7, #12]
 8109a68:	f000 f958 	bl	8109d1c <prvWriteBytesToBuffer>
 8109a6c:	e001      	b.n	8109a72 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8109a6e:	2300      	movs	r3, #0
 8109a70:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8109a72:	697b      	ldr	r3, [r7, #20]
 8109a74:	2b00      	cmp	r3, #0
 8109a76:	d007      	beq.n	8109a88 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8109a78:	687b      	ldr	r3, [r7, #4]
 8109a7a:	461a      	mov	r2, r3
 8109a7c:	68b9      	ldr	r1, [r7, #8]
 8109a7e:	68f8      	ldr	r0, [r7, #12]
 8109a80:	f000 f94c 	bl	8109d1c <prvWriteBytesToBuffer>
 8109a84:	6138      	str	r0, [r7, #16]
 8109a86:	e001      	b.n	8109a8c <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8109a88:	2300      	movs	r3, #0
 8109a8a:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8109a8c:	693b      	ldr	r3, [r7, #16]
}
 8109a8e:	4618      	mov	r0, r3
 8109a90:	3718      	adds	r7, #24
 8109a92:	46bd      	mov	sp, r7
 8109a94:	bd80      	pop	{r7, pc}

08109a96 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8109a96:	b580      	push	{r7, lr}
 8109a98:	b08e      	sub	sp, #56	@ 0x38
 8109a9a:	af02      	add	r7, sp, #8
 8109a9c:	60f8      	str	r0, [r7, #12]
 8109a9e:	60b9      	str	r1, [r7, #8]
 8109aa0:	607a      	str	r2, [r7, #4]
 8109aa2:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8109aa4:	68fb      	ldr	r3, [r7, #12]
 8109aa6:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8109aa8:	2300      	movs	r3, #0
 8109aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8109aac:	68bb      	ldr	r3, [r7, #8]
 8109aae:	2b00      	cmp	r3, #0
 8109ab0:	d10b      	bne.n	8109aca <xStreamBufferReceive+0x34>
	__asm volatile
 8109ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109ab6:	f383 8811 	msr	BASEPRI, r3
 8109aba:	f3bf 8f6f 	isb	sy
 8109abe:	f3bf 8f4f 	dsb	sy
 8109ac2:	61fb      	str	r3, [r7, #28]
}
 8109ac4:	bf00      	nop
 8109ac6:	bf00      	nop
 8109ac8:	e7fd      	b.n	8109ac6 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8109aca:	6a3b      	ldr	r3, [r7, #32]
 8109acc:	2b00      	cmp	r3, #0
 8109ace:	d10b      	bne.n	8109ae8 <xStreamBufferReceive+0x52>
	__asm volatile
 8109ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109ad4:	f383 8811 	msr	BASEPRI, r3
 8109ad8:	f3bf 8f6f 	isb	sy
 8109adc:	f3bf 8f4f 	dsb	sy
 8109ae0:	61bb      	str	r3, [r7, #24]
}
 8109ae2:	bf00      	nop
 8109ae4:	bf00      	nop
 8109ae6:	e7fd      	b.n	8109ae4 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8109ae8:	6a3b      	ldr	r3, [r7, #32]
 8109aea:	7f1b      	ldrb	r3, [r3, #28]
 8109aec:	f003 0301 	and.w	r3, r3, #1
 8109af0:	2b00      	cmp	r3, #0
 8109af2:	d002      	beq.n	8109afa <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8109af4:	2304      	movs	r3, #4
 8109af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8109af8:	e001      	b.n	8109afe <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8109afa:	2300      	movs	r3, #0
 8109afc:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8109afe:	683b      	ldr	r3, [r7, #0]
 8109b00:	2b00      	cmp	r3, #0
 8109b02:	d035      	beq.n	8109b70 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8109b04:	f7fe fc20 	bl	8108348 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8109b08:	6a38      	ldr	r0, [r7, #32]
 8109b0a:	f000 f9f9 	bl	8109f00 <prvBytesInBuffer>
 8109b0e:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8109b10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8109b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109b14:	429a      	cmp	r2, r3
 8109b16:	d817      	bhi.n	8109b48 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8109b18:	2000      	movs	r0, #0
 8109b1a:	f001 fbbb 	bl	810b294 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8109b1e:	6a3b      	ldr	r3, [r7, #32]
 8109b20:	691b      	ldr	r3, [r3, #16]
 8109b22:	2b00      	cmp	r3, #0
 8109b24:	d00b      	beq.n	8109b3e <xStreamBufferReceive+0xa8>
	__asm volatile
 8109b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109b2a:	f383 8811 	msr	BASEPRI, r3
 8109b2e:	f3bf 8f6f 	isb	sy
 8109b32:	f3bf 8f4f 	dsb	sy
 8109b36:	617b      	str	r3, [r7, #20]
}
 8109b38:	bf00      	nop
 8109b3a:	bf00      	nop
 8109b3c:	e7fd      	b.n	8109b3a <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8109b3e:	f001 f8c5 	bl	810accc <xTaskGetCurrentTaskHandle>
 8109b42:	4602      	mov	r2, r0
 8109b44:	6a3b      	ldr	r3, [r7, #32]
 8109b46:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8109b48:	f7fe fc30 	bl	81083ac <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8109b4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8109b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109b50:	429a      	cmp	r2, r3
 8109b52:	d811      	bhi.n	8109b78 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8109b54:	683b      	ldr	r3, [r7, #0]
 8109b56:	2200      	movs	r2, #0
 8109b58:	2100      	movs	r1, #0
 8109b5a:	2000      	movs	r0, #0
 8109b5c:	f001 fa54 	bl	810b008 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8109b60:	6a3b      	ldr	r3, [r7, #32]
 8109b62:	2200      	movs	r2, #0
 8109b64:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8109b66:	6a38      	ldr	r0, [r7, #32]
 8109b68:	f000 f9ca 	bl	8109f00 <prvBytesInBuffer>
 8109b6c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8109b6e:	e003      	b.n	8109b78 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8109b70:	6a38      	ldr	r0, [r7, #32]
 8109b72:	f000 f9c5 	bl	8109f00 <prvBytesInBuffer>
 8109b76:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8109b78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8109b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109b7c:	429a      	cmp	r2, r3
 8109b7e:	d90e      	bls.n	8109b9e <xStreamBufferReceive+0x108>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8109b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109b82:	9300      	str	r3, [sp, #0]
 8109b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109b86:	687a      	ldr	r2, [r7, #4]
 8109b88:	68b9      	ldr	r1, [r7, #8]
 8109b8a:	6a38      	ldr	r0, [r7, #32]
 8109b8c:	f000 f80c 	bl	8109ba8 <prvReadMessageFromBuffer>
 8109b90:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8109b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109b94:	2b00      	cmp	r3, #0
 8109b96:	d002      	beq.n	8109b9e <xStreamBufferReceive+0x108>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8109b98:	6a38      	ldr	r0, [r7, #32]
 8109b9a:	f7f6 fcbb 	bl	8100514 <vGenerateRemoteInterrupt>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8109b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8109ba0:	4618      	mov	r0, r3
 8109ba2:	3730      	adds	r7, #48	@ 0x30
 8109ba4:	46bd      	mov	sp, r7
 8109ba6:	bd80      	pop	{r7, pc}

08109ba8 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8109ba8:	b580      	push	{r7, lr}
 8109baa:	b088      	sub	sp, #32
 8109bac:	af00      	add	r7, sp, #0
 8109bae:	60f8      	str	r0, [r7, #12]
 8109bb0:	60b9      	str	r1, [r7, #8]
 8109bb2:	607a      	str	r2, [r7, #4]
 8109bb4:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8109bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109bb8:	2b00      	cmp	r3, #0
 8109bba:	d019      	beq.n	8109bf0 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8109bbc:	68fb      	ldr	r3, [r7, #12]
 8109bbe:	681b      	ldr	r3, [r3, #0]
 8109bc0:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8109bc2:	f107 0110 	add.w	r1, r7, #16
 8109bc6:	683b      	ldr	r3, [r7, #0]
 8109bc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8109bca:	68f8      	ldr	r0, [r7, #12]
 8109bcc:	f000 f91b 	bl	8109e06 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8109bd0:	693b      	ldr	r3, [r7, #16]
 8109bd2:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8109bd4:	683a      	ldr	r2, [r7, #0]
 8109bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109bd8:	1ad3      	subs	r3, r2, r3
 8109bda:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8109bdc:	69fa      	ldr	r2, [r7, #28]
 8109bde:	687b      	ldr	r3, [r7, #4]
 8109be0:	429a      	cmp	r2, r3
 8109be2:	d907      	bls.n	8109bf4 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8109be4:	68fb      	ldr	r3, [r7, #12]
 8109be6:	69ba      	ldr	r2, [r7, #24]
 8109be8:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8109bea:	2300      	movs	r3, #0
 8109bec:	61fb      	str	r3, [r7, #28]
 8109bee:	e001      	b.n	8109bf4 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8109bf0:	687b      	ldr	r3, [r7, #4]
 8109bf2:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8109bf4:	683b      	ldr	r3, [r7, #0]
 8109bf6:	69fa      	ldr	r2, [r7, #28]
 8109bf8:	68b9      	ldr	r1, [r7, #8]
 8109bfa:	68f8      	ldr	r0, [r7, #12]
 8109bfc:	f000 f903 	bl	8109e06 <prvReadBytesFromBuffer>
 8109c00:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8109c02:	697b      	ldr	r3, [r7, #20]
}
 8109c04:	4618      	mov	r0, r3
 8109c06:	3720      	adds	r7, #32
 8109c08:	46bd      	mov	sp, r7
 8109c0a:	bd80      	pop	{r7, pc}

08109c0c <xStreamBufferSendCompletedFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8109c0c:	b580      	push	{r7, lr}
 8109c0e:	b08c      	sub	sp, #48	@ 0x30
 8109c10:	af02      	add	r7, sp, #8
 8109c12:	6078      	str	r0, [r7, #4]
 8109c14:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8109c16:	687b      	ldr	r3, [r7, #4]
 8109c18:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 8109c1a:	6a3b      	ldr	r3, [r7, #32]
 8109c1c:	2b00      	cmp	r3, #0
 8109c1e:	d10b      	bne.n	8109c38 <xStreamBufferSendCompletedFromISR+0x2c>
	__asm volatile
 8109c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109c24:	f383 8811 	msr	BASEPRI, r3
 8109c28:	f3bf 8f6f 	isb	sy
 8109c2c:	f3bf 8f4f 	dsb	sy
 8109c30:	61bb      	str	r3, [r7, #24]
}
 8109c32:	bf00      	nop
 8109c34:	bf00      	nop
 8109c36:	e7fd      	b.n	8109c34 <xStreamBufferSendCompletedFromISR+0x28>
	__asm volatile
 8109c38:	f3ef 8211 	mrs	r2, BASEPRI
 8109c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109c40:	f383 8811 	msr	BASEPRI, r3
 8109c44:	f3bf 8f6f 	isb	sy
 8109c48:	f3bf 8f4f 	dsb	sy
 8109c4c:	617a      	str	r2, [r7, #20]
 8109c4e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8109c50:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8109c52:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8109c54:	6a3b      	ldr	r3, [r7, #32]
 8109c56:	691b      	ldr	r3, [r3, #16]
 8109c58:	2b00      	cmp	r3, #0
 8109c5a:	d00e      	beq.n	8109c7a <xStreamBufferSendCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 8109c5c:	6a3b      	ldr	r3, [r7, #32]
 8109c5e:	6918      	ldr	r0, [r3, #16]
 8109c60:	683b      	ldr	r3, [r7, #0]
 8109c62:	9300      	str	r3, [sp, #0]
 8109c64:	2300      	movs	r3, #0
 8109c66:	2200      	movs	r2, #0
 8109c68:	2100      	movs	r1, #0
 8109c6a:	f001 fa2d 	bl	810b0c8 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 8109c6e:	6a3b      	ldr	r3, [r7, #32]
 8109c70:	2200      	movs	r2, #0
 8109c72:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 8109c74:	2301      	movs	r3, #1
 8109c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8109c78:	e001      	b.n	8109c7e <xStreamBufferSendCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 8109c7a:	2300      	movs	r3, #0
 8109c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8109c7e:	69fb      	ldr	r3, [r7, #28]
 8109c80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8109c82:	68fb      	ldr	r3, [r7, #12]
 8109c84:	f383 8811 	msr	BASEPRI, r3
}
 8109c88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8109c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8109c8c:	4618      	mov	r0, r3
 8109c8e:	3728      	adds	r7, #40	@ 0x28
 8109c90:	46bd      	mov	sp, r7
 8109c92:	bd80      	pop	{r7, pc}

08109c94 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8109c94:	b580      	push	{r7, lr}
 8109c96:	b08c      	sub	sp, #48	@ 0x30
 8109c98:	af02      	add	r7, sp, #8
 8109c9a:	6078      	str	r0, [r7, #4]
 8109c9c:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8109c9e:	687b      	ldr	r3, [r7, #4]
 8109ca0:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 8109ca2:	6a3b      	ldr	r3, [r7, #32]
 8109ca4:	2b00      	cmp	r3, #0
 8109ca6:	d10b      	bne.n	8109cc0 <xStreamBufferReceiveCompletedFromISR+0x2c>
	__asm volatile
 8109ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109cac:	f383 8811 	msr	BASEPRI, r3
 8109cb0:	f3bf 8f6f 	isb	sy
 8109cb4:	f3bf 8f4f 	dsb	sy
 8109cb8:	61bb      	str	r3, [r7, #24]
}
 8109cba:	bf00      	nop
 8109cbc:	bf00      	nop
 8109cbe:	e7fd      	b.n	8109cbc <xStreamBufferReceiveCompletedFromISR+0x28>
	__asm volatile
 8109cc0:	f3ef 8211 	mrs	r2, BASEPRI
 8109cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109cc8:	f383 8811 	msr	BASEPRI, r3
 8109ccc:	f3bf 8f6f 	isb	sy
 8109cd0:	f3bf 8f4f 	dsb	sy
 8109cd4:	617a      	str	r2, [r7, #20]
 8109cd6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8109cd8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8109cda:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 8109cdc:	6a3b      	ldr	r3, [r7, #32]
 8109cde:	695b      	ldr	r3, [r3, #20]
 8109ce0:	2b00      	cmp	r3, #0
 8109ce2:	d00e      	beq.n	8109d02 <xStreamBufferReceiveCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 8109ce4:	6a3b      	ldr	r3, [r7, #32]
 8109ce6:	6958      	ldr	r0, [r3, #20]
 8109ce8:	683b      	ldr	r3, [r7, #0]
 8109cea:	9300      	str	r3, [sp, #0]
 8109cec:	2300      	movs	r3, #0
 8109cee:	2200      	movs	r2, #0
 8109cf0:	2100      	movs	r1, #0
 8109cf2:	f001 f9e9 	bl	810b0c8 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8109cf6:	6a3b      	ldr	r3, [r7, #32]
 8109cf8:	2200      	movs	r2, #0
 8109cfa:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
 8109cfc:	2301      	movs	r3, #1
 8109cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8109d00:	e001      	b.n	8109d06 <xStreamBufferReceiveCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 8109d02:	2300      	movs	r3, #0
 8109d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8109d06:	69fb      	ldr	r3, [r7, #28]
 8109d08:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8109d0a:	68fb      	ldr	r3, [r7, #12]
 8109d0c:	f383 8811 	msr	BASEPRI, r3
}
 8109d10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8109d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8109d14:	4618      	mov	r0, r3
 8109d16:	3728      	adds	r7, #40	@ 0x28
 8109d18:	46bd      	mov	sp, r7
 8109d1a:	bd80      	pop	{r7, pc}

08109d1c <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8109d1c:	b580      	push	{r7, lr}
 8109d1e:	b08a      	sub	sp, #40	@ 0x28
 8109d20:	af00      	add	r7, sp, #0
 8109d22:	60f8      	str	r0, [r7, #12]
 8109d24:	60b9      	str	r1, [r7, #8]
 8109d26:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8109d28:	687b      	ldr	r3, [r7, #4]
 8109d2a:	2b00      	cmp	r3, #0
 8109d2c:	d10b      	bne.n	8109d46 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8109d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109d32:	f383 8811 	msr	BASEPRI, r3
 8109d36:	f3bf 8f6f 	isb	sy
 8109d3a:	f3bf 8f4f 	dsb	sy
 8109d3e:	61fb      	str	r3, [r7, #28]
}
 8109d40:	bf00      	nop
 8109d42:	bf00      	nop
 8109d44:	e7fd      	b.n	8109d42 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8109d46:	68fb      	ldr	r3, [r7, #12]
 8109d48:	685b      	ldr	r3, [r3, #4]
 8109d4a:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8109d4c:	68fb      	ldr	r3, [r7, #12]
 8109d4e:	689a      	ldr	r2, [r3, #8]
 8109d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109d52:	1ad3      	subs	r3, r2, r3
 8109d54:	687a      	ldr	r2, [r7, #4]
 8109d56:	4293      	cmp	r3, r2
 8109d58:	bf28      	it	cs
 8109d5a:	4613      	movcs	r3, r2
 8109d5c:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8109d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109d60:	6a3b      	ldr	r3, [r7, #32]
 8109d62:	441a      	add	r2, r3
 8109d64:	68fb      	ldr	r3, [r7, #12]
 8109d66:	689b      	ldr	r3, [r3, #8]
 8109d68:	429a      	cmp	r2, r3
 8109d6a:	d90b      	bls.n	8109d84 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 8109d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109d70:	f383 8811 	msr	BASEPRI, r3
 8109d74:	f3bf 8f6f 	isb	sy
 8109d78:	f3bf 8f4f 	dsb	sy
 8109d7c:	61bb      	str	r3, [r7, #24]
}
 8109d7e:	bf00      	nop
 8109d80:	bf00      	nop
 8109d82:	e7fd      	b.n	8109d80 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8109d84:	68fb      	ldr	r3, [r7, #12]
 8109d86:	699a      	ldr	r2, [r3, #24]
 8109d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109d8a:	4413      	add	r3, r2
 8109d8c:	6a3a      	ldr	r2, [r7, #32]
 8109d8e:	68b9      	ldr	r1, [r7, #8]
 8109d90:	4618      	mov	r0, r3
 8109d92:	f00c ff48 	bl	8116c26 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8109d96:	687a      	ldr	r2, [r7, #4]
 8109d98:	6a3b      	ldr	r3, [r7, #32]
 8109d9a:	429a      	cmp	r2, r3
 8109d9c:	d91d      	bls.n	8109dda <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8109d9e:	687a      	ldr	r2, [r7, #4]
 8109da0:	6a3b      	ldr	r3, [r7, #32]
 8109da2:	1ad2      	subs	r2, r2, r3
 8109da4:	68fb      	ldr	r3, [r7, #12]
 8109da6:	689b      	ldr	r3, [r3, #8]
 8109da8:	429a      	cmp	r2, r3
 8109daa:	d90b      	bls.n	8109dc4 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 8109dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109db0:	f383 8811 	msr	BASEPRI, r3
 8109db4:	f3bf 8f6f 	isb	sy
 8109db8:	f3bf 8f4f 	dsb	sy
 8109dbc:	617b      	str	r3, [r7, #20]
}
 8109dbe:	bf00      	nop
 8109dc0:	bf00      	nop
 8109dc2:	e7fd      	b.n	8109dc0 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8109dc4:	68fb      	ldr	r3, [r7, #12]
 8109dc6:	6998      	ldr	r0, [r3, #24]
 8109dc8:	68ba      	ldr	r2, [r7, #8]
 8109dca:	6a3b      	ldr	r3, [r7, #32]
 8109dcc:	18d1      	adds	r1, r2, r3
 8109dce:	687a      	ldr	r2, [r7, #4]
 8109dd0:	6a3b      	ldr	r3, [r7, #32]
 8109dd2:	1ad3      	subs	r3, r2, r3
 8109dd4:	461a      	mov	r2, r3
 8109dd6:	f00c ff26 	bl	8116c26 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8109dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109ddc:	687b      	ldr	r3, [r7, #4]
 8109dde:	4413      	add	r3, r2
 8109de0:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8109de2:	68fb      	ldr	r3, [r7, #12]
 8109de4:	689b      	ldr	r3, [r3, #8]
 8109de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109de8:	429a      	cmp	r2, r3
 8109dea:	d304      	bcc.n	8109df6 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8109dec:	68fb      	ldr	r3, [r7, #12]
 8109dee:	689b      	ldr	r3, [r3, #8]
 8109df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109df2:	1ad3      	subs	r3, r2, r3
 8109df4:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8109df6:	68fb      	ldr	r3, [r7, #12]
 8109df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109dfa:	605a      	str	r2, [r3, #4]

	return xCount;
 8109dfc:	687b      	ldr	r3, [r7, #4]
}
 8109dfe:	4618      	mov	r0, r3
 8109e00:	3728      	adds	r7, #40	@ 0x28
 8109e02:	46bd      	mov	sp, r7
 8109e04:	bd80      	pop	{r7, pc}

08109e06 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8109e06:	b580      	push	{r7, lr}
 8109e08:	b08a      	sub	sp, #40	@ 0x28
 8109e0a:	af00      	add	r7, sp, #0
 8109e0c:	60f8      	str	r0, [r7, #12]
 8109e0e:	60b9      	str	r1, [r7, #8]
 8109e10:	607a      	str	r2, [r7, #4]
 8109e12:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8109e14:	687a      	ldr	r2, [r7, #4]
 8109e16:	683b      	ldr	r3, [r7, #0]
 8109e18:	4293      	cmp	r3, r2
 8109e1a:	bf28      	it	cs
 8109e1c:	4613      	movcs	r3, r2
 8109e1e:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8109e20:	6a3b      	ldr	r3, [r7, #32]
 8109e22:	2b00      	cmp	r3, #0
 8109e24:	d067      	beq.n	8109ef6 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8109e26:	68fb      	ldr	r3, [r7, #12]
 8109e28:	681b      	ldr	r3, [r3, #0]
 8109e2a:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8109e2c:	68fb      	ldr	r3, [r7, #12]
 8109e2e:	689a      	ldr	r2, [r3, #8]
 8109e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109e32:	1ad3      	subs	r3, r2, r3
 8109e34:	6a3a      	ldr	r2, [r7, #32]
 8109e36:	4293      	cmp	r3, r2
 8109e38:	bf28      	it	cs
 8109e3a:	4613      	movcs	r3, r2
 8109e3c:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8109e3e:	69fa      	ldr	r2, [r7, #28]
 8109e40:	687b      	ldr	r3, [r7, #4]
 8109e42:	429a      	cmp	r2, r3
 8109e44:	d90b      	bls.n	8109e5e <prvReadBytesFromBuffer+0x58>
	__asm volatile
 8109e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109e4a:	f383 8811 	msr	BASEPRI, r3
 8109e4e:	f3bf 8f6f 	isb	sy
 8109e52:	f3bf 8f4f 	dsb	sy
 8109e56:	61bb      	str	r3, [r7, #24]
}
 8109e58:	bf00      	nop
 8109e5a:	bf00      	nop
 8109e5c:	e7fd      	b.n	8109e5a <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8109e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109e60:	69fb      	ldr	r3, [r7, #28]
 8109e62:	441a      	add	r2, r3
 8109e64:	68fb      	ldr	r3, [r7, #12]
 8109e66:	689b      	ldr	r3, [r3, #8]
 8109e68:	429a      	cmp	r2, r3
 8109e6a:	d90b      	bls.n	8109e84 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 8109e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109e70:	f383 8811 	msr	BASEPRI, r3
 8109e74:	f3bf 8f6f 	isb	sy
 8109e78:	f3bf 8f4f 	dsb	sy
 8109e7c:	617b      	str	r3, [r7, #20]
}
 8109e7e:	bf00      	nop
 8109e80:	bf00      	nop
 8109e82:	e7fd      	b.n	8109e80 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8109e84:	68fb      	ldr	r3, [r7, #12]
 8109e86:	699a      	ldr	r2, [r3, #24]
 8109e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109e8a:	4413      	add	r3, r2
 8109e8c:	69fa      	ldr	r2, [r7, #28]
 8109e8e:	4619      	mov	r1, r3
 8109e90:	68b8      	ldr	r0, [r7, #8]
 8109e92:	f00c fec8 	bl	8116c26 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8109e96:	6a3a      	ldr	r2, [r7, #32]
 8109e98:	69fb      	ldr	r3, [r7, #28]
 8109e9a:	429a      	cmp	r2, r3
 8109e9c:	d91a      	bls.n	8109ed4 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8109e9e:	6a3a      	ldr	r2, [r7, #32]
 8109ea0:	687b      	ldr	r3, [r7, #4]
 8109ea2:	429a      	cmp	r2, r3
 8109ea4:	d90b      	bls.n	8109ebe <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 8109ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109eaa:	f383 8811 	msr	BASEPRI, r3
 8109eae:	f3bf 8f6f 	isb	sy
 8109eb2:	f3bf 8f4f 	dsb	sy
 8109eb6:	613b      	str	r3, [r7, #16]
}
 8109eb8:	bf00      	nop
 8109eba:	bf00      	nop
 8109ebc:	e7fd      	b.n	8109eba <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8109ebe:	68ba      	ldr	r2, [r7, #8]
 8109ec0:	69fb      	ldr	r3, [r7, #28]
 8109ec2:	18d0      	adds	r0, r2, r3
 8109ec4:	68fb      	ldr	r3, [r7, #12]
 8109ec6:	6999      	ldr	r1, [r3, #24]
 8109ec8:	6a3a      	ldr	r2, [r7, #32]
 8109eca:	69fb      	ldr	r3, [r7, #28]
 8109ecc:	1ad3      	subs	r3, r2, r3
 8109ece:	461a      	mov	r2, r3
 8109ed0:	f00c fea9 	bl	8116c26 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8109ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109ed6:	6a3b      	ldr	r3, [r7, #32]
 8109ed8:	4413      	add	r3, r2
 8109eda:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8109edc:	68fb      	ldr	r3, [r7, #12]
 8109ede:	689b      	ldr	r3, [r3, #8]
 8109ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109ee2:	429a      	cmp	r2, r3
 8109ee4:	d304      	bcc.n	8109ef0 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8109ee6:	68fb      	ldr	r3, [r7, #12]
 8109ee8:	689b      	ldr	r3, [r3, #8]
 8109eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109eec:	1ad3      	subs	r3, r2, r3
 8109eee:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8109ef0:	68fb      	ldr	r3, [r7, #12]
 8109ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109ef4:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8109ef6:	6a3b      	ldr	r3, [r7, #32]
}
 8109ef8:	4618      	mov	r0, r3
 8109efa:	3728      	adds	r7, #40	@ 0x28
 8109efc:	46bd      	mov	sp, r7
 8109efe:	bd80      	pop	{r7, pc}

08109f00 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8109f00:	b480      	push	{r7}
 8109f02:	b085      	sub	sp, #20
 8109f04:	af00      	add	r7, sp, #0
 8109f06:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8109f08:	687b      	ldr	r3, [r7, #4]
 8109f0a:	689a      	ldr	r2, [r3, #8]
 8109f0c:	687b      	ldr	r3, [r7, #4]
 8109f0e:	685b      	ldr	r3, [r3, #4]
 8109f10:	4413      	add	r3, r2
 8109f12:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8109f14:	687b      	ldr	r3, [r7, #4]
 8109f16:	681b      	ldr	r3, [r3, #0]
 8109f18:	68fa      	ldr	r2, [r7, #12]
 8109f1a:	1ad3      	subs	r3, r2, r3
 8109f1c:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8109f1e:	687b      	ldr	r3, [r7, #4]
 8109f20:	689b      	ldr	r3, [r3, #8]
 8109f22:	68fa      	ldr	r2, [r7, #12]
 8109f24:	429a      	cmp	r2, r3
 8109f26:	d304      	bcc.n	8109f32 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8109f28:	687b      	ldr	r3, [r7, #4]
 8109f2a:	689b      	ldr	r3, [r3, #8]
 8109f2c:	68fa      	ldr	r2, [r7, #12]
 8109f2e:	1ad3      	subs	r3, r2, r3
 8109f30:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8109f32:	68fb      	ldr	r3, [r7, #12]
}
 8109f34:	4618      	mov	r0, r3
 8109f36:	3714      	adds	r7, #20
 8109f38:	46bd      	mov	sp, r7
 8109f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f3e:	4770      	bx	lr

08109f40 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8109f40:	b580      	push	{r7, lr}
 8109f42:	b086      	sub	sp, #24
 8109f44:	af00      	add	r7, sp, #0
 8109f46:	60f8      	str	r0, [r7, #12]
 8109f48:	60b9      	str	r1, [r7, #8]
 8109f4a:	607a      	str	r2, [r7, #4]
 8109f4c:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8109f4e:	2355      	movs	r3, #85	@ 0x55
 8109f50:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8109f52:	687a      	ldr	r2, [r7, #4]
 8109f54:	6979      	ldr	r1, [r7, #20]
 8109f56:	68b8      	ldr	r0, [r7, #8]
 8109f58:	f00c fd45 	bl	81169e6 <memset>
 8109f5c:	4602      	mov	r2, r0
 8109f5e:	68bb      	ldr	r3, [r7, #8]
 8109f60:	4293      	cmp	r3, r2
 8109f62:	d00b      	beq.n	8109f7c <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 8109f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109f68:	f383 8811 	msr	BASEPRI, r3
 8109f6c:	f3bf 8f6f 	isb	sy
 8109f70:	f3bf 8f4f 	dsb	sy
 8109f74:	613b      	str	r3, [r7, #16]
}
 8109f76:	bf00      	nop
 8109f78:	bf00      	nop
 8109f7a:	e7fd      	b.n	8109f78 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8109f7c:	2224      	movs	r2, #36	@ 0x24
 8109f7e:	2100      	movs	r1, #0
 8109f80:	68f8      	ldr	r0, [r7, #12]
 8109f82:	f00c fd30 	bl	81169e6 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8109f86:	68fb      	ldr	r3, [r7, #12]
 8109f88:	68ba      	ldr	r2, [r7, #8]
 8109f8a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8109f8c:	68fb      	ldr	r3, [r7, #12]
 8109f8e:	687a      	ldr	r2, [r7, #4]
 8109f90:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8109f92:	68fb      	ldr	r3, [r7, #12]
 8109f94:	683a      	ldr	r2, [r7, #0]
 8109f96:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8109f98:	68fb      	ldr	r3, [r7, #12]
 8109f9a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8109f9e:	771a      	strb	r2, [r3, #28]
}
 8109fa0:	bf00      	nop
 8109fa2:	3718      	adds	r7, #24
 8109fa4:	46bd      	mov	sp, r7
 8109fa6:	bd80      	pop	{r7, pc}

08109fa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8109fa8:	b580      	push	{r7, lr}
 8109faa:	b08e      	sub	sp, #56	@ 0x38
 8109fac:	af04      	add	r7, sp, #16
 8109fae:	60f8      	str	r0, [r7, #12]
 8109fb0:	60b9      	str	r1, [r7, #8]
 8109fb2:	607a      	str	r2, [r7, #4]
 8109fb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8109fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109fb8:	2b00      	cmp	r3, #0
 8109fba:	d10b      	bne.n	8109fd4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8109fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109fc0:	f383 8811 	msr	BASEPRI, r3
 8109fc4:	f3bf 8f6f 	isb	sy
 8109fc8:	f3bf 8f4f 	dsb	sy
 8109fcc:	623b      	str	r3, [r7, #32]
}
 8109fce:	bf00      	nop
 8109fd0:	bf00      	nop
 8109fd2:	e7fd      	b.n	8109fd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8109fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109fd6:	2b00      	cmp	r3, #0
 8109fd8:	d10b      	bne.n	8109ff2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8109fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109fde:	f383 8811 	msr	BASEPRI, r3
 8109fe2:	f3bf 8f6f 	isb	sy
 8109fe6:	f3bf 8f4f 	dsb	sy
 8109fea:	61fb      	str	r3, [r7, #28]
}
 8109fec:	bf00      	nop
 8109fee:	bf00      	nop
 8109ff0:	e7fd      	b.n	8109fee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8109ff2:	23a8      	movs	r3, #168	@ 0xa8
 8109ff4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8109ff6:	693b      	ldr	r3, [r7, #16]
 8109ff8:	2ba8      	cmp	r3, #168	@ 0xa8
 8109ffa:	d00b      	beq.n	810a014 <xTaskCreateStatic+0x6c>
	__asm volatile
 8109ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a000:	f383 8811 	msr	BASEPRI, r3
 810a004:	f3bf 8f6f 	isb	sy
 810a008:	f3bf 8f4f 	dsb	sy
 810a00c:	61bb      	str	r3, [r7, #24]
}
 810a00e:	bf00      	nop
 810a010:	bf00      	nop
 810a012:	e7fd      	b.n	810a010 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810a014:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810a016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a018:	2b00      	cmp	r3, #0
 810a01a:	d01e      	beq.n	810a05a <xTaskCreateStatic+0xb2>
 810a01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a01e:	2b00      	cmp	r3, #0
 810a020:	d01b      	beq.n	810a05a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810a022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a024:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810a026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a028:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810a02a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810a02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a02e:	2202      	movs	r2, #2
 810a030:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810a034:	2300      	movs	r3, #0
 810a036:	9303      	str	r3, [sp, #12]
 810a038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a03a:	9302      	str	r3, [sp, #8]
 810a03c:	f107 0314 	add.w	r3, r7, #20
 810a040:	9301      	str	r3, [sp, #4]
 810a042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a044:	9300      	str	r3, [sp, #0]
 810a046:	683b      	ldr	r3, [r7, #0]
 810a048:	687a      	ldr	r2, [r7, #4]
 810a04a:	68b9      	ldr	r1, [r7, #8]
 810a04c:	68f8      	ldr	r0, [r7, #12]
 810a04e:	f000 f851 	bl	810a0f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810a052:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810a054:	f000 f8f6 	bl	810a244 <prvAddNewTaskToReadyList>
 810a058:	e001      	b.n	810a05e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 810a05a:	2300      	movs	r3, #0
 810a05c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810a05e:	697b      	ldr	r3, [r7, #20]
	}
 810a060:	4618      	mov	r0, r3
 810a062:	3728      	adds	r7, #40	@ 0x28
 810a064:	46bd      	mov	sp, r7
 810a066:	bd80      	pop	{r7, pc}

0810a068 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810a068:	b580      	push	{r7, lr}
 810a06a:	b08c      	sub	sp, #48	@ 0x30
 810a06c:	af04      	add	r7, sp, #16
 810a06e:	60f8      	str	r0, [r7, #12]
 810a070:	60b9      	str	r1, [r7, #8]
 810a072:	603b      	str	r3, [r7, #0]
 810a074:	4613      	mov	r3, r2
 810a076:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810a078:	88fb      	ldrh	r3, [r7, #6]
 810a07a:	009b      	lsls	r3, r3, #2
 810a07c:	4618      	mov	r0, r3
 810a07e:	f7fd fd8f 	bl	8107ba0 <pvPortMalloc>
 810a082:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810a084:	697b      	ldr	r3, [r7, #20]
 810a086:	2b00      	cmp	r3, #0
 810a088:	d00e      	beq.n	810a0a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810a08a:	20a8      	movs	r0, #168	@ 0xa8
 810a08c:	f7fd fd88 	bl	8107ba0 <pvPortMalloc>
 810a090:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810a092:	69fb      	ldr	r3, [r7, #28]
 810a094:	2b00      	cmp	r3, #0
 810a096:	d003      	beq.n	810a0a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810a098:	69fb      	ldr	r3, [r7, #28]
 810a09a:	697a      	ldr	r2, [r7, #20]
 810a09c:	631a      	str	r2, [r3, #48]	@ 0x30
 810a09e:	e005      	b.n	810a0ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810a0a0:	6978      	ldr	r0, [r7, #20]
 810a0a2:	f7fd fe4b 	bl	8107d3c <vPortFree>
 810a0a6:	e001      	b.n	810a0ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810a0a8:	2300      	movs	r3, #0
 810a0aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810a0ac:	69fb      	ldr	r3, [r7, #28]
 810a0ae:	2b00      	cmp	r3, #0
 810a0b0:	d017      	beq.n	810a0e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810a0b2:	69fb      	ldr	r3, [r7, #28]
 810a0b4:	2200      	movs	r2, #0
 810a0b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810a0ba:	88fa      	ldrh	r2, [r7, #6]
 810a0bc:	2300      	movs	r3, #0
 810a0be:	9303      	str	r3, [sp, #12]
 810a0c0:	69fb      	ldr	r3, [r7, #28]
 810a0c2:	9302      	str	r3, [sp, #8]
 810a0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a0c6:	9301      	str	r3, [sp, #4]
 810a0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a0ca:	9300      	str	r3, [sp, #0]
 810a0cc:	683b      	ldr	r3, [r7, #0]
 810a0ce:	68b9      	ldr	r1, [r7, #8]
 810a0d0:	68f8      	ldr	r0, [r7, #12]
 810a0d2:	f000 f80f 	bl	810a0f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810a0d6:	69f8      	ldr	r0, [r7, #28]
 810a0d8:	f000 f8b4 	bl	810a244 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810a0dc:	2301      	movs	r3, #1
 810a0de:	61bb      	str	r3, [r7, #24]
 810a0e0:	e002      	b.n	810a0e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810a0e2:	f04f 33ff 	mov.w	r3, #4294967295
 810a0e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810a0e8:	69bb      	ldr	r3, [r7, #24]
	}
 810a0ea:	4618      	mov	r0, r3
 810a0ec:	3720      	adds	r7, #32
 810a0ee:	46bd      	mov	sp, r7
 810a0f0:	bd80      	pop	{r7, pc}
	...

0810a0f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810a0f4:	b580      	push	{r7, lr}
 810a0f6:	b088      	sub	sp, #32
 810a0f8:	af00      	add	r7, sp, #0
 810a0fa:	60f8      	str	r0, [r7, #12]
 810a0fc:	60b9      	str	r1, [r7, #8]
 810a0fe:	607a      	str	r2, [r7, #4]
 810a100:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810a102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a104:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 810a106:	687b      	ldr	r3, [r7, #4]
 810a108:	009b      	lsls	r3, r3, #2
 810a10a:	461a      	mov	r2, r3
 810a10c:	21a5      	movs	r1, #165	@ 0xa5
 810a10e:	f00c fc6a 	bl	81169e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810a112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a114:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810a116:	687b      	ldr	r3, [r7, #4]
 810a118:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810a11c:	3b01      	subs	r3, #1
 810a11e:	009b      	lsls	r3, r3, #2
 810a120:	4413      	add	r3, r2
 810a122:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810a124:	69bb      	ldr	r3, [r7, #24]
 810a126:	f023 0307 	bic.w	r3, r3, #7
 810a12a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810a12c:	69bb      	ldr	r3, [r7, #24]
 810a12e:	f003 0307 	and.w	r3, r3, #7
 810a132:	2b00      	cmp	r3, #0
 810a134:	d00b      	beq.n	810a14e <prvInitialiseNewTask+0x5a>
	__asm volatile
 810a136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a13a:	f383 8811 	msr	BASEPRI, r3
 810a13e:	f3bf 8f6f 	isb	sy
 810a142:	f3bf 8f4f 	dsb	sy
 810a146:	617b      	str	r3, [r7, #20]
}
 810a148:	bf00      	nop
 810a14a:	bf00      	nop
 810a14c:	e7fd      	b.n	810a14a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810a14e:	68bb      	ldr	r3, [r7, #8]
 810a150:	2b00      	cmp	r3, #0
 810a152:	d01f      	beq.n	810a194 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810a154:	2300      	movs	r3, #0
 810a156:	61fb      	str	r3, [r7, #28]
 810a158:	e012      	b.n	810a180 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810a15a:	68ba      	ldr	r2, [r7, #8]
 810a15c:	69fb      	ldr	r3, [r7, #28]
 810a15e:	4413      	add	r3, r2
 810a160:	7819      	ldrb	r1, [r3, #0]
 810a162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a164:	69fb      	ldr	r3, [r7, #28]
 810a166:	4413      	add	r3, r2
 810a168:	3334      	adds	r3, #52	@ 0x34
 810a16a:	460a      	mov	r2, r1
 810a16c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810a16e:	68ba      	ldr	r2, [r7, #8]
 810a170:	69fb      	ldr	r3, [r7, #28]
 810a172:	4413      	add	r3, r2
 810a174:	781b      	ldrb	r3, [r3, #0]
 810a176:	2b00      	cmp	r3, #0
 810a178:	d006      	beq.n	810a188 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810a17a:	69fb      	ldr	r3, [r7, #28]
 810a17c:	3301      	adds	r3, #1
 810a17e:	61fb      	str	r3, [r7, #28]
 810a180:	69fb      	ldr	r3, [r7, #28]
 810a182:	2b0f      	cmp	r3, #15
 810a184:	d9e9      	bls.n	810a15a <prvInitialiseNewTask+0x66>
 810a186:	e000      	b.n	810a18a <prvInitialiseNewTask+0x96>
			{
				break;
 810a188:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810a18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a18c:	2200      	movs	r2, #0
 810a18e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 810a192:	e003      	b.n	810a19c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810a194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a196:	2200      	movs	r2, #0
 810a198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810a19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a19e:	2b37      	cmp	r3, #55	@ 0x37
 810a1a0:	d901      	bls.n	810a1a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810a1a2:	2337      	movs	r3, #55	@ 0x37
 810a1a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810a1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a1a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810a1aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810a1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a1ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810a1b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810a1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a1b4:	2200      	movs	r2, #0
 810a1b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810a1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a1ba:	3304      	adds	r3, #4
 810a1bc:	4618      	mov	r0, r3
 810a1be:	f7fd fefd 	bl	8107fbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810a1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a1c4:	3318      	adds	r3, #24
 810a1c6:	4618      	mov	r0, r3
 810a1c8:	f7fd fef8 	bl	8107fbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810a1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a1ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a1d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a1d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810a1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a1da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810a1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a1de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a1e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810a1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a1e4:	2200      	movs	r2, #0
 810a1e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810a1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a1ec:	2200      	movs	r2, #0
 810a1ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 810a1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a1f4:	3354      	adds	r3, #84	@ 0x54
 810a1f6:	224c      	movs	r2, #76	@ 0x4c
 810a1f8:	2100      	movs	r1, #0
 810a1fa:	4618      	mov	r0, r3
 810a1fc:	f00c fbf3 	bl	81169e6 <memset>
 810a200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a202:	4a0d      	ldr	r2, [pc, #52]	@ (810a238 <prvInitialiseNewTask+0x144>)
 810a204:	659a      	str	r2, [r3, #88]	@ 0x58
 810a206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a208:	4a0c      	ldr	r2, [pc, #48]	@ (810a23c <prvInitialiseNewTask+0x148>)
 810a20a:	65da      	str	r2, [r3, #92]	@ 0x5c
 810a20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a20e:	4a0c      	ldr	r2, [pc, #48]	@ (810a240 <prvInitialiseNewTask+0x14c>)
 810a210:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810a212:	683a      	ldr	r2, [r7, #0]
 810a214:	68f9      	ldr	r1, [r7, #12]
 810a216:	69b8      	ldr	r0, [r7, #24]
 810a218:	f7fd ff64 	bl	81080e4 <pxPortInitialiseStack>
 810a21c:	4602      	mov	r2, r0
 810a21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a220:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810a222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a224:	2b00      	cmp	r3, #0
 810a226:	d002      	beq.n	810a22e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810a228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a22a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a22c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810a22e:	bf00      	nop
 810a230:	3720      	adds	r7, #32
 810a232:	46bd      	mov	sp, r7
 810a234:	bd80      	pop	{r7, pc}
 810a236:	bf00      	nop
 810a238:	1000b8c8 	.word	0x1000b8c8
 810a23c:	1000b930 	.word	0x1000b930
 810a240:	1000b998 	.word	0x1000b998

0810a244 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810a244:	b580      	push	{r7, lr}
 810a246:	b082      	sub	sp, #8
 810a248:	af00      	add	r7, sp, #0
 810a24a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810a24c:	f7fe f87c 	bl	8108348 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810a250:	4b2d      	ldr	r3, [pc, #180]	@ (810a308 <prvAddNewTaskToReadyList+0xc4>)
 810a252:	681b      	ldr	r3, [r3, #0]
 810a254:	3301      	adds	r3, #1
 810a256:	4a2c      	ldr	r2, [pc, #176]	@ (810a308 <prvAddNewTaskToReadyList+0xc4>)
 810a258:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810a25a:	4b2c      	ldr	r3, [pc, #176]	@ (810a30c <prvAddNewTaskToReadyList+0xc8>)
 810a25c:	681b      	ldr	r3, [r3, #0]
 810a25e:	2b00      	cmp	r3, #0
 810a260:	d109      	bne.n	810a276 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810a262:	4a2a      	ldr	r2, [pc, #168]	@ (810a30c <prvAddNewTaskToReadyList+0xc8>)
 810a264:	687b      	ldr	r3, [r7, #4]
 810a266:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810a268:	4b27      	ldr	r3, [pc, #156]	@ (810a308 <prvAddNewTaskToReadyList+0xc4>)
 810a26a:	681b      	ldr	r3, [r3, #0]
 810a26c:	2b01      	cmp	r3, #1
 810a26e:	d110      	bne.n	810a292 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810a270:	f000 fc68 	bl	810ab44 <prvInitialiseTaskLists>
 810a274:	e00d      	b.n	810a292 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810a276:	4b26      	ldr	r3, [pc, #152]	@ (810a310 <prvAddNewTaskToReadyList+0xcc>)
 810a278:	681b      	ldr	r3, [r3, #0]
 810a27a:	2b00      	cmp	r3, #0
 810a27c:	d109      	bne.n	810a292 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810a27e:	4b23      	ldr	r3, [pc, #140]	@ (810a30c <prvAddNewTaskToReadyList+0xc8>)
 810a280:	681b      	ldr	r3, [r3, #0]
 810a282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a284:	687b      	ldr	r3, [r7, #4]
 810a286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a288:	429a      	cmp	r2, r3
 810a28a:	d802      	bhi.n	810a292 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810a28c:	4a1f      	ldr	r2, [pc, #124]	@ (810a30c <prvAddNewTaskToReadyList+0xc8>)
 810a28e:	687b      	ldr	r3, [r7, #4]
 810a290:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810a292:	4b20      	ldr	r3, [pc, #128]	@ (810a314 <prvAddNewTaskToReadyList+0xd0>)
 810a294:	681b      	ldr	r3, [r3, #0]
 810a296:	3301      	adds	r3, #1
 810a298:	4a1e      	ldr	r2, [pc, #120]	@ (810a314 <prvAddNewTaskToReadyList+0xd0>)
 810a29a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810a29c:	4b1d      	ldr	r3, [pc, #116]	@ (810a314 <prvAddNewTaskToReadyList+0xd0>)
 810a29e:	681a      	ldr	r2, [r3, #0]
 810a2a0:	687b      	ldr	r3, [r7, #4]
 810a2a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810a2a4:	687b      	ldr	r3, [r7, #4]
 810a2a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a2a8:	4b1b      	ldr	r3, [pc, #108]	@ (810a318 <prvAddNewTaskToReadyList+0xd4>)
 810a2aa:	681b      	ldr	r3, [r3, #0]
 810a2ac:	429a      	cmp	r2, r3
 810a2ae:	d903      	bls.n	810a2b8 <prvAddNewTaskToReadyList+0x74>
 810a2b0:	687b      	ldr	r3, [r7, #4]
 810a2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a2b4:	4a18      	ldr	r2, [pc, #96]	@ (810a318 <prvAddNewTaskToReadyList+0xd4>)
 810a2b6:	6013      	str	r3, [r2, #0]
 810a2b8:	687b      	ldr	r3, [r7, #4]
 810a2ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a2bc:	4613      	mov	r3, r2
 810a2be:	009b      	lsls	r3, r3, #2
 810a2c0:	4413      	add	r3, r2
 810a2c2:	009b      	lsls	r3, r3, #2
 810a2c4:	4a15      	ldr	r2, [pc, #84]	@ (810a31c <prvAddNewTaskToReadyList+0xd8>)
 810a2c6:	441a      	add	r2, r3
 810a2c8:	687b      	ldr	r3, [r7, #4]
 810a2ca:	3304      	adds	r3, #4
 810a2cc:	4619      	mov	r1, r3
 810a2ce:	4610      	mov	r0, r2
 810a2d0:	f7fd fe81 	bl	8107fd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810a2d4:	f7fe f86a 	bl	81083ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810a2d8:	4b0d      	ldr	r3, [pc, #52]	@ (810a310 <prvAddNewTaskToReadyList+0xcc>)
 810a2da:	681b      	ldr	r3, [r3, #0]
 810a2dc:	2b00      	cmp	r3, #0
 810a2de:	d00e      	beq.n	810a2fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810a2e0:	4b0a      	ldr	r3, [pc, #40]	@ (810a30c <prvAddNewTaskToReadyList+0xc8>)
 810a2e2:	681b      	ldr	r3, [r3, #0]
 810a2e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a2e6:	687b      	ldr	r3, [r7, #4]
 810a2e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a2ea:	429a      	cmp	r2, r3
 810a2ec:	d207      	bcs.n	810a2fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810a2ee:	4b0c      	ldr	r3, [pc, #48]	@ (810a320 <prvAddNewTaskToReadyList+0xdc>)
 810a2f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810a2f4:	601a      	str	r2, [r3, #0]
 810a2f6:	f3bf 8f4f 	dsb	sy
 810a2fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810a2fe:	bf00      	nop
 810a300:	3708      	adds	r7, #8
 810a302:	46bd      	mov	sp, r7
 810a304:	bd80      	pop	{r7, pc}
 810a306:	bf00      	nop
 810a308:	10004b30 	.word	0x10004b30
 810a30c:	1000465c 	.word	0x1000465c
 810a310:	10004b3c 	.word	0x10004b3c
 810a314:	10004b4c 	.word	0x10004b4c
 810a318:	10004b38 	.word	0x10004b38
 810a31c:	10004660 	.word	0x10004660
 810a320:	e000ed04 	.word	0xe000ed04

0810a324 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810a324:	b580      	push	{r7, lr}
 810a326:	b084      	sub	sp, #16
 810a328:	af00      	add	r7, sp, #0
 810a32a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810a32c:	2300      	movs	r3, #0
 810a32e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810a330:	687b      	ldr	r3, [r7, #4]
 810a332:	2b00      	cmp	r3, #0
 810a334:	d018      	beq.n	810a368 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810a336:	4b14      	ldr	r3, [pc, #80]	@ (810a388 <vTaskDelay+0x64>)
 810a338:	681b      	ldr	r3, [r3, #0]
 810a33a:	2b00      	cmp	r3, #0
 810a33c:	d00b      	beq.n	810a356 <vTaskDelay+0x32>
	__asm volatile
 810a33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a342:	f383 8811 	msr	BASEPRI, r3
 810a346:	f3bf 8f6f 	isb	sy
 810a34a:	f3bf 8f4f 	dsb	sy
 810a34e:	60bb      	str	r3, [r7, #8]
}
 810a350:	bf00      	nop
 810a352:	bf00      	nop
 810a354:	e7fd      	b.n	810a352 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810a356:	f000 f88b 	bl	810a470 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810a35a:	2100      	movs	r1, #0
 810a35c:	6878      	ldr	r0, [r7, #4]
 810a35e:	f000 ffbf 	bl	810b2e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810a362:	f000 f893 	bl	810a48c <xTaskResumeAll>
 810a366:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810a368:	68fb      	ldr	r3, [r7, #12]
 810a36a:	2b00      	cmp	r3, #0
 810a36c:	d107      	bne.n	810a37e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 810a36e:	4b07      	ldr	r3, [pc, #28]	@ (810a38c <vTaskDelay+0x68>)
 810a370:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810a374:	601a      	str	r2, [r3, #0]
 810a376:	f3bf 8f4f 	dsb	sy
 810a37a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810a37e:	bf00      	nop
 810a380:	3710      	adds	r7, #16
 810a382:	46bd      	mov	sp, r7
 810a384:	bd80      	pop	{r7, pc}
 810a386:	bf00      	nop
 810a388:	10004b58 	.word	0x10004b58
 810a38c:	e000ed04 	.word	0xe000ed04

0810a390 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810a390:	b580      	push	{r7, lr}
 810a392:	b08a      	sub	sp, #40	@ 0x28
 810a394:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810a396:	2300      	movs	r3, #0
 810a398:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810a39a:	2300      	movs	r3, #0
 810a39c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810a39e:	463a      	mov	r2, r7
 810a3a0:	1d39      	adds	r1, r7, #4
 810a3a2:	f107 0308 	add.w	r3, r7, #8
 810a3a6:	4618      	mov	r0, r3
 810a3a8:	f7fd fbc6 	bl	8107b38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810a3ac:	6839      	ldr	r1, [r7, #0]
 810a3ae:	687b      	ldr	r3, [r7, #4]
 810a3b0:	68ba      	ldr	r2, [r7, #8]
 810a3b2:	9202      	str	r2, [sp, #8]
 810a3b4:	9301      	str	r3, [sp, #4]
 810a3b6:	2300      	movs	r3, #0
 810a3b8:	9300      	str	r3, [sp, #0]
 810a3ba:	2300      	movs	r3, #0
 810a3bc:	460a      	mov	r2, r1
 810a3be:	4924      	ldr	r1, [pc, #144]	@ (810a450 <vTaskStartScheduler+0xc0>)
 810a3c0:	4824      	ldr	r0, [pc, #144]	@ (810a454 <vTaskStartScheduler+0xc4>)
 810a3c2:	f7ff fdf1 	bl	8109fa8 <xTaskCreateStatic>
 810a3c6:	4603      	mov	r3, r0
 810a3c8:	4a23      	ldr	r2, [pc, #140]	@ (810a458 <vTaskStartScheduler+0xc8>)
 810a3ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810a3cc:	4b22      	ldr	r3, [pc, #136]	@ (810a458 <vTaskStartScheduler+0xc8>)
 810a3ce:	681b      	ldr	r3, [r3, #0]
 810a3d0:	2b00      	cmp	r3, #0
 810a3d2:	d002      	beq.n	810a3da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810a3d4:	2301      	movs	r3, #1
 810a3d6:	617b      	str	r3, [r7, #20]
 810a3d8:	e001      	b.n	810a3de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810a3da:	2300      	movs	r3, #0
 810a3dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810a3de:	697b      	ldr	r3, [r7, #20]
 810a3e0:	2b01      	cmp	r3, #1
 810a3e2:	d102      	bne.n	810a3ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810a3e4:	f000 ffd0 	bl	810b388 <xTimerCreateTimerTask>
 810a3e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810a3ea:	697b      	ldr	r3, [r7, #20]
 810a3ec:	2b01      	cmp	r3, #1
 810a3ee:	d11b      	bne.n	810a428 <vTaskStartScheduler+0x98>
	__asm volatile
 810a3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a3f4:	f383 8811 	msr	BASEPRI, r3
 810a3f8:	f3bf 8f6f 	isb	sy
 810a3fc:	f3bf 8f4f 	dsb	sy
 810a400:	613b      	str	r3, [r7, #16]
}
 810a402:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810a404:	4b15      	ldr	r3, [pc, #84]	@ (810a45c <vTaskStartScheduler+0xcc>)
 810a406:	681b      	ldr	r3, [r3, #0]
 810a408:	3354      	adds	r3, #84	@ 0x54
 810a40a:	4a15      	ldr	r2, [pc, #84]	@ (810a460 <vTaskStartScheduler+0xd0>)
 810a40c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810a40e:	4b15      	ldr	r3, [pc, #84]	@ (810a464 <vTaskStartScheduler+0xd4>)
 810a410:	f04f 32ff 	mov.w	r2, #4294967295
 810a414:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810a416:	4b14      	ldr	r3, [pc, #80]	@ (810a468 <vTaskStartScheduler+0xd8>)
 810a418:	2201      	movs	r2, #1
 810a41a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810a41c:	4b13      	ldr	r3, [pc, #76]	@ (810a46c <vTaskStartScheduler+0xdc>)
 810a41e:	2200      	movs	r2, #0
 810a420:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810a422:	f7fd feed 	bl	8108200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810a426:	e00f      	b.n	810a448 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810a428:	697b      	ldr	r3, [r7, #20]
 810a42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a42e:	d10b      	bne.n	810a448 <vTaskStartScheduler+0xb8>
	__asm volatile
 810a430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a434:	f383 8811 	msr	BASEPRI, r3
 810a438:	f3bf 8f6f 	isb	sy
 810a43c:	f3bf 8f4f 	dsb	sy
 810a440:	60fb      	str	r3, [r7, #12]
}
 810a442:	bf00      	nop
 810a444:	bf00      	nop
 810a446:	e7fd      	b.n	810a444 <vTaskStartScheduler+0xb4>
}
 810a448:	bf00      	nop
 810a44a:	3718      	adds	r7, #24
 810a44c:	46bd      	mov	sp, r7
 810a44e:	bd80      	pop	{r7, pc}
 810a450:	08117784 	.word	0x08117784
 810a454:	0810ab15 	.word	0x0810ab15
 810a458:	10004b54 	.word	0x10004b54
 810a45c:	1000465c 	.word	0x1000465c
 810a460:	10000040 	.word	0x10000040
 810a464:	10004b50 	.word	0x10004b50
 810a468:	10004b3c 	.word	0x10004b3c
 810a46c:	10004b34 	.word	0x10004b34

0810a470 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810a470:	b480      	push	{r7}
 810a472:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810a474:	4b04      	ldr	r3, [pc, #16]	@ (810a488 <vTaskSuspendAll+0x18>)
 810a476:	681b      	ldr	r3, [r3, #0]
 810a478:	3301      	adds	r3, #1
 810a47a:	4a03      	ldr	r2, [pc, #12]	@ (810a488 <vTaskSuspendAll+0x18>)
 810a47c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810a47e:	bf00      	nop
 810a480:	46bd      	mov	sp, r7
 810a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a486:	4770      	bx	lr
 810a488:	10004b58 	.word	0x10004b58

0810a48c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810a48c:	b580      	push	{r7, lr}
 810a48e:	b084      	sub	sp, #16
 810a490:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810a492:	2300      	movs	r3, #0
 810a494:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810a496:	2300      	movs	r3, #0
 810a498:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810a49a:	4b42      	ldr	r3, [pc, #264]	@ (810a5a4 <xTaskResumeAll+0x118>)
 810a49c:	681b      	ldr	r3, [r3, #0]
 810a49e:	2b00      	cmp	r3, #0
 810a4a0:	d10b      	bne.n	810a4ba <xTaskResumeAll+0x2e>
	__asm volatile
 810a4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a4a6:	f383 8811 	msr	BASEPRI, r3
 810a4aa:	f3bf 8f6f 	isb	sy
 810a4ae:	f3bf 8f4f 	dsb	sy
 810a4b2:	603b      	str	r3, [r7, #0]
}
 810a4b4:	bf00      	nop
 810a4b6:	bf00      	nop
 810a4b8:	e7fd      	b.n	810a4b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810a4ba:	f7fd ff45 	bl	8108348 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810a4be:	4b39      	ldr	r3, [pc, #228]	@ (810a5a4 <xTaskResumeAll+0x118>)
 810a4c0:	681b      	ldr	r3, [r3, #0]
 810a4c2:	3b01      	subs	r3, #1
 810a4c4:	4a37      	ldr	r2, [pc, #220]	@ (810a5a4 <xTaskResumeAll+0x118>)
 810a4c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a4c8:	4b36      	ldr	r3, [pc, #216]	@ (810a5a4 <xTaskResumeAll+0x118>)
 810a4ca:	681b      	ldr	r3, [r3, #0]
 810a4cc:	2b00      	cmp	r3, #0
 810a4ce:	d162      	bne.n	810a596 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810a4d0:	4b35      	ldr	r3, [pc, #212]	@ (810a5a8 <xTaskResumeAll+0x11c>)
 810a4d2:	681b      	ldr	r3, [r3, #0]
 810a4d4:	2b00      	cmp	r3, #0
 810a4d6:	d05e      	beq.n	810a596 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a4d8:	e02f      	b.n	810a53a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a4da:	4b34      	ldr	r3, [pc, #208]	@ (810a5ac <xTaskResumeAll+0x120>)
 810a4dc:	68db      	ldr	r3, [r3, #12]
 810a4de:	68db      	ldr	r3, [r3, #12]
 810a4e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a4e2:	68fb      	ldr	r3, [r7, #12]
 810a4e4:	3318      	adds	r3, #24
 810a4e6:	4618      	mov	r0, r3
 810a4e8:	f7fd fdd2 	bl	8108090 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a4ec:	68fb      	ldr	r3, [r7, #12]
 810a4ee:	3304      	adds	r3, #4
 810a4f0:	4618      	mov	r0, r3
 810a4f2:	f7fd fdcd 	bl	8108090 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810a4f6:	68fb      	ldr	r3, [r7, #12]
 810a4f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a4fa:	4b2d      	ldr	r3, [pc, #180]	@ (810a5b0 <xTaskResumeAll+0x124>)
 810a4fc:	681b      	ldr	r3, [r3, #0]
 810a4fe:	429a      	cmp	r2, r3
 810a500:	d903      	bls.n	810a50a <xTaskResumeAll+0x7e>
 810a502:	68fb      	ldr	r3, [r7, #12]
 810a504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a506:	4a2a      	ldr	r2, [pc, #168]	@ (810a5b0 <xTaskResumeAll+0x124>)
 810a508:	6013      	str	r3, [r2, #0]
 810a50a:	68fb      	ldr	r3, [r7, #12]
 810a50c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a50e:	4613      	mov	r3, r2
 810a510:	009b      	lsls	r3, r3, #2
 810a512:	4413      	add	r3, r2
 810a514:	009b      	lsls	r3, r3, #2
 810a516:	4a27      	ldr	r2, [pc, #156]	@ (810a5b4 <xTaskResumeAll+0x128>)
 810a518:	441a      	add	r2, r3
 810a51a:	68fb      	ldr	r3, [r7, #12]
 810a51c:	3304      	adds	r3, #4
 810a51e:	4619      	mov	r1, r3
 810a520:	4610      	mov	r0, r2
 810a522:	f7fd fd58 	bl	8107fd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a526:	68fb      	ldr	r3, [r7, #12]
 810a528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a52a:	4b23      	ldr	r3, [pc, #140]	@ (810a5b8 <xTaskResumeAll+0x12c>)
 810a52c:	681b      	ldr	r3, [r3, #0]
 810a52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a530:	429a      	cmp	r2, r3
 810a532:	d302      	bcc.n	810a53a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810a534:	4b21      	ldr	r3, [pc, #132]	@ (810a5bc <xTaskResumeAll+0x130>)
 810a536:	2201      	movs	r2, #1
 810a538:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a53a:	4b1c      	ldr	r3, [pc, #112]	@ (810a5ac <xTaskResumeAll+0x120>)
 810a53c:	681b      	ldr	r3, [r3, #0]
 810a53e:	2b00      	cmp	r3, #0
 810a540:	d1cb      	bne.n	810a4da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810a542:	68fb      	ldr	r3, [r7, #12]
 810a544:	2b00      	cmp	r3, #0
 810a546:	d001      	beq.n	810a54c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810a548:	f000 fba0 	bl	810ac8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810a54c:	4b1c      	ldr	r3, [pc, #112]	@ (810a5c0 <xTaskResumeAll+0x134>)
 810a54e:	681b      	ldr	r3, [r3, #0]
 810a550:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810a552:	687b      	ldr	r3, [r7, #4]
 810a554:	2b00      	cmp	r3, #0
 810a556:	d010      	beq.n	810a57a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810a558:	f000 f858 	bl	810a60c <xTaskIncrementTick>
 810a55c:	4603      	mov	r3, r0
 810a55e:	2b00      	cmp	r3, #0
 810a560:	d002      	beq.n	810a568 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 810a562:	4b16      	ldr	r3, [pc, #88]	@ (810a5bc <xTaskResumeAll+0x130>)
 810a564:	2201      	movs	r2, #1
 810a566:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810a568:	687b      	ldr	r3, [r7, #4]
 810a56a:	3b01      	subs	r3, #1
 810a56c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810a56e:	687b      	ldr	r3, [r7, #4]
 810a570:	2b00      	cmp	r3, #0
 810a572:	d1f1      	bne.n	810a558 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810a574:	4b12      	ldr	r3, [pc, #72]	@ (810a5c0 <xTaskResumeAll+0x134>)
 810a576:	2200      	movs	r2, #0
 810a578:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810a57a:	4b10      	ldr	r3, [pc, #64]	@ (810a5bc <xTaskResumeAll+0x130>)
 810a57c:	681b      	ldr	r3, [r3, #0]
 810a57e:	2b00      	cmp	r3, #0
 810a580:	d009      	beq.n	810a596 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810a582:	2301      	movs	r3, #1
 810a584:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810a586:	4b0f      	ldr	r3, [pc, #60]	@ (810a5c4 <xTaskResumeAll+0x138>)
 810a588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810a58c:	601a      	str	r2, [r3, #0]
 810a58e:	f3bf 8f4f 	dsb	sy
 810a592:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810a596:	f7fd ff09 	bl	81083ac <vPortExitCritical>

	return xAlreadyYielded;
 810a59a:	68bb      	ldr	r3, [r7, #8]
}
 810a59c:	4618      	mov	r0, r3
 810a59e:	3710      	adds	r7, #16
 810a5a0:	46bd      	mov	sp, r7
 810a5a2:	bd80      	pop	{r7, pc}
 810a5a4:	10004b58 	.word	0x10004b58
 810a5a8:	10004b30 	.word	0x10004b30
 810a5ac:	10004af0 	.word	0x10004af0
 810a5b0:	10004b38 	.word	0x10004b38
 810a5b4:	10004660 	.word	0x10004660
 810a5b8:	1000465c 	.word	0x1000465c
 810a5bc:	10004b44 	.word	0x10004b44
 810a5c0:	10004b40 	.word	0x10004b40
 810a5c4:	e000ed04 	.word	0xe000ed04

0810a5c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810a5c8:	b480      	push	{r7}
 810a5ca:	b083      	sub	sp, #12
 810a5cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810a5ce:	4b05      	ldr	r3, [pc, #20]	@ (810a5e4 <xTaskGetTickCount+0x1c>)
 810a5d0:	681b      	ldr	r3, [r3, #0]
 810a5d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810a5d4:	687b      	ldr	r3, [r7, #4]
}
 810a5d6:	4618      	mov	r0, r3
 810a5d8:	370c      	adds	r7, #12
 810a5da:	46bd      	mov	sp, r7
 810a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a5e0:	4770      	bx	lr
 810a5e2:	bf00      	nop
 810a5e4:	10004b34 	.word	0x10004b34

0810a5e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 810a5e8:	b580      	push	{r7, lr}
 810a5ea:	b082      	sub	sp, #8
 810a5ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810a5ee:	f7fd ff8b 	bl	8108508 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 810a5f2:	2300      	movs	r3, #0
 810a5f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 810a5f6:	4b04      	ldr	r3, [pc, #16]	@ (810a608 <xTaskGetTickCountFromISR+0x20>)
 810a5f8:	681b      	ldr	r3, [r3, #0]
 810a5fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810a5fc:	683b      	ldr	r3, [r7, #0]
}
 810a5fe:	4618      	mov	r0, r3
 810a600:	3708      	adds	r7, #8
 810a602:	46bd      	mov	sp, r7
 810a604:	bd80      	pop	{r7, pc}
 810a606:	bf00      	nop
 810a608:	10004b34 	.word	0x10004b34

0810a60c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810a60c:	b580      	push	{r7, lr}
 810a60e:	b086      	sub	sp, #24
 810a610:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810a612:	2300      	movs	r3, #0
 810a614:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a616:	4b4f      	ldr	r3, [pc, #316]	@ (810a754 <xTaskIncrementTick+0x148>)
 810a618:	681b      	ldr	r3, [r3, #0]
 810a61a:	2b00      	cmp	r3, #0
 810a61c:	f040 8090 	bne.w	810a740 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810a620:	4b4d      	ldr	r3, [pc, #308]	@ (810a758 <xTaskIncrementTick+0x14c>)
 810a622:	681b      	ldr	r3, [r3, #0]
 810a624:	3301      	adds	r3, #1
 810a626:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810a628:	4a4b      	ldr	r2, [pc, #300]	@ (810a758 <xTaskIncrementTick+0x14c>)
 810a62a:	693b      	ldr	r3, [r7, #16]
 810a62c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810a62e:	693b      	ldr	r3, [r7, #16]
 810a630:	2b00      	cmp	r3, #0
 810a632:	d121      	bne.n	810a678 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 810a634:	4b49      	ldr	r3, [pc, #292]	@ (810a75c <xTaskIncrementTick+0x150>)
 810a636:	681b      	ldr	r3, [r3, #0]
 810a638:	681b      	ldr	r3, [r3, #0]
 810a63a:	2b00      	cmp	r3, #0
 810a63c:	d00b      	beq.n	810a656 <xTaskIncrementTick+0x4a>
	__asm volatile
 810a63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a642:	f383 8811 	msr	BASEPRI, r3
 810a646:	f3bf 8f6f 	isb	sy
 810a64a:	f3bf 8f4f 	dsb	sy
 810a64e:	603b      	str	r3, [r7, #0]
}
 810a650:	bf00      	nop
 810a652:	bf00      	nop
 810a654:	e7fd      	b.n	810a652 <xTaskIncrementTick+0x46>
 810a656:	4b41      	ldr	r3, [pc, #260]	@ (810a75c <xTaskIncrementTick+0x150>)
 810a658:	681b      	ldr	r3, [r3, #0]
 810a65a:	60fb      	str	r3, [r7, #12]
 810a65c:	4b40      	ldr	r3, [pc, #256]	@ (810a760 <xTaskIncrementTick+0x154>)
 810a65e:	681b      	ldr	r3, [r3, #0]
 810a660:	4a3e      	ldr	r2, [pc, #248]	@ (810a75c <xTaskIncrementTick+0x150>)
 810a662:	6013      	str	r3, [r2, #0]
 810a664:	4a3e      	ldr	r2, [pc, #248]	@ (810a760 <xTaskIncrementTick+0x154>)
 810a666:	68fb      	ldr	r3, [r7, #12]
 810a668:	6013      	str	r3, [r2, #0]
 810a66a:	4b3e      	ldr	r3, [pc, #248]	@ (810a764 <xTaskIncrementTick+0x158>)
 810a66c:	681b      	ldr	r3, [r3, #0]
 810a66e:	3301      	adds	r3, #1
 810a670:	4a3c      	ldr	r2, [pc, #240]	@ (810a764 <xTaskIncrementTick+0x158>)
 810a672:	6013      	str	r3, [r2, #0]
 810a674:	f000 fb0a 	bl	810ac8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810a678:	4b3b      	ldr	r3, [pc, #236]	@ (810a768 <xTaskIncrementTick+0x15c>)
 810a67a:	681b      	ldr	r3, [r3, #0]
 810a67c:	693a      	ldr	r2, [r7, #16]
 810a67e:	429a      	cmp	r2, r3
 810a680:	d349      	bcc.n	810a716 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a682:	4b36      	ldr	r3, [pc, #216]	@ (810a75c <xTaskIncrementTick+0x150>)
 810a684:	681b      	ldr	r3, [r3, #0]
 810a686:	681b      	ldr	r3, [r3, #0]
 810a688:	2b00      	cmp	r3, #0
 810a68a:	d104      	bne.n	810a696 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a68c:	4b36      	ldr	r3, [pc, #216]	@ (810a768 <xTaskIncrementTick+0x15c>)
 810a68e:	f04f 32ff 	mov.w	r2, #4294967295
 810a692:	601a      	str	r2, [r3, #0]
					break;
 810a694:	e03f      	b.n	810a716 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a696:	4b31      	ldr	r3, [pc, #196]	@ (810a75c <xTaskIncrementTick+0x150>)
 810a698:	681b      	ldr	r3, [r3, #0]
 810a69a:	68db      	ldr	r3, [r3, #12]
 810a69c:	68db      	ldr	r3, [r3, #12]
 810a69e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810a6a0:	68bb      	ldr	r3, [r7, #8]
 810a6a2:	685b      	ldr	r3, [r3, #4]
 810a6a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810a6a6:	693a      	ldr	r2, [r7, #16]
 810a6a8:	687b      	ldr	r3, [r7, #4]
 810a6aa:	429a      	cmp	r2, r3
 810a6ac:	d203      	bcs.n	810a6b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810a6ae:	4a2e      	ldr	r2, [pc, #184]	@ (810a768 <xTaskIncrementTick+0x15c>)
 810a6b0:	687b      	ldr	r3, [r7, #4]
 810a6b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810a6b4:	e02f      	b.n	810a716 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a6b6:	68bb      	ldr	r3, [r7, #8]
 810a6b8:	3304      	adds	r3, #4
 810a6ba:	4618      	mov	r0, r3
 810a6bc:	f7fd fce8 	bl	8108090 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810a6c0:	68bb      	ldr	r3, [r7, #8]
 810a6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a6c4:	2b00      	cmp	r3, #0
 810a6c6:	d004      	beq.n	810a6d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a6c8:	68bb      	ldr	r3, [r7, #8]
 810a6ca:	3318      	adds	r3, #24
 810a6cc:	4618      	mov	r0, r3
 810a6ce:	f7fd fcdf 	bl	8108090 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810a6d2:	68bb      	ldr	r3, [r7, #8]
 810a6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a6d6:	4b25      	ldr	r3, [pc, #148]	@ (810a76c <xTaskIncrementTick+0x160>)
 810a6d8:	681b      	ldr	r3, [r3, #0]
 810a6da:	429a      	cmp	r2, r3
 810a6dc:	d903      	bls.n	810a6e6 <xTaskIncrementTick+0xda>
 810a6de:	68bb      	ldr	r3, [r7, #8]
 810a6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a6e2:	4a22      	ldr	r2, [pc, #136]	@ (810a76c <xTaskIncrementTick+0x160>)
 810a6e4:	6013      	str	r3, [r2, #0]
 810a6e6:	68bb      	ldr	r3, [r7, #8]
 810a6e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a6ea:	4613      	mov	r3, r2
 810a6ec:	009b      	lsls	r3, r3, #2
 810a6ee:	4413      	add	r3, r2
 810a6f0:	009b      	lsls	r3, r3, #2
 810a6f2:	4a1f      	ldr	r2, [pc, #124]	@ (810a770 <xTaskIncrementTick+0x164>)
 810a6f4:	441a      	add	r2, r3
 810a6f6:	68bb      	ldr	r3, [r7, #8]
 810a6f8:	3304      	adds	r3, #4
 810a6fa:	4619      	mov	r1, r3
 810a6fc:	4610      	mov	r0, r2
 810a6fe:	f7fd fc6a 	bl	8107fd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a702:	68bb      	ldr	r3, [r7, #8]
 810a704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a706:	4b1b      	ldr	r3, [pc, #108]	@ (810a774 <xTaskIncrementTick+0x168>)
 810a708:	681b      	ldr	r3, [r3, #0]
 810a70a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a70c:	429a      	cmp	r2, r3
 810a70e:	d3b8      	bcc.n	810a682 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 810a710:	2301      	movs	r3, #1
 810a712:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a714:	e7b5      	b.n	810a682 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810a716:	4b17      	ldr	r3, [pc, #92]	@ (810a774 <xTaskIncrementTick+0x168>)
 810a718:	681b      	ldr	r3, [r3, #0]
 810a71a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a71c:	4914      	ldr	r1, [pc, #80]	@ (810a770 <xTaskIncrementTick+0x164>)
 810a71e:	4613      	mov	r3, r2
 810a720:	009b      	lsls	r3, r3, #2
 810a722:	4413      	add	r3, r2
 810a724:	009b      	lsls	r3, r3, #2
 810a726:	440b      	add	r3, r1
 810a728:	681b      	ldr	r3, [r3, #0]
 810a72a:	2b01      	cmp	r3, #1
 810a72c:	d901      	bls.n	810a732 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810a72e:	2301      	movs	r3, #1
 810a730:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810a732:	4b11      	ldr	r3, [pc, #68]	@ (810a778 <xTaskIncrementTick+0x16c>)
 810a734:	681b      	ldr	r3, [r3, #0]
 810a736:	2b00      	cmp	r3, #0
 810a738:	d007      	beq.n	810a74a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810a73a:	2301      	movs	r3, #1
 810a73c:	617b      	str	r3, [r7, #20]
 810a73e:	e004      	b.n	810a74a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810a740:	4b0e      	ldr	r3, [pc, #56]	@ (810a77c <xTaskIncrementTick+0x170>)
 810a742:	681b      	ldr	r3, [r3, #0]
 810a744:	3301      	adds	r3, #1
 810a746:	4a0d      	ldr	r2, [pc, #52]	@ (810a77c <xTaskIncrementTick+0x170>)
 810a748:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810a74a:	697b      	ldr	r3, [r7, #20]
}
 810a74c:	4618      	mov	r0, r3
 810a74e:	3718      	adds	r7, #24
 810a750:	46bd      	mov	sp, r7
 810a752:	bd80      	pop	{r7, pc}
 810a754:	10004b58 	.word	0x10004b58
 810a758:	10004b34 	.word	0x10004b34
 810a75c:	10004ae8 	.word	0x10004ae8
 810a760:	10004aec 	.word	0x10004aec
 810a764:	10004b48 	.word	0x10004b48
 810a768:	10004b50 	.word	0x10004b50
 810a76c:	10004b38 	.word	0x10004b38
 810a770:	10004660 	.word	0x10004660
 810a774:	1000465c 	.word	0x1000465c
 810a778:	10004b44 	.word	0x10004b44
 810a77c:	10004b40 	.word	0x10004b40

0810a780 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810a780:	b480      	push	{r7}
 810a782:	b085      	sub	sp, #20
 810a784:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810a786:	4b2b      	ldr	r3, [pc, #172]	@ (810a834 <vTaskSwitchContext+0xb4>)
 810a788:	681b      	ldr	r3, [r3, #0]
 810a78a:	2b00      	cmp	r3, #0
 810a78c:	d003      	beq.n	810a796 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810a78e:	4b2a      	ldr	r3, [pc, #168]	@ (810a838 <vTaskSwitchContext+0xb8>)
 810a790:	2201      	movs	r2, #1
 810a792:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810a794:	e047      	b.n	810a826 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 810a796:	4b28      	ldr	r3, [pc, #160]	@ (810a838 <vTaskSwitchContext+0xb8>)
 810a798:	2200      	movs	r2, #0
 810a79a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a79c:	4b27      	ldr	r3, [pc, #156]	@ (810a83c <vTaskSwitchContext+0xbc>)
 810a79e:	681b      	ldr	r3, [r3, #0]
 810a7a0:	60fb      	str	r3, [r7, #12]
 810a7a2:	e011      	b.n	810a7c8 <vTaskSwitchContext+0x48>
 810a7a4:	68fb      	ldr	r3, [r7, #12]
 810a7a6:	2b00      	cmp	r3, #0
 810a7a8:	d10b      	bne.n	810a7c2 <vTaskSwitchContext+0x42>
	__asm volatile
 810a7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a7ae:	f383 8811 	msr	BASEPRI, r3
 810a7b2:	f3bf 8f6f 	isb	sy
 810a7b6:	f3bf 8f4f 	dsb	sy
 810a7ba:	607b      	str	r3, [r7, #4]
}
 810a7bc:	bf00      	nop
 810a7be:	bf00      	nop
 810a7c0:	e7fd      	b.n	810a7be <vTaskSwitchContext+0x3e>
 810a7c2:	68fb      	ldr	r3, [r7, #12]
 810a7c4:	3b01      	subs	r3, #1
 810a7c6:	60fb      	str	r3, [r7, #12]
 810a7c8:	491d      	ldr	r1, [pc, #116]	@ (810a840 <vTaskSwitchContext+0xc0>)
 810a7ca:	68fa      	ldr	r2, [r7, #12]
 810a7cc:	4613      	mov	r3, r2
 810a7ce:	009b      	lsls	r3, r3, #2
 810a7d0:	4413      	add	r3, r2
 810a7d2:	009b      	lsls	r3, r3, #2
 810a7d4:	440b      	add	r3, r1
 810a7d6:	681b      	ldr	r3, [r3, #0]
 810a7d8:	2b00      	cmp	r3, #0
 810a7da:	d0e3      	beq.n	810a7a4 <vTaskSwitchContext+0x24>
 810a7dc:	68fa      	ldr	r2, [r7, #12]
 810a7de:	4613      	mov	r3, r2
 810a7e0:	009b      	lsls	r3, r3, #2
 810a7e2:	4413      	add	r3, r2
 810a7e4:	009b      	lsls	r3, r3, #2
 810a7e6:	4a16      	ldr	r2, [pc, #88]	@ (810a840 <vTaskSwitchContext+0xc0>)
 810a7e8:	4413      	add	r3, r2
 810a7ea:	60bb      	str	r3, [r7, #8]
 810a7ec:	68bb      	ldr	r3, [r7, #8]
 810a7ee:	685b      	ldr	r3, [r3, #4]
 810a7f0:	685a      	ldr	r2, [r3, #4]
 810a7f2:	68bb      	ldr	r3, [r7, #8]
 810a7f4:	605a      	str	r2, [r3, #4]
 810a7f6:	68bb      	ldr	r3, [r7, #8]
 810a7f8:	685a      	ldr	r2, [r3, #4]
 810a7fa:	68bb      	ldr	r3, [r7, #8]
 810a7fc:	3308      	adds	r3, #8
 810a7fe:	429a      	cmp	r2, r3
 810a800:	d104      	bne.n	810a80c <vTaskSwitchContext+0x8c>
 810a802:	68bb      	ldr	r3, [r7, #8]
 810a804:	685b      	ldr	r3, [r3, #4]
 810a806:	685a      	ldr	r2, [r3, #4]
 810a808:	68bb      	ldr	r3, [r7, #8]
 810a80a:	605a      	str	r2, [r3, #4]
 810a80c:	68bb      	ldr	r3, [r7, #8]
 810a80e:	685b      	ldr	r3, [r3, #4]
 810a810:	68db      	ldr	r3, [r3, #12]
 810a812:	4a0c      	ldr	r2, [pc, #48]	@ (810a844 <vTaskSwitchContext+0xc4>)
 810a814:	6013      	str	r3, [r2, #0]
 810a816:	4a09      	ldr	r2, [pc, #36]	@ (810a83c <vTaskSwitchContext+0xbc>)
 810a818:	68fb      	ldr	r3, [r7, #12]
 810a81a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810a81c:	4b09      	ldr	r3, [pc, #36]	@ (810a844 <vTaskSwitchContext+0xc4>)
 810a81e:	681b      	ldr	r3, [r3, #0]
 810a820:	3354      	adds	r3, #84	@ 0x54
 810a822:	4a09      	ldr	r2, [pc, #36]	@ (810a848 <vTaskSwitchContext+0xc8>)
 810a824:	6013      	str	r3, [r2, #0]
}
 810a826:	bf00      	nop
 810a828:	3714      	adds	r7, #20
 810a82a:	46bd      	mov	sp, r7
 810a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a830:	4770      	bx	lr
 810a832:	bf00      	nop
 810a834:	10004b58 	.word	0x10004b58
 810a838:	10004b44 	.word	0x10004b44
 810a83c:	10004b38 	.word	0x10004b38
 810a840:	10004660 	.word	0x10004660
 810a844:	1000465c 	.word	0x1000465c
 810a848:	10000040 	.word	0x10000040

0810a84c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810a84c:	b580      	push	{r7, lr}
 810a84e:	b084      	sub	sp, #16
 810a850:	af00      	add	r7, sp, #0
 810a852:	6078      	str	r0, [r7, #4]
 810a854:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810a856:	687b      	ldr	r3, [r7, #4]
 810a858:	2b00      	cmp	r3, #0
 810a85a:	d10b      	bne.n	810a874 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810a85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a860:	f383 8811 	msr	BASEPRI, r3
 810a864:	f3bf 8f6f 	isb	sy
 810a868:	f3bf 8f4f 	dsb	sy
 810a86c:	60fb      	str	r3, [r7, #12]
}
 810a86e:	bf00      	nop
 810a870:	bf00      	nop
 810a872:	e7fd      	b.n	810a870 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810a874:	4b07      	ldr	r3, [pc, #28]	@ (810a894 <vTaskPlaceOnEventList+0x48>)
 810a876:	681b      	ldr	r3, [r3, #0]
 810a878:	3318      	adds	r3, #24
 810a87a:	4619      	mov	r1, r3
 810a87c:	6878      	ldr	r0, [r7, #4]
 810a87e:	f7fd fbce 	bl	810801e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810a882:	2101      	movs	r1, #1
 810a884:	6838      	ldr	r0, [r7, #0]
 810a886:	f000 fd2b 	bl	810b2e0 <prvAddCurrentTaskToDelayedList>
}
 810a88a:	bf00      	nop
 810a88c:	3710      	adds	r7, #16
 810a88e:	46bd      	mov	sp, r7
 810a890:	bd80      	pop	{r7, pc}
 810a892:	bf00      	nop
 810a894:	1000465c 	.word	0x1000465c

0810a898 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810a898:	b580      	push	{r7, lr}
 810a89a:	b086      	sub	sp, #24
 810a89c:	af00      	add	r7, sp, #0
 810a89e:	60f8      	str	r0, [r7, #12]
 810a8a0:	60b9      	str	r1, [r7, #8]
 810a8a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810a8a4:	68fb      	ldr	r3, [r7, #12]
 810a8a6:	2b00      	cmp	r3, #0
 810a8a8:	d10b      	bne.n	810a8c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810a8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a8ae:	f383 8811 	msr	BASEPRI, r3
 810a8b2:	f3bf 8f6f 	isb	sy
 810a8b6:	f3bf 8f4f 	dsb	sy
 810a8ba:	617b      	str	r3, [r7, #20]
}
 810a8bc:	bf00      	nop
 810a8be:	bf00      	nop
 810a8c0:	e7fd      	b.n	810a8be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810a8c2:	4b0a      	ldr	r3, [pc, #40]	@ (810a8ec <vTaskPlaceOnEventListRestricted+0x54>)
 810a8c4:	681b      	ldr	r3, [r3, #0]
 810a8c6:	3318      	adds	r3, #24
 810a8c8:	4619      	mov	r1, r3
 810a8ca:	68f8      	ldr	r0, [r7, #12]
 810a8cc:	f7fd fb83 	bl	8107fd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810a8d0:	687b      	ldr	r3, [r7, #4]
 810a8d2:	2b00      	cmp	r3, #0
 810a8d4:	d002      	beq.n	810a8dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810a8d6:	f04f 33ff 	mov.w	r3, #4294967295
 810a8da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810a8dc:	6879      	ldr	r1, [r7, #4]
 810a8de:	68b8      	ldr	r0, [r7, #8]
 810a8e0:	f000 fcfe 	bl	810b2e0 <prvAddCurrentTaskToDelayedList>
	}
 810a8e4:	bf00      	nop
 810a8e6:	3718      	adds	r7, #24
 810a8e8:	46bd      	mov	sp, r7
 810a8ea:	bd80      	pop	{r7, pc}
 810a8ec:	1000465c 	.word	0x1000465c

0810a8f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810a8f0:	b580      	push	{r7, lr}
 810a8f2:	b086      	sub	sp, #24
 810a8f4:	af00      	add	r7, sp, #0
 810a8f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a8f8:	687b      	ldr	r3, [r7, #4]
 810a8fa:	68db      	ldr	r3, [r3, #12]
 810a8fc:	68db      	ldr	r3, [r3, #12]
 810a8fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810a900:	693b      	ldr	r3, [r7, #16]
 810a902:	2b00      	cmp	r3, #0
 810a904:	d10b      	bne.n	810a91e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810a906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a90a:	f383 8811 	msr	BASEPRI, r3
 810a90e:	f3bf 8f6f 	isb	sy
 810a912:	f3bf 8f4f 	dsb	sy
 810a916:	60fb      	str	r3, [r7, #12]
}
 810a918:	bf00      	nop
 810a91a:	bf00      	nop
 810a91c:	e7fd      	b.n	810a91a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810a91e:	693b      	ldr	r3, [r7, #16]
 810a920:	3318      	adds	r3, #24
 810a922:	4618      	mov	r0, r3
 810a924:	f7fd fbb4 	bl	8108090 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a928:	4b1d      	ldr	r3, [pc, #116]	@ (810a9a0 <xTaskRemoveFromEventList+0xb0>)
 810a92a:	681b      	ldr	r3, [r3, #0]
 810a92c:	2b00      	cmp	r3, #0
 810a92e:	d11d      	bne.n	810a96c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810a930:	693b      	ldr	r3, [r7, #16]
 810a932:	3304      	adds	r3, #4
 810a934:	4618      	mov	r0, r3
 810a936:	f7fd fbab 	bl	8108090 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810a93a:	693b      	ldr	r3, [r7, #16]
 810a93c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a93e:	4b19      	ldr	r3, [pc, #100]	@ (810a9a4 <xTaskRemoveFromEventList+0xb4>)
 810a940:	681b      	ldr	r3, [r3, #0]
 810a942:	429a      	cmp	r2, r3
 810a944:	d903      	bls.n	810a94e <xTaskRemoveFromEventList+0x5e>
 810a946:	693b      	ldr	r3, [r7, #16]
 810a948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a94a:	4a16      	ldr	r2, [pc, #88]	@ (810a9a4 <xTaskRemoveFromEventList+0xb4>)
 810a94c:	6013      	str	r3, [r2, #0]
 810a94e:	693b      	ldr	r3, [r7, #16]
 810a950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a952:	4613      	mov	r3, r2
 810a954:	009b      	lsls	r3, r3, #2
 810a956:	4413      	add	r3, r2
 810a958:	009b      	lsls	r3, r3, #2
 810a95a:	4a13      	ldr	r2, [pc, #76]	@ (810a9a8 <xTaskRemoveFromEventList+0xb8>)
 810a95c:	441a      	add	r2, r3
 810a95e:	693b      	ldr	r3, [r7, #16]
 810a960:	3304      	adds	r3, #4
 810a962:	4619      	mov	r1, r3
 810a964:	4610      	mov	r0, r2
 810a966:	f7fd fb36 	bl	8107fd6 <vListInsertEnd>
 810a96a:	e005      	b.n	810a978 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810a96c:	693b      	ldr	r3, [r7, #16]
 810a96e:	3318      	adds	r3, #24
 810a970:	4619      	mov	r1, r3
 810a972:	480e      	ldr	r0, [pc, #56]	@ (810a9ac <xTaskRemoveFromEventList+0xbc>)
 810a974:	f7fd fb2f 	bl	8107fd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810a978:	693b      	ldr	r3, [r7, #16]
 810a97a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a97c:	4b0c      	ldr	r3, [pc, #48]	@ (810a9b0 <xTaskRemoveFromEventList+0xc0>)
 810a97e:	681b      	ldr	r3, [r3, #0]
 810a980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a982:	429a      	cmp	r2, r3
 810a984:	d905      	bls.n	810a992 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810a986:	2301      	movs	r3, #1
 810a988:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810a98a:	4b0a      	ldr	r3, [pc, #40]	@ (810a9b4 <xTaskRemoveFromEventList+0xc4>)
 810a98c:	2201      	movs	r2, #1
 810a98e:	601a      	str	r2, [r3, #0]
 810a990:	e001      	b.n	810a996 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 810a992:	2300      	movs	r3, #0
 810a994:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810a996:	697b      	ldr	r3, [r7, #20]
}
 810a998:	4618      	mov	r0, r3
 810a99a:	3718      	adds	r7, #24
 810a99c:	46bd      	mov	sp, r7
 810a99e:	bd80      	pop	{r7, pc}
 810a9a0:	10004b58 	.word	0x10004b58
 810a9a4:	10004b38 	.word	0x10004b38
 810a9a8:	10004660 	.word	0x10004660
 810a9ac:	10004af0 	.word	0x10004af0
 810a9b0:	1000465c 	.word	0x1000465c
 810a9b4:	10004b44 	.word	0x10004b44

0810a9b8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810a9b8:	b580      	push	{r7, lr}
 810a9ba:	b084      	sub	sp, #16
 810a9bc:	af00      	add	r7, sp, #0
 810a9be:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 810a9c0:	687b      	ldr	r3, [r7, #4]
 810a9c2:	2b00      	cmp	r3, #0
 810a9c4:	d10b      	bne.n	810a9de <vTaskSetTimeOutState+0x26>
	__asm volatile
 810a9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a9ca:	f383 8811 	msr	BASEPRI, r3
 810a9ce:	f3bf 8f6f 	isb	sy
 810a9d2:	f3bf 8f4f 	dsb	sy
 810a9d6:	60fb      	str	r3, [r7, #12]
}
 810a9d8:	bf00      	nop
 810a9da:	bf00      	nop
 810a9dc:	e7fd      	b.n	810a9da <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 810a9de:	f7fd fcb3 	bl	8108348 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 810a9e2:	4b07      	ldr	r3, [pc, #28]	@ (810aa00 <vTaskSetTimeOutState+0x48>)
 810a9e4:	681a      	ldr	r2, [r3, #0]
 810a9e6:	687b      	ldr	r3, [r7, #4]
 810a9e8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 810a9ea:	4b06      	ldr	r3, [pc, #24]	@ (810aa04 <vTaskSetTimeOutState+0x4c>)
 810a9ec:	681a      	ldr	r2, [r3, #0]
 810a9ee:	687b      	ldr	r3, [r7, #4]
 810a9f0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 810a9f2:	f7fd fcdb 	bl	81083ac <vPortExitCritical>
}
 810a9f6:	bf00      	nop
 810a9f8:	3710      	adds	r7, #16
 810a9fa:	46bd      	mov	sp, r7
 810a9fc:	bd80      	pop	{r7, pc}
 810a9fe:	bf00      	nop
 810aa00:	10004b48 	.word	0x10004b48
 810aa04:	10004b34 	.word	0x10004b34

0810aa08 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810aa08:	b480      	push	{r7}
 810aa0a:	b083      	sub	sp, #12
 810aa0c:	af00      	add	r7, sp, #0
 810aa0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810aa10:	4b06      	ldr	r3, [pc, #24]	@ (810aa2c <vTaskInternalSetTimeOutState+0x24>)
 810aa12:	681a      	ldr	r2, [r3, #0]
 810aa14:	687b      	ldr	r3, [r7, #4]
 810aa16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810aa18:	4b05      	ldr	r3, [pc, #20]	@ (810aa30 <vTaskInternalSetTimeOutState+0x28>)
 810aa1a:	681a      	ldr	r2, [r3, #0]
 810aa1c:	687b      	ldr	r3, [r7, #4]
 810aa1e:	605a      	str	r2, [r3, #4]
}
 810aa20:	bf00      	nop
 810aa22:	370c      	adds	r7, #12
 810aa24:	46bd      	mov	sp, r7
 810aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa2a:	4770      	bx	lr
 810aa2c:	10004b48 	.word	0x10004b48
 810aa30:	10004b34 	.word	0x10004b34

0810aa34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810aa34:	b580      	push	{r7, lr}
 810aa36:	b088      	sub	sp, #32
 810aa38:	af00      	add	r7, sp, #0
 810aa3a:	6078      	str	r0, [r7, #4]
 810aa3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810aa3e:	687b      	ldr	r3, [r7, #4]
 810aa40:	2b00      	cmp	r3, #0
 810aa42:	d10b      	bne.n	810aa5c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 810aa44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810aa48:	f383 8811 	msr	BASEPRI, r3
 810aa4c:	f3bf 8f6f 	isb	sy
 810aa50:	f3bf 8f4f 	dsb	sy
 810aa54:	613b      	str	r3, [r7, #16]
}
 810aa56:	bf00      	nop
 810aa58:	bf00      	nop
 810aa5a:	e7fd      	b.n	810aa58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810aa5c:	683b      	ldr	r3, [r7, #0]
 810aa5e:	2b00      	cmp	r3, #0
 810aa60:	d10b      	bne.n	810aa7a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 810aa62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810aa66:	f383 8811 	msr	BASEPRI, r3
 810aa6a:	f3bf 8f6f 	isb	sy
 810aa6e:	f3bf 8f4f 	dsb	sy
 810aa72:	60fb      	str	r3, [r7, #12]
}
 810aa74:	bf00      	nop
 810aa76:	bf00      	nop
 810aa78:	e7fd      	b.n	810aa76 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810aa7a:	f7fd fc65 	bl	8108348 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810aa7e:	4b1d      	ldr	r3, [pc, #116]	@ (810aaf4 <xTaskCheckForTimeOut+0xc0>)
 810aa80:	681b      	ldr	r3, [r3, #0]
 810aa82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810aa84:	687b      	ldr	r3, [r7, #4]
 810aa86:	685b      	ldr	r3, [r3, #4]
 810aa88:	69ba      	ldr	r2, [r7, #24]
 810aa8a:	1ad3      	subs	r3, r2, r3
 810aa8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810aa8e:	683b      	ldr	r3, [r7, #0]
 810aa90:	681b      	ldr	r3, [r3, #0]
 810aa92:	f1b3 3fff 	cmp.w	r3, #4294967295
 810aa96:	d102      	bne.n	810aa9e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810aa98:	2300      	movs	r3, #0
 810aa9a:	61fb      	str	r3, [r7, #28]
 810aa9c:	e023      	b.n	810aae6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810aa9e:	687b      	ldr	r3, [r7, #4]
 810aaa0:	681a      	ldr	r2, [r3, #0]
 810aaa2:	4b15      	ldr	r3, [pc, #84]	@ (810aaf8 <xTaskCheckForTimeOut+0xc4>)
 810aaa4:	681b      	ldr	r3, [r3, #0]
 810aaa6:	429a      	cmp	r2, r3
 810aaa8:	d007      	beq.n	810aaba <xTaskCheckForTimeOut+0x86>
 810aaaa:	687b      	ldr	r3, [r7, #4]
 810aaac:	685b      	ldr	r3, [r3, #4]
 810aaae:	69ba      	ldr	r2, [r7, #24]
 810aab0:	429a      	cmp	r2, r3
 810aab2:	d302      	bcc.n	810aaba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810aab4:	2301      	movs	r3, #1
 810aab6:	61fb      	str	r3, [r7, #28]
 810aab8:	e015      	b.n	810aae6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810aaba:	683b      	ldr	r3, [r7, #0]
 810aabc:	681b      	ldr	r3, [r3, #0]
 810aabe:	697a      	ldr	r2, [r7, #20]
 810aac0:	429a      	cmp	r2, r3
 810aac2:	d20b      	bcs.n	810aadc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810aac4:	683b      	ldr	r3, [r7, #0]
 810aac6:	681a      	ldr	r2, [r3, #0]
 810aac8:	697b      	ldr	r3, [r7, #20]
 810aaca:	1ad2      	subs	r2, r2, r3
 810aacc:	683b      	ldr	r3, [r7, #0]
 810aace:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810aad0:	6878      	ldr	r0, [r7, #4]
 810aad2:	f7ff ff99 	bl	810aa08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810aad6:	2300      	movs	r3, #0
 810aad8:	61fb      	str	r3, [r7, #28]
 810aada:	e004      	b.n	810aae6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 810aadc:	683b      	ldr	r3, [r7, #0]
 810aade:	2200      	movs	r2, #0
 810aae0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810aae2:	2301      	movs	r3, #1
 810aae4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810aae6:	f7fd fc61 	bl	81083ac <vPortExitCritical>

	return xReturn;
 810aaea:	69fb      	ldr	r3, [r7, #28]
}
 810aaec:	4618      	mov	r0, r3
 810aaee:	3720      	adds	r7, #32
 810aaf0:	46bd      	mov	sp, r7
 810aaf2:	bd80      	pop	{r7, pc}
 810aaf4:	10004b34 	.word	0x10004b34
 810aaf8:	10004b48 	.word	0x10004b48

0810aafc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810aafc:	b480      	push	{r7}
 810aafe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810ab00:	4b03      	ldr	r3, [pc, #12]	@ (810ab10 <vTaskMissedYield+0x14>)
 810ab02:	2201      	movs	r2, #1
 810ab04:	601a      	str	r2, [r3, #0]
}
 810ab06:	bf00      	nop
 810ab08:	46bd      	mov	sp, r7
 810ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab0e:	4770      	bx	lr
 810ab10:	10004b44 	.word	0x10004b44

0810ab14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810ab14:	b580      	push	{r7, lr}
 810ab16:	b082      	sub	sp, #8
 810ab18:	af00      	add	r7, sp, #0
 810ab1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810ab1c:	f000 f852 	bl	810abc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810ab20:	4b06      	ldr	r3, [pc, #24]	@ (810ab3c <prvIdleTask+0x28>)
 810ab22:	681b      	ldr	r3, [r3, #0]
 810ab24:	2b01      	cmp	r3, #1
 810ab26:	d9f9      	bls.n	810ab1c <prvIdleTask+0x8>
			{
				taskYIELD();
 810ab28:	4b05      	ldr	r3, [pc, #20]	@ (810ab40 <prvIdleTask+0x2c>)
 810ab2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ab2e:	601a      	str	r2, [r3, #0]
 810ab30:	f3bf 8f4f 	dsb	sy
 810ab34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810ab38:	e7f0      	b.n	810ab1c <prvIdleTask+0x8>
 810ab3a:	bf00      	nop
 810ab3c:	10004660 	.word	0x10004660
 810ab40:	e000ed04 	.word	0xe000ed04

0810ab44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810ab44:	b580      	push	{r7, lr}
 810ab46:	b082      	sub	sp, #8
 810ab48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810ab4a:	2300      	movs	r3, #0
 810ab4c:	607b      	str	r3, [r7, #4]
 810ab4e:	e00c      	b.n	810ab6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810ab50:	687a      	ldr	r2, [r7, #4]
 810ab52:	4613      	mov	r3, r2
 810ab54:	009b      	lsls	r3, r3, #2
 810ab56:	4413      	add	r3, r2
 810ab58:	009b      	lsls	r3, r3, #2
 810ab5a:	4a12      	ldr	r2, [pc, #72]	@ (810aba4 <prvInitialiseTaskLists+0x60>)
 810ab5c:	4413      	add	r3, r2
 810ab5e:	4618      	mov	r0, r3
 810ab60:	f7fd fa0c 	bl	8107f7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810ab64:	687b      	ldr	r3, [r7, #4]
 810ab66:	3301      	adds	r3, #1
 810ab68:	607b      	str	r3, [r7, #4]
 810ab6a:	687b      	ldr	r3, [r7, #4]
 810ab6c:	2b37      	cmp	r3, #55	@ 0x37
 810ab6e:	d9ef      	bls.n	810ab50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810ab70:	480d      	ldr	r0, [pc, #52]	@ (810aba8 <prvInitialiseTaskLists+0x64>)
 810ab72:	f7fd fa03 	bl	8107f7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810ab76:	480d      	ldr	r0, [pc, #52]	@ (810abac <prvInitialiseTaskLists+0x68>)
 810ab78:	f7fd fa00 	bl	8107f7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810ab7c:	480c      	ldr	r0, [pc, #48]	@ (810abb0 <prvInitialiseTaskLists+0x6c>)
 810ab7e:	f7fd f9fd 	bl	8107f7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810ab82:	480c      	ldr	r0, [pc, #48]	@ (810abb4 <prvInitialiseTaskLists+0x70>)
 810ab84:	f7fd f9fa 	bl	8107f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810ab88:	480b      	ldr	r0, [pc, #44]	@ (810abb8 <prvInitialiseTaskLists+0x74>)
 810ab8a:	f7fd f9f7 	bl	8107f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810ab8e:	4b0b      	ldr	r3, [pc, #44]	@ (810abbc <prvInitialiseTaskLists+0x78>)
 810ab90:	4a05      	ldr	r2, [pc, #20]	@ (810aba8 <prvInitialiseTaskLists+0x64>)
 810ab92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810ab94:	4b0a      	ldr	r3, [pc, #40]	@ (810abc0 <prvInitialiseTaskLists+0x7c>)
 810ab96:	4a05      	ldr	r2, [pc, #20]	@ (810abac <prvInitialiseTaskLists+0x68>)
 810ab98:	601a      	str	r2, [r3, #0]
}
 810ab9a:	bf00      	nop
 810ab9c:	3708      	adds	r7, #8
 810ab9e:	46bd      	mov	sp, r7
 810aba0:	bd80      	pop	{r7, pc}
 810aba2:	bf00      	nop
 810aba4:	10004660 	.word	0x10004660
 810aba8:	10004ac0 	.word	0x10004ac0
 810abac:	10004ad4 	.word	0x10004ad4
 810abb0:	10004af0 	.word	0x10004af0
 810abb4:	10004b04 	.word	0x10004b04
 810abb8:	10004b1c 	.word	0x10004b1c
 810abbc:	10004ae8 	.word	0x10004ae8
 810abc0:	10004aec 	.word	0x10004aec

0810abc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810abc4:	b580      	push	{r7, lr}
 810abc6:	b082      	sub	sp, #8
 810abc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810abca:	e019      	b.n	810ac00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810abcc:	f7fd fbbc 	bl	8108348 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810abd0:	4b10      	ldr	r3, [pc, #64]	@ (810ac14 <prvCheckTasksWaitingTermination+0x50>)
 810abd2:	68db      	ldr	r3, [r3, #12]
 810abd4:	68db      	ldr	r3, [r3, #12]
 810abd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810abd8:	687b      	ldr	r3, [r7, #4]
 810abda:	3304      	adds	r3, #4
 810abdc:	4618      	mov	r0, r3
 810abde:	f7fd fa57 	bl	8108090 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810abe2:	4b0d      	ldr	r3, [pc, #52]	@ (810ac18 <prvCheckTasksWaitingTermination+0x54>)
 810abe4:	681b      	ldr	r3, [r3, #0]
 810abe6:	3b01      	subs	r3, #1
 810abe8:	4a0b      	ldr	r2, [pc, #44]	@ (810ac18 <prvCheckTasksWaitingTermination+0x54>)
 810abea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810abec:	4b0b      	ldr	r3, [pc, #44]	@ (810ac1c <prvCheckTasksWaitingTermination+0x58>)
 810abee:	681b      	ldr	r3, [r3, #0]
 810abf0:	3b01      	subs	r3, #1
 810abf2:	4a0a      	ldr	r2, [pc, #40]	@ (810ac1c <prvCheckTasksWaitingTermination+0x58>)
 810abf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810abf6:	f7fd fbd9 	bl	81083ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810abfa:	6878      	ldr	r0, [r7, #4]
 810abfc:	f000 f810 	bl	810ac20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810ac00:	4b06      	ldr	r3, [pc, #24]	@ (810ac1c <prvCheckTasksWaitingTermination+0x58>)
 810ac02:	681b      	ldr	r3, [r3, #0]
 810ac04:	2b00      	cmp	r3, #0
 810ac06:	d1e1      	bne.n	810abcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810ac08:	bf00      	nop
 810ac0a:	bf00      	nop
 810ac0c:	3708      	adds	r7, #8
 810ac0e:	46bd      	mov	sp, r7
 810ac10:	bd80      	pop	{r7, pc}
 810ac12:	bf00      	nop
 810ac14:	10004b04 	.word	0x10004b04
 810ac18:	10004b30 	.word	0x10004b30
 810ac1c:	10004b18 	.word	0x10004b18

0810ac20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810ac20:	b580      	push	{r7, lr}
 810ac22:	b084      	sub	sp, #16
 810ac24:	af00      	add	r7, sp, #0
 810ac26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 810ac28:	687b      	ldr	r3, [r7, #4]
 810ac2a:	3354      	adds	r3, #84	@ 0x54
 810ac2c:	4618      	mov	r0, r3
 810ac2e:	f00b ff23 	bl	8116a78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810ac32:	687b      	ldr	r3, [r7, #4]
 810ac34:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810ac38:	2b00      	cmp	r3, #0
 810ac3a:	d108      	bne.n	810ac4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810ac3c:	687b      	ldr	r3, [r7, #4]
 810ac3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810ac40:	4618      	mov	r0, r3
 810ac42:	f7fd f87b 	bl	8107d3c <vPortFree>
				vPortFree( pxTCB );
 810ac46:	6878      	ldr	r0, [r7, #4]
 810ac48:	f7fd f878 	bl	8107d3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810ac4c:	e019      	b.n	810ac82 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810ac4e:	687b      	ldr	r3, [r7, #4]
 810ac50:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810ac54:	2b01      	cmp	r3, #1
 810ac56:	d103      	bne.n	810ac60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 810ac58:	6878      	ldr	r0, [r7, #4]
 810ac5a:	f7fd f86f 	bl	8107d3c <vPortFree>
	}
 810ac5e:	e010      	b.n	810ac82 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810ac60:	687b      	ldr	r3, [r7, #4]
 810ac62:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810ac66:	2b02      	cmp	r3, #2
 810ac68:	d00b      	beq.n	810ac82 <prvDeleteTCB+0x62>
	__asm volatile
 810ac6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ac6e:	f383 8811 	msr	BASEPRI, r3
 810ac72:	f3bf 8f6f 	isb	sy
 810ac76:	f3bf 8f4f 	dsb	sy
 810ac7a:	60fb      	str	r3, [r7, #12]
}
 810ac7c:	bf00      	nop
 810ac7e:	bf00      	nop
 810ac80:	e7fd      	b.n	810ac7e <prvDeleteTCB+0x5e>
	}
 810ac82:	bf00      	nop
 810ac84:	3710      	adds	r7, #16
 810ac86:	46bd      	mov	sp, r7
 810ac88:	bd80      	pop	{r7, pc}
	...

0810ac8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810ac8c:	b480      	push	{r7}
 810ac8e:	b083      	sub	sp, #12
 810ac90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810ac92:	4b0c      	ldr	r3, [pc, #48]	@ (810acc4 <prvResetNextTaskUnblockTime+0x38>)
 810ac94:	681b      	ldr	r3, [r3, #0]
 810ac96:	681b      	ldr	r3, [r3, #0]
 810ac98:	2b00      	cmp	r3, #0
 810ac9a:	d104      	bne.n	810aca6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810ac9c:	4b0a      	ldr	r3, [pc, #40]	@ (810acc8 <prvResetNextTaskUnblockTime+0x3c>)
 810ac9e:	f04f 32ff 	mov.w	r2, #4294967295
 810aca2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810aca4:	e008      	b.n	810acb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810aca6:	4b07      	ldr	r3, [pc, #28]	@ (810acc4 <prvResetNextTaskUnblockTime+0x38>)
 810aca8:	681b      	ldr	r3, [r3, #0]
 810acaa:	68db      	ldr	r3, [r3, #12]
 810acac:	68db      	ldr	r3, [r3, #12]
 810acae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810acb0:	687b      	ldr	r3, [r7, #4]
 810acb2:	685b      	ldr	r3, [r3, #4]
 810acb4:	4a04      	ldr	r2, [pc, #16]	@ (810acc8 <prvResetNextTaskUnblockTime+0x3c>)
 810acb6:	6013      	str	r3, [r2, #0]
}
 810acb8:	bf00      	nop
 810acba:	370c      	adds	r7, #12
 810acbc:	46bd      	mov	sp, r7
 810acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810acc2:	4770      	bx	lr
 810acc4:	10004ae8 	.word	0x10004ae8
 810acc8:	10004b50 	.word	0x10004b50

0810accc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 810accc:	b480      	push	{r7}
 810acce:	b083      	sub	sp, #12
 810acd0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 810acd2:	4b05      	ldr	r3, [pc, #20]	@ (810ace8 <xTaskGetCurrentTaskHandle+0x1c>)
 810acd4:	681b      	ldr	r3, [r3, #0]
 810acd6:	607b      	str	r3, [r7, #4]

		return xReturn;
 810acd8:	687b      	ldr	r3, [r7, #4]
	}
 810acda:	4618      	mov	r0, r3
 810acdc:	370c      	adds	r7, #12
 810acde:	46bd      	mov	sp, r7
 810ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ace4:	4770      	bx	lr
 810ace6:	bf00      	nop
 810ace8:	1000465c 	.word	0x1000465c

0810acec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810acec:	b480      	push	{r7}
 810acee:	b083      	sub	sp, #12
 810acf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810acf2:	4b0b      	ldr	r3, [pc, #44]	@ (810ad20 <xTaskGetSchedulerState+0x34>)
 810acf4:	681b      	ldr	r3, [r3, #0]
 810acf6:	2b00      	cmp	r3, #0
 810acf8:	d102      	bne.n	810ad00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810acfa:	2301      	movs	r3, #1
 810acfc:	607b      	str	r3, [r7, #4]
 810acfe:	e008      	b.n	810ad12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810ad00:	4b08      	ldr	r3, [pc, #32]	@ (810ad24 <xTaskGetSchedulerState+0x38>)
 810ad02:	681b      	ldr	r3, [r3, #0]
 810ad04:	2b00      	cmp	r3, #0
 810ad06:	d102      	bne.n	810ad0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810ad08:	2302      	movs	r3, #2
 810ad0a:	607b      	str	r3, [r7, #4]
 810ad0c:	e001      	b.n	810ad12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810ad0e:	2300      	movs	r3, #0
 810ad10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810ad12:	687b      	ldr	r3, [r7, #4]
	}
 810ad14:	4618      	mov	r0, r3
 810ad16:	370c      	adds	r7, #12
 810ad18:	46bd      	mov	sp, r7
 810ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad1e:	4770      	bx	lr
 810ad20:	10004b3c 	.word	0x10004b3c
 810ad24:	10004b58 	.word	0x10004b58

0810ad28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 810ad28:	b580      	push	{r7, lr}
 810ad2a:	b084      	sub	sp, #16
 810ad2c:	af00      	add	r7, sp, #0
 810ad2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 810ad30:	687b      	ldr	r3, [r7, #4]
 810ad32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 810ad34:	2300      	movs	r3, #0
 810ad36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 810ad38:	687b      	ldr	r3, [r7, #4]
 810ad3a:	2b00      	cmp	r3, #0
 810ad3c:	d051      	beq.n	810ade2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 810ad3e:	68bb      	ldr	r3, [r7, #8]
 810ad40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ad42:	4b2a      	ldr	r3, [pc, #168]	@ (810adec <xTaskPriorityInherit+0xc4>)
 810ad44:	681b      	ldr	r3, [r3, #0]
 810ad46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ad48:	429a      	cmp	r2, r3
 810ad4a:	d241      	bcs.n	810add0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810ad4c:	68bb      	ldr	r3, [r7, #8]
 810ad4e:	699b      	ldr	r3, [r3, #24]
 810ad50:	2b00      	cmp	r3, #0
 810ad52:	db06      	blt.n	810ad62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810ad54:	4b25      	ldr	r3, [pc, #148]	@ (810adec <xTaskPriorityInherit+0xc4>)
 810ad56:	681b      	ldr	r3, [r3, #0]
 810ad58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ad5a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810ad5e:	68bb      	ldr	r3, [r7, #8]
 810ad60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 810ad62:	68bb      	ldr	r3, [r7, #8]
 810ad64:	6959      	ldr	r1, [r3, #20]
 810ad66:	68bb      	ldr	r3, [r7, #8]
 810ad68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ad6a:	4613      	mov	r3, r2
 810ad6c:	009b      	lsls	r3, r3, #2
 810ad6e:	4413      	add	r3, r2
 810ad70:	009b      	lsls	r3, r3, #2
 810ad72:	4a1f      	ldr	r2, [pc, #124]	@ (810adf0 <xTaskPriorityInherit+0xc8>)
 810ad74:	4413      	add	r3, r2
 810ad76:	4299      	cmp	r1, r3
 810ad78:	d122      	bne.n	810adc0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810ad7a:	68bb      	ldr	r3, [r7, #8]
 810ad7c:	3304      	adds	r3, #4
 810ad7e:	4618      	mov	r0, r3
 810ad80:	f7fd f986 	bl	8108090 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810ad84:	4b19      	ldr	r3, [pc, #100]	@ (810adec <xTaskPriorityInherit+0xc4>)
 810ad86:	681b      	ldr	r3, [r3, #0]
 810ad88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ad8a:	68bb      	ldr	r3, [r7, #8]
 810ad8c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 810ad8e:	68bb      	ldr	r3, [r7, #8]
 810ad90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ad92:	4b18      	ldr	r3, [pc, #96]	@ (810adf4 <xTaskPriorityInherit+0xcc>)
 810ad94:	681b      	ldr	r3, [r3, #0]
 810ad96:	429a      	cmp	r2, r3
 810ad98:	d903      	bls.n	810ada2 <xTaskPriorityInherit+0x7a>
 810ad9a:	68bb      	ldr	r3, [r7, #8]
 810ad9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ad9e:	4a15      	ldr	r2, [pc, #84]	@ (810adf4 <xTaskPriorityInherit+0xcc>)
 810ada0:	6013      	str	r3, [r2, #0]
 810ada2:	68bb      	ldr	r3, [r7, #8]
 810ada4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ada6:	4613      	mov	r3, r2
 810ada8:	009b      	lsls	r3, r3, #2
 810adaa:	4413      	add	r3, r2
 810adac:	009b      	lsls	r3, r3, #2
 810adae:	4a10      	ldr	r2, [pc, #64]	@ (810adf0 <xTaskPriorityInherit+0xc8>)
 810adb0:	441a      	add	r2, r3
 810adb2:	68bb      	ldr	r3, [r7, #8]
 810adb4:	3304      	adds	r3, #4
 810adb6:	4619      	mov	r1, r3
 810adb8:	4610      	mov	r0, r2
 810adba:	f7fd f90c 	bl	8107fd6 <vListInsertEnd>
 810adbe:	e004      	b.n	810adca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810adc0:	4b0a      	ldr	r3, [pc, #40]	@ (810adec <xTaskPriorityInherit+0xc4>)
 810adc2:	681b      	ldr	r3, [r3, #0]
 810adc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810adc6:	68bb      	ldr	r3, [r7, #8]
 810adc8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 810adca:	2301      	movs	r3, #1
 810adcc:	60fb      	str	r3, [r7, #12]
 810adce:	e008      	b.n	810ade2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 810add0:	68bb      	ldr	r3, [r7, #8]
 810add2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810add4:	4b05      	ldr	r3, [pc, #20]	@ (810adec <xTaskPriorityInherit+0xc4>)
 810add6:	681b      	ldr	r3, [r3, #0]
 810add8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810adda:	429a      	cmp	r2, r3
 810addc:	d201      	bcs.n	810ade2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 810adde:	2301      	movs	r3, #1
 810ade0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810ade2:	68fb      	ldr	r3, [r7, #12]
	}
 810ade4:	4618      	mov	r0, r3
 810ade6:	3710      	adds	r7, #16
 810ade8:	46bd      	mov	sp, r7
 810adea:	bd80      	pop	{r7, pc}
 810adec:	1000465c 	.word	0x1000465c
 810adf0:	10004660 	.word	0x10004660
 810adf4:	10004b38 	.word	0x10004b38

0810adf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810adf8:	b580      	push	{r7, lr}
 810adfa:	b086      	sub	sp, #24
 810adfc:	af00      	add	r7, sp, #0
 810adfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810ae00:	687b      	ldr	r3, [r7, #4]
 810ae02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810ae04:	2300      	movs	r3, #0
 810ae06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810ae08:	687b      	ldr	r3, [r7, #4]
 810ae0a:	2b00      	cmp	r3, #0
 810ae0c:	d058      	beq.n	810aec0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810ae0e:	4b2f      	ldr	r3, [pc, #188]	@ (810aecc <xTaskPriorityDisinherit+0xd4>)
 810ae10:	681b      	ldr	r3, [r3, #0]
 810ae12:	693a      	ldr	r2, [r7, #16]
 810ae14:	429a      	cmp	r2, r3
 810ae16:	d00b      	beq.n	810ae30 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 810ae18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ae1c:	f383 8811 	msr	BASEPRI, r3
 810ae20:	f3bf 8f6f 	isb	sy
 810ae24:	f3bf 8f4f 	dsb	sy
 810ae28:	60fb      	str	r3, [r7, #12]
}
 810ae2a:	bf00      	nop
 810ae2c:	bf00      	nop
 810ae2e:	e7fd      	b.n	810ae2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810ae30:	693b      	ldr	r3, [r7, #16]
 810ae32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810ae34:	2b00      	cmp	r3, #0
 810ae36:	d10b      	bne.n	810ae50 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 810ae38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ae3c:	f383 8811 	msr	BASEPRI, r3
 810ae40:	f3bf 8f6f 	isb	sy
 810ae44:	f3bf 8f4f 	dsb	sy
 810ae48:	60bb      	str	r3, [r7, #8]
}
 810ae4a:	bf00      	nop
 810ae4c:	bf00      	nop
 810ae4e:	e7fd      	b.n	810ae4c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 810ae50:	693b      	ldr	r3, [r7, #16]
 810ae52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810ae54:	1e5a      	subs	r2, r3, #1
 810ae56:	693b      	ldr	r3, [r7, #16]
 810ae58:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810ae5a:	693b      	ldr	r3, [r7, #16]
 810ae5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ae5e:	693b      	ldr	r3, [r7, #16]
 810ae60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810ae62:	429a      	cmp	r2, r3
 810ae64:	d02c      	beq.n	810aec0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810ae66:	693b      	ldr	r3, [r7, #16]
 810ae68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810ae6a:	2b00      	cmp	r3, #0
 810ae6c:	d128      	bne.n	810aec0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810ae6e:	693b      	ldr	r3, [r7, #16]
 810ae70:	3304      	adds	r3, #4
 810ae72:	4618      	mov	r0, r3
 810ae74:	f7fd f90c 	bl	8108090 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810ae78:	693b      	ldr	r3, [r7, #16]
 810ae7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810ae7c:	693b      	ldr	r3, [r7, #16]
 810ae7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810ae80:	693b      	ldr	r3, [r7, #16]
 810ae82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ae84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810ae88:	693b      	ldr	r3, [r7, #16]
 810ae8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810ae8c:	693b      	ldr	r3, [r7, #16]
 810ae8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ae90:	4b0f      	ldr	r3, [pc, #60]	@ (810aed0 <xTaskPriorityDisinherit+0xd8>)
 810ae92:	681b      	ldr	r3, [r3, #0]
 810ae94:	429a      	cmp	r2, r3
 810ae96:	d903      	bls.n	810aea0 <xTaskPriorityDisinherit+0xa8>
 810ae98:	693b      	ldr	r3, [r7, #16]
 810ae9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ae9c:	4a0c      	ldr	r2, [pc, #48]	@ (810aed0 <xTaskPriorityDisinherit+0xd8>)
 810ae9e:	6013      	str	r3, [r2, #0]
 810aea0:	693b      	ldr	r3, [r7, #16]
 810aea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810aea4:	4613      	mov	r3, r2
 810aea6:	009b      	lsls	r3, r3, #2
 810aea8:	4413      	add	r3, r2
 810aeaa:	009b      	lsls	r3, r3, #2
 810aeac:	4a09      	ldr	r2, [pc, #36]	@ (810aed4 <xTaskPriorityDisinherit+0xdc>)
 810aeae:	441a      	add	r2, r3
 810aeb0:	693b      	ldr	r3, [r7, #16]
 810aeb2:	3304      	adds	r3, #4
 810aeb4:	4619      	mov	r1, r3
 810aeb6:	4610      	mov	r0, r2
 810aeb8:	f7fd f88d 	bl	8107fd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810aebc:	2301      	movs	r3, #1
 810aebe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810aec0:	697b      	ldr	r3, [r7, #20]
	}
 810aec2:	4618      	mov	r0, r3
 810aec4:	3718      	adds	r7, #24
 810aec6:	46bd      	mov	sp, r7
 810aec8:	bd80      	pop	{r7, pc}
 810aeca:	bf00      	nop
 810aecc:	1000465c 	.word	0x1000465c
 810aed0:	10004b38 	.word	0x10004b38
 810aed4:	10004660 	.word	0x10004660

0810aed8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 810aed8:	b580      	push	{r7, lr}
 810aeda:	b088      	sub	sp, #32
 810aedc:	af00      	add	r7, sp, #0
 810aede:	6078      	str	r0, [r7, #4]
 810aee0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 810aee2:	687b      	ldr	r3, [r7, #4]
 810aee4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 810aee6:	2301      	movs	r3, #1
 810aee8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810aeea:	687b      	ldr	r3, [r7, #4]
 810aeec:	2b00      	cmp	r3, #0
 810aeee:	d06c      	beq.n	810afca <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 810aef0:	69bb      	ldr	r3, [r7, #24]
 810aef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810aef4:	2b00      	cmp	r3, #0
 810aef6:	d10b      	bne.n	810af10 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 810aef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810aefc:	f383 8811 	msr	BASEPRI, r3
 810af00:	f3bf 8f6f 	isb	sy
 810af04:	f3bf 8f4f 	dsb	sy
 810af08:	60fb      	str	r3, [r7, #12]
}
 810af0a:	bf00      	nop
 810af0c:	bf00      	nop
 810af0e:	e7fd      	b.n	810af0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 810af10:	69bb      	ldr	r3, [r7, #24]
 810af12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810af14:	683a      	ldr	r2, [r7, #0]
 810af16:	429a      	cmp	r2, r3
 810af18:	d902      	bls.n	810af20 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 810af1a:	683b      	ldr	r3, [r7, #0]
 810af1c:	61fb      	str	r3, [r7, #28]
 810af1e:	e002      	b.n	810af26 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 810af20:	69bb      	ldr	r3, [r7, #24]
 810af22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810af24:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 810af26:	69bb      	ldr	r3, [r7, #24]
 810af28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810af2a:	69fa      	ldr	r2, [r7, #28]
 810af2c:	429a      	cmp	r2, r3
 810af2e:	d04c      	beq.n	810afca <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 810af30:	69bb      	ldr	r3, [r7, #24]
 810af32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810af34:	697a      	ldr	r2, [r7, #20]
 810af36:	429a      	cmp	r2, r3
 810af38:	d147      	bne.n	810afca <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 810af3a:	4b26      	ldr	r3, [pc, #152]	@ (810afd4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 810af3c:	681b      	ldr	r3, [r3, #0]
 810af3e:	69ba      	ldr	r2, [r7, #24]
 810af40:	429a      	cmp	r2, r3
 810af42:	d10b      	bne.n	810af5c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 810af44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810af48:	f383 8811 	msr	BASEPRI, r3
 810af4c:	f3bf 8f6f 	isb	sy
 810af50:	f3bf 8f4f 	dsb	sy
 810af54:	60bb      	str	r3, [r7, #8]
}
 810af56:	bf00      	nop
 810af58:	bf00      	nop
 810af5a:	e7fd      	b.n	810af58 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 810af5c:	69bb      	ldr	r3, [r7, #24]
 810af5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810af60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 810af62:	69bb      	ldr	r3, [r7, #24]
 810af64:	69fa      	ldr	r2, [r7, #28]
 810af66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810af68:	69bb      	ldr	r3, [r7, #24]
 810af6a:	699b      	ldr	r3, [r3, #24]
 810af6c:	2b00      	cmp	r3, #0
 810af6e:	db04      	blt.n	810af7a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810af70:	69fb      	ldr	r3, [r7, #28]
 810af72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810af76:	69bb      	ldr	r3, [r7, #24]
 810af78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 810af7a:	69bb      	ldr	r3, [r7, #24]
 810af7c:	6959      	ldr	r1, [r3, #20]
 810af7e:	693a      	ldr	r2, [r7, #16]
 810af80:	4613      	mov	r3, r2
 810af82:	009b      	lsls	r3, r3, #2
 810af84:	4413      	add	r3, r2
 810af86:	009b      	lsls	r3, r3, #2
 810af88:	4a13      	ldr	r2, [pc, #76]	@ (810afd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810af8a:	4413      	add	r3, r2
 810af8c:	4299      	cmp	r1, r3
 810af8e:	d11c      	bne.n	810afca <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810af90:	69bb      	ldr	r3, [r7, #24]
 810af92:	3304      	adds	r3, #4
 810af94:	4618      	mov	r0, r3
 810af96:	f7fd f87b 	bl	8108090 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 810af9a:	69bb      	ldr	r3, [r7, #24]
 810af9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810af9e:	4b0f      	ldr	r3, [pc, #60]	@ (810afdc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 810afa0:	681b      	ldr	r3, [r3, #0]
 810afa2:	429a      	cmp	r2, r3
 810afa4:	d903      	bls.n	810afae <vTaskPriorityDisinheritAfterTimeout+0xd6>
 810afa6:	69bb      	ldr	r3, [r7, #24]
 810afa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810afaa:	4a0c      	ldr	r2, [pc, #48]	@ (810afdc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 810afac:	6013      	str	r3, [r2, #0]
 810afae:	69bb      	ldr	r3, [r7, #24]
 810afb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810afb2:	4613      	mov	r3, r2
 810afb4:	009b      	lsls	r3, r3, #2
 810afb6:	4413      	add	r3, r2
 810afb8:	009b      	lsls	r3, r3, #2
 810afba:	4a07      	ldr	r2, [pc, #28]	@ (810afd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810afbc:	441a      	add	r2, r3
 810afbe:	69bb      	ldr	r3, [r7, #24]
 810afc0:	3304      	adds	r3, #4
 810afc2:	4619      	mov	r1, r3
 810afc4:	4610      	mov	r0, r2
 810afc6:	f7fd f806 	bl	8107fd6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810afca:	bf00      	nop
 810afcc:	3720      	adds	r7, #32
 810afce:	46bd      	mov	sp, r7
 810afd0:	bd80      	pop	{r7, pc}
 810afd2:	bf00      	nop
 810afd4:	1000465c 	.word	0x1000465c
 810afd8:	10004660 	.word	0x10004660
 810afdc:	10004b38 	.word	0x10004b38

0810afe0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 810afe0:	b480      	push	{r7}
 810afe2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 810afe4:	4b07      	ldr	r3, [pc, #28]	@ (810b004 <pvTaskIncrementMutexHeldCount+0x24>)
 810afe6:	681b      	ldr	r3, [r3, #0]
 810afe8:	2b00      	cmp	r3, #0
 810afea:	d004      	beq.n	810aff6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 810afec:	4b05      	ldr	r3, [pc, #20]	@ (810b004 <pvTaskIncrementMutexHeldCount+0x24>)
 810afee:	681b      	ldr	r3, [r3, #0]
 810aff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810aff2:	3201      	adds	r2, #1
 810aff4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 810aff6:	4b03      	ldr	r3, [pc, #12]	@ (810b004 <pvTaskIncrementMutexHeldCount+0x24>)
 810aff8:	681b      	ldr	r3, [r3, #0]
	}
 810affa:	4618      	mov	r0, r3
 810affc:	46bd      	mov	sp, r7
 810affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b002:	4770      	bx	lr
 810b004:	1000465c 	.word	0x1000465c

0810b008 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 810b008:	b580      	push	{r7, lr}
 810b00a:	b086      	sub	sp, #24
 810b00c:	af00      	add	r7, sp, #0
 810b00e:	60f8      	str	r0, [r7, #12]
 810b010:	60b9      	str	r1, [r7, #8]
 810b012:	607a      	str	r2, [r7, #4]
 810b014:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 810b016:	f7fd f997 	bl	8108348 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 810b01a:	4b29      	ldr	r3, [pc, #164]	@ (810b0c0 <xTaskNotifyWait+0xb8>)
 810b01c:	681b      	ldr	r3, [r3, #0]
 810b01e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 810b022:	b2db      	uxtb	r3, r3
 810b024:	2b02      	cmp	r3, #2
 810b026:	d01c      	beq.n	810b062 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 810b028:	4b25      	ldr	r3, [pc, #148]	@ (810b0c0 <xTaskNotifyWait+0xb8>)
 810b02a:	681b      	ldr	r3, [r3, #0]
 810b02c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 810b030:	68fa      	ldr	r2, [r7, #12]
 810b032:	43d2      	mvns	r2, r2
 810b034:	400a      	ands	r2, r1
 810b036:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 810b03a:	4b21      	ldr	r3, [pc, #132]	@ (810b0c0 <xTaskNotifyWait+0xb8>)
 810b03c:	681b      	ldr	r3, [r3, #0]
 810b03e:	2201      	movs	r2, #1
 810b040:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 810b044:	683b      	ldr	r3, [r7, #0]
 810b046:	2b00      	cmp	r3, #0
 810b048:	d00b      	beq.n	810b062 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810b04a:	2101      	movs	r1, #1
 810b04c:	6838      	ldr	r0, [r7, #0]
 810b04e:	f000 f947 	bl	810b2e0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 810b052:	4b1c      	ldr	r3, [pc, #112]	@ (810b0c4 <xTaskNotifyWait+0xbc>)
 810b054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810b058:	601a      	str	r2, [r3, #0]
 810b05a:	f3bf 8f4f 	dsb	sy
 810b05e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810b062:	f7fd f9a3 	bl	81083ac <vPortExitCritical>

		taskENTER_CRITICAL();
 810b066:	f7fd f96f 	bl	8108348 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 810b06a:	687b      	ldr	r3, [r7, #4]
 810b06c:	2b00      	cmp	r3, #0
 810b06e:	d005      	beq.n	810b07c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 810b070:	4b13      	ldr	r3, [pc, #76]	@ (810b0c0 <xTaskNotifyWait+0xb8>)
 810b072:	681b      	ldr	r3, [r3, #0]
 810b074:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 810b078:	687b      	ldr	r3, [r7, #4]
 810b07a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 810b07c:	4b10      	ldr	r3, [pc, #64]	@ (810b0c0 <xTaskNotifyWait+0xb8>)
 810b07e:	681b      	ldr	r3, [r3, #0]
 810b080:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 810b084:	b2db      	uxtb	r3, r3
 810b086:	2b02      	cmp	r3, #2
 810b088:	d002      	beq.n	810b090 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 810b08a:	2300      	movs	r3, #0
 810b08c:	617b      	str	r3, [r7, #20]
 810b08e:	e00a      	b.n	810b0a6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 810b090:	4b0b      	ldr	r3, [pc, #44]	@ (810b0c0 <xTaskNotifyWait+0xb8>)
 810b092:	681b      	ldr	r3, [r3, #0]
 810b094:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 810b098:	68ba      	ldr	r2, [r7, #8]
 810b09a:	43d2      	mvns	r2, r2
 810b09c:	400a      	ands	r2, r1
 810b09e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 810b0a2:	2301      	movs	r3, #1
 810b0a4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810b0a6:	4b06      	ldr	r3, [pc, #24]	@ (810b0c0 <xTaskNotifyWait+0xb8>)
 810b0a8:	681b      	ldr	r3, [r3, #0]
 810b0aa:	2200      	movs	r2, #0
 810b0ac:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 810b0b0:	f7fd f97c 	bl	81083ac <vPortExitCritical>

		return xReturn;
 810b0b4:	697b      	ldr	r3, [r7, #20]
	}
 810b0b6:	4618      	mov	r0, r3
 810b0b8:	3718      	adds	r7, #24
 810b0ba:	46bd      	mov	sp, r7
 810b0bc:	bd80      	pop	{r7, pc}
 810b0be:	bf00      	nop
 810b0c0:	1000465c 	.word	0x1000465c
 810b0c4:	e000ed04 	.word	0xe000ed04

0810b0c8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 810b0c8:	b580      	push	{r7, lr}
 810b0ca:	b08e      	sub	sp, #56	@ 0x38
 810b0cc:	af00      	add	r7, sp, #0
 810b0ce:	60f8      	str	r0, [r7, #12]
 810b0d0:	60b9      	str	r1, [r7, #8]
 810b0d2:	603b      	str	r3, [r7, #0]
 810b0d4:	4613      	mov	r3, r2
 810b0d6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 810b0d8:	2301      	movs	r3, #1
 810b0da:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 810b0dc:	68fb      	ldr	r3, [r7, #12]
 810b0de:	2b00      	cmp	r3, #0
 810b0e0:	d10b      	bne.n	810b0fa <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 810b0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b0e6:	f383 8811 	msr	BASEPRI, r3
 810b0ea:	f3bf 8f6f 	isb	sy
 810b0ee:	f3bf 8f4f 	dsb	sy
 810b0f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810b0f4:	bf00      	nop
 810b0f6:	bf00      	nop
 810b0f8:	e7fd      	b.n	810b0f6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810b0fa:	f7fd fa05 	bl	8108508 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 810b0fe:	68fb      	ldr	r3, [r7, #12]
 810b100:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 810b102:	f3ef 8211 	mrs	r2, BASEPRI
 810b106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b10a:	f383 8811 	msr	BASEPRI, r3
 810b10e:	f3bf 8f6f 	isb	sy
 810b112:	f3bf 8f4f 	dsb	sy
 810b116:	623a      	str	r2, [r7, #32]
 810b118:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 810b11a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810b11c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 810b11e:	683b      	ldr	r3, [r7, #0]
 810b120:	2b00      	cmp	r3, #0
 810b122:	d004      	beq.n	810b12e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 810b124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b126:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 810b12a:	683b      	ldr	r3, [r7, #0]
 810b12c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 810b12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b130:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 810b134:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 810b138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b13a:	2202      	movs	r2, #2
 810b13c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 810b140:	79fb      	ldrb	r3, [r7, #7]
 810b142:	2b04      	cmp	r3, #4
 810b144:	d82e      	bhi.n	810b1a4 <xTaskGenericNotifyFromISR+0xdc>
 810b146:	a201      	add	r2, pc, #4	@ (adr r2, 810b14c <xTaskGenericNotifyFromISR+0x84>)
 810b148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b14c:	0810b1c9 	.word	0x0810b1c9
 810b150:	0810b161 	.word	0x0810b161
 810b154:	0810b173 	.word	0x0810b173
 810b158:	0810b183 	.word	0x0810b183
 810b15c:	0810b18d 	.word	0x0810b18d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 810b160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b162:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 810b166:	68bb      	ldr	r3, [r7, #8]
 810b168:	431a      	orrs	r2, r3
 810b16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b16c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 810b170:	e02d      	b.n	810b1ce <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 810b172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b174:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810b178:	1c5a      	adds	r2, r3, #1
 810b17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b17c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 810b180:	e025      	b.n	810b1ce <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 810b182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b184:	68ba      	ldr	r2, [r7, #8]
 810b186:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 810b18a:	e020      	b.n	810b1ce <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 810b18c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 810b190:	2b02      	cmp	r3, #2
 810b192:	d004      	beq.n	810b19e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 810b194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b196:	68ba      	ldr	r2, [r7, #8]
 810b198:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 810b19c:	e017      	b.n	810b1ce <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 810b19e:	2300      	movs	r3, #0
 810b1a0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 810b1a2:	e014      	b.n	810b1ce <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 810b1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b1a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810b1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b1ae:	d00d      	beq.n	810b1cc <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 810b1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b1b4:	f383 8811 	msr	BASEPRI, r3
 810b1b8:	f3bf 8f6f 	isb	sy
 810b1bc:	f3bf 8f4f 	dsb	sy
 810b1c0:	61bb      	str	r3, [r7, #24]
}
 810b1c2:	bf00      	nop
 810b1c4:	bf00      	nop
 810b1c6:	e7fd      	b.n	810b1c4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 810b1c8:	bf00      	nop
 810b1ca:	e000      	b.n	810b1ce <xTaskGenericNotifyFromISR+0x106>
					break;
 810b1cc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 810b1ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 810b1d2:	2b01      	cmp	r3, #1
 810b1d4:	d147      	bne.n	810b266 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 810b1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b1d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b1da:	2b00      	cmp	r3, #0
 810b1dc:	d00b      	beq.n	810b1f6 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 810b1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b1e2:	f383 8811 	msr	BASEPRI, r3
 810b1e6:	f3bf 8f6f 	isb	sy
 810b1ea:	f3bf 8f4f 	dsb	sy
 810b1ee:	617b      	str	r3, [r7, #20]
}
 810b1f0:	bf00      	nop
 810b1f2:	bf00      	nop
 810b1f4:	e7fd      	b.n	810b1f2 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810b1f6:	4b21      	ldr	r3, [pc, #132]	@ (810b27c <xTaskGenericNotifyFromISR+0x1b4>)
 810b1f8:	681b      	ldr	r3, [r3, #0]
 810b1fa:	2b00      	cmp	r3, #0
 810b1fc:	d11d      	bne.n	810b23a <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810b1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b200:	3304      	adds	r3, #4
 810b202:	4618      	mov	r0, r3
 810b204:	f7fc ff44 	bl	8108090 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810b208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b20a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810b20c:	4b1c      	ldr	r3, [pc, #112]	@ (810b280 <xTaskGenericNotifyFromISR+0x1b8>)
 810b20e:	681b      	ldr	r3, [r3, #0]
 810b210:	429a      	cmp	r2, r3
 810b212:	d903      	bls.n	810b21c <xTaskGenericNotifyFromISR+0x154>
 810b214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b218:	4a19      	ldr	r2, [pc, #100]	@ (810b280 <xTaskGenericNotifyFromISR+0x1b8>)
 810b21a:	6013      	str	r3, [r2, #0]
 810b21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b21e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810b220:	4613      	mov	r3, r2
 810b222:	009b      	lsls	r3, r3, #2
 810b224:	4413      	add	r3, r2
 810b226:	009b      	lsls	r3, r3, #2
 810b228:	4a16      	ldr	r2, [pc, #88]	@ (810b284 <xTaskGenericNotifyFromISR+0x1bc>)
 810b22a:	441a      	add	r2, r3
 810b22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b22e:	3304      	adds	r3, #4
 810b230:	4619      	mov	r1, r3
 810b232:	4610      	mov	r0, r2
 810b234:	f7fc fecf 	bl	8107fd6 <vListInsertEnd>
 810b238:	e005      	b.n	810b246 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 810b23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b23c:	3318      	adds	r3, #24
 810b23e:	4619      	mov	r1, r3
 810b240:	4811      	ldr	r0, [pc, #68]	@ (810b288 <xTaskGenericNotifyFromISR+0x1c0>)
 810b242:	f7fc fec8 	bl	8107fd6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 810b246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810b24a:	4b10      	ldr	r3, [pc, #64]	@ (810b28c <xTaskGenericNotifyFromISR+0x1c4>)
 810b24c:	681b      	ldr	r3, [r3, #0]
 810b24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b250:	429a      	cmp	r2, r3
 810b252:	d908      	bls.n	810b266 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 810b254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b256:	2b00      	cmp	r3, #0
 810b258:	d002      	beq.n	810b260 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 810b25a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b25c:	2201      	movs	r2, #1
 810b25e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 810b260:	4b0b      	ldr	r3, [pc, #44]	@ (810b290 <xTaskGenericNotifyFromISR+0x1c8>)
 810b262:	2201      	movs	r2, #1
 810b264:	601a      	str	r2, [r3, #0]
 810b266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810b268:	613b      	str	r3, [r7, #16]
	__asm volatile
 810b26a:	693b      	ldr	r3, [r7, #16]
 810b26c:	f383 8811 	msr	BASEPRI, r3
}
 810b270:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 810b272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 810b274:	4618      	mov	r0, r3
 810b276:	3738      	adds	r7, #56	@ 0x38
 810b278:	46bd      	mov	sp, r7
 810b27a:	bd80      	pop	{r7, pc}
 810b27c:	10004b58 	.word	0x10004b58
 810b280:	10004b38 	.word	0x10004b38
 810b284:	10004660 	.word	0x10004660
 810b288:	10004af0 	.word	0x10004af0
 810b28c:	1000465c 	.word	0x1000465c
 810b290:	10004b44 	.word	0x10004b44

0810b294 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 810b294:	b580      	push	{r7, lr}
 810b296:	b084      	sub	sp, #16
 810b298:	af00      	add	r7, sp, #0
 810b29a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 810b29c:	687b      	ldr	r3, [r7, #4]
 810b29e:	2b00      	cmp	r3, #0
 810b2a0:	d102      	bne.n	810b2a8 <xTaskNotifyStateClear+0x14>
 810b2a2:	4b0e      	ldr	r3, [pc, #56]	@ (810b2dc <xTaskNotifyStateClear+0x48>)
 810b2a4:	681b      	ldr	r3, [r3, #0]
 810b2a6:	e000      	b.n	810b2aa <xTaskNotifyStateClear+0x16>
 810b2a8:	687b      	ldr	r3, [r7, #4]
 810b2aa:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 810b2ac:	f7fd f84c 	bl	8108348 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 810b2b0:	68bb      	ldr	r3, [r7, #8]
 810b2b2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 810b2b6:	b2db      	uxtb	r3, r3
 810b2b8:	2b02      	cmp	r3, #2
 810b2ba:	d106      	bne.n	810b2ca <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810b2bc:	68bb      	ldr	r3, [r7, #8]
 810b2be:	2200      	movs	r2, #0
 810b2c0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 810b2c4:	2301      	movs	r3, #1
 810b2c6:	60fb      	str	r3, [r7, #12]
 810b2c8:	e001      	b.n	810b2ce <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 810b2ca:	2300      	movs	r3, #0
 810b2cc:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 810b2ce:	f7fd f86d 	bl	81083ac <vPortExitCritical>

		return xReturn;
 810b2d2:	68fb      	ldr	r3, [r7, #12]
	}
 810b2d4:	4618      	mov	r0, r3
 810b2d6:	3710      	adds	r7, #16
 810b2d8:	46bd      	mov	sp, r7
 810b2da:	bd80      	pop	{r7, pc}
 810b2dc:	1000465c 	.word	0x1000465c

0810b2e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810b2e0:	b580      	push	{r7, lr}
 810b2e2:	b084      	sub	sp, #16
 810b2e4:	af00      	add	r7, sp, #0
 810b2e6:	6078      	str	r0, [r7, #4]
 810b2e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810b2ea:	4b21      	ldr	r3, [pc, #132]	@ (810b370 <prvAddCurrentTaskToDelayedList+0x90>)
 810b2ec:	681b      	ldr	r3, [r3, #0]
 810b2ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810b2f0:	4b20      	ldr	r3, [pc, #128]	@ (810b374 <prvAddCurrentTaskToDelayedList+0x94>)
 810b2f2:	681b      	ldr	r3, [r3, #0]
 810b2f4:	3304      	adds	r3, #4
 810b2f6:	4618      	mov	r0, r3
 810b2f8:	f7fc feca 	bl	8108090 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810b2fc:	687b      	ldr	r3, [r7, #4]
 810b2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b302:	d10a      	bne.n	810b31a <prvAddCurrentTaskToDelayedList+0x3a>
 810b304:	683b      	ldr	r3, [r7, #0]
 810b306:	2b00      	cmp	r3, #0
 810b308:	d007      	beq.n	810b31a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b30a:	4b1a      	ldr	r3, [pc, #104]	@ (810b374 <prvAddCurrentTaskToDelayedList+0x94>)
 810b30c:	681b      	ldr	r3, [r3, #0]
 810b30e:	3304      	adds	r3, #4
 810b310:	4619      	mov	r1, r3
 810b312:	4819      	ldr	r0, [pc, #100]	@ (810b378 <prvAddCurrentTaskToDelayedList+0x98>)
 810b314:	f7fc fe5f 	bl	8107fd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810b318:	e026      	b.n	810b368 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810b31a:	68fa      	ldr	r2, [r7, #12]
 810b31c:	687b      	ldr	r3, [r7, #4]
 810b31e:	4413      	add	r3, r2
 810b320:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810b322:	4b14      	ldr	r3, [pc, #80]	@ (810b374 <prvAddCurrentTaskToDelayedList+0x94>)
 810b324:	681b      	ldr	r3, [r3, #0]
 810b326:	68ba      	ldr	r2, [r7, #8]
 810b328:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810b32a:	68ba      	ldr	r2, [r7, #8]
 810b32c:	68fb      	ldr	r3, [r7, #12]
 810b32e:	429a      	cmp	r2, r3
 810b330:	d209      	bcs.n	810b346 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b332:	4b12      	ldr	r3, [pc, #72]	@ (810b37c <prvAddCurrentTaskToDelayedList+0x9c>)
 810b334:	681a      	ldr	r2, [r3, #0]
 810b336:	4b0f      	ldr	r3, [pc, #60]	@ (810b374 <prvAddCurrentTaskToDelayedList+0x94>)
 810b338:	681b      	ldr	r3, [r3, #0]
 810b33a:	3304      	adds	r3, #4
 810b33c:	4619      	mov	r1, r3
 810b33e:	4610      	mov	r0, r2
 810b340:	f7fc fe6d 	bl	810801e <vListInsert>
}
 810b344:	e010      	b.n	810b368 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b346:	4b0e      	ldr	r3, [pc, #56]	@ (810b380 <prvAddCurrentTaskToDelayedList+0xa0>)
 810b348:	681a      	ldr	r2, [r3, #0]
 810b34a:	4b0a      	ldr	r3, [pc, #40]	@ (810b374 <prvAddCurrentTaskToDelayedList+0x94>)
 810b34c:	681b      	ldr	r3, [r3, #0]
 810b34e:	3304      	adds	r3, #4
 810b350:	4619      	mov	r1, r3
 810b352:	4610      	mov	r0, r2
 810b354:	f7fc fe63 	bl	810801e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810b358:	4b0a      	ldr	r3, [pc, #40]	@ (810b384 <prvAddCurrentTaskToDelayedList+0xa4>)
 810b35a:	681b      	ldr	r3, [r3, #0]
 810b35c:	68ba      	ldr	r2, [r7, #8]
 810b35e:	429a      	cmp	r2, r3
 810b360:	d202      	bcs.n	810b368 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810b362:	4a08      	ldr	r2, [pc, #32]	@ (810b384 <prvAddCurrentTaskToDelayedList+0xa4>)
 810b364:	68bb      	ldr	r3, [r7, #8]
 810b366:	6013      	str	r3, [r2, #0]
}
 810b368:	bf00      	nop
 810b36a:	3710      	adds	r7, #16
 810b36c:	46bd      	mov	sp, r7
 810b36e:	bd80      	pop	{r7, pc}
 810b370:	10004b34 	.word	0x10004b34
 810b374:	1000465c 	.word	0x1000465c
 810b378:	10004b1c 	.word	0x10004b1c
 810b37c:	10004aec 	.word	0x10004aec
 810b380:	10004ae8 	.word	0x10004ae8
 810b384:	10004b50 	.word	0x10004b50

0810b388 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810b388:	b580      	push	{r7, lr}
 810b38a:	b08a      	sub	sp, #40	@ 0x28
 810b38c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810b38e:	2300      	movs	r3, #0
 810b390:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810b392:	f000 fb13 	bl	810b9bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810b396:	4b1d      	ldr	r3, [pc, #116]	@ (810b40c <xTimerCreateTimerTask+0x84>)
 810b398:	681b      	ldr	r3, [r3, #0]
 810b39a:	2b00      	cmp	r3, #0
 810b39c:	d021      	beq.n	810b3e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810b39e:	2300      	movs	r3, #0
 810b3a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810b3a2:	2300      	movs	r3, #0
 810b3a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810b3a6:	1d3a      	adds	r2, r7, #4
 810b3a8:	f107 0108 	add.w	r1, r7, #8
 810b3ac:	f107 030c 	add.w	r3, r7, #12
 810b3b0:	4618      	mov	r0, r3
 810b3b2:	f7fc fbdb 	bl	8107b6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810b3b6:	6879      	ldr	r1, [r7, #4]
 810b3b8:	68bb      	ldr	r3, [r7, #8]
 810b3ba:	68fa      	ldr	r2, [r7, #12]
 810b3bc:	9202      	str	r2, [sp, #8]
 810b3be:	9301      	str	r3, [sp, #4]
 810b3c0:	2302      	movs	r3, #2
 810b3c2:	9300      	str	r3, [sp, #0]
 810b3c4:	2300      	movs	r3, #0
 810b3c6:	460a      	mov	r2, r1
 810b3c8:	4911      	ldr	r1, [pc, #68]	@ (810b410 <xTimerCreateTimerTask+0x88>)
 810b3ca:	4812      	ldr	r0, [pc, #72]	@ (810b414 <xTimerCreateTimerTask+0x8c>)
 810b3cc:	f7fe fdec 	bl	8109fa8 <xTaskCreateStatic>
 810b3d0:	4603      	mov	r3, r0
 810b3d2:	4a11      	ldr	r2, [pc, #68]	@ (810b418 <xTimerCreateTimerTask+0x90>)
 810b3d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810b3d6:	4b10      	ldr	r3, [pc, #64]	@ (810b418 <xTimerCreateTimerTask+0x90>)
 810b3d8:	681b      	ldr	r3, [r3, #0]
 810b3da:	2b00      	cmp	r3, #0
 810b3dc:	d001      	beq.n	810b3e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810b3de:	2301      	movs	r3, #1
 810b3e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810b3e2:	697b      	ldr	r3, [r7, #20]
 810b3e4:	2b00      	cmp	r3, #0
 810b3e6:	d10b      	bne.n	810b400 <xTimerCreateTimerTask+0x78>
	__asm volatile
 810b3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b3ec:	f383 8811 	msr	BASEPRI, r3
 810b3f0:	f3bf 8f6f 	isb	sy
 810b3f4:	f3bf 8f4f 	dsb	sy
 810b3f8:	613b      	str	r3, [r7, #16]
}
 810b3fa:	bf00      	nop
 810b3fc:	bf00      	nop
 810b3fe:	e7fd      	b.n	810b3fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 810b400:	697b      	ldr	r3, [r7, #20]
}
 810b402:	4618      	mov	r0, r3
 810b404:	3718      	adds	r7, #24
 810b406:	46bd      	mov	sp, r7
 810b408:	bd80      	pop	{r7, pc}
 810b40a:	bf00      	nop
 810b40c:	10004b8c 	.word	0x10004b8c
 810b410:	0811778c 	.word	0x0811778c
 810b414:	0810b555 	.word	0x0810b555
 810b418:	10004b90 	.word	0x10004b90

0810b41c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810b41c:	b580      	push	{r7, lr}
 810b41e:	b08a      	sub	sp, #40	@ 0x28
 810b420:	af00      	add	r7, sp, #0
 810b422:	60f8      	str	r0, [r7, #12]
 810b424:	60b9      	str	r1, [r7, #8]
 810b426:	607a      	str	r2, [r7, #4]
 810b428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810b42a:	2300      	movs	r3, #0
 810b42c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810b42e:	68fb      	ldr	r3, [r7, #12]
 810b430:	2b00      	cmp	r3, #0
 810b432:	d10b      	bne.n	810b44c <xTimerGenericCommand+0x30>
	__asm volatile
 810b434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b438:	f383 8811 	msr	BASEPRI, r3
 810b43c:	f3bf 8f6f 	isb	sy
 810b440:	f3bf 8f4f 	dsb	sy
 810b444:	623b      	str	r3, [r7, #32]
}
 810b446:	bf00      	nop
 810b448:	bf00      	nop
 810b44a:	e7fd      	b.n	810b448 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810b44c:	4b19      	ldr	r3, [pc, #100]	@ (810b4b4 <xTimerGenericCommand+0x98>)
 810b44e:	681b      	ldr	r3, [r3, #0]
 810b450:	2b00      	cmp	r3, #0
 810b452:	d02a      	beq.n	810b4aa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810b454:	68bb      	ldr	r3, [r7, #8]
 810b456:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810b458:	687b      	ldr	r3, [r7, #4]
 810b45a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810b45c:	68fb      	ldr	r3, [r7, #12]
 810b45e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810b460:	68bb      	ldr	r3, [r7, #8]
 810b462:	2b05      	cmp	r3, #5
 810b464:	dc18      	bgt.n	810b498 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810b466:	f7ff fc41 	bl	810acec <xTaskGetSchedulerState>
 810b46a:	4603      	mov	r3, r0
 810b46c:	2b02      	cmp	r3, #2
 810b46e:	d109      	bne.n	810b484 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810b470:	4b10      	ldr	r3, [pc, #64]	@ (810b4b4 <xTimerGenericCommand+0x98>)
 810b472:	6818      	ldr	r0, [r3, #0]
 810b474:	f107 0110 	add.w	r1, r7, #16
 810b478:	2300      	movs	r3, #0
 810b47a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b47c:	f7fd faf2 	bl	8108a64 <xQueueGenericSend>
 810b480:	6278      	str	r0, [r7, #36]	@ 0x24
 810b482:	e012      	b.n	810b4aa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810b484:	4b0b      	ldr	r3, [pc, #44]	@ (810b4b4 <xTimerGenericCommand+0x98>)
 810b486:	6818      	ldr	r0, [r3, #0]
 810b488:	f107 0110 	add.w	r1, r7, #16
 810b48c:	2300      	movs	r3, #0
 810b48e:	2200      	movs	r2, #0
 810b490:	f7fd fae8 	bl	8108a64 <xQueueGenericSend>
 810b494:	6278      	str	r0, [r7, #36]	@ 0x24
 810b496:	e008      	b.n	810b4aa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810b498:	4b06      	ldr	r3, [pc, #24]	@ (810b4b4 <xTimerGenericCommand+0x98>)
 810b49a:	6818      	ldr	r0, [r3, #0]
 810b49c:	f107 0110 	add.w	r1, r7, #16
 810b4a0:	2300      	movs	r3, #0
 810b4a2:	683a      	ldr	r2, [r7, #0]
 810b4a4:	f7fd fbe0 	bl	8108c68 <xQueueGenericSendFromISR>
 810b4a8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810b4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810b4ac:	4618      	mov	r0, r3
 810b4ae:	3728      	adds	r7, #40	@ 0x28
 810b4b0:	46bd      	mov	sp, r7
 810b4b2:	bd80      	pop	{r7, pc}
 810b4b4:	10004b8c 	.word	0x10004b8c

0810b4b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810b4b8:	b580      	push	{r7, lr}
 810b4ba:	b088      	sub	sp, #32
 810b4bc:	af02      	add	r7, sp, #8
 810b4be:	6078      	str	r0, [r7, #4]
 810b4c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b4c2:	4b23      	ldr	r3, [pc, #140]	@ (810b550 <prvProcessExpiredTimer+0x98>)
 810b4c4:	681b      	ldr	r3, [r3, #0]
 810b4c6:	68db      	ldr	r3, [r3, #12]
 810b4c8:	68db      	ldr	r3, [r3, #12]
 810b4ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810b4cc:	697b      	ldr	r3, [r7, #20]
 810b4ce:	3304      	adds	r3, #4
 810b4d0:	4618      	mov	r0, r3
 810b4d2:	f7fc fddd 	bl	8108090 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810b4d6:	697b      	ldr	r3, [r7, #20]
 810b4d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b4dc:	f003 0304 	and.w	r3, r3, #4
 810b4e0:	2b00      	cmp	r3, #0
 810b4e2:	d023      	beq.n	810b52c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810b4e4:	697b      	ldr	r3, [r7, #20]
 810b4e6:	699a      	ldr	r2, [r3, #24]
 810b4e8:	687b      	ldr	r3, [r7, #4]
 810b4ea:	18d1      	adds	r1, r2, r3
 810b4ec:	687b      	ldr	r3, [r7, #4]
 810b4ee:	683a      	ldr	r2, [r7, #0]
 810b4f0:	6978      	ldr	r0, [r7, #20]
 810b4f2:	f000 f8d5 	bl	810b6a0 <prvInsertTimerInActiveList>
 810b4f6:	4603      	mov	r3, r0
 810b4f8:	2b00      	cmp	r3, #0
 810b4fa:	d020      	beq.n	810b53e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810b4fc:	2300      	movs	r3, #0
 810b4fe:	9300      	str	r3, [sp, #0]
 810b500:	2300      	movs	r3, #0
 810b502:	687a      	ldr	r2, [r7, #4]
 810b504:	2100      	movs	r1, #0
 810b506:	6978      	ldr	r0, [r7, #20]
 810b508:	f7ff ff88 	bl	810b41c <xTimerGenericCommand>
 810b50c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810b50e:	693b      	ldr	r3, [r7, #16]
 810b510:	2b00      	cmp	r3, #0
 810b512:	d114      	bne.n	810b53e <prvProcessExpiredTimer+0x86>
	__asm volatile
 810b514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b518:	f383 8811 	msr	BASEPRI, r3
 810b51c:	f3bf 8f6f 	isb	sy
 810b520:	f3bf 8f4f 	dsb	sy
 810b524:	60fb      	str	r3, [r7, #12]
}
 810b526:	bf00      	nop
 810b528:	bf00      	nop
 810b52a:	e7fd      	b.n	810b528 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810b52c:	697b      	ldr	r3, [r7, #20]
 810b52e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b532:	f023 0301 	bic.w	r3, r3, #1
 810b536:	b2da      	uxtb	r2, r3
 810b538:	697b      	ldr	r3, [r7, #20]
 810b53a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810b53e:	697b      	ldr	r3, [r7, #20]
 810b540:	6a1b      	ldr	r3, [r3, #32]
 810b542:	6978      	ldr	r0, [r7, #20]
 810b544:	4798      	blx	r3
}
 810b546:	bf00      	nop
 810b548:	3718      	adds	r7, #24
 810b54a:	46bd      	mov	sp, r7
 810b54c:	bd80      	pop	{r7, pc}
 810b54e:	bf00      	nop
 810b550:	10004b84 	.word	0x10004b84

0810b554 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810b554:	b580      	push	{r7, lr}
 810b556:	b084      	sub	sp, #16
 810b558:	af00      	add	r7, sp, #0
 810b55a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810b55c:	f107 0308 	add.w	r3, r7, #8
 810b560:	4618      	mov	r0, r3
 810b562:	f000 f859 	bl	810b618 <prvGetNextExpireTime>
 810b566:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810b568:	68bb      	ldr	r3, [r7, #8]
 810b56a:	4619      	mov	r1, r3
 810b56c:	68f8      	ldr	r0, [r7, #12]
 810b56e:	f000 f805 	bl	810b57c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810b572:	f000 f8d7 	bl	810b724 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810b576:	bf00      	nop
 810b578:	e7f0      	b.n	810b55c <prvTimerTask+0x8>
	...

0810b57c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810b57c:	b580      	push	{r7, lr}
 810b57e:	b084      	sub	sp, #16
 810b580:	af00      	add	r7, sp, #0
 810b582:	6078      	str	r0, [r7, #4]
 810b584:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810b586:	f7fe ff73 	bl	810a470 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810b58a:	f107 0308 	add.w	r3, r7, #8
 810b58e:	4618      	mov	r0, r3
 810b590:	f000 f866 	bl	810b660 <prvSampleTimeNow>
 810b594:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810b596:	68bb      	ldr	r3, [r7, #8]
 810b598:	2b00      	cmp	r3, #0
 810b59a:	d130      	bne.n	810b5fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810b59c:	683b      	ldr	r3, [r7, #0]
 810b59e:	2b00      	cmp	r3, #0
 810b5a0:	d10a      	bne.n	810b5b8 <prvProcessTimerOrBlockTask+0x3c>
 810b5a2:	687a      	ldr	r2, [r7, #4]
 810b5a4:	68fb      	ldr	r3, [r7, #12]
 810b5a6:	429a      	cmp	r2, r3
 810b5a8:	d806      	bhi.n	810b5b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810b5aa:	f7fe ff6f 	bl	810a48c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810b5ae:	68f9      	ldr	r1, [r7, #12]
 810b5b0:	6878      	ldr	r0, [r7, #4]
 810b5b2:	f7ff ff81 	bl	810b4b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810b5b6:	e024      	b.n	810b602 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810b5b8:	683b      	ldr	r3, [r7, #0]
 810b5ba:	2b00      	cmp	r3, #0
 810b5bc:	d008      	beq.n	810b5d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810b5be:	4b13      	ldr	r3, [pc, #76]	@ (810b60c <prvProcessTimerOrBlockTask+0x90>)
 810b5c0:	681b      	ldr	r3, [r3, #0]
 810b5c2:	681b      	ldr	r3, [r3, #0]
 810b5c4:	2b00      	cmp	r3, #0
 810b5c6:	d101      	bne.n	810b5cc <prvProcessTimerOrBlockTask+0x50>
 810b5c8:	2301      	movs	r3, #1
 810b5ca:	e000      	b.n	810b5ce <prvProcessTimerOrBlockTask+0x52>
 810b5cc:	2300      	movs	r3, #0
 810b5ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810b5d0:	4b0f      	ldr	r3, [pc, #60]	@ (810b610 <prvProcessTimerOrBlockTask+0x94>)
 810b5d2:	6818      	ldr	r0, [r3, #0]
 810b5d4:	687a      	ldr	r2, [r7, #4]
 810b5d6:	68fb      	ldr	r3, [r7, #12]
 810b5d8:	1ad3      	subs	r3, r2, r3
 810b5da:	683a      	ldr	r2, [r7, #0]
 810b5dc:	4619      	mov	r1, r3
 810b5de:	f7fe f885 	bl	81096ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810b5e2:	f7fe ff53 	bl	810a48c <xTaskResumeAll>
 810b5e6:	4603      	mov	r3, r0
 810b5e8:	2b00      	cmp	r3, #0
 810b5ea:	d10a      	bne.n	810b602 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810b5ec:	4b09      	ldr	r3, [pc, #36]	@ (810b614 <prvProcessTimerOrBlockTask+0x98>)
 810b5ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810b5f2:	601a      	str	r2, [r3, #0]
 810b5f4:	f3bf 8f4f 	dsb	sy
 810b5f8:	f3bf 8f6f 	isb	sy
}
 810b5fc:	e001      	b.n	810b602 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810b5fe:	f7fe ff45 	bl	810a48c <xTaskResumeAll>
}
 810b602:	bf00      	nop
 810b604:	3710      	adds	r7, #16
 810b606:	46bd      	mov	sp, r7
 810b608:	bd80      	pop	{r7, pc}
 810b60a:	bf00      	nop
 810b60c:	10004b88 	.word	0x10004b88
 810b610:	10004b8c 	.word	0x10004b8c
 810b614:	e000ed04 	.word	0xe000ed04

0810b618 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810b618:	b480      	push	{r7}
 810b61a:	b085      	sub	sp, #20
 810b61c:	af00      	add	r7, sp, #0
 810b61e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810b620:	4b0e      	ldr	r3, [pc, #56]	@ (810b65c <prvGetNextExpireTime+0x44>)
 810b622:	681b      	ldr	r3, [r3, #0]
 810b624:	681b      	ldr	r3, [r3, #0]
 810b626:	2b00      	cmp	r3, #0
 810b628:	d101      	bne.n	810b62e <prvGetNextExpireTime+0x16>
 810b62a:	2201      	movs	r2, #1
 810b62c:	e000      	b.n	810b630 <prvGetNextExpireTime+0x18>
 810b62e:	2200      	movs	r2, #0
 810b630:	687b      	ldr	r3, [r7, #4]
 810b632:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810b634:	687b      	ldr	r3, [r7, #4]
 810b636:	681b      	ldr	r3, [r3, #0]
 810b638:	2b00      	cmp	r3, #0
 810b63a:	d105      	bne.n	810b648 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810b63c:	4b07      	ldr	r3, [pc, #28]	@ (810b65c <prvGetNextExpireTime+0x44>)
 810b63e:	681b      	ldr	r3, [r3, #0]
 810b640:	68db      	ldr	r3, [r3, #12]
 810b642:	681b      	ldr	r3, [r3, #0]
 810b644:	60fb      	str	r3, [r7, #12]
 810b646:	e001      	b.n	810b64c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810b648:	2300      	movs	r3, #0
 810b64a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810b64c:	68fb      	ldr	r3, [r7, #12]
}
 810b64e:	4618      	mov	r0, r3
 810b650:	3714      	adds	r7, #20
 810b652:	46bd      	mov	sp, r7
 810b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b658:	4770      	bx	lr
 810b65a:	bf00      	nop
 810b65c:	10004b84 	.word	0x10004b84

0810b660 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810b660:	b580      	push	{r7, lr}
 810b662:	b084      	sub	sp, #16
 810b664:	af00      	add	r7, sp, #0
 810b666:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810b668:	f7fe ffae 	bl	810a5c8 <xTaskGetTickCount>
 810b66c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810b66e:	4b0b      	ldr	r3, [pc, #44]	@ (810b69c <prvSampleTimeNow+0x3c>)
 810b670:	681b      	ldr	r3, [r3, #0]
 810b672:	68fa      	ldr	r2, [r7, #12]
 810b674:	429a      	cmp	r2, r3
 810b676:	d205      	bcs.n	810b684 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810b678:	f000 f93a 	bl	810b8f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810b67c:	687b      	ldr	r3, [r7, #4]
 810b67e:	2201      	movs	r2, #1
 810b680:	601a      	str	r2, [r3, #0]
 810b682:	e002      	b.n	810b68a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810b684:	687b      	ldr	r3, [r7, #4]
 810b686:	2200      	movs	r2, #0
 810b688:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810b68a:	4a04      	ldr	r2, [pc, #16]	@ (810b69c <prvSampleTimeNow+0x3c>)
 810b68c:	68fb      	ldr	r3, [r7, #12]
 810b68e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810b690:	68fb      	ldr	r3, [r7, #12]
}
 810b692:	4618      	mov	r0, r3
 810b694:	3710      	adds	r7, #16
 810b696:	46bd      	mov	sp, r7
 810b698:	bd80      	pop	{r7, pc}
 810b69a:	bf00      	nop
 810b69c:	10004b94 	.word	0x10004b94

0810b6a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810b6a0:	b580      	push	{r7, lr}
 810b6a2:	b086      	sub	sp, #24
 810b6a4:	af00      	add	r7, sp, #0
 810b6a6:	60f8      	str	r0, [r7, #12]
 810b6a8:	60b9      	str	r1, [r7, #8]
 810b6aa:	607a      	str	r2, [r7, #4]
 810b6ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810b6ae:	2300      	movs	r3, #0
 810b6b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810b6b2:	68fb      	ldr	r3, [r7, #12]
 810b6b4:	68ba      	ldr	r2, [r7, #8]
 810b6b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810b6b8:	68fb      	ldr	r3, [r7, #12]
 810b6ba:	68fa      	ldr	r2, [r7, #12]
 810b6bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810b6be:	68ba      	ldr	r2, [r7, #8]
 810b6c0:	687b      	ldr	r3, [r7, #4]
 810b6c2:	429a      	cmp	r2, r3
 810b6c4:	d812      	bhi.n	810b6ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810b6c6:	687a      	ldr	r2, [r7, #4]
 810b6c8:	683b      	ldr	r3, [r7, #0]
 810b6ca:	1ad2      	subs	r2, r2, r3
 810b6cc:	68fb      	ldr	r3, [r7, #12]
 810b6ce:	699b      	ldr	r3, [r3, #24]
 810b6d0:	429a      	cmp	r2, r3
 810b6d2:	d302      	bcc.n	810b6da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810b6d4:	2301      	movs	r3, #1
 810b6d6:	617b      	str	r3, [r7, #20]
 810b6d8:	e01b      	b.n	810b712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810b6da:	4b10      	ldr	r3, [pc, #64]	@ (810b71c <prvInsertTimerInActiveList+0x7c>)
 810b6dc:	681a      	ldr	r2, [r3, #0]
 810b6de:	68fb      	ldr	r3, [r7, #12]
 810b6e0:	3304      	adds	r3, #4
 810b6e2:	4619      	mov	r1, r3
 810b6e4:	4610      	mov	r0, r2
 810b6e6:	f7fc fc9a 	bl	810801e <vListInsert>
 810b6ea:	e012      	b.n	810b712 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810b6ec:	687a      	ldr	r2, [r7, #4]
 810b6ee:	683b      	ldr	r3, [r7, #0]
 810b6f0:	429a      	cmp	r2, r3
 810b6f2:	d206      	bcs.n	810b702 <prvInsertTimerInActiveList+0x62>
 810b6f4:	68ba      	ldr	r2, [r7, #8]
 810b6f6:	683b      	ldr	r3, [r7, #0]
 810b6f8:	429a      	cmp	r2, r3
 810b6fa:	d302      	bcc.n	810b702 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810b6fc:	2301      	movs	r3, #1
 810b6fe:	617b      	str	r3, [r7, #20]
 810b700:	e007      	b.n	810b712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810b702:	4b07      	ldr	r3, [pc, #28]	@ (810b720 <prvInsertTimerInActiveList+0x80>)
 810b704:	681a      	ldr	r2, [r3, #0]
 810b706:	68fb      	ldr	r3, [r7, #12]
 810b708:	3304      	adds	r3, #4
 810b70a:	4619      	mov	r1, r3
 810b70c:	4610      	mov	r0, r2
 810b70e:	f7fc fc86 	bl	810801e <vListInsert>
		}
	}

	return xProcessTimerNow;
 810b712:	697b      	ldr	r3, [r7, #20]
}
 810b714:	4618      	mov	r0, r3
 810b716:	3718      	adds	r7, #24
 810b718:	46bd      	mov	sp, r7
 810b71a:	bd80      	pop	{r7, pc}
 810b71c:	10004b88 	.word	0x10004b88
 810b720:	10004b84 	.word	0x10004b84

0810b724 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810b724:	b580      	push	{r7, lr}
 810b726:	b08e      	sub	sp, #56	@ 0x38
 810b728:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810b72a:	e0ce      	b.n	810b8ca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810b72c:	687b      	ldr	r3, [r7, #4]
 810b72e:	2b00      	cmp	r3, #0
 810b730:	da19      	bge.n	810b766 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810b732:	1d3b      	adds	r3, r7, #4
 810b734:	3304      	adds	r3, #4
 810b736:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810b738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810b73a:	2b00      	cmp	r3, #0
 810b73c:	d10b      	bne.n	810b756 <prvProcessReceivedCommands+0x32>
	__asm volatile
 810b73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b742:	f383 8811 	msr	BASEPRI, r3
 810b746:	f3bf 8f6f 	isb	sy
 810b74a:	f3bf 8f4f 	dsb	sy
 810b74e:	61fb      	str	r3, [r7, #28]
}
 810b750:	bf00      	nop
 810b752:	bf00      	nop
 810b754:	e7fd      	b.n	810b752 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810b756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810b758:	681b      	ldr	r3, [r3, #0]
 810b75a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b75c:	6850      	ldr	r0, [r2, #4]
 810b75e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b760:	6892      	ldr	r2, [r2, #8]
 810b762:	4611      	mov	r1, r2
 810b764:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810b766:	687b      	ldr	r3, [r7, #4]
 810b768:	2b00      	cmp	r3, #0
 810b76a:	f2c0 80ae 	blt.w	810b8ca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810b76e:	68fb      	ldr	r3, [r7, #12]
 810b770:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810b772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b774:	695b      	ldr	r3, [r3, #20]
 810b776:	2b00      	cmp	r3, #0
 810b778:	d004      	beq.n	810b784 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810b77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b77c:	3304      	adds	r3, #4
 810b77e:	4618      	mov	r0, r3
 810b780:	f7fc fc86 	bl	8108090 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810b784:	463b      	mov	r3, r7
 810b786:	4618      	mov	r0, r3
 810b788:	f7ff ff6a 	bl	810b660 <prvSampleTimeNow>
 810b78c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810b78e:	687b      	ldr	r3, [r7, #4]
 810b790:	2b09      	cmp	r3, #9
 810b792:	f200 8097 	bhi.w	810b8c4 <prvProcessReceivedCommands+0x1a0>
 810b796:	a201      	add	r2, pc, #4	@ (adr r2, 810b79c <prvProcessReceivedCommands+0x78>)
 810b798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b79c:	0810b7c5 	.word	0x0810b7c5
 810b7a0:	0810b7c5 	.word	0x0810b7c5
 810b7a4:	0810b7c5 	.word	0x0810b7c5
 810b7a8:	0810b83b 	.word	0x0810b83b
 810b7ac:	0810b84f 	.word	0x0810b84f
 810b7b0:	0810b89b 	.word	0x0810b89b
 810b7b4:	0810b7c5 	.word	0x0810b7c5
 810b7b8:	0810b7c5 	.word	0x0810b7c5
 810b7bc:	0810b83b 	.word	0x0810b83b
 810b7c0:	0810b84f 	.word	0x0810b84f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810b7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b7c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b7ca:	f043 0301 	orr.w	r3, r3, #1
 810b7ce:	b2da      	uxtb	r2, r3
 810b7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b7d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810b7d6:	68ba      	ldr	r2, [r7, #8]
 810b7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b7da:	699b      	ldr	r3, [r3, #24]
 810b7dc:	18d1      	adds	r1, r2, r3
 810b7de:	68bb      	ldr	r3, [r7, #8]
 810b7e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810b7e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b7e4:	f7ff ff5c 	bl	810b6a0 <prvInsertTimerInActiveList>
 810b7e8:	4603      	mov	r3, r0
 810b7ea:	2b00      	cmp	r3, #0
 810b7ec:	d06c      	beq.n	810b8c8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810b7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b7f0:	6a1b      	ldr	r3, [r3, #32]
 810b7f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b7f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810b7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b7f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b7fc:	f003 0304 	and.w	r3, r3, #4
 810b800:	2b00      	cmp	r3, #0
 810b802:	d061      	beq.n	810b8c8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810b804:	68ba      	ldr	r2, [r7, #8]
 810b806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b808:	699b      	ldr	r3, [r3, #24]
 810b80a:	441a      	add	r2, r3
 810b80c:	2300      	movs	r3, #0
 810b80e:	9300      	str	r3, [sp, #0]
 810b810:	2300      	movs	r3, #0
 810b812:	2100      	movs	r1, #0
 810b814:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b816:	f7ff fe01 	bl	810b41c <xTimerGenericCommand>
 810b81a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810b81c:	6a3b      	ldr	r3, [r7, #32]
 810b81e:	2b00      	cmp	r3, #0
 810b820:	d152      	bne.n	810b8c8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 810b822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b826:	f383 8811 	msr	BASEPRI, r3
 810b82a:	f3bf 8f6f 	isb	sy
 810b82e:	f3bf 8f4f 	dsb	sy
 810b832:	61bb      	str	r3, [r7, #24]
}
 810b834:	bf00      	nop
 810b836:	bf00      	nop
 810b838:	e7fd      	b.n	810b836 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810b83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b83c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b840:	f023 0301 	bic.w	r3, r3, #1
 810b844:	b2da      	uxtb	r2, r3
 810b846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b848:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810b84c:	e03d      	b.n	810b8ca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810b84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b854:	f043 0301 	orr.w	r3, r3, #1
 810b858:	b2da      	uxtb	r2, r3
 810b85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b85c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810b860:	68ba      	ldr	r2, [r7, #8]
 810b862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b864:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810b866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b868:	699b      	ldr	r3, [r3, #24]
 810b86a:	2b00      	cmp	r3, #0
 810b86c:	d10b      	bne.n	810b886 <prvProcessReceivedCommands+0x162>
	__asm volatile
 810b86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b872:	f383 8811 	msr	BASEPRI, r3
 810b876:	f3bf 8f6f 	isb	sy
 810b87a:	f3bf 8f4f 	dsb	sy
 810b87e:	617b      	str	r3, [r7, #20]
}
 810b880:	bf00      	nop
 810b882:	bf00      	nop
 810b884:	e7fd      	b.n	810b882 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810b886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b888:	699a      	ldr	r2, [r3, #24]
 810b88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b88c:	18d1      	adds	r1, r2, r3
 810b88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810b892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b894:	f7ff ff04 	bl	810b6a0 <prvInsertTimerInActiveList>
					break;
 810b898:	e017      	b.n	810b8ca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810b89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b89c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b8a0:	f003 0302 	and.w	r3, r3, #2
 810b8a4:	2b00      	cmp	r3, #0
 810b8a6:	d103      	bne.n	810b8b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 810b8a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b8aa:	f7fc fa47 	bl	8107d3c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810b8ae:	e00c      	b.n	810b8ca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810b8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b8b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b8b6:	f023 0301 	bic.w	r3, r3, #1
 810b8ba:	b2da      	uxtb	r2, r3
 810b8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b8be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810b8c2:	e002      	b.n	810b8ca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 810b8c4:	bf00      	nop
 810b8c6:	e000      	b.n	810b8ca <prvProcessReceivedCommands+0x1a6>
					break;
 810b8c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810b8ca:	4b08      	ldr	r3, [pc, #32]	@ (810b8ec <prvProcessReceivedCommands+0x1c8>)
 810b8cc:	681b      	ldr	r3, [r3, #0]
 810b8ce:	1d39      	adds	r1, r7, #4
 810b8d0:	2200      	movs	r2, #0
 810b8d2:	4618      	mov	r0, r3
 810b8d4:	f7fd faf6 	bl	8108ec4 <xQueueReceive>
 810b8d8:	4603      	mov	r3, r0
 810b8da:	2b00      	cmp	r3, #0
 810b8dc:	f47f af26 	bne.w	810b72c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 810b8e0:	bf00      	nop
 810b8e2:	bf00      	nop
 810b8e4:	3730      	adds	r7, #48	@ 0x30
 810b8e6:	46bd      	mov	sp, r7
 810b8e8:	bd80      	pop	{r7, pc}
 810b8ea:	bf00      	nop
 810b8ec:	10004b8c 	.word	0x10004b8c

0810b8f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810b8f0:	b580      	push	{r7, lr}
 810b8f2:	b088      	sub	sp, #32
 810b8f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810b8f6:	e049      	b.n	810b98c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810b8f8:	4b2e      	ldr	r3, [pc, #184]	@ (810b9b4 <prvSwitchTimerLists+0xc4>)
 810b8fa:	681b      	ldr	r3, [r3, #0]
 810b8fc:	68db      	ldr	r3, [r3, #12]
 810b8fe:	681b      	ldr	r3, [r3, #0]
 810b900:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b902:	4b2c      	ldr	r3, [pc, #176]	@ (810b9b4 <prvSwitchTimerLists+0xc4>)
 810b904:	681b      	ldr	r3, [r3, #0]
 810b906:	68db      	ldr	r3, [r3, #12]
 810b908:	68db      	ldr	r3, [r3, #12]
 810b90a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810b90c:	68fb      	ldr	r3, [r7, #12]
 810b90e:	3304      	adds	r3, #4
 810b910:	4618      	mov	r0, r3
 810b912:	f7fc fbbd 	bl	8108090 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810b916:	68fb      	ldr	r3, [r7, #12]
 810b918:	6a1b      	ldr	r3, [r3, #32]
 810b91a:	68f8      	ldr	r0, [r7, #12]
 810b91c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810b91e:	68fb      	ldr	r3, [r7, #12]
 810b920:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b924:	f003 0304 	and.w	r3, r3, #4
 810b928:	2b00      	cmp	r3, #0
 810b92a:	d02f      	beq.n	810b98c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810b92c:	68fb      	ldr	r3, [r7, #12]
 810b92e:	699b      	ldr	r3, [r3, #24]
 810b930:	693a      	ldr	r2, [r7, #16]
 810b932:	4413      	add	r3, r2
 810b934:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810b936:	68ba      	ldr	r2, [r7, #8]
 810b938:	693b      	ldr	r3, [r7, #16]
 810b93a:	429a      	cmp	r2, r3
 810b93c:	d90e      	bls.n	810b95c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810b93e:	68fb      	ldr	r3, [r7, #12]
 810b940:	68ba      	ldr	r2, [r7, #8]
 810b942:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810b944:	68fb      	ldr	r3, [r7, #12]
 810b946:	68fa      	ldr	r2, [r7, #12]
 810b948:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810b94a:	4b1a      	ldr	r3, [pc, #104]	@ (810b9b4 <prvSwitchTimerLists+0xc4>)
 810b94c:	681a      	ldr	r2, [r3, #0]
 810b94e:	68fb      	ldr	r3, [r7, #12]
 810b950:	3304      	adds	r3, #4
 810b952:	4619      	mov	r1, r3
 810b954:	4610      	mov	r0, r2
 810b956:	f7fc fb62 	bl	810801e <vListInsert>
 810b95a:	e017      	b.n	810b98c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810b95c:	2300      	movs	r3, #0
 810b95e:	9300      	str	r3, [sp, #0]
 810b960:	2300      	movs	r3, #0
 810b962:	693a      	ldr	r2, [r7, #16]
 810b964:	2100      	movs	r1, #0
 810b966:	68f8      	ldr	r0, [r7, #12]
 810b968:	f7ff fd58 	bl	810b41c <xTimerGenericCommand>
 810b96c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810b96e:	687b      	ldr	r3, [r7, #4]
 810b970:	2b00      	cmp	r3, #0
 810b972:	d10b      	bne.n	810b98c <prvSwitchTimerLists+0x9c>
	__asm volatile
 810b974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b978:	f383 8811 	msr	BASEPRI, r3
 810b97c:	f3bf 8f6f 	isb	sy
 810b980:	f3bf 8f4f 	dsb	sy
 810b984:	603b      	str	r3, [r7, #0]
}
 810b986:	bf00      	nop
 810b988:	bf00      	nop
 810b98a:	e7fd      	b.n	810b988 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810b98c:	4b09      	ldr	r3, [pc, #36]	@ (810b9b4 <prvSwitchTimerLists+0xc4>)
 810b98e:	681b      	ldr	r3, [r3, #0]
 810b990:	681b      	ldr	r3, [r3, #0]
 810b992:	2b00      	cmp	r3, #0
 810b994:	d1b0      	bne.n	810b8f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810b996:	4b07      	ldr	r3, [pc, #28]	@ (810b9b4 <prvSwitchTimerLists+0xc4>)
 810b998:	681b      	ldr	r3, [r3, #0]
 810b99a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810b99c:	4b06      	ldr	r3, [pc, #24]	@ (810b9b8 <prvSwitchTimerLists+0xc8>)
 810b99e:	681b      	ldr	r3, [r3, #0]
 810b9a0:	4a04      	ldr	r2, [pc, #16]	@ (810b9b4 <prvSwitchTimerLists+0xc4>)
 810b9a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810b9a4:	4a04      	ldr	r2, [pc, #16]	@ (810b9b8 <prvSwitchTimerLists+0xc8>)
 810b9a6:	697b      	ldr	r3, [r7, #20]
 810b9a8:	6013      	str	r3, [r2, #0]
}
 810b9aa:	bf00      	nop
 810b9ac:	3718      	adds	r7, #24
 810b9ae:	46bd      	mov	sp, r7
 810b9b0:	bd80      	pop	{r7, pc}
 810b9b2:	bf00      	nop
 810b9b4:	10004b84 	.word	0x10004b84
 810b9b8:	10004b88 	.word	0x10004b88

0810b9bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810b9bc:	b580      	push	{r7, lr}
 810b9be:	b082      	sub	sp, #8
 810b9c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810b9c2:	f7fc fcc1 	bl	8108348 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810b9c6:	4b15      	ldr	r3, [pc, #84]	@ (810ba1c <prvCheckForValidListAndQueue+0x60>)
 810b9c8:	681b      	ldr	r3, [r3, #0]
 810b9ca:	2b00      	cmp	r3, #0
 810b9cc:	d120      	bne.n	810ba10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810b9ce:	4814      	ldr	r0, [pc, #80]	@ (810ba20 <prvCheckForValidListAndQueue+0x64>)
 810b9d0:	f7fc fad4 	bl	8107f7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810b9d4:	4813      	ldr	r0, [pc, #76]	@ (810ba24 <prvCheckForValidListAndQueue+0x68>)
 810b9d6:	f7fc fad1 	bl	8107f7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810b9da:	4b13      	ldr	r3, [pc, #76]	@ (810ba28 <prvCheckForValidListAndQueue+0x6c>)
 810b9dc:	4a10      	ldr	r2, [pc, #64]	@ (810ba20 <prvCheckForValidListAndQueue+0x64>)
 810b9de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810b9e0:	4b12      	ldr	r3, [pc, #72]	@ (810ba2c <prvCheckForValidListAndQueue+0x70>)
 810b9e2:	4a10      	ldr	r2, [pc, #64]	@ (810ba24 <prvCheckForValidListAndQueue+0x68>)
 810b9e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810b9e6:	2300      	movs	r3, #0
 810b9e8:	9300      	str	r3, [sp, #0]
 810b9ea:	4b11      	ldr	r3, [pc, #68]	@ (810ba30 <prvCheckForValidListAndQueue+0x74>)
 810b9ec:	4a11      	ldr	r2, [pc, #68]	@ (810ba34 <prvCheckForValidListAndQueue+0x78>)
 810b9ee:	2110      	movs	r1, #16
 810b9f0:	200a      	movs	r0, #10
 810b9f2:	f7fc fe35 	bl	8108660 <xQueueGenericCreateStatic>
 810b9f6:	4603      	mov	r3, r0
 810b9f8:	4a08      	ldr	r2, [pc, #32]	@ (810ba1c <prvCheckForValidListAndQueue+0x60>)
 810b9fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810b9fc:	4b07      	ldr	r3, [pc, #28]	@ (810ba1c <prvCheckForValidListAndQueue+0x60>)
 810b9fe:	681b      	ldr	r3, [r3, #0]
 810ba00:	2b00      	cmp	r3, #0
 810ba02:	d005      	beq.n	810ba10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810ba04:	4b05      	ldr	r3, [pc, #20]	@ (810ba1c <prvCheckForValidListAndQueue+0x60>)
 810ba06:	681b      	ldr	r3, [r3, #0]
 810ba08:	490b      	ldr	r1, [pc, #44]	@ (810ba38 <prvCheckForValidListAndQueue+0x7c>)
 810ba0a:	4618      	mov	r0, r3
 810ba0c:	f7fd fe1a 	bl	8109644 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810ba10:	f7fc fccc 	bl	81083ac <vPortExitCritical>
}
 810ba14:	bf00      	nop
 810ba16:	46bd      	mov	sp, r7
 810ba18:	bd80      	pop	{r7, pc}
 810ba1a:	bf00      	nop
 810ba1c:	10004b8c 	.word	0x10004b8c
 810ba20:	10004b5c 	.word	0x10004b5c
 810ba24:	10004b70 	.word	0x10004b70
 810ba28:	10004b84 	.word	0x10004b84
 810ba2c:	10004b88 	.word	0x10004b88
 810ba30:	10004c38 	.word	0x10004c38
 810ba34:	10004b98 	.word	0x10004b98
 810ba38:	08117794 	.word	0x08117794

0810ba3c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 810ba3c:	b480      	push	{r7}
 810ba3e:	b083      	sub	sp, #12
 810ba40:	af00      	add	r7, sp, #0
 810ba42:	4603      	mov	r3, r0
 810ba44:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 810ba46:	88fb      	ldrh	r3, [r7, #6]
 810ba48:	021b      	lsls	r3, r3, #8
 810ba4a:	b21a      	sxth	r2, r3
 810ba4c:	88fb      	ldrh	r3, [r7, #6]
 810ba4e:	0a1b      	lsrs	r3, r3, #8
 810ba50:	b29b      	uxth	r3, r3
 810ba52:	b21b      	sxth	r3, r3
 810ba54:	4313      	orrs	r3, r2
 810ba56:	b21b      	sxth	r3, r3
 810ba58:	b29b      	uxth	r3, r3
}
 810ba5a:	4618      	mov	r0, r3
 810ba5c:	370c      	adds	r7, #12
 810ba5e:	46bd      	mov	sp, r7
 810ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba64:	4770      	bx	lr

0810ba66 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 810ba66:	b480      	push	{r7}
 810ba68:	b083      	sub	sp, #12
 810ba6a:	af00      	add	r7, sp, #0
 810ba6c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 810ba6e:	687b      	ldr	r3, [r7, #4]
 810ba70:	061a      	lsls	r2, r3, #24
 810ba72:	687b      	ldr	r3, [r7, #4]
 810ba74:	021b      	lsls	r3, r3, #8
 810ba76:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810ba7a:	431a      	orrs	r2, r3
 810ba7c:	687b      	ldr	r3, [r7, #4]
 810ba7e:	0a1b      	lsrs	r3, r3, #8
 810ba80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 810ba84:	431a      	orrs	r2, r3
 810ba86:	687b      	ldr	r3, [r7, #4]
 810ba88:	0e1b      	lsrs	r3, r3, #24
 810ba8a:	4313      	orrs	r3, r2
}
 810ba8c:	4618      	mov	r0, r3
 810ba8e:	370c      	adds	r7, #12
 810ba90:	46bd      	mov	sp, r7
 810ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba96:	4770      	bx	lr

0810ba98 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 810ba98:	b580      	push	{r7, lr}
 810ba9a:	b082      	sub	sp, #8
 810ba9c:	af00      	add	r7, sp, #0
 810ba9e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 810baa0:	4915      	ldr	r1, [pc, #84]	@ (810baf8 <etharp_free_entry+0x60>)
 810baa2:	687a      	ldr	r2, [r7, #4]
 810baa4:	4613      	mov	r3, r2
 810baa6:	005b      	lsls	r3, r3, #1
 810baa8:	4413      	add	r3, r2
 810baaa:	00db      	lsls	r3, r3, #3
 810baac:	440b      	add	r3, r1
 810baae:	681b      	ldr	r3, [r3, #0]
 810bab0:	2b00      	cmp	r3, #0
 810bab2:	d013      	beq.n	810badc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 810bab4:	4910      	ldr	r1, [pc, #64]	@ (810baf8 <etharp_free_entry+0x60>)
 810bab6:	687a      	ldr	r2, [r7, #4]
 810bab8:	4613      	mov	r3, r2
 810baba:	005b      	lsls	r3, r3, #1
 810babc:	4413      	add	r3, r2
 810babe:	00db      	lsls	r3, r3, #3
 810bac0:	440b      	add	r3, r1
 810bac2:	681b      	ldr	r3, [r3, #0]
 810bac4:	4618      	mov	r0, r3
 810bac6:	f003 ff63 	bl	810f990 <pbuf_free>
    arp_table[i].q = NULL;
 810baca:	490b      	ldr	r1, [pc, #44]	@ (810baf8 <etharp_free_entry+0x60>)
 810bacc:	687a      	ldr	r2, [r7, #4]
 810bace:	4613      	mov	r3, r2
 810bad0:	005b      	lsls	r3, r3, #1
 810bad2:	4413      	add	r3, r2
 810bad4:	00db      	lsls	r3, r3, #3
 810bad6:	440b      	add	r3, r1
 810bad8:	2200      	movs	r2, #0
 810bada:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 810badc:	4906      	ldr	r1, [pc, #24]	@ (810baf8 <etharp_free_entry+0x60>)
 810bade:	687a      	ldr	r2, [r7, #4]
 810bae0:	4613      	mov	r3, r2
 810bae2:	005b      	lsls	r3, r3, #1
 810bae4:	4413      	add	r3, r2
 810bae6:	00db      	lsls	r3, r3, #3
 810bae8:	440b      	add	r3, r1
 810baea:	3314      	adds	r3, #20
 810baec:	2200      	movs	r2, #0
 810baee:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 810baf0:	bf00      	nop
 810baf2:	3708      	adds	r7, #8
 810baf4:	46bd      	mov	sp, r7
 810baf6:	bd80      	pop	{r7, pc}
 810baf8:	10004c88 	.word	0x10004c88

0810bafc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 810bafc:	b580      	push	{r7, lr}
 810bafe:	b082      	sub	sp, #8
 810bb00:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810bb02:	2300      	movs	r3, #0
 810bb04:	607b      	str	r3, [r7, #4]
 810bb06:	e096      	b.n	810bc36 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 810bb08:	494f      	ldr	r1, [pc, #316]	@ (810bc48 <etharp_tmr+0x14c>)
 810bb0a:	687a      	ldr	r2, [r7, #4]
 810bb0c:	4613      	mov	r3, r2
 810bb0e:	005b      	lsls	r3, r3, #1
 810bb10:	4413      	add	r3, r2
 810bb12:	00db      	lsls	r3, r3, #3
 810bb14:	440b      	add	r3, r1
 810bb16:	3314      	adds	r3, #20
 810bb18:	781b      	ldrb	r3, [r3, #0]
 810bb1a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 810bb1c:	78fb      	ldrb	r3, [r7, #3]
 810bb1e:	2b00      	cmp	r3, #0
 810bb20:	f000 8086 	beq.w	810bc30 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 810bb24:	4948      	ldr	r1, [pc, #288]	@ (810bc48 <etharp_tmr+0x14c>)
 810bb26:	687a      	ldr	r2, [r7, #4]
 810bb28:	4613      	mov	r3, r2
 810bb2a:	005b      	lsls	r3, r3, #1
 810bb2c:	4413      	add	r3, r2
 810bb2e:	00db      	lsls	r3, r3, #3
 810bb30:	440b      	add	r3, r1
 810bb32:	3312      	adds	r3, #18
 810bb34:	881b      	ldrh	r3, [r3, #0]
 810bb36:	3301      	adds	r3, #1
 810bb38:	b298      	uxth	r0, r3
 810bb3a:	4943      	ldr	r1, [pc, #268]	@ (810bc48 <etharp_tmr+0x14c>)
 810bb3c:	687a      	ldr	r2, [r7, #4]
 810bb3e:	4613      	mov	r3, r2
 810bb40:	005b      	lsls	r3, r3, #1
 810bb42:	4413      	add	r3, r2
 810bb44:	00db      	lsls	r3, r3, #3
 810bb46:	440b      	add	r3, r1
 810bb48:	3312      	adds	r3, #18
 810bb4a:	4602      	mov	r2, r0
 810bb4c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 810bb4e:	493e      	ldr	r1, [pc, #248]	@ (810bc48 <etharp_tmr+0x14c>)
 810bb50:	687a      	ldr	r2, [r7, #4]
 810bb52:	4613      	mov	r3, r2
 810bb54:	005b      	lsls	r3, r3, #1
 810bb56:	4413      	add	r3, r2
 810bb58:	00db      	lsls	r3, r3, #3
 810bb5a:	440b      	add	r3, r1
 810bb5c:	3312      	adds	r3, #18
 810bb5e:	881b      	ldrh	r3, [r3, #0]
 810bb60:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 810bb64:	d215      	bcs.n	810bb92 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 810bb66:	4938      	ldr	r1, [pc, #224]	@ (810bc48 <etharp_tmr+0x14c>)
 810bb68:	687a      	ldr	r2, [r7, #4]
 810bb6a:	4613      	mov	r3, r2
 810bb6c:	005b      	lsls	r3, r3, #1
 810bb6e:	4413      	add	r3, r2
 810bb70:	00db      	lsls	r3, r3, #3
 810bb72:	440b      	add	r3, r1
 810bb74:	3314      	adds	r3, #20
 810bb76:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 810bb78:	2b01      	cmp	r3, #1
 810bb7a:	d10e      	bne.n	810bb9a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 810bb7c:	4932      	ldr	r1, [pc, #200]	@ (810bc48 <etharp_tmr+0x14c>)
 810bb7e:	687a      	ldr	r2, [r7, #4]
 810bb80:	4613      	mov	r3, r2
 810bb82:	005b      	lsls	r3, r3, #1
 810bb84:	4413      	add	r3, r2
 810bb86:	00db      	lsls	r3, r3, #3
 810bb88:	440b      	add	r3, r1
 810bb8a:	3312      	adds	r3, #18
 810bb8c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 810bb8e:	2b04      	cmp	r3, #4
 810bb90:	d903      	bls.n	810bb9a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 810bb92:	6878      	ldr	r0, [r7, #4]
 810bb94:	f7ff ff80 	bl	810ba98 <etharp_free_entry>
 810bb98:	e04a      	b.n	810bc30 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 810bb9a:	492b      	ldr	r1, [pc, #172]	@ (810bc48 <etharp_tmr+0x14c>)
 810bb9c:	687a      	ldr	r2, [r7, #4]
 810bb9e:	4613      	mov	r3, r2
 810bba0:	005b      	lsls	r3, r3, #1
 810bba2:	4413      	add	r3, r2
 810bba4:	00db      	lsls	r3, r3, #3
 810bba6:	440b      	add	r3, r1
 810bba8:	3314      	adds	r3, #20
 810bbaa:	781b      	ldrb	r3, [r3, #0]
 810bbac:	2b03      	cmp	r3, #3
 810bbae:	d10a      	bne.n	810bbc6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 810bbb0:	4925      	ldr	r1, [pc, #148]	@ (810bc48 <etharp_tmr+0x14c>)
 810bbb2:	687a      	ldr	r2, [r7, #4]
 810bbb4:	4613      	mov	r3, r2
 810bbb6:	005b      	lsls	r3, r3, #1
 810bbb8:	4413      	add	r3, r2
 810bbba:	00db      	lsls	r3, r3, #3
 810bbbc:	440b      	add	r3, r1
 810bbbe:	3314      	adds	r3, #20
 810bbc0:	2204      	movs	r2, #4
 810bbc2:	701a      	strb	r2, [r3, #0]
 810bbc4:	e034      	b.n	810bc30 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 810bbc6:	4920      	ldr	r1, [pc, #128]	@ (810bc48 <etharp_tmr+0x14c>)
 810bbc8:	687a      	ldr	r2, [r7, #4]
 810bbca:	4613      	mov	r3, r2
 810bbcc:	005b      	lsls	r3, r3, #1
 810bbce:	4413      	add	r3, r2
 810bbd0:	00db      	lsls	r3, r3, #3
 810bbd2:	440b      	add	r3, r1
 810bbd4:	3314      	adds	r3, #20
 810bbd6:	781b      	ldrb	r3, [r3, #0]
 810bbd8:	2b04      	cmp	r3, #4
 810bbda:	d10a      	bne.n	810bbf2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 810bbdc:	491a      	ldr	r1, [pc, #104]	@ (810bc48 <etharp_tmr+0x14c>)
 810bbde:	687a      	ldr	r2, [r7, #4]
 810bbe0:	4613      	mov	r3, r2
 810bbe2:	005b      	lsls	r3, r3, #1
 810bbe4:	4413      	add	r3, r2
 810bbe6:	00db      	lsls	r3, r3, #3
 810bbe8:	440b      	add	r3, r1
 810bbea:	3314      	adds	r3, #20
 810bbec:	2202      	movs	r2, #2
 810bbee:	701a      	strb	r2, [r3, #0]
 810bbf0:	e01e      	b.n	810bc30 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 810bbf2:	4915      	ldr	r1, [pc, #84]	@ (810bc48 <etharp_tmr+0x14c>)
 810bbf4:	687a      	ldr	r2, [r7, #4]
 810bbf6:	4613      	mov	r3, r2
 810bbf8:	005b      	lsls	r3, r3, #1
 810bbfa:	4413      	add	r3, r2
 810bbfc:	00db      	lsls	r3, r3, #3
 810bbfe:	440b      	add	r3, r1
 810bc00:	3314      	adds	r3, #20
 810bc02:	781b      	ldrb	r3, [r3, #0]
 810bc04:	2b01      	cmp	r3, #1
 810bc06:	d113      	bne.n	810bc30 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 810bc08:	490f      	ldr	r1, [pc, #60]	@ (810bc48 <etharp_tmr+0x14c>)
 810bc0a:	687a      	ldr	r2, [r7, #4]
 810bc0c:	4613      	mov	r3, r2
 810bc0e:	005b      	lsls	r3, r3, #1
 810bc10:	4413      	add	r3, r2
 810bc12:	00db      	lsls	r3, r3, #3
 810bc14:	440b      	add	r3, r1
 810bc16:	3308      	adds	r3, #8
 810bc18:	6818      	ldr	r0, [r3, #0]
 810bc1a:	687a      	ldr	r2, [r7, #4]
 810bc1c:	4613      	mov	r3, r2
 810bc1e:	005b      	lsls	r3, r3, #1
 810bc20:	4413      	add	r3, r2
 810bc22:	00db      	lsls	r3, r3, #3
 810bc24:	4a08      	ldr	r2, [pc, #32]	@ (810bc48 <etharp_tmr+0x14c>)
 810bc26:	4413      	add	r3, r2
 810bc28:	3304      	adds	r3, #4
 810bc2a:	4619      	mov	r1, r3
 810bc2c:	f000 fe6e 	bl	810c90c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810bc30:	687b      	ldr	r3, [r7, #4]
 810bc32:	3301      	adds	r3, #1
 810bc34:	607b      	str	r3, [r7, #4]
 810bc36:	687b      	ldr	r3, [r7, #4]
 810bc38:	2b09      	cmp	r3, #9
 810bc3a:	f77f af65 	ble.w	810bb08 <etharp_tmr+0xc>
      }
    }
  }
}
 810bc3e:	bf00      	nop
 810bc40:	bf00      	nop
 810bc42:	3708      	adds	r7, #8
 810bc44:	46bd      	mov	sp, r7
 810bc46:	bd80      	pop	{r7, pc}
 810bc48:	10004c88 	.word	0x10004c88

0810bc4c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 810bc4c:	b580      	push	{r7, lr}
 810bc4e:	b08a      	sub	sp, #40	@ 0x28
 810bc50:	af00      	add	r7, sp, #0
 810bc52:	60f8      	str	r0, [r7, #12]
 810bc54:	460b      	mov	r3, r1
 810bc56:	607a      	str	r2, [r7, #4]
 810bc58:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 810bc5a:	230a      	movs	r3, #10
 810bc5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 810bc5e:	230a      	movs	r3, #10
 810bc60:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 810bc62:	230a      	movs	r3, #10
 810bc64:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 810bc66:	2300      	movs	r3, #0
 810bc68:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 810bc6a:	230a      	movs	r3, #10
 810bc6c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 810bc6e:	2300      	movs	r3, #0
 810bc70:	83bb      	strh	r3, [r7, #28]
 810bc72:	2300      	movs	r3, #0
 810bc74:	837b      	strh	r3, [r7, #26]
 810bc76:	2300      	movs	r3, #0
 810bc78:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810bc7a:	2300      	movs	r3, #0
 810bc7c:	843b      	strh	r3, [r7, #32]
 810bc7e:	e0ae      	b.n	810bdde <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 810bc80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810bc84:	49a6      	ldr	r1, [pc, #664]	@ (810bf20 <etharp_find_entry+0x2d4>)
 810bc86:	4613      	mov	r3, r2
 810bc88:	005b      	lsls	r3, r3, #1
 810bc8a:	4413      	add	r3, r2
 810bc8c:	00db      	lsls	r3, r3, #3
 810bc8e:	440b      	add	r3, r1
 810bc90:	3314      	adds	r3, #20
 810bc92:	781b      	ldrb	r3, [r3, #0]
 810bc94:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 810bc96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 810bc9a:	2b0a      	cmp	r3, #10
 810bc9c:	d105      	bne.n	810bcaa <etharp_find_entry+0x5e>
 810bc9e:	7dfb      	ldrb	r3, [r7, #23]
 810bca0:	2b00      	cmp	r3, #0
 810bca2:	d102      	bne.n	810bcaa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 810bca4:	8c3b      	ldrh	r3, [r7, #32]
 810bca6:	847b      	strh	r3, [r7, #34]	@ 0x22
 810bca8:	e095      	b.n	810bdd6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 810bcaa:	7dfb      	ldrb	r3, [r7, #23]
 810bcac:	2b00      	cmp	r3, #0
 810bcae:	f000 8092 	beq.w	810bdd6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 810bcb2:	7dfb      	ldrb	r3, [r7, #23]
 810bcb4:	2b01      	cmp	r3, #1
 810bcb6:	d009      	beq.n	810bccc <etharp_find_entry+0x80>
 810bcb8:	7dfb      	ldrb	r3, [r7, #23]
 810bcba:	2b01      	cmp	r3, #1
 810bcbc:	d806      	bhi.n	810bccc <etharp_find_entry+0x80>
 810bcbe:	4b99      	ldr	r3, [pc, #612]	@ (810bf24 <etharp_find_entry+0x2d8>)
 810bcc0:	f240 1223 	movw	r2, #291	@ 0x123
 810bcc4:	4998      	ldr	r1, [pc, #608]	@ (810bf28 <etharp_find_entry+0x2dc>)
 810bcc6:	4899      	ldr	r0, [pc, #612]	@ (810bf2c <etharp_find_entry+0x2e0>)
 810bcc8:	f00a fe0e 	bl	81168e8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 810bccc:	68fb      	ldr	r3, [r7, #12]
 810bcce:	2b00      	cmp	r3, #0
 810bcd0:	d020      	beq.n	810bd14 <etharp_find_entry+0xc8>
 810bcd2:	68fb      	ldr	r3, [r7, #12]
 810bcd4:	6819      	ldr	r1, [r3, #0]
 810bcd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810bcda:	4891      	ldr	r0, [pc, #580]	@ (810bf20 <etharp_find_entry+0x2d4>)
 810bcdc:	4613      	mov	r3, r2
 810bcde:	005b      	lsls	r3, r3, #1
 810bce0:	4413      	add	r3, r2
 810bce2:	00db      	lsls	r3, r3, #3
 810bce4:	4403      	add	r3, r0
 810bce6:	3304      	adds	r3, #4
 810bce8:	681b      	ldr	r3, [r3, #0]
 810bcea:	4299      	cmp	r1, r3
 810bcec:	d112      	bne.n	810bd14 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 810bcee:	687b      	ldr	r3, [r7, #4]
 810bcf0:	2b00      	cmp	r3, #0
 810bcf2:	d00c      	beq.n	810bd0e <etharp_find_entry+0xc2>
 810bcf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810bcf8:	4989      	ldr	r1, [pc, #548]	@ (810bf20 <etharp_find_entry+0x2d4>)
 810bcfa:	4613      	mov	r3, r2
 810bcfc:	005b      	lsls	r3, r3, #1
 810bcfe:	4413      	add	r3, r2
 810bd00:	00db      	lsls	r3, r3, #3
 810bd02:	440b      	add	r3, r1
 810bd04:	3308      	adds	r3, #8
 810bd06:	681b      	ldr	r3, [r3, #0]
 810bd08:	687a      	ldr	r2, [r7, #4]
 810bd0a:	429a      	cmp	r2, r3
 810bd0c:	d102      	bne.n	810bd14 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 810bd0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810bd12:	e100      	b.n	810bf16 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 810bd14:	7dfb      	ldrb	r3, [r7, #23]
 810bd16:	2b01      	cmp	r3, #1
 810bd18:	d140      	bne.n	810bd9c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 810bd1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810bd1e:	4980      	ldr	r1, [pc, #512]	@ (810bf20 <etharp_find_entry+0x2d4>)
 810bd20:	4613      	mov	r3, r2
 810bd22:	005b      	lsls	r3, r3, #1
 810bd24:	4413      	add	r3, r2
 810bd26:	00db      	lsls	r3, r3, #3
 810bd28:	440b      	add	r3, r1
 810bd2a:	681b      	ldr	r3, [r3, #0]
 810bd2c:	2b00      	cmp	r3, #0
 810bd2e:	d01a      	beq.n	810bd66 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 810bd30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810bd34:	497a      	ldr	r1, [pc, #488]	@ (810bf20 <etharp_find_entry+0x2d4>)
 810bd36:	4613      	mov	r3, r2
 810bd38:	005b      	lsls	r3, r3, #1
 810bd3a:	4413      	add	r3, r2
 810bd3c:	00db      	lsls	r3, r3, #3
 810bd3e:	440b      	add	r3, r1
 810bd40:	3312      	adds	r3, #18
 810bd42:	881b      	ldrh	r3, [r3, #0]
 810bd44:	8bba      	ldrh	r2, [r7, #28]
 810bd46:	429a      	cmp	r2, r3
 810bd48:	d845      	bhi.n	810bdd6 <etharp_find_entry+0x18a>
            old_queue = i;
 810bd4a:	8c3b      	ldrh	r3, [r7, #32]
 810bd4c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 810bd4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810bd52:	4973      	ldr	r1, [pc, #460]	@ (810bf20 <etharp_find_entry+0x2d4>)
 810bd54:	4613      	mov	r3, r2
 810bd56:	005b      	lsls	r3, r3, #1
 810bd58:	4413      	add	r3, r2
 810bd5a:	00db      	lsls	r3, r3, #3
 810bd5c:	440b      	add	r3, r1
 810bd5e:	3312      	adds	r3, #18
 810bd60:	881b      	ldrh	r3, [r3, #0]
 810bd62:	83bb      	strh	r3, [r7, #28]
 810bd64:	e037      	b.n	810bdd6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 810bd66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810bd6a:	496d      	ldr	r1, [pc, #436]	@ (810bf20 <etharp_find_entry+0x2d4>)
 810bd6c:	4613      	mov	r3, r2
 810bd6e:	005b      	lsls	r3, r3, #1
 810bd70:	4413      	add	r3, r2
 810bd72:	00db      	lsls	r3, r3, #3
 810bd74:	440b      	add	r3, r1
 810bd76:	3312      	adds	r3, #18
 810bd78:	881b      	ldrh	r3, [r3, #0]
 810bd7a:	8b7a      	ldrh	r2, [r7, #26]
 810bd7c:	429a      	cmp	r2, r3
 810bd7e:	d82a      	bhi.n	810bdd6 <etharp_find_entry+0x18a>
            old_pending = i;
 810bd80:	8c3b      	ldrh	r3, [r7, #32]
 810bd82:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 810bd84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810bd88:	4965      	ldr	r1, [pc, #404]	@ (810bf20 <etharp_find_entry+0x2d4>)
 810bd8a:	4613      	mov	r3, r2
 810bd8c:	005b      	lsls	r3, r3, #1
 810bd8e:	4413      	add	r3, r2
 810bd90:	00db      	lsls	r3, r3, #3
 810bd92:	440b      	add	r3, r1
 810bd94:	3312      	adds	r3, #18
 810bd96:	881b      	ldrh	r3, [r3, #0]
 810bd98:	837b      	strh	r3, [r7, #26]
 810bd9a:	e01c      	b.n	810bdd6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 810bd9c:	7dfb      	ldrb	r3, [r7, #23]
 810bd9e:	2b01      	cmp	r3, #1
 810bda0:	d919      	bls.n	810bdd6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 810bda2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810bda6:	495e      	ldr	r1, [pc, #376]	@ (810bf20 <etharp_find_entry+0x2d4>)
 810bda8:	4613      	mov	r3, r2
 810bdaa:	005b      	lsls	r3, r3, #1
 810bdac:	4413      	add	r3, r2
 810bdae:	00db      	lsls	r3, r3, #3
 810bdb0:	440b      	add	r3, r1
 810bdb2:	3312      	adds	r3, #18
 810bdb4:	881b      	ldrh	r3, [r3, #0]
 810bdb6:	8b3a      	ldrh	r2, [r7, #24]
 810bdb8:	429a      	cmp	r2, r3
 810bdba:	d80c      	bhi.n	810bdd6 <etharp_find_entry+0x18a>
            old_stable = i;
 810bdbc:	8c3b      	ldrh	r3, [r7, #32]
 810bdbe:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 810bdc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810bdc4:	4956      	ldr	r1, [pc, #344]	@ (810bf20 <etharp_find_entry+0x2d4>)
 810bdc6:	4613      	mov	r3, r2
 810bdc8:	005b      	lsls	r3, r3, #1
 810bdca:	4413      	add	r3, r2
 810bdcc:	00db      	lsls	r3, r3, #3
 810bdce:	440b      	add	r3, r1
 810bdd0:	3312      	adds	r3, #18
 810bdd2:	881b      	ldrh	r3, [r3, #0]
 810bdd4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810bdd6:	8c3b      	ldrh	r3, [r7, #32]
 810bdd8:	3301      	adds	r3, #1
 810bdda:	b29b      	uxth	r3, r3
 810bddc:	843b      	strh	r3, [r7, #32]
 810bdde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810bde2:	2b09      	cmp	r3, #9
 810bde4:	f77f af4c 	ble.w	810bc80 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 810bde8:	7afb      	ldrb	r3, [r7, #11]
 810bdea:	f003 0302 	and.w	r3, r3, #2
 810bdee:	2b00      	cmp	r3, #0
 810bdf0:	d108      	bne.n	810be04 <etharp_find_entry+0x1b8>
 810bdf2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 810bdf6:	2b0a      	cmp	r3, #10
 810bdf8:	d107      	bne.n	810be0a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 810bdfa:	7afb      	ldrb	r3, [r7, #11]
 810bdfc:	f003 0301 	and.w	r3, r3, #1
 810be00:	2b00      	cmp	r3, #0
 810be02:	d102      	bne.n	810be0a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 810be04:	f04f 33ff 	mov.w	r3, #4294967295
 810be08:	e085      	b.n	810bf16 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 810be0a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 810be0e:	2b09      	cmp	r3, #9
 810be10:	dc02      	bgt.n	810be18 <etharp_find_entry+0x1cc>
    i = empty;
 810be12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810be14:	843b      	strh	r3, [r7, #32]
 810be16:	e039      	b.n	810be8c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 810be18:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 810be1c:	2b09      	cmp	r3, #9
 810be1e:	dc14      	bgt.n	810be4a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 810be20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810be22:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 810be24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810be28:	493d      	ldr	r1, [pc, #244]	@ (810bf20 <etharp_find_entry+0x2d4>)
 810be2a:	4613      	mov	r3, r2
 810be2c:	005b      	lsls	r3, r3, #1
 810be2e:	4413      	add	r3, r2
 810be30:	00db      	lsls	r3, r3, #3
 810be32:	440b      	add	r3, r1
 810be34:	681b      	ldr	r3, [r3, #0]
 810be36:	2b00      	cmp	r3, #0
 810be38:	d018      	beq.n	810be6c <etharp_find_entry+0x220>
 810be3a:	4b3a      	ldr	r3, [pc, #232]	@ (810bf24 <etharp_find_entry+0x2d8>)
 810be3c:	f240 126d 	movw	r2, #365	@ 0x16d
 810be40:	493b      	ldr	r1, [pc, #236]	@ (810bf30 <etharp_find_entry+0x2e4>)
 810be42:	483a      	ldr	r0, [pc, #232]	@ (810bf2c <etharp_find_entry+0x2e0>)
 810be44:	f00a fd50 	bl	81168e8 <iprintf>
 810be48:	e010      	b.n	810be6c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 810be4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 810be4e:	2b09      	cmp	r3, #9
 810be50:	dc02      	bgt.n	810be58 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 810be52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 810be54:	843b      	strh	r3, [r7, #32]
 810be56:	e009      	b.n	810be6c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 810be58:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 810be5c:	2b09      	cmp	r3, #9
 810be5e:	dc02      	bgt.n	810be66 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 810be60:	8bfb      	ldrh	r3, [r7, #30]
 810be62:	843b      	strh	r3, [r7, #32]
 810be64:	e002      	b.n	810be6c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 810be66:	f04f 33ff 	mov.w	r3, #4294967295
 810be6a:	e054      	b.n	810bf16 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 810be6c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810be70:	2b09      	cmp	r3, #9
 810be72:	dd06      	ble.n	810be82 <etharp_find_entry+0x236>
 810be74:	4b2b      	ldr	r3, [pc, #172]	@ (810bf24 <etharp_find_entry+0x2d8>)
 810be76:	f240 127f 	movw	r2, #383	@ 0x17f
 810be7a:	492e      	ldr	r1, [pc, #184]	@ (810bf34 <etharp_find_entry+0x2e8>)
 810be7c:	482b      	ldr	r0, [pc, #172]	@ (810bf2c <etharp_find_entry+0x2e0>)
 810be7e:	f00a fd33 	bl	81168e8 <iprintf>
    etharp_free_entry(i);
 810be82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810be86:	4618      	mov	r0, r3
 810be88:	f7ff fe06 	bl	810ba98 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 810be8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810be90:	2b09      	cmp	r3, #9
 810be92:	dd06      	ble.n	810bea2 <etharp_find_entry+0x256>
 810be94:	4b23      	ldr	r3, [pc, #140]	@ (810bf24 <etharp_find_entry+0x2d8>)
 810be96:	f240 1283 	movw	r2, #387	@ 0x183
 810be9a:	4926      	ldr	r1, [pc, #152]	@ (810bf34 <etharp_find_entry+0x2e8>)
 810be9c:	4823      	ldr	r0, [pc, #140]	@ (810bf2c <etharp_find_entry+0x2e0>)
 810be9e:	f00a fd23 	bl	81168e8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 810bea2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810bea6:	491e      	ldr	r1, [pc, #120]	@ (810bf20 <etharp_find_entry+0x2d4>)
 810bea8:	4613      	mov	r3, r2
 810beaa:	005b      	lsls	r3, r3, #1
 810beac:	4413      	add	r3, r2
 810beae:	00db      	lsls	r3, r3, #3
 810beb0:	440b      	add	r3, r1
 810beb2:	3314      	adds	r3, #20
 810beb4:	781b      	ldrb	r3, [r3, #0]
 810beb6:	2b00      	cmp	r3, #0
 810beb8:	d006      	beq.n	810bec8 <etharp_find_entry+0x27c>
 810beba:	4b1a      	ldr	r3, [pc, #104]	@ (810bf24 <etharp_find_entry+0x2d8>)
 810bebc:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 810bec0:	491d      	ldr	r1, [pc, #116]	@ (810bf38 <etharp_find_entry+0x2ec>)
 810bec2:	481a      	ldr	r0, [pc, #104]	@ (810bf2c <etharp_find_entry+0x2e0>)
 810bec4:	f00a fd10 	bl	81168e8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 810bec8:	68fb      	ldr	r3, [r7, #12]
 810beca:	2b00      	cmp	r3, #0
 810becc:	d00b      	beq.n	810bee6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 810bece:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810bed2:	68fb      	ldr	r3, [r7, #12]
 810bed4:	6819      	ldr	r1, [r3, #0]
 810bed6:	4812      	ldr	r0, [pc, #72]	@ (810bf20 <etharp_find_entry+0x2d4>)
 810bed8:	4613      	mov	r3, r2
 810beda:	005b      	lsls	r3, r3, #1
 810bedc:	4413      	add	r3, r2
 810bede:	00db      	lsls	r3, r3, #3
 810bee0:	4403      	add	r3, r0
 810bee2:	3304      	adds	r3, #4
 810bee4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 810bee6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810beea:	490d      	ldr	r1, [pc, #52]	@ (810bf20 <etharp_find_entry+0x2d4>)
 810beec:	4613      	mov	r3, r2
 810beee:	005b      	lsls	r3, r3, #1
 810bef0:	4413      	add	r3, r2
 810bef2:	00db      	lsls	r3, r3, #3
 810bef4:	440b      	add	r3, r1
 810bef6:	3312      	adds	r3, #18
 810bef8:	2200      	movs	r2, #0
 810befa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 810befc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810bf00:	4907      	ldr	r1, [pc, #28]	@ (810bf20 <etharp_find_entry+0x2d4>)
 810bf02:	4613      	mov	r3, r2
 810bf04:	005b      	lsls	r3, r3, #1
 810bf06:	4413      	add	r3, r2
 810bf08:	00db      	lsls	r3, r3, #3
 810bf0a:	440b      	add	r3, r1
 810bf0c:	3308      	adds	r3, #8
 810bf0e:	687a      	ldr	r2, [r7, #4]
 810bf10:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 810bf12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 810bf16:	4618      	mov	r0, r3
 810bf18:	3728      	adds	r7, #40	@ 0x28
 810bf1a:	46bd      	mov	sp, r7
 810bf1c:	bd80      	pop	{r7, pc}
 810bf1e:	bf00      	nop
 810bf20:	10004c88 	.word	0x10004c88
 810bf24:	0811779c 	.word	0x0811779c
 810bf28:	08117814 	.word	0x08117814
 810bf2c:	08117854 	.word	0x08117854
 810bf30:	0811787c 	.word	0x0811787c
 810bf34:	08117894 	.word	0x08117894
 810bf38:	081178a8 	.word	0x081178a8

0810bf3c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 810bf3c:	b580      	push	{r7, lr}
 810bf3e:	b088      	sub	sp, #32
 810bf40:	af02      	add	r7, sp, #8
 810bf42:	60f8      	str	r0, [r7, #12]
 810bf44:	60b9      	str	r1, [r7, #8]
 810bf46:	607a      	str	r2, [r7, #4]
 810bf48:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 810bf4a:	68fb      	ldr	r3, [r7, #12]
 810bf4c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810bf50:	2b06      	cmp	r3, #6
 810bf52:	d006      	beq.n	810bf62 <etharp_update_arp_entry+0x26>
 810bf54:	4b48      	ldr	r3, [pc, #288]	@ (810c078 <etharp_update_arp_entry+0x13c>)
 810bf56:	f240 12a9 	movw	r2, #425	@ 0x1a9
 810bf5a:	4948      	ldr	r1, [pc, #288]	@ (810c07c <etharp_update_arp_entry+0x140>)
 810bf5c:	4848      	ldr	r0, [pc, #288]	@ (810c080 <etharp_update_arp_entry+0x144>)
 810bf5e:	f00a fcc3 	bl	81168e8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 810bf62:	68bb      	ldr	r3, [r7, #8]
 810bf64:	2b00      	cmp	r3, #0
 810bf66:	d012      	beq.n	810bf8e <etharp_update_arp_entry+0x52>
 810bf68:	68bb      	ldr	r3, [r7, #8]
 810bf6a:	681b      	ldr	r3, [r3, #0]
 810bf6c:	2b00      	cmp	r3, #0
 810bf6e:	d00e      	beq.n	810bf8e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 810bf70:	68bb      	ldr	r3, [r7, #8]
 810bf72:	681b      	ldr	r3, [r3, #0]
 810bf74:	68f9      	ldr	r1, [r7, #12]
 810bf76:	4618      	mov	r0, r3
 810bf78:	f001 face 	bl	810d518 <ip4_addr_isbroadcast_u32>
 810bf7c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 810bf7e:	2b00      	cmp	r3, #0
 810bf80:	d105      	bne.n	810bf8e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 810bf82:	68bb      	ldr	r3, [r7, #8]
 810bf84:	681b      	ldr	r3, [r3, #0]
 810bf86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 810bf8a:	2be0      	cmp	r3, #224	@ 0xe0
 810bf8c:	d102      	bne.n	810bf94 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 810bf8e:	f06f 030f 	mvn.w	r3, #15
 810bf92:	e06c      	b.n	810c06e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 810bf94:	78fb      	ldrb	r3, [r7, #3]
 810bf96:	68fa      	ldr	r2, [r7, #12]
 810bf98:	4619      	mov	r1, r3
 810bf9a:	68b8      	ldr	r0, [r7, #8]
 810bf9c:	f7ff fe56 	bl	810bc4c <etharp_find_entry>
 810bfa0:	4603      	mov	r3, r0
 810bfa2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 810bfa4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 810bfa8:	2b00      	cmp	r3, #0
 810bfaa:	da02      	bge.n	810bfb2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 810bfac:	8afb      	ldrh	r3, [r7, #22]
 810bfae:	b25b      	sxtb	r3, r3
 810bfb0:	e05d      	b.n	810c06e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 810bfb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810bfb6:	4933      	ldr	r1, [pc, #204]	@ (810c084 <etharp_update_arp_entry+0x148>)
 810bfb8:	4613      	mov	r3, r2
 810bfba:	005b      	lsls	r3, r3, #1
 810bfbc:	4413      	add	r3, r2
 810bfbe:	00db      	lsls	r3, r3, #3
 810bfc0:	440b      	add	r3, r1
 810bfc2:	3314      	adds	r3, #20
 810bfc4:	2202      	movs	r2, #2
 810bfc6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 810bfc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810bfcc:	492d      	ldr	r1, [pc, #180]	@ (810c084 <etharp_update_arp_entry+0x148>)
 810bfce:	4613      	mov	r3, r2
 810bfd0:	005b      	lsls	r3, r3, #1
 810bfd2:	4413      	add	r3, r2
 810bfd4:	00db      	lsls	r3, r3, #3
 810bfd6:	440b      	add	r3, r1
 810bfd8:	3308      	adds	r3, #8
 810bfda:	68fa      	ldr	r2, [r7, #12]
 810bfdc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 810bfde:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810bfe2:	4613      	mov	r3, r2
 810bfe4:	005b      	lsls	r3, r3, #1
 810bfe6:	4413      	add	r3, r2
 810bfe8:	00db      	lsls	r3, r3, #3
 810bfea:	3308      	adds	r3, #8
 810bfec:	4a25      	ldr	r2, [pc, #148]	@ (810c084 <etharp_update_arp_entry+0x148>)
 810bfee:	4413      	add	r3, r2
 810bff0:	3304      	adds	r3, #4
 810bff2:	2206      	movs	r2, #6
 810bff4:	6879      	ldr	r1, [r7, #4]
 810bff6:	4618      	mov	r0, r3
 810bff8:	f00a fe15 	bl	8116c26 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 810bffc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810c000:	4920      	ldr	r1, [pc, #128]	@ (810c084 <etharp_update_arp_entry+0x148>)
 810c002:	4613      	mov	r3, r2
 810c004:	005b      	lsls	r3, r3, #1
 810c006:	4413      	add	r3, r2
 810c008:	00db      	lsls	r3, r3, #3
 810c00a:	440b      	add	r3, r1
 810c00c:	3312      	adds	r3, #18
 810c00e:	2200      	movs	r2, #0
 810c010:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 810c012:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810c016:	491b      	ldr	r1, [pc, #108]	@ (810c084 <etharp_update_arp_entry+0x148>)
 810c018:	4613      	mov	r3, r2
 810c01a:	005b      	lsls	r3, r3, #1
 810c01c:	4413      	add	r3, r2
 810c01e:	00db      	lsls	r3, r3, #3
 810c020:	440b      	add	r3, r1
 810c022:	681b      	ldr	r3, [r3, #0]
 810c024:	2b00      	cmp	r3, #0
 810c026:	d021      	beq.n	810c06c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 810c028:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810c02c:	4915      	ldr	r1, [pc, #84]	@ (810c084 <etharp_update_arp_entry+0x148>)
 810c02e:	4613      	mov	r3, r2
 810c030:	005b      	lsls	r3, r3, #1
 810c032:	4413      	add	r3, r2
 810c034:	00db      	lsls	r3, r3, #3
 810c036:	440b      	add	r3, r1
 810c038:	681b      	ldr	r3, [r3, #0]
 810c03a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 810c03c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810c040:	4910      	ldr	r1, [pc, #64]	@ (810c084 <etharp_update_arp_entry+0x148>)
 810c042:	4613      	mov	r3, r2
 810c044:	005b      	lsls	r3, r3, #1
 810c046:	4413      	add	r3, r2
 810c048:	00db      	lsls	r3, r3, #3
 810c04a:	440b      	add	r3, r1
 810c04c:	2200      	movs	r2, #0
 810c04e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 810c050:	68fb      	ldr	r3, [r7, #12]
 810c052:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 810c056:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810c05a:	9300      	str	r3, [sp, #0]
 810c05c:	687b      	ldr	r3, [r7, #4]
 810c05e:	6939      	ldr	r1, [r7, #16]
 810c060:	68f8      	ldr	r0, [r7, #12]
 810c062:	f000 fcf3 	bl	810ca4c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 810c066:	6938      	ldr	r0, [r7, #16]
 810c068:	f003 fc92 	bl	810f990 <pbuf_free>
  }
  return ERR_OK;
 810c06c:	2300      	movs	r3, #0
}
 810c06e:	4618      	mov	r0, r3
 810c070:	3718      	adds	r7, #24
 810c072:	46bd      	mov	sp, r7
 810c074:	bd80      	pop	{r7, pc}
 810c076:	bf00      	nop
 810c078:	0811779c 	.word	0x0811779c
 810c07c:	081178d4 	.word	0x081178d4
 810c080:	08117854 	.word	0x08117854
 810c084:	10004c88 	.word	0x10004c88

0810c088 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 810c088:	b580      	push	{r7, lr}
 810c08a:	b084      	sub	sp, #16
 810c08c:	af00      	add	r7, sp, #0
 810c08e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810c090:	2300      	movs	r3, #0
 810c092:	60fb      	str	r3, [r7, #12]
 810c094:	e01e      	b.n	810c0d4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 810c096:	4913      	ldr	r1, [pc, #76]	@ (810c0e4 <etharp_cleanup_netif+0x5c>)
 810c098:	68fa      	ldr	r2, [r7, #12]
 810c09a:	4613      	mov	r3, r2
 810c09c:	005b      	lsls	r3, r3, #1
 810c09e:	4413      	add	r3, r2
 810c0a0:	00db      	lsls	r3, r3, #3
 810c0a2:	440b      	add	r3, r1
 810c0a4:	3314      	adds	r3, #20
 810c0a6:	781b      	ldrb	r3, [r3, #0]
 810c0a8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 810c0aa:	7afb      	ldrb	r3, [r7, #11]
 810c0ac:	2b00      	cmp	r3, #0
 810c0ae:	d00e      	beq.n	810c0ce <etharp_cleanup_netif+0x46>
 810c0b0:	490c      	ldr	r1, [pc, #48]	@ (810c0e4 <etharp_cleanup_netif+0x5c>)
 810c0b2:	68fa      	ldr	r2, [r7, #12]
 810c0b4:	4613      	mov	r3, r2
 810c0b6:	005b      	lsls	r3, r3, #1
 810c0b8:	4413      	add	r3, r2
 810c0ba:	00db      	lsls	r3, r3, #3
 810c0bc:	440b      	add	r3, r1
 810c0be:	3308      	adds	r3, #8
 810c0c0:	681b      	ldr	r3, [r3, #0]
 810c0c2:	687a      	ldr	r2, [r7, #4]
 810c0c4:	429a      	cmp	r2, r3
 810c0c6:	d102      	bne.n	810c0ce <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 810c0c8:	68f8      	ldr	r0, [r7, #12]
 810c0ca:	f7ff fce5 	bl	810ba98 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810c0ce:	68fb      	ldr	r3, [r7, #12]
 810c0d0:	3301      	adds	r3, #1
 810c0d2:	60fb      	str	r3, [r7, #12]
 810c0d4:	68fb      	ldr	r3, [r7, #12]
 810c0d6:	2b09      	cmp	r3, #9
 810c0d8:	dddd      	ble.n	810c096 <etharp_cleanup_netif+0xe>
    }
  }
}
 810c0da:	bf00      	nop
 810c0dc:	bf00      	nop
 810c0de:	3710      	adds	r7, #16
 810c0e0:	46bd      	mov	sp, r7
 810c0e2:	bd80      	pop	{r7, pc}
 810c0e4:	10004c88 	.word	0x10004c88

0810c0e8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 810c0e8:	b5b0      	push	{r4, r5, r7, lr}
 810c0ea:	b08a      	sub	sp, #40	@ 0x28
 810c0ec:	af04      	add	r7, sp, #16
 810c0ee:	6078      	str	r0, [r7, #4]
 810c0f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 810c0f2:	683b      	ldr	r3, [r7, #0]
 810c0f4:	2b00      	cmp	r3, #0
 810c0f6:	d107      	bne.n	810c108 <etharp_input+0x20>
 810c0f8:	4b3d      	ldr	r3, [pc, #244]	@ (810c1f0 <etharp_input+0x108>)
 810c0fa:	f240 228a 	movw	r2, #650	@ 0x28a
 810c0fe:	493d      	ldr	r1, [pc, #244]	@ (810c1f4 <etharp_input+0x10c>)
 810c100:	483d      	ldr	r0, [pc, #244]	@ (810c1f8 <etharp_input+0x110>)
 810c102:	f00a fbf1 	bl	81168e8 <iprintf>
 810c106:	e06f      	b.n	810c1e8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 810c108:	687b      	ldr	r3, [r7, #4]
 810c10a:	685b      	ldr	r3, [r3, #4]
 810c10c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 810c10e:	693b      	ldr	r3, [r7, #16]
 810c110:	881b      	ldrh	r3, [r3, #0]
 810c112:	b29b      	uxth	r3, r3
 810c114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810c118:	d10c      	bne.n	810c134 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 810c11a:	693b      	ldr	r3, [r7, #16]
 810c11c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 810c11e:	2b06      	cmp	r3, #6
 810c120:	d108      	bne.n	810c134 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 810c122:	693b      	ldr	r3, [r7, #16]
 810c124:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 810c126:	2b04      	cmp	r3, #4
 810c128:	d104      	bne.n	810c134 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 810c12a:	693b      	ldr	r3, [r7, #16]
 810c12c:	885b      	ldrh	r3, [r3, #2]
 810c12e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 810c130:	2b08      	cmp	r3, #8
 810c132:	d003      	beq.n	810c13c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 810c134:	6878      	ldr	r0, [r7, #4]
 810c136:	f003 fc2b 	bl	810f990 <pbuf_free>
    return;
 810c13a:	e055      	b.n	810c1e8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 810c13c:	693b      	ldr	r3, [r7, #16]
 810c13e:	330e      	adds	r3, #14
 810c140:	681b      	ldr	r3, [r3, #0]
 810c142:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 810c144:	693b      	ldr	r3, [r7, #16]
 810c146:	3318      	adds	r3, #24
 810c148:	681b      	ldr	r3, [r3, #0]
 810c14a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 810c14c:	683b      	ldr	r3, [r7, #0]
 810c14e:	3304      	adds	r3, #4
 810c150:	681b      	ldr	r3, [r3, #0]
 810c152:	2b00      	cmp	r3, #0
 810c154:	d102      	bne.n	810c15c <etharp_input+0x74>
    for_us = 0;
 810c156:	2300      	movs	r3, #0
 810c158:	75fb      	strb	r3, [r7, #23]
 810c15a:	e009      	b.n	810c170 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 810c15c:	68ba      	ldr	r2, [r7, #8]
 810c15e:	683b      	ldr	r3, [r7, #0]
 810c160:	3304      	adds	r3, #4
 810c162:	681b      	ldr	r3, [r3, #0]
 810c164:	429a      	cmp	r2, r3
 810c166:	bf0c      	ite	eq
 810c168:	2301      	moveq	r3, #1
 810c16a:	2300      	movne	r3, #0
 810c16c:	b2db      	uxtb	r3, r3
 810c16e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 810c170:	693b      	ldr	r3, [r7, #16]
 810c172:	f103 0208 	add.w	r2, r3, #8
 810c176:	7dfb      	ldrb	r3, [r7, #23]
 810c178:	2b00      	cmp	r3, #0
 810c17a:	d001      	beq.n	810c180 <etharp_input+0x98>
 810c17c:	2301      	movs	r3, #1
 810c17e:	e000      	b.n	810c182 <etharp_input+0x9a>
 810c180:	2302      	movs	r3, #2
 810c182:	f107 010c 	add.w	r1, r7, #12
 810c186:	6838      	ldr	r0, [r7, #0]
 810c188:	f7ff fed8 	bl	810bf3c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 810c18c:	693b      	ldr	r3, [r7, #16]
 810c18e:	88db      	ldrh	r3, [r3, #6]
 810c190:	b29b      	uxth	r3, r3
 810c192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810c196:	d003      	beq.n	810c1a0 <etharp_input+0xb8>
 810c198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810c19c:	d01e      	beq.n	810c1dc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 810c19e:	e020      	b.n	810c1e2 <etharp_input+0xfa>
      if (for_us) {
 810c1a0:	7dfb      	ldrb	r3, [r7, #23]
 810c1a2:	2b00      	cmp	r3, #0
 810c1a4:	d01c      	beq.n	810c1e0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 810c1a6:	683b      	ldr	r3, [r7, #0]
 810c1a8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 810c1ac:	693b      	ldr	r3, [r7, #16]
 810c1ae:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 810c1b2:	683b      	ldr	r3, [r7, #0]
 810c1b4:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 810c1b8:	683b      	ldr	r3, [r7, #0]
 810c1ba:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 810c1bc:	693a      	ldr	r2, [r7, #16]
 810c1be:	3208      	adds	r2, #8
        etharp_raw(netif,
 810c1c0:	2102      	movs	r1, #2
 810c1c2:	9103      	str	r1, [sp, #12]
 810c1c4:	f107 010c 	add.w	r1, r7, #12
 810c1c8:	9102      	str	r1, [sp, #8]
 810c1ca:	9201      	str	r2, [sp, #4]
 810c1cc:	9300      	str	r3, [sp, #0]
 810c1ce:	462b      	mov	r3, r5
 810c1d0:	4622      	mov	r2, r4
 810c1d2:	4601      	mov	r1, r0
 810c1d4:	6838      	ldr	r0, [r7, #0]
 810c1d6:	f000 faeb 	bl	810c7b0 <etharp_raw>
      break;
 810c1da:	e001      	b.n	810c1e0 <etharp_input+0xf8>
      break;
 810c1dc:	bf00      	nop
 810c1de:	e000      	b.n	810c1e2 <etharp_input+0xfa>
      break;
 810c1e0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 810c1e2:	6878      	ldr	r0, [r7, #4]
 810c1e4:	f003 fbd4 	bl	810f990 <pbuf_free>
}
 810c1e8:	3718      	adds	r7, #24
 810c1ea:	46bd      	mov	sp, r7
 810c1ec:	bdb0      	pop	{r4, r5, r7, pc}
 810c1ee:	bf00      	nop
 810c1f0:	0811779c 	.word	0x0811779c
 810c1f4:	0811792c 	.word	0x0811792c
 810c1f8:	08117854 	.word	0x08117854

0810c1fc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 810c1fc:	b580      	push	{r7, lr}
 810c1fe:	b086      	sub	sp, #24
 810c200:	af02      	add	r7, sp, #8
 810c202:	60f8      	str	r0, [r7, #12]
 810c204:	60b9      	str	r1, [r7, #8]
 810c206:	4613      	mov	r3, r2
 810c208:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 810c20a:	79fa      	ldrb	r2, [r7, #7]
 810c20c:	4944      	ldr	r1, [pc, #272]	@ (810c320 <etharp_output_to_arp_index+0x124>)
 810c20e:	4613      	mov	r3, r2
 810c210:	005b      	lsls	r3, r3, #1
 810c212:	4413      	add	r3, r2
 810c214:	00db      	lsls	r3, r3, #3
 810c216:	440b      	add	r3, r1
 810c218:	3314      	adds	r3, #20
 810c21a:	781b      	ldrb	r3, [r3, #0]
 810c21c:	2b01      	cmp	r3, #1
 810c21e:	d806      	bhi.n	810c22e <etharp_output_to_arp_index+0x32>
 810c220:	4b40      	ldr	r3, [pc, #256]	@ (810c324 <etharp_output_to_arp_index+0x128>)
 810c222:	f240 22ee 	movw	r2, #750	@ 0x2ee
 810c226:	4940      	ldr	r1, [pc, #256]	@ (810c328 <etharp_output_to_arp_index+0x12c>)
 810c228:	4840      	ldr	r0, [pc, #256]	@ (810c32c <etharp_output_to_arp_index+0x130>)
 810c22a:	f00a fb5d 	bl	81168e8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 810c22e:	79fa      	ldrb	r2, [r7, #7]
 810c230:	493b      	ldr	r1, [pc, #236]	@ (810c320 <etharp_output_to_arp_index+0x124>)
 810c232:	4613      	mov	r3, r2
 810c234:	005b      	lsls	r3, r3, #1
 810c236:	4413      	add	r3, r2
 810c238:	00db      	lsls	r3, r3, #3
 810c23a:	440b      	add	r3, r1
 810c23c:	3314      	adds	r3, #20
 810c23e:	781b      	ldrb	r3, [r3, #0]
 810c240:	2b02      	cmp	r3, #2
 810c242:	d153      	bne.n	810c2ec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 810c244:	79fa      	ldrb	r2, [r7, #7]
 810c246:	4936      	ldr	r1, [pc, #216]	@ (810c320 <etharp_output_to_arp_index+0x124>)
 810c248:	4613      	mov	r3, r2
 810c24a:	005b      	lsls	r3, r3, #1
 810c24c:	4413      	add	r3, r2
 810c24e:	00db      	lsls	r3, r3, #3
 810c250:	440b      	add	r3, r1
 810c252:	3312      	adds	r3, #18
 810c254:	881b      	ldrh	r3, [r3, #0]
 810c256:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 810c25a:	d919      	bls.n	810c290 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 810c25c:	79fa      	ldrb	r2, [r7, #7]
 810c25e:	4613      	mov	r3, r2
 810c260:	005b      	lsls	r3, r3, #1
 810c262:	4413      	add	r3, r2
 810c264:	00db      	lsls	r3, r3, #3
 810c266:	4a2e      	ldr	r2, [pc, #184]	@ (810c320 <etharp_output_to_arp_index+0x124>)
 810c268:	4413      	add	r3, r2
 810c26a:	3304      	adds	r3, #4
 810c26c:	4619      	mov	r1, r3
 810c26e:	68f8      	ldr	r0, [r7, #12]
 810c270:	f000 fb4c 	bl	810c90c <etharp_request>
 810c274:	4603      	mov	r3, r0
 810c276:	2b00      	cmp	r3, #0
 810c278:	d138      	bne.n	810c2ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 810c27a:	79fa      	ldrb	r2, [r7, #7]
 810c27c:	4928      	ldr	r1, [pc, #160]	@ (810c320 <etharp_output_to_arp_index+0x124>)
 810c27e:	4613      	mov	r3, r2
 810c280:	005b      	lsls	r3, r3, #1
 810c282:	4413      	add	r3, r2
 810c284:	00db      	lsls	r3, r3, #3
 810c286:	440b      	add	r3, r1
 810c288:	3314      	adds	r3, #20
 810c28a:	2203      	movs	r2, #3
 810c28c:	701a      	strb	r2, [r3, #0]
 810c28e:	e02d      	b.n	810c2ec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 810c290:	79fa      	ldrb	r2, [r7, #7]
 810c292:	4923      	ldr	r1, [pc, #140]	@ (810c320 <etharp_output_to_arp_index+0x124>)
 810c294:	4613      	mov	r3, r2
 810c296:	005b      	lsls	r3, r3, #1
 810c298:	4413      	add	r3, r2
 810c29a:	00db      	lsls	r3, r3, #3
 810c29c:	440b      	add	r3, r1
 810c29e:	3312      	adds	r3, #18
 810c2a0:	881b      	ldrh	r3, [r3, #0]
 810c2a2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 810c2a6:	d321      	bcc.n	810c2ec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 810c2a8:	79fa      	ldrb	r2, [r7, #7]
 810c2aa:	4613      	mov	r3, r2
 810c2ac:	005b      	lsls	r3, r3, #1
 810c2ae:	4413      	add	r3, r2
 810c2b0:	00db      	lsls	r3, r3, #3
 810c2b2:	4a1b      	ldr	r2, [pc, #108]	@ (810c320 <etharp_output_to_arp_index+0x124>)
 810c2b4:	4413      	add	r3, r2
 810c2b6:	1d19      	adds	r1, r3, #4
 810c2b8:	79fa      	ldrb	r2, [r7, #7]
 810c2ba:	4613      	mov	r3, r2
 810c2bc:	005b      	lsls	r3, r3, #1
 810c2be:	4413      	add	r3, r2
 810c2c0:	00db      	lsls	r3, r3, #3
 810c2c2:	3308      	adds	r3, #8
 810c2c4:	4a16      	ldr	r2, [pc, #88]	@ (810c320 <etharp_output_to_arp_index+0x124>)
 810c2c6:	4413      	add	r3, r2
 810c2c8:	3304      	adds	r3, #4
 810c2ca:	461a      	mov	r2, r3
 810c2cc:	68f8      	ldr	r0, [r7, #12]
 810c2ce:	f000 fafb 	bl	810c8c8 <etharp_request_dst>
 810c2d2:	4603      	mov	r3, r0
 810c2d4:	2b00      	cmp	r3, #0
 810c2d6:	d109      	bne.n	810c2ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 810c2d8:	79fa      	ldrb	r2, [r7, #7]
 810c2da:	4911      	ldr	r1, [pc, #68]	@ (810c320 <etharp_output_to_arp_index+0x124>)
 810c2dc:	4613      	mov	r3, r2
 810c2de:	005b      	lsls	r3, r3, #1
 810c2e0:	4413      	add	r3, r2
 810c2e2:	00db      	lsls	r3, r3, #3
 810c2e4:	440b      	add	r3, r1
 810c2e6:	3314      	adds	r3, #20
 810c2e8:	2203      	movs	r2, #3
 810c2ea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 810c2ec:	68fb      	ldr	r3, [r7, #12]
 810c2ee:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 810c2f2:	79fa      	ldrb	r2, [r7, #7]
 810c2f4:	4613      	mov	r3, r2
 810c2f6:	005b      	lsls	r3, r3, #1
 810c2f8:	4413      	add	r3, r2
 810c2fa:	00db      	lsls	r3, r3, #3
 810c2fc:	3308      	adds	r3, #8
 810c2fe:	4a08      	ldr	r2, [pc, #32]	@ (810c320 <etharp_output_to_arp_index+0x124>)
 810c300:	4413      	add	r3, r2
 810c302:	3304      	adds	r3, #4
 810c304:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810c308:	9200      	str	r2, [sp, #0]
 810c30a:	460a      	mov	r2, r1
 810c30c:	68b9      	ldr	r1, [r7, #8]
 810c30e:	68f8      	ldr	r0, [r7, #12]
 810c310:	f000 fb9c 	bl	810ca4c <ethernet_output>
 810c314:	4603      	mov	r3, r0
}
 810c316:	4618      	mov	r0, r3
 810c318:	3710      	adds	r7, #16
 810c31a:	46bd      	mov	sp, r7
 810c31c:	bd80      	pop	{r7, pc}
 810c31e:	bf00      	nop
 810c320:	10004c88 	.word	0x10004c88
 810c324:	0811779c 	.word	0x0811779c
 810c328:	0811794c 	.word	0x0811794c
 810c32c:	08117854 	.word	0x08117854

0810c330 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 810c330:	b580      	push	{r7, lr}
 810c332:	b08a      	sub	sp, #40	@ 0x28
 810c334:	af02      	add	r7, sp, #8
 810c336:	60f8      	str	r0, [r7, #12]
 810c338:	60b9      	str	r1, [r7, #8]
 810c33a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 810c33c:	687b      	ldr	r3, [r7, #4]
 810c33e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 810c340:	68fb      	ldr	r3, [r7, #12]
 810c342:	2b00      	cmp	r3, #0
 810c344:	d106      	bne.n	810c354 <etharp_output+0x24>
 810c346:	4b73      	ldr	r3, [pc, #460]	@ (810c514 <etharp_output+0x1e4>)
 810c348:	f240 321e 	movw	r2, #798	@ 0x31e
 810c34c:	4972      	ldr	r1, [pc, #456]	@ (810c518 <etharp_output+0x1e8>)
 810c34e:	4873      	ldr	r0, [pc, #460]	@ (810c51c <etharp_output+0x1ec>)
 810c350:	f00a faca 	bl	81168e8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 810c354:	68bb      	ldr	r3, [r7, #8]
 810c356:	2b00      	cmp	r3, #0
 810c358:	d106      	bne.n	810c368 <etharp_output+0x38>
 810c35a:	4b6e      	ldr	r3, [pc, #440]	@ (810c514 <etharp_output+0x1e4>)
 810c35c:	f240 321f 	movw	r2, #799	@ 0x31f
 810c360:	496f      	ldr	r1, [pc, #444]	@ (810c520 <etharp_output+0x1f0>)
 810c362:	486e      	ldr	r0, [pc, #440]	@ (810c51c <etharp_output+0x1ec>)
 810c364:	f00a fac0 	bl	81168e8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 810c368:	687b      	ldr	r3, [r7, #4]
 810c36a:	2b00      	cmp	r3, #0
 810c36c:	d106      	bne.n	810c37c <etharp_output+0x4c>
 810c36e:	4b69      	ldr	r3, [pc, #420]	@ (810c514 <etharp_output+0x1e4>)
 810c370:	f44f 7248 	mov.w	r2, #800	@ 0x320
 810c374:	496b      	ldr	r1, [pc, #428]	@ (810c524 <etharp_output+0x1f4>)
 810c376:	4869      	ldr	r0, [pc, #420]	@ (810c51c <etharp_output+0x1ec>)
 810c378:	f00a fab6 	bl	81168e8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 810c37c:	687b      	ldr	r3, [r7, #4]
 810c37e:	681b      	ldr	r3, [r3, #0]
 810c380:	68f9      	ldr	r1, [r7, #12]
 810c382:	4618      	mov	r0, r3
 810c384:	f001 f8c8 	bl	810d518 <ip4_addr_isbroadcast_u32>
 810c388:	4603      	mov	r3, r0
 810c38a:	2b00      	cmp	r3, #0
 810c38c:	d002      	beq.n	810c394 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 810c38e:	4b66      	ldr	r3, [pc, #408]	@ (810c528 <etharp_output+0x1f8>)
 810c390:	61fb      	str	r3, [r7, #28]
 810c392:	e0af      	b.n	810c4f4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 810c394:	687b      	ldr	r3, [r7, #4]
 810c396:	681b      	ldr	r3, [r3, #0]
 810c398:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 810c39c:	2be0      	cmp	r3, #224	@ 0xe0
 810c39e:	d118      	bne.n	810c3d2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 810c3a0:	2301      	movs	r3, #1
 810c3a2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 810c3a4:	2300      	movs	r3, #0
 810c3a6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 810c3a8:	235e      	movs	r3, #94	@ 0x5e
 810c3aa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 810c3ac:	687b      	ldr	r3, [r7, #4]
 810c3ae:	3301      	adds	r3, #1
 810c3b0:	781b      	ldrb	r3, [r3, #0]
 810c3b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c3b6:	b2db      	uxtb	r3, r3
 810c3b8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 810c3ba:	687b      	ldr	r3, [r7, #4]
 810c3bc:	3302      	adds	r3, #2
 810c3be:	781b      	ldrb	r3, [r3, #0]
 810c3c0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 810c3c2:	687b      	ldr	r3, [r7, #4]
 810c3c4:	3303      	adds	r3, #3
 810c3c6:	781b      	ldrb	r3, [r3, #0]
 810c3c8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 810c3ca:	f107 0310 	add.w	r3, r7, #16
 810c3ce:	61fb      	str	r3, [r7, #28]
 810c3d0:	e090      	b.n	810c4f4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 810c3d2:	687b      	ldr	r3, [r7, #4]
 810c3d4:	681a      	ldr	r2, [r3, #0]
 810c3d6:	68fb      	ldr	r3, [r7, #12]
 810c3d8:	3304      	adds	r3, #4
 810c3da:	681b      	ldr	r3, [r3, #0]
 810c3dc:	405a      	eors	r2, r3
 810c3de:	68fb      	ldr	r3, [r7, #12]
 810c3e0:	3308      	adds	r3, #8
 810c3e2:	681b      	ldr	r3, [r3, #0]
 810c3e4:	4013      	ands	r3, r2
 810c3e6:	2b00      	cmp	r3, #0
 810c3e8:	d012      	beq.n	810c410 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 810c3ea:	687b      	ldr	r3, [r7, #4]
 810c3ec:	681b      	ldr	r3, [r3, #0]
 810c3ee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 810c3f0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 810c3f4:	4293      	cmp	r3, r2
 810c3f6:	d00b      	beq.n	810c410 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 810c3f8:	68fb      	ldr	r3, [r7, #12]
 810c3fa:	330c      	adds	r3, #12
 810c3fc:	681b      	ldr	r3, [r3, #0]
 810c3fe:	2b00      	cmp	r3, #0
 810c400:	d003      	beq.n	810c40a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 810c402:	68fb      	ldr	r3, [r7, #12]
 810c404:	330c      	adds	r3, #12
 810c406:	61bb      	str	r3, [r7, #24]
 810c408:	e002      	b.n	810c410 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 810c40a:	f06f 0303 	mvn.w	r3, #3
 810c40e:	e07d      	b.n	810c50c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 810c410:	4b46      	ldr	r3, [pc, #280]	@ (810c52c <etharp_output+0x1fc>)
 810c412:	781b      	ldrb	r3, [r3, #0]
 810c414:	4619      	mov	r1, r3
 810c416:	4a46      	ldr	r2, [pc, #280]	@ (810c530 <etharp_output+0x200>)
 810c418:	460b      	mov	r3, r1
 810c41a:	005b      	lsls	r3, r3, #1
 810c41c:	440b      	add	r3, r1
 810c41e:	00db      	lsls	r3, r3, #3
 810c420:	4413      	add	r3, r2
 810c422:	3314      	adds	r3, #20
 810c424:	781b      	ldrb	r3, [r3, #0]
 810c426:	2b01      	cmp	r3, #1
 810c428:	d925      	bls.n	810c476 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 810c42a:	4b40      	ldr	r3, [pc, #256]	@ (810c52c <etharp_output+0x1fc>)
 810c42c:	781b      	ldrb	r3, [r3, #0]
 810c42e:	4619      	mov	r1, r3
 810c430:	4a3f      	ldr	r2, [pc, #252]	@ (810c530 <etharp_output+0x200>)
 810c432:	460b      	mov	r3, r1
 810c434:	005b      	lsls	r3, r3, #1
 810c436:	440b      	add	r3, r1
 810c438:	00db      	lsls	r3, r3, #3
 810c43a:	4413      	add	r3, r2
 810c43c:	3308      	adds	r3, #8
 810c43e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 810c440:	68fa      	ldr	r2, [r7, #12]
 810c442:	429a      	cmp	r2, r3
 810c444:	d117      	bne.n	810c476 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 810c446:	69bb      	ldr	r3, [r7, #24]
 810c448:	681a      	ldr	r2, [r3, #0]
 810c44a:	4b38      	ldr	r3, [pc, #224]	@ (810c52c <etharp_output+0x1fc>)
 810c44c:	781b      	ldrb	r3, [r3, #0]
 810c44e:	4618      	mov	r0, r3
 810c450:	4937      	ldr	r1, [pc, #220]	@ (810c530 <etharp_output+0x200>)
 810c452:	4603      	mov	r3, r0
 810c454:	005b      	lsls	r3, r3, #1
 810c456:	4403      	add	r3, r0
 810c458:	00db      	lsls	r3, r3, #3
 810c45a:	440b      	add	r3, r1
 810c45c:	3304      	adds	r3, #4
 810c45e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 810c460:	429a      	cmp	r2, r3
 810c462:	d108      	bne.n	810c476 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 810c464:	4b31      	ldr	r3, [pc, #196]	@ (810c52c <etharp_output+0x1fc>)
 810c466:	781b      	ldrb	r3, [r3, #0]
 810c468:	461a      	mov	r2, r3
 810c46a:	68b9      	ldr	r1, [r7, #8]
 810c46c:	68f8      	ldr	r0, [r7, #12]
 810c46e:	f7ff fec5 	bl	810c1fc <etharp_output_to_arp_index>
 810c472:	4603      	mov	r3, r0
 810c474:	e04a      	b.n	810c50c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 810c476:	2300      	movs	r3, #0
 810c478:	75fb      	strb	r3, [r7, #23]
 810c47a:	e031      	b.n	810c4e0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 810c47c:	7dfa      	ldrb	r2, [r7, #23]
 810c47e:	492c      	ldr	r1, [pc, #176]	@ (810c530 <etharp_output+0x200>)
 810c480:	4613      	mov	r3, r2
 810c482:	005b      	lsls	r3, r3, #1
 810c484:	4413      	add	r3, r2
 810c486:	00db      	lsls	r3, r3, #3
 810c488:	440b      	add	r3, r1
 810c48a:	3314      	adds	r3, #20
 810c48c:	781b      	ldrb	r3, [r3, #0]
 810c48e:	2b01      	cmp	r3, #1
 810c490:	d923      	bls.n	810c4da <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 810c492:	7dfa      	ldrb	r2, [r7, #23]
 810c494:	4926      	ldr	r1, [pc, #152]	@ (810c530 <etharp_output+0x200>)
 810c496:	4613      	mov	r3, r2
 810c498:	005b      	lsls	r3, r3, #1
 810c49a:	4413      	add	r3, r2
 810c49c:	00db      	lsls	r3, r3, #3
 810c49e:	440b      	add	r3, r1
 810c4a0:	3308      	adds	r3, #8
 810c4a2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 810c4a4:	68fa      	ldr	r2, [r7, #12]
 810c4a6:	429a      	cmp	r2, r3
 810c4a8:	d117      	bne.n	810c4da <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 810c4aa:	69bb      	ldr	r3, [r7, #24]
 810c4ac:	6819      	ldr	r1, [r3, #0]
 810c4ae:	7dfa      	ldrb	r2, [r7, #23]
 810c4b0:	481f      	ldr	r0, [pc, #124]	@ (810c530 <etharp_output+0x200>)
 810c4b2:	4613      	mov	r3, r2
 810c4b4:	005b      	lsls	r3, r3, #1
 810c4b6:	4413      	add	r3, r2
 810c4b8:	00db      	lsls	r3, r3, #3
 810c4ba:	4403      	add	r3, r0
 810c4bc:	3304      	adds	r3, #4
 810c4be:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 810c4c0:	4299      	cmp	r1, r3
 810c4c2:	d10a      	bne.n	810c4da <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 810c4c4:	4a19      	ldr	r2, [pc, #100]	@ (810c52c <etharp_output+0x1fc>)
 810c4c6:	7dfb      	ldrb	r3, [r7, #23]
 810c4c8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 810c4ca:	7dfb      	ldrb	r3, [r7, #23]
 810c4cc:	461a      	mov	r2, r3
 810c4ce:	68b9      	ldr	r1, [r7, #8]
 810c4d0:	68f8      	ldr	r0, [r7, #12]
 810c4d2:	f7ff fe93 	bl	810c1fc <etharp_output_to_arp_index>
 810c4d6:	4603      	mov	r3, r0
 810c4d8:	e018      	b.n	810c50c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 810c4da:	7dfb      	ldrb	r3, [r7, #23]
 810c4dc:	3301      	adds	r3, #1
 810c4de:	75fb      	strb	r3, [r7, #23]
 810c4e0:	7dfb      	ldrb	r3, [r7, #23]
 810c4e2:	2b09      	cmp	r3, #9
 810c4e4:	d9ca      	bls.n	810c47c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 810c4e6:	68ba      	ldr	r2, [r7, #8]
 810c4e8:	69b9      	ldr	r1, [r7, #24]
 810c4ea:	68f8      	ldr	r0, [r7, #12]
 810c4ec:	f000 f822 	bl	810c534 <etharp_query>
 810c4f0:	4603      	mov	r3, r0
 810c4f2:	e00b      	b.n	810c50c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 810c4f4:	68fb      	ldr	r3, [r7, #12]
 810c4f6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 810c4fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810c4fe:	9300      	str	r3, [sp, #0]
 810c500:	69fb      	ldr	r3, [r7, #28]
 810c502:	68b9      	ldr	r1, [r7, #8]
 810c504:	68f8      	ldr	r0, [r7, #12]
 810c506:	f000 faa1 	bl	810ca4c <ethernet_output>
 810c50a:	4603      	mov	r3, r0
}
 810c50c:	4618      	mov	r0, r3
 810c50e:	3720      	adds	r7, #32
 810c510:	46bd      	mov	sp, r7
 810c512:	bd80      	pop	{r7, pc}
 810c514:	0811779c 	.word	0x0811779c
 810c518:	0811792c 	.word	0x0811792c
 810c51c:	08117854 	.word	0x08117854
 810c520:	0811797c 	.word	0x0811797c
 810c524:	0811791c 	.word	0x0811791c
 810c528:	0811a660 	.word	0x0811a660
 810c52c:	10004d78 	.word	0x10004d78
 810c530:	10004c88 	.word	0x10004c88

0810c534 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 810c534:	b580      	push	{r7, lr}
 810c536:	b08c      	sub	sp, #48	@ 0x30
 810c538:	af02      	add	r7, sp, #8
 810c53a:	60f8      	str	r0, [r7, #12]
 810c53c:	60b9      	str	r1, [r7, #8]
 810c53e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 810c540:	68fb      	ldr	r3, [r7, #12]
 810c542:	3326      	adds	r3, #38	@ 0x26
 810c544:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 810c546:	23ff      	movs	r3, #255	@ 0xff
 810c548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 810c54c:	2300      	movs	r3, #0
 810c54e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 810c550:	68bb      	ldr	r3, [r7, #8]
 810c552:	681b      	ldr	r3, [r3, #0]
 810c554:	68f9      	ldr	r1, [r7, #12]
 810c556:	4618      	mov	r0, r3
 810c558:	f000 ffde 	bl	810d518 <ip4_addr_isbroadcast_u32>
 810c55c:	4603      	mov	r3, r0
 810c55e:	2b00      	cmp	r3, #0
 810c560:	d10c      	bne.n	810c57c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 810c562:	68bb      	ldr	r3, [r7, #8]
 810c564:	681b      	ldr	r3, [r3, #0]
 810c566:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 810c56a:	2be0      	cmp	r3, #224	@ 0xe0
 810c56c:	d006      	beq.n	810c57c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 810c56e:	68bb      	ldr	r3, [r7, #8]
 810c570:	2b00      	cmp	r3, #0
 810c572:	d003      	beq.n	810c57c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 810c574:	68bb      	ldr	r3, [r7, #8]
 810c576:	681b      	ldr	r3, [r3, #0]
 810c578:	2b00      	cmp	r3, #0
 810c57a:	d102      	bne.n	810c582 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 810c57c:	f06f 030f 	mvn.w	r3, #15
 810c580:	e101      	b.n	810c786 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 810c582:	68fa      	ldr	r2, [r7, #12]
 810c584:	2101      	movs	r1, #1
 810c586:	68b8      	ldr	r0, [r7, #8]
 810c588:	f7ff fb60 	bl	810bc4c <etharp_find_entry>
 810c58c:	4603      	mov	r3, r0
 810c58e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 810c590:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 810c594:	2b00      	cmp	r3, #0
 810c596:	da02      	bge.n	810c59e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 810c598:	8a7b      	ldrh	r3, [r7, #18]
 810c59a:	b25b      	sxtb	r3, r3
 810c59c:	e0f3      	b.n	810c786 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 810c59e:	8a7b      	ldrh	r3, [r7, #18]
 810c5a0:	2b7e      	cmp	r3, #126	@ 0x7e
 810c5a2:	d906      	bls.n	810c5b2 <etharp_query+0x7e>
 810c5a4:	4b7a      	ldr	r3, [pc, #488]	@ (810c790 <etharp_query+0x25c>)
 810c5a6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 810c5aa:	497a      	ldr	r1, [pc, #488]	@ (810c794 <etharp_query+0x260>)
 810c5ac:	487a      	ldr	r0, [pc, #488]	@ (810c798 <etharp_query+0x264>)
 810c5ae:	f00a f99b 	bl	81168e8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 810c5b2:	8a7b      	ldrh	r3, [r7, #18]
 810c5b4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 810c5b6:	7c7a      	ldrb	r2, [r7, #17]
 810c5b8:	4978      	ldr	r1, [pc, #480]	@ (810c79c <etharp_query+0x268>)
 810c5ba:	4613      	mov	r3, r2
 810c5bc:	005b      	lsls	r3, r3, #1
 810c5be:	4413      	add	r3, r2
 810c5c0:	00db      	lsls	r3, r3, #3
 810c5c2:	440b      	add	r3, r1
 810c5c4:	3314      	adds	r3, #20
 810c5c6:	781b      	ldrb	r3, [r3, #0]
 810c5c8:	2b00      	cmp	r3, #0
 810c5ca:	d115      	bne.n	810c5f8 <etharp_query+0xc4>
    is_new_entry = 1;
 810c5cc:	2301      	movs	r3, #1
 810c5ce:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 810c5d0:	7c7a      	ldrb	r2, [r7, #17]
 810c5d2:	4972      	ldr	r1, [pc, #456]	@ (810c79c <etharp_query+0x268>)
 810c5d4:	4613      	mov	r3, r2
 810c5d6:	005b      	lsls	r3, r3, #1
 810c5d8:	4413      	add	r3, r2
 810c5da:	00db      	lsls	r3, r3, #3
 810c5dc:	440b      	add	r3, r1
 810c5de:	3314      	adds	r3, #20
 810c5e0:	2201      	movs	r2, #1
 810c5e2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 810c5e4:	7c7a      	ldrb	r2, [r7, #17]
 810c5e6:	496d      	ldr	r1, [pc, #436]	@ (810c79c <etharp_query+0x268>)
 810c5e8:	4613      	mov	r3, r2
 810c5ea:	005b      	lsls	r3, r3, #1
 810c5ec:	4413      	add	r3, r2
 810c5ee:	00db      	lsls	r3, r3, #3
 810c5f0:	440b      	add	r3, r1
 810c5f2:	3308      	adds	r3, #8
 810c5f4:	68fa      	ldr	r2, [r7, #12]
 810c5f6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 810c5f8:	7c7a      	ldrb	r2, [r7, #17]
 810c5fa:	4968      	ldr	r1, [pc, #416]	@ (810c79c <etharp_query+0x268>)
 810c5fc:	4613      	mov	r3, r2
 810c5fe:	005b      	lsls	r3, r3, #1
 810c600:	4413      	add	r3, r2
 810c602:	00db      	lsls	r3, r3, #3
 810c604:	440b      	add	r3, r1
 810c606:	3314      	adds	r3, #20
 810c608:	781b      	ldrb	r3, [r3, #0]
 810c60a:	2b01      	cmp	r3, #1
 810c60c:	d011      	beq.n	810c632 <etharp_query+0xfe>
 810c60e:	7c7a      	ldrb	r2, [r7, #17]
 810c610:	4962      	ldr	r1, [pc, #392]	@ (810c79c <etharp_query+0x268>)
 810c612:	4613      	mov	r3, r2
 810c614:	005b      	lsls	r3, r3, #1
 810c616:	4413      	add	r3, r2
 810c618:	00db      	lsls	r3, r3, #3
 810c61a:	440b      	add	r3, r1
 810c61c:	3314      	adds	r3, #20
 810c61e:	781b      	ldrb	r3, [r3, #0]
 810c620:	2b01      	cmp	r3, #1
 810c622:	d806      	bhi.n	810c632 <etharp_query+0xfe>
 810c624:	4b5a      	ldr	r3, [pc, #360]	@ (810c790 <etharp_query+0x25c>)
 810c626:	f240 32cd 	movw	r2, #973	@ 0x3cd
 810c62a:	495d      	ldr	r1, [pc, #372]	@ (810c7a0 <etharp_query+0x26c>)
 810c62c:	485a      	ldr	r0, [pc, #360]	@ (810c798 <etharp_query+0x264>)
 810c62e:	f00a f95b 	bl	81168e8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 810c632:	6a3b      	ldr	r3, [r7, #32]
 810c634:	2b00      	cmp	r3, #0
 810c636:	d102      	bne.n	810c63e <etharp_query+0x10a>
 810c638:	687b      	ldr	r3, [r7, #4]
 810c63a:	2b00      	cmp	r3, #0
 810c63c:	d10c      	bne.n	810c658 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 810c63e:	68b9      	ldr	r1, [r7, #8]
 810c640:	68f8      	ldr	r0, [r7, #12]
 810c642:	f000 f963 	bl	810c90c <etharp_request>
 810c646:	4603      	mov	r3, r0
 810c648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 810c64c:	687b      	ldr	r3, [r7, #4]
 810c64e:	2b00      	cmp	r3, #0
 810c650:	d102      	bne.n	810c658 <etharp_query+0x124>
      return result;
 810c652:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 810c656:	e096      	b.n	810c786 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 810c658:	687b      	ldr	r3, [r7, #4]
 810c65a:	2b00      	cmp	r3, #0
 810c65c:	d106      	bne.n	810c66c <etharp_query+0x138>
 810c65e:	4b4c      	ldr	r3, [pc, #304]	@ (810c790 <etharp_query+0x25c>)
 810c660:	f240 32e1 	movw	r2, #993	@ 0x3e1
 810c664:	494f      	ldr	r1, [pc, #316]	@ (810c7a4 <etharp_query+0x270>)
 810c666:	484c      	ldr	r0, [pc, #304]	@ (810c798 <etharp_query+0x264>)
 810c668:	f00a f93e 	bl	81168e8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 810c66c:	7c7a      	ldrb	r2, [r7, #17]
 810c66e:	494b      	ldr	r1, [pc, #300]	@ (810c79c <etharp_query+0x268>)
 810c670:	4613      	mov	r3, r2
 810c672:	005b      	lsls	r3, r3, #1
 810c674:	4413      	add	r3, r2
 810c676:	00db      	lsls	r3, r3, #3
 810c678:	440b      	add	r3, r1
 810c67a:	3314      	adds	r3, #20
 810c67c:	781b      	ldrb	r3, [r3, #0]
 810c67e:	2b01      	cmp	r3, #1
 810c680:	d917      	bls.n	810c6b2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 810c682:	4a49      	ldr	r2, [pc, #292]	@ (810c7a8 <etharp_query+0x274>)
 810c684:	7c7b      	ldrb	r3, [r7, #17]
 810c686:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 810c688:	7c7a      	ldrb	r2, [r7, #17]
 810c68a:	4613      	mov	r3, r2
 810c68c:	005b      	lsls	r3, r3, #1
 810c68e:	4413      	add	r3, r2
 810c690:	00db      	lsls	r3, r3, #3
 810c692:	3308      	adds	r3, #8
 810c694:	4a41      	ldr	r2, [pc, #260]	@ (810c79c <etharp_query+0x268>)
 810c696:	4413      	add	r3, r2
 810c698:	3304      	adds	r3, #4
 810c69a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810c69e:	9200      	str	r2, [sp, #0]
 810c6a0:	697a      	ldr	r2, [r7, #20]
 810c6a2:	6879      	ldr	r1, [r7, #4]
 810c6a4:	68f8      	ldr	r0, [r7, #12]
 810c6a6:	f000 f9d1 	bl	810ca4c <ethernet_output>
 810c6aa:	4603      	mov	r3, r0
 810c6ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 810c6b0:	e067      	b.n	810c782 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 810c6b2:	7c7a      	ldrb	r2, [r7, #17]
 810c6b4:	4939      	ldr	r1, [pc, #228]	@ (810c79c <etharp_query+0x268>)
 810c6b6:	4613      	mov	r3, r2
 810c6b8:	005b      	lsls	r3, r3, #1
 810c6ba:	4413      	add	r3, r2
 810c6bc:	00db      	lsls	r3, r3, #3
 810c6be:	440b      	add	r3, r1
 810c6c0:	3314      	adds	r3, #20
 810c6c2:	781b      	ldrb	r3, [r3, #0]
 810c6c4:	2b01      	cmp	r3, #1
 810c6c6:	d15c      	bne.n	810c782 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 810c6c8:	2300      	movs	r3, #0
 810c6ca:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 810c6cc:	687b      	ldr	r3, [r7, #4]
 810c6ce:	61fb      	str	r3, [r7, #28]
    while (p) {
 810c6d0:	e01c      	b.n	810c70c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 810c6d2:	69fb      	ldr	r3, [r7, #28]
 810c6d4:	895a      	ldrh	r2, [r3, #10]
 810c6d6:	69fb      	ldr	r3, [r7, #28]
 810c6d8:	891b      	ldrh	r3, [r3, #8]
 810c6da:	429a      	cmp	r2, r3
 810c6dc:	d10a      	bne.n	810c6f4 <etharp_query+0x1c0>
 810c6de:	69fb      	ldr	r3, [r7, #28]
 810c6e0:	681b      	ldr	r3, [r3, #0]
 810c6e2:	2b00      	cmp	r3, #0
 810c6e4:	d006      	beq.n	810c6f4 <etharp_query+0x1c0>
 810c6e6:	4b2a      	ldr	r3, [pc, #168]	@ (810c790 <etharp_query+0x25c>)
 810c6e8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 810c6ec:	492f      	ldr	r1, [pc, #188]	@ (810c7ac <etharp_query+0x278>)
 810c6ee:	482a      	ldr	r0, [pc, #168]	@ (810c798 <etharp_query+0x264>)
 810c6f0:	f00a f8fa 	bl	81168e8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 810c6f4:	69fb      	ldr	r3, [r7, #28]
 810c6f6:	7b1b      	ldrb	r3, [r3, #12]
 810c6f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810c6fc:	2b00      	cmp	r3, #0
 810c6fe:	d002      	beq.n	810c706 <etharp_query+0x1d2>
        copy_needed = 1;
 810c700:	2301      	movs	r3, #1
 810c702:	61bb      	str	r3, [r7, #24]
        break;
 810c704:	e005      	b.n	810c712 <etharp_query+0x1de>
      }
      p = p->next;
 810c706:	69fb      	ldr	r3, [r7, #28]
 810c708:	681b      	ldr	r3, [r3, #0]
 810c70a:	61fb      	str	r3, [r7, #28]
    while (p) {
 810c70c:	69fb      	ldr	r3, [r7, #28]
 810c70e:	2b00      	cmp	r3, #0
 810c710:	d1df      	bne.n	810c6d2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 810c712:	69bb      	ldr	r3, [r7, #24]
 810c714:	2b00      	cmp	r3, #0
 810c716:	d007      	beq.n	810c728 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 810c718:	687a      	ldr	r2, [r7, #4]
 810c71a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 810c71e:	200e      	movs	r0, #14
 810c720:	f003 fbae 	bl	810fe80 <pbuf_clone>
 810c724:	61f8      	str	r0, [r7, #28]
 810c726:	e004      	b.n	810c732 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 810c728:	687b      	ldr	r3, [r7, #4]
 810c72a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 810c72c:	69f8      	ldr	r0, [r7, #28]
 810c72e:	f003 f9d5 	bl	810fadc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 810c732:	69fb      	ldr	r3, [r7, #28]
 810c734:	2b00      	cmp	r3, #0
 810c736:	d021      	beq.n	810c77c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 810c738:	7c7a      	ldrb	r2, [r7, #17]
 810c73a:	4918      	ldr	r1, [pc, #96]	@ (810c79c <etharp_query+0x268>)
 810c73c:	4613      	mov	r3, r2
 810c73e:	005b      	lsls	r3, r3, #1
 810c740:	4413      	add	r3, r2
 810c742:	00db      	lsls	r3, r3, #3
 810c744:	440b      	add	r3, r1
 810c746:	681b      	ldr	r3, [r3, #0]
 810c748:	2b00      	cmp	r3, #0
 810c74a:	d00a      	beq.n	810c762 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 810c74c:	7c7a      	ldrb	r2, [r7, #17]
 810c74e:	4913      	ldr	r1, [pc, #76]	@ (810c79c <etharp_query+0x268>)
 810c750:	4613      	mov	r3, r2
 810c752:	005b      	lsls	r3, r3, #1
 810c754:	4413      	add	r3, r2
 810c756:	00db      	lsls	r3, r3, #3
 810c758:	440b      	add	r3, r1
 810c75a:	681b      	ldr	r3, [r3, #0]
 810c75c:	4618      	mov	r0, r3
 810c75e:	f003 f917 	bl	810f990 <pbuf_free>
      }
      arp_table[i].q = p;
 810c762:	7c7a      	ldrb	r2, [r7, #17]
 810c764:	490d      	ldr	r1, [pc, #52]	@ (810c79c <etharp_query+0x268>)
 810c766:	4613      	mov	r3, r2
 810c768:	005b      	lsls	r3, r3, #1
 810c76a:	4413      	add	r3, r2
 810c76c:	00db      	lsls	r3, r3, #3
 810c76e:	440b      	add	r3, r1
 810c770:	69fa      	ldr	r2, [r7, #28]
 810c772:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 810c774:	2300      	movs	r3, #0
 810c776:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 810c77a:	e002      	b.n	810c782 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 810c77c:	23ff      	movs	r3, #255	@ 0xff
 810c77e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 810c782:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 810c786:	4618      	mov	r0, r3
 810c788:	3728      	adds	r7, #40	@ 0x28
 810c78a:	46bd      	mov	sp, r7
 810c78c:	bd80      	pop	{r7, pc}
 810c78e:	bf00      	nop
 810c790:	0811779c 	.word	0x0811779c
 810c794:	08117988 	.word	0x08117988
 810c798:	08117854 	.word	0x08117854
 810c79c:	10004c88 	.word	0x10004c88
 810c7a0:	08117998 	.word	0x08117998
 810c7a4:	0811797c 	.word	0x0811797c
 810c7a8:	10004d78 	.word	0x10004d78
 810c7ac:	081179c0 	.word	0x081179c0

0810c7b0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 810c7b0:	b580      	push	{r7, lr}
 810c7b2:	b08a      	sub	sp, #40	@ 0x28
 810c7b4:	af02      	add	r7, sp, #8
 810c7b6:	60f8      	str	r0, [r7, #12]
 810c7b8:	60b9      	str	r1, [r7, #8]
 810c7ba:	607a      	str	r2, [r7, #4]
 810c7bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 810c7be:	2300      	movs	r3, #0
 810c7c0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 810c7c2:	68fb      	ldr	r3, [r7, #12]
 810c7c4:	2b00      	cmp	r3, #0
 810c7c6:	d106      	bne.n	810c7d6 <etharp_raw+0x26>
 810c7c8:	4b3a      	ldr	r3, [pc, #232]	@ (810c8b4 <etharp_raw+0x104>)
 810c7ca:	f240 4257 	movw	r2, #1111	@ 0x457
 810c7ce:	493a      	ldr	r1, [pc, #232]	@ (810c8b8 <etharp_raw+0x108>)
 810c7d0:	483a      	ldr	r0, [pc, #232]	@ (810c8bc <etharp_raw+0x10c>)
 810c7d2:	f00a f889 	bl	81168e8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 810c7d6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 810c7da:	211c      	movs	r1, #28
 810c7dc:	200e      	movs	r0, #14
 810c7de:	f002 fdef 	bl	810f3c0 <pbuf_alloc>
 810c7e2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 810c7e4:	69bb      	ldr	r3, [r7, #24]
 810c7e6:	2b00      	cmp	r3, #0
 810c7e8:	d102      	bne.n	810c7f0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 810c7ea:	f04f 33ff 	mov.w	r3, #4294967295
 810c7ee:	e05d      	b.n	810c8ac <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 810c7f0:	69bb      	ldr	r3, [r7, #24]
 810c7f2:	895b      	ldrh	r3, [r3, #10]
 810c7f4:	2b1b      	cmp	r3, #27
 810c7f6:	d806      	bhi.n	810c806 <etharp_raw+0x56>
 810c7f8:	4b2e      	ldr	r3, [pc, #184]	@ (810c8b4 <etharp_raw+0x104>)
 810c7fa:	f240 4262 	movw	r2, #1122	@ 0x462
 810c7fe:	4930      	ldr	r1, [pc, #192]	@ (810c8c0 <etharp_raw+0x110>)
 810c800:	482e      	ldr	r0, [pc, #184]	@ (810c8bc <etharp_raw+0x10c>)
 810c802:	f00a f871 	bl	81168e8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 810c806:	69bb      	ldr	r3, [r7, #24]
 810c808:	685b      	ldr	r3, [r3, #4]
 810c80a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 810c80c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 810c80e:	4618      	mov	r0, r3
 810c810:	f7ff f914 	bl	810ba3c <lwip_htons>
 810c814:	4603      	mov	r3, r0
 810c816:	461a      	mov	r2, r3
 810c818:	697b      	ldr	r3, [r7, #20]
 810c81a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 810c81c:	68fb      	ldr	r3, [r7, #12]
 810c81e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810c822:	2b06      	cmp	r3, #6
 810c824:	d006      	beq.n	810c834 <etharp_raw+0x84>
 810c826:	4b23      	ldr	r3, [pc, #140]	@ (810c8b4 <etharp_raw+0x104>)
 810c828:	f240 4269 	movw	r2, #1129	@ 0x469
 810c82c:	4925      	ldr	r1, [pc, #148]	@ (810c8c4 <etharp_raw+0x114>)
 810c82e:	4823      	ldr	r0, [pc, #140]	@ (810c8bc <etharp_raw+0x10c>)
 810c830:	f00a f85a 	bl	81168e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 810c834:	697b      	ldr	r3, [r7, #20]
 810c836:	3308      	adds	r3, #8
 810c838:	2206      	movs	r2, #6
 810c83a:	6839      	ldr	r1, [r7, #0]
 810c83c:	4618      	mov	r0, r3
 810c83e:	f00a f9f2 	bl	8116c26 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 810c842:	697b      	ldr	r3, [r7, #20]
 810c844:	3312      	adds	r3, #18
 810c846:	2206      	movs	r2, #6
 810c848:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810c84a:	4618      	mov	r0, r3
 810c84c:	f00a f9eb 	bl	8116c26 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 810c850:	697b      	ldr	r3, [r7, #20]
 810c852:	330e      	adds	r3, #14
 810c854:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810c856:	6812      	ldr	r2, [r2, #0]
 810c858:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 810c85a:	697b      	ldr	r3, [r7, #20]
 810c85c:	3318      	adds	r3, #24
 810c85e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c860:	6812      	ldr	r2, [r2, #0]
 810c862:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 810c864:	697b      	ldr	r3, [r7, #20]
 810c866:	2200      	movs	r2, #0
 810c868:	701a      	strb	r2, [r3, #0]
 810c86a:	2200      	movs	r2, #0
 810c86c:	f042 0201 	orr.w	r2, r2, #1
 810c870:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 810c872:	697b      	ldr	r3, [r7, #20]
 810c874:	2200      	movs	r2, #0
 810c876:	f042 0208 	orr.w	r2, r2, #8
 810c87a:	709a      	strb	r2, [r3, #2]
 810c87c:	2200      	movs	r2, #0
 810c87e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 810c880:	697b      	ldr	r3, [r7, #20]
 810c882:	2206      	movs	r2, #6
 810c884:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 810c886:	697b      	ldr	r3, [r7, #20]
 810c888:	2204      	movs	r2, #4
 810c88a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 810c88c:	f640 0306 	movw	r3, #2054	@ 0x806
 810c890:	9300      	str	r3, [sp, #0]
 810c892:	687b      	ldr	r3, [r7, #4]
 810c894:	68ba      	ldr	r2, [r7, #8]
 810c896:	69b9      	ldr	r1, [r7, #24]
 810c898:	68f8      	ldr	r0, [r7, #12]
 810c89a:	f000 f8d7 	bl	810ca4c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 810c89e:	69b8      	ldr	r0, [r7, #24]
 810c8a0:	f003 f876 	bl	810f990 <pbuf_free>
  p = NULL;
 810c8a4:	2300      	movs	r3, #0
 810c8a6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 810c8a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 810c8ac:	4618      	mov	r0, r3
 810c8ae:	3720      	adds	r7, #32
 810c8b0:	46bd      	mov	sp, r7
 810c8b2:	bd80      	pop	{r7, pc}
 810c8b4:	0811779c 	.word	0x0811779c
 810c8b8:	0811792c 	.word	0x0811792c
 810c8bc:	08117854 	.word	0x08117854
 810c8c0:	081179dc 	.word	0x081179dc
 810c8c4:	08117a10 	.word	0x08117a10

0810c8c8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 810c8c8:	b580      	push	{r7, lr}
 810c8ca:	b088      	sub	sp, #32
 810c8cc:	af04      	add	r7, sp, #16
 810c8ce:	60f8      	str	r0, [r7, #12]
 810c8d0:	60b9      	str	r1, [r7, #8]
 810c8d2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 810c8d4:	68fb      	ldr	r3, [r7, #12]
 810c8d6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 810c8da:	68fb      	ldr	r3, [r7, #12]
 810c8dc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 810c8e0:	68fb      	ldr	r3, [r7, #12]
 810c8e2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 810c8e4:	2201      	movs	r2, #1
 810c8e6:	9203      	str	r2, [sp, #12]
 810c8e8:	68ba      	ldr	r2, [r7, #8]
 810c8ea:	9202      	str	r2, [sp, #8]
 810c8ec:	4a06      	ldr	r2, [pc, #24]	@ (810c908 <etharp_request_dst+0x40>)
 810c8ee:	9201      	str	r2, [sp, #4]
 810c8f0:	9300      	str	r3, [sp, #0]
 810c8f2:	4603      	mov	r3, r0
 810c8f4:	687a      	ldr	r2, [r7, #4]
 810c8f6:	68f8      	ldr	r0, [r7, #12]
 810c8f8:	f7ff ff5a 	bl	810c7b0 <etharp_raw>
 810c8fc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 810c8fe:	4618      	mov	r0, r3
 810c900:	3710      	adds	r7, #16
 810c902:	46bd      	mov	sp, r7
 810c904:	bd80      	pop	{r7, pc}
 810c906:	bf00      	nop
 810c908:	0811a668 	.word	0x0811a668

0810c90c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 810c90c:	b580      	push	{r7, lr}
 810c90e:	b082      	sub	sp, #8
 810c910:	af00      	add	r7, sp, #0
 810c912:	6078      	str	r0, [r7, #4]
 810c914:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 810c916:	4a05      	ldr	r2, [pc, #20]	@ (810c92c <etharp_request+0x20>)
 810c918:	6839      	ldr	r1, [r7, #0]
 810c91a:	6878      	ldr	r0, [r7, #4]
 810c91c:	f7ff ffd4 	bl	810c8c8 <etharp_request_dst>
 810c920:	4603      	mov	r3, r0
}
 810c922:	4618      	mov	r0, r3
 810c924:	3708      	adds	r7, #8
 810c926:	46bd      	mov	sp, r7
 810c928:	bd80      	pop	{r7, pc}
 810c92a:	bf00      	nop
 810c92c:	0811a660 	.word	0x0811a660

0810c930 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 810c930:	b580      	push	{r7, lr}
 810c932:	b086      	sub	sp, #24
 810c934:	af00      	add	r7, sp, #0
 810c936:	6078      	str	r0, [r7, #4]
 810c938:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 810c93a:	230e      	movs	r3, #14
 810c93c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 810c93e:	687b      	ldr	r3, [r7, #4]
 810c940:	895b      	ldrh	r3, [r3, #10]
 810c942:	2b0e      	cmp	r3, #14
 810c944:	d96e      	bls.n	810ca24 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 810c946:	687b      	ldr	r3, [r7, #4]
 810c948:	7bdb      	ldrb	r3, [r3, #15]
 810c94a:	2b00      	cmp	r3, #0
 810c94c:	d106      	bne.n	810c95c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 810c94e:	683b      	ldr	r3, [r7, #0]
 810c950:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810c954:	3301      	adds	r3, #1
 810c956:	b2da      	uxtb	r2, r3
 810c958:	687b      	ldr	r3, [r7, #4]
 810c95a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 810c95c:	687b      	ldr	r3, [r7, #4]
 810c95e:	685b      	ldr	r3, [r3, #4]
 810c960:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 810c962:	693b      	ldr	r3, [r7, #16]
 810c964:	7b1a      	ldrb	r2, [r3, #12]
 810c966:	7b5b      	ldrb	r3, [r3, #13]
 810c968:	021b      	lsls	r3, r3, #8
 810c96a:	4313      	orrs	r3, r2
 810c96c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 810c96e:	693b      	ldr	r3, [r7, #16]
 810c970:	781b      	ldrb	r3, [r3, #0]
 810c972:	f003 0301 	and.w	r3, r3, #1
 810c976:	2b00      	cmp	r3, #0
 810c978:	d023      	beq.n	810c9c2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 810c97a:	693b      	ldr	r3, [r7, #16]
 810c97c:	781b      	ldrb	r3, [r3, #0]
 810c97e:	2b01      	cmp	r3, #1
 810c980:	d10f      	bne.n	810c9a2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 810c982:	693b      	ldr	r3, [r7, #16]
 810c984:	785b      	ldrb	r3, [r3, #1]
 810c986:	2b00      	cmp	r3, #0
 810c988:	d11b      	bne.n	810c9c2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 810c98a:	693b      	ldr	r3, [r7, #16]
 810c98c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 810c98e:	2b5e      	cmp	r3, #94	@ 0x5e
 810c990:	d117      	bne.n	810c9c2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 810c992:	687b      	ldr	r3, [r7, #4]
 810c994:	7b5b      	ldrb	r3, [r3, #13]
 810c996:	f043 0310 	orr.w	r3, r3, #16
 810c99a:	b2da      	uxtb	r2, r3
 810c99c:	687b      	ldr	r3, [r7, #4]
 810c99e:	735a      	strb	r2, [r3, #13]
 810c9a0:	e00f      	b.n	810c9c2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 810c9a2:	693b      	ldr	r3, [r7, #16]
 810c9a4:	2206      	movs	r2, #6
 810c9a6:	4928      	ldr	r1, [pc, #160]	@ (810ca48 <ethernet_input+0x118>)
 810c9a8:	4618      	mov	r0, r3
 810c9aa:	f009 fff2 	bl	8116992 <memcmp>
 810c9ae:	4603      	mov	r3, r0
 810c9b0:	2b00      	cmp	r3, #0
 810c9b2:	d106      	bne.n	810c9c2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 810c9b4:	687b      	ldr	r3, [r7, #4]
 810c9b6:	7b5b      	ldrb	r3, [r3, #13]
 810c9b8:	f043 0308 	orr.w	r3, r3, #8
 810c9bc:	b2da      	uxtb	r2, r3
 810c9be:	687b      	ldr	r3, [r7, #4]
 810c9c0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 810c9c2:	89fb      	ldrh	r3, [r7, #14]
 810c9c4:	2b08      	cmp	r3, #8
 810c9c6:	d003      	beq.n	810c9d0 <ethernet_input+0xa0>
 810c9c8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 810c9cc:	d014      	beq.n	810c9f8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 810c9ce:	e032      	b.n	810ca36 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 810c9d0:	683b      	ldr	r3, [r7, #0]
 810c9d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810c9d6:	f003 0308 	and.w	r3, r3, #8
 810c9da:	2b00      	cmp	r3, #0
 810c9dc:	d024      	beq.n	810ca28 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 810c9de:	8afb      	ldrh	r3, [r7, #22]
 810c9e0:	4619      	mov	r1, r3
 810c9e2:	6878      	ldr	r0, [r7, #4]
 810c9e4:	f002 ff4e 	bl	810f884 <pbuf_remove_header>
 810c9e8:	4603      	mov	r3, r0
 810c9ea:	2b00      	cmp	r3, #0
 810c9ec:	d11e      	bne.n	810ca2c <ethernet_input+0xfc>
        ip4_input(p, netif);
 810c9ee:	6839      	ldr	r1, [r7, #0]
 810c9f0:	6878      	ldr	r0, [r7, #4]
 810c9f2:	f000 fb95 	bl	810d120 <ip4_input>
      break;
 810c9f6:	e013      	b.n	810ca20 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 810c9f8:	683b      	ldr	r3, [r7, #0]
 810c9fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810c9fe:	f003 0308 	and.w	r3, r3, #8
 810ca02:	2b00      	cmp	r3, #0
 810ca04:	d014      	beq.n	810ca30 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 810ca06:	8afb      	ldrh	r3, [r7, #22]
 810ca08:	4619      	mov	r1, r3
 810ca0a:	6878      	ldr	r0, [r7, #4]
 810ca0c:	f002 ff3a 	bl	810f884 <pbuf_remove_header>
 810ca10:	4603      	mov	r3, r0
 810ca12:	2b00      	cmp	r3, #0
 810ca14:	d10e      	bne.n	810ca34 <ethernet_input+0x104>
        etharp_input(p, netif);
 810ca16:	6839      	ldr	r1, [r7, #0]
 810ca18:	6878      	ldr	r0, [r7, #4]
 810ca1a:	f7ff fb65 	bl	810c0e8 <etharp_input>
      break;
 810ca1e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 810ca20:	2300      	movs	r3, #0
 810ca22:	e00c      	b.n	810ca3e <ethernet_input+0x10e>
    goto free_and_return;
 810ca24:	bf00      	nop
 810ca26:	e006      	b.n	810ca36 <ethernet_input+0x106>
        goto free_and_return;
 810ca28:	bf00      	nop
 810ca2a:	e004      	b.n	810ca36 <ethernet_input+0x106>
        goto free_and_return;
 810ca2c:	bf00      	nop
 810ca2e:	e002      	b.n	810ca36 <ethernet_input+0x106>
        goto free_and_return;
 810ca30:	bf00      	nop
 810ca32:	e000      	b.n	810ca36 <ethernet_input+0x106>
        goto free_and_return;
 810ca34:	bf00      	nop

free_and_return:
  pbuf_free(p);
 810ca36:	6878      	ldr	r0, [r7, #4]
 810ca38:	f002 ffaa 	bl	810f990 <pbuf_free>
  return ERR_OK;
 810ca3c:	2300      	movs	r3, #0
}
 810ca3e:	4618      	mov	r0, r3
 810ca40:	3718      	adds	r7, #24
 810ca42:	46bd      	mov	sp, r7
 810ca44:	bd80      	pop	{r7, pc}
 810ca46:	bf00      	nop
 810ca48:	0811a660 	.word	0x0811a660

0810ca4c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 810ca4c:	b580      	push	{r7, lr}
 810ca4e:	b086      	sub	sp, #24
 810ca50:	af00      	add	r7, sp, #0
 810ca52:	60f8      	str	r0, [r7, #12]
 810ca54:	60b9      	str	r1, [r7, #8]
 810ca56:	607a      	str	r2, [r7, #4]
 810ca58:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 810ca5a:	8c3b      	ldrh	r3, [r7, #32]
 810ca5c:	4618      	mov	r0, r3
 810ca5e:	f7fe ffed 	bl	810ba3c <lwip_htons>
 810ca62:	4603      	mov	r3, r0
 810ca64:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 810ca66:	210e      	movs	r1, #14
 810ca68:	68b8      	ldr	r0, [r7, #8]
 810ca6a:	f002 fefb 	bl	810f864 <pbuf_add_header>
 810ca6e:	4603      	mov	r3, r0
 810ca70:	2b00      	cmp	r3, #0
 810ca72:	d125      	bne.n	810cac0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 810ca74:	68bb      	ldr	r3, [r7, #8]
 810ca76:	685b      	ldr	r3, [r3, #4]
 810ca78:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 810ca7a:	693b      	ldr	r3, [r7, #16]
 810ca7c:	8afa      	ldrh	r2, [r7, #22]
 810ca7e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 810ca80:	693b      	ldr	r3, [r7, #16]
 810ca82:	2206      	movs	r2, #6
 810ca84:	6839      	ldr	r1, [r7, #0]
 810ca86:	4618      	mov	r0, r3
 810ca88:	f00a f8cd 	bl	8116c26 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 810ca8c:	693b      	ldr	r3, [r7, #16]
 810ca8e:	3306      	adds	r3, #6
 810ca90:	2206      	movs	r2, #6
 810ca92:	6879      	ldr	r1, [r7, #4]
 810ca94:	4618      	mov	r0, r3
 810ca96:	f00a f8c6 	bl	8116c26 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 810ca9a:	68fb      	ldr	r3, [r7, #12]
 810ca9c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810caa0:	2b06      	cmp	r3, #6
 810caa2:	d006      	beq.n	810cab2 <ethernet_output+0x66>
 810caa4:	4b0a      	ldr	r3, [pc, #40]	@ (810cad0 <ethernet_output+0x84>)
 810caa6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 810caaa:	490a      	ldr	r1, [pc, #40]	@ (810cad4 <ethernet_output+0x88>)
 810caac:	480a      	ldr	r0, [pc, #40]	@ (810cad8 <ethernet_output+0x8c>)
 810caae:	f009 ff1b 	bl	81168e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 810cab2:	68fb      	ldr	r3, [r7, #12]
 810cab4:	699b      	ldr	r3, [r3, #24]
 810cab6:	68b9      	ldr	r1, [r7, #8]
 810cab8:	68f8      	ldr	r0, [r7, #12]
 810caba:	4798      	blx	r3
 810cabc:	4603      	mov	r3, r0
 810cabe:	e002      	b.n	810cac6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 810cac0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 810cac2:	f06f 0301 	mvn.w	r3, #1
}
 810cac6:	4618      	mov	r0, r3
 810cac8:	3718      	adds	r7, #24
 810caca:	46bd      	mov	sp, r7
 810cacc:	bd80      	pop	{r7, pc}
 810cace:	bf00      	nop
 810cad0:	08117a54 	.word	0x08117a54
 810cad4:	08117ac8 	.word	0x08117ac8
 810cad8:	08117afc 	.word	0x08117afc

0810cadc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 810cadc:	b580      	push	{r7, lr}
 810cade:	b08e      	sub	sp, #56	@ 0x38
 810cae0:	af04      	add	r7, sp, #16
 810cae2:	6078      	str	r0, [r7, #4]
 810cae4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 810cae6:	4b87      	ldr	r3, [pc, #540]	@ (810cd04 <icmp_input+0x228>)
 810cae8:	689b      	ldr	r3, [r3, #8]
 810caea:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 810caec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810caee:	781b      	ldrb	r3, [r3, #0]
 810caf0:	f003 030f 	and.w	r3, r3, #15
 810caf4:	b2db      	uxtb	r3, r3
 810caf6:	009b      	lsls	r3, r3, #2
 810caf8:	b2db      	uxtb	r3, r3
 810cafa:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 810cafc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810cafe:	2b13      	cmp	r3, #19
 810cb00:	f240 80e8 	bls.w	810ccd4 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 810cb04:	687b      	ldr	r3, [r7, #4]
 810cb06:	895b      	ldrh	r3, [r3, #10]
 810cb08:	2b03      	cmp	r3, #3
 810cb0a:	f240 80e5 	bls.w	810ccd8 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 810cb0e:	687b      	ldr	r3, [r7, #4]
 810cb10:	685b      	ldr	r3, [r3, #4]
 810cb12:	781b      	ldrb	r3, [r3, #0]
 810cb14:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 810cb18:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 810cb1c:	2b00      	cmp	r3, #0
 810cb1e:	f000 80d2 	beq.w	810ccc6 <icmp_input+0x1ea>
 810cb22:	2b08      	cmp	r3, #8
 810cb24:	f040 80d2 	bne.w	810cccc <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 810cb28:	4b77      	ldr	r3, [pc, #476]	@ (810cd08 <icmp_input+0x22c>)
 810cb2a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 810cb2c:	4b75      	ldr	r3, [pc, #468]	@ (810cd04 <icmp_input+0x228>)
 810cb2e:	695b      	ldr	r3, [r3, #20]
 810cb30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 810cb34:	2be0      	cmp	r3, #224	@ 0xe0
 810cb36:	f000 80d6 	beq.w	810cce6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 810cb3a:	4b72      	ldr	r3, [pc, #456]	@ (810cd04 <icmp_input+0x228>)
 810cb3c:	695b      	ldr	r3, [r3, #20]
 810cb3e:	4a71      	ldr	r2, [pc, #452]	@ (810cd04 <icmp_input+0x228>)
 810cb40:	6812      	ldr	r2, [r2, #0]
 810cb42:	4611      	mov	r1, r2
 810cb44:	4618      	mov	r0, r3
 810cb46:	f000 fce7 	bl	810d518 <ip4_addr_isbroadcast_u32>
 810cb4a:	4603      	mov	r3, r0
 810cb4c:	2b00      	cmp	r3, #0
 810cb4e:	f040 80cc 	bne.w	810ccea <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 810cb52:	687b      	ldr	r3, [r7, #4]
 810cb54:	891b      	ldrh	r3, [r3, #8]
 810cb56:	2b07      	cmp	r3, #7
 810cb58:	f240 80c0 	bls.w	810ccdc <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 810cb5c:	6878      	ldr	r0, [r7, #4]
 810cb5e:	f000 f9e0 	bl	810cf22 <inet_chksum_pbuf>
 810cb62:	4603      	mov	r3, r0
 810cb64:	2b00      	cmp	r3, #0
 810cb66:	d003      	beq.n	810cb70 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 810cb68:	6878      	ldr	r0, [r7, #4]
 810cb6a:	f002 ff11 	bl	810f990 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 810cb6e:	e0c5      	b.n	810ccfc <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 810cb70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810cb72:	330e      	adds	r3, #14
 810cb74:	4619      	mov	r1, r3
 810cb76:	6878      	ldr	r0, [r7, #4]
 810cb78:	f002 fe74 	bl	810f864 <pbuf_add_header>
 810cb7c:	4603      	mov	r3, r0
 810cb7e:	2b00      	cmp	r3, #0
 810cb80:	d04b      	beq.n	810cc1a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 810cb82:	687b      	ldr	r3, [r7, #4]
 810cb84:	891a      	ldrh	r2, [r3, #8]
 810cb86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810cb88:	4413      	add	r3, r2
 810cb8a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 810cb8c:	687b      	ldr	r3, [r7, #4]
 810cb8e:	891b      	ldrh	r3, [r3, #8]
 810cb90:	8b7a      	ldrh	r2, [r7, #26]
 810cb92:	429a      	cmp	r2, r3
 810cb94:	f0c0 80ab 	bcc.w	810ccee <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 810cb98:	8b7b      	ldrh	r3, [r7, #26]
 810cb9a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 810cb9e:	4619      	mov	r1, r3
 810cba0:	200e      	movs	r0, #14
 810cba2:	f002 fc0d 	bl	810f3c0 <pbuf_alloc>
 810cba6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 810cba8:	697b      	ldr	r3, [r7, #20]
 810cbaa:	2b00      	cmp	r3, #0
 810cbac:	f000 80a1 	beq.w	810ccf2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 810cbb0:	697b      	ldr	r3, [r7, #20]
 810cbb2:	895b      	ldrh	r3, [r3, #10]
 810cbb4:	461a      	mov	r2, r3
 810cbb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810cbb8:	3308      	adds	r3, #8
 810cbba:	429a      	cmp	r2, r3
 810cbbc:	d203      	bcs.n	810cbc6 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 810cbbe:	6978      	ldr	r0, [r7, #20]
 810cbc0:	f002 fee6 	bl	810f990 <pbuf_free>
          goto icmperr;
 810cbc4:	e096      	b.n	810ccf4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 810cbc6:	697b      	ldr	r3, [r7, #20]
 810cbc8:	685b      	ldr	r3, [r3, #4]
 810cbca:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 810cbcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810cbce:	4618      	mov	r0, r3
 810cbd0:	f00a f829 	bl	8116c26 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 810cbd4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810cbd6:	4619      	mov	r1, r3
 810cbd8:	6978      	ldr	r0, [r7, #20]
 810cbda:	f002 fe53 	bl	810f884 <pbuf_remove_header>
 810cbde:	4603      	mov	r3, r0
 810cbe0:	2b00      	cmp	r3, #0
 810cbe2:	d009      	beq.n	810cbf8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 810cbe4:	4b49      	ldr	r3, [pc, #292]	@ (810cd0c <icmp_input+0x230>)
 810cbe6:	22b6      	movs	r2, #182	@ 0xb6
 810cbe8:	4949      	ldr	r1, [pc, #292]	@ (810cd10 <icmp_input+0x234>)
 810cbea:	484a      	ldr	r0, [pc, #296]	@ (810cd14 <icmp_input+0x238>)
 810cbec:	f009 fe7c 	bl	81168e8 <iprintf>
          pbuf_free(r);
 810cbf0:	6978      	ldr	r0, [r7, #20]
 810cbf2:	f002 fecd 	bl	810f990 <pbuf_free>
          goto icmperr;
 810cbf6:	e07d      	b.n	810ccf4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 810cbf8:	6879      	ldr	r1, [r7, #4]
 810cbfa:	6978      	ldr	r0, [r7, #20]
 810cbfc:	f002 fffc 	bl	810fbf8 <pbuf_copy>
 810cc00:	4603      	mov	r3, r0
 810cc02:	2b00      	cmp	r3, #0
 810cc04:	d003      	beq.n	810cc0e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 810cc06:	6978      	ldr	r0, [r7, #20]
 810cc08:	f002 fec2 	bl	810f990 <pbuf_free>
          goto icmperr;
 810cc0c:	e072      	b.n	810ccf4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 810cc0e:	6878      	ldr	r0, [r7, #4]
 810cc10:	f002 febe 	bl	810f990 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 810cc14:	697b      	ldr	r3, [r7, #20]
 810cc16:	607b      	str	r3, [r7, #4]
 810cc18:	e00f      	b.n	810cc3a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 810cc1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810cc1c:	330e      	adds	r3, #14
 810cc1e:	4619      	mov	r1, r3
 810cc20:	6878      	ldr	r0, [r7, #4]
 810cc22:	f002 fe2f 	bl	810f884 <pbuf_remove_header>
 810cc26:	4603      	mov	r3, r0
 810cc28:	2b00      	cmp	r3, #0
 810cc2a:	d006      	beq.n	810cc3a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 810cc2c:	4b37      	ldr	r3, [pc, #220]	@ (810cd0c <icmp_input+0x230>)
 810cc2e:	22c7      	movs	r2, #199	@ 0xc7
 810cc30:	4939      	ldr	r1, [pc, #228]	@ (810cd18 <icmp_input+0x23c>)
 810cc32:	4838      	ldr	r0, [pc, #224]	@ (810cd14 <icmp_input+0x238>)
 810cc34:	f009 fe58 	bl	81168e8 <iprintf>
          goto icmperr;
 810cc38:	e05c      	b.n	810ccf4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 810cc3a:	687b      	ldr	r3, [r7, #4]
 810cc3c:	685b      	ldr	r3, [r3, #4]
 810cc3e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 810cc40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810cc42:	4619      	mov	r1, r3
 810cc44:	6878      	ldr	r0, [r7, #4]
 810cc46:	f002 fe0d 	bl	810f864 <pbuf_add_header>
 810cc4a:	4603      	mov	r3, r0
 810cc4c:	2b00      	cmp	r3, #0
 810cc4e:	d13c      	bne.n	810ccca <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 810cc50:	687b      	ldr	r3, [r7, #4]
 810cc52:	685b      	ldr	r3, [r3, #4]
 810cc54:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 810cc56:	69fb      	ldr	r3, [r7, #28]
 810cc58:	681a      	ldr	r2, [r3, #0]
 810cc5a:	68fb      	ldr	r3, [r7, #12]
 810cc5c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 810cc5e:	4b29      	ldr	r3, [pc, #164]	@ (810cd04 <icmp_input+0x228>)
 810cc60:	691a      	ldr	r2, [r3, #16]
 810cc62:	68fb      	ldr	r3, [r7, #12]
 810cc64:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 810cc66:	693b      	ldr	r3, [r7, #16]
 810cc68:	2200      	movs	r2, #0
 810cc6a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 810cc6c:	693b      	ldr	r3, [r7, #16]
 810cc6e:	885b      	ldrh	r3, [r3, #2]
 810cc70:	b29b      	uxth	r3, r3
 810cc72:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 810cc76:	4293      	cmp	r3, r2
 810cc78:	d907      	bls.n	810cc8a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 810cc7a:	693b      	ldr	r3, [r7, #16]
 810cc7c:	885b      	ldrh	r3, [r3, #2]
 810cc7e:	b29b      	uxth	r3, r3
 810cc80:	3309      	adds	r3, #9
 810cc82:	b29a      	uxth	r2, r3
 810cc84:	693b      	ldr	r3, [r7, #16]
 810cc86:	805a      	strh	r2, [r3, #2]
 810cc88:	e006      	b.n	810cc98 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 810cc8a:	693b      	ldr	r3, [r7, #16]
 810cc8c:	885b      	ldrh	r3, [r3, #2]
 810cc8e:	b29b      	uxth	r3, r3
 810cc90:	3308      	adds	r3, #8
 810cc92:	b29a      	uxth	r2, r3
 810cc94:	693b      	ldr	r3, [r7, #16]
 810cc96:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 810cc98:	68fb      	ldr	r3, [r7, #12]
 810cc9a:	22ff      	movs	r2, #255	@ 0xff
 810cc9c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 810cc9e:	68fb      	ldr	r3, [r7, #12]
 810cca0:	2200      	movs	r2, #0
 810cca2:	729a      	strb	r2, [r3, #10]
 810cca4:	2200      	movs	r2, #0
 810cca6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 810cca8:	683b      	ldr	r3, [r7, #0]
 810ccaa:	9302      	str	r3, [sp, #8]
 810ccac:	2301      	movs	r3, #1
 810ccae:	9301      	str	r3, [sp, #4]
 810ccb0:	2300      	movs	r3, #0
 810ccb2:	9300      	str	r3, [sp, #0]
 810ccb4:	23ff      	movs	r3, #255	@ 0xff
 810ccb6:	2200      	movs	r2, #0
 810ccb8:	69f9      	ldr	r1, [r7, #28]
 810ccba:	6878      	ldr	r0, [r7, #4]
 810ccbc:	f000 fb54 	bl	810d368 <ip4_output_if>
 810ccc0:	4603      	mov	r3, r0
 810ccc2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 810ccc4:	e001      	b.n	810ccca <icmp_input+0x1ee>
      break;
 810ccc6:	bf00      	nop
 810ccc8:	e000      	b.n	810cccc <icmp_input+0x1f0>
      break;
 810ccca:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 810cccc:	6878      	ldr	r0, [r7, #4]
 810ccce:	f002 fe5f 	bl	810f990 <pbuf_free>
  return;
 810ccd2:	e013      	b.n	810ccfc <icmp_input+0x220>
    goto lenerr;
 810ccd4:	bf00      	nop
 810ccd6:	e002      	b.n	810ccde <icmp_input+0x202>
    goto lenerr;
 810ccd8:	bf00      	nop
 810ccda:	e000      	b.n	810ccde <icmp_input+0x202>
        goto lenerr;
 810ccdc:	bf00      	nop
lenerr:
  pbuf_free(p);
 810ccde:	6878      	ldr	r0, [r7, #4]
 810cce0:	f002 fe56 	bl	810f990 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 810cce4:	e00a      	b.n	810ccfc <icmp_input+0x220>
        goto icmperr;
 810cce6:	bf00      	nop
 810cce8:	e004      	b.n	810ccf4 <icmp_input+0x218>
        goto icmperr;
 810ccea:	bf00      	nop
 810ccec:	e002      	b.n	810ccf4 <icmp_input+0x218>
          goto icmperr;
 810ccee:	bf00      	nop
 810ccf0:	e000      	b.n	810ccf4 <icmp_input+0x218>
          goto icmperr;
 810ccf2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 810ccf4:	6878      	ldr	r0, [r7, #4]
 810ccf6:	f002 fe4b 	bl	810f990 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 810ccfa:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 810ccfc:	3728      	adds	r7, #40	@ 0x28
 810ccfe:	46bd      	mov	sp, r7
 810cd00:	bd80      	pop	{r7, pc}
 810cd02:	bf00      	nop
 810cd04:	10004d7c 	.word	0x10004d7c
 810cd08:	10004d90 	.word	0x10004d90
 810cd0c:	08117b24 	.word	0x08117b24
 810cd10:	08117b98 	.word	0x08117b98
 810cd14:	08117bd0 	.word	0x08117bd0
 810cd18:	08117bf8 	.word	0x08117bf8

0810cd1c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 810cd1c:	b580      	push	{r7, lr}
 810cd1e:	b082      	sub	sp, #8
 810cd20:	af00      	add	r7, sp, #0
 810cd22:	6078      	str	r0, [r7, #4]
 810cd24:	460b      	mov	r3, r1
 810cd26:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 810cd28:	78fb      	ldrb	r3, [r7, #3]
 810cd2a:	461a      	mov	r2, r3
 810cd2c:	2103      	movs	r1, #3
 810cd2e:	6878      	ldr	r0, [r7, #4]
 810cd30:	f000 f814 	bl	810cd5c <icmp_send_response>
}
 810cd34:	bf00      	nop
 810cd36:	3708      	adds	r7, #8
 810cd38:	46bd      	mov	sp, r7
 810cd3a:	bd80      	pop	{r7, pc}

0810cd3c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 810cd3c:	b580      	push	{r7, lr}
 810cd3e:	b082      	sub	sp, #8
 810cd40:	af00      	add	r7, sp, #0
 810cd42:	6078      	str	r0, [r7, #4]
 810cd44:	460b      	mov	r3, r1
 810cd46:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 810cd48:	78fb      	ldrb	r3, [r7, #3]
 810cd4a:	461a      	mov	r2, r3
 810cd4c:	210b      	movs	r1, #11
 810cd4e:	6878      	ldr	r0, [r7, #4]
 810cd50:	f000 f804 	bl	810cd5c <icmp_send_response>
}
 810cd54:	bf00      	nop
 810cd56:	3708      	adds	r7, #8
 810cd58:	46bd      	mov	sp, r7
 810cd5a:	bd80      	pop	{r7, pc}

0810cd5c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 810cd5c:	b580      	push	{r7, lr}
 810cd5e:	b08c      	sub	sp, #48	@ 0x30
 810cd60:	af04      	add	r7, sp, #16
 810cd62:	6078      	str	r0, [r7, #4]
 810cd64:	460b      	mov	r3, r1
 810cd66:	70fb      	strb	r3, [r7, #3]
 810cd68:	4613      	mov	r3, r2
 810cd6a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 810cd6c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 810cd70:	2124      	movs	r1, #36	@ 0x24
 810cd72:	2022      	movs	r0, #34	@ 0x22
 810cd74:	f002 fb24 	bl	810f3c0 <pbuf_alloc>
 810cd78:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 810cd7a:	69fb      	ldr	r3, [r7, #28]
 810cd7c:	2b00      	cmp	r3, #0
 810cd7e:	d056      	beq.n	810ce2e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 810cd80:	69fb      	ldr	r3, [r7, #28]
 810cd82:	895b      	ldrh	r3, [r3, #10]
 810cd84:	2b23      	cmp	r3, #35	@ 0x23
 810cd86:	d806      	bhi.n	810cd96 <icmp_send_response+0x3a>
 810cd88:	4b2b      	ldr	r3, [pc, #172]	@ (810ce38 <icmp_send_response+0xdc>)
 810cd8a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 810cd8e:	492b      	ldr	r1, [pc, #172]	@ (810ce3c <icmp_send_response+0xe0>)
 810cd90:	482b      	ldr	r0, [pc, #172]	@ (810ce40 <icmp_send_response+0xe4>)
 810cd92:	f009 fda9 	bl	81168e8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 810cd96:	687b      	ldr	r3, [r7, #4]
 810cd98:	685b      	ldr	r3, [r3, #4]
 810cd9a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 810cd9c:	69fb      	ldr	r3, [r7, #28]
 810cd9e:	685b      	ldr	r3, [r3, #4]
 810cda0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 810cda2:	697b      	ldr	r3, [r7, #20]
 810cda4:	78fa      	ldrb	r2, [r7, #3]
 810cda6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 810cda8:	697b      	ldr	r3, [r7, #20]
 810cdaa:	78ba      	ldrb	r2, [r7, #2]
 810cdac:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 810cdae:	697b      	ldr	r3, [r7, #20]
 810cdb0:	2200      	movs	r2, #0
 810cdb2:	711a      	strb	r2, [r3, #4]
 810cdb4:	2200      	movs	r2, #0
 810cdb6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 810cdb8:	697b      	ldr	r3, [r7, #20]
 810cdba:	2200      	movs	r2, #0
 810cdbc:	719a      	strb	r2, [r3, #6]
 810cdbe:	2200      	movs	r2, #0
 810cdc0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 810cdc2:	69fb      	ldr	r3, [r7, #28]
 810cdc4:	685b      	ldr	r3, [r3, #4]
 810cdc6:	f103 0008 	add.w	r0, r3, #8
 810cdca:	687b      	ldr	r3, [r7, #4]
 810cdcc:	685b      	ldr	r3, [r3, #4]
 810cdce:	221c      	movs	r2, #28
 810cdd0:	4619      	mov	r1, r3
 810cdd2:	f009 ff28 	bl	8116c26 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 810cdd6:	69bb      	ldr	r3, [r7, #24]
 810cdd8:	68db      	ldr	r3, [r3, #12]
 810cdda:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 810cddc:	f107 030c 	add.w	r3, r7, #12
 810cde0:	4618      	mov	r0, r3
 810cde2:	f000 f903 	bl	810cfec <ip4_route>
 810cde6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 810cde8:	693b      	ldr	r3, [r7, #16]
 810cdea:	2b00      	cmp	r3, #0
 810cdec:	d01b      	beq.n	810ce26 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 810cdee:	697b      	ldr	r3, [r7, #20]
 810cdf0:	2200      	movs	r2, #0
 810cdf2:	709a      	strb	r2, [r3, #2]
 810cdf4:	2200      	movs	r2, #0
 810cdf6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 810cdf8:	69fb      	ldr	r3, [r7, #28]
 810cdfa:	895b      	ldrh	r3, [r3, #10]
 810cdfc:	4619      	mov	r1, r3
 810cdfe:	6978      	ldr	r0, [r7, #20]
 810ce00:	f000 f87d 	bl	810cefe <inet_chksum>
 810ce04:	4603      	mov	r3, r0
 810ce06:	461a      	mov	r2, r3
 810ce08:	697b      	ldr	r3, [r7, #20]
 810ce0a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 810ce0c:	f107 020c 	add.w	r2, r7, #12
 810ce10:	693b      	ldr	r3, [r7, #16]
 810ce12:	9302      	str	r3, [sp, #8]
 810ce14:	2301      	movs	r3, #1
 810ce16:	9301      	str	r3, [sp, #4]
 810ce18:	2300      	movs	r3, #0
 810ce1a:	9300      	str	r3, [sp, #0]
 810ce1c:	23ff      	movs	r3, #255	@ 0xff
 810ce1e:	2100      	movs	r1, #0
 810ce20:	69f8      	ldr	r0, [r7, #28]
 810ce22:	f000 faa1 	bl	810d368 <ip4_output_if>
  }
  pbuf_free(q);
 810ce26:	69f8      	ldr	r0, [r7, #28]
 810ce28:	f002 fdb2 	bl	810f990 <pbuf_free>
 810ce2c:	e000      	b.n	810ce30 <icmp_send_response+0xd4>
    return;
 810ce2e:	bf00      	nop
}
 810ce30:	3720      	adds	r7, #32
 810ce32:	46bd      	mov	sp, r7
 810ce34:	bd80      	pop	{r7, pc}
 810ce36:	bf00      	nop
 810ce38:	08117b24 	.word	0x08117b24
 810ce3c:	08117c2c 	.word	0x08117c2c
 810ce40:	08117bd0 	.word	0x08117bd0

0810ce44 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 810ce44:	b480      	push	{r7}
 810ce46:	b089      	sub	sp, #36	@ 0x24
 810ce48:	af00      	add	r7, sp, #0
 810ce4a:	6078      	str	r0, [r7, #4]
 810ce4c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 810ce4e:	687b      	ldr	r3, [r7, #4]
 810ce50:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 810ce52:	2300      	movs	r3, #0
 810ce54:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 810ce56:	2300      	movs	r3, #0
 810ce58:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 810ce5a:	69fb      	ldr	r3, [r7, #28]
 810ce5c:	f003 0301 	and.w	r3, r3, #1
 810ce60:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 810ce62:	693b      	ldr	r3, [r7, #16]
 810ce64:	2b00      	cmp	r3, #0
 810ce66:	d00d      	beq.n	810ce84 <lwip_standard_chksum+0x40>
 810ce68:	683b      	ldr	r3, [r7, #0]
 810ce6a:	2b00      	cmp	r3, #0
 810ce6c:	dd0a      	ble.n	810ce84 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 810ce6e:	69fa      	ldr	r2, [r7, #28]
 810ce70:	1c53      	adds	r3, r2, #1
 810ce72:	61fb      	str	r3, [r7, #28]
 810ce74:	f107 030e 	add.w	r3, r7, #14
 810ce78:	3301      	adds	r3, #1
 810ce7a:	7812      	ldrb	r2, [r2, #0]
 810ce7c:	701a      	strb	r2, [r3, #0]
    len--;
 810ce7e:	683b      	ldr	r3, [r7, #0]
 810ce80:	3b01      	subs	r3, #1
 810ce82:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 810ce84:	69fb      	ldr	r3, [r7, #28]
 810ce86:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 810ce88:	e00a      	b.n	810cea0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 810ce8a:	69bb      	ldr	r3, [r7, #24]
 810ce8c:	1c9a      	adds	r2, r3, #2
 810ce8e:	61ba      	str	r2, [r7, #24]
 810ce90:	881b      	ldrh	r3, [r3, #0]
 810ce92:	461a      	mov	r2, r3
 810ce94:	697b      	ldr	r3, [r7, #20]
 810ce96:	4413      	add	r3, r2
 810ce98:	617b      	str	r3, [r7, #20]
    len -= 2;
 810ce9a:	683b      	ldr	r3, [r7, #0]
 810ce9c:	3b02      	subs	r3, #2
 810ce9e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 810cea0:	683b      	ldr	r3, [r7, #0]
 810cea2:	2b01      	cmp	r3, #1
 810cea4:	dcf1      	bgt.n	810ce8a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 810cea6:	683b      	ldr	r3, [r7, #0]
 810cea8:	2b00      	cmp	r3, #0
 810ceaa:	dd04      	ble.n	810ceb6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 810ceac:	f107 030e 	add.w	r3, r7, #14
 810ceb0:	69ba      	ldr	r2, [r7, #24]
 810ceb2:	7812      	ldrb	r2, [r2, #0]
 810ceb4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 810ceb6:	89fb      	ldrh	r3, [r7, #14]
 810ceb8:	461a      	mov	r2, r3
 810ceba:	697b      	ldr	r3, [r7, #20]
 810cebc:	4413      	add	r3, r2
 810cebe:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 810cec0:	697b      	ldr	r3, [r7, #20]
 810cec2:	0c1a      	lsrs	r2, r3, #16
 810cec4:	697b      	ldr	r3, [r7, #20]
 810cec6:	b29b      	uxth	r3, r3
 810cec8:	4413      	add	r3, r2
 810ceca:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 810cecc:	697b      	ldr	r3, [r7, #20]
 810cece:	0c1a      	lsrs	r2, r3, #16
 810ced0:	697b      	ldr	r3, [r7, #20]
 810ced2:	b29b      	uxth	r3, r3
 810ced4:	4413      	add	r3, r2
 810ced6:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 810ced8:	693b      	ldr	r3, [r7, #16]
 810ceda:	2b00      	cmp	r3, #0
 810cedc:	d007      	beq.n	810ceee <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 810cede:	697b      	ldr	r3, [r7, #20]
 810cee0:	021b      	lsls	r3, r3, #8
 810cee2:	b29a      	uxth	r2, r3
 810cee4:	697b      	ldr	r3, [r7, #20]
 810cee6:	0a1b      	lsrs	r3, r3, #8
 810cee8:	b2db      	uxtb	r3, r3
 810ceea:	4313      	orrs	r3, r2
 810ceec:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 810ceee:	697b      	ldr	r3, [r7, #20]
 810cef0:	b29b      	uxth	r3, r3
}
 810cef2:	4618      	mov	r0, r3
 810cef4:	3724      	adds	r7, #36	@ 0x24
 810cef6:	46bd      	mov	sp, r7
 810cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cefc:	4770      	bx	lr

0810cefe <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 810cefe:	b580      	push	{r7, lr}
 810cf00:	b082      	sub	sp, #8
 810cf02:	af00      	add	r7, sp, #0
 810cf04:	6078      	str	r0, [r7, #4]
 810cf06:	460b      	mov	r3, r1
 810cf08:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 810cf0a:	887b      	ldrh	r3, [r7, #2]
 810cf0c:	4619      	mov	r1, r3
 810cf0e:	6878      	ldr	r0, [r7, #4]
 810cf10:	f7ff ff98 	bl	810ce44 <lwip_standard_chksum>
 810cf14:	4603      	mov	r3, r0
 810cf16:	43db      	mvns	r3, r3
 810cf18:	b29b      	uxth	r3, r3
}
 810cf1a:	4618      	mov	r0, r3
 810cf1c:	3708      	adds	r7, #8
 810cf1e:	46bd      	mov	sp, r7
 810cf20:	bd80      	pop	{r7, pc}

0810cf22 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 810cf22:	b580      	push	{r7, lr}
 810cf24:	b086      	sub	sp, #24
 810cf26:	af00      	add	r7, sp, #0
 810cf28:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 810cf2a:	2300      	movs	r3, #0
 810cf2c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 810cf2e:	2300      	movs	r3, #0
 810cf30:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 810cf32:	687b      	ldr	r3, [r7, #4]
 810cf34:	613b      	str	r3, [r7, #16]
 810cf36:	e02b      	b.n	810cf90 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 810cf38:	693b      	ldr	r3, [r7, #16]
 810cf3a:	685a      	ldr	r2, [r3, #4]
 810cf3c:	693b      	ldr	r3, [r7, #16]
 810cf3e:	895b      	ldrh	r3, [r3, #10]
 810cf40:	4619      	mov	r1, r3
 810cf42:	4610      	mov	r0, r2
 810cf44:	f7ff ff7e 	bl	810ce44 <lwip_standard_chksum>
 810cf48:	4603      	mov	r3, r0
 810cf4a:	461a      	mov	r2, r3
 810cf4c:	697b      	ldr	r3, [r7, #20]
 810cf4e:	4413      	add	r3, r2
 810cf50:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 810cf52:	697b      	ldr	r3, [r7, #20]
 810cf54:	0c1a      	lsrs	r2, r3, #16
 810cf56:	697b      	ldr	r3, [r7, #20]
 810cf58:	b29b      	uxth	r3, r3
 810cf5a:	4413      	add	r3, r2
 810cf5c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 810cf5e:	693b      	ldr	r3, [r7, #16]
 810cf60:	895b      	ldrh	r3, [r3, #10]
 810cf62:	f003 0301 	and.w	r3, r3, #1
 810cf66:	b29b      	uxth	r3, r3
 810cf68:	2b00      	cmp	r3, #0
 810cf6a:	d00e      	beq.n	810cf8a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 810cf6c:	68fb      	ldr	r3, [r7, #12]
 810cf6e:	2b00      	cmp	r3, #0
 810cf70:	bf0c      	ite	eq
 810cf72:	2301      	moveq	r3, #1
 810cf74:	2300      	movne	r3, #0
 810cf76:	b2db      	uxtb	r3, r3
 810cf78:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 810cf7a:	697b      	ldr	r3, [r7, #20]
 810cf7c:	021b      	lsls	r3, r3, #8
 810cf7e:	b29a      	uxth	r2, r3
 810cf80:	697b      	ldr	r3, [r7, #20]
 810cf82:	0a1b      	lsrs	r3, r3, #8
 810cf84:	b2db      	uxtb	r3, r3
 810cf86:	4313      	orrs	r3, r2
 810cf88:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 810cf8a:	693b      	ldr	r3, [r7, #16]
 810cf8c:	681b      	ldr	r3, [r3, #0]
 810cf8e:	613b      	str	r3, [r7, #16]
 810cf90:	693b      	ldr	r3, [r7, #16]
 810cf92:	2b00      	cmp	r3, #0
 810cf94:	d1d0      	bne.n	810cf38 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 810cf96:	68fb      	ldr	r3, [r7, #12]
 810cf98:	2b00      	cmp	r3, #0
 810cf9a:	d007      	beq.n	810cfac <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 810cf9c:	697b      	ldr	r3, [r7, #20]
 810cf9e:	021b      	lsls	r3, r3, #8
 810cfa0:	b29a      	uxth	r2, r3
 810cfa2:	697b      	ldr	r3, [r7, #20]
 810cfa4:	0a1b      	lsrs	r3, r3, #8
 810cfa6:	b2db      	uxtb	r3, r3
 810cfa8:	4313      	orrs	r3, r2
 810cfaa:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 810cfac:	697b      	ldr	r3, [r7, #20]
 810cfae:	b29b      	uxth	r3, r3
 810cfb0:	43db      	mvns	r3, r3
 810cfb2:	b29b      	uxth	r3, r3
}
 810cfb4:	4618      	mov	r0, r3
 810cfb6:	3718      	adds	r7, #24
 810cfb8:	46bd      	mov	sp, r7
 810cfba:	bd80      	pop	{r7, pc}

0810cfbc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 810cfbc:	b580      	push	{r7, lr}
 810cfbe:	b082      	sub	sp, #8
 810cfc0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 810cfc2:	2300      	movs	r3, #0
 810cfc4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 810cfc6:	f003 f803 	bl	810ffd0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 810cfca:	f001 f9ef 	bl	810e3ac <mem_init>
  memp_init();
 810cfce:	f001 fd53 	bl	810ea78 <memp_init>
  pbuf_init();
  netif_init();
 810cfd2:	f001 fe5f 	bl	810ec94 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 810cfd6:	f008 fcf1 	bl	81159bc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 810cfda:	f003 f875 	bl	81100c8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 810cfde:	f008 fc33 	bl	8115848 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 810cfe2:	bf00      	nop
 810cfe4:	3708      	adds	r7, #8
 810cfe6:	46bd      	mov	sp, r7
 810cfe8:	bd80      	pop	{r7, pc}
	...

0810cfec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 810cfec:	b480      	push	{r7}
 810cfee:	b085      	sub	sp, #20
 810cff0:	af00      	add	r7, sp, #0
 810cff2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 810cff4:	4b33      	ldr	r3, [pc, #204]	@ (810d0c4 <ip4_route+0xd8>)
 810cff6:	681b      	ldr	r3, [r3, #0]
 810cff8:	60fb      	str	r3, [r7, #12]
 810cffa:	e036      	b.n	810d06a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 810cffc:	68fb      	ldr	r3, [r7, #12]
 810cffe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d002:	f003 0301 	and.w	r3, r3, #1
 810d006:	b2db      	uxtb	r3, r3
 810d008:	2b00      	cmp	r3, #0
 810d00a:	d02b      	beq.n	810d064 <ip4_route+0x78>
 810d00c:	68fb      	ldr	r3, [r7, #12]
 810d00e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d012:	089b      	lsrs	r3, r3, #2
 810d014:	f003 0301 	and.w	r3, r3, #1
 810d018:	b2db      	uxtb	r3, r3
 810d01a:	2b00      	cmp	r3, #0
 810d01c:	d022      	beq.n	810d064 <ip4_route+0x78>
 810d01e:	68fb      	ldr	r3, [r7, #12]
 810d020:	3304      	adds	r3, #4
 810d022:	681b      	ldr	r3, [r3, #0]
 810d024:	2b00      	cmp	r3, #0
 810d026:	d01d      	beq.n	810d064 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 810d028:	687b      	ldr	r3, [r7, #4]
 810d02a:	681a      	ldr	r2, [r3, #0]
 810d02c:	68fb      	ldr	r3, [r7, #12]
 810d02e:	3304      	adds	r3, #4
 810d030:	681b      	ldr	r3, [r3, #0]
 810d032:	405a      	eors	r2, r3
 810d034:	68fb      	ldr	r3, [r7, #12]
 810d036:	3308      	adds	r3, #8
 810d038:	681b      	ldr	r3, [r3, #0]
 810d03a:	4013      	ands	r3, r2
 810d03c:	2b00      	cmp	r3, #0
 810d03e:	d101      	bne.n	810d044 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 810d040:	68fb      	ldr	r3, [r7, #12]
 810d042:	e038      	b.n	810d0b6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 810d044:	68fb      	ldr	r3, [r7, #12]
 810d046:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d04a:	f003 0302 	and.w	r3, r3, #2
 810d04e:	2b00      	cmp	r3, #0
 810d050:	d108      	bne.n	810d064 <ip4_route+0x78>
 810d052:	687b      	ldr	r3, [r7, #4]
 810d054:	681a      	ldr	r2, [r3, #0]
 810d056:	68fb      	ldr	r3, [r7, #12]
 810d058:	330c      	adds	r3, #12
 810d05a:	681b      	ldr	r3, [r3, #0]
 810d05c:	429a      	cmp	r2, r3
 810d05e:	d101      	bne.n	810d064 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 810d060:	68fb      	ldr	r3, [r7, #12]
 810d062:	e028      	b.n	810d0b6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 810d064:	68fb      	ldr	r3, [r7, #12]
 810d066:	681b      	ldr	r3, [r3, #0]
 810d068:	60fb      	str	r3, [r7, #12]
 810d06a:	68fb      	ldr	r3, [r7, #12]
 810d06c:	2b00      	cmp	r3, #0
 810d06e:	d1c5      	bne.n	810cffc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 810d070:	4b15      	ldr	r3, [pc, #84]	@ (810d0c8 <ip4_route+0xdc>)
 810d072:	681b      	ldr	r3, [r3, #0]
 810d074:	2b00      	cmp	r3, #0
 810d076:	d01a      	beq.n	810d0ae <ip4_route+0xc2>
 810d078:	4b13      	ldr	r3, [pc, #76]	@ (810d0c8 <ip4_route+0xdc>)
 810d07a:	681b      	ldr	r3, [r3, #0]
 810d07c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d080:	f003 0301 	and.w	r3, r3, #1
 810d084:	2b00      	cmp	r3, #0
 810d086:	d012      	beq.n	810d0ae <ip4_route+0xc2>
 810d088:	4b0f      	ldr	r3, [pc, #60]	@ (810d0c8 <ip4_route+0xdc>)
 810d08a:	681b      	ldr	r3, [r3, #0]
 810d08c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d090:	f003 0304 	and.w	r3, r3, #4
 810d094:	2b00      	cmp	r3, #0
 810d096:	d00a      	beq.n	810d0ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 810d098:	4b0b      	ldr	r3, [pc, #44]	@ (810d0c8 <ip4_route+0xdc>)
 810d09a:	681b      	ldr	r3, [r3, #0]
 810d09c:	3304      	adds	r3, #4
 810d09e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 810d0a0:	2b00      	cmp	r3, #0
 810d0a2:	d004      	beq.n	810d0ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 810d0a4:	687b      	ldr	r3, [r7, #4]
 810d0a6:	681b      	ldr	r3, [r3, #0]
 810d0a8:	b2db      	uxtb	r3, r3
 810d0aa:	2b7f      	cmp	r3, #127	@ 0x7f
 810d0ac:	d101      	bne.n	810d0b2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 810d0ae:	2300      	movs	r3, #0
 810d0b0:	e001      	b.n	810d0b6 <ip4_route+0xca>
  }

  return netif_default;
 810d0b2:	4b05      	ldr	r3, [pc, #20]	@ (810d0c8 <ip4_route+0xdc>)
 810d0b4:	681b      	ldr	r3, [r3, #0]
}
 810d0b6:	4618      	mov	r0, r3
 810d0b8:	3714      	adds	r7, #20
 810d0ba:	46bd      	mov	sp, r7
 810d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d0c0:	4770      	bx	lr
 810d0c2:	bf00      	nop
 810d0c4:	1000b83c 	.word	0x1000b83c
 810d0c8:	1000b840 	.word	0x1000b840

0810d0cc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 810d0cc:	b580      	push	{r7, lr}
 810d0ce:	b082      	sub	sp, #8
 810d0d0:	af00      	add	r7, sp, #0
 810d0d2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 810d0d4:	687b      	ldr	r3, [r7, #4]
 810d0d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d0da:	f003 0301 	and.w	r3, r3, #1
 810d0de:	b2db      	uxtb	r3, r3
 810d0e0:	2b00      	cmp	r3, #0
 810d0e2:	d016      	beq.n	810d112 <ip4_input_accept+0x46>
 810d0e4:	687b      	ldr	r3, [r7, #4]
 810d0e6:	3304      	adds	r3, #4
 810d0e8:	681b      	ldr	r3, [r3, #0]
 810d0ea:	2b00      	cmp	r3, #0
 810d0ec:	d011      	beq.n	810d112 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 810d0ee:	4b0b      	ldr	r3, [pc, #44]	@ (810d11c <ip4_input_accept+0x50>)
 810d0f0:	695a      	ldr	r2, [r3, #20]
 810d0f2:	687b      	ldr	r3, [r7, #4]
 810d0f4:	3304      	adds	r3, #4
 810d0f6:	681b      	ldr	r3, [r3, #0]
 810d0f8:	429a      	cmp	r2, r3
 810d0fa:	d008      	beq.n	810d10e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 810d0fc:	4b07      	ldr	r3, [pc, #28]	@ (810d11c <ip4_input_accept+0x50>)
 810d0fe:	695b      	ldr	r3, [r3, #20]
 810d100:	6879      	ldr	r1, [r7, #4]
 810d102:	4618      	mov	r0, r3
 810d104:	f000 fa08 	bl	810d518 <ip4_addr_isbroadcast_u32>
 810d108:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 810d10a:	2b00      	cmp	r3, #0
 810d10c:	d001      	beq.n	810d112 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 810d10e:	2301      	movs	r3, #1
 810d110:	e000      	b.n	810d114 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 810d112:	2300      	movs	r3, #0
}
 810d114:	4618      	mov	r0, r3
 810d116:	3708      	adds	r7, #8
 810d118:	46bd      	mov	sp, r7
 810d11a:	bd80      	pop	{r7, pc}
 810d11c:	10004d7c 	.word	0x10004d7c

0810d120 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 810d120:	b580      	push	{r7, lr}
 810d122:	b086      	sub	sp, #24
 810d124:	af00      	add	r7, sp, #0
 810d126:	6078      	str	r0, [r7, #4]
 810d128:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 810d12a:	687b      	ldr	r3, [r7, #4]
 810d12c:	685b      	ldr	r3, [r3, #4]
 810d12e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 810d130:	697b      	ldr	r3, [r7, #20]
 810d132:	781b      	ldrb	r3, [r3, #0]
 810d134:	091b      	lsrs	r3, r3, #4
 810d136:	b2db      	uxtb	r3, r3
 810d138:	2b04      	cmp	r3, #4
 810d13a:	d004      	beq.n	810d146 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 810d13c:	6878      	ldr	r0, [r7, #4]
 810d13e:	f002 fc27 	bl	810f990 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 810d142:	2300      	movs	r3, #0
 810d144:	e107      	b.n	810d356 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 810d146:	697b      	ldr	r3, [r7, #20]
 810d148:	781b      	ldrb	r3, [r3, #0]
 810d14a:	f003 030f 	and.w	r3, r3, #15
 810d14e:	b2db      	uxtb	r3, r3
 810d150:	009b      	lsls	r3, r3, #2
 810d152:	b2db      	uxtb	r3, r3
 810d154:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 810d156:	697b      	ldr	r3, [r7, #20]
 810d158:	885b      	ldrh	r3, [r3, #2]
 810d15a:	b29b      	uxth	r3, r3
 810d15c:	4618      	mov	r0, r3
 810d15e:	f7fe fc6d 	bl	810ba3c <lwip_htons>
 810d162:	4603      	mov	r3, r0
 810d164:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 810d166:	687b      	ldr	r3, [r7, #4]
 810d168:	891b      	ldrh	r3, [r3, #8]
 810d16a:	89ba      	ldrh	r2, [r7, #12]
 810d16c:	429a      	cmp	r2, r3
 810d16e:	d204      	bcs.n	810d17a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 810d170:	89bb      	ldrh	r3, [r7, #12]
 810d172:	4619      	mov	r1, r3
 810d174:	6878      	ldr	r0, [r7, #4]
 810d176:	f002 fa85 	bl	810f684 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 810d17a:	687b      	ldr	r3, [r7, #4]
 810d17c:	895b      	ldrh	r3, [r3, #10]
 810d17e:	89fa      	ldrh	r2, [r7, #14]
 810d180:	429a      	cmp	r2, r3
 810d182:	d807      	bhi.n	810d194 <ip4_input+0x74>
 810d184:	687b      	ldr	r3, [r7, #4]
 810d186:	891b      	ldrh	r3, [r3, #8]
 810d188:	89ba      	ldrh	r2, [r7, #12]
 810d18a:	429a      	cmp	r2, r3
 810d18c:	d802      	bhi.n	810d194 <ip4_input+0x74>
 810d18e:	89fb      	ldrh	r3, [r7, #14]
 810d190:	2b13      	cmp	r3, #19
 810d192:	d804      	bhi.n	810d19e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 810d194:	6878      	ldr	r0, [r7, #4]
 810d196:	f002 fbfb 	bl	810f990 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 810d19a:	2300      	movs	r3, #0
 810d19c:	e0db      	b.n	810d356 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 810d19e:	697b      	ldr	r3, [r7, #20]
 810d1a0:	691b      	ldr	r3, [r3, #16]
 810d1a2:	4a6f      	ldr	r2, [pc, #444]	@ (810d360 <ip4_input+0x240>)
 810d1a4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 810d1a6:	697b      	ldr	r3, [r7, #20]
 810d1a8:	68db      	ldr	r3, [r3, #12]
 810d1aa:	4a6d      	ldr	r2, [pc, #436]	@ (810d360 <ip4_input+0x240>)
 810d1ac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 810d1ae:	4b6c      	ldr	r3, [pc, #432]	@ (810d360 <ip4_input+0x240>)
 810d1b0:	695b      	ldr	r3, [r3, #20]
 810d1b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 810d1b6:	2be0      	cmp	r3, #224	@ 0xe0
 810d1b8:	d112      	bne.n	810d1e0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 810d1ba:	683b      	ldr	r3, [r7, #0]
 810d1bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d1c0:	f003 0301 	and.w	r3, r3, #1
 810d1c4:	b2db      	uxtb	r3, r3
 810d1c6:	2b00      	cmp	r3, #0
 810d1c8:	d007      	beq.n	810d1da <ip4_input+0xba>
 810d1ca:	683b      	ldr	r3, [r7, #0]
 810d1cc:	3304      	adds	r3, #4
 810d1ce:	681b      	ldr	r3, [r3, #0]
 810d1d0:	2b00      	cmp	r3, #0
 810d1d2:	d002      	beq.n	810d1da <ip4_input+0xba>
      netif = inp;
 810d1d4:	683b      	ldr	r3, [r7, #0]
 810d1d6:	613b      	str	r3, [r7, #16]
 810d1d8:	e02a      	b.n	810d230 <ip4_input+0x110>
    } else {
      netif = NULL;
 810d1da:	2300      	movs	r3, #0
 810d1dc:	613b      	str	r3, [r7, #16]
 810d1de:	e027      	b.n	810d230 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 810d1e0:	6838      	ldr	r0, [r7, #0]
 810d1e2:	f7ff ff73 	bl	810d0cc <ip4_input_accept>
 810d1e6:	4603      	mov	r3, r0
 810d1e8:	2b00      	cmp	r3, #0
 810d1ea:	d002      	beq.n	810d1f2 <ip4_input+0xd2>
      netif = inp;
 810d1ec:	683b      	ldr	r3, [r7, #0]
 810d1ee:	613b      	str	r3, [r7, #16]
 810d1f0:	e01e      	b.n	810d230 <ip4_input+0x110>
    } else {
      netif = NULL;
 810d1f2:	2300      	movs	r3, #0
 810d1f4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 810d1f6:	4b5a      	ldr	r3, [pc, #360]	@ (810d360 <ip4_input+0x240>)
 810d1f8:	695b      	ldr	r3, [r3, #20]
 810d1fa:	b2db      	uxtb	r3, r3
 810d1fc:	2b7f      	cmp	r3, #127	@ 0x7f
 810d1fe:	d017      	beq.n	810d230 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 810d200:	4b58      	ldr	r3, [pc, #352]	@ (810d364 <ip4_input+0x244>)
 810d202:	681b      	ldr	r3, [r3, #0]
 810d204:	613b      	str	r3, [r7, #16]
 810d206:	e00e      	b.n	810d226 <ip4_input+0x106>
          if (netif == inp) {
 810d208:	693a      	ldr	r2, [r7, #16]
 810d20a:	683b      	ldr	r3, [r7, #0]
 810d20c:	429a      	cmp	r2, r3
 810d20e:	d006      	beq.n	810d21e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 810d210:	6938      	ldr	r0, [r7, #16]
 810d212:	f7ff ff5b 	bl	810d0cc <ip4_input_accept>
 810d216:	4603      	mov	r3, r0
 810d218:	2b00      	cmp	r3, #0
 810d21a:	d108      	bne.n	810d22e <ip4_input+0x10e>
 810d21c:	e000      	b.n	810d220 <ip4_input+0x100>
            continue;
 810d21e:	bf00      	nop
        NETIF_FOREACH(netif) {
 810d220:	693b      	ldr	r3, [r7, #16]
 810d222:	681b      	ldr	r3, [r3, #0]
 810d224:	613b      	str	r3, [r7, #16]
 810d226:	693b      	ldr	r3, [r7, #16]
 810d228:	2b00      	cmp	r3, #0
 810d22a:	d1ed      	bne.n	810d208 <ip4_input+0xe8>
 810d22c:	e000      	b.n	810d230 <ip4_input+0x110>
            break;
 810d22e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 810d230:	4b4b      	ldr	r3, [pc, #300]	@ (810d360 <ip4_input+0x240>)
 810d232:	691b      	ldr	r3, [r3, #16]
 810d234:	6839      	ldr	r1, [r7, #0]
 810d236:	4618      	mov	r0, r3
 810d238:	f000 f96e 	bl	810d518 <ip4_addr_isbroadcast_u32>
 810d23c:	4603      	mov	r3, r0
 810d23e:	2b00      	cmp	r3, #0
 810d240:	d105      	bne.n	810d24e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 810d242:	4b47      	ldr	r3, [pc, #284]	@ (810d360 <ip4_input+0x240>)
 810d244:	691b      	ldr	r3, [r3, #16]
 810d246:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 810d24a:	2be0      	cmp	r3, #224	@ 0xe0
 810d24c:	d104      	bne.n	810d258 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 810d24e:	6878      	ldr	r0, [r7, #4]
 810d250:	f002 fb9e 	bl	810f990 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 810d254:	2300      	movs	r3, #0
 810d256:	e07e      	b.n	810d356 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 810d258:	693b      	ldr	r3, [r7, #16]
 810d25a:	2b00      	cmp	r3, #0
 810d25c:	d104      	bne.n	810d268 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 810d25e:	6878      	ldr	r0, [r7, #4]
 810d260:	f002 fb96 	bl	810f990 <pbuf_free>
    return ERR_OK;
 810d264:	2300      	movs	r3, #0
 810d266:	e076      	b.n	810d356 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 810d268:	697b      	ldr	r3, [r7, #20]
 810d26a:	88db      	ldrh	r3, [r3, #6]
 810d26c:	b29b      	uxth	r3, r3
 810d26e:	461a      	mov	r2, r3
 810d270:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 810d274:	4013      	ands	r3, r2
 810d276:	2b00      	cmp	r3, #0
 810d278:	d00b      	beq.n	810d292 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 810d27a:	6878      	ldr	r0, [r7, #4]
 810d27c:	f000 fc92 	bl	810dba4 <ip4_reass>
 810d280:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 810d282:	687b      	ldr	r3, [r7, #4]
 810d284:	2b00      	cmp	r3, #0
 810d286:	d101      	bne.n	810d28c <ip4_input+0x16c>
      return ERR_OK;
 810d288:	2300      	movs	r3, #0
 810d28a:	e064      	b.n	810d356 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 810d28c:	687b      	ldr	r3, [r7, #4]
 810d28e:	685b      	ldr	r3, [r3, #4]
 810d290:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 810d292:	4a33      	ldr	r2, [pc, #204]	@ (810d360 <ip4_input+0x240>)
 810d294:	693b      	ldr	r3, [r7, #16]
 810d296:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 810d298:	4a31      	ldr	r2, [pc, #196]	@ (810d360 <ip4_input+0x240>)
 810d29a:	683b      	ldr	r3, [r7, #0]
 810d29c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 810d29e:	4a30      	ldr	r2, [pc, #192]	@ (810d360 <ip4_input+0x240>)
 810d2a0:	697b      	ldr	r3, [r7, #20]
 810d2a2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 810d2a4:	697b      	ldr	r3, [r7, #20]
 810d2a6:	781b      	ldrb	r3, [r3, #0]
 810d2a8:	f003 030f 	and.w	r3, r3, #15
 810d2ac:	b2db      	uxtb	r3, r3
 810d2ae:	009b      	lsls	r3, r3, #2
 810d2b0:	b2db      	uxtb	r3, r3
 810d2b2:	461a      	mov	r2, r3
 810d2b4:	4b2a      	ldr	r3, [pc, #168]	@ (810d360 <ip4_input+0x240>)
 810d2b6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 810d2b8:	89fb      	ldrh	r3, [r7, #14]
 810d2ba:	4619      	mov	r1, r3
 810d2bc:	6878      	ldr	r0, [r7, #4]
 810d2be:	f002 fae1 	bl	810f884 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 810d2c2:	697b      	ldr	r3, [r7, #20]
 810d2c4:	7a5b      	ldrb	r3, [r3, #9]
 810d2c6:	2b11      	cmp	r3, #17
 810d2c8:	d006      	beq.n	810d2d8 <ip4_input+0x1b8>
 810d2ca:	2b11      	cmp	r3, #17
 810d2cc:	dc13      	bgt.n	810d2f6 <ip4_input+0x1d6>
 810d2ce:	2b01      	cmp	r3, #1
 810d2d0:	d00c      	beq.n	810d2ec <ip4_input+0x1cc>
 810d2d2:	2b06      	cmp	r3, #6
 810d2d4:	d005      	beq.n	810d2e2 <ip4_input+0x1c2>
 810d2d6:	e00e      	b.n	810d2f6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 810d2d8:	6839      	ldr	r1, [r7, #0]
 810d2da:	6878      	ldr	r0, [r7, #4]
 810d2dc:	f008 fc1c 	bl	8115b18 <udp_input>
        break;
 810d2e0:	e026      	b.n	810d330 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 810d2e2:	6839      	ldr	r1, [r7, #0]
 810d2e4:	6878      	ldr	r0, [r7, #4]
 810d2e6:	f004 fa8f 	bl	8111808 <tcp_input>
        break;
 810d2ea:	e021      	b.n	810d330 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 810d2ec:	6839      	ldr	r1, [r7, #0]
 810d2ee:	6878      	ldr	r0, [r7, #4]
 810d2f0:	f7ff fbf4 	bl	810cadc <icmp_input>
        break;
 810d2f4:	e01c      	b.n	810d330 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 810d2f6:	4b1a      	ldr	r3, [pc, #104]	@ (810d360 <ip4_input+0x240>)
 810d2f8:	695b      	ldr	r3, [r3, #20]
 810d2fa:	6939      	ldr	r1, [r7, #16]
 810d2fc:	4618      	mov	r0, r3
 810d2fe:	f000 f90b 	bl	810d518 <ip4_addr_isbroadcast_u32>
 810d302:	4603      	mov	r3, r0
 810d304:	2b00      	cmp	r3, #0
 810d306:	d10f      	bne.n	810d328 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 810d308:	4b15      	ldr	r3, [pc, #84]	@ (810d360 <ip4_input+0x240>)
 810d30a:	695b      	ldr	r3, [r3, #20]
 810d30c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 810d310:	2be0      	cmp	r3, #224	@ 0xe0
 810d312:	d009      	beq.n	810d328 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 810d314:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810d318:	4619      	mov	r1, r3
 810d31a:	6878      	ldr	r0, [r7, #4]
 810d31c:	f002 fb25 	bl	810f96a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 810d320:	2102      	movs	r1, #2
 810d322:	6878      	ldr	r0, [r7, #4]
 810d324:	f7ff fcfa 	bl	810cd1c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 810d328:	6878      	ldr	r0, [r7, #4]
 810d32a:	f002 fb31 	bl	810f990 <pbuf_free>
        break;
 810d32e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 810d330:	4b0b      	ldr	r3, [pc, #44]	@ (810d360 <ip4_input+0x240>)
 810d332:	2200      	movs	r2, #0
 810d334:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 810d336:	4b0a      	ldr	r3, [pc, #40]	@ (810d360 <ip4_input+0x240>)
 810d338:	2200      	movs	r2, #0
 810d33a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 810d33c:	4b08      	ldr	r3, [pc, #32]	@ (810d360 <ip4_input+0x240>)
 810d33e:	2200      	movs	r2, #0
 810d340:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 810d342:	4b07      	ldr	r3, [pc, #28]	@ (810d360 <ip4_input+0x240>)
 810d344:	2200      	movs	r2, #0
 810d346:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 810d348:	4b05      	ldr	r3, [pc, #20]	@ (810d360 <ip4_input+0x240>)
 810d34a:	2200      	movs	r2, #0
 810d34c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 810d34e:	4b04      	ldr	r3, [pc, #16]	@ (810d360 <ip4_input+0x240>)
 810d350:	2200      	movs	r2, #0
 810d352:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 810d354:	2300      	movs	r3, #0
}
 810d356:	4618      	mov	r0, r3
 810d358:	3718      	adds	r7, #24
 810d35a:	46bd      	mov	sp, r7
 810d35c:	bd80      	pop	{r7, pc}
 810d35e:	bf00      	nop
 810d360:	10004d7c 	.word	0x10004d7c
 810d364:	1000b83c 	.word	0x1000b83c

0810d368 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 810d368:	b580      	push	{r7, lr}
 810d36a:	b08a      	sub	sp, #40	@ 0x28
 810d36c:	af04      	add	r7, sp, #16
 810d36e:	60f8      	str	r0, [r7, #12]
 810d370:	60b9      	str	r1, [r7, #8]
 810d372:	607a      	str	r2, [r7, #4]
 810d374:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 810d376:	68bb      	ldr	r3, [r7, #8]
 810d378:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 810d37a:	687b      	ldr	r3, [r7, #4]
 810d37c:	2b00      	cmp	r3, #0
 810d37e:	d009      	beq.n	810d394 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 810d380:	68bb      	ldr	r3, [r7, #8]
 810d382:	2b00      	cmp	r3, #0
 810d384:	d003      	beq.n	810d38e <ip4_output_if+0x26>
 810d386:	68bb      	ldr	r3, [r7, #8]
 810d388:	681b      	ldr	r3, [r3, #0]
 810d38a:	2b00      	cmp	r3, #0
 810d38c:	d102      	bne.n	810d394 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 810d38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d390:	3304      	adds	r3, #4
 810d392:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 810d394:	78fa      	ldrb	r2, [r7, #3]
 810d396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d398:	9302      	str	r3, [sp, #8]
 810d39a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810d39e:	9301      	str	r3, [sp, #4]
 810d3a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 810d3a4:	9300      	str	r3, [sp, #0]
 810d3a6:	4613      	mov	r3, r2
 810d3a8:	687a      	ldr	r2, [r7, #4]
 810d3aa:	6979      	ldr	r1, [r7, #20]
 810d3ac:	68f8      	ldr	r0, [r7, #12]
 810d3ae:	f000 f805 	bl	810d3bc <ip4_output_if_src>
 810d3b2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 810d3b4:	4618      	mov	r0, r3
 810d3b6:	3718      	adds	r7, #24
 810d3b8:	46bd      	mov	sp, r7
 810d3ba:	bd80      	pop	{r7, pc}

0810d3bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 810d3bc:	b580      	push	{r7, lr}
 810d3be:	b088      	sub	sp, #32
 810d3c0:	af00      	add	r7, sp, #0
 810d3c2:	60f8      	str	r0, [r7, #12]
 810d3c4:	60b9      	str	r1, [r7, #8]
 810d3c6:	607a      	str	r2, [r7, #4]
 810d3c8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 810d3ca:	68fb      	ldr	r3, [r7, #12]
 810d3cc:	7b9b      	ldrb	r3, [r3, #14]
 810d3ce:	2b01      	cmp	r3, #1
 810d3d0:	d006      	beq.n	810d3e0 <ip4_output_if_src+0x24>
 810d3d2:	4b4b      	ldr	r3, [pc, #300]	@ (810d500 <ip4_output_if_src+0x144>)
 810d3d4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 810d3d8:	494a      	ldr	r1, [pc, #296]	@ (810d504 <ip4_output_if_src+0x148>)
 810d3da:	484b      	ldr	r0, [pc, #300]	@ (810d508 <ip4_output_if_src+0x14c>)
 810d3dc:	f009 fa84 	bl	81168e8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 810d3e0:	687b      	ldr	r3, [r7, #4]
 810d3e2:	2b00      	cmp	r3, #0
 810d3e4:	d060      	beq.n	810d4a8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 810d3e6:	2314      	movs	r3, #20
 810d3e8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 810d3ea:	2114      	movs	r1, #20
 810d3ec:	68f8      	ldr	r0, [r7, #12]
 810d3ee:	f002 fa39 	bl	810f864 <pbuf_add_header>
 810d3f2:	4603      	mov	r3, r0
 810d3f4:	2b00      	cmp	r3, #0
 810d3f6:	d002      	beq.n	810d3fe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 810d3f8:	f06f 0301 	mvn.w	r3, #1
 810d3fc:	e07c      	b.n	810d4f8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 810d3fe:	68fb      	ldr	r3, [r7, #12]
 810d400:	685b      	ldr	r3, [r3, #4]
 810d402:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 810d404:	68fb      	ldr	r3, [r7, #12]
 810d406:	895b      	ldrh	r3, [r3, #10]
 810d408:	2b13      	cmp	r3, #19
 810d40a:	d806      	bhi.n	810d41a <ip4_output_if_src+0x5e>
 810d40c:	4b3c      	ldr	r3, [pc, #240]	@ (810d500 <ip4_output_if_src+0x144>)
 810d40e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 810d412:	493e      	ldr	r1, [pc, #248]	@ (810d50c <ip4_output_if_src+0x150>)
 810d414:	483c      	ldr	r0, [pc, #240]	@ (810d508 <ip4_output_if_src+0x14c>)
 810d416:	f009 fa67 	bl	81168e8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 810d41a:	69fb      	ldr	r3, [r7, #28]
 810d41c:	78fa      	ldrb	r2, [r7, #3]
 810d41e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 810d420:	69fb      	ldr	r3, [r7, #28]
 810d422:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 810d426:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 810d428:	687b      	ldr	r3, [r7, #4]
 810d42a:	681a      	ldr	r2, [r3, #0]
 810d42c:	69fb      	ldr	r3, [r7, #28]
 810d42e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 810d430:	8b7b      	ldrh	r3, [r7, #26]
 810d432:	089b      	lsrs	r3, r3, #2
 810d434:	b29b      	uxth	r3, r3
 810d436:	b2db      	uxtb	r3, r3
 810d438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810d43c:	b2da      	uxtb	r2, r3
 810d43e:	69fb      	ldr	r3, [r7, #28]
 810d440:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 810d442:	69fb      	ldr	r3, [r7, #28]
 810d444:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 810d448:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 810d44a:	68fb      	ldr	r3, [r7, #12]
 810d44c:	891b      	ldrh	r3, [r3, #8]
 810d44e:	4618      	mov	r0, r3
 810d450:	f7fe faf4 	bl	810ba3c <lwip_htons>
 810d454:	4603      	mov	r3, r0
 810d456:	461a      	mov	r2, r3
 810d458:	69fb      	ldr	r3, [r7, #28]
 810d45a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 810d45c:	69fb      	ldr	r3, [r7, #28]
 810d45e:	2200      	movs	r2, #0
 810d460:	719a      	strb	r2, [r3, #6]
 810d462:	2200      	movs	r2, #0
 810d464:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 810d466:	4b2a      	ldr	r3, [pc, #168]	@ (810d510 <ip4_output_if_src+0x154>)
 810d468:	881b      	ldrh	r3, [r3, #0]
 810d46a:	4618      	mov	r0, r3
 810d46c:	f7fe fae6 	bl	810ba3c <lwip_htons>
 810d470:	4603      	mov	r3, r0
 810d472:	461a      	mov	r2, r3
 810d474:	69fb      	ldr	r3, [r7, #28]
 810d476:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 810d478:	4b25      	ldr	r3, [pc, #148]	@ (810d510 <ip4_output_if_src+0x154>)
 810d47a:	881b      	ldrh	r3, [r3, #0]
 810d47c:	3301      	adds	r3, #1
 810d47e:	b29a      	uxth	r2, r3
 810d480:	4b23      	ldr	r3, [pc, #140]	@ (810d510 <ip4_output_if_src+0x154>)
 810d482:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 810d484:	68bb      	ldr	r3, [r7, #8]
 810d486:	2b00      	cmp	r3, #0
 810d488:	d104      	bne.n	810d494 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 810d48a:	4b22      	ldr	r3, [pc, #136]	@ (810d514 <ip4_output_if_src+0x158>)
 810d48c:	681a      	ldr	r2, [r3, #0]
 810d48e:	69fb      	ldr	r3, [r7, #28]
 810d490:	60da      	str	r2, [r3, #12]
 810d492:	e003      	b.n	810d49c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 810d494:	68bb      	ldr	r3, [r7, #8]
 810d496:	681a      	ldr	r2, [r3, #0]
 810d498:	69fb      	ldr	r3, [r7, #28]
 810d49a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 810d49c:	69fb      	ldr	r3, [r7, #28]
 810d49e:	2200      	movs	r2, #0
 810d4a0:	729a      	strb	r2, [r3, #10]
 810d4a2:	2200      	movs	r2, #0
 810d4a4:	72da      	strb	r2, [r3, #11]
 810d4a6:	e00f      	b.n	810d4c8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 810d4a8:	68fb      	ldr	r3, [r7, #12]
 810d4aa:	895b      	ldrh	r3, [r3, #10]
 810d4ac:	2b13      	cmp	r3, #19
 810d4ae:	d802      	bhi.n	810d4b6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 810d4b0:	f06f 0301 	mvn.w	r3, #1
 810d4b4:	e020      	b.n	810d4f8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 810d4b6:	68fb      	ldr	r3, [r7, #12]
 810d4b8:	685b      	ldr	r3, [r3, #4]
 810d4ba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 810d4bc:	69fb      	ldr	r3, [r7, #28]
 810d4be:	691b      	ldr	r3, [r3, #16]
 810d4c0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 810d4c2:	f107 0314 	add.w	r3, r7, #20
 810d4c6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 810d4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d4ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 810d4cc:	2b00      	cmp	r3, #0
 810d4ce:	d00c      	beq.n	810d4ea <ip4_output_if_src+0x12e>
 810d4d0:	68fb      	ldr	r3, [r7, #12]
 810d4d2:	891a      	ldrh	r2, [r3, #8]
 810d4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d4d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 810d4d8:	429a      	cmp	r2, r3
 810d4da:	d906      	bls.n	810d4ea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 810d4dc:	687a      	ldr	r2, [r7, #4]
 810d4de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 810d4e0:	68f8      	ldr	r0, [r7, #12]
 810d4e2:	f000 fd53 	bl	810df8c <ip4_frag>
 810d4e6:	4603      	mov	r3, r0
 810d4e8:	e006      	b.n	810d4f8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 810d4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d4ec:	695b      	ldr	r3, [r3, #20]
 810d4ee:	687a      	ldr	r2, [r7, #4]
 810d4f0:	68f9      	ldr	r1, [r7, #12]
 810d4f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810d4f4:	4798      	blx	r3
 810d4f6:	4603      	mov	r3, r0
}
 810d4f8:	4618      	mov	r0, r3
 810d4fa:	3720      	adds	r7, #32
 810d4fc:	46bd      	mov	sp, r7
 810d4fe:	bd80      	pop	{r7, pc}
 810d500:	08117c58 	.word	0x08117c58
 810d504:	08117ccc 	.word	0x08117ccc
 810d508:	08117cd8 	.word	0x08117cd8
 810d50c:	08117d00 	.word	0x08117d00
 810d510:	10004d94 	.word	0x10004d94
 810d514:	0811a670 	.word	0x0811a670

0810d518 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 810d518:	b480      	push	{r7}
 810d51a:	b085      	sub	sp, #20
 810d51c:	af00      	add	r7, sp, #0
 810d51e:	6078      	str	r0, [r7, #4]
 810d520:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 810d522:	687b      	ldr	r3, [r7, #4]
 810d524:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 810d526:	687b      	ldr	r3, [r7, #4]
 810d528:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d52c:	d002      	beq.n	810d534 <ip4_addr_isbroadcast_u32+0x1c>
 810d52e:	687b      	ldr	r3, [r7, #4]
 810d530:	2b00      	cmp	r3, #0
 810d532:	d101      	bne.n	810d538 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 810d534:	2301      	movs	r3, #1
 810d536:	e02a      	b.n	810d58e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 810d538:	683b      	ldr	r3, [r7, #0]
 810d53a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d53e:	f003 0302 	and.w	r3, r3, #2
 810d542:	2b00      	cmp	r3, #0
 810d544:	d101      	bne.n	810d54a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 810d546:	2300      	movs	r3, #0
 810d548:	e021      	b.n	810d58e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 810d54a:	683b      	ldr	r3, [r7, #0]
 810d54c:	3304      	adds	r3, #4
 810d54e:	681b      	ldr	r3, [r3, #0]
 810d550:	687a      	ldr	r2, [r7, #4]
 810d552:	429a      	cmp	r2, r3
 810d554:	d101      	bne.n	810d55a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 810d556:	2300      	movs	r3, #0
 810d558:	e019      	b.n	810d58e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 810d55a:	68fa      	ldr	r2, [r7, #12]
 810d55c:	683b      	ldr	r3, [r7, #0]
 810d55e:	3304      	adds	r3, #4
 810d560:	681b      	ldr	r3, [r3, #0]
 810d562:	405a      	eors	r2, r3
 810d564:	683b      	ldr	r3, [r7, #0]
 810d566:	3308      	adds	r3, #8
 810d568:	681b      	ldr	r3, [r3, #0]
 810d56a:	4013      	ands	r3, r2
 810d56c:	2b00      	cmp	r3, #0
 810d56e:	d10d      	bne.n	810d58c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 810d570:	683b      	ldr	r3, [r7, #0]
 810d572:	3308      	adds	r3, #8
 810d574:	681b      	ldr	r3, [r3, #0]
 810d576:	43da      	mvns	r2, r3
 810d578:	687b      	ldr	r3, [r7, #4]
 810d57a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 810d57c:	683b      	ldr	r3, [r7, #0]
 810d57e:	3308      	adds	r3, #8
 810d580:	681b      	ldr	r3, [r3, #0]
 810d582:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 810d584:	429a      	cmp	r2, r3
 810d586:	d101      	bne.n	810d58c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 810d588:	2301      	movs	r3, #1
 810d58a:	e000      	b.n	810d58e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 810d58c:	2300      	movs	r3, #0
  }
}
 810d58e:	4618      	mov	r0, r3
 810d590:	3714      	adds	r7, #20
 810d592:	46bd      	mov	sp, r7
 810d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d598:	4770      	bx	lr
	...

0810d59c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 810d59c:	b580      	push	{r7, lr}
 810d59e:	b084      	sub	sp, #16
 810d5a0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 810d5a2:	2300      	movs	r3, #0
 810d5a4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 810d5a6:	4b12      	ldr	r3, [pc, #72]	@ (810d5f0 <ip_reass_tmr+0x54>)
 810d5a8:	681b      	ldr	r3, [r3, #0]
 810d5aa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 810d5ac:	e018      	b.n	810d5e0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 810d5ae:	68fb      	ldr	r3, [r7, #12]
 810d5b0:	7fdb      	ldrb	r3, [r3, #31]
 810d5b2:	2b00      	cmp	r3, #0
 810d5b4:	d00b      	beq.n	810d5ce <ip_reass_tmr+0x32>
      r->timer--;
 810d5b6:	68fb      	ldr	r3, [r7, #12]
 810d5b8:	7fdb      	ldrb	r3, [r3, #31]
 810d5ba:	3b01      	subs	r3, #1
 810d5bc:	b2da      	uxtb	r2, r3
 810d5be:	68fb      	ldr	r3, [r7, #12]
 810d5c0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 810d5c2:	68fb      	ldr	r3, [r7, #12]
 810d5c4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 810d5c6:	68fb      	ldr	r3, [r7, #12]
 810d5c8:	681b      	ldr	r3, [r3, #0]
 810d5ca:	60fb      	str	r3, [r7, #12]
 810d5cc:	e008      	b.n	810d5e0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 810d5ce:	68fb      	ldr	r3, [r7, #12]
 810d5d0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 810d5d2:	68fb      	ldr	r3, [r7, #12]
 810d5d4:	681b      	ldr	r3, [r3, #0]
 810d5d6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 810d5d8:	68b9      	ldr	r1, [r7, #8]
 810d5da:	6878      	ldr	r0, [r7, #4]
 810d5dc:	f000 f80a 	bl	810d5f4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 810d5e0:	68fb      	ldr	r3, [r7, #12]
 810d5e2:	2b00      	cmp	r3, #0
 810d5e4:	d1e3      	bne.n	810d5ae <ip_reass_tmr+0x12>
    }
  }
}
 810d5e6:	bf00      	nop
 810d5e8:	bf00      	nop
 810d5ea:	3710      	adds	r7, #16
 810d5ec:	46bd      	mov	sp, r7
 810d5ee:	bd80      	pop	{r7, pc}
 810d5f0:	10004d98 	.word	0x10004d98

0810d5f4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 810d5f4:	b580      	push	{r7, lr}
 810d5f6:	b088      	sub	sp, #32
 810d5f8:	af00      	add	r7, sp, #0
 810d5fa:	6078      	str	r0, [r7, #4]
 810d5fc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 810d5fe:	2300      	movs	r3, #0
 810d600:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 810d602:	683a      	ldr	r2, [r7, #0]
 810d604:	687b      	ldr	r3, [r7, #4]
 810d606:	429a      	cmp	r2, r3
 810d608:	d105      	bne.n	810d616 <ip_reass_free_complete_datagram+0x22>
 810d60a:	4b45      	ldr	r3, [pc, #276]	@ (810d720 <ip_reass_free_complete_datagram+0x12c>)
 810d60c:	22ab      	movs	r2, #171	@ 0xab
 810d60e:	4945      	ldr	r1, [pc, #276]	@ (810d724 <ip_reass_free_complete_datagram+0x130>)
 810d610:	4845      	ldr	r0, [pc, #276]	@ (810d728 <ip_reass_free_complete_datagram+0x134>)
 810d612:	f009 f969 	bl	81168e8 <iprintf>
  if (prev != NULL) {
 810d616:	683b      	ldr	r3, [r7, #0]
 810d618:	2b00      	cmp	r3, #0
 810d61a:	d00a      	beq.n	810d632 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 810d61c:	683b      	ldr	r3, [r7, #0]
 810d61e:	681b      	ldr	r3, [r3, #0]
 810d620:	687a      	ldr	r2, [r7, #4]
 810d622:	429a      	cmp	r2, r3
 810d624:	d005      	beq.n	810d632 <ip_reass_free_complete_datagram+0x3e>
 810d626:	4b3e      	ldr	r3, [pc, #248]	@ (810d720 <ip_reass_free_complete_datagram+0x12c>)
 810d628:	22ad      	movs	r2, #173	@ 0xad
 810d62a:	4940      	ldr	r1, [pc, #256]	@ (810d72c <ip_reass_free_complete_datagram+0x138>)
 810d62c:	483e      	ldr	r0, [pc, #248]	@ (810d728 <ip_reass_free_complete_datagram+0x134>)
 810d62e:	f009 f95b 	bl	81168e8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 810d632:	687b      	ldr	r3, [r7, #4]
 810d634:	685b      	ldr	r3, [r3, #4]
 810d636:	685b      	ldr	r3, [r3, #4]
 810d638:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 810d63a:	697b      	ldr	r3, [r7, #20]
 810d63c:	889b      	ldrh	r3, [r3, #4]
 810d63e:	b29b      	uxth	r3, r3
 810d640:	2b00      	cmp	r3, #0
 810d642:	d12a      	bne.n	810d69a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 810d644:	687b      	ldr	r3, [r7, #4]
 810d646:	685b      	ldr	r3, [r3, #4]
 810d648:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 810d64a:	697b      	ldr	r3, [r7, #20]
 810d64c:	681a      	ldr	r2, [r3, #0]
 810d64e:	687b      	ldr	r3, [r7, #4]
 810d650:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 810d652:	69bb      	ldr	r3, [r7, #24]
 810d654:	6858      	ldr	r0, [r3, #4]
 810d656:	687b      	ldr	r3, [r7, #4]
 810d658:	3308      	adds	r3, #8
 810d65a:	2214      	movs	r2, #20
 810d65c:	4619      	mov	r1, r3
 810d65e:	f009 fae2 	bl	8116c26 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 810d662:	2101      	movs	r1, #1
 810d664:	69b8      	ldr	r0, [r7, #24]
 810d666:	f7ff fb69 	bl	810cd3c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 810d66a:	69b8      	ldr	r0, [r7, #24]
 810d66c:	f002 fa1e 	bl	810faac <pbuf_clen>
 810d670:	4603      	mov	r3, r0
 810d672:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 810d674:	8bfa      	ldrh	r2, [r7, #30]
 810d676:	8a7b      	ldrh	r3, [r7, #18]
 810d678:	4413      	add	r3, r2
 810d67a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810d67e:	db05      	blt.n	810d68c <ip_reass_free_complete_datagram+0x98>
 810d680:	4b27      	ldr	r3, [pc, #156]	@ (810d720 <ip_reass_free_complete_datagram+0x12c>)
 810d682:	22bc      	movs	r2, #188	@ 0xbc
 810d684:	492a      	ldr	r1, [pc, #168]	@ (810d730 <ip_reass_free_complete_datagram+0x13c>)
 810d686:	4828      	ldr	r0, [pc, #160]	@ (810d728 <ip_reass_free_complete_datagram+0x134>)
 810d688:	f009 f92e 	bl	81168e8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 810d68c:	8bfa      	ldrh	r2, [r7, #30]
 810d68e:	8a7b      	ldrh	r3, [r7, #18]
 810d690:	4413      	add	r3, r2
 810d692:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 810d694:	69b8      	ldr	r0, [r7, #24]
 810d696:	f002 f97b 	bl	810f990 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 810d69a:	687b      	ldr	r3, [r7, #4]
 810d69c:	685b      	ldr	r3, [r3, #4]
 810d69e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 810d6a0:	e01f      	b.n	810d6e2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 810d6a2:	69bb      	ldr	r3, [r7, #24]
 810d6a4:	685b      	ldr	r3, [r3, #4]
 810d6a6:	617b      	str	r3, [r7, #20]
    pcur = p;
 810d6a8:	69bb      	ldr	r3, [r7, #24]
 810d6aa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 810d6ac:	697b      	ldr	r3, [r7, #20]
 810d6ae:	681b      	ldr	r3, [r3, #0]
 810d6b0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 810d6b2:	68f8      	ldr	r0, [r7, #12]
 810d6b4:	f002 f9fa 	bl	810faac <pbuf_clen>
 810d6b8:	4603      	mov	r3, r0
 810d6ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 810d6bc:	8bfa      	ldrh	r2, [r7, #30]
 810d6be:	8a7b      	ldrh	r3, [r7, #18]
 810d6c0:	4413      	add	r3, r2
 810d6c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810d6c6:	db05      	blt.n	810d6d4 <ip_reass_free_complete_datagram+0xe0>
 810d6c8:	4b15      	ldr	r3, [pc, #84]	@ (810d720 <ip_reass_free_complete_datagram+0x12c>)
 810d6ca:	22cc      	movs	r2, #204	@ 0xcc
 810d6cc:	4918      	ldr	r1, [pc, #96]	@ (810d730 <ip_reass_free_complete_datagram+0x13c>)
 810d6ce:	4816      	ldr	r0, [pc, #88]	@ (810d728 <ip_reass_free_complete_datagram+0x134>)
 810d6d0:	f009 f90a 	bl	81168e8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 810d6d4:	8bfa      	ldrh	r2, [r7, #30]
 810d6d6:	8a7b      	ldrh	r3, [r7, #18]
 810d6d8:	4413      	add	r3, r2
 810d6da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 810d6dc:	68f8      	ldr	r0, [r7, #12]
 810d6de:	f002 f957 	bl	810f990 <pbuf_free>
  while (p != NULL) {
 810d6e2:	69bb      	ldr	r3, [r7, #24]
 810d6e4:	2b00      	cmp	r3, #0
 810d6e6:	d1dc      	bne.n	810d6a2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 810d6e8:	6839      	ldr	r1, [r7, #0]
 810d6ea:	6878      	ldr	r0, [r7, #4]
 810d6ec:	f000 f8c2 	bl	810d874 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 810d6f0:	4b10      	ldr	r3, [pc, #64]	@ (810d734 <ip_reass_free_complete_datagram+0x140>)
 810d6f2:	881b      	ldrh	r3, [r3, #0]
 810d6f4:	8bfa      	ldrh	r2, [r7, #30]
 810d6f6:	429a      	cmp	r2, r3
 810d6f8:	d905      	bls.n	810d706 <ip_reass_free_complete_datagram+0x112>
 810d6fa:	4b09      	ldr	r3, [pc, #36]	@ (810d720 <ip_reass_free_complete_datagram+0x12c>)
 810d6fc:	22d2      	movs	r2, #210	@ 0xd2
 810d6fe:	490e      	ldr	r1, [pc, #56]	@ (810d738 <ip_reass_free_complete_datagram+0x144>)
 810d700:	4809      	ldr	r0, [pc, #36]	@ (810d728 <ip_reass_free_complete_datagram+0x134>)
 810d702:	f009 f8f1 	bl	81168e8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 810d706:	4b0b      	ldr	r3, [pc, #44]	@ (810d734 <ip_reass_free_complete_datagram+0x140>)
 810d708:	881a      	ldrh	r2, [r3, #0]
 810d70a:	8bfb      	ldrh	r3, [r7, #30]
 810d70c:	1ad3      	subs	r3, r2, r3
 810d70e:	b29a      	uxth	r2, r3
 810d710:	4b08      	ldr	r3, [pc, #32]	@ (810d734 <ip_reass_free_complete_datagram+0x140>)
 810d712:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 810d714:	8bfb      	ldrh	r3, [r7, #30]
}
 810d716:	4618      	mov	r0, r3
 810d718:	3720      	adds	r7, #32
 810d71a:	46bd      	mov	sp, r7
 810d71c:	bd80      	pop	{r7, pc}
 810d71e:	bf00      	nop
 810d720:	08117d30 	.word	0x08117d30
 810d724:	08117da8 	.word	0x08117da8
 810d728:	08117db4 	.word	0x08117db4
 810d72c:	08117ddc 	.word	0x08117ddc
 810d730:	08117df0 	.word	0x08117df0
 810d734:	10004d9c 	.word	0x10004d9c
 810d738:	08117e10 	.word	0x08117e10

0810d73c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 810d73c:	b580      	push	{r7, lr}
 810d73e:	b08a      	sub	sp, #40	@ 0x28
 810d740:	af00      	add	r7, sp, #0
 810d742:	6078      	str	r0, [r7, #4]
 810d744:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 810d746:	2300      	movs	r3, #0
 810d748:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 810d74a:	2300      	movs	r3, #0
 810d74c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 810d74e:	2300      	movs	r3, #0
 810d750:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 810d752:	2300      	movs	r3, #0
 810d754:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 810d756:	2300      	movs	r3, #0
 810d758:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 810d75a:	4b28      	ldr	r3, [pc, #160]	@ (810d7fc <ip_reass_remove_oldest_datagram+0xc0>)
 810d75c:	681b      	ldr	r3, [r3, #0]
 810d75e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 810d760:	e030      	b.n	810d7c4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 810d762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d764:	695a      	ldr	r2, [r3, #20]
 810d766:	687b      	ldr	r3, [r7, #4]
 810d768:	68db      	ldr	r3, [r3, #12]
 810d76a:	429a      	cmp	r2, r3
 810d76c:	d10c      	bne.n	810d788 <ip_reass_remove_oldest_datagram+0x4c>
 810d76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d770:	699a      	ldr	r2, [r3, #24]
 810d772:	687b      	ldr	r3, [r7, #4]
 810d774:	691b      	ldr	r3, [r3, #16]
 810d776:	429a      	cmp	r2, r3
 810d778:	d106      	bne.n	810d788 <ip_reass_remove_oldest_datagram+0x4c>
 810d77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d77c:	899a      	ldrh	r2, [r3, #12]
 810d77e:	687b      	ldr	r3, [r7, #4]
 810d780:	889b      	ldrh	r3, [r3, #4]
 810d782:	b29b      	uxth	r3, r3
 810d784:	429a      	cmp	r2, r3
 810d786:	d014      	beq.n	810d7b2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 810d788:	693b      	ldr	r3, [r7, #16]
 810d78a:	3301      	adds	r3, #1
 810d78c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 810d78e:	6a3b      	ldr	r3, [r7, #32]
 810d790:	2b00      	cmp	r3, #0
 810d792:	d104      	bne.n	810d79e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 810d794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d796:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 810d798:	69fb      	ldr	r3, [r7, #28]
 810d79a:	61bb      	str	r3, [r7, #24]
 810d79c:	e009      	b.n	810d7b2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 810d79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d7a0:	7fda      	ldrb	r2, [r3, #31]
 810d7a2:	6a3b      	ldr	r3, [r7, #32]
 810d7a4:	7fdb      	ldrb	r3, [r3, #31]
 810d7a6:	429a      	cmp	r2, r3
 810d7a8:	d803      	bhi.n	810d7b2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 810d7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d7ac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 810d7ae:	69fb      	ldr	r3, [r7, #28]
 810d7b0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 810d7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d7b4:	681b      	ldr	r3, [r3, #0]
 810d7b6:	2b00      	cmp	r3, #0
 810d7b8:	d001      	beq.n	810d7be <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 810d7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d7bc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 810d7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d7c0:	681b      	ldr	r3, [r3, #0]
 810d7c2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 810d7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d7c6:	2b00      	cmp	r3, #0
 810d7c8:	d1cb      	bne.n	810d762 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 810d7ca:	6a3b      	ldr	r3, [r7, #32]
 810d7cc:	2b00      	cmp	r3, #0
 810d7ce:	d008      	beq.n	810d7e2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 810d7d0:	69b9      	ldr	r1, [r7, #24]
 810d7d2:	6a38      	ldr	r0, [r7, #32]
 810d7d4:	f7ff ff0e 	bl	810d5f4 <ip_reass_free_complete_datagram>
 810d7d8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 810d7da:	697a      	ldr	r2, [r7, #20]
 810d7dc:	68fb      	ldr	r3, [r7, #12]
 810d7de:	4413      	add	r3, r2
 810d7e0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 810d7e2:	697a      	ldr	r2, [r7, #20]
 810d7e4:	683b      	ldr	r3, [r7, #0]
 810d7e6:	429a      	cmp	r2, r3
 810d7e8:	da02      	bge.n	810d7f0 <ip_reass_remove_oldest_datagram+0xb4>
 810d7ea:	693b      	ldr	r3, [r7, #16]
 810d7ec:	2b01      	cmp	r3, #1
 810d7ee:	dcac      	bgt.n	810d74a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 810d7f0:	697b      	ldr	r3, [r7, #20]
}
 810d7f2:	4618      	mov	r0, r3
 810d7f4:	3728      	adds	r7, #40	@ 0x28
 810d7f6:	46bd      	mov	sp, r7
 810d7f8:	bd80      	pop	{r7, pc}
 810d7fa:	bf00      	nop
 810d7fc:	10004d98 	.word	0x10004d98

0810d800 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 810d800:	b580      	push	{r7, lr}
 810d802:	b084      	sub	sp, #16
 810d804:	af00      	add	r7, sp, #0
 810d806:	6078      	str	r0, [r7, #4]
 810d808:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 810d80a:	2004      	movs	r0, #4
 810d80c:	f001 f9a2 	bl	810eb54 <memp_malloc>
 810d810:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 810d812:	68fb      	ldr	r3, [r7, #12]
 810d814:	2b00      	cmp	r3, #0
 810d816:	d110      	bne.n	810d83a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 810d818:	6839      	ldr	r1, [r7, #0]
 810d81a:	6878      	ldr	r0, [r7, #4]
 810d81c:	f7ff ff8e 	bl	810d73c <ip_reass_remove_oldest_datagram>
 810d820:	4602      	mov	r2, r0
 810d822:	683b      	ldr	r3, [r7, #0]
 810d824:	4293      	cmp	r3, r2
 810d826:	dc03      	bgt.n	810d830 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 810d828:	2004      	movs	r0, #4
 810d82a:	f001 f993 	bl	810eb54 <memp_malloc>
 810d82e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 810d830:	68fb      	ldr	r3, [r7, #12]
 810d832:	2b00      	cmp	r3, #0
 810d834:	d101      	bne.n	810d83a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 810d836:	2300      	movs	r3, #0
 810d838:	e016      	b.n	810d868 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 810d83a:	2220      	movs	r2, #32
 810d83c:	2100      	movs	r1, #0
 810d83e:	68f8      	ldr	r0, [r7, #12]
 810d840:	f009 f8d1 	bl	81169e6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 810d844:	68fb      	ldr	r3, [r7, #12]
 810d846:	220f      	movs	r2, #15
 810d848:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 810d84a:	4b09      	ldr	r3, [pc, #36]	@ (810d870 <ip_reass_enqueue_new_datagram+0x70>)
 810d84c:	681a      	ldr	r2, [r3, #0]
 810d84e:	68fb      	ldr	r3, [r7, #12]
 810d850:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 810d852:	4a07      	ldr	r2, [pc, #28]	@ (810d870 <ip_reass_enqueue_new_datagram+0x70>)
 810d854:	68fb      	ldr	r3, [r7, #12]
 810d856:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 810d858:	68fb      	ldr	r3, [r7, #12]
 810d85a:	3308      	adds	r3, #8
 810d85c:	2214      	movs	r2, #20
 810d85e:	6879      	ldr	r1, [r7, #4]
 810d860:	4618      	mov	r0, r3
 810d862:	f009 f9e0 	bl	8116c26 <memcpy>
  return ipr;
 810d866:	68fb      	ldr	r3, [r7, #12]
}
 810d868:	4618      	mov	r0, r3
 810d86a:	3710      	adds	r7, #16
 810d86c:	46bd      	mov	sp, r7
 810d86e:	bd80      	pop	{r7, pc}
 810d870:	10004d98 	.word	0x10004d98

0810d874 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 810d874:	b580      	push	{r7, lr}
 810d876:	b082      	sub	sp, #8
 810d878:	af00      	add	r7, sp, #0
 810d87a:	6078      	str	r0, [r7, #4]
 810d87c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 810d87e:	4b10      	ldr	r3, [pc, #64]	@ (810d8c0 <ip_reass_dequeue_datagram+0x4c>)
 810d880:	681b      	ldr	r3, [r3, #0]
 810d882:	687a      	ldr	r2, [r7, #4]
 810d884:	429a      	cmp	r2, r3
 810d886:	d104      	bne.n	810d892 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 810d888:	687b      	ldr	r3, [r7, #4]
 810d88a:	681b      	ldr	r3, [r3, #0]
 810d88c:	4a0c      	ldr	r2, [pc, #48]	@ (810d8c0 <ip_reass_dequeue_datagram+0x4c>)
 810d88e:	6013      	str	r3, [r2, #0]
 810d890:	e00d      	b.n	810d8ae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 810d892:	683b      	ldr	r3, [r7, #0]
 810d894:	2b00      	cmp	r3, #0
 810d896:	d106      	bne.n	810d8a6 <ip_reass_dequeue_datagram+0x32>
 810d898:	4b0a      	ldr	r3, [pc, #40]	@ (810d8c4 <ip_reass_dequeue_datagram+0x50>)
 810d89a:	f240 1245 	movw	r2, #325	@ 0x145
 810d89e:	490a      	ldr	r1, [pc, #40]	@ (810d8c8 <ip_reass_dequeue_datagram+0x54>)
 810d8a0:	480a      	ldr	r0, [pc, #40]	@ (810d8cc <ip_reass_dequeue_datagram+0x58>)
 810d8a2:	f009 f821 	bl	81168e8 <iprintf>
    prev->next = ipr->next;
 810d8a6:	687b      	ldr	r3, [r7, #4]
 810d8a8:	681a      	ldr	r2, [r3, #0]
 810d8aa:	683b      	ldr	r3, [r7, #0]
 810d8ac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 810d8ae:	6879      	ldr	r1, [r7, #4]
 810d8b0:	2004      	movs	r0, #4
 810d8b2:	f001 f9c5 	bl	810ec40 <memp_free>
}
 810d8b6:	bf00      	nop
 810d8b8:	3708      	adds	r7, #8
 810d8ba:	46bd      	mov	sp, r7
 810d8bc:	bd80      	pop	{r7, pc}
 810d8be:	bf00      	nop
 810d8c0:	10004d98 	.word	0x10004d98
 810d8c4:	08117d30 	.word	0x08117d30
 810d8c8:	08117e34 	.word	0x08117e34
 810d8cc:	08117db4 	.word	0x08117db4

0810d8d0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 810d8d0:	b580      	push	{r7, lr}
 810d8d2:	b08c      	sub	sp, #48	@ 0x30
 810d8d4:	af00      	add	r7, sp, #0
 810d8d6:	60f8      	str	r0, [r7, #12]
 810d8d8:	60b9      	str	r1, [r7, #8]
 810d8da:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 810d8dc:	2300      	movs	r3, #0
 810d8de:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 810d8e0:	2301      	movs	r3, #1
 810d8e2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 810d8e4:	68bb      	ldr	r3, [r7, #8]
 810d8e6:	685b      	ldr	r3, [r3, #4]
 810d8e8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 810d8ea:	69fb      	ldr	r3, [r7, #28]
 810d8ec:	885b      	ldrh	r3, [r3, #2]
 810d8ee:	b29b      	uxth	r3, r3
 810d8f0:	4618      	mov	r0, r3
 810d8f2:	f7fe f8a3 	bl	810ba3c <lwip_htons>
 810d8f6:	4603      	mov	r3, r0
 810d8f8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 810d8fa:	69fb      	ldr	r3, [r7, #28]
 810d8fc:	781b      	ldrb	r3, [r3, #0]
 810d8fe:	f003 030f 	and.w	r3, r3, #15
 810d902:	b2db      	uxtb	r3, r3
 810d904:	009b      	lsls	r3, r3, #2
 810d906:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 810d908:	7e7b      	ldrb	r3, [r7, #25]
 810d90a:	b29b      	uxth	r3, r3
 810d90c:	8b7a      	ldrh	r2, [r7, #26]
 810d90e:	429a      	cmp	r2, r3
 810d910:	d202      	bcs.n	810d918 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 810d912:	f04f 33ff 	mov.w	r3, #4294967295
 810d916:	e135      	b.n	810db84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 810d918:	7e7b      	ldrb	r3, [r7, #25]
 810d91a:	b29b      	uxth	r3, r3
 810d91c:	8b7a      	ldrh	r2, [r7, #26]
 810d91e:	1ad3      	subs	r3, r2, r3
 810d920:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 810d922:	69fb      	ldr	r3, [r7, #28]
 810d924:	88db      	ldrh	r3, [r3, #6]
 810d926:	b29b      	uxth	r3, r3
 810d928:	4618      	mov	r0, r3
 810d92a:	f7fe f887 	bl	810ba3c <lwip_htons>
 810d92e:	4603      	mov	r3, r0
 810d930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810d934:	b29b      	uxth	r3, r3
 810d936:	00db      	lsls	r3, r3, #3
 810d938:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 810d93a:	68bb      	ldr	r3, [r7, #8]
 810d93c:	685b      	ldr	r3, [r3, #4]
 810d93e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 810d940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d942:	2200      	movs	r2, #0
 810d944:	701a      	strb	r2, [r3, #0]
 810d946:	2200      	movs	r2, #0
 810d948:	705a      	strb	r2, [r3, #1]
 810d94a:	2200      	movs	r2, #0
 810d94c:	709a      	strb	r2, [r3, #2]
 810d94e:	2200      	movs	r2, #0
 810d950:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 810d952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d954:	8afa      	ldrh	r2, [r7, #22]
 810d956:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 810d958:	8afa      	ldrh	r2, [r7, #22]
 810d95a:	8b7b      	ldrh	r3, [r7, #26]
 810d95c:	4413      	add	r3, r2
 810d95e:	b29a      	uxth	r2, r3
 810d960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d962:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 810d964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d966:	88db      	ldrh	r3, [r3, #6]
 810d968:	b29b      	uxth	r3, r3
 810d96a:	8afa      	ldrh	r2, [r7, #22]
 810d96c:	429a      	cmp	r2, r3
 810d96e:	d902      	bls.n	810d976 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 810d970:	f04f 33ff 	mov.w	r3, #4294967295
 810d974:	e106      	b.n	810db84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 810d976:	68fb      	ldr	r3, [r7, #12]
 810d978:	685b      	ldr	r3, [r3, #4]
 810d97a:	627b      	str	r3, [r7, #36]	@ 0x24
 810d97c:	e068      	b.n	810da50 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 810d97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d980:	685b      	ldr	r3, [r3, #4]
 810d982:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 810d984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d986:	889b      	ldrh	r3, [r3, #4]
 810d988:	b29a      	uxth	r2, r3
 810d98a:	693b      	ldr	r3, [r7, #16]
 810d98c:	889b      	ldrh	r3, [r3, #4]
 810d98e:	b29b      	uxth	r3, r3
 810d990:	429a      	cmp	r2, r3
 810d992:	d235      	bcs.n	810da00 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 810d994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810d998:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 810d99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d99c:	2b00      	cmp	r3, #0
 810d99e:	d020      	beq.n	810d9e2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 810d9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d9a2:	889b      	ldrh	r3, [r3, #4]
 810d9a4:	b29a      	uxth	r2, r3
 810d9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d9a8:	88db      	ldrh	r3, [r3, #6]
 810d9aa:	b29b      	uxth	r3, r3
 810d9ac:	429a      	cmp	r2, r3
 810d9ae:	d307      	bcc.n	810d9c0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 810d9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d9b2:	88db      	ldrh	r3, [r3, #6]
 810d9b4:	b29a      	uxth	r2, r3
 810d9b6:	693b      	ldr	r3, [r7, #16]
 810d9b8:	889b      	ldrh	r3, [r3, #4]
 810d9ba:	b29b      	uxth	r3, r3
 810d9bc:	429a      	cmp	r2, r3
 810d9be:	d902      	bls.n	810d9c6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 810d9c0:	f04f 33ff 	mov.w	r3, #4294967295
 810d9c4:	e0de      	b.n	810db84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 810d9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d9c8:	68ba      	ldr	r2, [r7, #8]
 810d9ca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 810d9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d9ce:	88db      	ldrh	r3, [r3, #6]
 810d9d0:	b29a      	uxth	r2, r3
 810d9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d9d4:	889b      	ldrh	r3, [r3, #4]
 810d9d6:	b29b      	uxth	r3, r3
 810d9d8:	429a      	cmp	r2, r3
 810d9da:	d03d      	beq.n	810da58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 810d9dc:	2300      	movs	r3, #0
 810d9de:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 810d9e0:	e03a      	b.n	810da58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 810d9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d9e4:	88db      	ldrh	r3, [r3, #6]
 810d9e6:	b29a      	uxth	r2, r3
 810d9e8:	693b      	ldr	r3, [r7, #16]
 810d9ea:	889b      	ldrh	r3, [r3, #4]
 810d9ec:	b29b      	uxth	r3, r3
 810d9ee:	429a      	cmp	r2, r3
 810d9f0:	d902      	bls.n	810d9f8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 810d9f2:	f04f 33ff 	mov.w	r3, #4294967295
 810d9f6:	e0c5      	b.n	810db84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 810d9f8:	68fb      	ldr	r3, [r7, #12]
 810d9fa:	68ba      	ldr	r2, [r7, #8]
 810d9fc:	605a      	str	r2, [r3, #4]
      break;
 810d9fe:	e02b      	b.n	810da58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 810da00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810da02:	889b      	ldrh	r3, [r3, #4]
 810da04:	b29a      	uxth	r2, r3
 810da06:	693b      	ldr	r3, [r7, #16]
 810da08:	889b      	ldrh	r3, [r3, #4]
 810da0a:	b29b      	uxth	r3, r3
 810da0c:	429a      	cmp	r2, r3
 810da0e:	d102      	bne.n	810da16 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 810da10:	f04f 33ff 	mov.w	r3, #4294967295
 810da14:	e0b6      	b.n	810db84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 810da16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810da18:	889b      	ldrh	r3, [r3, #4]
 810da1a:	b29a      	uxth	r2, r3
 810da1c:	693b      	ldr	r3, [r7, #16]
 810da1e:	88db      	ldrh	r3, [r3, #6]
 810da20:	b29b      	uxth	r3, r3
 810da22:	429a      	cmp	r2, r3
 810da24:	d202      	bcs.n	810da2c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 810da26:	f04f 33ff 	mov.w	r3, #4294967295
 810da2a:	e0ab      	b.n	810db84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 810da2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810da2e:	2b00      	cmp	r3, #0
 810da30:	d009      	beq.n	810da46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 810da32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810da34:	88db      	ldrh	r3, [r3, #6]
 810da36:	b29a      	uxth	r2, r3
 810da38:	693b      	ldr	r3, [r7, #16]
 810da3a:	889b      	ldrh	r3, [r3, #4]
 810da3c:	b29b      	uxth	r3, r3
 810da3e:	429a      	cmp	r2, r3
 810da40:	d001      	beq.n	810da46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 810da42:	2300      	movs	r3, #0
 810da44:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 810da46:	693b      	ldr	r3, [r7, #16]
 810da48:	681b      	ldr	r3, [r3, #0]
 810da4a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 810da4c:	693b      	ldr	r3, [r7, #16]
 810da4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 810da50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810da52:	2b00      	cmp	r3, #0
 810da54:	d193      	bne.n	810d97e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 810da56:	e000      	b.n	810da5a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 810da58:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 810da5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810da5c:	2b00      	cmp	r3, #0
 810da5e:	d12d      	bne.n	810dabc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 810da60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810da62:	2b00      	cmp	r3, #0
 810da64:	d01c      	beq.n	810daa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 810da66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810da68:	88db      	ldrh	r3, [r3, #6]
 810da6a:	b29a      	uxth	r2, r3
 810da6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810da6e:	889b      	ldrh	r3, [r3, #4]
 810da70:	b29b      	uxth	r3, r3
 810da72:	429a      	cmp	r2, r3
 810da74:	d906      	bls.n	810da84 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 810da76:	4b45      	ldr	r3, [pc, #276]	@ (810db8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810da78:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 810da7c:	4944      	ldr	r1, [pc, #272]	@ (810db90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 810da7e:	4845      	ldr	r0, [pc, #276]	@ (810db94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810da80:	f008 ff32 	bl	81168e8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 810da84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810da86:	68ba      	ldr	r2, [r7, #8]
 810da88:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 810da8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810da8c:	88db      	ldrh	r3, [r3, #6]
 810da8e:	b29a      	uxth	r2, r3
 810da90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810da92:	889b      	ldrh	r3, [r3, #4]
 810da94:	b29b      	uxth	r3, r3
 810da96:	429a      	cmp	r2, r3
 810da98:	d010      	beq.n	810dabc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 810da9a:	2300      	movs	r3, #0
 810da9c:	623b      	str	r3, [r7, #32]
 810da9e:	e00d      	b.n	810dabc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 810daa0:	68fb      	ldr	r3, [r7, #12]
 810daa2:	685b      	ldr	r3, [r3, #4]
 810daa4:	2b00      	cmp	r3, #0
 810daa6:	d006      	beq.n	810dab6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 810daa8:	4b38      	ldr	r3, [pc, #224]	@ (810db8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810daaa:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 810daae:	493a      	ldr	r1, [pc, #232]	@ (810db98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 810dab0:	4838      	ldr	r0, [pc, #224]	@ (810db94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810dab2:	f008 ff19 	bl	81168e8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 810dab6:	68fb      	ldr	r3, [r7, #12]
 810dab8:	68ba      	ldr	r2, [r7, #8]
 810daba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 810dabc:	687b      	ldr	r3, [r7, #4]
 810dabe:	2b00      	cmp	r3, #0
 810dac0:	d105      	bne.n	810dace <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 810dac2:	68fb      	ldr	r3, [r7, #12]
 810dac4:	7f9b      	ldrb	r3, [r3, #30]
 810dac6:	f003 0301 	and.w	r3, r3, #1
 810daca:	2b00      	cmp	r3, #0
 810dacc:	d059      	beq.n	810db82 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 810dace:	6a3b      	ldr	r3, [r7, #32]
 810dad0:	2b00      	cmp	r3, #0
 810dad2:	d04f      	beq.n	810db74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 810dad4:	68fb      	ldr	r3, [r7, #12]
 810dad6:	685b      	ldr	r3, [r3, #4]
 810dad8:	2b00      	cmp	r3, #0
 810dada:	d006      	beq.n	810daea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 810dadc:	68fb      	ldr	r3, [r7, #12]
 810dade:	685b      	ldr	r3, [r3, #4]
 810dae0:	685b      	ldr	r3, [r3, #4]
 810dae2:	889b      	ldrh	r3, [r3, #4]
 810dae4:	b29b      	uxth	r3, r3
 810dae6:	2b00      	cmp	r3, #0
 810dae8:	d002      	beq.n	810daf0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 810daea:	2300      	movs	r3, #0
 810daec:	623b      	str	r3, [r7, #32]
 810daee:	e041      	b.n	810db74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 810daf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810daf2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 810daf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810daf6:	681b      	ldr	r3, [r3, #0]
 810daf8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 810dafa:	e012      	b.n	810db22 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 810dafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dafe:	685b      	ldr	r3, [r3, #4]
 810db00:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 810db02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810db04:	88db      	ldrh	r3, [r3, #6]
 810db06:	b29a      	uxth	r2, r3
 810db08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810db0a:	889b      	ldrh	r3, [r3, #4]
 810db0c:	b29b      	uxth	r3, r3
 810db0e:	429a      	cmp	r2, r3
 810db10:	d002      	beq.n	810db18 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 810db12:	2300      	movs	r3, #0
 810db14:	623b      	str	r3, [r7, #32]
            break;
 810db16:	e007      	b.n	810db28 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 810db18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810db1a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 810db1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810db1e:	681b      	ldr	r3, [r3, #0]
 810db20:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 810db22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810db24:	2b00      	cmp	r3, #0
 810db26:	d1e9      	bne.n	810dafc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 810db28:	6a3b      	ldr	r3, [r7, #32]
 810db2a:	2b00      	cmp	r3, #0
 810db2c:	d022      	beq.n	810db74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 810db2e:	68fb      	ldr	r3, [r7, #12]
 810db30:	685b      	ldr	r3, [r3, #4]
 810db32:	2b00      	cmp	r3, #0
 810db34:	d106      	bne.n	810db44 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 810db36:	4b15      	ldr	r3, [pc, #84]	@ (810db8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810db38:	f240 12df 	movw	r2, #479	@ 0x1df
 810db3c:	4917      	ldr	r1, [pc, #92]	@ (810db9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 810db3e:	4815      	ldr	r0, [pc, #84]	@ (810db94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810db40:	f008 fed2 	bl	81168e8 <iprintf>
          LWIP_ASSERT("sanity check",
 810db44:	68fb      	ldr	r3, [r7, #12]
 810db46:	685b      	ldr	r3, [r3, #4]
 810db48:	685b      	ldr	r3, [r3, #4]
 810db4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810db4c:	429a      	cmp	r2, r3
 810db4e:	d106      	bne.n	810db5e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 810db50:	4b0e      	ldr	r3, [pc, #56]	@ (810db8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810db52:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810db56:	4911      	ldr	r1, [pc, #68]	@ (810db9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 810db58:	480e      	ldr	r0, [pc, #56]	@ (810db94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810db5a:	f008 fec5 	bl	81168e8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 810db5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810db60:	681b      	ldr	r3, [r3, #0]
 810db62:	2b00      	cmp	r3, #0
 810db64:	d006      	beq.n	810db74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 810db66:	4b09      	ldr	r3, [pc, #36]	@ (810db8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810db68:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 810db6c:	490c      	ldr	r1, [pc, #48]	@ (810dba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 810db6e:	4809      	ldr	r0, [pc, #36]	@ (810db94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810db70:	f008 feba 	bl	81168e8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 810db74:	6a3b      	ldr	r3, [r7, #32]
 810db76:	2b00      	cmp	r3, #0
 810db78:	bf14      	ite	ne
 810db7a:	2301      	movne	r3, #1
 810db7c:	2300      	moveq	r3, #0
 810db7e:	b2db      	uxtb	r3, r3
 810db80:	e000      	b.n	810db84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 810db82:	2300      	movs	r3, #0
}
 810db84:	4618      	mov	r0, r3
 810db86:	3730      	adds	r7, #48	@ 0x30
 810db88:	46bd      	mov	sp, r7
 810db8a:	bd80      	pop	{r7, pc}
 810db8c:	08117d30 	.word	0x08117d30
 810db90:	08117e50 	.word	0x08117e50
 810db94:	08117db4 	.word	0x08117db4
 810db98:	08117e70 	.word	0x08117e70
 810db9c:	08117ea8 	.word	0x08117ea8
 810dba0:	08117eb8 	.word	0x08117eb8

0810dba4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 810dba4:	b580      	push	{r7, lr}
 810dba6:	b08e      	sub	sp, #56	@ 0x38
 810dba8:	af00      	add	r7, sp, #0
 810dbaa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 810dbac:	687b      	ldr	r3, [r7, #4]
 810dbae:	685b      	ldr	r3, [r3, #4]
 810dbb0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 810dbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dbb4:	781b      	ldrb	r3, [r3, #0]
 810dbb6:	f003 030f 	and.w	r3, r3, #15
 810dbba:	b2db      	uxtb	r3, r3
 810dbbc:	009b      	lsls	r3, r3, #2
 810dbbe:	b2db      	uxtb	r3, r3
 810dbc0:	2b14      	cmp	r3, #20
 810dbc2:	f040 8171 	bne.w	810dea8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 810dbc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dbc8:	88db      	ldrh	r3, [r3, #6]
 810dbca:	b29b      	uxth	r3, r3
 810dbcc:	4618      	mov	r0, r3
 810dbce:	f7fd ff35 	bl	810ba3c <lwip_htons>
 810dbd2:	4603      	mov	r3, r0
 810dbd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810dbd8:	b29b      	uxth	r3, r3
 810dbda:	00db      	lsls	r3, r3, #3
 810dbdc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 810dbde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dbe0:	885b      	ldrh	r3, [r3, #2]
 810dbe2:	b29b      	uxth	r3, r3
 810dbe4:	4618      	mov	r0, r3
 810dbe6:	f7fd ff29 	bl	810ba3c <lwip_htons>
 810dbea:	4603      	mov	r3, r0
 810dbec:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 810dbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dbf0:	781b      	ldrb	r3, [r3, #0]
 810dbf2:	f003 030f 	and.w	r3, r3, #15
 810dbf6:	b2db      	uxtb	r3, r3
 810dbf8:	009b      	lsls	r3, r3, #2
 810dbfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 810dbfe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 810dc02:	b29b      	uxth	r3, r3
 810dc04:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 810dc06:	429a      	cmp	r2, r3
 810dc08:	f0c0 8150 	bcc.w	810deac <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 810dc0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 810dc10:	b29b      	uxth	r3, r3
 810dc12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 810dc14:	1ad3      	subs	r3, r2, r3
 810dc16:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 810dc18:	6878      	ldr	r0, [r7, #4]
 810dc1a:	f001 ff47 	bl	810faac <pbuf_clen>
 810dc1e:	4603      	mov	r3, r0
 810dc20:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 810dc22:	4b8c      	ldr	r3, [pc, #560]	@ (810de54 <ip4_reass+0x2b0>)
 810dc24:	881b      	ldrh	r3, [r3, #0]
 810dc26:	461a      	mov	r2, r3
 810dc28:	8c3b      	ldrh	r3, [r7, #32]
 810dc2a:	4413      	add	r3, r2
 810dc2c:	2b0a      	cmp	r3, #10
 810dc2e:	dd10      	ble.n	810dc52 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 810dc30:	8c3b      	ldrh	r3, [r7, #32]
 810dc32:	4619      	mov	r1, r3
 810dc34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810dc36:	f7ff fd81 	bl	810d73c <ip_reass_remove_oldest_datagram>
 810dc3a:	4603      	mov	r3, r0
 810dc3c:	2b00      	cmp	r3, #0
 810dc3e:	f000 8137 	beq.w	810deb0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 810dc42:	4b84      	ldr	r3, [pc, #528]	@ (810de54 <ip4_reass+0x2b0>)
 810dc44:	881b      	ldrh	r3, [r3, #0]
 810dc46:	461a      	mov	r2, r3
 810dc48:	8c3b      	ldrh	r3, [r7, #32]
 810dc4a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 810dc4c:	2b0a      	cmp	r3, #10
 810dc4e:	f300 812f 	bgt.w	810deb0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 810dc52:	4b81      	ldr	r3, [pc, #516]	@ (810de58 <ip4_reass+0x2b4>)
 810dc54:	681b      	ldr	r3, [r3, #0]
 810dc56:	633b      	str	r3, [r7, #48]	@ 0x30
 810dc58:	e015      	b.n	810dc86 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 810dc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc5c:	695a      	ldr	r2, [r3, #20]
 810dc5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dc60:	68db      	ldr	r3, [r3, #12]
 810dc62:	429a      	cmp	r2, r3
 810dc64:	d10c      	bne.n	810dc80 <ip4_reass+0xdc>
 810dc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc68:	699a      	ldr	r2, [r3, #24]
 810dc6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dc6c:	691b      	ldr	r3, [r3, #16]
 810dc6e:	429a      	cmp	r2, r3
 810dc70:	d106      	bne.n	810dc80 <ip4_reass+0xdc>
 810dc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc74:	899a      	ldrh	r2, [r3, #12]
 810dc76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dc78:	889b      	ldrh	r3, [r3, #4]
 810dc7a:	b29b      	uxth	r3, r3
 810dc7c:	429a      	cmp	r2, r3
 810dc7e:	d006      	beq.n	810dc8e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 810dc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc82:	681b      	ldr	r3, [r3, #0]
 810dc84:	633b      	str	r3, [r7, #48]	@ 0x30
 810dc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc88:	2b00      	cmp	r3, #0
 810dc8a:	d1e6      	bne.n	810dc5a <ip4_reass+0xb6>
 810dc8c:	e000      	b.n	810dc90 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 810dc8e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 810dc90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dc92:	2b00      	cmp	r3, #0
 810dc94:	d109      	bne.n	810dcaa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 810dc96:	8c3b      	ldrh	r3, [r7, #32]
 810dc98:	4619      	mov	r1, r3
 810dc9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810dc9c:	f7ff fdb0 	bl	810d800 <ip_reass_enqueue_new_datagram>
 810dca0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 810dca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dca4:	2b00      	cmp	r3, #0
 810dca6:	d11c      	bne.n	810dce2 <ip4_reass+0x13e>
      goto nullreturn;
 810dca8:	e105      	b.n	810deb6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 810dcaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dcac:	88db      	ldrh	r3, [r3, #6]
 810dcae:	b29b      	uxth	r3, r3
 810dcb0:	4618      	mov	r0, r3
 810dcb2:	f7fd fec3 	bl	810ba3c <lwip_htons>
 810dcb6:	4603      	mov	r3, r0
 810dcb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810dcbc:	2b00      	cmp	r3, #0
 810dcbe:	d110      	bne.n	810dce2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 810dcc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dcc2:	89db      	ldrh	r3, [r3, #14]
 810dcc4:	4618      	mov	r0, r3
 810dcc6:	f7fd feb9 	bl	810ba3c <lwip_htons>
 810dcca:	4603      	mov	r3, r0
 810dccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 810dcd0:	2b00      	cmp	r3, #0
 810dcd2:	d006      	beq.n	810dce2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 810dcd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dcd6:	3308      	adds	r3, #8
 810dcd8:	2214      	movs	r2, #20
 810dcda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810dcdc:	4618      	mov	r0, r3
 810dcde:	f008 ffa2 	bl	8116c26 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 810dce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dce4:	88db      	ldrh	r3, [r3, #6]
 810dce6:	b29b      	uxth	r3, r3
 810dce8:	f003 0320 	and.w	r3, r3, #32
 810dcec:	2b00      	cmp	r3, #0
 810dcee:	bf0c      	ite	eq
 810dcf0:	2301      	moveq	r3, #1
 810dcf2:	2300      	movne	r3, #0
 810dcf4:	b2db      	uxtb	r3, r3
 810dcf6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 810dcf8:	69fb      	ldr	r3, [r7, #28]
 810dcfa:	2b00      	cmp	r3, #0
 810dcfc:	d00e      	beq.n	810dd1c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 810dcfe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 810dd00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810dd02:	4413      	add	r3, r2
 810dd04:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 810dd06:	8b7a      	ldrh	r2, [r7, #26]
 810dd08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 810dd0a:	429a      	cmp	r2, r3
 810dd0c:	f0c0 80a0 	bcc.w	810de50 <ip4_reass+0x2ac>
 810dd10:	8b7b      	ldrh	r3, [r7, #26]
 810dd12:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 810dd16:	4293      	cmp	r3, r2
 810dd18:	f200 809a 	bhi.w	810de50 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 810dd1c:	69fa      	ldr	r2, [r7, #28]
 810dd1e:	6879      	ldr	r1, [r7, #4]
 810dd20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810dd22:	f7ff fdd5 	bl	810d8d0 <ip_reass_chain_frag_into_datagram_and_validate>
 810dd26:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 810dd28:	697b      	ldr	r3, [r7, #20]
 810dd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810dd2e:	f000 809b 	beq.w	810de68 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 810dd32:	4b48      	ldr	r3, [pc, #288]	@ (810de54 <ip4_reass+0x2b0>)
 810dd34:	881a      	ldrh	r2, [r3, #0]
 810dd36:	8c3b      	ldrh	r3, [r7, #32]
 810dd38:	4413      	add	r3, r2
 810dd3a:	b29a      	uxth	r2, r3
 810dd3c:	4b45      	ldr	r3, [pc, #276]	@ (810de54 <ip4_reass+0x2b0>)
 810dd3e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 810dd40:	69fb      	ldr	r3, [r7, #28]
 810dd42:	2b00      	cmp	r3, #0
 810dd44:	d00d      	beq.n	810dd62 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 810dd46:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 810dd48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810dd4a:	4413      	add	r3, r2
 810dd4c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 810dd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd50:	8a7a      	ldrh	r2, [r7, #18]
 810dd52:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 810dd54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd56:	7f9b      	ldrb	r3, [r3, #30]
 810dd58:	f043 0301 	orr.w	r3, r3, #1
 810dd5c:	b2da      	uxtb	r2, r3
 810dd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd60:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 810dd62:	697b      	ldr	r3, [r7, #20]
 810dd64:	2b01      	cmp	r3, #1
 810dd66:	d171      	bne.n	810de4c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 810dd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd6a:	8b9b      	ldrh	r3, [r3, #28]
 810dd6c:	3314      	adds	r3, #20
 810dd6e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 810dd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd72:	685b      	ldr	r3, [r3, #4]
 810dd74:	685b      	ldr	r3, [r3, #4]
 810dd76:	681b      	ldr	r3, [r3, #0]
 810dd78:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 810dd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd7c:	685b      	ldr	r3, [r3, #4]
 810dd7e:	685b      	ldr	r3, [r3, #4]
 810dd80:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 810dd82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd84:	3308      	adds	r3, #8
 810dd86:	2214      	movs	r2, #20
 810dd88:	4619      	mov	r1, r3
 810dd8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810dd8c:	f008 ff4b 	bl	8116c26 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 810dd90:	8a3b      	ldrh	r3, [r7, #16]
 810dd92:	4618      	mov	r0, r3
 810dd94:	f7fd fe52 	bl	810ba3c <lwip_htons>
 810dd98:	4603      	mov	r3, r0
 810dd9a:	461a      	mov	r2, r3
 810dd9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dd9e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 810dda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dda2:	2200      	movs	r2, #0
 810dda4:	719a      	strb	r2, [r3, #6]
 810dda6:	2200      	movs	r2, #0
 810dda8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 810ddaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ddac:	2200      	movs	r2, #0
 810ddae:	729a      	strb	r2, [r3, #10]
 810ddb0:	2200      	movs	r2, #0
 810ddb2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 810ddb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ddb6:	685b      	ldr	r3, [r3, #4]
 810ddb8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 810ddba:	e00d      	b.n	810ddd8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 810ddbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ddbe:	685b      	ldr	r3, [r3, #4]
 810ddc0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 810ddc2:	2114      	movs	r1, #20
 810ddc4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 810ddc6:	f001 fd5d 	bl	810f884 <pbuf_remove_header>
      pbuf_cat(p, r);
 810ddca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 810ddcc:	6878      	ldr	r0, [r7, #4]
 810ddce:	f001 fead 	bl	810fb2c <pbuf_cat>
      r = iprh->next_pbuf;
 810ddd2:	68fb      	ldr	r3, [r7, #12]
 810ddd4:	681b      	ldr	r3, [r3, #0]
 810ddd6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 810ddd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ddda:	2b00      	cmp	r3, #0
 810dddc:	d1ee      	bne.n	810ddbc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 810ddde:	4b1e      	ldr	r3, [pc, #120]	@ (810de58 <ip4_reass+0x2b4>)
 810dde0:	681b      	ldr	r3, [r3, #0]
 810dde2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810dde4:	429a      	cmp	r2, r3
 810dde6:	d102      	bne.n	810ddee <ip4_reass+0x24a>
      ipr_prev = NULL;
 810dde8:	2300      	movs	r3, #0
 810ddea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810ddec:	e010      	b.n	810de10 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 810ddee:	4b1a      	ldr	r3, [pc, #104]	@ (810de58 <ip4_reass+0x2b4>)
 810ddf0:	681b      	ldr	r3, [r3, #0]
 810ddf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810ddf4:	e007      	b.n	810de06 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 810ddf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ddf8:	681b      	ldr	r3, [r3, #0]
 810ddfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ddfc:	429a      	cmp	r2, r3
 810ddfe:	d006      	beq.n	810de0e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 810de00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810de02:	681b      	ldr	r3, [r3, #0]
 810de04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810de06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810de08:	2b00      	cmp	r3, #0
 810de0a:	d1f4      	bne.n	810ddf6 <ip4_reass+0x252>
 810de0c:	e000      	b.n	810de10 <ip4_reass+0x26c>
          break;
 810de0e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 810de10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810de12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810de14:	f7ff fd2e 	bl	810d874 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 810de18:	6878      	ldr	r0, [r7, #4]
 810de1a:	f001 fe47 	bl	810faac <pbuf_clen>
 810de1e:	4603      	mov	r3, r0
 810de20:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 810de22:	4b0c      	ldr	r3, [pc, #48]	@ (810de54 <ip4_reass+0x2b0>)
 810de24:	881b      	ldrh	r3, [r3, #0]
 810de26:	8c3a      	ldrh	r2, [r7, #32]
 810de28:	429a      	cmp	r2, r3
 810de2a:	d906      	bls.n	810de3a <ip4_reass+0x296>
 810de2c:	4b0b      	ldr	r3, [pc, #44]	@ (810de5c <ip4_reass+0x2b8>)
 810de2e:	f240 229b 	movw	r2, #667	@ 0x29b
 810de32:	490b      	ldr	r1, [pc, #44]	@ (810de60 <ip4_reass+0x2bc>)
 810de34:	480b      	ldr	r0, [pc, #44]	@ (810de64 <ip4_reass+0x2c0>)
 810de36:	f008 fd57 	bl	81168e8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 810de3a:	4b06      	ldr	r3, [pc, #24]	@ (810de54 <ip4_reass+0x2b0>)
 810de3c:	881a      	ldrh	r2, [r3, #0]
 810de3e:	8c3b      	ldrh	r3, [r7, #32]
 810de40:	1ad3      	subs	r3, r2, r3
 810de42:	b29a      	uxth	r2, r3
 810de44:	4b03      	ldr	r3, [pc, #12]	@ (810de54 <ip4_reass+0x2b0>)
 810de46:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 810de48:	687b      	ldr	r3, [r7, #4]
 810de4a:	e038      	b.n	810debe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 810de4c:	2300      	movs	r3, #0
 810de4e:	e036      	b.n	810debe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 810de50:	bf00      	nop
 810de52:	e00a      	b.n	810de6a <ip4_reass+0x2c6>
 810de54:	10004d9c 	.word	0x10004d9c
 810de58:	10004d98 	.word	0x10004d98
 810de5c:	08117d30 	.word	0x08117d30
 810de60:	08117edc 	.word	0x08117edc
 810de64:	08117db4 	.word	0x08117db4
    goto nullreturn_ipr;
 810de68:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 810de6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810de6c:	2b00      	cmp	r3, #0
 810de6e:	d106      	bne.n	810de7e <ip4_reass+0x2da>
 810de70:	4b15      	ldr	r3, [pc, #84]	@ (810dec8 <ip4_reass+0x324>)
 810de72:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 810de76:	4915      	ldr	r1, [pc, #84]	@ (810decc <ip4_reass+0x328>)
 810de78:	4815      	ldr	r0, [pc, #84]	@ (810ded0 <ip4_reass+0x32c>)
 810de7a:	f008 fd35 	bl	81168e8 <iprintf>
  if (ipr->p == NULL) {
 810de7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810de80:	685b      	ldr	r3, [r3, #4]
 810de82:	2b00      	cmp	r3, #0
 810de84:	d116      	bne.n	810deb4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 810de86:	4b13      	ldr	r3, [pc, #76]	@ (810ded4 <ip4_reass+0x330>)
 810de88:	681b      	ldr	r3, [r3, #0]
 810de8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810de8c:	429a      	cmp	r2, r3
 810de8e:	d006      	beq.n	810de9e <ip4_reass+0x2fa>
 810de90:	4b0d      	ldr	r3, [pc, #52]	@ (810dec8 <ip4_reass+0x324>)
 810de92:	f240 22ab 	movw	r2, #683	@ 0x2ab
 810de96:	4910      	ldr	r1, [pc, #64]	@ (810ded8 <ip4_reass+0x334>)
 810de98:	480d      	ldr	r0, [pc, #52]	@ (810ded0 <ip4_reass+0x32c>)
 810de9a:	f008 fd25 	bl	81168e8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 810de9e:	2100      	movs	r1, #0
 810dea0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810dea2:	f7ff fce7 	bl	810d874 <ip_reass_dequeue_datagram>
 810dea6:	e006      	b.n	810deb6 <ip4_reass+0x312>
    goto nullreturn;
 810dea8:	bf00      	nop
 810deaa:	e004      	b.n	810deb6 <ip4_reass+0x312>
    goto nullreturn;
 810deac:	bf00      	nop
 810deae:	e002      	b.n	810deb6 <ip4_reass+0x312>
      goto nullreturn;
 810deb0:	bf00      	nop
 810deb2:	e000      	b.n	810deb6 <ip4_reass+0x312>
  }

nullreturn:
 810deb4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 810deb6:	6878      	ldr	r0, [r7, #4]
 810deb8:	f001 fd6a 	bl	810f990 <pbuf_free>
  return NULL;
 810debc:	2300      	movs	r3, #0
}
 810debe:	4618      	mov	r0, r3
 810dec0:	3738      	adds	r7, #56	@ 0x38
 810dec2:	46bd      	mov	sp, r7
 810dec4:	bd80      	pop	{r7, pc}
 810dec6:	bf00      	nop
 810dec8:	08117d30 	.word	0x08117d30
 810decc:	08117ef8 	.word	0x08117ef8
 810ded0:	08117db4 	.word	0x08117db4
 810ded4:	10004d98 	.word	0x10004d98
 810ded8:	08117f04 	.word	0x08117f04

0810dedc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 810dedc:	b580      	push	{r7, lr}
 810dede:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 810dee0:	2005      	movs	r0, #5
 810dee2:	f000 fe37 	bl	810eb54 <memp_malloc>
 810dee6:	4603      	mov	r3, r0
}
 810dee8:	4618      	mov	r0, r3
 810deea:	bd80      	pop	{r7, pc}

0810deec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 810deec:	b580      	push	{r7, lr}
 810deee:	b082      	sub	sp, #8
 810def0:	af00      	add	r7, sp, #0
 810def2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 810def4:	687b      	ldr	r3, [r7, #4]
 810def6:	2b00      	cmp	r3, #0
 810def8:	d106      	bne.n	810df08 <ip_frag_free_pbuf_custom_ref+0x1c>
 810defa:	4b07      	ldr	r3, [pc, #28]	@ (810df18 <ip_frag_free_pbuf_custom_ref+0x2c>)
 810defc:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 810df00:	4906      	ldr	r1, [pc, #24]	@ (810df1c <ip_frag_free_pbuf_custom_ref+0x30>)
 810df02:	4807      	ldr	r0, [pc, #28]	@ (810df20 <ip_frag_free_pbuf_custom_ref+0x34>)
 810df04:	f008 fcf0 	bl	81168e8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 810df08:	6879      	ldr	r1, [r7, #4]
 810df0a:	2005      	movs	r0, #5
 810df0c:	f000 fe98 	bl	810ec40 <memp_free>
}
 810df10:	bf00      	nop
 810df12:	3708      	adds	r7, #8
 810df14:	46bd      	mov	sp, r7
 810df16:	bd80      	pop	{r7, pc}
 810df18:	08117d30 	.word	0x08117d30
 810df1c:	08117f24 	.word	0x08117f24
 810df20:	08117db4 	.word	0x08117db4

0810df24 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 810df24:	b580      	push	{r7, lr}
 810df26:	b084      	sub	sp, #16
 810df28:	af00      	add	r7, sp, #0
 810df2a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 810df2c:	687b      	ldr	r3, [r7, #4]
 810df2e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 810df30:	68fb      	ldr	r3, [r7, #12]
 810df32:	2b00      	cmp	r3, #0
 810df34:	d106      	bne.n	810df44 <ipfrag_free_pbuf_custom+0x20>
 810df36:	4b11      	ldr	r3, [pc, #68]	@ (810df7c <ipfrag_free_pbuf_custom+0x58>)
 810df38:	f240 22ce 	movw	r2, #718	@ 0x2ce
 810df3c:	4910      	ldr	r1, [pc, #64]	@ (810df80 <ipfrag_free_pbuf_custom+0x5c>)
 810df3e:	4811      	ldr	r0, [pc, #68]	@ (810df84 <ipfrag_free_pbuf_custom+0x60>)
 810df40:	f008 fcd2 	bl	81168e8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 810df44:	68fa      	ldr	r2, [r7, #12]
 810df46:	687b      	ldr	r3, [r7, #4]
 810df48:	429a      	cmp	r2, r3
 810df4a:	d006      	beq.n	810df5a <ipfrag_free_pbuf_custom+0x36>
 810df4c:	4b0b      	ldr	r3, [pc, #44]	@ (810df7c <ipfrag_free_pbuf_custom+0x58>)
 810df4e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 810df52:	490d      	ldr	r1, [pc, #52]	@ (810df88 <ipfrag_free_pbuf_custom+0x64>)
 810df54:	480b      	ldr	r0, [pc, #44]	@ (810df84 <ipfrag_free_pbuf_custom+0x60>)
 810df56:	f008 fcc7 	bl	81168e8 <iprintf>
  if (pcr->original != NULL) {
 810df5a:	68fb      	ldr	r3, [r7, #12]
 810df5c:	695b      	ldr	r3, [r3, #20]
 810df5e:	2b00      	cmp	r3, #0
 810df60:	d004      	beq.n	810df6c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 810df62:	68fb      	ldr	r3, [r7, #12]
 810df64:	695b      	ldr	r3, [r3, #20]
 810df66:	4618      	mov	r0, r3
 810df68:	f001 fd12 	bl	810f990 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 810df6c:	68f8      	ldr	r0, [r7, #12]
 810df6e:	f7ff ffbd 	bl	810deec <ip_frag_free_pbuf_custom_ref>
}
 810df72:	bf00      	nop
 810df74:	3710      	adds	r7, #16
 810df76:	46bd      	mov	sp, r7
 810df78:	bd80      	pop	{r7, pc}
 810df7a:	bf00      	nop
 810df7c:	08117d30 	.word	0x08117d30
 810df80:	08117f30 	.word	0x08117f30
 810df84:	08117db4 	.word	0x08117db4
 810df88:	08117f3c 	.word	0x08117f3c

0810df8c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 810df8c:	b580      	push	{r7, lr}
 810df8e:	b094      	sub	sp, #80	@ 0x50
 810df90:	af02      	add	r7, sp, #8
 810df92:	60f8      	str	r0, [r7, #12]
 810df94:	60b9      	str	r1, [r7, #8]
 810df96:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 810df98:	2300      	movs	r3, #0
 810df9a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 810df9e:	68bb      	ldr	r3, [r7, #8]
 810dfa0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 810dfa2:	3b14      	subs	r3, #20
 810dfa4:	2b00      	cmp	r3, #0
 810dfa6:	da00      	bge.n	810dfaa <ip4_frag+0x1e>
 810dfa8:	3307      	adds	r3, #7
 810dfaa:	10db      	asrs	r3, r3, #3
 810dfac:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 810dfae:	2314      	movs	r3, #20
 810dfb0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 810dfb2:	68fb      	ldr	r3, [r7, #12]
 810dfb4:	685b      	ldr	r3, [r3, #4]
 810dfb6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 810dfb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810dfba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 810dfbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dfbe:	781b      	ldrb	r3, [r3, #0]
 810dfc0:	f003 030f 	and.w	r3, r3, #15
 810dfc4:	b2db      	uxtb	r3, r3
 810dfc6:	009b      	lsls	r3, r3, #2
 810dfc8:	b2db      	uxtb	r3, r3
 810dfca:	2b14      	cmp	r3, #20
 810dfcc:	d002      	beq.n	810dfd4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 810dfce:	f06f 0305 	mvn.w	r3, #5
 810dfd2:	e110      	b.n	810e1f6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 810dfd4:	68fb      	ldr	r3, [r7, #12]
 810dfd6:	895b      	ldrh	r3, [r3, #10]
 810dfd8:	2b13      	cmp	r3, #19
 810dfda:	d809      	bhi.n	810dff0 <ip4_frag+0x64>
 810dfdc:	4b88      	ldr	r3, [pc, #544]	@ (810e200 <ip4_frag+0x274>)
 810dfde:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 810dfe2:	4988      	ldr	r1, [pc, #544]	@ (810e204 <ip4_frag+0x278>)
 810dfe4:	4888      	ldr	r0, [pc, #544]	@ (810e208 <ip4_frag+0x27c>)
 810dfe6:	f008 fc7f 	bl	81168e8 <iprintf>
 810dfea:	f06f 0305 	mvn.w	r3, #5
 810dfee:	e102      	b.n	810e1f6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 810dff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dff2:	88db      	ldrh	r3, [r3, #6]
 810dff4:	b29b      	uxth	r3, r3
 810dff6:	4618      	mov	r0, r3
 810dff8:	f7fd fd20 	bl	810ba3c <lwip_htons>
 810dffc:	4603      	mov	r3, r0
 810dffe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 810e000:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 810e002:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810e006:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 810e00a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 810e00c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810e010:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 810e012:	68fb      	ldr	r3, [r7, #12]
 810e014:	891b      	ldrh	r3, [r3, #8]
 810e016:	3b14      	subs	r3, #20
 810e018:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 810e01c:	e0e1      	b.n	810e1e2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 810e01e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 810e020:	00db      	lsls	r3, r3, #3
 810e022:	b29b      	uxth	r3, r3
 810e024:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 810e028:	4293      	cmp	r3, r2
 810e02a:	bf28      	it	cs
 810e02c:	4613      	movcs	r3, r2
 810e02e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 810e030:	f44f 7220 	mov.w	r2, #640	@ 0x280
 810e034:	2114      	movs	r1, #20
 810e036:	200e      	movs	r0, #14
 810e038:	f001 f9c2 	bl	810f3c0 <pbuf_alloc>
 810e03c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 810e03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e040:	2b00      	cmp	r3, #0
 810e042:	f000 80d5 	beq.w	810e1f0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 810e046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e048:	895b      	ldrh	r3, [r3, #10]
 810e04a:	2b13      	cmp	r3, #19
 810e04c:	d806      	bhi.n	810e05c <ip4_frag+0xd0>
 810e04e:	4b6c      	ldr	r3, [pc, #432]	@ (810e200 <ip4_frag+0x274>)
 810e050:	f44f 7249 	mov.w	r2, #804	@ 0x324
 810e054:	496d      	ldr	r1, [pc, #436]	@ (810e20c <ip4_frag+0x280>)
 810e056:	486c      	ldr	r0, [pc, #432]	@ (810e208 <ip4_frag+0x27c>)
 810e058:	f008 fc46 	bl	81168e8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 810e05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e05e:	685b      	ldr	r3, [r3, #4]
 810e060:	2214      	movs	r2, #20
 810e062:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 810e064:	4618      	mov	r0, r3
 810e066:	f008 fdde 	bl	8116c26 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 810e06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e06c:	685b      	ldr	r3, [r3, #4]
 810e06e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 810e070:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810e072:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 810e076:	e064      	b.n	810e142 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 810e078:	68fb      	ldr	r3, [r7, #12]
 810e07a:	895a      	ldrh	r2, [r3, #10]
 810e07c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 810e07e:	1ad3      	subs	r3, r2, r3
 810e080:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 810e082:	68fb      	ldr	r3, [r7, #12]
 810e084:	895b      	ldrh	r3, [r3, #10]
 810e086:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 810e088:	429a      	cmp	r2, r3
 810e08a:	d906      	bls.n	810e09a <ip4_frag+0x10e>
 810e08c:	4b5c      	ldr	r3, [pc, #368]	@ (810e200 <ip4_frag+0x274>)
 810e08e:	f240 322d 	movw	r2, #813	@ 0x32d
 810e092:	495f      	ldr	r1, [pc, #380]	@ (810e210 <ip4_frag+0x284>)
 810e094:	485c      	ldr	r0, [pc, #368]	@ (810e208 <ip4_frag+0x27c>)
 810e096:	f008 fc27 	bl	81168e8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 810e09a:	8bfa      	ldrh	r2, [r7, #30]
 810e09c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 810e0a0:	4293      	cmp	r3, r2
 810e0a2:	bf28      	it	cs
 810e0a4:	4613      	movcs	r3, r2
 810e0a6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 810e0aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 810e0ae:	2b00      	cmp	r3, #0
 810e0b0:	d105      	bne.n	810e0be <ip4_frag+0x132>
        poff = 0;
 810e0b2:	2300      	movs	r3, #0
 810e0b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 810e0b6:	68fb      	ldr	r3, [r7, #12]
 810e0b8:	681b      	ldr	r3, [r3, #0]
 810e0ba:	60fb      	str	r3, [r7, #12]
        continue;
 810e0bc:	e041      	b.n	810e142 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 810e0be:	f7ff ff0d 	bl	810dedc <ip_frag_alloc_pbuf_custom_ref>
 810e0c2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 810e0c4:	69bb      	ldr	r3, [r7, #24]
 810e0c6:	2b00      	cmp	r3, #0
 810e0c8:	d103      	bne.n	810e0d2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 810e0ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810e0cc:	f001 fc60 	bl	810f990 <pbuf_free>
        goto memerr;
 810e0d0:	e08f      	b.n	810e1f2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 810e0d2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 810e0d4:	68fb      	ldr	r3, [r7, #12]
 810e0d6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 810e0d8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 810e0da:	4413      	add	r3, r2
 810e0dc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 810e0e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 810e0e4:	9201      	str	r2, [sp, #4]
 810e0e6:	9300      	str	r3, [sp, #0]
 810e0e8:	4603      	mov	r3, r0
 810e0ea:	2241      	movs	r2, #65	@ 0x41
 810e0ec:	2000      	movs	r0, #0
 810e0ee:	f001 fa95 	bl	810f61c <pbuf_alloced_custom>
 810e0f2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 810e0f4:	697b      	ldr	r3, [r7, #20]
 810e0f6:	2b00      	cmp	r3, #0
 810e0f8:	d106      	bne.n	810e108 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 810e0fa:	69b8      	ldr	r0, [r7, #24]
 810e0fc:	f7ff fef6 	bl	810deec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 810e100:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810e102:	f001 fc45 	bl	810f990 <pbuf_free>
        goto memerr;
 810e106:	e074      	b.n	810e1f2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 810e108:	68f8      	ldr	r0, [r7, #12]
 810e10a:	f001 fce7 	bl	810fadc <pbuf_ref>
      pcr->original = p;
 810e10e:	69bb      	ldr	r3, [r7, #24]
 810e110:	68fa      	ldr	r2, [r7, #12]
 810e112:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 810e114:	69bb      	ldr	r3, [r7, #24]
 810e116:	4a3f      	ldr	r2, [pc, #252]	@ (810e214 <ip4_frag+0x288>)
 810e118:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 810e11a:	6979      	ldr	r1, [r7, #20]
 810e11c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810e11e:	f001 fd05 	bl	810fb2c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 810e122:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 810e126:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 810e12a:	1ad3      	subs	r3, r2, r3
 810e12c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 810e130:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 810e134:	2b00      	cmp	r3, #0
 810e136:	d004      	beq.n	810e142 <ip4_frag+0x1b6>
        poff = 0;
 810e138:	2300      	movs	r3, #0
 810e13a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 810e13c:	68fb      	ldr	r3, [r7, #12]
 810e13e:	681b      	ldr	r3, [r3, #0]
 810e140:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 810e142:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 810e146:	2b00      	cmp	r3, #0
 810e148:	d196      	bne.n	810e078 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 810e14a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 810e14c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 810e150:	4413      	add	r3, r2
 810e152:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 810e154:	68bb      	ldr	r3, [r7, #8]
 810e156:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 810e158:	f1a3 0213 	sub.w	r2, r3, #19
 810e15c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 810e160:	429a      	cmp	r2, r3
 810e162:	bfcc      	ite	gt
 810e164:	2301      	movgt	r3, #1
 810e166:	2300      	movle	r3, #0
 810e168:	b2db      	uxtb	r3, r3
 810e16a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 810e16c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 810e170:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810e174:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 810e176:	6a3b      	ldr	r3, [r7, #32]
 810e178:	2b00      	cmp	r3, #0
 810e17a:	d002      	beq.n	810e182 <ip4_frag+0x1f6>
 810e17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e17e:	2b00      	cmp	r3, #0
 810e180:	d003      	beq.n	810e18a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 810e182:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 810e184:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 810e188:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 810e18a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 810e18c:	4618      	mov	r0, r3
 810e18e:	f7fd fc55 	bl	810ba3c <lwip_htons>
 810e192:	4603      	mov	r3, r0
 810e194:	461a      	mov	r2, r3
 810e196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e198:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 810e19a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810e19c:	3314      	adds	r3, #20
 810e19e:	b29b      	uxth	r3, r3
 810e1a0:	4618      	mov	r0, r3
 810e1a2:	f7fd fc4b 	bl	810ba3c <lwip_htons>
 810e1a6:	4603      	mov	r3, r0
 810e1a8:	461a      	mov	r2, r3
 810e1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e1ac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 810e1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e1b0:	2200      	movs	r2, #0
 810e1b2:	729a      	strb	r2, [r3, #10]
 810e1b4:	2200      	movs	r2, #0
 810e1b6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 810e1b8:	68bb      	ldr	r3, [r7, #8]
 810e1ba:	695b      	ldr	r3, [r3, #20]
 810e1bc:	687a      	ldr	r2, [r7, #4]
 810e1be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810e1c0:	68b8      	ldr	r0, [r7, #8]
 810e1c2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 810e1c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810e1c6:	f001 fbe3 	bl	810f990 <pbuf_free>
    left = (u16_t)(left - fragsize);
 810e1ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 810e1ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810e1d0:	1ad3      	subs	r3, r2, r3
 810e1d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 810e1d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 810e1da:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 810e1dc:	4413      	add	r3, r2
 810e1de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 810e1e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 810e1e6:	2b00      	cmp	r3, #0
 810e1e8:	f47f af19 	bne.w	810e01e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 810e1ec:	2300      	movs	r3, #0
 810e1ee:	e002      	b.n	810e1f6 <ip4_frag+0x26a>
      goto memerr;
 810e1f0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 810e1f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 810e1f6:	4618      	mov	r0, r3
 810e1f8:	3748      	adds	r7, #72	@ 0x48
 810e1fa:	46bd      	mov	sp, r7
 810e1fc:	bd80      	pop	{r7, pc}
 810e1fe:	bf00      	nop
 810e200:	08117d30 	.word	0x08117d30
 810e204:	08117f48 	.word	0x08117f48
 810e208:	08117db4 	.word	0x08117db4
 810e20c:	08117f64 	.word	0x08117f64
 810e210:	08117f84 	.word	0x08117f84
 810e214:	0810df25 	.word	0x0810df25

0810e218 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 810e218:	b480      	push	{r7}
 810e21a:	b083      	sub	sp, #12
 810e21c:	af00      	add	r7, sp, #0
 810e21e:	4603      	mov	r3, r0
 810e220:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 810e222:	4b05      	ldr	r3, [pc, #20]	@ (810e238 <ptr_to_mem+0x20>)
 810e224:	681a      	ldr	r2, [r3, #0]
 810e226:	88fb      	ldrh	r3, [r7, #6]
 810e228:	4413      	add	r3, r2
}
 810e22a:	4618      	mov	r0, r3
 810e22c:	370c      	adds	r7, #12
 810e22e:	46bd      	mov	sp, r7
 810e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e234:	4770      	bx	lr
 810e236:	bf00      	nop
 810e238:	10004da0 	.word	0x10004da0

0810e23c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 810e23c:	b480      	push	{r7}
 810e23e:	b083      	sub	sp, #12
 810e240:	af00      	add	r7, sp, #0
 810e242:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 810e244:	4b05      	ldr	r3, [pc, #20]	@ (810e25c <mem_to_ptr+0x20>)
 810e246:	681b      	ldr	r3, [r3, #0]
 810e248:	687a      	ldr	r2, [r7, #4]
 810e24a:	1ad3      	subs	r3, r2, r3
 810e24c:	b29b      	uxth	r3, r3
}
 810e24e:	4618      	mov	r0, r3
 810e250:	370c      	adds	r7, #12
 810e252:	46bd      	mov	sp, r7
 810e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e258:	4770      	bx	lr
 810e25a:	bf00      	nop
 810e25c:	10004da0 	.word	0x10004da0

0810e260 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 810e260:	b590      	push	{r4, r7, lr}
 810e262:	b085      	sub	sp, #20
 810e264:	af00      	add	r7, sp, #0
 810e266:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 810e268:	4b47      	ldr	r3, [pc, #284]	@ (810e388 <plug_holes+0x128>)
 810e26a:	681b      	ldr	r3, [r3, #0]
 810e26c:	687a      	ldr	r2, [r7, #4]
 810e26e:	429a      	cmp	r2, r3
 810e270:	d206      	bcs.n	810e280 <plug_holes+0x20>
 810e272:	4b46      	ldr	r3, [pc, #280]	@ (810e38c <plug_holes+0x12c>)
 810e274:	f240 12df 	movw	r2, #479	@ 0x1df
 810e278:	4945      	ldr	r1, [pc, #276]	@ (810e390 <plug_holes+0x130>)
 810e27a:	4846      	ldr	r0, [pc, #280]	@ (810e394 <plug_holes+0x134>)
 810e27c:	f008 fb34 	bl	81168e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 810e280:	4b45      	ldr	r3, [pc, #276]	@ (810e398 <plug_holes+0x138>)
 810e282:	681b      	ldr	r3, [r3, #0]
 810e284:	687a      	ldr	r2, [r7, #4]
 810e286:	429a      	cmp	r2, r3
 810e288:	d306      	bcc.n	810e298 <plug_holes+0x38>
 810e28a:	4b40      	ldr	r3, [pc, #256]	@ (810e38c <plug_holes+0x12c>)
 810e28c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810e290:	4942      	ldr	r1, [pc, #264]	@ (810e39c <plug_holes+0x13c>)
 810e292:	4840      	ldr	r0, [pc, #256]	@ (810e394 <plug_holes+0x134>)
 810e294:	f008 fb28 	bl	81168e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 810e298:	687b      	ldr	r3, [r7, #4]
 810e29a:	791b      	ldrb	r3, [r3, #4]
 810e29c:	2b00      	cmp	r3, #0
 810e29e:	d006      	beq.n	810e2ae <plug_holes+0x4e>
 810e2a0:	4b3a      	ldr	r3, [pc, #232]	@ (810e38c <plug_holes+0x12c>)
 810e2a2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 810e2a6:	493e      	ldr	r1, [pc, #248]	@ (810e3a0 <plug_holes+0x140>)
 810e2a8:	483a      	ldr	r0, [pc, #232]	@ (810e394 <plug_holes+0x134>)
 810e2aa:	f008 fb1d 	bl	81168e8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 810e2ae:	687b      	ldr	r3, [r7, #4]
 810e2b0:	881b      	ldrh	r3, [r3, #0]
 810e2b2:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e2b6:	4293      	cmp	r3, r2
 810e2b8:	d906      	bls.n	810e2c8 <plug_holes+0x68>
 810e2ba:	4b34      	ldr	r3, [pc, #208]	@ (810e38c <plug_holes+0x12c>)
 810e2bc:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 810e2c0:	4938      	ldr	r1, [pc, #224]	@ (810e3a4 <plug_holes+0x144>)
 810e2c2:	4834      	ldr	r0, [pc, #208]	@ (810e394 <plug_holes+0x134>)
 810e2c4:	f008 fb10 	bl	81168e8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 810e2c8:	687b      	ldr	r3, [r7, #4]
 810e2ca:	881b      	ldrh	r3, [r3, #0]
 810e2cc:	4618      	mov	r0, r3
 810e2ce:	f7ff ffa3 	bl	810e218 <ptr_to_mem>
 810e2d2:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 810e2d4:	687a      	ldr	r2, [r7, #4]
 810e2d6:	68fb      	ldr	r3, [r7, #12]
 810e2d8:	429a      	cmp	r2, r3
 810e2da:	d025      	beq.n	810e328 <plug_holes+0xc8>
 810e2dc:	68fb      	ldr	r3, [r7, #12]
 810e2de:	791b      	ldrb	r3, [r3, #4]
 810e2e0:	2b00      	cmp	r3, #0
 810e2e2:	d121      	bne.n	810e328 <plug_holes+0xc8>
 810e2e4:	4b2c      	ldr	r3, [pc, #176]	@ (810e398 <plug_holes+0x138>)
 810e2e6:	681b      	ldr	r3, [r3, #0]
 810e2e8:	68fa      	ldr	r2, [r7, #12]
 810e2ea:	429a      	cmp	r2, r3
 810e2ec:	d01c      	beq.n	810e328 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 810e2ee:	4b2e      	ldr	r3, [pc, #184]	@ (810e3a8 <plug_holes+0x148>)
 810e2f0:	681b      	ldr	r3, [r3, #0]
 810e2f2:	68fa      	ldr	r2, [r7, #12]
 810e2f4:	429a      	cmp	r2, r3
 810e2f6:	d102      	bne.n	810e2fe <plug_holes+0x9e>
      lfree = mem;
 810e2f8:	4a2b      	ldr	r2, [pc, #172]	@ (810e3a8 <plug_holes+0x148>)
 810e2fa:	687b      	ldr	r3, [r7, #4]
 810e2fc:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 810e2fe:	68fb      	ldr	r3, [r7, #12]
 810e300:	881a      	ldrh	r2, [r3, #0]
 810e302:	687b      	ldr	r3, [r7, #4]
 810e304:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 810e306:	68fb      	ldr	r3, [r7, #12]
 810e308:	881b      	ldrh	r3, [r3, #0]
 810e30a:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e30e:	4293      	cmp	r3, r2
 810e310:	d00a      	beq.n	810e328 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 810e312:	68fb      	ldr	r3, [r7, #12]
 810e314:	881b      	ldrh	r3, [r3, #0]
 810e316:	4618      	mov	r0, r3
 810e318:	f7ff ff7e 	bl	810e218 <ptr_to_mem>
 810e31c:	4604      	mov	r4, r0
 810e31e:	6878      	ldr	r0, [r7, #4]
 810e320:	f7ff ff8c 	bl	810e23c <mem_to_ptr>
 810e324:	4603      	mov	r3, r0
 810e326:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 810e328:	687b      	ldr	r3, [r7, #4]
 810e32a:	885b      	ldrh	r3, [r3, #2]
 810e32c:	4618      	mov	r0, r3
 810e32e:	f7ff ff73 	bl	810e218 <ptr_to_mem>
 810e332:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 810e334:	68ba      	ldr	r2, [r7, #8]
 810e336:	687b      	ldr	r3, [r7, #4]
 810e338:	429a      	cmp	r2, r3
 810e33a:	d020      	beq.n	810e37e <plug_holes+0x11e>
 810e33c:	68bb      	ldr	r3, [r7, #8]
 810e33e:	791b      	ldrb	r3, [r3, #4]
 810e340:	2b00      	cmp	r3, #0
 810e342:	d11c      	bne.n	810e37e <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 810e344:	4b18      	ldr	r3, [pc, #96]	@ (810e3a8 <plug_holes+0x148>)
 810e346:	681b      	ldr	r3, [r3, #0]
 810e348:	687a      	ldr	r2, [r7, #4]
 810e34a:	429a      	cmp	r2, r3
 810e34c:	d102      	bne.n	810e354 <plug_holes+0xf4>
      lfree = pmem;
 810e34e:	4a16      	ldr	r2, [pc, #88]	@ (810e3a8 <plug_holes+0x148>)
 810e350:	68bb      	ldr	r3, [r7, #8]
 810e352:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 810e354:	687b      	ldr	r3, [r7, #4]
 810e356:	881a      	ldrh	r2, [r3, #0]
 810e358:	68bb      	ldr	r3, [r7, #8]
 810e35a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 810e35c:	687b      	ldr	r3, [r7, #4]
 810e35e:	881b      	ldrh	r3, [r3, #0]
 810e360:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e364:	4293      	cmp	r3, r2
 810e366:	d00a      	beq.n	810e37e <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 810e368:	687b      	ldr	r3, [r7, #4]
 810e36a:	881b      	ldrh	r3, [r3, #0]
 810e36c:	4618      	mov	r0, r3
 810e36e:	f7ff ff53 	bl	810e218 <ptr_to_mem>
 810e372:	4604      	mov	r4, r0
 810e374:	68b8      	ldr	r0, [r7, #8]
 810e376:	f7ff ff61 	bl	810e23c <mem_to_ptr>
 810e37a:	4603      	mov	r3, r0
 810e37c:	8063      	strh	r3, [r4, #2]
    }
  }
}
 810e37e:	bf00      	nop
 810e380:	3714      	adds	r7, #20
 810e382:	46bd      	mov	sp, r7
 810e384:	bd90      	pop	{r4, r7, pc}
 810e386:	bf00      	nop
 810e388:	10004da0 	.word	0x10004da0
 810e38c:	08117f94 	.word	0x08117f94
 810e390:	08118004 	.word	0x08118004
 810e394:	0811801c 	.word	0x0811801c
 810e398:	10004da4 	.word	0x10004da4
 810e39c:	08118044 	.word	0x08118044
 810e3a0:	08118060 	.word	0x08118060
 810e3a4:	0811807c 	.word	0x0811807c
 810e3a8:	10004dac 	.word	0x10004dac

0810e3ac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 810e3ac:	b580      	push	{r7, lr}
 810e3ae:	b082      	sub	sp, #8
 810e3b0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 810e3b2:	4b1d      	ldr	r3, [pc, #116]	@ (810e428 <mem_init+0x7c>)
 810e3b4:	4a1d      	ldr	r2, [pc, #116]	@ (810e42c <mem_init+0x80>)
 810e3b6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 810e3b8:	4b1b      	ldr	r3, [pc, #108]	@ (810e428 <mem_init+0x7c>)
 810e3ba:	681b      	ldr	r3, [r3, #0]
 810e3bc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 810e3be:	687b      	ldr	r3, [r7, #4]
 810e3c0:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e3c4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 810e3c6:	687b      	ldr	r3, [r7, #4]
 810e3c8:	2200      	movs	r2, #0
 810e3ca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 810e3cc:	687b      	ldr	r3, [r7, #4]
 810e3ce:	2200      	movs	r2, #0
 810e3d0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 810e3d2:	f643 70e8 	movw	r0, #16360	@ 0x3fe8
 810e3d6:	f7ff ff1f 	bl	810e218 <ptr_to_mem>
 810e3da:	4603      	mov	r3, r0
 810e3dc:	4a14      	ldr	r2, [pc, #80]	@ (810e430 <mem_init+0x84>)
 810e3de:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 810e3e0:	4b13      	ldr	r3, [pc, #76]	@ (810e430 <mem_init+0x84>)
 810e3e2:	681b      	ldr	r3, [r3, #0]
 810e3e4:	2201      	movs	r2, #1
 810e3e6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 810e3e8:	4b11      	ldr	r3, [pc, #68]	@ (810e430 <mem_init+0x84>)
 810e3ea:	681b      	ldr	r3, [r3, #0]
 810e3ec:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e3f0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 810e3f2:	4b0f      	ldr	r3, [pc, #60]	@ (810e430 <mem_init+0x84>)
 810e3f4:	681b      	ldr	r3, [r3, #0]
 810e3f6:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e3fa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 810e3fc:	4b0a      	ldr	r3, [pc, #40]	@ (810e428 <mem_init+0x7c>)
 810e3fe:	681b      	ldr	r3, [r3, #0]
 810e400:	4a0c      	ldr	r2, [pc, #48]	@ (810e434 <mem_init+0x88>)
 810e402:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 810e404:	480c      	ldr	r0, [pc, #48]	@ (810e438 <mem_init+0x8c>)
 810e406:	f001 fdef 	bl	810ffe8 <sys_mutex_new>
 810e40a:	4603      	mov	r3, r0
 810e40c:	2b00      	cmp	r3, #0
 810e40e:	d006      	beq.n	810e41e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 810e410:	4b0a      	ldr	r3, [pc, #40]	@ (810e43c <mem_init+0x90>)
 810e412:	f240 221f 	movw	r2, #543	@ 0x21f
 810e416:	490a      	ldr	r1, [pc, #40]	@ (810e440 <mem_init+0x94>)
 810e418:	480a      	ldr	r0, [pc, #40]	@ (810e444 <mem_init+0x98>)
 810e41a:	f008 fa65 	bl	81168e8 <iprintf>
  }
}
 810e41e:	bf00      	nop
 810e420:	3708      	adds	r7, #8
 810e422:	46bd      	mov	sp, r7
 810e424:	bd80      	pop	{r7, pc}
 810e426:	bf00      	nop
 810e428:	10004da0 	.word	0x10004da0
 810e42c:	30020000 	.word	0x30020000
 810e430:	10004da4 	.word	0x10004da4
 810e434:	10004dac 	.word	0x10004dac
 810e438:	10004da8 	.word	0x10004da8
 810e43c:	08117f94 	.word	0x08117f94
 810e440:	081180a8 	.word	0x081180a8
 810e444:	0811801c 	.word	0x0811801c

0810e448 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 810e448:	b580      	push	{r7, lr}
 810e44a:	b086      	sub	sp, #24
 810e44c:	af00      	add	r7, sp, #0
 810e44e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 810e450:	6878      	ldr	r0, [r7, #4]
 810e452:	f7ff fef3 	bl	810e23c <mem_to_ptr>
 810e456:	4603      	mov	r3, r0
 810e458:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 810e45a:	687b      	ldr	r3, [r7, #4]
 810e45c:	881b      	ldrh	r3, [r3, #0]
 810e45e:	4618      	mov	r0, r3
 810e460:	f7ff feda 	bl	810e218 <ptr_to_mem>
 810e464:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 810e466:	687b      	ldr	r3, [r7, #4]
 810e468:	885b      	ldrh	r3, [r3, #2]
 810e46a:	4618      	mov	r0, r3
 810e46c:	f7ff fed4 	bl	810e218 <ptr_to_mem>
 810e470:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 810e472:	687b      	ldr	r3, [r7, #4]
 810e474:	881b      	ldrh	r3, [r3, #0]
 810e476:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e47a:	4293      	cmp	r3, r2
 810e47c:	d819      	bhi.n	810e4b2 <mem_link_valid+0x6a>
 810e47e:	687b      	ldr	r3, [r7, #4]
 810e480:	885b      	ldrh	r3, [r3, #2]
 810e482:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e486:	4293      	cmp	r3, r2
 810e488:	d813      	bhi.n	810e4b2 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 810e48a:	687b      	ldr	r3, [r7, #4]
 810e48c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 810e48e:	8afa      	ldrh	r2, [r7, #22]
 810e490:	429a      	cmp	r2, r3
 810e492:	d004      	beq.n	810e49e <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 810e494:	68fb      	ldr	r3, [r7, #12]
 810e496:	881b      	ldrh	r3, [r3, #0]
 810e498:	8afa      	ldrh	r2, [r7, #22]
 810e49a:	429a      	cmp	r2, r3
 810e49c:	d109      	bne.n	810e4b2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 810e49e:	4b08      	ldr	r3, [pc, #32]	@ (810e4c0 <mem_link_valid+0x78>)
 810e4a0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 810e4a2:	693a      	ldr	r2, [r7, #16]
 810e4a4:	429a      	cmp	r2, r3
 810e4a6:	d006      	beq.n	810e4b6 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 810e4a8:	693b      	ldr	r3, [r7, #16]
 810e4aa:	885b      	ldrh	r3, [r3, #2]
 810e4ac:	8afa      	ldrh	r2, [r7, #22]
 810e4ae:	429a      	cmp	r2, r3
 810e4b0:	d001      	beq.n	810e4b6 <mem_link_valid+0x6e>
    return 0;
 810e4b2:	2300      	movs	r3, #0
 810e4b4:	e000      	b.n	810e4b8 <mem_link_valid+0x70>
  }
  return 1;
 810e4b6:	2301      	movs	r3, #1
}
 810e4b8:	4618      	mov	r0, r3
 810e4ba:	3718      	adds	r7, #24
 810e4bc:	46bd      	mov	sp, r7
 810e4be:	bd80      	pop	{r7, pc}
 810e4c0:	10004da4 	.word	0x10004da4

0810e4c4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 810e4c4:	b580      	push	{r7, lr}
 810e4c6:	b088      	sub	sp, #32
 810e4c8:	af00      	add	r7, sp, #0
 810e4ca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 810e4cc:	687b      	ldr	r3, [r7, #4]
 810e4ce:	2b00      	cmp	r3, #0
 810e4d0:	d070      	beq.n	810e5b4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 810e4d2:	687b      	ldr	r3, [r7, #4]
 810e4d4:	f003 0303 	and.w	r3, r3, #3
 810e4d8:	2b00      	cmp	r3, #0
 810e4da:	d00d      	beq.n	810e4f8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 810e4dc:	4b37      	ldr	r3, [pc, #220]	@ (810e5bc <mem_free+0xf8>)
 810e4de:	f240 2273 	movw	r2, #627	@ 0x273
 810e4e2:	4937      	ldr	r1, [pc, #220]	@ (810e5c0 <mem_free+0xfc>)
 810e4e4:	4837      	ldr	r0, [pc, #220]	@ (810e5c4 <mem_free+0x100>)
 810e4e6:	f008 f9ff 	bl	81168e8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 810e4ea:	f001 fdcf 	bl	811008c <sys_arch_protect>
 810e4ee:	60f8      	str	r0, [r7, #12]
 810e4f0:	68f8      	ldr	r0, [r7, #12]
 810e4f2:	f001 fdd9 	bl	81100a8 <sys_arch_unprotect>
    return;
 810e4f6:	e05e      	b.n	810e5b6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 810e4f8:	687b      	ldr	r3, [r7, #4]
 810e4fa:	3b08      	subs	r3, #8
 810e4fc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 810e4fe:	4b32      	ldr	r3, [pc, #200]	@ (810e5c8 <mem_free+0x104>)
 810e500:	681b      	ldr	r3, [r3, #0]
 810e502:	69fa      	ldr	r2, [r7, #28]
 810e504:	429a      	cmp	r2, r3
 810e506:	d306      	bcc.n	810e516 <mem_free+0x52>
 810e508:	687b      	ldr	r3, [r7, #4]
 810e50a:	f103 020c 	add.w	r2, r3, #12
 810e50e:	4b2f      	ldr	r3, [pc, #188]	@ (810e5cc <mem_free+0x108>)
 810e510:	681b      	ldr	r3, [r3, #0]
 810e512:	429a      	cmp	r2, r3
 810e514:	d90d      	bls.n	810e532 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 810e516:	4b29      	ldr	r3, [pc, #164]	@ (810e5bc <mem_free+0xf8>)
 810e518:	f240 227f 	movw	r2, #639	@ 0x27f
 810e51c:	492c      	ldr	r1, [pc, #176]	@ (810e5d0 <mem_free+0x10c>)
 810e51e:	4829      	ldr	r0, [pc, #164]	@ (810e5c4 <mem_free+0x100>)
 810e520:	f008 f9e2 	bl	81168e8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 810e524:	f001 fdb2 	bl	811008c <sys_arch_protect>
 810e528:	6138      	str	r0, [r7, #16]
 810e52a:	6938      	ldr	r0, [r7, #16]
 810e52c:	f001 fdbc 	bl	81100a8 <sys_arch_unprotect>
    return;
 810e530:	e041      	b.n	810e5b6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 810e532:	4828      	ldr	r0, [pc, #160]	@ (810e5d4 <mem_free+0x110>)
 810e534:	f001 fd6e 	bl	8110014 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 810e538:	69fb      	ldr	r3, [r7, #28]
 810e53a:	791b      	ldrb	r3, [r3, #4]
 810e53c:	2b00      	cmp	r3, #0
 810e53e:	d110      	bne.n	810e562 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 810e540:	4b1e      	ldr	r3, [pc, #120]	@ (810e5bc <mem_free+0xf8>)
 810e542:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 810e546:	4924      	ldr	r1, [pc, #144]	@ (810e5d8 <mem_free+0x114>)
 810e548:	481e      	ldr	r0, [pc, #120]	@ (810e5c4 <mem_free+0x100>)
 810e54a:	f008 f9cd 	bl	81168e8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 810e54e:	4821      	ldr	r0, [pc, #132]	@ (810e5d4 <mem_free+0x110>)
 810e550:	f001 fd6f 	bl	8110032 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 810e554:	f001 fd9a 	bl	811008c <sys_arch_protect>
 810e558:	6178      	str	r0, [r7, #20]
 810e55a:	6978      	ldr	r0, [r7, #20]
 810e55c:	f001 fda4 	bl	81100a8 <sys_arch_unprotect>
    return;
 810e560:	e029      	b.n	810e5b6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 810e562:	69f8      	ldr	r0, [r7, #28]
 810e564:	f7ff ff70 	bl	810e448 <mem_link_valid>
 810e568:	4603      	mov	r3, r0
 810e56a:	2b00      	cmp	r3, #0
 810e56c:	d110      	bne.n	810e590 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 810e56e:	4b13      	ldr	r3, [pc, #76]	@ (810e5bc <mem_free+0xf8>)
 810e570:	f240 2295 	movw	r2, #661	@ 0x295
 810e574:	4919      	ldr	r1, [pc, #100]	@ (810e5dc <mem_free+0x118>)
 810e576:	4813      	ldr	r0, [pc, #76]	@ (810e5c4 <mem_free+0x100>)
 810e578:	f008 f9b6 	bl	81168e8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 810e57c:	4815      	ldr	r0, [pc, #84]	@ (810e5d4 <mem_free+0x110>)
 810e57e:	f001 fd58 	bl	8110032 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 810e582:	f001 fd83 	bl	811008c <sys_arch_protect>
 810e586:	61b8      	str	r0, [r7, #24]
 810e588:	69b8      	ldr	r0, [r7, #24]
 810e58a:	f001 fd8d 	bl	81100a8 <sys_arch_unprotect>
    return;
 810e58e:	e012      	b.n	810e5b6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 810e590:	69fb      	ldr	r3, [r7, #28]
 810e592:	2200      	movs	r2, #0
 810e594:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 810e596:	4b12      	ldr	r3, [pc, #72]	@ (810e5e0 <mem_free+0x11c>)
 810e598:	681b      	ldr	r3, [r3, #0]
 810e59a:	69fa      	ldr	r2, [r7, #28]
 810e59c:	429a      	cmp	r2, r3
 810e59e:	d202      	bcs.n	810e5a6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 810e5a0:	4a0f      	ldr	r2, [pc, #60]	@ (810e5e0 <mem_free+0x11c>)
 810e5a2:	69fb      	ldr	r3, [r7, #28]
 810e5a4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 810e5a6:	69f8      	ldr	r0, [r7, #28]
 810e5a8:	f7ff fe5a 	bl	810e260 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 810e5ac:	4809      	ldr	r0, [pc, #36]	@ (810e5d4 <mem_free+0x110>)
 810e5ae:	f001 fd40 	bl	8110032 <sys_mutex_unlock>
 810e5b2:	e000      	b.n	810e5b6 <mem_free+0xf2>
    return;
 810e5b4:	bf00      	nop
}
 810e5b6:	3720      	adds	r7, #32
 810e5b8:	46bd      	mov	sp, r7
 810e5ba:	bd80      	pop	{r7, pc}
 810e5bc:	08117f94 	.word	0x08117f94
 810e5c0:	081180c4 	.word	0x081180c4
 810e5c4:	0811801c 	.word	0x0811801c
 810e5c8:	10004da0 	.word	0x10004da0
 810e5cc:	10004da4 	.word	0x10004da4
 810e5d0:	081180e8 	.word	0x081180e8
 810e5d4:	10004da8 	.word	0x10004da8
 810e5d8:	08118104 	.word	0x08118104
 810e5dc:	0811812c 	.word	0x0811812c
 810e5e0:	10004dac 	.word	0x10004dac

0810e5e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 810e5e4:	b580      	push	{r7, lr}
 810e5e6:	b088      	sub	sp, #32
 810e5e8:	af00      	add	r7, sp, #0
 810e5ea:	6078      	str	r0, [r7, #4]
 810e5ec:	460b      	mov	r3, r1
 810e5ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 810e5f0:	887b      	ldrh	r3, [r7, #2]
 810e5f2:	3303      	adds	r3, #3
 810e5f4:	b29b      	uxth	r3, r3
 810e5f6:	f023 0303 	bic.w	r3, r3, #3
 810e5fa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 810e5fc:	8bfb      	ldrh	r3, [r7, #30]
 810e5fe:	2b0b      	cmp	r3, #11
 810e600:	d801      	bhi.n	810e606 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 810e602:	230c      	movs	r3, #12
 810e604:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 810e606:	8bfb      	ldrh	r3, [r7, #30]
 810e608:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e60c:	4293      	cmp	r3, r2
 810e60e:	d803      	bhi.n	810e618 <mem_trim+0x34>
 810e610:	8bfa      	ldrh	r2, [r7, #30]
 810e612:	887b      	ldrh	r3, [r7, #2]
 810e614:	429a      	cmp	r2, r3
 810e616:	d201      	bcs.n	810e61c <mem_trim+0x38>
    return NULL;
 810e618:	2300      	movs	r3, #0
 810e61a:	e0dc      	b.n	810e7d6 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 810e61c:	4b70      	ldr	r3, [pc, #448]	@ (810e7e0 <mem_trim+0x1fc>)
 810e61e:	681b      	ldr	r3, [r3, #0]
 810e620:	687a      	ldr	r2, [r7, #4]
 810e622:	429a      	cmp	r2, r3
 810e624:	d304      	bcc.n	810e630 <mem_trim+0x4c>
 810e626:	4b6f      	ldr	r3, [pc, #444]	@ (810e7e4 <mem_trim+0x200>)
 810e628:	681b      	ldr	r3, [r3, #0]
 810e62a:	687a      	ldr	r2, [r7, #4]
 810e62c:	429a      	cmp	r2, r3
 810e62e:	d306      	bcc.n	810e63e <mem_trim+0x5a>
 810e630:	4b6d      	ldr	r3, [pc, #436]	@ (810e7e8 <mem_trim+0x204>)
 810e632:	f240 22d1 	movw	r2, #721	@ 0x2d1
 810e636:	496d      	ldr	r1, [pc, #436]	@ (810e7ec <mem_trim+0x208>)
 810e638:	486d      	ldr	r0, [pc, #436]	@ (810e7f0 <mem_trim+0x20c>)
 810e63a:	f008 f955 	bl	81168e8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 810e63e:	4b68      	ldr	r3, [pc, #416]	@ (810e7e0 <mem_trim+0x1fc>)
 810e640:	681b      	ldr	r3, [r3, #0]
 810e642:	687a      	ldr	r2, [r7, #4]
 810e644:	429a      	cmp	r2, r3
 810e646:	d304      	bcc.n	810e652 <mem_trim+0x6e>
 810e648:	4b66      	ldr	r3, [pc, #408]	@ (810e7e4 <mem_trim+0x200>)
 810e64a:	681b      	ldr	r3, [r3, #0]
 810e64c:	687a      	ldr	r2, [r7, #4]
 810e64e:	429a      	cmp	r2, r3
 810e650:	d307      	bcc.n	810e662 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 810e652:	f001 fd1b 	bl	811008c <sys_arch_protect>
 810e656:	60b8      	str	r0, [r7, #8]
 810e658:	68b8      	ldr	r0, [r7, #8]
 810e65a:	f001 fd25 	bl	81100a8 <sys_arch_unprotect>
    return rmem;
 810e65e:	687b      	ldr	r3, [r7, #4]
 810e660:	e0b9      	b.n	810e7d6 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 810e662:	687b      	ldr	r3, [r7, #4]
 810e664:	3b08      	subs	r3, #8
 810e666:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 810e668:	69b8      	ldr	r0, [r7, #24]
 810e66a:	f7ff fde7 	bl	810e23c <mem_to_ptr>
 810e66e:	4603      	mov	r3, r0
 810e670:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 810e672:	69bb      	ldr	r3, [r7, #24]
 810e674:	881a      	ldrh	r2, [r3, #0]
 810e676:	8afb      	ldrh	r3, [r7, #22]
 810e678:	1ad3      	subs	r3, r2, r3
 810e67a:	b29b      	uxth	r3, r3
 810e67c:	3b08      	subs	r3, #8
 810e67e:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 810e680:	8bfa      	ldrh	r2, [r7, #30]
 810e682:	8abb      	ldrh	r3, [r7, #20]
 810e684:	429a      	cmp	r2, r3
 810e686:	d906      	bls.n	810e696 <mem_trim+0xb2>
 810e688:	4b57      	ldr	r3, [pc, #348]	@ (810e7e8 <mem_trim+0x204>)
 810e68a:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 810e68e:	4959      	ldr	r1, [pc, #356]	@ (810e7f4 <mem_trim+0x210>)
 810e690:	4857      	ldr	r0, [pc, #348]	@ (810e7f0 <mem_trim+0x20c>)
 810e692:	f008 f929 	bl	81168e8 <iprintf>
  if (newsize > size) {
 810e696:	8bfa      	ldrh	r2, [r7, #30]
 810e698:	8abb      	ldrh	r3, [r7, #20]
 810e69a:	429a      	cmp	r2, r3
 810e69c:	d901      	bls.n	810e6a2 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 810e69e:	2300      	movs	r3, #0
 810e6a0:	e099      	b.n	810e7d6 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 810e6a2:	8bfa      	ldrh	r2, [r7, #30]
 810e6a4:	8abb      	ldrh	r3, [r7, #20]
 810e6a6:	429a      	cmp	r2, r3
 810e6a8:	d101      	bne.n	810e6ae <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 810e6aa:	687b      	ldr	r3, [r7, #4]
 810e6ac:	e093      	b.n	810e7d6 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 810e6ae:	4852      	ldr	r0, [pc, #328]	@ (810e7f8 <mem_trim+0x214>)
 810e6b0:	f001 fcb0 	bl	8110014 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 810e6b4:	69bb      	ldr	r3, [r7, #24]
 810e6b6:	881b      	ldrh	r3, [r3, #0]
 810e6b8:	4618      	mov	r0, r3
 810e6ba:	f7ff fdad 	bl	810e218 <ptr_to_mem>
 810e6be:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 810e6c0:	693b      	ldr	r3, [r7, #16]
 810e6c2:	791b      	ldrb	r3, [r3, #4]
 810e6c4:	2b00      	cmp	r3, #0
 810e6c6:	d141      	bne.n	810e74c <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 810e6c8:	69bb      	ldr	r3, [r7, #24]
 810e6ca:	881b      	ldrh	r3, [r3, #0]
 810e6cc:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e6d0:	4293      	cmp	r3, r2
 810e6d2:	d106      	bne.n	810e6e2 <mem_trim+0xfe>
 810e6d4:	4b44      	ldr	r3, [pc, #272]	@ (810e7e8 <mem_trim+0x204>)
 810e6d6:	f240 22f5 	movw	r2, #757	@ 0x2f5
 810e6da:	4948      	ldr	r1, [pc, #288]	@ (810e7fc <mem_trim+0x218>)
 810e6dc:	4844      	ldr	r0, [pc, #272]	@ (810e7f0 <mem_trim+0x20c>)
 810e6de:	f008 f903 	bl	81168e8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 810e6e2:	693b      	ldr	r3, [r7, #16]
 810e6e4:	881b      	ldrh	r3, [r3, #0]
 810e6e6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 810e6e8:	8afa      	ldrh	r2, [r7, #22]
 810e6ea:	8bfb      	ldrh	r3, [r7, #30]
 810e6ec:	4413      	add	r3, r2
 810e6ee:	b29b      	uxth	r3, r3
 810e6f0:	3308      	adds	r3, #8
 810e6f2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 810e6f4:	4b42      	ldr	r3, [pc, #264]	@ (810e800 <mem_trim+0x21c>)
 810e6f6:	681b      	ldr	r3, [r3, #0]
 810e6f8:	693a      	ldr	r2, [r7, #16]
 810e6fa:	429a      	cmp	r2, r3
 810e6fc:	d106      	bne.n	810e70c <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 810e6fe:	89fb      	ldrh	r3, [r7, #14]
 810e700:	4618      	mov	r0, r3
 810e702:	f7ff fd89 	bl	810e218 <ptr_to_mem>
 810e706:	4603      	mov	r3, r0
 810e708:	4a3d      	ldr	r2, [pc, #244]	@ (810e800 <mem_trim+0x21c>)
 810e70a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 810e70c:	89fb      	ldrh	r3, [r7, #14]
 810e70e:	4618      	mov	r0, r3
 810e710:	f7ff fd82 	bl	810e218 <ptr_to_mem>
 810e714:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 810e716:	693b      	ldr	r3, [r7, #16]
 810e718:	2200      	movs	r2, #0
 810e71a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 810e71c:	693b      	ldr	r3, [r7, #16]
 810e71e:	89ba      	ldrh	r2, [r7, #12]
 810e720:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 810e722:	693b      	ldr	r3, [r7, #16]
 810e724:	8afa      	ldrh	r2, [r7, #22]
 810e726:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 810e728:	69bb      	ldr	r3, [r7, #24]
 810e72a:	89fa      	ldrh	r2, [r7, #14]
 810e72c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 810e72e:	693b      	ldr	r3, [r7, #16]
 810e730:	881b      	ldrh	r3, [r3, #0]
 810e732:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e736:	4293      	cmp	r3, r2
 810e738:	d049      	beq.n	810e7ce <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 810e73a:	693b      	ldr	r3, [r7, #16]
 810e73c:	881b      	ldrh	r3, [r3, #0]
 810e73e:	4618      	mov	r0, r3
 810e740:	f7ff fd6a 	bl	810e218 <ptr_to_mem>
 810e744:	4602      	mov	r2, r0
 810e746:	89fb      	ldrh	r3, [r7, #14]
 810e748:	8053      	strh	r3, [r2, #2]
 810e74a:	e040      	b.n	810e7ce <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 810e74c:	8bfb      	ldrh	r3, [r7, #30]
 810e74e:	f103 0214 	add.w	r2, r3, #20
 810e752:	8abb      	ldrh	r3, [r7, #20]
 810e754:	429a      	cmp	r2, r3
 810e756:	d83a      	bhi.n	810e7ce <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 810e758:	8afa      	ldrh	r2, [r7, #22]
 810e75a:	8bfb      	ldrh	r3, [r7, #30]
 810e75c:	4413      	add	r3, r2
 810e75e:	b29b      	uxth	r3, r3
 810e760:	3308      	adds	r3, #8
 810e762:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 810e764:	69bb      	ldr	r3, [r7, #24]
 810e766:	881b      	ldrh	r3, [r3, #0]
 810e768:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e76c:	4293      	cmp	r3, r2
 810e76e:	d106      	bne.n	810e77e <mem_trim+0x19a>
 810e770:	4b1d      	ldr	r3, [pc, #116]	@ (810e7e8 <mem_trim+0x204>)
 810e772:	f240 3216 	movw	r2, #790	@ 0x316
 810e776:	4921      	ldr	r1, [pc, #132]	@ (810e7fc <mem_trim+0x218>)
 810e778:	481d      	ldr	r0, [pc, #116]	@ (810e7f0 <mem_trim+0x20c>)
 810e77a:	f008 f8b5 	bl	81168e8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 810e77e:	89fb      	ldrh	r3, [r7, #14]
 810e780:	4618      	mov	r0, r3
 810e782:	f7ff fd49 	bl	810e218 <ptr_to_mem>
 810e786:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 810e788:	4b1d      	ldr	r3, [pc, #116]	@ (810e800 <mem_trim+0x21c>)
 810e78a:	681b      	ldr	r3, [r3, #0]
 810e78c:	693a      	ldr	r2, [r7, #16]
 810e78e:	429a      	cmp	r2, r3
 810e790:	d202      	bcs.n	810e798 <mem_trim+0x1b4>
      lfree = mem2;
 810e792:	4a1b      	ldr	r2, [pc, #108]	@ (810e800 <mem_trim+0x21c>)
 810e794:	693b      	ldr	r3, [r7, #16]
 810e796:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 810e798:	693b      	ldr	r3, [r7, #16]
 810e79a:	2200      	movs	r2, #0
 810e79c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 810e79e:	69bb      	ldr	r3, [r7, #24]
 810e7a0:	881a      	ldrh	r2, [r3, #0]
 810e7a2:	693b      	ldr	r3, [r7, #16]
 810e7a4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 810e7a6:	693b      	ldr	r3, [r7, #16]
 810e7a8:	8afa      	ldrh	r2, [r7, #22]
 810e7aa:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 810e7ac:	69bb      	ldr	r3, [r7, #24]
 810e7ae:	89fa      	ldrh	r2, [r7, #14]
 810e7b0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 810e7b2:	693b      	ldr	r3, [r7, #16]
 810e7b4:	881b      	ldrh	r3, [r3, #0]
 810e7b6:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e7ba:	4293      	cmp	r3, r2
 810e7bc:	d007      	beq.n	810e7ce <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 810e7be:	693b      	ldr	r3, [r7, #16]
 810e7c0:	881b      	ldrh	r3, [r3, #0]
 810e7c2:	4618      	mov	r0, r3
 810e7c4:	f7ff fd28 	bl	810e218 <ptr_to_mem>
 810e7c8:	4602      	mov	r2, r0
 810e7ca:	89fb      	ldrh	r3, [r7, #14]
 810e7cc:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 810e7ce:	480a      	ldr	r0, [pc, #40]	@ (810e7f8 <mem_trim+0x214>)
 810e7d0:	f001 fc2f 	bl	8110032 <sys_mutex_unlock>
  return rmem;
 810e7d4:	687b      	ldr	r3, [r7, #4]
}
 810e7d6:	4618      	mov	r0, r3
 810e7d8:	3720      	adds	r7, #32
 810e7da:	46bd      	mov	sp, r7
 810e7dc:	bd80      	pop	{r7, pc}
 810e7de:	bf00      	nop
 810e7e0:	10004da0 	.word	0x10004da0
 810e7e4:	10004da4 	.word	0x10004da4
 810e7e8:	08117f94 	.word	0x08117f94
 810e7ec:	08118160 	.word	0x08118160
 810e7f0:	0811801c 	.word	0x0811801c
 810e7f4:	08118178 	.word	0x08118178
 810e7f8:	10004da8 	.word	0x10004da8
 810e7fc:	08118198 	.word	0x08118198
 810e800:	10004dac 	.word	0x10004dac

0810e804 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 810e804:	b580      	push	{r7, lr}
 810e806:	b088      	sub	sp, #32
 810e808:	af00      	add	r7, sp, #0
 810e80a:	4603      	mov	r3, r0
 810e80c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 810e80e:	88fb      	ldrh	r3, [r7, #6]
 810e810:	2b00      	cmp	r3, #0
 810e812:	d101      	bne.n	810e818 <mem_malloc+0x14>
    return NULL;
 810e814:	2300      	movs	r3, #0
 810e816:	e0e6      	b.n	810e9e6 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 810e818:	88fb      	ldrh	r3, [r7, #6]
 810e81a:	3303      	adds	r3, #3
 810e81c:	b29b      	uxth	r3, r3
 810e81e:	f023 0303 	bic.w	r3, r3, #3
 810e822:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 810e824:	8bbb      	ldrh	r3, [r7, #28]
 810e826:	2b0b      	cmp	r3, #11
 810e828:	d801      	bhi.n	810e82e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 810e82a:	230c      	movs	r3, #12
 810e82c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 810e82e:	8bbb      	ldrh	r3, [r7, #28]
 810e830:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e834:	4293      	cmp	r3, r2
 810e836:	d803      	bhi.n	810e840 <mem_malloc+0x3c>
 810e838:	8bba      	ldrh	r2, [r7, #28]
 810e83a:	88fb      	ldrh	r3, [r7, #6]
 810e83c:	429a      	cmp	r2, r3
 810e83e:	d201      	bcs.n	810e844 <mem_malloc+0x40>
    return NULL;
 810e840:	2300      	movs	r3, #0
 810e842:	e0d0      	b.n	810e9e6 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 810e844:	486a      	ldr	r0, [pc, #424]	@ (810e9f0 <mem_malloc+0x1ec>)
 810e846:	f001 fbe5 	bl	8110014 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 810e84a:	4b6a      	ldr	r3, [pc, #424]	@ (810e9f4 <mem_malloc+0x1f0>)
 810e84c:	681b      	ldr	r3, [r3, #0]
 810e84e:	4618      	mov	r0, r3
 810e850:	f7ff fcf4 	bl	810e23c <mem_to_ptr>
 810e854:	4603      	mov	r3, r0
 810e856:	83fb      	strh	r3, [r7, #30]
 810e858:	e0b9      	b.n	810e9ce <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 810e85a:	8bfb      	ldrh	r3, [r7, #30]
 810e85c:	4618      	mov	r0, r3
 810e85e:	f7ff fcdb 	bl	810e218 <ptr_to_mem>
 810e862:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 810e864:	697b      	ldr	r3, [r7, #20]
 810e866:	791b      	ldrb	r3, [r3, #4]
 810e868:	2b00      	cmp	r3, #0
 810e86a:	f040 80a9 	bne.w	810e9c0 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 810e86e:	697b      	ldr	r3, [r7, #20]
 810e870:	881b      	ldrh	r3, [r3, #0]
 810e872:	461a      	mov	r2, r3
 810e874:	8bfb      	ldrh	r3, [r7, #30]
 810e876:	1ad3      	subs	r3, r2, r3
 810e878:	f1a3 0208 	sub.w	r2, r3, #8
 810e87c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 810e87e:	429a      	cmp	r2, r3
 810e880:	f0c0 809e 	bcc.w	810e9c0 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 810e884:	697b      	ldr	r3, [r7, #20]
 810e886:	881b      	ldrh	r3, [r3, #0]
 810e888:	461a      	mov	r2, r3
 810e88a:	8bfb      	ldrh	r3, [r7, #30]
 810e88c:	1ad3      	subs	r3, r2, r3
 810e88e:	f1a3 0208 	sub.w	r2, r3, #8
 810e892:	8bbb      	ldrh	r3, [r7, #28]
 810e894:	3314      	adds	r3, #20
 810e896:	429a      	cmp	r2, r3
 810e898:	d335      	bcc.n	810e906 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 810e89a:	8bfa      	ldrh	r2, [r7, #30]
 810e89c:	8bbb      	ldrh	r3, [r7, #28]
 810e89e:	4413      	add	r3, r2
 810e8a0:	b29b      	uxth	r3, r3
 810e8a2:	3308      	adds	r3, #8
 810e8a4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 810e8a6:	8a7b      	ldrh	r3, [r7, #18]
 810e8a8:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e8ac:	4293      	cmp	r3, r2
 810e8ae:	d106      	bne.n	810e8be <mem_malloc+0xba>
 810e8b0:	4b51      	ldr	r3, [pc, #324]	@ (810e9f8 <mem_malloc+0x1f4>)
 810e8b2:	f240 3287 	movw	r2, #903	@ 0x387
 810e8b6:	4951      	ldr	r1, [pc, #324]	@ (810e9fc <mem_malloc+0x1f8>)
 810e8b8:	4851      	ldr	r0, [pc, #324]	@ (810ea00 <mem_malloc+0x1fc>)
 810e8ba:	f008 f815 	bl	81168e8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 810e8be:	8a7b      	ldrh	r3, [r7, #18]
 810e8c0:	4618      	mov	r0, r3
 810e8c2:	f7ff fca9 	bl	810e218 <ptr_to_mem>
 810e8c6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 810e8c8:	68fb      	ldr	r3, [r7, #12]
 810e8ca:	2200      	movs	r2, #0
 810e8cc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 810e8ce:	697b      	ldr	r3, [r7, #20]
 810e8d0:	881a      	ldrh	r2, [r3, #0]
 810e8d2:	68fb      	ldr	r3, [r7, #12]
 810e8d4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 810e8d6:	68fb      	ldr	r3, [r7, #12]
 810e8d8:	8bfa      	ldrh	r2, [r7, #30]
 810e8da:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 810e8dc:	697b      	ldr	r3, [r7, #20]
 810e8de:	8a7a      	ldrh	r2, [r7, #18]
 810e8e0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 810e8e2:	697b      	ldr	r3, [r7, #20]
 810e8e4:	2201      	movs	r2, #1
 810e8e6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 810e8e8:	68fb      	ldr	r3, [r7, #12]
 810e8ea:	881b      	ldrh	r3, [r3, #0]
 810e8ec:	f643 72e8 	movw	r2, #16360	@ 0x3fe8
 810e8f0:	4293      	cmp	r3, r2
 810e8f2:	d00b      	beq.n	810e90c <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 810e8f4:	68fb      	ldr	r3, [r7, #12]
 810e8f6:	881b      	ldrh	r3, [r3, #0]
 810e8f8:	4618      	mov	r0, r3
 810e8fa:	f7ff fc8d 	bl	810e218 <ptr_to_mem>
 810e8fe:	4602      	mov	r2, r0
 810e900:	8a7b      	ldrh	r3, [r7, #18]
 810e902:	8053      	strh	r3, [r2, #2]
 810e904:	e002      	b.n	810e90c <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 810e906:	697b      	ldr	r3, [r7, #20]
 810e908:	2201      	movs	r2, #1
 810e90a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 810e90c:	4b39      	ldr	r3, [pc, #228]	@ (810e9f4 <mem_malloc+0x1f0>)
 810e90e:	681b      	ldr	r3, [r3, #0]
 810e910:	697a      	ldr	r2, [r7, #20]
 810e912:	429a      	cmp	r2, r3
 810e914:	d127      	bne.n	810e966 <mem_malloc+0x162>
          struct mem *cur = lfree;
 810e916:	4b37      	ldr	r3, [pc, #220]	@ (810e9f4 <mem_malloc+0x1f0>)
 810e918:	681b      	ldr	r3, [r3, #0]
 810e91a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 810e91c:	e005      	b.n	810e92a <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 810e91e:	69bb      	ldr	r3, [r7, #24]
 810e920:	881b      	ldrh	r3, [r3, #0]
 810e922:	4618      	mov	r0, r3
 810e924:	f7ff fc78 	bl	810e218 <ptr_to_mem>
 810e928:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 810e92a:	69bb      	ldr	r3, [r7, #24]
 810e92c:	791b      	ldrb	r3, [r3, #4]
 810e92e:	2b00      	cmp	r3, #0
 810e930:	d004      	beq.n	810e93c <mem_malloc+0x138>
 810e932:	4b34      	ldr	r3, [pc, #208]	@ (810ea04 <mem_malloc+0x200>)
 810e934:	681b      	ldr	r3, [r3, #0]
 810e936:	69ba      	ldr	r2, [r7, #24]
 810e938:	429a      	cmp	r2, r3
 810e93a:	d1f0      	bne.n	810e91e <mem_malloc+0x11a>
          }
          lfree = cur;
 810e93c:	4a2d      	ldr	r2, [pc, #180]	@ (810e9f4 <mem_malloc+0x1f0>)
 810e93e:	69bb      	ldr	r3, [r7, #24]
 810e940:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 810e942:	4b2c      	ldr	r3, [pc, #176]	@ (810e9f4 <mem_malloc+0x1f0>)
 810e944:	681a      	ldr	r2, [r3, #0]
 810e946:	4b2f      	ldr	r3, [pc, #188]	@ (810ea04 <mem_malloc+0x200>)
 810e948:	681b      	ldr	r3, [r3, #0]
 810e94a:	429a      	cmp	r2, r3
 810e94c:	d00b      	beq.n	810e966 <mem_malloc+0x162>
 810e94e:	4b29      	ldr	r3, [pc, #164]	@ (810e9f4 <mem_malloc+0x1f0>)
 810e950:	681b      	ldr	r3, [r3, #0]
 810e952:	791b      	ldrb	r3, [r3, #4]
 810e954:	2b00      	cmp	r3, #0
 810e956:	d006      	beq.n	810e966 <mem_malloc+0x162>
 810e958:	4b27      	ldr	r3, [pc, #156]	@ (810e9f8 <mem_malloc+0x1f4>)
 810e95a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 810e95e:	492a      	ldr	r1, [pc, #168]	@ (810ea08 <mem_malloc+0x204>)
 810e960:	4827      	ldr	r0, [pc, #156]	@ (810ea00 <mem_malloc+0x1fc>)
 810e962:	f007 ffc1 	bl	81168e8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 810e966:	4822      	ldr	r0, [pc, #136]	@ (810e9f0 <mem_malloc+0x1ec>)
 810e968:	f001 fb63 	bl	8110032 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 810e96c:	8bba      	ldrh	r2, [r7, #28]
 810e96e:	697b      	ldr	r3, [r7, #20]
 810e970:	4413      	add	r3, r2
 810e972:	3308      	adds	r3, #8
 810e974:	4a23      	ldr	r2, [pc, #140]	@ (810ea04 <mem_malloc+0x200>)
 810e976:	6812      	ldr	r2, [r2, #0]
 810e978:	4293      	cmp	r3, r2
 810e97a:	d906      	bls.n	810e98a <mem_malloc+0x186>
 810e97c:	4b1e      	ldr	r3, [pc, #120]	@ (810e9f8 <mem_malloc+0x1f4>)
 810e97e:	f240 32b9 	movw	r2, #953	@ 0x3b9
 810e982:	4922      	ldr	r1, [pc, #136]	@ (810ea0c <mem_malloc+0x208>)
 810e984:	481e      	ldr	r0, [pc, #120]	@ (810ea00 <mem_malloc+0x1fc>)
 810e986:	f007 ffaf 	bl	81168e8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 810e98a:	697b      	ldr	r3, [r7, #20]
 810e98c:	f003 0303 	and.w	r3, r3, #3
 810e990:	2b00      	cmp	r3, #0
 810e992:	d006      	beq.n	810e9a2 <mem_malloc+0x19e>
 810e994:	4b18      	ldr	r3, [pc, #96]	@ (810e9f8 <mem_malloc+0x1f4>)
 810e996:	f240 32bb 	movw	r2, #955	@ 0x3bb
 810e99a:	491d      	ldr	r1, [pc, #116]	@ (810ea10 <mem_malloc+0x20c>)
 810e99c:	4818      	ldr	r0, [pc, #96]	@ (810ea00 <mem_malloc+0x1fc>)
 810e99e:	f007 ffa3 	bl	81168e8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 810e9a2:	697b      	ldr	r3, [r7, #20]
 810e9a4:	f003 0303 	and.w	r3, r3, #3
 810e9a8:	2b00      	cmp	r3, #0
 810e9aa:	d006      	beq.n	810e9ba <mem_malloc+0x1b6>
 810e9ac:	4b12      	ldr	r3, [pc, #72]	@ (810e9f8 <mem_malloc+0x1f4>)
 810e9ae:	f240 32bd 	movw	r2, #957	@ 0x3bd
 810e9b2:	4918      	ldr	r1, [pc, #96]	@ (810ea14 <mem_malloc+0x210>)
 810e9b4:	4812      	ldr	r0, [pc, #72]	@ (810ea00 <mem_malloc+0x1fc>)
 810e9b6:	f007 ff97 	bl	81168e8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 810e9ba:	697b      	ldr	r3, [r7, #20]
 810e9bc:	3308      	adds	r3, #8
 810e9be:	e012      	b.n	810e9e6 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 810e9c0:	8bfb      	ldrh	r3, [r7, #30]
 810e9c2:	4618      	mov	r0, r3
 810e9c4:	f7ff fc28 	bl	810e218 <ptr_to_mem>
 810e9c8:	4603      	mov	r3, r0
 810e9ca:	881b      	ldrh	r3, [r3, #0]
 810e9cc:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 810e9ce:	8bfa      	ldrh	r2, [r7, #30]
 810e9d0:	8bbb      	ldrh	r3, [r7, #28]
 810e9d2:	f5c3 537f 	rsb	r3, r3, #16320	@ 0x3fc0
 810e9d6:	3328      	adds	r3, #40	@ 0x28
 810e9d8:	429a      	cmp	r2, r3
 810e9da:	f4ff af3e 	bcc.w	810e85a <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 810e9de:	4804      	ldr	r0, [pc, #16]	@ (810e9f0 <mem_malloc+0x1ec>)
 810e9e0:	f001 fb27 	bl	8110032 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 810e9e4:	2300      	movs	r3, #0
}
 810e9e6:	4618      	mov	r0, r3
 810e9e8:	3720      	adds	r7, #32
 810e9ea:	46bd      	mov	sp, r7
 810e9ec:	bd80      	pop	{r7, pc}
 810e9ee:	bf00      	nop
 810e9f0:	10004da8 	.word	0x10004da8
 810e9f4:	10004dac 	.word	0x10004dac
 810e9f8:	08117f94 	.word	0x08117f94
 810e9fc:	08118198 	.word	0x08118198
 810ea00:	0811801c 	.word	0x0811801c
 810ea04:	10004da4 	.word	0x10004da4
 810ea08:	081181ac 	.word	0x081181ac
 810ea0c:	081181c8 	.word	0x081181c8
 810ea10:	081181f8 	.word	0x081181f8
 810ea14:	08118228 	.word	0x08118228

0810ea18 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 810ea18:	b480      	push	{r7}
 810ea1a:	b085      	sub	sp, #20
 810ea1c:	af00      	add	r7, sp, #0
 810ea1e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 810ea20:	687b      	ldr	r3, [r7, #4]
 810ea22:	689b      	ldr	r3, [r3, #8]
 810ea24:	2200      	movs	r2, #0
 810ea26:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 810ea28:	687b      	ldr	r3, [r7, #4]
 810ea2a:	685b      	ldr	r3, [r3, #4]
 810ea2c:	3303      	adds	r3, #3
 810ea2e:	f023 0303 	bic.w	r3, r3, #3
 810ea32:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 810ea34:	2300      	movs	r3, #0
 810ea36:	60fb      	str	r3, [r7, #12]
 810ea38:	e011      	b.n	810ea5e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 810ea3a:	687b      	ldr	r3, [r7, #4]
 810ea3c:	689b      	ldr	r3, [r3, #8]
 810ea3e:	681a      	ldr	r2, [r3, #0]
 810ea40:	68bb      	ldr	r3, [r7, #8]
 810ea42:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 810ea44:	687b      	ldr	r3, [r7, #4]
 810ea46:	689b      	ldr	r3, [r3, #8]
 810ea48:	68ba      	ldr	r2, [r7, #8]
 810ea4a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 810ea4c:	687b      	ldr	r3, [r7, #4]
 810ea4e:	881b      	ldrh	r3, [r3, #0]
 810ea50:	461a      	mov	r2, r3
 810ea52:	68bb      	ldr	r3, [r7, #8]
 810ea54:	4413      	add	r3, r2
 810ea56:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 810ea58:	68fb      	ldr	r3, [r7, #12]
 810ea5a:	3301      	adds	r3, #1
 810ea5c:	60fb      	str	r3, [r7, #12]
 810ea5e:	687b      	ldr	r3, [r7, #4]
 810ea60:	885b      	ldrh	r3, [r3, #2]
 810ea62:	461a      	mov	r2, r3
 810ea64:	68fb      	ldr	r3, [r7, #12]
 810ea66:	4293      	cmp	r3, r2
 810ea68:	dbe7      	blt.n	810ea3a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 810ea6a:	bf00      	nop
 810ea6c:	bf00      	nop
 810ea6e:	3714      	adds	r7, #20
 810ea70:	46bd      	mov	sp, r7
 810ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea76:	4770      	bx	lr

0810ea78 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 810ea78:	b580      	push	{r7, lr}
 810ea7a:	b082      	sub	sp, #8
 810ea7c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 810ea7e:	2300      	movs	r3, #0
 810ea80:	80fb      	strh	r3, [r7, #6]
 810ea82:	e009      	b.n	810ea98 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 810ea84:	88fb      	ldrh	r3, [r7, #6]
 810ea86:	4a08      	ldr	r2, [pc, #32]	@ (810eaa8 <memp_init+0x30>)
 810ea88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810ea8c:	4618      	mov	r0, r3
 810ea8e:	f7ff ffc3 	bl	810ea18 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 810ea92:	88fb      	ldrh	r3, [r7, #6]
 810ea94:	3301      	adds	r3, #1
 810ea96:	80fb      	strh	r3, [r7, #6]
 810ea98:	88fb      	ldrh	r3, [r7, #6]
 810ea9a:	2b0c      	cmp	r3, #12
 810ea9c:	d9f2      	bls.n	810ea84 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 810ea9e:	bf00      	nop
 810eaa0:	bf00      	nop
 810eaa2:	3708      	adds	r7, #8
 810eaa4:	46bd      	mov	sp, r7
 810eaa6:	bd80      	pop	{r7, pc}
 810eaa8:	0811a710 	.word	0x0811a710

0810eaac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 810eaac:	b580      	push	{r7, lr}
 810eaae:	b084      	sub	sp, #16
 810eab0:	af00      	add	r7, sp, #0
 810eab2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 810eab4:	f001 faea 	bl	811008c <sys_arch_protect>
 810eab8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 810eaba:	687b      	ldr	r3, [r7, #4]
 810eabc:	689b      	ldr	r3, [r3, #8]
 810eabe:	681b      	ldr	r3, [r3, #0]
 810eac0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 810eac2:	68bb      	ldr	r3, [r7, #8]
 810eac4:	2b00      	cmp	r3, #0
 810eac6:	d015      	beq.n	810eaf4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 810eac8:	687b      	ldr	r3, [r7, #4]
 810eaca:	689b      	ldr	r3, [r3, #8]
 810eacc:	68ba      	ldr	r2, [r7, #8]
 810eace:	6812      	ldr	r2, [r2, #0]
 810ead0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 810ead2:	68bb      	ldr	r3, [r7, #8]
 810ead4:	f003 0303 	and.w	r3, r3, #3
 810ead8:	2b00      	cmp	r3, #0
 810eada:	d006      	beq.n	810eaea <do_memp_malloc_pool+0x3e>
 810eadc:	4b09      	ldr	r3, [pc, #36]	@ (810eb04 <do_memp_malloc_pool+0x58>)
 810eade:	f44f 728c 	mov.w	r2, #280	@ 0x118
 810eae2:	4909      	ldr	r1, [pc, #36]	@ (810eb08 <do_memp_malloc_pool+0x5c>)
 810eae4:	4809      	ldr	r0, [pc, #36]	@ (810eb0c <do_memp_malloc_pool+0x60>)
 810eae6:	f007 feff 	bl	81168e8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 810eaea:	68f8      	ldr	r0, [r7, #12]
 810eaec:	f001 fadc 	bl	81100a8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 810eaf0:	68bb      	ldr	r3, [r7, #8]
 810eaf2:	e003      	b.n	810eafc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 810eaf4:	68f8      	ldr	r0, [r7, #12]
 810eaf6:	f001 fad7 	bl	81100a8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 810eafa:	2300      	movs	r3, #0
}
 810eafc:	4618      	mov	r0, r3
 810eafe:	3710      	adds	r7, #16
 810eb00:	46bd      	mov	sp, r7
 810eb02:	bd80      	pop	{r7, pc}
 810eb04:	0811824c 	.word	0x0811824c
 810eb08:	081182bc 	.word	0x081182bc
 810eb0c:	081182e0 	.word	0x081182e0

0810eb10 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 810eb10:	b580      	push	{r7, lr}
 810eb12:	b082      	sub	sp, #8
 810eb14:	af00      	add	r7, sp, #0
 810eb16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 810eb18:	687b      	ldr	r3, [r7, #4]
 810eb1a:	2b00      	cmp	r3, #0
 810eb1c:	d106      	bne.n	810eb2c <memp_malloc_pool+0x1c>
 810eb1e:	4b0a      	ldr	r3, [pc, #40]	@ (810eb48 <memp_malloc_pool+0x38>)
 810eb20:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 810eb24:	4909      	ldr	r1, [pc, #36]	@ (810eb4c <memp_malloc_pool+0x3c>)
 810eb26:	480a      	ldr	r0, [pc, #40]	@ (810eb50 <memp_malloc_pool+0x40>)
 810eb28:	f007 fede 	bl	81168e8 <iprintf>
  if (desc == NULL) {
 810eb2c:	687b      	ldr	r3, [r7, #4]
 810eb2e:	2b00      	cmp	r3, #0
 810eb30:	d101      	bne.n	810eb36 <memp_malloc_pool+0x26>
    return NULL;
 810eb32:	2300      	movs	r3, #0
 810eb34:	e003      	b.n	810eb3e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 810eb36:	6878      	ldr	r0, [r7, #4]
 810eb38:	f7ff ffb8 	bl	810eaac <do_memp_malloc_pool>
 810eb3c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 810eb3e:	4618      	mov	r0, r3
 810eb40:	3708      	adds	r7, #8
 810eb42:	46bd      	mov	sp, r7
 810eb44:	bd80      	pop	{r7, pc}
 810eb46:	bf00      	nop
 810eb48:	0811824c 	.word	0x0811824c
 810eb4c:	08118308 	.word	0x08118308
 810eb50:	081182e0 	.word	0x081182e0

0810eb54 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 810eb54:	b580      	push	{r7, lr}
 810eb56:	b084      	sub	sp, #16
 810eb58:	af00      	add	r7, sp, #0
 810eb5a:	4603      	mov	r3, r0
 810eb5c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 810eb5e:	79fb      	ldrb	r3, [r7, #7]
 810eb60:	2b0c      	cmp	r3, #12
 810eb62:	d908      	bls.n	810eb76 <memp_malloc+0x22>
 810eb64:	4b0a      	ldr	r3, [pc, #40]	@ (810eb90 <memp_malloc+0x3c>)
 810eb66:	f240 1257 	movw	r2, #343	@ 0x157
 810eb6a:	490a      	ldr	r1, [pc, #40]	@ (810eb94 <memp_malloc+0x40>)
 810eb6c:	480a      	ldr	r0, [pc, #40]	@ (810eb98 <memp_malloc+0x44>)
 810eb6e:	f007 febb 	bl	81168e8 <iprintf>
 810eb72:	2300      	movs	r3, #0
 810eb74:	e008      	b.n	810eb88 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 810eb76:	79fb      	ldrb	r3, [r7, #7]
 810eb78:	4a08      	ldr	r2, [pc, #32]	@ (810eb9c <memp_malloc+0x48>)
 810eb7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810eb7e:	4618      	mov	r0, r3
 810eb80:	f7ff ff94 	bl	810eaac <do_memp_malloc_pool>
 810eb84:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 810eb86:	68fb      	ldr	r3, [r7, #12]
}
 810eb88:	4618      	mov	r0, r3
 810eb8a:	3710      	adds	r7, #16
 810eb8c:	46bd      	mov	sp, r7
 810eb8e:	bd80      	pop	{r7, pc}
 810eb90:	0811824c 	.word	0x0811824c
 810eb94:	0811831c 	.word	0x0811831c
 810eb98:	081182e0 	.word	0x081182e0
 810eb9c:	0811a710 	.word	0x0811a710

0810eba0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 810eba0:	b580      	push	{r7, lr}
 810eba2:	b084      	sub	sp, #16
 810eba4:	af00      	add	r7, sp, #0
 810eba6:	6078      	str	r0, [r7, #4]
 810eba8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 810ebaa:	683b      	ldr	r3, [r7, #0]
 810ebac:	f003 0303 	and.w	r3, r3, #3
 810ebb0:	2b00      	cmp	r3, #0
 810ebb2:	d006      	beq.n	810ebc2 <do_memp_free_pool+0x22>
 810ebb4:	4b0d      	ldr	r3, [pc, #52]	@ (810ebec <do_memp_free_pool+0x4c>)
 810ebb6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 810ebba:	490d      	ldr	r1, [pc, #52]	@ (810ebf0 <do_memp_free_pool+0x50>)
 810ebbc:	480d      	ldr	r0, [pc, #52]	@ (810ebf4 <do_memp_free_pool+0x54>)
 810ebbe:	f007 fe93 	bl	81168e8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 810ebc2:	683b      	ldr	r3, [r7, #0]
 810ebc4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 810ebc6:	f001 fa61 	bl	811008c <sys_arch_protect>
 810ebca:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 810ebcc:	687b      	ldr	r3, [r7, #4]
 810ebce:	689b      	ldr	r3, [r3, #8]
 810ebd0:	681a      	ldr	r2, [r3, #0]
 810ebd2:	68fb      	ldr	r3, [r7, #12]
 810ebd4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 810ebd6:	687b      	ldr	r3, [r7, #4]
 810ebd8:	689b      	ldr	r3, [r3, #8]
 810ebda:	68fa      	ldr	r2, [r7, #12]
 810ebdc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 810ebde:	68b8      	ldr	r0, [r7, #8]
 810ebe0:	f001 fa62 	bl	81100a8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 810ebe4:	bf00      	nop
 810ebe6:	3710      	adds	r7, #16
 810ebe8:	46bd      	mov	sp, r7
 810ebea:	bd80      	pop	{r7, pc}
 810ebec:	0811824c 	.word	0x0811824c
 810ebf0:	0811833c 	.word	0x0811833c
 810ebf4:	081182e0 	.word	0x081182e0

0810ebf8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 810ebf8:	b580      	push	{r7, lr}
 810ebfa:	b082      	sub	sp, #8
 810ebfc:	af00      	add	r7, sp, #0
 810ebfe:	6078      	str	r0, [r7, #4]
 810ec00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 810ec02:	687b      	ldr	r3, [r7, #4]
 810ec04:	2b00      	cmp	r3, #0
 810ec06:	d106      	bne.n	810ec16 <memp_free_pool+0x1e>
 810ec08:	4b0a      	ldr	r3, [pc, #40]	@ (810ec34 <memp_free_pool+0x3c>)
 810ec0a:	f240 1295 	movw	r2, #405	@ 0x195
 810ec0e:	490a      	ldr	r1, [pc, #40]	@ (810ec38 <memp_free_pool+0x40>)
 810ec10:	480a      	ldr	r0, [pc, #40]	@ (810ec3c <memp_free_pool+0x44>)
 810ec12:	f007 fe69 	bl	81168e8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 810ec16:	687b      	ldr	r3, [r7, #4]
 810ec18:	2b00      	cmp	r3, #0
 810ec1a:	d007      	beq.n	810ec2c <memp_free_pool+0x34>
 810ec1c:	683b      	ldr	r3, [r7, #0]
 810ec1e:	2b00      	cmp	r3, #0
 810ec20:	d004      	beq.n	810ec2c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 810ec22:	6839      	ldr	r1, [r7, #0]
 810ec24:	6878      	ldr	r0, [r7, #4]
 810ec26:	f7ff ffbb 	bl	810eba0 <do_memp_free_pool>
 810ec2a:	e000      	b.n	810ec2e <memp_free_pool+0x36>
    return;
 810ec2c:	bf00      	nop
}
 810ec2e:	3708      	adds	r7, #8
 810ec30:	46bd      	mov	sp, r7
 810ec32:	bd80      	pop	{r7, pc}
 810ec34:	0811824c 	.word	0x0811824c
 810ec38:	08118308 	.word	0x08118308
 810ec3c:	081182e0 	.word	0x081182e0

0810ec40 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 810ec40:	b580      	push	{r7, lr}
 810ec42:	b082      	sub	sp, #8
 810ec44:	af00      	add	r7, sp, #0
 810ec46:	4603      	mov	r3, r0
 810ec48:	6039      	str	r1, [r7, #0]
 810ec4a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 810ec4c:	79fb      	ldrb	r3, [r7, #7]
 810ec4e:	2b0c      	cmp	r3, #12
 810ec50:	d907      	bls.n	810ec62 <memp_free+0x22>
 810ec52:	4b0c      	ldr	r3, [pc, #48]	@ (810ec84 <memp_free+0x44>)
 810ec54:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 810ec58:	490b      	ldr	r1, [pc, #44]	@ (810ec88 <memp_free+0x48>)
 810ec5a:	480c      	ldr	r0, [pc, #48]	@ (810ec8c <memp_free+0x4c>)
 810ec5c:	f007 fe44 	bl	81168e8 <iprintf>
 810ec60:	e00c      	b.n	810ec7c <memp_free+0x3c>

  if (mem == NULL) {
 810ec62:	683b      	ldr	r3, [r7, #0]
 810ec64:	2b00      	cmp	r3, #0
 810ec66:	d008      	beq.n	810ec7a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 810ec68:	79fb      	ldrb	r3, [r7, #7]
 810ec6a:	4a09      	ldr	r2, [pc, #36]	@ (810ec90 <memp_free+0x50>)
 810ec6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810ec70:	6839      	ldr	r1, [r7, #0]
 810ec72:	4618      	mov	r0, r3
 810ec74:	f7ff ff94 	bl	810eba0 <do_memp_free_pool>
 810ec78:	e000      	b.n	810ec7c <memp_free+0x3c>
    return;
 810ec7a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 810ec7c:	3708      	adds	r7, #8
 810ec7e:	46bd      	mov	sp, r7
 810ec80:	bd80      	pop	{r7, pc}
 810ec82:	bf00      	nop
 810ec84:	0811824c 	.word	0x0811824c
 810ec88:	0811835c 	.word	0x0811835c
 810ec8c:	081182e0 	.word	0x081182e0
 810ec90:	0811a710 	.word	0x0811a710

0810ec94 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 810ec94:	b480      	push	{r7}
 810ec96:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 810ec98:	bf00      	nop
 810ec9a:	46bd      	mov	sp, r7
 810ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eca0:	4770      	bx	lr
	...

0810eca4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 810eca4:	b580      	push	{r7, lr}
 810eca6:	b086      	sub	sp, #24
 810eca8:	af00      	add	r7, sp, #0
 810ecaa:	60f8      	str	r0, [r7, #12]
 810ecac:	60b9      	str	r1, [r7, #8]
 810ecae:	607a      	str	r2, [r7, #4]
 810ecb0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 810ecb2:	68fb      	ldr	r3, [r7, #12]
 810ecb4:	2b00      	cmp	r3, #0
 810ecb6:	d108      	bne.n	810ecca <netif_add+0x26>
 810ecb8:	4b57      	ldr	r3, [pc, #348]	@ (810ee18 <netif_add+0x174>)
 810ecba:	f240 1227 	movw	r2, #295	@ 0x127
 810ecbe:	4957      	ldr	r1, [pc, #348]	@ (810ee1c <netif_add+0x178>)
 810ecc0:	4857      	ldr	r0, [pc, #348]	@ (810ee20 <netif_add+0x17c>)
 810ecc2:	f007 fe11 	bl	81168e8 <iprintf>
 810ecc6:	2300      	movs	r3, #0
 810ecc8:	e0a2      	b.n	810ee10 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 810ecca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eccc:	2b00      	cmp	r3, #0
 810ecce:	d108      	bne.n	810ece2 <netif_add+0x3e>
 810ecd0:	4b51      	ldr	r3, [pc, #324]	@ (810ee18 <netif_add+0x174>)
 810ecd2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 810ecd6:	4953      	ldr	r1, [pc, #332]	@ (810ee24 <netif_add+0x180>)
 810ecd8:	4851      	ldr	r0, [pc, #324]	@ (810ee20 <netif_add+0x17c>)
 810ecda:	f007 fe05 	bl	81168e8 <iprintf>
 810ecde:	2300      	movs	r3, #0
 810ece0:	e096      	b.n	810ee10 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 810ece2:	68bb      	ldr	r3, [r7, #8]
 810ece4:	2b00      	cmp	r3, #0
 810ece6:	d101      	bne.n	810ecec <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 810ece8:	4b4f      	ldr	r3, [pc, #316]	@ (810ee28 <netif_add+0x184>)
 810ecea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 810ecec:	687b      	ldr	r3, [r7, #4]
 810ecee:	2b00      	cmp	r3, #0
 810ecf0:	d101      	bne.n	810ecf6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 810ecf2:	4b4d      	ldr	r3, [pc, #308]	@ (810ee28 <netif_add+0x184>)
 810ecf4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 810ecf6:	683b      	ldr	r3, [r7, #0]
 810ecf8:	2b00      	cmp	r3, #0
 810ecfa:	d101      	bne.n	810ed00 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 810ecfc:	4b4a      	ldr	r3, [pc, #296]	@ (810ee28 <netif_add+0x184>)
 810ecfe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 810ed00:	68fb      	ldr	r3, [r7, #12]
 810ed02:	2200      	movs	r2, #0
 810ed04:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 810ed06:	68fb      	ldr	r3, [r7, #12]
 810ed08:	2200      	movs	r2, #0
 810ed0a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 810ed0c:	68fb      	ldr	r3, [r7, #12]
 810ed0e:	2200      	movs	r2, #0
 810ed10:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 810ed12:	68fb      	ldr	r3, [r7, #12]
 810ed14:	4a45      	ldr	r2, [pc, #276]	@ (810ee2c <netif_add+0x188>)
 810ed16:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 810ed18:	68fb      	ldr	r3, [r7, #12]
 810ed1a:	2200      	movs	r2, #0
 810ed1c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 810ed1e:	68fb      	ldr	r3, [r7, #12]
 810ed20:	2200      	movs	r2, #0
 810ed22:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 810ed26:	68fb      	ldr	r3, [r7, #12]
 810ed28:	2200      	movs	r2, #0
 810ed2a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 810ed2c:	68fb      	ldr	r3, [r7, #12]
 810ed2e:	6a3a      	ldr	r2, [r7, #32]
 810ed30:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 810ed32:	4b3f      	ldr	r3, [pc, #252]	@ (810ee30 <netif_add+0x18c>)
 810ed34:	781a      	ldrb	r2, [r3, #0]
 810ed36:	68fb      	ldr	r3, [r7, #12]
 810ed38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 810ed3c:	68fb      	ldr	r3, [r7, #12]
 810ed3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810ed40:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 810ed42:	683b      	ldr	r3, [r7, #0]
 810ed44:	687a      	ldr	r2, [r7, #4]
 810ed46:	68b9      	ldr	r1, [r7, #8]
 810ed48:	68f8      	ldr	r0, [r7, #12]
 810ed4a:	f000 f913 	bl	810ef74 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 810ed4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ed50:	68f8      	ldr	r0, [r7, #12]
 810ed52:	4798      	blx	r3
 810ed54:	4603      	mov	r3, r0
 810ed56:	2b00      	cmp	r3, #0
 810ed58:	d001      	beq.n	810ed5e <netif_add+0xba>
    return NULL;
 810ed5a:	2300      	movs	r3, #0
 810ed5c:	e058      	b.n	810ee10 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 810ed5e:	68fb      	ldr	r3, [r7, #12]
 810ed60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810ed64:	2bff      	cmp	r3, #255	@ 0xff
 810ed66:	d103      	bne.n	810ed70 <netif_add+0xcc>
        netif->num = 0;
 810ed68:	68fb      	ldr	r3, [r7, #12]
 810ed6a:	2200      	movs	r2, #0
 810ed6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 810ed70:	2300      	movs	r3, #0
 810ed72:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 810ed74:	4b2f      	ldr	r3, [pc, #188]	@ (810ee34 <netif_add+0x190>)
 810ed76:	681b      	ldr	r3, [r3, #0]
 810ed78:	617b      	str	r3, [r7, #20]
 810ed7a:	e02b      	b.n	810edd4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 810ed7c:	697a      	ldr	r2, [r7, #20]
 810ed7e:	68fb      	ldr	r3, [r7, #12]
 810ed80:	429a      	cmp	r2, r3
 810ed82:	d106      	bne.n	810ed92 <netif_add+0xee>
 810ed84:	4b24      	ldr	r3, [pc, #144]	@ (810ee18 <netif_add+0x174>)
 810ed86:	f240 128b 	movw	r2, #395	@ 0x18b
 810ed8a:	492b      	ldr	r1, [pc, #172]	@ (810ee38 <netif_add+0x194>)
 810ed8c:	4824      	ldr	r0, [pc, #144]	@ (810ee20 <netif_add+0x17c>)
 810ed8e:	f007 fdab 	bl	81168e8 <iprintf>
        num_netifs++;
 810ed92:	693b      	ldr	r3, [r7, #16]
 810ed94:	3301      	adds	r3, #1
 810ed96:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 810ed98:	693b      	ldr	r3, [r7, #16]
 810ed9a:	2bff      	cmp	r3, #255	@ 0xff
 810ed9c:	dd06      	ble.n	810edac <netif_add+0x108>
 810ed9e:	4b1e      	ldr	r3, [pc, #120]	@ (810ee18 <netif_add+0x174>)
 810eda0:	f240 128d 	movw	r2, #397	@ 0x18d
 810eda4:	4925      	ldr	r1, [pc, #148]	@ (810ee3c <netif_add+0x198>)
 810eda6:	481e      	ldr	r0, [pc, #120]	@ (810ee20 <netif_add+0x17c>)
 810eda8:	f007 fd9e 	bl	81168e8 <iprintf>
        if (netif2->num == netif->num) {
 810edac:	697b      	ldr	r3, [r7, #20]
 810edae:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 810edb2:	68fb      	ldr	r3, [r7, #12]
 810edb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810edb8:	429a      	cmp	r2, r3
 810edba:	d108      	bne.n	810edce <netif_add+0x12a>
          netif->num++;
 810edbc:	68fb      	ldr	r3, [r7, #12]
 810edbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810edc2:	3301      	adds	r3, #1
 810edc4:	b2da      	uxtb	r2, r3
 810edc6:	68fb      	ldr	r3, [r7, #12]
 810edc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 810edcc:	e005      	b.n	810edda <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 810edce:	697b      	ldr	r3, [r7, #20]
 810edd0:	681b      	ldr	r3, [r3, #0]
 810edd2:	617b      	str	r3, [r7, #20]
 810edd4:	697b      	ldr	r3, [r7, #20]
 810edd6:	2b00      	cmp	r3, #0
 810edd8:	d1d0      	bne.n	810ed7c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 810edda:	697b      	ldr	r3, [r7, #20]
 810eddc:	2b00      	cmp	r3, #0
 810edde:	d1be      	bne.n	810ed5e <netif_add+0xba>
  }
  if (netif->num == 254) {
 810ede0:	68fb      	ldr	r3, [r7, #12]
 810ede2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810ede6:	2bfe      	cmp	r3, #254	@ 0xfe
 810ede8:	d103      	bne.n	810edf2 <netif_add+0x14e>
    netif_num = 0;
 810edea:	4b11      	ldr	r3, [pc, #68]	@ (810ee30 <netif_add+0x18c>)
 810edec:	2200      	movs	r2, #0
 810edee:	701a      	strb	r2, [r3, #0]
 810edf0:	e006      	b.n	810ee00 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 810edf2:	68fb      	ldr	r3, [r7, #12]
 810edf4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810edf8:	3301      	adds	r3, #1
 810edfa:	b2da      	uxtb	r2, r3
 810edfc:	4b0c      	ldr	r3, [pc, #48]	@ (810ee30 <netif_add+0x18c>)
 810edfe:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 810ee00:	4b0c      	ldr	r3, [pc, #48]	@ (810ee34 <netif_add+0x190>)
 810ee02:	681a      	ldr	r2, [r3, #0]
 810ee04:	68fb      	ldr	r3, [r7, #12]
 810ee06:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 810ee08:	4a0a      	ldr	r2, [pc, #40]	@ (810ee34 <netif_add+0x190>)
 810ee0a:	68fb      	ldr	r3, [r7, #12]
 810ee0c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 810ee0e:	68fb      	ldr	r3, [r7, #12]
}
 810ee10:	4618      	mov	r0, r3
 810ee12:	3718      	adds	r7, #24
 810ee14:	46bd      	mov	sp, r7
 810ee16:	bd80      	pop	{r7, pc}
 810ee18:	08118378 	.word	0x08118378
 810ee1c:	08118448 	.word	0x08118448
 810ee20:	08118404 	.word	0x08118404
 810ee24:	08118464 	.word	0x08118464
 810ee28:	0811a670 	.word	0x0811a670
 810ee2c:	0810f24f 	.word	0x0810f24f
 810ee30:	1000b844 	.word	0x1000b844
 810ee34:	1000b83c 	.word	0x1000b83c
 810ee38:	08118488 	.word	0x08118488
 810ee3c:	0811849c 	.word	0x0811849c

0810ee40 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 810ee40:	b580      	push	{r7, lr}
 810ee42:	b082      	sub	sp, #8
 810ee44:	af00      	add	r7, sp, #0
 810ee46:	6078      	str	r0, [r7, #4]
 810ee48:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 810ee4a:	6839      	ldr	r1, [r7, #0]
 810ee4c:	6878      	ldr	r0, [r7, #4]
 810ee4e:	f002 fc89 	bl	8111764 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 810ee52:	6839      	ldr	r1, [r7, #0]
 810ee54:	6878      	ldr	r0, [r7, #4]
 810ee56:	f007 fa6b 	bl	8116330 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 810ee5a:	bf00      	nop
 810ee5c:	3708      	adds	r7, #8
 810ee5e:	46bd      	mov	sp, r7
 810ee60:	bd80      	pop	{r7, pc}
	...

0810ee64 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 810ee64:	b580      	push	{r7, lr}
 810ee66:	b086      	sub	sp, #24
 810ee68:	af00      	add	r7, sp, #0
 810ee6a:	60f8      	str	r0, [r7, #12]
 810ee6c:	60b9      	str	r1, [r7, #8]
 810ee6e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 810ee70:	68bb      	ldr	r3, [r7, #8]
 810ee72:	2b00      	cmp	r3, #0
 810ee74:	d106      	bne.n	810ee84 <netif_do_set_ipaddr+0x20>
 810ee76:	4b1d      	ldr	r3, [pc, #116]	@ (810eeec <netif_do_set_ipaddr+0x88>)
 810ee78:	f240 12cb 	movw	r2, #459	@ 0x1cb
 810ee7c:	491c      	ldr	r1, [pc, #112]	@ (810eef0 <netif_do_set_ipaddr+0x8c>)
 810ee7e:	481d      	ldr	r0, [pc, #116]	@ (810eef4 <netif_do_set_ipaddr+0x90>)
 810ee80:	f007 fd32 	bl	81168e8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 810ee84:	687b      	ldr	r3, [r7, #4]
 810ee86:	2b00      	cmp	r3, #0
 810ee88:	d106      	bne.n	810ee98 <netif_do_set_ipaddr+0x34>
 810ee8a:	4b18      	ldr	r3, [pc, #96]	@ (810eeec <netif_do_set_ipaddr+0x88>)
 810ee8c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 810ee90:	4917      	ldr	r1, [pc, #92]	@ (810eef0 <netif_do_set_ipaddr+0x8c>)
 810ee92:	4818      	ldr	r0, [pc, #96]	@ (810eef4 <netif_do_set_ipaddr+0x90>)
 810ee94:	f007 fd28 	bl	81168e8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 810ee98:	68bb      	ldr	r3, [r7, #8]
 810ee9a:	681a      	ldr	r2, [r3, #0]
 810ee9c:	68fb      	ldr	r3, [r7, #12]
 810ee9e:	3304      	adds	r3, #4
 810eea0:	681b      	ldr	r3, [r3, #0]
 810eea2:	429a      	cmp	r2, r3
 810eea4:	d01c      	beq.n	810eee0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 810eea6:	68bb      	ldr	r3, [r7, #8]
 810eea8:	681b      	ldr	r3, [r3, #0]
 810eeaa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 810eeac:	68fb      	ldr	r3, [r7, #12]
 810eeae:	3304      	adds	r3, #4
 810eeb0:	681a      	ldr	r2, [r3, #0]
 810eeb2:	687b      	ldr	r3, [r7, #4]
 810eeb4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 810eeb6:	f107 0314 	add.w	r3, r7, #20
 810eeba:	4619      	mov	r1, r3
 810eebc:	6878      	ldr	r0, [r7, #4]
 810eebe:	f7ff ffbf 	bl	810ee40 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 810eec2:	68bb      	ldr	r3, [r7, #8]
 810eec4:	2b00      	cmp	r3, #0
 810eec6:	d002      	beq.n	810eece <netif_do_set_ipaddr+0x6a>
 810eec8:	68bb      	ldr	r3, [r7, #8]
 810eeca:	681b      	ldr	r3, [r3, #0]
 810eecc:	e000      	b.n	810eed0 <netif_do_set_ipaddr+0x6c>
 810eece:	2300      	movs	r3, #0
 810eed0:	68fa      	ldr	r2, [r7, #12]
 810eed2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 810eed4:	2101      	movs	r1, #1
 810eed6:	68f8      	ldr	r0, [r7, #12]
 810eed8:	f000 f8d2 	bl	810f080 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 810eedc:	2301      	movs	r3, #1
 810eede:	e000      	b.n	810eee2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 810eee0:	2300      	movs	r3, #0
}
 810eee2:	4618      	mov	r0, r3
 810eee4:	3718      	adds	r7, #24
 810eee6:	46bd      	mov	sp, r7
 810eee8:	bd80      	pop	{r7, pc}
 810eeea:	bf00      	nop
 810eeec:	08118378 	.word	0x08118378
 810eef0:	081184cc 	.word	0x081184cc
 810eef4:	08118404 	.word	0x08118404

0810eef8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 810eef8:	b480      	push	{r7}
 810eefa:	b085      	sub	sp, #20
 810eefc:	af00      	add	r7, sp, #0
 810eefe:	60f8      	str	r0, [r7, #12]
 810ef00:	60b9      	str	r1, [r7, #8]
 810ef02:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 810ef04:	68bb      	ldr	r3, [r7, #8]
 810ef06:	681a      	ldr	r2, [r3, #0]
 810ef08:	68fb      	ldr	r3, [r7, #12]
 810ef0a:	3308      	adds	r3, #8
 810ef0c:	681b      	ldr	r3, [r3, #0]
 810ef0e:	429a      	cmp	r2, r3
 810ef10:	d00a      	beq.n	810ef28 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 810ef12:	68bb      	ldr	r3, [r7, #8]
 810ef14:	2b00      	cmp	r3, #0
 810ef16:	d002      	beq.n	810ef1e <netif_do_set_netmask+0x26>
 810ef18:	68bb      	ldr	r3, [r7, #8]
 810ef1a:	681b      	ldr	r3, [r3, #0]
 810ef1c:	e000      	b.n	810ef20 <netif_do_set_netmask+0x28>
 810ef1e:	2300      	movs	r3, #0
 810ef20:	68fa      	ldr	r2, [r7, #12]
 810ef22:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 810ef24:	2301      	movs	r3, #1
 810ef26:	e000      	b.n	810ef2a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 810ef28:	2300      	movs	r3, #0
}
 810ef2a:	4618      	mov	r0, r3
 810ef2c:	3714      	adds	r7, #20
 810ef2e:	46bd      	mov	sp, r7
 810ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef34:	4770      	bx	lr

0810ef36 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 810ef36:	b480      	push	{r7}
 810ef38:	b085      	sub	sp, #20
 810ef3a:	af00      	add	r7, sp, #0
 810ef3c:	60f8      	str	r0, [r7, #12]
 810ef3e:	60b9      	str	r1, [r7, #8]
 810ef40:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 810ef42:	68bb      	ldr	r3, [r7, #8]
 810ef44:	681a      	ldr	r2, [r3, #0]
 810ef46:	68fb      	ldr	r3, [r7, #12]
 810ef48:	330c      	adds	r3, #12
 810ef4a:	681b      	ldr	r3, [r3, #0]
 810ef4c:	429a      	cmp	r2, r3
 810ef4e:	d00a      	beq.n	810ef66 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 810ef50:	68bb      	ldr	r3, [r7, #8]
 810ef52:	2b00      	cmp	r3, #0
 810ef54:	d002      	beq.n	810ef5c <netif_do_set_gw+0x26>
 810ef56:	68bb      	ldr	r3, [r7, #8]
 810ef58:	681b      	ldr	r3, [r3, #0]
 810ef5a:	e000      	b.n	810ef5e <netif_do_set_gw+0x28>
 810ef5c:	2300      	movs	r3, #0
 810ef5e:	68fa      	ldr	r2, [r7, #12]
 810ef60:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 810ef62:	2301      	movs	r3, #1
 810ef64:	e000      	b.n	810ef68 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 810ef66:	2300      	movs	r3, #0
}
 810ef68:	4618      	mov	r0, r3
 810ef6a:	3714      	adds	r7, #20
 810ef6c:	46bd      	mov	sp, r7
 810ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ef72:	4770      	bx	lr

0810ef74 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 810ef74:	b580      	push	{r7, lr}
 810ef76:	b088      	sub	sp, #32
 810ef78:	af00      	add	r7, sp, #0
 810ef7a:	60f8      	str	r0, [r7, #12]
 810ef7c:	60b9      	str	r1, [r7, #8]
 810ef7e:	607a      	str	r2, [r7, #4]
 810ef80:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 810ef82:	2300      	movs	r3, #0
 810ef84:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 810ef86:	2300      	movs	r3, #0
 810ef88:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 810ef8a:	68bb      	ldr	r3, [r7, #8]
 810ef8c:	2b00      	cmp	r3, #0
 810ef8e:	d101      	bne.n	810ef94 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 810ef90:	4b1c      	ldr	r3, [pc, #112]	@ (810f004 <netif_set_addr+0x90>)
 810ef92:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 810ef94:	687b      	ldr	r3, [r7, #4]
 810ef96:	2b00      	cmp	r3, #0
 810ef98:	d101      	bne.n	810ef9e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 810ef9a:	4b1a      	ldr	r3, [pc, #104]	@ (810f004 <netif_set_addr+0x90>)
 810ef9c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 810ef9e:	683b      	ldr	r3, [r7, #0]
 810efa0:	2b00      	cmp	r3, #0
 810efa2:	d101      	bne.n	810efa8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 810efa4:	4b17      	ldr	r3, [pc, #92]	@ (810f004 <netif_set_addr+0x90>)
 810efa6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 810efa8:	68bb      	ldr	r3, [r7, #8]
 810efaa:	2b00      	cmp	r3, #0
 810efac:	d003      	beq.n	810efb6 <netif_set_addr+0x42>
 810efae:	68bb      	ldr	r3, [r7, #8]
 810efb0:	681b      	ldr	r3, [r3, #0]
 810efb2:	2b00      	cmp	r3, #0
 810efb4:	d101      	bne.n	810efba <netif_set_addr+0x46>
 810efb6:	2301      	movs	r3, #1
 810efb8:	e000      	b.n	810efbc <netif_set_addr+0x48>
 810efba:	2300      	movs	r3, #0
 810efbc:	617b      	str	r3, [r7, #20]
  if (remove) {
 810efbe:	697b      	ldr	r3, [r7, #20]
 810efc0:	2b00      	cmp	r3, #0
 810efc2:	d006      	beq.n	810efd2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 810efc4:	f107 0310 	add.w	r3, r7, #16
 810efc8:	461a      	mov	r2, r3
 810efca:	68b9      	ldr	r1, [r7, #8]
 810efcc:	68f8      	ldr	r0, [r7, #12]
 810efce:	f7ff ff49 	bl	810ee64 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 810efd2:	69fa      	ldr	r2, [r7, #28]
 810efd4:	6879      	ldr	r1, [r7, #4]
 810efd6:	68f8      	ldr	r0, [r7, #12]
 810efd8:	f7ff ff8e 	bl	810eef8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 810efdc:	69ba      	ldr	r2, [r7, #24]
 810efde:	6839      	ldr	r1, [r7, #0]
 810efe0:	68f8      	ldr	r0, [r7, #12]
 810efe2:	f7ff ffa8 	bl	810ef36 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 810efe6:	697b      	ldr	r3, [r7, #20]
 810efe8:	2b00      	cmp	r3, #0
 810efea:	d106      	bne.n	810effa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 810efec:	f107 0310 	add.w	r3, r7, #16
 810eff0:	461a      	mov	r2, r3
 810eff2:	68b9      	ldr	r1, [r7, #8]
 810eff4:	68f8      	ldr	r0, [r7, #12]
 810eff6:	f7ff ff35 	bl	810ee64 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 810effa:	bf00      	nop
 810effc:	3720      	adds	r7, #32
 810effe:	46bd      	mov	sp, r7
 810f000:	bd80      	pop	{r7, pc}
 810f002:	bf00      	nop
 810f004:	0811a670 	.word	0x0811a670

0810f008 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 810f008:	b480      	push	{r7}
 810f00a:	b083      	sub	sp, #12
 810f00c:	af00      	add	r7, sp, #0
 810f00e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 810f010:	4a04      	ldr	r2, [pc, #16]	@ (810f024 <netif_set_default+0x1c>)
 810f012:	687b      	ldr	r3, [r7, #4]
 810f014:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 810f016:	bf00      	nop
 810f018:	370c      	adds	r7, #12
 810f01a:	46bd      	mov	sp, r7
 810f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f020:	4770      	bx	lr
 810f022:	bf00      	nop
 810f024:	1000b840 	.word	0x1000b840

0810f028 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 810f028:	b580      	push	{r7, lr}
 810f02a:	b082      	sub	sp, #8
 810f02c:	af00      	add	r7, sp, #0
 810f02e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 810f030:	687b      	ldr	r3, [r7, #4]
 810f032:	2b00      	cmp	r3, #0
 810f034:	d107      	bne.n	810f046 <netif_set_up+0x1e>
 810f036:	4b0f      	ldr	r3, [pc, #60]	@ (810f074 <netif_set_up+0x4c>)
 810f038:	f44f 7254 	mov.w	r2, #848	@ 0x350
 810f03c:	490e      	ldr	r1, [pc, #56]	@ (810f078 <netif_set_up+0x50>)
 810f03e:	480f      	ldr	r0, [pc, #60]	@ (810f07c <netif_set_up+0x54>)
 810f040:	f007 fc52 	bl	81168e8 <iprintf>
 810f044:	e013      	b.n	810f06e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 810f046:	687b      	ldr	r3, [r7, #4]
 810f048:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810f04c:	f003 0301 	and.w	r3, r3, #1
 810f050:	2b00      	cmp	r3, #0
 810f052:	d10c      	bne.n	810f06e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 810f054:	687b      	ldr	r3, [r7, #4]
 810f056:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810f05a:	f043 0301 	orr.w	r3, r3, #1
 810f05e:	b2da      	uxtb	r2, r3
 810f060:	687b      	ldr	r3, [r7, #4]
 810f062:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 810f066:	2103      	movs	r1, #3
 810f068:	6878      	ldr	r0, [r7, #4]
 810f06a:	f000 f809 	bl	810f080 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 810f06e:	3708      	adds	r7, #8
 810f070:	46bd      	mov	sp, r7
 810f072:	bd80      	pop	{r7, pc}
 810f074:	08118378 	.word	0x08118378
 810f078:	0811853c 	.word	0x0811853c
 810f07c:	08118404 	.word	0x08118404

0810f080 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 810f080:	b580      	push	{r7, lr}
 810f082:	b082      	sub	sp, #8
 810f084:	af00      	add	r7, sp, #0
 810f086:	6078      	str	r0, [r7, #4]
 810f088:	460b      	mov	r3, r1
 810f08a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 810f08c:	687b      	ldr	r3, [r7, #4]
 810f08e:	2b00      	cmp	r3, #0
 810f090:	d106      	bne.n	810f0a0 <netif_issue_reports+0x20>
 810f092:	4b18      	ldr	r3, [pc, #96]	@ (810f0f4 <netif_issue_reports+0x74>)
 810f094:	f240 326d 	movw	r2, #877	@ 0x36d
 810f098:	4917      	ldr	r1, [pc, #92]	@ (810f0f8 <netif_issue_reports+0x78>)
 810f09a:	4818      	ldr	r0, [pc, #96]	@ (810f0fc <netif_issue_reports+0x7c>)
 810f09c:	f007 fc24 	bl	81168e8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 810f0a0:	687b      	ldr	r3, [r7, #4]
 810f0a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810f0a6:	f003 0304 	and.w	r3, r3, #4
 810f0aa:	2b00      	cmp	r3, #0
 810f0ac:	d01e      	beq.n	810f0ec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 810f0ae:	687b      	ldr	r3, [r7, #4]
 810f0b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810f0b4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 810f0b8:	2b00      	cmp	r3, #0
 810f0ba:	d017      	beq.n	810f0ec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 810f0bc:	78fb      	ldrb	r3, [r7, #3]
 810f0be:	f003 0301 	and.w	r3, r3, #1
 810f0c2:	2b00      	cmp	r3, #0
 810f0c4:	d013      	beq.n	810f0ee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 810f0c6:	687b      	ldr	r3, [r7, #4]
 810f0c8:	3304      	adds	r3, #4
 810f0ca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 810f0cc:	2b00      	cmp	r3, #0
 810f0ce:	d00e      	beq.n	810f0ee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 810f0d0:	687b      	ldr	r3, [r7, #4]
 810f0d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810f0d6:	f003 0308 	and.w	r3, r3, #8
 810f0da:	2b00      	cmp	r3, #0
 810f0dc:	d007      	beq.n	810f0ee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 810f0de:	687b      	ldr	r3, [r7, #4]
 810f0e0:	3304      	adds	r3, #4
 810f0e2:	4619      	mov	r1, r3
 810f0e4:	6878      	ldr	r0, [r7, #4]
 810f0e6:	f7fd fc11 	bl	810c90c <etharp_request>
 810f0ea:	e000      	b.n	810f0ee <netif_issue_reports+0x6e>
    return;
 810f0ec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 810f0ee:	3708      	adds	r7, #8
 810f0f0:	46bd      	mov	sp, r7
 810f0f2:	bd80      	pop	{r7, pc}
 810f0f4:	08118378 	.word	0x08118378
 810f0f8:	08118558 	.word	0x08118558
 810f0fc:	08118404 	.word	0x08118404

0810f100 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 810f100:	b580      	push	{r7, lr}
 810f102:	b082      	sub	sp, #8
 810f104:	af00      	add	r7, sp, #0
 810f106:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 810f108:	687b      	ldr	r3, [r7, #4]
 810f10a:	2b00      	cmp	r3, #0
 810f10c:	d107      	bne.n	810f11e <netif_set_down+0x1e>
 810f10e:	4b12      	ldr	r3, [pc, #72]	@ (810f158 <netif_set_down+0x58>)
 810f110:	f240 329b 	movw	r2, #923	@ 0x39b
 810f114:	4911      	ldr	r1, [pc, #68]	@ (810f15c <netif_set_down+0x5c>)
 810f116:	4812      	ldr	r0, [pc, #72]	@ (810f160 <netif_set_down+0x60>)
 810f118:	f007 fbe6 	bl	81168e8 <iprintf>
 810f11c:	e019      	b.n	810f152 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 810f11e:	687b      	ldr	r3, [r7, #4]
 810f120:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810f124:	f003 0301 	and.w	r3, r3, #1
 810f128:	2b00      	cmp	r3, #0
 810f12a:	d012      	beq.n	810f152 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 810f12c:	687b      	ldr	r3, [r7, #4]
 810f12e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810f132:	f023 0301 	bic.w	r3, r3, #1
 810f136:	b2da      	uxtb	r2, r3
 810f138:	687b      	ldr	r3, [r7, #4]
 810f13a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 810f13e:	687b      	ldr	r3, [r7, #4]
 810f140:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810f144:	f003 0308 	and.w	r3, r3, #8
 810f148:	2b00      	cmp	r3, #0
 810f14a:	d002      	beq.n	810f152 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 810f14c:	6878      	ldr	r0, [r7, #4]
 810f14e:	f7fc ff9b 	bl	810c088 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 810f152:	3708      	adds	r7, #8
 810f154:	46bd      	mov	sp, r7
 810f156:	bd80      	pop	{r7, pc}
 810f158:	08118378 	.word	0x08118378
 810f15c:	0811857c 	.word	0x0811857c
 810f160:	08118404 	.word	0x08118404

0810f164 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 810f164:	b580      	push	{r7, lr}
 810f166:	b082      	sub	sp, #8
 810f168:	af00      	add	r7, sp, #0
 810f16a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 810f16c:	687b      	ldr	r3, [r7, #4]
 810f16e:	2b00      	cmp	r3, #0
 810f170:	d107      	bne.n	810f182 <netif_set_link_up+0x1e>
 810f172:	4b13      	ldr	r3, [pc, #76]	@ (810f1c0 <netif_set_link_up+0x5c>)
 810f174:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 810f178:	4912      	ldr	r1, [pc, #72]	@ (810f1c4 <netif_set_link_up+0x60>)
 810f17a:	4813      	ldr	r0, [pc, #76]	@ (810f1c8 <netif_set_link_up+0x64>)
 810f17c:	f007 fbb4 	bl	81168e8 <iprintf>
 810f180:	e01b      	b.n	810f1ba <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 810f182:	687b      	ldr	r3, [r7, #4]
 810f184:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810f188:	f003 0304 	and.w	r3, r3, #4
 810f18c:	2b00      	cmp	r3, #0
 810f18e:	d114      	bne.n	810f1ba <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 810f190:	687b      	ldr	r3, [r7, #4]
 810f192:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810f196:	f043 0304 	orr.w	r3, r3, #4
 810f19a:	b2da      	uxtb	r2, r3
 810f19c:	687b      	ldr	r3, [r7, #4]
 810f19e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 810f1a2:	2103      	movs	r1, #3
 810f1a4:	6878      	ldr	r0, [r7, #4]
 810f1a6:	f7ff ff6b 	bl	810f080 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 810f1aa:	687b      	ldr	r3, [r7, #4]
 810f1ac:	69db      	ldr	r3, [r3, #28]
 810f1ae:	2b00      	cmp	r3, #0
 810f1b0:	d003      	beq.n	810f1ba <netif_set_link_up+0x56>
 810f1b2:	687b      	ldr	r3, [r7, #4]
 810f1b4:	69db      	ldr	r3, [r3, #28]
 810f1b6:	6878      	ldr	r0, [r7, #4]
 810f1b8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 810f1ba:	3708      	adds	r7, #8
 810f1bc:	46bd      	mov	sp, r7
 810f1be:	bd80      	pop	{r7, pc}
 810f1c0:	08118378 	.word	0x08118378
 810f1c4:	0811859c 	.word	0x0811859c
 810f1c8:	08118404 	.word	0x08118404

0810f1cc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 810f1cc:	b580      	push	{r7, lr}
 810f1ce:	b082      	sub	sp, #8
 810f1d0:	af00      	add	r7, sp, #0
 810f1d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 810f1d4:	687b      	ldr	r3, [r7, #4]
 810f1d6:	2b00      	cmp	r3, #0
 810f1d8:	d107      	bne.n	810f1ea <netif_set_link_down+0x1e>
 810f1da:	4b11      	ldr	r3, [pc, #68]	@ (810f220 <netif_set_link_down+0x54>)
 810f1dc:	f240 4206 	movw	r2, #1030	@ 0x406
 810f1e0:	4910      	ldr	r1, [pc, #64]	@ (810f224 <netif_set_link_down+0x58>)
 810f1e2:	4811      	ldr	r0, [pc, #68]	@ (810f228 <netif_set_link_down+0x5c>)
 810f1e4:	f007 fb80 	bl	81168e8 <iprintf>
 810f1e8:	e017      	b.n	810f21a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 810f1ea:	687b      	ldr	r3, [r7, #4]
 810f1ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810f1f0:	f003 0304 	and.w	r3, r3, #4
 810f1f4:	2b00      	cmp	r3, #0
 810f1f6:	d010      	beq.n	810f21a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 810f1f8:	687b      	ldr	r3, [r7, #4]
 810f1fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810f1fe:	f023 0304 	bic.w	r3, r3, #4
 810f202:	b2da      	uxtb	r2, r3
 810f204:	687b      	ldr	r3, [r7, #4]
 810f206:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 810f20a:	687b      	ldr	r3, [r7, #4]
 810f20c:	69db      	ldr	r3, [r3, #28]
 810f20e:	2b00      	cmp	r3, #0
 810f210:	d003      	beq.n	810f21a <netif_set_link_down+0x4e>
 810f212:	687b      	ldr	r3, [r7, #4]
 810f214:	69db      	ldr	r3, [r3, #28]
 810f216:	6878      	ldr	r0, [r7, #4]
 810f218:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 810f21a:	3708      	adds	r7, #8
 810f21c:	46bd      	mov	sp, r7
 810f21e:	bd80      	pop	{r7, pc}
 810f220:	08118378 	.word	0x08118378
 810f224:	081185c0 	.word	0x081185c0
 810f228:	08118404 	.word	0x08118404

0810f22c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 810f22c:	b480      	push	{r7}
 810f22e:	b083      	sub	sp, #12
 810f230:	af00      	add	r7, sp, #0
 810f232:	6078      	str	r0, [r7, #4]
 810f234:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 810f236:	687b      	ldr	r3, [r7, #4]
 810f238:	2b00      	cmp	r3, #0
 810f23a:	d002      	beq.n	810f242 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 810f23c:	687b      	ldr	r3, [r7, #4]
 810f23e:	683a      	ldr	r2, [r7, #0]
 810f240:	61da      	str	r2, [r3, #28]
  }
}
 810f242:	bf00      	nop
 810f244:	370c      	adds	r7, #12
 810f246:	46bd      	mov	sp, r7
 810f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f24c:	4770      	bx	lr

0810f24e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 810f24e:	b480      	push	{r7}
 810f250:	b085      	sub	sp, #20
 810f252:	af00      	add	r7, sp, #0
 810f254:	60f8      	str	r0, [r7, #12]
 810f256:	60b9      	str	r1, [r7, #8]
 810f258:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 810f25a:	f06f 030b 	mvn.w	r3, #11
}
 810f25e:	4618      	mov	r0, r3
 810f260:	3714      	adds	r7, #20
 810f262:	46bd      	mov	sp, r7
 810f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f268:	4770      	bx	lr
	...

0810f26c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 810f26c:	b480      	push	{r7}
 810f26e:	b085      	sub	sp, #20
 810f270:	af00      	add	r7, sp, #0
 810f272:	4603      	mov	r3, r0
 810f274:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 810f276:	79fb      	ldrb	r3, [r7, #7]
 810f278:	2b00      	cmp	r3, #0
 810f27a:	d013      	beq.n	810f2a4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 810f27c:	4b0d      	ldr	r3, [pc, #52]	@ (810f2b4 <netif_get_by_index+0x48>)
 810f27e:	681b      	ldr	r3, [r3, #0]
 810f280:	60fb      	str	r3, [r7, #12]
 810f282:	e00c      	b.n	810f29e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 810f284:	68fb      	ldr	r3, [r7, #12]
 810f286:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810f28a:	3301      	adds	r3, #1
 810f28c:	b2db      	uxtb	r3, r3
 810f28e:	79fa      	ldrb	r2, [r7, #7]
 810f290:	429a      	cmp	r2, r3
 810f292:	d101      	bne.n	810f298 <netif_get_by_index+0x2c>
        return netif; /* found! */
 810f294:	68fb      	ldr	r3, [r7, #12]
 810f296:	e006      	b.n	810f2a6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 810f298:	68fb      	ldr	r3, [r7, #12]
 810f29a:	681b      	ldr	r3, [r3, #0]
 810f29c:	60fb      	str	r3, [r7, #12]
 810f29e:	68fb      	ldr	r3, [r7, #12]
 810f2a0:	2b00      	cmp	r3, #0
 810f2a2:	d1ef      	bne.n	810f284 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 810f2a4:	2300      	movs	r3, #0
}
 810f2a6:	4618      	mov	r0, r3
 810f2a8:	3714      	adds	r7, #20
 810f2aa:	46bd      	mov	sp, r7
 810f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f2b0:	4770      	bx	lr
 810f2b2:	bf00      	nop
 810f2b4:	1000b83c 	.word	0x1000b83c

0810f2b8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 810f2b8:	b580      	push	{r7, lr}
 810f2ba:	b082      	sub	sp, #8
 810f2bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 810f2be:	f000 fee5 	bl	811008c <sys_arch_protect>
 810f2c2:	6038      	str	r0, [r7, #0]
 810f2c4:	4b0d      	ldr	r3, [pc, #52]	@ (810f2fc <pbuf_free_ooseq+0x44>)
 810f2c6:	2200      	movs	r2, #0
 810f2c8:	701a      	strb	r2, [r3, #0]
 810f2ca:	6838      	ldr	r0, [r7, #0]
 810f2cc:	f000 feec 	bl	81100a8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 810f2d0:	4b0b      	ldr	r3, [pc, #44]	@ (810f300 <pbuf_free_ooseq+0x48>)
 810f2d2:	681b      	ldr	r3, [r3, #0]
 810f2d4:	607b      	str	r3, [r7, #4]
 810f2d6:	e00a      	b.n	810f2ee <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 810f2d8:	687b      	ldr	r3, [r7, #4]
 810f2da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810f2dc:	2b00      	cmp	r3, #0
 810f2de:	d003      	beq.n	810f2e8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 810f2e0:	6878      	ldr	r0, [r7, #4]
 810f2e2:	f002 fa7d 	bl	81117e0 <tcp_free_ooseq>
      return;
 810f2e6:	e005      	b.n	810f2f4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 810f2e8:	687b      	ldr	r3, [r7, #4]
 810f2ea:	68db      	ldr	r3, [r3, #12]
 810f2ec:	607b      	str	r3, [r7, #4]
 810f2ee:	687b      	ldr	r3, [r7, #4]
 810f2f0:	2b00      	cmp	r3, #0
 810f2f2:	d1f1      	bne.n	810f2d8 <pbuf_free_ooseq+0x20>
    }
  }
}
 810f2f4:	3708      	adds	r7, #8
 810f2f6:	46bd      	mov	sp, r7
 810f2f8:	bd80      	pop	{r7, pc}
 810f2fa:	bf00      	nop
 810f2fc:	1000b845 	.word	0x1000b845
 810f300:	1000b858 	.word	0x1000b858

0810f304 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 810f304:	b580      	push	{r7, lr}
 810f306:	b082      	sub	sp, #8
 810f308:	af00      	add	r7, sp, #0
 810f30a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 810f30c:	f7ff ffd4 	bl	810f2b8 <pbuf_free_ooseq>
}
 810f310:	bf00      	nop
 810f312:	3708      	adds	r7, #8
 810f314:	46bd      	mov	sp, r7
 810f316:	bd80      	pop	{r7, pc}

0810f318 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 810f318:	b580      	push	{r7, lr}
 810f31a:	b082      	sub	sp, #8
 810f31c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 810f31e:	f000 feb5 	bl	811008c <sys_arch_protect>
 810f322:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 810f324:	4b0f      	ldr	r3, [pc, #60]	@ (810f364 <pbuf_pool_is_empty+0x4c>)
 810f326:	781b      	ldrb	r3, [r3, #0]
 810f328:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 810f32a:	4b0e      	ldr	r3, [pc, #56]	@ (810f364 <pbuf_pool_is_empty+0x4c>)
 810f32c:	2201      	movs	r2, #1
 810f32e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 810f330:	6878      	ldr	r0, [r7, #4]
 810f332:	f000 feb9 	bl	81100a8 <sys_arch_unprotect>

  if (!queued) {
 810f336:	78fb      	ldrb	r3, [r7, #3]
 810f338:	2b00      	cmp	r3, #0
 810f33a:	d10f      	bne.n	810f35c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 810f33c:	2100      	movs	r1, #0
 810f33e:	480a      	ldr	r0, [pc, #40]	@ (810f368 <pbuf_pool_is_empty+0x50>)
 810f340:	f006 f914 	bl	811556c <tcpip_try_callback>
 810f344:	4603      	mov	r3, r0
 810f346:	2b00      	cmp	r3, #0
 810f348:	d008      	beq.n	810f35c <pbuf_pool_is_empty+0x44>
 810f34a:	f000 fe9f 	bl	811008c <sys_arch_protect>
 810f34e:	6078      	str	r0, [r7, #4]
 810f350:	4b04      	ldr	r3, [pc, #16]	@ (810f364 <pbuf_pool_is_empty+0x4c>)
 810f352:	2200      	movs	r2, #0
 810f354:	701a      	strb	r2, [r3, #0]
 810f356:	6878      	ldr	r0, [r7, #4]
 810f358:	f000 fea6 	bl	81100a8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 810f35c:	bf00      	nop
 810f35e:	3708      	adds	r7, #8
 810f360:	46bd      	mov	sp, r7
 810f362:	bd80      	pop	{r7, pc}
 810f364:	1000b845 	.word	0x1000b845
 810f368:	0810f305 	.word	0x0810f305

0810f36c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 810f36c:	b480      	push	{r7}
 810f36e:	b085      	sub	sp, #20
 810f370:	af00      	add	r7, sp, #0
 810f372:	60f8      	str	r0, [r7, #12]
 810f374:	60b9      	str	r1, [r7, #8]
 810f376:	4611      	mov	r1, r2
 810f378:	461a      	mov	r2, r3
 810f37a:	460b      	mov	r3, r1
 810f37c:	80fb      	strh	r3, [r7, #6]
 810f37e:	4613      	mov	r3, r2
 810f380:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 810f382:	68fb      	ldr	r3, [r7, #12]
 810f384:	2200      	movs	r2, #0
 810f386:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 810f388:	68fb      	ldr	r3, [r7, #12]
 810f38a:	68ba      	ldr	r2, [r7, #8]
 810f38c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 810f38e:	68fb      	ldr	r3, [r7, #12]
 810f390:	88fa      	ldrh	r2, [r7, #6]
 810f392:	811a      	strh	r2, [r3, #8]
  p->len = len;
 810f394:	68fb      	ldr	r3, [r7, #12]
 810f396:	88ba      	ldrh	r2, [r7, #4]
 810f398:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 810f39a:	8b3b      	ldrh	r3, [r7, #24]
 810f39c:	b2da      	uxtb	r2, r3
 810f39e:	68fb      	ldr	r3, [r7, #12]
 810f3a0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 810f3a2:	68fb      	ldr	r3, [r7, #12]
 810f3a4:	7f3a      	ldrb	r2, [r7, #28]
 810f3a6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 810f3a8:	68fb      	ldr	r3, [r7, #12]
 810f3aa:	2201      	movs	r2, #1
 810f3ac:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 810f3ae:	68fb      	ldr	r3, [r7, #12]
 810f3b0:	2200      	movs	r2, #0
 810f3b2:	73da      	strb	r2, [r3, #15]
}
 810f3b4:	bf00      	nop
 810f3b6:	3714      	adds	r7, #20
 810f3b8:	46bd      	mov	sp, r7
 810f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f3be:	4770      	bx	lr

0810f3c0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 810f3c0:	b580      	push	{r7, lr}
 810f3c2:	b08c      	sub	sp, #48	@ 0x30
 810f3c4:	af02      	add	r7, sp, #8
 810f3c6:	4603      	mov	r3, r0
 810f3c8:	71fb      	strb	r3, [r7, #7]
 810f3ca:	460b      	mov	r3, r1
 810f3cc:	80bb      	strh	r3, [r7, #4]
 810f3ce:	4613      	mov	r3, r2
 810f3d0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 810f3d2:	79fb      	ldrb	r3, [r7, #7]
 810f3d4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 810f3d6:	887b      	ldrh	r3, [r7, #2]
 810f3d8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 810f3dc:	f000 8082 	beq.w	810f4e4 <pbuf_alloc+0x124>
 810f3e0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 810f3e4:	f300 80ca 	bgt.w	810f57c <pbuf_alloc+0x1bc>
 810f3e8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 810f3ec:	d010      	beq.n	810f410 <pbuf_alloc+0x50>
 810f3ee:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 810f3f2:	f300 80c3 	bgt.w	810f57c <pbuf_alloc+0x1bc>
 810f3f6:	2b01      	cmp	r3, #1
 810f3f8:	d002      	beq.n	810f400 <pbuf_alloc+0x40>
 810f3fa:	2b41      	cmp	r3, #65	@ 0x41
 810f3fc:	f040 80be 	bne.w	810f57c <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 810f400:	887a      	ldrh	r2, [r7, #2]
 810f402:	88bb      	ldrh	r3, [r7, #4]
 810f404:	4619      	mov	r1, r3
 810f406:	2000      	movs	r0, #0
 810f408:	f000 f8d4 	bl	810f5b4 <pbuf_alloc_reference>
 810f40c:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 810f40e:	e0bf      	b.n	810f590 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 810f410:	2300      	movs	r3, #0
 810f412:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 810f414:	2300      	movs	r3, #0
 810f416:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 810f418:	88bb      	ldrh	r3, [r7, #4]
 810f41a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 810f41c:	200c      	movs	r0, #12
 810f41e:	f7ff fb99 	bl	810eb54 <memp_malloc>
 810f422:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 810f424:	693b      	ldr	r3, [r7, #16]
 810f426:	2b00      	cmp	r3, #0
 810f428:	d109      	bne.n	810f43e <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 810f42a:	f7ff ff75 	bl	810f318 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 810f42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f430:	2b00      	cmp	r3, #0
 810f432:	d002      	beq.n	810f43a <pbuf_alloc+0x7a>
            pbuf_free(p);
 810f434:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810f436:	f000 faab 	bl	810f990 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 810f43a:	2300      	movs	r3, #0
 810f43c:	e0a9      	b.n	810f592 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 810f43e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810f440:	3303      	adds	r3, #3
 810f442:	b29b      	uxth	r3, r3
 810f444:	f023 0303 	bic.w	r3, r3, #3
 810f448:	b29b      	uxth	r3, r3
 810f44a:	f5c3 63bd 	rsb	r3, r3, #1512	@ 0x5e8
 810f44e:	3304      	adds	r3, #4
 810f450:	b29b      	uxth	r3, r3
 810f452:	8b7a      	ldrh	r2, [r7, #26]
 810f454:	4293      	cmp	r3, r2
 810f456:	bf28      	it	cs
 810f458:	4613      	movcs	r3, r2
 810f45a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 810f45c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810f45e:	3310      	adds	r3, #16
 810f460:	693a      	ldr	r2, [r7, #16]
 810f462:	4413      	add	r3, r2
 810f464:	3303      	adds	r3, #3
 810f466:	f023 0303 	bic.w	r3, r3, #3
 810f46a:	4618      	mov	r0, r3
 810f46c:	89f9      	ldrh	r1, [r7, #14]
 810f46e:	8b7a      	ldrh	r2, [r7, #26]
 810f470:	2300      	movs	r3, #0
 810f472:	9301      	str	r3, [sp, #4]
 810f474:	887b      	ldrh	r3, [r7, #2]
 810f476:	9300      	str	r3, [sp, #0]
 810f478:	460b      	mov	r3, r1
 810f47a:	4601      	mov	r1, r0
 810f47c:	6938      	ldr	r0, [r7, #16]
 810f47e:	f7ff ff75 	bl	810f36c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 810f482:	693b      	ldr	r3, [r7, #16]
 810f484:	685b      	ldr	r3, [r3, #4]
 810f486:	f003 0303 	and.w	r3, r3, #3
 810f48a:	2b00      	cmp	r3, #0
 810f48c:	d006      	beq.n	810f49c <pbuf_alloc+0xdc>
 810f48e:	4b43      	ldr	r3, [pc, #268]	@ (810f59c <pbuf_alloc+0x1dc>)
 810f490:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810f494:	4942      	ldr	r1, [pc, #264]	@ (810f5a0 <pbuf_alloc+0x1e0>)
 810f496:	4843      	ldr	r0, [pc, #268]	@ (810f5a4 <pbuf_alloc+0x1e4>)
 810f498:	f007 fa26 	bl	81168e8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 810f49c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810f49e:	3303      	adds	r3, #3
 810f4a0:	f023 0303 	bic.w	r3, r3, #3
 810f4a4:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 810f4a8:	4293      	cmp	r3, r2
 810f4aa:	d106      	bne.n	810f4ba <pbuf_alloc+0xfa>
 810f4ac:	4b3b      	ldr	r3, [pc, #236]	@ (810f59c <pbuf_alloc+0x1dc>)
 810f4ae:	f44f 7281 	mov.w	r2, #258	@ 0x102
 810f4b2:	493d      	ldr	r1, [pc, #244]	@ (810f5a8 <pbuf_alloc+0x1e8>)
 810f4b4:	483b      	ldr	r0, [pc, #236]	@ (810f5a4 <pbuf_alloc+0x1e4>)
 810f4b6:	f007 fa17 	bl	81168e8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 810f4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f4bc:	2b00      	cmp	r3, #0
 810f4be:	d102      	bne.n	810f4c6 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 810f4c0:	693b      	ldr	r3, [r7, #16]
 810f4c2:	627b      	str	r3, [r7, #36]	@ 0x24
 810f4c4:	e002      	b.n	810f4cc <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 810f4c6:	69fb      	ldr	r3, [r7, #28]
 810f4c8:	693a      	ldr	r2, [r7, #16]
 810f4ca:	601a      	str	r2, [r3, #0]
        }
        last = q;
 810f4cc:	693b      	ldr	r3, [r7, #16]
 810f4ce:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 810f4d0:	8b7a      	ldrh	r2, [r7, #26]
 810f4d2:	89fb      	ldrh	r3, [r7, #14]
 810f4d4:	1ad3      	subs	r3, r2, r3
 810f4d6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 810f4d8:	2300      	movs	r3, #0
 810f4da:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 810f4dc:	8b7b      	ldrh	r3, [r7, #26]
 810f4de:	2b00      	cmp	r3, #0
 810f4e0:	d19c      	bne.n	810f41c <pbuf_alloc+0x5c>
      break;
 810f4e2:	e055      	b.n	810f590 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 810f4e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810f4e6:	3303      	adds	r3, #3
 810f4e8:	b29b      	uxth	r3, r3
 810f4ea:	f023 0303 	bic.w	r3, r3, #3
 810f4ee:	b29a      	uxth	r2, r3
 810f4f0:	88bb      	ldrh	r3, [r7, #4]
 810f4f2:	3303      	adds	r3, #3
 810f4f4:	b29b      	uxth	r3, r3
 810f4f6:	f023 0303 	bic.w	r3, r3, #3
 810f4fa:	b29b      	uxth	r3, r3
 810f4fc:	4413      	add	r3, r2
 810f4fe:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 810f500:	8b3b      	ldrh	r3, [r7, #24]
 810f502:	3310      	adds	r3, #16
 810f504:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 810f506:	8b3a      	ldrh	r2, [r7, #24]
 810f508:	88bb      	ldrh	r3, [r7, #4]
 810f50a:	3303      	adds	r3, #3
 810f50c:	f023 0303 	bic.w	r3, r3, #3
 810f510:	429a      	cmp	r2, r3
 810f512:	d306      	bcc.n	810f522 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 810f514:	8afa      	ldrh	r2, [r7, #22]
 810f516:	88bb      	ldrh	r3, [r7, #4]
 810f518:	3303      	adds	r3, #3
 810f51a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 810f51e:	429a      	cmp	r2, r3
 810f520:	d201      	bcs.n	810f526 <pbuf_alloc+0x166>
        return NULL;
 810f522:	2300      	movs	r3, #0
 810f524:	e035      	b.n	810f592 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 810f526:	8afb      	ldrh	r3, [r7, #22]
 810f528:	4618      	mov	r0, r3
 810f52a:	f7ff f96b 	bl	810e804 <mem_malloc>
 810f52e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 810f530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f532:	2b00      	cmp	r3, #0
 810f534:	d101      	bne.n	810f53a <pbuf_alloc+0x17a>
        return NULL;
 810f536:	2300      	movs	r3, #0
 810f538:	e02b      	b.n	810f592 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 810f53a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810f53c:	3310      	adds	r3, #16
 810f53e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810f540:	4413      	add	r3, r2
 810f542:	3303      	adds	r3, #3
 810f544:	f023 0303 	bic.w	r3, r3, #3
 810f548:	4618      	mov	r0, r3
 810f54a:	88b9      	ldrh	r1, [r7, #4]
 810f54c:	88ba      	ldrh	r2, [r7, #4]
 810f54e:	2300      	movs	r3, #0
 810f550:	9301      	str	r3, [sp, #4]
 810f552:	887b      	ldrh	r3, [r7, #2]
 810f554:	9300      	str	r3, [sp, #0]
 810f556:	460b      	mov	r3, r1
 810f558:	4601      	mov	r1, r0
 810f55a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810f55c:	f7ff ff06 	bl	810f36c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 810f560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f562:	685b      	ldr	r3, [r3, #4]
 810f564:	f003 0303 	and.w	r3, r3, #3
 810f568:	2b00      	cmp	r3, #0
 810f56a:	d010      	beq.n	810f58e <pbuf_alloc+0x1ce>
 810f56c:	4b0b      	ldr	r3, [pc, #44]	@ (810f59c <pbuf_alloc+0x1dc>)
 810f56e:	f44f 7291 	mov.w	r2, #290	@ 0x122
 810f572:	490e      	ldr	r1, [pc, #56]	@ (810f5ac <pbuf_alloc+0x1ec>)
 810f574:	480b      	ldr	r0, [pc, #44]	@ (810f5a4 <pbuf_alloc+0x1e4>)
 810f576:	f007 f9b7 	bl	81168e8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 810f57a:	e008      	b.n	810f58e <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 810f57c:	4b07      	ldr	r3, [pc, #28]	@ (810f59c <pbuf_alloc+0x1dc>)
 810f57e:	f240 1227 	movw	r2, #295	@ 0x127
 810f582:	490b      	ldr	r1, [pc, #44]	@ (810f5b0 <pbuf_alloc+0x1f0>)
 810f584:	4807      	ldr	r0, [pc, #28]	@ (810f5a4 <pbuf_alloc+0x1e4>)
 810f586:	f007 f9af 	bl	81168e8 <iprintf>
      return NULL;
 810f58a:	2300      	movs	r3, #0
 810f58c:	e001      	b.n	810f592 <pbuf_alloc+0x1d2>
      break;
 810f58e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 810f590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810f592:	4618      	mov	r0, r3
 810f594:	3728      	adds	r7, #40	@ 0x28
 810f596:	46bd      	mov	sp, r7
 810f598:	bd80      	pop	{r7, pc}
 810f59a:	bf00      	nop
 810f59c:	081185e4 	.word	0x081185e4
 810f5a0:	08118654 	.word	0x08118654
 810f5a4:	08118684 	.word	0x08118684
 810f5a8:	081186ac 	.word	0x081186ac
 810f5ac:	081186e0 	.word	0x081186e0
 810f5b0:	0811870c 	.word	0x0811870c

0810f5b4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 810f5b4:	b580      	push	{r7, lr}
 810f5b6:	b086      	sub	sp, #24
 810f5b8:	af02      	add	r7, sp, #8
 810f5ba:	6078      	str	r0, [r7, #4]
 810f5bc:	460b      	mov	r3, r1
 810f5be:	807b      	strh	r3, [r7, #2]
 810f5c0:	4613      	mov	r3, r2
 810f5c2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 810f5c4:	883b      	ldrh	r3, [r7, #0]
 810f5c6:	2b41      	cmp	r3, #65	@ 0x41
 810f5c8:	d009      	beq.n	810f5de <pbuf_alloc_reference+0x2a>
 810f5ca:	883b      	ldrh	r3, [r7, #0]
 810f5cc:	2b01      	cmp	r3, #1
 810f5ce:	d006      	beq.n	810f5de <pbuf_alloc_reference+0x2a>
 810f5d0:	4b0f      	ldr	r3, [pc, #60]	@ (810f610 <pbuf_alloc_reference+0x5c>)
 810f5d2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 810f5d6:	490f      	ldr	r1, [pc, #60]	@ (810f614 <pbuf_alloc_reference+0x60>)
 810f5d8:	480f      	ldr	r0, [pc, #60]	@ (810f618 <pbuf_alloc_reference+0x64>)
 810f5da:	f007 f985 	bl	81168e8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 810f5de:	200b      	movs	r0, #11
 810f5e0:	f7ff fab8 	bl	810eb54 <memp_malloc>
 810f5e4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 810f5e6:	68fb      	ldr	r3, [r7, #12]
 810f5e8:	2b00      	cmp	r3, #0
 810f5ea:	d101      	bne.n	810f5f0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 810f5ec:	2300      	movs	r3, #0
 810f5ee:	e00b      	b.n	810f608 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 810f5f0:	8879      	ldrh	r1, [r7, #2]
 810f5f2:	887a      	ldrh	r2, [r7, #2]
 810f5f4:	2300      	movs	r3, #0
 810f5f6:	9301      	str	r3, [sp, #4]
 810f5f8:	883b      	ldrh	r3, [r7, #0]
 810f5fa:	9300      	str	r3, [sp, #0]
 810f5fc:	460b      	mov	r3, r1
 810f5fe:	6879      	ldr	r1, [r7, #4]
 810f600:	68f8      	ldr	r0, [r7, #12]
 810f602:	f7ff feb3 	bl	810f36c <pbuf_init_alloced_pbuf>
  return p;
 810f606:	68fb      	ldr	r3, [r7, #12]
}
 810f608:	4618      	mov	r0, r3
 810f60a:	3710      	adds	r7, #16
 810f60c:	46bd      	mov	sp, r7
 810f60e:	bd80      	pop	{r7, pc}
 810f610:	081185e4 	.word	0x081185e4
 810f614:	08118728 	.word	0x08118728
 810f618:	08118684 	.word	0x08118684

0810f61c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 810f61c:	b580      	push	{r7, lr}
 810f61e:	b088      	sub	sp, #32
 810f620:	af02      	add	r7, sp, #8
 810f622:	607b      	str	r3, [r7, #4]
 810f624:	4603      	mov	r3, r0
 810f626:	73fb      	strb	r3, [r7, #15]
 810f628:	460b      	mov	r3, r1
 810f62a:	81bb      	strh	r3, [r7, #12]
 810f62c:	4613      	mov	r3, r2
 810f62e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 810f630:	7bfb      	ldrb	r3, [r7, #15]
 810f632:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 810f634:	8a7b      	ldrh	r3, [r7, #18]
 810f636:	3303      	adds	r3, #3
 810f638:	f023 0203 	bic.w	r2, r3, #3
 810f63c:	89bb      	ldrh	r3, [r7, #12]
 810f63e:	441a      	add	r2, r3
 810f640:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810f642:	429a      	cmp	r2, r3
 810f644:	d901      	bls.n	810f64a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 810f646:	2300      	movs	r3, #0
 810f648:	e018      	b.n	810f67c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 810f64a:	6a3b      	ldr	r3, [r7, #32]
 810f64c:	2b00      	cmp	r3, #0
 810f64e:	d007      	beq.n	810f660 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 810f650:	8a7b      	ldrh	r3, [r7, #18]
 810f652:	3303      	adds	r3, #3
 810f654:	f023 0303 	bic.w	r3, r3, #3
 810f658:	6a3a      	ldr	r2, [r7, #32]
 810f65a:	4413      	add	r3, r2
 810f65c:	617b      	str	r3, [r7, #20]
 810f65e:	e001      	b.n	810f664 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 810f660:	2300      	movs	r3, #0
 810f662:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 810f664:	6878      	ldr	r0, [r7, #4]
 810f666:	89b9      	ldrh	r1, [r7, #12]
 810f668:	89ba      	ldrh	r2, [r7, #12]
 810f66a:	2302      	movs	r3, #2
 810f66c:	9301      	str	r3, [sp, #4]
 810f66e:	897b      	ldrh	r3, [r7, #10]
 810f670:	9300      	str	r3, [sp, #0]
 810f672:	460b      	mov	r3, r1
 810f674:	6979      	ldr	r1, [r7, #20]
 810f676:	f7ff fe79 	bl	810f36c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 810f67a:	687b      	ldr	r3, [r7, #4]
}
 810f67c:	4618      	mov	r0, r3
 810f67e:	3718      	adds	r7, #24
 810f680:	46bd      	mov	sp, r7
 810f682:	bd80      	pop	{r7, pc}

0810f684 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 810f684:	b580      	push	{r7, lr}
 810f686:	b084      	sub	sp, #16
 810f688:	af00      	add	r7, sp, #0
 810f68a:	6078      	str	r0, [r7, #4]
 810f68c:	460b      	mov	r3, r1
 810f68e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 810f690:	687b      	ldr	r3, [r7, #4]
 810f692:	2b00      	cmp	r3, #0
 810f694:	d106      	bne.n	810f6a4 <pbuf_realloc+0x20>
 810f696:	4b3a      	ldr	r3, [pc, #232]	@ (810f780 <pbuf_realloc+0xfc>)
 810f698:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 810f69c:	4939      	ldr	r1, [pc, #228]	@ (810f784 <pbuf_realloc+0x100>)
 810f69e:	483a      	ldr	r0, [pc, #232]	@ (810f788 <pbuf_realloc+0x104>)
 810f6a0:	f007 f922 	bl	81168e8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 810f6a4:	687b      	ldr	r3, [r7, #4]
 810f6a6:	891b      	ldrh	r3, [r3, #8]
 810f6a8:	887a      	ldrh	r2, [r7, #2]
 810f6aa:	429a      	cmp	r2, r3
 810f6ac:	d263      	bcs.n	810f776 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 810f6ae:	687b      	ldr	r3, [r7, #4]
 810f6b0:	891a      	ldrh	r2, [r3, #8]
 810f6b2:	887b      	ldrh	r3, [r7, #2]
 810f6b4:	1ad3      	subs	r3, r2, r3
 810f6b6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 810f6b8:	887b      	ldrh	r3, [r7, #2]
 810f6ba:	817b      	strh	r3, [r7, #10]
  q = p;
 810f6bc:	687b      	ldr	r3, [r7, #4]
 810f6be:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 810f6c0:	e018      	b.n	810f6f4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 810f6c2:	68fb      	ldr	r3, [r7, #12]
 810f6c4:	895b      	ldrh	r3, [r3, #10]
 810f6c6:	897a      	ldrh	r2, [r7, #10]
 810f6c8:	1ad3      	subs	r3, r2, r3
 810f6ca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 810f6cc:	68fb      	ldr	r3, [r7, #12]
 810f6ce:	891a      	ldrh	r2, [r3, #8]
 810f6d0:	893b      	ldrh	r3, [r7, #8]
 810f6d2:	1ad3      	subs	r3, r2, r3
 810f6d4:	b29a      	uxth	r2, r3
 810f6d6:	68fb      	ldr	r3, [r7, #12]
 810f6d8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 810f6da:	68fb      	ldr	r3, [r7, #12]
 810f6dc:	681b      	ldr	r3, [r3, #0]
 810f6de:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 810f6e0:	68fb      	ldr	r3, [r7, #12]
 810f6e2:	2b00      	cmp	r3, #0
 810f6e4:	d106      	bne.n	810f6f4 <pbuf_realloc+0x70>
 810f6e6:	4b26      	ldr	r3, [pc, #152]	@ (810f780 <pbuf_realloc+0xfc>)
 810f6e8:	f240 12af 	movw	r2, #431	@ 0x1af
 810f6ec:	4927      	ldr	r1, [pc, #156]	@ (810f78c <pbuf_realloc+0x108>)
 810f6ee:	4826      	ldr	r0, [pc, #152]	@ (810f788 <pbuf_realloc+0x104>)
 810f6f0:	f007 f8fa 	bl	81168e8 <iprintf>
  while (rem_len > q->len) {
 810f6f4:	68fb      	ldr	r3, [r7, #12]
 810f6f6:	895b      	ldrh	r3, [r3, #10]
 810f6f8:	897a      	ldrh	r2, [r7, #10]
 810f6fa:	429a      	cmp	r2, r3
 810f6fc:	d8e1      	bhi.n	810f6c2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 810f6fe:	68fb      	ldr	r3, [r7, #12]
 810f700:	7b1b      	ldrb	r3, [r3, #12]
 810f702:	f003 030f 	and.w	r3, r3, #15
 810f706:	2b00      	cmp	r3, #0
 810f708:	d121      	bne.n	810f74e <pbuf_realloc+0xca>
 810f70a:	68fb      	ldr	r3, [r7, #12]
 810f70c:	895b      	ldrh	r3, [r3, #10]
 810f70e:	897a      	ldrh	r2, [r7, #10]
 810f710:	429a      	cmp	r2, r3
 810f712:	d01c      	beq.n	810f74e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 810f714:	68fb      	ldr	r3, [r7, #12]
 810f716:	7b5b      	ldrb	r3, [r3, #13]
 810f718:	f003 0302 	and.w	r3, r3, #2
 810f71c:	2b00      	cmp	r3, #0
 810f71e:	d116      	bne.n	810f74e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 810f720:	68fb      	ldr	r3, [r7, #12]
 810f722:	685a      	ldr	r2, [r3, #4]
 810f724:	68fb      	ldr	r3, [r7, #12]
 810f726:	1ad3      	subs	r3, r2, r3
 810f728:	b29a      	uxth	r2, r3
 810f72a:	897b      	ldrh	r3, [r7, #10]
 810f72c:	4413      	add	r3, r2
 810f72e:	b29b      	uxth	r3, r3
 810f730:	4619      	mov	r1, r3
 810f732:	68f8      	ldr	r0, [r7, #12]
 810f734:	f7fe ff56 	bl	810e5e4 <mem_trim>
 810f738:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 810f73a:	68fb      	ldr	r3, [r7, #12]
 810f73c:	2b00      	cmp	r3, #0
 810f73e:	d106      	bne.n	810f74e <pbuf_realloc+0xca>
 810f740:	4b0f      	ldr	r3, [pc, #60]	@ (810f780 <pbuf_realloc+0xfc>)
 810f742:	f240 12bd 	movw	r2, #445	@ 0x1bd
 810f746:	4912      	ldr	r1, [pc, #72]	@ (810f790 <pbuf_realloc+0x10c>)
 810f748:	480f      	ldr	r0, [pc, #60]	@ (810f788 <pbuf_realloc+0x104>)
 810f74a:	f007 f8cd 	bl	81168e8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 810f74e:	68fb      	ldr	r3, [r7, #12]
 810f750:	897a      	ldrh	r2, [r7, #10]
 810f752:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 810f754:	68fb      	ldr	r3, [r7, #12]
 810f756:	895a      	ldrh	r2, [r3, #10]
 810f758:	68fb      	ldr	r3, [r7, #12]
 810f75a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 810f75c:	68fb      	ldr	r3, [r7, #12]
 810f75e:	681b      	ldr	r3, [r3, #0]
 810f760:	2b00      	cmp	r3, #0
 810f762:	d004      	beq.n	810f76e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 810f764:	68fb      	ldr	r3, [r7, #12]
 810f766:	681b      	ldr	r3, [r3, #0]
 810f768:	4618      	mov	r0, r3
 810f76a:	f000 f911 	bl	810f990 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 810f76e:	68fb      	ldr	r3, [r7, #12]
 810f770:	2200      	movs	r2, #0
 810f772:	601a      	str	r2, [r3, #0]
 810f774:	e000      	b.n	810f778 <pbuf_realloc+0xf4>
    return;
 810f776:	bf00      	nop

}
 810f778:	3710      	adds	r7, #16
 810f77a:	46bd      	mov	sp, r7
 810f77c:	bd80      	pop	{r7, pc}
 810f77e:	bf00      	nop
 810f780:	081185e4 	.word	0x081185e4
 810f784:	0811873c 	.word	0x0811873c
 810f788:	08118684 	.word	0x08118684
 810f78c:	08118754 	.word	0x08118754
 810f790:	0811876c 	.word	0x0811876c

0810f794 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 810f794:	b580      	push	{r7, lr}
 810f796:	b086      	sub	sp, #24
 810f798:	af00      	add	r7, sp, #0
 810f79a:	60f8      	str	r0, [r7, #12]
 810f79c:	60b9      	str	r1, [r7, #8]
 810f79e:	4613      	mov	r3, r2
 810f7a0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 810f7a2:	68fb      	ldr	r3, [r7, #12]
 810f7a4:	2b00      	cmp	r3, #0
 810f7a6:	d106      	bne.n	810f7b6 <pbuf_add_header_impl+0x22>
 810f7a8:	4b2b      	ldr	r3, [pc, #172]	@ (810f858 <pbuf_add_header_impl+0xc4>)
 810f7aa:	f240 12df 	movw	r2, #479	@ 0x1df
 810f7ae:	492b      	ldr	r1, [pc, #172]	@ (810f85c <pbuf_add_header_impl+0xc8>)
 810f7b0:	482b      	ldr	r0, [pc, #172]	@ (810f860 <pbuf_add_header_impl+0xcc>)
 810f7b2:	f007 f899 	bl	81168e8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 810f7b6:	68fb      	ldr	r3, [r7, #12]
 810f7b8:	2b00      	cmp	r3, #0
 810f7ba:	d003      	beq.n	810f7c4 <pbuf_add_header_impl+0x30>
 810f7bc:	68bb      	ldr	r3, [r7, #8]
 810f7be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810f7c2:	d301      	bcc.n	810f7c8 <pbuf_add_header_impl+0x34>
    return 1;
 810f7c4:	2301      	movs	r3, #1
 810f7c6:	e043      	b.n	810f850 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 810f7c8:	68bb      	ldr	r3, [r7, #8]
 810f7ca:	2b00      	cmp	r3, #0
 810f7cc:	d101      	bne.n	810f7d2 <pbuf_add_header_impl+0x3e>
    return 0;
 810f7ce:	2300      	movs	r3, #0
 810f7d0:	e03e      	b.n	810f850 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 810f7d2:	68bb      	ldr	r3, [r7, #8]
 810f7d4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 810f7d6:	68fb      	ldr	r3, [r7, #12]
 810f7d8:	891a      	ldrh	r2, [r3, #8]
 810f7da:	8a7b      	ldrh	r3, [r7, #18]
 810f7dc:	4413      	add	r3, r2
 810f7de:	b29b      	uxth	r3, r3
 810f7e0:	8a7a      	ldrh	r2, [r7, #18]
 810f7e2:	429a      	cmp	r2, r3
 810f7e4:	d901      	bls.n	810f7ea <pbuf_add_header_impl+0x56>
    return 1;
 810f7e6:	2301      	movs	r3, #1
 810f7e8:	e032      	b.n	810f850 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 810f7ea:	68fb      	ldr	r3, [r7, #12]
 810f7ec:	7b1b      	ldrb	r3, [r3, #12]
 810f7ee:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 810f7f0:	8a3b      	ldrh	r3, [r7, #16]
 810f7f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810f7f6:	2b00      	cmp	r3, #0
 810f7f8:	d00c      	beq.n	810f814 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 810f7fa:	68fb      	ldr	r3, [r7, #12]
 810f7fc:	685a      	ldr	r2, [r3, #4]
 810f7fe:	68bb      	ldr	r3, [r7, #8]
 810f800:	425b      	negs	r3, r3
 810f802:	4413      	add	r3, r2
 810f804:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 810f806:	68fb      	ldr	r3, [r7, #12]
 810f808:	3310      	adds	r3, #16
 810f80a:	697a      	ldr	r2, [r7, #20]
 810f80c:	429a      	cmp	r2, r3
 810f80e:	d20d      	bcs.n	810f82c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 810f810:	2301      	movs	r3, #1
 810f812:	e01d      	b.n	810f850 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 810f814:	79fb      	ldrb	r3, [r7, #7]
 810f816:	2b00      	cmp	r3, #0
 810f818:	d006      	beq.n	810f828 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 810f81a:	68fb      	ldr	r3, [r7, #12]
 810f81c:	685a      	ldr	r2, [r3, #4]
 810f81e:	68bb      	ldr	r3, [r7, #8]
 810f820:	425b      	negs	r3, r3
 810f822:	4413      	add	r3, r2
 810f824:	617b      	str	r3, [r7, #20]
 810f826:	e001      	b.n	810f82c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 810f828:	2301      	movs	r3, #1
 810f82a:	e011      	b.n	810f850 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 810f82c:	68fb      	ldr	r3, [r7, #12]
 810f82e:	697a      	ldr	r2, [r7, #20]
 810f830:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 810f832:	68fb      	ldr	r3, [r7, #12]
 810f834:	895a      	ldrh	r2, [r3, #10]
 810f836:	8a7b      	ldrh	r3, [r7, #18]
 810f838:	4413      	add	r3, r2
 810f83a:	b29a      	uxth	r2, r3
 810f83c:	68fb      	ldr	r3, [r7, #12]
 810f83e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 810f840:	68fb      	ldr	r3, [r7, #12]
 810f842:	891a      	ldrh	r2, [r3, #8]
 810f844:	8a7b      	ldrh	r3, [r7, #18]
 810f846:	4413      	add	r3, r2
 810f848:	b29a      	uxth	r2, r3
 810f84a:	68fb      	ldr	r3, [r7, #12]
 810f84c:	811a      	strh	r2, [r3, #8]


  return 0;
 810f84e:	2300      	movs	r3, #0
}
 810f850:	4618      	mov	r0, r3
 810f852:	3718      	adds	r7, #24
 810f854:	46bd      	mov	sp, r7
 810f856:	bd80      	pop	{r7, pc}
 810f858:	081185e4 	.word	0x081185e4
 810f85c:	08118788 	.word	0x08118788
 810f860:	08118684 	.word	0x08118684

0810f864 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 810f864:	b580      	push	{r7, lr}
 810f866:	b082      	sub	sp, #8
 810f868:	af00      	add	r7, sp, #0
 810f86a:	6078      	str	r0, [r7, #4]
 810f86c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 810f86e:	2200      	movs	r2, #0
 810f870:	6839      	ldr	r1, [r7, #0]
 810f872:	6878      	ldr	r0, [r7, #4]
 810f874:	f7ff ff8e 	bl	810f794 <pbuf_add_header_impl>
 810f878:	4603      	mov	r3, r0
}
 810f87a:	4618      	mov	r0, r3
 810f87c:	3708      	adds	r7, #8
 810f87e:	46bd      	mov	sp, r7
 810f880:	bd80      	pop	{r7, pc}
	...

0810f884 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 810f884:	b580      	push	{r7, lr}
 810f886:	b084      	sub	sp, #16
 810f888:	af00      	add	r7, sp, #0
 810f88a:	6078      	str	r0, [r7, #4]
 810f88c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 810f88e:	687b      	ldr	r3, [r7, #4]
 810f890:	2b00      	cmp	r3, #0
 810f892:	d106      	bne.n	810f8a2 <pbuf_remove_header+0x1e>
 810f894:	4b20      	ldr	r3, [pc, #128]	@ (810f918 <pbuf_remove_header+0x94>)
 810f896:	f240 224b 	movw	r2, #587	@ 0x24b
 810f89a:	4920      	ldr	r1, [pc, #128]	@ (810f91c <pbuf_remove_header+0x98>)
 810f89c:	4820      	ldr	r0, [pc, #128]	@ (810f920 <pbuf_remove_header+0x9c>)
 810f89e:	f007 f823 	bl	81168e8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 810f8a2:	687b      	ldr	r3, [r7, #4]
 810f8a4:	2b00      	cmp	r3, #0
 810f8a6:	d003      	beq.n	810f8b0 <pbuf_remove_header+0x2c>
 810f8a8:	683b      	ldr	r3, [r7, #0]
 810f8aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810f8ae:	d301      	bcc.n	810f8b4 <pbuf_remove_header+0x30>
    return 1;
 810f8b0:	2301      	movs	r3, #1
 810f8b2:	e02c      	b.n	810f90e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 810f8b4:	683b      	ldr	r3, [r7, #0]
 810f8b6:	2b00      	cmp	r3, #0
 810f8b8:	d101      	bne.n	810f8be <pbuf_remove_header+0x3a>
    return 0;
 810f8ba:	2300      	movs	r3, #0
 810f8bc:	e027      	b.n	810f90e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 810f8be:	683b      	ldr	r3, [r7, #0]
 810f8c0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 810f8c2:	687b      	ldr	r3, [r7, #4]
 810f8c4:	895b      	ldrh	r3, [r3, #10]
 810f8c6:	89fa      	ldrh	r2, [r7, #14]
 810f8c8:	429a      	cmp	r2, r3
 810f8ca:	d908      	bls.n	810f8de <pbuf_remove_header+0x5a>
 810f8cc:	4b12      	ldr	r3, [pc, #72]	@ (810f918 <pbuf_remove_header+0x94>)
 810f8ce:	f240 2255 	movw	r2, #597	@ 0x255
 810f8d2:	4914      	ldr	r1, [pc, #80]	@ (810f924 <pbuf_remove_header+0xa0>)
 810f8d4:	4812      	ldr	r0, [pc, #72]	@ (810f920 <pbuf_remove_header+0x9c>)
 810f8d6:	f007 f807 	bl	81168e8 <iprintf>
 810f8da:	2301      	movs	r3, #1
 810f8dc:	e017      	b.n	810f90e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 810f8de:	687b      	ldr	r3, [r7, #4]
 810f8e0:	685b      	ldr	r3, [r3, #4]
 810f8e2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 810f8e4:	687b      	ldr	r3, [r7, #4]
 810f8e6:	685a      	ldr	r2, [r3, #4]
 810f8e8:	683b      	ldr	r3, [r7, #0]
 810f8ea:	441a      	add	r2, r3
 810f8ec:	687b      	ldr	r3, [r7, #4]
 810f8ee:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 810f8f0:	687b      	ldr	r3, [r7, #4]
 810f8f2:	895a      	ldrh	r2, [r3, #10]
 810f8f4:	89fb      	ldrh	r3, [r7, #14]
 810f8f6:	1ad3      	subs	r3, r2, r3
 810f8f8:	b29a      	uxth	r2, r3
 810f8fa:	687b      	ldr	r3, [r7, #4]
 810f8fc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 810f8fe:	687b      	ldr	r3, [r7, #4]
 810f900:	891a      	ldrh	r2, [r3, #8]
 810f902:	89fb      	ldrh	r3, [r7, #14]
 810f904:	1ad3      	subs	r3, r2, r3
 810f906:	b29a      	uxth	r2, r3
 810f908:	687b      	ldr	r3, [r7, #4]
 810f90a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 810f90c:	2300      	movs	r3, #0
}
 810f90e:	4618      	mov	r0, r3
 810f910:	3710      	adds	r7, #16
 810f912:	46bd      	mov	sp, r7
 810f914:	bd80      	pop	{r7, pc}
 810f916:	bf00      	nop
 810f918:	081185e4 	.word	0x081185e4
 810f91c:	08118788 	.word	0x08118788
 810f920:	08118684 	.word	0x08118684
 810f924:	08118794 	.word	0x08118794

0810f928 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 810f928:	b580      	push	{r7, lr}
 810f92a:	b082      	sub	sp, #8
 810f92c:	af00      	add	r7, sp, #0
 810f92e:	6078      	str	r0, [r7, #4]
 810f930:	460b      	mov	r3, r1
 810f932:	807b      	strh	r3, [r7, #2]
 810f934:	4613      	mov	r3, r2
 810f936:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 810f938:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810f93c:	2b00      	cmp	r3, #0
 810f93e:	da08      	bge.n	810f952 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 810f940:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810f944:	425b      	negs	r3, r3
 810f946:	4619      	mov	r1, r3
 810f948:	6878      	ldr	r0, [r7, #4]
 810f94a:	f7ff ff9b 	bl	810f884 <pbuf_remove_header>
 810f94e:	4603      	mov	r3, r0
 810f950:	e007      	b.n	810f962 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 810f952:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810f956:	787a      	ldrb	r2, [r7, #1]
 810f958:	4619      	mov	r1, r3
 810f95a:	6878      	ldr	r0, [r7, #4]
 810f95c:	f7ff ff1a 	bl	810f794 <pbuf_add_header_impl>
 810f960:	4603      	mov	r3, r0
  }
}
 810f962:	4618      	mov	r0, r3
 810f964:	3708      	adds	r7, #8
 810f966:	46bd      	mov	sp, r7
 810f968:	bd80      	pop	{r7, pc}

0810f96a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 810f96a:	b580      	push	{r7, lr}
 810f96c:	b082      	sub	sp, #8
 810f96e:	af00      	add	r7, sp, #0
 810f970:	6078      	str	r0, [r7, #4]
 810f972:	460b      	mov	r3, r1
 810f974:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 810f976:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810f97a:	2201      	movs	r2, #1
 810f97c:	4619      	mov	r1, r3
 810f97e:	6878      	ldr	r0, [r7, #4]
 810f980:	f7ff ffd2 	bl	810f928 <pbuf_header_impl>
 810f984:	4603      	mov	r3, r0
}
 810f986:	4618      	mov	r0, r3
 810f988:	3708      	adds	r7, #8
 810f98a:	46bd      	mov	sp, r7
 810f98c:	bd80      	pop	{r7, pc}
	...

0810f990 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 810f990:	b580      	push	{r7, lr}
 810f992:	b088      	sub	sp, #32
 810f994:	af00      	add	r7, sp, #0
 810f996:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 810f998:	687b      	ldr	r3, [r7, #4]
 810f99a:	2b00      	cmp	r3, #0
 810f99c:	d10b      	bne.n	810f9b6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 810f99e:	687b      	ldr	r3, [r7, #4]
 810f9a0:	2b00      	cmp	r3, #0
 810f9a2:	d106      	bne.n	810f9b2 <pbuf_free+0x22>
 810f9a4:	4b3b      	ldr	r3, [pc, #236]	@ (810fa94 <pbuf_free+0x104>)
 810f9a6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 810f9aa:	493b      	ldr	r1, [pc, #236]	@ (810fa98 <pbuf_free+0x108>)
 810f9ac:	483b      	ldr	r0, [pc, #236]	@ (810fa9c <pbuf_free+0x10c>)
 810f9ae:	f006 ff9b 	bl	81168e8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 810f9b2:	2300      	movs	r3, #0
 810f9b4:	e069      	b.n	810fa8a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 810f9b6:	2300      	movs	r3, #0
 810f9b8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 810f9ba:	e062      	b.n	810fa82 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 810f9bc:	f000 fb66 	bl	811008c <sys_arch_protect>
 810f9c0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 810f9c2:	687b      	ldr	r3, [r7, #4]
 810f9c4:	7b9b      	ldrb	r3, [r3, #14]
 810f9c6:	2b00      	cmp	r3, #0
 810f9c8:	d106      	bne.n	810f9d8 <pbuf_free+0x48>
 810f9ca:	4b32      	ldr	r3, [pc, #200]	@ (810fa94 <pbuf_free+0x104>)
 810f9cc:	f240 22f1 	movw	r2, #753	@ 0x2f1
 810f9d0:	4933      	ldr	r1, [pc, #204]	@ (810faa0 <pbuf_free+0x110>)
 810f9d2:	4832      	ldr	r0, [pc, #200]	@ (810fa9c <pbuf_free+0x10c>)
 810f9d4:	f006 ff88 	bl	81168e8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 810f9d8:	687b      	ldr	r3, [r7, #4]
 810f9da:	7b9b      	ldrb	r3, [r3, #14]
 810f9dc:	3b01      	subs	r3, #1
 810f9de:	b2da      	uxtb	r2, r3
 810f9e0:	687b      	ldr	r3, [r7, #4]
 810f9e2:	739a      	strb	r2, [r3, #14]
 810f9e4:	687b      	ldr	r3, [r7, #4]
 810f9e6:	7b9b      	ldrb	r3, [r3, #14]
 810f9e8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 810f9ea:	69b8      	ldr	r0, [r7, #24]
 810f9ec:	f000 fb5c 	bl	81100a8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 810f9f0:	7dfb      	ldrb	r3, [r7, #23]
 810f9f2:	2b00      	cmp	r3, #0
 810f9f4:	d143      	bne.n	810fa7e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 810f9f6:	687b      	ldr	r3, [r7, #4]
 810f9f8:	681b      	ldr	r3, [r3, #0]
 810f9fa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 810f9fc:	687b      	ldr	r3, [r7, #4]
 810f9fe:	7b1b      	ldrb	r3, [r3, #12]
 810fa00:	f003 030f 	and.w	r3, r3, #15
 810fa04:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 810fa06:	687b      	ldr	r3, [r7, #4]
 810fa08:	7b5b      	ldrb	r3, [r3, #13]
 810fa0a:	f003 0302 	and.w	r3, r3, #2
 810fa0e:	2b00      	cmp	r3, #0
 810fa10:	d011      	beq.n	810fa36 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 810fa12:	687b      	ldr	r3, [r7, #4]
 810fa14:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 810fa16:	68bb      	ldr	r3, [r7, #8]
 810fa18:	691b      	ldr	r3, [r3, #16]
 810fa1a:	2b00      	cmp	r3, #0
 810fa1c:	d106      	bne.n	810fa2c <pbuf_free+0x9c>
 810fa1e:	4b1d      	ldr	r3, [pc, #116]	@ (810fa94 <pbuf_free+0x104>)
 810fa20:	f240 22ff 	movw	r2, #767	@ 0x2ff
 810fa24:	491f      	ldr	r1, [pc, #124]	@ (810faa4 <pbuf_free+0x114>)
 810fa26:	481d      	ldr	r0, [pc, #116]	@ (810fa9c <pbuf_free+0x10c>)
 810fa28:	f006 ff5e 	bl	81168e8 <iprintf>
        pc->custom_free_function(p);
 810fa2c:	68bb      	ldr	r3, [r7, #8]
 810fa2e:	691b      	ldr	r3, [r3, #16]
 810fa30:	6878      	ldr	r0, [r7, #4]
 810fa32:	4798      	blx	r3
 810fa34:	e01d      	b.n	810fa72 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 810fa36:	7bfb      	ldrb	r3, [r7, #15]
 810fa38:	2b02      	cmp	r3, #2
 810fa3a:	d104      	bne.n	810fa46 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 810fa3c:	6879      	ldr	r1, [r7, #4]
 810fa3e:	200c      	movs	r0, #12
 810fa40:	f7ff f8fe 	bl	810ec40 <memp_free>
 810fa44:	e015      	b.n	810fa72 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 810fa46:	7bfb      	ldrb	r3, [r7, #15]
 810fa48:	2b01      	cmp	r3, #1
 810fa4a:	d104      	bne.n	810fa56 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 810fa4c:	6879      	ldr	r1, [r7, #4]
 810fa4e:	200b      	movs	r0, #11
 810fa50:	f7ff f8f6 	bl	810ec40 <memp_free>
 810fa54:	e00d      	b.n	810fa72 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 810fa56:	7bfb      	ldrb	r3, [r7, #15]
 810fa58:	2b00      	cmp	r3, #0
 810fa5a:	d103      	bne.n	810fa64 <pbuf_free+0xd4>
          mem_free(p);
 810fa5c:	6878      	ldr	r0, [r7, #4]
 810fa5e:	f7fe fd31 	bl	810e4c4 <mem_free>
 810fa62:	e006      	b.n	810fa72 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 810fa64:	4b0b      	ldr	r3, [pc, #44]	@ (810fa94 <pbuf_free+0x104>)
 810fa66:	f240 320f 	movw	r2, #783	@ 0x30f
 810fa6a:	490f      	ldr	r1, [pc, #60]	@ (810faa8 <pbuf_free+0x118>)
 810fa6c:	480b      	ldr	r0, [pc, #44]	@ (810fa9c <pbuf_free+0x10c>)
 810fa6e:	f006 ff3b 	bl	81168e8 <iprintf>
        }
      }
      count++;
 810fa72:	7ffb      	ldrb	r3, [r7, #31]
 810fa74:	3301      	adds	r3, #1
 810fa76:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 810fa78:	693b      	ldr	r3, [r7, #16]
 810fa7a:	607b      	str	r3, [r7, #4]
 810fa7c:	e001      	b.n	810fa82 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 810fa7e:	2300      	movs	r3, #0
 810fa80:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 810fa82:	687b      	ldr	r3, [r7, #4]
 810fa84:	2b00      	cmp	r3, #0
 810fa86:	d199      	bne.n	810f9bc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 810fa88:	7ffb      	ldrb	r3, [r7, #31]
}
 810fa8a:	4618      	mov	r0, r3
 810fa8c:	3720      	adds	r7, #32
 810fa8e:	46bd      	mov	sp, r7
 810fa90:	bd80      	pop	{r7, pc}
 810fa92:	bf00      	nop
 810fa94:	081185e4 	.word	0x081185e4
 810fa98:	08118788 	.word	0x08118788
 810fa9c:	08118684 	.word	0x08118684
 810faa0:	081187b4 	.word	0x081187b4
 810faa4:	081187cc 	.word	0x081187cc
 810faa8:	081187f0 	.word	0x081187f0

0810faac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 810faac:	b480      	push	{r7}
 810faae:	b085      	sub	sp, #20
 810fab0:	af00      	add	r7, sp, #0
 810fab2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 810fab4:	2300      	movs	r3, #0
 810fab6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 810fab8:	e005      	b.n	810fac6 <pbuf_clen+0x1a>
    ++len;
 810faba:	89fb      	ldrh	r3, [r7, #14]
 810fabc:	3301      	adds	r3, #1
 810fabe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 810fac0:	687b      	ldr	r3, [r7, #4]
 810fac2:	681b      	ldr	r3, [r3, #0]
 810fac4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 810fac6:	687b      	ldr	r3, [r7, #4]
 810fac8:	2b00      	cmp	r3, #0
 810faca:	d1f6      	bne.n	810faba <pbuf_clen+0xe>
  }
  return len;
 810facc:	89fb      	ldrh	r3, [r7, #14]
}
 810face:	4618      	mov	r0, r3
 810fad0:	3714      	adds	r7, #20
 810fad2:	46bd      	mov	sp, r7
 810fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fad8:	4770      	bx	lr
	...

0810fadc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 810fadc:	b580      	push	{r7, lr}
 810fade:	b084      	sub	sp, #16
 810fae0:	af00      	add	r7, sp, #0
 810fae2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 810fae4:	687b      	ldr	r3, [r7, #4]
 810fae6:	2b00      	cmp	r3, #0
 810fae8:	d016      	beq.n	810fb18 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 810faea:	f000 facf 	bl	811008c <sys_arch_protect>
 810faee:	60f8      	str	r0, [r7, #12]
 810faf0:	687b      	ldr	r3, [r7, #4]
 810faf2:	7b9b      	ldrb	r3, [r3, #14]
 810faf4:	3301      	adds	r3, #1
 810faf6:	b2da      	uxtb	r2, r3
 810faf8:	687b      	ldr	r3, [r7, #4]
 810fafa:	739a      	strb	r2, [r3, #14]
 810fafc:	68f8      	ldr	r0, [r7, #12]
 810fafe:	f000 fad3 	bl	81100a8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 810fb02:	687b      	ldr	r3, [r7, #4]
 810fb04:	7b9b      	ldrb	r3, [r3, #14]
 810fb06:	2b00      	cmp	r3, #0
 810fb08:	d106      	bne.n	810fb18 <pbuf_ref+0x3c>
 810fb0a:	4b05      	ldr	r3, [pc, #20]	@ (810fb20 <pbuf_ref+0x44>)
 810fb0c:	f240 3242 	movw	r2, #834	@ 0x342
 810fb10:	4904      	ldr	r1, [pc, #16]	@ (810fb24 <pbuf_ref+0x48>)
 810fb12:	4805      	ldr	r0, [pc, #20]	@ (810fb28 <pbuf_ref+0x4c>)
 810fb14:	f006 fee8 	bl	81168e8 <iprintf>
  }
}
 810fb18:	bf00      	nop
 810fb1a:	3710      	adds	r7, #16
 810fb1c:	46bd      	mov	sp, r7
 810fb1e:	bd80      	pop	{r7, pc}
 810fb20:	081185e4 	.word	0x081185e4
 810fb24:	08118804 	.word	0x08118804
 810fb28:	08118684 	.word	0x08118684

0810fb2c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 810fb2c:	b580      	push	{r7, lr}
 810fb2e:	b084      	sub	sp, #16
 810fb30:	af00      	add	r7, sp, #0
 810fb32:	6078      	str	r0, [r7, #4]
 810fb34:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 810fb36:	687b      	ldr	r3, [r7, #4]
 810fb38:	2b00      	cmp	r3, #0
 810fb3a:	d002      	beq.n	810fb42 <pbuf_cat+0x16>
 810fb3c:	683b      	ldr	r3, [r7, #0]
 810fb3e:	2b00      	cmp	r3, #0
 810fb40:	d107      	bne.n	810fb52 <pbuf_cat+0x26>
 810fb42:	4b20      	ldr	r3, [pc, #128]	@ (810fbc4 <pbuf_cat+0x98>)
 810fb44:	f240 3259 	movw	r2, #857	@ 0x359
 810fb48:	491f      	ldr	r1, [pc, #124]	@ (810fbc8 <pbuf_cat+0x9c>)
 810fb4a:	4820      	ldr	r0, [pc, #128]	@ (810fbcc <pbuf_cat+0xa0>)
 810fb4c:	f006 fecc 	bl	81168e8 <iprintf>
 810fb50:	e034      	b.n	810fbbc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 810fb52:	687b      	ldr	r3, [r7, #4]
 810fb54:	60fb      	str	r3, [r7, #12]
 810fb56:	e00a      	b.n	810fb6e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 810fb58:	68fb      	ldr	r3, [r7, #12]
 810fb5a:	891a      	ldrh	r2, [r3, #8]
 810fb5c:	683b      	ldr	r3, [r7, #0]
 810fb5e:	891b      	ldrh	r3, [r3, #8]
 810fb60:	4413      	add	r3, r2
 810fb62:	b29a      	uxth	r2, r3
 810fb64:	68fb      	ldr	r3, [r7, #12]
 810fb66:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 810fb68:	68fb      	ldr	r3, [r7, #12]
 810fb6a:	681b      	ldr	r3, [r3, #0]
 810fb6c:	60fb      	str	r3, [r7, #12]
 810fb6e:	68fb      	ldr	r3, [r7, #12]
 810fb70:	681b      	ldr	r3, [r3, #0]
 810fb72:	2b00      	cmp	r3, #0
 810fb74:	d1f0      	bne.n	810fb58 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 810fb76:	68fb      	ldr	r3, [r7, #12]
 810fb78:	891a      	ldrh	r2, [r3, #8]
 810fb7a:	68fb      	ldr	r3, [r7, #12]
 810fb7c:	895b      	ldrh	r3, [r3, #10]
 810fb7e:	429a      	cmp	r2, r3
 810fb80:	d006      	beq.n	810fb90 <pbuf_cat+0x64>
 810fb82:	4b10      	ldr	r3, [pc, #64]	@ (810fbc4 <pbuf_cat+0x98>)
 810fb84:	f240 3262 	movw	r2, #866	@ 0x362
 810fb88:	4911      	ldr	r1, [pc, #68]	@ (810fbd0 <pbuf_cat+0xa4>)
 810fb8a:	4810      	ldr	r0, [pc, #64]	@ (810fbcc <pbuf_cat+0xa0>)
 810fb8c:	f006 feac 	bl	81168e8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 810fb90:	68fb      	ldr	r3, [r7, #12]
 810fb92:	681b      	ldr	r3, [r3, #0]
 810fb94:	2b00      	cmp	r3, #0
 810fb96:	d006      	beq.n	810fba6 <pbuf_cat+0x7a>
 810fb98:	4b0a      	ldr	r3, [pc, #40]	@ (810fbc4 <pbuf_cat+0x98>)
 810fb9a:	f240 3263 	movw	r2, #867	@ 0x363
 810fb9e:	490d      	ldr	r1, [pc, #52]	@ (810fbd4 <pbuf_cat+0xa8>)
 810fba0:	480a      	ldr	r0, [pc, #40]	@ (810fbcc <pbuf_cat+0xa0>)
 810fba2:	f006 fea1 	bl	81168e8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 810fba6:	68fb      	ldr	r3, [r7, #12]
 810fba8:	891a      	ldrh	r2, [r3, #8]
 810fbaa:	683b      	ldr	r3, [r7, #0]
 810fbac:	891b      	ldrh	r3, [r3, #8]
 810fbae:	4413      	add	r3, r2
 810fbb0:	b29a      	uxth	r2, r3
 810fbb2:	68fb      	ldr	r3, [r7, #12]
 810fbb4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 810fbb6:	68fb      	ldr	r3, [r7, #12]
 810fbb8:	683a      	ldr	r2, [r7, #0]
 810fbba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 810fbbc:	3710      	adds	r7, #16
 810fbbe:	46bd      	mov	sp, r7
 810fbc0:	bd80      	pop	{r7, pc}
 810fbc2:	bf00      	nop
 810fbc4:	081185e4 	.word	0x081185e4
 810fbc8:	08118818 	.word	0x08118818
 810fbcc:	08118684 	.word	0x08118684
 810fbd0:	08118850 	.word	0x08118850
 810fbd4:	08118880 	.word	0x08118880

0810fbd8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 810fbd8:	b580      	push	{r7, lr}
 810fbda:	b082      	sub	sp, #8
 810fbdc:	af00      	add	r7, sp, #0
 810fbde:	6078      	str	r0, [r7, #4]
 810fbe0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 810fbe2:	6839      	ldr	r1, [r7, #0]
 810fbe4:	6878      	ldr	r0, [r7, #4]
 810fbe6:	f7ff ffa1 	bl	810fb2c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 810fbea:	6838      	ldr	r0, [r7, #0]
 810fbec:	f7ff ff76 	bl	810fadc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 810fbf0:	bf00      	nop
 810fbf2:	3708      	adds	r7, #8
 810fbf4:	46bd      	mov	sp, r7
 810fbf6:	bd80      	pop	{r7, pc}

0810fbf8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 810fbf8:	b580      	push	{r7, lr}
 810fbfa:	b086      	sub	sp, #24
 810fbfc:	af00      	add	r7, sp, #0
 810fbfe:	6078      	str	r0, [r7, #4]
 810fc00:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 810fc02:	2300      	movs	r3, #0
 810fc04:	617b      	str	r3, [r7, #20]
 810fc06:	2300      	movs	r3, #0
 810fc08:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 810fc0a:	687b      	ldr	r3, [r7, #4]
 810fc0c:	2b00      	cmp	r3, #0
 810fc0e:	d008      	beq.n	810fc22 <pbuf_copy+0x2a>
 810fc10:	683b      	ldr	r3, [r7, #0]
 810fc12:	2b00      	cmp	r3, #0
 810fc14:	d005      	beq.n	810fc22 <pbuf_copy+0x2a>
 810fc16:	687b      	ldr	r3, [r7, #4]
 810fc18:	891a      	ldrh	r2, [r3, #8]
 810fc1a:	683b      	ldr	r3, [r7, #0]
 810fc1c:	891b      	ldrh	r3, [r3, #8]
 810fc1e:	429a      	cmp	r2, r3
 810fc20:	d209      	bcs.n	810fc36 <pbuf_copy+0x3e>
 810fc22:	4b57      	ldr	r3, [pc, #348]	@ (810fd80 <pbuf_copy+0x188>)
 810fc24:	f240 32c9 	movw	r2, #969	@ 0x3c9
 810fc28:	4956      	ldr	r1, [pc, #344]	@ (810fd84 <pbuf_copy+0x18c>)
 810fc2a:	4857      	ldr	r0, [pc, #348]	@ (810fd88 <pbuf_copy+0x190>)
 810fc2c:	f006 fe5c 	bl	81168e8 <iprintf>
 810fc30:	f06f 030f 	mvn.w	r3, #15
 810fc34:	e09f      	b.n	810fd76 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 810fc36:	687b      	ldr	r3, [r7, #4]
 810fc38:	895b      	ldrh	r3, [r3, #10]
 810fc3a:	461a      	mov	r2, r3
 810fc3c:	697b      	ldr	r3, [r7, #20]
 810fc3e:	1ad2      	subs	r2, r2, r3
 810fc40:	683b      	ldr	r3, [r7, #0]
 810fc42:	895b      	ldrh	r3, [r3, #10]
 810fc44:	4619      	mov	r1, r3
 810fc46:	693b      	ldr	r3, [r7, #16]
 810fc48:	1acb      	subs	r3, r1, r3
 810fc4a:	429a      	cmp	r2, r3
 810fc4c:	d306      	bcc.n	810fc5c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 810fc4e:	683b      	ldr	r3, [r7, #0]
 810fc50:	895b      	ldrh	r3, [r3, #10]
 810fc52:	461a      	mov	r2, r3
 810fc54:	693b      	ldr	r3, [r7, #16]
 810fc56:	1ad3      	subs	r3, r2, r3
 810fc58:	60fb      	str	r3, [r7, #12]
 810fc5a:	e005      	b.n	810fc68 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 810fc5c:	687b      	ldr	r3, [r7, #4]
 810fc5e:	895b      	ldrh	r3, [r3, #10]
 810fc60:	461a      	mov	r2, r3
 810fc62:	697b      	ldr	r3, [r7, #20]
 810fc64:	1ad3      	subs	r3, r2, r3
 810fc66:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 810fc68:	687b      	ldr	r3, [r7, #4]
 810fc6a:	685a      	ldr	r2, [r3, #4]
 810fc6c:	697b      	ldr	r3, [r7, #20]
 810fc6e:	18d0      	adds	r0, r2, r3
 810fc70:	683b      	ldr	r3, [r7, #0]
 810fc72:	685a      	ldr	r2, [r3, #4]
 810fc74:	693b      	ldr	r3, [r7, #16]
 810fc76:	4413      	add	r3, r2
 810fc78:	68fa      	ldr	r2, [r7, #12]
 810fc7a:	4619      	mov	r1, r3
 810fc7c:	f006 ffd3 	bl	8116c26 <memcpy>
    offset_to += len;
 810fc80:	697a      	ldr	r2, [r7, #20]
 810fc82:	68fb      	ldr	r3, [r7, #12]
 810fc84:	4413      	add	r3, r2
 810fc86:	617b      	str	r3, [r7, #20]
    offset_from += len;
 810fc88:	693a      	ldr	r2, [r7, #16]
 810fc8a:	68fb      	ldr	r3, [r7, #12]
 810fc8c:	4413      	add	r3, r2
 810fc8e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 810fc90:	687b      	ldr	r3, [r7, #4]
 810fc92:	895b      	ldrh	r3, [r3, #10]
 810fc94:	461a      	mov	r2, r3
 810fc96:	697b      	ldr	r3, [r7, #20]
 810fc98:	4293      	cmp	r3, r2
 810fc9a:	d906      	bls.n	810fcaa <pbuf_copy+0xb2>
 810fc9c:	4b38      	ldr	r3, [pc, #224]	@ (810fd80 <pbuf_copy+0x188>)
 810fc9e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 810fca2:	493a      	ldr	r1, [pc, #232]	@ (810fd8c <pbuf_copy+0x194>)
 810fca4:	4838      	ldr	r0, [pc, #224]	@ (810fd88 <pbuf_copy+0x190>)
 810fca6:	f006 fe1f 	bl	81168e8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 810fcaa:	683b      	ldr	r3, [r7, #0]
 810fcac:	895b      	ldrh	r3, [r3, #10]
 810fcae:	461a      	mov	r2, r3
 810fcb0:	693b      	ldr	r3, [r7, #16]
 810fcb2:	4293      	cmp	r3, r2
 810fcb4:	d906      	bls.n	810fcc4 <pbuf_copy+0xcc>
 810fcb6:	4b32      	ldr	r3, [pc, #200]	@ (810fd80 <pbuf_copy+0x188>)
 810fcb8:	f240 32da 	movw	r2, #986	@ 0x3da
 810fcbc:	4934      	ldr	r1, [pc, #208]	@ (810fd90 <pbuf_copy+0x198>)
 810fcbe:	4832      	ldr	r0, [pc, #200]	@ (810fd88 <pbuf_copy+0x190>)
 810fcc0:	f006 fe12 	bl	81168e8 <iprintf>
    if (offset_from >= p_from->len) {
 810fcc4:	683b      	ldr	r3, [r7, #0]
 810fcc6:	895b      	ldrh	r3, [r3, #10]
 810fcc8:	461a      	mov	r2, r3
 810fcca:	693b      	ldr	r3, [r7, #16]
 810fccc:	4293      	cmp	r3, r2
 810fcce:	d304      	bcc.n	810fcda <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 810fcd0:	2300      	movs	r3, #0
 810fcd2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 810fcd4:	683b      	ldr	r3, [r7, #0]
 810fcd6:	681b      	ldr	r3, [r3, #0]
 810fcd8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 810fcda:	687b      	ldr	r3, [r7, #4]
 810fcdc:	895b      	ldrh	r3, [r3, #10]
 810fcde:	461a      	mov	r2, r3
 810fce0:	697b      	ldr	r3, [r7, #20]
 810fce2:	4293      	cmp	r3, r2
 810fce4:	d114      	bne.n	810fd10 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 810fce6:	2300      	movs	r3, #0
 810fce8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 810fcea:	687b      	ldr	r3, [r7, #4]
 810fcec:	681b      	ldr	r3, [r3, #0]
 810fcee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 810fcf0:	687b      	ldr	r3, [r7, #4]
 810fcf2:	2b00      	cmp	r3, #0
 810fcf4:	d10c      	bne.n	810fd10 <pbuf_copy+0x118>
 810fcf6:	683b      	ldr	r3, [r7, #0]
 810fcf8:	2b00      	cmp	r3, #0
 810fcfa:	d009      	beq.n	810fd10 <pbuf_copy+0x118>
 810fcfc:	4b20      	ldr	r3, [pc, #128]	@ (810fd80 <pbuf_copy+0x188>)
 810fcfe:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 810fd02:	4924      	ldr	r1, [pc, #144]	@ (810fd94 <pbuf_copy+0x19c>)
 810fd04:	4820      	ldr	r0, [pc, #128]	@ (810fd88 <pbuf_copy+0x190>)
 810fd06:	f006 fdef 	bl	81168e8 <iprintf>
 810fd0a:	f06f 030f 	mvn.w	r3, #15
 810fd0e:	e032      	b.n	810fd76 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 810fd10:	683b      	ldr	r3, [r7, #0]
 810fd12:	2b00      	cmp	r3, #0
 810fd14:	d013      	beq.n	810fd3e <pbuf_copy+0x146>
 810fd16:	683b      	ldr	r3, [r7, #0]
 810fd18:	895a      	ldrh	r2, [r3, #10]
 810fd1a:	683b      	ldr	r3, [r7, #0]
 810fd1c:	891b      	ldrh	r3, [r3, #8]
 810fd1e:	429a      	cmp	r2, r3
 810fd20:	d10d      	bne.n	810fd3e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 810fd22:	683b      	ldr	r3, [r7, #0]
 810fd24:	681b      	ldr	r3, [r3, #0]
 810fd26:	2b00      	cmp	r3, #0
 810fd28:	d009      	beq.n	810fd3e <pbuf_copy+0x146>
 810fd2a:	4b15      	ldr	r3, [pc, #84]	@ (810fd80 <pbuf_copy+0x188>)
 810fd2c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 810fd30:	4919      	ldr	r1, [pc, #100]	@ (810fd98 <pbuf_copy+0x1a0>)
 810fd32:	4815      	ldr	r0, [pc, #84]	@ (810fd88 <pbuf_copy+0x190>)
 810fd34:	f006 fdd8 	bl	81168e8 <iprintf>
 810fd38:	f06f 0305 	mvn.w	r3, #5
 810fd3c:	e01b      	b.n	810fd76 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 810fd3e:	687b      	ldr	r3, [r7, #4]
 810fd40:	2b00      	cmp	r3, #0
 810fd42:	d013      	beq.n	810fd6c <pbuf_copy+0x174>
 810fd44:	687b      	ldr	r3, [r7, #4]
 810fd46:	895a      	ldrh	r2, [r3, #10]
 810fd48:	687b      	ldr	r3, [r7, #4]
 810fd4a:	891b      	ldrh	r3, [r3, #8]
 810fd4c:	429a      	cmp	r2, r3
 810fd4e:	d10d      	bne.n	810fd6c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 810fd50:	687b      	ldr	r3, [r7, #4]
 810fd52:	681b      	ldr	r3, [r3, #0]
 810fd54:	2b00      	cmp	r3, #0
 810fd56:	d009      	beq.n	810fd6c <pbuf_copy+0x174>
 810fd58:	4b09      	ldr	r3, [pc, #36]	@ (810fd80 <pbuf_copy+0x188>)
 810fd5a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 810fd5e:	490e      	ldr	r1, [pc, #56]	@ (810fd98 <pbuf_copy+0x1a0>)
 810fd60:	4809      	ldr	r0, [pc, #36]	@ (810fd88 <pbuf_copy+0x190>)
 810fd62:	f006 fdc1 	bl	81168e8 <iprintf>
 810fd66:	f06f 0305 	mvn.w	r3, #5
 810fd6a:	e004      	b.n	810fd76 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 810fd6c:	683b      	ldr	r3, [r7, #0]
 810fd6e:	2b00      	cmp	r3, #0
 810fd70:	f47f af61 	bne.w	810fc36 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 810fd74:	2300      	movs	r3, #0
}
 810fd76:	4618      	mov	r0, r3
 810fd78:	3718      	adds	r7, #24
 810fd7a:	46bd      	mov	sp, r7
 810fd7c:	bd80      	pop	{r7, pc}
 810fd7e:	bf00      	nop
 810fd80:	081185e4 	.word	0x081185e4
 810fd84:	081188cc 	.word	0x081188cc
 810fd88:	08118684 	.word	0x08118684
 810fd8c:	081188fc 	.word	0x081188fc
 810fd90:	08118914 	.word	0x08118914
 810fd94:	08118930 	.word	0x08118930
 810fd98:	08118940 	.word	0x08118940

0810fd9c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 810fd9c:	b580      	push	{r7, lr}
 810fd9e:	b088      	sub	sp, #32
 810fda0:	af00      	add	r7, sp, #0
 810fda2:	60f8      	str	r0, [r7, #12]
 810fda4:	60b9      	str	r1, [r7, #8]
 810fda6:	4611      	mov	r1, r2
 810fda8:	461a      	mov	r2, r3
 810fdaa:	460b      	mov	r3, r1
 810fdac:	80fb      	strh	r3, [r7, #6]
 810fdae:	4613      	mov	r3, r2
 810fdb0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 810fdb2:	2300      	movs	r3, #0
 810fdb4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 810fdb6:	2300      	movs	r3, #0
 810fdb8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 810fdba:	68fb      	ldr	r3, [r7, #12]
 810fdbc:	2b00      	cmp	r3, #0
 810fdbe:	d108      	bne.n	810fdd2 <pbuf_copy_partial+0x36>
 810fdc0:	4b2b      	ldr	r3, [pc, #172]	@ (810fe70 <pbuf_copy_partial+0xd4>)
 810fdc2:	f240 420a 	movw	r2, #1034	@ 0x40a
 810fdc6:	492b      	ldr	r1, [pc, #172]	@ (810fe74 <pbuf_copy_partial+0xd8>)
 810fdc8:	482b      	ldr	r0, [pc, #172]	@ (810fe78 <pbuf_copy_partial+0xdc>)
 810fdca:	f006 fd8d 	bl	81168e8 <iprintf>
 810fdce:	2300      	movs	r3, #0
 810fdd0:	e04a      	b.n	810fe68 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 810fdd2:	68bb      	ldr	r3, [r7, #8]
 810fdd4:	2b00      	cmp	r3, #0
 810fdd6:	d108      	bne.n	810fdea <pbuf_copy_partial+0x4e>
 810fdd8:	4b25      	ldr	r3, [pc, #148]	@ (810fe70 <pbuf_copy_partial+0xd4>)
 810fdda:	f240 420b 	movw	r2, #1035	@ 0x40b
 810fdde:	4927      	ldr	r1, [pc, #156]	@ (810fe7c <pbuf_copy_partial+0xe0>)
 810fde0:	4825      	ldr	r0, [pc, #148]	@ (810fe78 <pbuf_copy_partial+0xdc>)
 810fde2:	f006 fd81 	bl	81168e8 <iprintf>
 810fde6:	2300      	movs	r3, #0
 810fde8:	e03e      	b.n	810fe68 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 810fdea:	68fb      	ldr	r3, [r7, #12]
 810fdec:	61fb      	str	r3, [r7, #28]
 810fdee:	e034      	b.n	810fe5a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 810fdf0:	88bb      	ldrh	r3, [r7, #4]
 810fdf2:	2b00      	cmp	r3, #0
 810fdf4:	d00a      	beq.n	810fe0c <pbuf_copy_partial+0x70>
 810fdf6:	69fb      	ldr	r3, [r7, #28]
 810fdf8:	895b      	ldrh	r3, [r3, #10]
 810fdfa:	88ba      	ldrh	r2, [r7, #4]
 810fdfc:	429a      	cmp	r2, r3
 810fdfe:	d305      	bcc.n	810fe0c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 810fe00:	69fb      	ldr	r3, [r7, #28]
 810fe02:	895b      	ldrh	r3, [r3, #10]
 810fe04:	88ba      	ldrh	r2, [r7, #4]
 810fe06:	1ad3      	subs	r3, r2, r3
 810fe08:	80bb      	strh	r3, [r7, #4]
 810fe0a:	e023      	b.n	810fe54 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 810fe0c:	69fb      	ldr	r3, [r7, #28]
 810fe0e:	895a      	ldrh	r2, [r3, #10]
 810fe10:	88bb      	ldrh	r3, [r7, #4]
 810fe12:	1ad3      	subs	r3, r2, r3
 810fe14:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 810fe16:	8b3a      	ldrh	r2, [r7, #24]
 810fe18:	88fb      	ldrh	r3, [r7, #6]
 810fe1a:	429a      	cmp	r2, r3
 810fe1c:	d901      	bls.n	810fe22 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 810fe1e:	88fb      	ldrh	r3, [r7, #6]
 810fe20:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 810fe22:	8b7b      	ldrh	r3, [r7, #26]
 810fe24:	68ba      	ldr	r2, [r7, #8]
 810fe26:	18d0      	adds	r0, r2, r3
 810fe28:	69fb      	ldr	r3, [r7, #28]
 810fe2a:	685a      	ldr	r2, [r3, #4]
 810fe2c:	88bb      	ldrh	r3, [r7, #4]
 810fe2e:	4413      	add	r3, r2
 810fe30:	8b3a      	ldrh	r2, [r7, #24]
 810fe32:	4619      	mov	r1, r3
 810fe34:	f006 fef7 	bl	8116c26 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 810fe38:	8afa      	ldrh	r2, [r7, #22]
 810fe3a:	8b3b      	ldrh	r3, [r7, #24]
 810fe3c:	4413      	add	r3, r2
 810fe3e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 810fe40:	8b7a      	ldrh	r2, [r7, #26]
 810fe42:	8b3b      	ldrh	r3, [r7, #24]
 810fe44:	4413      	add	r3, r2
 810fe46:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 810fe48:	88fa      	ldrh	r2, [r7, #6]
 810fe4a:	8b3b      	ldrh	r3, [r7, #24]
 810fe4c:	1ad3      	subs	r3, r2, r3
 810fe4e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 810fe50:	2300      	movs	r3, #0
 810fe52:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 810fe54:	69fb      	ldr	r3, [r7, #28]
 810fe56:	681b      	ldr	r3, [r3, #0]
 810fe58:	61fb      	str	r3, [r7, #28]
 810fe5a:	88fb      	ldrh	r3, [r7, #6]
 810fe5c:	2b00      	cmp	r3, #0
 810fe5e:	d002      	beq.n	810fe66 <pbuf_copy_partial+0xca>
 810fe60:	69fb      	ldr	r3, [r7, #28]
 810fe62:	2b00      	cmp	r3, #0
 810fe64:	d1c4      	bne.n	810fdf0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 810fe66:	8afb      	ldrh	r3, [r7, #22]
}
 810fe68:	4618      	mov	r0, r3
 810fe6a:	3720      	adds	r7, #32
 810fe6c:	46bd      	mov	sp, r7
 810fe6e:	bd80      	pop	{r7, pc}
 810fe70:	081185e4 	.word	0x081185e4
 810fe74:	0811896c 	.word	0x0811896c
 810fe78:	08118684 	.word	0x08118684
 810fe7c:	0811898c 	.word	0x0811898c

0810fe80 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 810fe80:	b580      	push	{r7, lr}
 810fe82:	b084      	sub	sp, #16
 810fe84:	af00      	add	r7, sp, #0
 810fe86:	4603      	mov	r3, r0
 810fe88:	603a      	str	r2, [r7, #0]
 810fe8a:	71fb      	strb	r3, [r7, #7]
 810fe8c:	460b      	mov	r3, r1
 810fe8e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 810fe90:	683b      	ldr	r3, [r7, #0]
 810fe92:	8919      	ldrh	r1, [r3, #8]
 810fe94:	88ba      	ldrh	r2, [r7, #4]
 810fe96:	79fb      	ldrb	r3, [r7, #7]
 810fe98:	4618      	mov	r0, r3
 810fe9a:	f7ff fa91 	bl	810f3c0 <pbuf_alloc>
 810fe9e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 810fea0:	68fb      	ldr	r3, [r7, #12]
 810fea2:	2b00      	cmp	r3, #0
 810fea4:	d101      	bne.n	810feaa <pbuf_clone+0x2a>
    return NULL;
 810fea6:	2300      	movs	r3, #0
 810fea8:	e011      	b.n	810fece <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 810feaa:	6839      	ldr	r1, [r7, #0]
 810feac:	68f8      	ldr	r0, [r7, #12]
 810feae:	f7ff fea3 	bl	810fbf8 <pbuf_copy>
 810feb2:	4603      	mov	r3, r0
 810feb4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 810feb6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 810feba:	2b00      	cmp	r3, #0
 810febc:	d006      	beq.n	810fecc <pbuf_clone+0x4c>
 810febe:	4b06      	ldr	r3, [pc, #24]	@ (810fed8 <pbuf_clone+0x58>)
 810fec0:	f240 5224 	movw	r2, #1316	@ 0x524
 810fec4:	4905      	ldr	r1, [pc, #20]	@ (810fedc <pbuf_clone+0x5c>)
 810fec6:	4806      	ldr	r0, [pc, #24]	@ (810fee0 <pbuf_clone+0x60>)
 810fec8:	f006 fd0e 	bl	81168e8 <iprintf>
  return q;
 810fecc:	68fb      	ldr	r3, [r7, #12]
}
 810fece:	4618      	mov	r0, r3
 810fed0:	3710      	adds	r7, #16
 810fed2:	46bd      	mov	sp, r7
 810fed4:	bd80      	pop	{r7, pc}
 810fed6:	bf00      	nop
 810fed8:	081185e4 	.word	0x081185e4
 810fedc:	08118a98 	.word	0x08118a98
 810fee0:	08118684 	.word	0x08118684

0810fee4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 810fee4:	b580      	push	{r7, lr}
 810fee6:	b082      	sub	sp, #8
 810fee8:	af00      	add	r7, sp, #0
 810feea:	6078      	str	r0, [r7, #4]
 810feec:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 810feee:	683b      	ldr	r3, [r7, #0]
 810fef0:	2200      	movs	r2, #0
 810fef2:	2104      	movs	r1, #4
 810fef4:	4618      	mov	r0, r3
 810fef6:	f7f7 fced 	bl	81078d4 <osMessageQueueNew>
 810fefa:	4602      	mov	r2, r0
 810fefc:	687b      	ldr	r3, [r7, #4]
 810fefe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 810ff00:	687b      	ldr	r3, [r7, #4]
 810ff02:	681b      	ldr	r3, [r3, #0]
 810ff04:	2b00      	cmp	r3, #0
 810ff06:	d102      	bne.n	810ff0e <sys_mbox_new+0x2a>
    return ERR_MEM;
 810ff08:	f04f 33ff 	mov.w	r3, #4294967295
 810ff0c:	e000      	b.n	810ff10 <sys_mbox_new+0x2c>

  return ERR_OK;
 810ff0e:	2300      	movs	r3, #0
}
 810ff10:	4618      	mov	r0, r3
 810ff12:	3708      	adds	r7, #8
 810ff14:	46bd      	mov	sp, r7
 810ff16:	bd80      	pop	{r7, pc}

0810ff18 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 810ff18:	b580      	push	{r7, lr}
 810ff1a:	b084      	sub	sp, #16
 810ff1c:	af00      	add	r7, sp, #0
 810ff1e:	6078      	str	r0, [r7, #4]
 810ff20:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 810ff22:	687b      	ldr	r3, [r7, #4]
 810ff24:	6818      	ldr	r0, [r3, #0]
 810ff26:	4639      	mov	r1, r7
 810ff28:	2300      	movs	r3, #0
 810ff2a:	2200      	movs	r2, #0
 810ff2c:	f7f7 fd46 	bl	81079bc <osMessageQueuePut>
 810ff30:	4603      	mov	r3, r0
 810ff32:	2b00      	cmp	r3, #0
 810ff34:	d102      	bne.n	810ff3c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 810ff36:	2300      	movs	r3, #0
 810ff38:	73fb      	strb	r3, [r7, #15]
 810ff3a:	e001      	b.n	810ff40 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 810ff3c:	23ff      	movs	r3, #255	@ 0xff
 810ff3e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 810ff40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 810ff44:	4618      	mov	r0, r3
 810ff46:	3710      	adds	r7, #16
 810ff48:	46bd      	mov	sp, r7
 810ff4a:	bd80      	pop	{r7, pc}

0810ff4c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 810ff4c:	b580      	push	{r7, lr}
 810ff4e:	b086      	sub	sp, #24
 810ff50:	af00      	add	r7, sp, #0
 810ff52:	60f8      	str	r0, [r7, #12]
 810ff54:	60b9      	str	r1, [r7, #8]
 810ff56:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 810ff58:	f7f7 f9cc 	bl	81072f4 <osKernelGetTickCount>
 810ff5c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 810ff5e:	687b      	ldr	r3, [r7, #4]
 810ff60:	2b00      	cmp	r3, #0
 810ff62:	d013      	beq.n	810ff8c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 810ff64:	68fb      	ldr	r3, [r7, #12]
 810ff66:	6818      	ldr	r0, [r3, #0]
 810ff68:	687b      	ldr	r3, [r7, #4]
 810ff6a:	2200      	movs	r2, #0
 810ff6c:	68b9      	ldr	r1, [r7, #8]
 810ff6e:	f7f7 fd85 	bl	8107a7c <osMessageQueueGet>
 810ff72:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 810ff74:	693b      	ldr	r3, [r7, #16]
 810ff76:	2b00      	cmp	r3, #0
 810ff78:	d105      	bne.n	810ff86 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 810ff7a:	f7f7 f9bb 	bl	81072f4 <osKernelGetTickCount>
 810ff7e:	4602      	mov	r2, r0
 810ff80:	697b      	ldr	r3, [r7, #20]
 810ff82:	1ad3      	subs	r3, r2, r3
 810ff84:	e00f      	b.n	810ffa6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 810ff86:	f04f 33ff 	mov.w	r3, #4294967295
 810ff8a:	e00c      	b.n	810ffa6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 810ff8c:	68fb      	ldr	r3, [r7, #12]
 810ff8e:	6818      	ldr	r0, [r3, #0]
 810ff90:	f04f 33ff 	mov.w	r3, #4294967295
 810ff94:	2200      	movs	r2, #0
 810ff96:	68b9      	ldr	r1, [r7, #8]
 810ff98:	f7f7 fd70 	bl	8107a7c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 810ff9c:	f7f7 f9aa 	bl	81072f4 <osKernelGetTickCount>
 810ffa0:	4602      	mov	r2, r0
 810ffa2:	697b      	ldr	r3, [r7, #20]
 810ffa4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 810ffa6:	4618      	mov	r0, r3
 810ffa8:	3718      	adds	r7, #24
 810ffaa:	46bd      	mov	sp, r7
 810ffac:	bd80      	pop	{r7, pc}

0810ffae <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 810ffae:	b480      	push	{r7}
 810ffb0:	b083      	sub	sp, #12
 810ffb2:	af00      	add	r7, sp, #0
 810ffb4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 810ffb6:	687b      	ldr	r3, [r7, #4]
 810ffb8:	681b      	ldr	r3, [r3, #0]
 810ffba:	2b00      	cmp	r3, #0
 810ffbc:	d101      	bne.n	810ffc2 <sys_mbox_valid+0x14>
    return 0;
 810ffbe:	2300      	movs	r3, #0
 810ffc0:	e000      	b.n	810ffc4 <sys_mbox_valid+0x16>
  else
    return 1;
 810ffc2:	2301      	movs	r3, #1
}
 810ffc4:	4618      	mov	r0, r3
 810ffc6:	370c      	adds	r7, #12
 810ffc8:	46bd      	mov	sp, r7
 810ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ffce:	4770      	bx	lr

0810ffd0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 810ffd0:	b580      	push	{r7, lr}
 810ffd2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 810ffd4:	2000      	movs	r0, #0
 810ffd6:	f7f7 fa4f 	bl	8107478 <osMutexNew>
 810ffda:	4603      	mov	r3, r0
 810ffdc:	4a01      	ldr	r2, [pc, #4]	@ (810ffe4 <sys_init+0x14>)
 810ffde:	6013      	str	r3, [r2, #0]
#endif
}
 810ffe0:	bf00      	nop
 810ffe2:	bd80      	pop	{r7, pc}
 810ffe4:	1000b848 	.word	0x1000b848

0810ffe8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 810ffe8:	b580      	push	{r7, lr}
 810ffea:	b082      	sub	sp, #8
 810ffec:	af00      	add	r7, sp, #0
 810ffee:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 810fff0:	2000      	movs	r0, #0
 810fff2:	f7f7 fa41 	bl	8107478 <osMutexNew>
 810fff6:	4602      	mov	r2, r0
 810fff8:	687b      	ldr	r3, [r7, #4]
 810fffa:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 810fffc:	687b      	ldr	r3, [r7, #4]
 810fffe:	681b      	ldr	r3, [r3, #0]
 8110000:	2b00      	cmp	r3, #0
 8110002:	d102      	bne.n	811000a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8110004:	f04f 33ff 	mov.w	r3, #4294967295
 8110008:	e000      	b.n	811000c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 811000a:	2300      	movs	r3, #0
}
 811000c:	4618      	mov	r0, r3
 811000e:	3708      	adds	r7, #8
 8110010:	46bd      	mov	sp, r7
 8110012:	bd80      	pop	{r7, pc}

08110014 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8110014:	b580      	push	{r7, lr}
 8110016:	b082      	sub	sp, #8
 8110018:	af00      	add	r7, sp, #0
 811001a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 811001c:	687b      	ldr	r3, [r7, #4]
 811001e:	681b      	ldr	r3, [r3, #0]
 8110020:	f04f 31ff 	mov.w	r1, #4294967295
 8110024:	4618      	mov	r0, r3
 8110026:	f7f7 faad 	bl	8107584 <osMutexAcquire>
#endif
}
 811002a:	bf00      	nop
 811002c:	3708      	adds	r7, #8
 811002e:	46bd      	mov	sp, r7
 8110030:	bd80      	pop	{r7, pc}

08110032 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8110032:	b580      	push	{r7, lr}
 8110034:	b082      	sub	sp, #8
 8110036:	af00      	add	r7, sp, #0
 8110038:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 811003a:	687b      	ldr	r3, [r7, #4]
 811003c:	681b      	ldr	r3, [r3, #0]
 811003e:	4618      	mov	r0, r3
 8110040:	f7f7 faeb 	bl	810761a <osMutexRelease>
}
 8110044:	bf00      	nop
 8110046:	3708      	adds	r7, #8
 8110048:	46bd      	mov	sp, r7
 811004a:	bd80      	pop	{r7, pc}

0811004c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 811004c:	b580      	push	{r7, lr}
 811004e:	b08e      	sub	sp, #56	@ 0x38
 8110050:	af00      	add	r7, sp, #0
 8110052:	60f8      	str	r0, [r7, #12]
 8110054:	60b9      	str	r1, [r7, #8]
 8110056:	607a      	str	r2, [r7, #4]
 8110058:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 811005a:	f107 0314 	add.w	r3, r7, #20
 811005e:	2224      	movs	r2, #36	@ 0x24
 8110060:	2100      	movs	r1, #0
 8110062:	4618      	mov	r0, r3
 8110064:	f006 fcbf 	bl	81169e6 <memset>
 8110068:	68fb      	ldr	r3, [r7, #12]
 811006a:	617b      	str	r3, [r7, #20]
 811006c:	683b      	ldr	r3, [r7, #0]
 811006e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8110070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8110072:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8110074:	f107 0314 	add.w	r3, r7, #20
 8110078:	461a      	mov	r2, r3
 811007a:	6879      	ldr	r1, [r7, #4]
 811007c:	68b8      	ldr	r0, [r7, #8]
 811007e:	f7f7 f94e 	bl	810731e <osThreadNew>
 8110082:	4603      	mov	r3, r0
#endif
}
 8110084:	4618      	mov	r0, r3
 8110086:	3738      	adds	r7, #56	@ 0x38
 8110088:	46bd      	mov	sp, r7
 811008a:	bd80      	pop	{r7, pc}

0811008c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 811008c:	b580      	push	{r7, lr}
 811008e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8110090:	4b04      	ldr	r3, [pc, #16]	@ (81100a4 <sys_arch_protect+0x18>)
 8110092:	681b      	ldr	r3, [r3, #0]
 8110094:	f04f 31ff 	mov.w	r1, #4294967295
 8110098:	4618      	mov	r0, r3
 811009a:	f7f7 fa73 	bl	8107584 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 811009e:	2301      	movs	r3, #1
}
 81100a0:	4618      	mov	r0, r3
 81100a2:	bd80      	pop	{r7, pc}
 81100a4:	1000b848 	.word	0x1000b848

081100a8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 81100a8:	b580      	push	{r7, lr}
 81100aa:	b082      	sub	sp, #8
 81100ac:	af00      	add	r7, sp, #0
 81100ae:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 81100b0:	4b04      	ldr	r3, [pc, #16]	@ (81100c4 <sys_arch_unprotect+0x1c>)
 81100b2:	681b      	ldr	r3, [r3, #0]
 81100b4:	4618      	mov	r0, r3
 81100b6:	f7f7 fab0 	bl	810761a <osMutexRelease>
}
 81100ba:	bf00      	nop
 81100bc:	3708      	adds	r7, #8
 81100be:	46bd      	mov	sp, r7
 81100c0:	bd80      	pop	{r7, pc}
 81100c2:	bf00      	nop
 81100c4:	1000b848 	.word	0x1000b848

081100c8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 81100c8:	b580      	push	{r7, lr}
 81100ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 81100cc:	f006 fb0c 	bl	81166e8 <rand>
 81100d0:	4603      	mov	r3, r0
 81100d2:	b29b      	uxth	r3, r3
 81100d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 81100d8:	b29b      	uxth	r3, r3
 81100da:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 81100de:	b29a      	uxth	r2, r3
 81100e0:	4b01      	ldr	r3, [pc, #4]	@ (81100e8 <tcp_init+0x20>)
 81100e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 81100e4:	bf00      	nop
 81100e6:	bd80      	pop	{r7, pc}
 81100e8:	10000028 	.word	0x10000028

081100ec <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 81100ec:	b580      	push	{r7, lr}
 81100ee:	b082      	sub	sp, #8
 81100f0:	af00      	add	r7, sp, #0
 81100f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 81100f4:	687b      	ldr	r3, [r7, #4]
 81100f6:	7d1b      	ldrb	r3, [r3, #20]
 81100f8:	2b01      	cmp	r3, #1
 81100fa:	d105      	bne.n	8110108 <tcp_free+0x1c>
 81100fc:	4b06      	ldr	r3, [pc, #24]	@ (8110118 <tcp_free+0x2c>)
 81100fe:	22d4      	movs	r2, #212	@ 0xd4
 8110100:	4906      	ldr	r1, [pc, #24]	@ (811011c <tcp_free+0x30>)
 8110102:	4807      	ldr	r0, [pc, #28]	@ (8110120 <tcp_free+0x34>)
 8110104:	f006 fbf0 	bl	81168e8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8110108:	6879      	ldr	r1, [r7, #4]
 811010a:	2001      	movs	r0, #1
 811010c:	f7fe fd98 	bl	810ec40 <memp_free>
}
 8110110:	bf00      	nop
 8110112:	3708      	adds	r7, #8
 8110114:	46bd      	mov	sp, r7
 8110116:	bd80      	pop	{r7, pc}
 8110118:	08118b24 	.word	0x08118b24
 811011c:	08118b94 	.word	0x08118b94
 8110120:	08118ba8 	.word	0x08118ba8

08110124 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8110124:	b580      	push	{r7, lr}
 8110126:	b082      	sub	sp, #8
 8110128:	af00      	add	r7, sp, #0
 811012a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 811012c:	687b      	ldr	r3, [r7, #4]
 811012e:	7d1b      	ldrb	r3, [r3, #20]
 8110130:	2b01      	cmp	r3, #1
 8110132:	d105      	bne.n	8110140 <tcp_free_listen+0x1c>
 8110134:	4b06      	ldr	r3, [pc, #24]	@ (8110150 <tcp_free_listen+0x2c>)
 8110136:	22df      	movs	r2, #223	@ 0xdf
 8110138:	4906      	ldr	r1, [pc, #24]	@ (8110154 <tcp_free_listen+0x30>)
 811013a:	4807      	ldr	r0, [pc, #28]	@ (8110158 <tcp_free_listen+0x34>)
 811013c:	f006 fbd4 	bl	81168e8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8110140:	6879      	ldr	r1, [r7, #4]
 8110142:	2002      	movs	r0, #2
 8110144:	f7fe fd7c 	bl	810ec40 <memp_free>
}
 8110148:	bf00      	nop
 811014a:	3708      	adds	r7, #8
 811014c:	46bd      	mov	sp, r7
 811014e:	bd80      	pop	{r7, pc}
 8110150:	08118b24 	.word	0x08118b24
 8110154:	08118bd0 	.word	0x08118bd0
 8110158:	08118ba8 	.word	0x08118ba8

0811015c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 811015c:	b580      	push	{r7, lr}
 811015e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8110160:	f000 fea6 	bl	8110eb0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8110164:	4b07      	ldr	r3, [pc, #28]	@ (8110184 <tcp_tmr+0x28>)
 8110166:	781b      	ldrb	r3, [r3, #0]
 8110168:	3301      	adds	r3, #1
 811016a:	b2da      	uxtb	r2, r3
 811016c:	4b05      	ldr	r3, [pc, #20]	@ (8110184 <tcp_tmr+0x28>)
 811016e:	701a      	strb	r2, [r3, #0]
 8110170:	4b04      	ldr	r3, [pc, #16]	@ (8110184 <tcp_tmr+0x28>)
 8110172:	781b      	ldrb	r3, [r3, #0]
 8110174:	f003 0301 	and.w	r3, r3, #1
 8110178:	2b00      	cmp	r3, #0
 811017a:	d001      	beq.n	8110180 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 811017c:	f000 fb56 	bl	811082c <tcp_slowtmr>
  }
}
 8110180:	bf00      	nop
 8110182:	bd80      	pop	{r7, pc}
 8110184:	1000b861 	.word	0x1000b861

08110188 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8110188:	b580      	push	{r7, lr}
 811018a:	b084      	sub	sp, #16
 811018c:	af00      	add	r7, sp, #0
 811018e:	6078      	str	r0, [r7, #4]
 8110190:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8110192:	683b      	ldr	r3, [r7, #0]
 8110194:	2b00      	cmp	r3, #0
 8110196:	d105      	bne.n	81101a4 <tcp_remove_listener+0x1c>
 8110198:	4b0d      	ldr	r3, [pc, #52]	@ (81101d0 <tcp_remove_listener+0x48>)
 811019a:	22ff      	movs	r2, #255	@ 0xff
 811019c:	490d      	ldr	r1, [pc, #52]	@ (81101d4 <tcp_remove_listener+0x4c>)
 811019e:	480e      	ldr	r0, [pc, #56]	@ (81101d8 <tcp_remove_listener+0x50>)
 81101a0:	f006 fba2 	bl	81168e8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 81101a4:	687b      	ldr	r3, [r7, #4]
 81101a6:	60fb      	str	r3, [r7, #12]
 81101a8:	e00a      	b.n	81101c0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 81101aa:	68fb      	ldr	r3, [r7, #12]
 81101ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81101ae:	683a      	ldr	r2, [r7, #0]
 81101b0:	429a      	cmp	r2, r3
 81101b2:	d102      	bne.n	81101ba <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 81101b4:	68fb      	ldr	r3, [r7, #12]
 81101b6:	2200      	movs	r2, #0
 81101b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 81101ba:	68fb      	ldr	r3, [r7, #12]
 81101bc:	68db      	ldr	r3, [r3, #12]
 81101be:	60fb      	str	r3, [r7, #12]
 81101c0:	68fb      	ldr	r3, [r7, #12]
 81101c2:	2b00      	cmp	r3, #0
 81101c4:	d1f1      	bne.n	81101aa <tcp_remove_listener+0x22>
    }
  }
}
 81101c6:	bf00      	nop
 81101c8:	bf00      	nop
 81101ca:	3710      	adds	r7, #16
 81101cc:	46bd      	mov	sp, r7
 81101ce:	bd80      	pop	{r7, pc}
 81101d0:	08118b24 	.word	0x08118b24
 81101d4:	08118bec 	.word	0x08118bec
 81101d8:	08118ba8 	.word	0x08118ba8

081101dc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 81101dc:	b580      	push	{r7, lr}
 81101de:	b084      	sub	sp, #16
 81101e0:	af00      	add	r7, sp, #0
 81101e2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 81101e4:	687b      	ldr	r3, [r7, #4]
 81101e6:	2b00      	cmp	r3, #0
 81101e8:	d106      	bne.n	81101f8 <tcp_listen_closed+0x1c>
 81101ea:	4b14      	ldr	r3, [pc, #80]	@ (811023c <tcp_listen_closed+0x60>)
 81101ec:	f240 1211 	movw	r2, #273	@ 0x111
 81101f0:	4913      	ldr	r1, [pc, #76]	@ (8110240 <tcp_listen_closed+0x64>)
 81101f2:	4814      	ldr	r0, [pc, #80]	@ (8110244 <tcp_listen_closed+0x68>)
 81101f4:	f006 fb78 	bl	81168e8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 81101f8:	687b      	ldr	r3, [r7, #4]
 81101fa:	7d1b      	ldrb	r3, [r3, #20]
 81101fc:	2b01      	cmp	r3, #1
 81101fe:	d006      	beq.n	811020e <tcp_listen_closed+0x32>
 8110200:	4b0e      	ldr	r3, [pc, #56]	@ (811023c <tcp_listen_closed+0x60>)
 8110202:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8110206:	4910      	ldr	r1, [pc, #64]	@ (8110248 <tcp_listen_closed+0x6c>)
 8110208:	480e      	ldr	r0, [pc, #56]	@ (8110244 <tcp_listen_closed+0x68>)
 811020a:	f006 fb6d 	bl	81168e8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 811020e:	2301      	movs	r3, #1
 8110210:	60fb      	str	r3, [r7, #12]
 8110212:	e00b      	b.n	811022c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8110214:	4a0d      	ldr	r2, [pc, #52]	@ (811024c <tcp_listen_closed+0x70>)
 8110216:	68fb      	ldr	r3, [r7, #12]
 8110218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811021c:	681b      	ldr	r3, [r3, #0]
 811021e:	6879      	ldr	r1, [r7, #4]
 8110220:	4618      	mov	r0, r3
 8110222:	f7ff ffb1 	bl	8110188 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8110226:	68fb      	ldr	r3, [r7, #12]
 8110228:	3301      	adds	r3, #1
 811022a:	60fb      	str	r3, [r7, #12]
 811022c:	68fb      	ldr	r3, [r7, #12]
 811022e:	2b03      	cmp	r3, #3
 8110230:	d9f0      	bls.n	8110214 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8110232:	bf00      	nop
 8110234:	bf00      	nop
 8110236:	3710      	adds	r7, #16
 8110238:	46bd      	mov	sp, r7
 811023a:	bd80      	pop	{r7, pc}
 811023c:	08118b24 	.word	0x08118b24
 8110240:	08118c14 	.word	0x08118c14
 8110244:	08118ba8 	.word	0x08118ba8
 8110248:	08118c20 	.word	0x08118c20
 811024c:	0811a75c 	.word	0x0811a75c

08110250 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8110250:	b5b0      	push	{r4, r5, r7, lr}
 8110252:	b088      	sub	sp, #32
 8110254:	af04      	add	r7, sp, #16
 8110256:	6078      	str	r0, [r7, #4]
 8110258:	460b      	mov	r3, r1
 811025a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 811025c:	687b      	ldr	r3, [r7, #4]
 811025e:	2b00      	cmp	r3, #0
 8110260:	d106      	bne.n	8110270 <tcp_close_shutdown+0x20>
 8110262:	4b63      	ldr	r3, [pc, #396]	@ (81103f0 <tcp_close_shutdown+0x1a0>)
 8110264:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8110268:	4962      	ldr	r1, [pc, #392]	@ (81103f4 <tcp_close_shutdown+0x1a4>)
 811026a:	4863      	ldr	r0, [pc, #396]	@ (81103f8 <tcp_close_shutdown+0x1a8>)
 811026c:	f006 fb3c 	bl	81168e8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8110270:	78fb      	ldrb	r3, [r7, #3]
 8110272:	2b00      	cmp	r3, #0
 8110274:	d067      	beq.n	8110346 <tcp_close_shutdown+0xf6>
 8110276:	687b      	ldr	r3, [r7, #4]
 8110278:	7d1b      	ldrb	r3, [r3, #20]
 811027a:	2b04      	cmp	r3, #4
 811027c:	d003      	beq.n	8110286 <tcp_close_shutdown+0x36>
 811027e:	687b      	ldr	r3, [r7, #4]
 8110280:	7d1b      	ldrb	r3, [r3, #20]
 8110282:	2b07      	cmp	r3, #7
 8110284:	d15f      	bne.n	8110346 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8110286:	687b      	ldr	r3, [r7, #4]
 8110288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811028a:	2b00      	cmp	r3, #0
 811028c:	d105      	bne.n	811029a <tcp_close_shutdown+0x4a>
 811028e:	687b      	ldr	r3, [r7, #4]
 8110290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8110292:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8110296:	4293      	cmp	r3, r2
 8110298:	d055      	beq.n	8110346 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 811029a:	687b      	ldr	r3, [r7, #4]
 811029c:	8b5b      	ldrh	r3, [r3, #26]
 811029e:	f003 0310 	and.w	r3, r3, #16
 81102a2:	2b00      	cmp	r3, #0
 81102a4:	d106      	bne.n	81102b4 <tcp_close_shutdown+0x64>
 81102a6:	4b52      	ldr	r3, [pc, #328]	@ (81103f0 <tcp_close_shutdown+0x1a0>)
 81102a8:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 81102ac:	4953      	ldr	r1, [pc, #332]	@ (81103fc <tcp_close_shutdown+0x1ac>)
 81102ae:	4852      	ldr	r0, [pc, #328]	@ (81103f8 <tcp_close_shutdown+0x1a8>)
 81102b0:	f006 fb1a 	bl	81168e8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 81102b4:	687b      	ldr	r3, [r7, #4]
 81102b6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 81102b8:	687b      	ldr	r3, [r7, #4]
 81102ba:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 81102bc:	687d      	ldr	r5, [r7, #4]
 81102be:	687b      	ldr	r3, [r7, #4]
 81102c0:	3304      	adds	r3, #4
 81102c2:	687a      	ldr	r2, [r7, #4]
 81102c4:	8ad2      	ldrh	r2, [r2, #22]
 81102c6:	6879      	ldr	r1, [r7, #4]
 81102c8:	8b09      	ldrh	r1, [r1, #24]
 81102ca:	9102      	str	r1, [sp, #8]
 81102cc:	9201      	str	r2, [sp, #4]
 81102ce:	9300      	str	r3, [sp, #0]
 81102d0:	462b      	mov	r3, r5
 81102d2:	4622      	mov	r2, r4
 81102d4:	4601      	mov	r1, r0
 81102d6:	6878      	ldr	r0, [r7, #4]
 81102d8:	f004 fe92 	bl	8115000 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 81102dc:	6878      	ldr	r0, [r7, #4]
 81102de:	f001 f8cb 	bl	8111478 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 81102e2:	4b47      	ldr	r3, [pc, #284]	@ (8110400 <tcp_close_shutdown+0x1b0>)
 81102e4:	681b      	ldr	r3, [r3, #0]
 81102e6:	687a      	ldr	r2, [r7, #4]
 81102e8:	429a      	cmp	r2, r3
 81102ea:	d105      	bne.n	81102f8 <tcp_close_shutdown+0xa8>
 81102ec:	4b44      	ldr	r3, [pc, #272]	@ (8110400 <tcp_close_shutdown+0x1b0>)
 81102ee:	681b      	ldr	r3, [r3, #0]
 81102f0:	68db      	ldr	r3, [r3, #12]
 81102f2:	4a43      	ldr	r2, [pc, #268]	@ (8110400 <tcp_close_shutdown+0x1b0>)
 81102f4:	6013      	str	r3, [r2, #0]
 81102f6:	e013      	b.n	8110320 <tcp_close_shutdown+0xd0>
 81102f8:	4b41      	ldr	r3, [pc, #260]	@ (8110400 <tcp_close_shutdown+0x1b0>)
 81102fa:	681b      	ldr	r3, [r3, #0]
 81102fc:	60fb      	str	r3, [r7, #12]
 81102fe:	e00c      	b.n	811031a <tcp_close_shutdown+0xca>
 8110300:	68fb      	ldr	r3, [r7, #12]
 8110302:	68db      	ldr	r3, [r3, #12]
 8110304:	687a      	ldr	r2, [r7, #4]
 8110306:	429a      	cmp	r2, r3
 8110308:	d104      	bne.n	8110314 <tcp_close_shutdown+0xc4>
 811030a:	687b      	ldr	r3, [r7, #4]
 811030c:	68da      	ldr	r2, [r3, #12]
 811030e:	68fb      	ldr	r3, [r7, #12]
 8110310:	60da      	str	r2, [r3, #12]
 8110312:	e005      	b.n	8110320 <tcp_close_shutdown+0xd0>
 8110314:	68fb      	ldr	r3, [r7, #12]
 8110316:	68db      	ldr	r3, [r3, #12]
 8110318:	60fb      	str	r3, [r7, #12]
 811031a:	68fb      	ldr	r3, [r7, #12]
 811031c:	2b00      	cmp	r3, #0
 811031e:	d1ef      	bne.n	8110300 <tcp_close_shutdown+0xb0>
 8110320:	687b      	ldr	r3, [r7, #4]
 8110322:	2200      	movs	r2, #0
 8110324:	60da      	str	r2, [r3, #12]
 8110326:	4b37      	ldr	r3, [pc, #220]	@ (8110404 <tcp_close_shutdown+0x1b4>)
 8110328:	2201      	movs	r2, #1
 811032a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 811032c:	4b36      	ldr	r3, [pc, #216]	@ (8110408 <tcp_close_shutdown+0x1b8>)
 811032e:	681b      	ldr	r3, [r3, #0]
 8110330:	687a      	ldr	r2, [r7, #4]
 8110332:	429a      	cmp	r2, r3
 8110334:	d102      	bne.n	811033c <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8110336:	f003 fd61 	bl	8113dfc <tcp_trigger_input_pcb_close>
 811033a:	e002      	b.n	8110342 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 811033c:	6878      	ldr	r0, [r7, #4]
 811033e:	f7ff fed5 	bl	81100ec <tcp_free>
      }
      return ERR_OK;
 8110342:	2300      	movs	r3, #0
 8110344:	e050      	b.n	81103e8 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8110346:	687b      	ldr	r3, [r7, #4]
 8110348:	7d1b      	ldrb	r3, [r3, #20]
 811034a:	2b02      	cmp	r3, #2
 811034c:	d03b      	beq.n	81103c6 <tcp_close_shutdown+0x176>
 811034e:	2b02      	cmp	r3, #2
 8110350:	dc44      	bgt.n	81103dc <tcp_close_shutdown+0x18c>
 8110352:	2b00      	cmp	r3, #0
 8110354:	d002      	beq.n	811035c <tcp_close_shutdown+0x10c>
 8110356:	2b01      	cmp	r3, #1
 8110358:	d02a      	beq.n	81103b0 <tcp_close_shutdown+0x160>
 811035a:	e03f      	b.n	81103dc <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 811035c:	687b      	ldr	r3, [r7, #4]
 811035e:	8adb      	ldrh	r3, [r3, #22]
 8110360:	2b00      	cmp	r3, #0
 8110362:	d021      	beq.n	81103a8 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8110364:	4b29      	ldr	r3, [pc, #164]	@ (811040c <tcp_close_shutdown+0x1bc>)
 8110366:	681b      	ldr	r3, [r3, #0]
 8110368:	687a      	ldr	r2, [r7, #4]
 811036a:	429a      	cmp	r2, r3
 811036c:	d105      	bne.n	811037a <tcp_close_shutdown+0x12a>
 811036e:	4b27      	ldr	r3, [pc, #156]	@ (811040c <tcp_close_shutdown+0x1bc>)
 8110370:	681b      	ldr	r3, [r3, #0]
 8110372:	68db      	ldr	r3, [r3, #12]
 8110374:	4a25      	ldr	r2, [pc, #148]	@ (811040c <tcp_close_shutdown+0x1bc>)
 8110376:	6013      	str	r3, [r2, #0]
 8110378:	e013      	b.n	81103a2 <tcp_close_shutdown+0x152>
 811037a:	4b24      	ldr	r3, [pc, #144]	@ (811040c <tcp_close_shutdown+0x1bc>)
 811037c:	681b      	ldr	r3, [r3, #0]
 811037e:	60bb      	str	r3, [r7, #8]
 8110380:	e00c      	b.n	811039c <tcp_close_shutdown+0x14c>
 8110382:	68bb      	ldr	r3, [r7, #8]
 8110384:	68db      	ldr	r3, [r3, #12]
 8110386:	687a      	ldr	r2, [r7, #4]
 8110388:	429a      	cmp	r2, r3
 811038a:	d104      	bne.n	8110396 <tcp_close_shutdown+0x146>
 811038c:	687b      	ldr	r3, [r7, #4]
 811038e:	68da      	ldr	r2, [r3, #12]
 8110390:	68bb      	ldr	r3, [r7, #8]
 8110392:	60da      	str	r2, [r3, #12]
 8110394:	e005      	b.n	81103a2 <tcp_close_shutdown+0x152>
 8110396:	68bb      	ldr	r3, [r7, #8]
 8110398:	68db      	ldr	r3, [r3, #12]
 811039a:	60bb      	str	r3, [r7, #8]
 811039c:	68bb      	ldr	r3, [r7, #8]
 811039e:	2b00      	cmp	r3, #0
 81103a0:	d1ef      	bne.n	8110382 <tcp_close_shutdown+0x132>
 81103a2:	687b      	ldr	r3, [r7, #4]
 81103a4:	2200      	movs	r2, #0
 81103a6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 81103a8:	6878      	ldr	r0, [r7, #4]
 81103aa:	f7ff fe9f 	bl	81100ec <tcp_free>
      break;
 81103ae:	e01a      	b.n	81103e6 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 81103b0:	6878      	ldr	r0, [r7, #4]
 81103b2:	f7ff ff13 	bl	81101dc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 81103b6:	6879      	ldr	r1, [r7, #4]
 81103b8:	4815      	ldr	r0, [pc, #84]	@ (8110410 <tcp_close_shutdown+0x1c0>)
 81103ba:	f001 f8ad 	bl	8111518 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 81103be:	6878      	ldr	r0, [r7, #4]
 81103c0:	f7ff feb0 	bl	8110124 <tcp_free_listen>
      break;
 81103c4:	e00f      	b.n	81103e6 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 81103c6:	6879      	ldr	r1, [r7, #4]
 81103c8:	480d      	ldr	r0, [pc, #52]	@ (8110400 <tcp_close_shutdown+0x1b0>)
 81103ca:	f001 f8a5 	bl	8111518 <tcp_pcb_remove>
 81103ce:	4b0d      	ldr	r3, [pc, #52]	@ (8110404 <tcp_close_shutdown+0x1b4>)
 81103d0:	2201      	movs	r2, #1
 81103d2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 81103d4:	6878      	ldr	r0, [r7, #4]
 81103d6:	f7ff fe89 	bl	81100ec <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 81103da:	e004      	b.n	81103e6 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 81103dc:	6878      	ldr	r0, [r7, #4]
 81103de:	f000 f819 	bl	8110414 <tcp_close_shutdown_fin>
 81103e2:	4603      	mov	r3, r0
 81103e4:	e000      	b.n	81103e8 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 81103e6:	2300      	movs	r3, #0
}
 81103e8:	4618      	mov	r0, r3
 81103ea:	3710      	adds	r7, #16
 81103ec:	46bd      	mov	sp, r7
 81103ee:	bdb0      	pop	{r4, r5, r7, pc}
 81103f0:	08118b24 	.word	0x08118b24
 81103f4:	08118c38 	.word	0x08118c38
 81103f8:	08118ba8 	.word	0x08118ba8
 81103fc:	08118c58 	.word	0x08118c58
 8110400:	1000b858 	.word	0x1000b858
 8110404:	1000b860 	.word	0x1000b860
 8110408:	1000b898 	.word	0x1000b898
 811040c:	1000b850 	.word	0x1000b850
 8110410:	1000b854 	.word	0x1000b854

08110414 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8110414:	b580      	push	{r7, lr}
 8110416:	b084      	sub	sp, #16
 8110418:	af00      	add	r7, sp, #0
 811041a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 811041c:	687b      	ldr	r3, [r7, #4]
 811041e:	2b00      	cmp	r3, #0
 8110420:	d106      	bne.n	8110430 <tcp_close_shutdown_fin+0x1c>
 8110422:	4b2e      	ldr	r3, [pc, #184]	@ (81104dc <tcp_close_shutdown_fin+0xc8>)
 8110424:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8110428:	492d      	ldr	r1, [pc, #180]	@ (81104e0 <tcp_close_shutdown_fin+0xcc>)
 811042a:	482e      	ldr	r0, [pc, #184]	@ (81104e4 <tcp_close_shutdown_fin+0xd0>)
 811042c:	f006 fa5c 	bl	81168e8 <iprintf>

  switch (pcb->state) {
 8110430:	687b      	ldr	r3, [r7, #4]
 8110432:	7d1b      	ldrb	r3, [r3, #20]
 8110434:	2b07      	cmp	r3, #7
 8110436:	d020      	beq.n	811047a <tcp_close_shutdown_fin+0x66>
 8110438:	2b07      	cmp	r3, #7
 811043a:	dc2b      	bgt.n	8110494 <tcp_close_shutdown_fin+0x80>
 811043c:	2b03      	cmp	r3, #3
 811043e:	d002      	beq.n	8110446 <tcp_close_shutdown_fin+0x32>
 8110440:	2b04      	cmp	r3, #4
 8110442:	d00d      	beq.n	8110460 <tcp_close_shutdown_fin+0x4c>
 8110444:	e026      	b.n	8110494 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8110446:	6878      	ldr	r0, [r7, #4]
 8110448:	f003 fee8 	bl	811421c <tcp_send_fin>
 811044c:	4603      	mov	r3, r0
 811044e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8110450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8110454:	2b00      	cmp	r3, #0
 8110456:	d11f      	bne.n	8110498 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8110458:	687b      	ldr	r3, [r7, #4]
 811045a:	2205      	movs	r2, #5
 811045c:	751a      	strb	r2, [r3, #20]
      }
      break;
 811045e:	e01b      	b.n	8110498 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8110460:	6878      	ldr	r0, [r7, #4]
 8110462:	f003 fedb 	bl	811421c <tcp_send_fin>
 8110466:	4603      	mov	r3, r0
 8110468:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 811046a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811046e:	2b00      	cmp	r3, #0
 8110470:	d114      	bne.n	811049c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8110472:	687b      	ldr	r3, [r7, #4]
 8110474:	2205      	movs	r2, #5
 8110476:	751a      	strb	r2, [r3, #20]
      }
      break;
 8110478:	e010      	b.n	811049c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 811047a:	6878      	ldr	r0, [r7, #4]
 811047c:	f003 fece 	bl	811421c <tcp_send_fin>
 8110480:	4603      	mov	r3, r0
 8110482:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8110484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8110488:	2b00      	cmp	r3, #0
 811048a:	d109      	bne.n	81104a0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 811048c:	687b      	ldr	r3, [r7, #4]
 811048e:	2209      	movs	r2, #9
 8110490:	751a      	strb	r2, [r3, #20]
      }
      break;
 8110492:	e005      	b.n	81104a0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8110494:	2300      	movs	r3, #0
 8110496:	e01c      	b.n	81104d2 <tcp_close_shutdown_fin+0xbe>
      break;
 8110498:	bf00      	nop
 811049a:	e002      	b.n	81104a2 <tcp_close_shutdown_fin+0x8e>
      break;
 811049c:	bf00      	nop
 811049e:	e000      	b.n	81104a2 <tcp_close_shutdown_fin+0x8e>
      break;
 81104a0:	bf00      	nop
  }

  if (err == ERR_OK) {
 81104a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81104a6:	2b00      	cmp	r3, #0
 81104a8:	d103      	bne.n	81104b2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 81104aa:	6878      	ldr	r0, [r7, #4]
 81104ac:	f003 fff4 	bl	8114498 <tcp_output>
 81104b0:	e00d      	b.n	81104ce <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 81104b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81104b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81104ba:	d108      	bne.n	81104ce <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 81104bc:	687b      	ldr	r3, [r7, #4]
 81104be:	8b5b      	ldrh	r3, [r3, #26]
 81104c0:	f043 0308 	orr.w	r3, r3, #8
 81104c4:	b29a      	uxth	r2, r3
 81104c6:	687b      	ldr	r3, [r7, #4]
 81104c8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 81104ca:	2300      	movs	r3, #0
 81104cc:	e001      	b.n	81104d2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 81104ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 81104d2:	4618      	mov	r0, r3
 81104d4:	3710      	adds	r7, #16
 81104d6:	46bd      	mov	sp, r7
 81104d8:	bd80      	pop	{r7, pc}
 81104da:	bf00      	nop
 81104dc:	08118b24 	.word	0x08118b24
 81104e0:	08118c14 	.word	0x08118c14
 81104e4:	08118ba8 	.word	0x08118ba8

081104e8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 81104e8:	b580      	push	{r7, lr}
 81104ea:	b082      	sub	sp, #8
 81104ec:	af00      	add	r7, sp, #0
 81104ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 81104f0:	687b      	ldr	r3, [r7, #4]
 81104f2:	2b00      	cmp	r3, #0
 81104f4:	d109      	bne.n	811050a <tcp_close+0x22>
 81104f6:	4b0f      	ldr	r3, [pc, #60]	@ (8110534 <tcp_close+0x4c>)
 81104f8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 81104fc:	490e      	ldr	r1, [pc, #56]	@ (8110538 <tcp_close+0x50>)
 81104fe:	480f      	ldr	r0, [pc, #60]	@ (811053c <tcp_close+0x54>)
 8110500:	f006 f9f2 	bl	81168e8 <iprintf>
 8110504:	f06f 030f 	mvn.w	r3, #15
 8110508:	e00f      	b.n	811052a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 811050a:	687b      	ldr	r3, [r7, #4]
 811050c:	7d1b      	ldrb	r3, [r3, #20]
 811050e:	2b01      	cmp	r3, #1
 8110510:	d006      	beq.n	8110520 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8110512:	687b      	ldr	r3, [r7, #4]
 8110514:	8b5b      	ldrh	r3, [r3, #26]
 8110516:	f043 0310 	orr.w	r3, r3, #16
 811051a:	b29a      	uxth	r2, r3
 811051c:	687b      	ldr	r3, [r7, #4]
 811051e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8110520:	2101      	movs	r1, #1
 8110522:	6878      	ldr	r0, [r7, #4]
 8110524:	f7ff fe94 	bl	8110250 <tcp_close_shutdown>
 8110528:	4603      	mov	r3, r0
}
 811052a:	4618      	mov	r0, r3
 811052c:	3708      	adds	r7, #8
 811052e:	46bd      	mov	sp, r7
 8110530:	bd80      	pop	{r7, pc}
 8110532:	bf00      	nop
 8110534:	08118b24 	.word	0x08118b24
 8110538:	08118c74 	.word	0x08118c74
 811053c:	08118ba8 	.word	0x08118ba8

08110540 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8110540:	b580      	push	{r7, lr}
 8110542:	b08e      	sub	sp, #56	@ 0x38
 8110544:	af04      	add	r7, sp, #16
 8110546:	6078      	str	r0, [r7, #4]
 8110548:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 811054a:	687b      	ldr	r3, [r7, #4]
 811054c:	2b00      	cmp	r3, #0
 811054e:	d107      	bne.n	8110560 <tcp_abandon+0x20>
 8110550:	4b52      	ldr	r3, [pc, #328]	@ (811069c <tcp_abandon+0x15c>)
 8110552:	f240 223d 	movw	r2, #573	@ 0x23d
 8110556:	4952      	ldr	r1, [pc, #328]	@ (81106a0 <tcp_abandon+0x160>)
 8110558:	4852      	ldr	r0, [pc, #328]	@ (81106a4 <tcp_abandon+0x164>)
 811055a:	f006 f9c5 	bl	81168e8 <iprintf>
 811055e:	e099      	b.n	8110694 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8110560:	687b      	ldr	r3, [r7, #4]
 8110562:	7d1b      	ldrb	r3, [r3, #20]
 8110564:	2b01      	cmp	r3, #1
 8110566:	d106      	bne.n	8110576 <tcp_abandon+0x36>
 8110568:	4b4c      	ldr	r3, [pc, #304]	@ (811069c <tcp_abandon+0x15c>)
 811056a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 811056e:	494e      	ldr	r1, [pc, #312]	@ (81106a8 <tcp_abandon+0x168>)
 8110570:	484c      	ldr	r0, [pc, #304]	@ (81106a4 <tcp_abandon+0x164>)
 8110572:	f006 f9b9 	bl	81168e8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8110576:	687b      	ldr	r3, [r7, #4]
 8110578:	7d1b      	ldrb	r3, [r3, #20]
 811057a:	2b0a      	cmp	r3, #10
 811057c:	d107      	bne.n	811058e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 811057e:	6879      	ldr	r1, [r7, #4]
 8110580:	484a      	ldr	r0, [pc, #296]	@ (81106ac <tcp_abandon+0x16c>)
 8110582:	f000 ffc9 	bl	8111518 <tcp_pcb_remove>
    tcp_free(pcb);
 8110586:	6878      	ldr	r0, [r7, #4]
 8110588:	f7ff fdb0 	bl	81100ec <tcp_free>
 811058c:	e082      	b.n	8110694 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 811058e:	2300      	movs	r3, #0
 8110590:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8110592:	2300      	movs	r3, #0
 8110594:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8110596:	687b      	ldr	r3, [r7, #4]
 8110598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811059a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 811059c:	687b      	ldr	r3, [r7, #4]
 811059e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81105a0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 81105a2:	687b      	ldr	r3, [r7, #4]
 81105a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81105a8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 81105aa:	687b      	ldr	r3, [r7, #4]
 81105ac:	691b      	ldr	r3, [r3, #16]
 81105ae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 81105b0:	687b      	ldr	r3, [r7, #4]
 81105b2:	7d1b      	ldrb	r3, [r3, #20]
 81105b4:	2b00      	cmp	r3, #0
 81105b6:	d126      	bne.n	8110606 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 81105b8:	687b      	ldr	r3, [r7, #4]
 81105ba:	8adb      	ldrh	r3, [r3, #22]
 81105bc:	2b00      	cmp	r3, #0
 81105be:	d02e      	beq.n	811061e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 81105c0:	4b3b      	ldr	r3, [pc, #236]	@ (81106b0 <tcp_abandon+0x170>)
 81105c2:	681b      	ldr	r3, [r3, #0]
 81105c4:	687a      	ldr	r2, [r7, #4]
 81105c6:	429a      	cmp	r2, r3
 81105c8:	d105      	bne.n	81105d6 <tcp_abandon+0x96>
 81105ca:	4b39      	ldr	r3, [pc, #228]	@ (81106b0 <tcp_abandon+0x170>)
 81105cc:	681b      	ldr	r3, [r3, #0]
 81105ce:	68db      	ldr	r3, [r3, #12]
 81105d0:	4a37      	ldr	r2, [pc, #220]	@ (81106b0 <tcp_abandon+0x170>)
 81105d2:	6013      	str	r3, [r2, #0]
 81105d4:	e013      	b.n	81105fe <tcp_abandon+0xbe>
 81105d6:	4b36      	ldr	r3, [pc, #216]	@ (81106b0 <tcp_abandon+0x170>)
 81105d8:	681b      	ldr	r3, [r3, #0]
 81105da:	61fb      	str	r3, [r7, #28]
 81105dc:	e00c      	b.n	81105f8 <tcp_abandon+0xb8>
 81105de:	69fb      	ldr	r3, [r7, #28]
 81105e0:	68db      	ldr	r3, [r3, #12]
 81105e2:	687a      	ldr	r2, [r7, #4]
 81105e4:	429a      	cmp	r2, r3
 81105e6:	d104      	bne.n	81105f2 <tcp_abandon+0xb2>
 81105e8:	687b      	ldr	r3, [r7, #4]
 81105ea:	68da      	ldr	r2, [r3, #12]
 81105ec:	69fb      	ldr	r3, [r7, #28]
 81105ee:	60da      	str	r2, [r3, #12]
 81105f0:	e005      	b.n	81105fe <tcp_abandon+0xbe>
 81105f2:	69fb      	ldr	r3, [r7, #28]
 81105f4:	68db      	ldr	r3, [r3, #12]
 81105f6:	61fb      	str	r3, [r7, #28]
 81105f8:	69fb      	ldr	r3, [r7, #28]
 81105fa:	2b00      	cmp	r3, #0
 81105fc:	d1ef      	bne.n	81105de <tcp_abandon+0x9e>
 81105fe:	687b      	ldr	r3, [r7, #4]
 8110600:	2200      	movs	r2, #0
 8110602:	60da      	str	r2, [r3, #12]
 8110604:	e00b      	b.n	811061e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8110606:	683b      	ldr	r3, [r7, #0]
 8110608:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 811060a:	687b      	ldr	r3, [r7, #4]
 811060c:	8adb      	ldrh	r3, [r3, #22]
 811060e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8110610:	6879      	ldr	r1, [r7, #4]
 8110612:	4828      	ldr	r0, [pc, #160]	@ (81106b4 <tcp_abandon+0x174>)
 8110614:	f000 ff80 	bl	8111518 <tcp_pcb_remove>
 8110618:	4b27      	ldr	r3, [pc, #156]	@ (81106b8 <tcp_abandon+0x178>)
 811061a:	2201      	movs	r2, #1
 811061c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 811061e:	687b      	ldr	r3, [r7, #4]
 8110620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8110622:	2b00      	cmp	r3, #0
 8110624:	d004      	beq.n	8110630 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8110626:	687b      	ldr	r3, [r7, #4]
 8110628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811062a:	4618      	mov	r0, r3
 811062c:	f000 fd22 	bl	8111074 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8110630:	687b      	ldr	r3, [r7, #4]
 8110632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110634:	2b00      	cmp	r3, #0
 8110636:	d004      	beq.n	8110642 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8110638:	687b      	ldr	r3, [r7, #4]
 811063a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811063c:	4618      	mov	r0, r3
 811063e:	f000 fd19 	bl	8111074 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8110642:	687b      	ldr	r3, [r7, #4]
 8110644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8110646:	2b00      	cmp	r3, #0
 8110648:	d004      	beq.n	8110654 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 811064a:	687b      	ldr	r3, [r7, #4]
 811064c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811064e:	4618      	mov	r0, r3
 8110650:	f000 fd10 	bl	8111074 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8110654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110656:	2b00      	cmp	r3, #0
 8110658:	d00e      	beq.n	8110678 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 811065a:	6879      	ldr	r1, [r7, #4]
 811065c:	687b      	ldr	r3, [r7, #4]
 811065e:	3304      	adds	r3, #4
 8110660:	687a      	ldr	r2, [r7, #4]
 8110662:	8b12      	ldrh	r2, [r2, #24]
 8110664:	9202      	str	r2, [sp, #8]
 8110666:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8110668:	9201      	str	r2, [sp, #4]
 811066a:	9300      	str	r3, [sp, #0]
 811066c:	460b      	mov	r3, r1
 811066e:	697a      	ldr	r2, [r7, #20]
 8110670:	69b9      	ldr	r1, [r7, #24]
 8110672:	6878      	ldr	r0, [r7, #4]
 8110674:	f004 fcc4 	bl	8115000 <tcp_rst>
    }
    last_state = pcb->state;
 8110678:	687b      	ldr	r3, [r7, #4]
 811067a:	7d1b      	ldrb	r3, [r3, #20]
 811067c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 811067e:	6878      	ldr	r0, [r7, #4]
 8110680:	f7ff fd34 	bl	81100ec <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8110684:	693b      	ldr	r3, [r7, #16]
 8110686:	2b00      	cmp	r3, #0
 8110688:	d004      	beq.n	8110694 <tcp_abandon+0x154>
 811068a:	693b      	ldr	r3, [r7, #16]
 811068c:	f06f 010c 	mvn.w	r1, #12
 8110690:	68f8      	ldr	r0, [r7, #12]
 8110692:	4798      	blx	r3
  }
}
 8110694:	3728      	adds	r7, #40	@ 0x28
 8110696:	46bd      	mov	sp, r7
 8110698:	bd80      	pop	{r7, pc}
 811069a:	bf00      	nop
 811069c:	08118b24 	.word	0x08118b24
 81106a0:	08118ca8 	.word	0x08118ca8
 81106a4:	08118ba8 	.word	0x08118ba8
 81106a8:	08118cc4 	.word	0x08118cc4
 81106ac:	1000b85c 	.word	0x1000b85c
 81106b0:	1000b850 	.word	0x1000b850
 81106b4:	1000b858 	.word	0x1000b858
 81106b8:	1000b860 	.word	0x1000b860

081106bc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 81106bc:	b580      	push	{r7, lr}
 81106be:	b082      	sub	sp, #8
 81106c0:	af00      	add	r7, sp, #0
 81106c2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 81106c4:	2101      	movs	r1, #1
 81106c6:	6878      	ldr	r0, [r7, #4]
 81106c8:	f7ff ff3a 	bl	8110540 <tcp_abandon>
}
 81106cc:	bf00      	nop
 81106ce:	3708      	adds	r7, #8
 81106d0:	46bd      	mov	sp, r7
 81106d2:	bd80      	pop	{r7, pc}

081106d4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 81106d4:	b580      	push	{r7, lr}
 81106d6:	b084      	sub	sp, #16
 81106d8:	af00      	add	r7, sp, #0
 81106da:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 81106dc:	687b      	ldr	r3, [r7, #4]
 81106de:	2b00      	cmp	r3, #0
 81106e0:	d106      	bne.n	81106f0 <tcp_update_rcv_ann_wnd+0x1c>
 81106e2:	4b25      	ldr	r3, [pc, #148]	@ (8110778 <tcp_update_rcv_ann_wnd+0xa4>)
 81106e4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 81106e8:	4924      	ldr	r1, [pc, #144]	@ (811077c <tcp_update_rcv_ann_wnd+0xa8>)
 81106ea:	4825      	ldr	r0, [pc, #148]	@ (8110780 <tcp_update_rcv_ann_wnd+0xac>)
 81106ec:	f006 f8fc 	bl	81168e8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 81106f0:	687b      	ldr	r3, [r7, #4]
 81106f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81106f4:	687a      	ldr	r2, [r7, #4]
 81106f6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 81106f8:	4413      	add	r3, r2
 81106fa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 81106fc:	687b      	ldr	r3, [r7, #4]
 81106fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110700:	687a      	ldr	r2, [r7, #4]
 8110702:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8110704:	f640 3168 	movw	r1, #2920	@ 0xb68
 8110708:	428a      	cmp	r2, r1
 811070a:	bf28      	it	cs
 811070c:	460a      	movcs	r2, r1
 811070e:	b292      	uxth	r2, r2
 8110710:	4413      	add	r3, r2
 8110712:	68fa      	ldr	r2, [r7, #12]
 8110714:	1ad3      	subs	r3, r2, r3
 8110716:	2b00      	cmp	r3, #0
 8110718:	db08      	blt.n	811072c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 811071a:	687b      	ldr	r3, [r7, #4]
 811071c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811071e:	687b      	ldr	r3, [r7, #4]
 8110720:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8110722:	687b      	ldr	r3, [r7, #4]
 8110724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110726:	68fa      	ldr	r2, [r7, #12]
 8110728:	1ad3      	subs	r3, r2, r3
 811072a:	e020      	b.n	811076e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 811072c:	687b      	ldr	r3, [r7, #4]
 811072e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8110730:	687b      	ldr	r3, [r7, #4]
 8110732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110734:	1ad3      	subs	r3, r2, r3
 8110736:	2b00      	cmp	r3, #0
 8110738:	dd03      	ble.n	8110742 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 811073a:	687b      	ldr	r3, [r7, #4]
 811073c:	2200      	movs	r2, #0
 811073e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8110740:	e014      	b.n	811076c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8110742:	687b      	ldr	r3, [r7, #4]
 8110744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8110746:	687b      	ldr	r3, [r7, #4]
 8110748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811074a:	1ad3      	subs	r3, r2, r3
 811074c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 811074e:	68bb      	ldr	r3, [r7, #8]
 8110750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8110754:	d306      	bcc.n	8110764 <tcp_update_rcv_ann_wnd+0x90>
 8110756:	4b08      	ldr	r3, [pc, #32]	@ (8110778 <tcp_update_rcv_ann_wnd+0xa4>)
 8110758:	f240 32b6 	movw	r2, #950	@ 0x3b6
 811075c:	4909      	ldr	r1, [pc, #36]	@ (8110784 <tcp_update_rcv_ann_wnd+0xb0>)
 811075e:	4808      	ldr	r0, [pc, #32]	@ (8110780 <tcp_update_rcv_ann_wnd+0xac>)
 8110760:	f006 f8c2 	bl	81168e8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8110764:	68bb      	ldr	r3, [r7, #8]
 8110766:	b29a      	uxth	r2, r3
 8110768:	687b      	ldr	r3, [r7, #4]
 811076a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 811076c:	2300      	movs	r3, #0
  }
}
 811076e:	4618      	mov	r0, r3
 8110770:	3710      	adds	r7, #16
 8110772:	46bd      	mov	sp, r7
 8110774:	bd80      	pop	{r7, pc}
 8110776:	bf00      	nop
 8110778:	08118b24 	.word	0x08118b24
 811077c:	08118dc0 	.word	0x08118dc0
 8110780:	08118ba8 	.word	0x08118ba8
 8110784:	08118de4 	.word	0x08118de4

08110788 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8110788:	b580      	push	{r7, lr}
 811078a:	b084      	sub	sp, #16
 811078c:	af00      	add	r7, sp, #0
 811078e:	6078      	str	r0, [r7, #4]
 8110790:	460b      	mov	r3, r1
 8110792:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8110794:	687b      	ldr	r3, [r7, #4]
 8110796:	2b00      	cmp	r3, #0
 8110798:	d107      	bne.n	81107aa <tcp_recved+0x22>
 811079a:	4b20      	ldr	r3, [pc, #128]	@ (811081c <tcp_recved+0x94>)
 811079c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 81107a0:	491f      	ldr	r1, [pc, #124]	@ (8110820 <tcp_recved+0x98>)
 81107a2:	4820      	ldr	r0, [pc, #128]	@ (8110824 <tcp_recved+0x9c>)
 81107a4:	f006 f8a0 	bl	81168e8 <iprintf>
 81107a8:	e034      	b.n	8110814 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 81107aa:	687b      	ldr	r3, [r7, #4]
 81107ac:	7d1b      	ldrb	r3, [r3, #20]
 81107ae:	2b01      	cmp	r3, #1
 81107b0:	d106      	bne.n	81107c0 <tcp_recved+0x38>
 81107b2:	4b1a      	ldr	r3, [pc, #104]	@ (811081c <tcp_recved+0x94>)
 81107b4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 81107b8:	491b      	ldr	r1, [pc, #108]	@ (8110828 <tcp_recved+0xa0>)
 81107ba:	481a      	ldr	r0, [pc, #104]	@ (8110824 <tcp_recved+0x9c>)
 81107bc:	f006 f894 	bl	81168e8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 81107c0:	687b      	ldr	r3, [r7, #4]
 81107c2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 81107c4:	887b      	ldrh	r3, [r7, #2]
 81107c6:	4413      	add	r3, r2
 81107c8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 81107ca:	89fb      	ldrh	r3, [r7, #14]
 81107cc:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81107d0:	4293      	cmp	r3, r2
 81107d2:	d804      	bhi.n	81107de <tcp_recved+0x56>
 81107d4:	687b      	ldr	r3, [r7, #4]
 81107d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81107d8:	89fa      	ldrh	r2, [r7, #14]
 81107da:	429a      	cmp	r2, r3
 81107dc:	d204      	bcs.n	81107e8 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 81107de:	687b      	ldr	r3, [r7, #4]
 81107e0:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81107e4:	851a      	strh	r2, [r3, #40]	@ 0x28
 81107e6:	e002      	b.n	81107ee <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 81107e8:	687b      	ldr	r3, [r7, #4]
 81107ea:	89fa      	ldrh	r2, [r7, #14]
 81107ec:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 81107ee:	6878      	ldr	r0, [r7, #4]
 81107f0:	f7ff ff70 	bl	81106d4 <tcp_update_rcv_ann_wnd>
 81107f4:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 81107f6:	68bb      	ldr	r3, [r7, #8]
 81107f8:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 81107fc:	4293      	cmp	r3, r2
 81107fe:	d909      	bls.n	8110814 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8110800:	687b      	ldr	r3, [r7, #4]
 8110802:	8b5b      	ldrh	r3, [r3, #26]
 8110804:	f043 0302 	orr.w	r3, r3, #2
 8110808:	b29a      	uxth	r2, r3
 811080a:	687b      	ldr	r3, [r7, #4]
 811080c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811080e:	6878      	ldr	r0, [r7, #4]
 8110810:	f003 fe42 	bl	8114498 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8110814:	3710      	adds	r7, #16
 8110816:	46bd      	mov	sp, r7
 8110818:	bd80      	pop	{r7, pc}
 811081a:	bf00      	nop
 811081c:	08118b24 	.word	0x08118b24
 8110820:	08118e00 	.word	0x08118e00
 8110824:	08118ba8 	.word	0x08118ba8
 8110828:	08118e18 	.word	0x08118e18

0811082c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 811082c:	b5b0      	push	{r4, r5, r7, lr}
 811082e:	b090      	sub	sp, #64	@ 0x40
 8110830:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8110832:	2300      	movs	r3, #0
 8110834:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8110838:	4b95      	ldr	r3, [pc, #596]	@ (8110a90 <tcp_slowtmr+0x264>)
 811083a:	681b      	ldr	r3, [r3, #0]
 811083c:	3301      	adds	r3, #1
 811083e:	4a94      	ldr	r2, [pc, #592]	@ (8110a90 <tcp_slowtmr+0x264>)
 8110840:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8110842:	4b94      	ldr	r3, [pc, #592]	@ (8110a94 <tcp_slowtmr+0x268>)
 8110844:	781b      	ldrb	r3, [r3, #0]
 8110846:	3301      	adds	r3, #1
 8110848:	b2da      	uxtb	r2, r3
 811084a:	4b92      	ldr	r3, [pc, #584]	@ (8110a94 <tcp_slowtmr+0x268>)
 811084c:	701a      	strb	r2, [r3, #0]
 811084e:	e000      	b.n	8110852 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8110850:	bf00      	nop
  prev = NULL;
 8110852:	2300      	movs	r3, #0
 8110854:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8110856:	4b90      	ldr	r3, [pc, #576]	@ (8110a98 <tcp_slowtmr+0x26c>)
 8110858:	681b      	ldr	r3, [r3, #0]
 811085a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 811085c:	e29f      	b.n	8110d9e <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 811085e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110860:	7d1b      	ldrb	r3, [r3, #20]
 8110862:	2b00      	cmp	r3, #0
 8110864:	d106      	bne.n	8110874 <tcp_slowtmr+0x48>
 8110866:	4b8d      	ldr	r3, [pc, #564]	@ (8110a9c <tcp_slowtmr+0x270>)
 8110868:	f240 42be 	movw	r2, #1214	@ 0x4be
 811086c:	498c      	ldr	r1, [pc, #560]	@ (8110aa0 <tcp_slowtmr+0x274>)
 811086e:	488d      	ldr	r0, [pc, #564]	@ (8110aa4 <tcp_slowtmr+0x278>)
 8110870:	f006 f83a 	bl	81168e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8110874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110876:	7d1b      	ldrb	r3, [r3, #20]
 8110878:	2b01      	cmp	r3, #1
 811087a:	d106      	bne.n	811088a <tcp_slowtmr+0x5e>
 811087c:	4b87      	ldr	r3, [pc, #540]	@ (8110a9c <tcp_slowtmr+0x270>)
 811087e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8110882:	4989      	ldr	r1, [pc, #548]	@ (8110aa8 <tcp_slowtmr+0x27c>)
 8110884:	4887      	ldr	r0, [pc, #540]	@ (8110aa4 <tcp_slowtmr+0x278>)
 8110886:	f006 f82f 	bl	81168e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 811088a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811088c:	7d1b      	ldrb	r3, [r3, #20]
 811088e:	2b0a      	cmp	r3, #10
 8110890:	d106      	bne.n	81108a0 <tcp_slowtmr+0x74>
 8110892:	4b82      	ldr	r3, [pc, #520]	@ (8110a9c <tcp_slowtmr+0x270>)
 8110894:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8110898:	4984      	ldr	r1, [pc, #528]	@ (8110aac <tcp_slowtmr+0x280>)
 811089a:	4882      	ldr	r0, [pc, #520]	@ (8110aa4 <tcp_slowtmr+0x278>)
 811089c:	f006 f824 	bl	81168e8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 81108a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81108a2:	7f9a      	ldrb	r2, [r3, #30]
 81108a4:	4b7b      	ldr	r3, [pc, #492]	@ (8110a94 <tcp_slowtmr+0x268>)
 81108a6:	781b      	ldrb	r3, [r3, #0]
 81108a8:	429a      	cmp	r2, r3
 81108aa:	d105      	bne.n	81108b8 <tcp_slowtmr+0x8c>
      prev = pcb;
 81108ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81108ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 81108b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81108b2:	68db      	ldr	r3, [r3, #12]
 81108b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 81108b6:	e272      	b.n	8110d9e <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 81108b8:	4b76      	ldr	r3, [pc, #472]	@ (8110a94 <tcp_slowtmr+0x268>)
 81108ba:	781a      	ldrb	r2, [r3, #0]
 81108bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81108be:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 81108c0:	2300      	movs	r3, #0
 81108c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 81108c6:	2300      	movs	r3, #0
 81108c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 81108cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81108ce:	7d1b      	ldrb	r3, [r3, #20]
 81108d0:	2b02      	cmp	r3, #2
 81108d2:	d10a      	bne.n	81108ea <tcp_slowtmr+0xbe>
 81108d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81108d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81108da:	2b05      	cmp	r3, #5
 81108dc:	d905      	bls.n	81108ea <tcp_slowtmr+0xbe>
      ++pcb_remove;
 81108de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81108e2:	3301      	adds	r3, #1
 81108e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 81108e8:	e11e      	b.n	8110b28 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 81108ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81108ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81108f0:	2b0b      	cmp	r3, #11
 81108f2:	d905      	bls.n	8110900 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 81108f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81108f8:	3301      	adds	r3, #1
 81108fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 81108fe:	e113      	b.n	8110b28 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8110900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110902:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8110906:	2b00      	cmp	r3, #0
 8110908:	d075      	beq.n	81109f6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 811090a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811090c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811090e:	2b00      	cmp	r3, #0
 8110910:	d006      	beq.n	8110920 <tcp_slowtmr+0xf4>
 8110912:	4b62      	ldr	r3, [pc, #392]	@ (8110a9c <tcp_slowtmr+0x270>)
 8110914:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8110918:	4965      	ldr	r1, [pc, #404]	@ (8110ab0 <tcp_slowtmr+0x284>)
 811091a:	4862      	ldr	r0, [pc, #392]	@ (8110aa4 <tcp_slowtmr+0x278>)
 811091c:	f005 ffe4 	bl	81168e8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8110920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110924:	2b00      	cmp	r3, #0
 8110926:	d106      	bne.n	8110936 <tcp_slowtmr+0x10a>
 8110928:	4b5c      	ldr	r3, [pc, #368]	@ (8110a9c <tcp_slowtmr+0x270>)
 811092a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 811092e:	4961      	ldr	r1, [pc, #388]	@ (8110ab4 <tcp_slowtmr+0x288>)
 8110930:	485c      	ldr	r0, [pc, #368]	@ (8110aa4 <tcp_slowtmr+0x278>)
 8110932:	f005 ffd9 	bl	81168e8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8110936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110938:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 811093c:	2b0b      	cmp	r3, #11
 811093e:	d905      	bls.n	811094c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8110940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8110944:	3301      	adds	r3, #1
 8110946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 811094a:	e0ed      	b.n	8110b28 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 811094c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811094e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8110952:	3b01      	subs	r3, #1
 8110954:	4a58      	ldr	r2, [pc, #352]	@ (8110ab8 <tcp_slowtmr+0x28c>)
 8110956:	5cd3      	ldrb	r3, [r2, r3]
 8110958:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 811095a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811095c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8110960:	7c7a      	ldrb	r2, [r7, #17]
 8110962:	429a      	cmp	r2, r3
 8110964:	d907      	bls.n	8110976 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8110966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110968:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 811096c:	3301      	adds	r3, #1
 811096e:	b2da      	uxtb	r2, r3
 8110970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110972:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8110976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110978:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 811097c:	7c7a      	ldrb	r2, [r7, #17]
 811097e:	429a      	cmp	r2, r3
 8110980:	f200 80d2 	bhi.w	8110b28 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8110984:	2301      	movs	r3, #1
 8110986:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8110988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811098a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811098e:	2b00      	cmp	r3, #0
 8110990:	d108      	bne.n	81109a4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8110992:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8110994:	f004 fc28 	bl	81151e8 <tcp_zero_window_probe>
 8110998:	4603      	mov	r3, r0
 811099a:	2b00      	cmp	r3, #0
 811099c:	d014      	beq.n	81109c8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 811099e:	2300      	movs	r3, #0
 81109a0:	623b      	str	r3, [r7, #32]
 81109a2:	e011      	b.n	81109c8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 81109a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81109a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81109aa:	4619      	mov	r1, r3
 81109ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81109ae:	f003 faed 	bl	8113f8c <tcp_split_unsent_seg>
 81109b2:	4603      	mov	r3, r0
 81109b4:	2b00      	cmp	r3, #0
 81109b6:	d107      	bne.n	81109c8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 81109b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81109ba:	f003 fd6d 	bl	8114498 <tcp_output>
 81109be:	4603      	mov	r3, r0
 81109c0:	2b00      	cmp	r3, #0
 81109c2:	d101      	bne.n	81109c8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 81109c4:	2300      	movs	r3, #0
 81109c6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 81109c8:	6a3b      	ldr	r3, [r7, #32]
 81109ca:	2b00      	cmp	r3, #0
 81109cc:	f000 80ac 	beq.w	8110b28 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 81109d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81109d2:	2200      	movs	r2, #0
 81109d4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 81109d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81109da:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 81109de:	2b06      	cmp	r3, #6
 81109e0:	f200 80a2 	bhi.w	8110b28 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 81109e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81109e6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 81109ea:	3301      	adds	r3, #1
 81109ec:	b2da      	uxtb	r2, r3
 81109ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81109f0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 81109f4:	e098      	b.n	8110b28 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 81109f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81109f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 81109fc:	2b00      	cmp	r3, #0
 81109fe:	db0f      	blt.n	8110a20 <tcp_slowtmr+0x1f4>
 8110a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110a02:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8110a06:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8110a0a:	4293      	cmp	r3, r2
 8110a0c:	d008      	beq.n	8110a20 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8110a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110a10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8110a14:	b29b      	uxth	r3, r3
 8110a16:	3301      	adds	r3, #1
 8110a18:	b29b      	uxth	r3, r3
 8110a1a:	b21a      	sxth	r2, r3
 8110a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110a1e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8110a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110a22:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8110a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110a28:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8110a2c:	429a      	cmp	r2, r3
 8110a2e:	db7b      	blt.n	8110b28 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8110a30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8110a32:	f004 f825 	bl	8114a80 <tcp_rexmit_rto_prepare>
 8110a36:	4603      	mov	r3, r0
 8110a38:	2b00      	cmp	r3, #0
 8110a3a:	d007      	beq.n	8110a4c <tcp_slowtmr+0x220>
 8110a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8110a40:	2b00      	cmp	r3, #0
 8110a42:	d171      	bne.n	8110b28 <tcp_slowtmr+0x2fc>
 8110a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110a48:	2b00      	cmp	r3, #0
 8110a4a:	d06d      	beq.n	8110b28 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8110a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110a4e:	7d1b      	ldrb	r3, [r3, #20]
 8110a50:	2b02      	cmp	r3, #2
 8110a52:	d03a      	beq.n	8110aca <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8110a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110a56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8110a5a:	2b0c      	cmp	r3, #12
 8110a5c:	bf28      	it	cs
 8110a5e:	230c      	movcs	r3, #12
 8110a60:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8110a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110a64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8110a68:	10db      	asrs	r3, r3, #3
 8110a6a:	b21b      	sxth	r3, r3
 8110a6c:	461a      	mov	r2, r3
 8110a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110a70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8110a74:	4413      	add	r3, r2
 8110a76:	7efa      	ldrb	r2, [r7, #27]
 8110a78:	4910      	ldr	r1, [pc, #64]	@ (8110abc <tcp_slowtmr+0x290>)
 8110a7a:	5c8a      	ldrb	r2, [r1, r2]
 8110a7c:	4093      	lsls	r3, r2
 8110a7e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8110a80:	697b      	ldr	r3, [r7, #20]
 8110a82:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8110a86:	4293      	cmp	r3, r2
 8110a88:	dc1a      	bgt.n	8110ac0 <tcp_slowtmr+0x294>
 8110a8a:	697b      	ldr	r3, [r7, #20]
 8110a8c:	b21a      	sxth	r2, r3
 8110a8e:	e019      	b.n	8110ac4 <tcp_slowtmr+0x298>
 8110a90:	1000b84c 	.word	0x1000b84c
 8110a94:	1000b862 	.word	0x1000b862
 8110a98:	1000b858 	.word	0x1000b858
 8110a9c:	08118b24 	.word	0x08118b24
 8110aa0:	08118ea8 	.word	0x08118ea8
 8110aa4:	08118ba8 	.word	0x08118ba8
 8110aa8:	08118ed4 	.word	0x08118ed4
 8110aac:	08118f00 	.word	0x08118f00
 8110ab0:	08118f30 	.word	0x08118f30
 8110ab4:	08118f64 	.word	0x08118f64
 8110ab8:	0811a754 	.word	0x0811a754
 8110abc:	0811a744 	.word	0x0811a744
 8110ac0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8110ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110ac6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8110aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110acc:	2200      	movs	r2, #0
 8110ace:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8110ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110ad2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8110ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110ad8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8110adc:	4293      	cmp	r3, r2
 8110ade:	bf28      	it	cs
 8110ae0:	4613      	movcs	r3, r2
 8110ae2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8110ae4:	8a7b      	ldrh	r3, [r7, #18]
 8110ae6:	085b      	lsrs	r3, r3, #1
 8110ae8:	b29a      	uxth	r2, r3
 8110aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110aec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8110af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110af2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8110af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110af8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8110afa:	005b      	lsls	r3, r3, #1
 8110afc:	b29b      	uxth	r3, r3
 8110afe:	429a      	cmp	r2, r3
 8110b00:	d206      	bcs.n	8110b10 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8110b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8110b06:	005b      	lsls	r3, r3, #1
 8110b08:	b29a      	uxth	r2, r3
 8110b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8110b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b12:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8110b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b16:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8110b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b1c:	2200      	movs	r2, #0
 8110b1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8110b22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8110b24:	f004 f81c 	bl	8114b60 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8110b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b2a:	7d1b      	ldrb	r3, [r3, #20]
 8110b2c:	2b06      	cmp	r3, #6
 8110b2e:	d111      	bne.n	8110b54 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8110b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b32:	8b5b      	ldrh	r3, [r3, #26]
 8110b34:	f003 0310 	and.w	r3, r3, #16
 8110b38:	2b00      	cmp	r3, #0
 8110b3a:	d00b      	beq.n	8110b54 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8110b3c:	4b9d      	ldr	r3, [pc, #628]	@ (8110db4 <tcp_slowtmr+0x588>)
 8110b3e:	681a      	ldr	r2, [r3, #0]
 8110b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b42:	6a1b      	ldr	r3, [r3, #32]
 8110b44:	1ad3      	subs	r3, r2, r3
 8110b46:	2b28      	cmp	r3, #40	@ 0x28
 8110b48:	d904      	bls.n	8110b54 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8110b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8110b4e:	3301      	adds	r3, #1
 8110b50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8110b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b56:	7a5b      	ldrb	r3, [r3, #9]
 8110b58:	f003 0308 	and.w	r3, r3, #8
 8110b5c:	2b00      	cmp	r3, #0
 8110b5e:	d04c      	beq.n	8110bfa <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8110b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b62:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8110b64:	2b04      	cmp	r3, #4
 8110b66:	d003      	beq.n	8110b70 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8110b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b6a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8110b6c:	2b07      	cmp	r3, #7
 8110b6e:	d144      	bne.n	8110bfa <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8110b70:	4b90      	ldr	r3, [pc, #576]	@ (8110db4 <tcp_slowtmr+0x588>)
 8110b72:	681a      	ldr	r2, [r3, #0]
 8110b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b76:	6a1b      	ldr	r3, [r3, #32]
 8110b78:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8110b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8110b80:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8110b84:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8110b88:	498b      	ldr	r1, [pc, #556]	@ (8110db8 <tcp_slowtmr+0x58c>)
 8110b8a:	fba1 1303 	umull	r1, r3, r1, r3
 8110b8e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8110b90:	429a      	cmp	r2, r3
 8110b92:	d90a      	bls.n	8110baa <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8110b94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8110b98:	3301      	adds	r3, #1
 8110b9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8110b9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8110ba2:	3301      	adds	r3, #1
 8110ba4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8110ba8:	e027      	b.n	8110bfa <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8110baa:	4b82      	ldr	r3, [pc, #520]	@ (8110db4 <tcp_slowtmr+0x588>)
 8110bac:	681a      	ldr	r2, [r3, #0]
 8110bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110bb0:	6a1b      	ldr	r3, [r3, #32]
 8110bb2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8110bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110bb6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8110bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110bbc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8110bc0:	4618      	mov	r0, r3
 8110bc2:	4b7e      	ldr	r3, [pc, #504]	@ (8110dbc <tcp_slowtmr+0x590>)
 8110bc4:	fb00 f303 	mul.w	r3, r0, r3
 8110bc8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8110bca:	497b      	ldr	r1, [pc, #492]	@ (8110db8 <tcp_slowtmr+0x58c>)
 8110bcc:	fba1 1303 	umull	r1, r3, r1, r3
 8110bd0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8110bd2:	429a      	cmp	r2, r3
 8110bd4:	d911      	bls.n	8110bfa <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8110bd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8110bd8:	f004 fac6 	bl	8115168 <tcp_keepalive>
 8110bdc:	4603      	mov	r3, r0
 8110bde:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8110be2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8110be6:	2b00      	cmp	r3, #0
 8110be8:	d107      	bne.n	8110bfa <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8110bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110bec:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8110bf0:	3301      	adds	r3, #1
 8110bf2:	b2da      	uxtb	r2, r3
 8110bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110bf6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8110bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8110bfe:	2b00      	cmp	r3, #0
 8110c00:	d011      	beq.n	8110c26 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8110c02:	4b6c      	ldr	r3, [pc, #432]	@ (8110db4 <tcp_slowtmr+0x588>)
 8110c04:	681a      	ldr	r2, [r3, #0]
 8110c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110c08:	6a1b      	ldr	r3, [r3, #32]
 8110c0a:	1ad2      	subs	r2, r2, r3
 8110c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110c0e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8110c12:	4619      	mov	r1, r3
 8110c14:	460b      	mov	r3, r1
 8110c16:	005b      	lsls	r3, r3, #1
 8110c18:	440b      	add	r3, r1
 8110c1a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8110c1c:	429a      	cmp	r2, r3
 8110c1e:	d302      	bcc.n	8110c26 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8110c20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8110c22:	f000 fddd 	bl	81117e0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8110c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110c28:	7d1b      	ldrb	r3, [r3, #20]
 8110c2a:	2b03      	cmp	r3, #3
 8110c2c:	d10b      	bne.n	8110c46 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8110c2e:	4b61      	ldr	r3, [pc, #388]	@ (8110db4 <tcp_slowtmr+0x588>)
 8110c30:	681a      	ldr	r2, [r3, #0]
 8110c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110c34:	6a1b      	ldr	r3, [r3, #32]
 8110c36:	1ad3      	subs	r3, r2, r3
 8110c38:	2b28      	cmp	r3, #40	@ 0x28
 8110c3a:	d904      	bls.n	8110c46 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8110c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8110c40:	3301      	adds	r3, #1
 8110c42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8110c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110c48:	7d1b      	ldrb	r3, [r3, #20]
 8110c4a:	2b09      	cmp	r3, #9
 8110c4c:	d10b      	bne.n	8110c66 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8110c4e:	4b59      	ldr	r3, [pc, #356]	@ (8110db4 <tcp_slowtmr+0x588>)
 8110c50:	681a      	ldr	r2, [r3, #0]
 8110c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110c54:	6a1b      	ldr	r3, [r3, #32]
 8110c56:	1ad3      	subs	r3, r2, r3
 8110c58:	2bf0      	cmp	r3, #240	@ 0xf0
 8110c5a:	d904      	bls.n	8110c66 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8110c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8110c60:	3301      	adds	r3, #1
 8110c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8110c66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8110c6a:	2b00      	cmp	r3, #0
 8110c6c:	d060      	beq.n	8110d30 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8110c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8110c74:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8110c76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8110c78:	f000 fbfe 	bl	8111478 <tcp_pcb_purge>
      if (prev != NULL) {
 8110c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110c7e:	2b00      	cmp	r3, #0
 8110c80:	d010      	beq.n	8110ca4 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8110c82:	4b4f      	ldr	r3, [pc, #316]	@ (8110dc0 <tcp_slowtmr+0x594>)
 8110c84:	681b      	ldr	r3, [r3, #0]
 8110c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110c88:	429a      	cmp	r2, r3
 8110c8a:	d106      	bne.n	8110c9a <tcp_slowtmr+0x46e>
 8110c8c:	4b4d      	ldr	r3, [pc, #308]	@ (8110dc4 <tcp_slowtmr+0x598>)
 8110c8e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8110c92:	494d      	ldr	r1, [pc, #308]	@ (8110dc8 <tcp_slowtmr+0x59c>)
 8110c94:	484d      	ldr	r0, [pc, #308]	@ (8110dcc <tcp_slowtmr+0x5a0>)
 8110c96:	f005 fe27 	bl	81168e8 <iprintf>
        prev->next = pcb->next;
 8110c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110c9c:	68da      	ldr	r2, [r3, #12]
 8110c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110ca0:	60da      	str	r2, [r3, #12]
 8110ca2:	e00f      	b.n	8110cc4 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8110ca4:	4b46      	ldr	r3, [pc, #280]	@ (8110dc0 <tcp_slowtmr+0x594>)
 8110ca6:	681b      	ldr	r3, [r3, #0]
 8110ca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110caa:	429a      	cmp	r2, r3
 8110cac:	d006      	beq.n	8110cbc <tcp_slowtmr+0x490>
 8110cae:	4b45      	ldr	r3, [pc, #276]	@ (8110dc4 <tcp_slowtmr+0x598>)
 8110cb0:	f240 5271 	movw	r2, #1393	@ 0x571
 8110cb4:	4946      	ldr	r1, [pc, #280]	@ (8110dd0 <tcp_slowtmr+0x5a4>)
 8110cb6:	4845      	ldr	r0, [pc, #276]	@ (8110dcc <tcp_slowtmr+0x5a0>)
 8110cb8:	f005 fe16 	bl	81168e8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8110cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110cbe:	68db      	ldr	r3, [r3, #12]
 8110cc0:	4a3f      	ldr	r2, [pc, #252]	@ (8110dc0 <tcp_slowtmr+0x594>)
 8110cc2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8110cc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8110cc8:	2b00      	cmp	r3, #0
 8110cca:	d013      	beq.n	8110cf4 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8110ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110cce:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8110cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110cd2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8110cd4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8110cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110cd8:	3304      	adds	r3, #4
 8110cda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110cdc:	8ad2      	ldrh	r2, [r2, #22]
 8110cde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8110ce0:	8b09      	ldrh	r1, [r1, #24]
 8110ce2:	9102      	str	r1, [sp, #8]
 8110ce4:	9201      	str	r2, [sp, #4]
 8110ce6:	9300      	str	r3, [sp, #0]
 8110ce8:	462b      	mov	r3, r5
 8110cea:	4622      	mov	r2, r4
 8110cec:	4601      	mov	r1, r0
 8110cee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8110cf0:	f004 f986 	bl	8115000 <tcp_rst>
      err_arg = pcb->callback_arg;
 8110cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110cf6:	691b      	ldr	r3, [r3, #16]
 8110cf8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8110cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110cfc:	7d1b      	ldrb	r3, [r3, #20]
 8110cfe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8110d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110d02:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8110d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110d06:	68db      	ldr	r3, [r3, #12]
 8110d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8110d0a:	6838      	ldr	r0, [r7, #0]
 8110d0c:	f7ff f9ee 	bl	81100ec <tcp_free>
      tcp_active_pcbs_changed = 0;
 8110d10:	4b30      	ldr	r3, [pc, #192]	@ (8110dd4 <tcp_slowtmr+0x5a8>)
 8110d12:	2200      	movs	r2, #0
 8110d14:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8110d16:	68fb      	ldr	r3, [r7, #12]
 8110d18:	2b00      	cmp	r3, #0
 8110d1a:	d004      	beq.n	8110d26 <tcp_slowtmr+0x4fa>
 8110d1c:	68fb      	ldr	r3, [r7, #12]
 8110d1e:	f06f 010c 	mvn.w	r1, #12
 8110d22:	68b8      	ldr	r0, [r7, #8]
 8110d24:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8110d26:	4b2b      	ldr	r3, [pc, #172]	@ (8110dd4 <tcp_slowtmr+0x5a8>)
 8110d28:	781b      	ldrb	r3, [r3, #0]
 8110d2a:	2b00      	cmp	r3, #0
 8110d2c:	d037      	beq.n	8110d9e <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8110d2e:	e590      	b.n	8110852 <tcp_slowtmr+0x26>
      prev = pcb;
 8110d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110d32:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8110d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110d36:	68db      	ldr	r3, [r3, #12]
 8110d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8110d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110d3c:	7f1b      	ldrb	r3, [r3, #28]
 8110d3e:	3301      	adds	r3, #1
 8110d40:	b2da      	uxtb	r2, r3
 8110d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110d44:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8110d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110d48:	7f1a      	ldrb	r2, [r3, #28]
 8110d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110d4c:	7f5b      	ldrb	r3, [r3, #29]
 8110d4e:	429a      	cmp	r2, r3
 8110d50:	d325      	bcc.n	8110d9e <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8110d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110d54:	2200      	movs	r2, #0
 8110d56:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8110d58:	4b1e      	ldr	r3, [pc, #120]	@ (8110dd4 <tcp_slowtmr+0x5a8>)
 8110d5a:	2200      	movs	r2, #0
 8110d5c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8110d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8110d64:	2b00      	cmp	r3, #0
 8110d66:	d00b      	beq.n	8110d80 <tcp_slowtmr+0x554>
 8110d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8110d6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8110d70:	6912      	ldr	r2, [r2, #16]
 8110d72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8110d74:	4610      	mov	r0, r2
 8110d76:	4798      	blx	r3
 8110d78:	4603      	mov	r3, r0
 8110d7a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8110d7e:	e002      	b.n	8110d86 <tcp_slowtmr+0x55a>
 8110d80:	2300      	movs	r3, #0
 8110d82:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8110d86:	4b13      	ldr	r3, [pc, #76]	@ (8110dd4 <tcp_slowtmr+0x5a8>)
 8110d88:	781b      	ldrb	r3, [r3, #0]
 8110d8a:	2b00      	cmp	r3, #0
 8110d8c:	f47f ad60 	bne.w	8110850 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8110d90:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8110d94:	2b00      	cmp	r3, #0
 8110d96:	d102      	bne.n	8110d9e <tcp_slowtmr+0x572>
          tcp_output(prev);
 8110d98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8110d9a:	f003 fb7d 	bl	8114498 <tcp_output>
  while (pcb != NULL) {
 8110d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110da0:	2b00      	cmp	r3, #0
 8110da2:	f47f ad5c 	bne.w	811085e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8110da6:	2300      	movs	r3, #0
 8110da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8110daa:	4b0b      	ldr	r3, [pc, #44]	@ (8110dd8 <tcp_slowtmr+0x5ac>)
 8110dac:	681b      	ldr	r3, [r3, #0]
 8110dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8110db0:	e067      	b.n	8110e82 <tcp_slowtmr+0x656>
 8110db2:	bf00      	nop
 8110db4:	1000b84c 	.word	0x1000b84c
 8110db8:	10624dd3 	.word	0x10624dd3
 8110dbc:	000124f8 	.word	0x000124f8
 8110dc0:	1000b858 	.word	0x1000b858
 8110dc4:	08118b24 	.word	0x08118b24
 8110dc8:	08118f9c 	.word	0x08118f9c
 8110dcc:	08118ba8 	.word	0x08118ba8
 8110dd0:	08118fc8 	.word	0x08118fc8
 8110dd4:	1000b860 	.word	0x1000b860
 8110dd8:	1000b85c 	.word	0x1000b85c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8110ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110dde:	7d1b      	ldrb	r3, [r3, #20]
 8110de0:	2b0a      	cmp	r3, #10
 8110de2:	d006      	beq.n	8110df2 <tcp_slowtmr+0x5c6>
 8110de4:	4b2b      	ldr	r3, [pc, #172]	@ (8110e94 <tcp_slowtmr+0x668>)
 8110de6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8110dea:	492b      	ldr	r1, [pc, #172]	@ (8110e98 <tcp_slowtmr+0x66c>)
 8110dec:	482b      	ldr	r0, [pc, #172]	@ (8110e9c <tcp_slowtmr+0x670>)
 8110dee:	f005 fd7b 	bl	81168e8 <iprintf>
    pcb_remove = 0;
 8110df2:	2300      	movs	r3, #0
 8110df4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8110df8:	4b29      	ldr	r3, [pc, #164]	@ (8110ea0 <tcp_slowtmr+0x674>)
 8110dfa:	681a      	ldr	r2, [r3, #0]
 8110dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110dfe:	6a1b      	ldr	r3, [r3, #32]
 8110e00:	1ad3      	subs	r3, r2, r3
 8110e02:	2bf0      	cmp	r3, #240	@ 0xf0
 8110e04:	d904      	bls.n	8110e10 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8110e06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8110e0a:	3301      	adds	r3, #1
 8110e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8110e10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8110e14:	2b00      	cmp	r3, #0
 8110e16:	d02f      	beq.n	8110e78 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8110e18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8110e1a:	f000 fb2d 	bl	8111478 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8110e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110e20:	2b00      	cmp	r3, #0
 8110e22:	d010      	beq.n	8110e46 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8110e24:	4b1f      	ldr	r3, [pc, #124]	@ (8110ea4 <tcp_slowtmr+0x678>)
 8110e26:	681b      	ldr	r3, [r3, #0]
 8110e28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110e2a:	429a      	cmp	r2, r3
 8110e2c:	d106      	bne.n	8110e3c <tcp_slowtmr+0x610>
 8110e2e:	4b19      	ldr	r3, [pc, #100]	@ (8110e94 <tcp_slowtmr+0x668>)
 8110e30:	f240 52af 	movw	r2, #1455	@ 0x5af
 8110e34:	491c      	ldr	r1, [pc, #112]	@ (8110ea8 <tcp_slowtmr+0x67c>)
 8110e36:	4819      	ldr	r0, [pc, #100]	@ (8110e9c <tcp_slowtmr+0x670>)
 8110e38:	f005 fd56 	bl	81168e8 <iprintf>
        prev->next = pcb->next;
 8110e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e3e:	68da      	ldr	r2, [r3, #12]
 8110e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110e42:	60da      	str	r2, [r3, #12]
 8110e44:	e00f      	b.n	8110e66 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8110e46:	4b17      	ldr	r3, [pc, #92]	@ (8110ea4 <tcp_slowtmr+0x678>)
 8110e48:	681b      	ldr	r3, [r3, #0]
 8110e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110e4c:	429a      	cmp	r2, r3
 8110e4e:	d006      	beq.n	8110e5e <tcp_slowtmr+0x632>
 8110e50:	4b10      	ldr	r3, [pc, #64]	@ (8110e94 <tcp_slowtmr+0x668>)
 8110e52:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8110e56:	4915      	ldr	r1, [pc, #84]	@ (8110eac <tcp_slowtmr+0x680>)
 8110e58:	4810      	ldr	r0, [pc, #64]	@ (8110e9c <tcp_slowtmr+0x670>)
 8110e5a:	f005 fd45 	bl	81168e8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8110e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e60:	68db      	ldr	r3, [r3, #12]
 8110e62:	4a10      	ldr	r2, [pc, #64]	@ (8110ea4 <tcp_slowtmr+0x678>)
 8110e64:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8110e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e68:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8110e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e6c:	68db      	ldr	r3, [r3, #12]
 8110e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8110e70:	69f8      	ldr	r0, [r7, #28]
 8110e72:	f7ff f93b 	bl	81100ec <tcp_free>
 8110e76:	e004      	b.n	8110e82 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8110e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8110e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e7e:	68db      	ldr	r3, [r3, #12]
 8110e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8110e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110e84:	2b00      	cmp	r3, #0
 8110e86:	d1a9      	bne.n	8110ddc <tcp_slowtmr+0x5b0>
    }
  }
}
 8110e88:	bf00      	nop
 8110e8a:	bf00      	nop
 8110e8c:	3730      	adds	r7, #48	@ 0x30
 8110e8e:	46bd      	mov	sp, r7
 8110e90:	bdb0      	pop	{r4, r5, r7, pc}
 8110e92:	bf00      	nop
 8110e94:	08118b24 	.word	0x08118b24
 8110e98:	08118ff4 	.word	0x08118ff4
 8110e9c:	08118ba8 	.word	0x08118ba8
 8110ea0:	1000b84c 	.word	0x1000b84c
 8110ea4:	1000b85c 	.word	0x1000b85c
 8110ea8:	08119024 	.word	0x08119024
 8110eac:	0811904c 	.word	0x0811904c

08110eb0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8110eb0:	b580      	push	{r7, lr}
 8110eb2:	b082      	sub	sp, #8
 8110eb4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8110eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8110f6c <tcp_fasttmr+0xbc>)
 8110eb8:	781b      	ldrb	r3, [r3, #0]
 8110eba:	3301      	adds	r3, #1
 8110ebc:	b2da      	uxtb	r2, r3
 8110ebe:	4b2b      	ldr	r3, [pc, #172]	@ (8110f6c <tcp_fasttmr+0xbc>)
 8110ec0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8110ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8110f70 <tcp_fasttmr+0xc0>)
 8110ec4:	681b      	ldr	r3, [r3, #0]
 8110ec6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8110ec8:	e048      	b.n	8110f5c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8110eca:	687b      	ldr	r3, [r7, #4]
 8110ecc:	7f9a      	ldrb	r2, [r3, #30]
 8110ece:	4b27      	ldr	r3, [pc, #156]	@ (8110f6c <tcp_fasttmr+0xbc>)
 8110ed0:	781b      	ldrb	r3, [r3, #0]
 8110ed2:	429a      	cmp	r2, r3
 8110ed4:	d03f      	beq.n	8110f56 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8110ed6:	4b25      	ldr	r3, [pc, #148]	@ (8110f6c <tcp_fasttmr+0xbc>)
 8110ed8:	781a      	ldrb	r2, [r3, #0]
 8110eda:	687b      	ldr	r3, [r7, #4]
 8110edc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8110ede:	687b      	ldr	r3, [r7, #4]
 8110ee0:	8b5b      	ldrh	r3, [r3, #26]
 8110ee2:	f003 0301 	and.w	r3, r3, #1
 8110ee6:	2b00      	cmp	r3, #0
 8110ee8:	d010      	beq.n	8110f0c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8110eea:	687b      	ldr	r3, [r7, #4]
 8110eec:	8b5b      	ldrh	r3, [r3, #26]
 8110eee:	f043 0302 	orr.w	r3, r3, #2
 8110ef2:	b29a      	uxth	r2, r3
 8110ef4:	687b      	ldr	r3, [r7, #4]
 8110ef6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8110ef8:	6878      	ldr	r0, [r7, #4]
 8110efa:	f003 facd 	bl	8114498 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8110efe:	687b      	ldr	r3, [r7, #4]
 8110f00:	8b5b      	ldrh	r3, [r3, #26]
 8110f02:	f023 0303 	bic.w	r3, r3, #3
 8110f06:	b29a      	uxth	r2, r3
 8110f08:	687b      	ldr	r3, [r7, #4]
 8110f0a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8110f0c:	687b      	ldr	r3, [r7, #4]
 8110f0e:	8b5b      	ldrh	r3, [r3, #26]
 8110f10:	f003 0308 	and.w	r3, r3, #8
 8110f14:	2b00      	cmp	r3, #0
 8110f16:	d009      	beq.n	8110f2c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8110f18:	687b      	ldr	r3, [r7, #4]
 8110f1a:	8b5b      	ldrh	r3, [r3, #26]
 8110f1c:	f023 0308 	bic.w	r3, r3, #8
 8110f20:	b29a      	uxth	r2, r3
 8110f22:	687b      	ldr	r3, [r7, #4]
 8110f24:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8110f26:	6878      	ldr	r0, [r7, #4]
 8110f28:	f7ff fa74 	bl	8110414 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8110f2c:	687b      	ldr	r3, [r7, #4]
 8110f2e:	68db      	ldr	r3, [r3, #12]
 8110f30:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8110f32:	687b      	ldr	r3, [r7, #4]
 8110f34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8110f36:	2b00      	cmp	r3, #0
 8110f38:	d00a      	beq.n	8110f50 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8110f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8110f74 <tcp_fasttmr+0xc4>)
 8110f3c:	2200      	movs	r2, #0
 8110f3e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8110f40:	6878      	ldr	r0, [r7, #4]
 8110f42:	f000 f819 	bl	8110f78 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8110f46:	4b0b      	ldr	r3, [pc, #44]	@ (8110f74 <tcp_fasttmr+0xc4>)
 8110f48:	781b      	ldrb	r3, [r3, #0]
 8110f4a:	2b00      	cmp	r3, #0
 8110f4c:	d000      	beq.n	8110f50 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8110f4e:	e7b8      	b.n	8110ec2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8110f50:	683b      	ldr	r3, [r7, #0]
 8110f52:	607b      	str	r3, [r7, #4]
 8110f54:	e002      	b.n	8110f5c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8110f56:	687b      	ldr	r3, [r7, #4]
 8110f58:	68db      	ldr	r3, [r3, #12]
 8110f5a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8110f5c:	687b      	ldr	r3, [r7, #4]
 8110f5e:	2b00      	cmp	r3, #0
 8110f60:	d1b3      	bne.n	8110eca <tcp_fasttmr+0x1a>
    }
  }
}
 8110f62:	bf00      	nop
 8110f64:	bf00      	nop
 8110f66:	3708      	adds	r7, #8
 8110f68:	46bd      	mov	sp, r7
 8110f6a:	bd80      	pop	{r7, pc}
 8110f6c:	1000b862 	.word	0x1000b862
 8110f70:	1000b858 	.word	0x1000b858
 8110f74:	1000b860 	.word	0x1000b860

08110f78 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8110f78:	b590      	push	{r4, r7, lr}
 8110f7a:	b085      	sub	sp, #20
 8110f7c:	af00      	add	r7, sp, #0
 8110f7e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8110f80:	687b      	ldr	r3, [r7, #4]
 8110f82:	2b00      	cmp	r3, #0
 8110f84:	d109      	bne.n	8110f9a <tcp_process_refused_data+0x22>
 8110f86:	4b38      	ldr	r3, [pc, #224]	@ (8111068 <tcp_process_refused_data+0xf0>)
 8110f88:	f240 6209 	movw	r2, #1545	@ 0x609
 8110f8c:	4937      	ldr	r1, [pc, #220]	@ (811106c <tcp_process_refused_data+0xf4>)
 8110f8e:	4838      	ldr	r0, [pc, #224]	@ (8111070 <tcp_process_refused_data+0xf8>)
 8110f90:	f005 fcaa 	bl	81168e8 <iprintf>
 8110f94:	f06f 030f 	mvn.w	r3, #15
 8110f98:	e061      	b.n	811105e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8110f9a:	687b      	ldr	r3, [r7, #4]
 8110f9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8110f9e:	7b5b      	ldrb	r3, [r3, #13]
 8110fa0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8110fa2:	687b      	ldr	r3, [r7, #4]
 8110fa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8110fa6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8110fa8:	687b      	ldr	r3, [r7, #4]
 8110faa:	2200      	movs	r2, #0
 8110fac:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8110fae:	687b      	ldr	r3, [r7, #4]
 8110fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8110fb4:	2b00      	cmp	r3, #0
 8110fb6:	d00b      	beq.n	8110fd0 <tcp_process_refused_data+0x58>
 8110fb8:	687b      	ldr	r3, [r7, #4]
 8110fba:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8110fbe:	687b      	ldr	r3, [r7, #4]
 8110fc0:	6918      	ldr	r0, [r3, #16]
 8110fc2:	2300      	movs	r3, #0
 8110fc4:	68ba      	ldr	r2, [r7, #8]
 8110fc6:	6879      	ldr	r1, [r7, #4]
 8110fc8:	47a0      	blx	r4
 8110fca:	4603      	mov	r3, r0
 8110fcc:	73fb      	strb	r3, [r7, #15]
 8110fce:	e007      	b.n	8110fe0 <tcp_process_refused_data+0x68>
 8110fd0:	2300      	movs	r3, #0
 8110fd2:	68ba      	ldr	r2, [r7, #8]
 8110fd4:	6879      	ldr	r1, [r7, #4]
 8110fd6:	2000      	movs	r0, #0
 8110fd8:	f000 f8a6 	bl	8111128 <tcp_recv_null>
 8110fdc:	4603      	mov	r3, r0
 8110fde:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8110fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8110fe4:	2b00      	cmp	r3, #0
 8110fe6:	d12b      	bne.n	8111040 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8110fe8:	7bbb      	ldrb	r3, [r7, #14]
 8110fea:	f003 0320 	and.w	r3, r3, #32
 8110fee:	2b00      	cmp	r3, #0
 8110ff0:	d034      	beq.n	811105c <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8110ff2:	687b      	ldr	r3, [r7, #4]
 8110ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8110ff6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8110ffa:	4293      	cmp	r3, r2
 8110ffc:	d005      	beq.n	811100a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8110ffe:	687b      	ldr	r3, [r7, #4]
 8111000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8111002:	3301      	adds	r3, #1
 8111004:	b29a      	uxth	r2, r3
 8111006:	687b      	ldr	r3, [r7, #4]
 8111008:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 811100a:	687b      	ldr	r3, [r7, #4]
 811100c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8111010:	2b00      	cmp	r3, #0
 8111012:	d00b      	beq.n	811102c <tcp_process_refused_data+0xb4>
 8111014:	687b      	ldr	r3, [r7, #4]
 8111016:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811101a:	687b      	ldr	r3, [r7, #4]
 811101c:	6918      	ldr	r0, [r3, #16]
 811101e:	2300      	movs	r3, #0
 8111020:	2200      	movs	r2, #0
 8111022:	6879      	ldr	r1, [r7, #4]
 8111024:	47a0      	blx	r4
 8111026:	4603      	mov	r3, r0
 8111028:	73fb      	strb	r3, [r7, #15]
 811102a:	e001      	b.n	8111030 <tcp_process_refused_data+0xb8>
 811102c:	2300      	movs	r3, #0
 811102e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8111030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8111034:	f113 0f0d 	cmn.w	r3, #13
 8111038:	d110      	bne.n	811105c <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 811103a:	f06f 030c 	mvn.w	r3, #12
 811103e:	e00e      	b.n	811105e <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8111040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8111044:	f113 0f0d 	cmn.w	r3, #13
 8111048:	d102      	bne.n	8111050 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 811104a:	f06f 030c 	mvn.w	r3, #12
 811104e:	e006      	b.n	811105e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8111050:	687b      	ldr	r3, [r7, #4]
 8111052:	68ba      	ldr	r2, [r7, #8]
 8111054:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8111056:	f06f 0304 	mvn.w	r3, #4
 811105a:	e000      	b.n	811105e <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 811105c:	2300      	movs	r3, #0
}
 811105e:	4618      	mov	r0, r3
 8111060:	3714      	adds	r7, #20
 8111062:	46bd      	mov	sp, r7
 8111064:	bd90      	pop	{r4, r7, pc}
 8111066:	bf00      	nop
 8111068:	08118b24 	.word	0x08118b24
 811106c:	08119074 	.word	0x08119074
 8111070:	08118ba8 	.word	0x08118ba8

08111074 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8111074:	b580      	push	{r7, lr}
 8111076:	b084      	sub	sp, #16
 8111078:	af00      	add	r7, sp, #0
 811107a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 811107c:	e007      	b.n	811108e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 811107e:	687b      	ldr	r3, [r7, #4]
 8111080:	681b      	ldr	r3, [r3, #0]
 8111082:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8111084:	6878      	ldr	r0, [r7, #4]
 8111086:	f000 f80a 	bl	811109e <tcp_seg_free>
    seg = next;
 811108a:	68fb      	ldr	r3, [r7, #12]
 811108c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 811108e:	687b      	ldr	r3, [r7, #4]
 8111090:	2b00      	cmp	r3, #0
 8111092:	d1f4      	bne.n	811107e <tcp_segs_free+0xa>
  }
}
 8111094:	bf00      	nop
 8111096:	bf00      	nop
 8111098:	3710      	adds	r7, #16
 811109a:	46bd      	mov	sp, r7
 811109c:	bd80      	pop	{r7, pc}

0811109e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 811109e:	b580      	push	{r7, lr}
 81110a0:	b082      	sub	sp, #8
 81110a2:	af00      	add	r7, sp, #0
 81110a4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 81110a6:	687b      	ldr	r3, [r7, #4]
 81110a8:	2b00      	cmp	r3, #0
 81110aa:	d00c      	beq.n	81110c6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 81110ac:	687b      	ldr	r3, [r7, #4]
 81110ae:	685b      	ldr	r3, [r3, #4]
 81110b0:	2b00      	cmp	r3, #0
 81110b2:	d004      	beq.n	81110be <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 81110b4:	687b      	ldr	r3, [r7, #4]
 81110b6:	685b      	ldr	r3, [r3, #4]
 81110b8:	4618      	mov	r0, r3
 81110ba:	f7fe fc69 	bl	810f990 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 81110be:	6879      	ldr	r1, [r7, #4]
 81110c0:	2003      	movs	r0, #3
 81110c2:	f7fd fdbd 	bl	810ec40 <memp_free>
  }
}
 81110c6:	bf00      	nop
 81110c8:	3708      	adds	r7, #8
 81110ca:	46bd      	mov	sp, r7
 81110cc:	bd80      	pop	{r7, pc}
	...

081110d0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 81110d0:	b580      	push	{r7, lr}
 81110d2:	b084      	sub	sp, #16
 81110d4:	af00      	add	r7, sp, #0
 81110d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 81110d8:	687b      	ldr	r3, [r7, #4]
 81110da:	2b00      	cmp	r3, #0
 81110dc:	d106      	bne.n	81110ec <tcp_seg_copy+0x1c>
 81110de:	4b0f      	ldr	r3, [pc, #60]	@ (811111c <tcp_seg_copy+0x4c>)
 81110e0:	f240 6282 	movw	r2, #1666	@ 0x682
 81110e4:	490e      	ldr	r1, [pc, #56]	@ (8111120 <tcp_seg_copy+0x50>)
 81110e6:	480f      	ldr	r0, [pc, #60]	@ (8111124 <tcp_seg_copy+0x54>)
 81110e8:	f005 fbfe 	bl	81168e8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 81110ec:	2003      	movs	r0, #3
 81110ee:	f7fd fd31 	bl	810eb54 <memp_malloc>
 81110f2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 81110f4:	68fb      	ldr	r3, [r7, #12]
 81110f6:	2b00      	cmp	r3, #0
 81110f8:	d101      	bne.n	81110fe <tcp_seg_copy+0x2e>
    return NULL;
 81110fa:	2300      	movs	r3, #0
 81110fc:	e00a      	b.n	8111114 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 81110fe:	2210      	movs	r2, #16
 8111100:	6879      	ldr	r1, [r7, #4]
 8111102:	68f8      	ldr	r0, [r7, #12]
 8111104:	f005 fd8f 	bl	8116c26 <memcpy>
  pbuf_ref(cseg->p);
 8111108:	68fb      	ldr	r3, [r7, #12]
 811110a:	685b      	ldr	r3, [r3, #4]
 811110c:	4618      	mov	r0, r3
 811110e:	f7fe fce5 	bl	810fadc <pbuf_ref>
  return cseg;
 8111112:	68fb      	ldr	r3, [r7, #12]
}
 8111114:	4618      	mov	r0, r3
 8111116:	3710      	adds	r7, #16
 8111118:	46bd      	mov	sp, r7
 811111a:	bd80      	pop	{r7, pc}
 811111c:	08118b24 	.word	0x08118b24
 8111120:	081190b8 	.word	0x081190b8
 8111124:	08118ba8 	.word	0x08118ba8

08111128 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8111128:	b580      	push	{r7, lr}
 811112a:	b084      	sub	sp, #16
 811112c:	af00      	add	r7, sp, #0
 811112e:	60f8      	str	r0, [r7, #12]
 8111130:	60b9      	str	r1, [r7, #8]
 8111132:	607a      	str	r2, [r7, #4]
 8111134:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8111136:	68bb      	ldr	r3, [r7, #8]
 8111138:	2b00      	cmp	r3, #0
 811113a:	d109      	bne.n	8111150 <tcp_recv_null+0x28>
 811113c:	4b12      	ldr	r3, [pc, #72]	@ (8111188 <tcp_recv_null+0x60>)
 811113e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8111142:	4912      	ldr	r1, [pc, #72]	@ (811118c <tcp_recv_null+0x64>)
 8111144:	4812      	ldr	r0, [pc, #72]	@ (8111190 <tcp_recv_null+0x68>)
 8111146:	f005 fbcf 	bl	81168e8 <iprintf>
 811114a:	f06f 030f 	mvn.w	r3, #15
 811114e:	e016      	b.n	811117e <tcp_recv_null+0x56>

  if (p != NULL) {
 8111150:	687b      	ldr	r3, [r7, #4]
 8111152:	2b00      	cmp	r3, #0
 8111154:	d009      	beq.n	811116a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8111156:	687b      	ldr	r3, [r7, #4]
 8111158:	891b      	ldrh	r3, [r3, #8]
 811115a:	4619      	mov	r1, r3
 811115c:	68b8      	ldr	r0, [r7, #8]
 811115e:	f7ff fb13 	bl	8110788 <tcp_recved>
    pbuf_free(p);
 8111162:	6878      	ldr	r0, [r7, #4]
 8111164:	f7fe fc14 	bl	810f990 <pbuf_free>
 8111168:	e008      	b.n	811117c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 811116a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 811116e:	2b00      	cmp	r3, #0
 8111170:	d104      	bne.n	811117c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8111172:	68b8      	ldr	r0, [r7, #8]
 8111174:	f7ff f9b8 	bl	81104e8 <tcp_close>
 8111178:	4603      	mov	r3, r0
 811117a:	e000      	b.n	811117e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 811117c:	2300      	movs	r3, #0
}
 811117e:	4618      	mov	r0, r3
 8111180:	3710      	adds	r7, #16
 8111182:	46bd      	mov	sp, r7
 8111184:	bd80      	pop	{r7, pc}
 8111186:	bf00      	nop
 8111188:	08118b24 	.word	0x08118b24
 811118c:	081190d4 	.word	0x081190d4
 8111190:	08118ba8 	.word	0x08118ba8

08111194 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8111194:	b580      	push	{r7, lr}
 8111196:	b086      	sub	sp, #24
 8111198:	af00      	add	r7, sp, #0
 811119a:	4603      	mov	r3, r0
 811119c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 811119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 81111a2:	2b00      	cmp	r3, #0
 81111a4:	db01      	blt.n	81111aa <tcp_kill_prio+0x16>
 81111a6:	79fb      	ldrb	r3, [r7, #7]
 81111a8:	e000      	b.n	81111ac <tcp_kill_prio+0x18>
 81111aa:	237f      	movs	r3, #127	@ 0x7f
 81111ac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 81111ae:	7afb      	ldrb	r3, [r7, #11]
 81111b0:	2b00      	cmp	r3, #0
 81111b2:	d034      	beq.n	811121e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 81111b4:	7afb      	ldrb	r3, [r7, #11]
 81111b6:	3b01      	subs	r3, #1
 81111b8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 81111ba:	2300      	movs	r3, #0
 81111bc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 81111be:	2300      	movs	r3, #0
 81111c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 81111c2:	4b19      	ldr	r3, [pc, #100]	@ (8111228 <tcp_kill_prio+0x94>)
 81111c4:	681b      	ldr	r3, [r3, #0]
 81111c6:	617b      	str	r3, [r7, #20]
 81111c8:	e01f      	b.n	811120a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 81111ca:	697b      	ldr	r3, [r7, #20]
 81111cc:	7d5b      	ldrb	r3, [r3, #21]
 81111ce:	7afa      	ldrb	r2, [r7, #11]
 81111d0:	429a      	cmp	r2, r3
 81111d2:	d80c      	bhi.n	81111ee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 81111d4:	697b      	ldr	r3, [r7, #20]
 81111d6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 81111d8:	7afa      	ldrb	r2, [r7, #11]
 81111da:	429a      	cmp	r2, r3
 81111dc:	d112      	bne.n	8111204 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 81111de:	4b13      	ldr	r3, [pc, #76]	@ (811122c <tcp_kill_prio+0x98>)
 81111e0:	681a      	ldr	r2, [r3, #0]
 81111e2:	697b      	ldr	r3, [r7, #20]
 81111e4:	6a1b      	ldr	r3, [r3, #32]
 81111e6:	1ad3      	subs	r3, r2, r3
 81111e8:	68fa      	ldr	r2, [r7, #12]
 81111ea:	429a      	cmp	r2, r3
 81111ec:	d80a      	bhi.n	8111204 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 81111ee:	4b0f      	ldr	r3, [pc, #60]	@ (811122c <tcp_kill_prio+0x98>)
 81111f0:	681a      	ldr	r2, [r3, #0]
 81111f2:	697b      	ldr	r3, [r7, #20]
 81111f4:	6a1b      	ldr	r3, [r3, #32]
 81111f6:	1ad3      	subs	r3, r2, r3
 81111f8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 81111fa:	697b      	ldr	r3, [r7, #20]
 81111fc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 81111fe:	697b      	ldr	r3, [r7, #20]
 8111200:	7d5b      	ldrb	r3, [r3, #21]
 8111202:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8111204:	697b      	ldr	r3, [r7, #20]
 8111206:	68db      	ldr	r3, [r3, #12]
 8111208:	617b      	str	r3, [r7, #20]
 811120a:	697b      	ldr	r3, [r7, #20]
 811120c:	2b00      	cmp	r3, #0
 811120e:	d1dc      	bne.n	81111ca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8111210:	693b      	ldr	r3, [r7, #16]
 8111212:	2b00      	cmp	r3, #0
 8111214:	d004      	beq.n	8111220 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8111216:	6938      	ldr	r0, [r7, #16]
 8111218:	f7ff fa50 	bl	81106bc <tcp_abort>
 811121c:	e000      	b.n	8111220 <tcp_kill_prio+0x8c>
    return;
 811121e:	bf00      	nop
  }
}
 8111220:	3718      	adds	r7, #24
 8111222:	46bd      	mov	sp, r7
 8111224:	bd80      	pop	{r7, pc}
 8111226:	bf00      	nop
 8111228:	1000b858 	.word	0x1000b858
 811122c:	1000b84c 	.word	0x1000b84c

08111230 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8111230:	b580      	push	{r7, lr}
 8111232:	b086      	sub	sp, #24
 8111234:	af00      	add	r7, sp, #0
 8111236:	4603      	mov	r3, r0
 8111238:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 811123a:	79fb      	ldrb	r3, [r7, #7]
 811123c:	2b08      	cmp	r3, #8
 811123e:	d009      	beq.n	8111254 <tcp_kill_state+0x24>
 8111240:	79fb      	ldrb	r3, [r7, #7]
 8111242:	2b09      	cmp	r3, #9
 8111244:	d006      	beq.n	8111254 <tcp_kill_state+0x24>
 8111246:	4b1a      	ldr	r3, [pc, #104]	@ (81112b0 <tcp_kill_state+0x80>)
 8111248:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 811124c:	4919      	ldr	r1, [pc, #100]	@ (81112b4 <tcp_kill_state+0x84>)
 811124e:	481a      	ldr	r0, [pc, #104]	@ (81112b8 <tcp_kill_state+0x88>)
 8111250:	f005 fb4a 	bl	81168e8 <iprintf>

  inactivity = 0;
 8111254:	2300      	movs	r3, #0
 8111256:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8111258:	2300      	movs	r3, #0
 811125a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811125c:	4b17      	ldr	r3, [pc, #92]	@ (81112bc <tcp_kill_state+0x8c>)
 811125e:	681b      	ldr	r3, [r3, #0]
 8111260:	617b      	str	r3, [r7, #20]
 8111262:	e017      	b.n	8111294 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8111264:	697b      	ldr	r3, [r7, #20]
 8111266:	7d1b      	ldrb	r3, [r3, #20]
 8111268:	79fa      	ldrb	r2, [r7, #7]
 811126a:	429a      	cmp	r2, r3
 811126c:	d10f      	bne.n	811128e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 811126e:	4b14      	ldr	r3, [pc, #80]	@ (81112c0 <tcp_kill_state+0x90>)
 8111270:	681a      	ldr	r2, [r3, #0]
 8111272:	697b      	ldr	r3, [r7, #20]
 8111274:	6a1b      	ldr	r3, [r3, #32]
 8111276:	1ad3      	subs	r3, r2, r3
 8111278:	68fa      	ldr	r2, [r7, #12]
 811127a:	429a      	cmp	r2, r3
 811127c:	d807      	bhi.n	811128e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 811127e:	4b10      	ldr	r3, [pc, #64]	@ (81112c0 <tcp_kill_state+0x90>)
 8111280:	681a      	ldr	r2, [r3, #0]
 8111282:	697b      	ldr	r3, [r7, #20]
 8111284:	6a1b      	ldr	r3, [r3, #32]
 8111286:	1ad3      	subs	r3, r2, r3
 8111288:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 811128a:	697b      	ldr	r3, [r7, #20]
 811128c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811128e:	697b      	ldr	r3, [r7, #20]
 8111290:	68db      	ldr	r3, [r3, #12]
 8111292:	617b      	str	r3, [r7, #20]
 8111294:	697b      	ldr	r3, [r7, #20]
 8111296:	2b00      	cmp	r3, #0
 8111298:	d1e4      	bne.n	8111264 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 811129a:	693b      	ldr	r3, [r7, #16]
 811129c:	2b00      	cmp	r3, #0
 811129e:	d003      	beq.n	81112a8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 81112a0:	2100      	movs	r1, #0
 81112a2:	6938      	ldr	r0, [r7, #16]
 81112a4:	f7ff f94c 	bl	8110540 <tcp_abandon>
  }
}
 81112a8:	bf00      	nop
 81112aa:	3718      	adds	r7, #24
 81112ac:	46bd      	mov	sp, r7
 81112ae:	bd80      	pop	{r7, pc}
 81112b0:	08118b24 	.word	0x08118b24
 81112b4:	081190f0 	.word	0x081190f0
 81112b8:	08118ba8 	.word	0x08118ba8
 81112bc:	1000b858 	.word	0x1000b858
 81112c0:	1000b84c 	.word	0x1000b84c

081112c4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 81112c4:	b580      	push	{r7, lr}
 81112c6:	b084      	sub	sp, #16
 81112c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 81112ca:	2300      	movs	r3, #0
 81112cc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 81112ce:	2300      	movs	r3, #0
 81112d0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 81112d2:	4b12      	ldr	r3, [pc, #72]	@ (811131c <tcp_kill_timewait+0x58>)
 81112d4:	681b      	ldr	r3, [r3, #0]
 81112d6:	60fb      	str	r3, [r7, #12]
 81112d8:	e012      	b.n	8111300 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 81112da:	4b11      	ldr	r3, [pc, #68]	@ (8111320 <tcp_kill_timewait+0x5c>)
 81112dc:	681a      	ldr	r2, [r3, #0]
 81112de:	68fb      	ldr	r3, [r7, #12]
 81112e0:	6a1b      	ldr	r3, [r3, #32]
 81112e2:	1ad3      	subs	r3, r2, r3
 81112e4:	687a      	ldr	r2, [r7, #4]
 81112e6:	429a      	cmp	r2, r3
 81112e8:	d807      	bhi.n	81112fa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 81112ea:	4b0d      	ldr	r3, [pc, #52]	@ (8111320 <tcp_kill_timewait+0x5c>)
 81112ec:	681a      	ldr	r2, [r3, #0]
 81112ee:	68fb      	ldr	r3, [r7, #12]
 81112f0:	6a1b      	ldr	r3, [r3, #32]
 81112f2:	1ad3      	subs	r3, r2, r3
 81112f4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 81112f6:	68fb      	ldr	r3, [r7, #12]
 81112f8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 81112fa:	68fb      	ldr	r3, [r7, #12]
 81112fc:	68db      	ldr	r3, [r3, #12]
 81112fe:	60fb      	str	r3, [r7, #12]
 8111300:	68fb      	ldr	r3, [r7, #12]
 8111302:	2b00      	cmp	r3, #0
 8111304:	d1e9      	bne.n	81112da <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8111306:	68bb      	ldr	r3, [r7, #8]
 8111308:	2b00      	cmp	r3, #0
 811130a:	d002      	beq.n	8111312 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 811130c:	68b8      	ldr	r0, [r7, #8]
 811130e:	f7ff f9d5 	bl	81106bc <tcp_abort>
  }
}
 8111312:	bf00      	nop
 8111314:	3710      	adds	r7, #16
 8111316:	46bd      	mov	sp, r7
 8111318:	bd80      	pop	{r7, pc}
 811131a:	bf00      	nop
 811131c:	1000b85c 	.word	0x1000b85c
 8111320:	1000b84c 	.word	0x1000b84c

08111324 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8111324:	b580      	push	{r7, lr}
 8111326:	b082      	sub	sp, #8
 8111328:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 811132a:	4b10      	ldr	r3, [pc, #64]	@ (811136c <tcp_handle_closepend+0x48>)
 811132c:	681b      	ldr	r3, [r3, #0]
 811132e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8111330:	e014      	b.n	811135c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8111332:	687b      	ldr	r3, [r7, #4]
 8111334:	68db      	ldr	r3, [r3, #12]
 8111336:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8111338:	687b      	ldr	r3, [r7, #4]
 811133a:	8b5b      	ldrh	r3, [r3, #26]
 811133c:	f003 0308 	and.w	r3, r3, #8
 8111340:	2b00      	cmp	r3, #0
 8111342:	d009      	beq.n	8111358 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8111344:	687b      	ldr	r3, [r7, #4]
 8111346:	8b5b      	ldrh	r3, [r3, #26]
 8111348:	f023 0308 	bic.w	r3, r3, #8
 811134c:	b29a      	uxth	r2, r3
 811134e:	687b      	ldr	r3, [r7, #4]
 8111350:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8111352:	6878      	ldr	r0, [r7, #4]
 8111354:	f7ff f85e 	bl	8110414 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8111358:	683b      	ldr	r3, [r7, #0]
 811135a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 811135c:	687b      	ldr	r3, [r7, #4]
 811135e:	2b00      	cmp	r3, #0
 8111360:	d1e7      	bne.n	8111332 <tcp_handle_closepend+0xe>
  }
}
 8111362:	bf00      	nop
 8111364:	bf00      	nop
 8111366:	3708      	adds	r7, #8
 8111368:	46bd      	mov	sp, r7
 811136a:	bd80      	pop	{r7, pc}
 811136c:	1000b858 	.word	0x1000b858

08111370 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8111370:	b580      	push	{r7, lr}
 8111372:	b084      	sub	sp, #16
 8111374:	af00      	add	r7, sp, #0
 8111376:	4603      	mov	r3, r0
 8111378:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811137a:	2001      	movs	r0, #1
 811137c:	f7fd fbea 	bl	810eb54 <memp_malloc>
 8111380:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8111382:	68fb      	ldr	r3, [r7, #12]
 8111384:	2b00      	cmp	r3, #0
 8111386:	d126      	bne.n	81113d6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8111388:	f7ff ffcc 	bl	8111324 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 811138c:	f7ff ff9a 	bl	81112c4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8111390:	2001      	movs	r0, #1
 8111392:	f7fd fbdf 	bl	810eb54 <memp_malloc>
 8111396:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8111398:	68fb      	ldr	r3, [r7, #12]
 811139a:	2b00      	cmp	r3, #0
 811139c:	d11b      	bne.n	81113d6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 811139e:	2009      	movs	r0, #9
 81113a0:	f7ff ff46 	bl	8111230 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 81113a4:	2001      	movs	r0, #1
 81113a6:	f7fd fbd5 	bl	810eb54 <memp_malloc>
 81113aa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 81113ac:	68fb      	ldr	r3, [r7, #12]
 81113ae:	2b00      	cmp	r3, #0
 81113b0:	d111      	bne.n	81113d6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 81113b2:	2008      	movs	r0, #8
 81113b4:	f7ff ff3c 	bl	8111230 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 81113b8:	2001      	movs	r0, #1
 81113ba:	f7fd fbcb 	bl	810eb54 <memp_malloc>
 81113be:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 81113c0:	68fb      	ldr	r3, [r7, #12]
 81113c2:	2b00      	cmp	r3, #0
 81113c4:	d107      	bne.n	81113d6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 81113c6:	79fb      	ldrb	r3, [r7, #7]
 81113c8:	4618      	mov	r0, r3
 81113ca:	f7ff fee3 	bl	8111194 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 81113ce:	2001      	movs	r0, #1
 81113d0:	f7fd fbc0 	bl	810eb54 <memp_malloc>
 81113d4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 81113d6:	68fb      	ldr	r3, [r7, #12]
 81113d8:	2b00      	cmp	r3, #0
 81113da:	d03f      	beq.n	811145c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 81113dc:	229c      	movs	r2, #156	@ 0x9c
 81113de:	2100      	movs	r1, #0
 81113e0:	68f8      	ldr	r0, [r7, #12]
 81113e2:	f005 fb00 	bl	81169e6 <memset>
    pcb->prio = prio;
 81113e6:	68fb      	ldr	r3, [r7, #12]
 81113e8:	79fa      	ldrb	r2, [r7, #7]
 81113ea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 81113ec:	68fb      	ldr	r3, [r7, #12]
 81113ee:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81113f2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 81113f6:	68fb      	ldr	r3, [r7, #12]
 81113f8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81113fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 81113fe:	68fb      	ldr	r3, [r7, #12]
 8111400:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8111402:	68fb      	ldr	r3, [r7, #12]
 8111404:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8111406:	68fb      	ldr	r3, [r7, #12]
 8111408:	22ff      	movs	r2, #255	@ 0xff
 811140a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 811140c:	68fb      	ldr	r3, [r7, #12]
 811140e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8111412:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8111414:	68fb      	ldr	r3, [r7, #12]
 8111416:	2206      	movs	r2, #6
 8111418:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 811141c:	68fb      	ldr	r3, [r7, #12]
 811141e:	2206      	movs	r2, #6
 8111420:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8111422:	68fb      	ldr	r3, [r7, #12]
 8111424:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8111428:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 811142a:	68fb      	ldr	r3, [r7, #12]
 811142c:	2201      	movs	r2, #1
 811142e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8111432:	4b0d      	ldr	r3, [pc, #52]	@ (8111468 <tcp_alloc+0xf8>)
 8111434:	681a      	ldr	r2, [r3, #0]
 8111436:	68fb      	ldr	r3, [r7, #12]
 8111438:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 811143a:	4b0c      	ldr	r3, [pc, #48]	@ (811146c <tcp_alloc+0xfc>)
 811143c:	781a      	ldrb	r2, [r3, #0]
 811143e:	68fb      	ldr	r3, [r7, #12]
 8111440:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8111442:	68fb      	ldr	r3, [r7, #12]
 8111444:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8111448:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 811144c:	68fb      	ldr	r3, [r7, #12]
 811144e:	4a08      	ldr	r2, [pc, #32]	@ (8111470 <tcp_alloc+0x100>)
 8111450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8111454:	68fb      	ldr	r3, [r7, #12]
 8111456:	4a07      	ldr	r2, [pc, #28]	@ (8111474 <tcp_alloc+0x104>)
 8111458:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 811145c:	68fb      	ldr	r3, [r7, #12]
}
 811145e:	4618      	mov	r0, r3
 8111460:	3710      	adds	r7, #16
 8111462:	46bd      	mov	sp, r7
 8111464:	bd80      	pop	{r7, pc}
 8111466:	bf00      	nop
 8111468:	1000b84c 	.word	0x1000b84c
 811146c:	1000b862 	.word	0x1000b862
 8111470:	08111129 	.word	0x08111129
 8111474:	006ddd00 	.word	0x006ddd00

08111478 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8111478:	b580      	push	{r7, lr}
 811147a:	b082      	sub	sp, #8
 811147c:	af00      	add	r7, sp, #0
 811147e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8111480:	687b      	ldr	r3, [r7, #4]
 8111482:	2b00      	cmp	r3, #0
 8111484:	d107      	bne.n	8111496 <tcp_pcb_purge+0x1e>
 8111486:	4b21      	ldr	r3, [pc, #132]	@ (811150c <tcp_pcb_purge+0x94>)
 8111488:	f640 0251 	movw	r2, #2129	@ 0x851
 811148c:	4920      	ldr	r1, [pc, #128]	@ (8111510 <tcp_pcb_purge+0x98>)
 811148e:	4821      	ldr	r0, [pc, #132]	@ (8111514 <tcp_pcb_purge+0x9c>)
 8111490:	f005 fa2a 	bl	81168e8 <iprintf>
 8111494:	e037      	b.n	8111506 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8111496:	687b      	ldr	r3, [r7, #4]
 8111498:	7d1b      	ldrb	r3, [r3, #20]
 811149a:	2b00      	cmp	r3, #0
 811149c:	d033      	beq.n	8111506 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 811149e:	687b      	ldr	r3, [r7, #4]
 81114a0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 81114a2:	2b0a      	cmp	r3, #10
 81114a4:	d02f      	beq.n	8111506 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 81114a6:	687b      	ldr	r3, [r7, #4]
 81114a8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 81114aa:	2b01      	cmp	r3, #1
 81114ac:	d02b      	beq.n	8111506 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 81114ae:	687b      	ldr	r3, [r7, #4]
 81114b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81114b2:	2b00      	cmp	r3, #0
 81114b4:	d007      	beq.n	81114c6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 81114b6:	687b      	ldr	r3, [r7, #4]
 81114b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81114ba:	4618      	mov	r0, r3
 81114bc:	f7fe fa68 	bl	810f990 <pbuf_free>
      pcb->refused_data = NULL;
 81114c0:	687b      	ldr	r3, [r7, #4]
 81114c2:	2200      	movs	r2, #0
 81114c4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 81114c6:	687b      	ldr	r3, [r7, #4]
 81114c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81114ca:	2b00      	cmp	r3, #0
 81114cc:	d002      	beq.n	81114d4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 81114ce:	6878      	ldr	r0, [r7, #4]
 81114d0:	f000 f986 	bl	81117e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 81114d4:	687b      	ldr	r3, [r7, #4]
 81114d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81114da:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 81114dc:	687b      	ldr	r3, [r7, #4]
 81114de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81114e0:	4618      	mov	r0, r3
 81114e2:	f7ff fdc7 	bl	8111074 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 81114e6:	687b      	ldr	r3, [r7, #4]
 81114e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81114ea:	4618      	mov	r0, r3
 81114ec:	f7ff fdc2 	bl	8111074 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 81114f0:	687b      	ldr	r3, [r7, #4]
 81114f2:	2200      	movs	r2, #0
 81114f4:	66da      	str	r2, [r3, #108]	@ 0x6c
 81114f6:	687b      	ldr	r3, [r7, #4]
 81114f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81114fa:	687b      	ldr	r3, [r7, #4]
 81114fc:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 81114fe:	687b      	ldr	r3, [r7, #4]
 8111500:	2200      	movs	r2, #0
 8111502:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8111506:	3708      	adds	r7, #8
 8111508:	46bd      	mov	sp, r7
 811150a:	bd80      	pop	{r7, pc}
 811150c:	08118b24 	.word	0x08118b24
 8111510:	081191b0 	.word	0x081191b0
 8111514:	08118ba8 	.word	0x08118ba8

08111518 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8111518:	b580      	push	{r7, lr}
 811151a:	b084      	sub	sp, #16
 811151c:	af00      	add	r7, sp, #0
 811151e:	6078      	str	r0, [r7, #4]
 8111520:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8111522:	683b      	ldr	r3, [r7, #0]
 8111524:	2b00      	cmp	r3, #0
 8111526:	d106      	bne.n	8111536 <tcp_pcb_remove+0x1e>
 8111528:	4b3e      	ldr	r3, [pc, #248]	@ (8111624 <tcp_pcb_remove+0x10c>)
 811152a:	f640 0283 	movw	r2, #2179	@ 0x883
 811152e:	493e      	ldr	r1, [pc, #248]	@ (8111628 <tcp_pcb_remove+0x110>)
 8111530:	483e      	ldr	r0, [pc, #248]	@ (811162c <tcp_pcb_remove+0x114>)
 8111532:	f005 f9d9 	bl	81168e8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8111536:	687b      	ldr	r3, [r7, #4]
 8111538:	2b00      	cmp	r3, #0
 811153a:	d106      	bne.n	811154a <tcp_pcb_remove+0x32>
 811153c:	4b39      	ldr	r3, [pc, #228]	@ (8111624 <tcp_pcb_remove+0x10c>)
 811153e:	f640 0284 	movw	r2, #2180	@ 0x884
 8111542:	493b      	ldr	r1, [pc, #236]	@ (8111630 <tcp_pcb_remove+0x118>)
 8111544:	4839      	ldr	r0, [pc, #228]	@ (811162c <tcp_pcb_remove+0x114>)
 8111546:	f005 f9cf 	bl	81168e8 <iprintf>

  TCP_RMV(pcblist, pcb);
 811154a:	687b      	ldr	r3, [r7, #4]
 811154c:	681b      	ldr	r3, [r3, #0]
 811154e:	683a      	ldr	r2, [r7, #0]
 8111550:	429a      	cmp	r2, r3
 8111552:	d105      	bne.n	8111560 <tcp_pcb_remove+0x48>
 8111554:	687b      	ldr	r3, [r7, #4]
 8111556:	681b      	ldr	r3, [r3, #0]
 8111558:	68da      	ldr	r2, [r3, #12]
 811155a:	687b      	ldr	r3, [r7, #4]
 811155c:	601a      	str	r2, [r3, #0]
 811155e:	e013      	b.n	8111588 <tcp_pcb_remove+0x70>
 8111560:	687b      	ldr	r3, [r7, #4]
 8111562:	681b      	ldr	r3, [r3, #0]
 8111564:	60fb      	str	r3, [r7, #12]
 8111566:	e00c      	b.n	8111582 <tcp_pcb_remove+0x6a>
 8111568:	68fb      	ldr	r3, [r7, #12]
 811156a:	68db      	ldr	r3, [r3, #12]
 811156c:	683a      	ldr	r2, [r7, #0]
 811156e:	429a      	cmp	r2, r3
 8111570:	d104      	bne.n	811157c <tcp_pcb_remove+0x64>
 8111572:	683b      	ldr	r3, [r7, #0]
 8111574:	68da      	ldr	r2, [r3, #12]
 8111576:	68fb      	ldr	r3, [r7, #12]
 8111578:	60da      	str	r2, [r3, #12]
 811157a:	e005      	b.n	8111588 <tcp_pcb_remove+0x70>
 811157c:	68fb      	ldr	r3, [r7, #12]
 811157e:	68db      	ldr	r3, [r3, #12]
 8111580:	60fb      	str	r3, [r7, #12]
 8111582:	68fb      	ldr	r3, [r7, #12]
 8111584:	2b00      	cmp	r3, #0
 8111586:	d1ef      	bne.n	8111568 <tcp_pcb_remove+0x50>
 8111588:	683b      	ldr	r3, [r7, #0]
 811158a:	2200      	movs	r2, #0
 811158c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 811158e:	6838      	ldr	r0, [r7, #0]
 8111590:	f7ff ff72 	bl	8111478 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8111594:	683b      	ldr	r3, [r7, #0]
 8111596:	7d1b      	ldrb	r3, [r3, #20]
 8111598:	2b0a      	cmp	r3, #10
 811159a:	d013      	beq.n	81115c4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 811159c:	683b      	ldr	r3, [r7, #0]
 811159e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 81115a0:	2b01      	cmp	r3, #1
 81115a2:	d00f      	beq.n	81115c4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 81115a4:	683b      	ldr	r3, [r7, #0]
 81115a6:	8b5b      	ldrh	r3, [r3, #26]
 81115a8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 81115ac:	2b00      	cmp	r3, #0
 81115ae:	d009      	beq.n	81115c4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 81115b0:	683b      	ldr	r3, [r7, #0]
 81115b2:	8b5b      	ldrh	r3, [r3, #26]
 81115b4:	f043 0302 	orr.w	r3, r3, #2
 81115b8:	b29a      	uxth	r2, r3
 81115ba:	683b      	ldr	r3, [r7, #0]
 81115bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 81115be:	6838      	ldr	r0, [r7, #0]
 81115c0:	f002 ff6a 	bl	8114498 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 81115c4:	683b      	ldr	r3, [r7, #0]
 81115c6:	7d1b      	ldrb	r3, [r3, #20]
 81115c8:	2b01      	cmp	r3, #1
 81115ca:	d020      	beq.n	811160e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 81115cc:	683b      	ldr	r3, [r7, #0]
 81115ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81115d0:	2b00      	cmp	r3, #0
 81115d2:	d006      	beq.n	81115e2 <tcp_pcb_remove+0xca>
 81115d4:	4b13      	ldr	r3, [pc, #76]	@ (8111624 <tcp_pcb_remove+0x10c>)
 81115d6:	f640 0293 	movw	r2, #2195	@ 0x893
 81115da:	4916      	ldr	r1, [pc, #88]	@ (8111634 <tcp_pcb_remove+0x11c>)
 81115dc:	4813      	ldr	r0, [pc, #76]	@ (811162c <tcp_pcb_remove+0x114>)
 81115de:	f005 f983 	bl	81168e8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 81115e2:	683b      	ldr	r3, [r7, #0]
 81115e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81115e6:	2b00      	cmp	r3, #0
 81115e8:	d006      	beq.n	81115f8 <tcp_pcb_remove+0xe0>
 81115ea:	4b0e      	ldr	r3, [pc, #56]	@ (8111624 <tcp_pcb_remove+0x10c>)
 81115ec:	f640 0294 	movw	r2, #2196	@ 0x894
 81115f0:	4911      	ldr	r1, [pc, #68]	@ (8111638 <tcp_pcb_remove+0x120>)
 81115f2:	480e      	ldr	r0, [pc, #56]	@ (811162c <tcp_pcb_remove+0x114>)
 81115f4:	f005 f978 	bl	81168e8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 81115f8:	683b      	ldr	r3, [r7, #0]
 81115fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81115fc:	2b00      	cmp	r3, #0
 81115fe:	d006      	beq.n	811160e <tcp_pcb_remove+0xf6>
 8111600:	4b08      	ldr	r3, [pc, #32]	@ (8111624 <tcp_pcb_remove+0x10c>)
 8111602:	f640 0296 	movw	r2, #2198	@ 0x896
 8111606:	490d      	ldr	r1, [pc, #52]	@ (811163c <tcp_pcb_remove+0x124>)
 8111608:	4808      	ldr	r0, [pc, #32]	@ (811162c <tcp_pcb_remove+0x114>)
 811160a:	f005 f96d 	bl	81168e8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 811160e:	683b      	ldr	r3, [r7, #0]
 8111610:	2200      	movs	r2, #0
 8111612:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8111614:	683b      	ldr	r3, [r7, #0]
 8111616:	2200      	movs	r2, #0
 8111618:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 811161a:	bf00      	nop
 811161c:	3710      	adds	r7, #16
 811161e:	46bd      	mov	sp, r7
 8111620:	bd80      	pop	{r7, pc}
 8111622:	bf00      	nop
 8111624:	08118b24 	.word	0x08118b24
 8111628:	081191cc 	.word	0x081191cc
 811162c:	08118ba8 	.word	0x08118ba8
 8111630:	081191e8 	.word	0x081191e8
 8111634:	08119208 	.word	0x08119208
 8111638:	08119220 	.word	0x08119220
 811163c:	0811923c 	.word	0x0811923c

08111640 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8111640:	b580      	push	{r7, lr}
 8111642:	b082      	sub	sp, #8
 8111644:	af00      	add	r7, sp, #0
 8111646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8111648:	687b      	ldr	r3, [r7, #4]
 811164a:	2b00      	cmp	r3, #0
 811164c:	d106      	bne.n	811165c <tcp_next_iss+0x1c>
 811164e:	4b0a      	ldr	r3, [pc, #40]	@ (8111678 <tcp_next_iss+0x38>)
 8111650:	f640 02af 	movw	r2, #2223	@ 0x8af
 8111654:	4909      	ldr	r1, [pc, #36]	@ (811167c <tcp_next_iss+0x3c>)
 8111656:	480a      	ldr	r0, [pc, #40]	@ (8111680 <tcp_next_iss+0x40>)
 8111658:	f005 f946 	bl	81168e8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 811165c:	4b09      	ldr	r3, [pc, #36]	@ (8111684 <tcp_next_iss+0x44>)
 811165e:	681a      	ldr	r2, [r3, #0]
 8111660:	4b09      	ldr	r3, [pc, #36]	@ (8111688 <tcp_next_iss+0x48>)
 8111662:	681b      	ldr	r3, [r3, #0]
 8111664:	4413      	add	r3, r2
 8111666:	4a07      	ldr	r2, [pc, #28]	@ (8111684 <tcp_next_iss+0x44>)
 8111668:	6013      	str	r3, [r2, #0]
  return iss;
 811166a:	4b06      	ldr	r3, [pc, #24]	@ (8111684 <tcp_next_iss+0x44>)
 811166c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 811166e:	4618      	mov	r0, r3
 8111670:	3708      	adds	r7, #8
 8111672:	46bd      	mov	sp, r7
 8111674:	bd80      	pop	{r7, pc}
 8111676:	bf00      	nop
 8111678:	08118b24 	.word	0x08118b24
 811167c:	08119254 	.word	0x08119254
 8111680:	08118ba8 	.word	0x08118ba8
 8111684:	1000002c 	.word	0x1000002c
 8111688:	1000b84c 	.word	0x1000b84c

0811168c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 811168c:	b580      	push	{r7, lr}
 811168e:	b086      	sub	sp, #24
 8111690:	af00      	add	r7, sp, #0
 8111692:	4603      	mov	r3, r0
 8111694:	60b9      	str	r1, [r7, #8]
 8111696:	607a      	str	r2, [r7, #4]
 8111698:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 811169a:	687b      	ldr	r3, [r7, #4]
 811169c:	2b00      	cmp	r3, #0
 811169e:	d106      	bne.n	81116ae <tcp_eff_send_mss_netif+0x22>
 81116a0:	4b14      	ldr	r3, [pc, #80]	@ (81116f4 <tcp_eff_send_mss_netif+0x68>)
 81116a2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 81116a6:	4914      	ldr	r1, [pc, #80]	@ (81116f8 <tcp_eff_send_mss_netif+0x6c>)
 81116a8:	4814      	ldr	r0, [pc, #80]	@ (81116fc <tcp_eff_send_mss_netif+0x70>)
 81116aa:	f005 f91d 	bl	81168e8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 81116ae:	68bb      	ldr	r3, [r7, #8]
 81116b0:	2b00      	cmp	r3, #0
 81116b2:	d101      	bne.n	81116b8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 81116b4:	89fb      	ldrh	r3, [r7, #14]
 81116b6:	e019      	b.n	81116ec <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 81116b8:	68bb      	ldr	r3, [r7, #8]
 81116ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 81116bc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 81116be:	8afb      	ldrh	r3, [r7, #22]
 81116c0:	2b00      	cmp	r3, #0
 81116c2:	d012      	beq.n	81116ea <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 81116c4:	2328      	movs	r3, #40	@ 0x28
 81116c6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 81116c8:	8afa      	ldrh	r2, [r7, #22]
 81116ca:	8abb      	ldrh	r3, [r7, #20]
 81116cc:	429a      	cmp	r2, r3
 81116ce:	d904      	bls.n	81116da <tcp_eff_send_mss_netif+0x4e>
 81116d0:	8afa      	ldrh	r2, [r7, #22]
 81116d2:	8abb      	ldrh	r3, [r7, #20]
 81116d4:	1ad3      	subs	r3, r2, r3
 81116d6:	b29b      	uxth	r3, r3
 81116d8:	e000      	b.n	81116dc <tcp_eff_send_mss_netif+0x50>
 81116da:	2300      	movs	r3, #0
 81116dc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 81116de:	8a7a      	ldrh	r2, [r7, #18]
 81116e0:	89fb      	ldrh	r3, [r7, #14]
 81116e2:	4293      	cmp	r3, r2
 81116e4:	bf28      	it	cs
 81116e6:	4613      	movcs	r3, r2
 81116e8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 81116ea:	89fb      	ldrh	r3, [r7, #14]
}
 81116ec:	4618      	mov	r0, r3
 81116ee:	3718      	adds	r7, #24
 81116f0:	46bd      	mov	sp, r7
 81116f2:	bd80      	pop	{r7, pc}
 81116f4:	08118b24 	.word	0x08118b24
 81116f8:	08119270 	.word	0x08119270
 81116fc:	08118ba8 	.word	0x08118ba8

08111700 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8111700:	b580      	push	{r7, lr}
 8111702:	b084      	sub	sp, #16
 8111704:	af00      	add	r7, sp, #0
 8111706:	6078      	str	r0, [r7, #4]
 8111708:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 811170a:	683b      	ldr	r3, [r7, #0]
 811170c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 811170e:	687b      	ldr	r3, [r7, #4]
 8111710:	2b00      	cmp	r3, #0
 8111712:	d119      	bne.n	8111748 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8111714:	4b10      	ldr	r3, [pc, #64]	@ (8111758 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8111716:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 811171a:	4910      	ldr	r1, [pc, #64]	@ (811175c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 811171c:	4810      	ldr	r0, [pc, #64]	@ (8111760 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 811171e:	f005 f8e3 	bl	81168e8 <iprintf>

  while (pcb != NULL) {
 8111722:	e011      	b.n	8111748 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8111724:	68fb      	ldr	r3, [r7, #12]
 8111726:	681a      	ldr	r2, [r3, #0]
 8111728:	687b      	ldr	r3, [r7, #4]
 811172a:	681b      	ldr	r3, [r3, #0]
 811172c:	429a      	cmp	r2, r3
 811172e:	d108      	bne.n	8111742 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8111730:	68fb      	ldr	r3, [r7, #12]
 8111732:	68db      	ldr	r3, [r3, #12]
 8111734:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8111736:	68f8      	ldr	r0, [r7, #12]
 8111738:	f7fe ffc0 	bl	81106bc <tcp_abort>
      pcb = next;
 811173c:	68bb      	ldr	r3, [r7, #8]
 811173e:	60fb      	str	r3, [r7, #12]
 8111740:	e002      	b.n	8111748 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8111742:	68fb      	ldr	r3, [r7, #12]
 8111744:	68db      	ldr	r3, [r3, #12]
 8111746:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8111748:	68fb      	ldr	r3, [r7, #12]
 811174a:	2b00      	cmp	r3, #0
 811174c:	d1ea      	bne.n	8111724 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 811174e:	bf00      	nop
 8111750:	bf00      	nop
 8111752:	3710      	adds	r7, #16
 8111754:	46bd      	mov	sp, r7
 8111756:	bd80      	pop	{r7, pc}
 8111758:	08118b24 	.word	0x08118b24
 811175c:	08119298 	.word	0x08119298
 8111760:	08118ba8 	.word	0x08118ba8

08111764 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8111764:	b580      	push	{r7, lr}
 8111766:	b084      	sub	sp, #16
 8111768:	af00      	add	r7, sp, #0
 811176a:	6078      	str	r0, [r7, #4]
 811176c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 811176e:	687b      	ldr	r3, [r7, #4]
 8111770:	2b00      	cmp	r3, #0
 8111772:	d02a      	beq.n	81117ca <tcp_netif_ip_addr_changed+0x66>
 8111774:	687b      	ldr	r3, [r7, #4]
 8111776:	681b      	ldr	r3, [r3, #0]
 8111778:	2b00      	cmp	r3, #0
 811177a:	d026      	beq.n	81117ca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 811177c:	4b15      	ldr	r3, [pc, #84]	@ (81117d4 <tcp_netif_ip_addr_changed+0x70>)
 811177e:	681b      	ldr	r3, [r3, #0]
 8111780:	4619      	mov	r1, r3
 8111782:	6878      	ldr	r0, [r7, #4]
 8111784:	f7ff ffbc 	bl	8111700 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8111788:	4b13      	ldr	r3, [pc, #76]	@ (81117d8 <tcp_netif_ip_addr_changed+0x74>)
 811178a:	681b      	ldr	r3, [r3, #0]
 811178c:	4619      	mov	r1, r3
 811178e:	6878      	ldr	r0, [r7, #4]
 8111790:	f7ff ffb6 	bl	8111700 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8111794:	683b      	ldr	r3, [r7, #0]
 8111796:	2b00      	cmp	r3, #0
 8111798:	d017      	beq.n	81117ca <tcp_netif_ip_addr_changed+0x66>
 811179a:	683b      	ldr	r3, [r7, #0]
 811179c:	681b      	ldr	r3, [r3, #0]
 811179e:	2b00      	cmp	r3, #0
 81117a0:	d013      	beq.n	81117ca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 81117a2:	4b0e      	ldr	r3, [pc, #56]	@ (81117dc <tcp_netif_ip_addr_changed+0x78>)
 81117a4:	681b      	ldr	r3, [r3, #0]
 81117a6:	60fb      	str	r3, [r7, #12]
 81117a8:	e00c      	b.n	81117c4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 81117aa:	68fb      	ldr	r3, [r7, #12]
 81117ac:	681a      	ldr	r2, [r3, #0]
 81117ae:	687b      	ldr	r3, [r7, #4]
 81117b0:	681b      	ldr	r3, [r3, #0]
 81117b2:	429a      	cmp	r2, r3
 81117b4:	d103      	bne.n	81117be <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 81117b6:	683b      	ldr	r3, [r7, #0]
 81117b8:	681a      	ldr	r2, [r3, #0]
 81117ba:	68fb      	ldr	r3, [r7, #12]
 81117bc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 81117be:	68fb      	ldr	r3, [r7, #12]
 81117c0:	68db      	ldr	r3, [r3, #12]
 81117c2:	60fb      	str	r3, [r7, #12]
 81117c4:	68fb      	ldr	r3, [r7, #12]
 81117c6:	2b00      	cmp	r3, #0
 81117c8:	d1ef      	bne.n	81117aa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 81117ca:	bf00      	nop
 81117cc:	3710      	adds	r7, #16
 81117ce:	46bd      	mov	sp, r7
 81117d0:	bd80      	pop	{r7, pc}
 81117d2:	bf00      	nop
 81117d4:	1000b858 	.word	0x1000b858
 81117d8:	1000b850 	.word	0x1000b850
 81117dc:	1000b854 	.word	0x1000b854

081117e0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 81117e0:	b580      	push	{r7, lr}
 81117e2:	b082      	sub	sp, #8
 81117e4:	af00      	add	r7, sp, #0
 81117e6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 81117e8:	687b      	ldr	r3, [r7, #4]
 81117ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81117ec:	2b00      	cmp	r3, #0
 81117ee:	d007      	beq.n	8111800 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 81117f0:	687b      	ldr	r3, [r7, #4]
 81117f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81117f4:	4618      	mov	r0, r3
 81117f6:	f7ff fc3d 	bl	8111074 <tcp_segs_free>
    pcb->ooseq = NULL;
 81117fa:	687b      	ldr	r3, [r7, #4]
 81117fc:	2200      	movs	r2, #0
 81117fe:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8111800:	bf00      	nop
 8111802:	3708      	adds	r7, #8
 8111804:	46bd      	mov	sp, r7
 8111806:	bd80      	pop	{r7, pc}

08111808 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8111808:	b590      	push	{r4, r7, lr}
 811180a:	b08d      	sub	sp, #52	@ 0x34
 811180c:	af04      	add	r7, sp, #16
 811180e:	6078      	str	r0, [r7, #4]
 8111810:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8111812:	687b      	ldr	r3, [r7, #4]
 8111814:	2b00      	cmp	r3, #0
 8111816:	d105      	bne.n	8111824 <tcp_input+0x1c>
 8111818:	4b9b      	ldr	r3, [pc, #620]	@ (8111a88 <tcp_input+0x280>)
 811181a:	2283      	movs	r2, #131	@ 0x83
 811181c:	499b      	ldr	r1, [pc, #620]	@ (8111a8c <tcp_input+0x284>)
 811181e:	489c      	ldr	r0, [pc, #624]	@ (8111a90 <tcp_input+0x288>)
 8111820:	f005 f862 	bl	81168e8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8111824:	687b      	ldr	r3, [r7, #4]
 8111826:	685b      	ldr	r3, [r3, #4]
 8111828:	4a9a      	ldr	r2, [pc, #616]	@ (8111a94 <tcp_input+0x28c>)
 811182a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 811182c:	687b      	ldr	r3, [r7, #4]
 811182e:	895b      	ldrh	r3, [r3, #10]
 8111830:	2b13      	cmp	r3, #19
 8111832:	f240 83d1 	bls.w	8111fd8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8111836:	4b98      	ldr	r3, [pc, #608]	@ (8111a98 <tcp_input+0x290>)
 8111838:	695b      	ldr	r3, [r3, #20]
 811183a:	4a97      	ldr	r2, [pc, #604]	@ (8111a98 <tcp_input+0x290>)
 811183c:	6812      	ldr	r2, [r2, #0]
 811183e:	4611      	mov	r1, r2
 8111840:	4618      	mov	r0, r3
 8111842:	f7fb fe69 	bl	810d518 <ip4_addr_isbroadcast_u32>
 8111846:	4603      	mov	r3, r0
 8111848:	2b00      	cmp	r3, #0
 811184a:	f040 83c7 	bne.w	8111fdc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 811184e:	4b92      	ldr	r3, [pc, #584]	@ (8111a98 <tcp_input+0x290>)
 8111850:	695b      	ldr	r3, [r3, #20]
 8111852:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8111856:	2be0      	cmp	r3, #224	@ 0xe0
 8111858:	f000 83c0 	beq.w	8111fdc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 811185c:	4b8d      	ldr	r3, [pc, #564]	@ (8111a94 <tcp_input+0x28c>)
 811185e:	681b      	ldr	r3, [r3, #0]
 8111860:	899b      	ldrh	r3, [r3, #12]
 8111862:	b29b      	uxth	r3, r3
 8111864:	4618      	mov	r0, r3
 8111866:	f7fa f8e9 	bl	810ba3c <lwip_htons>
 811186a:	4603      	mov	r3, r0
 811186c:	0b1b      	lsrs	r3, r3, #12
 811186e:	b29b      	uxth	r3, r3
 8111870:	b2db      	uxtb	r3, r3
 8111872:	009b      	lsls	r3, r3, #2
 8111874:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8111876:	7cbb      	ldrb	r3, [r7, #18]
 8111878:	2b13      	cmp	r3, #19
 811187a:	f240 83b1 	bls.w	8111fe0 <tcp_input+0x7d8>
 811187e:	7cbb      	ldrb	r3, [r7, #18]
 8111880:	b29a      	uxth	r2, r3
 8111882:	687b      	ldr	r3, [r7, #4]
 8111884:	891b      	ldrh	r3, [r3, #8]
 8111886:	429a      	cmp	r2, r3
 8111888:	f200 83aa 	bhi.w	8111fe0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 811188c:	7cbb      	ldrb	r3, [r7, #18]
 811188e:	b29b      	uxth	r3, r3
 8111890:	3b14      	subs	r3, #20
 8111892:	b29a      	uxth	r2, r3
 8111894:	4b81      	ldr	r3, [pc, #516]	@ (8111a9c <tcp_input+0x294>)
 8111896:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8111898:	4b81      	ldr	r3, [pc, #516]	@ (8111aa0 <tcp_input+0x298>)
 811189a:	2200      	movs	r2, #0
 811189c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 811189e:	687b      	ldr	r3, [r7, #4]
 81118a0:	895a      	ldrh	r2, [r3, #10]
 81118a2:	7cbb      	ldrb	r3, [r7, #18]
 81118a4:	b29b      	uxth	r3, r3
 81118a6:	429a      	cmp	r2, r3
 81118a8:	d309      	bcc.n	81118be <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 81118aa:	4b7c      	ldr	r3, [pc, #496]	@ (8111a9c <tcp_input+0x294>)
 81118ac:	881a      	ldrh	r2, [r3, #0]
 81118ae:	4b7d      	ldr	r3, [pc, #500]	@ (8111aa4 <tcp_input+0x29c>)
 81118b0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 81118b2:	7cbb      	ldrb	r3, [r7, #18]
 81118b4:	4619      	mov	r1, r3
 81118b6:	6878      	ldr	r0, [r7, #4]
 81118b8:	f7fd ffe4 	bl	810f884 <pbuf_remove_header>
 81118bc:	e04e      	b.n	811195c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 81118be:	687b      	ldr	r3, [r7, #4]
 81118c0:	681b      	ldr	r3, [r3, #0]
 81118c2:	2b00      	cmp	r3, #0
 81118c4:	d105      	bne.n	81118d2 <tcp_input+0xca>
 81118c6:	4b70      	ldr	r3, [pc, #448]	@ (8111a88 <tcp_input+0x280>)
 81118c8:	22c2      	movs	r2, #194	@ 0xc2
 81118ca:	4977      	ldr	r1, [pc, #476]	@ (8111aa8 <tcp_input+0x2a0>)
 81118cc:	4870      	ldr	r0, [pc, #448]	@ (8111a90 <tcp_input+0x288>)
 81118ce:	f005 f80b 	bl	81168e8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 81118d2:	2114      	movs	r1, #20
 81118d4:	6878      	ldr	r0, [r7, #4]
 81118d6:	f7fd ffd5 	bl	810f884 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 81118da:	687b      	ldr	r3, [r7, #4]
 81118dc:	895a      	ldrh	r2, [r3, #10]
 81118de:	4b71      	ldr	r3, [pc, #452]	@ (8111aa4 <tcp_input+0x29c>)
 81118e0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 81118e2:	4b6e      	ldr	r3, [pc, #440]	@ (8111a9c <tcp_input+0x294>)
 81118e4:	881a      	ldrh	r2, [r3, #0]
 81118e6:	4b6f      	ldr	r3, [pc, #444]	@ (8111aa4 <tcp_input+0x29c>)
 81118e8:	881b      	ldrh	r3, [r3, #0]
 81118ea:	1ad3      	subs	r3, r2, r3
 81118ec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 81118ee:	4b6d      	ldr	r3, [pc, #436]	@ (8111aa4 <tcp_input+0x29c>)
 81118f0:	881b      	ldrh	r3, [r3, #0]
 81118f2:	4619      	mov	r1, r3
 81118f4:	6878      	ldr	r0, [r7, #4]
 81118f6:	f7fd ffc5 	bl	810f884 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 81118fa:	687b      	ldr	r3, [r7, #4]
 81118fc:	681b      	ldr	r3, [r3, #0]
 81118fe:	895b      	ldrh	r3, [r3, #10]
 8111900:	8a3a      	ldrh	r2, [r7, #16]
 8111902:	429a      	cmp	r2, r3
 8111904:	f200 836e 	bhi.w	8111fe4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8111908:	687b      	ldr	r3, [r7, #4]
 811190a:	681b      	ldr	r3, [r3, #0]
 811190c:	685b      	ldr	r3, [r3, #4]
 811190e:	4a64      	ldr	r2, [pc, #400]	@ (8111aa0 <tcp_input+0x298>)
 8111910:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8111912:	687b      	ldr	r3, [r7, #4]
 8111914:	681b      	ldr	r3, [r3, #0]
 8111916:	8a3a      	ldrh	r2, [r7, #16]
 8111918:	4611      	mov	r1, r2
 811191a:	4618      	mov	r0, r3
 811191c:	f7fd ffb2 	bl	810f884 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8111920:	687b      	ldr	r3, [r7, #4]
 8111922:	891a      	ldrh	r2, [r3, #8]
 8111924:	8a3b      	ldrh	r3, [r7, #16]
 8111926:	1ad3      	subs	r3, r2, r3
 8111928:	b29a      	uxth	r2, r3
 811192a:	687b      	ldr	r3, [r7, #4]
 811192c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 811192e:	687b      	ldr	r3, [r7, #4]
 8111930:	895b      	ldrh	r3, [r3, #10]
 8111932:	2b00      	cmp	r3, #0
 8111934:	d005      	beq.n	8111942 <tcp_input+0x13a>
 8111936:	4b54      	ldr	r3, [pc, #336]	@ (8111a88 <tcp_input+0x280>)
 8111938:	22df      	movs	r2, #223	@ 0xdf
 811193a:	495c      	ldr	r1, [pc, #368]	@ (8111aac <tcp_input+0x2a4>)
 811193c:	4854      	ldr	r0, [pc, #336]	@ (8111a90 <tcp_input+0x288>)
 811193e:	f004 ffd3 	bl	81168e8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8111942:	687b      	ldr	r3, [r7, #4]
 8111944:	891a      	ldrh	r2, [r3, #8]
 8111946:	687b      	ldr	r3, [r7, #4]
 8111948:	681b      	ldr	r3, [r3, #0]
 811194a:	891b      	ldrh	r3, [r3, #8]
 811194c:	429a      	cmp	r2, r3
 811194e:	d005      	beq.n	811195c <tcp_input+0x154>
 8111950:	4b4d      	ldr	r3, [pc, #308]	@ (8111a88 <tcp_input+0x280>)
 8111952:	22e0      	movs	r2, #224	@ 0xe0
 8111954:	4956      	ldr	r1, [pc, #344]	@ (8111ab0 <tcp_input+0x2a8>)
 8111956:	484e      	ldr	r0, [pc, #312]	@ (8111a90 <tcp_input+0x288>)
 8111958:	f004 ffc6 	bl	81168e8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 811195c:	4b4d      	ldr	r3, [pc, #308]	@ (8111a94 <tcp_input+0x28c>)
 811195e:	681b      	ldr	r3, [r3, #0]
 8111960:	881b      	ldrh	r3, [r3, #0]
 8111962:	b29b      	uxth	r3, r3
 8111964:	4a4b      	ldr	r2, [pc, #300]	@ (8111a94 <tcp_input+0x28c>)
 8111966:	6814      	ldr	r4, [r2, #0]
 8111968:	4618      	mov	r0, r3
 811196a:	f7fa f867 	bl	810ba3c <lwip_htons>
 811196e:	4603      	mov	r3, r0
 8111970:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8111972:	4b48      	ldr	r3, [pc, #288]	@ (8111a94 <tcp_input+0x28c>)
 8111974:	681b      	ldr	r3, [r3, #0]
 8111976:	885b      	ldrh	r3, [r3, #2]
 8111978:	b29b      	uxth	r3, r3
 811197a:	4a46      	ldr	r2, [pc, #280]	@ (8111a94 <tcp_input+0x28c>)
 811197c:	6814      	ldr	r4, [r2, #0]
 811197e:	4618      	mov	r0, r3
 8111980:	f7fa f85c 	bl	810ba3c <lwip_htons>
 8111984:	4603      	mov	r3, r0
 8111986:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8111988:	4b42      	ldr	r3, [pc, #264]	@ (8111a94 <tcp_input+0x28c>)
 811198a:	681b      	ldr	r3, [r3, #0]
 811198c:	685b      	ldr	r3, [r3, #4]
 811198e:	4a41      	ldr	r2, [pc, #260]	@ (8111a94 <tcp_input+0x28c>)
 8111990:	6814      	ldr	r4, [r2, #0]
 8111992:	4618      	mov	r0, r3
 8111994:	f7fa f867 	bl	810ba66 <lwip_htonl>
 8111998:	4603      	mov	r3, r0
 811199a:	6063      	str	r3, [r4, #4]
 811199c:	6863      	ldr	r3, [r4, #4]
 811199e:	4a45      	ldr	r2, [pc, #276]	@ (8111ab4 <tcp_input+0x2ac>)
 81119a0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 81119a2:	4b3c      	ldr	r3, [pc, #240]	@ (8111a94 <tcp_input+0x28c>)
 81119a4:	681b      	ldr	r3, [r3, #0]
 81119a6:	689b      	ldr	r3, [r3, #8]
 81119a8:	4a3a      	ldr	r2, [pc, #232]	@ (8111a94 <tcp_input+0x28c>)
 81119aa:	6814      	ldr	r4, [r2, #0]
 81119ac:	4618      	mov	r0, r3
 81119ae:	f7fa f85a 	bl	810ba66 <lwip_htonl>
 81119b2:	4603      	mov	r3, r0
 81119b4:	60a3      	str	r3, [r4, #8]
 81119b6:	68a3      	ldr	r3, [r4, #8]
 81119b8:	4a3f      	ldr	r2, [pc, #252]	@ (8111ab8 <tcp_input+0x2b0>)
 81119ba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 81119bc:	4b35      	ldr	r3, [pc, #212]	@ (8111a94 <tcp_input+0x28c>)
 81119be:	681b      	ldr	r3, [r3, #0]
 81119c0:	89db      	ldrh	r3, [r3, #14]
 81119c2:	b29b      	uxth	r3, r3
 81119c4:	4a33      	ldr	r2, [pc, #204]	@ (8111a94 <tcp_input+0x28c>)
 81119c6:	6814      	ldr	r4, [r2, #0]
 81119c8:	4618      	mov	r0, r3
 81119ca:	f7fa f837 	bl	810ba3c <lwip_htons>
 81119ce:	4603      	mov	r3, r0
 81119d0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 81119d2:	4b30      	ldr	r3, [pc, #192]	@ (8111a94 <tcp_input+0x28c>)
 81119d4:	681b      	ldr	r3, [r3, #0]
 81119d6:	899b      	ldrh	r3, [r3, #12]
 81119d8:	b29b      	uxth	r3, r3
 81119da:	4618      	mov	r0, r3
 81119dc:	f7fa f82e 	bl	810ba3c <lwip_htons>
 81119e0:	4603      	mov	r3, r0
 81119e2:	b2db      	uxtb	r3, r3
 81119e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81119e8:	b2da      	uxtb	r2, r3
 81119ea:	4b34      	ldr	r3, [pc, #208]	@ (8111abc <tcp_input+0x2b4>)
 81119ec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 81119ee:	687b      	ldr	r3, [r7, #4]
 81119f0:	891a      	ldrh	r2, [r3, #8]
 81119f2:	4b33      	ldr	r3, [pc, #204]	@ (8111ac0 <tcp_input+0x2b8>)
 81119f4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 81119f6:	4b31      	ldr	r3, [pc, #196]	@ (8111abc <tcp_input+0x2b4>)
 81119f8:	781b      	ldrb	r3, [r3, #0]
 81119fa:	f003 0303 	and.w	r3, r3, #3
 81119fe:	2b00      	cmp	r3, #0
 8111a00:	d00c      	beq.n	8111a1c <tcp_input+0x214>
    tcplen++;
 8111a02:	4b2f      	ldr	r3, [pc, #188]	@ (8111ac0 <tcp_input+0x2b8>)
 8111a04:	881b      	ldrh	r3, [r3, #0]
 8111a06:	3301      	adds	r3, #1
 8111a08:	b29a      	uxth	r2, r3
 8111a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8111ac0 <tcp_input+0x2b8>)
 8111a0c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8111a0e:	687b      	ldr	r3, [r7, #4]
 8111a10:	891a      	ldrh	r2, [r3, #8]
 8111a12:	4b2b      	ldr	r3, [pc, #172]	@ (8111ac0 <tcp_input+0x2b8>)
 8111a14:	881b      	ldrh	r3, [r3, #0]
 8111a16:	429a      	cmp	r2, r3
 8111a18:	f200 82e6 	bhi.w	8111fe8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8111a1c:	2300      	movs	r3, #0
 8111a1e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8111a20:	4b28      	ldr	r3, [pc, #160]	@ (8111ac4 <tcp_input+0x2bc>)
 8111a22:	681b      	ldr	r3, [r3, #0]
 8111a24:	61fb      	str	r3, [r7, #28]
 8111a26:	e09d      	b.n	8111b64 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8111a28:	69fb      	ldr	r3, [r7, #28]
 8111a2a:	7d1b      	ldrb	r3, [r3, #20]
 8111a2c:	2b00      	cmp	r3, #0
 8111a2e:	d105      	bne.n	8111a3c <tcp_input+0x234>
 8111a30:	4b15      	ldr	r3, [pc, #84]	@ (8111a88 <tcp_input+0x280>)
 8111a32:	22fb      	movs	r2, #251	@ 0xfb
 8111a34:	4924      	ldr	r1, [pc, #144]	@ (8111ac8 <tcp_input+0x2c0>)
 8111a36:	4816      	ldr	r0, [pc, #88]	@ (8111a90 <tcp_input+0x288>)
 8111a38:	f004 ff56 	bl	81168e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8111a3c:	69fb      	ldr	r3, [r7, #28]
 8111a3e:	7d1b      	ldrb	r3, [r3, #20]
 8111a40:	2b0a      	cmp	r3, #10
 8111a42:	d105      	bne.n	8111a50 <tcp_input+0x248>
 8111a44:	4b10      	ldr	r3, [pc, #64]	@ (8111a88 <tcp_input+0x280>)
 8111a46:	22fc      	movs	r2, #252	@ 0xfc
 8111a48:	4920      	ldr	r1, [pc, #128]	@ (8111acc <tcp_input+0x2c4>)
 8111a4a:	4811      	ldr	r0, [pc, #68]	@ (8111a90 <tcp_input+0x288>)
 8111a4c:	f004 ff4c 	bl	81168e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8111a50:	69fb      	ldr	r3, [r7, #28]
 8111a52:	7d1b      	ldrb	r3, [r3, #20]
 8111a54:	2b01      	cmp	r3, #1
 8111a56:	d105      	bne.n	8111a64 <tcp_input+0x25c>
 8111a58:	4b0b      	ldr	r3, [pc, #44]	@ (8111a88 <tcp_input+0x280>)
 8111a5a:	22fd      	movs	r2, #253	@ 0xfd
 8111a5c:	491c      	ldr	r1, [pc, #112]	@ (8111ad0 <tcp_input+0x2c8>)
 8111a5e:	480c      	ldr	r0, [pc, #48]	@ (8111a90 <tcp_input+0x288>)
 8111a60:	f004 ff42 	bl	81168e8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8111a64:	69fb      	ldr	r3, [r7, #28]
 8111a66:	7a1b      	ldrb	r3, [r3, #8]
 8111a68:	2b00      	cmp	r3, #0
 8111a6a:	d033      	beq.n	8111ad4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8111a6c:	69fb      	ldr	r3, [r7, #28]
 8111a6e:	7a1a      	ldrb	r2, [r3, #8]
 8111a70:	4b09      	ldr	r3, [pc, #36]	@ (8111a98 <tcp_input+0x290>)
 8111a72:	685b      	ldr	r3, [r3, #4]
 8111a74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8111a78:	3301      	adds	r3, #1
 8111a7a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8111a7c:	429a      	cmp	r2, r3
 8111a7e:	d029      	beq.n	8111ad4 <tcp_input+0x2cc>
      prev = pcb;
 8111a80:	69fb      	ldr	r3, [r7, #28]
 8111a82:	61bb      	str	r3, [r7, #24]
      continue;
 8111a84:	e06b      	b.n	8111b5e <tcp_input+0x356>
 8111a86:	bf00      	nop
 8111a88:	081192cc 	.word	0x081192cc
 8111a8c:	08119340 	.word	0x08119340
 8111a90:	08119358 	.word	0x08119358
 8111a94:	1000b874 	.word	0x1000b874
 8111a98:	10004d7c 	.word	0x10004d7c
 8111a9c:	1000b878 	.word	0x1000b878
 8111aa0:	1000b87c 	.word	0x1000b87c
 8111aa4:	1000b87a 	.word	0x1000b87a
 8111aa8:	08119380 	.word	0x08119380
 8111aac:	08119390 	.word	0x08119390
 8111ab0:	0811939c 	.word	0x0811939c
 8111ab4:	1000b884 	.word	0x1000b884
 8111ab8:	1000b888 	.word	0x1000b888
 8111abc:	1000b890 	.word	0x1000b890
 8111ac0:	1000b88e 	.word	0x1000b88e
 8111ac4:	1000b858 	.word	0x1000b858
 8111ac8:	081193bc 	.word	0x081193bc
 8111acc:	081193e4 	.word	0x081193e4
 8111ad0:	08119410 	.word	0x08119410
    }

    if (pcb->remote_port == tcphdr->src &&
 8111ad4:	69fb      	ldr	r3, [r7, #28]
 8111ad6:	8b1a      	ldrh	r2, [r3, #24]
 8111ad8:	4b72      	ldr	r3, [pc, #456]	@ (8111ca4 <tcp_input+0x49c>)
 8111ada:	681b      	ldr	r3, [r3, #0]
 8111adc:	881b      	ldrh	r3, [r3, #0]
 8111ade:	b29b      	uxth	r3, r3
 8111ae0:	429a      	cmp	r2, r3
 8111ae2:	d13a      	bne.n	8111b5a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8111ae4:	69fb      	ldr	r3, [r7, #28]
 8111ae6:	8ada      	ldrh	r2, [r3, #22]
 8111ae8:	4b6e      	ldr	r3, [pc, #440]	@ (8111ca4 <tcp_input+0x49c>)
 8111aea:	681b      	ldr	r3, [r3, #0]
 8111aec:	885b      	ldrh	r3, [r3, #2]
 8111aee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8111af0:	429a      	cmp	r2, r3
 8111af2:	d132      	bne.n	8111b5a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8111af4:	69fb      	ldr	r3, [r7, #28]
 8111af6:	685a      	ldr	r2, [r3, #4]
 8111af8:	4b6b      	ldr	r3, [pc, #428]	@ (8111ca8 <tcp_input+0x4a0>)
 8111afa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8111afc:	429a      	cmp	r2, r3
 8111afe:	d12c      	bne.n	8111b5a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8111b00:	69fb      	ldr	r3, [r7, #28]
 8111b02:	681a      	ldr	r2, [r3, #0]
 8111b04:	4b68      	ldr	r3, [pc, #416]	@ (8111ca8 <tcp_input+0x4a0>)
 8111b06:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8111b08:	429a      	cmp	r2, r3
 8111b0a:	d126      	bne.n	8111b5a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8111b0c:	69fb      	ldr	r3, [r7, #28]
 8111b0e:	68db      	ldr	r3, [r3, #12]
 8111b10:	69fa      	ldr	r2, [r7, #28]
 8111b12:	429a      	cmp	r2, r3
 8111b14:	d106      	bne.n	8111b24 <tcp_input+0x31c>
 8111b16:	4b65      	ldr	r3, [pc, #404]	@ (8111cac <tcp_input+0x4a4>)
 8111b18:	f240 120d 	movw	r2, #269	@ 0x10d
 8111b1c:	4964      	ldr	r1, [pc, #400]	@ (8111cb0 <tcp_input+0x4a8>)
 8111b1e:	4865      	ldr	r0, [pc, #404]	@ (8111cb4 <tcp_input+0x4ac>)
 8111b20:	f004 fee2 	bl	81168e8 <iprintf>
      if (prev != NULL) {
 8111b24:	69bb      	ldr	r3, [r7, #24]
 8111b26:	2b00      	cmp	r3, #0
 8111b28:	d00a      	beq.n	8111b40 <tcp_input+0x338>
        prev->next = pcb->next;
 8111b2a:	69fb      	ldr	r3, [r7, #28]
 8111b2c:	68da      	ldr	r2, [r3, #12]
 8111b2e:	69bb      	ldr	r3, [r7, #24]
 8111b30:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8111b32:	4b61      	ldr	r3, [pc, #388]	@ (8111cb8 <tcp_input+0x4b0>)
 8111b34:	681a      	ldr	r2, [r3, #0]
 8111b36:	69fb      	ldr	r3, [r7, #28]
 8111b38:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8111b3a:	4a5f      	ldr	r2, [pc, #380]	@ (8111cb8 <tcp_input+0x4b0>)
 8111b3c:	69fb      	ldr	r3, [r7, #28]
 8111b3e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8111b40:	69fb      	ldr	r3, [r7, #28]
 8111b42:	68db      	ldr	r3, [r3, #12]
 8111b44:	69fa      	ldr	r2, [r7, #28]
 8111b46:	429a      	cmp	r2, r3
 8111b48:	d111      	bne.n	8111b6e <tcp_input+0x366>
 8111b4a:	4b58      	ldr	r3, [pc, #352]	@ (8111cac <tcp_input+0x4a4>)
 8111b4c:	f240 1215 	movw	r2, #277	@ 0x115
 8111b50:	495a      	ldr	r1, [pc, #360]	@ (8111cbc <tcp_input+0x4b4>)
 8111b52:	4858      	ldr	r0, [pc, #352]	@ (8111cb4 <tcp_input+0x4ac>)
 8111b54:	f004 fec8 	bl	81168e8 <iprintf>
      break;
 8111b58:	e009      	b.n	8111b6e <tcp_input+0x366>
    }
    prev = pcb;
 8111b5a:	69fb      	ldr	r3, [r7, #28]
 8111b5c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8111b5e:	69fb      	ldr	r3, [r7, #28]
 8111b60:	68db      	ldr	r3, [r3, #12]
 8111b62:	61fb      	str	r3, [r7, #28]
 8111b64:	69fb      	ldr	r3, [r7, #28]
 8111b66:	2b00      	cmp	r3, #0
 8111b68:	f47f af5e 	bne.w	8111a28 <tcp_input+0x220>
 8111b6c:	e000      	b.n	8111b70 <tcp_input+0x368>
      break;
 8111b6e:	bf00      	nop
  }

  if (pcb == NULL) {
 8111b70:	69fb      	ldr	r3, [r7, #28]
 8111b72:	2b00      	cmp	r3, #0
 8111b74:	f040 80aa 	bne.w	8111ccc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8111b78:	4b51      	ldr	r3, [pc, #324]	@ (8111cc0 <tcp_input+0x4b8>)
 8111b7a:	681b      	ldr	r3, [r3, #0]
 8111b7c:	61fb      	str	r3, [r7, #28]
 8111b7e:	e03f      	b.n	8111c00 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8111b80:	69fb      	ldr	r3, [r7, #28]
 8111b82:	7d1b      	ldrb	r3, [r3, #20]
 8111b84:	2b0a      	cmp	r3, #10
 8111b86:	d006      	beq.n	8111b96 <tcp_input+0x38e>
 8111b88:	4b48      	ldr	r3, [pc, #288]	@ (8111cac <tcp_input+0x4a4>)
 8111b8a:	f240 121f 	movw	r2, #287	@ 0x11f
 8111b8e:	494d      	ldr	r1, [pc, #308]	@ (8111cc4 <tcp_input+0x4bc>)
 8111b90:	4848      	ldr	r0, [pc, #288]	@ (8111cb4 <tcp_input+0x4ac>)
 8111b92:	f004 fea9 	bl	81168e8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8111b96:	69fb      	ldr	r3, [r7, #28]
 8111b98:	7a1b      	ldrb	r3, [r3, #8]
 8111b9a:	2b00      	cmp	r3, #0
 8111b9c:	d009      	beq.n	8111bb2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8111b9e:	69fb      	ldr	r3, [r7, #28]
 8111ba0:	7a1a      	ldrb	r2, [r3, #8]
 8111ba2:	4b41      	ldr	r3, [pc, #260]	@ (8111ca8 <tcp_input+0x4a0>)
 8111ba4:	685b      	ldr	r3, [r3, #4]
 8111ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8111baa:	3301      	adds	r3, #1
 8111bac:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8111bae:	429a      	cmp	r2, r3
 8111bb0:	d122      	bne.n	8111bf8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8111bb2:	69fb      	ldr	r3, [r7, #28]
 8111bb4:	8b1a      	ldrh	r2, [r3, #24]
 8111bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8111ca4 <tcp_input+0x49c>)
 8111bb8:	681b      	ldr	r3, [r3, #0]
 8111bba:	881b      	ldrh	r3, [r3, #0]
 8111bbc:	b29b      	uxth	r3, r3
 8111bbe:	429a      	cmp	r2, r3
 8111bc0:	d11b      	bne.n	8111bfa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8111bc2:	69fb      	ldr	r3, [r7, #28]
 8111bc4:	8ada      	ldrh	r2, [r3, #22]
 8111bc6:	4b37      	ldr	r3, [pc, #220]	@ (8111ca4 <tcp_input+0x49c>)
 8111bc8:	681b      	ldr	r3, [r3, #0]
 8111bca:	885b      	ldrh	r3, [r3, #2]
 8111bcc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8111bce:	429a      	cmp	r2, r3
 8111bd0:	d113      	bne.n	8111bfa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8111bd2:	69fb      	ldr	r3, [r7, #28]
 8111bd4:	685a      	ldr	r2, [r3, #4]
 8111bd6:	4b34      	ldr	r3, [pc, #208]	@ (8111ca8 <tcp_input+0x4a0>)
 8111bd8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8111bda:	429a      	cmp	r2, r3
 8111bdc:	d10d      	bne.n	8111bfa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8111bde:	69fb      	ldr	r3, [r7, #28]
 8111be0:	681a      	ldr	r2, [r3, #0]
 8111be2:	4b31      	ldr	r3, [pc, #196]	@ (8111ca8 <tcp_input+0x4a0>)
 8111be4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8111be6:	429a      	cmp	r2, r3
 8111be8:	d107      	bne.n	8111bfa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8111bea:	69f8      	ldr	r0, [r7, #28]
 8111bec:	f000 fb56 	bl	811229c <tcp_timewait_input>
        }
        pbuf_free(p);
 8111bf0:	6878      	ldr	r0, [r7, #4]
 8111bf2:	f7fd fecd 	bl	810f990 <pbuf_free>
        return;
 8111bf6:	e1fd      	b.n	8111ff4 <tcp_input+0x7ec>
        continue;
 8111bf8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8111bfa:	69fb      	ldr	r3, [r7, #28]
 8111bfc:	68db      	ldr	r3, [r3, #12]
 8111bfe:	61fb      	str	r3, [r7, #28]
 8111c00:	69fb      	ldr	r3, [r7, #28]
 8111c02:	2b00      	cmp	r3, #0
 8111c04:	d1bc      	bne.n	8111b80 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8111c06:	2300      	movs	r3, #0
 8111c08:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8111c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8111cc8 <tcp_input+0x4c0>)
 8111c0c:	681b      	ldr	r3, [r3, #0]
 8111c0e:	617b      	str	r3, [r7, #20]
 8111c10:	e02a      	b.n	8111c68 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8111c12:	697b      	ldr	r3, [r7, #20]
 8111c14:	7a1b      	ldrb	r3, [r3, #8]
 8111c16:	2b00      	cmp	r3, #0
 8111c18:	d00c      	beq.n	8111c34 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8111c1a:	697b      	ldr	r3, [r7, #20]
 8111c1c:	7a1a      	ldrb	r2, [r3, #8]
 8111c1e:	4b22      	ldr	r3, [pc, #136]	@ (8111ca8 <tcp_input+0x4a0>)
 8111c20:	685b      	ldr	r3, [r3, #4]
 8111c22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8111c26:	3301      	adds	r3, #1
 8111c28:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8111c2a:	429a      	cmp	r2, r3
 8111c2c:	d002      	beq.n	8111c34 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8111c2e:	697b      	ldr	r3, [r7, #20]
 8111c30:	61bb      	str	r3, [r7, #24]
        continue;
 8111c32:	e016      	b.n	8111c62 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8111c34:	697b      	ldr	r3, [r7, #20]
 8111c36:	8ada      	ldrh	r2, [r3, #22]
 8111c38:	4b1a      	ldr	r3, [pc, #104]	@ (8111ca4 <tcp_input+0x49c>)
 8111c3a:	681b      	ldr	r3, [r3, #0]
 8111c3c:	885b      	ldrh	r3, [r3, #2]
 8111c3e:	b29b      	uxth	r3, r3
 8111c40:	429a      	cmp	r2, r3
 8111c42:	d10c      	bne.n	8111c5e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8111c44:	697b      	ldr	r3, [r7, #20]
 8111c46:	681a      	ldr	r2, [r3, #0]
 8111c48:	4b17      	ldr	r3, [pc, #92]	@ (8111ca8 <tcp_input+0x4a0>)
 8111c4a:	695b      	ldr	r3, [r3, #20]
 8111c4c:	429a      	cmp	r2, r3
 8111c4e:	d00f      	beq.n	8111c70 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8111c50:	697b      	ldr	r3, [r7, #20]
 8111c52:	2b00      	cmp	r3, #0
 8111c54:	d00d      	beq.n	8111c72 <tcp_input+0x46a>
 8111c56:	697b      	ldr	r3, [r7, #20]
 8111c58:	681b      	ldr	r3, [r3, #0]
 8111c5a:	2b00      	cmp	r3, #0
 8111c5c:	d009      	beq.n	8111c72 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8111c5e:	697b      	ldr	r3, [r7, #20]
 8111c60:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8111c62:	697b      	ldr	r3, [r7, #20]
 8111c64:	68db      	ldr	r3, [r3, #12]
 8111c66:	617b      	str	r3, [r7, #20]
 8111c68:	697b      	ldr	r3, [r7, #20]
 8111c6a:	2b00      	cmp	r3, #0
 8111c6c:	d1d1      	bne.n	8111c12 <tcp_input+0x40a>
 8111c6e:	e000      	b.n	8111c72 <tcp_input+0x46a>
            break;
 8111c70:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8111c72:	697b      	ldr	r3, [r7, #20]
 8111c74:	2b00      	cmp	r3, #0
 8111c76:	d029      	beq.n	8111ccc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8111c78:	69bb      	ldr	r3, [r7, #24]
 8111c7a:	2b00      	cmp	r3, #0
 8111c7c:	d00a      	beq.n	8111c94 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8111c7e:	697b      	ldr	r3, [r7, #20]
 8111c80:	68da      	ldr	r2, [r3, #12]
 8111c82:	69bb      	ldr	r3, [r7, #24]
 8111c84:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8111c86:	4b10      	ldr	r3, [pc, #64]	@ (8111cc8 <tcp_input+0x4c0>)
 8111c88:	681a      	ldr	r2, [r3, #0]
 8111c8a:	697b      	ldr	r3, [r7, #20]
 8111c8c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8111c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8111cc8 <tcp_input+0x4c0>)
 8111c90:	697b      	ldr	r3, [r7, #20]
 8111c92:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8111c94:	6978      	ldr	r0, [r7, #20]
 8111c96:	f000 fa03 	bl	81120a0 <tcp_listen_input>
      }
      pbuf_free(p);
 8111c9a:	6878      	ldr	r0, [r7, #4]
 8111c9c:	f7fd fe78 	bl	810f990 <pbuf_free>
      return;
 8111ca0:	e1a8      	b.n	8111ff4 <tcp_input+0x7ec>
 8111ca2:	bf00      	nop
 8111ca4:	1000b874 	.word	0x1000b874
 8111ca8:	10004d7c 	.word	0x10004d7c
 8111cac:	081192cc 	.word	0x081192cc
 8111cb0:	08119438 	.word	0x08119438
 8111cb4:	08119358 	.word	0x08119358
 8111cb8:	1000b858 	.word	0x1000b858
 8111cbc:	08119464 	.word	0x08119464
 8111cc0:	1000b85c 	.word	0x1000b85c
 8111cc4:	08119490 	.word	0x08119490
 8111cc8:	1000b854 	.word	0x1000b854
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8111ccc:	69fb      	ldr	r3, [r7, #28]
 8111cce:	2b00      	cmp	r3, #0
 8111cd0:	f000 8158 	beq.w	8111f84 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8111cd4:	4b95      	ldr	r3, [pc, #596]	@ (8111f2c <tcp_input+0x724>)
 8111cd6:	2200      	movs	r2, #0
 8111cd8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8111cda:	687b      	ldr	r3, [r7, #4]
 8111cdc:	891a      	ldrh	r2, [r3, #8]
 8111cde:	4b93      	ldr	r3, [pc, #588]	@ (8111f2c <tcp_input+0x724>)
 8111ce0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8111ce2:	4a92      	ldr	r2, [pc, #584]	@ (8111f2c <tcp_input+0x724>)
 8111ce4:	687b      	ldr	r3, [r7, #4]
 8111ce6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8111ce8:	4b91      	ldr	r3, [pc, #580]	@ (8111f30 <tcp_input+0x728>)
 8111cea:	681b      	ldr	r3, [r3, #0]
 8111cec:	4a8f      	ldr	r2, [pc, #572]	@ (8111f2c <tcp_input+0x724>)
 8111cee:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8111cf0:	4b90      	ldr	r3, [pc, #576]	@ (8111f34 <tcp_input+0x72c>)
 8111cf2:	2200      	movs	r2, #0
 8111cf4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8111cf6:	4b90      	ldr	r3, [pc, #576]	@ (8111f38 <tcp_input+0x730>)
 8111cf8:	2200      	movs	r2, #0
 8111cfa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8111cfc:	4b8f      	ldr	r3, [pc, #572]	@ (8111f3c <tcp_input+0x734>)
 8111cfe:	2200      	movs	r2, #0
 8111d00:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8111d02:	4b8f      	ldr	r3, [pc, #572]	@ (8111f40 <tcp_input+0x738>)
 8111d04:	781b      	ldrb	r3, [r3, #0]
 8111d06:	f003 0308 	and.w	r3, r3, #8
 8111d0a:	2b00      	cmp	r3, #0
 8111d0c:	d006      	beq.n	8111d1c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8111d0e:	687b      	ldr	r3, [r7, #4]
 8111d10:	7b5b      	ldrb	r3, [r3, #13]
 8111d12:	f043 0301 	orr.w	r3, r3, #1
 8111d16:	b2da      	uxtb	r2, r3
 8111d18:	687b      	ldr	r3, [r7, #4]
 8111d1a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8111d1c:	69fb      	ldr	r3, [r7, #28]
 8111d1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8111d20:	2b00      	cmp	r3, #0
 8111d22:	d017      	beq.n	8111d54 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8111d24:	69f8      	ldr	r0, [r7, #28]
 8111d26:	f7ff f927 	bl	8110f78 <tcp_process_refused_data>
 8111d2a:	4603      	mov	r3, r0
 8111d2c:	f113 0f0d 	cmn.w	r3, #13
 8111d30:	d007      	beq.n	8111d42 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8111d32:	69fb      	ldr	r3, [r7, #28]
 8111d34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8111d36:	2b00      	cmp	r3, #0
 8111d38:	d00c      	beq.n	8111d54 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8111d3a:	4b82      	ldr	r3, [pc, #520]	@ (8111f44 <tcp_input+0x73c>)
 8111d3c:	881b      	ldrh	r3, [r3, #0]
 8111d3e:	2b00      	cmp	r3, #0
 8111d40:	d008      	beq.n	8111d54 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8111d42:	69fb      	ldr	r3, [r7, #28]
 8111d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8111d46:	2b00      	cmp	r3, #0
 8111d48:	f040 80e4 	bne.w	8111f14 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8111d4c:	69f8      	ldr	r0, [r7, #28]
 8111d4e:	f003 f9a9 	bl	81150a4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8111d52:	e0df      	b.n	8111f14 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8111d54:	4a7c      	ldr	r2, [pc, #496]	@ (8111f48 <tcp_input+0x740>)
 8111d56:	69fb      	ldr	r3, [r7, #28]
 8111d58:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8111d5a:	69f8      	ldr	r0, [r7, #28]
 8111d5c:	f000 fb18 	bl	8112390 <tcp_process>
 8111d60:	4603      	mov	r3, r0
 8111d62:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8111d64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8111d68:	f113 0f0d 	cmn.w	r3, #13
 8111d6c:	f000 80d4 	beq.w	8111f18 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8111d70:	4b71      	ldr	r3, [pc, #452]	@ (8111f38 <tcp_input+0x730>)
 8111d72:	781b      	ldrb	r3, [r3, #0]
 8111d74:	f003 0308 	and.w	r3, r3, #8
 8111d78:	2b00      	cmp	r3, #0
 8111d7a:	d015      	beq.n	8111da8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8111d7c:	69fb      	ldr	r3, [r7, #28]
 8111d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8111d82:	2b00      	cmp	r3, #0
 8111d84:	d008      	beq.n	8111d98 <tcp_input+0x590>
 8111d86:	69fb      	ldr	r3, [r7, #28]
 8111d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8111d8c:	69fa      	ldr	r2, [r7, #28]
 8111d8e:	6912      	ldr	r2, [r2, #16]
 8111d90:	f06f 010d 	mvn.w	r1, #13
 8111d94:	4610      	mov	r0, r2
 8111d96:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8111d98:	69f9      	ldr	r1, [r7, #28]
 8111d9a:	486c      	ldr	r0, [pc, #432]	@ (8111f4c <tcp_input+0x744>)
 8111d9c:	f7ff fbbc 	bl	8111518 <tcp_pcb_remove>
        tcp_free(pcb);
 8111da0:	69f8      	ldr	r0, [r7, #28]
 8111da2:	f7fe f9a3 	bl	81100ec <tcp_free>
 8111da6:	e0da      	b.n	8111f5e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8111da8:	2300      	movs	r3, #0
 8111daa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8111dac:	4b63      	ldr	r3, [pc, #396]	@ (8111f3c <tcp_input+0x734>)
 8111dae:	881b      	ldrh	r3, [r3, #0]
 8111db0:	2b00      	cmp	r3, #0
 8111db2:	d01d      	beq.n	8111df0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8111db4:	4b61      	ldr	r3, [pc, #388]	@ (8111f3c <tcp_input+0x734>)
 8111db6:	881b      	ldrh	r3, [r3, #0]
 8111db8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8111dba:	69fb      	ldr	r3, [r7, #28]
 8111dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8111dc0:	2b00      	cmp	r3, #0
 8111dc2:	d00a      	beq.n	8111dda <tcp_input+0x5d2>
 8111dc4:	69fb      	ldr	r3, [r7, #28]
 8111dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8111dca:	69fa      	ldr	r2, [r7, #28]
 8111dcc:	6910      	ldr	r0, [r2, #16]
 8111dce:	89fa      	ldrh	r2, [r7, #14]
 8111dd0:	69f9      	ldr	r1, [r7, #28]
 8111dd2:	4798      	blx	r3
 8111dd4:	4603      	mov	r3, r0
 8111dd6:	74fb      	strb	r3, [r7, #19]
 8111dd8:	e001      	b.n	8111dde <tcp_input+0x5d6>
 8111dda:	2300      	movs	r3, #0
 8111ddc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8111dde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8111de2:	f113 0f0d 	cmn.w	r3, #13
 8111de6:	f000 8099 	beq.w	8111f1c <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8111dea:	4b54      	ldr	r3, [pc, #336]	@ (8111f3c <tcp_input+0x734>)
 8111dec:	2200      	movs	r2, #0
 8111dee:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8111df0:	69f8      	ldr	r0, [r7, #28]
 8111df2:	f000 f915 	bl	8112020 <tcp_input_delayed_close>
 8111df6:	4603      	mov	r3, r0
 8111df8:	2b00      	cmp	r3, #0
 8111dfa:	f040 8091 	bne.w	8111f20 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8111dfe:	4b4d      	ldr	r3, [pc, #308]	@ (8111f34 <tcp_input+0x72c>)
 8111e00:	681b      	ldr	r3, [r3, #0]
 8111e02:	2b00      	cmp	r3, #0
 8111e04:	d041      	beq.n	8111e8a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8111e06:	69fb      	ldr	r3, [r7, #28]
 8111e08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8111e0a:	2b00      	cmp	r3, #0
 8111e0c:	d006      	beq.n	8111e1c <tcp_input+0x614>
 8111e0e:	4b50      	ldr	r3, [pc, #320]	@ (8111f50 <tcp_input+0x748>)
 8111e10:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8111e14:	494f      	ldr	r1, [pc, #316]	@ (8111f54 <tcp_input+0x74c>)
 8111e16:	4850      	ldr	r0, [pc, #320]	@ (8111f58 <tcp_input+0x750>)
 8111e18:	f004 fd66 	bl	81168e8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8111e1c:	69fb      	ldr	r3, [r7, #28]
 8111e1e:	8b5b      	ldrh	r3, [r3, #26]
 8111e20:	f003 0310 	and.w	r3, r3, #16
 8111e24:	2b00      	cmp	r3, #0
 8111e26:	d008      	beq.n	8111e3a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8111e28:	4b42      	ldr	r3, [pc, #264]	@ (8111f34 <tcp_input+0x72c>)
 8111e2a:	681b      	ldr	r3, [r3, #0]
 8111e2c:	4618      	mov	r0, r3
 8111e2e:	f7fd fdaf 	bl	810f990 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8111e32:	69f8      	ldr	r0, [r7, #28]
 8111e34:	f7fe fc42 	bl	81106bc <tcp_abort>
            goto aborted;
 8111e38:	e091      	b.n	8111f5e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8111e3a:	69fb      	ldr	r3, [r7, #28]
 8111e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8111e40:	2b00      	cmp	r3, #0
 8111e42:	d00c      	beq.n	8111e5e <tcp_input+0x656>
 8111e44:	69fb      	ldr	r3, [r7, #28]
 8111e46:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8111e4a:	69fb      	ldr	r3, [r7, #28]
 8111e4c:	6918      	ldr	r0, [r3, #16]
 8111e4e:	4b39      	ldr	r3, [pc, #228]	@ (8111f34 <tcp_input+0x72c>)
 8111e50:	681a      	ldr	r2, [r3, #0]
 8111e52:	2300      	movs	r3, #0
 8111e54:	69f9      	ldr	r1, [r7, #28]
 8111e56:	47a0      	blx	r4
 8111e58:	4603      	mov	r3, r0
 8111e5a:	74fb      	strb	r3, [r7, #19]
 8111e5c:	e008      	b.n	8111e70 <tcp_input+0x668>
 8111e5e:	4b35      	ldr	r3, [pc, #212]	@ (8111f34 <tcp_input+0x72c>)
 8111e60:	681a      	ldr	r2, [r3, #0]
 8111e62:	2300      	movs	r3, #0
 8111e64:	69f9      	ldr	r1, [r7, #28]
 8111e66:	2000      	movs	r0, #0
 8111e68:	f7ff f95e 	bl	8111128 <tcp_recv_null>
 8111e6c:	4603      	mov	r3, r0
 8111e6e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8111e70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8111e74:	f113 0f0d 	cmn.w	r3, #13
 8111e78:	d054      	beq.n	8111f24 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8111e7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8111e7e:	2b00      	cmp	r3, #0
 8111e80:	d003      	beq.n	8111e8a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8111e82:	4b2c      	ldr	r3, [pc, #176]	@ (8111f34 <tcp_input+0x72c>)
 8111e84:	681a      	ldr	r2, [r3, #0]
 8111e86:	69fb      	ldr	r3, [r7, #28]
 8111e88:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8111e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8111f38 <tcp_input+0x730>)
 8111e8c:	781b      	ldrb	r3, [r3, #0]
 8111e8e:	f003 0320 	and.w	r3, r3, #32
 8111e92:	2b00      	cmp	r3, #0
 8111e94:	d031      	beq.n	8111efa <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8111e96:	69fb      	ldr	r3, [r7, #28]
 8111e98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8111e9a:	2b00      	cmp	r3, #0
 8111e9c:	d009      	beq.n	8111eb2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8111e9e:	69fb      	ldr	r3, [r7, #28]
 8111ea0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8111ea2:	7b5a      	ldrb	r2, [r3, #13]
 8111ea4:	69fb      	ldr	r3, [r7, #28]
 8111ea6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8111ea8:	f042 0220 	orr.w	r2, r2, #32
 8111eac:	b2d2      	uxtb	r2, r2
 8111eae:	735a      	strb	r2, [r3, #13]
 8111eb0:	e023      	b.n	8111efa <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8111eb2:	69fb      	ldr	r3, [r7, #28]
 8111eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8111eb6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8111eba:	4293      	cmp	r3, r2
 8111ebc:	d005      	beq.n	8111eca <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8111ebe:	69fb      	ldr	r3, [r7, #28]
 8111ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8111ec2:	3301      	adds	r3, #1
 8111ec4:	b29a      	uxth	r2, r3
 8111ec6:	69fb      	ldr	r3, [r7, #28]
 8111ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8111eca:	69fb      	ldr	r3, [r7, #28]
 8111ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8111ed0:	2b00      	cmp	r3, #0
 8111ed2:	d00b      	beq.n	8111eec <tcp_input+0x6e4>
 8111ed4:	69fb      	ldr	r3, [r7, #28]
 8111ed6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8111eda:	69fb      	ldr	r3, [r7, #28]
 8111edc:	6918      	ldr	r0, [r3, #16]
 8111ede:	2300      	movs	r3, #0
 8111ee0:	2200      	movs	r2, #0
 8111ee2:	69f9      	ldr	r1, [r7, #28]
 8111ee4:	47a0      	blx	r4
 8111ee6:	4603      	mov	r3, r0
 8111ee8:	74fb      	strb	r3, [r7, #19]
 8111eea:	e001      	b.n	8111ef0 <tcp_input+0x6e8>
 8111eec:	2300      	movs	r3, #0
 8111eee:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8111ef0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8111ef4:	f113 0f0d 	cmn.w	r3, #13
 8111ef8:	d016      	beq.n	8111f28 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8111efa:	4b13      	ldr	r3, [pc, #76]	@ (8111f48 <tcp_input+0x740>)
 8111efc:	2200      	movs	r2, #0
 8111efe:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8111f00:	69f8      	ldr	r0, [r7, #28]
 8111f02:	f000 f88d 	bl	8112020 <tcp_input_delayed_close>
 8111f06:	4603      	mov	r3, r0
 8111f08:	2b00      	cmp	r3, #0
 8111f0a:	d127      	bne.n	8111f5c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8111f0c:	69f8      	ldr	r0, [r7, #28]
 8111f0e:	f002 fac3 	bl	8114498 <tcp_output>
 8111f12:	e024      	b.n	8111f5e <tcp_input+0x756>
        goto aborted;
 8111f14:	bf00      	nop
 8111f16:	e022      	b.n	8111f5e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8111f18:	bf00      	nop
 8111f1a:	e020      	b.n	8111f5e <tcp_input+0x756>
              goto aborted;
 8111f1c:	bf00      	nop
 8111f1e:	e01e      	b.n	8111f5e <tcp_input+0x756>
          goto aborted;
 8111f20:	bf00      	nop
 8111f22:	e01c      	b.n	8111f5e <tcp_input+0x756>
            goto aborted;
 8111f24:	bf00      	nop
 8111f26:	e01a      	b.n	8111f5e <tcp_input+0x756>
              goto aborted;
 8111f28:	bf00      	nop
 8111f2a:	e018      	b.n	8111f5e <tcp_input+0x756>
 8111f2c:	1000b864 	.word	0x1000b864
 8111f30:	1000b874 	.word	0x1000b874
 8111f34:	1000b894 	.word	0x1000b894
 8111f38:	1000b891 	.word	0x1000b891
 8111f3c:	1000b88c 	.word	0x1000b88c
 8111f40:	1000b890 	.word	0x1000b890
 8111f44:	1000b88e 	.word	0x1000b88e
 8111f48:	1000b898 	.word	0x1000b898
 8111f4c:	1000b858 	.word	0x1000b858
 8111f50:	081192cc 	.word	0x081192cc
 8111f54:	081194c0 	.word	0x081194c0
 8111f58:	08119358 	.word	0x08119358
          goto aborted;
 8111f5c:	bf00      	nop
    tcp_input_pcb = NULL;
 8111f5e:	4b27      	ldr	r3, [pc, #156]	@ (8111ffc <tcp_input+0x7f4>)
 8111f60:	2200      	movs	r2, #0
 8111f62:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8111f64:	4b26      	ldr	r3, [pc, #152]	@ (8112000 <tcp_input+0x7f8>)
 8111f66:	2200      	movs	r2, #0
 8111f68:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8111f6a:	4b26      	ldr	r3, [pc, #152]	@ (8112004 <tcp_input+0x7fc>)
 8111f6c:	685b      	ldr	r3, [r3, #4]
 8111f6e:	2b00      	cmp	r3, #0
 8111f70:	d03f      	beq.n	8111ff2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8111f72:	4b24      	ldr	r3, [pc, #144]	@ (8112004 <tcp_input+0x7fc>)
 8111f74:	685b      	ldr	r3, [r3, #4]
 8111f76:	4618      	mov	r0, r3
 8111f78:	f7fd fd0a 	bl	810f990 <pbuf_free>
      inseg.p = NULL;
 8111f7c:	4b21      	ldr	r3, [pc, #132]	@ (8112004 <tcp_input+0x7fc>)
 8111f7e:	2200      	movs	r2, #0
 8111f80:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8111f82:	e036      	b.n	8111ff2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8111f84:	4b20      	ldr	r3, [pc, #128]	@ (8112008 <tcp_input+0x800>)
 8111f86:	681b      	ldr	r3, [r3, #0]
 8111f88:	899b      	ldrh	r3, [r3, #12]
 8111f8a:	b29b      	uxth	r3, r3
 8111f8c:	4618      	mov	r0, r3
 8111f8e:	f7f9 fd55 	bl	810ba3c <lwip_htons>
 8111f92:	4603      	mov	r3, r0
 8111f94:	b2db      	uxtb	r3, r3
 8111f96:	f003 0304 	and.w	r3, r3, #4
 8111f9a:	2b00      	cmp	r3, #0
 8111f9c:	d118      	bne.n	8111fd0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8111f9e:	4b1b      	ldr	r3, [pc, #108]	@ (811200c <tcp_input+0x804>)
 8111fa0:	6819      	ldr	r1, [r3, #0]
 8111fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8112010 <tcp_input+0x808>)
 8111fa4:	881b      	ldrh	r3, [r3, #0]
 8111fa6:	461a      	mov	r2, r3
 8111fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8112014 <tcp_input+0x80c>)
 8111faa:	681b      	ldr	r3, [r3, #0]
 8111fac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8111fae:	4b16      	ldr	r3, [pc, #88]	@ (8112008 <tcp_input+0x800>)
 8111fb0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8111fb2:	885b      	ldrh	r3, [r3, #2]
 8111fb4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8111fb6:	4a14      	ldr	r2, [pc, #80]	@ (8112008 <tcp_input+0x800>)
 8111fb8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8111fba:	8812      	ldrh	r2, [r2, #0]
 8111fbc:	b292      	uxth	r2, r2
 8111fbe:	9202      	str	r2, [sp, #8]
 8111fc0:	9301      	str	r3, [sp, #4]
 8111fc2:	4b15      	ldr	r3, [pc, #84]	@ (8112018 <tcp_input+0x810>)
 8111fc4:	9300      	str	r3, [sp, #0]
 8111fc6:	4b15      	ldr	r3, [pc, #84]	@ (811201c <tcp_input+0x814>)
 8111fc8:	4602      	mov	r2, r0
 8111fca:	2000      	movs	r0, #0
 8111fcc:	f003 f818 	bl	8115000 <tcp_rst>
    pbuf_free(p);
 8111fd0:	6878      	ldr	r0, [r7, #4]
 8111fd2:	f7fd fcdd 	bl	810f990 <pbuf_free>
  return;
 8111fd6:	e00c      	b.n	8111ff2 <tcp_input+0x7ea>
    goto dropped;
 8111fd8:	bf00      	nop
 8111fda:	e006      	b.n	8111fea <tcp_input+0x7e2>
    goto dropped;
 8111fdc:	bf00      	nop
 8111fde:	e004      	b.n	8111fea <tcp_input+0x7e2>
    goto dropped;
 8111fe0:	bf00      	nop
 8111fe2:	e002      	b.n	8111fea <tcp_input+0x7e2>
      goto dropped;
 8111fe4:	bf00      	nop
 8111fe6:	e000      	b.n	8111fea <tcp_input+0x7e2>
      goto dropped;
 8111fe8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8111fea:	6878      	ldr	r0, [r7, #4]
 8111fec:	f7fd fcd0 	bl	810f990 <pbuf_free>
 8111ff0:	e000      	b.n	8111ff4 <tcp_input+0x7ec>
  return;
 8111ff2:	bf00      	nop
}
 8111ff4:	3724      	adds	r7, #36	@ 0x24
 8111ff6:	46bd      	mov	sp, r7
 8111ff8:	bd90      	pop	{r4, r7, pc}
 8111ffa:	bf00      	nop
 8111ffc:	1000b898 	.word	0x1000b898
 8112000:	1000b894 	.word	0x1000b894
 8112004:	1000b864 	.word	0x1000b864
 8112008:	1000b874 	.word	0x1000b874
 811200c:	1000b888 	.word	0x1000b888
 8112010:	1000b88e 	.word	0x1000b88e
 8112014:	1000b884 	.word	0x1000b884
 8112018:	10004d8c 	.word	0x10004d8c
 811201c:	10004d90 	.word	0x10004d90

08112020 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8112020:	b580      	push	{r7, lr}
 8112022:	b082      	sub	sp, #8
 8112024:	af00      	add	r7, sp, #0
 8112026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8112028:	687b      	ldr	r3, [r7, #4]
 811202a:	2b00      	cmp	r3, #0
 811202c:	d106      	bne.n	811203c <tcp_input_delayed_close+0x1c>
 811202e:	4b17      	ldr	r3, [pc, #92]	@ (811208c <tcp_input_delayed_close+0x6c>)
 8112030:	f240 225a 	movw	r2, #602	@ 0x25a
 8112034:	4916      	ldr	r1, [pc, #88]	@ (8112090 <tcp_input_delayed_close+0x70>)
 8112036:	4817      	ldr	r0, [pc, #92]	@ (8112094 <tcp_input_delayed_close+0x74>)
 8112038:	f004 fc56 	bl	81168e8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 811203c:	4b16      	ldr	r3, [pc, #88]	@ (8112098 <tcp_input_delayed_close+0x78>)
 811203e:	781b      	ldrb	r3, [r3, #0]
 8112040:	f003 0310 	and.w	r3, r3, #16
 8112044:	2b00      	cmp	r3, #0
 8112046:	d01c      	beq.n	8112082 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8112048:	687b      	ldr	r3, [r7, #4]
 811204a:	8b5b      	ldrh	r3, [r3, #26]
 811204c:	f003 0310 	and.w	r3, r3, #16
 8112050:	2b00      	cmp	r3, #0
 8112052:	d10d      	bne.n	8112070 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8112054:	687b      	ldr	r3, [r7, #4]
 8112056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811205a:	2b00      	cmp	r3, #0
 811205c:	d008      	beq.n	8112070 <tcp_input_delayed_close+0x50>
 811205e:	687b      	ldr	r3, [r7, #4]
 8112060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8112064:	687a      	ldr	r2, [r7, #4]
 8112066:	6912      	ldr	r2, [r2, #16]
 8112068:	f06f 010e 	mvn.w	r1, #14
 811206c:	4610      	mov	r0, r2
 811206e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8112070:	6879      	ldr	r1, [r7, #4]
 8112072:	480a      	ldr	r0, [pc, #40]	@ (811209c <tcp_input_delayed_close+0x7c>)
 8112074:	f7ff fa50 	bl	8111518 <tcp_pcb_remove>
    tcp_free(pcb);
 8112078:	6878      	ldr	r0, [r7, #4]
 811207a:	f7fe f837 	bl	81100ec <tcp_free>
    return 1;
 811207e:	2301      	movs	r3, #1
 8112080:	e000      	b.n	8112084 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8112082:	2300      	movs	r3, #0
}
 8112084:	4618      	mov	r0, r3
 8112086:	3708      	adds	r7, #8
 8112088:	46bd      	mov	sp, r7
 811208a:	bd80      	pop	{r7, pc}
 811208c:	081192cc 	.word	0x081192cc
 8112090:	081194dc 	.word	0x081194dc
 8112094:	08119358 	.word	0x08119358
 8112098:	1000b891 	.word	0x1000b891
 811209c:	1000b858 	.word	0x1000b858

081120a0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 81120a0:	b590      	push	{r4, r7, lr}
 81120a2:	b08b      	sub	sp, #44	@ 0x2c
 81120a4:	af04      	add	r7, sp, #16
 81120a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 81120a8:	4b6f      	ldr	r3, [pc, #444]	@ (8112268 <tcp_listen_input+0x1c8>)
 81120aa:	781b      	ldrb	r3, [r3, #0]
 81120ac:	f003 0304 	and.w	r3, r3, #4
 81120b0:	2b00      	cmp	r3, #0
 81120b2:	f040 80d2 	bne.w	811225a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 81120b6:	687b      	ldr	r3, [r7, #4]
 81120b8:	2b00      	cmp	r3, #0
 81120ba:	d106      	bne.n	81120ca <tcp_listen_input+0x2a>
 81120bc:	4b6b      	ldr	r3, [pc, #428]	@ (811226c <tcp_listen_input+0x1cc>)
 81120be:	f240 2281 	movw	r2, #641	@ 0x281
 81120c2:	496b      	ldr	r1, [pc, #428]	@ (8112270 <tcp_listen_input+0x1d0>)
 81120c4:	486b      	ldr	r0, [pc, #428]	@ (8112274 <tcp_listen_input+0x1d4>)
 81120c6:	f004 fc0f 	bl	81168e8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 81120ca:	4b67      	ldr	r3, [pc, #412]	@ (8112268 <tcp_listen_input+0x1c8>)
 81120cc:	781b      	ldrb	r3, [r3, #0]
 81120ce:	f003 0310 	and.w	r3, r3, #16
 81120d2:	2b00      	cmp	r3, #0
 81120d4:	d019      	beq.n	811210a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81120d6:	4b68      	ldr	r3, [pc, #416]	@ (8112278 <tcp_listen_input+0x1d8>)
 81120d8:	6819      	ldr	r1, [r3, #0]
 81120da:	4b68      	ldr	r3, [pc, #416]	@ (811227c <tcp_listen_input+0x1dc>)
 81120dc:	881b      	ldrh	r3, [r3, #0]
 81120de:	461a      	mov	r2, r3
 81120e0:	4b67      	ldr	r3, [pc, #412]	@ (8112280 <tcp_listen_input+0x1e0>)
 81120e2:	681b      	ldr	r3, [r3, #0]
 81120e4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81120e6:	4b67      	ldr	r3, [pc, #412]	@ (8112284 <tcp_listen_input+0x1e4>)
 81120e8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81120ea:	885b      	ldrh	r3, [r3, #2]
 81120ec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81120ee:	4a65      	ldr	r2, [pc, #404]	@ (8112284 <tcp_listen_input+0x1e4>)
 81120f0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81120f2:	8812      	ldrh	r2, [r2, #0]
 81120f4:	b292      	uxth	r2, r2
 81120f6:	9202      	str	r2, [sp, #8]
 81120f8:	9301      	str	r3, [sp, #4]
 81120fa:	4b63      	ldr	r3, [pc, #396]	@ (8112288 <tcp_listen_input+0x1e8>)
 81120fc:	9300      	str	r3, [sp, #0]
 81120fe:	4b63      	ldr	r3, [pc, #396]	@ (811228c <tcp_listen_input+0x1ec>)
 8112100:	4602      	mov	r2, r0
 8112102:	6878      	ldr	r0, [r7, #4]
 8112104:	f002 ff7c 	bl	8115000 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8112108:	e0a9      	b.n	811225e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 811210a:	4b57      	ldr	r3, [pc, #348]	@ (8112268 <tcp_listen_input+0x1c8>)
 811210c:	781b      	ldrb	r3, [r3, #0]
 811210e:	f003 0302 	and.w	r3, r3, #2
 8112112:	2b00      	cmp	r3, #0
 8112114:	f000 80a3 	beq.w	811225e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8112118:	687b      	ldr	r3, [r7, #4]
 811211a:	7d5b      	ldrb	r3, [r3, #21]
 811211c:	4618      	mov	r0, r3
 811211e:	f7ff f927 	bl	8111370 <tcp_alloc>
 8112122:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8112124:	697b      	ldr	r3, [r7, #20]
 8112126:	2b00      	cmp	r3, #0
 8112128:	d111      	bne.n	811214e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 811212a:	687b      	ldr	r3, [r7, #4]
 811212c:	699b      	ldr	r3, [r3, #24]
 811212e:	2b00      	cmp	r3, #0
 8112130:	d00a      	beq.n	8112148 <tcp_listen_input+0xa8>
 8112132:	687b      	ldr	r3, [r7, #4]
 8112134:	699b      	ldr	r3, [r3, #24]
 8112136:	687a      	ldr	r2, [r7, #4]
 8112138:	6910      	ldr	r0, [r2, #16]
 811213a:	f04f 32ff 	mov.w	r2, #4294967295
 811213e:	2100      	movs	r1, #0
 8112140:	4798      	blx	r3
 8112142:	4603      	mov	r3, r0
 8112144:	73bb      	strb	r3, [r7, #14]
      return;
 8112146:	e08b      	b.n	8112260 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8112148:	23f0      	movs	r3, #240	@ 0xf0
 811214a:	73bb      	strb	r3, [r7, #14]
      return;
 811214c:	e088      	b.n	8112260 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 811214e:	4b50      	ldr	r3, [pc, #320]	@ (8112290 <tcp_listen_input+0x1f0>)
 8112150:	695a      	ldr	r2, [r3, #20]
 8112152:	697b      	ldr	r3, [r7, #20]
 8112154:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8112156:	4b4e      	ldr	r3, [pc, #312]	@ (8112290 <tcp_listen_input+0x1f0>)
 8112158:	691a      	ldr	r2, [r3, #16]
 811215a:	697b      	ldr	r3, [r7, #20]
 811215c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 811215e:	687b      	ldr	r3, [r7, #4]
 8112160:	8ada      	ldrh	r2, [r3, #22]
 8112162:	697b      	ldr	r3, [r7, #20]
 8112164:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8112166:	4b47      	ldr	r3, [pc, #284]	@ (8112284 <tcp_listen_input+0x1e4>)
 8112168:	681b      	ldr	r3, [r3, #0]
 811216a:	881b      	ldrh	r3, [r3, #0]
 811216c:	b29a      	uxth	r2, r3
 811216e:	697b      	ldr	r3, [r7, #20]
 8112170:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8112172:	697b      	ldr	r3, [r7, #20]
 8112174:	2203      	movs	r2, #3
 8112176:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8112178:	4b41      	ldr	r3, [pc, #260]	@ (8112280 <tcp_listen_input+0x1e0>)
 811217a:	681b      	ldr	r3, [r3, #0]
 811217c:	1c5a      	adds	r2, r3, #1
 811217e:	697b      	ldr	r3, [r7, #20]
 8112180:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8112182:	697b      	ldr	r3, [r7, #20]
 8112184:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8112186:	697b      	ldr	r3, [r7, #20]
 8112188:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 811218a:	6978      	ldr	r0, [r7, #20]
 811218c:	f7ff fa58 	bl	8111640 <tcp_next_iss>
 8112190:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8112192:	697b      	ldr	r3, [r7, #20]
 8112194:	693a      	ldr	r2, [r7, #16]
 8112196:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8112198:	697b      	ldr	r3, [r7, #20]
 811219a:	693a      	ldr	r2, [r7, #16]
 811219c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 811219e:	697b      	ldr	r3, [r7, #20]
 81121a0:	693a      	ldr	r2, [r7, #16]
 81121a2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 81121a4:	697b      	ldr	r3, [r7, #20]
 81121a6:	693a      	ldr	r2, [r7, #16]
 81121a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 81121aa:	4b35      	ldr	r3, [pc, #212]	@ (8112280 <tcp_listen_input+0x1e0>)
 81121ac:	681b      	ldr	r3, [r3, #0]
 81121ae:	1e5a      	subs	r2, r3, #1
 81121b0:	697b      	ldr	r3, [r7, #20]
 81121b2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 81121b4:	687b      	ldr	r3, [r7, #4]
 81121b6:	691a      	ldr	r2, [r3, #16]
 81121b8:	697b      	ldr	r3, [r7, #20]
 81121ba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 81121bc:	697b      	ldr	r3, [r7, #20]
 81121be:	687a      	ldr	r2, [r7, #4]
 81121c0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 81121c2:	687b      	ldr	r3, [r7, #4]
 81121c4:	7a5b      	ldrb	r3, [r3, #9]
 81121c6:	f003 030c 	and.w	r3, r3, #12
 81121ca:	b2da      	uxtb	r2, r3
 81121cc:	697b      	ldr	r3, [r7, #20]
 81121ce:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 81121d0:	687b      	ldr	r3, [r7, #4]
 81121d2:	7a1a      	ldrb	r2, [r3, #8]
 81121d4:	697b      	ldr	r3, [r7, #20]
 81121d6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 81121d8:	4b2e      	ldr	r3, [pc, #184]	@ (8112294 <tcp_listen_input+0x1f4>)
 81121da:	681a      	ldr	r2, [r3, #0]
 81121dc:	697b      	ldr	r3, [r7, #20]
 81121de:	60da      	str	r2, [r3, #12]
 81121e0:	4a2c      	ldr	r2, [pc, #176]	@ (8112294 <tcp_listen_input+0x1f4>)
 81121e2:	697b      	ldr	r3, [r7, #20]
 81121e4:	6013      	str	r3, [r2, #0]
 81121e6:	f003 fa6f 	bl	81156c8 <tcp_timer_needed>
 81121ea:	4b2b      	ldr	r3, [pc, #172]	@ (8112298 <tcp_listen_input+0x1f8>)
 81121ec:	2201      	movs	r2, #1
 81121ee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 81121f0:	6978      	ldr	r0, [r7, #20]
 81121f2:	f001 fd8b 	bl	8113d0c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 81121f6:	4b23      	ldr	r3, [pc, #140]	@ (8112284 <tcp_listen_input+0x1e4>)
 81121f8:	681b      	ldr	r3, [r3, #0]
 81121fa:	89db      	ldrh	r3, [r3, #14]
 81121fc:	b29a      	uxth	r2, r3
 81121fe:	697b      	ldr	r3, [r7, #20]
 8112200:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8112204:	697b      	ldr	r3, [r7, #20]
 8112206:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811220a:	697b      	ldr	r3, [r7, #20]
 811220c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8112210:	697b      	ldr	r3, [r7, #20]
 8112212:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8112214:	697b      	ldr	r3, [r7, #20]
 8112216:	3304      	adds	r3, #4
 8112218:	4618      	mov	r0, r3
 811221a:	f7fa fee7 	bl	810cfec <ip4_route>
 811221e:	4601      	mov	r1, r0
 8112220:	697b      	ldr	r3, [r7, #20]
 8112222:	3304      	adds	r3, #4
 8112224:	461a      	mov	r2, r3
 8112226:	4620      	mov	r0, r4
 8112228:	f7ff fa30 	bl	811168c <tcp_eff_send_mss_netif>
 811222c:	4603      	mov	r3, r0
 811222e:	461a      	mov	r2, r3
 8112230:	697b      	ldr	r3, [r7, #20]
 8112232:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8112234:	2112      	movs	r1, #18
 8112236:	6978      	ldr	r0, [r7, #20]
 8112238:	f002 f840 	bl	81142bc <tcp_enqueue_flags>
 811223c:	4603      	mov	r3, r0
 811223e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8112240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8112244:	2b00      	cmp	r3, #0
 8112246:	d004      	beq.n	8112252 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8112248:	2100      	movs	r1, #0
 811224a:	6978      	ldr	r0, [r7, #20]
 811224c:	f7fe f978 	bl	8110540 <tcp_abandon>
      return;
 8112250:	e006      	b.n	8112260 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8112252:	6978      	ldr	r0, [r7, #20]
 8112254:	f002 f920 	bl	8114498 <tcp_output>
  return;
 8112258:	e001      	b.n	811225e <tcp_listen_input+0x1be>
    return;
 811225a:	bf00      	nop
 811225c:	e000      	b.n	8112260 <tcp_listen_input+0x1c0>
  return;
 811225e:	bf00      	nop
}
 8112260:	371c      	adds	r7, #28
 8112262:	46bd      	mov	sp, r7
 8112264:	bd90      	pop	{r4, r7, pc}
 8112266:	bf00      	nop
 8112268:	1000b890 	.word	0x1000b890
 811226c:	081192cc 	.word	0x081192cc
 8112270:	08119504 	.word	0x08119504
 8112274:	08119358 	.word	0x08119358
 8112278:	1000b888 	.word	0x1000b888
 811227c:	1000b88e 	.word	0x1000b88e
 8112280:	1000b884 	.word	0x1000b884
 8112284:	1000b874 	.word	0x1000b874
 8112288:	10004d8c 	.word	0x10004d8c
 811228c:	10004d90 	.word	0x10004d90
 8112290:	10004d7c 	.word	0x10004d7c
 8112294:	1000b858 	.word	0x1000b858
 8112298:	1000b860 	.word	0x1000b860

0811229c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 811229c:	b580      	push	{r7, lr}
 811229e:	b086      	sub	sp, #24
 81122a0:	af04      	add	r7, sp, #16
 81122a2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 81122a4:	4b2f      	ldr	r3, [pc, #188]	@ (8112364 <tcp_timewait_input+0xc8>)
 81122a6:	781b      	ldrb	r3, [r3, #0]
 81122a8:	f003 0304 	and.w	r3, r3, #4
 81122ac:	2b00      	cmp	r3, #0
 81122ae:	d153      	bne.n	8112358 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 81122b0:	687b      	ldr	r3, [r7, #4]
 81122b2:	2b00      	cmp	r3, #0
 81122b4:	d106      	bne.n	81122c4 <tcp_timewait_input+0x28>
 81122b6:	4b2c      	ldr	r3, [pc, #176]	@ (8112368 <tcp_timewait_input+0xcc>)
 81122b8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 81122bc:	492b      	ldr	r1, [pc, #172]	@ (811236c <tcp_timewait_input+0xd0>)
 81122be:	482c      	ldr	r0, [pc, #176]	@ (8112370 <tcp_timewait_input+0xd4>)
 81122c0:	f004 fb12 	bl	81168e8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 81122c4:	4b27      	ldr	r3, [pc, #156]	@ (8112364 <tcp_timewait_input+0xc8>)
 81122c6:	781b      	ldrb	r3, [r3, #0]
 81122c8:	f003 0302 	and.w	r3, r3, #2
 81122cc:	2b00      	cmp	r3, #0
 81122ce:	d02a      	beq.n	8112326 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 81122d0:	4b28      	ldr	r3, [pc, #160]	@ (8112374 <tcp_timewait_input+0xd8>)
 81122d2:	681a      	ldr	r2, [r3, #0]
 81122d4:	687b      	ldr	r3, [r7, #4]
 81122d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81122d8:	1ad3      	subs	r3, r2, r3
 81122da:	2b00      	cmp	r3, #0
 81122dc:	db2d      	blt.n	811233a <tcp_timewait_input+0x9e>
 81122de:	4b25      	ldr	r3, [pc, #148]	@ (8112374 <tcp_timewait_input+0xd8>)
 81122e0:	681a      	ldr	r2, [r3, #0]
 81122e2:	687b      	ldr	r3, [r7, #4]
 81122e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81122e6:	6879      	ldr	r1, [r7, #4]
 81122e8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 81122ea:	440b      	add	r3, r1
 81122ec:	1ad3      	subs	r3, r2, r3
 81122ee:	2b00      	cmp	r3, #0
 81122f0:	dc23      	bgt.n	811233a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81122f2:	4b21      	ldr	r3, [pc, #132]	@ (8112378 <tcp_timewait_input+0xdc>)
 81122f4:	6819      	ldr	r1, [r3, #0]
 81122f6:	4b21      	ldr	r3, [pc, #132]	@ (811237c <tcp_timewait_input+0xe0>)
 81122f8:	881b      	ldrh	r3, [r3, #0]
 81122fa:	461a      	mov	r2, r3
 81122fc:	4b1d      	ldr	r3, [pc, #116]	@ (8112374 <tcp_timewait_input+0xd8>)
 81122fe:	681b      	ldr	r3, [r3, #0]
 8112300:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8112302:	4b1f      	ldr	r3, [pc, #124]	@ (8112380 <tcp_timewait_input+0xe4>)
 8112304:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8112306:	885b      	ldrh	r3, [r3, #2]
 8112308:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811230a:	4a1d      	ldr	r2, [pc, #116]	@ (8112380 <tcp_timewait_input+0xe4>)
 811230c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811230e:	8812      	ldrh	r2, [r2, #0]
 8112310:	b292      	uxth	r2, r2
 8112312:	9202      	str	r2, [sp, #8]
 8112314:	9301      	str	r3, [sp, #4]
 8112316:	4b1b      	ldr	r3, [pc, #108]	@ (8112384 <tcp_timewait_input+0xe8>)
 8112318:	9300      	str	r3, [sp, #0]
 811231a:	4b1b      	ldr	r3, [pc, #108]	@ (8112388 <tcp_timewait_input+0xec>)
 811231c:	4602      	mov	r2, r0
 811231e:	6878      	ldr	r0, [r7, #4]
 8112320:	f002 fe6e 	bl	8115000 <tcp_rst>
      return;
 8112324:	e01b      	b.n	811235e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8112326:	4b0f      	ldr	r3, [pc, #60]	@ (8112364 <tcp_timewait_input+0xc8>)
 8112328:	781b      	ldrb	r3, [r3, #0]
 811232a:	f003 0301 	and.w	r3, r3, #1
 811232e:	2b00      	cmp	r3, #0
 8112330:	d003      	beq.n	811233a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8112332:	4b16      	ldr	r3, [pc, #88]	@ (811238c <tcp_timewait_input+0xf0>)
 8112334:	681a      	ldr	r2, [r3, #0]
 8112336:	687b      	ldr	r3, [r7, #4]
 8112338:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 811233a:	4b10      	ldr	r3, [pc, #64]	@ (811237c <tcp_timewait_input+0xe0>)
 811233c:	881b      	ldrh	r3, [r3, #0]
 811233e:	2b00      	cmp	r3, #0
 8112340:	d00c      	beq.n	811235c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8112342:	687b      	ldr	r3, [r7, #4]
 8112344:	8b5b      	ldrh	r3, [r3, #26]
 8112346:	f043 0302 	orr.w	r3, r3, #2
 811234a:	b29a      	uxth	r2, r3
 811234c:	687b      	ldr	r3, [r7, #4]
 811234e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8112350:	6878      	ldr	r0, [r7, #4]
 8112352:	f002 f8a1 	bl	8114498 <tcp_output>
  }
  return;
 8112356:	e001      	b.n	811235c <tcp_timewait_input+0xc0>
    return;
 8112358:	bf00      	nop
 811235a:	e000      	b.n	811235e <tcp_timewait_input+0xc2>
  return;
 811235c:	bf00      	nop
}
 811235e:	3708      	adds	r7, #8
 8112360:	46bd      	mov	sp, r7
 8112362:	bd80      	pop	{r7, pc}
 8112364:	1000b890 	.word	0x1000b890
 8112368:	081192cc 	.word	0x081192cc
 811236c:	08119524 	.word	0x08119524
 8112370:	08119358 	.word	0x08119358
 8112374:	1000b884 	.word	0x1000b884
 8112378:	1000b888 	.word	0x1000b888
 811237c:	1000b88e 	.word	0x1000b88e
 8112380:	1000b874 	.word	0x1000b874
 8112384:	10004d8c 	.word	0x10004d8c
 8112388:	10004d90 	.word	0x10004d90
 811238c:	1000b84c 	.word	0x1000b84c

08112390 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8112390:	b590      	push	{r4, r7, lr}
 8112392:	b08d      	sub	sp, #52	@ 0x34
 8112394:	af04      	add	r7, sp, #16
 8112396:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8112398:	2300      	movs	r3, #0
 811239a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 811239c:	2300      	movs	r3, #0
 811239e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 81123a0:	687b      	ldr	r3, [r7, #4]
 81123a2:	2b00      	cmp	r3, #0
 81123a4:	d106      	bne.n	81123b4 <tcp_process+0x24>
 81123a6:	4b9d      	ldr	r3, [pc, #628]	@ (811261c <tcp_process+0x28c>)
 81123a8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 81123ac:	499c      	ldr	r1, [pc, #624]	@ (8112620 <tcp_process+0x290>)
 81123ae:	489d      	ldr	r0, [pc, #628]	@ (8112624 <tcp_process+0x294>)
 81123b0:	f004 fa9a 	bl	81168e8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 81123b4:	4b9c      	ldr	r3, [pc, #624]	@ (8112628 <tcp_process+0x298>)
 81123b6:	781b      	ldrb	r3, [r3, #0]
 81123b8:	f003 0304 	and.w	r3, r3, #4
 81123bc:	2b00      	cmp	r3, #0
 81123be:	d04e      	beq.n	811245e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 81123c0:	687b      	ldr	r3, [r7, #4]
 81123c2:	7d1b      	ldrb	r3, [r3, #20]
 81123c4:	2b02      	cmp	r3, #2
 81123c6:	d108      	bne.n	81123da <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 81123c8:	687b      	ldr	r3, [r7, #4]
 81123ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81123cc:	4b97      	ldr	r3, [pc, #604]	@ (811262c <tcp_process+0x29c>)
 81123ce:	681b      	ldr	r3, [r3, #0]
 81123d0:	429a      	cmp	r2, r3
 81123d2:	d123      	bne.n	811241c <tcp_process+0x8c>
        acceptable = 1;
 81123d4:	2301      	movs	r3, #1
 81123d6:	76fb      	strb	r3, [r7, #27]
 81123d8:	e020      	b.n	811241c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 81123da:	687b      	ldr	r3, [r7, #4]
 81123dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81123de:	4b94      	ldr	r3, [pc, #592]	@ (8112630 <tcp_process+0x2a0>)
 81123e0:	681b      	ldr	r3, [r3, #0]
 81123e2:	429a      	cmp	r2, r3
 81123e4:	d102      	bne.n	81123ec <tcp_process+0x5c>
        acceptable = 1;
 81123e6:	2301      	movs	r3, #1
 81123e8:	76fb      	strb	r3, [r7, #27]
 81123ea:	e017      	b.n	811241c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 81123ec:	4b90      	ldr	r3, [pc, #576]	@ (8112630 <tcp_process+0x2a0>)
 81123ee:	681a      	ldr	r2, [r3, #0]
 81123f0:	687b      	ldr	r3, [r7, #4]
 81123f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81123f4:	1ad3      	subs	r3, r2, r3
 81123f6:	2b00      	cmp	r3, #0
 81123f8:	db10      	blt.n	811241c <tcp_process+0x8c>
 81123fa:	4b8d      	ldr	r3, [pc, #564]	@ (8112630 <tcp_process+0x2a0>)
 81123fc:	681a      	ldr	r2, [r3, #0]
 81123fe:	687b      	ldr	r3, [r7, #4]
 8112400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8112402:	6879      	ldr	r1, [r7, #4]
 8112404:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8112406:	440b      	add	r3, r1
 8112408:	1ad3      	subs	r3, r2, r3
 811240a:	2b00      	cmp	r3, #0
 811240c:	dc06      	bgt.n	811241c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 811240e:	687b      	ldr	r3, [r7, #4]
 8112410:	8b5b      	ldrh	r3, [r3, #26]
 8112412:	f043 0302 	orr.w	r3, r3, #2
 8112416:	b29a      	uxth	r2, r3
 8112418:	687b      	ldr	r3, [r7, #4]
 811241a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 811241c:	7efb      	ldrb	r3, [r7, #27]
 811241e:	2b00      	cmp	r3, #0
 8112420:	d01b      	beq.n	811245a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8112422:	687b      	ldr	r3, [r7, #4]
 8112424:	7d1b      	ldrb	r3, [r3, #20]
 8112426:	2b00      	cmp	r3, #0
 8112428:	d106      	bne.n	8112438 <tcp_process+0xa8>
 811242a:	4b7c      	ldr	r3, [pc, #496]	@ (811261c <tcp_process+0x28c>)
 811242c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8112430:	4980      	ldr	r1, [pc, #512]	@ (8112634 <tcp_process+0x2a4>)
 8112432:	487c      	ldr	r0, [pc, #496]	@ (8112624 <tcp_process+0x294>)
 8112434:	f004 fa58 	bl	81168e8 <iprintf>
      recv_flags |= TF_RESET;
 8112438:	4b7f      	ldr	r3, [pc, #508]	@ (8112638 <tcp_process+0x2a8>)
 811243a:	781b      	ldrb	r3, [r3, #0]
 811243c:	f043 0308 	orr.w	r3, r3, #8
 8112440:	b2da      	uxtb	r2, r3
 8112442:	4b7d      	ldr	r3, [pc, #500]	@ (8112638 <tcp_process+0x2a8>)
 8112444:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8112446:	687b      	ldr	r3, [r7, #4]
 8112448:	8b5b      	ldrh	r3, [r3, #26]
 811244a:	f023 0301 	bic.w	r3, r3, #1
 811244e:	b29a      	uxth	r2, r3
 8112450:	687b      	ldr	r3, [r7, #4]
 8112452:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8112454:	f06f 030d 	mvn.w	r3, #13
 8112458:	e37a      	b.n	8112b50 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 811245a:	2300      	movs	r3, #0
 811245c:	e378      	b.n	8112b50 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 811245e:	4b72      	ldr	r3, [pc, #456]	@ (8112628 <tcp_process+0x298>)
 8112460:	781b      	ldrb	r3, [r3, #0]
 8112462:	f003 0302 	and.w	r3, r3, #2
 8112466:	2b00      	cmp	r3, #0
 8112468:	d010      	beq.n	811248c <tcp_process+0xfc>
 811246a:	687b      	ldr	r3, [r7, #4]
 811246c:	7d1b      	ldrb	r3, [r3, #20]
 811246e:	2b02      	cmp	r3, #2
 8112470:	d00c      	beq.n	811248c <tcp_process+0xfc>
 8112472:	687b      	ldr	r3, [r7, #4]
 8112474:	7d1b      	ldrb	r3, [r3, #20]
 8112476:	2b03      	cmp	r3, #3
 8112478:	d008      	beq.n	811248c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 811247a:	687b      	ldr	r3, [r7, #4]
 811247c:	8b5b      	ldrh	r3, [r3, #26]
 811247e:	f043 0302 	orr.w	r3, r3, #2
 8112482:	b29a      	uxth	r2, r3
 8112484:	687b      	ldr	r3, [r7, #4]
 8112486:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8112488:	2300      	movs	r3, #0
 811248a:	e361      	b.n	8112b50 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 811248c:	687b      	ldr	r3, [r7, #4]
 811248e:	8b5b      	ldrh	r3, [r3, #26]
 8112490:	f003 0310 	and.w	r3, r3, #16
 8112494:	2b00      	cmp	r3, #0
 8112496:	d103      	bne.n	81124a0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8112498:	4b68      	ldr	r3, [pc, #416]	@ (811263c <tcp_process+0x2ac>)
 811249a:	681a      	ldr	r2, [r3, #0]
 811249c:	687b      	ldr	r3, [r7, #4]
 811249e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 81124a0:	687b      	ldr	r3, [r7, #4]
 81124a2:	2200      	movs	r2, #0
 81124a4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 81124a8:	687b      	ldr	r3, [r7, #4]
 81124aa:	2200      	movs	r2, #0
 81124ac:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 81124b0:	6878      	ldr	r0, [r7, #4]
 81124b2:	f001 fc2b 	bl	8113d0c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 81124b6:	687b      	ldr	r3, [r7, #4]
 81124b8:	7d1b      	ldrb	r3, [r3, #20]
 81124ba:	3b02      	subs	r3, #2
 81124bc:	2b07      	cmp	r3, #7
 81124be:	f200 8337 	bhi.w	8112b30 <tcp_process+0x7a0>
 81124c2:	a201      	add	r2, pc, #4	@ (adr r2, 81124c8 <tcp_process+0x138>)
 81124c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81124c8:	081124e9 	.word	0x081124e9
 81124cc:	08112719 	.word	0x08112719
 81124d0:	08112891 	.word	0x08112891
 81124d4:	081128bb 	.word	0x081128bb
 81124d8:	081129df 	.word	0x081129df
 81124dc:	08112891 	.word	0x08112891
 81124e0:	08112a6b 	.word	0x08112a6b
 81124e4:	08112afb 	.word	0x08112afb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 81124e8:	4b4f      	ldr	r3, [pc, #316]	@ (8112628 <tcp_process+0x298>)
 81124ea:	781b      	ldrb	r3, [r3, #0]
 81124ec:	f003 0310 	and.w	r3, r3, #16
 81124f0:	2b00      	cmp	r3, #0
 81124f2:	f000 80e4 	beq.w	81126be <tcp_process+0x32e>
 81124f6:	4b4c      	ldr	r3, [pc, #304]	@ (8112628 <tcp_process+0x298>)
 81124f8:	781b      	ldrb	r3, [r3, #0]
 81124fa:	f003 0302 	and.w	r3, r3, #2
 81124fe:	2b00      	cmp	r3, #0
 8112500:	f000 80dd 	beq.w	81126be <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8112504:	687b      	ldr	r3, [r7, #4]
 8112506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8112508:	1c5a      	adds	r2, r3, #1
 811250a:	4b48      	ldr	r3, [pc, #288]	@ (811262c <tcp_process+0x29c>)
 811250c:	681b      	ldr	r3, [r3, #0]
 811250e:	429a      	cmp	r2, r3
 8112510:	f040 80d5 	bne.w	81126be <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8112514:	4b46      	ldr	r3, [pc, #280]	@ (8112630 <tcp_process+0x2a0>)
 8112516:	681b      	ldr	r3, [r3, #0]
 8112518:	1c5a      	adds	r2, r3, #1
 811251a:	687b      	ldr	r3, [r7, #4]
 811251c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 811251e:	687b      	ldr	r3, [r7, #4]
 8112520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8112522:	687b      	ldr	r3, [r7, #4]
 8112524:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8112526:	4b41      	ldr	r3, [pc, #260]	@ (811262c <tcp_process+0x29c>)
 8112528:	681a      	ldr	r2, [r3, #0]
 811252a:	687b      	ldr	r3, [r7, #4]
 811252c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 811252e:	4b44      	ldr	r3, [pc, #272]	@ (8112640 <tcp_process+0x2b0>)
 8112530:	681b      	ldr	r3, [r3, #0]
 8112532:	89db      	ldrh	r3, [r3, #14]
 8112534:	b29a      	uxth	r2, r3
 8112536:	687b      	ldr	r3, [r7, #4]
 8112538:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 811253c:	687b      	ldr	r3, [r7, #4]
 811253e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8112542:	687b      	ldr	r3, [r7, #4]
 8112544:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8112548:	4b39      	ldr	r3, [pc, #228]	@ (8112630 <tcp_process+0x2a0>)
 811254a:	681b      	ldr	r3, [r3, #0]
 811254c:	1e5a      	subs	r2, r3, #1
 811254e:	687b      	ldr	r3, [r7, #4]
 8112550:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8112552:	687b      	ldr	r3, [r7, #4]
 8112554:	2204      	movs	r2, #4
 8112556:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8112558:	687b      	ldr	r3, [r7, #4]
 811255a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 811255c:	687b      	ldr	r3, [r7, #4]
 811255e:	3304      	adds	r3, #4
 8112560:	4618      	mov	r0, r3
 8112562:	f7fa fd43 	bl	810cfec <ip4_route>
 8112566:	4601      	mov	r1, r0
 8112568:	687b      	ldr	r3, [r7, #4]
 811256a:	3304      	adds	r3, #4
 811256c:	461a      	mov	r2, r3
 811256e:	4620      	mov	r0, r4
 8112570:	f7ff f88c 	bl	811168c <tcp_eff_send_mss_netif>
 8112574:	4603      	mov	r3, r0
 8112576:	461a      	mov	r2, r3
 8112578:	687b      	ldr	r3, [r7, #4]
 811257a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 811257c:	687b      	ldr	r3, [r7, #4]
 811257e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8112580:	009a      	lsls	r2, r3, #2
 8112582:	687b      	ldr	r3, [r7, #4]
 8112584:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8112586:	005b      	lsls	r3, r3, #1
 8112588:	f241 111c 	movw	r1, #4380	@ 0x111c
 811258c:	428b      	cmp	r3, r1
 811258e:	bf38      	it	cc
 8112590:	460b      	movcc	r3, r1
 8112592:	429a      	cmp	r2, r3
 8112594:	d204      	bcs.n	81125a0 <tcp_process+0x210>
 8112596:	687b      	ldr	r3, [r7, #4]
 8112598:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811259a:	009b      	lsls	r3, r3, #2
 811259c:	b29b      	uxth	r3, r3
 811259e:	e00d      	b.n	81125bc <tcp_process+0x22c>
 81125a0:	687b      	ldr	r3, [r7, #4]
 81125a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81125a4:	005b      	lsls	r3, r3, #1
 81125a6:	f241 121c 	movw	r2, #4380	@ 0x111c
 81125aa:	4293      	cmp	r3, r2
 81125ac:	d904      	bls.n	81125b8 <tcp_process+0x228>
 81125ae:	687b      	ldr	r3, [r7, #4]
 81125b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81125b2:	005b      	lsls	r3, r3, #1
 81125b4:	b29b      	uxth	r3, r3
 81125b6:	e001      	b.n	81125bc <tcp_process+0x22c>
 81125b8:	f241 131c 	movw	r3, #4380	@ 0x111c
 81125bc:	687a      	ldr	r2, [r7, #4]
 81125be:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 81125c2:	687b      	ldr	r3, [r7, #4]
 81125c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81125c8:	2b00      	cmp	r3, #0
 81125ca:	d106      	bne.n	81125da <tcp_process+0x24a>
 81125cc:	4b13      	ldr	r3, [pc, #76]	@ (811261c <tcp_process+0x28c>)
 81125ce:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 81125d2:	491c      	ldr	r1, [pc, #112]	@ (8112644 <tcp_process+0x2b4>)
 81125d4:	4813      	ldr	r0, [pc, #76]	@ (8112624 <tcp_process+0x294>)
 81125d6:	f004 f987 	bl	81168e8 <iprintf>
        --pcb->snd_queuelen;
 81125da:	687b      	ldr	r3, [r7, #4]
 81125dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81125e0:	3b01      	subs	r3, #1
 81125e2:	b29a      	uxth	r2, r3
 81125e4:	687b      	ldr	r3, [r7, #4]
 81125e6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 81125ea:	687b      	ldr	r3, [r7, #4]
 81125ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81125ee:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 81125f0:	69fb      	ldr	r3, [r7, #28]
 81125f2:	2b00      	cmp	r3, #0
 81125f4:	d12a      	bne.n	811264c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 81125f6:	687b      	ldr	r3, [r7, #4]
 81125f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81125fa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 81125fc:	69fb      	ldr	r3, [r7, #28]
 81125fe:	2b00      	cmp	r3, #0
 8112600:	d106      	bne.n	8112610 <tcp_process+0x280>
 8112602:	4b06      	ldr	r3, [pc, #24]	@ (811261c <tcp_process+0x28c>)
 8112604:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8112608:	490f      	ldr	r1, [pc, #60]	@ (8112648 <tcp_process+0x2b8>)
 811260a:	4806      	ldr	r0, [pc, #24]	@ (8112624 <tcp_process+0x294>)
 811260c:	f004 f96c 	bl	81168e8 <iprintf>
          pcb->unsent = rseg->next;
 8112610:	69fb      	ldr	r3, [r7, #28]
 8112612:	681a      	ldr	r2, [r3, #0]
 8112614:	687b      	ldr	r3, [r7, #4]
 8112616:	66da      	str	r2, [r3, #108]	@ 0x6c
 8112618:	e01c      	b.n	8112654 <tcp_process+0x2c4>
 811261a:	bf00      	nop
 811261c:	081192cc 	.word	0x081192cc
 8112620:	08119544 	.word	0x08119544
 8112624:	08119358 	.word	0x08119358
 8112628:	1000b890 	.word	0x1000b890
 811262c:	1000b888 	.word	0x1000b888
 8112630:	1000b884 	.word	0x1000b884
 8112634:	08119560 	.word	0x08119560
 8112638:	1000b891 	.word	0x1000b891
 811263c:	1000b84c 	.word	0x1000b84c
 8112640:	1000b874 	.word	0x1000b874
 8112644:	08119580 	.word	0x08119580
 8112648:	08119598 	.word	0x08119598
        } else {
          pcb->unacked = rseg->next;
 811264c:	69fb      	ldr	r3, [r7, #28]
 811264e:	681a      	ldr	r2, [r3, #0]
 8112650:	687b      	ldr	r3, [r7, #4]
 8112652:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8112654:	69f8      	ldr	r0, [r7, #28]
 8112656:	f7fe fd22 	bl	811109e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 811265a:	687b      	ldr	r3, [r7, #4]
 811265c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811265e:	2b00      	cmp	r3, #0
 8112660:	d104      	bne.n	811266c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8112662:	687b      	ldr	r3, [r7, #4]
 8112664:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8112668:	861a      	strh	r2, [r3, #48]	@ 0x30
 811266a:	e006      	b.n	811267a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 811266c:	687b      	ldr	r3, [r7, #4]
 811266e:	2200      	movs	r2, #0
 8112670:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8112672:	687b      	ldr	r3, [r7, #4]
 8112674:	2200      	movs	r2, #0
 8112676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 811267a:	687b      	ldr	r3, [r7, #4]
 811267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8112680:	2b00      	cmp	r3, #0
 8112682:	d00a      	beq.n	811269a <tcp_process+0x30a>
 8112684:	687b      	ldr	r3, [r7, #4]
 8112686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 811268a:	687a      	ldr	r2, [r7, #4]
 811268c:	6910      	ldr	r0, [r2, #16]
 811268e:	2200      	movs	r2, #0
 8112690:	6879      	ldr	r1, [r7, #4]
 8112692:	4798      	blx	r3
 8112694:	4603      	mov	r3, r0
 8112696:	76bb      	strb	r3, [r7, #26]
 8112698:	e001      	b.n	811269e <tcp_process+0x30e>
 811269a:	2300      	movs	r3, #0
 811269c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 811269e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 81126a2:	f113 0f0d 	cmn.w	r3, #13
 81126a6:	d102      	bne.n	81126ae <tcp_process+0x31e>
          return ERR_ABRT;
 81126a8:	f06f 030c 	mvn.w	r3, #12
 81126ac:	e250      	b.n	8112b50 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 81126ae:	687b      	ldr	r3, [r7, #4]
 81126b0:	8b5b      	ldrh	r3, [r3, #26]
 81126b2:	f043 0302 	orr.w	r3, r3, #2
 81126b6:	b29a      	uxth	r2, r3
 81126b8:	687b      	ldr	r3, [r7, #4]
 81126ba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 81126bc:	e23a      	b.n	8112b34 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 81126be:	4b98      	ldr	r3, [pc, #608]	@ (8112920 <tcp_process+0x590>)
 81126c0:	781b      	ldrb	r3, [r3, #0]
 81126c2:	f003 0310 	and.w	r3, r3, #16
 81126c6:	2b00      	cmp	r3, #0
 81126c8:	f000 8234 	beq.w	8112b34 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81126cc:	4b95      	ldr	r3, [pc, #596]	@ (8112924 <tcp_process+0x594>)
 81126ce:	6819      	ldr	r1, [r3, #0]
 81126d0:	4b95      	ldr	r3, [pc, #596]	@ (8112928 <tcp_process+0x598>)
 81126d2:	881b      	ldrh	r3, [r3, #0]
 81126d4:	461a      	mov	r2, r3
 81126d6:	4b95      	ldr	r3, [pc, #596]	@ (811292c <tcp_process+0x59c>)
 81126d8:	681b      	ldr	r3, [r3, #0]
 81126da:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81126dc:	4b94      	ldr	r3, [pc, #592]	@ (8112930 <tcp_process+0x5a0>)
 81126de:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81126e0:	885b      	ldrh	r3, [r3, #2]
 81126e2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81126e4:	4a92      	ldr	r2, [pc, #584]	@ (8112930 <tcp_process+0x5a0>)
 81126e6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81126e8:	8812      	ldrh	r2, [r2, #0]
 81126ea:	b292      	uxth	r2, r2
 81126ec:	9202      	str	r2, [sp, #8]
 81126ee:	9301      	str	r3, [sp, #4]
 81126f0:	4b90      	ldr	r3, [pc, #576]	@ (8112934 <tcp_process+0x5a4>)
 81126f2:	9300      	str	r3, [sp, #0]
 81126f4:	4b90      	ldr	r3, [pc, #576]	@ (8112938 <tcp_process+0x5a8>)
 81126f6:	4602      	mov	r2, r0
 81126f8:	6878      	ldr	r0, [r7, #4]
 81126fa:	f002 fc81 	bl	8115000 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 81126fe:	687b      	ldr	r3, [r7, #4]
 8112700:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8112704:	2b05      	cmp	r3, #5
 8112706:	f200 8215 	bhi.w	8112b34 <tcp_process+0x7a4>
          pcb->rtime = 0;
 811270a:	687b      	ldr	r3, [r7, #4]
 811270c:	2200      	movs	r2, #0
 811270e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8112710:	6878      	ldr	r0, [r7, #4]
 8112712:	f002 fa4d 	bl	8114bb0 <tcp_rexmit_rto>
      break;
 8112716:	e20d      	b.n	8112b34 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8112718:	4b81      	ldr	r3, [pc, #516]	@ (8112920 <tcp_process+0x590>)
 811271a:	781b      	ldrb	r3, [r3, #0]
 811271c:	f003 0310 	and.w	r3, r3, #16
 8112720:	2b00      	cmp	r3, #0
 8112722:	f000 80a1 	beq.w	8112868 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8112726:	4b7f      	ldr	r3, [pc, #508]	@ (8112924 <tcp_process+0x594>)
 8112728:	681a      	ldr	r2, [r3, #0]
 811272a:	687b      	ldr	r3, [r7, #4]
 811272c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811272e:	1ad3      	subs	r3, r2, r3
 8112730:	3b01      	subs	r3, #1
 8112732:	2b00      	cmp	r3, #0
 8112734:	db7e      	blt.n	8112834 <tcp_process+0x4a4>
 8112736:	4b7b      	ldr	r3, [pc, #492]	@ (8112924 <tcp_process+0x594>)
 8112738:	681a      	ldr	r2, [r3, #0]
 811273a:	687b      	ldr	r3, [r7, #4]
 811273c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811273e:	1ad3      	subs	r3, r2, r3
 8112740:	2b00      	cmp	r3, #0
 8112742:	dc77      	bgt.n	8112834 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8112744:	687b      	ldr	r3, [r7, #4]
 8112746:	2204      	movs	r2, #4
 8112748:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 811274a:	687b      	ldr	r3, [r7, #4]
 811274c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811274e:	2b00      	cmp	r3, #0
 8112750:	d102      	bne.n	8112758 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8112752:	23fa      	movs	r3, #250	@ 0xfa
 8112754:	76bb      	strb	r3, [r7, #26]
 8112756:	e01d      	b.n	8112794 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8112758:	687b      	ldr	r3, [r7, #4]
 811275a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811275c:	699b      	ldr	r3, [r3, #24]
 811275e:	2b00      	cmp	r3, #0
 8112760:	d106      	bne.n	8112770 <tcp_process+0x3e0>
 8112762:	4b76      	ldr	r3, [pc, #472]	@ (811293c <tcp_process+0x5ac>)
 8112764:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8112768:	4975      	ldr	r1, [pc, #468]	@ (8112940 <tcp_process+0x5b0>)
 811276a:	4876      	ldr	r0, [pc, #472]	@ (8112944 <tcp_process+0x5b4>)
 811276c:	f004 f8bc 	bl	81168e8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8112770:	687b      	ldr	r3, [r7, #4]
 8112772:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8112774:	699b      	ldr	r3, [r3, #24]
 8112776:	2b00      	cmp	r3, #0
 8112778:	d00a      	beq.n	8112790 <tcp_process+0x400>
 811277a:	687b      	ldr	r3, [r7, #4]
 811277c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811277e:	699b      	ldr	r3, [r3, #24]
 8112780:	687a      	ldr	r2, [r7, #4]
 8112782:	6910      	ldr	r0, [r2, #16]
 8112784:	2200      	movs	r2, #0
 8112786:	6879      	ldr	r1, [r7, #4]
 8112788:	4798      	blx	r3
 811278a:	4603      	mov	r3, r0
 811278c:	76bb      	strb	r3, [r7, #26]
 811278e:	e001      	b.n	8112794 <tcp_process+0x404>
 8112790:	23f0      	movs	r3, #240	@ 0xf0
 8112792:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8112794:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8112798:	2b00      	cmp	r3, #0
 811279a:	d00a      	beq.n	81127b2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 811279c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 81127a0:	f113 0f0d 	cmn.w	r3, #13
 81127a4:	d002      	beq.n	81127ac <tcp_process+0x41c>
              tcp_abort(pcb);
 81127a6:	6878      	ldr	r0, [r7, #4]
 81127a8:	f7fd ff88 	bl	81106bc <tcp_abort>
            }
            return ERR_ABRT;
 81127ac:	f06f 030c 	mvn.w	r3, #12
 81127b0:	e1ce      	b.n	8112b50 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 81127b2:	6878      	ldr	r0, [r7, #4]
 81127b4:	f000 fae0 	bl	8112d78 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 81127b8:	4b63      	ldr	r3, [pc, #396]	@ (8112948 <tcp_process+0x5b8>)
 81127ba:	881b      	ldrh	r3, [r3, #0]
 81127bc:	2b00      	cmp	r3, #0
 81127be:	d005      	beq.n	81127cc <tcp_process+0x43c>
            recv_acked--;
 81127c0:	4b61      	ldr	r3, [pc, #388]	@ (8112948 <tcp_process+0x5b8>)
 81127c2:	881b      	ldrh	r3, [r3, #0]
 81127c4:	3b01      	subs	r3, #1
 81127c6:	b29a      	uxth	r2, r3
 81127c8:	4b5f      	ldr	r3, [pc, #380]	@ (8112948 <tcp_process+0x5b8>)
 81127ca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 81127cc:	687b      	ldr	r3, [r7, #4]
 81127ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81127d0:	009a      	lsls	r2, r3, #2
 81127d2:	687b      	ldr	r3, [r7, #4]
 81127d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81127d6:	005b      	lsls	r3, r3, #1
 81127d8:	f241 111c 	movw	r1, #4380	@ 0x111c
 81127dc:	428b      	cmp	r3, r1
 81127de:	bf38      	it	cc
 81127e0:	460b      	movcc	r3, r1
 81127e2:	429a      	cmp	r2, r3
 81127e4:	d204      	bcs.n	81127f0 <tcp_process+0x460>
 81127e6:	687b      	ldr	r3, [r7, #4]
 81127e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81127ea:	009b      	lsls	r3, r3, #2
 81127ec:	b29b      	uxth	r3, r3
 81127ee:	e00d      	b.n	811280c <tcp_process+0x47c>
 81127f0:	687b      	ldr	r3, [r7, #4]
 81127f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81127f4:	005b      	lsls	r3, r3, #1
 81127f6:	f241 121c 	movw	r2, #4380	@ 0x111c
 81127fa:	4293      	cmp	r3, r2
 81127fc:	d904      	bls.n	8112808 <tcp_process+0x478>
 81127fe:	687b      	ldr	r3, [r7, #4]
 8112800:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8112802:	005b      	lsls	r3, r3, #1
 8112804:	b29b      	uxth	r3, r3
 8112806:	e001      	b.n	811280c <tcp_process+0x47c>
 8112808:	f241 131c 	movw	r3, #4380	@ 0x111c
 811280c:	687a      	ldr	r2, [r7, #4]
 811280e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8112812:	4b4e      	ldr	r3, [pc, #312]	@ (811294c <tcp_process+0x5bc>)
 8112814:	781b      	ldrb	r3, [r3, #0]
 8112816:	f003 0320 	and.w	r3, r3, #32
 811281a:	2b00      	cmp	r3, #0
 811281c:	d037      	beq.n	811288e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 811281e:	687b      	ldr	r3, [r7, #4]
 8112820:	8b5b      	ldrh	r3, [r3, #26]
 8112822:	f043 0302 	orr.w	r3, r3, #2
 8112826:	b29a      	uxth	r2, r3
 8112828:	687b      	ldr	r3, [r7, #4]
 811282a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 811282c:	687b      	ldr	r3, [r7, #4]
 811282e:	2207      	movs	r2, #7
 8112830:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8112832:	e02c      	b.n	811288e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8112834:	4b3b      	ldr	r3, [pc, #236]	@ (8112924 <tcp_process+0x594>)
 8112836:	6819      	ldr	r1, [r3, #0]
 8112838:	4b3b      	ldr	r3, [pc, #236]	@ (8112928 <tcp_process+0x598>)
 811283a:	881b      	ldrh	r3, [r3, #0]
 811283c:	461a      	mov	r2, r3
 811283e:	4b3b      	ldr	r3, [pc, #236]	@ (811292c <tcp_process+0x59c>)
 8112840:	681b      	ldr	r3, [r3, #0]
 8112842:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8112844:	4b3a      	ldr	r3, [pc, #232]	@ (8112930 <tcp_process+0x5a0>)
 8112846:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8112848:	885b      	ldrh	r3, [r3, #2]
 811284a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811284c:	4a38      	ldr	r2, [pc, #224]	@ (8112930 <tcp_process+0x5a0>)
 811284e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8112850:	8812      	ldrh	r2, [r2, #0]
 8112852:	b292      	uxth	r2, r2
 8112854:	9202      	str	r2, [sp, #8]
 8112856:	9301      	str	r3, [sp, #4]
 8112858:	4b36      	ldr	r3, [pc, #216]	@ (8112934 <tcp_process+0x5a4>)
 811285a:	9300      	str	r3, [sp, #0]
 811285c:	4b36      	ldr	r3, [pc, #216]	@ (8112938 <tcp_process+0x5a8>)
 811285e:	4602      	mov	r2, r0
 8112860:	6878      	ldr	r0, [r7, #4]
 8112862:	f002 fbcd 	bl	8115000 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8112866:	e167      	b.n	8112b38 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8112868:	4b2d      	ldr	r3, [pc, #180]	@ (8112920 <tcp_process+0x590>)
 811286a:	781b      	ldrb	r3, [r3, #0]
 811286c:	f003 0302 	and.w	r3, r3, #2
 8112870:	2b00      	cmp	r3, #0
 8112872:	f000 8161 	beq.w	8112b38 <tcp_process+0x7a8>
 8112876:	687b      	ldr	r3, [r7, #4]
 8112878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811287a:	1e5a      	subs	r2, r3, #1
 811287c:	4b2b      	ldr	r3, [pc, #172]	@ (811292c <tcp_process+0x59c>)
 811287e:	681b      	ldr	r3, [r3, #0]
 8112880:	429a      	cmp	r2, r3
 8112882:	f040 8159 	bne.w	8112b38 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8112886:	6878      	ldr	r0, [r7, #4]
 8112888:	f002 f9b4 	bl	8114bf4 <tcp_rexmit>
      break;
 811288c:	e154      	b.n	8112b38 <tcp_process+0x7a8>
 811288e:	e153      	b.n	8112b38 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8112890:	6878      	ldr	r0, [r7, #4]
 8112892:	f000 fa71 	bl	8112d78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8112896:	4b2d      	ldr	r3, [pc, #180]	@ (811294c <tcp_process+0x5bc>)
 8112898:	781b      	ldrb	r3, [r3, #0]
 811289a:	f003 0320 	and.w	r3, r3, #32
 811289e:	2b00      	cmp	r3, #0
 81128a0:	f000 814c 	beq.w	8112b3c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 81128a4:	687b      	ldr	r3, [r7, #4]
 81128a6:	8b5b      	ldrh	r3, [r3, #26]
 81128a8:	f043 0302 	orr.w	r3, r3, #2
 81128ac:	b29a      	uxth	r2, r3
 81128ae:	687b      	ldr	r3, [r7, #4]
 81128b0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 81128b2:	687b      	ldr	r3, [r7, #4]
 81128b4:	2207      	movs	r2, #7
 81128b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 81128b8:	e140      	b.n	8112b3c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 81128ba:	6878      	ldr	r0, [r7, #4]
 81128bc:	f000 fa5c 	bl	8112d78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 81128c0:	4b22      	ldr	r3, [pc, #136]	@ (811294c <tcp_process+0x5bc>)
 81128c2:	781b      	ldrb	r3, [r3, #0]
 81128c4:	f003 0320 	and.w	r3, r3, #32
 81128c8:	2b00      	cmp	r3, #0
 81128ca:	d071      	beq.n	81129b0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 81128cc:	4b14      	ldr	r3, [pc, #80]	@ (8112920 <tcp_process+0x590>)
 81128ce:	781b      	ldrb	r3, [r3, #0]
 81128d0:	f003 0310 	and.w	r3, r3, #16
 81128d4:	2b00      	cmp	r3, #0
 81128d6:	d060      	beq.n	811299a <tcp_process+0x60a>
 81128d8:	687b      	ldr	r3, [r7, #4]
 81128da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81128dc:	4b11      	ldr	r3, [pc, #68]	@ (8112924 <tcp_process+0x594>)
 81128de:	681b      	ldr	r3, [r3, #0]
 81128e0:	429a      	cmp	r2, r3
 81128e2:	d15a      	bne.n	811299a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 81128e4:	687b      	ldr	r3, [r7, #4]
 81128e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 81128e8:	2b00      	cmp	r3, #0
 81128ea:	d156      	bne.n	811299a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 81128ec:	687b      	ldr	r3, [r7, #4]
 81128ee:	8b5b      	ldrh	r3, [r3, #26]
 81128f0:	f043 0302 	orr.w	r3, r3, #2
 81128f4:	b29a      	uxth	r2, r3
 81128f6:	687b      	ldr	r3, [r7, #4]
 81128f8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 81128fa:	6878      	ldr	r0, [r7, #4]
 81128fc:	f7fe fdbc 	bl	8111478 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8112900:	4b13      	ldr	r3, [pc, #76]	@ (8112950 <tcp_process+0x5c0>)
 8112902:	681b      	ldr	r3, [r3, #0]
 8112904:	687a      	ldr	r2, [r7, #4]
 8112906:	429a      	cmp	r2, r3
 8112908:	d105      	bne.n	8112916 <tcp_process+0x586>
 811290a:	4b11      	ldr	r3, [pc, #68]	@ (8112950 <tcp_process+0x5c0>)
 811290c:	681b      	ldr	r3, [r3, #0]
 811290e:	68db      	ldr	r3, [r3, #12]
 8112910:	4a0f      	ldr	r2, [pc, #60]	@ (8112950 <tcp_process+0x5c0>)
 8112912:	6013      	str	r3, [r2, #0]
 8112914:	e02e      	b.n	8112974 <tcp_process+0x5e4>
 8112916:	4b0e      	ldr	r3, [pc, #56]	@ (8112950 <tcp_process+0x5c0>)
 8112918:	681b      	ldr	r3, [r3, #0]
 811291a:	617b      	str	r3, [r7, #20]
 811291c:	e027      	b.n	811296e <tcp_process+0x5de>
 811291e:	bf00      	nop
 8112920:	1000b890 	.word	0x1000b890
 8112924:	1000b888 	.word	0x1000b888
 8112928:	1000b88e 	.word	0x1000b88e
 811292c:	1000b884 	.word	0x1000b884
 8112930:	1000b874 	.word	0x1000b874
 8112934:	10004d8c 	.word	0x10004d8c
 8112938:	10004d90 	.word	0x10004d90
 811293c:	081192cc 	.word	0x081192cc
 8112940:	081195ac 	.word	0x081195ac
 8112944:	08119358 	.word	0x08119358
 8112948:	1000b88c 	.word	0x1000b88c
 811294c:	1000b891 	.word	0x1000b891
 8112950:	1000b858 	.word	0x1000b858
 8112954:	697b      	ldr	r3, [r7, #20]
 8112956:	68db      	ldr	r3, [r3, #12]
 8112958:	687a      	ldr	r2, [r7, #4]
 811295a:	429a      	cmp	r2, r3
 811295c:	d104      	bne.n	8112968 <tcp_process+0x5d8>
 811295e:	687b      	ldr	r3, [r7, #4]
 8112960:	68da      	ldr	r2, [r3, #12]
 8112962:	697b      	ldr	r3, [r7, #20]
 8112964:	60da      	str	r2, [r3, #12]
 8112966:	e005      	b.n	8112974 <tcp_process+0x5e4>
 8112968:	697b      	ldr	r3, [r7, #20]
 811296a:	68db      	ldr	r3, [r3, #12]
 811296c:	617b      	str	r3, [r7, #20]
 811296e:	697b      	ldr	r3, [r7, #20]
 8112970:	2b00      	cmp	r3, #0
 8112972:	d1ef      	bne.n	8112954 <tcp_process+0x5c4>
 8112974:	687b      	ldr	r3, [r7, #4]
 8112976:	2200      	movs	r2, #0
 8112978:	60da      	str	r2, [r3, #12]
 811297a:	4b77      	ldr	r3, [pc, #476]	@ (8112b58 <tcp_process+0x7c8>)
 811297c:	2201      	movs	r2, #1
 811297e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8112980:	687b      	ldr	r3, [r7, #4]
 8112982:	220a      	movs	r2, #10
 8112984:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8112986:	4b75      	ldr	r3, [pc, #468]	@ (8112b5c <tcp_process+0x7cc>)
 8112988:	681a      	ldr	r2, [r3, #0]
 811298a:	687b      	ldr	r3, [r7, #4]
 811298c:	60da      	str	r2, [r3, #12]
 811298e:	4a73      	ldr	r2, [pc, #460]	@ (8112b5c <tcp_process+0x7cc>)
 8112990:	687b      	ldr	r3, [r7, #4]
 8112992:	6013      	str	r3, [r2, #0]
 8112994:	f002 fe98 	bl	81156c8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8112998:	e0d2      	b.n	8112b40 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 811299a:	687b      	ldr	r3, [r7, #4]
 811299c:	8b5b      	ldrh	r3, [r3, #26]
 811299e:	f043 0302 	orr.w	r3, r3, #2
 81129a2:	b29a      	uxth	r2, r3
 81129a4:	687b      	ldr	r3, [r7, #4]
 81129a6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 81129a8:	687b      	ldr	r3, [r7, #4]
 81129aa:	2208      	movs	r2, #8
 81129ac:	751a      	strb	r2, [r3, #20]
      break;
 81129ae:	e0c7      	b.n	8112b40 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 81129b0:	4b6b      	ldr	r3, [pc, #428]	@ (8112b60 <tcp_process+0x7d0>)
 81129b2:	781b      	ldrb	r3, [r3, #0]
 81129b4:	f003 0310 	and.w	r3, r3, #16
 81129b8:	2b00      	cmp	r3, #0
 81129ba:	f000 80c1 	beq.w	8112b40 <tcp_process+0x7b0>
 81129be:	687b      	ldr	r3, [r7, #4]
 81129c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81129c2:	4b68      	ldr	r3, [pc, #416]	@ (8112b64 <tcp_process+0x7d4>)
 81129c4:	681b      	ldr	r3, [r3, #0]
 81129c6:	429a      	cmp	r2, r3
 81129c8:	f040 80ba 	bne.w	8112b40 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 81129cc:	687b      	ldr	r3, [r7, #4]
 81129ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 81129d0:	2b00      	cmp	r3, #0
 81129d2:	f040 80b5 	bne.w	8112b40 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 81129d6:	687b      	ldr	r3, [r7, #4]
 81129d8:	2206      	movs	r2, #6
 81129da:	751a      	strb	r2, [r3, #20]
      break;
 81129dc:	e0b0      	b.n	8112b40 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 81129de:	6878      	ldr	r0, [r7, #4]
 81129e0:	f000 f9ca 	bl	8112d78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 81129e4:	4b60      	ldr	r3, [pc, #384]	@ (8112b68 <tcp_process+0x7d8>)
 81129e6:	781b      	ldrb	r3, [r3, #0]
 81129e8:	f003 0320 	and.w	r3, r3, #32
 81129ec:	2b00      	cmp	r3, #0
 81129ee:	f000 80a9 	beq.w	8112b44 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 81129f2:	687b      	ldr	r3, [r7, #4]
 81129f4:	8b5b      	ldrh	r3, [r3, #26]
 81129f6:	f043 0302 	orr.w	r3, r3, #2
 81129fa:	b29a      	uxth	r2, r3
 81129fc:	687b      	ldr	r3, [r7, #4]
 81129fe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8112a00:	6878      	ldr	r0, [r7, #4]
 8112a02:	f7fe fd39 	bl	8111478 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8112a06:	4b59      	ldr	r3, [pc, #356]	@ (8112b6c <tcp_process+0x7dc>)
 8112a08:	681b      	ldr	r3, [r3, #0]
 8112a0a:	687a      	ldr	r2, [r7, #4]
 8112a0c:	429a      	cmp	r2, r3
 8112a0e:	d105      	bne.n	8112a1c <tcp_process+0x68c>
 8112a10:	4b56      	ldr	r3, [pc, #344]	@ (8112b6c <tcp_process+0x7dc>)
 8112a12:	681b      	ldr	r3, [r3, #0]
 8112a14:	68db      	ldr	r3, [r3, #12]
 8112a16:	4a55      	ldr	r2, [pc, #340]	@ (8112b6c <tcp_process+0x7dc>)
 8112a18:	6013      	str	r3, [r2, #0]
 8112a1a:	e013      	b.n	8112a44 <tcp_process+0x6b4>
 8112a1c:	4b53      	ldr	r3, [pc, #332]	@ (8112b6c <tcp_process+0x7dc>)
 8112a1e:	681b      	ldr	r3, [r3, #0]
 8112a20:	613b      	str	r3, [r7, #16]
 8112a22:	e00c      	b.n	8112a3e <tcp_process+0x6ae>
 8112a24:	693b      	ldr	r3, [r7, #16]
 8112a26:	68db      	ldr	r3, [r3, #12]
 8112a28:	687a      	ldr	r2, [r7, #4]
 8112a2a:	429a      	cmp	r2, r3
 8112a2c:	d104      	bne.n	8112a38 <tcp_process+0x6a8>
 8112a2e:	687b      	ldr	r3, [r7, #4]
 8112a30:	68da      	ldr	r2, [r3, #12]
 8112a32:	693b      	ldr	r3, [r7, #16]
 8112a34:	60da      	str	r2, [r3, #12]
 8112a36:	e005      	b.n	8112a44 <tcp_process+0x6b4>
 8112a38:	693b      	ldr	r3, [r7, #16]
 8112a3a:	68db      	ldr	r3, [r3, #12]
 8112a3c:	613b      	str	r3, [r7, #16]
 8112a3e:	693b      	ldr	r3, [r7, #16]
 8112a40:	2b00      	cmp	r3, #0
 8112a42:	d1ef      	bne.n	8112a24 <tcp_process+0x694>
 8112a44:	687b      	ldr	r3, [r7, #4]
 8112a46:	2200      	movs	r2, #0
 8112a48:	60da      	str	r2, [r3, #12]
 8112a4a:	4b43      	ldr	r3, [pc, #268]	@ (8112b58 <tcp_process+0x7c8>)
 8112a4c:	2201      	movs	r2, #1
 8112a4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8112a50:	687b      	ldr	r3, [r7, #4]
 8112a52:	220a      	movs	r2, #10
 8112a54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8112a56:	4b41      	ldr	r3, [pc, #260]	@ (8112b5c <tcp_process+0x7cc>)
 8112a58:	681a      	ldr	r2, [r3, #0]
 8112a5a:	687b      	ldr	r3, [r7, #4]
 8112a5c:	60da      	str	r2, [r3, #12]
 8112a5e:	4a3f      	ldr	r2, [pc, #252]	@ (8112b5c <tcp_process+0x7cc>)
 8112a60:	687b      	ldr	r3, [r7, #4]
 8112a62:	6013      	str	r3, [r2, #0]
 8112a64:	f002 fe30 	bl	81156c8 <tcp_timer_needed>
      }
      break;
 8112a68:	e06c      	b.n	8112b44 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8112a6a:	6878      	ldr	r0, [r7, #4]
 8112a6c:	f000 f984 	bl	8112d78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8112a70:	4b3b      	ldr	r3, [pc, #236]	@ (8112b60 <tcp_process+0x7d0>)
 8112a72:	781b      	ldrb	r3, [r3, #0]
 8112a74:	f003 0310 	and.w	r3, r3, #16
 8112a78:	2b00      	cmp	r3, #0
 8112a7a:	d065      	beq.n	8112b48 <tcp_process+0x7b8>
 8112a7c:	687b      	ldr	r3, [r7, #4]
 8112a7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8112a80:	4b38      	ldr	r3, [pc, #224]	@ (8112b64 <tcp_process+0x7d4>)
 8112a82:	681b      	ldr	r3, [r3, #0]
 8112a84:	429a      	cmp	r2, r3
 8112a86:	d15f      	bne.n	8112b48 <tcp_process+0x7b8>
 8112a88:	687b      	ldr	r3, [r7, #4]
 8112a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112a8c:	2b00      	cmp	r3, #0
 8112a8e:	d15b      	bne.n	8112b48 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8112a90:	6878      	ldr	r0, [r7, #4]
 8112a92:	f7fe fcf1 	bl	8111478 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8112a96:	4b35      	ldr	r3, [pc, #212]	@ (8112b6c <tcp_process+0x7dc>)
 8112a98:	681b      	ldr	r3, [r3, #0]
 8112a9a:	687a      	ldr	r2, [r7, #4]
 8112a9c:	429a      	cmp	r2, r3
 8112a9e:	d105      	bne.n	8112aac <tcp_process+0x71c>
 8112aa0:	4b32      	ldr	r3, [pc, #200]	@ (8112b6c <tcp_process+0x7dc>)
 8112aa2:	681b      	ldr	r3, [r3, #0]
 8112aa4:	68db      	ldr	r3, [r3, #12]
 8112aa6:	4a31      	ldr	r2, [pc, #196]	@ (8112b6c <tcp_process+0x7dc>)
 8112aa8:	6013      	str	r3, [r2, #0]
 8112aaa:	e013      	b.n	8112ad4 <tcp_process+0x744>
 8112aac:	4b2f      	ldr	r3, [pc, #188]	@ (8112b6c <tcp_process+0x7dc>)
 8112aae:	681b      	ldr	r3, [r3, #0]
 8112ab0:	60fb      	str	r3, [r7, #12]
 8112ab2:	e00c      	b.n	8112ace <tcp_process+0x73e>
 8112ab4:	68fb      	ldr	r3, [r7, #12]
 8112ab6:	68db      	ldr	r3, [r3, #12]
 8112ab8:	687a      	ldr	r2, [r7, #4]
 8112aba:	429a      	cmp	r2, r3
 8112abc:	d104      	bne.n	8112ac8 <tcp_process+0x738>
 8112abe:	687b      	ldr	r3, [r7, #4]
 8112ac0:	68da      	ldr	r2, [r3, #12]
 8112ac2:	68fb      	ldr	r3, [r7, #12]
 8112ac4:	60da      	str	r2, [r3, #12]
 8112ac6:	e005      	b.n	8112ad4 <tcp_process+0x744>
 8112ac8:	68fb      	ldr	r3, [r7, #12]
 8112aca:	68db      	ldr	r3, [r3, #12]
 8112acc:	60fb      	str	r3, [r7, #12]
 8112ace:	68fb      	ldr	r3, [r7, #12]
 8112ad0:	2b00      	cmp	r3, #0
 8112ad2:	d1ef      	bne.n	8112ab4 <tcp_process+0x724>
 8112ad4:	687b      	ldr	r3, [r7, #4]
 8112ad6:	2200      	movs	r2, #0
 8112ad8:	60da      	str	r2, [r3, #12]
 8112ada:	4b1f      	ldr	r3, [pc, #124]	@ (8112b58 <tcp_process+0x7c8>)
 8112adc:	2201      	movs	r2, #1
 8112ade:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8112ae0:	687b      	ldr	r3, [r7, #4]
 8112ae2:	220a      	movs	r2, #10
 8112ae4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8112ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8112b5c <tcp_process+0x7cc>)
 8112ae8:	681a      	ldr	r2, [r3, #0]
 8112aea:	687b      	ldr	r3, [r7, #4]
 8112aec:	60da      	str	r2, [r3, #12]
 8112aee:	4a1b      	ldr	r2, [pc, #108]	@ (8112b5c <tcp_process+0x7cc>)
 8112af0:	687b      	ldr	r3, [r7, #4]
 8112af2:	6013      	str	r3, [r2, #0]
 8112af4:	f002 fde8 	bl	81156c8 <tcp_timer_needed>
      }
      break;
 8112af8:	e026      	b.n	8112b48 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8112afa:	6878      	ldr	r0, [r7, #4]
 8112afc:	f000 f93c 	bl	8112d78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8112b00:	4b17      	ldr	r3, [pc, #92]	@ (8112b60 <tcp_process+0x7d0>)
 8112b02:	781b      	ldrb	r3, [r3, #0]
 8112b04:	f003 0310 	and.w	r3, r3, #16
 8112b08:	2b00      	cmp	r3, #0
 8112b0a:	d01f      	beq.n	8112b4c <tcp_process+0x7bc>
 8112b0c:	687b      	ldr	r3, [r7, #4]
 8112b0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8112b10:	4b14      	ldr	r3, [pc, #80]	@ (8112b64 <tcp_process+0x7d4>)
 8112b12:	681b      	ldr	r3, [r3, #0]
 8112b14:	429a      	cmp	r2, r3
 8112b16:	d119      	bne.n	8112b4c <tcp_process+0x7bc>
 8112b18:	687b      	ldr	r3, [r7, #4]
 8112b1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112b1c:	2b00      	cmp	r3, #0
 8112b1e:	d115      	bne.n	8112b4c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8112b20:	4b11      	ldr	r3, [pc, #68]	@ (8112b68 <tcp_process+0x7d8>)
 8112b22:	781b      	ldrb	r3, [r3, #0]
 8112b24:	f043 0310 	orr.w	r3, r3, #16
 8112b28:	b2da      	uxtb	r2, r3
 8112b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8112b68 <tcp_process+0x7d8>)
 8112b2c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8112b2e:	e00d      	b.n	8112b4c <tcp_process+0x7bc>
    default:
      break;
 8112b30:	bf00      	nop
 8112b32:	e00c      	b.n	8112b4e <tcp_process+0x7be>
      break;
 8112b34:	bf00      	nop
 8112b36:	e00a      	b.n	8112b4e <tcp_process+0x7be>
      break;
 8112b38:	bf00      	nop
 8112b3a:	e008      	b.n	8112b4e <tcp_process+0x7be>
      break;
 8112b3c:	bf00      	nop
 8112b3e:	e006      	b.n	8112b4e <tcp_process+0x7be>
      break;
 8112b40:	bf00      	nop
 8112b42:	e004      	b.n	8112b4e <tcp_process+0x7be>
      break;
 8112b44:	bf00      	nop
 8112b46:	e002      	b.n	8112b4e <tcp_process+0x7be>
      break;
 8112b48:	bf00      	nop
 8112b4a:	e000      	b.n	8112b4e <tcp_process+0x7be>
      break;
 8112b4c:	bf00      	nop
  }
  return ERR_OK;
 8112b4e:	2300      	movs	r3, #0
}
 8112b50:	4618      	mov	r0, r3
 8112b52:	3724      	adds	r7, #36	@ 0x24
 8112b54:	46bd      	mov	sp, r7
 8112b56:	bd90      	pop	{r4, r7, pc}
 8112b58:	1000b860 	.word	0x1000b860
 8112b5c:	1000b85c 	.word	0x1000b85c
 8112b60:	1000b890 	.word	0x1000b890
 8112b64:	1000b888 	.word	0x1000b888
 8112b68:	1000b891 	.word	0x1000b891
 8112b6c:	1000b858 	.word	0x1000b858

08112b70 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8112b70:	b590      	push	{r4, r7, lr}
 8112b72:	b085      	sub	sp, #20
 8112b74:	af00      	add	r7, sp, #0
 8112b76:	6078      	str	r0, [r7, #4]
 8112b78:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8112b7a:	687b      	ldr	r3, [r7, #4]
 8112b7c:	2b00      	cmp	r3, #0
 8112b7e:	d106      	bne.n	8112b8e <tcp_oos_insert_segment+0x1e>
 8112b80:	4b3b      	ldr	r3, [pc, #236]	@ (8112c70 <tcp_oos_insert_segment+0x100>)
 8112b82:	f240 421f 	movw	r2, #1055	@ 0x41f
 8112b86:	493b      	ldr	r1, [pc, #236]	@ (8112c74 <tcp_oos_insert_segment+0x104>)
 8112b88:	483b      	ldr	r0, [pc, #236]	@ (8112c78 <tcp_oos_insert_segment+0x108>)
 8112b8a:	f003 fead 	bl	81168e8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8112b8e:	687b      	ldr	r3, [r7, #4]
 8112b90:	68db      	ldr	r3, [r3, #12]
 8112b92:	899b      	ldrh	r3, [r3, #12]
 8112b94:	b29b      	uxth	r3, r3
 8112b96:	4618      	mov	r0, r3
 8112b98:	f7f8 ff50 	bl	810ba3c <lwip_htons>
 8112b9c:	4603      	mov	r3, r0
 8112b9e:	b2db      	uxtb	r3, r3
 8112ba0:	f003 0301 	and.w	r3, r3, #1
 8112ba4:	2b00      	cmp	r3, #0
 8112ba6:	d028      	beq.n	8112bfa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8112ba8:	6838      	ldr	r0, [r7, #0]
 8112baa:	f7fe fa63 	bl	8111074 <tcp_segs_free>
    next = NULL;
 8112bae:	2300      	movs	r3, #0
 8112bb0:	603b      	str	r3, [r7, #0]
 8112bb2:	e056      	b.n	8112c62 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8112bb4:	683b      	ldr	r3, [r7, #0]
 8112bb6:	68db      	ldr	r3, [r3, #12]
 8112bb8:	899b      	ldrh	r3, [r3, #12]
 8112bba:	b29b      	uxth	r3, r3
 8112bbc:	4618      	mov	r0, r3
 8112bbe:	f7f8 ff3d 	bl	810ba3c <lwip_htons>
 8112bc2:	4603      	mov	r3, r0
 8112bc4:	b2db      	uxtb	r3, r3
 8112bc6:	f003 0301 	and.w	r3, r3, #1
 8112bca:	2b00      	cmp	r3, #0
 8112bcc:	d00d      	beq.n	8112bea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8112bce:	687b      	ldr	r3, [r7, #4]
 8112bd0:	68db      	ldr	r3, [r3, #12]
 8112bd2:	899b      	ldrh	r3, [r3, #12]
 8112bd4:	b29c      	uxth	r4, r3
 8112bd6:	2001      	movs	r0, #1
 8112bd8:	f7f8 ff30 	bl	810ba3c <lwip_htons>
 8112bdc:	4603      	mov	r3, r0
 8112bde:	461a      	mov	r2, r3
 8112be0:	687b      	ldr	r3, [r7, #4]
 8112be2:	68db      	ldr	r3, [r3, #12]
 8112be4:	4322      	orrs	r2, r4
 8112be6:	b292      	uxth	r2, r2
 8112be8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8112bea:	683b      	ldr	r3, [r7, #0]
 8112bec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8112bee:	683b      	ldr	r3, [r7, #0]
 8112bf0:	681b      	ldr	r3, [r3, #0]
 8112bf2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8112bf4:	68f8      	ldr	r0, [r7, #12]
 8112bf6:	f7fe fa52 	bl	811109e <tcp_seg_free>
    while (next &&
 8112bfa:	683b      	ldr	r3, [r7, #0]
 8112bfc:	2b00      	cmp	r3, #0
 8112bfe:	d00e      	beq.n	8112c1e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8112c00:	687b      	ldr	r3, [r7, #4]
 8112c02:	891b      	ldrh	r3, [r3, #8]
 8112c04:	461a      	mov	r2, r3
 8112c06:	4b1d      	ldr	r3, [pc, #116]	@ (8112c7c <tcp_oos_insert_segment+0x10c>)
 8112c08:	681b      	ldr	r3, [r3, #0]
 8112c0a:	441a      	add	r2, r3
 8112c0c:	683b      	ldr	r3, [r7, #0]
 8112c0e:	68db      	ldr	r3, [r3, #12]
 8112c10:	685b      	ldr	r3, [r3, #4]
 8112c12:	6839      	ldr	r1, [r7, #0]
 8112c14:	8909      	ldrh	r1, [r1, #8]
 8112c16:	440b      	add	r3, r1
 8112c18:	1ad3      	subs	r3, r2, r3
    while (next &&
 8112c1a:	2b00      	cmp	r3, #0
 8112c1c:	daca      	bge.n	8112bb4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8112c1e:	683b      	ldr	r3, [r7, #0]
 8112c20:	2b00      	cmp	r3, #0
 8112c22:	d01e      	beq.n	8112c62 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8112c24:	687b      	ldr	r3, [r7, #4]
 8112c26:	891b      	ldrh	r3, [r3, #8]
 8112c28:	461a      	mov	r2, r3
 8112c2a:	4b14      	ldr	r3, [pc, #80]	@ (8112c7c <tcp_oos_insert_segment+0x10c>)
 8112c2c:	681b      	ldr	r3, [r3, #0]
 8112c2e:	441a      	add	r2, r3
 8112c30:	683b      	ldr	r3, [r7, #0]
 8112c32:	68db      	ldr	r3, [r3, #12]
 8112c34:	685b      	ldr	r3, [r3, #4]
 8112c36:	1ad3      	subs	r3, r2, r3
    if (next &&
 8112c38:	2b00      	cmp	r3, #0
 8112c3a:	dd12      	ble.n	8112c62 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8112c3c:	683b      	ldr	r3, [r7, #0]
 8112c3e:	68db      	ldr	r3, [r3, #12]
 8112c40:	685b      	ldr	r3, [r3, #4]
 8112c42:	b29a      	uxth	r2, r3
 8112c44:	4b0d      	ldr	r3, [pc, #52]	@ (8112c7c <tcp_oos_insert_segment+0x10c>)
 8112c46:	681b      	ldr	r3, [r3, #0]
 8112c48:	b29b      	uxth	r3, r3
 8112c4a:	1ad3      	subs	r3, r2, r3
 8112c4c:	b29a      	uxth	r2, r3
 8112c4e:	687b      	ldr	r3, [r7, #4]
 8112c50:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8112c52:	687b      	ldr	r3, [r7, #4]
 8112c54:	685a      	ldr	r2, [r3, #4]
 8112c56:	687b      	ldr	r3, [r7, #4]
 8112c58:	891b      	ldrh	r3, [r3, #8]
 8112c5a:	4619      	mov	r1, r3
 8112c5c:	4610      	mov	r0, r2
 8112c5e:	f7fc fd11 	bl	810f684 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8112c62:	687b      	ldr	r3, [r7, #4]
 8112c64:	683a      	ldr	r2, [r7, #0]
 8112c66:	601a      	str	r2, [r3, #0]
}
 8112c68:	bf00      	nop
 8112c6a:	3714      	adds	r7, #20
 8112c6c:	46bd      	mov	sp, r7
 8112c6e:	bd90      	pop	{r4, r7, pc}
 8112c70:	081192cc 	.word	0x081192cc
 8112c74:	081195cc 	.word	0x081195cc
 8112c78:	08119358 	.word	0x08119358
 8112c7c:	1000b884 	.word	0x1000b884

08112c80 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8112c80:	b5b0      	push	{r4, r5, r7, lr}
 8112c82:	b086      	sub	sp, #24
 8112c84:	af00      	add	r7, sp, #0
 8112c86:	60f8      	str	r0, [r7, #12]
 8112c88:	60b9      	str	r1, [r7, #8]
 8112c8a:	607a      	str	r2, [r7, #4]
 8112c8c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8112c8e:	e03e      	b.n	8112d0e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8112c90:	68bb      	ldr	r3, [r7, #8]
 8112c92:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8112c94:	68bb      	ldr	r3, [r7, #8]
 8112c96:	681b      	ldr	r3, [r3, #0]
 8112c98:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8112c9a:	697b      	ldr	r3, [r7, #20]
 8112c9c:	685b      	ldr	r3, [r3, #4]
 8112c9e:	4618      	mov	r0, r3
 8112ca0:	f7fc ff04 	bl	810faac <pbuf_clen>
 8112ca4:	4603      	mov	r3, r0
 8112ca6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8112ca8:	68fb      	ldr	r3, [r7, #12]
 8112caa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8112cae:	8a7a      	ldrh	r2, [r7, #18]
 8112cb0:	429a      	cmp	r2, r3
 8112cb2:	d906      	bls.n	8112cc2 <tcp_free_acked_segments+0x42>
 8112cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8112d60 <tcp_free_acked_segments+0xe0>)
 8112cb6:	f240 4257 	movw	r2, #1111	@ 0x457
 8112cba:	492a      	ldr	r1, [pc, #168]	@ (8112d64 <tcp_free_acked_segments+0xe4>)
 8112cbc:	482a      	ldr	r0, [pc, #168]	@ (8112d68 <tcp_free_acked_segments+0xe8>)
 8112cbe:	f003 fe13 	bl	81168e8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8112cc2:	68fb      	ldr	r3, [r7, #12]
 8112cc4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8112cc8:	8a7b      	ldrh	r3, [r7, #18]
 8112cca:	1ad3      	subs	r3, r2, r3
 8112ccc:	b29a      	uxth	r2, r3
 8112cce:	68fb      	ldr	r3, [r7, #12]
 8112cd0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8112cd4:	697b      	ldr	r3, [r7, #20]
 8112cd6:	891a      	ldrh	r2, [r3, #8]
 8112cd8:	4b24      	ldr	r3, [pc, #144]	@ (8112d6c <tcp_free_acked_segments+0xec>)
 8112cda:	881b      	ldrh	r3, [r3, #0]
 8112cdc:	4413      	add	r3, r2
 8112cde:	b29a      	uxth	r2, r3
 8112ce0:	4b22      	ldr	r3, [pc, #136]	@ (8112d6c <tcp_free_acked_segments+0xec>)
 8112ce2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8112ce4:	6978      	ldr	r0, [r7, #20]
 8112ce6:	f7fe f9da 	bl	811109e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8112cea:	68fb      	ldr	r3, [r7, #12]
 8112cec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8112cf0:	2b00      	cmp	r3, #0
 8112cf2:	d00c      	beq.n	8112d0e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8112cf4:	68bb      	ldr	r3, [r7, #8]
 8112cf6:	2b00      	cmp	r3, #0
 8112cf8:	d109      	bne.n	8112d0e <tcp_free_acked_segments+0x8e>
 8112cfa:	683b      	ldr	r3, [r7, #0]
 8112cfc:	2b00      	cmp	r3, #0
 8112cfe:	d106      	bne.n	8112d0e <tcp_free_acked_segments+0x8e>
 8112d00:	4b17      	ldr	r3, [pc, #92]	@ (8112d60 <tcp_free_acked_segments+0xe0>)
 8112d02:	f240 4261 	movw	r2, #1121	@ 0x461
 8112d06:	491a      	ldr	r1, [pc, #104]	@ (8112d70 <tcp_free_acked_segments+0xf0>)
 8112d08:	4817      	ldr	r0, [pc, #92]	@ (8112d68 <tcp_free_acked_segments+0xe8>)
 8112d0a:	f003 fded 	bl	81168e8 <iprintf>
  while (seg_list != NULL &&
 8112d0e:	68bb      	ldr	r3, [r7, #8]
 8112d10:	2b00      	cmp	r3, #0
 8112d12:	d020      	beq.n	8112d56 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8112d14:	68bb      	ldr	r3, [r7, #8]
 8112d16:	68db      	ldr	r3, [r3, #12]
 8112d18:	685b      	ldr	r3, [r3, #4]
 8112d1a:	4618      	mov	r0, r3
 8112d1c:	f7f8 fea3 	bl	810ba66 <lwip_htonl>
 8112d20:	4604      	mov	r4, r0
 8112d22:	68bb      	ldr	r3, [r7, #8]
 8112d24:	891b      	ldrh	r3, [r3, #8]
 8112d26:	461d      	mov	r5, r3
 8112d28:	68bb      	ldr	r3, [r7, #8]
 8112d2a:	68db      	ldr	r3, [r3, #12]
 8112d2c:	899b      	ldrh	r3, [r3, #12]
 8112d2e:	b29b      	uxth	r3, r3
 8112d30:	4618      	mov	r0, r3
 8112d32:	f7f8 fe83 	bl	810ba3c <lwip_htons>
 8112d36:	4603      	mov	r3, r0
 8112d38:	b2db      	uxtb	r3, r3
 8112d3a:	f003 0303 	and.w	r3, r3, #3
 8112d3e:	2b00      	cmp	r3, #0
 8112d40:	d001      	beq.n	8112d46 <tcp_free_acked_segments+0xc6>
 8112d42:	2301      	movs	r3, #1
 8112d44:	e000      	b.n	8112d48 <tcp_free_acked_segments+0xc8>
 8112d46:	2300      	movs	r3, #0
 8112d48:	442b      	add	r3, r5
 8112d4a:	18e2      	adds	r2, r4, r3
 8112d4c:	4b09      	ldr	r3, [pc, #36]	@ (8112d74 <tcp_free_acked_segments+0xf4>)
 8112d4e:	681b      	ldr	r3, [r3, #0]
 8112d50:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8112d52:	2b00      	cmp	r3, #0
 8112d54:	dd9c      	ble.n	8112c90 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8112d56:	68bb      	ldr	r3, [r7, #8]
}
 8112d58:	4618      	mov	r0, r3
 8112d5a:	3718      	adds	r7, #24
 8112d5c:	46bd      	mov	sp, r7
 8112d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8112d60:	081192cc 	.word	0x081192cc
 8112d64:	081195f4 	.word	0x081195f4
 8112d68:	08119358 	.word	0x08119358
 8112d6c:	1000b88c 	.word	0x1000b88c
 8112d70:	0811961c 	.word	0x0811961c
 8112d74:	1000b888 	.word	0x1000b888

08112d78 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8112d78:	b5b0      	push	{r4, r5, r7, lr}
 8112d7a:	b094      	sub	sp, #80	@ 0x50
 8112d7c:	af00      	add	r7, sp, #0
 8112d7e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8112d80:	2300      	movs	r3, #0
 8112d82:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8112d84:	687b      	ldr	r3, [r7, #4]
 8112d86:	2b00      	cmp	r3, #0
 8112d88:	d106      	bne.n	8112d98 <tcp_receive+0x20>
 8112d8a:	4b91      	ldr	r3, [pc, #580]	@ (8112fd0 <tcp_receive+0x258>)
 8112d8c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8112d90:	4990      	ldr	r1, [pc, #576]	@ (8112fd4 <tcp_receive+0x25c>)
 8112d92:	4891      	ldr	r0, [pc, #580]	@ (8112fd8 <tcp_receive+0x260>)
 8112d94:	f003 fda8 	bl	81168e8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8112d98:	687b      	ldr	r3, [r7, #4]
 8112d9a:	7d1b      	ldrb	r3, [r3, #20]
 8112d9c:	2b03      	cmp	r3, #3
 8112d9e:	d806      	bhi.n	8112dae <tcp_receive+0x36>
 8112da0:	4b8b      	ldr	r3, [pc, #556]	@ (8112fd0 <tcp_receive+0x258>)
 8112da2:	f240 427c 	movw	r2, #1148	@ 0x47c
 8112da6:	498d      	ldr	r1, [pc, #564]	@ (8112fdc <tcp_receive+0x264>)
 8112da8:	488b      	ldr	r0, [pc, #556]	@ (8112fd8 <tcp_receive+0x260>)
 8112daa:	f003 fd9d 	bl	81168e8 <iprintf>

  if (flags & TCP_ACK) {
 8112dae:	4b8c      	ldr	r3, [pc, #560]	@ (8112fe0 <tcp_receive+0x268>)
 8112db0:	781b      	ldrb	r3, [r3, #0]
 8112db2:	f003 0310 	and.w	r3, r3, #16
 8112db6:	2b00      	cmp	r3, #0
 8112db8:	f000 8264 	beq.w	8113284 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8112dbc:	687b      	ldr	r3, [r7, #4]
 8112dbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8112dc2:	461a      	mov	r2, r3
 8112dc4:	687b      	ldr	r3, [r7, #4]
 8112dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8112dc8:	4413      	add	r3, r2
 8112dca:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8112dcc:	687b      	ldr	r3, [r7, #4]
 8112dce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8112dd0:	4b84      	ldr	r3, [pc, #528]	@ (8112fe4 <tcp_receive+0x26c>)
 8112dd2:	681b      	ldr	r3, [r3, #0]
 8112dd4:	1ad3      	subs	r3, r2, r3
 8112dd6:	2b00      	cmp	r3, #0
 8112dd8:	db1b      	blt.n	8112e12 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8112dda:	687b      	ldr	r3, [r7, #4]
 8112ddc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8112dde:	4b81      	ldr	r3, [pc, #516]	@ (8112fe4 <tcp_receive+0x26c>)
 8112de0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8112de2:	429a      	cmp	r2, r3
 8112de4:	d106      	bne.n	8112df4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8112de6:	687b      	ldr	r3, [r7, #4]
 8112de8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8112dea:	4b7f      	ldr	r3, [pc, #508]	@ (8112fe8 <tcp_receive+0x270>)
 8112dec:	681b      	ldr	r3, [r3, #0]
 8112dee:	1ad3      	subs	r3, r2, r3
 8112df0:	2b00      	cmp	r3, #0
 8112df2:	db0e      	blt.n	8112e12 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8112df4:	687b      	ldr	r3, [r7, #4]
 8112df6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8112df8:	4b7b      	ldr	r3, [pc, #492]	@ (8112fe8 <tcp_receive+0x270>)
 8112dfa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8112dfc:	429a      	cmp	r2, r3
 8112dfe:	d125      	bne.n	8112e4c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8112e00:	4b7a      	ldr	r3, [pc, #488]	@ (8112fec <tcp_receive+0x274>)
 8112e02:	681b      	ldr	r3, [r3, #0]
 8112e04:	89db      	ldrh	r3, [r3, #14]
 8112e06:	b29a      	uxth	r2, r3
 8112e08:	687b      	ldr	r3, [r7, #4]
 8112e0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8112e0e:	429a      	cmp	r2, r3
 8112e10:	d91c      	bls.n	8112e4c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8112e12:	4b76      	ldr	r3, [pc, #472]	@ (8112fec <tcp_receive+0x274>)
 8112e14:	681b      	ldr	r3, [r3, #0]
 8112e16:	89db      	ldrh	r3, [r3, #14]
 8112e18:	b29a      	uxth	r2, r3
 8112e1a:	687b      	ldr	r3, [r7, #4]
 8112e1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8112e20:	687b      	ldr	r3, [r7, #4]
 8112e22:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8112e26:	687b      	ldr	r3, [r7, #4]
 8112e28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8112e2c:	429a      	cmp	r2, r3
 8112e2e:	d205      	bcs.n	8112e3c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8112e30:	687b      	ldr	r3, [r7, #4]
 8112e32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8112e36:	687b      	ldr	r3, [r7, #4]
 8112e38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8112e3c:	4b69      	ldr	r3, [pc, #420]	@ (8112fe4 <tcp_receive+0x26c>)
 8112e3e:	681a      	ldr	r2, [r3, #0]
 8112e40:	687b      	ldr	r3, [r7, #4]
 8112e42:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8112e44:	4b68      	ldr	r3, [pc, #416]	@ (8112fe8 <tcp_receive+0x270>)
 8112e46:	681a      	ldr	r2, [r3, #0]
 8112e48:	687b      	ldr	r3, [r7, #4]
 8112e4a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8112e4c:	4b66      	ldr	r3, [pc, #408]	@ (8112fe8 <tcp_receive+0x270>)
 8112e4e:	681a      	ldr	r2, [r3, #0]
 8112e50:	687b      	ldr	r3, [r7, #4]
 8112e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8112e54:	1ad3      	subs	r3, r2, r3
 8112e56:	2b00      	cmp	r3, #0
 8112e58:	dc58      	bgt.n	8112f0c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8112e5a:	4b65      	ldr	r3, [pc, #404]	@ (8112ff0 <tcp_receive+0x278>)
 8112e5c:	881b      	ldrh	r3, [r3, #0]
 8112e5e:	2b00      	cmp	r3, #0
 8112e60:	d14b      	bne.n	8112efa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8112e62:	687b      	ldr	r3, [r7, #4]
 8112e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8112e66:	687a      	ldr	r2, [r7, #4]
 8112e68:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8112e6c:	4413      	add	r3, r2
 8112e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112e70:	429a      	cmp	r2, r3
 8112e72:	d142      	bne.n	8112efa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8112e74:	687b      	ldr	r3, [r7, #4]
 8112e76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8112e7a:	2b00      	cmp	r3, #0
 8112e7c:	db3d      	blt.n	8112efa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8112e7e:	687b      	ldr	r3, [r7, #4]
 8112e80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8112e82:	4b59      	ldr	r3, [pc, #356]	@ (8112fe8 <tcp_receive+0x270>)
 8112e84:	681b      	ldr	r3, [r3, #0]
 8112e86:	429a      	cmp	r2, r3
 8112e88:	d137      	bne.n	8112efa <tcp_receive+0x182>
              found_dupack = 1;
 8112e8a:	2301      	movs	r3, #1
 8112e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8112e8e:	687b      	ldr	r3, [r7, #4]
 8112e90:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8112e94:	2bff      	cmp	r3, #255	@ 0xff
 8112e96:	d007      	beq.n	8112ea8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8112e98:	687b      	ldr	r3, [r7, #4]
 8112e9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8112e9e:	3301      	adds	r3, #1
 8112ea0:	b2da      	uxtb	r2, r3
 8112ea2:	687b      	ldr	r3, [r7, #4]
 8112ea4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8112ea8:	687b      	ldr	r3, [r7, #4]
 8112eaa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8112eae:	2b03      	cmp	r3, #3
 8112eb0:	d91b      	bls.n	8112eea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8112eb2:	687b      	ldr	r3, [r7, #4]
 8112eb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8112eb8:	687b      	ldr	r3, [r7, #4]
 8112eba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8112ebc:	4413      	add	r3, r2
 8112ebe:	b29a      	uxth	r2, r3
 8112ec0:	687b      	ldr	r3, [r7, #4]
 8112ec2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8112ec6:	429a      	cmp	r2, r3
 8112ec8:	d30a      	bcc.n	8112ee0 <tcp_receive+0x168>
 8112eca:	687b      	ldr	r3, [r7, #4]
 8112ecc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8112ed0:	687b      	ldr	r3, [r7, #4]
 8112ed2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8112ed4:	4413      	add	r3, r2
 8112ed6:	b29a      	uxth	r2, r3
 8112ed8:	687b      	ldr	r3, [r7, #4]
 8112eda:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8112ede:	e004      	b.n	8112eea <tcp_receive+0x172>
 8112ee0:	687b      	ldr	r3, [r7, #4]
 8112ee2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8112ee6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8112eea:	687b      	ldr	r3, [r7, #4]
 8112eec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8112ef0:	2b02      	cmp	r3, #2
 8112ef2:	d902      	bls.n	8112efa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8112ef4:	6878      	ldr	r0, [r7, #4]
 8112ef6:	f001 fee9 	bl	8114ccc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8112efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8112efc:	2b00      	cmp	r3, #0
 8112efe:	f040 8161 	bne.w	81131c4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8112f02:	687b      	ldr	r3, [r7, #4]
 8112f04:	2200      	movs	r2, #0
 8112f06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8112f0a:	e15b      	b.n	81131c4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8112f0c:	4b36      	ldr	r3, [pc, #216]	@ (8112fe8 <tcp_receive+0x270>)
 8112f0e:	681a      	ldr	r2, [r3, #0]
 8112f10:	687b      	ldr	r3, [r7, #4]
 8112f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8112f14:	1ad3      	subs	r3, r2, r3
 8112f16:	3b01      	subs	r3, #1
 8112f18:	2b00      	cmp	r3, #0
 8112f1a:	f2c0 814e 	blt.w	81131ba <tcp_receive+0x442>
 8112f1e:	4b32      	ldr	r3, [pc, #200]	@ (8112fe8 <tcp_receive+0x270>)
 8112f20:	681a      	ldr	r2, [r3, #0]
 8112f22:	687b      	ldr	r3, [r7, #4]
 8112f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8112f26:	1ad3      	subs	r3, r2, r3
 8112f28:	2b00      	cmp	r3, #0
 8112f2a:	f300 8146 	bgt.w	81131ba <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8112f2e:	687b      	ldr	r3, [r7, #4]
 8112f30:	8b5b      	ldrh	r3, [r3, #26]
 8112f32:	f003 0304 	and.w	r3, r3, #4
 8112f36:	2b00      	cmp	r3, #0
 8112f38:	d010      	beq.n	8112f5c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8112f3a:	687b      	ldr	r3, [r7, #4]
 8112f3c:	8b5b      	ldrh	r3, [r3, #26]
 8112f3e:	f023 0304 	bic.w	r3, r3, #4
 8112f42:	b29a      	uxth	r2, r3
 8112f44:	687b      	ldr	r3, [r7, #4]
 8112f46:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8112f48:	687b      	ldr	r3, [r7, #4]
 8112f4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8112f4e:	687b      	ldr	r3, [r7, #4]
 8112f50:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8112f54:	687b      	ldr	r3, [r7, #4]
 8112f56:	2200      	movs	r2, #0
 8112f58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8112f5c:	687b      	ldr	r3, [r7, #4]
 8112f5e:	2200      	movs	r2, #0
 8112f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8112f64:	687b      	ldr	r3, [r7, #4]
 8112f66:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8112f6a:	10db      	asrs	r3, r3, #3
 8112f6c:	b21b      	sxth	r3, r3
 8112f6e:	b29a      	uxth	r2, r3
 8112f70:	687b      	ldr	r3, [r7, #4]
 8112f72:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8112f76:	b29b      	uxth	r3, r3
 8112f78:	4413      	add	r3, r2
 8112f7a:	b29b      	uxth	r3, r3
 8112f7c:	b21a      	sxth	r2, r3
 8112f7e:	687b      	ldr	r3, [r7, #4]
 8112f80:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8112f84:	4b18      	ldr	r3, [pc, #96]	@ (8112fe8 <tcp_receive+0x270>)
 8112f86:	681b      	ldr	r3, [r3, #0]
 8112f88:	b29a      	uxth	r2, r3
 8112f8a:	687b      	ldr	r3, [r7, #4]
 8112f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8112f8e:	b29b      	uxth	r3, r3
 8112f90:	1ad3      	subs	r3, r2, r3
 8112f92:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8112f94:	687b      	ldr	r3, [r7, #4]
 8112f96:	2200      	movs	r2, #0
 8112f98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8112f9c:	4b12      	ldr	r3, [pc, #72]	@ (8112fe8 <tcp_receive+0x270>)
 8112f9e:	681a      	ldr	r2, [r3, #0]
 8112fa0:	687b      	ldr	r3, [r7, #4]
 8112fa2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8112fa4:	687b      	ldr	r3, [r7, #4]
 8112fa6:	7d1b      	ldrb	r3, [r3, #20]
 8112fa8:	2b03      	cmp	r3, #3
 8112faa:	f240 8097 	bls.w	81130dc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8112fae:	687b      	ldr	r3, [r7, #4]
 8112fb0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8112fb4:	687b      	ldr	r3, [r7, #4]
 8112fb6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8112fba:	429a      	cmp	r2, r3
 8112fbc:	d245      	bcs.n	811304a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8112fbe:	687b      	ldr	r3, [r7, #4]
 8112fc0:	8b5b      	ldrh	r3, [r3, #26]
 8112fc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8112fc6:	2b00      	cmp	r3, #0
 8112fc8:	d014      	beq.n	8112ff4 <tcp_receive+0x27c>
 8112fca:	2301      	movs	r3, #1
 8112fcc:	e013      	b.n	8112ff6 <tcp_receive+0x27e>
 8112fce:	bf00      	nop
 8112fd0:	081192cc 	.word	0x081192cc
 8112fd4:	0811963c 	.word	0x0811963c
 8112fd8:	08119358 	.word	0x08119358
 8112fdc:	08119658 	.word	0x08119658
 8112fe0:	1000b890 	.word	0x1000b890
 8112fe4:	1000b884 	.word	0x1000b884
 8112fe8:	1000b888 	.word	0x1000b888
 8112fec:	1000b874 	.word	0x1000b874
 8112ff0:	1000b88e 	.word	0x1000b88e
 8112ff4:	2302      	movs	r3, #2
 8112ff6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8112ffa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8112ffe:	b29a      	uxth	r2, r3
 8113000:	687b      	ldr	r3, [r7, #4]
 8113002:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8113004:	fb12 f303 	smulbb	r3, r2, r3
 8113008:	b29b      	uxth	r3, r3
 811300a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 811300c:	4293      	cmp	r3, r2
 811300e:	bf28      	it	cs
 8113010:	4613      	movcs	r3, r2
 8113012:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8113014:	687b      	ldr	r3, [r7, #4]
 8113016:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811301a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811301c:	4413      	add	r3, r2
 811301e:	b29a      	uxth	r2, r3
 8113020:	687b      	ldr	r3, [r7, #4]
 8113022:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8113026:	429a      	cmp	r2, r3
 8113028:	d309      	bcc.n	811303e <tcp_receive+0x2c6>
 811302a:	687b      	ldr	r3, [r7, #4]
 811302c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8113030:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8113032:	4413      	add	r3, r2
 8113034:	b29a      	uxth	r2, r3
 8113036:	687b      	ldr	r3, [r7, #4]
 8113038:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811303c:	e04e      	b.n	81130dc <tcp_receive+0x364>
 811303e:	687b      	ldr	r3, [r7, #4]
 8113040:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8113044:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8113048:	e048      	b.n	81130dc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 811304a:	687b      	ldr	r3, [r7, #4]
 811304c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8113050:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8113052:	4413      	add	r3, r2
 8113054:	b29a      	uxth	r2, r3
 8113056:	687b      	ldr	r3, [r7, #4]
 8113058:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 811305c:	429a      	cmp	r2, r3
 811305e:	d309      	bcc.n	8113074 <tcp_receive+0x2fc>
 8113060:	687b      	ldr	r3, [r7, #4]
 8113062:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8113066:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8113068:	4413      	add	r3, r2
 811306a:	b29a      	uxth	r2, r3
 811306c:	687b      	ldr	r3, [r7, #4]
 811306e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8113072:	e004      	b.n	811307e <tcp_receive+0x306>
 8113074:	687b      	ldr	r3, [r7, #4]
 8113076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811307a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 811307e:	687b      	ldr	r3, [r7, #4]
 8113080:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8113084:	687b      	ldr	r3, [r7, #4]
 8113086:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811308a:	429a      	cmp	r2, r3
 811308c:	d326      	bcc.n	81130dc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 811308e:	687b      	ldr	r3, [r7, #4]
 8113090:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8113094:	687b      	ldr	r3, [r7, #4]
 8113096:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811309a:	1ad3      	subs	r3, r2, r3
 811309c:	b29a      	uxth	r2, r3
 811309e:	687b      	ldr	r3, [r7, #4]
 81130a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 81130a4:	687b      	ldr	r3, [r7, #4]
 81130a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 81130aa:	687b      	ldr	r3, [r7, #4]
 81130ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81130ae:	4413      	add	r3, r2
 81130b0:	b29a      	uxth	r2, r3
 81130b2:	687b      	ldr	r3, [r7, #4]
 81130b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 81130b8:	429a      	cmp	r2, r3
 81130ba:	d30a      	bcc.n	81130d2 <tcp_receive+0x35a>
 81130bc:	687b      	ldr	r3, [r7, #4]
 81130be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 81130c2:	687b      	ldr	r3, [r7, #4]
 81130c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81130c6:	4413      	add	r3, r2
 81130c8:	b29a      	uxth	r2, r3
 81130ca:	687b      	ldr	r3, [r7, #4]
 81130cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 81130d0:	e004      	b.n	81130dc <tcp_receive+0x364>
 81130d2:	687b      	ldr	r3, [r7, #4]
 81130d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81130d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 81130dc:	687b      	ldr	r3, [r7, #4]
 81130de:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81130e0:	687b      	ldr	r3, [r7, #4]
 81130e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81130e4:	4a98      	ldr	r2, [pc, #608]	@ (8113348 <tcp_receive+0x5d0>)
 81130e6:	6878      	ldr	r0, [r7, #4]
 81130e8:	f7ff fdca 	bl	8112c80 <tcp_free_acked_segments>
 81130ec:	4602      	mov	r2, r0
 81130ee:	687b      	ldr	r3, [r7, #4]
 81130f0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 81130f2:	687b      	ldr	r3, [r7, #4]
 81130f4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 81130f6:	687b      	ldr	r3, [r7, #4]
 81130f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81130fa:	4a94      	ldr	r2, [pc, #592]	@ (811334c <tcp_receive+0x5d4>)
 81130fc:	6878      	ldr	r0, [r7, #4]
 81130fe:	f7ff fdbf 	bl	8112c80 <tcp_free_acked_segments>
 8113102:	4602      	mov	r2, r0
 8113104:	687b      	ldr	r3, [r7, #4]
 8113106:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8113108:	687b      	ldr	r3, [r7, #4]
 811310a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811310c:	2b00      	cmp	r3, #0
 811310e:	d104      	bne.n	811311a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8113110:	687b      	ldr	r3, [r7, #4]
 8113112:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8113116:	861a      	strh	r2, [r3, #48]	@ 0x30
 8113118:	e002      	b.n	8113120 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 811311a:	687b      	ldr	r3, [r7, #4]
 811311c:	2200      	movs	r2, #0
 811311e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8113120:	687b      	ldr	r3, [r7, #4]
 8113122:	2200      	movs	r2, #0
 8113124:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8113126:	687b      	ldr	r3, [r7, #4]
 8113128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811312a:	2b00      	cmp	r3, #0
 811312c:	d103      	bne.n	8113136 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 811312e:	687b      	ldr	r3, [r7, #4]
 8113130:	2200      	movs	r2, #0
 8113132:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8113136:	687b      	ldr	r3, [r7, #4]
 8113138:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 811313c:	4b84      	ldr	r3, [pc, #528]	@ (8113350 <tcp_receive+0x5d8>)
 811313e:	881b      	ldrh	r3, [r3, #0]
 8113140:	4413      	add	r3, r2
 8113142:	b29a      	uxth	r2, r3
 8113144:	687b      	ldr	r3, [r7, #4]
 8113146:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 811314a:	687b      	ldr	r3, [r7, #4]
 811314c:	8b5b      	ldrh	r3, [r3, #26]
 811314e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8113152:	2b00      	cmp	r3, #0
 8113154:	d035      	beq.n	81131c2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8113156:	687b      	ldr	r3, [r7, #4]
 8113158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811315a:	2b00      	cmp	r3, #0
 811315c:	d118      	bne.n	8113190 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 811315e:	687b      	ldr	r3, [r7, #4]
 8113160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113162:	2b00      	cmp	r3, #0
 8113164:	d00c      	beq.n	8113180 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8113166:	687b      	ldr	r3, [r7, #4]
 8113168:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 811316a:	687b      	ldr	r3, [r7, #4]
 811316c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811316e:	68db      	ldr	r3, [r3, #12]
 8113170:	685b      	ldr	r3, [r3, #4]
 8113172:	4618      	mov	r0, r3
 8113174:	f7f8 fc77 	bl	810ba66 <lwip_htonl>
 8113178:	4603      	mov	r3, r0
 811317a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 811317c:	2b00      	cmp	r3, #0
 811317e:	dc20      	bgt.n	81131c2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8113180:	687b      	ldr	r3, [r7, #4]
 8113182:	8b5b      	ldrh	r3, [r3, #26]
 8113184:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8113188:	b29a      	uxth	r2, r3
 811318a:	687b      	ldr	r3, [r7, #4]
 811318c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811318e:	e018      	b.n	81131c2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8113190:	687b      	ldr	r3, [r7, #4]
 8113192:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8113194:	687b      	ldr	r3, [r7, #4]
 8113196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8113198:	68db      	ldr	r3, [r3, #12]
 811319a:	685b      	ldr	r3, [r3, #4]
 811319c:	4618      	mov	r0, r3
 811319e:	f7f8 fc62 	bl	810ba66 <lwip_htonl>
 81131a2:	4603      	mov	r3, r0
 81131a4:	1ae3      	subs	r3, r4, r3
 81131a6:	2b00      	cmp	r3, #0
 81131a8:	dc0b      	bgt.n	81131c2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 81131aa:	687b      	ldr	r3, [r7, #4]
 81131ac:	8b5b      	ldrh	r3, [r3, #26]
 81131ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 81131b2:	b29a      	uxth	r2, r3
 81131b4:	687b      	ldr	r3, [r7, #4]
 81131b6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 81131b8:	e003      	b.n	81131c2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 81131ba:	6878      	ldr	r0, [r7, #4]
 81131bc:	f001 ff72 	bl	81150a4 <tcp_send_empty_ack>
 81131c0:	e000      	b.n	81131c4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 81131c2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 81131c4:	687b      	ldr	r3, [r7, #4]
 81131c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81131c8:	2b00      	cmp	r3, #0
 81131ca:	d05b      	beq.n	8113284 <tcp_receive+0x50c>
 81131cc:	687b      	ldr	r3, [r7, #4]
 81131ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81131d0:	4b60      	ldr	r3, [pc, #384]	@ (8113354 <tcp_receive+0x5dc>)
 81131d2:	681b      	ldr	r3, [r3, #0]
 81131d4:	1ad3      	subs	r3, r2, r3
 81131d6:	2b00      	cmp	r3, #0
 81131d8:	da54      	bge.n	8113284 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 81131da:	4b5f      	ldr	r3, [pc, #380]	@ (8113358 <tcp_receive+0x5e0>)
 81131dc:	681b      	ldr	r3, [r3, #0]
 81131de:	b29a      	uxth	r2, r3
 81131e0:	687b      	ldr	r3, [r7, #4]
 81131e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81131e4:	b29b      	uxth	r3, r3
 81131e6:	1ad3      	subs	r3, r2, r3
 81131e8:	b29b      	uxth	r3, r3
 81131ea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 81131ee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 81131f2:	687b      	ldr	r3, [r7, #4]
 81131f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 81131f8:	10db      	asrs	r3, r3, #3
 81131fa:	b21b      	sxth	r3, r3
 81131fc:	b29b      	uxth	r3, r3
 81131fe:	1ad3      	subs	r3, r2, r3
 8113200:	b29b      	uxth	r3, r3
 8113202:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8113206:	687b      	ldr	r3, [r7, #4]
 8113208:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811320c:	b29a      	uxth	r2, r3
 811320e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8113212:	4413      	add	r3, r2
 8113214:	b29b      	uxth	r3, r3
 8113216:	b21a      	sxth	r2, r3
 8113218:	687b      	ldr	r3, [r7, #4]
 811321a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 811321c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8113220:	2b00      	cmp	r3, #0
 8113222:	da05      	bge.n	8113230 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8113224:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8113228:	425b      	negs	r3, r3
 811322a:	b29b      	uxth	r3, r3
 811322c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8113230:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8113234:	687b      	ldr	r3, [r7, #4]
 8113236:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811323a:	109b      	asrs	r3, r3, #2
 811323c:	b21b      	sxth	r3, r3
 811323e:	b29b      	uxth	r3, r3
 8113240:	1ad3      	subs	r3, r2, r3
 8113242:	b29b      	uxth	r3, r3
 8113244:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8113248:	687b      	ldr	r3, [r7, #4]
 811324a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811324e:	b29a      	uxth	r2, r3
 8113250:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8113254:	4413      	add	r3, r2
 8113256:	b29b      	uxth	r3, r3
 8113258:	b21a      	sxth	r2, r3
 811325a:	687b      	ldr	r3, [r7, #4]
 811325c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 811325e:	687b      	ldr	r3, [r7, #4]
 8113260:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8113264:	10db      	asrs	r3, r3, #3
 8113266:	b21b      	sxth	r3, r3
 8113268:	b29a      	uxth	r2, r3
 811326a:	687b      	ldr	r3, [r7, #4]
 811326c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8113270:	b29b      	uxth	r3, r3
 8113272:	4413      	add	r3, r2
 8113274:	b29b      	uxth	r3, r3
 8113276:	b21a      	sxth	r2, r3
 8113278:	687b      	ldr	r3, [r7, #4]
 811327a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 811327e:	687b      	ldr	r3, [r7, #4]
 8113280:	2200      	movs	r2, #0
 8113282:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8113284:	4b35      	ldr	r3, [pc, #212]	@ (811335c <tcp_receive+0x5e4>)
 8113286:	881b      	ldrh	r3, [r3, #0]
 8113288:	2b00      	cmp	r3, #0
 811328a:	f000 84df 	beq.w	8113c4c <tcp_receive+0xed4>
 811328e:	687b      	ldr	r3, [r7, #4]
 8113290:	7d1b      	ldrb	r3, [r3, #20]
 8113292:	2b06      	cmp	r3, #6
 8113294:	f200 84da 	bhi.w	8113c4c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8113298:	687b      	ldr	r3, [r7, #4]
 811329a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811329c:	4b30      	ldr	r3, [pc, #192]	@ (8113360 <tcp_receive+0x5e8>)
 811329e:	681b      	ldr	r3, [r3, #0]
 81132a0:	1ad3      	subs	r3, r2, r3
 81132a2:	3b01      	subs	r3, #1
 81132a4:	2b00      	cmp	r3, #0
 81132a6:	f2c0 808f 	blt.w	81133c8 <tcp_receive+0x650>
 81132aa:	687b      	ldr	r3, [r7, #4]
 81132ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81132ae:	4b2b      	ldr	r3, [pc, #172]	@ (811335c <tcp_receive+0x5e4>)
 81132b0:	881b      	ldrh	r3, [r3, #0]
 81132b2:	4619      	mov	r1, r3
 81132b4:	4b2a      	ldr	r3, [pc, #168]	@ (8113360 <tcp_receive+0x5e8>)
 81132b6:	681b      	ldr	r3, [r3, #0]
 81132b8:	440b      	add	r3, r1
 81132ba:	1ad3      	subs	r3, r2, r3
 81132bc:	3301      	adds	r3, #1
 81132be:	2b00      	cmp	r3, #0
 81132c0:	f300 8082 	bgt.w	81133c8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 81132c4:	4b27      	ldr	r3, [pc, #156]	@ (8113364 <tcp_receive+0x5ec>)
 81132c6:	685b      	ldr	r3, [r3, #4]
 81132c8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 81132ca:	687b      	ldr	r3, [r7, #4]
 81132cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81132ce:	4b24      	ldr	r3, [pc, #144]	@ (8113360 <tcp_receive+0x5e8>)
 81132d0:	681b      	ldr	r3, [r3, #0]
 81132d2:	1ad3      	subs	r3, r2, r3
 81132d4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 81132d6:	4b23      	ldr	r3, [pc, #140]	@ (8113364 <tcp_receive+0x5ec>)
 81132d8:	685b      	ldr	r3, [r3, #4]
 81132da:	2b00      	cmp	r3, #0
 81132dc:	d106      	bne.n	81132ec <tcp_receive+0x574>
 81132de:	4b22      	ldr	r3, [pc, #136]	@ (8113368 <tcp_receive+0x5f0>)
 81132e0:	f240 5294 	movw	r2, #1428	@ 0x594
 81132e4:	4921      	ldr	r1, [pc, #132]	@ (811336c <tcp_receive+0x5f4>)
 81132e6:	4822      	ldr	r0, [pc, #136]	@ (8113370 <tcp_receive+0x5f8>)
 81132e8:	f003 fafe 	bl	81168e8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 81132ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81132ee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 81132f2:	4293      	cmp	r3, r2
 81132f4:	d906      	bls.n	8113304 <tcp_receive+0x58c>
 81132f6:	4b1c      	ldr	r3, [pc, #112]	@ (8113368 <tcp_receive+0x5f0>)
 81132f8:	f240 5295 	movw	r2, #1429	@ 0x595
 81132fc:	491d      	ldr	r1, [pc, #116]	@ (8113374 <tcp_receive+0x5fc>)
 81132fe:	481c      	ldr	r0, [pc, #112]	@ (8113370 <tcp_receive+0x5f8>)
 8113300:	f003 faf2 	bl	81168e8 <iprintf>
      off = (u16_t)off32;
 8113304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113306:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 811330a:	4b16      	ldr	r3, [pc, #88]	@ (8113364 <tcp_receive+0x5ec>)
 811330c:	685b      	ldr	r3, [r3, #4]
 811330e:	891b      	ldrh	r3, [r3, #8]
 8113310:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8113314:	429a      	cmp	r2, r3
 8113316:	d906      	bls.n	8113326 <tcp_receive+0x5ae>
 8113318:	4b13      	ldr	r3, [pc, #76]	@ (8113368 <tcp_receive+0x5f0>)
 811331a:	f240 5297 	movw	r2, #1431	@ 0x597
 811331e:	4916      	ldr	r1, [pc, #88]	@ (8113378 <tcp_receive+0x600>)
 8113320:	4813      	ldr	r0, [pc, #76]	@ (8113370 <tcp_receive+0x5f8>)
 8113322:	f003 fae1 	bl	81168e8 <iprintf>
      inseg.len -= off;
 8113326:	4b0f      	ldr	r3, [pc, #60]	@ (8113364 <tcp_receive+0x5ec>)
 8113328:	891a      	ldrh	r2, [r3, #8]
 811332a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811332e:	1ad3      	subs	r3, r2, r3
 8113330:	b29a      	uxth	r2, r3
 8113332:	4b0c      	ldr	r3, [pc, #48]	@ (8113364 <tcp_receive+0x5ec>)
 8113334:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8113336:	4b0b      	ldr	r3, [pc, #44]	@ (8113364 <tcp_receive+0x5ec>)
 8113338:	685b      	ldr	r3, [r3, #4]
 811333a:	891a      	ldrh	r2, [r3, #8]
 811333c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8113340:	1ad3      	subs	r3, r2, r3
 8113342:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8113344:	e02a      	b.n	811339c <tcp_receive+0x624>
 8113346:	bf00      	nop
 8113348:	08119674 	.word	0x08119674
 811334c:	0811967c 	.word	0x0811967c
 8113350:	1000b88c 	.word	0x1000b88c
 8113354:	1000b888 	.word	0x1000b888
 8113358:	1000b84c 	.word	0x1000b84c
 811335c:	1000b88e 	.word	0x1000b88e
 8113360:	1000b884 	.word	0x1000b884
 8113364:	1000b864 	.word	0x1000b864
 8113368:	081192cc 	.word	0x081192cc
 811336c:	08119684 	.word	0x08119684
 8113370:	08119358 	.word	0x08119358
 8113374:	08119694 	.word	0x08119694
 8113378:	081196a4 	.word	0x081196a4
        off -= p->len;
 811337c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811337e:	895b      	ldrh	r3, [r3, #10]
 8113380:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8113384:	1ad3      	subs	r3, r2, r3
 8113386:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 811338a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811338c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 811338e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8113390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8113392:	2200      	movs	r2, #0
 8113394:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8113396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8113398:	681b      	ldr	r3, [r3, #0]
 811339a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 811339c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811339e:	895b      	ldrh	r3, [r3, #10]
 81133a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81133a4:	429a      	cmp	r2, r3
 81133a6:	d8e9      	bhi.n	811337c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 81133a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81133ac:	4619      	mov	r1, r3
 81133ae:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 81133b0:	f7fc fa68 	bl	810f884 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 81133b4:	687b      	ldr	r3, [r7, #4]
 81133b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81133b8:	4a90      	ldr	r2, [pc, #576]	@ (81135fc <tcp_receive+0x884>)
 81133ba:	6013      	str	r3, [r2, #0]
 81133bc:	4b90      	ldr	r3, [pc, #576]	@ (8113600 <tcp_receive+0x888>)
 81133be:	68db      	ldr	r3, [r3, #12]
 81133c0:	4a8e      	ldr	r2, [pc, #568]	@ (81135fc <tcp_receive+0x884>)
 81133c2:	6812      	ldr	r2, [r2, #0]
 81133c4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 81133c6:	e00d      	b.n	81133e4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 81133c8:	4b8c      	ldr	r3, [pc, #560]	@ (81135fc <tcp_receive+0x884>)
 81133ca:	681a      	ldr	r2, [r3, #0]
 81133cc:	687b      	ldr	r3, [r7, #4]
 81133ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81133d0:	1ad3      	subs	r3, r2, r3
 81133d2:	2b00      	cmp	r3, #0
 81133d4:	da06      	bge.n	81133e4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 81133d6:	687b      	ldr	r3, [r7, #4]
 81133d8:	8b5b      	ldrh	r3, [r3, #26]
 81133da:	f043 0302 	orr.w	r3, r3, #2
 81133de:	b29a      	uxth	r2, r3
 81133e0:	687b      	ldr	r3, [r7, #4]
 81133e2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 81133e4:	4b85      	ldr	r3, [pc, #532]	@ (81135fc <tcp_receive+0x884>)
 81133e6:	681a      	ldr	r2, [r3, #0]
 81133e8:	687b      	ldr	r3, [r7, #4]
 81133ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81133ec:	1ad3      	subs	r3, r2, r3
 81133ee:	2b00      	cmp	r3, #0
 81133f0:	f2c0 8427 	blt.w	8113c42 <tcp_receive+0xeca>
 81133f4:	4b81      	ldr	r3, [pc, #516]	@ (81135fc <tcp_receive+0x884>)
 81133f6:	681a      	ldr	r2, [r3, #0]
 81133f8:	687b      	ldr	r3, [r7, #4]
 81133fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81133fc:	6879      	ldr	r1, [r7, #4]
 81133fe:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8113400:	440b      	add	r3, r1
 8113402:	1ad3      	subs	r3, r2, r3
 8113404:	3301      	adds	r3, #1
 8113406:	2b00      	cmp	r3, #0
 8113408:	f300 841b 	bgt.w	8113c42 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 811340c:	687b      	ldr	r3, [r7, #4]
 811340e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8113410:	4b7a      	ldr	r3, [pc, #488]	@ (81135fc <tcp_receive+0x884>)
 8113412:	681b      	ldr	r3, [r3, #0]
 8113414:	429a      	cmp	r2, r3
 8113416:	f040 8298 	bne.w	811394a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 811341a:	4b79      	ldr	r3, [pc, #484]	@ (8113600 <tcp_receive+0x888>)
 811341c:	891c      	ldrh	r4, [r3, #8]
 811341e:	4b78      	ldr	r3, [pc, #480]	@ (8113600 <tcp_receive+0x888>)
 8113420:	68db      	ldr	r3, [r3, #12]
 8113422:	899b      	ldrh	r3, [r3, #12]
 8113424:	b29b      	uxth	r3, r3
 8113426:	4618      	mov	r0, r3
 8113428:	f7f8 fb08 	bl	810ba3c <lwip_htons>
 811342c:	4603      	mov	r3, r0
 811342e:	b2db      	uxtb	r3, r3
 8113430:	f003 0303 	and.w	r3, r3, #3
 8113434:	2b00      	cmp	r3, #0
 8113436:	d001      	beq.n	811343c <tcp_receive+0x6c4>
 8113438:	2301      	movs	r3, #1
 811343a:	e000      	b.n	811343e <tcp_receive+0x6c6>
 811343c:	2300      	movs	r3, #0
 811343e:	4423      	add	r3, r4
 8113440:	b29a      	uxth	r2, r3
 8113442:	4b70      	ldr	r3, [pc, #448]	@ (8113604 <tcp_receive+0x88c>)
 8113444:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8113446:	687b      	ldr	r3, [r7, #4]
 8113448:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811344a:	4b6e      	ldr	r3, [pc, #440]	@ (8113604 <tcp_receive+0x88c>)
 811344c:	881b      	ldrh	r3, [r3, #0]
 811344e:	429a      	cmp	r2, r3
 8113450:	d274      	bcs.n	811353c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8113452:	4b6b      	ldr	r3, [pc, #428]	@ (8113600 <tcp_receive+0x888>)
 8113454:	68db      	ldr	r3, [r3, #12]
 8113456:	899b      	ldrh	r3, [r3, #12]
 8113458:	b29b      	uxth	r3, r3
 811345a:	4618      	mov	r0, r3
 811345c:	f7f8 faee 	bl	810ba3c <lwip_htons>
 8113460:	4603      	mov	r3, r0
 8113462:	b2db      	uxtb	r3, r3
 8113464:	f003 0301 	and.w	r3, r3, #1
 8113468:	2b00      	cmp	r3, #0
 811346a:	d01e      	beq.n	81134aa <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 811346c:	4b64      	ldr	r3, [pc, #400]	@ (8113600 <tcp_receive+0x888>)
 811346e:	68db      	ldr	r3, [r3, #12]
 8113470:	899b      	ldrh	r3, [r3, #12]
 8113472:	b29b      	uxth	r3, r3
 8113474:	b21b      	sxth	r3, r3
 8113476:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811347a:	b21c      	sxth	r4, r3
 811347c:	4b60      	ldr	r3, [pc, #384]	@ (8113600 <tcp_receive+0x888>)
 811347e:	68db      	ldr	r3, [r3, #12]
 8113480:	899b      	ldrh	r3, [r3, #12]
 8113482:	b29b      	uxth	r3, r3
 8113484:	4618      	mov	r0, r3
 8113486:	f7f8 fad9 	bl	810ba3c <lwip_htons>
 811348a:	4603      	mov	r3, r0
 811348c:	b2db      	uxtb	r3, r3
 811348e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8113492:	b29b      	uxth	r3, r3
 8113494:	4618      	mov	r0, r3
 8113496:	f7f8 fad1 	bl	810ba3c <lwip_htons>
 811349a:	4603      	mov	r3, r0
 811349c:	b21b      	sxth	r3, r3
 811349e:	4323      	orrs	r3, r4
 81134a0:	b21a      	sxth	r2, r3
 81134a2:	4b57      	ldr	r3, [pc, #348]	@ (8113600 <tcp_receive+0x888>)
 81134a4:	68db      	ldr	r3, [r3, #12]
 81134a6:	b292      	uxth	r2, r2
 81134a8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 81134aa:	687b      	ldr	r3, [r7, #4]
 81134ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 81134ae:	4b54      	ldr	r3, [pc, #336]	@ (8113600 <tcp_receive+0x888>)
 81134b0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 81134b2:	4b53      	ldr	r3, [pc, #332]	@ (8113600 <tcp_receive+0x888>)
 81134b4:	68db      	ldr	r3, [r3, #12]
 81134b6:	899b      	ldrh	r3, [r3, #12]
 81134b8:	b29b      	uxth	r3, r3
 81134ba:	4618      	mov	r0, r3
 81134bc:	f7f8 fabe 	bl	810ba3c <lwip_htons>
 81134c0:	4603      	mov	r3, r0
 81134c2:	b2db      	uxtb	r3, r3
 81134c4:	f003 0302 	and.w	r3, r3, #2
 81134c8:	2b00      	cmp	r3, #0
 81134ca:	d005      	beq.n	81134d8 <tcp_receive+0x760>
            inseg.len -= 1;
 81134cc:	4b4c      	ldr	r3, [pc, #304]	@ (8113600 <tcp_receive+0x888>)
 81134ce:	891b      	ldrh	r3, [r3, #8]
 81134d0:	3b01      	subs	r3, #1
 81134d2:	b29a      	uxth	r2, r3
 81134d4:	4b4a      	ldr	r3, [pc, #296]	@ (8113600 <tcp_receive+0x888>)
 81134d6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 81134d8:	4b49      	ldr	r3, [pc, #292]	@ (8113600 <tcp_receive+0x888>)
 81134da:	685b      	ldr	r3, [r3, #4]
 81134dc:	4a48      	ldr	r2, [pc, #288]	@ (8113600 <tcp_receive+0x888>)
 81134de:	8912      	ldrh	r2, [r2, #8]
 81134e0:	4611      	mov	r1, r2
 81134e2:	4618      	mov	r0, r3
 81134e4:	f7fc f8ce 	bl	810f684 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 81134e8:	4b45      	ldr	r3, [pc, #276]	@ (8113600 <tcp_receive+0x888>)
 81134ea:	891c      	ldrh	r4, [r3, #8]
 81134ec:	4b44      	ldr	r3, [pc, #272]	@ (8113600 <tcp_receive+0x888>)
 81134ee:	68db      	ldr	r3, [r3, #12]
 81134f0:	899b      	ldrh	r3, [r3, #12]
 81134f2:	b29b      	uxth	r3, r3
 81134f4:	4618      	mov	r0, r3
 81134f6:	f7f8 faa1 	bl	810ba3c <lwip_htons>
 81134fa:	4603      	mov	r3, r0
 81134fc:	b2db      	uxtb	r3, r3
 81134fe:	f003 0303 	and.w	r3, r3, #3
 8113502:	2b00      	cmp	r3, #0
 8113504:	d001      	beq.n	811350a <tcp_receive+0x792>
 8113506:	2301      	movs	r3, #1
 8113508:	e000      	b.n	811350c <tcp_receive+0x794>
 811350a:	2300      	movs	r3, #0
 811350c:	4423      	add	r3, r4
 811350e:	b29a      	uxth	r2, r3
 8113510:	4b3c      	ldr	r3, [pc, #240]	@ (8113604 <tcp_receive+0x88c>)
 8113512:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8113514:	4b3b      	ldr	r3, [pc, #236]	@ (8113604 <tcp_receive+0x88c>)
 8113516:	881b      	ldrh	r3, [r3, #0]
 8113518:	461a      	mov	r2, r3
 811351a:	4b38      	ldr	r3, [pc, #224]	@ (81135fc <tcp_receive+0x884>)
 811351c:	681b      	ldr	r3, [r3, #0]
 811351e:	441a      	add	r2, r3
 8113520:	687b      	ldr	r3, [r7, #4]
 8113522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8113524:	6879      	ldr	r1, [r7, #4]
 8113526:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8113528:	440b      	add	r3, r1
 811352a:	429a      	cmp	r2, r3
 811352c:	d006      	beq.n	811353c <tcp_receive+0x7c4>
 811352e:	4b36      	ldr	r3, [pc, #216]	@ (8113608 <tcp_receive+0x890>)
 8113530:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8113534:	4935      	ldr	r1, [pc, #212]	@ (811360c <tcp_receive+0x894>)
 8113536:	4836      	ldr	r0, [pc, #216]	@ (8113610 <tcp_receive+0x898>)
 8113538:	f003 f9d6 	bl	81168e8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 811353c:	687b      	ldr	r3, [r7, #4]
 811353e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8113540:	2b00      	cmp	r3, #0
 8113542:	f000 80e6 	beq.w	8113712 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8113546:	4b2e      	ldr	r3, [pc, #184]	@ (8113600 <tcp_receive+0x888>)
 8113548:	68db      	ldr	r3, [r3, #12]
 811354a:	899b      	ldrh	r3, [r3, #12]
 811354c:	b29b      	uxth	r3, r3
 811354e:	4618      	mov	r0, r3
 8113550:	f7f8 fa74 	bl	810ba3c <lwip_htons>
 8113554:	4603      	mov	r3, r0
 8113556:	b2db      	uxtb	r3, r3
 8113558:	f003 0301 	and.w	r3, r3, #1
 811355c:	2b00      	cmp	r3, #0
 811355e:	d010      	beq.n	8113582 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8113560:	e00a      	b.n	8113578 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8113562:	687b      	ldr	r3, [r7, #4]
 8113564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8113566:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8113568:	687b      	ldr	r3, [r7, #4]
 811356a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811356c:	681a      	ldr	r2, [r3, #0]
 811356e:	687b      	ldr	r3, [r7, #4]
 8113570:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8113572:	68f8      	ldr	r0, [r7, #12]
 8113574:	f7fd fd93 	bl	811109e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8113578:	687b      	ldr	r3, [r7, #4]
 811357a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811357c:	2b00      	cmp	r3, #0
 811357e:	d1f0      	bne.n	8113562 <tcp_receive+0x7ea>
 8113580:	e0c7      	b.n	8113712 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8113582:	687b      	ldr	r3, [r7, #4]
 8113584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8113586:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8113588:	e051      	b.n	811362e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 811358a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811358c:	68db      	ldr	r3, [r3, #12]
 811358e:	899b      	ldrh	r3, [r3, #12]
 8113590:	b29b      	uxth	r3, r3
 8113592:	4618      	mov	r0, r3
 8113594:	f7f8 fa52 	bl	810ba3c <lwip_htons>
 8113598:	4603      	mov	r3, r0
 811359a:	b2db      	uxtb	r3, r3
 811359c:	f003 0301 	and.w	r3, r3, #1
 81135a0:	2b00      	cmp	r3, #0
 81135a2:	d03c      	beq.n	811361e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 81135a4:	4b16      	ldr	r3, [pc, #88]	@ (8113600 <tcp_receive+0x888>)
 81135a6:	68db      	ldr	r3, [r3, #12]
 81135a8:	899b      	ldrh	r3, [r3, #12]
 81135aa:	b29b      	uxth	r3, r3
 81135ac:	4618      	mov	r0, r3
 81135ae:	f7f8 fa45 	bl	810ba3c <lwip_htons>
 81135b2:	4603      	mov	r3, r0
 81135b4:	b2db      	uxtb	r3, r3
 81135b6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 81135ba:	2b00      	cmp	r3, #0
 81135bc:	d12f      	bne.n	811361e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 81135be:	4b10      	ldr	r3, [pc, #64]	@ (8113600 <tcp_receive+0x888>)
 81135c0:	68db      	ldr	r3, [r3, #12]
 81135c2:	899b      	ldrh	r3, [r3, #12]
 81135c4:	b29c      	uxth	r4, r3
 81135c6:	2001      	movs	r0, #1
 81135c8:	f7f8 fa38 	bl	810ba3c <lwip_htons>
 81135cc:	4603      	mov	r3, r0
 81135ce:	461a      	mov	r2, r3
 81135d0:	4b0b      	ldr	r3, [pc, #44]	@ (8113600 <tcp_receive+0x888>)
 81135d2:	68db      	ldr	r3, [r3, #12]
 81135d4:	4322      	orrs	r2, r4
 81135d6:	b292      	uxth	r2, r2
 81135d8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 81135da:	4b09      	ldr	r3, [pc, #36]	@ (8113600 <tcp_receive+0x888>)
 81135dc:	891c      	ldrh	r4, [r3, #8]
 81135de:	4b08      	ldr	r3, [pc, #32]	@ (8113600 <tcp_receive+0x888>)
 81135e0:	68db      	ldr	r3, [r3, #12]
 81135e2:	899b      	ldrh	r3, [r3, #12]
 81135e4:	b29b      	uxth	r3, r3
 81135e6:	4618      	mov	r0, r3
 81135e8:	f7f8 fa28 	bl	810ba3c <lwip_htons>
 81135ec:	4603      	mov	r3, r0
 81135ee:	b2db      	uxtb	r3, r3
 81135f0:	f003 0303 	and.w	r3, r3, #3
 81135f4:	2b00      	cmp	r3, #0
 81135f6:	d00d      	beq.n	8113614 <tcp_receive+0x89c>
 81135f8:	2301      	movs	r3, #1
 81135fa:	e00c      	b.n	8113616 <tcp_receive+0x89e>
 81135fc:	1000b884 	.word	0x1000b884
 8113600:	1000b864 	.word	0x1000b864
 8113604:	1000b88e 	.word	0x1000b88e
 8113608:	081192cc 	.word	0x081192cc
 811360c:	081196b4 	.word	0x081196b4
 8113610:	08119358 	.word	0x08119358
 8113614:	2300      	movs	r3, #0
 8113616:	4423      	add	r3, r4
 8113618:	b29a      	uxth	r2, r3
 811361a:	4b98      	ldr	r3, [pc, #608]	@ (811387c <tcp_receive+0xb04>)
 811361c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 811361e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113620:	613b      	str	r3, [r7, #16]
              next = next->next;
 8113622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113624:	681b      	ldr	r3, [r3, #0]
 8113626:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8113628:	6938      	ldr	r0, [r7, #16]
 811362a:	f7fd fd38 	bl	811109e <tcp_seg_free>
            while (next &&
 811362e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113630:	2b00      	cmp	r3, #0
 8113632:	d00e      	beq.n	8113652 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8113634:	4b91      	ldr	r3, [pc, #580]	@ (811387c <tcp_receive+0xb04>)
 8113636:	881b      	ldrh	r3, [r3, #0]
 8113638:	461a      	mov	r2, r3
 811363a:	4b91      	ldr	r3, [pc, #580]	@ (8113880 <tcp_receive+0xb08>)
 811363c:	681b      	ldr	r3, [r3, #0]
 811363e:	441a      	add	r2, r3
 8113640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113642:	68db      	ldr	r3, [r3, #12]
 8113644:	685b      	ldr	r3, [r3, #4]
 8113646:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8113648:	8909      	ldrh	r1, [r1, #8]
 811364a:	440b      	add	r3, r1
 811364c:	1ad3      	subs	r3, r2, r3
            while (next &&
 811364e:	2b00      	cmp	r3, #0
 8113650:	da9b      	bge.n	811358a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8113652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113654:	2b00      	cmp	r3, #0
 8113656:	d059      	beq.n	811370c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8113658:	4b88      	ldr	r3, [pc, #544]	@ (811387c <tcp_receive+0xb04>)
 811365a:	881b      	ldrh	r3, [r3, #0]
 811365c:	461a      	mov	r2, r3
 811365e:	4b88      	ldr	r3, [pc, #544]	@ (8113880 <tcp_receive+0xb08>)
 8113660:	681b      	ldr	r3, [r3, #0]
 8113662:	441a      	add	r2, r3
 8113664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113666:	68db      	ldr	r3, [r3, #12]
 8113668:	685b      	ldr	r3, [r3, #4]
 811366a:	1ad3      	subs	r3, r2, r3
            if (next &&
 811366c:	2b00      	cmp	r3, #0
 811366e:	dd4d      	ble.n	811370c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8113670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113672:	68db      	ldr	r3, [r3, #12]
 8113674:	685b      	ldr	r3, [r3, #4]
 8113676:	b29a      	uxth	r2, r3
 8113678:	4b81      	ldr	r3, [pc, #516]	@ (8113880 <tcp_receive+0xb08>)
 811367a:	681b      	ldr	r3, [r3, #0]
 811367c:	b29b      	uxth	r3, r3
 811367e:	1ad3      	subs	r3, r2, r3
 8113680:	b29a      	uxth	r2, r3
 8113682:	4b80      	ldr	r3, [pc, #512]	@ (8113884 <tcp_receive+0xb0c>)
 8113684:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8113686:	4b7f      	ldr	r3, [pc, #508]	@ (8113884 <tcp_receive+0xb0c>)
 8113688:	68db      	ldr	r3, [r3, #12]
 811368a:	899b      	ldrh	r3, [r3, #12]
 811368c:	b29b      	uxth	r3, r3
 811368e:	4618      	mov	r0, r3
 8113690:	f7f8 f9d4 	bl	810ba3c <lwip_htons>
 8113694:	4603      	mov	r3, r0
 8113696:	b2db      	uxtb	r3, r3
 8113698:	f003 0302 	and.w	r3, r3, #2
 811369c:	2b00      	cmp	r3, #0
 811369e:	d005      	beq.n	81136ac <tcp_receive+0x934>
                inseg.len -= 1;
 81136a0:	4b78      	ldr	r3, [pc, #480]	@ (8113884 <tcp_receive+0xb0c>)
 81136a2:	891b      	ldrh	r3, [r3, #8]
 81136a4:	3b01      	subs	r3, #1
 81136a6:	b29a      	uxth	r2, r3
 81136a8:	4b76      	ldr	r3, [pc, #472]	@ (8113884 <tcp_receive+0xb0c>)
 81136aa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 81136ac:	4b75      	ldr	r3, [pc, #468]	@ (8113884 <tcp_receive+0xb0c>)
 81136ae:	685b      	ldr	r3, [r3, #4]
 81136b0:	4a74      	ldr	r2, [pc, #464]	@ (8113884 <tcp_receive+0xb0c>)
 81136b2:	8912      	ldrh	r2, [r2, #8]
 81136b4:	4611      	mov	r1, r2
 81136b6:	4618      	mov	r0, r3
 81136b8:	f7fb ffe4 	bl	810f684 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 81136bc:	4b71      	ldr	r3, [pc, #452]	@ (8113884 <tcp_receive+0xb0c>)
 81136be:	891c      	ldrh	r4, [r3, #8]
 81136c0:	4b70      	ldr	r3, [pc, #448]	@ (8113884 <tcp_receive+0xb0c>)
 81136c2:	68db      	ldr	r3, [r3, #12]
 81136c4:	899b      	ldrh	r3, [r3, #12]
 81136c6:	b29b      	uxth	r3, r3
 81136c8:	4618      	mov	r0, r3
 81136ca:	f7f8 f9b7 	bl	810ba3c <lwip_htons>
 81136ce:	4603      	mov	r3, r0
 81136d0:	b2db      	uxtb	r3, r3
 81136d2:	f003 0303 	and.w	r3, r3, #3
 81136d6:	2b00      	cmp	r3, #0
 81136d8:	d001      	beq.n	81136de <tcp_receive+0x966>
 81136da:	2301      	movs	r3, #1
 81136dc:	e000      	b.n	81136e0 <tcp_receive+0x968>
 81136de:	2300      	movs	r3, #0
 81136e0:	4423      	add	r3, r4
 81136e2:	b29a      	uxth	r2, r3
 81136e4:	4b65      	ldr	r3, [pc, #404]	@ (811387c <tcp_receive+0xb04>)
 81136e6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 81136e8:	4b64      	ldr	r3, [pc, #400]	@ (811387c <tcp_receive+0xb04>)
 81136ea:	881b      	ldrh	r3, [r3, #0]
 81136ec:	461a      	mov	r2, r3
 81136ee:	4b64      	ldr	r3, [pc, #400]	@ (8113880 <tcp_receive+0xb08>)
 81136f0:	681b      	ldr	r3, [r3, #0]
 81136f2:	441a      	add	r2, r3
 81136f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81136f6:	68db      	ldr	r3, [r3, #12]
 81136f8:	685b      	ldr	r3, [r3, #4]
 81136fa:	429a      	cmp	r2, r3
 81136fc:	d006      	beq.n	811370c <tcp_receive+0x994>
 81136fe:	4b62      	ldr	r3, [pc, #392]	@ (8113888 <tcp_receive+0xb10>)
 8113700:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8113704:	4961      	ldr	r1, [pc, #388]	@ (811388c <tcp_receive+0xb14>)
 8113706:	4862      	ldr	r0, [pc, #392]	@ (8113890 <tcp_receive+0xb18>)
 8113708:	f003 f8ee 	bl	81168e8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 811370c:	687b      	ldr	r3, [r7, #4]
 811370e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8113710:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8113712:	4b5a      	ldr	r3, [pc, #360]	@ (811387c <tcp_receive+0xb04>)
 8113714:	881b      	ldrh	r3, [r3, #0]
 8113716:	461a      	mov	r2, r3
 8113718:	4b59      	ldr	r3, [pc, #356]	@ (8113880 <tcp_receive+0xb08>)
 811371a:	681b      	ldr	r3, [r3, #0]
 811371c:	441a      	add	r2, r3
 811371e:	687b      	ldr	r3, [r7, #4]
 8113720:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8113722:	687b      	ldr	r3, [r7, #4]
 8113724:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8113726:	4b55      	ldr	r3, [pc, #340]	@ (811387c <tcp_receive+0xb04>)
 8113728:	881b      	ldrh	r3, [r3, #0]
 811372a:	429a      	cmp	r2, r3
 811372c:	d206      	bcs.n	811373c <tcp_receive+0x9c4>
 811372e:	4b56      	ldr	r3, [pc, #344]	@ (8113888 <tcp_receive+0xb10>)
 8113730:	f240 6207 	movw	r2, #1543	@ 0x607
 8113734:	4957      	ldr	r1, [pc, #348]	@ (8113894 <tcp_receive+0xb1c>)
 8113736:	4856      	ldr	r0, [pc, #344]	@ (8113890 <tcp_receive+0xb18>)
 8113738:	f003 f8d6 	bl	81168e8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 811373c:	687b      	ldr	r3, [r7, #4]
 811373e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8113740:	4b4e      	ldr	r3, [pc, #312]	@ (811387c <tcp_receive+0xb04>)
 8113742:	881b      	ldrh	r3, [r3, #0]
 8113744:	1ad3      	subs	r3, r2, r3
 8113746:	b29a      	uxth	r2, r3
 8113748:	687b      	ldr	r3, [r7, #4]
 811374a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 811374c:	6878      	ldr	r0, [r7, #4]
 811374e:	f7fc ffc1 	bl	81106d4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8113752:	4b4c      	ldr	r3, [pc, #304]	@ (8113884 <tcp_receive+0xb0c>)
 8113754:	685b      	ldr	r3, [r3, #4]
 8113756:	891b      	ldrh	r3, [r3, #8]
 8113758:	2b00      	cmp	r3, #0
 811375a:	d006      	beq.n	811376a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 811375c:	4b49      	ldr	r3, [pc, #292]	@ (8113884 <tcp_receive+0xb0c>)
 811375e:	685b      	ldr	r3, [r3, #4]
 8113760:	4a4d      	ldr	r2, [pc, #308]	@ (8113898 <tcp_receive+0xb20>)
 8113762:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8113764:	4b47      	ldr	r3, [pc, #284]	@ (8113884 <tcp_receive+0xb0c>)
 8113766:	2200      	movs	r2, #0
 8113768:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811376a:	4b46      	ldr	r3, [pc, #280]	@ (8113884 <tcp_receive+0xb0c>)
 811376c:	68db      	ldr	r3, [r3, #12]
 811376e:	899b      	ldrh	r3, [r3, #12]
 8113770:	b29b      	uxth	r3, r3
 8113772:	4618      	mov	r0, r3
 8113774:	f7f8 f962 	bl	810ba3c <lwip_htons>
 8113778:	4603      	mov	r3, r0
 811377a:	b2db      	uxtb	r3, r3
 811377c:	f003 0301 	and.w	r3, r3, #1
 8113780:	2b00      	cmp	r3, #0
 8113782:	f000 80b8 	beq.w	81138f6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8113786:	4b45      	ldr	r3, [pc, #276]	@ (811389c <tcp_receive+0xb24>)
 8113788:	781b      	ldrb	r3, [r3, #0]
 811378a:	f043 0320 	orr.w	r3, r3, #32
 811378e:	b2da      	uxtb	r2, r3
 8113790:	4b42      	ldr	r3, [pc, #264]	@ (811389c <tcp_receive+0xb24>)
 8113792:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8113794:	e0af      	b.n	81138f6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8113796:	687b      	ldr	r3, [r7, #4]
 8113798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811379a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 811379c:	687b      	ldr	r3, [r7, #4]
 811379e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81137a0:	68db      	ldr	r3, [r3, #12]
 81137a2:	685b      	ldr	r3, [r3, #4]
 81137a4:	4a36      	ldr	r2, [pc, #216]	@ (8113880 <tcp_receive+0xb08>)
 81137a6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 81137a8:	68bb      	ldr	r3, [r7, #8]
 81137aa:	891b      	ldrh	r3, [r3, #8]
 81137ac:	461c      	mov	r4, r3
 81137ae:	68bb      	ldr	r3, [r7, #8]
 81137b0:	68db      	ldr	r3, [r3, #12]
 81137b2:	899b      	ldrh	r3, [r3, #12]
 81137b4:	b29b      	uxth	r3, r3
 81137b6:	4618      	mov	r0, r3
 81137b8:	f7f8 f940 	bl	810ba3c <lwip_htons>
 81137bc:	4603      	mov	r3, r0
 81137be:	b2db      	uxtb	r3, r3
 81137c0:	f003 0303 	and.w	r3, r3, #3
 81137c4:	2b00      	cmp	r3, #0
 81137c6:	d001      	beq.n	81137cc <tcp_receive+0xa54>
 81137c8:	2301      	movs	r3, #1
 81137ca:	e000      	b.n	81137ce <tcp_receive+0xa56>
 81137cc:	2300      	movs	r3, #0
 81137ce:	191a      	adds	r2, r3, r4
 81137d0:	687b      	ldr	r3, [r7, #4]
 81137d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81137d4:	441a      	add	r2, r3
 81137d6:	687b      	ldr	r3, [r7, #4]
 81137d8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 81137da:	687b      	ldr	r3, [r7, #4]
 81137dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81137de:	461c      	mov	r4, r3
 81137e0:	68bb      	ldr	r3, [r7, #8]
 81137e2:	891b      	ldrh	r3, [r3, #8]
 81137e4:	461d      	mov	r5, r3
 81137e6:	68bb      	ldr	r3, [r7, #8]
 81137e8:	68db      	ldr	r3, [r3, #12]
 81137ea:	899b      	ldrh	r3, [r3, #12]
 81137ec:	b29b      	uxth	r3, r3
 81137ee:	4618      	mov	r0, r3
 81137f0:	f7f8 f924 	bl	810ba3c <lwip_htons>
 81137f4:	4603      	mov	r3, r0
 81137f6:	b2db      	uxtb	r3, r3
 81137f8:	f003 0303 	and.w	r3, r3, #3
 81137fc:	2b00      	cmp	r3, #0
 81137fe:	d001      	beq.n	8113804 <tcp_receive+0xa8c>
 8113800:	2301      	movs	r3, #1
 8113802:	e000      	b.n	8113806 <tcp_receive+0xa8e>
 8113804:	2300      	movs	r3, #0
 8113806:	442b      	add	r3, r5
 8113808:	429c      	cmp	r4, r3
 811380a:	d206      	bcs.n	811381a <tcp_receive+0xaa2>
 811380c:	4b1e      	ldr	r3, [pc, #120]	@ (8113888 <tcp_receive+0xb10>)
 811380e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8113812:	4923      	ldr	r1, [pc, #140]	@ (81138a0 <tcp_receive+0xb28>)
 8113814:	481e      	ldr	r0, [pc, #120]	@ (8113890 <tcp_receive+0xb18>)
 8113816:	f003 f867 	bl	81168e8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 811381a:	68bb      	ldr	r3, [r7, #8]
 811381c:	891b      	ldrh	r3, [r3, #8]
 811381e:	461c      	mov	r4, r3
 8113820:	68bb      	ldr	r3, [r7, #8]
 8113822:	68db      	ldr	r3, [r3, #12]
 8113824:	899b      	ldrh	r3, [r3, #12]
 8113826:	b29b      	uxth	r3, r3
 8113828:	4618      	mov	r0, r3
 811382a:	f7f8 f907 	bl	810ba3c <lwip_htons>
 811382e:	4603      	mov	r3, r0
 8113830:	b2db      	uxtb	r3, r3
 8113832:	f003 0303 	and.w	r3, r3, #3
 8113836:	2b00      	cmp	r3, #0
 8113838:	d001      	beq.n	811383e <tcp_receive+0xac6>
 811383a:	2301      	movs	r3, #1
 811383c:	e000      	b.n	8113840 <tcp_receive+0xac8>
 811383e:	2300      	movs	r3, #0
 8113840:	1919      	adds	r1, r3, r4
 8113842:	687b      	ldr	r3, [r7, #4]
 8113844:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8113846:	b28b      	uxth	r3, r1
 8113848:	1ad3      	subs	r3, r2, r3
 811384a:	b29a      	uxth	r2, r3
 811384c:	687b      	ldr	r3, [r7, #4]
 811384e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8113850:	6878      	ldr	r0, [r7, #4]
 8113852:	f7fc ff3f 	bl	81106d4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8113856:	68bb      	ldr	r3, [r7, #8]
 8113858:	685b      	ldr	r3, [r3, #4]
 811385a:	891b      	ldrh	r3, [r3, #8]
 811385c:	2b00      	cmp	r3, #0
 811385e:	d028      	beq.n	81138b2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8113860:	4b0d      	ldr	r3, [pc, #52]	@ (8113898 <tcp_receive+0xb20>)
 8113862:	681b      	ldr	r3, [r3, #0]
 8113864:	2b00      	cmp	r3, #0
 8113866:	d01d      	beq.n	81138a4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8113868:	4b0b      	ldr	r3, [pc, #44]	@ (8113898 <tcp_receive+0xb20>)
 811386a:	681a      	ldr	r2, [r3, #0]
 811386c:	68bb      	ldr	r3, [r7, #8]
 811386e:	685b      	ldr	r3, [r3, #4]
 8113870:	4619      	mov	r1, r3
 8113872:	4610      	mov	r0, r2
 8113874:	f7fc f95a 	bl	810fb2c <pbuf_cat>
 8113878:	e018      	b.n	81138ac <tcp_receive+0xb34>
 811387a:	bf00      	nop
 811387c:	1000b88e 	.word	0x1000b88e
 8113880:	1000b884 	.word	0x1000b884
 8113884:	1000b864 	.word	0x1000b864
 8113888:	081192cc 	.word	0x081192cc
 811388c:	081196ec 	.word	0x081196ec
 8113890:	08119358 	.word	0x08119358
 8113894:	08119728 	.word	0x08119728
 8113898:	1000b894 	.word	0x1000b894
 811389c:	1000b891 	.word	0x1000b891
 81138a0:	08119748 	.word	0x08119748
            } else {
              recv_data = cseg->p;
 81138a4:	68bb      	ldr	r3, [r7, #8]
 81138a6:	685b      	ldr	r3, [r3, #4]
 81138a8:	4a70      	ldr	r2, [pc, #448]	@ (8113a6c <tcp_receive+0xcf4>)
 81138aa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 81138ac:	68bb      	ldr	r3, [r7, #8]
 81138ae:	2200      	movs	r2, #0
 81138b0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 81138b2:	68bb      	ldr	r3, [r7, #8]
 81138b4:	68db      	ldr	r3, [r3, #12]
 81138b6:	899b      	ldrh	r3, [r3, #12]
 81138b8:	b29b      	uxth	r3, r3
 81138ba:	4618      	mov	r0, r3
 81138bc:	f7f8 f8be 	bl	810ba3c <lwip_htons>
 81138c0:	4603      	mov	r3, r0
 81138c2:	b2db      	uxtb	r3, r3
 81138c4:	f003 0301 	and.w	r3, r3, #1
 81138c8:	2b00      	cmp	r3, #0
 81138ca:	d00d      	beq.n	81138e8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 81138cc:	4b68      	ldr	r3, [pc, #416]	@ (8113a70 <tcp_receive+0xcf8>)
 81138ce:	781b      	ldrb	r3, [r3, #0]
 81138d0:	f043 0320 	orr.w	r3, r3, #32
 81138d4:	b2da      	uxtb	r2, r3
 81138d6:	4b66      	ldr	r3, [pc, #408]	@ (8113a70 <tcp_receive+0xcf8>)
 81138d8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 81138da:	687b      	ldr	r3, [r7, #4]
 81138dc:	7d1b      	ldrb	r3, [r3, #20]
 81138de:	2b04      	cmp	r3, #4
 81138e0:	d102      	bne.n	81138e8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 81138e2:	687b      	ldr	r3, [r7, #4]
 81138e4:	2207      	movs	r2, #7
 81138e6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 81138e8:	68bb      	ldr	r3, [r7, #8]
 81138ea:	681a      	ldr	r2, [r3, #0]
 81138ec:	687b      	ldr	r3, [r7, #4]
 81138ee:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 81138f0:	68b8      	ldr	r0, [r7, #8]
 81138f2:	f7fd fbd4 	bl	811109e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 81138f6:	687b      	ldr	r3, [r7, #4]
 81138f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81138fa:	2b00      	cmp	r3, #0
 81138fc:	d008      	beq.n	8113910 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 81138fe:	687b      	ldr	r3, [r7, #4]
 8113900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8113902:	68db      	ldr	r3, [r3, #12]
 8113904:	685a      	ldr	r2, [r3, #4]
 8113906:	687b      	ldr	r3, [r7, #4]
 8113908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 811390a:	429a      	cmp	r2, r3
 811390c:	f43f af43 	beq.w	8113796 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8113910:	687b      	ldr	r3, [r7, #4]
 8113912:	8b5b      	ldrh	r3, [r3, #26]
 8113914:	f003 0301 	and.w	r3, r3, #1
 8113918:	2b00      	cmp	r3, #0
 811391a:	d00e      	beq.n	811393a <tcp_receive+0xbc2>
 811391c:	687b      	ldr	r3, [r7, #4]
 811391e:	8b5b      	ldrh	r3, [r3, #26]
 8113920:	f023 0301 	bic.w	r3, r3, #1
 8113924:	b29a      	uxth	r2, r3
 8113926:	687b      	ldr	r3, [r7, #4]
 8113928:	835a      	strh	r2, [r3, #26]
 811392a:	687b      	ldr	r3, [r7, #4]
 811392c:	8b5b      	ldrh	r3, [r3, #26]
 811392e:	f043 0302 	orr.w	r3, r3, #2
 8113932:	b29a      	uxth	r2, r3
 8113934:	687b      	ldr	r3, [r7, #4]
 8113936:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8113938:	e187      	b.n	8113c4a <tcp_receive+0xed2>
        tcp_ack(pcb);
 811393a:	687b      	ldr	r3, [r7, #4]
 811393c:	8b5b      	ldrh	r3, [r3, #26]
 811393e:	f043 0301 	orr.w	r3, r3, #1
 8113942:	b29a      	uxth	r2, r3
 8113944:	687b      	ldr	r3, [r7, #4]
 8113946:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8113948:	e17f      	b.n	8113c4a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 811394a:	687b      	ldr	r3, [r7, #4]
 811394c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811394e:	2b00      	cmp	r3, #0
 8113950:	d106      	bne.n	8113960 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8113952:	4848      	ldr	r0, [pc, #288]	@ (8113a74 <tcp_receive+0xcfc>)
 8113954:	f7fd fbbc 	bl	81110d0 <tcp_seg_copy>
 8113958:	4602      	mov	r2, r0
 811395a:	687b      	ldr	r3, [r7, #4]
 811395c:	675a      	str	r2, [r3, #116]	@ 0x74
 811395e:	e16c      	b.n	8113c3a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8113960:	2300      	movs	r3, #0
 8113962:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8113964:	687b      	ldr	r3, [r7, #4]
 8113966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8113968:	63bb      	str	r3, [r7, #56]	@ 0x38
 811396a:	e156      	b.n	8113c1a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 811396c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811396e:	68db      	ldr	r3, [r3, #12]
 8113970:	685a      	ldr	r2, [r3, #4]
 8113972:	4b41      	ldr	r3, [pc, #260]	@ (8113a78 <tcp_receive+0xd00>)
 8113974:	681b      	ldr	r3, [r3, #0]
 8113976:	429a      	cmp	r2, r3
 8113978:	d11d      	bne.n	81139b6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 811397a:	4b3e      	ldr	r3, [pc, #248]	@ (8113a74 <tcp_receive+0xcfc>)
 811397c:	891a      	ldrh	r2, [r3, #8]
 811397e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113980:	891b      	ldrh	r3, [r3, #8]
 8113982:	429a      	cmp	r2, r3
 8113984:	f240 814e 	bls.w	8113c24 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8113988:	483a      	ldr	r0, [pc, #232]	@ (8113a74 <tcp_receive+0xcfc>)
 811398a:	f7fd fba1 	bl	81110d0 <tcp_seg_copy>
 811398e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8113990:	697b      	ldr	r3, [r7, #20]
 8113992:	2b00      	cmp	r3, #0
 8113994:	f000 8148 	beq.w	8113c28 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8113998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811399a:	2b00      	cmp	r3, #0
 811399c:	d003      	beq.n	81139a6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 811399e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81139a0:	697a      	ldr	r2, [r7, #20]
 81139a2:	601a      	str	r2, [r3, #0]
 81139a4:	e002      	b.n	81139ac <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 81139a6:	687b      	ldr	r3, [r7, #4]
 81139a8:	697a      	ldr	r2, [r7, #20]
 81139aa:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 81139ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 81139ae:	6978      	ldr	r0, [r7, #20]
 81139b0:	f7ff f8de 	bl	8112b70 <tcp_oos_insert_segment>
                }
                break;
 81139b4:	e138      	b.n	8113c28 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 81139b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81139b8:	2b00      	cmp	r3, #0
 81139ba:	d117      	bne.n	81139ec <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 81139bc:	4b2e      	ldr	r3, [pc, #184]	@ (8113a78 <tcp_receive+0xd00>)
 81139be:	681a      	ldr	r2, [r3, #0]
 81139c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81139c2:	68db      	ldr	r3, [r3, #12]
 81139c4:	685b      	ldr	r3, [r3, #4]
 81139c6:	1ad3      	subs	r3, r2, r3
 81139c8:	2b00      	cmp	r3, #0
 81139ca:	da57      	bge.n	8113a7c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 81139cc:	4829      	ldr	r0, [pc, #164]	@ (8113a74 <tcp_receive+0xcfc>)
 81139ce:	f7fd fb7f 	bl	81110d0 <tcp_seg_copy>
 81139d2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 81139d4:	69bb      	ldr	r3, [r7, #24]
 81139d6:	2b00      	cmp	r3, #0
 81139d8:	f000 8128 	beq.w	8113c2c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 81139dc:	687b      	ldr	r3, [r7, #4]
 81139de:	69ba      	ldr	r2, [r7, #24]
 81139e0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 81139e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 81139e4:	69b8      	ldr	r0, [r7, #24]
 81139e6:	f7ff f8c3 	bl	8112b70 <tcp_oos_insert_segment>
                  }
                  break;
 81139ea:	e11f      	b.n	8113c2c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 81139ec:	4b22      	ldr	r3, [pc, #136]	@ (8113a78 <tcp_receive+0xd00>)
 81139ee:	681a      	ldr	r2, [r3, #0]
 81139f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81139f2:	68db      	ldr	r3, [r3, #12]
 81139f4:	685b      	ldr	r3, [r3, #4]
 81139f6:	1ad3      	subs	r3, r2, r3
 81139f8:	3b01      	subs	r3, #1
 81139fa:	2b00      	cmp	r3, #0
 81139fc:	db3e      	blt.n	8113a7c <tcp_receive+0xd04>
 81139fe:	4b1e      	ldr	r3, [pc, #120]	@ (8113a78 <tcp_receive+0xd00>)
 8113a00:	681a      	ldr	r2, [r3, #0]
 8113a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113a04:	68db      	ldr	r3, [r3, #12]
 8113a06:	685b      	ldr	r3, [r3, #4]
 8113a08:	1ad3      	subs	r3, r2, r3
 8113a0a:	3301      	adds	r3, #1
 8113a0c:	2b00      	cmp	r3, #0
 8113a0e:	dc35      	bgt.n	8113a7c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8113a10:	4818      	ldr	r0, [pc, #96]	@ (8113a74 <tcp_receive+0xcfc>)
 8113a12:	f7fd fb5d 	bl	81110d0 <tcp_seg_copy>
 8113a16:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8113a18:	69fb      	ldr	r3, [r7, #28]
 8113a1a:	2b00      	cmp	r3, #0
 8113a1c:	f000 8108 	beq.w	8113c30 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8113a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113a22:	68db      	ldr	r3, [r3, #12]
 8113a24:	685b      	ldr	r3, [r3, #4]
 8113a26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8113a28:	8912      	ldrh	r2, [r2, #8]
 8113a2a:	441a      	add	r2, r3
 8113a2c:	4b12      	ldr	r3, [pc, #72]	@ (8113a78 <tcp_receive+0xd00>)
 8113a2e:	681b      	ldr	r3, [r3, #0]
 8113a30:	1ad3      	subs	r3, r2, r3
 8113a32:	2b00      	cmp	r3, #0
 8113a34:	dd12      	ble.n	8113a5c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8113a36:	4b10      	ldr	r3, [pc, #64]	@ (8113a78 <tcp_receive+0xd00>)
 8113a38:	681b      	ldr	r3, [r3, #0]
 8113a3a:	b29a      	uxth	r2, r3
 8113a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113a3e:	68db      	ldr	r3, [r3, #12]
 8113a40:	685b      	ldr	r3, [r3, #4]
 8113a42:	b29b      	uxth	r3, r3
 8113a44:	1ad3      	subs	r3, r2, r3
 8113a46:	b29a      	uxth	r2, r3
 8113a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113a4a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8113a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113a4e:	685a      	ldr	r2, [r3, #4]
 8113a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113a52:	891b      	ldrh	r3, [r3, #8]
 8113a54:	4619      	mov	r1, r3
 8113a56:	4610      	mov	r0, r2
 8113a58:	f7fb fe14 	bl	810f684 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8113a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113a5e:	69fa      	ldr	r2, [r7, #28]
 8113a60:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8113a62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8113a64:	69f8      	ldr	r0, [r7, #28]
 8113a66:	f7ff f883 	bl	8112b70 <tcp_oos_insert_segment>
                  }
                  break;
 8113a6a:	e0e1      	b.n	8113c30 <tcp_receive+0xeb8>
 8113a6c:	1000b894 	.word	0x1000b894
 8113a70:	1000b891 	.word	0x1000b891
 8113a74:	1000b864 	.word	0x1000b864
 8113a78:	1000b884 	.word	0x1000b884
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8113a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113a7e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8113a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113a82:	681b      	ldr	r3, [r3, #0]
 8113a84:	2b00      	cmp	r3, #0
 8113a86:	f040 80c5 	bne.w	8113c14 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8113a8a:	4b7f      	ldr	r3, [pc, #508]	@ (8113c88 <tcp_receive+0xf10>)
 8113a8c:	681a      	ldr	r2, [r3, #0]
 8113a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113a90:	68db      	ldr	r3, [r3, #12]
 8113a92:	685b      	ldr	r3, [r3, #4]
 8113a94:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8113a96:	2b00      	cmp	r3, #0
 8113a98:	f340 80bc 	ble.w	8113c14 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8113a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113a9e:	68db      	ldr	r3, [r3, #12]
 8113aa0:	899b      	ldrh	r3, [r3, #12]
 8113aa2:	b29b      	uxth	r3, r3
 8113aa4:	4618      	mov	r0, r3
 8113aa6:	f7f7 ffc9 	bl	810ba3c <lwip_htons>
 8113aaa:	4603      	mov	r3, r0
 8113aac:	b2db      	uxtb	r3, r3
 8113aae:	f003 0301 	and.w	r3, r3, #1
 8113ab2:	2b00      	cmp	r3, #0
 8113ab4:	f040 80be 	bne.w	8113c34 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8113ab8:	4874      	ldr	r0, [pc, #464]	@ (8113c8c <tcp_receive+0xf14>)
 8113aba:	f7fd fb09 	bl	81110d0 <tcp_seg_copy>
 8113abe:	4602      	mov	r2, r0
 8113ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113ac2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8113ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113ac6:	681b      	ldr	r3, [r3, #0]
 8113ac8:	2b00      	cmp	r3, #0
 8113aca:	f000 80b5 	beq.w	8113c38 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8113ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113ad0:	68db      	ldr	r3, [r3, #12]
 8113ad2:	685b      	ldr	r3, [r3, #4]
 8113ad4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8113ad6:	8912      	ldrh	r2, [r2, #8]
 8113ad8:	441a      	add	r2, r3
 8113ada:	4b6b      	ldr	r3, [pc, #428]	@ (8113c88 <tcp_receive+0xf10>)
 8113adc:	681b      	ldr	r3, [r3, #0]
 8113ade:	1ad3      	subs	r3, r2, r3
 8113ae0:	2b00      	cmp	r3, #0
 8113ae2:	dd12      	ble.n	8113b0a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8113ae4:	4b68      	ldr	r3, [pc, #416]	@ (8113c88 <tcp_receive+0xf10>)
 8113ae6:	681b      	ldr	r3, [r3, #0]
 8113ae8:	b29a      	uxth	r2, r3
 8113aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113aec:	68db      	ldr	r3, [r3, #12]
 8113aee:	685b      	ldr	r3, [r3, #4]
 8113af0:	b29b      	uxth	r3, r3
 8113af2:	1ad3      	subs	r3, r2, r3
 8113af4:	b29a      	uxth	r2, r3
 8113af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113af8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8113afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113afc:	685a      	ldr	r2, [r3, #4]
 8113afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113b00:	891b      	ldrh	r3, [r3, #8]
 8113b02:	4619      	mov	r1, r3
 8113b04:	4610      	mov	r0, r2
 8113b06:	f7fb fdbd 	bl	810f684 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8113b0a:	4b61      	ldr	r3, [pc, #388]	@ (8113c90 <tcp_receive+0xf18>)
 8113b0c:	881b      	ldrh	r3, [r3, #0]
 8113b0e:	461a      	mov	r2, r3
 8113b10:	4b5d      	ldr	r3, [pc, #372]	@ (8113c88 <tcp_receive+0xf10>)
 8113b12:	681b      	ldr	r3, [r3, #0]
 8113b14:	441a      	add	r2, r3
 8113b16:	687b      	ldr	r3, [r7, #4]
 8113b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8113b1a:	6879      	ldr	r1, [r7, #4]
 8113b1c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8113b1e:	440b      	add	r3, r1
 8113b20:	1ad3      	subs	r3, r2, r3
 8113b22:	2b00      	cmp	r3, #0
 8113b24:	f340 8088 	ble.w	8113c38 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8113b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113b2a:	681b      	ldr	r3, [r3, #0]
 8113b2c:	68db      	ldr	r3, [r3, #12]
 8113b2e:	899b      	ldrh	r3, [r3, #12]
 8113b30:	b29b      	uxth	r3, r3
 8113b32:	4618      	mov	r0, r3
 8113b34:	f7f7 ff82 	bl	810ba3c <lwip_htons>
 8113b38:	4603      	mov	r3, r0
 8113b3a:	b2db      	uxtb	r3, r3
 8113b3c:	f003 0301 	and.w	r3, r3, #1
 8113b40:	2b00      	cmp	r3, #0
 8113b42:	d021      	beq.n	8113b88 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8113b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113b46:	681b      	ldr	r3, [r3, #0]
 8113b48:	68db      	ldr	r3, [r3, #12]
 8113b4a:	899b      	ldrh	r3, [r3, #12]
 8113b4c:	b29b      	uxth	r3, r3
 8113b4e:	b21b      	sxth	r3, r3
 8113b50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8113b54:	b21c      	sxth	r4, r3
 8113b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113b58:	681b      	ldr	r3, [r3, #0]
 8113b5a:	68db      	ldr	r3, [r3, #12]
 8113b5c:	899b      	ldrh	r3, [r3, #12]
 8113b5e:	b29b      	uxth	r3, r3
 8113b60:	4618      	mov	r0, r3
 8113b62:	f7f7 ff6b 	bl	810ba3c <lwip_htons>
 8113b66:	4603      	mov	r3, r0
 8113b68:	b2db      	uxtb	r3, r3
 8113b6a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8113b6e:	b29b      	uxth	r3, r3
 8113b70:	4618      	mov	r0, r3
 8113b72:	f7f7 ff63 	bl	810ba3c <lwip_htons>
 8113b76:	4603      	mov	r3, r0
 8113b78:	b21b      	sxth	r3, r3
 8113b7a:	4323      	orrs	r3, r4
 8113b7c:	b21a      	sxth	r2, r3
 8113b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113b80:	681b      	ldr	r3, [r3, #0]
 8113b82:	68db      	ldr	r3, [r3, #12]
 8113b84:	b292      	uxth	r2, r2
 8113b86:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8113b88:	687b      	ldr	r3, [r7, #4]
 8113b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8113b8c:	b29a      	uxth	r2, r3
 8113b8e:	687b      	ldr	r3, [r7, #4]
 8113b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8113b92:	4413      	add	r3, r2
 8113b94:	b299      	uxth	r1, r3
 8113b96:	4b3c      	ldr	r3, [pc, #240]	@ (8113c88 <tcp_receive+0xf10>)
 8113b98:	681b      	ldr	r3, [r3, #0]
 8113b9a:	b29a      	uxth	r2, r3
 8113b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113b9e:	681b      	ldr	r3, [r3, #0]
 8113ba0:	1a8a      	subs	r2, r1, r2
 8113ba2:	b292      	uxth	r2, r2
 8113ba4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8113ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113ba8:	681b      	ldr	r3, [r3, #0]
 8113baa:	685a      	ldr	r2, [r3, #4]
 8113bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113bae:	681b      	ldr	r3, [r3, #0]
 8113bb0:	891b      	ldrh	r3, [r3, #8]
 8113bb2:	4619      	mov	r1, r3
 8113bb4:	4610      	mov	r0, r2
 8113bb6:	f7fb fd65 	bl	810f684 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8113bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113bbc:	681b      	ldr	r3, [r3, #0]
 8113bbe:	891c      	ldrh	r4, [r3, #8]
 8113bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113bc2:	681b      	ldr	r3, [r3, #0]
 8113bc4:	68db      	ldr	r3, [r3, #12]
 8113bc6:	899b      	ldrh	r3, [r3, #12]
 8113bc8:	b29b      	uxth	r3, r3
 8113bca:	4618      	mov	r0, r3
 8113bcc:	f7f7 ff36 	bl	810ba3c <lwip_htons>
 8113bd0:	4603      	mov	r3, r0
 8113bd2:	b2db      	uxtb	r3, r3
 8113bd4:	f003 0303 	and.w	r3, r3, #3
 8113bd8:	2b00      	cmp	r3, #0
 8113bda:	d001      	beq.n	8113be0 <tcp_receive+0xe68>
 8113bdc:	2301      	movs	r3, #1
 8113bde:	e000      	b.n	8113be2 <tcp_receive+0xe6a>
 8113be0:	2300      	movs	r3, #0
 8113be2:	4423      	add	r3, r4
 8113be4:	b29a      	uxth	r2, r3
 8113be6:	4b2a      	ldr	r3, [pc, #168]	@ (8113c90 <tcp_receive+0xf18>)
 8113be8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8113bea:	4b29      	ldr	r3, [pc, #164]	@ (8113c90 <tcp_receive+0xf18>)
 8113bec:	881b      	ldrh	r3, [r3, #0]
 8113bee:	461a      	mov	r2, r3
 8113bf0:	4b25      	ldr	r3, [pc, #148]	@ (8113c88 <tcp_receive+0xf10>)
 8113bf2:	681b      	ldr	r3, [r3, #0]
 8113bf4:	441a      	add	r2, r3
 8113bf6:	687b      	ldr	r3, [r7, #4]
 8113bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8113bfa:	6879      	ldr	r1, [r7, #4]
 8113bfc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8113bfe:	440b      	add	r3, r1
 8113c00:	429a      	cmp	r2, r3
 8113c02:	d019      	beq.n	8113c38 <tcp_receive+0xec0>
 8113c04:	4b23      	ldr	r3, [pc, #140]	@ (8113c94 <tcp_receive+0xf1c>)
 8113c06:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8113c0a:	4923      	ldr	r1, [pc, #140]	@ (8113c98 <tcp_receive+0xf20>)
 8113c0c:	4823      	ldr	r0, [pc, #140]	@ (8113c9c <tcp_receive+0xf24>)
 8113c0e:	f002 fe6b 	bl	81168e8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8113c12:	e011      	b.n	8113c38 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8113c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113c16:	681b      	ldr	r3, [r3, #0]
 8113c18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8113c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113c1c:	2b00      	cmp	r3, #0
 8113c1e:	f47f aea5 	bne.w	811396c <tcp_receive+0xbf4>
 8113c22:	e00a      	b.n	8113c3a <tcp_receive+0xec2>
                break;
 8113c24:	bf00      	nop
 8113c26:	e008      	b.n	8113c3a <tcp_receive+0xec2>
                break;
 8113c28:	bf00      	nop
 8113c2a:	e006      	b.n	8113c3a <tcp_receive+0xec2>
                  break;
 8113c2c:	bf00      	nop
 8113c2e:	e004      	b.n	8113c3a <tcp_receive+0xec2>
                  break;
 8113c30:	bf00      	nop
 8113c32:	e002      	b.n	8113c3a <tcp_receive+0xec2>
                  break;
 8113c34:	bf00      	nop
 8113c36:	e000      	b.n	8113c3a <tcp_receive+0xec2>
                break;
 8113c38:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8113c3a:	6878      	ldr	r0, [r7, #4]
 8113c3c:	f001 fa32 	bl	81150a4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8113c40:	e003      	b.n	8113c4a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8113c42:	6878      	ldr	r0, [r7, #4]
 8113c44:	f001 fa2e 	bl	81150a4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8113c48:	e01a      	b.n	8113c80 <tcp_receive+0xf08>
 8113c4a:	e019      	b.n	8113c80 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8113c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8113c88 <tcp_receive+0xf10>)
 8113c4e:	681a      	ldr	r2, [r3, #0]
 8113c50:	687b      	ldr	r3, [r7, #4]
 8113c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8113c54:	1ad3      	subs	r3, r2, r3
 8113c56:	2b00      	cmp	r3, #0
 8113c58:	db0a      	blt.n	8113c70 <tcp_receive+0xef8>
 8113c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8113c88 <tcp_receive+0xf10>)
 8113c5c:	681a      	ldr	r2, [r3, #0]
 8113c5e:	687b      	ldr	r3, [r7, #4]
 8113c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8113c62:	6879      	ldr	r1, [r7, #4]
 8113c64:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8113c66:	440b      	add	r3, r1
 8113c68:	1ad3      	subs	r3, r2, r3
 8113c6a:	3301      	adds	r3, #1
 8113c6c:	2b00      	cmp	r3, #0
 8113c6e:	dd07      	ble.n	8113c80 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8113c70:	687b      	ldr	r3, [r7, #4]
 8113c72:	8b5b      	ldrh	r3, [r3, #26]
 8113c74:	f043 0302 	orr.w	r3, r3, #2
 8113c78:	b29a      	uxth	r2, r3
 8113c7a:	687b      	ldr	r3, [r7, #4]
 8113c7c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8113c7e:	e7ff      	b.n	8113c80 <tcp_receive+0xf08>
 8113c80:	bf00      	nop
 8113c82:	3750      	adds	r7, #80	@ 0x50
 8113c84:	46bd      	mov	sp, r7
 8113c86:	bdb0      	pop	{r4, r5, r7, pc}
 8113c88:	1000b884 	.word	0x1000b884
 8113c8c:	1000b864 	.word	0x1000b864
 8113c90:	1000b88e 	.word	0x1000b88e
 8113c94:	081192cc 	.word	0x081192cc
 8113c98:	081196b4 	.word	0x081196b4
 8113c9c:	08119358 	.word	0x08119358

08113ca0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8113ca0:	b480      	push	{r7}
 8113ca2:	b083      	sub	sp, #12
 8113ca4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8113ca6:	4b15      	ldr	r3, [pc, #84]	@ (8113cfc <tcp_get_next_optbyte+0x5c>)
 8113ca8:	881b      	ldrh	r3, [r3, #0]
 8113caa:	1c5a      	adds	r2, r3, #1
 8113cac:	b291      	uxth	r1, r2
 8113cae:	4a13      	ldr	r2, [pc, #76]	@ (8113cfc <tcp_get_next_optbyte+0x5c>)
 8113cb0:	8011      	strh	r1, [r2, #0]
 8113cb2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8113cb4:	4b12      	ldr	r3, [pc, #72]	@ (8113d00 <tcp_get_next_optbyte+0x60>)
 8113cb6:	681b      	ldr	r3, [r3, #0]
 8113cb8:	2b00      	cmp	r3, #0
 8113cba:	d004      	beq.n	8113cc6 <tcp_get_next_optbyte+0x26>
 8113cbc:	4b11      	ldr	r3, [pc, #68]	@ (8113d04 <tcp_get_next_optbyte+0x64>)
 8113cbe:	881b      	ldrh	r3, [r3, #0]
 8113cc0:	88fa      	ldrh	r2, [r7, #6]
 8113cc2:	429a      	cmp	r2, r3
 8113cc4:	d208      	bcs.n	8113cd8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8113cc6:	4b10      	ldr	r3, [pc, #64]	@ (8113d08 <tcp_get_next_optbyte+0x68>)
 8113cc8:	681b      	ldr	r3, [r3, #0]
 8113cca:	3314      	adds	r3, #20
 8113ccc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8113cce:	88fb      	ldrh	r3, [r7, #6]
 8113cd0:	683a      	ldr	r2, [r7, #0]
 8113cd2:	4413      	add	r3, r2
 8113cd4:	781b      	ldrb	r3, [r3, #0]
 8113cd6:	e00b      	b.n	8113cf0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8113cd8:	88fb      	ldrh	r3, [r7, #6]
 8113cda:	b2da      	uxtb	r2, r3
 8113cdc:	4b09      	ldr	r3, [pc, #36]	@ (8113d04 <tcp_get_next_optbyte+0x64>)
 8113cde:	881b      	ldrh	r3, [r3, #0]
 8113ce0:	b2db      	uxtb	r3, r3
 8113ce2:	1ad3      	subs	r3, r2, r3
 8113ce4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8113ce6:	4b06      	ldr	r3, [pc, #24]	@ (8113d00 <tcp_get_next_optbyte+0x60>)
 8113ce8:	681a      	ldr	r2, [r3, #0]
 8113cea:	797b      	ldrb	r3, [r7, #5]
 8113cec:	4413      	add	r3, r2
 8113cee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8113cf0:	4618      	mov	r0, r3
 8113cf2:	370c      	adds	r7, #12
 8113cf4:	46bd      	mov	sp, r7
 8113cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113cfa:	4770      	bx	lr
 8113cfc:	1000b880 	.word	0x1000b880
 8113d00:	1000b87c 	.word	0x1000b87c
 8113d04:	1000b87a 	.word	0x1000b87a
 8113d08:	1000b874 	.word	0x1000b874

08113d0c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8113d0c:	b580      	push	{r7, lr}
 8113d0e:	b084      	sub	sp, #16
 8113d10:	af00      	add	r7, sp, #0
 8113d12:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8113d14:	687b      	ldr	r3, [r7, #4]
 8113d16:	2b00      	cmp	r3, #0
 8113d18:	d106      	bne.n	8113d28 <tcp_parseopt+0x1c>
 8113d1a:	4b33      	ldr	r3, [pc, #204]	@ (8113de8 <tcp_parseopt+0xdc>)
 8113d1c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8113d20:	4932      	ldr	r1, [pc, #200]	@ (8113dec <tcp_parseopt+0xe0>)
 8113d22:	4833      	ldr	r0, [pc, #204]	@ (8113df0 <tcp_parseopt+0xe4>)
 8113d24:	f002 fde0 	bl	81168e8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8113d28:	4b32      	ldr	r3, [pc, #200]	@ (8113df4 <tcp_parseopt+0xe8>)
 8113d2a:	881b      	ldrh	r3, [r3, #0]
 8113d2c:	2b00      	cmp	r3, #0
 8113d2e:	d057      	beq.n	8113de0 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8113d30:	4b31      	ldr	r3, [pc, #196]	@ (8113df8 <tcp_parseopt+0xec>)
 8113d32:	2200      	movs	r2, #0
 8113d34:	801a      	strh	r2, [r3, #0]
 8113d36:	e047      	b.n	8113dc8 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8113d38:	f7ff ffb2 	bl	8113ca0 <tcp_get_next_optbyte>
 8113d3c:	4603      	mov	r3, r0
 8113d3e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8113d40:	7bfb      	ldrb	r3, [r7, #15]
 8113d42:	2b02      	cmp	r3, #2
 8113d44:	d006      	beq.n	8113d54 <tcp_parseopt+0x48>
 8113d46:	2b02      	cmp	r3, #2
 8113d48:	dc2b      	bgt.n	8113da2 <tcp_parseopt+0x96>
 8113d4a:	2b00      	cmp	r3, #0
 8113d4c:	d043      	beq.n	8113dd6 <tcp_parseopt+0xca>
 8113d4e:	2b01      	cmp	r3, #1
 8113d50:	d039      	beq.n	8113dc6 <tcp_parseopt+0xba>
 8113d52:	e026      	b.n	8113da2 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8113d54:	f7ff ffa4 	bl	8113ca0 <tcp_get_next_optbyte>
 8113d58:	4603      	mov	r3, r0
 8113d5a:	2b04      	cmp	r3, #4
 8113d5c:	d13d      	bne.n	8113dda <tcp_parseopt+0xce>
 8113d5e:	4b26      	ldr	r3, [pc, #152]	@ (8113df8 <tcp_parseopt+0xec>)
 8113d60:	881b      	ldrh	r3, [r3, #0]
 8113d62:	3301      	adds	r3, #1
 8113d64:	4a23      	ldr	r2, [pc, #140]	@ (8113df4 <tcp_parseopt+0xe8>)
 8113d66:	8812      	ldrh	r2, [r2, #0]
 8113d68:	4293      	cmp	r3, r2
 8113d6a:	da36      	bge.n	8113dda <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8113d6c:	f7ff ff98 	bl	8113ca0 <tcp_get_next_optbyte>
 8113d70:	4603      	mov	r3, r0
 8113d72:	021b      	lsls	r3, r3, #8
 8113d74:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8113d76:	f7ff ff93 	bl	8113ca0 <tcp_get_next_optbyte>
 8113d7a:	4603      	mov	r3, r0
 8113d7c:	461a      	mov	r2, r3
 8113d7e:	89bb      	ldrh	r3, [r7, #12]
 8113d80:	4313      	orrs	r3, r2
 8113d82:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8113d84:	89bb      	ldrh	r3, [r7, #12]
 8113d86:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8113d8a:	4293      	cmp	r3, r2
 8113d8c:	d804      	bhi.n	8113d98 <tcp_parseopt+0x8c>
 8113d8e:	89bb      	ldrh	r3, [r7, #12]
 8113d90:	2b00      	cmp	r3, #0
 8113d92:	d001      	beq.n	8113d98 <tcp_parseopt+0x8c>
 8113d94:	89ba      	ldrh	r2, [r7, #12]
 8113d96:	e001      	b.n	8113d9c <tcp_parseopt+0x90>
 8113d98:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8113d9c:	687b      	ldr	r3, [r7, #4]
 8113d9e:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8113da0:	e012      	b.n	8113dc8 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8113da2:	f7ff ff7d 	bl	8113ca0 <tcp_get_next_optbyte>
 8113da6:	4603      	mov	r3, r0
 8113da8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8113daa:	7afb      	ldrb	r3, [r7, #11]
 8113dac:	2b01      	cmp	r3, #1
 8113dae:	d916      	bls.n	8113dde <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8113db0:	7afb      	ldrb	r3, [r7, #11]
 8113db2:	b29a      	uxth	r2, r3
 8113db4:	4b10      	ldr	r3, [pc, #64]	@ (8113df8 <tcp_parseopt+0xec>)
 8113db6:	881b      	ldrh	r3, [r3, #0]
 8113db8:	4413      	add	r3, r2
 8113dba:	b29b      	uxth	r3, r3
 8113dbc:	3b02      	subs	r3, #2
 8113dbe:	b29a      	uxth	r2, r3
 8113dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8113df8 <tcp_parseopt+0xec>)
 8113dc2:	801a      	strh	r2, [r3, #0]
 8113dc4:	e000      	b.n	8113dc8 <tcp_parseopt+0xbc>
          break;
 8113dc6:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8113dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8113df8 <tcp_parseopt+0xec>)
 8113dca:	881a      	ldrh	r2, [r3, #0]
 8113dcc:	4b09      	ldr	r3, [pc, #36]	@ (8113df4 <tcp_parseopt+0xe8>)
 8113dce:	881b      	ldrh	r3, [r3, #0]
 8113dd0:	429a      	cmp	r2, r3
 8113dd2:	d3b1      	bcc.n	8113d38 <tcp_parseopt+0x2c>
 8113dd4:	e004      	b.n	8113de0 <tcp_parseopt+0xd4>
          return;
 8113dd6:	bf00      	nop
 8113dd8:	e002      	b.n	8113de0 <tcp_parseopt+0xd4>
            return;
 8113dda:	bf00      	nop
 8113ddc:	e000      	b.n	8113de0 <tcp_parseopt+0xd4>
            return;
 8113dde:	bf00      	nop
      }
    }
  }
}
 8113de0:	3710      	adds	r7, #16
 8113de2:	46bd      	mov	sp, r7
 8113de4:	bd80      	pop	{r7, pc}
 8113de6:	bf00      	nop
 8113de8:	081192cc 	.word	0x081192cc
 8113dec:	08119770 	.word	0x08119770
 8113df0:	08119358 	.word	0x08119358
 8113df4:	1000b878 	.word	0x1000b878
 8113df8:	1000b880 	.word	0x1000b880

08113dfc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8113dfc:	b480      	push	{r7}
 8113dfe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8113e00:	4b05      	ldr	r3, [pc, #20]	@ (8113e18 <tcp_trigger_input_pcb_close+0x1c>)
 8113e02:	781b      	ldrb	r3, [r3, #0]
 8113e04:	f043 0310 	orr.w	r3, r3, #16
 8113e08:	b2da      	uxtb	r2, r3
 8113e0a:	4b03      	ldr	r3, [pc, #12]	@ (8113e18 <tcp_trigger_input_pcb_close+0x1c>)
 8113e0c:	701a      	strb	r2, [r3, #0]
}
 8113e0e:	bf00      	nop
 8113e10:	46bd      	mov	sp, r7
 8113e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113e16:	4770      	bx	lr
 8113e18:	1000b891 	.word	0x1000b891

08113e1c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8113e1c:	b580      	push	{r7, lr}
 8113e1e:	b084      	sub	sp, #16
 8113e20:	af00      	add	r7, sp, #0
 8113e22:	60f8      	str	r0, [r7, #12]
 8113e24:	60b9      	str	r1, [r7, #8]
 8113e26:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8113e28:	68fb      	ldr	r3, [r7, #12]
 8113e2a:	2b00      	cmp	r3, #0
 8113e2c:	d00a      	beq.n	8113e44 <tcp_route+0x28>
 8113e2e:	68fb      	ldr	r3, [r7, #12]
 8113e30:	7a1b      	ldrb	r3, [r3, #8]
 8113e32:	2b00      	cmp	r3, #0
 8113e34:	d006      	beq.n	8113e44 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8113e36:	68fb      	ldr	r3, [r7, #12]
 8113e38:	7a1b      	ldrb	r3, [r3, #8]
 8113e3a:	4618      	mov	r0, r3
 8113e3c:	f7fb fa16 	bl	810f26c <netif_get_by_index>
 8113e40:	4603      	mov	r3, r0
 8113e42:	e003      	b.n	8113e4c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8113e44:	6878      	ldr	r0, [r7, #4]
 8113e46:	f7f9 f8d1 	bl	810cfec <ip4_route>
 8113e4a:	4603      	mov	r3, r0
  }
}
 8113e4c:	4618      	mov	r0, r3
 8113e4e:	3710      	adds	r7, #16
 8113e50:	46bd      	mov	sp, r7
 8113e52:	bd80      	pop	{r7, pc}

08113e54 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8113e54:	b590      	push	{r4, r7, lr}
 8113e56:	b087      	sub	sp, #28
 8113e58:	af00      	add	r7, sp, #0
 8113e5a:	60f8      	str	r0, [r7, #12]
 8113e5c:	60b9      	str	r1, [r7, #8]
 8113e5e:	603b      	str	r3, [r7, #0]
 8113e60:	4613      	mov	r3, r2
 8113e62:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8113e64:	68fb      	ldr	r3, [r7, #12]
 8113e66:	2b00      	cmp	r3, #0
 8113e68:	d105      	bne.n	8113e76 <tcp_create_segment+0x22>
 8113e6a:	4b43      	ldr	r3, [pc, #268]	@ (8113f78 <tcp_create_segment+0x124>)
 8113e6c:	22a3      	movs	r2, #163	@ 0xa3
 8113e6e:	4943      	ldr	r1, [pc, #268]	@ (8113f7c <tcp_create_segment+0x128>)
 8113e70:	4843      	ldr	r0, [pc, #268]	@ (8113f80 <tcp_create_segment+0x12c>)
 8113e72:	f002 fd39 	bl	81168e8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8113e76:	68bb      	ldr	r3, [r7, #8]
 8113e78:	2b00      	cmp	r3, #0
 8113e7a:	d105      	bne.n	8113e88 <tcp_create_segment+0x34>
 8113e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8113f78 <tcp_create_segment+0x124>)
 8113e7e:	22a4      	movs	r2, #164	@ 0xa4
 8113e80:	4940      	ldr	r1, [pc, #256]	@ (8113f84 <tcp_create_segment+0x130>)
 8113e82:	483f      	ldr	r0, [pc, #252]	@ (8113f80 <tcp_create_segment+0x12c>)
 8113e84:	f002 fd30 	bl	81168e8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8113e88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8113e8c:	009b      	lsls	r3, r3, #2
 8113e8e:	b2db      	uxtb	r3, r3
 8113e90:	f003 0304 	and.w	r3, r3, #4
 8113e94:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8113e96:	2003      	movs	r0, #3
 8113e98:	f7fa fe5c 	bl	810eb54 <memp_malloc>
 8113e9c:	6138      	str	r0, [r7, #16]
 8113e9e:	693b      	ldr	r3, [r7, #16]
 8113ea0:	2b00      	cmp	r3, #0
 8113ea2:	d104      	bne.n	8113eae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8113ea4:	68b8      	ldr	r0, [r7, #8]
 8113ea6:	f7fb fd73 	bl	810f990 <pbuf_free>
    return NULL;
 8113eaa:	2300      	movs	r3, #0
 8113eac:	e060      	b.n	8113f70 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8113eae:	693b      	ldr	r3, [r7, #16]
 8113eb0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8113eb4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8113eb6:	693b      	ldr	r3, [r7, #16]
 8113eb8:	2200      	movs	r2, #0
 8113eba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8113ebc:	693b      	ldr	r3, [r7, #16]
 8113ebe:	68ba      	ldr	r2, [r7, #8]
 8113ec0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8113ec2:	68bb      	ldr	r3, [r7, #8]
 8113ec4:	891a      	ldrh	r2, [r3, #8]
 8113ec6:	7dfb      	ldrb	r3, [r7, #23]
 8113ec8:	b29b      	uxth	r3, r3
 8113eca:	429a      	cmp	r2, r3
 8113ecc:	d205      	bcs.n	8113eda <tcp_create_segment+0x86>
 8113ece:	4b2a      	ldr	r3, [pc, #168]	@ (8113f78 <tcp_create_segment+0x124>)
 8113ed0:	22b0      	movs	r2, #176	@ 0xb0
 8113ed2:	492d      	ldr	r1, [pc, #180]	@ (8113f88 <tcp_create_segment+0x134>)
 8113ed4:	482a      	ldr	r0, [pc, #168]	@ (8113f80 <tcp_create_segment+0x12c>)
 8113ed6:	f002 fd07 	bl	81168e8 <iprintf>
  seg->len = p->tot_len - optlen;
 8113eda:	68bb      	ldr	r3, [r7, #8]
 8113edc:	891a      	ldrh	r2, [r3, #8]
 8113ede:	7dfb      	ldrb	r3, [r7, #23]
 8113ee0:	b29b      	uxth	r3, r3
 8113ee2:	1ad3      	subs	r3, r2, r3
 8113ee4:	b29a      	uxth	r2, r3
 8113ee6:	693b      	ldr	r3, [r7, #16]
 8113ee8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8113eea:	2114      	movs	r1, #20
 8113eec:	68b8      	ldr	r0, [r7, #8]
 8113eee:	f7fb fcb9 	bl	810f864 <pbuf_add_header>
 8113ef2:	4603      	mov	r3, r0
 8113ef4:	2b00      	cmp	r3, #0
 8113ef6:	d004      	beq.n	8113f02 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8113ef8:	6938      	ldr	r0, [r7, #16]
 8113efa:	f7fd f8d0 	bl	811109e <tcp_seg_free>
    return NULL;
 8113efe:	2300      	movs	r3, #0
 8113f00:	e036      	b.n	8113f70 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8113f02:	693b      	ldr	r3, [r7, #16]
 8113f04:	685b      	ldr	r3, [r3, #4]
 8113f06:	685a      	ldr	r2, [r3, #4]
 8113f08:	693b      	ldr	r3, [r7, #16]
 8113f0a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8113f0c:	68fb      	ldr	r3, [r7, #12]
 8113f0e:	8ada      	ldrh	r2, [r3, #22]
 8113f10:	693b      	ldr	r3, [r7, #16]
 8113f12:	68dc      	ldr	r4, [r3, #12]
 8113f14:	4610      	mov	r0, r2
 8113f16:	f7f7 fd91 	bl	810ba3c <lwip_htons>
 8113f1a:	4603      	mov	r3, r0
 8113f1c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8113f1e:	68fb      	ldr	r3, [r7, #12]
 8113f20:	8b1a      	ldrh	r2, [r3, #24]
 8113f22:	693b      	ldr	r3, [r7, #16]
 8113f24:	68dc      	ldr	r4, [r3, #12]
 8113f26:	4610      	mov	r0, r2
 8113f28:	f7f7 fd88 	bl	810ba3c <lwip_htons>
 8113f2c:	4603      	mov	r3, r0
 8113f2e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8113f30:	693b      	ldr	r3, [r7, #16]
 8113f32:	68dc      	ldr	r4, [r3, #12]
 8113f34:	6838      	ldr	r0, [r7, #0]
 8113f36:	f7f7 fd96 	bl	810ba66 <lwip_htonl>
 8113f3a:	4603      	mov	r3, r0
 8113f3c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8113f3e:	7dfb      	ldrb	r3, [r7, #23]
 8113f40:	089b      	lsrs	r3, r3, #2
 8113f42:	b2db      	uxtb	r3, r3
 8113f44:	3305      	adds	r3, #5
 8113f46:	b29b      	uxth	r3, r3
 8113f48:	031b      	lsls	r3, r3, #12
 8113f4a:	b29a      	uxth	r2, r3
 8113f4c:	79fb      	ldrb	r3, [r7, #7]
 8113f4e:	b29b      	uxth	r3, r3
 8113f50:	4313      	orrs	r3, r2
 8113f52:	b29a      	uxth	r2, r3
 8113f54:	693b      	ldr	r3, [r7, #16]
 8113f56:	68dc      	ldr	r4, [r3, #12]
 8113f58:	4610      	mov	r0, r2
 8113f5a:	f7f7 fd6f 	bl	810ba3c <lwip_htons>
 8113f5e:	4603      	mov	r3, r0
 8113f60:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8113f62:	693b      	ldr	r3, [r7, #16]
 8113f64:	68db      	ldr	r3, [r3, #12]
 8113f66:	2200      	movs	r2, #0
 8113f68:	749a      	strb	r2, [r3, #18]
 8113f6a:	2200      	movs	r2, #0
 8113f6c:	74da      	strb	r2, [r3, #19]
  return seg;
 8113f6e:	693b      	ldr	r3, [r7, #16]
}
 8113f70:	4618      	mov	r0, r3
 8113f72:	371c      	adds	r7, #28
 8113f74:	46bd      	mov	sp, r7
 8113f76:	bd90      	pop	{r4, r7, pc}
 8113f78:	0811978c 	.word	0x0811978c
 8113f7c:	08119800 	.word	0x08119800
 8113f80:	08119820 	.word	0x08119820
 8113f84:	08119848 	.word	0x08119848
 8113f88:	0811986c 	.word	0x0811986c

08113f8c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8113f8c:	b590      	push	{r4, r7, lr}
 8113f8e:	b08b      	sub	sp, #44	@ 0x2c
 8113f90:	af02      	add	r7, sp, #8
 8113f92:	6078      	str	r0, [r7, #4]
 8113f94:	460b      	mov	r3, r1
 8113f96:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8113f98:	2300      	movs	r3, #0
 8113f9a:	61fb      	str	r3, [r7, #28]
 8113f9c:	2300      	movs	r3, #0
 8113f9e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8113fa0:	2300      	movs	r3, #0
 8113fa2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8113fa4:	687b      	ldr	r3, [r7, #4]
 8113fa6:	2b00      	cmp	r3, #0
 8113fa8:	d106      	bne.n	8113fb8 <tcp_split_unsent_seg+0x2c>
 8113faa:	4b95      	ldr	r3, [pc, #596]	@ (8114200 <tcp_split_unsent_seg+0x274>)
 8113fac:	f240 324b 	movw	r2, #843	@ 0x34b
 8113fb0:	4994      	ldr	r1, [pc, #592]	@ (8114204 <tcp_split_unsent_seg+0x278>)
 8113fb2:	4895      	ldr	r0, [pc, #596]	@ (8114208 <tcp_split_unsent_seg+0x27c>)
 8113fb4:	f002 fc98 	bl	81168e8 <iprintf>

  useg = pcb->unsent;
 8113fb8:	687b      	ldr	r3, [r7, #4]
 8113fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113fbc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8113fbe:	697b      	ldr	r3, [r7, #20]
 8113fc0:	2b00      	cmp	r3, #0
 8113fc2:	d102      	bne.n	8113fca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8113fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8113fc8:	e116      	b.n	81141f8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8113fca:	887b      	ldrh	r3, [r7, #2]
 8113fcc:	2b00      	cmp	r3, #0
 8113fce:	d109      	bne.n	8113fe4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8113fd0:	4b8b      	ldr	r3, [pc, #556]	@ (8114200 <tcp_split_unsent_seg+0x274>)
 8113fd2:	f240 3253 	movw	r2, #851	@ 0x353
 8113fd6:	498d      	ldr	r1, [pc, #564]	@ (811420c <tcp_split_unsent_seg+0x280>)
 8113fd8:	488b      	ldr	r0, [pc, #556]	@ (8114208 <tcp_split_unsent_seg+0x27c>)
 8113fda:	f002 fc85 	bl	81168e8 <iprintf>
    return ERR_VAL;
 8113fde:	f06f 0305 	mvn.w	r3, #5
 8113fe2:	e109      	b.n	81141f8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8113fe4:	697b      	ldr	r3, [r7, #20]
 8113fe6:	891b      	ldrh	r3, [r3, #8]
 8113fe8:	887a      	ldrh	r2, [r7, #2]
 8113fea:	429a      	cmp	r2, r3
 8113fec:	d301      	bcc.n	8113ff2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8113fee:	2300      	movs	r3, #0
 8113ff0:	e102      	b.n	81141f8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8113ff2:	687b      	ldr	r3, [r7, #4]
 8113ff4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8113ff6:	887a      	ldrh	r2, [r7, #2]
 8113ff8:	429a      	cmp	r2, r3
 8113ffa:	d906      	bls.n	811400a <tcp_split_unsent_seg+0x7e>
 8113ffc:	4b80      	ldr	r3, [pc, #512]	@ (8114200 <tcp_split_unsent_seg+0x274>)
 8113ffe:	f240 325b 	movw	r2, #859	@ 0x35b
 8114002:	4983      	ldr	r1, [pc, #524]	@ (8114210 <tcp_split_unsent_seg+0x284>)
 8114004:	4880      	ldr	r0, [pc, #512]	@ (8114208 <tcp_split_unsent_seg+0x27c>)
 8114006:	f002 fc6f 	bl	81168e8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 811400a:	697b      	ldr	r3, [r7, #20]
 811400c:	891b      	ldrh	r3, [r3, #8]
 811400e:	2b00      	cmp	r3, #0
 8114010:	d106      	bne.n	8114020 <tcp_split_unsent_seg+0x94>
 8114012:	4b7b      	ldr	r3, [pc, #492]	@ (8114200 <tcp_split_unsent_seg+0x274>)
 8114014:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8114018:	497e      	ldr	r1, [pc, #504]	@ (8114214 <tcp_split_unsent_seg+0x288>)
 811401a:	487b      	ldr	r0, [pc, #492]	@ (8114208 <tcp_split_unsent_seg+0x27c>)
 811401c:	f002 fc64 	bl	81168e8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8114020:	697b      	ldr	r3, [r7, #20]
 8114022:	7a9b      	ldrb	r3, [r3, #10]
 8114024:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8114026:	7bfb      	ldrb	r3, [r7, #15]
 8114028:	009b      	lsls	r3, r3, #2
 811402a:	b2db      	uxtb	r3, r3
 811402c:	f003 0304 	and.w	r3, r3, #4
 8114030:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8114032:	697b      	ldr	r3, [r7, #20]
 8114034:	891a      	ldrh	r2, [r3, #8]
 8114036:	887b      	ldrh	r3, [r7, #2]
 8114038:	1ad3      	subs	r3, r2, r3
 811403a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 811403c:	7bbb      	ldrb	r3, [r7, #14]
 811403e:	b29a      	uxth	r2, r3
 8114040:	89bb      	ldrh	r3, [r7, #12]
 8114042:	4413      	add	r3, r2
 8114044:	b29b      	uxth	r3, r3
 8114046:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811404a:	4619      	mov	r1, r3
 811404c:	2036      	movs	r0, #54	@ 0x36
 811404e:	f7fb f9b7 	bl	810f3c0 <pbuf_alloc>
 8114052:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8114054:	693b      	ldr	r3, [r7, #16]
 8114056:	2b00      	cmp	r3, #0
 8114058:	f000 80b7 	beq.w	81141ca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 811405c:	697b      	ldr	r3, [r7, #20]
 811405e:	685b      	ldr	r3, [r3, #4]
 8114060:	891a      	ldrh	r2, [r3, #8]
 8114062:	697b      	ldr	r3, [r7, #20]
 8114064:	891b      	ldrh	r3, [r3, #8]
 8114066:	1ad3      	subs	r3, r2, r3
 8114068:	b29a      	uxth	r2, r3
 811406a:	887b      	ldrh	r3, [r7, #2]
 811406c:	4413      	add	r3, r2
 811406e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8114070:	697b      	ldr	r3, [r7, #20]
 8114072:	6858      	ldr	r0, [r3, #4]
 8114074:	693b      	ldr	r3, [r7, #16]
 8114076:	685a      	ldr	r2, [r3, #4]
 8114078:	7bbb      	ldrb	r3, [r7, #14]
 811407a:	18d1      	adds	r1, r2, r3
 811407c:	897b      	ldrh	r3, [r7, #10]
 811407e:	89ba      	ldrh	r2, [r7, #12]
 8114080:	f7fb fe8c 	bl	810fd9c <pbuf_copy_partial>
 8114084:	4603      	mov	r3, r0
 8114086:	461a      	mov	r2, r3
 8114088:	89bb      	ldrh	r3, [r7, #12]
 811408a:	4293      	cmp	r3, r2
 811408c:	f040 809f 	bne.w	81141ce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8114090:	697b      	ldr	r3, [r7, #20]
 8114092:	68db      	ldr	r3, [r3, #12]
 8114094:	899b      	ldrh	r3, [r3, #12]
 8114096:	b29b      	uxth	r3, r3
 8114098:	4618      	mov	r0, r3
 811409a:	f7f7 fccf 	bl	810ba3c <lwip_htons>
 811409e:	4603      	mov	r3, r0
 81140a0:	b2db      	uxtb	r3, r3
 81140a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81140a6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 81140a8:	2300      	movs	r3, #0
 81140aa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 81140ac:	7efb      	ldrb	r3, [r7, #27]
 81140ae:	f003 0308 	and.w	r3, r3, #8
 81140b2:	2b00      	cmp	r3, #0
 81140b4:	d007      	beq.n	81140c6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 81140b6:	7efb      	ldrb	r3, [r7, #27]
 81140b8:	f023 0308 	bic.w	r3, r3, #8
 81140bc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 81140be:	7ebb      	ldrb	r3, [r7, #26]
 81140c0:	f043 0308 	orr.w	r3, r3, #8
 81140c4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 81140c6:	7efb      	ldrb	r3, [r7, #27]
 81140c8:	f003 0301 	and.w	r3, r3, #1
 81140cc:	2b00      	cmp	r3, #0
 81140ce:	d007      	beq.n	81140e0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 81140d0:	7efb      	ldrb	r3, [r7, #27]
 81140d2:	f023 0301 	bic.w	r3, r3, #1
 81140d6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 81140d8:	7ebb      	ldrb	r3, [r7, #26]
 81140da:	f043 0301 	orr.w	r3, r3, #1
 81140de:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 81140e0:	697b      	ldr	r3, [r7, #20]
 81140e2:	68db      	ldr	r3, [r3, #12]
 81140e4:	685b      	ldr	r3, [r3, #4]
 81140e6:	4618      	mov	r0, r3
 81140e8:	f7f7 fcbd 	bl	810ba66 <lwip_htonl>
 81140ec:	4602      	mov	r2, r0
 81140ee:	887b      	ldrh	r3, [r7, #2]
 81140f0:	18d1      	adds	r1, r2, r3
 81140f2:	7eba      	ldrb	r2, [r7, #26]
 81140f4:	7bfb      	ldrb	r3, [r7, #15]
 81140f6:	9300      	str	r3, [sp, #0]
 81140f8:	460b      	mov	r3, r1
 81140fa:	6939      	ldr	r1, [r7, #16]
 81140fc:	6878      	ldr	r0, [r7, #4]
 81140fe:	f7ff fea9 	bl	8113e54 <tcp_create_segment>
 8114102:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8114104:	69fb      	ldr	r3, [r7, #28]
 8114106:	2b00      	cmp	r3, #0
 8114108:	d063      	beq.n	81141d2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 811410a:	697b      	ldr	r3, [r7, #20]
 811410c:	685b      	ldr	r3, [r3, #4]
 811410e:	4618      	mov	r0, r3
 8114110:	f7fb fccc 	bl	810faac <pbuf_clen>
 8114114:	4603      	mov	r3, r0
 8114116:	461a      	mov	r2, r3
 8114118:	687b      	ldr	r3, [r7, #4]
 811411a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811411e:	1a9b      	subs	r3, r3, r2
 8114120:	b29a      	uxth	r2, r3
 8114122:	687b      	ldr	r3, [r7, #4]
 8114124:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8114128:	697b      	ldr	r3, [r7, #20]
 811412a:	6858      	ldr	r0, [r3, #4]
 811412c:	697b      	ldr	r3, [r7, #20]
 811412e:	685b      	ldr	r3, [r3, #4]
 8114130:	891a      	ldrh	r2, [r3, #8]
 8114132:	89bb      	ldrh	r3, [r7, #12]
 8114134:	1ad3      	subs	r3, r2, r3
 8114136:	b29b      	uxth	r3, r3
 8114138:	4619      	mov	r1, r3
 811413a:	f7fb faa3 	bl	810f684 <pbuf_realloc>
  useg->len -= remainder;
 811413e:	697b      	ldr	r3, [r7, #20]
 8114140:	891a      	ldrh	r2, [r3, #8]
 8114142:	89bb      	ldrh	r3, [r7, #12]
 8114144:	1ad3      	subs	r3, r2, r3
 8114146:	b29a      	uxth	r2, r3
 8114148:	697b      	ldr	r3, [r7, #20]
 811414a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 811414c:	697b      	ldr	r3, [r7, #20]
 811414e:	68db      	ldr	r3, [r3, #12]
 8114150:	899b      	ldrh	r3, [r3, #12]
 8114152:	b29c      	uxth	r4, r3
 8114154:	7efb      	ldrb	r3, [r7, #27]
 8114156:	b29b      	uxth	r3, r3
 8114158:	4618      	mov	r0, r3
 811415a:	f7f7 fc6f 	bl	810ba3c <lwip_htons>
 811415e:	4603      	mov	r3, r0
 8114160:	461a      	mov	r2, r3
 8114162:	697b      	ldr	r3, [r7, #20]
 8114164:	68db      	ldr	r3, [r3, #12]
 8114166:	4322      	orrs	r2, r4
 8114168:	b292      	uxth	r2, r2
 811416a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 811416c:	697b      	ldr	r3, [r7, #20]
 811416e:	685b      	ldr	r3, [r3, #4]
 8114170:	4618      	mov	r0, r3
 8114172:	f7fb fc9b 	bl	810faac <pbuf_clen>
 8114176:	4603      	mov	r3, r0
 8114178:	461a      	mov	r2, r3
 811417a:	687b      	ldr	r3, [r7, #4]
 811417c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8114180:	4413      	add	r3, r2
 8114182:	b29a      	uxth	r2, r3
 8114184:	687b      	ldr	r3, [r7, #4]
 8114186:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 811418a:	69fb      	ldr	r3, [r7, #28]
 811418c:	685b      	ldr	r3, [r3, #4]
 811418e:	4618      	mov	r0, r3
 8114190:	f7fb fc8c 	bl	810faac <pbuf_clen>
 8114194:	4603      	mov	r3, r0
 8114196:	461a      	mov	r2, r3
 8114198:	687b      	ldr	r3, [r7, #4]
 811419a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811419e:	4413      	add	r3, r2
 81141a0:	b29a      	uxth	r2, r3
 81141a2:	687b      	ldr	r3, [r7, #4]
 81141a4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 81141a8:	697b      	ldr	r3, [r7, #20]
 81141aa:	681a      	ldr	r2, [r3, #0]
 81141ac:	69fb      	ldr	r3, [r7, #28]
 81141ae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 81141b0:	697b      	ldr	r3, [r7, #20]
 81141b2:	69fa      	ldr	r2, [r7, #28]
 81141b4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 81141b6:	69fb      	ldr	r3, [r7, #28]
 81141b8:	681b      	ldr	r3, [r3, #0]
 81141ba:	2b00      	cmp	r3, #0
 81141bc:	d103      	bne.n	81141c6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 81141be:	687b      	ldr	r3, [r7, #4]
 81141c0:	2200      	movs	r2, #0
 81141c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 81141c6:	2300      	movs	r3, #0
 81141c8:	e016      	b.n	81141f8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 81141ca:	bf00      	nop
 81141cc:	e002      	b.n	81141d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 81141ce:	bf00      	nop
 81141d0:	e000      	b.n	81141d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 81141d2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 81141d4:	69fb      	ldr	r3, [r7, #28]
 81141d6:	2b00      	cmp	r3, #0
 81141d8:	d006      	beq.n	81141e8 <tcp_split_unsent_seg+0x25c>
 81141da:	4b09      	ldr	r3, [pc, #36]	@ (8114200 <tcp_split_unsent_seg+0x274>)
 81141dc:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 81141e0:	490d      	ldr	r1, [pc, #52]	@ (8114218 <tcp_split_unsent_seg+0x28c>)
 81141e2:	4809      	ldr	r0, [pc, #36]	@ (8114208 <tcp_split_unsent_seg+0x27c>)
 81141e4:	f002 fb80 	bl	81168e8 <iprintf>
  if (p != NULL) {
 81141e8:	693b      	ldr	r3, [r7, #16]
 81141ea:	2b00      	cmp	r3, #0
 81141ec:	d002      	beq.n	81141f4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 81141ee:	6938      	ldr	r0, [r7, #16]
 81141f0:	f7fb fbce 	bl	810f990 <pbuf_free>
  }

  return ERR_MEM;
 81141f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81141f8:	4618      	mov	r0, r3
 81141fa:	3724      	adds	r7, #36	@ 0x24
 81141fc:	46bd      	mov	sp, r7
 81141fe:	bd90      	pop	{r4, r7, pc}
 8114200:	0811978c 	.word	0x0811978c
 8114204:	08119b60 	.word	0x08119b60
 8114208:	08119820 	.word	0x08119820
 811420c:	08119b84 	.word	0x08119b84
 8114210:	08119ba8 	.word	0x08119ba8
 8114214:	08119bb8 	.word	0x08119bb8
 8114218:	08119bc8 	.word	0x08119bc8

0811421c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 811421c:	b590      	push	{r4, r7, lr}
 811421e:	b085      	sub	sp, #20
 8114220:	af00      	add	r7, sp, #0
 8114222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8114224:	687b      	ldr	r3, [r7, #4]
 8114226:	2b00      	cmp	r3, #0
 8114228:	d106      	bne.n	8114238 <tcp_send_fin+0x1c>
 811422a:	4b21      	ldr	r3, [pc, #132]	@ (81142b0 <tcp_send_fin+0x94>)
 811422c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8114230:	4920      	ldr	r1, [pc, #128]	@ (81142b4 <tcp_send_fin+0x98>)
 8114232:	4821      	ldr	r0, [pc, #132]	@ (81142b8 <tcp_send_fin+0x9c>)
 8114234:	f002 fb58 	bl	81168e8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8114238:	687b      	ldr	r3, [r7, #4]
 811423a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811423c:	2b00      	cmp	r3, #0
 811423e:	d02e      	beq.n	811429e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8114240:	687b      	ldr	r3, [r7, #4]
 8114242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8114244:	60fb      	str	r3, [r7, #12]
 8114246:	e002      	b.n	811424e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8114248:	68fb      	ldr	r3, [r7, #12]
 811424a:	681b      	ldr	r3, [r3, #0]
 811424c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 811424e:	68fb      	ldr	r3, [r7, #12]
 8114250:	681b      	ldr	r3, [r3, #0]
 8114252:	2b00      	cmp	r3, #0
 8114254:	d1f8      	bne.n	8114248 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8114256:	68fb      	ldr	r3, [r7, #12]
 8114258:	68db      	ldr	r3, [r3, #12]
 811425a:	899b      	ldrh	r3, [r3, #12]
 811425c:	b29b      	uxth	r3, r3
 811425e:	4618      	mov	r0, r3
 8114260:	f7f7 fbec 	bl	810ba3c <lwip_htons>
 8114264:	4603      	mov	r3, r0
 8114266:	b2db      	uxtb	r3, r3
 8114268:	f003 0307 	and.w	r3, r3, #7
 811426c:	2b00      	cmp	r3, #0
 811426e:	d116      	bne.n	811429e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8114270:	68fb      	ldr	r3, [r7, #12]
 8114272:	68db      	ldr	r3, [r3, #12]
 8114274:	899b      	ldrh	r3, [r3, #12]
 8114276:	b29c      	uxth	r4, r3
 8114278:	2001      	movs	r0, #1
 811427a:	f7f7 fbdf 	bl	810ba3c <lwip_htons>
 811427e:	4603      	mov	r3, r0
 8114280:	461a      	mov	r2, r3
 8114282:	68fb      	ldr	r3, [r7, #12]
 8114284:	68db      	ldr	r3, [r3, #12]
 8114286:	4322      	orrs	r2, r4
 8114288:	b292      	uxth	r2, r2
 811428a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 811428c:	687b      	ldr	r3, [r7, #4]
 811428e:	8b5b      	ldrh	r3, [r3, #26]
 8114290:	f043 0320 	orr.w	r3, r3, #32
 8114294:	b29a      	uxth	r2, r3
 8114296:	687b      	ldr	r3, [r7, #4]
 8114298:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 811429a:	2300      	movs	r3, #0
 811429c:	e004      	b.n	81142a8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 811429e:	2101      	movs	r1, #1
 81142a0:	6878      	ldr	r0, [r7, #4]
 81142a2:	f000 f80b 	bl	81142bc <tcp_enqueue_flags>
 81142a6:	4603      	mov	r3, r0
}
 81142a8:	4618      	mov	r0, r3
 81142aa:	3714      	adds	r7, #20
 81142ac:	46bd      	mov	sp, r7
 81142ae:	bd90      	pop	{r4, r7, pc}
 81142b0:	0811978c 	.word	0x0811978c
 81142b4:	08119bd4 	.word	0x08119bd4
 81142b8:	08119820 	.word	0x08119820

081142bc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 81142bc:	b580      	push	{r7, lr}
 81142be:	b08a      	sub	sp, #40	@ 0x28
 81142c0:	af02      	add	r7, sp, #8
 81142c2:	6078      	str	r0, [r7, #4]
 81142c4:	460b      	mov	r3, r1
 81142c6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 81142c8:	2300      	movs	r3, #0
 81142ca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 81142cc:	2300      	movs	r3, #0
 81142ce:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 81142d0:	78fb      	ldrb	r3, [r7, #3]
 81142d2:	f003 0303 	and.w	r3, r3, #3
 81142d6:	2b00      	cmp	r3, #0
 81142d8:	d106      	bne.n	81142e8 <tcp_enqueue_flags+0x2c>
 81142da:	4b67      	ldr	r3, [pc, #412]	@ (8114478 <tcp_enqueue_flags+0x1bc>)
 81142dc:	f240 4211 	movw	r2, #1041	@ 0x411
 81142e0:	4966      	ldr	r1, [pc, #408]	@ (811447c <tcp_enqueue_flags+0x1c0>)
 81142e2:	4867      	ldr	r0, [pc, #412]	@ (8114480 <tcp_enqueue_flags+0x1c4>)
 81142e4:	f002 fb00 	bl	81168e8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 81142e8:	687b      	ldr	r3, [r7, #4]
 81142ea:	2b00      	cmp	r3, #0
 81142ec:	d106      	bne.n	81142fc <tcp_enqueue_flags+0x40>
 81142ee:	4b62      	ldr	r3, [pc, #392]	@ (8114478 <tcp_enqueue_flags+0x1bc>)
 81142f0:	f240 4213 	movw	r2, #1043	@ 0x413
 81142f4:	4963      	ldr	r1, [pc, #396]	@ (8114484 <tcp_enqueue_flags+0x1c8>)
 81142f6:	4862      	ldr	r0, [pc, #392]	@ (8114480 <tcp_enqueue_flags+0x1c4>)
 81142f8:	f002 faf6 	bl	81168e8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 81142fc:	78fb      	ldrb	r3, [r7, #3]
 81142fe:	f003 0302 	and.w	r3, r3, #2
 8114302:	2b00      	cmp	r3, #0
 8114304:	d001      	beq.n	811430a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8114306:	2301      	movs	r3, #1
 8114308:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 811430a:	7ffb      	ldrb	r3, [r7, #31]
 811430c:	009b      	lsls	r3, r3, #2
 811430e:	b2db      	uxtb	r3, r3
 8114310:	f003 0304 	and.w	r3, r3, #4
 8114314:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8114316:	7dfb      	ldrb	r3, [r7, #23]
 8114318:	b29b      	uxth	r3, r3
 811431a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811431e:	4619      	mov	r1, r3
 8114320:	2036      	movs	r0, #54	@ 0x36
 8114322:	f7fb f84d 	bl	810f3c0 <pbuf_alloc>
 8114326:	6138      	str	r0, [r7, #16]
 8114328:	693b      	ldr	r3, [r7, #16]
 811432a:	2b00      	cmp	r3, #0
 811432c:	d109      	bne.n	8114342 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811432e:	687b      	ldr	r3, [r7, #4]
 8114330:	8b5b      	ldrh	r3, [r3, #26]
 8114332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8114336:	b29a      	uxth	r2, r3
 8114338:	687b      	ldr	r3, [r7, #4]
 811433a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 811433c:	f04f 33ff 	mov.w	r3, #4294967295
 8114340:	e095      	b.n	811446e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8114342:	693b      	ldr	r3, [r7, #16]
 8114344:	895a      	ldrh	r2, [r3, #10]
 8114346:	7dfb      	ldrb	r3, [r7, #23]
 8114348:	b29b      	uxth	r3, r3
 811434a:	429a      	cmp	r2, r3
 811434c:	d206      	bcs.n	811435c <tcp_enqueue_flags+0xa0>
 811434e:	4b4a      	ldr	r3, [pc, #296]	@ (8114478 <tcp_enqueue_flags+0x1bc>)
 8114350:	f240 4239 	movw	r2, #1081	@ 0x439
 8114354:	494c      	ldr	r1, [pc, #304]	@ (8114488 <tcp_enqueue_flags+0x1cc>)
 8114356:	484a      	ldr	r0, [pc, #296]	@ (8114480 <tcp_enqueue_flags+0x1c4>)
 8114358:	f002 fac6 	bl	81168e8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 811435c:	687b      	ldr	r3, [r7, #4]
 811435e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8114360:	78fa      	ldrb	r2, [r7, #3]
 8114362:	7ffb      	ldrb	r3, [r7, #31]
 8114364:	9300      	str	r3, [sp, #0]
 8114366:	460b      	mov	r3, r1
 8114368:	6939      	ldr	r1, [r7, #16]
 811436a:	6878      	ldr	r0, [r7, #4]
 811436c:	f7ff fd72 	bl	8113e54 <tcp_create_segment>
 8114370:	60f8      	str	r0, [r7, #12]
 8114372:	68fb      	ldr	r3, [r7, #12]
 8114374:	2b00      	cmp	r3, #0
 8114376:	d109      	bne.n	811438c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8114378:	687b      	ldr	r3, [r7, #4]
 811437a:	8b5b      	ldrh	r3, [r3, #26]
 811437c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8114380:	b29a      	uxth	r2, r3
 8114382:	687b      	ldr	r3, [r7, #4]
 8114384:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8114386:	f04f 33ff 	mov.w	r3, #4294967295
 811438a:	e070      	b.n	811446e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 811438c:	68fb      	ldr	r3, [r7, #12]
 811438e:	68db      	ldr	r3, [r3, #12]
 8114390:	f003 0303 	and.w	r3, r3, #3
 8114394:	2b00      	cmp	r3, #0
 8114396:	d006      	beq.n	81143a6 <tcp_enqueue_flags+0xea>
 8114398:	4b37      	ldr	r3, [pc, #220]	@ (8114478 <tcp_enqueue_flags+0x1bc>)
 811439a:	f240 4242 	movw	r2, #1090	@ 0x442
 811439e:	493b      	ldr	r1, [pc, #236]	@ (811448c <tcp_enqueue_flags+0x1d0>)
 81143a0:	4837      	ldr	r0, [pc, #220]	@ (8114480 <tcp_enqueue_flags+0x1c4>)
 81143a2:	f002 faa1 	bl	81168e8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 81143a6:	68fb      	ldr	r3, [r7, #12]
 81143a8:	891b      	ldrh	r3, [r3, #8]
 81143aa:	2b00      	cmp	r3, #0
 81143ac:	d006      	beq.n	81143bc <tcp_enqueue_flags+0x100>
 81143ae:	4b32      	ldr	r3, [pc, #200]	@ (8114478 <tcp_enqueue_flags+0x1bc>)
 81143b0:	f240 4243 	movw	r2, #1091	@ 0x443
 81143b4:	4936      	ldr	r1, [pc, #216]	@ (8114490 <tcp_enqueue_flags+0x1d4>)
 81143b6:	4832      	ldr	r0, [pc, #200]	@ (8114480 <tcp_enqueue_flags+0x1c4>)
 81143b8:	f002 fa96 	bl	81168e8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 81143bc:	687b      	ldr	r3, [r7, #4]
 81143be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81143c0:	2b00      	cmp	r3, #0
 81143c2:	d103      	bne.n	81143cc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 81143c4:	687b      	ldr	r3, [r7, #4]
 81143c6:	68fa      	ldr	r2, [r7, #12]
 81143c8:	66da      	str	r2, [r3, #108]	@ 0x6c
 81143ca:	e00d      	b.n	81143e8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 81143cc:	687b      	ldr	r3, [r7, #4]
 81143ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81143d0:	61bb      	str	r3, [r7, #24]
 81143d2:	e002      	b.n	81143da <tcp_enqueue_flags+0x11e>
 81143d4:	69bb      	ldr	r3, [r7, #24]
 81143d6:	681b      	ldr	r3, [r3, #0]
 81143d8:	61bb      	str	r3, [r7, #24]
 81143da:	69bb      	ldr	r3, [r7, #24]
 81143dc:	681b      	ldr	r3, [r3, #0]
 81143de:	2b00      	cmp	r3, #0
 81143e0:	d1f8      	bne.n	81143d4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 81143e2:	69bb      	ldr	r3, [r7, #24]
 81143e4:	68fa      	ldr	r2, [r7, #12]
 81143e6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 81143e8:	687b      	ldr	r3, [r7, #4]
 81143ea:	2200      	movs	r2, #0
 81143ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 81143f0:	78fb      	ldrb	r3, [r7, #3]
 81143f2:	f003 0302 	and.w	r3, r3, #2
 81143f6:	2b00      	cmp	r3, #0
 81143f8:	d104      	bne.n	8114404 <tcp_enqueue_flags+0x148>
 81143fa:	78fb      	ldrb	r3, [r7, #3]
 81143fc:	f003 0301 	and.w	r3, r3, #1
 8114400:	2b00      	cmp	r3, #0
 8114402:	d004      	beq.n	811440e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8114404:	687b      	ldr	r3, [r7, #4]
 8114406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8114408:	1c5a      	adds	r2, r3, #1
 811440a:	687b      	ldr	r3, [r7, #4]
 811440c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 811440e:	78fb      	ldrb	r3, [r7, #3]
 8114410:	f003 0301 	and.w	r3, r3, #1
 8114414:	2b00      	cmp	r3, #0
 8114416:	d006      	beq.n	8114426 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8114418:	687b      	ldr	r3, [r7, #4]
 811441a:	8b5b      	ldrh	r3, [r3, #26]
 811441c:	f043 0320 	orr.w	r3, r3, #32
 8114420:	b29a      	uxth	r2, r3
 8114422:	687b      	ldr	r3, [r7, #4]
 8114424:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8114426:	68fb      	ldr	r3, [r7, #12]
 8114428:	685b      	ldr	r3, [r3, #4]
 811442a:	4618      	mov	r0, r3
 811442c:	f7fb fb3e 	bl	810faac <pbuf_clen>
 8114430:	4603      	mov	r3, r0
 8114432:	461a      	mov	r2, r3
 8114434:	687b      	ldr	r3, [r7, #4]
 8114436:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811443a:	4413      	add	r3, r2
 811443c:	b29a      	uxth	r2, r3
 811443e:	687b      	ldr	r3, [r7, #4]
 8114440:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8114444:	687b      	ldr	r3, [r7, #4]
 8114446:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811444a:	2b00      	cmp	r3, #0
 811444c:	d00e      	beq.n	811446c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 811444e:	687b      	ldr	r3, [r7, #4]
 8114450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114452:	2b00      	cmp	r3, #0
 8114454:	d10a      	bne.n	811446c <tcp_enqueue_flags+0x1b0>
 8114456:	687b      	ldr	r3, [r7, #4]
 8114458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811445a:	2b00      	cmp	r3, #0
 811445c:	d106      	bne.n	811446c <tcp_enqueue_flags+0x1b0>
 811445e:	4b06      	ldr	r3, [pc, #24]	@ (8114478 <tcp_enqueue_flags+0x1bc>)
 8114460:	f240 4265 	movw	r2, #1125	@ 0x465
 8114464:	490b      	ldr	r1, [pc, #44]	@ (8114494 <tcp_enqueue_flags+0x1d8>)
 8114466:	4806      	ldr	r0, [pc, #24]	@ (8114480 <tcp_enqueue_flags+0x1c4>)
 8114468:	f002 fa3e 	bl	81168e8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 811446c:	2300      	movs	r3, #0
}
 811446e:	4618      	mov	r0, r3
 8114470:	3720      	adds	r7, #32
 8114472:	46bd      	mov	sp, r7
 8114474:	bd80      	pop	{r7, pc}
 8114476:	bf00      	nop
 8114478:	0811978c 	.word	0x0811978c
 811447c:	08119bf0 	.word	0x08119bf0
 8114480:	08119820 	.word	0x08119820
 8114484:	08119c48 	.word	0x08119c48
 8114488:	08119c68 	.word	0x08119c68
 811448c:	08119ca4 	.word	0x08119ca4
 8114490:	08119cbc 	.word	0x08119cbc
 8114494:	08119ce8 	.word	0x08119ce8

08114498 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8114498:	b5b0      	push	{r4, r5, r7, lr}
 811449a:	b08a      	sub	sp, #40	@ 0x28
 811449c:	af00      	add	r7, sp, #0
 811449e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 81144a0:	687b      	ldr	r3, [r7, #4]
 81144a2:	2b00      	cmp	r3, #0
 81144a4:	d106      	bne.n	81144b4 <tcp_output+0x1c>
 81144a6:	4b8a      	ldr	r3, [pc, #552]	@ (81146d0 <tcp_output+0x238>)
 81144a8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 81144ac:	4989      	ldr	r1, [pc, #548]	@ (81146d4 <tcp_output+0x23c>)
 81144ae:	488a      	ldr	r0, [pc, #552]	@ (81146d8 <tcp_output+0x240>)
 81144b0:	f002 fa1a 	bl	81168e8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 81144b4:	687b      	ldr	r3, [r7, #4]
 81144b6:	7d1b      	ldrb	r3, [r3, #20]
 81144b8:	2b01      	cmp	r3, #1
 81144ba:	d106      	bne.n	81144ca <tcp_output+0x32>
 81144bc:	4b84      	ldr	r3, [pc, #528]	@ (81146d0 <tcp_output+0x238>)
 81144be:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 81144c2:	4986      	ldr	r1, [pc, #536]	@ (81146dc <tcp_output+0x244>)
 81144c4:	4884      	ldr	r0, [pc, #528]	@ (81146d8 <tcp_output+0x240>)
 81144c6:	f002 fa0f 	bl	81168e8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 81144ca:	4b85      	ldr	r3, [pc, #532]	@ (81146e0 <tcp_output+0x248>)
 81144cc:	681b      	ldr	r3, [r3, #0]
 81144ce:	687a      	ldr	r2, [r7, #4]
 81144d0:	429a      	cmp	r2, r3
 81144d2:	d101      	bne.n	81144d8 <tcp_output+0x40>
    return ERR_OK;
 81144d4:	2300      	movs	r3, #0
 81144d6:	e1ce      	b.n	8114876 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 81144d8:	687b      	ldr	r3, [r7, #4]
 81144da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 81144de:	687b      	ldr	r3, [r7, #4]
 81144e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81144e4:	4293      	cmp	r3, r2
 81144e6:	bf28      	it	cs
 81144e8:	4613      	movcs	r3, r2
 81144ea:	b29b      	uxth	r3, r3
 81144ec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 81144ee:	687b      	ldr	r3, [r7, #4]
 81144f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81144f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 81144f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81144f6:	2b00      	cmp	r3, #0
 81144f8:	d10b      	bne.n	8114512 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 81144fa:	687b      	ldr	r3, [r7, #4]
 81144fc:	8b5b      	ldrh	r3, [r3, #26]
 81144fe:	f003 0302 	and.w	r3, r3, #2
 8114502:	2b00      	cmp	r3, #0
 8114504:	f000 81aa 	beq.w	811485c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8114508:	6878      	ldr	r0, [r7, #4]
 811450a:	f000 fdcb 	bl	81150a4 <tcp_send_empty_ack>
 811450e:	4603      	mov	r3, r0
 8114510:	e1b1      	b.n	8114876 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8114512:	6879      	ldr	r1, [r7, #4]
 8114514:	687b      	ldr	r3, [r7, #4]
 8114516:	3304      	adds	r3, #4
 8114518:	461a      	mov	r2, r3
 811451a:	6878      	ldr	r0, [r7, #4]
 811451c:	f7ff fc7e 	bl	8113e1c <tcp_route>
 8114520:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8114522:	697b      	ldr	r3, [r7, #20]
 8114524:	2b00      	cmp	r3, #0
 8114526:	d102      	bne.n	811452e <tcp_output+0x96>
    return ERR_RTE;
 8114528:	f06f 0303 	mvn.w	r3, #3
 811452c:	e1a3      	b.n	8114876 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 811452e:	687b      	ldr	r3, [r7, #4]
 8114530:	2b00      	cmp	r3, #0
 8114532:	d003      	beq.n	811453c <tcp_output+0xa4>
 8114534:	687b      	ldr	r3, [r7, #4]
 8114536:	681b      	ldr	r3, [r3, #0]
 8114538:	2b00      	cmp	r3, #0
 811453a:	d111      	bne.n	8114560 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 811453c:	697b      	ldr	r3, [r7, #20]
 811453e:	2b00      	cmp	r3, #0
 8114540:	d002      	beq.n	8114548 <tcp_output+0xb0>
 8114542:	697b      	ldr	r3, [r7, #20]
 8114544:	3304      	adds	r3, #4
 8114546:	e000      	b.n	811454a <tcp_output+0xb2>
 8114548:	2300      	movs	r3, #0
 811454a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 811454c:	693b      	ldr	r3, [r7, #16]
 811454e:	2b00      	cmp	r3, #0
 8114550:	d102      	bne.n	8114558 <tcp_output+0xc0>
      return ERR_RTE;
 8114552:	f06f 0303 	mvn.w	r3, #3
 8114556:	e18e      	b.n	8114876 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8114558:	693b      	ldr	r3, [r7, #16]
 811455a:	681a      	ldr	r2, [r3, #0]
 811455c:	687b      	ldr	r3, [r7, #4]
 811455e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8114560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114562:	68db      	ldr	r3, [r3, #12]
 8114564:	685b      	ldr	r3, [r3, #4]
 8114566:	4618      	mov	r0, r3
 8114568:	f7f7 fa7d 	bl	810ba66 <lwip_htonl>
 811456c:	4602      	mov	r2, r0
 811456e:	687b      	ldr	r3, [r7, #4]
 8114570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8114572:	1ad3      	subs	r3, r2, r3
 8114574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8114576:	8912      	ldrh	r2, [r2, #8]
 8114578:	4413      	add	r3, r2
 811457a:	69ba      	ldr	r2, [r7, #24]
 811457c:	429a      	cmp	r2, r3
 811457e:	d227      	bcs.n	81145d0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8114580:	687b      	ldr	r3, [r7, #4]
 8114582:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8114586:	461a      	mov	r2, r3
 8114588:	69bb      	ldr	r3, [r7, #24]
 811458a:	4293      	cmp	r3, r2
 811458c:	d114      	bne.n	81145b8 <tcp_output+0x120>
 811458e:	687b      	ldr	r3, [r7, #4]
 8114590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114592:	2b00      	cmp	r3, #0
 8114594:	d110      	bne.n	81145b8 <tcp_output+0x120>
 8114596:	687b      	ldr	r3, [r7, #4]
 8114598:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 811459c:	2b00      	cmp	r3, #0
 811459e:	d10b      	bne.n	81145b8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 81145a0:	687b      	ldr	r3, [r7, #4]
 81145a2:	2200      	movs	r2, #0
 81145a4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 81145a8:	687b      	ldr	r3, [r7, #4]
 81145aa:	2201      	movs	r2, #1
 81145ac:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 81145b0:	687b      	ldr	r3, [r7, #4]
 81145b2:	2200      	movs	r2, #0
 81145b4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 81145b8:	687b      	ldr	r3, [r7, #4]
 81145ba:	8b5b      	ldrh	r3, [r3, #26]
 81145bc:	f003 0302 	and.w	r3, r3, #2
 81145c0:	2b00      	cmp	r3, #0
 81145c2:	f000 814d 	beq.w	8114860 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 81145c6:	6878      	ldr	r0, [r7, #4]
 81145c8:	f000 fd6c 	bl	81150a4 <tcp_send_empty_ack>
 81145cc:	4603      	mov	r3, r0
 81145ce:	e152      	b.n	8114876 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 81145d0:	687b      	ldr	r3, [r7, #4]
 81145d2:	2200      	movs	r2, #0
 81145d4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 81145d8:	687b      	ldr	r3, [r7, #4]
 81145da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81145dc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 81145de:	6a3b      	ldr	r3, [r7, #32]
 81145e0:	2b00      	cmp	r3, #0
 81145e2:	f000 811c 	beq.w	811481e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 81145e6:	e002      	b.n	81145ee <tcp_output+0x156>
 81145e8:	6a3b      	ldr	r3, [r7, #32]
 81145ea:	681b      	ldr	r3, [r3, #0]
 81145ec:	623b      	str	r3, [r7, #32]
 81145ee:	6a3b      	ldr	r3, [r7, #32]
 81145f0:	681b      	ldr	r3, [r3, #0]
 81145f2:	2b00      	cmp	r3, #0
 81145f4:	d1f8      	bne.n	81145e8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 81145f6:	e112      	b.n	811481e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 81145f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81145fa:	68db      	ldr	r3, [r3, #12]
 81145fc:	899b      	ldrh	r3, [r3, #12]
 81145fe:	b29b      	uxth	r3, r3
 8114600:	4618      	mov	r0, r3
 8114602:	f7f7 fa1b 	bl	810ba3c <lwip_htons>
 8114606:	4603      	mov	r3, r0
 8114608:	b2db      	uxtb	r3, r3
 811460a:	f003 0304 	and.w	r3, r3, #4
 811460e:	2b00      	cmp	r3, #0
 8114610:	d006      	beq.n	8114620 <tcp_output+0x188>
 8114612:	4b2f      	ldr	r3, [pc, #188]	@ (81146d0 <tcp_output+0x238>)
 8114614:	f240 5236 	movw	r2, #1334	@ 0x536
 8114618:	4932      	ldr	r1, [pc, #200]	@ (81146e4 <tcp_output+0x24c>)
 811461a:	482f      	ldr	r0, [pc, #188]	@ (81146d8 <tcp_output+0x240>)
 811461c:	f002 f964 	bl	81168e8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8114620:	687b      	ldr	r3, [r7, #4]
 8114622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114624:	2b00      	cmp	r3, #0
 8114626:	d01f      	beq.n	8114668 <tcp_output+0x1d0>
 8114628:	687b      	ldr	r3, [r7, #4]
 811462a:	8b5b      	ldrh	r3, [r3, #26]
 811462c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8114630:	2b00      	cmp	r3, #0
 8114632:	d119      	bne.n	8114668 <tcp_output+0x1d0>
 8114634:	687b      	ldr	r3, [r7, #4]
 8114636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8114638:	2b00      	cmp	r3, #0
 811463a:	d00b      	beq.n	8114654 <tcp_output+0x1bc>
 811463c:	687b      	ldr	r3, [r7, #4]
 811463e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8114640:	681b      	ldr	r3, [r3, #0]
 8114642:	2b00      	cmp	r3, #0
 8114644:	d110      	bne.n	8114668 <tcp_output+0x1d0>
 8114646:	687b      	ldr	r3, [r7, #4]
 8114648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811464a:	891a      	ldrh	r2, [r3, #8]
 811464c:	687b      	ldr	r3, [r7, #4]
 811464e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8114650:	429a      	cmp	r2, r3
 8114652:	d209      	bcs.n	8114668 <tcp_output+0x1d0>
 8114654:	687b      	ldr	r3, [r7, #4]
 8114656:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 811465a:	2b00      	cmp	r3, #0
 811465c:	d004      	beq.n	8114668 <tcp_output+0x1d0>
 811465e:	687b      	ldr	r3, [r7, #4]
 8114660:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8114664:	2b0f      	cmp	r3, #15
 8114666:	d901      	bls.n	811466c <tcp_output+0x1d4>
 8114668:	2301      	movs	r3, #1
 811466a:	e000      	b.n	811466e <tcp_output+0x1d6>
 811466c:	2300      	movs	r3, #0
 811466e:	2b00      	cmp	r3, #0
 8114670:	d106      	bne.n	8114680 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8114672:	687b      	ldr	r3, [r7, #4]
 8114674:	8b5b      	ldrh	r3, [r3, #26]
 8114676:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 811467a:	2b00      	cmp	r3, #0
 811467c:	f000 80e4 	beq.w	8114848 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8114680:	687b      	ldr	r3, [r7, #4]
 8114682:	7d1b      	ldrb	r3, [r3, #20]
 8114684:	2b02      	cmp	r3, #2
 8114686:	d00d      	beq.n	81146a4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8114688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811468a:	68db      	ldr	r3, [r3, #12]
 811468c:	899b      	ldrh	r3, [r3, #12]
 811468e:	b29c      	uxth	r4, r3
 8114690:	2010      	movs	r0, #16
 8114692:	f7f7 f9d3 	bl	810ba3c <lwip_htons>
 8114696:	4603      	mov	r3, r0
 8114698:	461a      	mov	r2, r3
 811469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811469c:	68db      	ldr	r3, [r3, #12]
 811469e:	4322      	orrs	r2, r4
 81146a0:	b292      	uxth	r2, r2
 81146a2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 81146a4:	697a      	ldr	r2, [r7, #20]
 81146a6:	6879      	ldr	r1, [r7, #4]
 81146a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81146aa:	f000 f909 	bl	81148c0 <tcp_output_segment>
 81146ae:	4603      	mov	r3, r0
 81146b0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 81146b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81146b6:	2b00      	cmp	r3, #0
 81146b8:	d016      	beq.n	81146e8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 81146ba:	687b      	ldr	r3, [r7, #4]
 81146bc:	8b5b      	ldrh	r3, [r3, #26]
 81146be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81146c2:	b29a      	uxth	r2, r3
 81146c4:	687b      	ldr	r3, [r7, #4]
 81146c6:	835a      	strh	r2, [r3, #26]
      return err;
 81146c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81146cc:	e0d3      	b.n	8114876 <tcp_output+0x3de>
 81146ce:	bf00      	nop
 81146d0:	0811978c 	.word	0x0811978c
 81146d4:	08119d10 	.word	0x08119d10
 81146d8:	08119820 	.word	0x08119820
 81146dc:	08119d28 	.word	0x08119d28
 81146e0:	1000b898 	.word	0x1000b898
 81146e4:	08119d50 	.word	0x08119d50
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 81146e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81146ea:	681a      	ldr	r2, [r3, #0]
 81146ec:	687b      	ldr	r3, [r7, #4]
 81146ee:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 81146f0:	687b      	ldr	r3, [r7, #4]
 81146f2:	7d1b      	ldrb	r3, [r3, #20]
 81146f4:	2b02      	cmp	r3, #2
 81146f6:	d006      	beq.n	8114706 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 81146f8:	687b      	ldr	r3, [r7, #4]
 81146fa:	8b5b      	ldrh	r3, [r3, #26]
 81146fc:	f023 0303 	bic.w	r3, r3, #3
 8114700:	b29a      	uxth	r2, r3
 8114702:	687b      	ldr	r3, [r7, #4]
 8114704:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8114706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114708:	68db      	ldr	r3, [r3, #12]
 811470a:	685b      	ldr	r3, [r3, #4]
 811470c:	4618      	mov	r0, r3
 811470e:	f7f7 f9aa 	bl	810ba66 <lwip_htonl>
 8114712:	4604      	mov	r4, r0
 8114714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114716:	891b      	ldrh	r3, [r3, #8]
 8114718:	461d      	mov	r5, r3
 811471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811471c:	68db      	ldr	r3, [r3, #12]
 811471e:	899b      	ldrh	r3, [r3, #12]
 8114720:	b29b      	uxth	r3, r3
 8114722:	4618      	mov	r0, r3
 8114724:	f7f7 f98a 	bl	810ba3c <lwip_htons>
 8114728:	4603      	mov	r3, r0
 811472a:	b2db      	uxtb	r3, r3
 811472c:	f003 0303 	and.w	r3, r3, #3
 8114730:	2b00      	cmp	r3, #0
 8114732:	d001      	beq.n	8114738 <tcp_output+0x2a0>
 8114734:	2301      	movs	r3, #1
 8114736:	e000      	b.n	811473a <tcp_output+0x2a2>
 8114738:	2300      	movs	r3, #0
 811473a:	442b      	add	r3, r5
 811473c:	4423      	add	r3, r4
 811473e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8114740:	687b      	ldr	r3, [r7, #4]
 8114742:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8114744:	68bb      	ldr	r3, [r7, #8]
 8114746:	1ad3      	subs	r3, r2, r3
 8114748:	2b00      	cmp	r3, #0
 811474a:	da02      	bge.n	8114752 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 811474c:	687b      	ldr	r3, [r7, #4]
 811474e:	68ba      	ldr	r2, [r7, #8]
 8114750:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8114752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114754:	891b      	ldrh	r3, [r3, #8]
 8114756:	461c      	mov	r4, r3
 8114758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811475a:	68db      	ldr	r3, [r3, #12]
 811475c:	899b      	ldrh	r3, [r3, #12]
 811475e:	b29b      	uxth	r3, r3
 8114760:	4618      	mov	r0, r3
 8114762:	f7f7 f96b 	bl	810ba3c <lwip_htons>
 8114766:	4603      	mov	r3, r0
 8114768:	b2db      	uxtb	r3, r3
 811476a:	f003 0303 	and.w	r3, r3, #3
 811476e:	2b00      	cmp	r3, #0
 8114770:	d001      	beq.n	8114776 <tcp_output+0x2de>
 8114772:	2301      	movs	r3, #1
 8114774:	e000      	b.n	8114778 <tcp_output+0x2e0>
 8114776:	2300      	movs	r3, #0
 8114778:	4423      	add	r3, r4
 811477a:	2b00      	cmp	r3, #0
 811477c:	d049      	beq.n	8114812 <tcp_output+0x37a>
      seg->next = NULL;
 811477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114780:	2200      	movs	r2, #0
 8114782:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8114784:	687b      	ldr	r3, [r7, #4]
 8114786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114788:	2b00      	cmp	r3, #0
 811478a:	d105      	bne.n	8114798 <tcp_output+0x300>
        pcb->unacked = seg;
 811478c:	687b      	ldr	r3, [r7, #4]
 811478e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8114790:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8114792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114794:	623b      	str	r3, [r7, #32]
 8114796:	e03f      	b.n	8114818 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8114798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811479a:	68db      	ldr	r3, [r3, #12]
 811479c:	685b      	ldr	r3, [r3, #4]
 811479e:	4618      	mov	r0, r3
 81147a0:	f7f7 f961 	bl	810ba66 <lwip_htonl>
 81147a4:	4604      	mov	r4, r0
 81147a6:	6a3b      	ldr	r3, [r7, #32]
 81147a8:	68db      	ldr	r3, [r3, #12]
 81147aa:	685b      	ldr	r3, [r3, #4]
 81147ac:	4618      	mov	r0, r3
 81147ae:	f7f7 f95a 	bl	810ba66 <lwip_htonl>
 81147b2:	4603      	mov	r3, r0
 81147b4:	1ae3      	subs	r3, r4, r3
 81147b6:	2b00      	cmp	r3, #0
 81147b8:	da24      	bge.n	8114804 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 81147ba:	687b      	ldr	r3, [r7, #4]
 81147bc:	3370      	adds	r3, #112	@ 0x70
 81147be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 81147c0:	e002      	b.n	81147c8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 81147c2:	69fb      	ldr	r3, [r7, #28]
 81147c4:	681b      	ldr	r3, [r3, #0]
 81147c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 81147c8:	69fb      	ldr	r3, [r7, #28]
 81147ca:	681b      	ldr	r3, [r3, #0]
 81147cc:	2b00      	cmp	r3, #0
 81147ce:	d011      	beq.n	81147f4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 81147d0:	69fb      	ldr	r3, [r7, #28]
 81147d2:	681b      	ldr	r3, [r3, #0]
 81147d4:	68db      	ldr	r3, [r3, #12]
 81147d6:	685b      	ldr	r3, [r3, #4]
 81147d8:	4618      	mov	r0, r3
 81147da:	f7f7 f944 	bl	810ba66 <lwip_htonl>
 81147de:	4604      	mov	r4, r0
 81147e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81147e2:	68db      	ldr	r3, [r3, #12]
 81147e4:	685b      	ldr	r3, [r3, #4]
 81147e6:	4618      	mov	r0, r3
 81147e8:	f7f7 f93d 	bl	810ba66 <lwip_htonl>
 81147ec:	4603      	mov	r3, r0
 81147ee:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 81147f0:	2b00      	cmp	r3, #0
 81147f2:	dbe6      	blt.n	81147c2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 81147f4:	69fb      	ldr	r3, [r7, #28]
 81147f6:	681a      	ldr	r2, [r3, #0]
 81147f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81147fa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 81147fc:	69fb      	ldr	r3, [r7, #28]
 81147fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8114800:	601a      	str	r2, [r3, #0]
 8114802:	e009      	b.n	8114818 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8114804:	6a3b      	ldr	r3, [r7, #32]
 8114806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8114808:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 811480a:	6a3b      	ldr	r3, [r7, #32]
 811480c:	681b      	ldr	r3, [r3, #0]
 811480e:	623b      	str	r3, [r7, #32]
 8114810:	e002      	b.n	8114818 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8114812:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8114814:	f7fc fc43 	bl	811109e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8114818:	687b      	ldr	r3, [r7, #4]
 811481a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811481c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 811481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114820:	2b00      	cmp	r3, #0
 8114822:	d012      	beq.n	811484a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8114824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114826:	68db      	ldr	r3, [r3, #12]
 8114828:	685b      	ldr	r3, [r3, #4]
 811482a:	4618      	mov	r0, r3
 811482c:	f7f7 f91b 	bl	810ba66 <lwip_htonl>
 8114830:	4602      	mov	r2, r0
 8114832:	687b      	ldr	r3, [r7, #4]
 8114834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8114836:	1ad3      	subs	r3, r2, r3
 8114838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811483a:	8912      	ldrh	r2, [r2, #8]
 811483c:	4413      	add	r3, r2
  while (seg != NULL &&
 811483e:	69ba      	ldr	r2, [r7, #24]
 8114840:	429a      	cmp	r2, r3
 8114842:	f4bf aed9 	bcs.w	81145f8 <tcp_output+0x160>
 8114846:	e000      	b.n	811484a <tcp_output+0x3b2>
      break;
 8114848:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 811484a:	687b      	ldr	r3, [r7, #4]
 811484c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811484e:	2b00      	cmp	r3, #0
 8114850:	d108      	bne.n	8114864 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8114852:	687b      	ldr	r3, [r7, #4]
 8114854:	2200      	movs	r2, #0
 8114856:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 811485a:	e004      	b.n	8114866 <tcp_output+0x3ce>
    goto output_done;
 811485c:	bf00      	nop
 811485e:	e002      	b.n	8114866 <tcp_output+0x3ce>
    goto output_done;
 8114860:	bf00      	nop
 8114862:	e000      	b.n	8114866 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8114864:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8114866:	687b      	ldr	r3, [r7, #4]
 8114868:	8b5b      	ldrh	r3, [r3, #26]
 811486a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 811486e:	b29a      	uxth	r2, r3
 8114870:	687b      	ldr	r3, [r7, #4]
 8114872:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8114874:	2300      	movs	r3, #0
}
 8114876:	4618      	mov	r0, r3
 8114878:	3728      	adds	r7, #40	@ 0x28
 811487a:	46bd      	mov	sp, r7
 811487c:	bdb0      	pop	{r4, r5, r7, pc}
 811487e:	bf00      	nop

08114880 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8114880:	b580      	push	{r7, lr}
 8114882:	b082      	sub	sp, #8
 8114884:	af00      	add	r7, sp, #0
 8114886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8114888:	687b      	ldr	r3, [r7, #4]
 811488a:	2b00      	cmp	r3, #0
 811488c:	d106      	bne.n	811489c <tcp_output_segment_busy+0x1c>
 811488e:	4b09      	ldr	r3, [pc, #36]	@ (81148b4 <tcp_output_segment_busy+0x34>)
 8114890:	f240 529a 	movw	r2, #1434	@ 0x59a
 8114894:	4908      	ldr	r1, [pc, #32]	@ (81148b8 <tcp_output_segment_busy+0x38>)
 8114896:	4809      	ldr	r0, [pc, #36]	@ (81148bc <tcp_output_segment_busy+0x3c>)
 8114898:	f002 f826 	bl	81168e8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 811489c:	687b      	ldr	r3, [r7, #4]
 811489e:	685b      	ldr	r3, [r3, #4]
 81148a0:	7b9b      	ldrb	r3, [r3, #14]
 81148a2:	2b01      	cmp	r3, #1
 81148a4:	d001      	beq.n	81148aa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 81148a6:	2301      	movs	r3, #1
 81148a8:	e000      	b.n	81148ac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 81148aa:	2300      	movs	r3, #0
}
 81148ac:	4618      	mov	r0, r3
 81148ae:	3708      	adds	r7, #8
 81148b0:	46bd      	mov	sp, r7
 81148b2:	bd80      	pop	{r7, pc}
 81148b4:	0811978c 	.word	0x0811978c
 81148b8:	08119d68 	.word	0x08119d68
 81148bc:	08119820 	.word	0x08119820

081148c0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 81148c0:	b5b0      	push	{r4, r5, r7, lr}
 81148c2:	b08c      	sub	sp, #48	@ 0x30
 81148c4:	af04      	add	r7, sp, #16
 81148c6:	60f8      	str	r0, [r7, #12]
 81148c8:	60b9      	str	r1, [r7, #8]
 81148ca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 81148cc:	68fb      	ldr	r3, [r7, #12]
 81148ce:	2b00      	cmp	r3, #0
 81148d0:	d106      	bne.n	81148e0 <tcp_output_segment+0x20>
 81148d2:	4b64      	ldr	r3, [pc, #400]	@ (8114a64 <tcp_output_segment+0x1a4>)
 81148d4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 81148d8:	4963      	ldr	r1, [pc, #396]	@ (8114a68 <tcp_output_segment+0x1a8>)
 81148da:	4864      	ldr	r0, [pc, #400]	@ (8114a6c <tcp_output_segment+0x1ac>)
 81148dc:	f002 f804 	bl	81168e8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 81148e0:	68bb      	ldr	r3, [r7, #8]
 81148e2:	2b00      	cmp	r3, #0
 81148e4:	d106      	bne.n	81148f4 <tcp_output_segment+0x34>
 81148e6:	4b5f      	ldr	r3, [pc, #380]	@ (8114a64 <tcp_output_segment+0x1a4>)
 81148e8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 81148ec:	4960      	ldr	r1, [pc, #384]	@ (8114a70 <tcp_output_segment+0x1b0>)
 81148ee:	485f      	ldr	r0, [pc, #380]	@ (8114a6c <tcp_output_segment+0x1ac>)
 81148f0:	f001 fffa 	bl	81168e8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 81148f4:	687b      	ldr	r3, [r7, #4]
 81148f6:	2b00      	cmp	r3, #0
 81148f8:	d106      	bne.n	8114908 <tcp_output_segment+0x48>
 81148fa:	4b5a      	ldr	r3, [pc, #360]	@ (8114a64 <tcp_output_segment+0x1a4>)
 81148fc:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8114900:	495c      	ldr	r1, [pc, #368]	@ (8114a74 <tcp_output_segment+0x1b4>)
 8114902:	485a      	ldr	r0, [pc, #360]	@ (8114a6c <tcp_output_segment+0x1ac>)
 8114904:	f001 fff0 	bl	81168e8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8114908:	68f8      	ldr	r0, [r7, #12]
 811490a:	f7ff ffb9 	bl	8114880 <tcp_output_segment_busy>
 811490e:	4603      	mov	r3, r0
 8114910:	2b00      	cmp	r3, #0
 8114912:	d001      	beq.n	8114918 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8114914:	2300      	movs	r3, #0
 8114916:	e0a1      	b.n	8114a5c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8114918:	68bb      	ldr	r3, [r7, #8]
 811491a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811491c:	68fb      	ldr	r3, [r7, #12]
 811491e:	68dc      	ldr	r4, [r3, #12]
 8114920:	4610      	mov	r0, r2
 8114922:	f7f7 f8a0 	bl	810ba66 <lwip_htonl>
 8114926:	4603      	mov	r3, r0
 8114928:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 811492a:	68bb      	ldr	r3, [r7, #8]
 811492c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811492e:	68fb      	ldr	r3, [r7, #12]
 8114930:	68dc      	ldr	r4, [r3, #12]
 8114932:	4610      	mov	r0, r2
 8114934:	f7f7 f882 	bl	810ba3c <lwip_htons>
 8114938:	4603      	mov	r3, r0
 811493a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 811493c:	68bb      	ldr	r3, [r7, #8]
 811493e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8114940:	68ba      	ldr	r2, [r7, #8]
 8114942:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8114944:	441a      	add	r2, r3
 8114946:	68bb      	ldr	r3, [r7, #8]
 8114948:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 811494a:	68fb      	ldr	r3, [r7, #12]
 811494c:	68db      	ldr	r3, [r3, #12]
 811494e:	3314      	adds	r3, #20
 8114950:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8114952:	68fb      	ldr	r3, [r7, #12]
 8114954:	7a9b      	ldrb	r3, [r3, #10]
 8114956:	f003 0301 	and.w	r3, r3, #1
 811495a:	2b00      	cmp	r3, #0
 811495c:	d015      	beq.n	811498a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 811495e:	68bb      	ldr	r3, [r7, #8]
 8114960:	3304      	adds	r3, #4
 8114962:	461a      	mov	r2, r3
 8114964:	6879      	ldr	r1, [r7, #4]
 8114966:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 811496a:	f7fc fe8f 	bl	811168c <tcp_eff_send_mss_netif>
 811496e:	4603      	mov	r3, r0
 8114970:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8114972:	8b7b      	ldrh	r3, [r7, #26]
 8114974:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8114978:	4618      	mov	r0, r3
 811497a:	f7f7 f874 	bl	810ba66 <lwip_htonl>
 811497e:	4602      	mov	r2, r0
 8114980:	69fb      	ldr	r3, [r7, #28]
 8114982:	601a      	str	r2, [r3, #0]
    opts += 1;
 8114984:	69fb      	ldr	r3, [r7, #28]
 8114986:	3304      	adds	r3, #4
 8114988:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 811498a:	68bb      	ldr	r3, [r7, #8]
 811498c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8114990:	2b00      	cmp	r3, #0
 8114992:	da02      	bge.n	811499a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8114994:	68bb      	ldr	r3, [r7, #8]
 8114996:	2200      	movs	r2, #0
 8114998:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 811499a:	68bb      	ldr	r3, [r7, #8]
 811499c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 811499e:	2b00      	cmp	r3, #0
 81149a0:	d10c      	bne.n	81149bc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 81149a2:	4b35      	ldr	r3, [pc, #212]	@ (8114a78 <tcp_output_segment+0x1b8>)
 81149a4:	681a      	ldr	r2, [r3, #0]
 81149a6:	68bb      	ldr	r3, [r7, #8]
 81149a8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 81149aa:	68fb      	ldr	r3, [r7, #12]
 81149ac:	68db      	ldr	r3, [r3, #12]
 81149ae:	685b      	ldr	r3, [r3, #4]
 81149b0:	4618      	mov	r0, r3
 81149b2:	f7f7 f858 	bl	810ba66 <lwip_htonl>
 81149b6:	4602      	mov	r2, r0
 81149b8:	68bb      	ldr	r3, [r7, #8]
 81149ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 81149bc:	68fb      	ldr	r3, [r7, #12]
 81149be:	68da      	ldr	r2, [r3, #12]
 81149c0:	68fb      	ldr	r3, [r7, #12]
 81149c2:	685b      	ldr	r3, [r3, #4]
 81149c4:	685b      	ldr	r3, [r3, #4]
 81149c6:	1ad3      	subs	r3, r2, r3
 81149c8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 81149ca:	68fb      	ldr	r3, [r7, #12]
 81149cc:	685b      	ldr	r3, [r3, #4]
 81149ce:	8959      	ldrh	r1, [r3, #10]
 81149d0:	68fb      	ldr	r3, [r7, #12]
 81149d2:	685b      	ldr	r3, [r3, #4]
 81149d4:	8b3a      	ldrh	r2, [r7, #24]
 81149d6:	1a8a      	subs	r2, r1, r2
 81149d8:	b292      	uxth	r2, r2
 81149da:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 81149dc:	68fb      	ldr	r3, [r7, #12]
 81149de:	685b      	ldr	r3, [r3, #4]
 81149e0:	8919      	ldrh	r1, [r3, #8]
 81149e2:	68fb      	ldr	r3, [r7, #12]
 81149e4:	685b      	ldr	r3, [r3, #4]
 81149e6:	8b3a      	ldrh	r2, [r7, #24]
 81149e8:	1a8a      	subs	r2, r1, r2
 81149ea:	b292      	uxth	r2, r2
 81149ec:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 81149ee:	68fb      	ldr	r3, [r7, #12]
 81149f0:	685b      	ldr	r3, [r3, #4]
 81149f2:	68fa      	ldr	r2, [r7, #12]
 81149f4:	68d2      	ldr	r2, [r2, #12]
 81149f6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 81149f8:	68fb      	ldr	r3, [r7, #12]
 81149fa:	68db      	ldr	r3, [r3, #12]
 81149fc:	2200      	movs	r2, #0
 81149fe:	741a      	strb	r2, [r3, #16]
 8114a00:	2200      	movs	r2, #0
 8114a02:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8114a04:	68fb      	ldr	r3, [r7, #12]
 8114a06:	68da      	ldr	r2, [r3, #12]
 8114a08:	68fb      	ldr	r3, [r7, #12]
 8114a0a:	7a9b      	ldrb	r3, [r3, #10]
 8114a0c:	f003 0301 	and.w	r3, r3, #1
 8114a10:	2b00      	cmp	r3, #0
 8114a12:	d001      	beq.n	8114a18 <tcp_output_segment+0x158>
 8114a14:	2318      	movs	r3, #24
 8114a16:	e000      	b.n	8114a1a <tcp_output_segment+0x15a>
 8114a18:	2314      	movs	r3, #20
 8114a1a:	4413      	add	r3, r2
 8114a1c:	69fa      	ldr	r2, [r7, #28]
 8114a1e:	429a      	cmp	r2, r3
 8114a20:	d006      	beq.n	8114a30 <tcp_output_segment+0x170>
 8114a22:	4b10      	ldr	r3, [pc, #64]	@ (8114a64 <tcp_output_segment+0x1a4>)
 8114a24:	f240 621c 	movw	r2, #1564	@ 0x61c
 8114a28:	4914      	ldr	r1, [pc, #80]	@ (8114a7c <tcp_output_segment+0x1bc>)
 8114a2a:	4810      	ldr	r0, [pc, #64]	@ (8114a6c <tcp_output_segment+0x1ac>)
 8114a2c:	f001 ff5c 	bl	81168e8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8114a30:	68fb      	ldr	r3, [r7, #12]
 8114a32:	6858      	ldr	r0, [r3, #4]
 8114a34:	68b9      	ldr	r1, [r7, #8]
 8114a36:	68bb      	ldr	r3, [r7, #8]
 8114a38:	1d1c      	adds	r4, r3, #4
 8114a3a:	68bb      	ldr	r3, [r7, #8]
 8114a3c:	7add      	ldrb	r5, [r3, #11]
 8114a3e:	68bb      	ldr	r3, [r7, #8]
 8114a40:	7a9b      	ldrb	r3, [r3, #10]
 8114a42:	687a      	ldr	r2, [r7, #4]
 8114a44:	9202      	str	r2, [sp, #8]
 8114a46:	2206      	movs	r2, #6
 8114a48:	9201      	str	r2, [sp, #4]
 8114a4a:	9300      	str	r3, [sp, #0]
 8114a4c:	462b      	mov	r3, r5
 8114a4e:	4622      	mov	r2, r4
 8114a50:	f7f8 fc8a 	bl	810d368 <ip4_output_if>
 8114a54:	4603      	mov	r3, r0
 8114a56:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8114a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8114a5c:	4618      	mov	r0, r3
 8114a5e:	3720      	adds	r7, #32
 8114a60:	46bd      	mov	sp, r7
 8114a62:	bdb0      	pop	{r4, r5, r7, pc}
 8114a64:	0811978c 	.word	0x0811978c
 8114a68:	08119d90 	.word	0x08119d90
 8114a6c:	08119820 	.word	0x08119820
 8114a70:	08119db0 	.word	0x08119db0
 8114a74:	08119dd0 	.word	0x08119dd0
 8114a78:	1000b84c 	.word	0x1000b84c
 8114a7c:	08119df4 	.word	0x08119df4

08114a80 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8114a80:	b5b0      	push	{r4, r5, r7, lr}
 8114a82:	b084      	sub	sp, #16
 8114a84:	af00      	add	r7, sp, #0
 8114a86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8114a88:	687b      	ldr	r3, [r7, #4]
 8114a8a:	2b00      	cmp	r3, #0
 8114a8c:	d106      	bne.n	8114a9c <tcp_rexmit_rto_prepare+0x1c>
 8114a8e:	4b31      	ldr	r3, [pc, #196]	@ (8114b54 <tcp_rexmit_rto_prepare+0xd4>)
 8114a90:	f240 6263 	movw	r2, #1635	@ 0x663
 8114a94:	4930      	ldr	r1, [pc, #192]	@ (8114b58 <tcp_rexmit_rto_prepare+0xd8>)
 8114a96:	4831      	ldr	r0, [pc, #196]	@ (8114b5c <tcp_rexmit_rto_prepare+0xdc>)
 8114a98:	f001 ff26 	bl	81168e8 <iprintf>

  if (pcb->unacked == NULL) {
 8114a9c:	687b      	ldr	r3, [r7, #4]
 8114a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114aa0:	2b00      	cmp	r3, #0
 8114aa2:	d102      	bne.n	8114aaa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8114aa4:	f06f 0305 	mvn.w	r3, #5
 8114aa8:	e050      	b.n	8114b4c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8114aaa:	687b      	ldr	r3, [r7, #4]
 8114aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114aae:	60fb      	str	r3, [r7, #12]
 8114ab0:	e00b      	b.n	8114aca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8114ab2:	68f8      	ldr	r0, [r7, #12]
 8114ab4:	f7ff fee4 	bl	8114880 <tcp_output_segment_busy>
 8114ab8:	4603      	mov	r3, r0
 8114aba:	2b00      	cmp	r3, #0
 8114abc:	d002      	beq.n	8114ac4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8114abe:	f06f 0305 	mvn.w	r3, #5
 8114ac2:	e043      	b.n	8114b4c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8114ac4:	68fb      	ldr	r3, [r7, #12]
 8114ac6:	681b      	ldr	r3, [r3, #0]
 8114ac8:	60fb      	str	r3, [r7, #12]
 8114aca:	68fb      	ldr	r3, [r7, #12]
 8114acc:	681b      	ldr	r3, [r3, #0]
 8114ace:	2b00      	cmp	r3, #0
 8114ad0:	d1ef      	bne.n	8114ab2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8114ad2:	68f8      	ldr	r0, [r7, #12]
 8114ad4:	f7ff fed4 	bl	8114880 <tcp_output_segment_busy>
 8114ad8:	4603      	mov	r3, r0
 8114ada:	2b00      	cmp	r3, #0
 8114adc:	d002      	beq.n	8114ae4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8114ade:	f06f 0305 	mvn.w	r3, #5
 8114ae2:	e033      	b.n	8114b4c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8114ae4:	687b      	ldr	r3, [r7, #4]
 8114ae6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8114ae8:	68fb      	ldr	r3, [r7, #12]
 8114aea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8114aec:	687b      	ldr	r3, [r7, #4]
 8114aee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8114af0:	687b      	ldr	r3, [r7, #4]
 8114af2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8114af4:	687b      	ldr	r3, [r7, #4]
 8114af6:	2200      	movs	r2, #0
 8114af8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8114afa:	687b      	ldr	r3, [r7, #4]
 8114afc:	8b5b      	ldrh	r3, [r3, #26]
 8114afe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8114b02:	b29a      	uxth	r2, r3
 8114b04:	687b      	ldr	r3, [r7, #4]
 8114b06:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8114b08:	68fb      	ldr	r3, [r7, #12]
 8114b0a:	68db      	ldr	r3, [r3, #12]
 8114b0c:	685b      	ldr	r3, [r3, #4]
 8114b0e:	4618      	mov	r0, r3
 8114b10:	f7f6 ffa9 	bl	810ba66 <lwip_htonl>
 8114b14:	4604      	mov	r4, r0
 8114b16:	68fb      	ldr	r3, [r7, #12]
 8114b18:	891b      	ldrh	r3, [r3, #8]
 8114b1a:	461d      	mov	r5, r3
 8114b1c:	68fb      	ldr	r3, [r7, #12]
 8114b1e:	68db      	ldr	r3, [r3, #12]
 8114b20:	899b      	ldrh	r3, [r3, #12]
 8114b22:	b29b      	uxth	r3, r3
 8114b24:	4618      	mov	r0, r3
 8114b26:	f7f6 ff89 	bl	810ba3c <lwip_htons>
 8114b2a:	4603      	mov	r3, r0
 8114b2c:	b2db      	uxtb	r3, r3
 8114b2e:	f003 0303 	and.w	r3, r3, #3
 8114b32:	2b00      	cmp	r3, #0
 8114b34:	d001      	beq.n	8114b3a <tcp_rexmit_rto_prepare+0xba>
 8114b36:	2301      	movs	r3, #1
 8114b38:	e000      	b.n	8114b3c <tcp_rexmit_rto_prepare+0xbc>
 8114b3a:	2300      	movs	r3, #0
 8114b3c:	442b      	add	r3, r5
 8114b3e:	18e2      	adds	r2, r4, r3
 8114b40:	687b      	ldr	r3, [r7, #4]
 8114b42:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8114b44:	687b      	ldr	r3, [r7, #4]
 8114b46:	2200      	movs	r2, #0
 8114b48:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8114b4a:	2300      	movs	r3, #0
}
 8114b4c:	4618      	mov	r0, r3
 8114b4e:	3710      	adds	r7, #16
 8114b50:	46bd      	mov	sp, r7
 8114b52:	bdb0      	pop	{r4, r5, r7, pc}
 8114b54:	0811978c 	.word	0x0811978c
 8114b58:	08119e08 	.word	0x08119e08
 8114b5c:	08119820 	.word	0x08119820

08114b60 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8114b60:	b580      	push	{r7, lr}
 8114b62:	b082      	sub	sp, #8
 8114b64:	af00      	add	r7, sp, #0
 8114b66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8114b68:	687b      	ldr	r3, [r7, #4]
 8114b6a:	2b00      	cmp	r3, #0
 8114b6c:	d106      	bne.n	8114b7c <tcp_rexmit_rto_commit+0x1c>
 8114b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8114ba4 <tcp_rexmit_rto_commit+0x44>)
 8114b70:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8114b74:	490c      	ldr	r1, [pc, #48]	@ (8114ba8 <tcp_rexmit_rto_commit+0x48>)
 8114b76:	480d      	ldr	r0, [pc, #52]	@ (8114bac <tcp_rexmit_rto_commit+0x4c>)
 8114b78:	f001 feb6 	bl	81168e8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8114b7c:	687b      	ldr	r3, [r7, #4]
 8114b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8114b82:	2bff      	cmp	r3, #255	@ 0xff
 8114b84:	d007      	beq.n	8114b96 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8114b86:	687b      	ldr	r3, [r7, #4]
 8114b88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8114b8c:	3301      	adds	r3, #1
 8114b8e:	b2da      	uxtb	r2, r3
 8114b90:	687b      	ldr	r3, [r7, #4]
 8114b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8114b96:	6878      	ldr	r0, [r7, #4]
 8114b98:	f7ff fc7e 	bl	8114498 <tcp_output>
}
 8114b9c:	bf00      	nop
 8114b9e:	3708      	adds	r7, #8
 8114ba0:	46bd      	mov	sp, r7
 8114ba2:	bd80      	pop	{r7, pc}
 8114ba4:	0811978c 	.word	0x0811978c
 8114ba8:	08119e2c 	.word	0x08119e2c
 8114bac:	08119820 	.word	0x08119820

08114bb0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8114bb0:	b580      	push	{r7, lr}
 8114bb2:	b082      	sub	sp, #8
 8114bb4:	af00      	add	r7, sp, #0
 8114bb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8114bb8:	687b      	ldr	r3, [r7, #4]
 8114bba:	2b00      	cmp	r3, #0
 8114bbc:	d106      	bne.n	8114bcc <tcp_rexmit_rto+0x1c>
 8114bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8114be8 <tcp_rexmit_rto+0x38>)
 8114bc0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8114bc4:	4909      	ldr	r1, [pc, #36]	@ (8114bec <tcp_rexmit_rto+0x3c>)
 8114bc6:	480a      	ldr	r0, [pc, #40]	@ (8114bf0 <tcp_rexmit_rto+0x40>)
 8114bc8:	f001 fe8e 	bl	81168e8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8114bcc:	6878      	ldr	r0, [r7, #4]
 8114bce:	f7ff ff57 	bl	8114a80 <tcp_rexmit_rto_prepare>
 8114bd2:	4603      	mov	r3, r0
 8114bd4:	2b00      	cmp	r3, #0
 8114bd6:	d102      	bne.n	8114bde <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8114bd8:	6878      	ldr	r0, [r7, #4]
 8114bda:	f7ff ffc1 	bl	8114b60 <tcp_rexmit_rto_commit>
  }
}
 8114bde:	bf00      	nop
 8114be0:	3708      	adds	r7, #8
 8114be2:	46bd      	mov	sp, r7
 8114be4:	bd80      	pop	{r7, pc}
 8114be6:	bf00      	nop
 8114be8:	0811978c 	.word	0x0811978c
 8114bec:	08119e50 	.word	0x08119e50
 8114bf0:	08119820 	.word	0x08119820

08114bf4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8114bf4:	b590      	push	{r4, r7, lr}
 8114bf6:	b085      	sub	sp, #20
 8114bf8:	af00      	add	r7, sp, #0
 8114bfa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8114bfc:	687b      	ldr	r3, [r7, #4]
 8114bfe:	2b00      	cmp	r3, #0
 8114c00:	d106      	bne.n	8114c10 <tcp_rexmit+0x1c>
 8114c02:	4b2f      	ldr	r3, [pc, #188]	@ (8114cc0 <tcp_rexmit+0xcc>)
 8114c04:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8114c08:	492e      	ldr	r1, [pc, #184]	@ (8114cc4 <tcp_rexmit+0xd0>)
 8114c0a:	482f      	ldr	r0, [pc, #188]	@ (8114cc8 <tcp_rexmit+0xd4>)
 8114c0c:	f001 fe6c 	bl	81168e8 <iprintf>

  if (pcb->unacked == NULL) {
 8114c10:	687b      	ldr	r3, [r7, #4]
 8114c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114c14:	2b00      	cmp	r3, #0
 8114c16:	d102      	bne.n	8114c1e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8114c18:	f06f 0305 	mvn.w	r3, #5
 8114c1c:	e04c      	b.n	8114cb8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8114c1e:	687b      	ldr	r3, [r7, #4]
 8114c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114c22:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8114c24:	68b8      	ldr	r0, [r7, #8]
 8114c26:	f7ff fe2b 	bl	8114880 <tcp_output_segment_busy>
 8114c2a:	4603      	mov	r3, r0
 8114c2c:	2b00      	cmp	r3, #0
 8114c2e:	d002      	beq.n	8114c36 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8114c30:	f06f 0305 	mvn.w	r3, #5
 8114c34:	e040      	b.n	8114cb8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8114c36:	68bb      	ldr	r3, [r7, #8]
 8114c38:	681a      	ldr	r2, [r3, #0]
 8114c3a:	687b      	ldr	r3, [r7, #4]
 8114c3c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8114c3e:	687b      	ldr	r3, [r7, #4]
 8114c40:	336c      	adds	r3, #108	@ 0x6c
 8114c42:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8114c44:	e002      	b.n	8114c4c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8114c46:	68fb      	ldr	r3, [r7, #12]
 8114c48:	681b      	ldr	r3, [r3, #0]
 8114c4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8114c4c:	68fb      	ldr	r3, [r7, #12]
 8114c4e:	681b      	ldr	r3, [r3, #0]
 8114c50:	2b00      	cmp	r3, #0
 8114c52:	d011      	beq.n	8114c78 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8114c54:	68fb      	ldr	r3, [r7, #12]
 8114c56:	681b      	ldr	r3, [r3, #0]
 8114c58:	68db      	ldr	r3, [r3, #12]
 8114c5a:	685b      	ldr	r3, [r3, #4]
 8114c5c:	4618      	mov	r0, r3
 8114c5e:	f7f6 ff02 	bl	810ba66 <lwip_htonl>
 8114c62:	4604      	mov	r4, r0
 8114c64:	68bb      	ldr	r3, [r7, #8]
 8114c66:	68db      	ldr	r3, [r3, #12]
 8114c68:	685b      	ldr	r3, [r3, #4]
 8114c6a:	4618      	mov	r0, r3
 8114c6c:	f7f6 fefb 	bl	810ba66 <lwip_htonl>
 8114c70:	4603      	mov	r3, r0
 8114c72:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8114c74:	2b00      	cmp	r3, #0
 8114c76:	dbe6      	blt.n	8114c46 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8114c78:	68fb      	ldr	r3, [r7, #12]
 8114c7a:	681a      	ldr	r2, [r3, #0]
 8114c7c:	68bb      	ldr	r3, [r7, #8]
 8114c7e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8114c80:	68fb      	ldr	r3, [r7, #12]
 8114c82:	68ba      	ldr	r2, [r7, #8]
 8114c84:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8114c86:	68bb      	ldr	r3, [r7, #8]
 8114c88:	681b      	ldr	r3, [r3, #0]
 8114c8a:	2b00      	cmp	r3, #0
 8114c8c:	d103      	bne.n	8114c96 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8114c8e:	687b      	ldr	r3, [r7, #4]
 8114c90:	2200      	movs	r2, #0
 8114c92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8114c96:	687b      	ldr	r3, [r7, #4]
 8114c98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8114c9c:	2bff      	cmp	r3, #255	@ 0xff
 8114c9e:	d007      	beq.n	8114cb0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8114ca0:	687b      	ldr	r3, [r7, #4]
 8114ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8114ca6:	3301      	adds	r3, #1
 8114ca8:	b2da      	uxtb	r2, r3
 8114caa:	687b      	ldr	r3, [r7, #4]
 8114cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8114cb0:	687b      	ldr	r3, [r7, #4]
 8114cb2:	2200      	movs	r2, #0
 8114cb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8114cb6:	2300      	movs	r3, #0
}
 8114cb8:	4618      	mov	r0, r3
 8114cba:	3714      	adds	r7, #20
 8114cbc:	46bd      	mov	sp, r7
 8114cbe:	bd90      	pop	{r4, r7, pc}
 8114cc0:	0811978c 	.word	0x0811978c
 8114cc4:	08119e6c 	.word	0x08119e6c
 8114cc8:	08119820 	.word	0x08119820

08114ccc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8114ccc:	b580      	push	{r7, lr}
 8114cce:	b082      	sub	sp, #8
 8114cd0:	af00      	add	r7, sp, #0
 8114cd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8114cd4:	687b      	ldr	r3, [r7, #4]
 8114cd6:	2b00      	cmp	r3, #0
 8114cd8:	d106      	bne.n	8114ce8 <tcp_rexmit_fast+0x1c>
 8114cda:	4b2a      	ldr	r3, [pc, #168]	@ (8114d84 <tcp_rexmit_fast+0xb8>)
 8114cdc:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8114ce0:	4929      	ldr	r1, [pc, #164]	@ (8114d88 <tcp_rexmit_fast+0xbc>)
 8114ce2:	482a      	ldr	r0, [pc, #168]	@ (8114d8c <tcp_rexmit_fast+0xc0>)
 8114ce4:	f001 fe00 	bl	81168e8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8114ce8:	687b      	ldr	r3, [r7, #4]
 8114cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114cec:	2b00      	cmp	r3, #0
 8114cee:	d044      	beq.n	8114d7a <tcp_rexmit_fast+0xae>
 8114cf0:	687b      	ldr	r3, [r7, #4]
 8114cf2:	8b5b      	ldrh	r3, [r3, #26]
 8114cf4:	f003 0304 	and.w	r3, r3, #4
 8114cf8:	2b00      	cmp	r3, #0
 8114cfa:	d13e      	bne.n	8114d7a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8114cfc:	6878      	ldr	r0, [r7, #4]
 8114cfe:	f7ff ff79 	bl	8114bf4 <tcp_rexmit>
 8114d02:	4603      	mov	r3, r0
 8114d04:	2b00      	cmp	r3, #0
 8114d06:	d138      	bne.n	8114d7a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8114d08:	687b      	ldr	r3, [r7, #4]
 8114d0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8114d0e:	687b      	ldr	r3, [r7, #4]
 8114d10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8114d14:	4293      	cmp	r3, r2
 8114d16:	bf28      	it	cs
 8114d18:	4613      	movcs	r3, r2
 8114d1a:	b29b      	uxth	r3, r3
 8114d1c:	0fda      	lsrs	r2, r3, #31
 8114d1e:	4413      	add	r3, r2
 8114d20:	105b      	asrs	r3, r3, #1
 8114d22:	b29a      	uxth	r2, r3
 8114d24:	687b      	ldr	r3, [r7, #4]
 8114d26:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8114d2a:	687b      	ldr	r3, [r7, #4]
 8114d2c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8114d30:	461a      	mov	r2, r3
 8114d32:	687b      	ldr	r3, [r7, #4]
 8114d34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8114d36:	005b      	lsls	r3, r3, #1
 8114d38:	429a      	cmp	r2, r3
 8114d3a:	d206      	bcs.n	8114d4a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8114d3c:	687b      	ldr	r3, [r7, #4]
 8114d3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8114d40:	005b      	lsls	r3, r3, #1
 8114d42:	b29a      	uxth	r2, r3
 8114d44:	687b      	ldr	r3, [r7, #4]
 8114d46:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8114d4a:	687b      	ldr	r3, [r7, #4]
 8114d4c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8114d50:	687b      	ldr	r3, [r7, #4]
 8114d52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8114d54:	4619      	mov	r1, r3
 8114d56:	0049      	lsls	r1, r1, #1
 8114d58:	440b      	add	r3, r1
 8114d5a:	b29b      	uxth	r3, r3
 8114d5c:	4413      	add	r3, r2
 8114d5e:	b29a      	uxth	r2, r3
 8114d60:	687b      	ldr	r3, [r7, #4]
 8114d62:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8114d66:	687b      	ldr	r3, [r7, #4]
 8114d68:	8b5b      	ldrh	r3, [r3, #26]
 8114d6a:	f043 0304 	orr.w	r3, r3, #4
 8114d6e:	b29a      	uxth	r2, r3
 8114d70:	687b      	ldr	r3, [r7, #4]
 8114d72:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8114d74:	687b      	ldr	r3, [r7, #4]
 8114d76:	2200      	movs	r2, #0
 8114d78:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8114d7a:	bf00      	nop
 8114d7c:	3708      	adds	r7, #8
 8114d7e:	46bd      	mov	sp, r7
 8114d80:	bd80      	pop	{r7, pc}
 8114d82:	bf00      	nop
 8114d84:	0811978c 	.word	0x0811978c
 8114d88:	08119e84 	.word	0x08119e84
 8114d8c:	08119820 	.word	0x08119820

08114d90 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8114d90:	b580      	push	{r7, lr}
 8114d92:	b086      	sub	sp, #24
 8114d94:	af00      	add	r7, sp, #0
 8114d96:	60f8      	str	r0, [r7, #12]
 8114d98:	607b      	str	r3, [r7, #4]
 8114d9a:	460b      	mov	r3, r1
 8114d9c:	817b      	strh	r3, [r7, #10]
 8114d9e:	4613      	mov	r3, r2
 8114da0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8114da2:	897a      	ldrh	r2, [r7, #10]
 8114da4:	893b      	ldrh	r3, [r7, #8]
 8114da6:	4413      	add	r3, r2
 8114da8:	b29b      	uxth	r3, r3
 8114daa:	3314      	adds	r3, #20
 8114dac:	b29b      	uxth	r3, r3
 8114dae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8114db2:	4619      	mov	r1, r3
 8114db4:	2022      	movs	r0, #34	@ 0x22
 8114db6:	f7fa fb03 	bl	810f3c0 <pbuf_alloc>
 8114dba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8114dbc:	697b      	ldr	r3, [r7, #20]
 8114dbe:	2b00      	cmp	r3, #0
 8114dc0:	d04d      	beq.n	8114e5e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8114dc2:	897b      	ldrh	r3, [r7, #10]
 8114dc4:	3313      	adds	r3, #19
 8114dc6:	697a      	ldr	r2, [r7, #20]
 8114dc8:	8952      	ldrh	r2, [r2, #10]
 8114dca:	4293      	cmp	r3, r2
 8114dcc:	db06      	blt.n	8114ddc <tcp_output_alloc_header_common+0x4c>
 8114dce:	4b26      	ldr	r3, [pc, #152]	@ (8114e68 <tcp_output_alloc_header_common+0xd8>)
 8114dd0:	f240 7223 	movw	r2, #1827	@ 0x723
 8114dd4:	4925      	ldr	r1, [pc, #148]	@ (8114e6c <tcp_output_alloc_header_common+0xdc>)
 8114dd6:	4826      	ldr	r0, [pc, #152]	@ (8114e70 <tcp_output_alloc_header_common+0xe0>)
 8114dd8:	f001 fd86 	bl	81168e8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8114ddc:	697b      	ldr	r3, [r7, #20]
 8114dde:	685b      	ldr	r3, [r3, #4]
 8114de0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8114de2:	8c3b      	ldrh	r3, [r7, #32]
 8114de4:	4618      	mov	r0, r3
 8114de6:	f7f6 fe29 	bl	810ba3c <lwip_htons>
 8114dea:	4603      	mov	r3, r0
 8114dec:	461a      	mov	r2, r3
 8114dee:	693b      	ldr	r3, [r7, #16]
 8114df0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8114df2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8114df4:	4618      	mov	r0, r3
 8114df6:	f7f6 fe21 	bl	810ba3c <lwip_htons>
 8114dfa:	4603      	mov	r3, r0
 8114dfc:	461a      	mov	r2, r3
 8114dfe:	693b      	ldr	r3, [r7, #16]
 8114e00:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8114e02:	693b      	ldr	r3, [r7, #16]
 8114e04:	687a      	ldr	r2, [r7, #4]
 8114e06:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8114e08:	68f8      	ldr	r0, [r7, #12]
 8114e0a:	f7f6 fe2c 	bl	810ba66 <lwip_htonl>
 8114e0e:	4602      	mov	r2, r0
 8114e10:	693b      	ldr	r3, [r7, #16]
 8114e12:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8114e14:	897b      	ldrh	r3, [r7, #10]
 8114e16:	089b      	lsrs	r3, r3, #2
 8114e18:	b29b      	uxth	r3, r3
 8114e1a:	3305      	adds	r3, #5
 8114e1c:	b29b      	uxth	r3, r3
 8114e1e:	031b      	lsls	r3, r3, #12
 8114e20:	b29a      	uxth	r2, r3
 8114e22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8114e26:	b29b      	uxth	r3, r3
 8114e28:	4313      	orrs	r3, r2
 8114e2a:	b29b      	uxth	r3, r3
 8114e2c:	4618      	mov	r0, r3
 8114e2e:	f7f6 fe05 	bl	810ba3c <lwip_htons>
 8114e32:	4603      	mov	r3, r0
 8114e34:	461a      	mov	r2, r3
 8114e36:	693b      	ldr	r3, [r7, #16]
 8114e38:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8114e3a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8114e3c:	4618      	mov	r0, r3
 8114e3e:	f7f6 fdfd 	bl	810ba3c <lwip_htons>
 8114e42:	4603      	mov	r3, r0
 8114e44:	461a      	mov	r2, r3
 8114e46:	693b      	ldr	r3, [r7, #16]
 8114e48:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8114e4a:	693b      	ldr	r3, [r7, #16]
 8114e4c:	2200      	movs	r2, #0
 8114e4e:	741a      	strb	r2, [r3, #16]
 8114e50:	2200      	movs	r2, #0
 8114e52:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8114e54:	693b      	ldr	r3, [r7, #16]
 8114e56:	2200      	movs	r2, #0
 8114e58:	749a      	strb	r2, [r3, #18]
 8114e5a:	2200      	movs	r2, #0
 8114e5c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8114e5e:	697b      	ldr	r3, [r7, #20]
}
 8114e60:	4618      	mov	r0, r3
 8114e62:	3718      	adds	r7, #24
 8114e64:	46bd      	mov	sp, r7
 8114e66:	bd80      	pop	{r7, pc}
 8114e68:	0811978c 	.word	0x0811978c
 8114e6c:	08119ea4 	.word	0x08119ea4
 8114e70:	08119820 	.word	0x08119820

08114e74 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8114e74:	b5b0      	push	{r4, r5, r7, lr}
 8114e76:	b08a      	sub	sp, #40	@ 0x28
 8114e78:	af04      	add	r7, sp, #16
 8114e7a:	60f8      	str	r0, [r7, #12]
 8114e7c:	607b      	str	r3, [r7, #4]
 8114e7e:	460b      	mov	r3, r1
 8114e80:	817b      	strh	r3, [r7, #10]
 8114e82:	4613      	mov	r3, r2
 8114e84:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8114e86:	68fb      	ldr	r3, [r7, #12]
 8114e88:	2b00      	cmp	r3, #0
 8114e8a:	d106      	bne.n	8114e9a <tcp_output_alloc_header+0x26>
 8114e8c:	4b15      	ldr	r3, [pc, #84]	@ (8114ee4 <tcp_output_alloc_header+0x70>)
 8114e8e:	f240 7242 	movw	r2, #1858	@ 0x742
 8114e92:	4915      	ldr	r1, [pc, #84]	@ (8114ee8 <tcp_output_alloc_header+0x74>)
 8114e94:	4815      	ldr	r0, [pc, #84]	@ (8114eec <tcp_output_alloc_header+0x78>)
 8114e96:	f001 fd27 	bl	81168e8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8114e9a:	68fb      	ldr	r3, [r7, #12]
 8114e9c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8114e9e:	68fb      	ldr	r3, [r7, #12]
 8114ea0:	8adb      	ldrh	r3, [r3, #22]
 8114ea2:	68fa      	ldr	r2, [r7, #12]
 8114ea4:	8b12      	ldrh	r2, [r2, #24]
 8114ea6:	68f9      	ldr	r1, [r7, #12]
 8114ea8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8114eaa:	893d      	ldrh	r5, [r7, #8]
 8114eac:	897c      	ldrh	r4, [r7, #10]
 8114eae:	9103      	str	r1, [sp, #12]
 8114eb0:	2110      	movs	r1, #16
 8114eb2:	9102      	str	r1, [sp, #8]
 8114eb4:	9201      	str	r2, [sp, #4]
 8114eb6:	9300      	str	r3, [sp, #0]
 8114eb8:	687b      	ldr	r3, [r7, #4]
 8114eba:	462a      	mov	r2, r5
 8114ebc:	4621      	mov	r1, r4
 8114ebe:	f7ff ff67 	bl	8114d90 <tcp_output_alloc_header_common>
 8114ec2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8114ec4:	697b      	ldr	r3, [r7, #20]
 8114ec6:	2b00      	cmp	r3, #0
 8114ec8:	d006      	beq.n	8114ed8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8114eca:	68fb      	ldr	r3, [r7, #12]
 8114ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8114ece:	68fa      	ldr	r2, [r7, #12]
 8114ed0:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8114ed2:	441a      	add	r2, r3
 8114ed4:	68fb      	ldr	r3, [r7, #12]
 8114ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8114ed8:	697b      	ldr	r3, [r7, #20]
}
 8114eda:	4618      	mov	r0, r3
 8114edc:	3718      	adds	r7, #24
 8114ede:	46bd      	mov	sp, r7
 8114ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8114ee2:	bf00      	nop
 8114ee4:	0811978c 	.word	0x0811978c
 8114ee8:	08119ed4 	.word	0x08119ed4
 8114eec:	08119820 	.word	0x08119820

08114ef0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8114ef0:	b580      	push	{r7, lr}
 8114ef2:	b088      	sub	sp, #32
 8114ef4:	af00      	add	r7, sp, #0
 8114ef6:	60f8      	str	r0, [r7, #12]
 8114ef8:	60b9      	str	r1, [r7, #8]
 8114efa:	4611      	mov	r1, r2
 8114efc:	461a      	mov	r2, r3
 8114efe:	460b      	mov	r3, r1
 8114f00:	71fb      	strb	r3, [r7, #7]
 8114f02:	4613      	mov	r3, r2
 8114f04:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8114f06:	2300      	movs	r3, #0
 8114f08:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8114f0a:	68bb      	ldr	r3, [r7, #8]
 8114f0c:	2b00      	cmp	r3, #0
 8114f0e:	d106      	bne.n	8114f1e <tcp_output_fill_options+0x2e>
 8114f10:	4b12      	ldr	r3, [pc, #72]	@ (8114f5c <tcp_output_fill_options+0x6c>)
 8114f12:	f240 7256 	movw	r2, #1878	@ 0x756
 8114f16:	4912      	ldr	r1, [pc, #72]	@ (8114f60 <tcp_output_fill_options+0x70>)
 8114f18:	4812      	ldr	r0, [pc, #72]	@ (8114f64 <tcp_output_fill_options+0x74>)
 8114f1a:	f001 fce5 	bl	81168e8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8114f1e:	68bb      	ldr	r3, [r7, #8]
 8114f20:	685b      	ldr	r3, [r3, #4]
 8114f22:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8114f24:	69bb      	ldr	r3, [r7, #24]
 8114f26:	3314      	adds	r3, #20
 8114f28:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8114f2a:	8bfb      	ldrh	r3, [r7, #30]
 8114f2c:	009b      	lsls	r3, r3, #2
 8114f2e:	461a      	mov	r2, r3
 8114f30:	79fb      	ldrb	r3, [r7, #7]
 8114f32:	009b      	lsls	r3, r3, #2
 8114f34:	f003 0304 	and.w	r3, r3, #4
 8114f38:	4413      	add	r3, r2
 8114f3a:	3314      	adds	r3, #20
 8114f3c:	69ba      	ldr	r2, [r7, #24]
 8114f3e:	4413      	add	r3, r2
 8114f40:	697a      	ldr	r2, [r7, #20]
 8114f42:	429a      	cmp	r2, r3
 8114f44:	d006      	beq.n	8114f54 <tcp_output_fill_options+0x64>
 8114f46:	4b05      	ldr	r3, [pc, #20]	@ (8114f5c <tcp_output_fill_options+0x6c>)
 8114f48:	f240 7275 	movw	r2, #1909	@ 0x775
 8114f4c:	4906      	ldr	r1, [pc, #24]	@ (8114f68 <tcp_output_fill_options+0x78>)
 8114f4e:	4805      	ldr	r0, [pc, #20]	@ (8114f64 <tcp_output_fill_options+0x74>)
 8114f50:	f001 fcca 	bl	81168e8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8114f54:	bf00      	nop
 8114f56:	3720      	adds	r7, #32
 8114f58:	46bd      	mov	sp, r7
 8114f5a:	bd80      	pop	{r7, pc}
 8114f5c:	0811978c 	.word	0x0811978c
 8114f60:	08119efc 	.word	0x08119efc
 8114f64:	08119820 	.word	0x08119820
 8114f68:	08119df4 	.word	0x08119df4

08114f6c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8114f6c:	b580      	push	{r7, lr}
 8114f6e:	b08a      	sub	sp, #40	@ 0x28
 8114f70:	af04      	add	r7, sp, #16
 8114f72:	60f8      	str	r0, [r7, #12]
 8114f74:	60b9      	str	r1, [r7, #8]
 8114f76:	607a      	str	r2, [r7, #4]
 8114f78:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8114f7a:	68bb      	ldr	r3, [r7, #8]
 8114f7c:	2b00      	cmp	r3, #0
 8114f7e:	d106      	bne.n	8114f8e <tcp_output_control_segment+0x22>
 8114f80:	4b1c      	ldr	r3, [pc, #112]	@ (8114ff4 <tcp_output_control_segment+0x88>)
 8114f82:	f240 7287 	movw	r2, #1927	@ 0x787
 8114f86:	491c      	ldr	r1, [pc, #112]	@ (8114ff8 <tcp_output_control_segment+0x8c>)
 8114f88:	481c      	ldr	r0, [pc, #112]	@ (8114ffc <tcp_output_control_segment+0x90>)
 8114f8a:	f001 fcad 	bl	81168e8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8114f8e:	683a      	ldr	r2, [r7, #0]
 8114f90:	6879      	ldr	r1, [r7, #4]
 8114f92:	68f8      	ldr	r0, [r7, #12]
 8114f94:	f7fe ff42 	bl	8113e1c <tcp_route>
 8114f98:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8114f9a:	693b      	ldr	r3, [r7, #16]
 8114f9c:	2b00      	cmp	r3, #0
 8114f9e:	d102      	bne.n	8114fa6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8114fa0:	23fc      	movs	r3, #252	@ 0xfc
 8114fa2:	75fb      	strb	r3, [r7, #23]
 8114fa4:	e01c      	b.n	8114fe0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8114fa6:	68fb      	ldr	r3, [r7, #12]
 8114fa8:	2b00      	cmp	r3, #0
 8114faa:	d006      	beq.n	8114fba <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8114fac:	68fb      	ldr	r3, [r7, #12]
 8114fae:	7adb      	ldrb	r3, [r3, #11]
 8114fb0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8114fb2:	68fb      	ldr	r3, [r7, #12]
 8114fb4:	7a9b      	ldrb	r3, [r3, #10]
 8114fb6:	757b      	strb	r3, [r7, #21]
 8114fb8:	e003      	b.n	8114fc2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8114fba:	23ff      	movs	r3, #255	@ 0xff
 8114fbc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8114fbe:	2300      	movs	r3, #0
 8114fc0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8114fc2:	7dba      	ldrb	r2, [r7, #22]
 8114fc4:	693b      	ldr	r3, [r7, #16]
 8114fc6:	9302      	str	r3, [sp, #8]
 8114fc8:	2306      	movs	r3, #6
 8114fca:	9301      	str	r3, [sp, #4]
 8114fcc:	7d7b      	ldrb	r3, [r7, #21]
 8114fce:	9300      	str	r3, [sp, #0]
 8114fd0:	4613      	mov	r3, r2
 8114fd2:	683a      	ldr	r2, [r7, #0]
 8114fd4:	6879      	ldr	r1, [r7, #4]
 8114fd6:	68b8      	ldr	r0, [r7, #8]
 8114fd8:	f7f8 f9c6 	bl	810d368 <ip4_output_if>
 8114fdc:	4603      	mov	r3, r0
 8114fde:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8114fe0:	68b8      	ldr	r0, [r7, #8]
 8114fe2:	f7fa fcd5 	bl	810f990 <pbuf_free>
  return err;
 8114fe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8114fea:	4618      	mov	r0, r3
 8114fec:	3718      	adds	r7, #24
 8114fee:	46bd      	mov	sp, r7
 8114ff0:	bd80      	pop	{r7, pc}
 8114ff2:	bf00      	nop
 8114ff4:	0811978c 	.word	0x0811978c
 8114ff8:	08119f24 	.word	0x08119f24
 8114ffc:	08119820 	.word	0x08119820

08115000 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8115000:	b590      	push	{r4, r7, lr}
 8115002:	b08b      	sub	sp, #44	@ 0x2c
 8115004:	af04      	add	r7, sp, #16
 8115006:	60f8      	str	r0, [r7, #12]
 8115008:	60b9      	str	r1, [r7, #8]
 811500a:	607a      	str	r2, [r7, #4]
 811500c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 811500e:	683b      	ldr	r3, [r7, #0]
 8115010:	2b00      	cmp	r3, #0
 8115012:	d106      	bne.n	8115022 <tcp_rst+0x22>
 8115014:	4b1f      	ldr	r3, [pc, #124]	@ (8115094 <tcp_rst+0x94>)
 8115016:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 811501a:	491f      	ldr	r1, [pc, #124]	@ (8115098 <tcp_rst+0x98>)
 811501c:	481f      	ldr	r0, [pc, #124]	@ (811509c <tcp_rst+0x9c>)
 811501e:	f001 fc63 	bl	81168e8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8115022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115024:	2b00      	cmp	r3, #0
 8115026:	d106      	bne.n	8115036 <tcp_rst+0x36>
 8115028:	4b1a      	ldr	r3, [pc, #104]	@ (8115094 <tcp_rst+0x94>)
 811502a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 811502e:	491c      	ldr	r1, [pc, #112]	@ (81150a0 <tcp_rst+0xa0>)
 8115030:	481a      	ldr	r0, [pc, #104]	@ (811509c <tcp_rst+0x9c>)
 8115032:	f001 fc59 	bl	81168e8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8115036:	2300      	movs	r3, #0
 8115038:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 811503a:	f24d 0316 	movw	r3, #53270	@ 0xd016
 811503e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8115040:	7dfb      	ldrb	r3, [r7, #23]
 8115042:	b29c      	uxth	r4, r3
 8115044:	68b8      	ldr	r0, [r7, #8]
 8115046:	f7f6 fd0e 	bl	810ba66 <lwip_htonl>
 811504a:	4602      	mov	r2, r0
 811504c:	8abb      	ldrh	r3, [r7, #20]
 811504e:	9303      	str	r3, [sp, #12]
 8115050:	2314      	movs	r3, #20
 8115052:	9302      	str	r3, [sp, #8]
 8115054:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8115056:	9301      	str	r3, [sp, #4]
 8115058:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 811505a:	9300      	str	r3, [sp, #0]
 811505c:	4613      	mov	r3, r2
 811505e:	2200      	movs	r2, #0
 8115060:	4621      	mov	r1, r4
 8115062:	6878      	ldr	r0, [r7, #4]
 8115064:	f7ff fe94 	bl	8114d90 <tcp_output_alloc_header_common>
 8115068:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 811506a:	693b      	ldr	r3, [r7, #16]
 811506c:	2b00      	cmp	r3, #0
 811506e:	d00c      	beq.n	811508a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8115070:	7dfb      	ldrb	r3, [r7, #23]
 8115072:	2200      	movs	r2, #0
 8115074:	6939      	ldr	r1, [r7, #16]
 8115076:	68f8      	ldr	r0, [r7, #12]
 8115078:	f7ff ff3a 	bl	8114ef0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 811507c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811507e:	683a      	ldr	r2, [r7, #0]
 8115080:	6939      	ldr	r1, [r7, #16]
 8115082:	68f8      	ldr	r0, [r7, #12]
 8115084:	f7ff ff72 	bl	8114f6c <tcp_output_control_segment>
 8115088:	e000      	b.n	811508c <tcp_rst+0x8c>
    return;
 811508a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 811508c:	371c      	adds	r7, #28
 811508e:	46bd      	mov	sp, r7
 8115090:	bd90      	pop	{r4, r7, pc}
 8115092:	bf00      	nop
 8115094:	0811978c 	.word	0x0811978c
 8115098:	08119f50 	.word	0x08119f50
 811509c:	08119820 	.word	0x08119820
 81150a0:	08119f6c 	.word	0x08119f6c

081150a4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 81150a4:	b590      	push	{r4, r7, lr}
 81150a6:	b087      	sub	sp, #28
 81150a8:	af00      	add	r7, sp, #0
 81150aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 81150ac:	2300      	movs	r3, #0
 81150ae:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 81150b0:	2300      	movs	r3, #0
 81150b2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 81150b4:	687b      	ldr	r3, [r7, #4]
 81150b6:	2b00      	cmp	r3, #0
 81150b8:	d106      	bne.n	81150c8 <tcp_send_empty_ack+0x24>
 81150ba:	4b28      	ldr	r3, [pc, #160]	@ (811515c <tcp_send_empty_ack+0xb8>)
 81150bc:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 81150c0:	4927      	ldr	r1, [pc, #156]	@ (8115160 <tcp_send_empty_ack+0xbc>)
 81150c2:	4828      	ldr	r0, [pc, #160]	@ (8115164 <tcp_send_empty_ack+0xc0>)
 81150c4:	f001 fc10 	bl	81168e8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 81150c8:	7dfb      	ldrb	r3, [r7, #23]
 81150ca:	009b      	lsls	r3, r3, #2
 81150cc:	b2db      	uxtb	r3, r3
 81150ce:	f003 0304 	and.w	r3, r3, #4
 81150d2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 81150d4:	7d7b      	ldrb	r3, [r7, #21]
 81150d6:	b29c      	uxth	r4, r3
 81150d8:	687b      	ldr	r3, [r7, #4]
 81150da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81150dc:	4618      	mov	r0, r3
 81150de:	f7f6 fcc2 	bl	810ba66 <lwip_htonl>
 81150e2:	4603      	mov	r3, r0
 81150e4:	2200      	movs	r2, #0
 81150e6:	4621      	mov	r1, r4
 81150e8:	6878      	ldr	r0, [r7, #4]
 81150ea:	f7ff fec3 	bl	8114e74 <tcp_output_alloc_header>
 81150ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 81150f0:	693b      	ldr	r3, [r7, #16]
 81150f2:	2b00      	cmp	r3, #0
 81150f4:	d109      	bne.n	811510a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 81150f6:	687b      	ldr	r3, [r7, #4]
 81150f8:	8b5b      	ldrh	r3, [r3, #26]
 81150fa:	f043 0303 	orr.w	r3, r3, #3
 81150fe:	b29a      	uxth	r2, r3
 8115100:	687b      	ldr	r3, [r7, #4]
 8115102:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8115104:	f06f 0301 	mvn.w	r3, #1
 8115108:	e023      	b.n	8115152 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 811510a:	7dbb      	ldrb	r3, [r7, #22]
 811510c:	7dfa      	ldrb	r2, [r7, #23]
 811510e:	6939      	ldr	r1, [r7, #16]
 8115110:	6878      	ldr	r0, [r7, #4]
 8115112:	f7ff feed 	bl	8114ef0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8115116:	687a      	ldr	r2, [r7, #4]
 8115118:	687b      	ldr	r3, [r7, #4]
 811511a:	3304      	adds	r3, #4
 811511c:	6939      	ldr	r1, [r7, #16]
 811511e:	6878      	ldr	r0, [r7, #4]
 8115120:	f7ff ff24 	bl	8114f6c <tcp_output_control_segment>
 8115124:	4603      	mov	r3, r0
 8115126:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8115128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811512c:	2b00      	cmp	r3, #0
 811512e:	d007      	beq.n	8115140 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8115130:	687b      	ldr	r3, [r7, #4]
 8115132:	8b5b      	ldrh	r3, [r3, #26]
 8115134:	f043 0303 	orr.w	r3, r3, #3
 8115138:	b29a      	uxth	r2, r3
 811513a:	687b      	ldr	r3, [r7, #4]
 811513c:	835a      	strh	r2, [r3, #26]
 811513e:	e006      	b.n	811514e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8115140:	687b      	ldr	r3, [r7, #4]
 8115142:	8b5b      	ldrh	r3, [r3, #26]
 8115144:	f023 0303 	bic.w	r3, r3, #3
 8115148:	b29a      	uxth	r2, r3
 811514a:	687b      	ldr	r3, [r7, #4]
 811514c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 811514e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8115152:	4618      	mov	r0, r3
 8115154:	371c      	adds	r7, #28
 8115156:	46bd      	mov	sp, r7
 8115158:	bd90      	pop	{r4, r7, pc}
 811515a:	bf00      	nop
 811515c:	0811978c 	.word	0x0811978c
 8115160:	08119f88 	.word	0x08119f88
 8115164:	08119820 	.word	0x08119820

08115168 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8115168:	b590      	push	{r4, r7, lr}
 811516a:	b087      	sub	sp, #28
 811516c:	af00      	add	r7, sp, #0
 811516e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8115170:	2300      	movs	r3, #0
 8115172:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8115174:	687b      	ldr	r3, [r7, #4]
 8115176:	2b00      	cmp	r3, #0
 8115178:	d106      	bne.n	8115188 <tcp_keepalive+0x20>
 811517a:	4b18      	ldr	r3, [pc, #96]	@ (81151dc <tcp_keepalive+0x74>)
 811517c:	f640 0224 	movw	r2, #2084	@ 0x824
 8115180:	4917      	ldr	r1, [pc, #92]	@ (81151e0 <tcp_keepalive+0x78>)
 8115182:	4818      	ldr	r0, [pc, #96]	@ (81151e4 <tcp_keepalive+0x7c>)
 8115184:	f001 fbb0 	bl	81168e8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8115188:	7dfb      	ldrb	r3, [r7, #23]
 811518a:	b29c      	uxth	r4, r3
 811518c:	687b      	ldr	r3, [r7, #4]
 811518e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8115190:	3b01      	subs	r3, #1
 8115192:	4618      	mov	r0, r3
 8115194:	f7f6 fc67 	bl	810ba66 <lwip_htonl>
 8115198:	4603      	mov	r3, r0
 811519a:	2200      	movs	r2, #0
 811519c:	4621      	mov	r1, r4
 811519e:	6878      	ldr	r0, [r7, #4]
 81151a0:	f7ff fe68 	bl	8114e74 <tcp_output_alloc_header>
 81151a4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 81151a6:	693b      	ldr	r3, [r7, #16]
 81151a8:	2b00      	cmp	r3, #0
 81151aa:	d102      	bne.n	81151b2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 81151ac:	f04f 33ff 	mov.w	r3, #4294967295
 81151b0:	e010      	b.n	81151d4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 81151b2:	7dfb      	ldrb	r3, [r7, #23]
 81151b4:	2200      	movs	r2, #0
 81151b6:	6939      	ldr	r1, [r7, #16]
 81151b8:	6878      	ldr	r0, [r7, #4]
 81151ba:	f7ff fe99 	bl	8114ef0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 81151be:	687a      	ldr	r2, [r7, #4]
 81151c0:	687b      	ldr	r3, [r7, #4]
 81151c2:	3304      	adds	r3, #4
 81151c4:	6939      	ldr	r1, [r7, #16]
 81151c6:	6878      	ldr	r0, [r7, #4]
 81151c8:	f7ff fed0 	bl	8114f6c <tcp_output_control_segment>
 81151cc:	4603      	mov	r3, r0
 81151ce:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 81151d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 81151d4:	4618      	mov	r0, r3
 81151d6:	371c      	adds	r7, #28
 81151d8:	46bd      	mov	sp, r7
 81151da:	bd90      	pop	{r4, r7, pc}
 81151dc:	0811978c 	.word	0x0811978c
 81151e0:	08119fa8 	.word	0x08119fa8
 81151e4:	08119820 	.word	0x08119820

081151e8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 81151e8:	b590      	push	{r4, r7, lr}
 81151ea:	b08b      	sub	sp, #44	@ 0x2c
 81151ec:	af00      	add	r7, sp, #0
 81151ee:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 81151f0:	2300      	movs	r3, #0
 81151f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 81151f6:	687b      	ldr	r3, [r7, #4]
 81151f8:	2b00      	cmp	r3, #0
 81151fa:	d106      	bne.n	811520a <tcp_zero_window_probe+0x22>
 81151fc:	4b4c      	ldr	r3, [pc, #304]	@ (8115330 <tcp_zero_window_probe+0x148>)
 81151fe:	f640 024f 	movw	r2, #2127	@ 0x84f
 8115202:	494c      	ldr	r1, [pc, #304]	@ (8115334 <tcp_zero_window_probe+0x14c>)
 8115204:	484c      	ldr	r0, [pc, #304]	@ (8115338 <tcp_zero_window_probe+0x150>)
 8115206:	f001 fb6f 	bl	81168e8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 811520a:	687b      	ldr	r3, [r7, #4]
 811520c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811520e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8115210:	6a3b      	ldr	r3, [r7, #32]
 8115212:	2b00      	cmp	r3, #0
 8115214:	d101      	bne.n	811521a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8115216:	2300      	movs	r3, #0
 8115218:	e086      	b.n	8115328 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 811521a:	687b      	ldr	r3, [r7, #4]
 811521c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8115220:	2bff      	cmp	r3, #255	@ 0xff
 8115222:	d007      	beq.n	8115234 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8115224:	687b      	ldr	r3, [r7, #4]
 8115226:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 811522a:	3301      	adds	r3, #1
 811522c:	b2da      	uxtb	r2, r3
 811522e:	687b      	ldr	r3, [r7, #4]
 8115230:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8115234:	6a3b      	ldr	r3, [r7, #32]
 8115236:	68db      	ldr	r3, [r3, #12]
 8115238:	899b      	ldrh	r3, [r3, #12]
 811523a:	b29b      	uxth	r3, r3
 811523c:	4618      	mov	r0, r3
 811523e:	f7f6 fbfd 	bl	810ba3c <lwip_htons>
 8115242:	4603      	mov	r3, r0
 8115244:	b2db      	uxtb	r3, r3
 8115246:	f003 0301 	and.w	r3, r3, #1
 811524a:	2b00      	cmp	r3, #0
 811524c:	d005      	beq.n	811525a <tcp_zero_window_probe+0x72>
 811524e:	6a3b      	ldr	r3, [r7, #32]
 8115250:	891b      	ldrh	r3, [r3, #8]
 8115252:	2b00      	cmp	r3, #0
 8115254:	d101      	bne.n	811525a <tcp_zero_window_probe+0x72>
 8115256:	2301      	movs	r3, #1
 8115258:	e000      	b.n	811525c <tcp_zero_window_probe+0x74>
 811525a:	2300      	movs	r3, #0
 811525c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 811525e:	7ffb      	ldrb	r3, [r7, #31]
 8115260:	2b00      	cmp	r3, #0
 8115262:	bf0c      	ite	eq
 8115264:	2301      	moveq	r3, #1
 8115266:	2300      	movne	r3, #0
 8115268:	b2db      	uxtb	r3, r3
 811526a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 811526c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115270:	b299      	uxth	r1, r3
 8115272:	6a3b      	ldr	r3, [r7, #32]
 8115274:	68db      	ldr	r3, [r3, #12]
 8115276:	685b      	ldr	r3, [r3, #4]
 8115278:	8bba      	ldrh	r2, [r7, #28]
 811527a:	6878      	ldr	r0, [r7, #4]
 811527c:	f7ff fdfa 	bl	8114e74 <tcp_output_alloc_header>
 8115280:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8115282:	69bb      	ldr	r3, [r7, #24]
 8115284:	2b00      	cmp	r3, #0
 8115286:	d102      	bne.n	811528e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8115288:	f04f 33ff 	mov.w	r3, #4294967295
 811528c:	e04c      	b.n	8115328 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 811528e:	69bb      	ldr	r3, [r7, #24]
 8115290:	685b      	ldr	r3, [r3, #4]
 8115292:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8115294:	7ffb      	ldrb	r3, [r7, #31]
 8115296:	2b00      	cmp	r3, #0
 8115298:	d011      	beq.n	81152be <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 811529a:	697b      	ldr	r3, [r7, #20]
 811529c:	899b      	ldrh	r3, [r3, #12]
 811529e:	b29b      	uxth	r3, r3
 81152a0:	b21b      	sxth	r3, r3
 81152a2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81152a6:	b21c      	sxth	r4, r3
 81152a8:	2011      	movs	r0, #17
 81152aa:	f7f6 fbc7 	bl	810ba3c <lwip_htons>
 81152ae:	4603      	mov	r3, r0
 81152b0:	b21b      	sxth	r3, r3
 81152b2:	4323      	orrs	r3, r4
 81152b4:	b21b      	sxth	r3, r3
 81152b6:	b29a      	uxth	r2, r3
 81152b8:	697b      	ldr	r3, [r7, #20]
 81152ba:	819a      	strh	r2, [r3, #12]
 81152bc:	e010      	b.n	81152e0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 81152be:	69bb      	ldr	r3, [r7, #24]
 81152c0:	685b      	ldr	r3, [r3, #4]
 81152c2:	3314      	adds	r3, #20
 81152c4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 81152c6:	6a3b      	ldr	r3, [r7, #32]
 81152c8:	6858      	ldr	r0, [r3, #4]
 81152ca:	6a3b      	ldr	r3, [r7, #32]
 81152cc:	685b      	ldr	r3, [r3, #4]
 81152ce:	891a      	ldrh	r2, [r3, #8]
 81152d0:	6a3b      	ldr	r3, [r7, #32]
 81152d2:	891b      	ldrh	r3, [r3, #8]
 81152d4:	1ad3      	subs	r3, r2, r3
 81152d6:	b29b      	uxth	r3, r3
 81152d8:	2201      	movs	r2, #1
 81152da:	6939      	ldr	r1, [r7, #16]
 81152dc:	f7fa fd5e 	bl	810fd9c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 81152e0:	6a3b      	ldr	r3, [r7, #32]
 81152e2:	68db      	ldr	r3, [r3, #12]
 81152e4:	685b      	ldr	r3, [r3, #4]
 81152e6:	4618      	mov	r0, r3
 81152e8:	f7f6 fbbd 	bl	810ba66 <lwip_htonl>
 81152ec:	4603      	mov	r3, r0
 81152ee:	3301      	adds	r3, #1
 81152f0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 81152f2:	687b      	ldr	r3, [r7, #4]
 81152f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81152f6:	68fb      	ldr	r3, [r7, #12]
 81152f8:	1ad3      	subs	r3, r2, r3
 81152fa:	2b00      	cmp	r3, #0
 81152fc:	da02      	bge.n	8115304 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 81152fe:	687b      	ldr	r3, [r7, #4]
 8115300:	68fa      	ldr	r2, [r7, #12]
 8115302:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8115304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115308:	2200      	movs	r2, #0
 811530a:	69b9      	ldr	r1, [r7, #24]
 811530c:	6878      	ldr	r0, [r7, #4]
 811530e:	f7ff fdef 	bl	8114ef0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8115312:	687a      	ldr	r2, [r7, #4]
 8115314:	687b      	ldr	r3, [r7, #4]
 8115316:	3304      	adds	r3, #4
 8115318:	69b9      	ldr	r1, [r7, #24]
 811531a:	6878      	ldr	r0, [r7, #4]
 811531c:	f7ff fe26 	bl	8114f6c <tcp_output_control_segment>
 8115320:	4603      	mov	r3, r0
 8115322:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8115324:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8115328:	4618      	mov	r0, r3
 811532a:	372c      	adds	r7, #44	@ 0x2c
 811532c:	46bd      	mov	sp, r7
 811532e:	bd90      	pop	{r4, r7, pc}
 8115330:	0811978c 	.word	0x0811978c
 8115334:	08119fc4 	.word	0x08119fc4
 8115338:	08119820 	.word	0x08119820

0811533c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 811533c:	b580      	push	{r7, lr}
 811533e:	b084      	sub	sp, #16
 8115340:	af00      	add	r7, sp, #0
 8115342:	6078      	str	r0, [r7, #4]
 8115344:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8115346:	f000 fb01 	bl	811594c <sys_timeouts_sleeptime>
 811534a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 811534c:	68fb      	ldr	r3, [r7, #12]
 811534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115352:	d10b      	bne.n	811536c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8115354:	4813      	ldr	r0, [pc, #76]	@ (81153a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8115356:	f7fa fe6c 	bl	8110032 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 811535a:	2200      	movs	r2, #0
 811535c:	6839      	ldr	r1, [r7, #0]
 811535e:	6878      	ldr	r0, [r7, #4]
 8115360:	f7fa fdf4 	bl	810ff4c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8115364:	480f      	ldr	r0, [pc, #60]	@ (81153a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8115366:	f7fa fe55 	bl	8110014 <sys_mutex_lock>
    return;
 811536a:	e018      	b.n	811539e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 811536c:	68fb      	ldr	r3, [r7, #12]
 811536e:	2b00      	cmp	r3, #0
 8115370:	d102      	bne.n	8115378 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8115372:	f000 fab1 	bl	81158d8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8115376:	e7e6      	b.n	8115346 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8115378:	480a      	ldr	r0, [pc, #40]	@ (81153a4 <tcpip_timeouts_mbox_fetch+0x68>)
 811537a:	f7fa fe5a 	bl	8110032 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 811537e:	68fa      	ldr	r2, [r7, #12]
 8115380:	6839      	ldr	r1, [r7, #0]
 8115382:	6878      	ldr	r0, [r7, #4]
 8115384:	f7fa fde2 	bl	810ff4c <sys_arch_mbox_fetch>
 8115388:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 811538a:	4806      	ldr	r0, [pc, #24]	@ (81153a4 <tcpip_timeouts_mbox_fetch+0x68>)
 811538c:	f7fa fe42 	bl	8110014 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8115390:	68bb      	ldr	r3, [r7, #8]
 8115392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115396:	d102      	bne.n	811539e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8115398:	f000 fa9e 	bl	81158d8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 811539c:	e7d3      	b.n	8115346 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 811539e:	3710      	adds	r7, #16
 81153a0:	46bd      	mov	sp, r7
 81153a2:	bd80      	pop	{r7, pc}
 81153a4:	1000b8a8 	.word	0x1000b8a8

081153a8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 81153a8:	b580      	push	{r7, lr}
 81153aa:	b084      	sub	sp, #16
 81153ac:	af00      	add	r7, sp, #0
 81153ae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 81153b0:	4810      	ldr	r0, [pc, #64]	@ (81153f4 <tcpip_thread+0x4c>)
 81153b2:	f7fa fe2f 	bl	8110014 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 81153b6:	4b10      	ldr	r3, [pc, #64]	@ (81153f8 <tcpip_thread+0x50>)
 81153b8:	681b      	ldr	r3, [r3, #0]
 81153ba:	2b00      	cmp	r3, #0
 81153bc:	d005      	beq.n	81153ca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 81153be:	4b0e      	ldr	r3, [pc, #56]	@ (81153f8 <tcpip_thread+0x50>)
 81153c0:	681b      	ldr	r3, [r3, #0]
 81153c2:	4a0e      	ldr	r2, [pc, #56]	@ (81153fc <tcpip_thread+0x54>)
 81153c4:	6812      	ldr	r2, [r2, #0]
 81153c6:	4610      	mov	r0, r2
 81153c8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 81153ca:	f107 030c 	add.w	r3, r7, #12
 81153ce:	4619      	mov	r1, r3
 81153d0:	480b      	ldr	r0, [pc, #44]	@ (8115400 <tcpip_thread+0x58>)
 81153d2:	f7ff ffb3 	bl	811533c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 81153d6:	68fb      	ldr	r3, [r7, #12]
 81153d8:	2b00      	cmp	r3, #0
 81153da:	d106      	bne.n	81153ea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 81153dc:	4b09      	ldr	r3, [pc, #36]	@ (8115404 <tcpip_thread+0x5c>)
 81153de:	2291      	movs	r2, #145	@ 0x91
 81153e0:	4909      	ldr	r1, [pc, #36]	@ (8115408 <tcpip_thread+0x60>)
 81153e2:	480a      	ldr	r0, [pc, #40]	@ (811540c <tcpip_thread+0x64>)
 81153e4:	f001 fa80 	bl	81168e8 <iprintf>
      continue;
 81153e8:	e003      	b.n	81153f2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 81153ea:	68fb      	ldr	r3, [r7, #12]
 81153ec:	4618      	mov	r0, r3
 81153ee:	f000 f80f 	bl	8115410 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 81153f2:	e7ea      	b.n	81153ca <tcpip_thread+0x22>
 81153f4:	1000b8a8 	.word	0x1000b8a8
 81153f8:	1000b89c 	.word	0x1000b89c
 81153fc:	1000b8a0 	.word	0x1000b8a0
 8115400:	1000b8a4 	.word	0x1000b8a4
 8115404:	08119fe8 	.word	0x08119fe8
 8115408:	0811a058 	.word	0x0811a058
 811540c:	0811a078 	.word	0x0811a078

08115410 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8115410:	b580      	push	{r7, lr}
 8115412:	b082      	sub	sp, #8
 8115414:	af00      	add	r7, sp, #0
 8115416:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8115418:	687b      	ldr	r3, [r7, #4]
 811541a:	781b      	ldrb	r3, [r3, #0]
 811541c:	2b02      	cmp	r3, #2
 811541e:	d026      	beq.n	811546e <tcpip_thread_handle_msg+0x5e>
 8115420:	2b02      	cmp	r3, #2
 8115422:	dc2b      	bgt.n	811547c <tcpip_thread_handle_msg+0x6c>
 8115424:	2b00      	cmp	r3, #0
 8115426:	d002      	beq.n	811542e <tcpip_thread_handle_msg+0x1e>
 8115428:	2b01      	cmp	r3, #1
 811542a:	d015      	beq.n	8115458 <tcpip_thread_handle_msg+0x48>
 811542c:	e026      	b.n	811547c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 811542e:	687b      	ldr	r3, [r7, #4]
 8115430:	68db      	ldr	r3, [r3, #12]
 8115432:	687a      	ldr	r2, [r7, #4]
 8115434:	6850      	ldr	r0, [r2, #4]
 8115436:	687a      	ldr	r2, [r7, #4]
 8115438:	6892      	ldr	r2, [r2, #8]
 811543a:	4611      	mov	r1, r2
 811543c:	4798      	blx	r3
 811543e:	4603      	mov	r3, r0
 8115440:	2b00      	cmp	r3, #0
 8115442:	d004      	beq.n	811544e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8115444:	687b      	ldr	r3, [r7, #4]
 8115446:	685b      	ldr	r3, [r3, #4]
 8115448:	4618      	mov	r0, r3
 811544a:	f7fa faa1 	bl	810f990 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 811544e:	6879      	ldr	r1, [r7, #4]
 8115450:	2009      	movs	r0, #9
 8115452:	f7f9 fbf5 	bl	810ec40 <memp_free>
      break;
 8115456:	e018      	b.n	811548a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8115458:	687b      	ldr	r3, [r7, #4]
 811545a:	685b      	ldr	r3, [r3, #4]
 811545c:	687a      	ldr	r2, [r7, #4]
 811545e:	6892      	ldr	r2, [r2, #8]
 8115460:	4610      	mov	r0, r2
 8115462:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8115464:	6879      	ldr	r1, [r7, #4]
 8115466:	2008      	movs	r0, #8
 8115468:	f7f9 fbea 	bl	810ec40 <memp_free>
      break;
 811546c:	e00d      	b.n	811548a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 811546e:	687b      	ldr	r3, [r7, #4]
 8115470:	685b      	ldr	r3, [r3, #4]
 8115472:	687a      	ldr	r2, [r7, #4]
 8115474:	6892      	ldr	r2, [r2, #8]
 8115476:	4610      	mov	r0, r2
 8115478:	4798      	blx	r3
      break;
 811547a:	e006      	b.n	811548a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 811547c:	4b05      	ldr	r3, [pc, #20]	@ (8115494 <tcpip_thread_handle_msg+0x84>)
 811547e:	22cf      	movs	r2, #207	@ 0xcf
 8115480:	4905      	ldr	r1, [pc, #20]	@ (8115498 <tcpip_thread_handle_msg+0x88>)
 8115482:	4806      	ldr	r0, [pc, #24]	@ (811549c <tcpip_thread_handle_msg+0x8c>)
 8115484:	f001 fa30 	bl	81168e8 <iprintf>
      break;
 8115488:	bf00      	nop
  }
}
 811548a:	bf00      	nop
 811548c:	3708      	adds	r7, #8
 811548e:	46bd      	mov	sp, r7
 8115490:	bd80      	pop	{r7, pc}
 8115492:	bf00      	nop
 8115494:	08119fe8 	.word	0x08119fe8
 8115498:	0811a058 	.word	0x0811a058
 811549c:	0811a078 	.word	0x0811a078

081154a0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 81154a0:	b580      	push	{r7, lr}
 81154a2:	b086      	sub	sp, #24
 81154a4:	af00      	add	r7, sp, #0
 81154a6:	60f8      	str	r0, [r7, #12]
 81154a8:	60b9      	str	r1, [r7, #8]
 81154aa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 81154ac:	481a      	ldr	r0, [pc, #104]	@ (8115518 <tcpip_inpkt+0x78>)
 81154ae:	f7fa fd7e 	bl	810ffae <sys_mbox_valid>
 81154b2:	4603      	mov	r3, r0
 81154b4:	2b00      	cmp	r3, #0
 81154b6:	d105      	bne.n	81154c4 <tcpip_inpkt+0x24>
 81154b8:	4b18      	ldr	r3, [pc, #96]	@ (811551c <tcpip_inpkt+0x7c>)
 81154ba:	22fc      	movs	r2, #252	@ 0xfc
 81154bc:	4918      	ldr	r1, [pc, #96]	@ (8115520 <tcpip_inpkt+0x80>)
 81154be:	4819      	ldr	r0, [pc, #100]	@ (8115524 <tcpip_inpkt+0x84>)
 81154c0:	f001 fa12 	bl	81168e8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 81154c4:	2009      	movs	r0, #9
 81154c6:	f7f9 fb45 	bl	810eb54 <memp_malloc>
 81154ca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 81154cc:	697b      	ldr	r3, [r7, #20]
 81154ce:	2b00      	cmp	r3, #0
 81154d0:	d102      	bne.n	81154d8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 81154d2:	f04f 33ff 	mov.w	r3, #4294967295
 81154d6:	e01a      	b.n	811550e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 81154d8:	697b      	ldr	r3, [r7, #20]
 81154da:	2200      	movs	r2, #0
 81154dc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 81154de:	697b      	ldr	r3, [r7, #20]
 81154e0:	68fa      	ldr	r2, [r7, #12]
 81154e2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 81154e4:	697b      	ldr	r3, [r7, #20]
 81154e6:	68ba      	ldr	r2, [r7, #8]
 81154e8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 81154ea:	697b      	ldr	r3, [r7, #20]
 81154ec:	687a      	ldr	r2, [r7, #4]
 81154ee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 81154f0:	6979      	ldr	r1, [r7, #20]
 81154f2:	4809      	ldr	r0, [pc, #36]	@ (8115518 <tcpip_inpkt+0x78>)
 81154f4:	f7fa fd10 	bl	810ff18 <sys_mbox_trypost>
 81154f8:	4603      	mov	r3, r0
 81154fa:	2b00      	cmp	r3, #0
 81154fc:	d006      	beq.n	811550c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 81154fe:	6979      	ldr	r1, [r7, #20]
 8115500:	2009      	movs	r0, #9
 8115502:	f7f9 fb9d 	bl	810ec40 <memp_free>
    return ERR_MEM;
 8115506:	f04f 33ff 	mov.w	r3, #4294967295
 811550a:	e000      	b.n	811550e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 811550c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 811550e:	4618      	mov	r0, r3
 8115510:	3718      	adds	r7, #24
 8115512:	46bd      	mov	sp, r7
 8115514:	bd80      	pop	{r7, pc}
 8115516:	bf00      	nop
 8115518:	1000b8a4 	.word	0x1000b8a4
 811551c:	08119fe8 	.word	0x08119fe8
 8115520:	0811a0a0 	.word	0x0811a0a0
 8115524:	0811a078 	.word	0x0811a078

08115528 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8115528:	b580      	push	{r7, lr}
 811552a:	b082      	sub	sp, #8
 811552c:	af00      	add	r7, sp, #0
 811552e:	6078      	str	r0, [r7, #4]
 8115530:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8115532:	683b      	ldr	r3, [r7, #0]
 8115534:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115538:	f003 0318 	and.w	r3, r3, #24
 811553c:	2b00      	cmp	r3, #0
 811553e:	d006      	beq.n	811554e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8115540:	4a08      	ldr	r2, [pc, #32]	@ (8115564 <tcpip_input+0x3c>)
 8115542:	6839      	ldr	r1, [r7, #0]
 8115544:	6878      	ldr	r0, [r7, #4]
 8115546:	f7ff ffab 	bl	81154a0 <tcpip_inpkt>
 811554a:	4603      	mov	r3, r0
 811554c:	e005      	b.n	811555a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 811554e:	4a06      	ldr	r2, [pc, #24]	@ (8115568 <tcpip_input+0x40>)
 8115550:	6839      	ldr	r1, [r7, #0]
 8115552:	6878      	ldr	r0, [r7, #4]
 8115554:	f7ff ffa4 	bl	81154a0 <tcpip_inpkt>
 8115558:	4603      	mov	r3, r0
}
 811555a:	4618      	mov	r0, r3
 811555c:	3708      	adds	r7, #8
 811555e:	46bd      	mov	sp, r7
 8115560:	bd80      	pop	{r7, pc}
 8115562:	bf00      	nop
 8115564:	0810c931 	.word	0x0810c931
 8115568:	0810d121 	.word	0x0810d121

0811556c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 811556c:	b580      	push	{r7, lr}
 811556e:	b084      	sub	sp, #16
 8115570:	af00      	add	r7, sp, #0
 8115572:	6078      	str	r0, [r7, #4]
 8115574:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8115576:	4819      	ldr	r0, [pc, #100]	@ (81155dc <tcpip_try_callback+0x70>)
 8115578:	f7fa fd19 	bl	810ffae <sys_mbox_valid>
 811557c:	4603      	mov	r3, r0
 811557e:	2b00      	cmp	r3, #0
 8115580:	d106      	bne.n	8115590 <tcpip_try_callback+0x24>
 8115582:	4b17      	ldr	r3, [pc, #92]	@ (81155e0 <tcpip_try_callback+0x74>)
 8115584:	f240 125d 	movw	r2, #349	@ 0x15d
 8115588:	4916      	ldr	r1, [pc, #88]	@ (81155e4 <tcpip_try_callback+0x78>)
 811558a:	4817      	ldr	r0, [pc, #92]	@ (81155e8 <tcpip_try_callback+0x7c>)
 811558c:	f001 f9ac 	bl	81168e8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8115590:	2008      	movs	r0, #8
 8115592:	f7f9 fadf 	bl	810eb54 <memp_malloc>
 8115596:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8115598:	68fb      	ldr	r3, [r7, #12]
 811559a:	2b00      	cmp	r3, #0
 811559c:	d102      	bne.n	81155a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 811559e:	f04f 33ff 	mov.w	r3, #4294967295
 81155a2:	e017      	b.n	81155d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 81155a4:	68fb      	ldr	r3, [r7, #12]
 81155a6:	2201      	movs	r2, #1
 81155a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 81155aa:	68fb      	ldr	r3, [r7, #12]
 81155ac:	687a      	ldr	r2, [r7, #4]
 81155ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 81155b0:	68fb      	ldr	r3, [r7, #12]
 81155b2:	683a      	ldr	r2, [r7, #0]
 81155b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 81155b6:	68f9      	ldr	r1, [r7, #12]
 81155b8:	4808      	ldr	r0, [pc, #32]	@ (81155dc <tcpip_try_callback+0x70>)
 81155ba:	f7fa fcad 	bl	810ff18 <sys_mbox_trypost>
 81155be:	4603      	mov	r3, r0
 81155c0:	2b00      	cmp	r3, #0
 81155c2:	d006      	beq.n	81155d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 81155c4:	68f9      	ldr	r1, [r7, #12]
 81155c6:	2008      	movs	r0, #8
 81155c8:	f7f9 fb3a 	bl	810ec40 <memp_free>
    return ERR_MEM;
 81155cc:	f04f 33ff 	mov.w	r3, #4294967295
 81155d0:	e000      	b.n	81155d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 81155d2:	2300      	movs	r3, #0
}
 81155d4:	4618      	mov	r0, r3
 81155d6:	3710      	adds	r7, #16
 81155d8:	46bd      	mov	sp, r7
 81155da:	bd80      	pop	{r7, pc}
 81155dc:	1000b8a4 	.word	0x1000b8a4
 81155e0:	08119fe8 	.word	0x08119fe8
 81155e4:	0811a0a0 	.word	0x0811a0a0
 81155e8:	0811a078 	.word	0x0811a078

081155ec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 81155ec:	b580      	push	{r7, lr}
 81155ee:	b084      	sub	sp, #16
 81155f0:	af02      	add	r7, sp, #8
 81155f2:	6078      	str	r0, [r7, #4]
 81155f4:	6039      	str	r1, [r7, #0]
  lwip_init();
 81155f6:	f7f7 fce1 	bl	810cfbc <lwip_init>

  tcpip_init_done = initfunc;
 81155fa:	4a17      	ldr	r2, [pc, #92]	@ (8115658 <tcpip_init+0x6c>)
 81155fc:	687b      	ldr	r3, [r7, #4]
 81155fe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8115600:	4a16      	ldr	r2, [pc, #88]	@ (811565c <tcpip_init+0x70>)
 8115602:	683b      	ldr	r3, [r7, #0]
 8115604:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8115606:	2106      	movs	r1, #6
 8115608:	4815      	ldr	r0, [pc, #84]	@ (8115660 <tcpip_init+0x74>)
 811560a:	f7fa fc6b 	bl	810fee4 <sys_mbox_new>
 811560e:	4603      	mov	r3, r0
 8115610:	2b00      	cmp	r3, #0
 8115612:	d006      	beq.n	8115622 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8115614:	4b13      	ldr	r3, [pc, #76]	@ (8115664 <tcpip_init+0x78>)
 8115616:	f240 2261 	movw	r2, #609	@ 0x261
 811561a:	4913      	ldr	r1, [pc, #76]	@ (8115668 <tcpip_init+0x7c>)
 811561c:	4813      	ldr	r0, [pc, #76]	@ (811566c <tcpip_init+0x80>)
 811561e:	f001 f963 	bl	81168e8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8115622:	4813      	ldr	r0, [pc, #76]	@ (8115670 <tcpip_init+0x84>)
 8115624:	f7fa fce0 	bl	810ffe8 <sys_mutex_new>
 8115628:	4603      	mov	r3, r0
 811562a:	2b00      	cmp	r3, #0
 811562c:	d006      	beq.n	811563c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 811562e:	4b0d      	ldr	r3, [pc, #52]	@ (8115664 <tcpip_init+0x78>)
 8115630:	f240 2265 	movw	r2, #613	@ 0x265
 8115634:	490f      	ldr	r1, [pc, #60]	@ (8115674 <tcpip_init+0x88>)
 8115636:	480d      	ldr	r0, [pc, #52]	@ (811566c <tcpip_init+0x80>)
 8115638:	f001 f956 	bl	81168e8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 811563c:	2318      	movs	r3, #24
 811563e:	9300      	str	r3, [sp, #0]
 8115640:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8115644:	2200      	movs	r2, #0
 8115646:	490c      	ldr	r1, [pc, #48]	@ (8115678 <tcpip_init+0x8c>)
 8115648:	480c      	ldr	r0, [pc, #48]	@ (811567c <tcpip_init+0x90>)
 811564a:	f7fa fcff 	bl	811004c <sys_thread_new>
}
 811564e:	bf00      	nop
 8115650:	3708      	adds	r7, #8
 8115652:	46bd      	mov	sp, r7
 8115654:	bd80      	pop	{r7, pc}
 8115656:	bf00      	nop
 8115658:	1000b89c 	.word	0x1000b89c
 811565c:	1000b8a0 	.word	0x1000b8a0
 8115660:	1000b8a4 	.word	0x1000b8a4
 8115664:	08119fe8 	.word	0x08119fe8
 8115668:	0811a0b0 	.word	0x0811a0b0
 811566c:	0811a078 	.word	0x0811a078
 8115670:	1000b8a8 	.word	0x1000b8a8
 8115674:	0811a0d4 	.word	0x0811a0d4
 8115678:	081153a9 	.word	0x081153a9
 811567c:	0811a0f8 	.word	0x0811a0f8

08115680 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8115680:	b580      	push	{r7, lr}
 8115682:	b082      	sub	sp, #8
 8115684:	af00      	add	r7, sp, #0
 8115686:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8115688:	f7fa fd68 	bl	811015c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 811568c:	4b0a      	ldr	r3, [pc, #40]	@ (81156b8 <tcpip_tcp_timer+0x38>)
 811568e:	681b      	ldr	r3, [r3, #0]
 8115690:	2b00      	cmp	r3, #0
 8115692:	d103      	bne.n	811569c <tcpip_tcp_timer+0x1c>
 8115694:	4b09      	ldr	r3, [pc, #36]	@ (81156bc <tcpip_tcp_timer+0x3c>)
 8115696:	681b      	ldr	r3, [r3, #0]
 8115698:	2b00      	cmp	r3, #0
 811569a:	d005      	beq.n	81156a8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 811569c:	2200      	movs	r2, #0
 811569e:	4908      	ldr	r1, [pc, #32]	@ (81156c0 <tcpip_tcp_timer+0x40>)
 81156a0:	20fa      	movs	r0, #250	@ 0xfa
 81156a2:	f000 f8f3 	bl	811588c <sys_timeout>
 81156a6:	e003      	b.n	81156b0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 81156a8:	4b06      	ldr	r3, [pc, #24]	@ (81156c4 <tcpip_tcp_timer+0x44>)
 81156aa:	2200      	movs	r2, #0
 81156ac:	601a      	str	r2, [r3, #0]
  }
}
 81156ae:	bf00      	nop
 81156b0:	bf00      	nop
 81156b2:	3708      	adds	r7, #8
 81156b4:	46bd      	mov	sp, r7
 81156b6:	bd80      	pop	{r7, pc}
 81156b8:	1000b858 	.word	0x1000b858
 81156bc:	1000b85c 	.word	0x1000b85c
 81156c0:	08115681 	.word	0x08115681
 81156c4:	1000b8b4 	.word	0x1000b8b4

081156c8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 81156c8:	b580      	push	{r7, lr}
 81156ca:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 81156cc:	4b0a      	ldr	r3, [pc, #40]	@ (81156f8 <tcp_timer_needed+0x30>)
 81156ce:	681b      	ldr	r3, [r3, #0]
 81156d0:	2b00      	cmp	r3, #0
 81156d2:	d10f      	bne.n	81156f4 <tcp_timer_needed+0x2c>
 81156d4:	4b09      	ldr	r3, [pc, #36]	@ (81156fc <tcp_timer_needed+0x34>)
 81156d6:	681b      	ldr	r3, [r3, #0]
 81156d8:	2b00      	cmp	r3, #0
 81156da:	d103      	bne.n	81156e4 <tcp_timer_needed+0x1c>
 81156dc:	4b08      	ldr	r3, [pc, #32]	@ (8115700 <tcp_timer_needed+0x38>)
 81156de:	681b      	ldr	r3, [r3, #0]
 81156e0:	2b00      	cmp	r3, #0
 81156e2:	d007      	beq.n	81156f4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 81156e4:	4b04      	ldr	r3, [pc, #16]	@ (81156f8 <tcp_timer_needed+0x30>)
 81156e6:	2201      	movs	r2, #1
 81156e8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 81156ea:	2200      	movs	r2, #0
 81156ec:	4905      	ldr	r1, [pc, #20]	@ (8115704 <tcp_timer_needed+0x3c>)
 81156ee:	20fa      	movs	r0, #250	@ 0xfa
 81156f0:	f000 f8cc 	bl	811588c <sys_timeout>
  }
}
 81156f4:	bf00      	nop
 81156f6:	bd80      	pop	{r7, pc}
 81156f8:	1000b8b4 	.word	0x1000b8b4
 81156fc:	1000b858 	.word	0x1000b858
 8115700:	1000b85c 	.word	0x1000b85c
 8115704:	08115681 	.word	0x08115681

08115708 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8115708:	b580      	push	{r7, lr}
 811570a:	b086      	sub	sp, #24
 811570c:	af00      	add	r7, sp, #0
 811570e:	60f8      	str	r0, [r7, #12]
 8115710:	60b9      	str	r1, [r7, #8]
 8115712:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8115714:	200a      	movs	r0, #10
 8115716:	f7f9 fa1d 	bl	810eb54 <memp_malloc>
 811571a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 811571c:	693b      	ldr	r3, [r7, #16]
 811571e:	2b00      	cmp	r3, #0
 8115720:	d109      	bne.n	8115736 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8115722:	693b      	ldr	r3, [r7, #16]
 8115724:	2b00      	cmp	r3, #0
 8115726:	d151      	bne.n	81157cc <sys_timeout_abs+0xc4>
 8115728:	4b2a      	ldr	r3, [pc, #168]	@ (81157d4 <sys_timeout_abs+0xcc>)
 811572a:	22be      	movs	r2, #190	@ 0xbe
 811572c:	492a      	ldr	r1, [pc, #168]	@ (81157d8 <sys_timeout_abs+0xd0>)
 811572e:	482b      	ldr	r0, [pc, #172]	@ (81157dc <sys_timeout_abs+0xd4>)
 8115730:	f001 f8da 	bl	81168e8 <iprintf>
    return;
 8115734:	e04a      	b.n	81157cc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8115736:	693b      	ldr	r3, [r7, #16]
 8115738:	2200      	movs	r2, #0
 811573a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 811573c:	693b      	ldr	r3, [r7, #16]
 811573e:	68ba      	ldr	r2, [r7, #8]
 8115740:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8115742:	693b      	ldr	r3, [r7, #16]
 8115744:	687a      	ldr	r2, [r7, #4]
 8115746:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8115748:	693b      	ldr	r3, [r7, #16]
 811574a:	68fa      	ldr	r2, [r7, #12]
 811574c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 811574e:	4b24      	ldr	r3, [pc, #144]	@ (81157e0 <sys_timeout_abs+0xd8>)
 8115750:	681b      	ldr	r3, [r3, #0]
 8115752:	2b00      	cmp	r3, #0
 8115754:	d103      	bne.n	811575e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8115756:	4a22      	ldr	r2, [pc, #136]	@ (81157e0 <sys_timeout_abs+0xd8>)
 8115758:	693b      	ldr	r3, [r7, #16]
 811575a:	6013      	str	r3, [r2, #0]
    return;
 811575c:	e037      	b.n	81157ce <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 811575e:	693b      	ldr	r3, [r7, #16]
 8115760:	685a      	ldr	r2, [r3, #4]
 8115762:	4b1f      	ldr	r3, [pc, #124]	@ (81157e0 <sys_timeout_abs+0xd8>)
 8115764:	681b      	ldr	r3, [r3, #0]
 8115766:	685b      	ldr	r3, [r3, #4]
 8115768:	1ad3      	subs	r3, r2, r3
 811576a:	0fdb      	lsrs	r3, r3, #31
 811576c:	f003 0301 	and.w	r3, r3, #1
 8115770:	b2db      	uxtb	r3, r3
 8115772:	2b00      	cmp	r3, #0
 8115774:	d007      	beq.n	8115786 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8115776:	4b1a      	ldr	r3, [pc, #104]	@ (81157e0 <sys_timeout_abs+0xd8>)
 8115778:	681a      	ldr	r2, [r3, #0]
 811577a:	693b      	ldr	r3, [r7, #16]
 811577c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 811577e:	4a18      	ldr	r2, [pc, #96]	@ (81157e0 <sys_timeout_abs+0xd8>)
 8115780:	693b      	ldr	r3, [r7, #16]
 8115782:	6013      	str	r3, [r2, #0]
 8115784:	e023      	b.n	81157ce <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8115786:	4b16      	ldr	r3, [pc, #88]	@ (81157e0 <sys_timeout_abs+0xd8>)
 8115788:	681b      	ldr	r3, [r3, #0]
 811578a:	617b      	str	r3, [r7, #20]
 811578c:	e01a      	b.n	81157c4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 811578e:	697b      	ldr	r3, [r7, #20]
 8115790:	681b      	ldr	r3, [r3, #0]
 8115792:	2b00      	cmp	r3, #0
 8115794:	d00b      	beq.n	81157ae <sys_timeout_abs+0xa6>
 8115796:	693b      	ldr	r3, [r7, #16]
 8115798:	685a      	ldr	r2, [r3, #4]
 811579a:	697b      	ldr	r3, [r7, #20]
 811579c:	681b      	ldr	r3, [r3, #0]
 811579e:	685b      	ldr	r3, [r3, #4]
 81157a0:	1ad3      	subs	r3, r2, r3
 81157a2:	0fdb      	lsrs	r3, r3, #31
 81157a4:	f003 0301 	and.w	r3, r3, #1
 81157a8:	b2db      	uxtb	r3, r3
 81157aa:	2b00      	cmp	r3, #0
 81157ac:	d007      	beq.n	81157be <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 81157ae:	697b      	ldr	r3, [r7, #20]
 81157b0:	681a      	ldr	r2, [r3, #0]
 81157b2:	693b      	ldr	r3, [r7, #16]
 81157b4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 81157b6:	697b      	ldr	r3, [r7, #20]
 81157b8:	693a      	ldr	r2, [r7, #16]
 81157ba:	601a      	str	r2, [r3, #0]
        break;
 81157bc:	e007      	b.n	81157ce <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 81157be:	697b      	ldr	r3, [r7, #20]
 81157c0:	681b      	ldr	r3, [r3, #0]
 81157c2:	617b      	str	r3, [r7, #20]
 81157c4:	697b      	ldr	r3, [r7, #20]
 81157c6:	2b00      	cmp	r3, #0
 81157c8:	d1e1      	bne.n	811578e <sys_timeout_abs+0x86>
 81157ca:	e000      	b.n	81157ce <sys_timeout_abs+0xc6>
    return;
 81157cc:	bf00      	nop
      }
    }
  }
}
 81157ce:	3718      	adds	r7, #24
 81157d0:	46bd      	mov	sp, r7
 81157d2:	bd80      	pop	{r7, pc}
 81157d4:	0811a108 	.word	0x0811a108
 81157d8:	0811a17c 	.word	0x0811a17c
 81157dc:	0811a1bc 	.word	0x0811a1bc
 81157e0:	1000b8ac 	.word	0x1000b8ac

081157e4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 81157e4:	b580      	push	{r7, lr}
 81157e6:	b086      	sub	sp, #24
 81157e8:	af00      	add	r7, sp, #0
 81157ea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 81157ec:	687b      	ldr	r3, [r7, #4]
 81157ee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 81157f0:	697b      	ldr	r3, [r7, #20]
 81157f2:	685b      	ldr	r3, [r3, #4]
 81157f4:	4798      	blx	r3

  now = sys_now();
 81157f6:	f7ee fab3 	bl	8103d60 <sys_now>
 81157fa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 81157fc:	697b      	ldr	r3, [r7, #20]
 81157fe:	681a      	ldr	r2, [r3, #0]
 8115800:	4b0f      	ldr	r3, [pc, #60]	@ (8115840 <lwip_cyclic_timer+0x5c>)
 8115802:	681b      	ldr	r3, [r3, #0]
 8115804:	4413      	add	r3, r2
 8115806:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8115808:	68fa      	ldr	r2, [r7, #12]
 811580a:	693b      	ldr	r3, [r7, #16]
 811580c:	1ad3      	subs	r3, r2, r3
 811580e:	0fdb      	lsrs	r3, r3, #31
 8115810:	f003 0301 	and.w	r3, r3, #1
 8115814:	b2db      	uxtb	r3, r3
 8115816:	2b00      	cmp	r3, #0
 8115818:	d009      	beq.n	811582e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 811581a:	697b      	ldr	r3, [r7, #20]
 811581c:	681a      	ldr	r2, [r3, #0]
 811581e:	693b      	ldr	r3, [r7, #16]
 8115820:	4413      	add	r3, r2
 8115822:	687a      	ldr	r2, [r7, #4]
 8115824:	4907      	ldr	r1, [pc, #28]	@ (8115844 <lwip_cyclic_timer+0x60>)
 8115826:	4618      	mov	r0, r3
 8115828:	f7ff ff6e 	bl	8115708 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 811582c:	e004      	b.n	8115838 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 811582e:	687a      	ldr	r2, [r7, #4]
 8115830:	4904      	ldr	r1, [pc, #16]	@ (8115844 <lwip_cyclic_timer+0x60>)
 8115832:	68f8      	ldr	r0, [r7, #12]
 8115834:	f7ff ff68 	bl	8115708 <sys_timeout_abs>
}
 8115838:	bf00      	nop
 811583a:	3718      	adds	r7, #24
 811583c:	46bd      	mov	sp, r7
 811583e:	bd80      	pop	{r7, pc}
 8115840:	1000b8b0 	.word	0x1000b8b0
 8115844:	081157e5 	.word	0x081157e5

08115848 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8115848:	b580      	push	{r7, lr}
 811584a:	b082      	sub	sp, #8
 811584c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 811584e:	2301      	movs	r3, #1
 8115850:	607b      	str	r3, [r7, #4]
 8115852:	e00e      	b.n	8115872 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8115854:	4a0b      	ldr	r2, [pc, #44]	@ (8115884 <sys_timeouts_init+0x3c>)
 8115856:	687b      	ldr	r3, [r7, #4]
 8115858:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 811585c:	687b      	ldr	r3, [r7, #4]
 811585e:	00db      	lsls	r3, r3, #3
 8115860:	4a08      	ldr	r2, [pc, #32]	@ (8115884 <sys_timeouts_init+0x3c>)
 8115862:	4413      	add	r3, r2
 8115864:	461a      	mov	r2, r3
 8115866:	4908      	ldr	r1, [pc, #32]	@ (8115888 <sys_timeouts_init+0x40>)
 8115868:	f000 f810 	bl	811588c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 811586c:	687b      	ldr	r3, [r7, #4]
 811586e:	3301      	adds	r3, #1
 8115870:	607b      	str	r3, [r7, #4]
 8115872:	687b      	ldr	r3, [r7, #4]
 8115874:	2b02      	cmp	r3, #2
 8115876:	d9ed      	bls.n	8115854 <sys_timeouts_init+0xc>
  }
}
 8115878:	bf00      	nop
 811587a:	bf00      	nop
 811587c:	3708      	adds	r7, #8
 811587e:	46bd      	mov	sp, r7
 8115880:	bd80      	pop	{r7, pc}
 8115882:	bf00      	nop
 8115884:	0811a76c 	.word	0x0811a76c
 8115888:	081157e5 	.word	0x081157e5

0811588c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 811588c:	b580      	push	{r7, lr}
 811588e:	b086      	sub	sp, #24
 8115890:	af00      	add	r7, sp, #0
 8115892:	60f8      	str	r0, [r7, #12]
 8115894:	60b9      	str	r1, [r7, #8]
 8115896:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8115898:	68fb      	ldr	r3, [r7, #12]
 811589a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 811589e:	d306      	bcc.n	81158ae <sys_timeout+0x22>
 81158a0:	4b0a      	ldr	r3, [pc, #40]	@ (81158cc <sys_timeout+0x40>)
 81158a2:	f240 1229 	movw	r2, #297	@ 0x129
 81158a6:	490a      	ldr	r1, [pc, #40]	@ (81158d0 <sys_timeout+0x44>)
 81158a8:	480a      	ldr	r0, [pc, #40]	@ (81158d4 <sys_timeout+0x48>)
 81158aa:	f001 f81d 	bl	81168e8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 81158ae:	f7ee fa57 	bl	8103d60 <sys_now>
 81158b2:	4602      	mov	r2, r0
 81158b4:	68fb      	ldr	r3, [r7, #12]
 81158b6:	4413      	add	r3, r2
 81158b8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 81158ba:	687a      	ldr	r2, [r7, #4]
 81158bc:	68b9      	ldr	r1, [r7, #8]
 81158be:	6978      	ldr	r0, [r7, #20]
 81158c0:	f7ff ff22 	bl	8115708 <sys_timeout_abs>
#endif
}
 81158c4:	bf00      	nop
 81158c6:	3718      	adds	r7, #24
 81158c8:	46bd      	mov	sp, r7
 81158ca:	bd80      	pop	{r7, pc}
 81158cc:	0811a108 	.word	0x0811a108
 81158d0:	0811a1e4 	.word	0x0811a1e4
 81158d4:	0811a1bc 	.word	0x0811a1bc

081158d8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 81158d8:	b580      	push	{r7, lr}
 81158da:	b084      	sub	sp, #16
 81158dc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 81158de:	f7ee fa3f 	bl	8103d60 <sys_now>
 81158e2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 81158e4:	4b17      	ldr	r3, [pc, #92]	@ (8115944 <sys_check_timeouts+0x6c>)
 81158e6:	681b      	ldr	r3, [r3, #0]
 81158e8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 81158ea:	68bb      	ldr	r3, [r7, #8]
 81158ec:	2b00      	cmp	r3, #0
 81158ee:	d022      	beq.n	8115936 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 81158f0:	68bb      	ldr	r3, [r7, #8]
 81158f2:	685b      	ldr	r3, [r3, #4]
 81158f4:	68fa      	ldr	r2, [r7, #12]
 81158f6:	1ad3      	subs	r3, r2, r3
 81158f8:	0fdb      	lsrs	r3, r3, #31
 81158fa:	f003 0301 	and.w	r3, r3, #1
 81158fe:	b2db      	uxtb	r3, r3
 8115900:	2b00      	cmp	r3, #0
 8115902:	d11a      	bne.n	811593a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8115904:	68bb      	ldr	r3, [r7, #8]
 8115906:	681b      	ldr	r3, [r3, #0]
 8115908:	4a0e      	ldr	r2, [pc, #56]	@ (8115944 <sys_check_timeouts+0x6c>)
 811590a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 811590c:	68bb      	ldr	r3, [r7, #8]
 811590e:	689b      	ldr	r3, [r3, #8]
 8115910:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8115912:	68bb      	ldr	r3, [r7, #8]
 8115914:	68db      	ldr	r3, [r3, #12]
 8115916:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8115918:	68bb      	ldr	r3, [r7, #8]
 811591a:	685b      	ldr	r3, [r3, #4]
 811591c:	4a0a      	ldr	r2, [pc, #40]	@ (8115948 <sys_check_timeouts+0x70>)
 811591e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8115920:	68b9      	ldr	r1, [r7, #8]
 8115922:	200a      	movs	r0, #10
 8115924:	f7f9 f98c 	bl	810ec40 <memp_free>
    if (handler != NULL) {
 8115928:	687b      	ldr	r3, [r7, #4]
 811592a:	2b00      	cmp	r3, #0
 811592c:	d0da      	beq.n	81158e4 <sys_check_timeouts+0xc>
      handler(arg);
 811592e:	687b      	ldr	r3, [r7, #4]
 8115930:	6838      	ldr	r0, [r7, #0]
 8115932:	4798      	blx	r3
  do {
 8115934:	e7d6      	b.n	81158e4 <sys_check_timeouts+0xc>
      return;
 8115936:	bf00      	nop
 8115938:	e000      	b.n	811593c <sys_check_timeouts+0x64>
      return;
 811593a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 811593c:	3710      	adds	r7, #16
 811593e:	46bd      	mov	sp, r7
 8115940:	bd80      	pop	{r7, pc}
 8115942:	bf00      	nop
 8115944:	1000b8ac 	.word	0x1000b8ac
 8115948:	1000b8b0 	.word	0x1000b8b0

0811594c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 811594c:	b580      	push	{r7, lr}
 811594e:	b082      	sub	sp, #8
 8115950:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8115952:	4b16      	ldr	r3, [pc, #88]	@ (81159ac <sys_timeouts_sleeptime+0x60>)
 8115954:	681b      	ldr	r3, [r3, #0]
 8115956:	2b00      	cmp	r3, #0
 8115958:	d102      	bne.n	8115960 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 811595a:	f04f 33ff 	mov.w	r3, #4294967295
 811595e:	e020      	b.n	81159a2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8115960:	f7ee f9fe 	bl	8103d60 <sys_now>
 8115964:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8115966:	4b11      	ldr	r3, [pc, #68]	@ (81159ac <sys_timeouts_sleeptime+0x60>)
 8115968:	681b      	ldr	r3, [r3, #0]
 811596a:	685a      	ldr	r2, [r3, #4]
 811596c:	687b      	ldr	r3, [r7, #4]
 811596e:	1ad3      	subs	r3, r2, r3
 8115970:	0fdb      	lsrs	r3, r3, #31
 8115972:	f003 0301 	and.w	r3, r3, #1
 8115976:	b2db      	uxtb	r3, r3
 8115978:	2b00      	cmp	r3, #0
 811597a:	d001      	beq.n	8115980 <sys_timeouts_sleeptime+0x34>
    return 0;
 811597c:	2300      	movs	r3, #0
 811597e:	e010      	b.n	81159a2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8115980:	4b0a      	ldr	r3, [pc, #40]	@ (81159ac <sys_timeouts_sleeptime+0x60>)
 8115982:	681b      	ldr	r3, [r3, #0]
 8115984:	685a      	ldr	r2, [r3, #4]
 8115986:	687b      	ldr	r3, [r7, #4]
 8115988:	1ad3      	subs	r3, r2, r3
 811598a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 811598c:	683b      	ldr	r3, [r7, #0]
 811598e:	2b00      	cmp	r3, #0
 8115990:	da06      	bge.n	81159a0 <sys_timeouts_sleeptime+0x54>
 8115992:	4b07      	ldr	r3, [pc, #28]	@ (81159b0 <sys_timeouts_sleeptime+0x64>)
 8115994:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8115998:	4906      	ldr	r1, [pc, #24]	@ (81159b4 <sys_timeouts_sleeptime+0x68>)
 811599a:	4807      	ldr	r0, [pc, #28]	@ (81159b8 <sys_timeouts_sleeptime+0x6c>)
 811599c:	f000 ffa4 	bl	81168e8 <iprintf>
    return ret;
 81159a0:	683b      	ldr	r3, [r7, #0]
  }
}
 81159a2:	4618      	mov	r0, r3
 81159a4:	3708      	adds	r7, #8
 81159a6:	46bd      	mov	sp, r7
 81159a8:	bd80      	pop	{r7, pc}
 81159aa:	bf00      	nop
 81159ac:	1000b8ac 	.word	0x1000b8ac
 81159b0:	0811a108 	.word	0x0811a108
 81159b4:	0811a21c 	.word	0x0811a21c
 81159b8:	0811a1bc 	.word	0x0811a1bc

081159bc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 81159bc:	b580      	push	{r7, lr}
 81159be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 81159c0:	f000 fe92 	bl	81166e8 <rand>
 81159c4:	4603      	mov	r3, r0
 81159c6:	b29b      	uxth	r3, r3
 81159c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 81159cc:	b29b      	uxth	r3, r3
 81159ce:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 81159d2:	b29a      	uxth	r2, r3
 81159d4:	4b01      	ldr	r3, [pc, #4]	@ (81159dc <udp_init+0x20>)
 81159d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 81159d8:	bf00      	nop
 81159da:	bd80      	pop	{r7, pc}
 81159dc:	10000030 	.word	0x10000030

081159e0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 81159e0:	b480      	push	{r7}
 81159e2:	b083      	sub	sp, #12
 81159e4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 81159e6:	2300      	movs	r3, #0
 81159e8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 81159ea:	4b17      	ldr	r3, [pc, #92]	@ (8115a48 <udp_new_port+0x68>)
 81159ec:	881b      	ldrh	r3, [r3, #0]
 81159ee:	1c5a      	adds	r2, r3, #1
 81159f0:	b291      	uxth	r1, r2
 81159f2:	4a15      	ldr	r2, [pc, #84]	@ (8115a48 <udp_new_port+0x68>)
 81159f4:	8011      	strh	r1, [r2, #0]
 81159f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81159fa:	4293      	cmp	r3, r2
 81159fc:	d103      	bne.n	8115a06 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 81159fe:	4b12      	ldr	r3, [pc, #72]	@ (8115a48 <udp_new_port+0x68>)
 8115a00:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8115a04:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8115a06:	4b11      	ldr	r3, [pc, #68]	@ (8115a4c <udp_new_port+0x6c>)
 8115a08:	681b      	ldr	r3, [r3, #0]
 8115a0a:	603b      	str	r3, [r7, #0]
 8115a0c:	e011      	b.n	8115a32 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8115a0e:	683b      	ldr	r3, [r7, #0]
 8115a10:	8a5a      	ldrh	r2, [r3, #18]
 8115a12:	4b0d      	ldr	r3, [pc, #52]	@ (8115a48 <udp_new_port+0x68>)
 8115a14:	881b      	ldrh	r3, [r3, #0]
 8115a16:	429a      	cmp	r2, r3
 8115a18:	d108      	bne.n	8115a2c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8115a1a:	88fb      	ldrh	r3, [r7, #6]
 8115a1c:	3301      	adds	r3, #1
 8115a1e:	80fb      	strh	r3, [r7, #6]
 8115a20:	88fb      	ldrh	r3, [r7, #6]
 8115a22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8115a26:	d3e0      	bcc.n	81159ea <udp_new_port+0xa>
        return 0;
 8115a28:	2300      	movs	r3, #0
 8115a2a:	e007      	b.n	8115a3c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8115a2c:	683b      	ldr	r3, [r7, #0]
 8115a2e:	68db      	ldr	r3, [r3, #12]
 8115a30:	603b      	str	r3, [r7, #0]
 8115a32:	683b      	ldr	r3, [r7, #0]
 8115a34:	2b00      	cmp	r3, #0
 8115a36:	d1ea      	bne.n	8115a0e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8115a38:	4b03      	ldr	r3, [pc, #12]	@ (8115a48 <udp_new_port+0x68>)
 8115a3a:	881b      	ldrh	r3, [r3, #0]
}
 8115a3c:	4618      	mov	r0, r3
 8115a3e:	370c      	adds	r7, #12
 8115a40:	46bd      	mov	sp, r7
 8115a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115a46:	4770      	bx	lr
 8115a48:	10000030 	.word	0x10000030
 8115a4c:	1000b8b8 	.word	0x1000b8b8

08115a50 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8115a50:	b580      	push	{r7, lr}
 8115a52:	b084      	sub	sp, #16
 8115a54:	af00      	add	r7, sp, #0
 8115a56:	60f8      	str	r0, [r7, #12]
 8115a58:	60b9      	str	r1, [r7, #8]
 8115a5a:	4613      	mov	r3, r2
 8115a5c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8115a5e:	68fb      	ldr	r3, [r7, #12]
 8115a60:	2b00      	cmp	r3, #0
 8115a62:	d105      	bne.n	8115a70 <udp_input_local_match+0x20>
 8115a64:	4b27      	ldr	r3, [pc, #156]	@ (8115b04 <udp_input_local_match+0xb4>)
 8115a66:	2287      	movs	r2, #135	@ 0x87
 8115a68:	4927      	ldr	r1, [pc, #156]	@ (8115b08 <udp_input_local_match+0xb8>)
 8115a6a:	4828      	ldr	r0, [pc, #160]	@ (8115b0c <udp_input_local_match+0xbc>)
 8115a6c:	f000 ff3c 	bl	81168e8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8115a70:	68bb      	ldr	r3, [r7, #8]
 8115a72:	2b00      	cmp	r3, #0
 8115a74:	d105      	bne.n	8115a82 <udp_input_local_match+0x32>
 8115a76:	4b23      	ldr	r3, [pc, #140]	@ (8115b04 <udp_input_local_match+0xb4>)
 8115a78:	2288      	movs	r2, #136	@ 0x88
 8115a7a:	4925      	ldr	r1, [pc, #148]	@ (8115b10 <udp_input_local_match+0xc0>)
 8115a7c:	4823      	ldr	r0, [pc, #140]	@ (8115b0c <udp_input_local_match+0xbc>)
 8115a7e:	f000 ff33 	bl	81168e8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8115a82:	68fb      	ldr	r3, [r7, #12]
 8115a84:	7a1b      	ldrb	r3, [r3, #8]
 8115a86:	2b00      	cmp	r3, #0
 8115a88:	d00b      	beq.n	8115aa2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8115a8a:	68fb      	ldr	r3, [r7, #12]
 8115a8c:	7a1a      	ldrb	r2, [r3, #8]
 8115a8e:	4b21      	ldr	r3, [pc, #132]	@ (8115b14 <udp_input_local_match+0xc4>)
 8115a90:	685b      	ldr	r3, [r3, #4]
 8115a92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8115a96:	3301      	adds	r3, #1
 8115a98:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8115a9a:	429a      	cmp	r2, r3
 8115a9c:	d001      	beq.n	8115aa2 <udp_input_local_match+0x52>
    return 0;
 8115a9e:	2300      	movs	r3, #0
 8115aa0:	e02b      	b.n	8115afa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8115aa2:	79fb      	ldrb	r3, [r7, #7]
 8115aa4:	2b00      	cmp	r3, #0
 8115aa6:	d018      	beq.n	8115ada <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8115aa8:	68fb      	ldr	r3, [r7, #12]
 8115aaa:	2b00      	cmp	r3, #0
 8115aac:	d013      	beq.n	8115ad6 <udp_input_local_match+0x86>
 8115aae:	68fb      	ldr	r3, [r7, #12]
 8115ab0:	681b      	ldr	r3, [r3, #0]
 8115ab2:	2b00      	cmp	r3, #0
 8115ab4:	d00f      	beq.n	8115ad6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8115ab6:	4b17      	ldr	r3, [pc, #92]	@ (8115b14 <udp_input_local_match+0xc4>)
 8115ab8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8115aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115abe:	d00a      	beq.n	8115ad6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8115ac0:	68fb      	ldr	r3, [r7, #12]
 8115ac2:	681a      	ldr	r2, [r3, #0]
 8115ac4:	4b13      	ldr	r3, [pc, #76]	@ (8115b14 <udp_input_local_match+0xc4>)
 8115ac6:	695b      	ldr	r3, [r3, #20]
 8115ac8:	405a      	eors	r2, r3
 8115aca:	68bb      	ldr	r3, [r7, #8]
 8115acc:	3308      	adds	r3, #8
 8115ace:	681b      	ldr	r3, [r3, #0]
 8115ad0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8115ad2:	2b00      	cmp	r3, #0
 8115ad4:	d110      	bne.n	8115af8 <udp_input_local_match+0xa8>
          return 1;
 8115ad6:	2301      	movs	r3, #1
 8115ad8:	e00f      	b.n	8115afa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8115ada:	68fb      	ldr	r3, [r7, #12]
 8115adc:	2b00      	cmp	r3, #0
 8115ade:	d009      	beq.n	8115af4 <udp_input_local_match+0xa4>
 8115ae0:	68fb      	ldr	r3, [r7, #12]
 8115ae2:	681b      	ldr	r3, [r3, #0]
 8115ae4:	2b00      	cmp	r3, #0
 8115ae6:	d005      	beq.n	8115af4 <udp_input_local_match+0xa4>
 8115ae8:	68fb      	ldr	r3, [r7, #12]
 8115aea:	681a      	ldr	r2, [r3, #0]
 8115aec:	4b09      	ldr	r3, [pc, #36]	@ (8115b14 <udp_input_local_match+0xc4>)
 8115aee:	695b      	ldr	r3, [r3, #20]
 8115af0:	429a      	cmp	r2, r3
 8115af2:	d101      	bne.n	8115af8 <udp_input_local_match+0xa8>
        return 1;
 8115af4:	2301      	movs	r3, #1
 8115af6:	e000      	b.n	8115afa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8115af8:	2300      	movs	r3, #0
}
 8115afa:	4618      	mov	r0, r3
 8115afc:	3710      	adds	r7, #16
 8115afe:	46bd      	mov	sp, r7
 8115b00:	bd80      	pop	{r7, pc}
 8115b02:	bf00      	nop
 8115b04:	0811a230 	.word	0x0811a230
 8115b08:	0811a2a0 	.word	0x0811a2a0
 8115b0c:	0811a2c4 	.word	0x0811a2c4
 8115b10:	0811a2ec 	.word	0x0811a2ec
 8115b14:	10004d7c 	.word	0x10004d7c

08115b18 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8115b18:	b590      	push	{r4, r7, lr}
 8115b1a:	b08d      	sub	sp, #52	@ 0x34
 8115b1c:	af02      	add	r7, sp, #8
 8115b1e:	6078      	str	r0, [r7, #4]
 8115b20:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8115b22:	2300      	movs	r3, #0
 8115b24:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8115b26:	687b      	ldr	r3, [r7, #4]
 8115b28:	2b00      	cmp	r3, #0
 8115b2a:	d105      	bne.n	8115b38 <udp_input+0x20>
 8115b2c:	4b7c      	ldr	r3, [pc, #496]	@ (8115d20 <udp_input+0x208>)
 8115b2e:	22cf      	movs	r2, #207	@ 0xcf
 8115b30:	497c      	ldr	r1, [pc, #496]	@ (8115d24 <udp_input+0x20c>)
 8115b32:	487d      	ldr	r0, [pc, #500]	@ (8115d28 <udp_input+0x210>)
 8115b34:	f000 fed8 	bl	81168e8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8115b38:	683b      	ldr	r3, [r7, #0]
 8115b3a:	2b00      	cmp	r3, #0
 8115b3c:	d105      	bne.n	8115b4a <udp_input+0x32>
 8115b3e:	4b78      	ldr	r3, [pc, #480]	@ (8115d20 <udp_input+0x208>)
 8115b40:	22d0      	movs	r2, #208	@ 0xd0
 8115b42:	497a      	ldr	r1, [pc, #488]	@ (8115d2c <udp_input+0x214>)
 8115b44:	4878      	ldr	r0, [pc, #480]	@ (8115d28 <udp_input+0x210>)
 8115b46:	f000 fecf 	bl	81168e8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8115b4a:	687b      	ldr	r3, [r7, #4]
 8115b4c:	895b      	ldrh	r3, [r3, #10]
 8115b4e:	2b07      	cmp	r3, #7
 8115b50:	d803      	bhi.n	8115b5a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8115b52:	6878      	ldr	r0, [r7, #4]
 8115b54:	f7f9 ff1c 	bl	810f990 <pbuf_free>
    goto end;
 8115b58:	e0de      	b.n	8115d18 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8115b5a:	687b      	ldr	r3, [r7, #4]
 8115b5c:	685b      	ldr	r3, [r3, #4]
 8115b5e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8115b60:	4b73      	ldr	r3, [pc, #460]	@ (8115d30 <udp_input+0x218>)
 8115b62:	695b      	ldr	r3, [r3, #20]
 8115b64:	4a72      	ldr	r2, [pc, #456]	@ (8115d30 <udp_input+0x218>)
 8115b66:	6812      	ldr	r2, [r2, #0]
 8115b68:	4611      	mov	r1, r2
 8115b6a:	4618      	mov	r0, r3
 8115b6c:	f7f7 fcd4 	bl	810d518 <ip4_addr_isbroadcast_u32>
 8115b70:	4603      	mov	r3, r0
 8115b72:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8115b74:	697b      	ldr	r3, [r7, #20]
 8115b76:	881b      	ldrh	r3, [r3, #0]
 8115b78:	b29b      	uxth	r3, r3
 8115b7a:	4618      	mov	r0, r3
 8115b7c:	f7f5 ff5e 	bl	810ba3c <lwip_htons>
 8115b80:	4603      	mov	r3, r0
 8115b82:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8115b84:	697b      	ldr	r3, [r7, #20]
 8115b86:	885b      	ldrh	r3, [r3, #2]
 8115b88:	b29b      	uxth	r3, r3
 8115b8a:	4618      	mov	r0, r3
 8115b8c:	f7f5 ff56 	bl	810ba3c <lwip_htons>
 8115b90:	4603      	mov	r3, r0
 8115b92:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8115b94:	2300      	movs	r3, #0
 8115b96:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8115b98:	2300      	movs	r3, #0
 8115b9a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8115b9c:	2300      	movs	r3, #0
 8115b9e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8115ba0:	4b64      	ldr	r3, [pc, #400]	@ (8115d34 <udp_input+0x21c>)
 8115ba2:	681b      	ldr	r3, [r3, #0]
 8115ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8115ba6:	e054      	b.n	8115c52 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8115ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115baa:	8a5b      	ldrh	r3, [r3, #18]
 8115bac:	89fa      	ldrh	r2, [r7, #14]
 8115bae:	429a      	cmp	r2, r3
 8115bb0:	d14a      	bne.n	8115c48 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8115bb2:	7cfb      	ldrb	r3, [r7, #19]
 8115bb4:	461a      	mov	r2, r3
 8115bb6:	6839      	ldr	r1, [r7, #0]
 8115bb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8115bba:	f7ff ff49 	bl	8115a50 <udp_input_local_match>
 8115bbe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8115bc0:	2b00      	cmp	r3, #0
 8115bc2:	d041      	beq.n	8115c48 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8115bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115bc6:	7c1b      	ldrb	r3, [r3, #16]
 8115bc8:	f003 0304 	and.w	r3, r3, #4
 8115bcc:	2b00      	cmp	r3, #0
 8115bce:	d11d      	bne.n	8115c0c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8115bd0:	69fb      	ldr	r3, [r7, #28]
 8115bd2:	2b00      	cmp	r3, #0
 8115bd4:	d102      	bne.n	8115bdc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8115bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115bd8:	61fb      	str	r3, [r7, #28]
 8115bda:	e017      	b.n	8115c0c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8115bdc:	7cfb      	ldrb	r3, [r7, #19]
 8115bde:	2b00      	cmp	r3, #0
 8115be0:	d014      	beq.n	8115c0c <udp_input+0xf4>
 8115be2:	4b53      	ldr	r3, [pc, #332]	@ (8115d30 <udp_input+0x218>)
 8115be4:	695b      	ldr	r3, [r3, #20]
 8115be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115bea:	d10f      	bne.n	8115c0c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8115bec:	69fb      	ldr	r3, [r7, #28]
 8115bee:	681a      	ldr	r2, [r3, #0]
 8115bf0:	683b      	ldr	r3, [r7, #0]
 8115bf2:	3304      	adds	r3, #4
 8115bf4:	681b      	ldr	r3, [r3, #0]
 8115bf6:	429a      	cmp	r2, r3
 8115bf8:	d008      	beq.n	8115c0c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8115bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115bfc:	681a      	ldr	r2, [r3, #0]
 8115bfe:	683b      	ldr	r3, [r7, #0]
 8115c00:	3304      	adds	r3, #4
 8115c02:	681b      	ldr	r3, [r3, #0]
 8115c04:	429a      	cmp	r2, r3
 8115c06:	d101      	bne.n	8115c0c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8115c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c0a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8115c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c0e:	8a9b      	ldrh	r3, [r3, #20]
 8115c10:	8a3a      	ldrh	r2, [r7, #16]
 8115c12:	429a      	cmp	r2, r3
 8115c14:	d118      	bne.n	8115c48 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8115c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c18:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8115c1a:	2b00      	cmp	r3, #0
 8115c1c:	d005      	beq.n	8115c2a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8115c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c20:	685a      	ldr	r2, [r3, #4]
 8115c22:	4b43      	ldr	r3, [pc, #268]	@ (8115d30 <udp_input+0x218>)
 8115c24:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8115c26:	429a      	cmp	r2, r3
 8115c28:	d10e      	bne.n	8115c48 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8115c2a:	6a3b      	ldr	r3, [r7, #32]
 8115c2c:	2b00      	cmp	r3, #0
 8115c2e:	d014      	beq.n	8115c5a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8115c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c32:	68da      	ldr	r2, [r3, #12]
 8115c34:	6a3b      	ldr	r3, [r7, #32]
 8115c36:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8115c38:	4b3e      	ldr	r3, [pc, #248]	@ (8115d34 <udp_input+0x21c>)
 8115c3a:	681a      	ldr	r2, [r3, #0]
 8115c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c3e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8115c40:	4a3c      	ldr	r2, [pc, #240]	@ (8115d34 <udp_input+0x21c>)
 8115c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c44:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8115c46:	e008      	b.n	8115c5a <udp_input+0x142>
      }
    }

    prev = pcb;
 8115c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c4a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8115c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c4e:	68db      	ldr	r3, [r3, #12]
 8115c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8115c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c54:	2b00      	cmp	r3, #0
 8115c56:	d1a7      	bne.n	8115ba8 <udp_input+0x90>
 8115c58:	e000      	b.n	8115c5c <udp_input+0x144>
        break;
 8115c5a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8115c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c5e:	2b00      	cmp	r3, #0
 8115c60:	d101      	bne.n	8115c66 <udp_input+0x14e>
    pcb = uncon_pcb;
 8115c62:	69fb      	ldr	r3, [r7, #28]
 8115c64:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8115c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115c68:	2b00      	cmp	r3, #0
 8115c6a:	d002      	beq.n	8115c72 <udp_input+0x15a>
    for_us = 1;
 8115c6c:	2301      	movs	r3, #1
 8115c6e:	76fb      	strb	r3, [r7, #27]
 8115c70:	e00a      	b.n	8115c88 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8115c72:	683b      	ldr	r3, [r7, #0]
 8115c74:	3304      	adds	r3, #4
 8115c76:	681a      	ldr	r2, [r3, #0]
 8115c78:	4b2d      	ldr	r3, [pc, #180]	@ (8115d30 <udp_input+0x218>)
 8115c7a:	695b      	ldr	r3, [r3, #20]
 8115c7c:	429a      	cmp	r2, r3
 8115c7e:	bf0c      	ite	eq
 8115c80:	2301      	moveq	r3, #1
 8115c82:	2300      	movne	r3, #0
 8115c84:	b2db      	uxtb	r3, r3
 8115c86:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8115c88:	7efb      	ldrb	r3, [r7, #27]
 8115c8a:	2b00      	cmp	r3, #0
 8115c8c:	d041      	beq.n	8115d12 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8115c8e:	2108      	movs	r1, #8
 8115c90:	6878      	ldr	r0, [r7, #4]
 8115c92:	f7f9 fdf7 	bl	810f884 <pbuf_remove_header>
 8115c96:	4603      	mov	r3, r0
 8115c98:	2b00      	cmp	r3, #0
 8115c9a:	d00a      	beq.n	8115cb2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8115c9c:	4b20      	ldr	r3, [pc, #128]	@ (8115d20 <udp_input+0x208>)
 8115c9e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8115ca2:	4925      	ldr	r1, [pc, #148]	@ (8115d38 <udp_input+0x220>)
 8115ca4:	4820      	ldr	r0, [pc, #128]	@ (8115d28 <udp_input+0x210>)
 8115ca6:	f000 fe1f 	bl	81168e8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8115caa:	6878      	ldr	r0, [r7, #4]
 8115cac:	f7f9 fe70 	bl	810f990 <pbuf_free>
      goto end;
 8115cb0:	e032      	b.n	8115d18 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8115cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115cb4:	2b00      	cmp	r3, #0
 8115cb6:	d012      	beq.n	8115cde <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8115cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115cba:	699b      	ldr	r3, [r3, #24]
 8115cbc:	2b00      	cmp	r3, #0
 8115cbe:	d00a      	beq.n	8115cd6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8115cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115cc2:	699c      	ldr	r4, [r3, #24]
 8115cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115cc6:	69d8      	ldr	r0, [r3, #28]
 8115cc8:	8a3b      	ldrh	r3, [r7, #16]
 8115cca:	9300      	str	r3, [sp, #0]
 8115ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8115d3c <udp_input+0x224>)
 8115cce:	687a      	ldr	r2, [r7, #4]
 8115cd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8115cd2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8115cd4:	e021      	b.n	8115d1a <udp_input+0x202>
        pbuf_free(p);
 8115cd6:	6878      	ldr	r0, [r7, #4]
 8115cd8:	f7f9 fe5a 	bl	810f990 <pbuf_free>
        goto end;
 8115cdc:	e01c      	b.n	8115d18 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8115cde:	7cfb      	ldrb	r3, [r7, #19]
 8115ce0:	2b00      	cmp	r3, #0
 8115ce2:	d112      	bne.n	8115d0a <udp_input+0x1f2>
 8115ce4:	4b12      	ldr	r3, [pc, #72]	@ (8115d30 <udp_input+0x218>)
 8115ce6:	695b      	ldr	r3, [r3, #20]
 8115ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8115cec:	2be0      	cmp	r3, #224	@ 0xe0
 8115cee:	d00c      	beq.n	8115d0a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8115cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8115d30 <udp_input+0x218>)
 8115cf2:	899b      	ldrh	r3, [r3, #12]
 8115cf4:	3308      	adds	r3, #8
 8115cf6:	b29b      	uxth	r3, r3
 8115cf8:	b21b      	sxth	r3, r3
 8115cfa:	4619      	mov	r1, r3
 8115cfc:	6878      	ldr	r0, [r7, #4]
 8115cfe:	f7f9 fe34 	bl	810f96a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8115d02:	2103      	movs	r1, #3
 8115d04:	6878      	ldr	r0, [r7, #4]
 8115d06:	f7f7 f809 	bl	810cd1c <icmp_dest_unreach>
      pbuf_free(p);
 8115d0a:	6878      	ldr	r0, [r7, #4]
 8115d0c:	f7f9 fe40 	bl	810f990 <pbuf_free>
  return;
 8115d10:	e003      	b.n	8115d1a <udp_input+0x202>
    pbuf_free(p);
 8115d12:	6878      	ldr	r0, [r7, #4]
 8115d14:	f7f9 fe3c 	bl	810f990 <pbuf_free>
  return;
 8115d18:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8115d1a:	372c      	adds	r7, #44	@ 0x2c
 8115d1c:	46bd      	mov	sp, r7
 8115d1e:	bd90      	pop	{r4, r7, pc}
 8115d20:	0811a230 	.word	0x0811a230
 8115d24:	0811a314 	.word	0x0811a314
 8115d28:	0811a2c4 	.word	0x0811a2c4
 8115d2c:	0811a32c 	.word	0x0811a32c
 8115d30:	10004d7c 	.word	0x10004d7c
 8115d34:	1000b8b8 	.word	0x1000b8b8
 8115d38:	0811a348 	.word	0x0811a348
 8115d3c:	10004d8c 	.word	0x10004d8c

08115d40 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8115d40:	b580      	push	{r7, lr}
 8115d42:	b082      	sub	sp, #8
 8115d44:	af00      	add	r7, sp, #0
 8115d46:	6078      	str	r0, [r7, #4]
 8115d48:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8115d4a:	687b      	ldr	r3, [r7, #4]
 8115d4c:	2b00      	cmp	r3, #0
 8115d4e:	d109      	bne.n	8115d64 <udp_send+0x24>
 8115d50:	4b11      	ldr	r3, [pc, #68]	@ (8115d98 <udp_send+0x58>)
 8115d52:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8115d56:	4911      	ldr	r1, [pc, #68]	@ (8115d9c <udp_send+0x5c>)
 8115d58:	4811      	ldr	r0, [pc, #68]	@ (8115da0 <udp_send+0x60>)
 8115d5a:	f000 fdc5 	bl	81168e8 <iprintf>
 8115d5e:	f06f 030f 	mvn.w	r3, #15
 8115d62:	e015      	b.n	8115d90 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8115d64:	683b      	ldr	r3, [r7, #0]
 8115d66:	2b00      	cmp	r3, #0
 8115d68:	d109      	bne.n	8115d7e <udp_send+0x3e>
 8115d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8115d98 <udp_send+0x58>)
 8115d6c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8115d70:	490c      	ldr	r1, [pc, #48]	@ (8115da4 <udp_send+0x64>)
 8115d72:	480b      	ldr	r0, [pc, #44]	@ (8115da0 <udp_send+0x60>)
 8115d74:	f000 fdb8 	bl	81168e8 <iprintf>
 8115d78:	f06f 030f 	mvn.w	r3, #15
 8115d7c:	e008      	b.n	8115d90 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8115d7e:	687b      	ldr	r3, [r7, #4]
 8115d80:	1d1a      	adds	r2, r3, #4
 8115d82:	687b      	ldr	r3, [r7, #4]
 8115d84:	8a9b      	ldrh	r3, [r3, #20]
 8115d86:	6839      	ldr	r1, [r7, #0]
 8115d88:	6878      	ldr	r0, [r7, #4]
 8115d8a:	f000 f80d 	bl	8115da8 <udp_sendto>
 8115d8e:	4603      	mov	r3, r0
}
 8115d90:	4618      	mov	r0, r3
 8115d92:	3708      	adds	r7, #8
 8115d94:	46bd      	mov	sp, r7
 8115d96:	bd80      	pop	{r7, pc}
 8115d98:	0811a230 	.word	0x0811a230
 8115d9c:	0811a364 	.word	0x0811a364
 8115da0:	0811a2c4 	.word	0x0811a2c4
 8115da4:	0811a37c 	.word	0x0811a37c

08115da8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8115da8:	b580      	push	{r7, lr}
 8115daa:	b088      	sub	sp, #32
 8115dac:	af02      	add	r7, sp, #8
 8115dae:	60f8      	str	r0, [r7, #12]
 8115db0:	60b9      	str	r1, [r7, #8]
 8115db2:	607a      	str	r2, [r7, #4]
 8115db4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8115db6:	68fb      	ldr	r3, [r7, #12]
 8115db8:	2b00      	cmp	r3, #0
 8115dba:	d109      	bne.n	8115dd0 <udp_sendto+0x28>
 8115dbc:	4b23      	ldr	r3, [pc, #140]	@ (8115e4c <udp_sendto+0xa4>)
 8115dbe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8115dc2:	4923      	ldr	r1, [pc, #140]	@ (8115e50 <udp_sendto+0xa8>)
 8115dc4:	4823      	ldr	r0, [pc, #140]	@ (8115e54 <udp_sendto+0xac>)
 8115dc6:	f000 fd8f 	bl	81168e8 <iprintf>
 8115dca:	f06f 030f 	mvn.w	r3, #15
 8115dce:	e038      	b.n	8115e42 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8115dd0:	68bb      	ldr	r3, [r7, #8]
 8115dd2:	2b00      	cmp	r3, #0
 8115dd4:	d109      	bne.n	8115dea <udp_sendto+0x42>
 8115dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8115e4c <udp_sendto+0xa4>)
 8115dd8:	f240 2219 	movw	r2, #537	@ 0x219
 8115ddc:	491e      	ldr	r1, [pc, #120]	@ (8115e58 <udp_sendto+0xb0>)
 8115dde:	481d      	ldr	r0, [pc, #116]	@ (8115e54 <udp_sendto+0xac>)
 8115de0:	f000 fd82 	bl	81168e8 <iprintf>
 8115de4:	f06f 030f 	mvn.w	r3, #15
 8115de8:	e02b      	b.n	8115e42 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8115dea:	687b      	ldr	r3, [r7, #4]
 8115dec:	2b00      	cmp	r3, #0
 8115dee:	d109      	bne.n	8115e04 <udp_sendto+0x5c>
 8115df0:	4b16      	ldr	r3, [pc, #88]	@ (8115e4c <udp_sendto+0xa4>)
 8115df2:	f240 221a 	movw	r2, #538	@ 0x21a
 8115df6:	4919      	ldr	r1, [pc, #100]	@ (8115e5c <udp_sendto+0xb4>)
 8115df8:	4816      	ldr	r0, [pc, #88]	@ (8115e54 <udp_sendto+0xac>)
 8115dfa:	f000 fd75 	bl	81168e8 <iprintf>
 8115dfe:	f06f 030f 	mvn.w	r3, #15
 8115e02:	e01e      	b.n	8115e42 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8115e04:	68fb      	ldr	r3, [r7, #12]
 8115e06:	7a1b      	ldrb	r3, [r3, #8]
 8115e08:	2b00      	cmp	r3, #0
 8115e0a:	d006      	beq.n	8115e1a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8115e0c:	68fb      	ldr	r3, [r7, #12]
 8115e0e:	7a1b      	ldrb	r3, [r3, #8]
 8115e10:	4618      	mov	r0, r3
 8115e12:	f7f9 fa2b 	bl	810f26c <netif_get_by_index>
 8115e16:	6178      	str	r0, [r7, #20]
 8115e18:	e003      	b.n	8115e22 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8115e1a:	6878      	ldr	r0, [r7, #4]
 8115e1c:	f7f7 f8e6 	bl	810cfec <ip4_route>
 8115e20:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8115e22:	697b      	ldr	r3, [r7, #20]
 8115e24:	2b00      	cmp	r3, #0
 8115e26:	d102      	bne.n	8115e2e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8115e28:	f06f 0303 	mvn.w	r3, #3
 8115e2c:	e009      	b.n	8115e42 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8115e2e:	887a      	ldrh	r2, [r7, #2]
 8115e30:	697b      	ldr	r3, [r7, #20]
 8115e32:	9300      	str	r3, [sp, #0]
 8115e34:	4613      	mov	r3, r2
 8115e36:	687a      	ldr	r2, [r7, #4]
 8115e38:	68b9      	ldr	r1, [r7, #8]
 8115e3a:	68f8      	ldr	r0, [r7, #12]
 8115e3c:	f000 f810 	bl	8115e60 <udp_sendto_if>
 8115e40:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8115e42:	4618      	mov	r0, r3
 8115e44:	3718      	adds	r7, #24
 8115e46:	46bd      	mov	sp, r7
 8115e48:	bd80      	pop	{r7, pc}
 8115e4a:	bf00      	nop
 8115e4c:	0811a230 	.word	0x0811a230
 8115e50:	0811a394 	.word	0x0811a394
 8115e54:	0811a2c4 	.word	0x0811a2c4
 8115e58:	0811a3ac 	.word	0x0811a3ac
 8115e5c:	0811a3c8 	.word	0x0811a3c8

08115e60 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8115e60:	b580      	push	{r7, lr}
 8115e62:	b088      	sub	sp, #32
 8115e64:	af02      	add	r7, sp, #8
 8115e66:	60f8      	str	r0, [r7, #12]
 8115e68:	60b9      	str	r1, [r7, #8]
 8115e6a:	607a      	str	r2, [r7, #4]
 8115e6c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8115e6e:	68fb      	ldr	r3, [r7, #12]
 8115e70:	2b00      	cmp	r3, #0
 8115e72:	d109      	bne.n	8115e88 <udp_sendto_if+0x28>
 8115e74:	4b2e      	ldr	r3, [pc, #184]	@ (8115f30 <udp_sendto_if+0xd0>)
 8115e76:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8115e7a:	492e      	ldr	r1, [pc, #184]	@ (8115f34 <udp_sendto_if+0xd4>)
 8115e7c:	482e      	ldr	r0, [pc, #184]	@ (8115f38 <udp_sendto_if+0xd8>)
 8115e7e:	f000 fd33 	bl	81168e8 <iprintf>
 8115e82:	f06f 030f 	mvn.w	r3, #15
 8115e86:	e04f      	b.n	8115f28 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8115e88:	68bb      	ldr	r3, [r7, #8]
 8115e8a:	2b00      	cmp	r3, #0
 8115e8c:	d109      	bne.n	8115ea2 <udp_sendto_if+0x42>
 8115e8e:	4b28      	ldr	r3, [pc, #160]	@ (8115f30 <udp_sendto_if+0xd0>)
 8115e90:	f240 2281 	movw	r2, #641	@ 0x281
 8115e94:	4929      	ldr	r1, [pc, #164]	@ (8115f3c <udp_sendto_if+0xdc>)
 8115e96:	4828      	ldr	r0, [pc, #160]	@ (8115f38 <udp_sendto_if+0xd8>)
 8115e98:	f000 fd26 	bl	81168e8 <iprintf>
 8115e9c:	f06f 030f 	mvn.w	r3, #15
 8115ea0:	e042      	b.n	8115f28 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8115ea2:	687b      	ldr	r3, [r7, #4]
 8115ea4:	2b00      	cmp	r3, #0
 8115ea6:	d109      	bne.n	8115ebc <udp_sendto_if+0x5c>
 8115ea8:	4b21      	ldr	r3, [pc, #132]	@ (8115f30 <udp_sendto_if+0xd0>)
 8115eaa:	f240 2282 	movw	r2, #642	@ 0x282
 8115eae:	4924      	ldr	r1, [pc, #144]	@ (8115f40 <udp_sendto_if+0xe0>)
 8115eb0:	4821      	ldr	r0, [pc, #132]	@ (8115f38 <udp_sendto_if+0xd8>)
 8115eb2:	f000 fd19 	bl	81168e8 <iprintf>
 8115eb6:	f06f 030f 	mvn.w	r3, #15
 8115eba:	e035      	b.n	8115f28 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8115ebc:	6a3b      	ldr	r3, [r7, #32]
 8115ebe:	2b00      	cmp	r3, #0
 8115ec0:	d109      	bne.n	8115ed6 <udp_sendto_if+0x76>
 8115ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8115f30 <udp_sendto_if+0xd0>)
 8115ec4:	f240 2283 	movw	r2, #643	@ 0x283
 8115ec8:	491e      	ldr	r1, [pc, #120]	@ (8115f44 <udp_sendto_if+0xe4>)
 8115eca:	481b      	ldr	r0, [pc, #108]	@ (8115f38 <udp_sendto_if+0xd8>)
 8115ecc:	f000 fd0c 	bl	81168e8 <iprintf>
 8115ed0:	f06f 030f 	mvn.w	r3, #15
 8115ed4:	e028      	b.n	8115f28 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8115ed6:	68fb      	ldr	r3, [r7, #12]
 8115ed8:	2b00      	cmp	r3, #0
 8115eda:	d009      	beq.n	8115ef0 <udp_sendto_if+0x90>
 8115edc:	68fb      	ldr	r3, [r7, #12]
 8115ede:	681b      	ldr	r3, [r3, #0]
 8115ee0:	2b00      	cmp	r3, #0
 8115ee2:	d005      	beq.n	8115ef0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8115ee4:	68fb      	ldr	r3, [r7, #12]
 8115ee6:	681b      	ldr	r3, [r3, #0]
 8115ee8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8115eec:	2be0      	cmp	r3, #224	@ 0xe0
 8115eee:	d103      	bne.n	8115ef8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8115ef0:	6a3b      	ldr	r3, [r7, #32]
 8115ef2:	3304      	adds	r3, #4
 8115ef4:	617b      	str	r3, [r7, #20]
 8115ef6:	e00b      	b.n	8115f10 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8115ef8:	68fb      	ldr	r3, [r7, #12]
 8115efa:	681a      	ldr	r2, [r3, #0]
 8115efc:	6a3b      	ldr	r3, [r7, #32]
 8115efe:	3304      	adds	r3, #4
 8115f00:	681b      	ldr	r3, [r3, #0]
 8115f02:	429a      	cmp	r2, r3
 8115f04:	d002      	beq.n	8115f0c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8115f06:	f06f 0303 	mvn.w	r3, #3
 8115f0a:	e00d      	b.n	8115f28 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8115f0c:	68fb      	ldr	r3, [r7, #12]
 8115f0e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8115f10:	887a      	ldrh	r2, [r7, #2]
 8115f12:	697b      	ldr	r3, [r7, #20]
 8115f14:	9301      	str	r3, [sp, #4]
 8115f16:	6a3b      	ldr	r3, [r7, #32]
 8115f18:	9300      	str	r3, [sp, #0]
 8115f1a:	4613      	mov	r3, r2
 8115f1c:	687a      	ldr	r2, [r7, #4]
 8115f1e:	68b9      	ldr	r1, [r7, #8]
 8115f20:	68f8      	ldr	r0, [r7, #12]
 8115f22:	f000 f811 	bl	8115f48 <udp_sendto_if_src>
 8115f26:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8115f28:	4618      	mov	r0, r3
 8115f2a:	3718      	adds	r7, #24
 8115f2c:	46bd      	mov	sp, r7
 8115f2e:	bd80      	pop	{r7, pc}
 8115f30:	0811a230 	.word	0x0811a230
 8115f34:	0811a3e4 	.word	0x0811a3e4
 8115f38:	0811a2c4 	.word	0x0811a2c4
 8115f3c:	0811a400 	.word	0x0811a400
 8115f40:	0811a41c 	.word	0x0811a41c
 8115f44:	0811a43c 	.word	0x0811a43c

08115f48 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8115f48:	b580      	push	{r7, lr}
 8115f4a:	b08c      	sub	sp, #48	@ 0x30
 8115f4c:	af04      	add	r7, sp, #16
 8115f4e:	60f8      	str	r0, [r7, #12]
 8115f50:	60b9      	str	r1, [r7, #8]
 8115f52:	607a      	str	r2, [r7, #4]
 8115f54:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8115f56:	68fb      	ldr	r3, [r7, #12]
 8115f58:	2b00      	cmp	r3, #0
 8115f5a:	d109      	bne.n	8115f70 <udp_sendto_if_src+0x28>
 8115f5c:	4b65      	ldr	r3, [pc, #404]	@ (81160f4 <udp_sendto_if_src+0x1ac>)
 8115f5e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8115f62:	4965      	ldr	r1, [pc, #404]	@ (81160f8 <udp_sendto_if_src+0x1b0>)
 8115f64:	4865      	ldr	r0, [pc, #404]	@ (81160fc <udp_sendto_if_src+0x1b4>)
 8115f66:	f000 fcbf 	bl	81168e8 <iprintf>
 8115f6a:	f06f 030f 	mvn.w	r3, #15
 8115f6e:	e0bc      	b.n	81160ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8115f70:	68bb      	ldr	r3, [r7, #8]
 8115f72:	2b00      	cmp	r3, #0
 8115f74:	d109      	bne.n	8115f8a <udp_sendto_if_src+0x42>
 8115f76:	4b5f      	ldr	r3, [pc, #380]	@ (81160f4 <udp_sendto_if_src+0x1ac>)
 8115f78:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8115f7c:	4960      	ldr	r1, [pc, #384]	@ (8116100 <udp_sendto_if_src+0x1b8>)
 8115f7e:	485f      	ldr	r0, [pc, #380]	@ (81160fc <udp_sendto_if_src+0x1b4>)
 8115f80:	f000 fcb2 	bl	81168e8 <iprintf>
 8115f84:	f06f 030f 	mvn.w	r3, #15
 8115f88:	e0af      	b.n	81160ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8115f8a:	687b      	ldr	r3, [r7, #4]
 8115f8c:	2b00      	cmp	r3, #0
 8115f8e:	d109      	bne.n	8115fa4 <udp_sendto_if_src+0x5c>
 8115f90:	4b58      	ldr	r3, [pc, #352]	@ (81160f4 <udp_sendto_if_src+0x1ac>)
 8115f92:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8115f96:	495b      	ldr	r1, [pc, #364]	@ (8116104 <udp_sendto_if_src+0x1bc>)
 8115f98:	4858      	ldr	r0, [pc, #352]	@ (81160fc <udp_sendto_if_src+0x1b4>)
 8115f9a:	f000 fca5 	bl	81168e8 <iprintf>
 8115f9e:	f06f 030f 	mvn.w	r3, #15
 8115fa2:	e0a2      	b.n	81160ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8115fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115fa6:	2b00      	cmp	r3, #0
 8115fa8:	d109      	bne.n	8115fbe <udp_sendto_if_src+0x76>
 8115faa:	4b52      	ldr	r3, [pc, #328]	@ (81160f4 <udp_sendto_if_src+0x1ac>)
 8115fac:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8115fb0:	4955      	ldr	r1, [pc, #340]	@ (8116108 <udp_sendto_if_src+0x1c0>)
 8115fb2:	4852      	ldr	r0, [pc, #328]	@ (81160fc <udp_sendto_if_src+0x1b4>)
 8115fb4:	f000 fc98 	bl	81168e8 <iprintf>
 8115fb8:	f06f 030f 	mvn.w	r3, #15
 8115fbc:	e095      	b.n	81160ea <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8115fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115fc0:	2b00      	cmp	r3, #0
 8115fc2:	d109      	bne.n	8115fd8 <udp_sendto_if_src+0x90>
 8115fc4:	4b4b      	ldr	r3, [pc, #300]	@ (81160f4 <udp_sendto_if_src+0x1ac>)
 8115fc6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8115fca:	4950      	ldr	r1, [pc, #320]	@ (811610c <udp_sendto_if_src+0x1c4>)
 8115fcc:	484b      	ldr	r0, [pc, #300]	@ (81160fc <udp_sendto_if_src+0x1b4>)
 8115fce:	f000 fc8b 	bl	81168e8 <iprintf>
 8115fd2:	f06f 030f 	mvn.w	r3, #15
 8115fd6:	e088      	b.n	81160ea <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8115fd8:	68fb      	ldr	r3, [r7, #12]
 8115fda:	8a5b      	ldrh	r3, [r3, #18]
 8115fdc:	2b00      	cmp	r3, #0
 8115fde:	d10f      	bne.n	8116000 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8115fe0:	68f9      	ldr	r1, [r7, #12]
 8115fe2:	68fb      	ldr	r3, [r7, #12]
 8115fe4:	8a5b      	ldrh	r3, [r3, #18]
 8115fe6:	461a      	mov	r2, r3
 8115fe8:	68f8      	ldr	r0, [r7, #12]
 8115fea:	f000 f893 	bl	8116114 <udp_bind>
 8115fee:	4603      	mov	r3, r0
 8115ff0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8115ff2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8115ff6:	2b00      	cmp	r3, #0
 8115ff8:	d002      	beq.n	8116000 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8115ffa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8115ffe:	e074      	b.n	81160ea <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8116000:	68bb      	ldr	r3, [r7, #8]
 8116002:	891b      	ldrh	r3, [r3, #8]
 8116004:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8116008:	4293      	cmp	r3, r2
 811600a:	d902      	bls.n	8116012 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 811600c:	f04f 33ff 	mov.w	r3, #4294967295
 8116010:	e06b      	b.n	81160ea <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8116012:	2108      	movs	r1, #8
 8116014:	68b8      	ldr	r0, [r7, #8]
 8116016:	f7f9 fc25 	bl	810f864 <pbuf_add_header>
 811601a:	4603      	mov	r3, r0
 811601c:	2b00      	cmp	r3, #0
 811601e:	d015      	beq.n	811604c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8116020:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8116024:	2108      	movs	r1, #8
 8116026:	2022      	movs	r0, #34	@ 0x22
 8116028:	f7f9 f9ca 	bl	810f3c0 <pbuf_alloc>
 811602c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 811602e:	69fb      	ldr	r3, [r7, #28]
 8116030:	2b00      	cmp	r3, #0
 8116032:	d102      	bne.n	811603a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8116034:	f04f 33ff 	mov.w	r3, #4294967295
 8116038:	e057      	b.n	81160ea <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 811603a:	68bb      	ldr	r3, [r7, #8]
 811603c:	891b      	ldrh	r3, [r3, #8]
 811603e:	2b00      	cmp	r3, #0
 8116040:	d006      	beq.n	8116050 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8116042:	68b9      	ldr	r1, [r7, #8]
 8116044:	69f8      	ldr	r0, [r7, #28]
 8116046:	f7f9 fdc7 	bl	810fbd8 <pbuf_chain>
 811604a:	e001      	b.n	8116050 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 811604c:	68bb      	ldr	r3, [r7, #8]
 811604e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8116050:	69fb      	ldr	r3, [r7, #28]
 8116052:	895b      	ldrh	r3, [r3, #10]
 8116054:	2b07      	cmp	r3, #7
 8116056:	d806      	bhi.n	8116066 <udp_sendto_if_src+0x11e>
 8116058:	4b26      	ldr	r3, [pc, #152]	@ (81160f4 <udp_sendto_if_src+0x1ac>)
 811605a:	f240 320d 	movw	r2, #781	@ 0x30d
 811605e:	492c      	ldr	r1, [pc, #176]	@ (8116110 <udp_sendto_if_src+0x1c8>)
 8116060:	4826      	ldr	r0, [pc, #152]	@ (81160fc <udp_sendto_if_src+0x1b4>)
 8116062:	f000 fc41 	bl	81168e8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8116066:	69fb      	ldr	r3, [r7, #28]
 8116068:	685b      	ldr	r3, [r3, #4]
 811606a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 811606c:	68fb      	ldr	r3, [r7, #12]
 811606e:	8a5b      	ldrh	r3, [r3, #18]
 8116070:	4618      	mov	r0, r3
 8116072:	f7f5 fce3 	bl	810ba3c <lwip_htons>
 8116076:	4603      	mov	r3, r0
 8116078:	461a      	mov	r2, r3
 811607a:	697b      	ldr	r3, [r7, #20]
 811607c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 811607e:	887b      	ldrh	r3, [r7, #2]
 8116080:	4618      	mov	r0, r3
 8116082:	f7f5 fcdb 	bl	810ba3c <lwip_htons>
 8116086:	4603      	mov	r3, r0
 8116088:	461a      	mov	r2, r3
 811608a:	697b      	ldr	r3, [r7, #20]
 811608c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 811608e:	697b      	ldr	r3, [r7, #20]
 8116090:	2200      	movs	r2, #0
 8116092:	719a      	strb	r2, [r3, #6]
 8116094:	2200      	movs	r2, #0
 8116096:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8116098:	69fb      	ldr	r3, [r7, #28]
 811609a:	891b      	ldrh	r3, [r3, #8]
 811609c:	4618      	mov	r0, r3
 811609e:	f7f5 fccd 	bl	810ba3c <lwip_htons>
 81160a2:	4603      	mov	r3, r0
 81160a4:	461a      	mov	r2, r3
 81160a6:	697b      	ldr	r3, [r7, #20]
 81160a8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 81160aa:	2311      	movs	r3, #17
 81160ac:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 81160ae:	68fb      	ldr	r3, [r7, #12]
 81160b0:	7adb      	ldrb	r3, [r3, #11]
 81160b2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 81160b4:	68fb      	ldr	r3, [r7, #12]
 81160b6:	7a9b      	ldrb	r3, [r3, #10]
 81160b8:	7cb9      	ldrb	r1, [r7, #18]
 81160ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81160bc:	9202      	str	r2, [sp, #8]
 81160be:	7cfa      	ldrb	r2, [r7, #19]
 81160c0:	9201      	str	r2, [sp, #4]
 81160c2:	9300      	str	r3, [sp, #0]
 81160c4:	460b      	mov	r3, r1
 81160c6:	687a      	ldr	r2, [r7, #4]
 81160c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81160ca:	69f8      	ldr	r0, [r7, #28]
 81160cc:	f7f7 f976 	bl	810d3bc <ip4_output_if_src>
 81160d0:	4603      	mov	r3, r0
 81160d2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 81160d4:	69fa      	ldr	r2, [r7, #28]
 81160d6:	68bb      	ldr	r3, [r7, #8]
 81160d8:	429a      	cmp	r2, r3
 81160da:	d004      	beq.n	81160e6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 81160dc:	69f8      	ldr	r0, [r7, #28]
 81160de:	f7f9 fc57 	bl	810f990 <pbuf_free>
    q = NULL;
 81160e2:	2300      	movs	r3, #0
 81160e4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 81160e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 81160ea:	4618      	mov	r0, r3
 81160ec:	3720      	adds	r7, #32
 81160ee:	46bd      	mov	sp, r7
 81160f0:	bd80      	pop	{r7, pc}
 81160f2:	bf00      	nop
 81160f4:	0811a230 	.word	0x0811a230
 81160f8:	0811a45c 	.word	0x0811a45c
 81160fc:	0811a2c4 	.word	0x0811a2c4
 8116100:	0811a47c 	.word	0x0811a47c
 8116104:	0811a49c 	.word	0x0811a49c
 8116108:	0811a4c0 	.word	0x0811a4c0
 811610c:	0811a4e4 	.word	0x0811a4e4
 8116110:	0811a508 	.word	0x0811a508

08116114 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8116114:	b580      	push	{r7, lr}
 8116116:	b086      	sub	sp, #24
 8116118:	af00      	add	r7, sp, #0
 811611a:	60f8      	str	r0, [r7, #12]
 811611c:	60b9      	str	r1, [r7, #8]
 811611e:	4613      	mov	r3, r2
 8116120:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8116122:	68bb      	ldr	r3, [r7, #8]
 8116124:	2b00      	cmp	r3, #0
 8116126:	d101      	bne.n	811612c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8116128:	4b39      	ldr	r3, [pc, #228]	@ (8116210 <udp_bind+0xfc>)
 811612a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 811612c:	68fb      	ldr	r3, [r7, #12]
 811612e:	2b00      	cmp	r3, #0
 8116130:	d109      	bne.n	8116146 <udp_bind+0x32>
 8116132:	4b38      	ldr	r3, [pc, #224]	@ (8116214 <udp_bind+0x100>)
 8116134:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8116138:	4937      	ldr	r1, [pc, #220]	@ (8116218 <udp_bind+0x104>)
 811613a:	4838      	ldr	r0, [pc, #224]	@ (811621c <udp_bind+0x108>)
 811613c:	f000 fbd4 	bl	81168e8 <iprintf>
 8116140:	f06f 030f 	mvn.w	r3, #15
 8116144:	e060      	b.n	8116208 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8116146:	2300      	movs	r3, #0
 8116148:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 811614a:	4b35      	ldr	r3, [pc, #212]	@ (8116220 <udp_bind+0x10c>)
 811614c:	681b      	ldr	r3, [r3, #0]
 811614e:	617b      	str	r3, [r7, #20]
 8116150:	e009      	b.n	8116166 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8116152:	68fa      	ldr	r2, [r7, #12]
 8116154:	697b      	ldr	r3, [r7, #20]
 8116156:	429a      	cmp	r2, r3
 8116158:	d102      	bne.n	8116160 <udp_bind+0x4c>
      rebind = 1;
 811615a:	2301      	movs	r3, #1
 811615c:	74fb      	strb	r3, [r7, #19]
      break;
 811615e:	e005      	b.n	811616c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8116160:	697b      	ldr	r3, [r7, #20]
 8116162:	68db      	ldr	r3, [r3, #12]
 8116164:	617b      	str	r3, [r7, #20]
 8116166:	697b      	ldr	r3, [r7, #20]
 8116168:	2b00      	cmp	r3, #0
 811616a:	d1f2      	bne.n	8116152 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 811616c:	88fb      	ldrh	r3, [r7, #6]
 811616e:	2b00      	cmp	r3, #0
 8116170:	d109      	bne.n	8116186 <udp_bind+0x72>
    port = udp_new_port();
 8116172:	f7ff fc35 	bl	81159e0 <udp_new_port>
 8116176:	4603      	mov	r3, r0
 8116178:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 811617a:	88fb      	ldrh	r3, [r7, #6]
 811617c:	2b00      	cmp	r3, #0
 811617e:	d12c      	bne.n	81161da <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8116180:	f06f 0307 	mvn.w	r3, #7
 8116184:	e040      	b.n	8116208 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8116186:	4b26      	ldr	r3, [pc, #152]	@ (8116220 <udp_bind+0x10c>)
 8116188:	681b      	ldr	r3, [r3, #0]
 811618a:	617b      	str	r3, [r7, #20]
 811618c:	e022      	b.n	81161d4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 811618e:	68fa      	ldr	r2, [r7, #12]
 8116190:	697b      	ldr	r3, [r7, #20]
 8116192:	429a      	cmp	r2, r3
 8116194:	d01b      	beq.n	81161ce <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8116196:	697b      	ldr	r3, [r7, #20]
 8116198:	8a5b      	ldrh	r3, [r3, #18]
 811619a:	88fa      	ldrh	r2, [r7, #6]
 811619c:	429a      	cmp	r2, r3
 811619e:	d116      	bne.n	81161ce <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 81161a0:	697b      	ldr	r3, [r7, #20]
 81161a2:	681a      	ldr	r2, [r3, #0]
 81161a4:	68bb      	ldr	r3, [r7, #8]
 81161a6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 81161a8:	429a      	cmp	r2, r3
 81161aa:	d00d      	beq.n	81161c8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 81161ac:	68bb      	ldr	r3, [r7, #8]
 81161ae:	2b00      	cmp	r3, #0
 81161b0:	d00a      	beq.n	81161c8 <udp_bind+0xb4>
 81161b2:	68bb      	ldr	r3, [r7, #8]
 81161b4:	681b      	ldr	r3, [r3, #0]
 81161b6:	2b00      	cmp	r3, #0
 81161b8:	d006      	beq.n	81161c8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 81161ba:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 81161bc:	2b00      	cmp	r3, #0
 81161be:	d003      	beq.n	81161c8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 81161c0:	697b      	ldr	r3, [r7, #20]
 81161c2:	681b      	ldr	r3, [r3, #0]
 81161c4:	2b00      	cmp	r3, #0
 81161c6:	d102      	bne.n	81161ce <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 81161c8:	f06f 0307 	mvn.w	r3, #7
 81161cc:	e01c      	b.n	8116208 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 81161ce:	697b      	ldr	r3, [r7, #20]
 81161d0:	68db      	ldr	r3, [r3, #12]
 81161d2:	617b      	str	r3, [r7, #20]
 81161d4:	697b      	ldr	r3, [r7, #20]
 81161d6:	2b00      	cmp	r3, #0
 81161d8:	d1d9      	bne.n	811618e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 81161da:	68bb      	ldr	r3, [r7, #8]
 81161dc:	2b00      	cmp	r3, #0
 81161de:	d002      	beq.n	81161e6 <udp_bind+0xd2>
 81161e0:	68bb      	ldr	r3, [r7, #8]
 81161e2:	681b      	ldr	r3, [r3, #0]
 81161e4:	e000      	b.n	81161e8 <udp_bind+0xd4>
 81161e6:	2300      	movs	r3, #0
 81161e8:	68fa      	ldr	r2, [r7, #12]
 81161ea:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 81161ec:	68fb      	ldr	r3, [r7, #12]
 81161ee:	88fa      	ldrh	r2, [r7, #6]
 81161f0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 81161f2:	7cfb      	ldrb	r3, [r7, #19]
 81161f4:	2b00      	cmp	r3, #0
 81161f6:	d106      	bne.n	8116206 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 81161f8:	4b09      	ldr	r3, [pc, #36]	@ (8116220 <udp_bind+0x10c>)
 81161fa:	681a      	ldr	r2, [r3, #0]
 81161fc:	68fb      	ldr	r3, [r7, #12]
 81161fe:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8116200:	4a07      	ldr	r2, [pc, #28]	@ (8116220 <udp_bind+0x10c>)
 8116202:	68fb      	ldr	r3, [r7, #12]
 8116204:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8116206:	2300      	movs	r3, #0
}
 8116208:	4618      	mov	r0, r3
 811620a:	3718      	adds	r7, #24
 811620c:	46bd      	mov	sp, r7
 811620e:	bd80      	pop	{r7, pc}
 8116210:	0811a670 	.word	0x0811a670
 8116214:	0811a230 	.word	0x0811a230
 8116218:	0811a538 	.word	0x0811a538
 811621c:	0811a2c4 	.word	0x0811a2c4
 8116220:	1000b8b8 	.word	0x1000b8b8

08116224 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8116224:	b580      	push	{r7, lr}
 8116226:	b086      	sub	sp, #24
 8116228:	af00      	add	r7, sp, #0
 811622a:	60f8      	str	r0, [r7, #12]
 811622c:	60b9      	str	r1, [r7, #8]
 811622e:	4613      	mov	r3, r2
 8116230:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8116232:	68fb      	ldr	r3, [r7, #12]
 8116234:	2b00      	cmp	r3, #0
 8116236:	d109      	bne.n	811624c <udp_connect+0x28>
 8116238:	4b2c      	ldr	r3, [pc, #176]	@ (81162ec <udp_connect+0xc8>)
 811623a:	f240 4235 	movw	r2, #1077	@ 0x435
 811623e:	492c      	ldr	r1, [pc, #176]	@ (81162f0 <udp_connect+0xcc>)
 8116240:	482c      	ldr	r0, [pc, #176]	@ (81162f4 <udp_connect+0xd0>)
 8116242:	f000 fb51 	bl	81168e8 <iprintf>
 8116246:	f06f 030f 	mvn.w	r3, #15
 811624a:	e04b      	b.n	81162e4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 811624c:	68bb      	ldr	r3, [r7, #8]
 811624e:	2b00      	cmp	r3, #0
 8116250:	d109      	bne.n	8116266 <udp_connect+0x42>
 8116252:	4b26      	ldr	r3, [pc, #152]	@ (81162ec <udp_connect+0xc8>)
 8116254:	f240 4236 	movw	r2, #1078	@ 0x436
 8116258:	4927      	ldr	r1, [pc, #156]	@ (81162f8 <udp_connect+0xd4>)
 811625a:	4826      	ldr	r0, [pc, #152]	@ (81162f4 <udp_connect+0xd0>)
 811625c:	f000 fb44 	bl	81168e8 <iprintf>
 8116260:	f06f 030f 	mvn.w	r3, #15
 8116264:	e03e      	b.n	81162e4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8116266:	68fb      	ldr	r3, [r7, #12]
 8116268:	8a5b      	ldrh	r3, [r3, #18]
 811626a:	2b00      	cmp	r3, #0
 811626c:	d10f      	bne.n	811628e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 811626e:	68f9      	ldr	r1, [r7, #12]
 8116270:	68fb      	ldr	r3, [r7, #12]
 8116272:	8a5b      	ldrh	r3, [r3, #18]
 8116274:	461a      	mov	r2, r3
 8116276:	68f8      	ldr	r0, [r7, #12]
 8116278:	f7ff ff4c 	bl	8116114 <udp_bind>
 811627c:	4603      	mov	r3, r0
 811627e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8116280:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8116284:	2b00      	cmp	r3, #0
 8116286:	d002      	beq.n	811628e <udp_connect+0x6a>
      return err;
 8116288:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811628c:	e02a      	b.n	81162e4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 811628e:	68bb      	ldr	r3, [r7, #8]
 8116290:	2b00      	cmp	r3, #0
 8116292:	d002      	beq.n	811629a <udp_connect+0x76>
 8116294:	68bb      	ldr	r3, [r7, #8]
 8116296:	681b      	ldr	r3, [r3, #0]
 8116298:	e000      	b.n	811629c <udp_connect+0x78>
 811629a:	2300      	movs	r3, #0
 811629c:	68fa      	ldr	r2, [r7, #12]
 811629e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 81162a0:	68fb      	ldr	r3, [r7, #12]
 81162a2:	88fa      	ldrh	r2, [r7, #6]
 81162a4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 81162a6:	68fb      	ldr	r3, [r7, #12]
 81162a8:	7c1b      	ldrb	r3, [r3, #16]
 81162aa:	f043 0304 	orr.w	r3, r3, #4
 81162ae:	b2da      	uxtb	r2, r3
 81162b0:	68fb      	ldr	r3, [r7, #12]
 81162b2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 81162b4:	4b11      	ldr	r3, [pc, #68]	@ (81162fc <udp_connect+0xd8>)
 81162b6:	681b      	ldr	r3, [r3, #0]
 81162b8:	617b      	str	r3, [r7, #20]
 81162ba:	e008      	b.n	81162ce <udp_connect+0xaa>
    if (pcb == ipcb) {
 81162bc:	68fa      	ldr	r2, [r7, #12]
 81162be:	697b      	ldr	r3, [r7, #20]
 81162c0:	429a      	cmp	r2, r3
 81162c2:	d101      	bne.n	81162c8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 81162c4:	2300      	movs	r3, #0
 81162c6:	e00d      	b.n	81162e4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 81162c8:	697b      	ldr	r3, [r7, #20]
 81162ca:	68db      	ldr	r3, [r3, #12]
 81162cc:	617b      	str	r3, [r7, #20]
 81162ce:	697b      	ldr	r3, [r7, #20]
 81162d0:	2b00      	cmp	r3, #0
 81162d2:	d1f3      	bne.n	81162bc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 81162d4:	4b09      	ldr	r3, [pc, #36]	@ (81162fc <udp_connect+0xd8>)
 81162d6:	681a      	ldr	r2, [r3, #0]
 81162d8:	68fb      	ldr	r3, [r7, #12]
 81162da:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 81162dc:	4a07      	ldr	r2, [pc, #28]	@ (81162fc <udp_connect+0xd8>)
 81162de:	68fb      	ldr	r3, [r7, #12]
 81162e0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 81162e2:	2300      	movs	r3, #0
}
 81162e4:	4618      	mov	r0, r3
 81162e6:	3718      	adds	r7, #24
 81162e8:	46bd      	mov	sp, r7
 81162ea:	bd80      	pop	{r7, pc}
 81162ec:	0811a230 	.word	0x0811a230
 81162f0:	0811a550 	.word	0x0811a550
 81162f4:	0811a2c4 	.word	0x0811a2c4
 81162f8:	0811a56c 	.word	0x0811a56c
 81162fc:	1000b8b8 	.word	0x1000b8b8

08116300 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8116300:	b580      	push	{r7, lr}
 8116302:	b082      	sub	sp, #8
 8116304:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8116306:	2000      	movs	r0, #0
 8116308:	f7f8 fc24 	bl	810eb54 <memp_malloc>
 811630c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 811630e:	687b      	ldr	r3, [r7, #4]
 8116310:	2b00      	cmp	r3, #0
 8116312:	d007      	beq.n	8116324 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8116314:	2220      	movs	r2, #32
 8116316:	2100      	movs	r1, #0
 8116318:	6878      	ldr	r0, [r7, #4]
 811631a:	f000 fb64 	bl	81169e6 <memset>
    pcb->ttl = UDP_TTL;
 811631e:	687b      	ldr	r3, [r7, #4]
 8116320:	22ff      	movs	r2, #255	@ 0xff
 8116322:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8116324:	687b      	ldr	r3, [r7, #4]
}
 8116326:	4618      	mov	r0, r3
 8116328:	3708      	adds	r7, #8
 811632a:	46bd      	mov	sp, r7
 811632c:	bd80      	pop	{r7, pc}
	...

08116330 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8116330:	b480      	push	{r7}
 8116332:	b085      	sub	sp, #20
 8116334:	af00      	add	r7, sp, #0
 8116336:	6078      	str	r0, [r7, #4]
 8116338:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 811633a:	687b      	ldr	r3, [r7, #4]
 811633c:	2b00      	cmp	r3, #0
 811633e:	d01e      	beq.n	811637e <udp_netif_ip_addr_changed+0x4e>
 8116340:	687b      	ldr	r3, [r7, #4]
 8116342:	681b      	ldr	r3, [r3, #0]
 8116344:	2b00      	cmp	r3, #0
 8116346:	d01a      	beq.n	811637e <udp_netif_ip_addr_changed+0x4e>
 8116348:	683b      	ldr	r3, [r7, #0]
 811634a:	2b00      	cmp	r3, #0
 811634c:	d017      	beq.n	811637e <udp_netif_ip_addr_changed+0x4e>
 811634e:	683b      	ldr	r3, [r7, #0]
 8116350:	681b      	ldr	r3, [r3, #0]
 8116352:	2b00      	cmp	r3, #0
 8116354:	d013      	beq.n	811637e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8116356:	4b0d      	ldr	r3, [pc, #52]	@ (811638c <udp_netif_ip_addr_changed+0x5c>)
 8116358:	681b      	ldr	r3, [r3, #0]
 811635a:	60fb      	str	r3, [r7, #12]
 811635c:	e00c      	b.n	8116378 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 811635e:	68fb      	ldr	r3, [r7, #12]
 8116360:	681a      	ldr	r2, [r3, #0]
 8116362:	687b      	ldr	r3, [r7, #4]
 8116364:	681b      	ldr	r3, [r3, #0]
 8116366:	429a      	cmp	r2, r3
 8116368:	d103      	bne.n	8116372 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 811636a:	683b      	ldr	r3, [r7, #0]
 811636c:	681a      	ldr	r2, [r3, #0]
 811636e:	68fb      	ldr	r3, [r7, #12]
 8116370:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8116372:	68fb      	ldr	r3, [r7, #12]
 8116374:	68db      	ldr	r3, [r3, #12]
 8116376:	60fb      	str	r3, [r7, #12]
 8116378:	68fb      	ldr	r3, [r7, #12]
 811637a:	2b00      	cmp	r3, #0
 811637c:	d1ef      	bne.n	811635e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 811637e:	bf00      	nop
 8116380:	3714      	adds	r7, #20
 8116382:	46bd      	mov	sp, r7
 8116384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116388:	4770      	bx	lr
 811638a:	bf00      	nop
 811638c:	1000b8b8 	.word	0x1000b8b8

08116390 <_ZdlPvj>:
 8116390:	f000 b8da 	b.w	8116548 <_ZdlPv>

08116394 <_Znwj>:
 8116394:	2801      	cmp	r0, #1
 8116396:	bf38      	it	cc
 8116398:	2001      	movcc	r0, #1
 811639a:	b510      	push	{r4, lr}
 811639c:	4604      	mov	r4, r0
 811639e:	4620      	mov	r0, r4
 81163a0:	f000 f8e4 	bl	811656c <malloc>
 81163a4:	b100      	cbz	r0, 81163a8 <_Znwj+0x14>
 81163a6:	bd10      	pop	{r4, pc}
 81163a8:	f000 f8d0 	bl	811654c <_ZSt15get_new_handlerv>
 81163ac:	b908      	cbnz	r0, 81163b2 <_Znwj+0x1e>
 81163ae:	f000 f8d5 	bl	811655c <abort>
 81163b2:	4780      	blx	r0
 81163b4:	e7f3      	b.n	811639e <_Znwj+0xa>

081163b6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 81163b6:	68c3      	ldr	r3, [r0, #12]
 81163b8:	689a      	ldr	r2, [r3, #8]
 81163ba:	60c2      	str	r2, [r0, #12]
 81163bc:	b510      	push	{r4, lr}
 81163be:	b102      	cbz	r2, 81163c2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 81163c0:	6050      	str	r0, [r2, #4]
 81163c2:	6842      	ldr	r2, [r0, #4]
 81163c4:	605a      	str	r2, [r3, #4]
 81163c6:	680c      	ldr	r4, [r1, #0]
 81163c8:	4284      	cmp	r4, r0
 81163ca:	d103      	bne.n	81163d4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 81163cc:	600b      	str	r3, [r1, #0]
 81163ce:	6098      	str	r0, [r3, #8]
 81163d0:	6043      	str	r3, [r0, #4]
 81163d2:	bd10      	pop	{r4, pc}
 81163d4:	6891      	ldr	r1, [r2, #8]
 81163d6:	4281      	cmp	r1, r0
 81163d8:	bf0c      	ite	eq
 81163da:	6093      	streq	r3, [r2, #8]
 81163dc:	60d3      	strne	r3, [r2, #12]
 81163de:	e7f6      	b.n	81163ce <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

081163e0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 81163e0:	6883      	ldr	r3, [r0, #8]
 81163e2:	68da      	ldr	r2, [r3, #12]
 81163e4:	6082      	str	r2, [r0, #8]
 81163e6:	b510      	push	{r4, lr}
 81163e8:	b102      	cbz	r2, 81163ec <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 81163ea:	6050      	str	r0, [r2, #4]
 81163ec:	6842      	ldr	r2, [r0, #4]
 81163ee:	605a      	str	r2, [r3, #4]
 81163f0:	680c      	ldr	r4, [r1, #0]
 81163f2:	4284      	cmp	r4, r0
 81163f4:	d103      	bne.n	81163fe <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 81163f6:	600b      	str	r3, [r1, #0]
 81163f8:	60d8      	str	r0, [r3, #12]
 81163fa:	6043      	str	r3, [r0, #4]
 81163fc:	bd10      	pop	{r4, pc}
 81163fe:	68d1      	ldr	r1, [r2, #12]
 8116400:	4281      	cmp	r1, r0
 8116402:	bf0c      	ite	eq
 8116404:	60d3      	streq	r3, [r2, #12]
 8116406:	6093      	strne	r3, [r2, #8]
 8116408:	e7f6      	b.n	81163f8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0811640a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 811640a:	68c3      	ldr	r3, [r0, #12]
 811640c:	b123      	cbz	r3, 8116418 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 811640e:	4618      	mov	r0, r3
 8116410:	689b      	ldr	r3, [r3, #8]
 8116412:	2b00      	cmp	r3, #0
 8116414:	d1fb      	bne.n	811640e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8116416:	4770      	bx	lr
 8116418:	6843      	ldr	r3, [r0, #4]
 811641a:	68da      	ldr	r2, [r3, #12]
 811641c:	4282      	cmp	r2, r0
 811641e:	d004      	beq.n	811642a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8116420:	68c2      	ldr	r2, [r0, #12]
 8116422:	4293      	cmp	r3, r2
 8116424:	bf18      	it	ne
 8116426:	4618      	movne	r0, r3
 8116428:	4770      	bx	lr
 811642a:	4618      	mov	r0, r3
 811642c:	685b      	ldr	r3, [r3, #4]
 811642e:	e7f4      	b.n	811641a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08116430 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8116430:	7802      	ldrb	r2, [r0, #0]
 8116432:	4603      	mov	r3, r0
 8116434:	b92a      	cbnz	r2, 8116442 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8116436:	6842      	ldr	r2, [r0, #4]
 8116438:	6852      	ldr	r2, [r2, #4]
 811643a:	4282      	cmp	r2, r0
 811643c:	d101      	bne.n	8116442 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 811643e:	68d0      	ldr	r0, [r2, #12]
 8116440:	4770      	bx	lr
 8116442:	689a      	ldr	r2, [r3, #8]
 8116444:	b122      	cbz	r2, 8116450 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8116446:	4610      	mov	r0, r2
 8116448:	68d2      	ldr	r2, [r2, #12]
 811644a:	2a00      	cmp	r2, #0
 811644c:	d1fb      	bne.n	8116446 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 811644e:	4770      	bx	lr
 8116450:	6858      	ldr	r0, [r3, #4]
 8116452:	6882      	ldr	r2, [r0, #8]
 8116454:	429a      	cmp	r2, r3
 8116456:	d000      	beq.n	811645a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8116458:	4770      	bx	lr
 811645a:	4603      	mov	r3, r0
 811645c:	6840      	ldr	r0, [r0, #4]
 811645e:	e7f8      	b.n	8116452 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08116460 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8116460:	f7ff bfd3 	b.w	811640a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08116464 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8116464:	f7ff bfe4 	b.w	8116430 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08116468 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8116468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811646c:	461d      	mov	r5, r3
 811646e:	1d1f      	adds	r7, r3, #4
 8116470:	2300      	movs	r3, #0
 8116472:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8116476:	460c      	mov	r4, r1
 8116478:	604a      	str	r2, [r1, #4]
 811647a:	700b      	strb	r3, [r1, #0]
 811647c:	b1a0      	cbz	r0, 81164a8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 811647e:	4295      	cmp	r5, r2
 8116480:	6091      	str	r1, [r2, #8]
 8116482:	d102      	bne.n	811648a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8116484:	6069      	str	r1, [r5, #4]
 8116486:	60ec      	str	r4, [r5, #12]
 8116488:	e003      	b.n	8116492 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 811648a:	68ab      	ldr	r3, [r5, #8]
 811648c:	4293      	cmp	r3, r2
 811648e:	bf08      	it	eq
 8116490:	60a9      	streq	r1, [r5, #8]
 8116492:	f04f 0900 	mov.w	r9, #0
 8116496:	f04f 0801 	mov.w	r8, #1
 811649a:	686b      	ldr	r3, [r5, #4]
 811649c:	42a3      	cmp	r3, r4
 811649e:	d132      	bne.n	8116506 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 81164a0:	2201      	movs	r2, #1
 81164a2:	701a      	strb	r2, [r3, #0]
 81164a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81164a8:	60d1      	str	r1, [r2, #12]
 81164aa:	68eb      	ldr	r3, [r5, #12]
 81164ac:	4293      	cmp	r3, r2
 81164ae:	d1f0      	bne.n	8116492 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 81164b0:	e7e9      	b.n	8116486 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 81164b2:	68c3      	ldr	r3, [r0, #12]
 81164b4:	42a3      	cmp	r3, r4
 81164b6:	d103      	bne.n	81164c0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 81164b8:	4639      	mov	r1, r7
 81164ba:	f7ff ff7c 	bl	81163b6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 81164be:	4604      	mov	r4, r0
 81164c0:	6863      	ldr	r3, [r4, #4]
 81164c2:	4639      	mov	r1, r7
 81164c4:	f883 8000 	strb.w	r8, [r3]
 81164c8:	4630      	mov	r0, r6
 81164ca:	f886 9000 	strb.w	r9, [r6]
 81164ce:	f7ff ff87 	bl	81163e0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 81164d2:	e7e2      	b.n	811649a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 81164d4:	b133      	cbz	r3, 81164e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 81164d6:	781a      	ldrb	r2, [r3, #0]
 81164d8:	b922      	cbnz	r2, 81164e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 81164da:	f880 8000 	strb.w	r8, [r0]
 81164de:	f883 8000 	strb.w	r8, [r3]
 81164e2:	e021      	b.n	8116528 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 81164e4:	6883      	ldr	r3, [r0, #8]
 81164e6:	42a3      	cmp	r3, r4
 81164e8:	d103      	bne.n	81164f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 81164ea:	4639      	mov	r1, r7
 81164ec:	f7ff ff78 	bl	81163e0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 81164f0:	4604      	mov	r4, r0
 81164f2:	6863      	ldr	r3, [r4, #4]
 81164f4:	4639      	mov	r1, r7
 81164f6:	f883 8000 	strb.w	r8, [r3]
 81164fa:	4630      	mov	r0, r6
 81164fc:	f886 9000 	strb.w	r9, [r6]
 8116500:	f7ff ff59 	bl	81163b6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8116504:	e7c9      	b.n	811649a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8116506:	6860      	ldr	r0, [r4, #4]
 8116508:	7802      	ldrb	r2, [r0, #0]
 811650a:	2a00      	cmp	r2, #0
 811650c:	d1c8      	bne.n	81164a0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 811650e:	6846      	ldr	r6, [r0, #4]
 8116510:	68b3      	ldr	r3, [r6, #8]
 8116512:	4283      	cmp	r3, r0
 8116514:	d1de      	bne.n	81164d4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8116516:	68f2      	ldr	r2, [r6, #12]
 8116518:	2a00      	cmp	r2, #0
 811651a:	d0ca      	beq.n	81164b2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 811651c:	7811      	ldrb	r1, [r2, #0]
 811651e:	2900      	cmp	r1, #0
 8116520:	d1c7      	bne.n	81164b2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8116522:	2101      	movs	r1, #1
 8116524:	7019      	strb	r1, [r3, #0]
 8116526:	7011      	strb	r1, [r2, #0]
 8116528:	f886 9000 	strb.w	r9, [r6]
 811652c:	4634      	mov	r4, r6
 811652e:	e7b4      	b.n	811649a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08116530 <_ZSt17__throw_bad_allocv>:
 8116530:	b508      	push	{r3, lr}
 8116532:	f000 f813 	bl	811655c <abort>

08116536 <_ZSt28__throw_bad_array_new_lengthv>:
 8116536:	b508      	push	{r3, lr}
 8116538:	f000 f810 	bl	811655c <abort>

0811653c <_ZSt20__throw_length_errorPKc>:
 811653c:	b508      	push	{r3, lr}
 811653e:	f000 f80d 	bl	811655c <abort>

08116542 <_ZSt25__throw_bad_function_callv>:
 8116542:	b508      	push	{r3, lr}
 8116544:	f000 f80a 	bl	811655c <abort>

08116548 <_ZdlPv>:
 8116548:	f000 b818 	b.w	811657c <free>

0811654c <_ZSt15get_new_handlerv>:
 811654c:	4b02      	ldr	r3, [pc, #8]	@ (8116558 <_ZSt15get_new_handlerv+0xc>)
 811654e:	6818      	ldr	r0, [r3, #0]
 8116550:	f3bf 8f5b 	dmb	ish
 8116554:	4770      	bx	lr
 8116556:	bf00      	nop
 8116558:	1000b8bc 	.word	0x1000b8bc

0811655c <abort>:
 811655c:	b508      	push	{r3, lr}
 811655e:	2006      	movs	r0, #6
 8116560:	f000 fa72 	bl	8116a48 <raise>
 8116564:	2001      	movs	r0, #1
 8116566:	f7ea fa7d 	bl	8100a64 <_exit>
	...

0811656c <malloc>:
 811656c:	4b02      	ldr	r3, [pc, #8]	@ (8116578 <malloc+0xc>)
 811656e:	4601      	mov	r1, r0
 8116570:	6818      	ldr	r0, [r3, #0]
 8116572:	f000 b82d 	b.w	81165d0 <_malloc_r>
 8116576:	bf00      	nop
 8116578:	10000040 	.word	0x10000040

0811657c <free>:
 811657c:	4b02      	ldr	r3, [pc, #8]	@ (8116588 <free+0xc>)
 811657e:	4601      	mov	r1, r0
 8116580:	6818      	ldr	r0, [r3, #0]
 8116582:	f000 bb7d 	b.w	8116c80 <_free_r>
 8116586:	bf00      	nop
 8116588:	10000040 	.word	0x10000040

0811658c <sbrk_aligned>:
 811658c:	b570      	push	{r4, r5, r6, lr}
 811658e:	4e0f      	ldr	r6, [pc, #60]	@ (81165cc <sbrk_aligned+0x40>)
 8116590:	460c      	mov	r4, r1
 8116592:	6831      	ldr	r1, [r6, #0]
 8116594:	4605      	mov	r5, r0
 8116596:	b911      	cbnz	r1, 811659e <sbrk_aligned+0x12>
 8116598:	f000 fafc 	bl	8116b94 <_sbrk_r>
 811659c:	6030      	str	r0, [r6, #0]
 811659e:	4621      	mov	r1, r4
 81165a0:	4628      	mov	r0, r5
 81165a2:	f000 faf7 	bl	8116b94 <_sbrk_r>
 81165a6:	1c43      	adds	r3, r0, #1
 81165a8:	d103      	bne.n	81165b2 <sbrk_aligned+0x26>
 81165aa:	f04f 34ff 	mov.w	r4, #4294967295
 81165ae:	4620      	mov	r0, r4
 81165b0:	bd70      	pop	{r4, r5, r6, pc}
 81165b2:	1cc4      	adds	r4, r0, #3
 81165b4:	f024 0403 	bic.w	r4, r4, #3
 81165b8:	42a0      	cmp	r0, r4
 81165ba:	d0f8      	beq.n	81165ae <sbrk_aligned+0x22>
 81165bc:	1a21      	subs	r1, r4, r0
 81165be:	4628      	mov	r0, r5
 81165c0:	f000 fae8 	bl	8116b94 <_sbrk_r>
 81165c4:	3001      	adds	r0, #1
 81165c6:	d1f2      	bne.n	81165ae <sbrk_aligned+0x22>
 81165c8:	e7ef      	b.n	81165aa <sbrk_aligned+0x1e>
 81165ca:	bf00      	nop
 81165cc:	1000b8c0 	.word	0x1000b8c0

081165d0 <_malloc_r>:
 81165d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81165d4:	1ccd      	adds	r5, r1, #3
 81165d6:	f025 0503 	bic.w	r5, r5, #3
 81165da:	3508      	adds	r5, #8
 81165dc:	2d0c      	cmp	r5, #12
 81165de:	bf38      	it	cc
 81165e0:	250c      	movcc	r5, #12
 81165e2:	2d00      	cmp	r5, #0
 81165e4:	4606      	mov	r6, r0
 81165e6:	db01      	blt.n	81165ec <_malloc_r+0x1c>
 81165e8:	42a9      	cmp	r1, r5
 81165ea:	d904      	bls.n	81165f6 <_malloc_r+0x26>
 81165ec:	230c      	movs	r3, #12
 81165ee:	6033      	str	r3, [r6, #0]
 81165f0:	2000      	movs	r0, #0
 81165f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81165f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 81166cc <_malloc_r+0xfc>
 81165fa:	f000 f869 	bl	81166d0 <__malloc_lock>
 81165fe:	f8d8 3000 	ldr.w	r3, [r8]
 8116602:	461c      	mov	r4, r3
 8116604:	bb44      	cbnz	r4, 8116658 <_malloc_r+0x88>
 8116606:	4629      	mov	r1, r5
 8116608:	4630      	mov	r0, r6
 811660a:	f7ff ffbf 	bl	811658c <sbrk_aligned>
 811660e:	1c43      	adds	r3, r0, #1
 8116610:	4604      	mov	r4, r0
 8116612:	d158      	bne.n	81166c6 <_malloc_r+0xf6>
 8116614:	f8d8 4000 	ldr.w	r4, [r8]
 8116618:	4627      	mov	r7, r4
 811661a:	2f00      	cmp	r7, #0
 811661c:	d143      	bne.n	81166a6 <_malloc_r+0xd6>
 811661e:	2c00      	cmp	r4, #0
 8116620:	d04b      	beq.n	81166ba <_malloc_r+0xea>
 8116622:	6823      	ldr	r3, [r4, #0]
 8116624:	4639      	mov	r1, r7
 8116626:	4630      	mov	r0, r6
 8116628:	eb04 0903 	add.w	r9, r4, r3
 811662c:	f000 fab2 	bl	8116b94 <_sbrk_r>
 8116630:	4581      	cmp	r9, r0
 8116632:	d142      	bne.n	81166ba <_malloc_r+0xea>
 8116634:	6821      	ldr	r1, [r4, #0]
 8116636:	1a6d      	subs	r5, r5, r1
 8116638:	4629      	mov	r1, r5
 811663a:	4630      	mov	r0, r6
 811663c:	f7ff ffa6 	bl	811658c <sbrk_aligned>
 8116640:	3001      	adds	r0, #1
 8116642:	d03a      	beq.n	81166ba <_malloc_r+0xea>
 8116644:	6823      	ldr	r3, [r4, #0]
 8116646:	442b      	add	r3, r5
 8116648:	6023      	str	r3, [r4, #0]
 811664a:	f8d8 3000 	ldr.w	r3, [r8]
 811664e:	685a      	ldr	r2, [r3, #4]
 8116650:	bb62      	cbnz	r2, 81166ac <_malloc_r+0xdc>
 8116652:	f8c8 7000 	str.w	r7, [r8]
 8116656:	e00f      	b.n	8116678 <_malloc_r+0xa8>
 8116658:	6822      	ldr	r2, [r4, #0]
 811665a:	1b52      	subs	r2, r2, r5
 811665c:	d420      	bmi.n	81166a0 <_malloc_r+0xd0>
 811665e:	2a0b      	cmp	r2, #11
 8116660:	d917      	bls.n	8116692 <_malloc_r+0xc2>
 8116662:	1961      	adds	r1, r4, r5
 8116664:	42a3      	cmp	r3, r4
 8116666:	6025      	str	r5, [r4, #0]
 8116668:	bf18      	it	ne
 811666a:	6059      	strne	r1, [r3, #4]
 811666c:	6863      	ldr	r3, [r4, #4]
 811666e:	bf08      	it	eq
 8116670:	f8c8 1000 	streq.w	r1, [r8]
 8116674:	5162      	str	r2, [r4, r5]
 8116676:	604b      	str	r3, [r1, #4]
 8116678:	4630      	mov	r0, r6
 811667a:	f000 f82f 	bl	81166dc <__malloc_unlock>
 811667e:	f104 000b 	add.w	r0, r4, #11
 8116682:	1d23      	adds	r3, r4, #4
 8116684:	f020 0007 	bic.w	r0, r0, #7
 8116688:	1ac2      	subs	r2, r0, r3
 811668a:	bf1c      	itt	ne
 811668c:	1a1b      	subne	r3, r3, r0
 811668e:	50a3      	strne	r3, [r4, r2]
 8116690:	e7af      	b.n	81165f2 <_malloc_r+0x22>
 8116692:	6862      	ldr	r2, [r4, #4]
 8116694:	42a3      	cmp	r3, r4
 8116696:	bf0c      	ite	eq
 8116698:	f8c8 2000 	streq.w	r2, [r8]
 811669c:	605a      	strne	r2, [r3, #4]
 811669e:	e7eb      	b.n	8116678 <_malloc_r+0xa8>
 81166a0:	4623      	mov	r3, r4
 81166a2:	6864      	ldr	r4, [r4, #4]
 81166a4:	e7ae      	b.n	8116604 <_malloc_r+0x34>
 81166a6:	463c      	mov	r4, r7
 81166a8:	687f      	ldr	r7, [r7, #4]
 81166aa:	e7b6      	b.n	811661a <_malloc_r+0x4a>
 81166ac:	461a      	mov	r2, r3
 81166ae:	685b      	ldr	r3, [r3, #4]
 81166b0:	42a3      	cmp	r3, r4
 81166b2:	d1fb      	bne.n	81166ac <_malloc_r+0xdc>
 81166b4:	2300      	movs	r3, #0
 81166b6:	6053      	str	r3, [r2, #4]
 81166b8:	e7de      	b.n	8116678 <_malloc_r+0xa8>
 81166ba:	230c      	movs	r3, #12
 81166bc:	6033      	str	r3, [r6, #0]
 81166be:	4630      	mov	r0, r6
 81166c0:	f000 f80c 	bl	81166dc <__malloc_unlock>
 81166c4:	e794      	b.n	81165f0 <_malloc_r+0x20>
 81166c6:	6005      	str	r5, [r0, #0]
 81166c8:	e7d6      	b.n	8116678 <_malloc_r+0xa8>
 81166ca:	bf00      	nop
 81166cc:	1000b8c4 	.word	0x1000b8c4

081166d0 <__malloc_lock>:
 81166d0:	4801      	ldr	r0, [pc, #4]	@ (81166d8 <__malloc_lock+0x8>)
 81166d2:	f000 baa6 	b.w	8116c22 <__retarget_lock_acquire_recursive>
 81166d6:	bf00      	nop
 81166d8:	1000ba08 	.word	0x1000ba08

081166dc <__malloc_unlock>:
 81166dc:	4801      	ldr	r0, [pc, #4]	@ (81166e4 <__malloc_unlock+0x8>)
 81166de:	f000 baa1 	b.w	8116c24 <__retarget_lock_release_recursive>
 81166e2:	bf00      	nop
 81166e4:	1000ba08 	.word	0x1000ba08

081166e8 <rand>:
 81166e8:	4b16      	ldr	r3, [pc, #88]	@ (8116744 <rand+0x5c>)
 81166ea:	b510      	push	{r4, lr}
 81166ec:	681c      	ldr	r4, [r3, #0]
 81166ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 81166f0:	b9b3      	cbnz	r3, 8116720 <rand+0x38>
 81166f2:	2018      	movs	r0, #24
 81166f4:	f7ff ff3a 	bl	811656c <malloc>
 81166f8:	4602      	mov	r2, r0
 81166fa:	6320      	str	r0, [r4, #48]	@ 0x30
 81166fc:	b920      	cbnz	r0, 8116708 <rand+0x20>
 81166fe:	4b12      	ldr	r3, [pc, #72]	@ (8116748 <rand+0x60>)
 8116700:	4812      	ldr	r0, [pc, #72]	@ (811674c <rand+0x64>)
 8116702:	2152      	movs	r1, #82	@ 0x52
 8116704:	f000 fa9e 	bl	8116c44 <__assert_func>
 8116708:	4911      	ldr	r1, [pc, #68]	@ (8116750 <rand+0x68>)
 811670a:	4b12      	ldr	r3, [pc, #72]	@ (8116754 <rand+0x6c>)
 811670c:	e9c0 1300 	strd	r1, r3, [r0]
 8116710:	4b11      	ldr	r3, [pc, #68]	@ (8116758 <rand+0x70>)
 8116712:	6083      	str	r3, [r0, #8]
 8116714:	230b      	movs	r3, #11
 8116716:	8183      	strh	r3, [r0, #12]
 8116718:	2100      	movs	r1, #0
 811671a:	2001      	movs	r0, #1
 811671c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8116720:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8116722:	480e      	ldr	r0, [pc, #56]	@ (811675c <rand+0x74>)
 8116724:	690b      	ldr	r3, [r1, #16]
 8116726:	694c      	ldr	r4, [r1, #20]
 8116728:	4a0d      	ldr	r2, [pc, #52]	@ (8116760 <rand+0x78>)
 811672a:	4358      	muls	r0, r3
 811672c:	fb02 0004 	mla	r0, r2, r4, r0
 8116730:	fba3 3202 	umull	r3, r2, r3, r2
 8116734:	3301      	adds	r3, #1
 8116736:	eb40 0002 	adc.w	r0, r0, r2
 811673a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 811673e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8116742:	bd10      	pop	{r4, pc}
 8116744:	10000040 	.word	0x10000040
 8116748:	0811a784 	.word	0x0811a784
 811674c:	0811a79b 	.word	0x0811a79b
 8116750:	abcd330e 	.word	0xabcd330e
 8116754:	e66d1234 	.word	0xe66d1234
 8116758:	0005deec 	.word	0x0005deec
 811675c:	5851f42d 	.word	0x5851f42d
 8116760:	4c957f2d 	.word	0x4c957f2d

08116764 <std>:
 8116764:	2300      	movs	r3, #0
 8116766:	b510      	push	{r4, lr}
 8116768:	4604      	mov	r4, r0
 811676a:	e9c0 3300 	strd	r3, r3, [r0]
 811676e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8116772:	6083      	str	r3, [r0, #8]
 8116774:	8181      	strh	r1, [r0, #12]
 8116776:	6643      	str	r3, [r0, #100]	@ 0x64
 8116778:	81c2      	strh	r2, [r0, #14]
 811677a:	6183      	str	r3, [r0, #24]
 811677c:	4619      	mov	r1, r3
 811677e:	2208      	movs	r2, #8
 8116780:	305c      	adds	r0, #92	@ 0x5c
 8116782:	f000 f930 	bl	81169e6 <memset>
 8116786:	4b0d      	ldr	r3, [pc, #52]	@ (81167bc <std+0x58>)
 8116788:	6263      	str	r3, [r4, #36]	@ 0x24
 811678a:	4b0d      	ldr	r3, [pc, #52]	@ (81167c0 <std+0x5c>)
 811678c:	62a3      	str	r3, [r4, #40]	@ 0x28
 811678e:	4b0d      	ldr	r3, [pc, #52]	@ (81167c4 <std+0x60>)
 8116790:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8116792:	4b0d      	ldr	r3, [pc, #52]	@ (81167c8 <std+0x64>)
 8116794:	6323      	str	r3, [r4, #48]	@ 0x30
 8116796:	4b0d      	ldr	r3, [pc, #52]	@ (81167cc <std+0x68>)
 8116798:	6224      	str	r4, [r4, #32]
 811679a:	429c      	cmp	r4, r3
 811679c:	d006      	beq.n	81167ac <std+0x48>
 811679e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 81167a2:	4294      	cmp	r4, r2
 81167a4:	d002      	beq.n	81167ac <std+0x48>
 81167a6:	33d0      	adds	r3, #208	@ 0xd0
 81167a8:	429c      	cmp	r4, r3
 81167aa:	d105      	bne.n	81167b8 <std+0x54>
 81167ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 81167b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81167b4:	f000 ba34 	b.w	8116c20 <__retarget_lock_init_recursive>
 81167b8:	bd10      	pop	{r4, pc}
 81167ba:	bf00      	nop
 81167bc:	0811690d 	.word	0x0811690d
 81167c0:	0811692f 	.word	0x0811692f
 81167c4:	08116967 	.word	0x08116967
 81167c8:	0811698b 	.word	0x0811698b
 81167cc:	1000b8c8 	.word	0x1000b8c8

081167d0 <stdio_exit_handler>:
 81167d0:	4a02      	ldr	r2, [pc, #8]	@ (81167dc <stdio_exit_handler+0xc>)
 81167d2:	4903      	ldr	r1, [pc, #12]	@ (81167e0 <stdio_exit_handler+0x10>)
 81167d4:	4803      	ldr	r0, [pc, #12]	@ (81167e4 <stdio_exit_handler+0x14>)
 81167d6:	f000 b869 	b.w	81168ac <_fwalk_sglue>
 81167da:	bf00      	nop
 81167dc:	10000034 	.word	0x10000034
 81167e0:	081173bd 	.word	0x081173bd
 81167e4:	10000044 	.word	0x10000044

081167e8 <cleanup_stdio>:
 81167e8:	6841      	ldr	r1, [r0, #4]
 81167ea:	4b0c      	ldr	r3, [pc, #48]	@ (811681c <cleanup_stdio+0x34>)
 81167ec:	4299      	cmp	r1, r3
 81167ee:	b510      	push	{r4, lr}
 81167f0:	4604      	mov	r4, r0
 81167f2:	d001      	beq.n	81167f8 <cleanup_stdio+0x10>
 81167f4:	f000 fde2 	bl	81173bc <_fflush_r>
 81167f8:	68a1      	ldr	r1, [r4, #8]
 81167fa:	4b09      	ldr	r3, [pc, #36]	@ (8116820 <cleanup_stdio+0x38>)
 81167fc:	4299      	cmp	r1, r3
 81167fe:	d002      	beq.n	8116806 <cleanup_stdio+0x1e>
 8116800:	4620      	mov	r0, r4
 8116802:	f000 fddb 	bl	81173bc <_fflush_r>
 8116806:	68e1      	ldr	r1, [r4, #12]
 8116808:	4b06      	ldr	r3, [pc, #24]	@ (8116824 <cleanup_stdio+0x3c>)
 811680a:	4299      	cmp	r1, r3
 811680c:	d004      	beq.n	8116818 <cleanup_stdio+0x30>
 811680e:	4620      	mov	r0, r4
 8116810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8116814:	f000 bdd2 	b.w	81173bc <_fflush_r>
 8116818:	bd10      	pop	{r4, pc}
 811681a:	bf00      	nop
 811681c:	1000b8c8 	.word	0x1000b8c8
 8116820:	1000b930 	.word	0x1000b930
 8116824:	1000b998 	.word	0x1000b998

08116828 <global_stdio_init.part.0>:
 8116828:	b510      	push	{r4, lr}
 811682a:	4b0b      	ldr	r3, [pc, #44]	@ (8116858 <global_stdio_init.part.0+0x30>)
 811682c:	4c0b      	ldr	r4, [pc, #44]	@ (811685c <global_stdio_init.part.0+0x34>)
 811682e:	4a0c      	ldr	r2, [pc, #48]	@ (8116860 <global_stdio_init.part.0+0x38>)
 8116830:	601a      	str	r2, [r3, #0]
 8116832:	4620      	mov	r0, r4
 8116834:	2200      	movs	r2, #0
 8116836:	2104      	movs	r1, #4
 8116838:	f7ff ff94 	bl	8116764 <std>
 811683c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8116840:	2201      	movs	r2, #1
 8116842:	2109      	movs	r1, #9
 8116844:	f7ff ff8e 	bl	8116764 <std>
 8116848:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 811684c:	2202      	movs	r2, #2
 811684e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8116852:	2112      	movs	r1, #18
 8116854:	f7ff bf86 	b.w	8116764 <std>
 8116858:	1000ba00 	.word	0x1000ba00
 811685c:	1000b8c8 	.word	0x1000b8c8
 8116860:	081167d1 	.word	0x081167d1

08116864 <__sfp_lock_acquire>:
 8116864:	4801      	ldr	r0, [pc, #4]	@ (811686c <__sfp_lock_acquire+0x8>)
 8116866:	f000 b9dc 	b.w	8116c22 <__retarget_lock_acquire_recursive>
 811686a:	bf00      	nop
 811686c:	1000ba09 	.word	0x1000ba09

08116870 <__sfp_lock_release>:
 8116870:	4801      	ldr	r0, [pc, #4]	@ (8116878 <__sfp_lock_release+0x8>)
 8116872:	f000 b9d7 	b.w	8116c24 <__retarget_lock_release_recursive>
 8116876:	bf00      	nop
 8116878:	1000ba09 	.word	0x1000ba09

0811687c <__sinit>:
 811687c:	b510      	push	{r4, lr}
 811687e:	4604      	mov	r4, r0
 8116880:	f7ff fff0 	bl	8116864 <__sfp_lock_acquire>
 8116884:	6a23      	ldr	r3, [r4, #32]
 8116886:	b11b      	cbz	r3, 8116890 <__sinit+0x14>
 8116888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811688c:	f7ff bff0 	b.w	8116870 <__sfp_lock_release>
 8116890:	4b04      	ldr	r3, [pc, #16]	@ (81168a4 <__sinit+0x28>)
 8116892:	6223      	str	r3, [r4, #32]
 8116894:	4b04      	ldr	r3, [pc, #16]	@ (81168a8 <__sinit+0x2c>)
 8116896:	681b      	ldr	r3, [r3, #0]
 8116898:	2b00      	cmp	r3, #0
 811689a:	d1f5      	bne.n	8116888 <__sinit+0xc>
 811689c:	f7ff ffc4 	bl	8116828 <global_stdio_init.part.0>
 81168a0:	e7f2      	b.n	8116888 <__sinit+0xc>
 81168a2:	bf00      	nop
 81168a4:	081167e9 	.word	0x081167e9
 81168a8:	1000ba00 	.word	0x1000ba00

081168ac <_fwalk_sglue>:
 81168ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81168b0:	4607      	mov	r7, r0
 81168b2:	4688      	mov	r8, r1
 81168b4:	4614      	mov	r4, r2
 81168b6:	2600      	movs	r6, #0
 81168b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 81168bc:	f1b9 0901 	subs.w	r9, r9, #1
 81168c0:	d505      	bpl.n	81168ce <_fwalk_sglue+0x22>
 81168c2:	6824      	ldr	r4, [r4, #0]
 81168c4:	2c00      	cmp	r4, #0
 81168c6:	d1f7      	bne.n	81168b8 <_fwalk_sglue+0xc>
 81168c8:	4630      	mov	r0, r6
 81168ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81168ce:	89ab      	ldrh	r3, [r5, #12]
 81168d0:	2b01      	cmp	r3, #1
 81168d2:	d907      	bls.n	81168e4 <_fwalk_sglue+0x38>
 81168d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81168d8:	3301      	adds	r3, #1
 81168da:	d003      	beq.n	81168e4 <_fwalk_sglue+0x38>
 81168dc:	4629      	mov	r1, r5
 81168de:	4638      	mov	r0, r7
 81168e0:	47c0      	blx	r8
 81168e2:	4306      	orrs	r6, r0
 81168e4:	3568      	adds	r5, #104	@ 0x68
 81168e6:	e7e9      	b.n	81168bc <_fwalk_sglue+0x10>

081168e8 <iprintf>:
 81168e8:	b40f      	push	{r0, r1, r2, r3}
 81168ea:	b507      	push	{r0, r1, r2, lr}
 81168ec:	4906      	ldr	r1, [pc, #24]	@ (8116908 <iprintf+0x20>)
 81168ee:	ab04      	add	r3, sp, #16
 81168f0:	6808      	ldr	r0, [r1, #0]
 81168f2:	f853 2b04 	ldr.w	r2, [r3], #4
 81168f6:	6881      	ldr	r1, [r0, #8]
 81168f8:	9301      	str	r3, [sp, #4]
 81168fa:	f000 fa35 	bl	8116d68 <_vfiprintf_r>
 81168fe:	b003      	add	sp, #12
 8116900:	f85d eb04 	ldr.w	lr, [sp], #4
 8116904:	b004      	add	sp, #16
 8116906:	4770      	bx	lr
 8116908:	10000040 	.word	0x10000040

0811690c <__sread>:
 811690c:	b510      	push	{r4, lr}
 811690e:	460c      	mov	r4, r1
 8116910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8116914:	f000 f918 	bl	8116b48 <_read_r>
 8116918:	2800      	cmp	r0, #0
 811691a:	bfab      	itete	ge
 811691c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 811691e:	89a3      	ldrhlt	r3, [r4, #12]
 8116920:	181b      	addge	r3, r3, r0
 8116922:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8116926:	bfac      	ite	ge
 8116928:	6563      	strge	r3, [r4, #84]	@ 0x54
 811692a:	81a3      	strhlt	r3, [r4, #12]
 811692c:	bd10      	pop	{r4, pc}

0811692e <__swrite>:
 811692e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8116932:	461f      	mov	r7, r3
 8116934:	898b      	ldrh	r3, [r1, #12]
 8116936:	05db      	lsls	r3, r3, #23
 8116938:	4605      	mov	r5, r0
 811693a:	460c      	mov	r4, r1
 811693c:	4616      	mov	r6, r2
 811693e:	d505      	bpl.n	811694c <__swrite+0x1e>
 8116940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8116944:	2302      	movs	r3, #2
 8116946:	2200      	movs	r2, #0
 8116948:	f000 f8ec 	bl	8116b24 <_lseek_r>
 811694c:	89a3      	ldrh	r3, [r4, #12]
 811694e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8116952:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8116956:	81a3      	strh	r3, [r4, #12]
 8116958:	4632      	mov	r2, r6
 811695a:	463b      	mov	r3, r7
 811695c:	4628      	mov	r0, r5
 811695e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8116962:	f000 b927 	b.w	8116bb4 <_write_r>

08116966 <__sseek>:
 8116966:	b510      	push	{r4, lr}
 8116968:	460c      	mov	r4, r1
 811696a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811696e:	f000 f8d9 	bl	8116b24 <_lseek_r>
 8116972:	1c43      	adds	r3, r0, #1
 8116974:	89a3      	ldrh	r3, [r4, #12]
 8116976:	bf15      	itete	ne
 8116978:	6560      	strne	r0, [r4, #84]	@ 0x54
 811697a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 811697e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8116982:	81a3      	strheq	r3, [r4, #12]
 8116984:	bf18      	it	ne
 8116986:	81a3      	strhne	r3, [r4, #12]
 8116988:	bd10      	pop	{r4, pc}

0811698a <__sclose>:
 811698a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811698e:	f000 b863 	b.w	8116a58 <_close_r>

08116992 <memcmp>:
 8116992:	b510      	push	{r4, lr}
 8116994:	3901      	subs	r1, #1
 8116996:	4402      	add	r2, r0
 8116998:	4290      	cmp	r0, r2
 811699a:	d101      	bne.n	81169a0 <memcmp+0xe>
 811699c:	2000      	movs	r0, #0
 811699e:	e005      	b.n	81169ac <memcmp+0x1a>
 81169a0:	7803      	ldrb	r3, [r0, #0]
 81169a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 81169a6:	42a3      	cmp	r3, r4
 81169a8:	d001      	beq.n	81169ae <memcmp+0x1c>
 81169aa:	1b18      	subs	r0, r3, r4
 81169ac:	bd10      	pop	{r4, pc}
 81169ae:	3001      	adds	r0, #1
 81169b0:	e7f2      	b.n	8116998 <memcmp+0x6>

081169b2 <memmove>:
 81169b2:	4288      	cmp	r0, r1
 81169b4:	b510      	push	{r4, lr}
 81169b6:	eb01 0402 	add.w	r4, r1, r2
 81169ba:	d902      	bls.n	81169c2 <memmove+0x10>
 81169bc:	4284      	cmp	r4, r0
 81169be:	4623      	mov	r3, r4
 81169c0:	d807      	bhi.n	81169d2 <memmove+0x20>
 81169c2:	1e43      	subs	r3, r0, #1
 81169c4:	42a1      	cmp	r1, r4
 81169c6:	d008      	beq.n	81169da <memmove+0x28>
 81169c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 81169cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 81169d0:	e7f8      	b.n	81169c4 <memmove+0x12>
 81169d2:	4402      	add	r2, r0
 81169d4:	4601      	mov	r1, r0
 81169d6:	428a      	cmp	r2, r1
 81169d8:	d100      	bne.n	81169dc <memmove+0x2a>
 81169da:	bd10      	pop	{r4, pc}
 81169dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 81169e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 81169e4:	e7f7      	b.n	81169d6 <memmove+0x24>

081169e6 <memset>:
 81169e6:	4402      	add	r2, r0
 81169e8:	4603      	mov	r3, r0
 81169ea:	4293      	cmp	r3, r2
 81169ec:	d100      	bne.n	81169f0 <memset+0xa>
 81169ee:	4770      	bx	lr
 81169f0:	f803 1b01 	strb.w	r1, [r3], #1
 81169f4:	e7f9      	b.n	81169ea <memset+0x4>

081169f6 <_raise_r>:
 81169f6:	291f      	cmp	r1, #31
 81169f8:	b538      	push	{r3, r4, r5, lr}
 81169fa:	4605      	mov	r5, r0
 81169fc:	460c      	mov	r4, r1
 81169fe:	d904      	bls.n	8116a0a <_raise_r+0x14>
 8116a00:	2316      	movs	r3, #22
 8116a02:	6003      	str	r3, [r0, #0]
 8116a04:	f04f 30ff 	mov.w	r0, #4294967295
 8116a08:	bd38      	pop	{r3, r4, r5, pc}
 8116a0a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8116a0c:	b112      	cbz	r2, 8116a14 <_raise_r+0x1e>
 8116a0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8116a12:	b94b      	cbnz	r3, 8116a28 <_raise_r+0x32>
 8116a14:	4628      	mov	r0, r5
 8116a16:	f000 f8bb 	bl	8116b90 <_getpid_r>
 8116a1a:	4622      	mov	r2, r4
 8116a1c:	4601      	mov	r1, r0
 8116a1e:	4628      	mov	r0, r5
 8116a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8116a24:	f000 b8a2 	b.w	8116b6c <_kill_r>
 8116a28:	2b01      	cmp	r3, #1
 8116a2a:	d00a      	beq.n	8116a42 <_raise_r+0x4c>
 8116a2c:	1c59      	adds	r1, r3, #1
 8116a2e:	d103      	bne.n	8116a38 <_raise_r+0x42>
 8116a30:	2316      	movs	r3, #22
 8116a32:	6003      	str	r3, [r0, #0]
 8116a34:	2001      	movs	r0, #1
 8116a36:	e7e7      	b.n	8116a08 <_raise_r+0x12>
 8116a38:	2100      	movs	r1, #0
 8116a3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8116a3e:	4620      	mov	r0, r4
 8116a40:	4798      	blx	r3
 8116a42:	2000      	movs	r0, #0
 8116a44:	e7e0      	b.n	8116a08 <_raise_r+0x12>
	...

08116a48 <raise>:
 8116a48:	4b02      	ldr	r3, [pc, #8]	@ (8116a54 <raise+0xc>)
 8116a4a:	4601      	mov	r1, r0
 8116a4c:	6818      	ldr	r0, [r3, #0]
 8116a4e:	f7ff bfd2 	b.w	81169f6 <_raise_r>
 8116a52:	bf00      	nop
 8116a54:	10000040 	.word	0x10000040

08116a58 <_close_r>:
 8116a58:	b538      	push	{r3, r4, r5, lr}
 8116a5a:	4d06      	ldr	r5, [pc, #24]	@ (8116a74 <_close_r+0x1c>)
 8116a5c:	2300      	movs	r3, #0
 8116a5e:	4604      	mov	r4, r0
 8116a60:	4608      	mov	r0, r1
 8116a62:	602b      	str	r3, [r5, #0]
 8116a64:	f7ea f842 	bl	8100aec <_close>
 8116a68:	1c43      	adds	r3, r0, #1
 8116a6a:	d102      	bne.n	8116a72 <_close_r+0x1a>
 8116a6c:	682b      	ldr	r3, [r5, #0]
 8116a6e:	b103      	cbz	r3, 8116a72 <_close_r+0x1a>
 8116a70:	6023      	str	r3, [r4, #0]
 8116a72:	bd38      	pop	{r3, r4, r5, pc}
 8116a74:	1000ba04 	.word	0x1000ba04

08116a78 <_reclaim_reent>:
 8116a78:	4b29      	ldr	r3, [pc, #164]	@ (8116b20 <_reclaim_reent+0xa8>)
 8116a7a:	681b      	ldr	r3, [r3, #0]
 8116a7c:	4283      	cmp	r3, r0
 8116a7e:	b570      	push	{r4, r5, r6, lr}
 8116a80:	4604      	mov	r4, r0
 8116a82:	d04b      	beq.n	8116b1c <_reclaim_reent+0xa4>
 8116a84:	69c3      	ldr	r3, [r0, #28]
 8116a86:	b1ab      	cbz	r3, 8116ab4 <_reclaim_reent+0x3c>
 8116a88:	68db      	ldr	r3, [r3, #12]
 8116a8a:	b16b      	cbz	r3, 8116aa8 <_reclaim_reent+0x30>
 8116a8c:	2500      	movs	r5, #0
 8116a8e:	69e3      	ldr	r3, [r4, #28]
 8116a90:	68db      	ldr	r3, [r3, #12]
 8116a92:	5959      	ldr	r1, [r3, r5]
 8116a94:	2900      	cmp	r1, #0
 8116a96:	d13b      	bne.n	8116b10 <_reclaim_reent+0x98>
 8116a98:	3504      	adds	r5, #4
 8116a9a:	2d80      	cmp	r5, #128	@ 0x80
 8116a9c:	d1f7      	bne.n	8116a8e <_reclaim_reent+0x16>
 8116a9e:	69e3      	ldr	r3, [r4, #28]
 8116aa0:	4620      	mov	r0, r4
 8116aa2:	68d9      	ldr	r1, [r3, #12]
 8116aa4:	f000 f8ec 	bl	8116c80 <_free_r>
 8116aa8:	69e3      	ldr	r3, [r4, #28]
 8116aaa:	6819      	ldr	r1, [r3, #0]
 8116aac:	b111      	cbz	r1, 8116ab4 <_reclaim_reent+0x3c>
 8116aae:	4620      	mov	r0, r4
 8116ab0:	f000 f8e6 	bl	8116c80 <_free_r>
 8116ab4:	6961      	ldr	r1, [r4, #20]
 8116ab6:	b111      	cbz	r1, 8116abe <_reclaim_reent+0x46>
 8116ab8:	4620      	mov	r0, r4
 8116aba:	f000 f8e1 	bl	8116c80 <_free_r>
 8116abe:	69e1      	ldr	r1, [r4, #28]
 8116ac0:	b111      	cbz	r1, 8116ac8 <_reclaim_reent+0x50>
 8116ac2:	4620      	mov	r0, r4
 8116ac4:	f000 f8dc 	bl	8116c80 <_free_r>
 8116ac8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8116aca:	b111      	cbz	r1, 8116ad2 <_reclaim_reent+0x5a>
 8116acc:	4620      	mov	r0, r4
 8116ace:	f000 f8d7 	bl	8116c80 <_free_r>
 8116ad2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8116ad4:	b111      	cbz	r1, 8116adc <_reclaim_reent+0x64>
 8116ad6:	4620      	mov	r0, r4
 8116ad8:	f000 f8d2 	bl	8116c80 <_free_r>
 8116adc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8116ade:	b111      	cbz	r1, 8116ae6 <_reclaim_reent+0x6e>
 8116ae0:	4620      	mov	r0, r4
 8116ae2:	f000 f8cd 	bl	8116c80 <_free_r>
 8116ae6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8116ae8:	b111      	cbz	r1, 8116af0 <_reclaim_reent+0x78>
 8116aea:	4620      	mov	r0, r4
 8116aec:	f000 f8c8 	bl	8116c80 <_free_r>
 8116af0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8116af2:	b111      	cbz	r1, 8116afa <_reclaim_reent+0x82>
 8116af4:	4620      	mov	r0, r4
 8116af6:	f000 f8c3 	bl	8116c80 <_free_r>
 8116afa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8116afc:	b111      	cbz	r1, 8116b04 <_reclaim_reent+0x8c>
 8116afe:	4620      	mov	r0, r4
 8116b00:	f000 f8be 	bl	8116c80 <_free_r>
 8116b04:	6a23      	ldr	r3, [r4, #32]
 8116b06:	b14b      	cbz	r3, 8116b1c <_reclaim_reent+0xa4>
 8116b08:	4620      	mov	r0, r4
 8116b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8116b0e:	4718      	bx	r3
 8116b10:	680e      	ldr	r6, [r1, #0]
 8116b12:	4620      	mov	r0, r4
 8116b14:	f000 f8b4 	bl	8116c80 <_free_r>
 8116b18:	4631      	mov	r1, r6
 8116b1a:	e7bb      	b.n	8116a94 <_reclaim_reent+0x1c>
 8116b1c:	bd70      	pop	{r4, r5, r6, pc}
 8116b1e:	bf00      	nop
 8116b20:	10000040 	.word	0x10000040

08116b24 <_lseek_r>:
 8116b24:	b538      	push	{r3, r4, r5, lr}
 8116b26:	4d07      	ldr	r5, [pc, #28]	@ (8116b44 <_lseek_r+0x20>)
 8116b28:	4604      	mov	r4, r0
 8116b2a:	4608      	mov	r0, r1
 8116b2c:	4611      	mov	r1, r2
 8116b2e:	2200      	movs	r2, #0
 8116b30:	602a      	str	r2, [r5, #0]
 8116b32:	461a      	mov	r2, r3
 8116b34:	f7ea f801 	bl	8100b3a <_lseek>
 8116b38:	1c43      	adds	r3, r0, #1
 8116b3a:	d102      	bne.n	8116b42 <_lseek_r+0x1e>
 8116b3c:	682b      	ldr	r3, [r5, #0]
 8116b3e:	b103      	cbz	r3, 8116b42 <_lseek_r+0x1e>
 8116b40:	6023      	str	r3, [r4, #0]
 8116b42:	bd38      	pop	{r3, r4, r5, pc}
 8116b44:	1000ba04 	.word	0x1000ba04

08116b48 <_read_r>:
 8116b48:	b538      	push	{r3, r4, r5, lr}
 8116b4a:	4d07      	ldr	r5, [pc, #28]	@ (8116b68 <_read_r+0x20>)
 8116b4c:	4604      	mov	r4, r0
 8116b4e:	4608      	mov	r0, r1
 8116b50:	4611      	mov	r1, r2
 8116b52:	2200      	movs	r2, #0
 8116b54:	602a      	str	r2, [r5, #0]
 8116b56:	461a      	mov	r2, r3
 8116b58:	f7e9 ff8f 	bl	8100a7a <_read>
 8116b5c:	1c43      	adds	r3, r0, #1
 8116b5e:	d102      	bne.n	8116b66 <_read_r+0x1e>
 8116b60:	682b      	ldr	r3, [r5, #0]
 8116b62:	b103      	cbz	r3, 8116b66 <_read_r+0x1e>
 8116b64:	6023      	str	r3, [r4, #0]
 8116b66:	bd38      	pop	{r3, r4, r5, pc}
 8116b68:	1000ba04 	.word	0x1000ba04

08116b6c <_kill_r>:
 8116b6c:	b538      	push	{r3, r4, r5, lr}
 8116b6e:	4d07      	ldr	r5, [pc, #28]	@ (8116b8c <_kill_r+0x20>)
 8116b70:	2300      	movs	r3, #0
 8116b72:	4604      	mov	r4, r0
 8116b74:	4608      	mov	r0, r1
 8116b76:	4611      	mov	r1, r2
 8116b78:	602b      	str	r3, [r5, #0]
 8116b7a:	f7e9 ff61 	bl	8100a40 <_kill>
 8116b7e:	1c43      	adds	r3, r0, #1
 8116b80:	d102      	bne.n	8116b88 <_kill_r+0x1c>
 8116b82:	682b      	ldr	r3, [r5, #0]
 8116b84:	b103      	cbz	r3, 8116b88 <_kill_r+0x1c>
 8116b86:	6023      	str	r3, [r4, #0]
 8116b88:	bd38      	pop	{r3, r4, r5, pc}
 8116b8a:	bf00      	nop
 8116b8c:	1000ba04 	.word	0x1000ba04

08116b90 <_getpid_r>:
 8116b90:	f7e9 bf4e 	b.w	8100a30 <_getpid>

08116b94 <_sbrk_r>:
 8116b94:	b538      	push	{r3, r4, r5, lr}
 8116b96:	4d06      	ldr	r5, [pc, #24]	@ (8116bb0 <_sbrk_r+0x1c>)
 8116b98:	2300      	movs	r3, #0
 8116b9a:	4604      	mov	r4, r0
 8116b9c:	4608      	mov	r0, r1
 8116b9e:	602b      	str	r3, [r5, #0]
 8116ba0:	f7e9 ffd8 	bl	8100b54 <_sbrk>
 8116ba4:	1c43      	adds	r3, r0, #1
 8116ba6:	d102      	bne.n	8116bae <_sbrk_r+0x1a>
 8116ba8:	682b      	ldr	r3, [r5, #0]
 8116baa:	b103      	cbz	r3, 8116bae <_sbrk_r+0x1a>
 8116bac:	6023      	str	r3, [r4, #0]
 8116bae:	bd38      	pop	{r3, r4, r5, pc}
 8116bb0:	1000ba04 	.word	0x1000ba04

08116bb4 <_write_r>:
 8116bb4:	b538      	push	{r3, r4, r5, lr}
 8116bb6:	4d07      	ldr	r5, [pc, #28]	@ (8116bd4 <_write_r+0x20>)
 8116bb8:	4604      	mov	r4, r0
 8116bba:	4608      	mov	r0, r1
 8116bbc:	4611      	mov	r1, r2
 8116bbe:	2200      	movs	r2, #0
 8116bc0:	602a      	str	r2, [r5, #0]
 8116bc2:	461a      	mov	r2, r3
 8116bc4:	f7e9 ff76 	bl	8100ab4 <_write>
 8116bc8:	1c43      	adds	r3, r0, #1
 8116bca:	d102      	bne.n	8116bd2 <_write_r+0x1e>
 8116bcc:	682b      	ldr	r3, [r5, #0]
 8116bce:	b103      	cbz	r3, 8116bd2 <_write_r+0x1e>
 8116bd0:	6023      	str	r3, [r4, #0]
 8116bd2:	bd38      	pop	{r3, r4, r5, pc}
 8116bd4:	1000ba04 	.word	0x1000ba04

08116bd8 <__libc_init_array>:
 8116bd8:	b570      	push	{r4, r5, r6, lr}
 8116bda:	4d0d      	ldr	r5, [pc, #52]	@ (8116c10 <__libc_init_array+0x38>)
 8116bdc:	4c0d      	ldr	r4, [pc, #52]	@ (8116c14 <__libc_init_array+0x3c>)
 8116bde:	1b64      	subs	r4, r4, r5
 8116be0:	10a4      	asrs	r4, r4, #2
 8116be2:	2600      	movs	r6, #0
 8116be4:	42a6      	cmp	r6, r4
 8116be6:	d109      	bne.n	8116bfc <__libc_init_array+0x24>
 8116be8:	4d0b      	ldr	r5, [pc, #44]	@ (8116c18 <__libc_init_array+0x40>)
 8116bea:	4c0c      	ldr	r4, [pc, #48]	@ (8116c1c <__libc_init_array+0x44>)
 8116bec:	f000 fd38 	bl	8117660 <_init>
 8116bf0:	1b64      	subs	r4, r4, r5
 8116bf2:	10a4      	asrs	r4, r4, #2
 8116bf4:	2600      	movs	r6, #0
 8116bf6:	42a6      	cmp	r6, r4
 8116bf8:	d105      	bne.n	8116c06 <__libc_init_array+0x2e>
 8116bfa:	bd70      	pop	{r4, r5, r6, pc}
 8116bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8116c00:	4798      	blx	r3
 8116c02:	3601      	adds	r6, #1
 8116c04:	e7ee      	b.n	8116be4 <__libc_init_array+0xc>
 8116c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8116c0a:	4798      	blx	r3
 8116c0c:	3601      	adds	r6, #1
 8116c0e:	e7f2      	b.n	8116bf6 <__libc_init_array+0x1e>
 8116c10:	0811a86c 	.word	0x0811a86c
 8116c14:	0811a86c 	.word	0x0811a86c
 8116c18:	0811a86c 	.word	0x0811a86c
 8116c1c:	0811a874 	.word	0x0811a874

08116c20 <__retarget_lock_init_recursive>:
 8116c20:	4770      	bx	lr

08116c22 <__retarget_lock_acquire_recursive>:
 8116c22:	4770      	bx	lr

08116c24 <__retarget_lock_release_recursive>:
 8116c24:	4770      	bx	lr

08116c26 <memcpy>:
 8116c26:	440a      	add	r2, r1
 8116c28:	4291      	cmp	r1, r2
 8116c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8116c2e:	d100      	bne.n	8116c32 <memcpy+0xc>
 8116c30:	4770      	bx	lr
 8116c32:	b510      	push	{r4, lr}
 8116c34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8116c38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8116c3c:	4291      	cmp	r1, r2
 8116c3e:	d1f9      	bne.n	8116c34 <memcpy+0xe>
 8116c40:	bd10      	pop	{r4, pc}
	...

08116c44 <__assert_func>:
 8116c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8116c46:	4614      	mov	r4, r2
 8116c48:	461a      	mov	r2, r3
 8116c4a:	4b09      	ldr	r3, [pc, #36]	@ (8116c70 <__assert_func+0x2c>)
 8116c4c:	681b      	ldr	r3, [r3, #0]
 8116c4e:	4605      	mov	r5, r0
 8116c50:	68d8      	ldr	r0, [r3, #12]
 8116c52:	b954      	cbnz	r4, 8116c6a <__assert_func+0x26>
 8116c54:	4b07      	ldr	r3, [pc, #28]	@ (8116c74 <__assert_func+0x30>)
 8116c56:	461c      	mov	r4, r3
 8116c58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8116c5c:	9100      	str	r1, [sp, #0]
 8116c5e:	462b      	mov	r3, r5
 8116c60:	4905      	ldr	r1, [pc, #20]	@ (8116c78 <__assert_func+0x34>)
 8116c62:	f000 fbd3 	bl	811740c <fiprintf>
 8116c66:	f7ff fc79 	bl	811655c <abort>
 8116c6a:	4b04      	ldr	r3, [pc, #16]	@ (8116c7c <__assert_func+0x38>)
 8116c6c:	e7f4      	b.n	8116c58 <__assert_func+0x14>
 8116c6e:	bf00      	nop
 8116c70:	10000040 	.word	0x10000040
 8116c74:	0811a82e 	.word	0x0811a82e
 8116c78:	0811a800 	.word	0x0811a800
 8116c7c:	0811a7f3 	.word	0x0811a7f3

08116c80 <_free_r>:
 8116c80:	b538      	push	{r3, r4, r5, lr}
 8116c82:	4605      	mov	r5, r0
 8116c84:	2900      	cmp	r1, #0
 8116c86:	d041      	beq.n	8116d0c <_free_r+0x8c>
 8116c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8116c8c:	1f0c      	subs	r4, r1, #4
 8116c8e:	2b00      	cmp	r3, #0
 8116c90:	bfb8      	it	lt
 8116c92:	18e4      	addlt	r4, r4, r3
 8116c94:	f7ff fd1c 	bl	81166d0 <__malloc_lock>
 8116c98:	4a1d      	ldr	r2, [pc, #116]	@ (8116d10 <_free_r+0x90>)
 8116c9a:	6813      	ldr	r3, [r2, #0]
 8116c9c:	b933      	cbnz	r3, 8116cac <_free_r+0x2c>
 8116c9e:	6063      	str	r3, [r4, #4]
 8116ca0:	6014      	str	r4, [r2, #0]
 8116ca2:	4628      	mov	r0, r5
 8116ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8116ca8:	f7ff bd18 	b.w	81166dc <__malloc_unlock>
 8116cac:	42a3      	cmp	r3, r4
 8116cae:	d908      	bls.n	8116cc2 <_free_r+0x42>
 8116cb0:	6820      	ldr	r0, [r4, #0]
 8116cb2:	1821      	adds	r1, r4, r0
 8116cb4:	428b      	cmp	r3, r1
 8116cb6:	bf01      	itttt	eq
 8116cb8:	6819      	ldreq	r1, [r3, #0]
 8116cba:	685b      	ldreq	r3, [r3, #4]
 8116cbc:	1809      	addeq	r1, r1, r0
 8116cbe:	6021      	streq	r1, [r4, #0]
 8116cc0:	e7ed      	b.n	8116c9e <_free_r+0x1e>
 8116cc2:	461a      	mov	r2, r3
 8116cc4:	685b      	ldr	r3, [r3, #4]
 8116cc6:	b10b      	cbz	r3, 8116ccc <_free_r+0x4c>
 8116cc8:	42a3      	cmp	r3, r4
 8116cca:	d9fa      	bls.n	8116cc2 <_free_r+0x42>
 8116ccc:	6811      	ldr	r1, [r2, #0]
 8116cce:	1850      	adds	r0, r2, r1
 8116cd0:	42a0      	cmp	r0, r4
 8116cd2:	d10b      	bne.n	8116cec <_free_r+0x6c>
 8116cd4:	6820      	ldr	r0, [r4, #0]
 8116cd6:	4401      	add	r1, r0
 8116cd8:	1850      	adds	r0, r2, r1
 8116cda:	4283      	cmp	r3, r0
 8116cdc:	6011      	str	r1, [r2, #0]
 8116cde:	d1e0      	bne.n	8116ca2 <_free_r+0x22>
 8116ce0:	6818      	ldr	r0, [r3, #0]
 8116ce2:	685b      	ldr	r3, [r3, #4]
 8116ce4:	6053      	str	r3, [r2, #4]
 8116ce6:	4408      	add	r0, r1
 8116ce8:	6010      	str	r0, [r2, #0]
 8116cea:	e7da      	b.n	8116ca2 <_free_r+0x22>
 8116cec:	d902      	bls.n	8116cf4 <_free_r+0x74>
 8116cee:	230c      	movs	r3, #12
 8116cf0:	602b      	str	r3, [r5, #0]
 8116cf2:	e7d6      	b.n	8116ca2 <_free_r+0x22>
 8116cf4:	6820      	ldr	r0, [r4, #0]
 8116cf6:	1821      	adds	r1, r4, r0
 8116cf8:	428b      	cmp	r3, r1
 8116cfa:	bf04      	itt	eq
 8116cfc:	6819      	ldreq	r1, [r3, #0]
 8116cfe:	685b      	ldreq	r3, [r3, #4]
 8116d00:	6063      	str	r3, [r4, #4]
 8116d02:	bf04      	itt	eq
 8116d04:	1809      	addeq	r1, r1, r0
 8116d06:	6021      	streq	r1, [r4, #0]
 8116d08:	6054      	str	r4, [r2, #4]
 8116d0a:	e7ca      	b.n	8116ca2 <_free_r+0x22>
 8116d0c:	bd38      	pop	{r3, r4, r5, pc}
 8116d0e:	bf00      	nop
 8116d10:	1000b8c4 	.word	0x1000b8c4

08116d14 <__sfputc_r>:
 8116d14:	6893      	ldr	r3, [r2, #8]
 8116d16:	3b01      	subs	r3, #1
 8116d18:	2b00      	cmp	r3, #0
 8116d1a:	b410      	push	{r4}
 8116d1c:	6093      	str	r3, [r2, #8]
 8116d1e:	da08      	bge.n	8116d32 <__sfputc_r+0x1e>
 8116d20:	6994      	ldr	r4, [r2, #24]
 8116d22:	42a3      	cmp	r3, r4
 8116d24:	db01      	blt.n	8116d2a <__sfputc_r+0x16>
 8116d26:	290a      	cmp	r1, #10
 8116d28:	d103      	bne.n	8116d32 <__sfputc_r+0x1e>
 8116d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8116d2e:	f000 bb7f 	b.w	8117430 <__swbuf_r>
 8116d32:	6813      	ldr	r3, [r2, #0]
 8116d34:	1c58      	adds	r0, r3, #1
 8116d36:	6010      	str	r0, [r2, #0]
 8116d38:	7019      	strb	r1, [r3, #0]
 8116d3a:	4608      	mov	r0, r1
 8116d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8116d40:	4770      	bx	lr

08116d42 <__sfputs_r>:
 8116d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8116d44:	4606      	mov	r6, r0
 8116d46:	460f      	mov	r7, r1
 8116d48:	4614      	mov	r4, r2
 8116d4a:	18d5      	adds	r5, r2, r3
 8116d4c:	42ac      	cmp	r4, r5
 8116d4e:	d101      	bne.n	8116d54 <__sfputs_r+0x12>
 8116d50:	2000      	movs	r0, #0
 8116d52:	e007      	b.n	8116d64 <__sfputs_r+0x22>
 8116d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8116d58:	463a      	mov	r2, r7
 8116d5a:	4630      	mov	r0, r6
 8116d5c:	f7ff ffda 	bl	8116d14 <__sfputc_r>
 8116d60:	1c43      	adds	r3, r0, #1
 8116d62:	d1f3      	bne.n	8116d4c <__sfputs_r+0xa>
 8116d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08116d68 <_vfiprintf_r>:
 8116d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8116d6c:	460d      	mov	r5, r1
 8116d6e:	b09d      	sub	sp, #116	@ 0x74
 8116d70:	4614      	mov	r4, r2
 8116d72:	4698      	mov	r8, r3
 8116d74:	4606      	mov	r6, r0
 8116d76:	b118      	cbz	r0, 8116d80 <_vfiprintf_r+0x18>
 8116d78:	6a03      	ldr	r3, [r0, #32]
 8116d7a:	b90b      	cbnz	r3, 8116d80 <_vfiprintf_r+0x18>
 8116d7c:	f7ff fd7e 	bl	811687c <__sinit>
 8116d80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8116d82:	07d9      	lsls	r1, r3, #31
 8116d84:	d405      	bmi.n	8116d92 <_vfiprintf_r+0x2a>
 8116d86:	89ab      	ldrh	r3, [r5, #12]
 8116d88:	059a      	lsls	r2, r3, #22
 8116d8a:	d402      	bmi.n	8116d92 <_vfiprintf_r+0x2a>
 8116d8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8116d8e:	f7ff ff48 	bl	8116c22 <__retarget_lock_acquire_recursive>
 8116d92:	89ab      	ldrh	r3, [r5, #12]
 8116d94:	071b      	lsls	r3, r3, #28
 8116d96:	d501      	bpl.n	8116d9c <_vfiprintf_r+0x34>
 8116d98:	692b      	ldr	r3, [r5, #16]
 8116d9a:	b99b      	cbnz	r3, 8116dc4 <_vfiprintf_r+0x5c>
 8116d9c:	4629      	mov	r1, r5
 8116d9e:	4630      	mov	r0, r6
 8116da0:	f000 fb84 	bl	81174ac <__swsetup_r>
 8116da4:	b170      	cbz	r0, 8116dc4 <_vfiprintf_r+0x5c>
 8116da6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8116da8:	07dc      	lsls	r4, r3, #31
 8116daa:	d504      	bpl.n	8116db6 <_vfiprintf_r+0x4e>
 8116dac:	f04f 30ff 	mov.w	r0, #4294967295
 8116db0:	b01d      	add	sp, #116	@ 0x74
 8116db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8116db6:	89ab      	ldrh	r3, [r5, #12]
 8116db8:	0598      	lsls	r0, r3, #22
 8116dba:	d4f7      	bmi.n	8116dac <_vfiprintf_r+0x44>
 8116dbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8116dbe:	f7ff ff31 	bl	8116c24 <__retarget_lock_release_recursive>
 8116dc2:	e7f3      	b.n	8116dac <_vfiprintf_r+0x44>
 8116dc4:	2300      	movs	r3, #0
 8116dc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8116dc8:	2320      	movs	r3, #32
 8116dca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8116dce:	f8cd 800c 	str.w	r8, [sp, #12]
 8116dd2:	2330      	movs	r3, #48	@ 0x30
 8116dd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8116f84 <_vfiprintf_r+0x21c>
 8116dd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8116ddc:	f04f 0901 	mov.w	r9, #1
 8116de0:	4623      	mov	r3, r4
 8116de2:	469a      	mov	sl, r3
 8116de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8116de8:	b10a      	cbz	r2, 8116dee <_vfiprintf_r+0x86>
 8116dea:	2a25      	cmp	r2, #37	@ 0x25
 8116dec:	d1f9      	bne.n	8116de2 <_vfiprintf_r+0x7a>
 8116dee:	ebba 0b04 	subs.w	fp, sl, r4
 8116df2:	d00b      	beq.n	8116e0c <_vfiprintf_r+0xa4>
 8116df4:	465b      	mov	r3, fp
 8116df6:	4622      	mov	r2, r4
 8116df8:	4629      	mov	r1, r5
 8116dfa:	4630      	mov	r0, r6
 8116dfc:	f7ff ffa1 	bl	8116d42 <__sfputs_r>
 8116e00:	3001      	adds	r0, #1
 8116e02:	f000 80a7 	beq.w	8116f54 <_vfiprintf_r+0x1ec>
 8116e06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8116e08:	445a      	add	r2, fp
 8116e0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8116e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8116e10:	2b00      	cmp	r3, #0
 8116e12:	f000 809f 	beq.w	8116f54 <_vfiprintf_r+0x1ec>
 8116e16:	2300      	movs	r3, #0
 8116e18:	f04f 32ff 	mov.w	r2, #4294967295
 8116e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8116e20:	f10a 0a01 	add.w	sl, sl, #1
 8116e24:	9304      	str	r3, [sp, #16]
 8116e26:	9307      	str	r3, [sp, #28]
 8116e28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8116e2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8116e2e:	4654      	mov	r4, sl
 8116e30:	2205      	movs	r2, #5
 8116e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8116e36:	4853      	ldr	r0, [pc, #332]	@ (8116f84 <_vfiprintf_r+0x21c>)
 8116e38:	f7e9 fa5a 	bl	81002f0 <memchr>
 8116e3c:	9a04      	ldr	r2, [sp, #16]
 8116e3e:	b9d8      	cbnz	r0, 8116e78 <_vfiprintf_r+0x110>
 8116e40:	06d1      	lsls	r1, r2, #27
 8116e42:	bf44      	itt	mi
 8116e44:	2320      	movmi	r3, #32
 8116e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8116e4a:	0713      	lsls	r3, r2, #28
 8116e4c:	bf44      	itt	mi
 8116e4e:	232b      	movmi	r3, #43	@ 0x2b
 8116e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8116e54:	f89a 3000 	ldrb.w	r3, [sl]
 8116e58:	2b2a      	cmp	r3, #42	@ 0x2a
 8116e5a:	d015      	beq.n	8116e88 <_vfiprintf_r+0x120>
 8116e5c:	9a07      	ldr	r2, [sp, #28]
 8116e5e:	4654      	mov	r4, sl
 8116e60:	2000      	movs	r0, #0
 8116e62:	f04f 0c0a 	mov.w	ip, #10
 8116e66:	4621      	mov	r1, r4
 8116e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8116e6c:	3b30      	subs	r3, #48	@ 0x30
 8116e6e:	2b09      	cmp	r3, #9
 8116e70:	d94b      	bls.n	8116f0a <_vfiprintf_r+0x1a2>
 8116e72:	b1b0      	cbz	r0, 8116ea2 <_vfiprintf_r+0x13a>
 8116e74:	9207      	str	r2, [sp, #28]
 8116e76:	e014      	b.n	8116ea2 <_vfiprintf_r+0x13a>
 8116e78:	eba0 0308 	sub.w	r3, r0, r8
 8116e7c:	fa09 f303 	lsl.w	r3, r9, r3
 8116e80:	4313      	orrs	r3, r2
 8116e82:	9304      	str	r3, [sp, #16]
 8116e84:	46a2      	mov	sl, r4
 8116e86:	e7d2      	b.n	8116e2e <_vfiprintf_r+0xc6>
 8116e88:	9b03      	ldr	r3, [sp, #12]
 8116e8a:	1d19      	adds	r1, r3, #4
 8116e8c:	681b      	ldr	r3, [r3, #0]
 8116e8e:	9103      	str	r1, [sp, #12]
 8116e90:	2b00      	cmp	r3, #0
 8116e92:	bfbb      	ittet	lt
 8116e94:	425b      	neglt	r3, r3
 8116e96:	f042 0202 	orrlt.w	r2, r2, #2
 8116e9a:	9307      	strge	r3, [sp, #28]
 8116e9c:	9307      	strlt	r3, [sp, #28]
 8116e9e:	bfb8      	it	lt
 8116ea0:	9204      	strlt	r2, [sp, #16]
 8116ea2:	7823      	ldrb	r3, [r4, #0]
 8116ea4:	2b2e      	cmp	r3, #46	@ 0x2e
 8116ea6:	d10a      	bne.n	8116ebe <_vfiprintf_r+0x156>
 8116ea8:	7863      	ldrb	r3, [r4, #1]
 8116eaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8116eac:	d132      	bne.n	8116f14 <_vfiprintf_r+0x1ac>
 8116eae:	9b03      	ldr	r3, [sp, #12]
 8116eb0:	1d1a      	adds	r2, r3, #4
 8116eb2:	681b      	ldr	r3, [r3, #0]
 8116eb4:	9203      	str	r2, [sp, #12]
 8116eb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8116eba:	3402      	adds	r4, #2
 8116ebc:	9305      	str	r3, [sp, #20]
 8116ebe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8116f94 <_vfiprintf_r+0x22c>
 8116ec2:	7821      	ldrb	r1, [r4, #0]
 8116ec4:	2203      	movs	r2, #3
 8116ec6:	4650      	mov	r0, sl
 8116ec8:	f7e9 fa12 	bl	81002f0 <memchr>
 8116ecc:	b138      	cbz	r0, 8116ede <_vfiprintf_r+0x176>
 8116ece:	9b04      	ldr	r3, [sp, #16]
 8116ed0:	eba0 000a 	sub.w	r0, r0, sl
 8116ed4:	2240      	movs	r2, #64	@ 0x40
 8116ed6:	4082      	lsls	r2, r0
 8116ed8:	4313      	orrs	r3, r2
 8116eda:	3401      	adds	r4, #1
 8116edc:	9304      	str	r3, [sp, #16]
 8116ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8116ee2:	4829      	ldr	r0, [pc, #164]	@ (8116f88 <_vfiprintf_r+0x220>)
 8116ee4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8116ee8:	2206      	movs	r2, #6
 8116eea:	f7e9 fa01 	bl	81002f0 <memchr>
 8116eee:	2800      	cmp	r0, #0
 8116ef0:	d03f      	beq.n	8116f72 <_vfiprintf_r+0x20a>
 8116ef2:	4b26      	ldr	r3, [pc, #152]	@ (8116f8c <_vfiprintf_r+0x224>)
 8116ef4:	bb1b      	cbnz	r3, 8116f3e <_vfiprintf_r+0x1d6>
 8116ef6:	9b03      	ldr	r3, [sp, #12]
 8116ef8:	3307      	adds	r3, #7
 8116efa:	f023 0307 	bic.w	r3, r3, #7
 8116efe:	3308      	adds	r3, #8
 8116f00:	9303      	str	r3, [sp, #12]
 8116f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8116f04:	443b      	add	r3, r7
 8116f06:	9309      	str	r3, [sp, #36]	@ 0x24
 8116f08:	e76a      	b.n	8116de0 <_vfiprintf_r+0x78>
 8116f0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8116f0e:	460c      	mov	r4, r1
 8116f10:	2001      	movs	r0, #1
 8116f12:	e7a8      	b.n	8116e66 <_vfiprintf_r+0xfe>
 8116f14:	2300      	movs	r3, #0
 8116f16:	3401      	adds	r4, #1
 8116f18:	9305      	str	r3, [sp, #20]
 8116f1a:	4619      	mov	r1, r3
 8116f1c:	f04f 0c0a 	mov.w	ip, #10
 8116f20:	4620      	mov	r0, r4
 8116f22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8116f26:	3a30      	subs	r2, #48	@ 0x30
 8116f28:	2a09      	cmp	r2, #9
 8116f2a:	d903      	bls.n	8116f34 <_vfiprintf_r+0x1cc>
 8116f2c:	2b00      	cmp	r3, #0
 8116f2e:	d0c6      	beq.n	8116ebe <_vfiprintf_r+0x156>
 8116f30:	9105      	str	r1, [sp, #20]
 8116f32:	e7c4      	b.n	8116ebe <_vfiprintf_r+0x156>
 8116f34:	fb0c 2101 	mla	r1, ip, r1, r2
 8116f38:	4604      	mov	r4, r0
 8116f3a:	2301      	movs	r3, #1
 8116f3c:	e7f0      	b.n	8116f20 <_vfiprintf_r+0x1b8>
 8116f3e:	ab03      	add	r3, sp, #12
 8116f40:	9300      	str	r3, [sp, #0]
 8116f42:	462a      	mov	r2, r5
 8116f44:	4b12      	ldr	r3, [pc, #72]	@ (8116f90 <_vfiprintf_r+0x228>)
 8116f46:	a904      	add	r1, sp, #16
 8116f48:	4630      	mov	r0, r6
 8116f4a:	f3af 8000 	nop.w
 8116f4e:	4607      	mov	r7, r0
 8116f50:	1c78      	adds	r0, r7, #1
 8116f52:	d1d6      	bne.n	8116f02 <_vfiprintf_r+0x19a>
 8116f54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8116f56:	07d9      	lsls	r1, r3, #31
 8116f58:	d405      	bmi.n	8116f66 <_vfiprintf_r+0x1fe>
 8116f5a:	89ab      	ldrh	r3, [r5, #12]
 8116f5c:	059a      	lsls	r2, r3, #22
 8116f5e:	d402      	bmi.n	8116f66 <_vfiprintf_r+0x1fe>
 8116f60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8116f62:	f7ff fe5f 	bl	8116c24 <__retarget_lock_release_recursive>
 8116f66:	89ab      	ldrh	r3, [r5, #12]
 8116f68:	065b      	lsls	r3, r3, #25
 8116f6a:	f53f af1f 	bmi.w	8116dac <_vfiprintf_r+0x44>
 8116f6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8116f70:	e71e      	b.n	8116db0 <_vfiprintf_r+0x48>
 8116f72:	ab03      	add	r3, sp, #12
 8116f74:	9300      	str	r3, [sp, #0]
 8116f76:	462a      	mov	r2, r5
 8116f78:	4b05      	ldr	r3, [pc, #20]	@ (8116f90 <_vfiprintf_r+0x228>)
 8116f7a:	a904      	add	r1, sp, #16
 8116f7c:	4630      	mov	r0, r6
 8116f7e:	f000 f879 	bl	8117074 <_printf_i>
 8116f82:	e7e4      	b.n	8116f4e <_vfiprintf_r+0x1e6>
 8116f84:	0811a82f 	.word	0x0811a82f
 8116f88:	0811a839 	.word	0x0811a839
 8116f8c:	00000000 	.word	0x00000000
 8116f90:	08116d43 	.word	0x08116d43
 8116f94:	0811a835 	.word	0x0811a835

08116f98 <_printf_common>:
 8116f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8116f9c:	4616      	mov	r6, r2
 8116f9e:	4698      	mov	r8, r3
 8116fa0:	688a      	ldr	r2, [r1, #8]
 8116fa2:	690b      	ldr	r3, [r1, #16]
 8116fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8116fa8:	4293      	cmp	r3, r2
 8116faa:	bfb8      	it	lt
 8116fac:	4613      	movlt	r3, r2
 8116fae:	6033      	str	r3, [r6, #0]
 8116fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8116fb4:	4607      	mov	r7, r0
 8116fb6:	460c      	mov	r4, r1
 8116fb8:	b10a      	cbz	r2, 8116fbe <_printf_common+0x26>
 8116fba:	3301      	adds	r3, #1
 8116fbc:	6033      	str	r3, [r6, #0]
 8116fbe:	6823      	ldr	r3, [r4, #0]
 8116fc0:	0699      	lsls	r1, r3, #26
 8116fc2:	bf42      	ittt	mi
 8116fc4:	6833      	ldrmi	r3, [r6, #0]
 8116fc6:	3302      	addmi	r3, #2
 8116fc8:	6033      	strmi	r3, [r6, #0]
 8116fca:	6825      	ldr	r5, [r4, #0]
 8116fcc:	f015 0506 	ands.w	r5, r5, #6
 8116fd0:	d106      	bne.n	8116fe0 <_printf_common+0x48>
 8116fd2:	f104 0a19 	add.w	sl, r4, #25
 8116fd6:	68e3      	ldr	r3, [r4, #12]
 8116fd8:	6832      	ldr	r2, [r6, #0]
 8116fda:	1a9b      	subs	r3, r3, r2
 8116fdc:	42ab      	cmp	r3, r5
 8116fde:	dc26      	bgt.n	811702e <_printf_common+0x96>
 8116fe0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8116fe4:	6822      	ldr	r2, [r4, #0]
 8116fe6:	3b00      	subs	r3, #0
 8116fe8:	bf18      	it	ne
 8116fea:	2301      	movne	r3, #1
 8116fec:	0692      	lsls	r2, r2, #26
 8116fee:	d42b      	bmi.n	8117048 <_printf_common+0xb0>
 8116ff0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8116ff4:	4641      	mov	r1, r8
 8116ff6:	4638      	mov	r0, r7
 8116ff8:	47c8      	blx	r9
 8116ffa:	3001      	adds	r0, #1
 8116ffc:	d01e      	beq.n	811703c <_printf_common+0xa4>
 8116ffe:	6823      	ldr	r3, [r4, #0]
 8117000:	6922      	ldr	r2, [r4, #16]
 8117002:	f003 0306 	and.w	r3, r3, #6
 8117006:	2b04      	cmp	r3, #4
 8117008:	bf02      	ittt	eq
 811700a:	68e5      	ldreq	r5, [r4, #12]
 811700c:	6833      	ldreq	r3, [r6, #0]
 811700e:	1aed      	subeq	r5, r5, r3
 8117010:	68a3      	ldr	r3, [r4, #8]
 8117012:	bf0c      	ite	eq
 8117014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8117018:	2500      	movne	r5, #0
 811701a:	4293      	cmp	r3, r2
 811701c:	bfc4      	itt	gt
 811701e:	1a9b      	subgt	r3, r3, r2
 8117020:	18ed      	addgt	r5, r5, r3
 8117022:	2600      	movs	r6, #0
 8117024:	341a      	adds	r4, #26
 8117026:	42b5      	cmp	r5, r6
 8117028:	d11a      	bne.n	8117060 <_printf_common+0xc8>
 811702a:	2000      	movs	r0, #0
 811702c:	e008      	b.n	8117040 <_printf_common+0xa8>
 811702e:	2301      	movs	r3, #1
 8117030:	4652      	mov	r2, sl
 8117032:	4641      	mov	r1, r8
 8117034:	4638      	mov	r0, r7
 8117036:	47c8      	blx	r9
 8117038:	3001      	adds	r0, #1
 811703a:	d103      	bne.n	8117044 <_printf_common+0xac>
 811703c:	f04f 30ff 	mov.w	r0, #4294967295
 8117040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8117044:	3501      	adds	r5, #1
 8117046:	e7c6      	b.n	8116fd6 <_printf_common+0x3e>
 8117048:	18e1      	adds	r1, r4, r3
 811704a:	1c5a      	adds	r2, r3, #1
 811704c:	2030      	movs	r0, #48	@ 0x30
 811704e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8117052:	4422      	add	r2, r4
 8117054:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8117058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 811705c:	3302      	adds	r3, #2
 811705e:	e7c7      	b.n	8116ff0 <_printf_common+0x58>
 8117060:	2301      	movs	r3, #1
 8117062:	4622      	mov	r2, r4
 8117064:	4641      	mov	r1, r8
 8117066:	4638      	mov	r0, r7
 8117068:	47c8      	blx	r9
 811706a:	3001      	adds	r0, #1
 811706c:	d0e6      	beq.n	811703c <_printf_common+0xa4>
 811706e:	3601      	adds	r6, #1
 8117070:	e7d9      	b.n	8117026 <_printf_common+0x8e>
	...

08117074 <_printf_i>:
 8117074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8117078:	7e0f      	ldrb	r7, [r1, #24]
 811707a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 811707c:	2f78      	cmp	r7, #120	@ 0x78
 811707e:	4691      	mov	r9, r2
 8117080:	4680      	mov	r8, r0
 8117082:	460c      	mov	r4, r1
 8117084:	469a      	mov	sl, r3
 8117086:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 811708a:	d807      	bhi.n	811709c <_printf_i+0x28>
 811708c:	2f62      	cmp	r7, #98	@ 0x62
 811708e:	d80a      	bhi.n	81170a6 <_printf_i+0x32>
 8117090:	2f00      	cmp	r7, #0
 8117092:	f000 80d2 	beq.w	811723a <_printf_i+0x1c6>
 8117096:	2f58      	cmp	r7, #88	@ 0x58
 8117098:	f000 80b9 	beq.w	811720e <_printf_i+0x19a>
 811709c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 81170a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 81170a4:	e03a      	b.n	811711c <_printf_i+0xa8>
 81170a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 81170aa:	2b15      	cmp	r3, #21
 81170ac:	d8f6      	bhi.n	811709c <_printf_i+0x28>
 81170ae:	a101      	add	r1, pc, #4	@ (adr r1, 81170b4 <_printf_i+0x40>)
 81170b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 81170b4:	0811710d 	.word	0x0811710d
 81170b8:	08117121 	.word	0x08117121
 81170bc:	0811709d 	.word	0x0811709d
 81170c0:	0811709d 	.word	0x0811709d
 81170c4:	0811709d 	.word	0x0811709d
 81170c8:	0811709d 	.word	0x0811709d
 81170cc:	08117121 	.word	0x08117121
 81170d0:	0811709d 	.word	0x0811709d
 81170d4:	0811709d 	.word	0x0811709d
 81170d8:	0811709d 	.word	0x0811709d
 81170dc:	0811709d 	.word	0x0811709d
 81170e0:	08117221 	.word	0x08117221
 81170e4:	0811714b 	.word	0x0811714b
 81170e8:	081171db 	.word	0x081171db
 81170ec:	0811709d 	.word	0x0811709d
 81170f0:	0811709d 	.word	0x0811709d
 81170f4:	08117243 	.word	0x08117243
 81170f8:	0811709d 	.word	0x0811709d
 81170fc:	0811714b 	.word	0x0811714b
 8117100:	0811709d 	.word	0x0811709d
 8117104:	0811709d 	.word	0x0811709d
 8117108:	081171e3 	.word	0x081171e3
 811710c:	6833      	ldr	r3, [r6, #0]
 811710e:	1d1a      	adds	r2, r3, #4
 8117110:	681b      	ldr	r3, [r3, #0]
 8117112:	6032      	str	r2, [r6, #0]
 8117114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8117118:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 811711c:	2301      	movs	r3, #1
 811711e:	e09d      	b.n	811725c <_printf_i+0x1e8>
 8117120:	6833      	ldr	r3, [r6, #0]
 8117122:	6820      	ldr	r0, [r4, #0]
 8117124:	1d19      	adds	r1, r3, #4
 8117126:	6031      	str	r1, [r6, #0]
 8117128:	0606      	lsls	r6, r0, #24
 811712a:	d501      	bpl.n	8117130 <_printf_i+0xbc>
 811712c:	681d      	ldr	r5, [r3, #0]
 811712e:	e003      	b.n	8117138 <_printf_i+0xc4>
 8117130:	0645      	lsls	r5, r0, #25
 8117132:	d5fb      	bpl.n	811712c <_printf_i+0xb8>
 8117134:	f9b3 5000 	ldrsh.w	r5, [r3]
 8117138:	2d00      	cmp	r5, #0
 811713a:	da03      	bge.n	8117144 <_printf_i+0xd0>
 811713c:	232d      	movs	r3, #45	@ 0x2d
 811713e:	426d      	negs	r5, r5
 8117140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8117144:	4859      	ldr	r0, [pc, #356]	@ (81172ac <_printf_i+0x238>)
 8117146:	230a      	movs	r3, #10
 8117148:	e011      	b.n	811716e <_printf_i+0xfa>
 811714a:	6821      	ldr	r1, [r4, #0]
 811714c:	6833      	ldr	r3, [r6, #0]
 811714e:	0608      	lsls	r0, r1, #24
 8117150:	f853 5b04 	ldr.w	r5, [r3], #4
 8117154:	d402      	bmi.n	811715c <_printf_i+0xe8>
 8117156:	0649      	lsls	r1, r1, #25
 8117158:	bf48      	it	mi
 811715a:	b2ad      	uxthmi	r5, r5
 811715c:	2f6f      	cmp	r7, #111	@ 0x6f
 811715e:	4853      	ldr	r0, [pc, #332]	@ (81172ac <_printf_i+0x238>)
 8117160:	6033      	str	r3, [r6, #0]
 8117162:	bf14      	ite	ne
 8117164:	230a      	movne	r3, #10
 8117166:	2308      	moveq	r3, #8
 8117168:	2100      	movs	r1, #0
 811716a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 811716e:	6866      	ldr	r6, [r4, #4]
 8117170:	60a6      	str	r6, [r4, #8]
 8117172:	2e00      	cmp	r6, #0
 8117174:	bfa2      	ittt	ge
 8117176:	6821      	ldrge	r1, [r4, #0]
 8117178:	f021 0104 	bicge.w	r1, r1, #4
 811717c:	6021      	strge	r1, [r4, #0]
 811717e:	b90d      	cbnz	r5, 8117184 <_printf_i+0x110>
 8117180:	2e00      	cmp	r6, #0
 8117182:	d04b      	beq.n	811721c <_printf_i+0x1a8>
 8117184:	4616      	mov	r6, r2
 8117186:	fbb5 f1f3 	udiv	r1, r5, r3
 811718a:	fb03 5711 	mls	r7, r3, r1, r5
 811718e:	5dc7      	ldrb	r7, [r0, r7]
 8117190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8117194:	462f      	mov	r7, r5
 8117196:	42bb      	cmp	r3, r7
 8117198:	460d      	mov	r5, r1
 811719a:	d9f4      	bls.n	8117186 <_printf_i+0x112>
 811719c:	2b08      	cmp	r3, #8
 811719e:	d10b      	bne.n	81171b8 <_printf_i+0x144>
 81171a0:	6823      	ldr	r3, [r4, #0]
 81171a2:	07df      	lsls	r7, r3, #31
 81171a4:	d508      	bpl.n	81171b8 <_printf_i+0x144>
 81171a6:	6923      	ldr	r3, [r4, #16]
 81171a8:	6861      	ldr	r1, [r4, #4]
 81171aa:	4299      	cmp	r1, r3
 81171ac:	bfde      	ittt	le
 81171ae:	2330      	movle	r3, #48	@ 0x30
 81171b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 81171b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 81171b8:	1b92      	subs	r2, r2, r6
 81171ba:	6122      	str	r2, [r4, #16]
 81171bc:	f8cd a000 	str.w	sl, [sp]
 81171c0:	464b      	mov	r3, r9
 81171c2:	aa03      	add	r2, sp, #12
 81171c4:	4621      	mov	r1, r4
 81171c6:	4640      	mov	r0, r8
 81171c8:	f7ff fee6 	bl	8116f98 <_printf_common>
 81171cc:	3001      	adds	r0, #1
 81171ce:	d14a      	bne.n	8117266 <_printf_i+0x1f2>
 81171d0:	f04f 30ff 	mov.w	r0, #4294967295
 81171d4:	b004      	add	sp, #16
 81171d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81171da:	6823      	ldr	r3, [r4, #0]
 81171dc:	f043 0320 	orr.w	r3, r3, #32
 81171e0:	6023      	str	r3, [r4, #0]
 81171e2:	4833      	ldr	r0, [pc, #204]	@ (81172b0 <_printf_i+0x23c>)
 81171e4:	2778      	movs	r7, #120	@ 0x78
 81171e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 81171ea:	6823      	ldr	r3, [r4, #0]
 81171ec:	6831      	ldr	r1, [r6, #0]
 81171ee:	061f      	lsls	r7, r3, #24
 81171f0:	f851 5b04 	ldr.w	r5, [r1], #4
 81171f4:	d402      	bmi.n	81171fc <_printf_i+0x188>
 81171f6:	065f      	lsls	r7, r3, #25
 81171f8:	bf48      	it	mi
 81171fa:	b2ad      	uxthmi	r5, r5
 81171fc:	6031      	str	r1, [r6, #0]
 81171fe:	07d9      	lsls	r1, r3, #31
 8117200:	bf44      	itt	mi
 8117202:	f043 0320 	orrmi.w	r3, r3, #32
 8117206:	6023      	strmi	r3, [r4, #0]
 8117208:	b11d      	cbz	r5, 8117212 <_printf_i+0x19e>
 811720a:	2310      	movs	r3, #16
 811720c:	e7ac      	b.n	8117168 <_printf_i+0xf4>
 811720e:	4827      	ldr	r0, [pc, #156]	@ (81172ac <_printf_i+0x238>)
 8117210:	e7e9      	b.n	81171e6 <_printf_i+0x172>
 8117212:	6823      	ldr	r3, [r4, #0]
 8117214:	f023 0320 	bic.w	r3, r3, #32
 8117218:	6023      	str	r3, [r4, #0]
 811721a:	e7f6      	b.n	811720a <_printf_i+0x196>
 811721c:	4616      	mov	r6, r2
 811721e:	e7bd      	b.n	811719c <_printf_i+0x128>
 8117220:	6833      	ldr	r3, [r6, #0]
 8117222:	6825      	ldr	r5, [r4, #0]
 8117224:	6961      	ldr	r1, [r4, #20]
 8117226:	1d18      	adds	r0, r3, #4
 8117228:	6030      	str	r0, [r6, #0]
 811722a:	062e      	lsls	r6, r5, #24
 811722c:	681b      	ldr	r3, [r3, #0]
 811722e:	d501      	bpl.n	8117234 <_printf_i+0x1c0>
 8117230:	6019      	str	r1, [r3, #0]
 8117232:	e002      	b.n	811723a <_printf_i+0x1c6>
 8117234:	0668      	lsls	r0, r5, #25
 8117236:	d5fb      	bpl.n	8117230 <_printf_i+0x1bc>
 8117238:	8019      	strh	r1, [r3, #0]
 811723a:	2300      	movs	r3, #0
 811723c:	6123      	str	r3, [r4, #16]
 811723e:	4616      	mov	r6, r2
 8117240:	e7bc      	b.n	81171bc <_printf_i+0x148>
 8117242:	6833      	ldr	r3, [r6, #0]
 8117244:	1d1a      	adds	r2, r3, #4
 8117246:	6032      	str	r2, [r6, #0]
 8117248:	681e      	ldr	r6, [r3, #0]
 811724a:	6862      	ldr	r2, [r4, #4]
 811724c:	2100      	movs	r1, #0
 811724e:	4630      	mov	r0, r6
 8117250:	f7e9 f84e 	bl	81002f0 <memchr>
 8117254:	b108      	cbz	r0, 811725a <_printf_i+0x1e6>
 8117256:	1b80      	subs	r0, r0, r6
 8117258:	6060      	str	r0, [r4, #4]
 811725a:	6863      	ldr	r3, [r4, #4]
 811725c:	6123      	str	r3, [r4, #16]
 811725e:	2300      	movs	r3, #0
 8117260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8117264:	e7aa      	b.n	81171bc <_printf_i+0x148>
 8117266:	6923      	ldr	r3, [r4, #16]
 8117268:	4632      	mov	r2, r6
 811726a:	4649      	mov	r1, r9
 811726c:	4640      	mov	r0, r8
 811726e:	47d0      	blx	sl
 8117270:	3001      	adds	r0, #1
 8117272:	d0ad      	beq.n	81171d0 <_printf_i+0x15c>
 8117274:	6823      	ldr	r3, [r4, #0]
 8117276:	079b      	lsls	r3, r3, #30
 8117278:	d413      	bmi.n	81172a2 <_printf_i+0x22e>
 811727a:	68e0      	ldr	r0, [r4, #12]
 811727c:	9b03      	ldr	r3, [sp, #12]
 811727e:	4298      	cmp	r0, r3
 8117280:	bfb8      	it	lt
 8117282:	4618      	movlt	r0, r3
 8117284:	e7a6      	b.n	81171d4 <_printf_i+0x160>
 8117286:	2301      	movs	r3, #1
 8117288:	4632      	mov	r2, r6
 811728a:	4649      	mov	r1, r9
 811728c:	4640      	mov	r0, r8
 811728e:	47d0      	blx	sl
 8117290:	3001      	adds	r0, #1
 8117292:	d09d      	beq.n	81171d0 <_printf_i+0x15c>
 8117294:	3501      	adds	r5, #1
 8117296:	68e3      	ldr	r3, [r4, #12]
 8117298:	9903      	ldr	r1, [sp, #12]
 811729a:	1a5b      	subs	r3, r3, r1
 811729c:	42ab      	cmp	r3, r5
 811729e:	dcf2      	bgt.n	8117286 <_printf_i+0x212>
 81172a0:	e7eb      	b.n	811727a <_printf_i+0x206>
 81172a2:	2500      	movs	r5, #0
 81172a4:	f104 0619 	add.w	r6, r4, #25
 81172a8:	e7f5      	b.n	8117296 <_printf_i+0x222>
 81172aa:	bf00      	nop
 81172ac:	0811a840 	.word	0x0811a840
 81172b0:	0811a851 	.word	0x0811a851

081172b4 <__sflush_r>:
 81172b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 81172b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81172bc:	0716      	lsls	r6, r2, #28
 81172be:	4605      	mov	r5, r0
 81172c0:	460c      	mov	r4, r1
 81172c2:	d454      	bmi.n	811736e <__sflush_r+0xba>
 81172c4:	684b      	ldr	r3, [r1, #4]
 81172c6:	2b00      	cmp	r3, #0
 81172c8:	dc02      	bgt.n	81172d0 <__sflush_r+0x1c>
 81172ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 81172cc:	2b00      	cmp	r3, #0
 81172ce:	dd48      	ble.n	8117362 <__sflush_r+0xae>
 81172d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81172d2:	2e00      	cmp	r6, #0
 81172d4:	d045      	beq.n	8117362 <__sflush_r+0xae>
 81172d6:	2300      	movs	r3, #0
 81172d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 81172dc:	682f      	ldr	r7, [r5, #0]
 81172de:	6a21      	ldr	r1, [r4, #32]
 81172e0:	602b      	str	r3, [r5, #0]
 81172e2:	d030      	beq.n	8117346 <__sflush_r+0x92>
 81172e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 81172e6:	89a3      	ldrh	r3, [r4, #12]
 81172e8:	0759      	lsls	r1, r3, #29
 81172ea:	d505      	bpl.n	81172f8 <__sflush_r+0x44>
 81172ec:	6863      	ldr	r3, [r4, #4]
 81172ee:	1ad2      	subs	r2, r2, r3
 81172f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 81172f2:	b10b      	cbz	r3, 81172f8 <__sflush_r+0x44>
 81172f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 81172f6:	1ad2      	subs	r2, r2, r3
 81172f8:	2300      	movs	r3, #0
 81172fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81172fc:	6a21      	ldr	r1, [r4, #32]
 81172fe:	4628      	mov	r0, r5
 8117300:	47b0      	blx	r6
 8117302:	1c43      	adds	r3, r0, #1
 8117304:	89a3      	ldrh	r3, [r4, #12]
 8117306:	d106      	bne.n	8117316 <__sflush_r+0x62>
 8117308:	6829      	ldr	r1, [r5, #0]
 811730a:	291d      	cmp	r1, #29
 811730c:	d82b      	bhi.n	8117366 <__sflush_r+0xb2>
 811730e:	4a2a      	ldr	r2, [pc, #168]	@ (81173b8 <__sflush_r+0x104>)
 8117310:	410a      	asrs	r2, r1
 8117312:	07d6      	lsls	r6, r2, #31
 8117314:	d427      	bmi.n	8117366 <__sflush_r+0xb2>
 8117316:	2200      	movs	r2, #0
 8117318:	6062      	str	r2, [r4, #4]
 811731a:	04d9      	lsls	r1, r3, #19
 811731c:	6922      	ldr	r2, [r4, #16]
 811731e:	6022      	str	r2, [r4, #0]
 8117320:	d504      	bpl.n	811732c <__sflush_r+0x78>
 8117322:	1c42      	adds	r2, r0, #1
 8117324:	d101      	bne.n	811732a <__sflush_r+0x76>
 8117326:	682b      	ldr	r3, [r5, #0]
 8117328:	b903      	cbnz	r3, 811732c <__sflush_r+0x78>
 811732a:	6560      	str	r0, [r4, #84]	@ 0x54
 811732c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811732e:	602f      	str	r7, [r5, #0]
 8117330:	b1b9      	cbz	r1, 8117362 <__sflush_r+0xae>
 8117332:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8117336:	4299      	cmp	r1, r3
 8117338:	d002      	beq.n	8117340 <__sflush_r+0x8c>
 811733a:	4628      	mov	r0, r5
 811733c:	f7ff fca0 	bl	8116c80 <_free_r>
 8117340:	2300      	movs	r3, #0
 8117342:	6363      	str	r3, [r4, #52]	@ 0x34
 8117344:	e00d      	b.n	8117362 <__sflush_r+0xae>
 8117346:	2301      	movs	r3, #1
 8117348:	4628      	mov	r0, r5
 811734a:	47b0      	blx	r6
 811734c:	4602      	mov	r2, r0
 811734e:	1c50      	adds	r0, r2, #1
 8117350:	d1c9      	bne.n	81172e6 <__sflush_r+0x32>
 8117352:	682b      	ldr	r3, [r5, #0]
 8117354:	2b00      	cmp	r3, #0
 8117356:	d0c6      	beq.n	81172e6 <__sflush_r+0x32>
 8117358:	2b1d      	cmp	r3, #29
 811735a:	d001      	beq.n	8117360 <__sflush_r+0xac>
 811735c:	2b16      	cmp	r3, #22
 811735e:	d11e      	bne.n	811739e <__sflush_r+0xea>
 8117360:	602f      	str	r7, [r5, #0]
 8117362:	2000      	movs	r0, #0
 8117364:	e022      	b.n	81173ac <__sflush_r+0xf8>
 8117366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811736a:	b21b      	sxth	r3, r3
 811736c:	e01b      	b.n	81173a6 <__sflush_r+0xf2>
 811736e:	690f      	ldr	r7, [r1, #16]
 8117370:	2f00      	cmp	r7, #0
 8117372:	d0f6      	beq.n	8117362 <__sflush_r+0xae>
 8117374:	0793      	lsls	r3, r2, #30
 8117376:	680e      	ldr	r6, [r1, #0]
 8117378:	bf08      	it	eq
 811737a:	694b      	ldreq	r3, [r1, #20]
 811737c:	600f      	str	r7, [r1, #0]
 811737e:	bf18      	it	ne
 8117380:	2300      	movne	r3, #0
 8117382:	eba6 0807 	sub.w	r8, r6, r7
 8117386:	608b      	str	r3, [r1, #8]
 8117388:	f1b8 0f00 	cmp.w	r8, #0
 811738c:	dde9      	ble.n	8117362 <__sflush_r+0xae>
 811738e:	6a21      	ldr	r1, [r4, #32]
 8117390:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8117392:	4643      	mov	r3, r8
 8117394:	463a      	mov	r2, r7
 8117396:	4628      	mov	r0, r5
 8117398:	47b0      	blx	r6
 811739a:	2800      	cmp	r0, #0
 811739c:	dc08      	bgt.n	81173b0 <__sflush_r+0xfc>
 811739e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81173a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81173a6:	81a3      	strh	r3, [r4, #12]
 81173a8:	f04f 30ff 	mov.w	r0, #4294967295
 81173ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81173b0:	4407      	add	r7, r0
 81173b2:	eba8 0800 	sub.w	r8, r8, r0
 81173b6:	e7e7      	b.n	8117388 <__sflush_r+0xd4>
 81173b8:	dfbffffe 	.word	0xdfbffffe

081173bc <_fflush_r>:
 81173bc:	b538      	push	{r3, r4, r5, lr}
 81173be:	690b      	ldr	r3, [r1, #16]
 81173c0:	4605      	mov	r5, r0
 81173c2:	460c      	mov	r4, r1
 81173c4:	b913      	cbnz	r3, 81173cc <_fflush_r+0x10>
 81173c6:	2500      	movs	r5, #0
 81173c8:	4628      	mov	r0, r5
 81173ca:	bd38      	pop	{r3, r4, r5, pc}
 81173cc:	b118      	cbz	r0, 81173d6 <_fflush_r+0x1a>
 81173ce:	6a03      	ldr	r3, [r0, #32]
 81173d0:	b90b      	cbnz	r3, 81173d6 <_fflush_r+0x1a>
 81173d2:	f7ff fa53 	bl	811687c <__sinit>
 81173d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81173da:	2b00      	cmp	r3, #0
 81173dc:	d0f3      	beq.n	81173c6 <_fflush_r+0xa>
 81173de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 81173e0:	07d0      	lsls	r0, r2, #31
 81173e2:	d404      	bmi.n	81173ee <_fflush_r+0x32>
 81173e4:	0599      	lsls	r1, r3, #22
 81173e6:	d402      	bmi.n	81173ee <_fflush_r+0x32>
 81173e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81173ea:	f7ff fc1a 	bl	8116c22 <__retarget_lock_acquire_recursive>
 81173ee:	4628      	mov	r0, r5
 81173f0:	4621      	mov	r1, r4
 81173f2:	f7ff ff5f 	bl	81172b4 <__sflush_r>
 81173f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81173f8:	07da      	lsls	r2, r3, #31
 81173fa:	4605      	mov	r5, r0
 81173fc:	d4e4      	bmi.n	81173c8 <_fflush_r+0xc>
 81173fe:	89a3      	ldrh	r3, [r4, #12]
 8117400:	059b      	lsls	r3, r3, #22
 8117402:	d4e1      	bmi.n	81173c8 <_fflush_r+0xc>
 8117404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8117406:	f7ff fc0d 	bl	8116c24 <__retarget_lock_release_recursive>
 811740a:	e7dd      	b.n	81173c8 <_fflush_r+0xc>

0811740c <fiprintf>:
 811740c:	b40e      	push	{r1, r2, r3}
 811740e:	b503      	push	{r0, r1, lr}
 8117410:	4601      	mov	r1, r0
 8117412:	ab03      	add	r3, sp, #12
 8117414:	4805      	ldr	r0, [pc, #20]	@ (811742c <fiprintf+0x20>)
 8117416:	f853 2b04 	ldr.w	r2, [r3], #4
 811741a:	6800      	ldr	r0, [r0, #0]
 811741c:	9301      	str	r3, [sp, #4]
 811741e:	f7ff fca3 	bl	8116d68 <_vfiprintf_r>
 8117422:	b002      	add	sp, #8
 8117424:	f85d eb04 	ldr.w	lr, [sp], #4
 8117428:	b003      	add	sp, #12
 811742a:	4770      	bx	lr
 811742c:	10000040 	.word	0x10000040

08117430 <__swbuf_r>:
 8117430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8117432:	460e      	mov	r6, r1
 8117434:	4614      	mov	r4, r2
 8117436:	4605      	mov	r5, r0
 8117438:	b118      	cbz	r0, 8117442 <__swbuf_r+0x12>
 811743a:	6a03      	ldr	r3, [r0, #32]
 811743c:	b90b      	cbnz	r3, 8117442 <__swbuf_r+0x12>
 811743e:	f7ff fa1d 	bl	811687c <__sinit>
 8117442:	69a3      	ldr	r3, [r4, #24]
 8117444:	60a3      	str	r3, [r4, #8]
 8117446:	89a3      	ldrh	r3, [r4, #12]
 8117448:	071a      	lsls	r2, r3, #28
 811744a:	d501      	bpl.n	8117450 <__swbuf_r+0x20>
 811744c:	6923      	ldr	r3, [r4, #16]
 811744e:	b943      	cbnz	r3, 8117462 <__swbuf_r+0x32>
 8117450:	4621      	mov	r1, r4
 8117452:	4628      	mov	r0, r5
 8117454:	f000 f82a 	bl	81174ac <__swsetup_r>
 8117458:	b118      	cbz	r0, 8117462 <__swbuf_r+0x32>
 811745a:	f04f 37ff 	mov.w	r7, #4294967295
 811745e:	4638      	mov	r0, r7
 8117460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8117462:	6823      	ldr	r3, [r4, #0]
 8117464:	6922      	ldr	r2, [r4, #16]
 8117466:	1a98      	subs	r0, r3, r2
 8117468:	6963      	ldr	r3, [r4, #20]
 811746a:	b2f6      	uxtb	r6, r6
 811746c:	4283      	cmp	r3, r0
 811746e:	4637      	mov	r7, r6
 8117470:	dc05      	bgt.n	811747e <__swbuf_r+0x4e>
 8117472:	4621      	mov	r1, r4
 8117474:	4628      	mov	r0, r5
 8117476:	f7ff ffa1 	bl	81173bc <_fflush_r>
 811747a:	2800      	cmp	r0, #0
 811747c:	d1ed      	bne.n	811745a <__swbuf_r+0x2a>
 811747e:	68a3      	ldr	r3, [r4, #8]
 8117480:	3b01      	subs	r3, #1
 8117482:	60a3      	str	r3, [r4, #8]
 8117484:	6823      	ldr	r3, [r4, #0]
 8117486:	1c5a      	adds	r2, r3, #1
 8117488:	6022      	str	r2, [r4, #0]
 811748a:	701e      	strb	r6, [r3, #0]
 811748c:	6962      	ldr	r2, [r4, #20]
 811748e:	1c43      	adds	r3, r0, #1
 8117490:	429a      	cmp	r2, r3
 8117492:	d004      	beq.n	811749e <__swbuf_r+0x6e>
 8117494:	89a3      	ldrh	r3, [r4, #12]
 8117496:	07db      	lsls	r3, r3, #31
 8117498:	d5e1      	bpl.n	811745e <__swbuf_r+0x2e>
 811749a:	2e0a      	cmp	r6, #10
 811749c:	d1df      	bne.n	811745e <__swbuf_r+0x2e>
 811749e:	4621      	mov	r1, r4
 81174a0:	4628      	mov	r0, r5
 81174a2:	f7ff ff8b 	bl	81173bc <_fflush_r>
 81174a6:	2800      	cmp	r0, #0
 81174a8:	d0d9      	beq.n	811745e <__swbuf_r+0x2e>
 81174aa:	e7d6      	b.n	811745a <__swbuf_r+0x2a>

081174ac <__swsetup_r>:
 81174ac:	b538      	push	{r3, r4, r5, lr}
 81174ae:	4b29      	ldr	r3, [pc, #164]	@ (8117554 <__swsetup_r+0xa8>)
 81174b0:	4605      	mov	r5, r0
 81174b2:	6818      	ldr	r0, [r3, #0]
 81174b4:	460c      	mov	r4, r1
 81174b6:	b118      	cbz	r0, 81174c0 <__swsetup_r+0x14>
 81174b8:	6a03      	ldr	r3, [r0, #32]
 81174ba:	b90b      	cbnz	r3, 81174c0 <__swsetup_r+0x14>
 81174bc:	f7ff f9de 	bl	811687c <__sinit>
 81174c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81174c4:	0719      	lsls	r1, r3, #28
 81174c6:	d422      	bmi.n	811750e <__swsetup_r+0x62>
 81174c8:	06da      	lsls	r2, r3, #27
 81174ca:	d407      	bmi.n	81174dc <__swsetup_r+0x30>
 81174cc:	2209      	movs	r2, #9
 81174ce:	602a      	str	r2, [r5, #0]
 81174d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81174d4:	81a3      	strh	r3, [r4, #12]
 81174d6:	f04f 30ff 	mov.w	r0, #4294967295
 81174da:	e033      	b.n	8117544 <__swsetup_r+0x98>
 81174dc:	0758      	lsls	r0, r3, #29
 81174de:	d512      	bpl.n	8117506 <__swsetup_r+0x5a>
 81174e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81174e2:	b141      	cbz	r1, 81174f6 <__swsetup_r+0x4a>
 81174e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81174e8:	4299      	cmp	r1, r3
 81174ea:	d002      	beq.n	81174f2 <__swsetup_r+0x46>
 81174ec:	4628      	mov	r0, r5
 81174ee:	f7ff fbc7 	bl	8116c80 <_free_r>
 81174f2:	2300      	movs	r3, #0
 81174f4:	6363      	str	r3, [r4, #52]	@ 0x34
 81174f6:	89a3      	ldrh	r3, [r4, #12]
 81174f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 81174fc:	81a3      	strh	r3, [r4, #12]
 81174fe:	2300      	movs	r3, #0
 8117500:	6063      	str	r3, [r4, #4]
 8117502:	6923      	ldr	r3, [r4, #16]
 8117504:	6023      	str	r3, [r4, #0]
 8117506:	89a3      	ldrh	r3, [r4, #12]
 8117508:	f043 0308 	orr.w	r3, r3, #8
 811750c:	81a3      	strh	r3, [r4, #12]
 811750e:	6923      	ldr	r3, [r4, #16]
 8117510:	b94b      	cbnz	r3, 8117526 <__swsetup_r+0x7a>
 8117512:	89a3      	ldrh	r3, [r4, #12]
 8117514:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8117518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 811751c:	d003      	beq.n	8117526 <__swsetup_r+0x7a>
 811751e:	4621      	mov	r1, r4
 8117520:	4628      	mov	r0, r5
 8117522:	f000 f83f 	bl	81175a4 <__smakebuf_r>
 8117526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811752a:	f013 0201 	ands.w	r2, r3, #1
 811752e:	d00a      	beq.n	8117546 <__swsetup_r+0x9a>
 8117530:	2200      	movs	r2, #0
 8117532:	60a2      	str	r2, [r4, #8]
 8117534:	6962      	ldr	r2, [r4, #20]
 8117536:	4252      	negs	r2, r2
 8117538:	61a2      	str	r2, [r4, #24]
 811753a:	6922      	ldr	r2, [r4, #16]
 811753c:	b942      	cbnz	r2, 8117550 <__swsetup_r+0xa4>
 811753e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8117542:	d1c5      	bne.n	81174d0 <__swsetup_r+0x24>
 8117544:	bd38      	pop	{r3, r4, r5, pc}
 8117546:	0799      	lsls	r1, r3, #30
 8117548:	bf58      	it	pl
 811754a:	6962      	ldrpl	r2, [r4, #20]
 811754c:	60a2      	str	r2, [r4, #8]
 811754e:	e7f4      	b.n	811753a <__swsetup_r+0x8e>
 8117550:	2000      	movs	r0, #0
 8117552:	e7f7      	b.n	8117544 <__swsetup_r+0x98>
 8117554:	10000040 	.word	0x10000040

08117558 <__swhatbuf_r>:
 8117558:	b570      	push	{r4, r5, r6, lr}
 811755a:	460c      	mov	r4, r1
 811755c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8117560:	2900      	cmp	r1, #0
 8117562:	b096      	sub	sp, #88	@ 0x58
 8117564:	4615      	mov	r5, r2
 8117566:	461e      	mov	r6, r3
 8117568:	da0d      	bge.n	8117586 <__swhatbuf_r+0x2e>
 811756a:	89a3      	ldrh	r3, [r4, #12]
 811756c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8117570:	f04f 0100 	mov.w	r1, #0
 8117574:	bf14      	ite	ne
 8117576:	2340      	movne	r3, #64	@ 0x40
 8117578:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 811757c:	2000      	movs	r0, #0
 811757e:	6031      	str	r1, [r6, #0]
 8117580:	602b      	str	r3, [r5, #0]
 8117582:	b016      	add	sp, #88	@ 0x58
 8117584:	bd70      	pop	{r4, r5, r6, pc}
 8117586:	466a      	mov	r2, sp
 8117588:	f000 f848 	bl	811761c <_fstat_r>
 811758c:	2800      	cmp	r0, #0
 811758e:	dbec      	blt.n	811756a <__swhatbuf_r+0x12>
 8117590:	9901      	ldr	r1, [sp, #4]
 8117592:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8117596:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 811759a:	4259      	negs	r1, r3
 811759c:	4159      	adcs	r1, r3
 811759e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81175a2:	e7eb      	b.n	811757c <__swhatbuf_r+0x24>

081175a4 <__smakebuf_r>:
 81175a4:	898b      	ldrh	r3, [r1, #12]
 81175a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81175a8:	079d      	lsls	r5, r3, #30
 81175aa:	4606      	mov	r6, r0
 81175ac:	460c      	mov	r4, r1
 81175ae:	d507      	bpl.n	81175c0 <__smakebuf_r+0x1c>
 81175b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 81175b4:	6023      	str	r3, [r4, #0]
 81175b6:	6123      	str	r3, [r4, #16]
 81175b8:	2301      	movs	r3, #1
 81175ba:	6163      	str	r3, [r4, #20]
 81175bc:	b003      	add	sp, #12
 81175be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81175c0:	ab01      	add	r3, sp, #4
 81175c2:	466a      	mov	r2, sp
 81175c4:	f7ff ffc8 	bl	8117558 <__swhatbuf_r>
 81175c8:	9f00      	ldr	r7, [sp, #0]
 81175ca:	4605      	mov	r5, r0
 81175cc:	4639      	mov	r1, r7
 81175ce:	4630      	mov	r0, r6
 81175d0:	f7fe fffe 	bl	81165d0 <_malloc_r>
 81175d4:	b948      	cbnz	r0, 81175ea <__smakebuf_r+0x46>
 81175d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81175da:	059a      	lsls	r2, r3, #22
 81175dc:	d4ee      	bmi.n	81175bc <__smakebuf_r+0x18>
 81175de:	f023 0303 	bic.w	r3, r3, #3
 81175e2:	f043 0302 	orr.w	r3, r3, #2
 81175e6:	81a3      	strh	r3, [r4, #12]
 81175e8:	e7e2      	b.n	81175b0 <__smakebuf_r+0xc>
 81175ea:	89a3      	ldrh	r3, [r4, #12]
 81175ec:	6020      	str	r0, [r4, #0]
 81175ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81175f2:	81a3      	strh	r3, [r4, #12]
 81175f4:	9b01      	ldr	r3, [sp, #4]
 81175f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 81175fa:	b15b      	cbz	r3, 8117614 <__smakebuf_r+0x70>
 81175fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8117600:	4630      	mov	r0, r6
 8117602:	f000 f81d 	bl	8117640 <_isatty_r>
 8117606:	b128      	cbz	r0, 8117614 <__smakebuf_r+0x70>
 8117608:	89a3      	ldrh	r3, [r4, #12]
 811760a:	f023 0303 	bic.w	r3, r3, #3
 811760e:	f043 0301 	orr.w	r3, r3, #1
 8117612:	81a3      	strh	r3, [r4, #12]
 8117614:	89a3      	ldrh	r3, [r4, #12]
 8117616:	431d      	orrs	r5, r3
 8117618:	81a5      	strh	r5, [r4, #12]
 811761a:	e7cf      	b.n	81175bc <__smakebuf_r+0x18>

0811761c <_fstat_r>:
 811761c:	b538      	push	{r3, r4, r5, lr}
 811761e:	4d07      	ldr	r5, [pc, #28]	@ (811763c <_fstat_r+0x20>)
 8117620:	2300      	movs	r3, #0
 8117622:	4604      	mov	r4, r0
 8117624:	4608      	mov	r0, r1
 8117626:	4611      	mov	r1, r2
 8117628:	602b      	str	r3, [r5, #0]
 811762a:	f7e9 fa6b 	bl	8100b04 <_fstat>
 811762e:	1c43      	adds	r3, r0, #1
 8117630:	d102      	bne.n	8117638 <_fstat_r+0x1c>
 8117632:	682b      	ldr	r3, [r5, #0]
 8117634:	b103      	cbz	r3, 8117638 <_fstat_r+0x1c>
 8117636:	6023      	str	r3, [r4, #0]
 8117638:	bd38      	pop	{r3, r4, r5, pc}
 811763a:	bf00      	nop
 811763c:	1000ba04 	.word	0x1000ba04

08117640 <_isatty_r>:
 8117640:	b538      	push	{r3, r4, r5, lr}
 8117642:	4d06      	ldr	r5, [pc, #24]	@ (811765c <_isatty_r+0x1c>)
 8117644:	2300      	movs	r3, #0
 8117646:	4604      	mov	r4, r0
 8117648:	4608      	mov	r0, r1
 811764a:	602b      	str	r3, [r5, #0]
 811764c:	f7e9 fa6a 	bl	8100b24 <_isatty>
 8117650:	1c43      	adds	r3, r0, #1
 8117652:	d102      	bne.n	811765a <_isatty_r+0x1a>
 8117654:	682b      	ldr	r3, [r5, #0]
 8117656:	b103      	cbz	r3, 811765a <_isatty_r+0x1a>
 8117658:	6023      	str	r3, [r4, #0]
 811765a:	bd38      	pop	{r3, r4, r5, pc}
 811765c:	1000ba04 	.word	0x1000ba04

08117660 <_init>:
 8117660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8117662:	bf00      	nop
 8117664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8117666:	bc08      	pop	{r3}
 8117668:	469e      	mov	lr, r3
 811766a:	4770      	bx	lr

0811766c <_fini>:
 811766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811766e:	bf00      	nop
 8117670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8117672:	bc08      	pop	{r3}
 8117674:	469e      	mov	lr, r3
 8117676:	4770      	bx	lr
