
STM32H747I-DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .shared_ram   00000b40  38000000  38000000  0001c000  2**2
                  ALLOC
  2 .text         00016870  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003220  08116b10  08116b10  00017b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08119d30  08119d30  0001ad30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  08119d38  08119d38  0001ad38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08119d40  08119d40  0001ad40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000090  10000000  08119d44  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00011d7c  10000090  08119dd4  0001b090  2**2
                  ALLOC
  9 ._user_heap_stack 00002004  10011e0c  08119dd4  0001be0c  2**0
                  ALLOC
 10 .lwip_sec     00024b83  10020000  10020000  0001c000  2**2
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000430f4  00000000  00000000  0001b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000995c  00000000  00000000  0005e1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d40  00000000  00000000  00067b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002354  00000000  00000000  0006a850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00054a66  00000000  00000000  0006cba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041836  00000000  00000000  000c160a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001dddde  00000000  00000000  00102e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002e0c1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cb54  00000000  00000000  002e0c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  002ed7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000090 	.word	0x10000090
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08116af8 	.word	0x08116af8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000094 	.word	0x10000094
 81002dc:	08116af8 	.word	0x08116af8

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8100380:	b580      	push	{r7, lr}
 8100382:	b082      	sub	sp, #8
 8100384:	af00      	add	r7, sp, #0
 8100386:	6078      	str	r0, [r7, #4]
  if((SemMask &  __HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID))!= 0)
 8100388:	687b      	ldr	r3, [r7, #4]
 810038a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810038e:	2b00      	cmp	r3, #0
 8100390:	d005      	beq.n	810039e <HAL_HSEM_FreeCallback+0x1e>
  {
    /* Re-Activate HSEM notification */
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 8100392:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8100396:	f006 f8f3 	bl	8106580 <HAL_HSEM_ActivateNotification>
    /* New message received */
    prvCoreInterruptHandler();
 810039a:	f000 f86b 	bl	8100474 <prvCoreInterruptHandler>
  }

  if((SemMask & __HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP)) !=0){
 810039e:	687b      	ldr	r3, [r7, #4]
 81003a0:	2b00      	cmp	r3, #0
 81003a2:	da05      	bge.n	81003b0 <HAL_HSEM_FreeCallback+0x30>
	/* Re-Activate HSEM notification */
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 81003a4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 81003a8:	f006 f8ea 	bl	8106580 <HAL_HSEM_ActivateNotification>
	/* TX queue is empty => wake-up task trying to send a message */
	prvCoreWakeupInterruptHandler();
 81003ac:	f000 f886 	bl	81004bc <prvCoreWakeupInterruptHandler>
  }
}
 81003b0:	bf00      	nop
 81003b2:	3708      	adds	r7, #8
 81003b4:	46bd      	mov	sp, r7
 81003b6:	bd80      	pop	{r7, pc}

081003b8 <ipc_init>:

int ipc_init(void)
{
 81003b8:	b580      	push	{r7, lr}
 81003ba:	b084      	sub	sp, #16
 81003bc:	af02      	add	r7, sp, #8
    /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81003be:	4b20      	ldr	r3, [pc, #128]	@ (8100440 <ipc_init+0x88>)
 81003c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003c4:	4a1e      	ldr	r2, [pc, #120]	@ (8100440 <ipc_init+0x88>)
 81003c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81003ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81003ce:	4b1c      	ldr	r3, [pc, #112]	@ (8100440 <ipc_init+0x88>)
 81003d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81003d8:	607b      	str	r3, [r7, #4]
 81003da:	687b      	ldr	r3, [r7, #4]
#ifdef CORE_CM4
  	HAL_HSEM_Take(HSEM_INIT_CM4, 0);
 81003dc:	2100      	movs	r1, #0
 81003de:	201b      	movs	r0, #27
 81003e0:	f006 f896 	bl	8106510 <HAL_HSEM_Take>
#endif
	memset((void*)(&shared_ram.cm7_to_cm4_buffer), 0, CM7_TO_CM4_BUFFER_SIZE);
 81003e4:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 81003e8:	2100      	movs	r1, #0
 81003ea:	4816      	ldr	r0, [pc, #88]	@ (8100444 <ipc_init+0x8c>)
 81003ec:	f015 fd47 	bl	8115e7e <memset>
	memset((void*)(&shared_ram.cm4_to_cm7_buffer), 0, CM4_TO_CM7_BUFFER_SIZE);
 81003f0:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 81003f4:	2100      	movs	r1, #0
 81003f6:	4814      	ldr	r0, [pc, #80]	@ (8100448 <ipc_init+0x90>)
 81003f8:	f015 fd41 	bl	8115e7e <memset>
    shared_ram.cm7_to_cm4_handle = xMessageBufferCreateStatic(CM7_TO_CM4_BUFFER_SIZE, (uint8_t*)shared_ram.cm7_to_cm4_buffer,(StaticMessageBuffer_t*) &shared_ram.cm7_to_cm4_xmsg);
 81003fc:	4b13      	ldr	r3, [pc, #76]	@ (810044c <ipc_init+0x94>)
 81003fe:	9300      	str	r3, [sp, #0]
 8100400:	4b10      	ldr	r3, [pc, #64]	@ (8100444 <ipc_init+0x8c>)
 8100402:	2201      	movs	r2, #1
 8100404:	2100      	movs	r1, #0
 8100406:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 810040a:	f009 f90b 	bl	8109624 <xStreamBufferGenericCreateStatic>
 810040e:	4603      	mov	r3, r0
 8100410:	4a0f      	ldr	r2, [pc, #60]	@ (8100450 <ipc_init+0x98>)
 8100412:	6013      	str	r3, [r2, #0]
    shared_ram.cm4_to_cm7_handle = xMessageBufferCreateStatic(CM4_TO_CM7_BUFFER_SIZE, (uint8_t*)shared_ram.cm4_to_cm7_buffer,(StaticMessageBuffer_t*) &shared_ram.cm4_to_cm7_xmsg);
 8100414:	4b0f      	ldr	r3, [pc, #60]	@ (8100454 <ipc_init+0x9c>)
 8100416:	9300      	str	r3, [sp, #0]
 8100418:	4b0b      	ldr	r3, [pc, #44]	@ (8100448 <ipc_init+0x90>)
 810041a:	2201      	movs	r2, #1
 810041c:	2100      	movs	r1, #0
 810041e:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8100422:	f009 f8ff 	bl	8109624 <xStreamBufferGenericCreateStatic>
 8100426:	4603      	mov	r3, r0
 8100428:	4a09      	ldr	r2, [pc, #36]	@ (8100450 <ipc_init+0x98>)
 810042a:	6053      	str	r3, [r2, #4]
    HAL_HSEM_Release(HSEM_INIT_CM4, 0);
    // Wait for CM4 to complete initialization
    HAL_HSEM_Take(HSEM_INIT_CM7, 0);
#elif defined(CORE_CM4)
    // Signal CM7 that CM4 has completed initialization
    HAL_HSEM_Release(HSEM_INIT_CM7, 0);
 810042c:	2100      	movs	r1, #0
 810042e:	201a      	movs	r0, #26
 8100430:	f006 f892 	bl	8106558 <HAL_HSEM_Release>
#endif



    return 0;
 8100434:	2300      	movs	r3, #0
}
 8100436:	4618      	mov	r0, r3
 8100438:	3708      	adds	r7, #8
 810043a:	46bd      	mov	sp, r7
 810043c:	bd80      	pop	{r7, pc}
 810043e:	bf00      	nop
 8100440:	58024400 	.word	0x58024400
 8100444:	38000050 	.word	0x38000050
 8100448:	380005c8 	.word	0x380005c8
 810044c:	38000008 	.word	0x38000008
 8100450:	38000000 	.word	0x38000000
 8100454:	3800002c 	.word	0x3800002c

08100458 <ipc_start>:

int ipc_start(void){
 8100458:	b580      	push	{r7, lr}
 810045a:	af00      	add	r7, sp, #0
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 810045c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8100460:	f006 f88e 	bl	8106580 <HAL_HSEM_ActivateNotification>
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 8100464:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8100468:	f006 f88a 	bl	8106580 <HAL_HSEM_ActivateNotification>
    return 0;
 810046c:	2300      	movs	r3, #0
}
 810046e:	4618      	mov	r0, r3
 8100470:	bd80      	pop	{r7, pc}
	...

08100474 <prvCoreInterruptHandler>:

static void prvCoreInterruptHandler(void)
{
 8100474:	b580      	push	{r7, lr}
 8100476:	b082      	sub	sp, #8
 8100478:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 810047a:	2300      	movs	r3, #0
 810047c:	607b      	str	r3, [r7, #4]

    if (!xrx_data_buf)
 810047e:	4b0d      	ldr	r3, [pc, #52]	@ (81004b4 <prvCoreInterruptHandler+0x40>)
 8100480:	681b      	ldr	r3, [r3, #0]
 8100482:	2b00      	cmp	r3, #0
 8100484:	d012      	beq.n	81004ac <prvCoreInterruptHandler+0x38>
    {
    	return;
    }


	xMessageBufferSendCompletedFromISR(xrx_data_buf,
 8100486:	4b0b      	ldr	r3, [pc, #44]	@ (81004b4 <prvCoreInterruptHandler+0x40>)
 8100488:	681b      	ldr	r3, [r3, #0]
 810048a:	1d3a      	adds	r2, r7, #4
 810048c:	4611      	mov	r1, r2
 810048e:	4618      	mov	r0, r3
 8100490:	f009 fa09 	bl	81098a6 <xStreamBufferSendCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8100494:	687b      	ldr	r3, [r7, #4]
 8100496:	2b00      	cmp	r3, #0
 8100498:	d009      	beq.n	81004ae <prvCoreInterruptHandler+0x3a>
 810049a:	4b07      	ldr	r3, [pc, #28]	@ (81004b8 <prvCoreInterruptHandler+0x44>)
 810049c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81004a0:	601a      	str	r2, [r3, #0]
 81004a2:	f3bf 8f4f 	dsb	sy
 81004a6:	f3bf 8f6f 	isb	sy
 81004aa:	e000      	b.n	81004ae <prvCoreInterruptHandler+0x3a>
    	return;
 81004ac:	bf00      	nop
}
 81004ae:	3708      	adds	r7, #8
 81004b0:	46bd      	mov	sp, r7
 81004b2:	bd80      	pop	{r7, pc}
 81004b4:	38000000 	.word	0x38000000
 81004b8:	e000ed04 	.word	0xe000ed04

081004bc <prvCoreWakeupInterruptHandler>:

static void prvCoreWakeupInterruptHandler(void)
{
 81004bc:	b580      	push	{r7, lr}
 81004be:	b082      	sub	sp, #8
 81004c0:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 81004c2:	2300      	movs	r3, #0
 81004c4:	607b      	str	r3, [r7, #4]

    if (!xtx_data_buf)
 81004c6:	4b0d      	ldr	r3, [pc, #52]	@ (81004fc <prvCoreWakeupInterruptHandler+0x40>)
 81004c8:	685b      	ldr	r3, [r3, #4]
 81004ca:	2b00      	cmp	r3, #0
 81004cc:	d012      	beq.n	81004f4 <prvCoreWakeupInterruptHandler+0x38>
    {
    	return;
    }


	xMessageBufferReceiveCompletedFromISR(xtx_data_buf,
 81004ce:	4b0b      	ldr	r3, [pc, #44]	@ (81004fc <prvCoreWakeupInterruptHandler+0x40>)
 81004d0:	685b      	ldr	r3, [r3, #4]
 81004d2:	1d3a      	adds	r2, r7, #4
 81004d4:	4611      	mov	r1, r2
 81004d6:	4618      	mov	r0, r3
 81004d8:	f009 fa29 	bl	810992e <xStreamBufferReceiveCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 81004dc:	687b      	ldr	r3, [r7, #4]
 81004de:	2b00      	cmp	r3, #0
 81004e0:	d009      	beq.n	81004f6 <prvCoreWakeupInterruptHandler+0x3a>
 81004e2:	4b07      	ldr	r3, [pc, #28]	@ (8100500 <prvCoreWakeupInterruptHandler+0x44>)
 81004e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81004e8:	601a      	str	r2, [r3, #0]
 81004ea:	f3bf 8f4f 	dsb	sy
 81004ee:	f3bf 8f6f 	isb	sy
 81004f2:	e000      	b.n	81004f6 <prvCoreWakeupInterruptHandler+0x3a>
    	return;
 81004f4:	bf00      	nop
}
 81004f6:	3708      	adds	r7, #8
 81004f8:	46bd      	mov	sp, r7
 81004fa:	bd80      	pop	{r7, pc}
 81004fc:	38000000 	.word	0x38000000
 8100500:	e000ed04 	.word	0xe000ed04

08100504 <vGenerateRemoteInterrupt>:

void vGenerateRemoteInterrupt(void * xUpdatedMessageBuffer)
{
 8100504:	b580      	push	{r7, lr}
 8100506:	b084      	sub	sp, #16
 8100508:	af00      	add	r7, sp, #0
 810050a:	6078      	str	r0, [r7, #4]
    MessageBufferHandle_t xUpdatedBuffer =
 810050c:	687b      	ldr	r3, [r7, #4]
 810050e:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100510:	f3bf 8f4f 	dsb	sy
}
 8100514:	bf00      	nop
        (MessageBufferHandle_t)xUpdatedMessageBuffer;

	__DSB();
    if (xUpdatedBuffer == xtx_data_buf)
 8100516:	4b12      	ldr	r3, [pc, #72]	@ (8100560 <vGenerateRemoteInterrupt+0x5c>)
 8100518:	685b      	ldr	r3, [r3, #4]
 810051a:	68fa      	ldr	r2, [r7, #12]
 810051c:	429a      	cmp	r2, r3
 810051e:	d10b      	bne.n	8100538 <vGenerateRemoteInterrupt+0x34>
    {

        /* Take the HW Semaphore with Process1 ID  */
        if(HAL_HSEM_Take(HSEM_TX_ID, HSEM_PROCESS) == HAL_OK)
 8100520:	211b      	movs	r1, #27
 8100522:	201d      	movs	r0, #29
 8100524:	f005 fff4 	bl	8106510 <HAL_HSEM_Take>
 8100528:	4603      	mov	r3, r0
 810052a:	2b00      	cmp	r3, #0
 810052c:	d114      	bne.n	8100558 <vGenerateRemoteInterrupt+0x54>
        {
            /* Release the HW Semaphore */
            HAL_HSEM_Release(HSEM_TX_ID, HSEM_PROCESS);
 810052e:	211b      	movs	r1, #27
 8100530:	201d      	movs	r0, #29
 8100532:	f006 f811 	bl	8106558 <HAL_HSEM_Release>
		{
			/* Release the HW Semaphore */
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
		}
    }
}
 8100536:	e00f      	b.n	8100558 <vGenerateRemoteInterrupt+0x54>
    else if(xUpdatedBuffer == xrx_data_buf){
 8100538:	4b09      	ldr	r3, [pc, #36]	@ (8100560 <vGenerateRemoteInterrupt+0x5c>)
 810053a:	681b      	ldr	r3, [r3, #0]
 810053c:	68fa      	ldr	r2, [r7, #12]
 810053e:	429a      	cmp	r2, r3
 8100540:	d10a      	bne.n	8100558 <vGenerateRemoteInterrupt+0x54>
		if(HAL_HSEM_Take(HSEM_RX_WAKEUP, HSEM_PROCESS) == HAL_OK)
 8100542:	211b      	movs	r1, #27
 8100544:	201e      	movs	r0, #30
 8100546:	f005 ffe3 	bl	8106510 <HAL_HSEM_Take>
 810054a:	4603      	mov	r3, r0
 810054c:	2b00      	cmp	r3, #0
 810054e:	d103      	bne.n	8100558 <vGenerateRemoteInterrupt+0x54>
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
 8100550:	211b      	movs	r1, #27
 8100552:	201e      	movs	r0, #30
 8100554:	f006 f800 	bl	8106558 <HAL_HSEM_Release>
}
 8100558:	bf00      	nop
 810055a:	3710      	adds	r7, #16
 810055c:	46bd      	mov	sp, r7
 810055e:	bd80      	pop	{r7, pc}
 8100560:	38000000 	.word	0x38000000

08100564 <ipc_recvmsg>:

    return len;
}

size_t ipc_recvmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 8100564:	b580      	push	{r7, lr}
 8100566:	b086      	sub	sp, #24
 8100568:	af00      	add	r7, sp, #0
 810056a:	60f8      	str	r0, [r7, #12]
 810056c:	60b9      	str	r1, [r7, #8]
 810056e:	607a      	str	r2, [r7, #4]
    size_t len;

    if (timeout < 0)
 8100570:	687b      	ldr	r3, [r7, #4]
 8100572:	2b00      	cmp	r3, #0
 8100574:	da09      	bge.n	810058a <ipc_recvmsg+0x26>
        len = xMessageBufferReceive(xrx_data_buf, msg, size, portMAX_DELAY);
 8100576:	4b0b      	ldr	r3, [pc, #44]	@ (81005a4 <ipc_recvmsg+0x40>)
 8100578:	6818      	ldr	r0, [r3, #0]
 810057a:	f04f 33ff 	mov.w	r3, #4294967295
 810057e:	68ba      	ldr	r2, [r7, #8]
 8100580:	68f9      	ldr	r1, [r7, #12]
 8100582:	f009 f8d5 	bl	8109730 <xStreamBufferReceive>
 8100586:	6178      	str	r0, [r7, #20]
 8100588:	e007      	b.n	810059a <ipc_recvmsg+0x36>
    else
        len = xMessageBufferReceive(xrx_data_buf, msg, size, (TickType_t)timeout);
 810058a:	4b06      	ldr	r3, [pc, #24]	@ (81005a4 <ipc_recvmsg+0x40>)
 810058c:	6818      	ldr	r0, [r3, #0]
 810058e:	687b      	ldr	r3, [r7, #4]
 8100590:	68ba      	ldr	r2, [r7, #8]
 8100592:	68f9      	ldr	r1, [r7, #12]
 8100594:	f009 f8cc 	bl	8109730 <xStreamBufferReceive>
 8100598:	6178      	str	r0, [r7, #20]

    return len;
 810059a:	697b      	ldr	r3, [r7, #20]
}
 810059c:	4618      	mov	r0, r3
 810059e:	3718      	adds	r7, #24
 81005a0:	46bd      	mov	sp, r7
 81005a2:	bd80      	pop	{r7, pc}
 81005a4:	38000000 	.word	0x38000000

081005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81005a8:	b580      	push	{r7, lr}
 81005aa:	b082      	sub	sp, #8
 81005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81005ae:	4b2b      	ldr	r3, [pc, #172]	@ (810065c <main+0xb4>)
 81005b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81005b4:	4a29      	ldr	r2, [pc, #164]	@ (810065c <main+0xb4>)
 81005b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81005ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81005be:	4b27      	ldr	r3, [pc, #156]	@ (810065c <main+0xb4>)
 81005c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81005c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81005c8:	607b      	str	r3, [r7, #4]
 81005ca:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81005cc:	2001      	movs	r0, #1
 81005ce:	f005 ffd7 	bl	8106580 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81005d2:	f006 f87b 	bl	81066cc <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81005d6:	2201      	movs	r2, #1
 81005d8:	2102      	movs	r1, #2
 81005da:	2000      	movs	r0, #0
 81005dc:	f005 fffc 	bl	81065d8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81005e0:	4b1f      	ldr	r3, [pc, #124]	@ (8100660 <main+0xb8>)
 81005e2:	681b      	ldr	r3, [r3, #0]
 81005e4:	091b      	lsrs	r3, r3, #4
 81005e6:	f003 030f 	and.w	r3, r3, #15
 81005ea:	2b07      	cmp	r3, #7
 81005ec:	d108      	bne.n	8100600 <main+0x58>
 81005ee:	4b1d      	ldr	r3, [pc, #116]	@ (8100664 <main+0xbc>)
 81005f0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81005f4:	4a1b      	ldr	r2, [pc, #108]	@ (8100664 <main+0xbc>)
 81005f6:	f043 0301 	orr.w	r3, r3, #1
 81005fa:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81005fe:	e007      	b.n	8100610 <main+0x68>
 8100600:	4b18      	ldr	r3, [pc, #96]	@ (8100664 <main+0xbc>)
 8100602:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100606:	4a17      	ldr	r2, [pc, #92]	@ (8100664 <main+0xbc>)
 8100608:	f043 0301 	orr.w	r3, r3, #1
 810060c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100610:	f003 feca 	bl	81043a8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MDMA_Init();
 8100614:	f000 f83a 	bl	810068c <_ZL12MX_MDMA_Initv>
  MX_GPIO_Init();
 8100618:	f000 f852 	bl	81006c0 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */
  ipc_init();
 810061c:	f7ff fecc 	bl	81003b8 <ipc_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100620:	f006 fd78 	bl	8107114 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_EDaemonN */
  Task_EDaemonNHandle = osThreadNew(StartTask_EDaemonN, NULL, &Task_EDaemonN_attributes);
 8100624:	4a10      	ldr	r2, [pc, #64]	@ (8100668 <main+0xc0>)
 8100626:	2100      	movs	r1, #0
 8100628:	4810      	ldr	r0, [pc, #64]	@ (810066c <main+0xc4>)
 810062a:	f006 fdd2 	bl	81071d2 <osThreadNew>
 810062e:	4603      	mov	r3, r0
 8100630:	4a0f      	ldr	r2, [pc, #60]	@ (8100670 <main+0xc8>)
 8100632:	6013      	str	r3, [r2, #0]

  /* creation of Task_EventMgrM4 */
  Task_EventMgrM4Handle = osThreadNew(StartTask_EventMgrM4, NULL, &Task_EventMgrM4_attributes);
 8100634:	4a0f      	ldr	r2, [pc, #60]	@ (8100674 <main+0xcc>)
 8100636:	2100      	movs	r1, #0
 8100638:	480f      	ldr	r0, [pc, #60]	@ (8100678 <main+0xd0>)
 810063a:	f006 fdca 	bl	81071d2 <osThreadNew>
 810063e:	4603      	mov	r3, r0
 8100640:	4a0e      	ldr	r2, [pc, #56]	@ (810067c <main+0xd4>)
 8100642:	6013      	str	r3, [r2, #0]

  /* creation of Task_EConnMgr */
  Task_EConnMgrHandle = osThreadNew(StartTask_EdiabasConnMgr, NULL, &Task_EConnMgr_attributes);
 8100644:	4a0e      	ldr	r2, [pc, #56]	@ (8100680 <main+0xd8>)
 8100646:	2100      	movs	r1, #0
 8100648:	480e      	ldr	r0, [pc, #56]	@ (8100684 <main+0xdc>)
 810064a:	f006 fdc2 	bl	81071d2 <osThreadNew>
 810064e:	4603      	mov	r3, r0
 8100650:	4a0d      	ldr	r2, [pc, #52]	@ (8100688 <main+0xe0>)
 8100652:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8100654:	f006 fd82 	bl	810715c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100658:	bf00      	nop
 810065a:	e7fd      	b.n	8100658 <main+0xb0>
 810065c:	58024400 	.word	0x58024400
 8100660:	e000ed00 	.word	0xe000ed00
 8100664:	58026400 	.word	0x58026400
 8100668:	08119aa0 	.word	0x08119aa0
 810066c:	08100bf9 	.word	0x08100bf9
 8100670:	100000ac 	.word	0x100000ac
 8100674:	08119ac4 	.word	0x08119ac4
 8100678:	081012f1 	.word	0x081012f1
 810067c:	100000b0 	.word	0x100000b0
 8100680:	08119ae8 	.word	0x08119ae8
 8100684:	08100b65 	.word	0x08100b65
 8100688:	100000b4 	.word	0x100000b4

0810068c <_ZL12MX_MDMA_Initv>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 810068c:	b480      	push	{r7}
 810068e:	b083      	sub	sp, #12
 8100690:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8100692:	4b0a      	ldr	r3, [pc, #40]	@ (81006bc <_ZL12MX_MDMA_Initv+0x30>)
 8100694:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100698:	4a08      	ldr	r2, [pc, #32]	@ (81006bc <_ZL12MX_MDMA_Initv+0x30>)
 810069a:	f043 0301 	orr.w	r3, r3, #1
 810069e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 81006a2:	4b06      	ldr	r3, [pc, #24]	@ (81006bc <_ZL12MX_MDMA_Initv+0x30>)
 81006a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81006a8:	f003 0301 	and.w	r3, r3, #1
 81006ac:	607b      	str	r3, [r7, #4]
 81006ae:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 81006b0:	bf00      	nop
 81006b2:	370c      	adds	r7, #12
 81006b4:	46bd      	mov	sp, r7
 81006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006ba:	4770      	bx	lr
 81006bc:	58024400 	.word	0x58024400

081006c0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81006c0:	b480      	push	{r7}
 81006c2:	b087      	sub	sp, #28
 81006c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81006c6:	4b30      	ldr	r3, [pc, #192]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 81006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006cc:	4a2e      	ldr	r2, [pc, #184]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 81006ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81006d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006d6:	4b2c      	ldr	r3, [pc, #176]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 81006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81006e0:	617b      	str	r3, [r7, #20]
 81006e2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81006e4:	4b28      	ldr	r3, [pc, #160]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 81006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006ea:	4a27      	ldr	r2, [pc, #156]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 81006ec:	f043 0310 	orr.w	r3, r3, #16
 81006f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006f4:	4b24      	ldr	r3, [pc, #144]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 81006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006fa:	f003 0310 	and.w	r3, r3, #16
 81006fe:	613b      	str	r3, [r7, #16]
 8100700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100702:	4b21      	ldr	r3, [pc, #132]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 8100704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100708:	4a1f      	ldr	r2, [pc, #124]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 810070a:	f043 0304 	orr.w	r3, r3, #4
 810070e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100712:	4b1d      	ldr	r3, [pc, #116]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 8100714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100718:	f003 0304 	and.w	r3, r3, #4
 810071c:	60fb      	str	r3, [r7, #12]
 810071e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100720:	4b19      	ldr	r3, [pc, #100]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 8100722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100726:	4a18      	ldr	r2, [pc, #96]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 8100728:	f043 0301 	orr.w	r3, r3, #1
 810072c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100730:	4b15      	ldr	r3, [pc, #84]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 8100732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100736:	f003 0301 	and.w	r3, r3, #1
 810073a:	60bb      	str	r3, [r7, #8]
 810073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810073e:	4b12      	ldr	r3, [pc, #72]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 8100740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100744:	4a10      	ldr	r2, [pc, #64]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 8100746:	f043 0302 	orr.w	r3, r3, #2
 810074a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810074e:	4b0e      	ldr	r3, [pc, #56]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 8100750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100754:	f003 0302 	and.w	r3, r3, #2
 8100758:	607b      	str	r3, [r7, #4]
 810075a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 810075c:	4b0a      	ldr	r3, [pc, #40]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 810075e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100762:	4a09      	ldr	r2, [pc, #36]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 8100764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810076c:	4b06      	ldr	r3, [pc, #24]	@ (8100788 <_ZL12MX_GPIO_Initv+0xc8>)
 810076e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100776:	603b      	str	r3, [r7, #0]
 8100778:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 810077a:	bf00      	nop
 810077c:	371c      	adds	r7, #28
 810077e:	46bd      	mov	sp, r7
 8100780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100784:	4770      	bx	lr
 8100786:	bf00      	nop
 8100788:	58024400 	.word	0x58024400

0810078c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 810078c:	b580      	push	{r7, lr}
 810078e:	b082      	sub	sp, #8
 8100790:	af00      	add	r7, sp, #0
 8100792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8100794:	687b      	ldr	r3, [r7, #4]
 8100796:	681b      	ldr	r3, [r3, #0]
 8100798:	4a04      	ldr	r2, [pc, #16]	@ (81007ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 810079a:	4293      	cmp	r3, r2
 810079c:	d101      	bne.n	81007a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 810079e:	f003 fe61 	bl	8104464 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81007a2:	bf00      	nop
 81007a4:	3708      	adds	r7, #8
 81007a6:	46bd      	mov	sp, r7
 81007a8:	bd80      	pop	{r7, pc}
 81007aa:	bf00      	nop
 81007ac:	40001000 	.word	0x40001000

081007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81007b0:	b480      	push	{r7}
 81007b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 81007b4:	b672      	cpsid	i
}
 81007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81007b8:	bf00      	nop
 81007ba:	e7fd      	b.n	81007b8 <Error_Handler+0x8>

081007bc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 81007bc:	b580      	push	{r7, lr}
 81007be:	b082      	sub	sp, #8
 81007c0:	af00      	add	r7, sp, #0
 81007c2:	6078      	str	r0, [r7, #4]
 81007c4:	6039      	str	r1, [r7, #0]
 81007c6:	687b      	ldr	r3, [r7, #4]
 81007c8:	2b01      	cmp	r3, #1
 81007ca:	d11c      	bne.n	8100806 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 81007cc:	683b      	ldr	r3, [r7, #0]
 81007ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81007d2:	4293      	cmp	r3, r2
 81007d4:	d117      	bne.n	8100806 <_Z41__static_initialization_and_destruction_0ii+0x4a>
QueueHandle_t queueToEventManagerCM4 = xQueueCreate(8, sizeof(SMessage));
 81007d6:	2200      	movs	r2, #0
 81007d8:	2118      	movs	r1, #24
 81007da:	2008      	movs	r0, #8
 81007dc:	f007 ff25 	bl	810862a <xQueueGenericCreate>
 81007e0:	4603      	mov	r3, r0
 81007e2:	4a0b      	ldr	r2, [pc, #44]	@ (8100810 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 81007e4:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToNativeDaemon = xQueueCreate(16, sizeof(SMessage));
 81007e6:	2200      	movs	r2, #0
 81007e8:	2118      	movs	r1, #24
 81007ea:	2010      	movs	r0, #16
 81007ec:	f007 ff1d 	bl	810862a <xQueueGenericCreate>
 81007f0:	4603      	mov	r3, r0
 81007f2:	4a08      	ldr	r2, [pc, #32]	@ (8100814 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 81007f4:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToEdiabasConnMgr = xQueueCreate(64, sizeof(SMessage));
 81007f6:	2200      	movs	r2, #0
 81007f8:	2118      	movs	r1, #24
 81007fa:	2040      	movs	r0, #64	@ 0x40
 81007fc:	f007 ff15 	bl	810862a <xQueueGenericCreate>
 8100800:	4603      	mov	r3, r0
 8100802:	4a05      	ldr	r2, [pc, #20]	@ (8100818 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8100804:	6013      	str	r3, [r2, #0]
}
 8100806:	bf00      	nop
 8100808:	3708      	adds	r7, #8
 810080a:	46bd      	mov	sp, r7
 810080c:	bd80      	pop	{r7, pc}
 810080e:	bf00      	nop
 8100810:	100000b8 	.word	0x100000b8
 8100814:	100000bc 	.word	0x100000bc
 8100818:	100000c0 	.word	0x100000c0

0810081c <_GLOBAL__sub_I_huart1>:
 810081c:	b580      	push	{r7, lr}
 810081e:	af00      	add	r7, sp, #0
 8100820:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8100824:	2001      	movs	r0, #1
 8100826:	f7ff ffc9 	bl	81007bc <_Z41__static_initialization_and_destruction_0ii>
 810082a:	bd80      	pop	{r7, pc}

0810082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810082c:	b580      	push	{r7, lr}
 810082e:	b082      	sub	sp, #8
 8100830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100832:	4b10      	ldr	r3, [pc, #64]	@ (8100874 <HAL_MspInit+0x48>)
 8100834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100838:	4a0e      	ldr	r2, [pc, #56]	@ (8100874 <HAL_MspInit+0x48>)
 810083a:	f043 0302 	orr.w	r3, r3, #2
 810083e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100842:	4b0c      	ldr	r3, [pc, #48]	@ (8100874 <HAL_MspInit+0x48>)
 8100844:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100848:	f003 0302 	and.w	r3, r3, #2
 810084c:	607b      	str	r3, [r7, #4]
 810084e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100850:	2200      	movs	r2, #0
 8100852:	210f      	movs	r1, #15
 8100854:	f06f 0001 	mvn.w	r0, #1
 8100858:	f003 fef0 	bl	810463c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 7, 0);
 810085c:	2200      	movs	r2, #0
 810085e:	2107      	movs	r1, #7
 8100860:	207e      	movs	r0, #126	@ 0x7e
 8100862:	f003 feeb 	bl	810463c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100866:	207e      	movs	r0, #126	@ 0x7e
 8100868:	f003 ff02 	bl	8104670 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810086c:	bf00      	nop
 810086e:	3708      	adds	r7, #8
 8100870:	46bd      	mov	sp, r7
 8100872:	bd80      	pop	{r7, pc}
 8100874:	58024400 	.word	0x58024400

08100878 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100878:	b580      	push	{r7, lr}
 810087a:	b090      	sub	sp, #64	@ 0x40
 810087c:	af00      	add	r7, sp, #0
 810087e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100880:	687b      	ldr	r3, [r7, #4]
 8100882:	2b0f      	cmp	r3, #15
 8100884:	d827      	bhi.n	81008d6 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8100886:	2200      	movs	r2, #0
 8100888:	6879      	ldr	r1, [r7, #4]
 810088a:	2036      	movs	r0, #54	@ 0x36
 810088c:	f003 fed6 	bl	810463c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8100890:	2036      	movs	r0, #54	@ 0x36
 8100892:	f003 feed 	bl	8104670 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8100896:	4a29      	ldr	r2, [pc, #164]	@ (810093c <HAL_InitTick+0xc4>)
 8100898:	687b      	ldr	r3, [r7, #4]
 810089a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 810089c:	4b28      	ldr	r3, [pc, #160]	@ (8100940 <HAL_InitTick+0xc8>)
 810089e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81008a2:	4a27      	ldr	r2, [pc, #156]	@ (8100940 <HAL_InitTick+0xc8>)
 81008a4:	f043 0310 	orr.w	r3, r3, #16
 81008a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81008ac:	4b24      	ldr	r3, [pc, #144]	@ (8100940 <HAL_InitTick+0xc8>)
 81008ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81008b2:	f003 0310 	and.w	r3, r3, #16
 81008b6:	60fb      	str	r3, [r7, #12]
 81008b8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81008ba:	f107 0210 	add.w	r2, r7, #16
 81008be:	f107 0314 	add.w	r3, r7, #20
 81008c2:	4611      	mov	r1, r2
 81008c4:	4618      	mov	r0, r3
 81008c6:	f006 f8d1 	bl	8106a6c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 81008ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81008cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 81008ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81008d0:	2b00      	cmp	r3, #0
 81008d2:	d106      	bne.n	81008e2 <HAL_InitTick+0x6a>
 81008d4:	e001      	b.n	81008da <HAL_InitTick+0x62>
    return HAL_ERROR;
 81008d6:	2301      	movs	r3, #1
 81008d8:	e02b      	b.n	8100932 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 81008da:	f006 f8b1 	bl	8106a40 <HAL_RCC_GetPCLK1Freq>
 81008de:	63f8      	str	r0, [r7, #60]	@ 0x3c
 81008e0:	e004      	b.n	81008ec <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 81008e2:	f006 f8ad 	bl	8106a40 <HAL_RCC_GetPCLK1Freq>
 81008e6:	4603      	mov	r3, r0
 81008e8:	005b      	lsls	r3, r3, #1
 81008ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 81008ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81008ee:	4a15      	ldr	r2, [pc, #84]	@ (8100944 <HAL_InitTick+0xcc>)
 81008f0:	fba2 2303 	umull	r2, r3, r2, r3
 81008f4:	0c9b      	lsrs	r3, r3, #18
 81008f6:	3b01      	subs	r3, #1
 81008f8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 81008fa:	4b13      	ldr	r3, [pc, #76]	@ (8100948 <HAL_InitTick+0xd0>)
 81008fc:	4a13      	ldr	r2, [pc, #76]	@ (810094c <HAL_InitTick+0xd4>)
 81008fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8100900:	4b11      	ldr	r3, [pc, #68]	@ (8100948 <HAL_InitTick+0xd0>)
 8100902:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8100906:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8100908:	4a0f      	ldr	r2, [pc, #60]	@ (8100948 <HAL_InitTick+0xd0>)
 810090a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810090c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 810090e:	4b0e      	ldr	r3, [pc, #56]	@ (8100948 <HAL_InitTick+0xd0>)
 8100910:	2200      	movs	r2, #0
 8100912:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100914:	4b0c      	ldr	r3, [pc, #48]	@ (8100948 <HAL_InitTick+0xd0>)
 8100916:	2200      	movs	r2, #0
 8100918:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 810091a:	480b      	ldr	r0, [pc, #44]	@ (8100948 <HAL_InitTick+0xd0>)
 810091c:	f006 f8e8 	bl	8106af0 <HAL_TIM_Base_Init>
 8100920:	4603      	mov	r3, r0
 8100922:	2b00      	cmp	r3, #0
 8100924:	d104      	bne.n	8100930 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8100926:	4808      	ldr	r0, [pc, #32]	@ (8100948 <HAL_InitTick+0xd0>)
 8100928:	f006 f944 	bl	8106bb4 <HAL_TIM_Base_Start_IT>
 810092c:	4603      	mov	r3, r0
 810092e:	e000      	b.n	8100932 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8100930:	2301      	movs	r3, #1
}
 8100932:	4618      	mov	r0, r3
 8100934:	3740      	adds	r7, #64	@ 0x40
 8100936:	46bd      	mov	sp, r7
 8100938:	bd80      	pop	{r7, pc}
 810093a:	bf00      	nop
 810093c:	1000001c 	.word	0x1000001c
 8100940:	58024400 	.word	0x58024400
 8100944:	431bde83 	.word	0x431bde83
 8100948:	100000c4 	.word	0x100000c4
 810094c:	40001000 	.word	0x40001000

08100950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100950:	b480      	push	{r7}
 8100952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100954:	bf00      	nop
 8100956:	e7fd      	b.n	8100954 <NMI_Handler+0x4>

08100958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100958:	b480      	push	{r7}
 810095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810095c:	bf00      	nop
 810095e:	e7fd      	b.n	810095c <HardFault_Handler+0x4>

08100960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100960:	b480      	push	{r7}
 8100962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100964:	bf00      	nop
 8100966:	e7fd      	b.n	8100964 <MemManage_Handler+0x4>

08100968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100968:	b480      	push	{r7}
 810096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810096c:	bf00      	nop
 810096e:	e7fd      	b.n	810096c <BusFault_Handler+0x4>

08100970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100970:	b480      	push	{r7}
 8100972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100974:	bf00      	nop
 8100976:	e7fd      	b.n	8100974 <UsageFault_Handler+0x4>

08100978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100978:	b480      	push	{r7}
 810097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810097c:	bf00      	nop
 810097e:	46bd      	mov	sp, r7
 8100980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100984:	4770      	bx	lr
	...

08100988 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8100988:	b580      	push	{r7, lr}
 810098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 810098c:	4802      	ldr	r0, [pc, #8]	@ (8100998 <TIM6_DAC_IRQHandler+0x10>)
 810098e:	f006 f989 	bl	8106ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8100992:	bf00      	nop
 8100994:	bd80      	pop	{r7, pc}
 8100996:	bf00      	nop
 8100998:	100000c4 	.word	0x100000c4

0810099c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 810099c:	b580      	push	{r7, lr}
 810099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 81009a0:	4802      	ldr	r0, [pc, #8]	@ (81009ac <ETH_IRQHandler+0x10>)
 81009a2:	f004 fa5d 	bl	8104e60 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 81009a6:	bf00      	nop
 81009a8:	bd80      	pop	{r7, pc}
 81009aa:	bf00      	nop
 81009ac:	10000194 	.word	0x10000194

081009b0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 81009b0:	b580      	push	{r7, lr}
 81009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 81009b4:	4802      	ldr	r0, [pc, #8]	@ (81009c0 <ETH_WKUP_IRQHandler+0x10>)
 81009b6:	f004 fa53 	bl	8104e60 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 81009ba:	bf00      	nop
 81009bc:	bd80      	pop	{r7, pc}
 81009be:	bf00      	nop
 81009c0:	10000194 	.word	0x10000194

081009c4 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 81009c4:	b580      	push	{r7, lr}
 81009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 81009c8:	f005 fdec 	bl	81065a4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 81009cc:	bf00      	nop
 81009ce:	bd80      	pop	{r7, pc}

081009d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81009d0:	b480      	push	{r7}
 81009d2:	af00      	add	r7, sp, #0
	return 1;
 81009d4:	2301      	movs	r3, #1
}
 81009d6:	4618      	mov	r0, r3
 81009d8:	46bd      	mov	sp, r7
 81009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009de:	4770      	bx	lr

081009e0 <_kill>:

int _kill(int pid, int sig)
{
 81009e0:	b480      	push	{r7}
 81009e2:	b083      	sub	sp, #12
 81009e4:	af00      	add	r7, sp, #0
 81009e6:	6078      	str	r0, [r7, #4]
 81009e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 81009ea:	4b05      	ldr	r3, [pc, #20]	@ (8100a00 <_kill+0x20>)
 81009ec:	2216      	movs	r2, #22
 81009ee:	601a      	str	r2, [r3, #0]
	return -1;
 81009f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 81009f4:	4618      	mov	r0, r3
 81009f6:	370c      	adds	r7, #12
 81009f8:	46bd      	mov	sp, r7
 81009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009fe:	4770      	bx	lr
 8100a00:	10011e04 	.word	0x10011e04

08100a04 <_exit>:

void _exit (int status)
{
 8100a04:	b580      	push	{r7, lr}
 8100a06:	b082      	sub	sp, #8
 8100a08:	af00      	add	r7, sp, #0
 8100a0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8100a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8100a10:	6878      	ldr	r0, [r7, #4]
 8100a12:	f7ff ffe5 	bl	81009e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8100a16:	bf00      	nop
 8100a18:	e7fd      	b.n	8100a16 <_exit+0x12>

08100a1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8100a1a:	b580      	push	{r7, lr}
 8100a1c:	b086      	sub	sp, #24
 8100a1e:	af00      	add	r7, sp, #0
 8100a20:	60f8      	str	r0, [r7, #12]
 8100a22:	60b9      	str	r1, [r7, #8]
 8100a24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100a26:	2300      	movs	r3, #0
 8100a28:	617b      	str	r3, [r7, #20]
 8100a2a:	e00a      	b.n	8100a42 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8100a2c:	f3af 8000 	nop.w
 8100a30:	4601      	mov	r1, r0
 8100a32:	68bb      	ldr	r3, [r7, #8]
 8100a34:	1c5a      	adds	r2, r3, #1
 8100a36:	60ba      	str	r2, [r7, #8]
 8100a38:	b2ca      	uxtb	r2, r1
 8100a3a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100a3c:	697b      	ldr	r3, [r7, #20]
 8100a3e:	3301      	adds	r3, #1
 8100a40:	617b      	str	r3, [r7, #20]
 8100a42:	697a      	ldr	r2, [r7, #20]
 8100a44:	687b      	ldr	r3, [r7, #4]
 8100a46:	429a      	cmp	r2, r3
 8100a48:	dbf0      	blt.n	8100a2c <_read+0x12>
	}

return len;
 8100a4a:	687b      	ldr	r3, [r7, #4]
}
 8100a4c:	4618      	mov	r0, r3
 8100a4e:	3718      	adds	r7, #24
 8100a50:	46bd      	mov	sp, r7
 8100a52:	bd80      	pop	{r7, pc}

08100a54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8100a54:	b580      	push	{r7, lr}
 8100a56:	b086      	sub	sp, #24
 8100a58:	af00      	add	r7, sp, #0
 8100a5a:	60f8      	str	r0, [r7, #12]
 8100a5c:	60b9      	str	r1, [r7, #8]
 8100a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100a60:	2300      	movs	r3, #0
 8100a62:	617b      	str	r3, [r7, #20]
 8100a64:	e009      	b.n	8100a7a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8100a66:	68bb      	ldr	r3, [r7, #8]
 8100a68:	1c5a      	adds	r2, r3, #1
 8100a6a:	60ba      	str	r2, [r7, #8]
 8100a6c:	781b      	ldrb	r3, [r3, #0]
 8100a6e:	4618      	mov	r0, r3
 8100a70:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100a74:	697b      	ldr	r3, [r7, #20]
 8100a76:	3301      	adds	r3, #1
 8100a78:	617b      	str	r3, [r7, #20]
 8100a7a:	697a      	ldr	r2, [r7, #20]
 8100a7c:	687b      	ldr	r3, [r7, #4]
 8100a7e:	429a      	cmp	r2, r3
 8100a80:	dbf1      	blt.n	8100a66 <_write+0x12>
	}
	return len;
 8100a82:	687b      	ldr	r3, [r7, #4]
}
 8100a84:	4618      	mov	r0, r3
 8100a86:	3718      	adds	r7, #24
 8100a88:	46bd      	mov	sp, r7
 8100a8a:	bd80      	pop	{r7, pc}

08100a8c <_close>:

int _close(int file)
{
 8100a8c:	b480      	push	{r7}
 8100a8e:	b083      	sub	sp, #12
 8100a90:	af00      	add	r7, sp, #0
 8100a92:	6078      	str	r0, [r7, #4]
	return -1;
 8100a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100a98:	4618      	mov	r0, r3
 8100a9a:	370c      	adds	r7, #12
 8100a9c:	46bd      	mov	sp, r7
 8100a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100aa2:	4770      	bx	lr

08100aa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8100aa4:	b480      	push	{r7}
 8100aa6:	b083      	sub	sp, #12
 8100aa8:	af00      	add	r7, sp, #0
 8100aaa:	6078      	str	r0, [r7, #4]
 8100aac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8100aae:	683b      	ldr	r3, [r7, #0]
 8100ab0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8100ab4:	605a      	str	r2, [r3, #4]
	return 0;
 8100ab6:	2300      	movs	r3, #0
}
 8100ab8:	4618      	mov	r0, r3
 8100aba:	370c      	adds	r7, #12
 8100abc:	46bd      	mov	sp, r7
 8100abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ac2:	4770      	bx	lr

08100ac4 <_isatty>:

int _isatty(int file)
{
 8100ac4:	b480      	push	{r7}
 8100ac6:	b083      	sub	sp, #12
 8100ac8:	af00      	add	r7, sp, #0
 8100aca:	6078      	str	r0, [r7, #4]
	return 1;
 8100acc:	2301      	movs	r3, #1
}
 8100ace:	4618      	mov	r0, r3
 8100ad0:	370c      	adds	r7, #12
 8100ad2:	46bd      	mov	sp, r7
 8100ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ad8:	4770      	bx	lr

08100ada <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8100ada:	b480      	push	{r7}
 8100adc:	b085      	sub	sp, #20
 8100ade:	af00      	add	r7, sp, #0
 8100ae0:	60f8      	str	r0, [r7, #12]
 8100ae2:	60b9      	str	r1, [r7, #8]
 8100ae4:	607a      	str	r2, [r7, #4]
	return 0;
 8100ae6:	2300      	movs	r3, #0
}
 8100ae8:	4618      	mov	r0, r3
 8100aea:	3714      	adds	r7, #20
 8100aec:	46bd      	mov	sp, r7
 8100aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100af2:	4770      	bx	lr

08100af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100af4:	b480      	push	{r7}
 8100af6:	b087      	sub	sp, #28
 8100af8:	af00      	add	r7, sp, #0
 8100afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100afc:	4a14      	ldr	r2, [pc, #80]	@ (8100b50 <_sbrk+0x5c>)
 8100afe:	4b15      	ldr	r3, [pc, #84]	@ (8100b54 <_sbrk+0x60>)
 8100b00:	1ad3      	subs	r3, r2, r3
 8100b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100b04:	697b      	ldr	r3, [r7, #20]
 8100b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100b08:	4b13      	ldr	r3, [pc, #76]	@ (8100b58 <_sbrk+0x64>)
 8100b0a:	681b      	ldr	r3, [r3, #0]
 8100b0c:	2b00      	cmp	r3, #0
 8100b0e:	d102      	bne.n	8100b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100b10:	4b11      	ldr	r3, [pc, #68]	@ (8100b58 <_sbrk+0x64>)
 8100b12:	4a12      	ldr	r2, [pc, #72]	@ (8100b5c <_sbrk+0x68>)
 8100b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100b16:	4b10      	ldr	r3, [pc, #64]	@ (8100b58 <_sbrk+0x64>)
 8100b18:	681a      	ldr	r2, [r3, #0]
 8100b1a:	687b      	ldr	r3, [r7, #4]
 8100b1c:	4413      	add	r3, r2
 8100b1e:	693a      	ldr	r2, [r7, #16]
 8100b20:	429a      	cmp	r2, r3
 8100b22:	d205      	bcs.n	8100b30 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8100b24:	4b0e      	ldr	r3, [pc, #56]	@ (8100b60 <_sbrk+0x6c>)
 8100b26:	220c      	movs	r2, #12
 8100b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8100b2e:	e009      	b.n	8100b44 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8100b30:	4b09      	ldr	r3, [pc, #36]	@ (8100b58 <_sbrk+0x64>)
 8100b32:	681b      	ldr	r3, [r3, #0]
 8100b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100b36:	4b08      	ldr	r3, [pc, #32]	@ (8100b58 <_sbrk+0x64>)
 8100b38:	681a      	ldr	r2, [r3, #0]
 8100b3a:	687b      	ldr	r3, [r7, #4]
 8100b3c:	4413      	add	r3, r2
 8100b3e:	4a06      	ldr	r2, [pc, #24]	@ (8100b58 <_sbrk+0x64>)
 8100b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100b42:	68fb      	ldr	r3, [r7, #12]
}
 8100b44:	4618      	mov	r0, r3
 8100b46:	371c      	adds	r7, #28
 8100b48:	46bd      	mov	sp, r7
 8100b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b4e:	4770      	bx	lr
 8100b50:	10048000 	.word	0x10048000
 8100b54:	00001000 	.word	0x00001000
 8100b58:	10000110 	.word	0x10000110
 8100b5c:	10011e10 	.word	0x10011e10
 8100b60:	10011e04 	.word	0x10011e04

08100b64 <_Z24StartTask_EdiabasConnMgrPv>:
extern struct netif gnetif;

extern QueueHandle_t queueToEdiabasConnMgr;

void StartTask_EdiabasConnMgr(void *argument)
{
 8100b64:	b580      	push	{r7, lr}
 8100b66:	b084      	sub	sp, #16
 8100b68:	af00      	add	r7, sp, #0
 8100b6a:	6078      	str	r0, [r7, #4]
	osDelay(30000);
 8100b6c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8100b70:	f006 fbc1 	bl	81072f6 <osDelay>
	auto heapSize = xPortGetFreeHeapSize();
 8100b74:	f007 f8a0 	bl	8107cb8 <xPortGetFreeHeapSize>
 8100b78:	60f8      	str	r0, [r7, #12]
	(void) heapSize;
	MX_LWIP_Init();
 8100b7a:	f002 fc81 	bl	8103480 <MX_LWIP_Init>
	heapSize = xPortGetFreeHeapSize();
 8100b7e:	f007 f89b 	bl	8107cb8 <xPortGetFreeHeapSize>
 8100b82:	60f8      	str	r0, [r7, #12]
	(void) heapSize;

	/* Infinite loop */
	for (;;) {
		  osDelay(1000);
 8100b84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8100b88:	f006 fbb5 	bl	81072f6 <osDelay>
 8100b8c:	e7fa      	b.n	8100b84 <_Z24StartTask_EdiabasConnMgrPv+0x20>

08100b8e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8100b8e:	b480      	push	{r7}
 8100b90:	b083      	sub	sp, #12
 8100b92:	af00      	add	r7, sp, #0
 8100b94:	6078      	str	r0, [r7, #4]
 8100b96:	6039      	str	r1, [r7, #0]
 8100b98:	683b      	ldr	r3, [r7, #0]
 8100b9a:	4618      	mov	r0, r3
 8100b9c:	370c      	adds	r7, #12
 8100b9e:	46bd      	mov	sp, r7
 8100ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ba4:	4770      	bx	lr

08100ba6 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8100ba6:	b480      	push	{r7}
 8100ba8:	b083      	sub	sp, #12
 8100baa:	af00      	add	r7, sp, #0
 8100bac:	6078      	str	r0, [r7, #4]
 8100bae:	687b      	ldr	r3, [r7, #4]
 8100bb0:	4618      	mov	r0, r3
 8100bb2:	370c      	adds	r7, #12
 8100bb4:	46bd      	mov	sp, r7
 8100bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bba:	4770      	bx	lr

08100bbc <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8100bbc:	b480      	push	{r7}
 8100bbe:	b083      	sub	sp, #12
 8100bc0:	af00      	add	r7, sp, #0
 8100bc2:	6078      	str	r0, [r7, #4]
 8100bc4:	687b      	ldr	r3, [r7, #4]
 8100bc6:	4618      	mov	r0, r3
 8100bc8:	370c      	adds	r7, #12
 8100bca:	46bd      	mov	sp, r7
 8100bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bd0:	4770      	bx	lr

08100bd2 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8100bd2:	b580      	push	{r7, lr}
 8100bd4:	b082      	sub	sp, #8
 8100bd6:	af00      	add	r7, sp, #0
 8100bd8:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8100bda:	687b      	ldr	r3, [r7, #4]
 8100bdc:	689b      	ldr	r3, [r3, #8]
 8100bde:	2b00      	cmp	r3, #0
 8100be0:	d005      	beq.n	8100bee <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8100be2:	687b      	ldr	r3, [r7, #4]
 8100be4:	689b      	ldr	r3, [r3, #8]
 8100be6:	6878      	ldr	r0, [r7, #4]
 8100be8:	6879      	ldr	r1, [r7, #4]
 8100bea:	2203      	movs	r2, #3
 8100bec:	4798      	blx	r3
    }
 8100bee:	687b      	ldr	r3, [r7, #4]
 8100bf0:	4618      	mov	r0, r3
 8100bf2:	3708      	adds	r7, #8
 8100bf4:	46bd      	mov	sp, r7
 8100bf6:	bd80      	pop	{r7, pc}

08100bf8 <_Z18StartTask_EDaemonNPv>:
#include "cm_ipc.h"

extern QueueHandle_t queueToNativeDaemon;

void StartTask_EDaemonN(void *argument)
{
 8100bf8:	b580      	push	{r7, lr}
 8100bfa:	b086      	sub	sp, #24
 8100bfc:	af00      	add	r7, sp, #0
 8100bfe:	6078      	str	r0, [r7, #4]
	ipc_start();
 8100c00:	f7ff fc2a 	bl	8100458 <ipc_start>
	EdiabasDaemonNativeTask EdiabasDaemonNativeTaskInstance;
 8100c04:	f107 030c 	add.w	r3, r7, #12
 8100c08:	4618      	mov	r0, r3
 8100c0a:	f000 f80b 	bl	8100c24 <_ZN23EdiabasDaemonNativeTaskC1Ev>

	for(;;)
	{
		EdiabasDaemonNativeTaskInstance.process();
 8100c0e:	f107 030c 	add.w	r3, r7, #12
 8100c12:	4618      	mov	r0, r3
 8100c14:	f000 f85e 	bl	8100cd4 <_ZN23EdiabasDaemonNativeTask7processEv>
		osDelay(1);
 8100c18:	2001      	movs	r0, #1
 8100c1a:	f006 fb6c 	bl	81072f6 <osDelay>
		EdiabasDaemonNativeTaskInstance.process();
 8100c1e:	bf00      	nop
 8100c20:	e7f5      	b.n	8100c0e <_Z18StartTask_EDaemonNPv+0x16>
	...

08100c24 <_ZN23EdiabasDaemonNativeTaskC1Ev>:
	}
}

EdiabasDaemonNativeTask::EdiabasDaemonNativeTask() : event_bus(EventBus(queueToNativeDaemon, EVENT_CLIENT_DAEMON_NATIVE)) {}
 8100c24:	b580      	push	{r7, lr}
 8100c26:	b082      	sub	sp, #8
 8100c28:	af00      	add	r7, sp, #0
 8100c2a:	6078      	str	r0, [r7, #4]
 8100c2c:	687b      	ldr	r3, [r7, #4]
 8100c2e:	4a05      	ldr	r2, [pc, #20]	@ (8100c44 <_ZN23EdiabasDaemonNativeTaskC1Ev+0x20>)
 8100c30:	6811      	ldr	r1, [r2, #0]
 8100c32:	2204      	movs	r2, #4
 8100c34:	4618      	mov	r0, r3
 8100c36:	f000 fa8f 	bl	8101158 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
 8100c3a:	687b      	ldr	r3, [r7, #4]
 8100c3c:	4618      	mov	r0, r3
 8100c3e:	3708      	adds	r7, #8
 8100c40:	46bd      	mov	sp, r7
 8100c42:	bd80      	pop	{r7, pc}
 8100c44:	100000bc 	.word	0x100000bc

08100c48 <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClient>:

void EdiabasDaemonNativeTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender)
{
 8100c48:	b082      	sub	sp, #8
 8100c4a:	b480      	push	{r7}
 8100c4c:	b083      	sub	sp, #12
 8100c4e:	af00      	add	r7, sp, #0
 8100c50:	6078      	str	r0, [r7, #4]
 8100c52:	f107 0010 	add.w	r0, r7, #16
 8100c56:	e880 000c 	stmia.w	r0, {r2, r3}
 8100c5a:	460b      	mov	r3, r1
 8100c5c:	70fb      	strb	r3, [r7, #3]
////	case EVENT_CLIENT_DATA_MANAGER:
//		event_bus.send(event, msg, eventReceiver);
//	default:
//		break;;
//	}
}
 8100c5e:	bf00      	nop
 8100c60:	370c      	adds	r7, #12
 8100c62:	46bd      	mov	sp, r7
 8100c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c68:	b002      	add	sp, #8
 8100c6a:	4770      	bx	lr

08100c6c <_ZZN23EdiabasDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientE_clES0_S1_S2_>:
	size_t ret = ipc_recvmsg(&msg, len, 100000);
	if(ret == len)
	{
//		ipc_sendmsg(&msg, len, 0);
	}
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender){this->OnEvent(event, msg, eventSender);});
 8100c6c:	b082      	sub	sp, #8
 8100c6e:	b5b0      	push	{r4, r5, r7, lr}
 8100c70:	b086      	sub	sp, #24
 8100c72:	af04      	add	r7, sp, #16
 8100c74:	6078      	str	r0, [r7, #4]
 8100c76:	f107 0018 	add.w	r0, r7, #24
 8100c7a:	e880 000c 	stmia.w	r0, {r2, r3}
 8100c7e:	460b      	mov	r3, r1
 8100c80:	70fb      	strb	r3, [r7, #3]
 8100c82:	687b      	ldr	r3, [r7, #4]
 8100c84:	681c      	ldr	r4, [r3, #0]
 8100c86:	78fd      	ldrb	r5, [r7, #3]
 8100c88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8100c8c:	9302      	str	r3, [sp, #8]
 8100c8e:	466a      	mov	r2, sp
 8100c90:	f107 0320 	add.w	r3, r7, #32
 8100c94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8100c98:	e882 0003 	stmia.w	r2, {r0, r1}
 8100c9c:	f107 0318 	add.w	r3, r7, #24
 8100ca0:	cb0c      	ldmia	r3, {r2, r3}
 8100ca2:	4629      	mov	r1, r5
 8100ca4:	4620      	mov	r0, r4
 8100ca6:	f7ff ffcf 	bl	8100c48 <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClient>
 8100caa:	bf00      	nop
 8100cac:	3708      	adds	r7, #8
 8100cae:	46bd      	mov	sp, r7
 8100cb0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8100cb4:	b002      	add	sp, #8
 8100cb6:	4770      	bx	lr

08100cb8 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8100cb8:	b580      	push	{r7, lr}
 8100cba:	b082      	sub	sp, #8
 8100cbc:	af00      	add	r7, sp, #0
 8100cbe:	6078      	str	r0, [r7, #4]
 8100cc0:	687b      	ldr	r3, [r7, #4]
 8100cc2:	4618      	mov	r0, r3
 8100cc4:	f7ff ff85 	bl	8100bd2 <_ZNSt14_Function_baseD1Ev>
 8100cc8:	687b      	ldr	r3, [r7, #4]
 8100cca:	4618      	mov	r0, r3
 8100ccc:	3708      	adds	r7, #8
 8100cce:	46bd      	mov	sp, r7
 8100cd0:	bd80      	pop	{r7, pc}
	...

08100cd4 <_ZN23EdiabasDaemonNativeTask7processEv>:
{
 8100cd4:	b590      	push	{r4, r7, lr}
 8100cd6:	b091      	sub	sp, #68	@ 0x44
 8100cd8:	af00      	add	r7, sp, #0
 8100cda:	6078      	str	r0, [r7, #4]
	size_t len = sizeof(msg);
 8100cdc:	2318      	movs	r3, #24
 8100cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
	size_t ret = ipc_recvmsg(&msg, len, 100000);
 8100ce0:	f107 030c 	add.w	r3, r7, #12
 8100ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8100d24 <_ZN23EdiabasDaemonNativeTask7processEv+0x50>)
 8100ce6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8100ce8:	4618      	mov	r0, r3
 8100cea:	f7ff fc3b 	bl	8100564 <ipc_recvmsg>
 8100cee:	63b8      	str	r0, [r7, #56]	@ 0x38
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender){this->OnEvent(event, msg, eventSender);});
 8100cf0:	687c      	ldr	r4, [r7, #4]
 8100cf2:	687b      	ldr	r3, [r7, #4]
 8100cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8100cf6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8100cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100cfe:	4611      	mov	r1, r2
 8100d00:	4618      	mov	r0, r3
 8100d02:	f000 f825 	bl	8100d50 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_>
 8100d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100d0a:	4619      	mov	r1, r3
 8100d0c:	4620      	mov	r0, r4
 8100d0e:	f000 fa3d 	bl	810118c <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE>
 8100d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100d16:	4618      	mov	r0, r3
 8100d18:	f7ff ffce 	bl	8100cb8 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEED1Ev>
}
 8100d1c:	bf00      	nop
 8100d1e:	3744      	adds	r7, #68	@ 0x44
 8100d20:	46bd      	mov	sp, r7
 8100d22:	bd90      	pop	{r4, r7, pc}
 8100d24:	000186a0 	.word	0x000186a0

08100d28 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8100d28:	b480      	push	{r7}
 8100d2a:	b083      	sub	sp, #12
 8100d2c:	af00      	add	r7, sp, #0
 8100d2e:	6078      	str	r0, [r7, #4]
 8100d30:	687b      	ldr	r3, [r7, #4]
 8100d32:	461a      	mov	r2, r3
 8100d34:	2300      	movs	r3, #0
 8100d36:	6013      	str	r3, [r2, #0]
 8100d38:	6053      	str	r3, [r2, #4]
 8100d3a:	687b      	ldr	r3, [r7, #4]
 8100d3c:	2200      	movs	r2, #0
 8100d3e:	609a      	str	r2, [r3, #8]
 8100d40:	687b      	ldr	r3, [r7, #4]
 8100d42:	4618      	mov	r0, r3
 8100d44:	370c      	adds	r7, #12
 8100d46:	46bd      	mov	sp, r7
 8100d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d4c:	4770      	bx	lr
	...

08100d50 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8100d50:	b590      	push	{r4, r7, lr}
 8100d52:	b083      	sub	sp, #12
 8100d54:	af00      	add	r7, sp, #0
 8100d56:	6078      	str	r0, [r7, #4]
 8100d58:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8100d5a:	687b      	ldr	r3, [r7, #4]
 8100d5c:	461a      	mov	r2, r3
 8100d5e:	2300      	movs	r3, #0
 8100d60:	6013      	str	r3, [r2, #0]
 8100d62:	6053      	str	r3, [r2, #4]
 8100d64:	6093      	str	r3, [r2, #8]
 8100d66:	687b      	ldr	r3, [r7, #4]
 8100d68:	4618      	mov	r0, r3
 8100d6a:	f7ff ffdd 	bl	8100d28 <_ZNSt14_Function_baseC1Ev>
 8100d6e:	687b      	ldr	r3, [r7, #4]
 8100d70:	2200      	movs	r2, #0
 8100d72:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8100d74:	6838      	ldr	r0, [r7, #0]
 8100d76:	f000 f81b 	bl	8100db0 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E21_M_not_empty_functionIS5_EEbRKT_>
 8100d7a:	4603      	mov	r3, r0
 8100d7c:	2b00      	cmp	r3, #0
 8100d7e:	d00e      	beq.n	8100d9e <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8100d80:	687c      	ldr	r4, [r7, #4]
 8100d82:	6838      	ldr	r0, [r7, #0]
 8100d84:	f000 f81f 	bl	8100dc6 <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8100d88:	4603      	mov	r3, r0
 8100d8a:	4619      	mov	r1, r3
 8100d8c:	4620      	mov	r0, r4
 8100d8e:	f000 f825 	bl	8100ddc <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8100d92:	687b      	ldr	r3, [r7, #4]
 8100d94:	4a04      	ldr	r2, [pc, #16]	@ (8100da8 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_+0x58>)
 8100d96:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8100d98:	687b      	ldr	r3, [r7, #4]
 8100d9a:	4a04      	ldr	r2, [pc, #16]	@ (8100dac <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_+0x5c>)
 8100d9c:	609a      	str	r2, [r3, #8]
	    }
	}
 8100d9e:	687b      	ldr	r3, [r7, #4]
 8100da0:	4618      	mov	r0, r3
 8100da2:	370c      	adds	r7, #12
 8100da4:	46bd      	mov	sp, r7
 8100da6:	bd90      	pop	{r4, r7, pc}
 8100da8:	08100e01 	.word	0x08100e01
 8100dac:	08100e41 	.word	0x08100e41

08100db0 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8100db0:	b480      	push	{r7}
 8100db2:	b083      	sub	sp, #12
 8100db4:	af00      	add	r7, sp, #0
 8100db6:	6078      	str	r0, [r7, #4]
	  { return true; }
 8100db8:	2301      	movs	r3, #1
 8100dba:	4618      	mov	r0, r3
 8100dbc:	370c      	adds	r7, #12
 8100dbe:	46bd      	mov	sp, r7
 8100dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dc4:	4770      	bx	lr

08100dc6 <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100dc6:	b480      	push	{r7}
 8100dc8:	b083      	sub	sp, #12
 8100dca:	af00      	add	r7, sp, #0
 8100dcc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100dce:	687b      	ldr	r3, [r7, #4]
 8100dd0:	4618      	mov	r0, r3
 8100dd2:	370c      	adds	r7, #12
 8100dd4:	46bd      	mov	sp, r7
 8100dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dda:	4770      	bx	lr

08100ddc <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8100ddc:	b590      	push	{r4, r7, lr}
 8100dde:	b083      	sub	sp, #12
 8100de0:	af00      	add	r7, sp, #0
 8100de2:	6078      	str	r0, [r7, #4]
 8100de4:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8100de6:	6838      	ldr	r0, [r7, #0]
 8100de8:	f7ff ffed 	bl	8100dc6 <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8100dec:	4603      	mov	r3, r0
 8100dee:	4622      	mov	r2, r4
 8100df0:	4619      	mov	r1, r3
 8100df2:	6878      	ldr	r0, [r7, #4]
 8100df4:	f000 f843 	bl	8100e7e <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8100df8:	bf00      	nop
 8100dfa:	370c      	adds	r7, #12
 8100dfc:	46bd      	mov	sp, r7
 8100dfe:	bd90      	pop	{r4, r7, pc}

08100e00 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8100e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8100e02:	b085      	sub	sp, #20
 8100e04:	af00      	add	r7, sp, #0
 8100e06:	60f8      	str	r0, [r7, #12]
 8100e08:	60b9      	str	r1, [r7, #8]
 8100e0a:	607a      	str	r2, [r7, #4]
 8100e0c:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8100e0e:	68f8      	ldr	r0, [r7, #12]
 8100e10:	f000 f84e 	bl	8100eb0 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100e14:	4604      	mov	r4, r0
 8100e16:	68b8      	ldr	r0, [r7, #8]
 8100e18:	f000 f85b 	bl	8100ed2 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8100e1c:	4605      	mov	r5, r0
 8100e1e:	6878      	ldr	r0, [r7, #4]
 8100e20:	f000 f862 	bl	8100ee8 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8100e24:	4606      	mov	r6, r0
 8100e26:	6838      	ldr	r0, [r7, #0]
 8100e28:	f000 f869 	bl	8100efe <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8100e2c:	4603      	mov	r3, r0
 8100e2e:	4632      	mov	r2, r6
 8100e30:	4629      	mov	r1, r5
 8100e32:	4620      	mov	r0, r4
 8100e34:	f000 f86e 	bl	8100f14 <_ZSt10__invoke_rIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8100e38:	bf00      	nop
      }
 8100e3a:	3714      	adds	r7, #20
 8100e3c:	46bd      	mov	sp, r7
 8100e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08100e40 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8100e40:	b590      	push	{r4, r7, lr}
 8100e42:	b085      	sub	sp, #20
 8100e44:	af00      	add	r7, sp, #0
 8100e46:	60f8      	str	r0, [r7, #12]
 8100e48:	60b9      	str	r1, [r7, #8]
 8100e4a:	4613      	mov	r3, r2
 8100e4c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8100e4e:	79fb      	ldrb	r3, [r7, #7]
 8100e50:	2b01      	cmp	r3, #1
 8100e52:	d109      	bne.n	8100e68 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8100e54:	68f8      	ldr	r0, [r7, #12]
 8100e56:	f000 f881 	bl	8100f5c <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>
 8100e5a:	4604      	mov	r4, r0
 8100e5c:	68b8      	ldr	r0, [r7, #8]
 8100e5e:	f000 f827 	bl	8100eb0 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100e62:	4603      	mov	r3, r0
 8100e64:	6023      	str	r3, [r4, #0]
	    break;
 8100e66:	e005      	b.n	8100e74 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8100e68:	79fb      	ldrb	r3, [r7, #7]
 8100e6a:	461a      	mov	r2, r3
 8100e6c:	68b9      	ldr	r1, [r7, #8]
 8100e6e:	68f8      	ldr	r0, [r7, #12]
 8100e70:	f000 f880 	bl	8100f74 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8100e74:	2300      	movs	r3, #0
      }
 8100e76:	4618      	mov	r0, r3
 8100e78:	3714      	adds	r7, #20
 8100e7a:	46bd      	mov	sp, r7
 8100e7c:	bd90      	pop	{r4, r7, pc}

08100e7e <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8100e7e:	b590      	push	{r4, r7, lr}
 8100e80:	b085      	sub	sp, #20
 8100e82:	af00      	add	r7, sp, #0
 8100e84:	60f8      	str	r0, [r7, #12]
 8100e86:	60b9      	str	r1, [r7, #8]
 8100e88:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8100e8a:	68f8      	ldr	r0, [r7, #12]
 8100e8c:	f7ff fe8b 	bl	8100ba6 <_ZNSt9_Any_data9_M_accessEv>
 8100e90:	4603      	mov	r3, r0
 8100e92:	4619      	mov	r1, r3
 8100e94:	2004      	movs	r0, #4
 8100e96:	f7ff fe7a 	bl	8100b8e <_ZnwjPv>
 8100e9a:	4604      	mov	r4, r0
 8100e9c:	68b8      	ldr	r0, [r7, #8]
 8100e9e:	f7ff ff92 	bl	8100dc6 <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8100ea2:	4603      	mov	r3, r0
 8100ea4:	681b      	ldr	r3, [r3, #0]
 8100ea6:	6023      	str	r3, [r4, #0]
	  }
 8100ea8:	bf00      	nop
 8100eaa:	3714      	adds	r7, #20
 8100eac:	46bd      	mov	sp, r7
 8100eae:	bd90      	pop	{r4, r7, pc}

08100eb0 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8100eb0:	b580      	push	{r7, lr}
 8100eb2:	b084      	sub	sp, #16
 8100eb4:	af00      	add	r7, sp, #0
 8100eb6:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8100eb8:	6878      	ldr	r0, [r7, #4]
 8100eba:	f000 f895 	bl	8100fe8 <_ZNKSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERKT_v>
 8100ebe:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8100ec0:	68f8      	ldr	r0, [r7, #12]
 8100ec2:	f000 f89d 	bl	8101000 <_ZSt11__addressofIKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EPT_RS6_>
 8100ec6:	4603      	mov	r3, r0
 8100ec8:	bf00      	nop
	}
 8100eca:	4618      	mov	r0, r3
 8100ecc:	3710      	adds	r7, #16
 8100ece:	46bd      	mov	sp, r7
 8100ed0:	bd80      	pop	{r7, pc}

08100ed2 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100ed2:	b480      	push	{r7}
 8100ed4:	b083      	sub	sp, #12
 8100ed6:	af00      	add	r7, sp, #0
 8100ed8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100eda:	687b      	ldr	r3, [r7, #4]
 8100edc:	4618      	mov	r0, r3
 8100ede:	370c      	adds	r7, #12
 8100ee0:	46bd      	mov	sp, r7
 8100ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ee6:	4770      	bx	lr

08100ee8 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100ee8:	b480      	push	{r7}
 8100eea:	b083      	sub	sp, #12
 8100eec:	af00      	add	r7, sp, #0
 8100eee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100ef0:	687b      	ldr	r3, [r7, #4]
 8100ef2:	4618      	mov	r0, r3
 8100ef4:	370c      	adds	r7, #12
 8100ef6:	46bd      	mov	sp, r7
 8100ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100efc:	4770      	bx	lr

08100efe <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100efe:	b480      	push	{r7}
 8100f00:	b083      	sub	sp, #12
 8100f02:	af00      	add	r7, sp, #0
 8100f04:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100f06:	687b      	ldr	r3, [r7, #4]
 8100f08:	4618      	mov	r0, r3
 8100f0a:	370c      	adds	r7, #12
 8100f0c:	46bd      	mov	sp, r7
 8100f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f12:	4770      	bx	lr

08100f14 <_ZSt10__invoke_rIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8100f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8100f18:	b086      	sub	sp, #24
 8100f1a:	af02      	add	r7, sp, #8
 8100f1c:	60f8      	str	r0, [r7, #12]
 8100f1e:	60b9      	str	r1, [r7, #8]
 8100f20:	607a      	str	r2, [r7, #4]
 8100f22:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8100f24:	68f8      	ldr	r0, [r7, #12]
 8100f26:	f000 f876 	bl	8101016 <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8100f2a:	4604      	mov	r4, r0
 8100f2c:	68b8      	ldr	r0, [r7, #8]
 8100f2e:	f7ff ffd0 	bl	8100ed2 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8100f32:	4605      	mov	r5, r0
 8100f34:	6878      	ldr	r0, [r7, #4]
 8100f36:	f7ff ffd7 	bl	8100ee8 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8100f3a:	4606      	mov	r6, r0
 8100f3c:	6838      	ldr	r0, [r7, #0]
 8100f3e:	f7ff ffde 	bl	8100efe <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8100f42:	4603      	mov	r3, r0
 8100f44:	9300      	str	r3, [sp, #0]
 8100f46:	4633      	mov	r3, r6
 8100f48:	462a      	mov	r2, r5
 8100f4a:	4621      	mov	r1, r4
 8100f4c:	4640      	mov	r0, r8
 8100f4e:	f000 f86d 	bl	810102c <_ZSt13__invoke_implIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8100f52:	bf00      	nop
 8100f54:	3710      	adds	r7, #16
 8100f56:	46bd      	mov	sp, r7
 8100f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08100f5c <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>:
      _M_access() noexcept
 8100f5c:	b580      	push	{r7, lr}
 8100f5e:	b082      	sub	sp, #8
 8100f60:	af00      	add	r7, sp, #0
 8100f62:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8100f64:	6878      	ldr	r0, [r7, #4]
 8100f66:	f7ff fe1e 	bl	8100ba6 <_ZNSt9_Any_data9_M_accessEv>
 8100f6a:	4603      	mov	r3, r0
 8100f6c:	4618      	mov	r0, r3
 8100f6e:	3708      	adds	r7, #8
 8100f70:	46bd      	mov	sp, r7
 8100f72:	bd80      	pop	{r7, pc}

08100f74 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8100f74:	b590      	push	{r4, r7, lr}
 8100f76:	b085      	sub	sp, #20
 8100f78:	af00      	add	r7, sp, #0
 8100f7a:	60f8      	str	r0, [r7, #12]
 8100f7c:	60b9      	str	r1, [r7, #8]
 8100f7e:	4613      	mov	r3, r2
 8100f80:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8100f82:	79fb      	ldrb	r3, [r7, #7]
 8100f84:	2b03      	cmp	r3, #3
 8100f86:	d82a      	bhi.n	8100fde <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8100f88:	a201      	add	r2, pc, #4	@ (adr r2, 8100f90 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 8100f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100f8e:	bf00      	nop
 8100f90:	08100fa1 	.word	0x08100fa1
 8100f94:	08100faf 	.word	0x08100faf
 8100f98:	08100fc3 	.word	0x08100fc3
 8100f9c:	08100fd5 	.word	0x08100fd5
	      __dest._M_access<const type_info*>() = nullptr;
 8100fa0:	68f8      	ldr	r0, [r7, #12]
 8100fa2:	f000 f86e 	bl	8101082 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8100fa6:	4603      	mov	r3, r0
 8100fa8:	2200      	movs	r2, #0
 8100faa:	601a      	str	r2, [r3, #0]
	      break;
 8100fac:	e017      	b.n	8100fde <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8100fae:	68f8      	ldr	r0, [r7, #12]
 8100fb0:	f7ff ffd4 	bl	8100f5c <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>
 8100fb4:	4604      	mov	r4, r0
 8100fb6:	68b8      	ldr	r0, [r7, #8]
 8100fb8:	f7ff ff7a 	bl	8100eb0 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100fbc:	4603      	mov	r3, r0
 8100fbe:	6023      	str	r3, [r4, #0]
	      break;
 8100fc0:	e00d      	b.n	8100fde <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8100fc2:	68b8      	ldr	r0, [r7, #8]
 8100fc4:	f7ff ff74 	bl	8100eb0 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100fc8:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8100fca:	4619      	mov	r1, r3
 8100fcc:	68f8      	ldr	r0, [r7, #12]
 8100fce:	f000 f864 	bl	810109a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 8100fd2:	e004      	b.n	8100fde <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8100fd4:	4621      	mov	r1, r4
 8100fd6:	68f8      	ldr	r0, [r7, #12]
 8100fd8:	f000 f871 	bl	81010be <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8100fdc:	bf00      	nop
	  return false;
 8100fde:	2300      	movs	r3, #0
	}
 8100fe0:	4618      	mov	r0, r3
 8100fe2:	3714      	adds	r7, #20
 8100fe4:	46bd      	mov	sp, r7
 8100fe6:	bd90      	pop	{r4, r7, pc}

08100fe8 <_ZNKSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERKT_v>:
      _M_access() const noexcept
 8100fe8:	b580      	push	{r7, lr}
 8100fea:	b082      	sub	sp, #8
 8100fec:	af00      	add	r7, sp, #0
 8100fee:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8100ff0:	6878      	ldr	r0, [r7, #4]
 8100ff2:	f7ff fde3 	bl	8100bbc <_ZNKSt9_Any_data9_M_accessEv>
 8100ff6:	4603      	mov	r3, r0
 8100ff8:	4618      	mov	r0, r3
 8100ffa:	3708      	adds	r7, #8
 8100ffc:	46bd      	mov	sp, r7
 8100ffe:	bd80      	pop	{r7, pc}

08101000 <_ZSt11__addressofIKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8101000:	b480      	push	{r7}
 8101002:	b083      	sub	sp, #12
 8101004:	af00      	add	r7, sp, #0
 8101006:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8101008:	687b      	ldr	r3, [r7, #4]
 810100a:	4618      	mov	r0, r3
 810100c:	370c      	adds	r7, #12
 810100e:	46bd      	mov	sp, r7
 8101010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101014:	4770      	bx	lr

08101016 <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101016:	b480      	push	{r7}
 8101018:	b083      	sub	sp, #12
 810101a:	af00      	add	r7, sp, #0
 810101c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810101e:	687b      	ldr	r3, [r7, #4]
 8101020:	4618      	mov	r0, r3
 8101022:	370c      	adds	r7, #12
 8101024:	46bd      	mov	sp, r7
 8101026:	f85d 7b04 	ldr.w	r7, [sp], #4
 810102a:	4770      	bx	lr

0810102c <_ZSt13__invoke_implIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 810102c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810102e:	b089      	sub	sp, #36	@ 0x24
 8101030:	af04      	add	r7, sp, #16
 8101032:	7338      	strb	r0, [r7, #12]
 8101034:	60b9      	str	r1, [r7, #8]
 8101036:	607a      	str	r2, [r7, #4]
 8101038:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 810103a:	68b8      	ldr	r0, [r7, #8]
 810103c:	f7ff ffeb 	bl	8101016 <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8101040:	4606      	mov	r6, r0
 8101042:	6878      	ldr	r0, [r7, #4]
 8101044:	f7ff ff45 	bl	8100ed2 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8101048:	4603      	mov	r3, r0
 810104a:	781d      	ldrb	r5, [r3, #0]
 810104c:	6838      	ldr	r0, [r7, #0]
 810104e:	f7ff ff4b 	bl	8100ee8 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8101052:	4604      	mov	r4, r0
 8101054:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8101056:	f7ff ff52 	bl	8100efe <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810105a:	4603      	mov	r3, r0
 810105c:	781b      	ldrb	r3, [r3, #0]
 810105e:	9302      	str	r3, [sp, #8]
 8101060:	466a      	mov	r2, sp
 8101062:	f104 0308 	add.w	r3, r4, #8
 8101066:	e893 0003 	ldmia.w	r3, {r0, r1}
 810106a:	e882 0003 	stmia.w	r2, {r0, r1}
 810106e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8101072:	4629      	mov	r1, r5
 8101074:	4630      	mov	r0, r6
 8101076:	f7ff fdf9 	bl	8100c6c <_ZZN23EdiabasDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientE_clES0_S1_S2_>
 810107a:	bf00      	nop
 810107c:	3714      	adds	r7, #20
 810107e:	46bd      	mov	sp, r7
 8101080:	bdf0      	pop	{r4, r5, r6, r7, pc}

08101082 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8101082:	b580      	push	{r7, lr}
 8101084:	b082      	sub	sp, #8
 8101086:	af00      	add	r7, sp, #0
 8101088:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810108a:	6878      	ldr	r0, [r7, #4]
 810108c:	f7ff fd8b 	bl	8100ba6 <_ZNSt9_Any_data9_M_accessEv>
 8101090:	4603      	mov	r3, r0
 8101092:	4618      	mov	r0, r3
 8101094:	3708      	adds	r7, #8
 8101096:	46bd      	mov	sp, r7
 8101098:	bd80      	pop	{r7, pc}

0810109a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 810109a:	b590      	push	{r4, r7, lr}
 810109c:	b083      	sub	sp, #12
 810109e:	af00      	add	r7, sp, #0
 81010a0:	6078      	str	r0, [r7, #4]
 81010a2:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 81010a4:	6838      	ldr	r0, [r7, #0]
 81010a6:	f000 f816 	bl	81010d6 <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS7_E4typeE>
 81010aa:	4603      	mov	r3, r0
 81010ac:	4622      	mov	r2, r4
 81010ae:	4619      	mov	r1, r3
 81010b0:	6878      	ldr	r0, [r7, #4]
 81010b2:	f000 f81b 	bl	81010ec <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 81010b6:	bf00      	nop
 81010b8:	370c      	adds	r7, #12
 81010ba:	46bd      	mov	sp, r7
 81010bc:	bd90      	pop	{r4, r7, pc}

081010be <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 81010be:	b580      	push	{r7, lr}
 81010c0:	b082      	sub	sp, #8
 81010c2:	af00      	add	r7, sp, #0
 81010c4:	6078      	str	r0, [r7, #4]
 81010c6:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 81010c8:	6878      	ldr	r0, [r7, #4]
 81010ca:	f000 f828 	bl	810111e <_ZNSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>
	}
 81010ce:	bf00      	nop
 81010d0:	3708      	adds	r7, #8
 81010d2:	46bd      	mov	sp, r7
 81010d4:	bd80      	pop	{r7, pc}

081010d6 <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81010d6:	b480      	push	{r7}
 81010d8:	b083      	sub	sp, #12
 81010da:	af00      	add	r7, sp, #0
 81010dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81010de:	687b      	ldr	r3, [r7, #4]
 81010e0:	4618      	mov	r0, r3
 81010e2:	370c      	adds	r7, #12
 81010e4:	46bd      	mov	sp, r7
 81010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ea:	4770      	bx	lr

081010ec <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 81010ec:	b590      	push	{r4, r7, lr}
 81010ee:	b085      	sub	sp, #20
 81010f0:	af00      	add	r7, sp, #0
 81010f2:	60f8      	str	r0, [r7, #12]
 81010f4:	60b9      	str	r1, [r7, #8]
 81010f6:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 81010f8:	68f8      	ldr	r0, [r7, #12]
 81010fa:	f7ff fd54 	bl	8100ba6 <_ZNSt9_Any_data9_M_accessEv>
 81010fe:	4603      	mov	r3, r0
 8101100:	4619      	mov	r1, r3
 8101102:	2004      	movs	r0, #4
 8101104:	f7ff fd43 	bl	8100b8e <_ZnwjPv>
 8101108:	4604      	mov	r4, r0
 810110a:	68b8      	ldr	r0, [r7, #8]
 810110c:	f7ff ffe3 	bl	81010d6 <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS7_E4typeE>
 8101110:	4603      	mov	r3, r0
 8101112:	681b      	ldr	r3, [r3, #0]
 8101114:	6023      	str	r3, [r4, #0]
	  }
 8101116:	bf00      	nop
 8101118:	3714      	adds	r7, #20
 810111a:	46bd      	mov	sp, r7
 810111c:	bd90      	pop	{r4, r7, pc}

0810111e <_ZNSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>:
      _M_access() noexcept
 810111e:	b580      	push	{r7, lr}
 8101120:	b082      	sub	sp, #8
 8101122:	af00      	add	r7, sp, #0
 8101124:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8101126:	6878      	ldr	r0, [r7, #4]
 8101128:	f7ff fd3d 	bl	8100ba6 <_ZNSt9_Any_data9_M_accessEv>
 810112c:	4603      	mov	r3, r0
 810112e:	4618      	mov	r0, r3
 8101130:	3708      	adds	r7, #8
 8101132:	46bd      	mov	sp, r7
 8101134:	bd80      	pop	{r7, pc}

08101136 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8101136:	b480      	push	{r7}
 8101138:	b083      	sub	sp, #12
 810113a:	af00      	add	r7, sp, #0
 810113c:	6078      	str	r0, [r7, #4]
 810113e:	687b      	ldr	r3, [r7, #4]
 8101140:	689b      	ldr	r3, [r3, #8]
 8101142:	2b00      	cmp	r3, #0
 8101144:	bf0c      	ite	eq
 8101146:	2301      	moveq	r3, #1
 8101148:	2300      	movne	r3, #0
 810114a:	b2db      	uxtb	r3, r3
 810114c:	4618      	mov	r0, r3
 810114e:	370c      	adds	r7, #12
 8101150:	46bd      	mov	sp, r7
 8101152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101156:	4770      	bx	lr

08101158 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>:
#include "EventBus.h"

extern QueueHandle_t queueToEventManagerCM4;

EventBus::EventBus(QueueHandle_t queueSelf, EEventClient senderSelf)
 8101158:	b480      	push	{r7}
 810115a:	b085      	sub	sp, #20
 810115c:	af00      	add	r7, sp, #0
 810115e:	60f8      	str	r0, [r7, #12]
 8101160:	60b9      	str	r1, [r7, #8]
 8101162:	4613      	mov	r3, r2
 8101164:	71fb      	strb	r3, [r7, #7]
					 : queue_self(queueSelf),
 8101166:	68fb      	ldr	r3, [r7, #12]
 8101168:	68ba      	ldr	r2, [r7, #8]
 810116a:	601a      	str	r2, [r3, #0]
					   sender_self(senderSelf),
 810116c:	68fb      	ldr	r3, [r7, #12]
 810116e:	79fa      	ldrb	r2, [r7, #7]
 8101170:	711a      	strb	r2, [r3, #4]
					   queue_event_manager(queueToEventManagerCM4){}
 8101172:	4b05      	ldr	r3, [pc, #20]	@ (8101188 <_ZN8EventBusC1EP15QueueDefinition12EEventClient+0x30>)
 8101174:	681a      	ldr	r2, [r3, #0]
 8101176:	68fb      	ldr	r3, [r7, #12]
 8101178:	609a      	str	r2, [r3, #8]
 810117a:	68fb      	ldr	r3, [r7, #12]
 810117c:	4618      	mov	r0, r3
 810117e:	3714      	adds	r7, #20
 8101180:	46bd      	mov	sp, r7
 8101182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101186:	4770      	bx	lr
 8101188:	100000b8 	.word	0x100000b8

0810118c <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE>:
	}
	return false;
}

void EventBus::receive(OnEventFunction on_event_function)
{
 810118c:	b590      	push	{r4, r7, lr}
 810118e:	b08f      	sub	sp, #60	@ 0x3c
 8101190:	af04      	add	r7, sp, #16
 8101192:	6078      	str	r0, [r7, #4]
 8101194:	6039      	str	r1, [r7, #0]
	if(queue_self)
 8101196:	687b      	ldr	r3, [r7, #4]
 8101198:	681b      	ldr	r3, [r3, #0]
 810119a:	2b00      	cmp	r3, #0
 810119c:	d024      	beq.n	81011e8 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x5c>
	{
		SMessage msg;
		BaseType_t ret = pdTRUE;
 810119e:	2301      	movs	r3, #1
 81011a0:	627b      	str	r3, [r7, #36]	@ 0x24

		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 81011a2:	e011      	b.n	81011c8 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x3c>
		{
//			LOG_DEBUG("Bus Manager msg received, result[%d}, event[%d]", ret, msg.event_type);
			on_event_function(msg.event_type, msg.message_data, msg.event_sender);
 81011a4:	7b3c      	ldrb	r4, [r7, #12]
 81011a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 81011aa:	9302      	str	r3, [sp, #8]
 81011ac:	466a      	mov	r2, sp
 81011ae:	f107 0318 	add.w	r3, r7, #24
 81011b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 81011b6:	e882 0003 	stmia.w	r2, {r0, r1}
 81011ba:	f107 0310 	add.w	r3, r7, #16
 81011be:	cb0c      	ldmia	r3, {r2, r3}
 81011c0:	4621      	mov	r1, r4
 81011c2:	6838      	ldr	r0, [r7, #0]
 81011c4:	f000 f814 	bl	81011f0 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientEEclES0_S1_S2_>
		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 81011c8:	687b      	ldr	r3, [r7, #4]
 81011ca:	681b      	ldr	r3, [r3, #0]
 81011cc:	f107 010c 	add.w	r1, r7, #12
 81011d0:	2200      	movs	r2, #0
 81011d2:	4618      	mov	r0, r3
 81011d4:	f007 fdde 	bl	8108d94 <xQueueReceive>
 81011d8:	4603      	mov	r3, r0
 81011da:	2b01      	cmp	r3, #1
 81011dc:	bf0c      	ite	eq
 81011de:	2301      	moveq	r3, #1
 81011e0:	2300      	movne	r3, #0
 81011e2:	b2db      	uxtb	r3, r3
 81011e4:	2b00      	cmp	r3, #0
 81011e6:	d1dd      	bne.n	81011a4 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x18>
		}
	}
}
 81011e8:	bf00      	nop
 81011ea:	372c      	adds	r7, #44	@ 0x2c
 81011ec:	46bd      	mov	sp, r7
 81011ee:	bd90      	pop	{r4, r7, pc}

081011f0 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientEEclES0_S1_S2_>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 81011f0:	b082      	sub	sp, #8
 81011f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81011f6:	b082      	sub	sp, #8
 81011f8:	af00      	add	r7, sp, #0
 81011fa:	6078      	str	r0, [r7, #4]
 81011fc:	f107 0020 	add.w	r0, r7, #32
 8101200:	e880 000c 	stmia.w	r0, {r2, r3}
 8101204:	460b      	mov	r3, r1
 8101206:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8101208:	687b      	ldr	r3, [r7, #4]
 810120a:	4618      	mov	r0, r3
 810120c:	f7ff ff93 	bl	8101136 <_ZNKSt14_Function_base8_M_emptyEv>
 8101210:	4603      	mov	r3, r0
 8101212:	2b00      	cmp	r3, #0
 8101214:	d001      	beq.n	810121a <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientEEclES0_S1_S2_+0x2a>
	  __throw_bad_function_call();
 8101216:	f014 fbe0 	bl	81159da <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 810121a:	687b      	ldr	r3, [r7, #4]
 810121c:	68dc      	ldr	r4, [r3, #12]
 810121e:	687d      	ldr	r5, [r7, #4]
 8101220:	1cfb      	adds	r3, r7, #3
 8101222:	4618      	mov	r0, r3
 8101224:	f7ff fe55 	bl	8100ed2 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8101228:	4606      	mov	r6, r0
 810122a:	f107 0020 	add.w	r0, r7, #32
 810122e:	f7ff fe5b 	bl	8100ee8 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8101232:	4680      	mov	r8, r0
 8101234:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101238:	4618      	mov	r0, r3
 810123a:	f7ff fe60 	bl	8100efe <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810123e:	4603      	mov	r3, r0
 8101240:	4642      	mov	r2, r8
 8101242:	4631      	mov	r1, r6
 8101244:	4628      	mov	r0, r5
 8101246:	47a0      	blx	r4
 8101248:	bf00      	nop
      }
 810124a:	3708      	adds	r7, #8
 810124c:	46bd      	mov	sp, r7
 810124e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8101252:	b002      	add	sp, #8
 8101254:	4770      	bx	lr

08101256 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8101256:	b580      	push	{r7, lr}
 8101258:	b082      	sub	sp, #8
 810125a:	af00      	add	r7, sp, #0
 810125c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 810125e:	687b      	ldr	r3, [r7, #4]
 8101260:	2200      	movs	r2, #0
 8101262:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8101264:	6878      	ldr	r0, [r7, #4]
 8101266:	f000 f805 	bl	8101274 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 810126a:	687b      	ldr	r3, [r7, #4]
 810126c:	4618      	mov	r0, r3
 810126e:	3708      	adds	r7, #8
 8101270:	46bd      	mov	sp, r7
 8101272:	bd80      	pop	{r7, pc}

08101274 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8101274:	b480      	push	{r7}
 8101276:	b083      	sub	sp, #12
 8101278:	af00      	add	r7, sp, #0
 810127a:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 810127c:	687b      	ldr	r3, [r7, #4]
 810127e:	2200      	movs	r2, #0
 8101280:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8101282:	687a      	ldr	r2, [r7, #4]
 8101284:	687b      	ldr	r3, [r7, #4]
 8101286:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8101288:	687a      	ldr	r2, [r7, #4]
 810128a:	687b      	ldr	r3, [r7, #4]
 810128c:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 810128e:	687b      	ldr	r3, [r7, #4]
 8101290:	2200      	movs	r2, #0
 8101292:	611a      	str	r2, [r3, #16]
    }
 8101294:	bf00      	nop
 8101296:	370c      	adds	r7, #12
 8101298:	46bd      	mov	sp, r7
 810129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810129e:	4770      	bx	lr

081012a0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 81012a0:	b580      	push	{r7, lr}
 81012a2:	b082      	sub	sp, #8
 81012a4:	af00      	add	r7, sp, #0
 81012a6:	6078      	str	r0, [r7, #4]
 81012a8:	687b      	ldr	r3, [r7, #4]
 81012aa:	4618      	mov	r0, r3
 81012ac:	f000 f957 	bl	810155e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 81012b0:	687b      	ldr	r3, [r7, #4]
 81012b2:	4618      	mov	r0, r3
 81012b4:	3708      	adds	r7, #8
 81012b6:	46bd      	mov	sp, r7
 81012b8:	bd80      	pop	{r7, pc}

081012ba <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 81012ba:	b580      	push	{r7, lr}
 81012bc:	b082      	sub	sp, #8
 81012be:	af00      	add	r7, sp, #0
 81012c0:	6078      	str	r0, [r7, #4]
 81012c2:	687b      	ldr	r3, [r7, #4]
 81012c4:	4618      	mov	r0, r3
 81012c6:	f7ff ffeb 	bl	81012a0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 81012ca:	687b      	ldr	r3, [r7, #4]
 81012cc:	4618      	mov	r0, r3
 81012ce:	3708      	adds	r7, #8
 81012d0:	46bd      	mov	sp, r7
 81012d2:	bd80      	pop	{r7, pc}

081012d4 <_ZN19EventManagerCM4TaskC1Ev>:
	{
		/* event queues of clients */
		EVENT_QUEUE_DAEMON_NATIVE = EVENT_CLIENT_DAEMON_NATIVE,
	};

	EventManagerCM4Task() {};
 81012d4:	b580      	push	{r7, lr}
 81012d6:	b082      	sub	sp, #8
 81012d8:	af00      	add	r7, sp, #0
 81012da:	6078      	str	r0, [r7, #4]
 81012dc:	687b      	ldr	r3, [r7, #4]
 81012de:	4618      	mov	r0, r3
 81012e0:	f7ff ffeb 	bl	81012ba <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 81012e4:	687b      	ldr	r3, [r7, #4]
 81012e6:	4618      	mov	r0, r3
 81012e8:	3708      	adds	r7, #8
 81012ea:	46bd      	mov	sp, r7
 81012ec:	bd80      	pop	{r7, pc}
	...

081012f0 <_Z20StartTask_EventMgrM4Pv>:

extern QueueHandle_t queueToEventManagerCM4;
extern QueueHandle_t queueToNativeDaemon;

void StartTask_EventMgrM4(void *argument)
{
 81012f0:	b580      	push	{r7, lr}
 81012f2:	b088      	sub	sp, #32
 81012f4:	af00      	add	r7, sp, #0
 81012f6:	6078      	str	r0, [r7, #4]
	EventManagerCM4Task eventManagerInstance;
 81012f8:	f107 0308 	add.w	r3, r7, #8
 81012fc:	4618      	mov	r0, r3
 81012fe:	f7ff ffe9 	bl	81012d4 <_ZN19EventManagerCM4TaskC1Ev>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_DAEMON_NATIVE, queueToNativeDaemon);
 8101302:	4b09      	ldr	r3, [pc, #36]	@ (8101328 <_Z20StartTask_EventMgrM4Pv+0x38>)
 8101304:	681a      	ldr	r2, [r3, #0]
 8101306:	f107 0308 	add.w	r3, r7, #8
 810130a:	2104      	movs	r1, #4
 810130c:	4618      	mov	r0, r3
 810130e:	f000 f80d 	bl	810132c <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>

	for(;;)
	{
		eventManagerInstance.process();
 8101312:	f107 0308 	add.w	r3, r7, #8
 8101316:	4618      	mov	r0, r3
 8101318:	f000 f81b 	bl	8101352 <_ZN19EventManagerCM4Task7processEv>
		osDelay(1);
 810131c:	2001      	movs	r0, #1
 810131e:	f005 ffea 	bl	81072f6 <osDelay>
		eventManagerInstance.process();
 8101322:	bf00      	nop
 8101324:	e7f5      	b.n	8101312 <_Z20StartTask_EventMgrM4Pv+0x22>
 8101326:	bf00      	nop
 8101328:	100000bc 	.word	0x100000bc

0810132c <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>:
	}
}


void EventManagerCM4Task::addQueue(EEventQueue eventClient, QueueHandle_t queueHandle)
{
 810132c:	b580      	push	{r7, lr}
 810132e:	b086      	sub	sp, #24
 8101330:	af00      	add	r7, sp, #0
 8101332:	60f8      	str	r0, [r7, #12]
 8101334:	460b      	mov	r3, r1
 8101336:	607a      	str	r2, [r7, #4]
 8101338:	72fb      	strb	r3, [r7, #11]
	queue_handles.emplace(eventClient, queueHandle);
 810133a:	68f9      	ldr	r1, [r7, #12]
 810133c:	f107 0010 	add.w	r0, r7, #16
 8101340:	1d3b      	adds	r3, r7, #4
 8101342:	f107 020b 	add.w	r2, r7, #11
 8101346:	f000 f91f 	bl	8101588 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>
}
 810134a:	bf00      	nop
 810134c:	3718      	adds	r7, #24
 810134e:	46bd      	mov	sp, r7
 8101350:	bd80      	pop	{r7, pc}

08101352 <_ZN19EventManagerCM4Task7processEv>:
	queue_handles.erase(eventClient);
}


void EventManagerCM4Task::process()
{
 8101352:	b580      	push	{r7, lr}
 8101354:	b086      	sub	sp, #24
 8101356:	af00      	add	r7, sp, #0
 8101358:	6078      	str	r0, [r7, #4]
	send(receive());
 810135a:	f107 030c 	add.w	r3, r7, #12
 810135e:	6879      	ldr	r1, [r7, #4]
 8101360:	4618      	mov	r0, r3
 8101362:	f000 f835 	bl	81013d0 <_ZN19EventManagerCM4Task7receiveEv>
 8101366:	f107 030c 	add.w	r3, r7, #12
 810136a:	4619      	mov	r1, r3
 810136c:	6878      	ldr	r0, [r7, #4]
 810136e:	f000 f88d 	bl	810148c <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>
 8101372:	f107 030c 	add.w	r3, r7, #12
 8101376:	4618      	mov	r0, r3
 8101378:	f000 f920 	bl	81015bc <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>
}
 810137c:	bf00      	nop
 810137e:	3718      	adds	r7, #24
 8101380:	46bd      	mov	sp, r7
 8101382:	bd80      	pop	{r7, pc}

08101384 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8101384:	b580      	push	{r7, lr}
 8101386:	b082      	sub	sp, #8
 8101388:	af00      	add	r7, sp, #0
 810138a:	6078      	str	r0, [r7, #4]
 810138c:	6878      	ldr	r0, [r7, #4]
 810138e:	f000 f940 	bl	8101612 <_ZNSaI8SMessageED1Ev>
 8101392:	687b      	ldr	r3, [r7, #4]
 8101394:	4618      	mov	r0, r3
 8101396:	3708      	adds	r7, #8
 8101398:	46bd      	mov	sp, r7
 810139a:	bd80      	pop	{r7, pc}

0810139c <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 810139c:	b580      	push	{r7, lr}
 810139e:	b082      	sub	sp, #8
 81013a0:	af00      	add	r7, sp, #0
 81013a2:	6078      	str	r0, [r7, #4]
 81013a4:	687b      	ldr	r3, [r7, #4]
 81013a6:	4618      	mov	r0, r3
 81013a8:	f000 f923 	bl	81015f2 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>
 81013ac:	687b      	ldr	r3, [r7, #4]
 81013ae:	4618      	mov	r0, r3
 81013b0:	3708      	adds	r7, #8
 81013b2:	46bd      	mov	sp, r7
 81013b4:	bd80      	pop	{r7, pc}

081013b6 <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 81013b6:	b580      	push	{r7, lr}
 81013b8:	b082      	sub	sp, #8
 81013ba:	af00      	add	r7, sp, #0
 81013bc:	6078      	str	r0, [r7, #4]
 81013be:	687b      	ldr	r3, [r7, #4]
 81013c0:	4618      	mov	r0, r3
 81013c2:	f7ff ffeb 	bl	810139c <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>
 81013c6:	687b      	ldr	r3, [r7, #4]
 81013c8:	4618      	mov	r0, r3
 81013ca:	3708      	adds	r7, #8
 81013cc:	46bd      	mov	sp, r7
 81013ce:	bd80      	pop	{r7, pc}

081013d0 <_ZN19EventManagerCM4Task7receiveEv>:

std::vector<SMessage> EventManagerCM4Task::receive()
{
 81013d0:	b5b0      	push	{r4, r5, r7, lr}
 81013d2:	b092      	sub	sp, #72	@ 0x48
 81013d4:	af00      	add	r7, sp, #0
 81013d6:	6078      	str	r0, [r7, #4]
 81013d8:	6039      	str	r1, [r7, #0]
	std::vector<SMessage> receivedMessages;
 81013da:	6878      	ldr	r0, [r7, #4]
 81013dc:	f7ff ffeb 	bl	81013b6 <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>
	SMessage msg;

	BaseType_t ret = pdTRUE;
 81013e0:	2301      	movs	r3, #1
 81013e2:	647b      	str	r3, [r7, #68]	@ 0x44
	do
	{
		ret = xQueueReceive(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(0));
 81013e4:	4b28      	ldr	r3, [pc, #160]	@ (8101488 <_ZN19EventManagerCM4Task7receiveEv+0xb8>)
 81013e6:	681b      	ldr	r3, [r3, #0]
 81013e8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 81013ec:	2200      	movs	r2, #0
 81013ee:	4618      	mov	r0, r3
 81013f0:	f007 fcd0 	bl	8108d94 <xQueueReceive>
 81013f4:	6478      	str	r0, [r7, #68]	@ 0x44
		if(ret == pdTRUE)
 81013f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81013f8:	2b01      	cmp	r3, #1
 81013fa:	d105      	bne.n	8101408 <_ZN19EventManagerCM4Task7receiveEv+0x38>
		{
			receivedMessages.push_back(msg);
 81013fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101400:	4619      	mov	r1, r3
 8101402:	6878      	ldr	r0, [r7, #4]
 8101404:	f000 f930 	bl	8101668 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>
		}
	}while(ret == pdTRUE);
 8101408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810140a:	2b01      	cmp	r3, #1
 810140c:	d0ea      	beq.n	81013e4 <_ZN19EventManagerCM4Task7receiveEv+0x14>

	if(receivedMessages.size() > 0)
 810140e:	6878      	ldr	r0, [r7, #4]
 8101410:	f000 f950 	bl	81016b4 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8101414:	4603      	mov	r3, r0
 8101416:	2b00      	cmp	r3, #0
 8101418:	bf14      	ite	ne
 810141a:	2301      	movne	r3, #1
 810141c:	2300      	moveq	r3, #0
 810141e:	b2db      	uxtb	r3, r3
 8101420:	2b00      	cmp	r3, #0
 8101422:	d02b      	beq.n	810147c <_ZN19EventManagerCM4Task7receiveEv+0xac>
	{
		for(auto msg : receivedMessages)
 8101424:	687b      	ldr	r3, [r7, #4]
 8101426:	643b      	str	r3, [r7, #64]	@ 0x40
 8101428:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 810142a:	f000 f959 	bl	81016e0 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 810142e:	4603      	mov	r3, r0
 8101430:	60fb      	str	r3, [r7, #12]
 8101432:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8101434:	f000 f964 	bl	8101700 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 8101438:	4603      	mov	r3, r0
 810143a:	60bb      	str	r3, [r7, #8]
 810143c:	e013      	b.n	8101466 <_ZN19EventManagerCM4Task7receiveEv+0x96>
 810143e:	f107 030c 	add.w	r3, r7, #12
 8101442:	4618      	mov	r0, r3
 8101444:	f000 f996 	bl	8101774 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 8101448:	4603      	mov	r3, r0
 810144a:	f107 0410 	add.w	r4, r7, #16
 810144e:	461d      	mov	r5, r3
 8101450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101454:	e895 0003 	ldmia.w	r5, {r0, r1}
 8101458:	e884 0003 	stmia.w	r4, {r0, r1}
 810145c:	f107 030c 	add.w	r3, r7, #12
 8101460:	4618      	mov	r0, r3
 8101462:	f000 f976 	bl	8101752 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 8101466:	f107 0208 	add.w	r2, r7, #8
 810146a:	f107 030c 	add.w	r3, r7, #12
 810146e:	4611      	mov	r1, r2
 8101470:	4618      	mov	r0, r3
 8101472:	f000 f956 	bl	8101722 <_ZN9__gnu_cxxneIP8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8101476:	4603      	mov	r3, r0
 8101478:	2b00      	cmp	r3, #0
 810147a:	d1e0      	bne.n	810143e <_ZN19EventManagerCM4Task7receiveEv+0x6e>
		{
//			LOG_DEBUG("EVENT_MANAGER: Received message. r[%d], s[%d], e[%d]", msg.event_receiver, msg.event_sender, msg.event_type);
		}
	}

	return receivedMessages;
 810147c:	bf00      	nop
}
 810147e:	6878      	ldr	r0, [r7, #4]
 8101480:	3748      	adds	r7, #72	@ 0x48
 8101482:	46bd      	mov	sp, r7
 8101484:	bdb0      	pop	{r4, r5, r7, pc}
 8101486:	bf00      	nop
 8101488:	100000b8 	.word	0x100000b8

0810148c <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>:

void EventManagerCM4Task::send(const std::vector<SMessage>& messages)
{
 810148c:	b5b0      	push	{r4, r5, r7, lr}
 810148e:	b090      	sub	sp, #64	@ 0x40
 8101490:	af00      	add	r7, sp, #0
 8101492:	6078      	str	r0, [r7, #4]
 8101494:	6039      	str	r1, [r7, #0]
	for(auto msg : messages)
 8101496:	683b      	ldr	r3, [r7, #0]
 8101498:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810149a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 810149c:	f000 f976 	bl	810178c <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>
 81014a0:	4603      	mov	r3, r0
 81014a2:	61bb      	str	r3, [r7, #24]
 81014a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 81014a6:	f000 f981 	bl	81017ac <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>
 81014aa:	4603      	mov	r3, r0
 81014ac:	617b      	str	r3, [r7, #20]
 81014ae:	e046      	b.n	810153e <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xb2>
 81014b0:	f107 0318 	add.w	r3, r7, #24
 81014b4:	4618      	mov	r0, r3
 81014b6:	f000 f9b3 	bl	8101820 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 81014ba:	4603      	mov	r3, r0
 81014bc:	f107 041c 	add.w	r4, r7, #28
 81014c0:	461d      	mov	r5, r3
 81014c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81014c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81014c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 81014ca:	e884 0003 	stmia.w	r4, {r0, r1}
	{
		auto eventReceiver = static_cast<EEventQueue>(msg.event_receiver);
 81014ce:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 81014d2:	74fb      	strb	r3, [r7, #19]
		auto it = queue_handles.find(eventReceiver);
 81014d4:	687b      	ldr	r3, [r7, #4]
 81014d6:	f107 0213 	add.w	r2, r7, #19
 81014da:	4611      	mov	r1, r2
 81014dc:	4618      	mov	r0, r3
 81014de:	f000 f9ab 	bl	8101838 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 81014e2:	4603      	mov	r3, r0
 81014e4:	60fb      	str	r3, [r7, #12]

		if(it != queue_handles.end())
 81014e6:	687b      	ldr	r3, [r7, #4]
 81014e8:	4618      	mov	r0, r3
 81014ea:	f000 f9b4 	bl	8101856 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 81014ee:	4603      	mov	r3, r0
 81014f0:	637b      	str	r3, [r7, #52]	@ 0x34
 81014f2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 81014f6:	f107 030c 	add.w	r3, r7, #12
 81014fa:	4611      	mov	r1, r2
 81014fc:	4618      	mov	r0, r3
 81014fe:	f000 f9b7 	bl	8101870 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101502:	4603      	mov	r3, r0
 8101504:	2b00      	cmp	r3, #0
 8101506:	d015      	beq.n	8101534 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xa8>
		{
			QueueHandle_t targetQueue = queue_handles[eventReceiver];
 8101508:	687b      	ldr	r3, [r7, #4]
 810150a:	f107 0213 	add.w	r2, r7, #19
 810150e:	4611      	mov	r1, r2
 8101510:	4618      	mov	r0, r3
 8101512:	f000 f9c1 	bl	8101898 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8101516:	4603      	mov	r3, r0
 8101518:	681b      	ldr	r3, [r3, #0]
 810151a:	63bb      	str	r3, [r7, #56]	@ 0x38
			if(targetQueue)
 810151c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810151e:	2b00      	cmp	r3, #0
 8101520:	d008      	beq.n	8101534 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xa8>
			{
				if(xQueueSend(targetQueue, static_cast<void*>(&msg), static_cast<TickType_t>(10)) != pdTRUE)
 8101522:	f107 011c 	add.w	r1, r7, #28
 8101526:	2300      	movs	r3, #0
 8101528:	220a      	movs	r2, #10
 810152a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810152c:	f007 fa02 	bl	8108934 <xQueueGenericSend>
 8101530:	4603      	mov	r3, r0
 8101532:	2b01      	cmp	r3, #1
	for(auto msg : messages)
 8101534:	f107 0318 	add.w	r3, r7, #24
 8101538:	4618      	mov	r0, r3
 810153a:	f000 f960 	bl	81017fe <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 810153e:	f107 0214 	add.w	r2, r7, #20
 8101542:	f107 0318 	add.w	r3, r7, #24
 8101546:	4611      	mov	r1, r2
 8101548:	4618      	mov	r0, r3
 810154a:	f000 f940 	bl	81017ce <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 810154e:	4603      	mov	r3, r0
 8101550:	2b00      	cmp	r3, #0
 8101552:	d1ad      	bne.n	81014b0 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x24>
//					LOG_DEBUG("[FATAL] Could not send message. e[%d], r[%d]", msg.event_type, msg.event_receiver);
				}
			}
		}
	}
}
 8101554:	bf00      	nop
 8101556:	bf00      	nop
 8101558:	3740      	adds	r7, #64	@ 0x40
 810155a:	46bd      	mov	sp, r7
 810155c:	bdb0      	pop	{r4, r5, r7, pc}

0810155e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 810155e:	b580      	push	{r7, lr}
 8101560:	b082      	sub	sp, #8
 8101562:	af00      	add	r7, sp, #0
 8101564:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8101566:	6878      	ldr	r0, [r7, #4]
 8101568:	f000 f9f2 	bl	8101950 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 810156c:	687b      	ldr	r3, [r7, #4]
 810156e:	4618      	mov	r0, r3
 8101570:	f000 f9fa 	bl	8101968 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>
 8101574:	687b      	ldr	r3, [r7, #4]
 8101576:	3304      	adds	r3, #4
 8101578:	4618      	mov	r0, r3
 810157a:	f7ff fe6c 	bl	8101256 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 810157e:	687b      	ldr	r3, [r7, #4]
 8101580:	4618      	mov	r0, r3
 8101582:	3708      	adds	r7, #8
 8101584:	46bd      	mov	sp, r7
 8101586:	bd80      	pop	{r7, pc}

08101588 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>:
       *
       *  Insertion requires logarithmic time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 8101588:	b5b0      	push	{r4, r5, r7, lr}
 810158a:	b084      	sub	sp, #16
 810158c:	af00      	add	r7, sp, #0
 810158e:	60f8      	str	r0, [r7, #12]
 8101590:	60b9      	str	r1, [r7, #8]
 8101592:	607a      	str	r2, [r7, #4]
 8101594:	603b      	str	r3, [r7, #0]
		      }
		    return {__i, false};
		  }
	      }
#endif
	  return _M_t._M_emplace_unique(std::forward<_Args>(__args)...);
 8101596:	68bc      	ldr	r4, [r7, #8]
 8101598:	6878      	ldr	r0, [r7, #4]
 810159a:	f000 f9fc 	bl	8101996 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810159e:	4605      	mov	r5, r0
 81015a0:	6838      	ldr	r0, [r7, #0]
 81015a2:	f000 fa03 	bl	81019ac <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81015a6:	4603      	mov	r3, r0
 81015a8:	68f8      	ldr	r0, [r7, #12]
 81015aa:	462a      	mov	r2, r5
 81015ac:	4621      	mov	r1, r4
 81015ae:	f000 fa08 	bl	81019c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>
 81015b2:	bf00      	nop
	}
 81015b4:	68f8      	ldr	r0, [r7, #12]
 81015b6:	3710      	adds	r7, #16
 81015b8:	46bd      	mov	sp, r7
 81015ba:	bdb0      	pop	{r4, r5, r7, pc}

081015bc <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 81015bc:	b5b0      	push	{r4, r5, r7, lr}
 81015be:	b082      	sub	sp, #8
 81015c0:	af00      	add	r7, sp, #0
 81015c2:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 81015c4:	687b      	ldr	r3, [r7, #4]
 81015c6:	681c      	ldr	r4, [r3, #0]
 81015c8:	687b      	ldr	r3, [r7, #4]
 81015ca:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 81015cc:	687b      	ldr	r3, [r7, #4]
 81015ce:	4618      	mov	r0, r3
 81015d0:	f000 fa4c 	bl	8101a6c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81015d4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 81015d6:	461a      	mov	r2, r3
 81015d8:	4629      	mov	r1, r5
 81015da:	4620      	mov	r0, r4
 81015dc:	f000 fa51 	bl	8101a82 <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 81015e0:	687b      	ldr	r3, [r7, #4]
 81015e2:	4618      	mov	r0, r3
 81015e4:	f000 f822 	bl	810162c <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>
 81015e8:	687b      	ldr	r3, [r7, #4]
 81015ea:	4618      	mov	r0, r3
 81015ec:	3708      	adds	r7, #8
 81015ee:	46bd      	mov	sp, r7
 81015f0:	bdb0      	pop	{r4, r5, r7, pc}

081015f2 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 81015f2:	b580      	push	{r7, lr}
 81015f4:	b082      	sub	sp, #8
 81015f6:	af00      	add	r7, sp, #0
 81015f8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 81015fa:	6878      	ldr	r0, [r7, #4]
 81015fc:	f000 fa4f 	bl	8101a9e <_ZNSaI8SMessageEC1Ev>
 8101600:	687b      	ldr	r3, [r7, #4]
 8101602:	4618      	mov	r0, r3
 8101604:	f000 fa57 	bl	8101ab6 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8101608:	687b      	ldr	r3, [r7, #4]
 810160a:	4618      	mov	r0, r3
 810160c:	3708      	adds	r7, #8
 810160e:	46bd      	mov	sp, r7
 8101610:	bd80      	pop	{r7, pc}

08101612 <_ZNSaI8SMessageED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8101612:	b580      	push	{r7, lr}
 8101614:	b082      	sub	sp, #8
 8101616:	af00      	add	r7, sp, #0
 8101618:	6078      	str	r0, [r7, #4]
 810161a:	6878      	ldr	r0, [r7, #4]
 810161c:	f000 fa5f 	bl	8101ade <_ZNSt15__new_allocatorI8SMessageED1Ev>
 8101620:	687b      	ldr	r3, [r7, #4]
 8101622:	4618      	mov	r0, r3
 8101624:	3708      	adds	r7, #8
 8101626:	46bd      	mov	sp, r7
 8101628:	bd80      	pop	{r7, pc}
	...

0810162c <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 810162c:	b580      	push	{r7, lr}
 810162e:	b082      	sub	sp, #8
 8101630:	af00      	add	r7, sp, #0
 8101632:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8101634:	687b      	ldr	r3, [r7, #4]
 8101636:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8101638:	687b      	ldr	r3, [r7, #4]
 810163a:	689a      	ldr	r2, [r3, #8]
 810163c:	687b      	ldr	r3, [r7, #4]
 810163e:	681b      	ldr	r3, [r3, #0]
 8101640:	1ad3      	subs	r3, r2, r3
 8101642:	10db      	asrs	r3, r3, #3
 8101644:	4a07      	ldr	r2, [pc, #28]	@ (8101664 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev+0x38>)
 8101646:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 810164a:	461a      	mov	r2, r3
 810164c:	6878      	ldr	r0, [r7, #4]
 810164e:	f000 fa51 	bl	8101af4 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      }
 8101652:	687b      	ldr	r3, [r7, #4]
 8101654:	4618      	mov	r0, r3
 8101656:	f7ff fe95 	bl	8101384 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>
 810165a:	687b      	ldr	r3, [r7, #4]
 810165c:	4618      	mov	r0, r3
 810165e:	3708      	adds	r7, #8
 8101660:	46bd      	mov	sp, r7
 8101662:	bd80      	pop	{r7, pc}
 8101664:	aaaaaaab 	.word	0xaaaaaaab

08101668 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 8101668:	b580      	push	{r7, lr}
 810166a:	b082      	sub	sp, #8
 810166c:	af00      	add	r7, sp, #0
 810166e:	6078      	str	r0, [r7, #4]
 8101670:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8101672:	687b      	ldr	r3, [r7, #4]
 8101674:	685a      	ldr	r2, [r3, #4]
 8101676:	687b      	ldr	r3, [r7, #4]
 8101678:	689b      	ldr	r3, [r3, #8]
 810167a:	429a      	cmp	r2, r3
 810167c:	d00d      	beq.n	810169a <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 810167e:	6878      	ldr	r0, [r7, #4]
 8101680:	687b      	ldr	r3, [r7, #4]
 8101682:	685b      	ldr	r3, [r3, #4]
 8101684:	683a      	ldr	r2, [r7, #0]
 8101686:	4619      	mov	r1, r3
 8101688:	f000 fa47 	bl	8101b1a <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 810168c:	687b      	ldr	r3, [r7, #4]
 810168e:	685b      	ldr	r3, [r3, #4]
 8101690:	f103 0218 	add.w	r2, r3, #24
 8101694:	687b      	ldr	r3, [r7, #4]
 8101696:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8101698:	e008      	b.n	81016ac <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 810169a:	6878      	ldr	r0, [r7, #4]
 810169c:	f000 f830 	bl	8101700 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 81016a0:	4603      	mov	r3, r0
 81016a2:	683a      	ldr	r2, [r7, #0]
 81016a4:	4619      	mov	r1, r3
 81016a6:	6878      	ldr	r0, [r7, #4]
 81016a8:	f000 fa60 	bl	8101b6c <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 81016ac:	bf00      	nop
 81016ae:	3708      	adds	r7, #8
 81016b0:	46bd      	mov	sp, r7
 81016b2:	bd80      	pop	{r7, pc}

081016b4 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 81016b4:	b480      	push	{r7}
 81016b6:	b083      	sub	sp, #12
 81016b8:	af00      	add	r7, sp, #0
 81016ba:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 81016bc:	687b      	ldr	r3, [r7, #4]
 81016be:	685a      	ldr	r2, [r3, #4]
 81016c0:	687b      	ldr	r3, [r7, #4]
 81016c2:	681b      	ldr	r3, [r3, #0]
 81016c4:	1ad3      	subs	r3, r2, r3
 81016c6:	10db      	asrs	r3, r3, #3
 81016c8:	4a04      	ldr	r2, [pc, #16]	@ (81016dc <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv+0x28>)
 81016ca:	fb02 f303 	mul.w	r3, r2, r3
 81016ce:	4618      	mov	r0, r3
 81016d0:	370c      	adds	r7, #12
 81016d2:	46bd      	mov	sp, r7
 81016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016d8:	4770      	bx	lr
 81016da:	bf00      	nop
 81016dc:	aaaaaaab 	.word	0xaaaaaaab

081016e0 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 81016e0:	b580      	push	{r7, lr}
 81016e2:	b084      	sub	sp, #16
 81016e4:	af00      	add	r7, sp, #0
 81016e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 81016e8:	687a      	ldr	r2, [r7, #4]
 81016ea:	f107 030c 	add.w	r3, r7, #12
 81016ee:	4611      	mov	r1, r2
 81016f0:	4618      	mov	r0, r3
 81016f2:	f000 fb03 	bl	8101cfc <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 81016f6:	68fb      	ldr	r3, [r7, #12]
 81016f8:	4618      	mov	r0, r3
 81016fa:	3710      	adds	r7, #16
 81016fc:	46bd      	mov	sp, r7
 81016fe:	bd80      	pop	{r7, pc}

08101700 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8101700:	b580      	push	{r7, lr}
 8101702:	b084      	sub	sp, #16
 8101704:	af00      	add	r7, sp, #0
 8101706:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8101708:	687b      	ldr	r3, [r7, #4]
 810170a:	1d1a      	adds	r2, r3, #4
 810170c:	f107 030c 	add.w	r3, r7, #12
 8101710:	4611      	mov	r1, r2
 8101712:	4618      	mov	r0, r3
 8101714:	f000 faf2 	bl	8101cfc <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8101718:	68fb      	ldr	r3, [r7, #12]
 810171a:	4618      	mov	r0, r3
 810171c:	3710      	adds	r7, #16
 810171e:	46bd      	mov	sp, r7
 8101720:	bd80      	pop	{r7, pc}

08101722 <_ZN9__gnu_cxxneIP8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8101722:	b590      	push	{r4, r7, lr}
 8101724:	b083      	sub	sp, #12
 8101726:	af00      	add	r7, sp, #0
 8101728:	6078      	str	r0, [r7, #4]
 810172a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 810172c:	6878      	ldr	r0, [r7, #4]
 810172e:	f000 faf5 	bl	8101d1c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101732:	4603      	mov	r3, r0
 8101734:	681c      	ldr	r4, [r3, #0]
 8101736:	6838      	ldr	r0, [r7, #0]
 8101738:	f000 faf0 	bl	8101d1c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 810173c:	4603      	mov	r3, r0
 810173e:	681b      	ldr	r3, [r3, #0]
 8101740:	429c      	cmp	r4, r3
 8101742:	bf14      	ite	ne
 8101744:	2301      	movne	r3, #1
 8101746:	2300      	moveq	r3, #0
 8101748:	b2db      	uxtb	r3, r3
 810174a:	4618      	mov	r0, r3
 810174c:	370c      	adds	r7, #12
 810174e:	46bd      	mov	sp, r7
 8101750:	bd90      	pop	{r4, r7, pc}

08101752 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8101752:	b480      	push	{r7}
 8101754:	b083      	sub	sp, #12
 8101756:	af00      	add	r7, sp, #0
 8101758:	6078      	str	r0, [r7, #4]
	++_M_current;
 810175a:	687b      	ldr	r3, [r7, #4]
 810175c:	681b      	ldr	r3, [r3, #0]
 810175e:	f103 0218 	add.w	r2, r3, #24
 8101762:	687b      	ldr	r3, [r7, #4]
 8101764:	601a      	str	r2, [r3, #0]
	return *this;
 8101766:	687b      	ldr	r3, [r7, #4]
      }
 8101768:	4618      	mov	r0, r3
 810176a:	370c      	adds	r7, #12
 810176c:	46bd      	mov	sp, r7
 810176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101772:	4770      	bx	lr

08101774 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8101774:	b480      	push	{r7}
 8101776:	b083      	sub	sp, #12
 8101778:	af00      	add	r7, sp, #0
 810177a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 810177c:	687b      	ldr	r3, [r7, #4]
 810177e:	681b      	ldr	r3, [r3, #0]
 8101780:	4618      	mov	r0, r3
 8101782:	370c      	adds	r7, #12
 8101784:	46bd      	mov	sp, r7
 8101786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810178a:	4770      	bx	lr

0810178c <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 810178c:	b580      	push	{r7, lr}
 810178e:	b084      	sub	sp, #16
 8101790:	af00      	add	r7, sp, #0
 8101792:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8101794:	687a      	ldr	r2, [r7, #4]
 8101796:	f107 030c 	add.w	r3, r7, #12
 810179a:	4611      	mov	r1, r2
 810179c:	4618      	mov	r0, r3
 810179e:	f000 fac8 	bl	8101d32 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 81017a2:	68fb      	ldr	r3, [r7, #12]
 81017a4:	4618      	mov	r0, r3
 81017a6:	3710      	adds	r7, #16
 81017a8:	46bd      	mov	sp, r7
 81017aa:	bd80      	pop	{r7, pc}

081017ac <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 81017ac:	b580      	push	{r7, lr}
 81017ae:	b084      	sub	sp, #16
 81017b0:	af00      	add	r7, sp, #0
 81017b2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 81017b4:	687b      	ldr	r3, [r7, #4]
 81017b6:	1d1a      	adds	r2, r3, #4
 81017b8:	f107 030c 	add.w	r3, r7, #12
 81017bc:	4611      	mov	r1, r2
 81017be:	4618      	mov	r0, r3
 81017c0:	f000 fab7 	bl	8101d32 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 81017c4:	68fb      	ldr	r3, [r7, #12]
 81017c6:	4618      	mov	r0, r3
 81017c8:	3710      	adds	r7, #16
 81017ca:	46bd      	mov	sp, r7
 81017cc:	bd80      	pop	{r7, pc}

081017ce <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 81017ce:	b590      	push	{r4, r7, lr}
 81017d0:	b083      	sub	sp, #12
 81017d2:	af00      	add	r7, sp, #0
 81017d4:	6078      	str	r0, [r7, #4]
 81017d6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 81017d8:	6878      	ldr	r0, [r7, #4]
 81017da:	f000 faba 	bl	8101d52 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81017de:	4603      	mov	r3, r0
 81017e0:	681c      	ldr	r4, [r3, #0]
 81017e2:	6838      	ldr	r0, [r7, #0]
 81017e4:	f000 fab5 	bl	8101d52 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81017e8:	4603      	mov	r3, r0
 81017ea:	681b      	ldr	r3, [r3, #0]
 81017ec:	429c      	cmp	r4, r3
 81017ee:	bf14      	ite	ne
 81017f0:	2301      	movne	r3, #1
 81017f2:	2300      	moveq	r3, #0
 81017f4:	b2db      	uxtb	r3, r3
 81017f6:	4618      	mov	r0, r3
 81017f8:	370c      	adds	r7, #12
 81017fa:	46bd      	mov	sp, r7
 81017fc:	bd90      	pop	{r4, r7, pc}

081017fe <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 81017fe:	b480      	push	{r7}
 8101800:	b083      	sub	sp, #12
 8101802:	af00      	add	r7, sp, #0
 8101804:	6078      	str	r0, [r7, #4]
	++_M_current;
 8101806:	687b      	ldr	r3, [r7, #4]
 8101808:	681b      	ldr	r3, [r3, #0]
 810180a:	f103 0218 	add.w	r2, r3, #24
 810180e:	687b      	ldr	r3, [r7, #4]
 8101810:	601a      	str	r2, [r3, #0]
	return *this;
 8101812:	687b      	ldr	r3, [r7, #4]
      }
 8101814:	4618      	mov	r0, r3
 8101816:	370c      	adds	r7, #12
 8101818:	46bd      	mov	sp, r7
 810181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810181e:	4770      	bx	lr

08101820 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8101820:	b480      	push	{r7}
 8101822:	b083      	sub	sp, #12
 8101824:	af00      	add	r7, sp, #0
 8101826:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8101828:	687b      	ldr	r3, [r7, #4]
 810182a:	681b      	ldr	r3, [r3, #0]
 810182c:	4618      	mov	r0, r3
 810182e:	370c      	adds	r7, #12
 8101830:	46bd      	mov	sp, r7
 8101832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101836:	4770      	bx	lr

08101838 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 8101838:	b580      	push	{r7, lr}
 810183a:	b082      	sub	sp, #8
 810183c:	af00      	add	r7, sp, #0
 810183e:	6078      	str	r0, [r7, #4]
 8101840:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8101842:	687b      	ldr	r3, [r7, #4]
 8101844:	6839      	ldr	r1, [r7, #0]
 8101846:	4618      	mov	r0, r3
 8101848:	f000 fa8e 	bl	8101d68 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 810184c:	4603      	mov	r3, r0
 810184e:	4618      	mov	r0, r3
 8101850:	3708      	adds	r7, #8
 8101852:	46bd      	mov	sp, r7
 8101854:	bd80      	pop	{r7, pc}

08101856 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8101856:	b580      	push	{r7, lr}
 8101858:	b082      	sub	sp, #8
 810185a:	af00      	add	r7, sp, #0
 810185c:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 810185e:	687b      	ldr	r3, [r7, #4]
 8101860:	4618      	mov	r0, r3
 8101862:	f000 fabd 	bl	8101de0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8101866:	4603      	mov	r3, r0
 8101868:	4618      	mov	r0, r3
 810186a:	3708      	adds	r7, #8
 810186c:	46bd      	mov	sp, r7
 810186e:	bd80      	pop	{r7, pc}

08101870 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8101870:	b480      	push	{r7}
 8101872:	b083      	sub	sp, #12
 8101874:	af00      	add	r7, sp, #0
 8101876:	6078      	str	r0, [r7, #4]
 8101878:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 810187a:	687b      	ldr	r3, [r7, #4]
 810187c:	681a      	ldr	r2, [r3, #0]
 810187e:	683b      	ldr	r3, [r7, #0]
 8101880:	681b      	ldr	r3, [r3, #0]
 8101882:	429a      	cmp	r2, r3
 8101884:	bf14      	ite	ne
 8101886:	2301      	movne	r3, #1
 8101888:	2300      	moveq	r3, #0
 810188a:	b2db      	uxtb	r3, r3
 810188c:	4618      	mov	r0, r3
 810188e:	370c      	adds	r7, #12
 8101890:	46bd      	mov	sp, r7
 8101892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101896:	4770      	bx	lr

08101898 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8101898:	b590      	push	{r4, r7, lr}
 810189a:	b08b      	sub	sp, #44	@ 0x2c
 810189c:	af02      	add	r7, sp, #8
 810189e:	6078      	str	r0, [r7, #4]
 81018a0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 81018a2:	6839      	ldr	r1, [r7, #0]
 81018a4:	6878      	ldr	r0, [r7, #4]
 81018a6:	f000 faac 	bl	8101e02 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 81018aa:	4603      	mov	r3, r0
 81018ac:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 81018ae:	6878      	ldr	r0, [r7, #4]
 81018b0:	f7ff ffd1 	bl	8101856 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 81018b4:	4603      	mov	r3, r0
 81018b6:	60fb      	str	r3, [r7, #12]
 81018b8:	f107 020c 	add.w	r2, r7, #12
 81018bc:	f107 0308 	add.w	r3, r7, #8
 81018c0:	4611      	mov	r1, r2
 81018c2:	4618      	mov	r0, r3
 81018c4:	f000 faac 	bl	8101e20 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 81018c8:	4603      	mov	r3, r0
 81018ca:	2b00      	cmp	r3, #0
 81018cc:	d112      	bne.n	81018f4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x5c>
 81018ce:	6878      	ldr	r0, [r7, #4]
 81018d0:	f000 faba 	bl	8101e48 <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 81018d4:	f107 0308 	add.w	r3, r7, #8
 81018d8:	4618      	mov	r0, r3
 81018da:	f000 fac2 	bl	8101e62 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 81018de:	4603      	mov	r3, r0
 81018e0:	461a      	mov	r2, r3
 81018e2:	f107 0310 	add.w	r3, r7, #16
 81018e6:	6839      	ldr	r1, [r7, #0]
 81018e8:	4618      	mov	r0, r3
 81018ea:	f000 fac8 	bl	8101e7e <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81018ee:	4603      	mov	r3, r0
 81018f0:	2b00      	cmp	r3, #0
 81018f2:	d001      	beq.n	81018f8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 81018f4:	2301      	movs	r3, #1
 81018f6:	e000      	b.n	81018fa <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x62>
 81018f8:	2300      	movs	r3, #0
 81018fa:	2b00      	cmp	r3, #0
 81018fc:	d01b      	beq.n	8101936 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 81018fe:	687c      	ldr	r4, [r7, #4]
 8101900:	f107 0208 	add.w	r2, r7, #8
 8101904:	f107 0314 	add.w	r3, r7, #20
 8101908:	4611      	mov	r1, r2
 810190a:	4618      	mov	r0, r3
 810190c:	f000 fadb 	bl	8101ec6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8101910:	f107 0318 	add.w	r3, r7, #24
 8101914:	6839      	ldr	r1, [r7, #0]
 8101916:	4618      	mov	r0, r3
 8101918:	f000 fac6 	bl	8101ea8 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 810191c:	f107 0218 	add.w	r2, r7, #24
 8101920:	f107 031c 	add.w	r3, r7, #28
 8101924:	9300      	str	r3, [sp, #0]
 8101926:	4613      	mov	r3, r2
 8101928:	4a08      	ldr	r2, [pc, #32]	@ (810194c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb4>)
 810192a:	6979      	ldr	r1, [r7, #20]
 810192c:	4620      	mov	r0, r4
 810192e:	f000 fada 	bl	8101ee6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8101932:	4603      	mov	r3, r0
 8101934:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8101936:	f107 0308 	add.w	r3, r7, #8
 810193a:	4618      	mov	r0, r3
 810193c:	f000 fa91 	bl	8101e62 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8101940:	4603      	mov	r3, r0
 8101942:	3304      	adds	r3, #4
      }
 8101944:	4618      	mov	r0, r3
 8101946:	3724      	adds	r7, #36	@ 0x24
 8101948:	46bd      	mov	sp, r7
 810194a:	bd90      	pop	{r4, r7, pc}
 810194c:	08119b0c 	.word	0x08119b0c

08101950 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8101950:	b580      	push	{r7, lr}
 8101952:	b082      	sub	sp, #8
 8101954:	af00      	add	r7, sp, #0
 8101956:	6078      	str	r0, [r7, #4]
 8101958:	6878      	ldr	r0, [r7, #4]
 810195a:	f000 fb0a 	bl	8101f72 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 810195e:	687b      	ldr	r3, [r7, #4]
 8101960:	4618      	mov	r0, r3
 8101962:	3708      	adds	r7, #8
 8101964:	46bd      	mov	sp, r7
 8101966:	bd80      	pop	{r7, pc}

08101968 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>:
      _Rb_tree_key_compare()
 8101968:	b480      	push	{r7}
 810196a:	b083      	sub	sp, #12
 810196c:	af00      	add	r7, sp, #0
 810196e:	6078      	str	r0, [r7, #4]
      { }
 8101970:	687b      	ldr	r3, [r7, #4]
 8101972:	4618      	mov	r0, r3
 8101974:	370c      	adds	r7, #12
 8101976:	46bd      	mov	sp, r7
 8101978:	f85d 7b04 	ldr.w	r7, [sp], #4
 810197c:	4770      	bx	lr

0810197e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 810197e:	b580      	push	{r7, lr}
 8101980:	b082      	sub	sp, #8
 8101982:	af00      	add	r7, sp, #0
 8101984:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 8101986:	6878      	ldr	r0, [r7, #4]
 8101988:	f000 fb27 	bl	8101fda <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>
 810198c:	4603      	mov	r3, r0
 810198e:	4618      	mov	r0, r3
 8101990:	3708      	adds	r7, #8
 8101992:	46bd      	mov	sp, r7
 8101994:	bd80      	pop	{r7, pc}

08101996 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101996:	b480      	push	{r7}
 8101998:	b083      	sub	sp, #12
 810199a:	af00      	add	r7, sp, #0
 810199c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810199e:	687b      	ldr	r3, [r7, #4]
 81019a0:	4618      	mov	r0, r3
 81019a2:	370c      	adds	r7, #12
 81019a4:	46bd      	mov	sp, r7
 81019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019aa:	4770      	bx	lr

081019ac <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81019ac:	b480      	push	{r7}
 81019ae:	b083      	sub	sp, #12
 81019b0:	af00      	add	r7, sp, #0
 81019b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81019b4:	687b      	ldr	r3, [r7, #4]
 81019b6:	4618      	mov	r0, r3
 81019b8:	370c      	adds	r7, #12
 81019ba:	46bd      	mov	sp, r7
 81019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019c0:	4770      	bx	lr

081019c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81019c2:	b590      	push	{r4, r7, lr}
 81019c4:	b08d      	sub	sp, #52	@ 0x34
 81019c6:	af00      	add	r7, sp, #0
 81019c8:	60f8      	str	r0, [r7, #12]
 81019ca:	60b9      	str	r1, [r7, #8]
 81019cc:	607a      	str	r2, [r7, #4]
 81019ce:	603b      	str	r3, [r7, #0]
      _M_emplace_unique(_Args&&... __args)
      -> pair<iterator, bool>
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 81019d0:	6878      	ldr	r0, [r7, #4]
 81019d2:	f7ff ffe0 	bl	8101996 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81019d6:	4604      	mov	r4, r0
 81019d8:	6838      	ldr	r0, [r7, #0]
 81019da:	f7ff ffe7 	bl	81019ac <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81019de:	4603      	mov	r3, r0
 81019e0:	f107 0018 	add.w	r0, r7, #24
 81019e4:	4622      	mov	r2, r4
 81019e6:	68b9      	ldr	r1, [r7, #8]
 81019e8:	f000 fb03 	bl	8101ff2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>
	auto __res = _M_get_insert_unique_pos(__z._M_key());
 81019ec:	f107 0318 	add.w	r3, r7, #24
 81019f0:	4618      	mov	r0, r3
 81019f2:	f000 fbb7 	bl	8102164 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 81019f6:	4602      	mov	r2, r0
 81019f8:	f107 0310 	add.w	r3, r7, #16
 81019fc:	68b9      	ldr	r1, [r7, #8]
 81019fe:	4618      	mov	r0, r3
 8101a00:	f000 fb2b 	bl	810205a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
	if (__res.second)
 8101a04:	697b      	ldr	r3, [r7, #20]
 8101a06:	2b00      	cmp	r3, #0
 8101a08:	d015      	beq.n	8101a36 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x74>
	  return {__z._M_insert(__res), true};
 8101a0a:	f107 0018 	add.w	r0, r7, #24
 8101a0e:	f107 0310 	add.w	r3, r7, #16
 8101a12:	e893 0006 	ldmia.w	r3, {r1, r2}
 8101a16:	f000 fbb3 	bl	8102180 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8101a1a:	4603      	mov	r3, r0
 8101a1c:	623b      	str	r3, [r7, #32]
 8101a1e:	2301      	movs	r3, #1
 8101a20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8101a24:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 8101a28:	f107 0320 	add.w	r3, r7, #32
 8101a2c:	4619      	mov	r1, r3
 8101a2e:	68f8      	ldr	r0, [r7, #12]
 8101a30:	f000 fbbf 	bl	81021b2 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
 8101a34:	e011      	b.n	8101a5a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x98>
	return {iterator(__res.first), false};
 8101a36:	693a      	ldr	r2, [r7, #16]
 8101a38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a3c:	4611      	mov	r1, r2
 8101a3e:	4618      	mov	r0, r3
 8101a40:	f000 fbd0 	bl	81021e4 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8101a44:	2300      	movs	r3, #0
 8101a46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8101a4a:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 8101a4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101a52:	4619      	mov	r1, r3
 8101a54:	68f8      	ldr	r0, [r7, #12]
 8101a56:	f000 fbac 	bl	81021b2 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
      }
 8101a5a:	f107 0318 	add.w	r3, r7, #24
 8101a5e:	4618      	mov	r0, r3
 8101a60:	f000 fae6 	bl	8102030 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8101a64:	68f8      	ldr	r0, [r7, #12]
 8101a66:	3734      	adds	r7, #52	@ 0x34
 8101a68:	46bd      	mov	sp, r7
 8101a6a:	bd90      	pop	{r4, r7, pc}

08101a6c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8101a6c:	b480      	push	{r7}
 8101a6e:	b083      	sub	sp, #12
 8101a70:	af00      	add	r7, sp, #0
 8101a72:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8101a74:	687b      	ldr	r3, [r7, #4]
 8101a76:	4618      	mov	r0, r3
 8101a78:	370c      	adds	r7, #12
 8101a7a:	46bd      	mov	sp, r7
 8101a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a80:	4770      	bx	lr

08101a82 <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8101a82:	b580      	push	{r7, lr}
 8101a84:	b084      	sub	sp, #16
 8101a86:	af00      	add	r7, sp, #0
 8101a88:	60f8      	str	r0, [r7, #12]
 8101a8a:	60b9      	str	r1, [r7, #8]
 8101a8c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8101a8e:	68b9      	ldr	r1, [r7, #8]
 8101a90:	68f8      	ldr	r0, [r7, #12]
 8101a92:	f000 fbc2 	bl	810221a <_ZSt8_DestroyIP8SMessageEvT_S2_>
    }
 8101a96:	bf00      	nop
 8101a98:	3710      	adds	r7, #16
 8101a9a:	46bd      	mov	sp, r7
 8101a9c:	bd80      	pop	{r7, pc}

08101a9e <_ZNSaI8SMessageEC1Ev>:
 8101a9e:	b580      	push	{r7, lr}
 8101aa0:	b082      	sub	sp, #8
 8101aa2:	af00      	add	r7, sp, #0
 8101aa4:	6078      	str	r0, [r7, #4]
 8101aa6:	6878      	ldr	r0, [r7, #4]
 8101aa8:	f000 fbc4 	bl	8102234 <_ZNSt15__new_allocatorI8SMessageEC1Ev>
 8101aac:	687b      	ldr	r3, [r7, #4]
 8101aae:	4618      	mov	r0, r3
 8101ab0:	3708      	adds	r7, #8
 8101ab2:	46bd      	mov	sp, r7
 8101ab4:	bd80      	pop	{r7, pc}

08101ab6 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8101ab6:	b480      	push	{r7}
 8101ab8:	b083      	sub	sp, #12
 8101aba:	af00      	add	r7, sp, #0
 8101abc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8101abe:	687b      	ldr	r3, [r7, #4]
 8101ac0:	2200      	movs	r2, #0
 8101ac2:	601a      	str	r2, [r3, #0]
 8101ac4:	687b      	ldr	r3, [r7, #4]
 8101ac6:	2200      	movs	r2, #0
 8101ac8:	605a      	str	r2, [r3, #4]
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	2200      	movs	r2, #0
 8101ace:	609a      	str	r2, [r3, #8]
	{ }
 8101ad0:	687b      	ldr	r3, [r7, #4]
 8101ad2:	4618      	mov	r0, r3
 8101ad4:	370c      	adds	r7, #12
 8101ad6:	46bd      	mov	sp, r7
 8101ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101adc:	4770      	bx	lr

08101ade <_ZNSt15__new_allocatorI8SMessageED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8101ade:	b480      	push	{r7}
 8101ae0:	b083      	sub	sp, #12
 8101ae2:	af00      	add	r7, sp, #0
 8101ae4:	6078      	str	r0, [r7, #4]
 8101ae6:	687b      	ldr	r3, [r7, #4]
 8101ae8:	4618      	mov	r0, r3
 8101aea:	370c      	adds	r7, #12
 8101aec:	46bd      	mov	sp, r7
 8101aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101af2:	4770      	bx	lr

08101af4 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8101af4:	b580      	push	{r7, lr}
 8101af6:	b084      	sub	sp, #16
 8101af8:	af00      	add	r7, sp, #0
 8101afa:	60f8      	str	r0, [r7, #12]
 8101afc:	60b9      	str	r1, [r7, #8]
 8101afe:	607a      	str	r2, [r7, #4]
	if (__p)
 8101b00:	68bb      	ldr	r3, [r7, #8]
 8101b02:	2b00      	cmp	r3, #0
 8101b04:	d005      	beq.n	8101b12 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8101b06:	68fb      	ldr	r3, [r7, #12]
 8101b08:	687a      	ldr	r2, [r7, #4]
 8101b0a:	68b9      	ldr	r1, [r7, #8]
 8101b0c:	4618      	mov	r0, r3
 8101b0e:	f000 fb9c 	bl	810224a <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>
      }
 8101b12:	bf00      	nop
 8101b14:	3710      	adds	r7, #16
 8101b16:	46bd      	mov	sp, r7
 8101b18:	bd80      	pop	{r7, pc}

08101b1a <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8101b1a:	b580      	push	{r7, lr}
 8101b1c:	b084      	sub	sp, #16
 8101b1e:	af00      	add	r7, sp, #0
 8101b20:	60f8      	str	r0, [r7, #12]
 8101b22:	60b9      	str	r1, [r7, #8]
 8101b24:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8101b26:	6878      	ldr	r0, [r7, #4]
 8101b28:	f000 fb9e 	bl	8102268 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8101b2c:	4603      	mov	r3, r0
 8101b2e:	461a      	mov	r2, r3
 8101b30:	68b9      	ldr	r1, [r7, #8]
 8101b32:	68f8      	ldr	r0, [r7, #12]
 8101b34:	f000 fba3 	bl	810227e <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>
	}
 8101b38:	bf00      	nop
 8101b3a:	3710      	adds	r7, #16
 8101b3c:	46bd      	mov	sp, r7
 8101b3e:	bd80      	pop	{r7, pc}

08101b40 <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8101b40:	b580      	push	{r7, lr}
 8101b42:	b082      	sub	sp, #8
 8101b44:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8101b46:	4618      	mov	r0, r3
 8101b48:	f000 f805 	bl	8101b56 <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8101b4c:	4603      	mov	r3, r0
      }
 8101b4e:	4618      	mov	r0, r3
 8101b50:	3708      	adds	r7, #8
 8101b52:	46bd      	mov	sp, r7
 8101b54:	bd80      	pop	{r7, pc}

08101b56 <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8101b56:	b480      	push	{r7}
 8101b58:	b083      	sub	sp, #12
 8101b5a:	af00      	add	r7, sp, #0
 8101b5c:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8101b5e:	2301      	movs	r3, #1
      }
 8101b60:	4618      	mov	r0, r3
 8101b62:	370c      	adds	r7, #12
 8101b64:	46bd      	mov	sp, r7
 8101b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b6a:	4770      	bx	lr

08101b6c <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8101b6c:	b5b0      	push	{r4, r5, r7, lr}
 8101b6e:	b08c      	sub	sp, #48	@ 0x30
 8101b70:	af00      	add	r7, sp, #0
 8101b72:	60f8      	str	r0, [r7, #12]
 8101b74:	60b9      	str	r1, [r7, #8]
 8101b76:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8101b78:	4a5e      	ldr	r2, [pc, #376]	@ (8101cf4 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 8101b7a:	2101      	movs	r1, #1
 8101b7c:	68f8      	ldr	r0, [r7, #12]
 8101b7e:	f000 fb99 	bl	81022b4 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>
 8101b82:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8101b84:	68fb      	ldr	r3, [r7, #12]
 8101b86:	681b      	ldr	r3, [r3, #0]
 8101b88:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8101b8a:	68fb      	ldr	r3, [r7, #12]
 8101b8c:	685b      	ldr	r3, [r3, #4]
 8101b8e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8101b90:	68f8      	ldr	r0, [r7, #12]
 8101b92:	f7ff fda5 	bl	81016e0 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 8101b96:	4603      	mov	r3, r0
 8101b98:	617b      	str	r3, [r7, #20]
 8101b9a:	f107 0214 	add.w	r2, r7, #20
 8101b9e:	f107 0308 	add.w	r3, r7, #8
 8101ba2:	4611      	mov	r1, r2
 8101ba4:	4618      	mov	r0, r3
 8101ba6:	f000 fbcd 	bl	8102344 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8101baa:	4603      	mov	r3, r0
 8101bac:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8101bae:	68fb      	ldr	r3, [r7, #12]
 8101bb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8101bb2:	4618      	mov	r0, r3
 8101bb4:	f000 fbe0 	bl	8102378 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>
 8101bb8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8101bba:	69bb      	ldr	r3, [r7, #24]
 8101bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8101bbe:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8101bc0:	69fa      	ldr	r2, [r7, #28]
 8101bc2:	4613      	mov	r3, r2
 8101bc4:	005b      	lsls	r3, r3, #1
 8101bc6:	4413      	add	r3, r2
 8101bc8:	00db      	lsls	r3, r3, #3
 8101bca:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8101bcc:	69bb      	ldr	r3, [r7, #24]
 8101bce:	189d      	adds	r5, r3, r2
 8101bd0:	6878      	ldr	r0, [r7, #4]
 8101bd2:	f000 fb49 	bl	8102268 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8101bd6:	4603      	mov	r3, r0
 8101bd8:	461a      	mov	r2, r3
 8101bda:	4629      	mov	r1, r5
 8101bdc:	4620      	mov	r0, r4
 8101bde:	f7ff ff9c 	bl	8101b1a <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8101be2:	2300      	movs	r3, #0
 8101be4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8101be6:	f7ff ffab 	bl	8101b40 <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8101bea:	4603      	mov	r3, r0
 8101bec:	2b00      	cmp	r3, #0
 8101bee:	d027      	beq.n	8101c40 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8101bf0:	f107 0308 	add.w	r3, r7, #8
 8101bf4:	4618      	mov	r0, r3
 8101bf6:	f000 f891 	bl	8101d1c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101bfa:	4603      	mov	r3, r0
 8101bfc:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8101bfe:	68fb      	ldr	r3, [r7, #12]
 8101c00:	4618      	mov	r0, r3
 8101c02:	f7ff ff33 	bl	8101a6c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101c06:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8101c08:	69ba      	ldr	r2, [r7, #24]
 8101c0a:	4621      	mov	r1, r4
 8101c0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101c0e:	f000 fbc7 	bl	81023a0 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8101c12:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8101c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101c16:	3318      	adds	r3, #24
 8101c18:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8101c1a:	f107 0308 	add.w	r3, r7, #8
 8101c1e:	4618      	mov	r0, r3
 8101c20:	f000 f87c 	bl	8101d1c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101c24:	4603      	mov	r3, r0
 8101c26:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8101c28:	68fb      	ldr	r3, [r7, #12]
 8101c2a:	4618      	mov	r0, r3
 8101c2c:	f7ff ff1e 	bl	8101a6c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101c30:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8101c32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101c34:	6a39      	ldr	r1, [r7, #32]
 8101c36:	4620      	mov	r0, r4
 8101c38:	f000 fbb2 	bl	81023a0 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8101c3c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8101c3e:	e026      	b.n	8101c8e <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8101c40:	f107 0308 	add.w	r3, r7, #8
 8101c44:	4618      	mov	r0, r3
 8101c46:	f000 f869 	bl	8101d1c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101c4a:	4603      	mov	r3, r0
 8101c4c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8101c4e:	68fb      	ldr	r3, [r7, #12]
 8101c50:	4618      	mov	r0, r3
 8101c52:	f7ff ff0b 	bl	8101a6c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101c56:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8101c58:	69ba      	ldr	r2, [r7, #24]
 8101c5a:	4621      	mov	r1, r4
 8101c5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101c5e:	f000 fbb3 	bl	81023c8 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8101c62:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8101c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101c66:	3318      	adds	r3, #24
 8101c68:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8101c6a:	f107 0308 	add.w	r3, r7, #8
 8101c6e:	4618      	mov	r0, r3
 8101c70:	f000 f854 	bl	8101d1c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101c74:	4603      	mov	r3, r0
 8101c76:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8101c78:	68fb      	ldr	r3, [r7, #12]
 8101c7a:	4618      	mov	r0, r3
 8101c7c:	f7ff fef6 	bl	8101a6c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101c80:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8101c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101c84:	6a39      	ldr	r1, [r7, #32]
 8101c86:	4620      	mov	r0, r4
 8101c88:	f000 fb9e 	bl	81023c8 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8101c8c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8101c8e:	f7ff ff57 	bl	8101b40 <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8101c92:	4603      	mov	r3, r0
 8101c94:	f083 0301 	eor.w	r3, r3, #1
 8101c98:	b2db      	uxtb	r3, r3
 8101c9a:	2b00      	cmp	r3, #0
 8101c9c:	d009      	beq.n	8101cb2 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8101c9e:	68fb      	ldr	r3, [r7, #12]
 8101ca0:	4618      	mov	r0, r3
 8101ca2:	f7ff fee3 	bl	8101a6c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101ca6:	4603      	mov	r3, r0
 8101ca8:	461a      	mov	r2, r3
 8101caa:	6a39      	ldr	r1, [r7, #32]
 8101cac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101cae:	f7ff fee8 	bl	8101a82 <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8101cb2:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8101cb4:	68fb      	ldr	r3, [r7, #12]
 8101cb6:	689a      	ldr	r2, [r3, #8]
 8101cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101cba:	1ad3      	subs	r3, r2, r3
 8101cbc:	10db      	asrs	r3, r3, #3
 8101cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8101cf8 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 8101cc0:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8101cc4:	461a      	mov	r2, r3
 8101cc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8101cc8:	f7ff ff14 	bl	8101af4 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8101ccc:	68fb      	ldr	r3, [r7, #12]
 8101cce:	69ba      	ldr	r2, [r7, #24]
 8101cd0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8101cd2:	68fb      	ldr	r3, [r7, #12]
 8101cd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101cd6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8101cd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8101cda:	4613      	mov	r3, r2
 8101cdc:	005b      	lsls	r3, r3, #1
 8101cde:	4413      	add	r3, r2
 8101ce0:	00db      	lsls	r3, r3, #3
 8101ce2:	461a      	mov	r2, r3
 8101ce4:	69bb      	ldr	r3, [r7, #24]
 8101ce6:	441a      	add	r2, r3
 8101ce8:	68fb      	ldr	r3, [r7, #12]
 8101cea:	609a      	str	r2, [r3, #8]
    }
 8101cec:	bf00      	nop
 8101cee:	3730      	adds	r7, #48	@ 0x30
 8101cf0:	46bd      	mov	sp, r7
 8101cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8101cf4:	08116b40 	.word	0x08116b40
 8101cf8:	aaaaaaab 	.word	0xaaaaaaab

08101cfc <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8101cfc:	b480      	push	{r7}
 8101cfe:	b083      	sub	sp, #12
 8101d00:	af00      	add	r7, sp, #0
 8101d02:	6078      	str	r0, [r7, #4]
 8101d04:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8101d06:	683b      	ldr	r3, [r7, #0]
 8101d08:	681a      	ldr	r2, [r3, #0]
 8101d0a:	687b      	ldr	r3, [r7, #4]
 8101d0c:	601a      	str	r2, [r3, #0]
 8101d0e:	687b      	ldr	r3, [r7, #4]
 8101d10:	4618      	mov	r0, r3
 8101d12:	370c      	adds	r7, #12
 8101d14:	46bd      	mov	sp, r7
 8101d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d1a:	4770      	bx	lr

08101d1c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8101d1c:	b480      	push	{r7}
 8101d1e:	b083      	sub	sp, #12
 8101d20:	af00      	add	r7, sp, #0
 8101d22:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8101d24:	687b      	ldr	r3, [r7, #4]
 8101d26:	4618      	mov	r0, r3
 8101d28:	370c      	adds	r7, #12
 8101d2a:	46bd      	mov	sp, r7
 8101d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d30:	4770      	bx	lr

08101d32 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8101d32:	b480      	push	{r7}
 8101d34:	b083      	sub	sp, #12
 8101d36:	af00      	add	r7, sp, #0
 8101d38:	6078      	str	r0, [r7, #4]
 8101d3a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8101d3c:	683b      	ldr	r3, [r7, #0]
 8101d3e:	681a      	ldr	r2, [r3, #0]
 8101d40:	687b      	ldr	r3, [r7, #4]
 8101d42:	601a      	str	r2, [r3, #0]
 8101d44:	687b      	ldr	r3, [r7, #4]
 8101d46:	4618      	mov	r0, r3
 8101d48:	370c      	adds	r7, #12
 8101d4a:	46bd      	mov	sp, r7
 8101d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d50:	4770      	bx	lr

08101d52 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8101d52:	b480      	push	{r7}
 8101d54:	b083      	sub	sp, #12
 8101d56:	af00      	add	r7, sp, #0
 8101d58:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8101d5a:	687b      	ldr	r3, [r7, #4]
 8101d5c:	4618      	mov	r0, r3
 8101d5e:	370c      	adds	r7, #12
 8101d60:	46bd      	mov	sp, r7
 8101d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d66:	4770      	bx	lr

08101d68 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101d68:	b590      	push	{r4, r7, lr}
 8101d6a:	b085      	sub	sp, #20
 8101d6c:	af00      	add	r7, sp, #0
 8101d6e:	6078      	str	r0, [r7, #4]
 8101d70:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8101d72:	6878      	ldr	r0, [r7, #4]
 8101d74:	f7ff fe03 	bl	810197e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8101d78:	4604      	mov	r4, r0
 8101d7a:	6878      	ldr	r0, [r7, #4]
 8101d7c:	f000 fb3d 	bl	81023fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8101d80:	4602      	mov	r2, r0
 8101d82:	683b      	ldr	r3, [r7, #0]
 8101d84:	4621      	mov	r1, r4
 8101d86:	6878      	ldr	r0, [r7, #4]
 8101d88:	f000 fb43 	bl	8102412 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8101d8c:	4603      	mov	r3, r0
 8101d8e:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8101d90:	6878      	ldr	r0, [r7, #4]
 8101d92:	f000 f825 	bl	8101de0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8101d96:	4603      	mov	r3, r0
 8101d98:	60fb      	str	r3, [r7, #12]
 8101d9a:	f107 020c 	add.w	r2, r7, #12
 8101d9e:	f107 0308 	add.w	r3, r7, #8
 8101da2:	4611      	mov	r1, r2
 8101da4:	4618      	mov	r0, r3
 8101da6:	f000 f83b 	bl	8101e20 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101daa:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8101dac:	2b00      	cmp	r3, #0
 8101dae:	d10d      	bne.n	8101dcc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x64>
	      || _M_impl._M_key_compare(__k,
 8101db0:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8101db2:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8101db4:	4618      	mov	r0, r3
 8101db6:	f000 fb5d 	bl	8102474 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8101dba:	4603      	mov	r3, r0
 8101dbc:	461a      	mov	r2, r3
 8101dbe:	6839      	ldr	r1, [r7, #0]
 8101dc0:	4620      	mov	r0, r4
 8101dc2:	f000 f85c 	bl	8101e7e <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101dc6:	4603      	mov	r3, r0
 8101dc8:	2b00      	cmp	r3, #0
 8101dca:	d004      	beq.n	8101dd6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8101dcc:	6878      	ldr	r0, [r7, #4]
 8101dce:	f000 f807 	bl	8101de0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8101dd2:	4603      	mov	r3, r0
 8101dd4:	e000      	b.n	8101dd8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x70>
 8101dd6:	68bb      	ldr	r3, [r7, #8]
    }
 8101dd8:	4618      	mov	r0, r3
 8101dda:	3714      	adds	r7, #20
 8101ddc:	46bd      	mov	sp, r7
 8101dde:	bd90      	pop	{r4, r7, pc}

08101de0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8101de0:	b580      	push	{r7, lr}
 8101de2:	b084      	sub	sp, #16
 8101de4:	af00      	add	r7, sp, #0
 8101de6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8101de8:	687b      	ldr	r3, [r7, #4]
 8101dea:	1d1a      	adds	r2, r3, #4
 8101dec:	f107 030c 	add.w	r3, r7, #12
 8101df0:	4611      	mov	r1, r2
 8101df2:	4618      	mov	r0, r3
 8101df4:	f000 f9f6 	bl	81021e4 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8101df8:	68fb      	ldr	r3, [r7, #12]
 8101dfa:	4618      	mov	r0, r3
 8101dfc:	3710      	adds	r7, #16
 8101dfe:	46bd      	mov	sp, r7
 8101e00:	bd80      	pop	{r7, pc}

08101e02 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8101e02:	b580      	push	{r7, lr}
 8101e04:	b082      	sub	sp, #8
 8101e06:	af00      	add	r7, sp, #0
 8101e08:	6078      	str	r0, [r7, #4]
 8101e0a:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	6839      	ldr	r1, [r7, #0]
 8101e10:	4618      	mov	r0, r3
 8101e12:	f000 fb3b 	bl	810248c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8101e16:	4603      	mov	r3, r0
 8101e18:	4618      	mov	r0, r3
 8101e1a:	3708      	adds	r7, #8
 8101e1c:	46bd      	mov	sp, r7
 8101e1e:	bd80      	pop	{r7, pc}

08101e20 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8101e20:	b480      	push	{r7}
 8101e22:	b083      	sub	sp, #12
 8101e24:	af00      	add	r7, sp, #0
 8101e26:	6078      	str	r0, [r7, #4]
 8101e28:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8101e2a:	687b      	ldr	r3, [r7, #4]
 8101e2c:	681a      	ldr	r2, [r3, #0]
 8101e2e:	683b      	ldr	r3, [r7, #0]
 8101e30:	681b      	ldr	r3, [r3, #0]
 8101e32:	429a      	cmp	r2, r3
 8101e34:	bf0c      	ite	eq
 8101e36:	2301      	moveq	r3, #1
 8101e38:	2300      	movne	r3, #0
 8101e3a:	b2db      	uxtb	r3, r3
 8101e3c:	4618      	mov	r0, r3
 8101e3e:	370c      	adds	r7, #12
 8101e40:	46bd      	mov	sp, r7
 8101e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e46:	4770      	bx	lr

08101e48 <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8101e48:	b590      	push	{r4, r7, lr}
 8101e4a:	b083      	sub	sp, #12
 8101e4c:	af00      	add	r7, sp, #0
 8101e4e:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8101e50:	687b      	ldr	r3, [r7, #4]
 8101e52:	4618      	mov	r0, r3
 8101e54:	f000 fb31 	bl	81024ba <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8101e58:	bf00      	nop
 8101e5a:	4620      	mov	r0, r4
 8101e5c:	370c      	adds	r7, #12
 8101e5e:	46bd      	mov	sp, r7
 8101e60:	bd90      	pop	{r4, r7, pc}

08101e62 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8101e62:	b580      	push	{r7, lr}
 8101e64:	b082      	sub	sp, #8
 8101e66:	af00      	add	r7, sp, #0
 8101e68:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	681b      	ldr	r3, [r3, #0]
 8101e6e:	4618      	mov	r0, r3
 8101e70:	f000 fb2e 	bl	81024d0 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8101e74:	4603      	mov	r3, r0
 8101e76:	4618      	mov	r0, r3
 8101e78:	3708      	adds	r7, #8
 8101e7a:	46bd      	mov	sp, r7
 8101e7c:	bd80      	pop	{r7, pc}

08101e7e <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8101e7e:	b480      	push	{r7}
 8101e80:	b085      	sub	sp, #20
 8101e82:	af00      	add	r7, sp, #0
 8101e84:	60f8      	str	r0, [r7, #12]
 8101e86:	60b9      	str	r1, [r7, #8]
 8101e88:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8101e8a:	68bb      	ldr	r3, [r7, #8]
 8101e8c:	781a      	ldrb	r2, [r3, #0]
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	781b      	ldrb	r3, [r3, #0]
 8101e92:	429a      	cmp	r2, r3
 8101e94:	bf34      	ite	cc
 8101e96:	2301      	movcc	r3, #1
 8101e98:	2300      	movcs	r3, #0
 8101e9a:	b2db      	uxtb	r3, r3
 8101e9c:	4618      	mov	r0, r3
 8101e9e:	3714      	adds	r7, #20
 8101ea0:	46bd      	mov	sp, r7
 8101ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ea6:	4770      	bx	lr

08101ea8 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8101ea8:	b580      	push	{r7, lr}
 8101eaa:	b082      	sub	sp, #8
 8101eac:	af00      	add	r7, sp, #0
 8101eae:	6078      	str	r0, [r7, #4]
 8101eb0:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	6839      	ldr	r1, [r7, #0]
 8101eb6:	4618      	mov	r0, r3
 8101eb8:	f000 fb18 	bl	81024ec <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>
 8101ebc:	687b      	ldr	r3, [r7, #4]
 8101ebe:	4618      	mov	r0, r3
 8101ec0:	3708      	adds	r7, #8
 8101ec2:	46bd      	mov	sp, r7
 8101ec4:	bd80      	pop	{r7, pc}

08101ec6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8101ec6:	b480      	push	{r7}
 8101ec8:	b083      	sub	sp, #12
 8101eca:	af00      	add	r7, sp, #0
 8101ecc:	6078      	str	r0, [r7, #4]
 8101ece:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8101ed0:	683b      	ldr	r3, [r7, #0]
 8101ed2:	681a      	ldr	r2, [r3, #0]
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	601a      	str	r2, [r3, #0]
 8101ed8:	687b      	ldr	r3, [r7, #4]
 8101eda:	4618      	mov	r0, r3
 8101edc:	370c      	adds	r7, #12
 8101ede:	46bd      	mov	sp, r7
 8101ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ee4:	4770      	bx	lr

08101ee6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101ee6:	b5b0      	push	{r4, r5, r7, lr}
 8101ee8:	b08c      	sub	sp, #48	@ 0x30
 8101eea:	af02      	add	r7, sp, #8
 8101eec:	60f8      	str	r0, [r7, #12]
 8101eee:	60b9      	str	r1, [r7, #8]
 8101ef0:	607a      	str	r2, [r7, #4]
 8101ef2:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8101ef4:	6878      	ldr	r0, [r7, #4]
 8101ef6:	f000 fb08 	bl	810250a <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8101efa:	4604      	mov	r4, r0
 8101efc:	6838      	ldr	r0, [r7, #0]
 8101efe:	f000 fb0f 	bl	8102520 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8101f02:	4605      	mov	r5, r0
 8101f04:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101f06:	f000 fb16 	bl	8102536 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8101f0a:	4603      	mov	r3, r0
 8101f0c:	f107 001c 	add.w	r0, r7, #28
 8101f10:	9300      	str	r3, [sp, #0]
 8101f12:	462b      	mov	r3, r5
 8101f14:	4622      	mov	r2, r4
 8101f16:	68f9      	ldr	r1, [r7, #12]
 8101f18:	f000 fb18 	bl	810254c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8101f1c:	f107 031c 	add.w	r3, r7, #28
 8101f20:	4618      	mov	r0, r3
 8101f22:	f000 f91f 	bl	8102164 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8101f26:	4603      	mov	r3, r0
 8101f28:	f107 0014 	add.w	r0, r7, #20
 8101f2c:	68ba      	ldr	r2, [r7, #8]
 8101f2e:	68f9      	ldr	r1, [r7, #12]
 8101f30:	f000 fb2f 	bl	8102592 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8101f34:	69bb      	ldr	r3, [r7, #24]
 8101f36:	2b00      	cmp	r3, #0
 8101f38:	d009      	beq.n	8101f4e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8101f3a:	f107 001c 	add.w	r0, r7, #28
 8101f3e:	f107 0314 	add.w	r3, r7, #20
 8101f42:	e893 0006 	ldmia.w	r3, {r1, r2}
 8101f46:	f000 f91b 	bl	8102180 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8101f4a:	4604      	mov	r4, r0
 8101f4c:	e007      	b.n	8101f5e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8101f4e:	697a      	ldr	r2, [r7, #20]
 8101f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101f54:	4611      	mov	r1, r2
 8101f56:	4618      	mov	r0, r3
 8101f58:	f000 f944 	bl	81021e4 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8101f5c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8101f5e:	f107 031c 	add.w	r3, r7, #28
 8101f62:	4618      	mov	r0, r3
 8101f64:	f000 f864 	bl	8102030 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8101f68:	4623      	mov	r3, r4
 8101f6a:	4618      	mov	r0, r3
 8101f6c:	3728      	adds	r7, #40	@ 0x28
 8101f6e:	46bd      	mov	sp, r7
 8101f70:	bdb0      	pop	{r4, r5, r7, pc}

08101f72 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8101f72:	b480      	push	{r7}
 8101f74:	b083      	sub	sp, #12
 8101f76:	af00      	add	r7, sp, #0
 8101f78:	6078      	str	r0, [r7, #4]
 8101f7a:	687b      	ldr	r3, [r7, #4]
 8101f7c:	4618      	mov	r0, r3
 8101f7e:	370c      	adds	r7, #12
 8101f80:	46bd      	mov	sp, r7
 8101f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f86:	4770      	bx	lr

08101f88 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8101f88:	b480      	push	{r7}
 8101f8a:	b083      	sub	sp, #12
 8101f8c:	af00      	add	r7, sp, #0
 8101f8e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8101f90:	687b      	ldr	r3, [r7, #4]
 8101f92:	68db      	ldr	r3, [r3, #12]
 8101f94:	4618      	mov	r0, r3
 8101f96:	370c      	adds	r7, #12
 8101f98:	46bd      	mov	sp, r7
 8101f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f9e:	4770      	bx	lr

08101fa0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8101fa0:	b480      	push	{r7}
 8101fa2:	b083      	sub	sp, #12
 8101fa4:	af00      	add	r7, sp, #0
 8101fa6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	689b      	ldr	r3, [r3, #8]
 8101fac:	4618      	mov	r0, r3
 8101fae:	370c      	adds	r7, #12
 8101fb0:	46bd      	mov	sp, r7
 8101fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fb6:	4770      	bx	lr

08101fb8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8101fb8:	b580      	push	{r7, lr}
 8101fba:	b082      	sub	sp, #8
 8101fbc:	af00      	add	r7, sp, #0
 8101fbe:	6078      	str	r0, [r7, #4]
 8101fc0:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8101fc2:	6839      	ldr	r1, [r7, #0]
 8101fc4:	6878      	ldr	r0, [r7, #4]
 8101fc6:	f000 fc07 	bl	81027d8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8101fca:	6839      	ldr	r1, [r7, #0]
 8101fcc:	6878      	ldr	r0, [r7, #4]
 8101fce:	f000 fc18 	bl	8102802 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8101fd2:	bf00      	nop
 8101fd4:	3708      	adds	r7, #8
 8101fd6:	46bd      	mov	sp, r7
 8101fd8:	bd80      	pop	{r7, pc}

08101fda <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8101fda:	b480      	push	{r7}
 8101fdc:	b083      	sub	sp, #12
 8101fde:	af00      	add	r7, sp, #0
 8101fe0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8101fe2:	687b      	ldr	r3, [r7, #4]
 8101fe4:	689b      	ldr	r3, [r3, #8]
 8101fe6:	4618      	mov	r0, r3
 8101fe8:	370c      	adds	r7, #12
 8101fea:	46bd      	mov	sp, r7
 8101fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ff0:	4770      	bx	lr

08101ff2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8101ff2:	b590      	push	{r4, r7, lr}
 8101ff4:	b085      	sub	sp, #20
 8101ff6:	af00      	add	r7, sp, #0
 8101ff8:	60f8      	str	r0, [r7, #12]
 8101ffa:	60b9      	str	r1, [r7, #8]
 8101ffc:	607a      	str	r2, [r7, #4]
 8101ffe:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8102000:	68fb      	ldr	r3, [r7, #12]
 8102002:	68ba      	ldr	r2, [r7, #8]
 8102004:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8102006:	6878      	ldr	r0, [r7, #4]
 8102008:	f7ff fcc5 	bl	8101996 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810200c:	4604      	mov	r4, r0
 810200e:	6838      	ldr	r0, [r7, #0]
 8102010:	f7ff fccc 	bl	81019ac <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102014:	4603      	mov	r3, r0
 8102016:	461a      	mov	r2, r3
 8102018:	4621      	mov	r1, r4
 810201a:	68b8      	ldr	r0, [r7, #8]
 810201c:	f000 fc03 	bl	8102826 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8102020:	4602      	mov	r2, r0
 8102022:	68fb      	ldr	r3, [r7, #12]
 8102024:	605a      	str	r2, [r3, #4]
	  { }
 8102026:	68fb      	ldr	r3, [r7, #12]
 8102028:	4618      	mov	r0, r3
 810202a:	3714      	adds	r7, #20
 810202c:	46bd      	mov	sp, r7
 810202e:	bd90      	pop	{r4, r7, pc}

08102030 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 8102030:	b580      	push	{r7, lr}
 8102032:	b082      	sub	sp, #8
 8102034:	af00      	add	r7, sp, #0
 8102036:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 8102038:	687b      	ldr	r3, [r7, #4]
 810203a:	685b      	ldr	r3, [r3, #4]
 810203c:	2b00      	cmp	r3, #0
 810203e:	d007      	beq.n	8102050 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 8102040:	687b      	ldr	r3, [r7, #4]
 8102042:	681a      	ldr	r2, [r3, #0]
 8102044:	687b      	ldr	r3, [r7, #4]
 8102046:	685b      	ldr	r3, [r3, #4]
 8102048:	4619      	mov	r1, r3
 810204a:	4610      	mov	r0, r2
 810204c:	f7ff ffb4 	bl	8101fb8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	}
 8102050:	687b      	ldr	r3, [r7, #4]
 8102052:	4618      	mov	r0, r3
 8102054:	3708      	adds	r7, #8
 8102056:	46bd      	mov	sp, r7
 8102058:	bd80      	pop	{r7, pc}

0810205a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 810205a:	b590      	push	{r4, r7, lr}
 810205c:	b08b      	sub	sp, #44	@ 0x2c
 810205e:	af00      	add	r7, sp, #0
 8102060:	60f8      	str	r0, [r7, #12]
 8102062:	60b9      	str	r1, [r7, #8]
 8102064:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8102066:	68b8      	ldr	r0, [r7, #8]
 8102068:	f7ff fc89 	bl	810197e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 810206c:	4603      	mov	r3, r0
 810206e:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8102070:	68b8      	ldr	r0, [r7, #8]
 8102072:	f000 f9c2 	bl	81023fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102076:	4603      	mov	r3, r0
 8102078:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 810207a:	2301      	movs	r3, #1
 810207c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 8102080:	e01f      	b.n	81020c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x68>
	  __y = __x;
 8102082:	69bb      	ldr	r3, [r7, #24]
 8102084:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8102086:	68bc      	ldr	r4, [r7, #8]
 8102088:	69bb      	ldr	r3, [r7, #24]
 810208a:	4618      	mov	r0, r3
 810208c:	f000 fbe7 	bl	810285e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8102090:	4603      	mov	r3, r0
 8102092:	461a      	mov	r2, r3
 8102094:	6879      	ldr	r1, [r7, #4]
 8102096:	4620      	mov	r0, r4
 8102098:	f7ff fef1 	bl	8101e7e <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810209c:	4603      	mov	r3, r0
 810209e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 81020a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81020a6:	2b00      	cmp	r3, #0
 81020a8:	d005      	beq.n	81020b6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x5c>
 81020aa:	69bb      	ldr	r3, [r7, #24]
 81020ac:	4618      	mov	r0, r3
 81020ae:	f7ff ff77 	bl	8101fa0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 81020b2:	4603      	mov	r3, r0
 81020b4:	e004      	b.n	81020c0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 81020b6:	69bb      	ldr	r3, [r7, #24]
 81020b8:	4618      	mov	r0, r3
 81020ba:	f7ff ff65 	bl	8101f88 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81020be:	4603      	mov	r3, r0
 81020c0:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 81020c2:	69bb      	ldr	r3, [r7, #24]
 81020c4:	2b00      	cmp	r3, #0
 81020c6:	d1dc      	bne.n	8102082 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x28>
      iterator __j = iterator(__y);
 81020c8:	697a      	ldr	r2, [r7, #20]
 81020ca:	f107 0310 	add.w	r3, r7, #16
 81020ce:	4611      	mov	r1, r2
 81020d0:	4618      	mov	r0, r3
 81020d2:	f000 f887 	bl	81021e4 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 81020d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81020da:	2b00      	cmp	r3, #0
 81020dc:	d01d      	beq.n	810211a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 81020de:	68b8      	ldr	r0, [r7, #8]
 81020e0:	f000 fbd0 	bl	8102884 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 81020e4:	4603      	mov	r3, r0
 81020e6:	61fb      	str	r3, [r7, #28]
 81020e8:	f107 021c 	add.w	r2, r7, #28
 81020ec:	f107 0310 	add.w	r3, r7, #16
 81020f0:	4611      	mov	r1, r2
 81020f2:	4618      	mov	r0, r3
 81020f4:	f7ff fe94 	bl	8101e20 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 81020f8:	4603      	mov	r3, r0
 81020fa:	2b00      	cmp	r3, #0
 81020fc:	d008      	beq.n	8102110 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 81020fe:	f107 0214 	add.w	r2, r7, #20
 8102102:	f107 0318 	add.w	r3, r7, #24
 8102106:	4619      	mov	r1, r3
 8102108:	68f8      	ldr	r0, [r7, #12]
 810210a:	f000 fbcc 	bl	81028a6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 810210e:	e025      	b.n	810215c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 8102110:	f107 0310 	add.w	r3, r7, #16
 8102114:	4618      	mov	r0, r3
 8102116:	f000 fbdf 	bl	81028d8 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 810211a:	68bc      	ldr	r4, [r7, #8]
 810211c:	693b      	ldr	r3, [r7, #16]
 810211e:	4618      	mov	r0, r3
 8102120:	f000 f9a8 	bl	8102474 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102124:	4603      	mov	r3, r0
 8102126:	687a      	ldr	r2, [r7, #4]
 8102128:	4619      	mov	r1, r3
 810212a:	4620      	mov	r0, r4
 810212c:	f7ff fea7 	bl	8101e7e <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102130:	4603      	mov	r3, r0
 8102132:	2b00      	cmp	r3, #0
 8102134:	d008      	beq.n	8102148 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8102136:	f107 0214 	add.w	r2, r7, #20
 810213a:	f107 0318 	add.w	r3, r7, #24
 810213e:	4619      	mov	r1, r3
 8102140:	68f8      	ldr	r0, [r7, #12]
 8102142:	f000 fbb0 	bl	81028a6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 8102146:	e009      	b.n	810215c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8102148:	2300      	movs	r3, #0
 810214a:	623b      	str	r3, [r7, #32]
 810214c:	f107 0220 	add.w	r2, r7, #32
 8102150:	f107 0310 	add.w	r3, r7, #16
 8102154:	4619      	mov	r1, r3
 8102156:	68f8      	ldr	r0, [r7, #12]
 8102158:	f000 fbcf 	bl	81028fa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 810215c:	68f8      	ldr	r0, [r7, #12]
 810215e:	372c      	adds	r7, #44	@ 0x2c
 8102160:	46bd      	mov	sp, r7
 8102162:	bd90      	pop	{r4, r7, pc}

08102164 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 8102164:	b580      	push	{r7, lr}
 8102166:	b082      	sub	sp, #8
 8102168:	af00      	add	r7, sp, #0
 810216a:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 810216c:	687b      	ldr	r3, [r7, #4]
 810216e:	685b      	ldr	r3, [r3, #4]
 8102170:	4618      	mov	r0, r3
 8102172:	f000 fb74 	bl	810285e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8102176:	4603      	mov	r3, r0
 8102178:	4618      	mov	r0, r3
 810217a:	3708      	adds	r7, #8
 810217c:	46bd      	mov	sp, r7
 810217e:	bd80      	pop	{r7, pc}

08102180 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 8102180:	b580      	push	{r7, lr}
 8102182:	b086      	sub	sp, #24
 8102184:	af00      	add	r7, sp, #0
 8102186:	60f8      	str	r0, [r7, #12]
 8102188:	1d3b      	adds	r3, r7, #4
 810218a:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 810218e:	68fb      	ldr	r3, [r7, #12]
 8102190:	6818      	ldr	r0, [r3, #0]
 8102192:	6879      	ldr	r1, [r7, #4]
 8102194:	68ba      	ldr	r2, [r7, #8]
 8102196:	68fb      	ldr	r3, [r7, #12]
 8102198:	685b      	ldr	r3, [r3, #4]
 810219a:	f000 fbc3 	bl	8102924 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 810219e:	4603      	mov	r3, r0
 81021a0:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 81021a2:	68fb      	ldr	r3, [r7, #12]
 81021a4:	2200      	movs	r2, #0
 81021a6:	605a      	str	r2, [r3, #4]
	  return __it;
 81021a8:	697b      	ldr	r3, [r7, #20]
	}
 81021aa:	4618      	mov	r0, r3
 81021ac:	3718      	adds	r7, #24
 81021ae:	46bd      	mov	sp, r7
 81021b0:	bd80      	pop	{r7, pc}

081021b2 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 81021b2:	b580      	push	{r7, lr}
 81021b4:	b084      	sub	sp, #16
 81021b6:	af00      	add	r7, sp, #0
 81021b8:	60f8      	str	r0, [r7, #12]
 81021ba:	60b9      	str	r1, [r7, #8]
 81021bc:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 81021be:	68b8      	ldr	r0, [r7, #8]
 81021c0:	f000 fbed 	bl	810299e <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>
 81021c4:	4602      	mov	r2, r0
 81021c6:	68fb      	ldr	r3, [r7, #12]
 81021c8:	6812      	ldr	r2, [r2, #0]
 81021ca:	601a      	str	r2, [r3, #0]
 81021cc:	6878      	ldr	r0, [r7, #4]
 81021ce:	f000 fbf1 	bl	81029b4 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 81021d2:	4603      	mov	r3, r0
 81021d4:	781a      	ldrb	r2, [r3, #0]
 81021d6:	68fb      	ldr	r3, [r7, #12]
 81021d8:	711a      	strb	r2, [r3, #4]
 81021da:	68fb      	ldr	r3, [r7, #12]
 81021dc:	4618      	mov	r0, r3
 81021de:	3710      	adds	r7, #16
 81021e0:	46bd      	mov	sp, r7
 81021e2:	bd80      	pop	{r7, pc}

081021e4 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 81021e4:	b480      	push	{r7}
 81021e6:	b083      	sub	sp, #12
 81021e8:	af00      	add	r7, sp, #0
 81021ea:	6078      	str	r0, [r7, #4]
 81021ec:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 81021ee:	687b      	ldr	r3, [r7, #4]
 81021f0:	683a      	ldr	r2, [r7, #0]
 81021f2:	601a      	str	r2, [r3, #0]
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	4618      	mov	r0, r3
 81021f8:	370c      	adds	r7, #12
 81021fa:	46bd      	mov	sp, r7
 81021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102200:	4770      	bx	lr

08102202 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8102202:	b480      	push	{r7}
 8102204:	b083      	sub	sp, #12
 8102206:	af00      	add	r7, sp, #0
 8102208:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	695b      	ldr	r3, [r3, #20]
 810220e:	4618      	mov	r0, r3
 8102210:	370c      	adds	r7, #12
 8102212:	46bd      	mov	sp, r7
 8102214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102218:	4770      	bx	lr

0810221a <_ZSt8_DestroyIP8SMessageEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 810221a:	b580      	push	{r7, lr}
 810221c:	b082      	sub	sp, #8
 810221e:	af00      	add	r7, sp, #0
 8102220:	6078      	str	r0, [r7, #4]
 8102222:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8102224:	6839      	ldr	r1, [r7, #0]
 8102226:	6878      	ldr	r0, [r7, #4]
 8102228:	f000 fbcf 	bl	81029ca <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>
    }
 810222c:	bf00      	nop
 810222e:	3708      	adds	r7, #8
 8102230:	46bd      	mov	sp, r7
 8102232:	bd80      	pop	{r7, pc}

08102234 <_ZNSt15__new_allocatorI8SMessageEC1Ev>:
 8102234:	b480      	push	{r7}
 8102236:	b083      	sub	sp, #12
 8102238:	af00      	add	r7, sp, #0
 810223a:	6078      	str	r0, [r7, #4]
 810223c:	687b      	ldr	r3, [r7, #4]
 810223e:	4618      	mov	r0, r3
 8102240:	370c      	adds	r7, #12
 8102242:	46bd      	mov	sp, r7
 8102244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102248:	4770      	bx	lr

0810224a <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 810224a:	b580      	push	{r7, lr}
 810224c:	b084      	sub	sp, #16
 810224e:	af00      	add	r7, sp, #0
 8102250:	60f8      	str	r0, [r7, #12]
 8102252:	60b9      	str	r1, [r7, #8]
 8102254:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8102256:	687a      	ldr	r2, [r7, #4]
 8102258:	68b9      	ldr	r1, [r7, #8]
 810225a:	68f8      	ldr	r0, [r7, #12]
 810225c:	f000 fbc0 	bl	81029e0 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>
 8102260:	bf00      	nop
 8102262:	3710      	adds	r7, #16
 8102264:	46bd      	mov	sp, r7
 8102266:	bd80      	pop	{r7, pc}

08102268 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102268:	b480      	push	{r7}
 810226a:	b083      	sub	sp, #12
 810226c:	af00      	add	r7, sp, #0
 810226e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	4618      	mov	r0, r3
 8102274:	370c      	adds	r7, #12
 8102276:	46bd      	mov	sp, r7
 8102278:	f85d 7b04 	ldr.w	r7, [sp], #4
 810227c:	4770      	bx	lr

0810227e <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 810227e:	b5b0      	push	{r4, r5, r7, lr}
 8102280:	b084      	sub	sp, #16
 8102282:	af00      	add	r7, sp, #0
 8102284:	60f8      	str	r0, [r7, #12]
 8102286:	60b9      	str	r1, [r7, #8]
 8102288:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 810228a:	68bb      	ldr	r3, [r7, #8]
 810228c:	4619      	mov	r1, r3
 810228e:	2018      	movs	r0, #24
 8102290:	f7fe fc7d 	bl	8100b8e <_ZnwjPv>
 8102294:	4604      	mov	r4, r0
 8102296:	6878      	ldr	r0, [r7, #4]
 8102298:	f7ff ffe6 	bl	8102268 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 810229c:	4603      	mov	r3, r0
 810229e:	461d      	mov	r5, r3
 81022a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81022a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81022a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 81022a8:	e884 0003 	stmia.w	r4, {r0, r1}
 81022ac:	bf00      	nop
 81022ae:	3710      	adds	r7, #16
 81022b0:	46bd      	mov	sp, r7
 81022b2:	bdb0      	pop	{r4, r5, r7, pc}

081022b4 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 81022b4:	b590      	push	{r4, r7, lr}
 81022b6:	b087      	sub	sp, #28
 81022b8:	af00      	add	r7, sp, #0
 81022ba:	60f8      	str	r0, [r7, #12]
 81022bc:	60b9      	str	r1, [r7, #8]
 81022be:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 81022c0:	68f8      	ldr	r0, [r7, #12]
 81022c2:	f000 fba0 	bl	8102a06 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81022c6:	4604      	mov	r4, r0
 81022c8:	68f8      	ldr	r0, [r7, #12]
 81022ca:	f7ff f9f3 	bl	81016b4 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81022ce:	4603      	mov	r3, r0
 81022d0:	1ae2      	subs	r2, r4, r3
 81022d2:	68bb      	ldr	r3, [r7, #8]
 81022d4:	429a      	cmp	r2, r3
 81022d6:	bf34      	ite	cc
 81022d8:	2301      	movcc	r3, #1
 81022da:	2300      	movcs	r3, #0
 81022dc:	b2db      	uxtb	r3, r3
 81022de:	2b00      	cmp	r3, #0
 81022e0:	d002      	beq.n	81022e8 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 81022e2:	6878      	ldr	r0, [r7, #4]
 81022e4:	f013 fb76 	bl	81159d4 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 81022e8:	68f8      	ldr	r0, [r7, #12]
 81022ea:	f7ff f9e3 	bl	81016b4 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81022ee:	4604      	mov	r4, r0
 81022f0:	68f8      	ldr	r0, [r7, #12]
 81022f2:	f7ff f9df 	bl	81016b4 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81022f6:	4603      	mov	r3, r0
 81022f8:	613b      	str	r3, [r7, #16]
 81022fa:	f107 0208 	add.w	r2, r7, #8
 81022fe:	f107 0310 	add.w	r3, r7, #16
 8102302:	4611      	mov	r1, r2
 8102304:	4618      	mov	r0, r3
 8102306:	f000 fb8f 	bl	8102a28 <_ZSt3maxIjERKT_S2_S2_>
 810230a:	4603      	mov	r3, r0
 810230c:	681b      	ldr	r3, [r3, #0]
 810230e:	4423      	add	r3, r4
 8102310:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8102312:	68f8      	ldr	r0, [r7, #12]
 8102314:	f7ff f9ce 	bl	81016b4 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8102318:	4602      	mov	r2, r0
 810231a:	697b      	ldr	r3, [r7, #20]
 810231c:	4293      	cmp	r3, r2
 810231e:	d306      	bcc.n	810232e <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8102320:	68f8      	ldr	r0, [r7, #12]
 8102322:	f000 fb70 	bl	8102a06 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 8102326:	4602      	mov	r2, r0
 8102328:	697b      	ldr	r3, [r7, #20]
 810232a:	4293      	cmp	r3, r2
 810232c:	d904      	bls.n	8102338 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x84>
 810232e:	68f8      	ldr	r0, [r7, #12]
 8102330:	f000 fb69 	bl	8102a06 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 8102334:	4603      	mov	r3, r0
 8102336:	e000      	b.n	810233a <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x86>
 8102338:	697b      	ldr	r3, [r7, #20]
      }
 810233a:	4618      	mov	r0, r3
 810233c:	371c      	adds	r7, #28
 810233e:	46bd      	mov	sp, r7
 8102340:	bd90      	pop	{r4, r7, pc}
	...

08102344 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8102344:	b590      	push	{r4, r7, lr}
 8102346:	b083      	sub	sp, #12
 8102348:	af00      	add	r7, sp, #0
 810234a:	6078      	str	r0, [r7, #4]
 810234c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 810234e:	6878      	ldr	r0, [r7, #4]
 8102350:	f7ff fce4 	bl	8101d1c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8102354:	4603      	mov	r3, r0
 8102356:	681c      	ldr	r4, [r3, #0]
 8102358:	6838      	ldr	r0, [r7, #0]
 810235a:	f7ff fcdf 	bl	8101d1c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 810235e:	4603      	mov	r3, r0
 8102360:	681b      	ldr	r3, [r3, #0]
 8102362:	1ae3      	subs	r3, r4, r3
 8102364:	10db      	asrs	r3, r3, #3
 8102366:	4a03      	ldr	r2, [pc, #12]	@ (8102374 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8102368:	fb02 f303 	mul.w	r3, r2, r3
 810236c:	4618      	mov	r0, r3
 810236e:	370c      	adds	r7, #12
 8102370:	46bd      	mov	sp, r7
 8102372:	bd90      	pop	{r4, r7, pc}
 8102374:	aaaaaaab 	.word	0xaaaaaaab

08102378 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8102378:	b580      	push	{r7, lr}
 810237a:	b082      	sub	sp, #8
 810237c:	af00      	add	r7, sp, #0
 810237e:	6078      	str	r0, [r7, #4]
 8102380:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8102382:	683b      	ldr	r3, [r7, #0]
 8102384:	2b00      	cmp	r3, #0
 8102386:	d006      	beq.n	8102396 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x1e>
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	6839      	ldr	r1, [r7, #0]
 810238c:	4618      	mov	r0, r3
 810238e:	f000 fb5f 	bl	8102a50 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>
 8102392:	4603      	mov	r3, r0
 8102394:	e000      	b.n	8102398 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x20>
 8102396:	2300      	movs	r3, #0
      }
 8102398:	4618      	mov	r0, r3
 810239a:	3708      	adds	r7, #8
 810239c:	46bd      	mov	sp, r7
 810239e:	bd80      	pop	{r7, pc}

081023a0 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 81023a0:	b590      	push	{r4, r7, lr}
 81023a2:	b087      	sub	sp, #28
 81023a4:	af02      	add	r7, sp, #8
 81023a6:	60f8      	str	r0, [r7, #12]
 81023a8:	60b9      	str	r1, [r7, #8]
 81023aa:	607a      	str	r2, [r7, #4]
 81023ac:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 81023ae:	f88d 4000 	strb.w	r4, [sp]
 81023b2:	683b      	ldr	r3, [r7, #0]
 81023b4:	687a      	ldr	r2, [r7, #4]
 81023b6:	68b9      	ldr	r1, [r7, #8]
 81023b8:	68f8      	ldr	r0, [r7, #12]
 81023ba:	f000 fb58 	bl	8102a6e <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 81023be:	4603      	mov	r3, r0
      }
 81023c0:	4618      	mov	r0, r3
 81023c2:	3714      	adds	r7, #20
 81023c4:	46bd      	mov	sp, r7
 81023c6:	bd90      	pop	{r4, r7, pc}

081023c8 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 81023c8:	b590      	push	{r4, r7, lr}
 81023ca:	b085      	sub	sp, #20
 81023cc:	af00      	add	r7, sp, #0
 81023ce:	60f8      	str	r0, [r7, #12]
 81023d0:	60b9      	str	r1, [r7, #8]
 81023d2:	607a      	str	r2, [r7, #4]
 81023d4:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 81023d6:	68f8      	ldr	r0, [r7, #12]
 81023d8:	f000 fb5b 	bl	8102a92 <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 81023dc:	4604      	mov	r4, r0
 81023de:	68b8      	ldr	r0, [r7, #8]
 81023e0:	f000 fb57 	bl	8102a92 <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 81023e4:	4601      	mov	r1, r0
 81023e6:	683b      	ldr	r3, [r7, #0]
 81023e8:	687a      	ldr	r2, [r7, #4]
 81023ea:	4620      	mov	r0, r4
 81023ec:	f000 fb60 	bl	8102ab0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>
 81023f0:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 81023f2:	4618      	mov	r0, r3
 81023f4:	3714      	adds	r7, #20
 81023f6:	46bd      	mov	sp, r7
 81023f8:	bd90      	pop	{r4, r7, pc}

081023fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 81023fa:	b480      	push	{r7}
 81023fc:	b083      	sub	sp, #12
 81023fe:	af00      	add	r7, sp, #0
 8102400:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	3304      	adds	r3, #4
 8102406:	4618      	mov	r0, r3
 8102408:	370c      	adds	r7, #12
 810240a:	46bd      	mov	sp, r7
 810240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102410:	4770      	bx	lr

08102412 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102412:	b590      	push	{r4, r7, lr}
 8102414:	b087      	sub	sp, #28
 8102416:	af00      	add	r7, sp, #0
 8102418:	60f8      	str	r0, [r7, #12]
 810241a:	60b9      	str	r1, [r7, #8]
 810241c:	607a      	str	r2, [r7, #4]
 810241e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8102420:	e01a      	b.n	8102458 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8102422:	68fc      	ldr	r4, [r7, #12]
 8102424:	68b8      	ldr	r0, [r7, #8]
 8102426:	f000 fa1a 	bl	810285e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 810242a:	4603      	mov	r3, r0
 810242c:	683a      	ldr	r2, [r7, #0]
 810242e:	4619      	mov	r1, r3
 8102430:	4620      	mov	r0, r4
 8102432:	f7ff fd24 	bl	8101e7e <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102436:	4603      	mov	r3, r0
 8102438:	f083 0301 	eor.w	r3, r3, #1
 810243c:	b2db      	uxtb	r3, r3
 810243e:	2b00      	cmp	r3, #0
 8102440:	d006      	beq.n	8102450 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x3e>
	  __y = __x, __x = _S_left(__x);
 8102442:	68bb      	ldr	r3, [r7, #8]
 8102444:	607b      	str	r3, [r7, #4]
 8102446:	68b8      	ldr	r0, [r7, #8]
 8102448:	f7ff fdaa 	bl	8101fa0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 810244c:	60b8      	str	r0, [r7, #8]
 810244e:	e003      	b.n	8102458 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __x = _S_right(__x);
 8102450:	68b8      	ldr	r0, [r7, #8]
 8102452:	f7ff fd99 	bl	8101f88 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8102456:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8102458:	68bb      	ldr	r3, [r7, #8]
 810245a:	2b00      	cmp	r3, #0
 810245c:	d1e1      	bne.n	8102422 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x10>
      return iterator(__y);
 810245e:	f107 0314 	add.w	r3, r7, #20
 8102462:	6879      	ldr	r1, [r7, #4]
 8102464:	4618      	mov	r0, r3
 8102466:	f7ff febd 	bl	81021e4 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 810246a:	697b      	ldr	r3, [r7, #20]
    }
 810246c:	4618      	mov	r0, r3
 810246e:	371c      	adds	r7, #28
 8102470:	46bd      	mov	sp, r7
 8102472:	bd90      	pop	{r4, r7, pc}

08102474 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8102474:	b580      	push	{r7, lr}
 8102476:	b082      	sub	sp, #8
 8102478:	af00      	add	r7, sp, #0
 810247a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 810247c:	6878      	ldr	r0, [r7, #4]
 810247e:	f000 f9ee 	bl	810285e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8102482:	4603      	mov	r3, r0
 8102484:	4618      	mov	r0, r3
 8102486:	3708      	adds	r7, #8
 8102488:	46bd      	mov	sp, r7
 810248a:	bd80      	pop	{r7, pc}

0810248c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 810248c:	b590      	push	{r4, r7, lr}
 810248e:	b083      	sub	sp, #12
 8102490:	af00      	add	r7, sp, #0
 8102492:	6078      	str	r0, [r7, #4]
 8102494:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8102496:	6878      	ldr	r0, [r7, #4]
 8102498:	f7ff fa71 	bl	810197e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 810249c:	4604      	mov	r4, r0
 810249e:	6878      	ldr	r0, [r7, #4]
 81024a0:	f7ff ffab 	bl	81023fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 81024a4:	4602      	mov	r2, r0
 81024a6:	683b      	ldr	r3, [r7, #0]
 81024a8:	4621      	mov	r1, r4
 81024aa:	6878      	ldr	r0, [r7, #4]
 81024ac:	f7ff ffb1 	bl	8102412 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 81024b0:	4603      	mov	r3, r0
 81024b2:	4618      	mov	r0, r3
 81024b4:	370c      	adds	r7, #12
 81024b6:	46bd      	mov	sp, r7
 81024b8:	bd90      	pop	{r4, r7, pc}

081024ba <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 81024ba:	b480      	push	{r7}
 81024bc:	b083      	sub	sp, #12
 81024be:	af00      	add	r7, sp, #0
 81024c0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 81024c2:	bf00      	nop
 81024c4:	4618      	mov	r0, r3
 81024c6:	370c      	adds	r7, #12
 81024c8:	46bd      	mov	sp, r7
 81024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024ce:	4770      	bx	lr

081024d0 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr()
 81024d0:	b580      	push	{r7, lr}
 81024d2:	b082      	sub	sp, #8
 81024d4:	af00      	add	r7, sp, #0
 81024d6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 81024d8:	687b      	ldr	r3, [r7, #4]
 81024da:	3310      	adds	r3, #16
 81024dc:	4618      	mov	r0, r3
 81024de:	f000 faf8 	bl	8102ad2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 81024e2:	4603      	mov	r3, r0
 81024e4:	4618      	mov	r0, r3
 81024e6:	3708      	adds	r7, #8
 81024e8:	46bd      	mov	sp, r7
 81024ea:	bd80      	pop	{r7, pc}

081024ec <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>:
      _Tuple_impl(const _Head& __head)
 81024ec:	b580      	push	{r7, lr}
 81024ee:	b082      	sub	sp, #8
 81024f0:	af00      	add	r7, sp, #0
 81024f2:	6078      	str	r0, [r7, #4]
 81024f4:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	6839      	ldr	r1, [r7, #0]
 81024fa:	4618      	mov	r0, r3
 81024fc:	f000 faf5 	bl	8102aea <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>
      { }
 8102500:	687b      	ldr	r3, [r7, #4]
 8102502:	4618      	mov	r0, r3
 8102504:	3708      	adds	r7, #8
 8102506:	46bd      	mov	sp, r7
 8102508:	bd80      	pop	{r7, pc}

0810250a <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810250a:	b480      	push	{r7}
 810250c:	b083      	sub	sp, #12
 810250e:	af00      	add	r7, sp, #0
 8102510:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102512:	687b      	ldr	r3, [r7, #4]
 8102514:	4618      	mov	r0, r3
 8102516:	370c      	adds	r7, #12
 8102518:	46bd      	mov	sp, r7
 810251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810251e:	4770      	bx	lr

08102520 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102520:	b480      	push	{r7}
 8102522:	b083      	sub	sp, #12
 8102524:	af00      	add	r7, sp, #0
 8102526:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	4618      	mov	r0, r3
 810252c:	370c      	adds	r7, #12
 810252e:	46bd      	mov	sp, r7
 8102530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102534:	4770      	bx	lr

08102536 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102536:	b480      	push	{r7}
 8102538:	b083      	sub	sp, #12
 810253a:	af00      	add	r7, sp, #0
 810253c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	4618      	mov	r0, r3
 8102542:	370c      	adds	r7, #12
 8102544:	46bd      	mov	sp, r7
 8102546:	f85d 7b04 	ldr.w	r7, [sp], #4
 810254a:	4770      	bx	lr

0810254c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 810254c:	b5b0      	push	{r4, r5, r7, lr}
 810254e:	b084      	sub	sp, #16
 8102550:	af00      	add	r7, sp, #0
 8102552:	60f8      	str	r0, [r7, #12]
 8102554:	60b9      	str	r1, [r7, #8]
 8102556:	607a      	str	r2, [r7, #4]
 8102558:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 810255a:	68fb      	ldr	r3, [r7, #12]
 810255c:	68ba      	ldr	r2, [r7, #8]
 810255e:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8102560:	6878      	ldr	r0, [r7, #4]
 8102562:	f7ff ffd2 	bl	810250a <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102566:	4604      	mov	r4, r0
 8102568:	6838      	ldr	r0, [r7, #0]
 810256a:	f7ff ffd9 	bl	8102520 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810256e:	4605      	mov	r5, r0
 8102570:	6a38      	ldr	r0, [r7, #32]
 8102572:	f7ff ffe0 	bl	8102536 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102576:	4603      	mov	r3, r0
 8102578:	462a      	mov	r2, r5
 810257a:	4621      	mov	r1, r4
 810257c:	68b8      	ldr	r0, [r7, #8]
 810257e:	f000 fac3 	bl	8102b08 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8102582:	4602      	mov	r2, r0
 8102584:	68fb      	ldr	r3, [r7, #12]
 8102586:	605a      	str	r2, [r3, #4]
	  { }
 8102588:	68fb      	ldr	r3, [r7, #12]
 810258a:	4618      	mov	r0, r3
 810258c:	3710      	adds	r7, #16
 810258e:	46bd      	mov	sp, r7
 8102590:	bdb0      	pop	{r4, r5, r7, pc}

08102592 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102592:	b590      	push	{r4, r7, lr}
 8102594:	b08d      	sub	sp, #52	@ 0x34
 8102596:	af00      	add	r7, sp, #0
 8102598:	60f8      	str	r0, [r7, #12]
 810259a:	60b9      	str	r1, [r7, #8]
 810259c:	607a      	str	r2, [r7, #4]
 810259e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 81025a0:	1d3b      	adds	r3, r7, #4
 81025a2:	4618      	mov	r0, r3
 81025a4:	f000 fad3 	bl	8102b4e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>
 81025a8:	4603      	mov	r3, r0
 81025aa:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 81025ac:	69bc      	ldr	r4, [r7, #24]
 81025ae:	68b8      	ldr	r0, [r7, #8]
 81025b0:	f7ff ff23 	bl	81023fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 81025b4:	4603      	mov	r3, r0
 81025b6:	429c      	cmp	r4, r3
 81025b8:	bf0c      	ite	eq
 81025ba:	2301      	moveq	r3, #1
 81025bc:	2300      	movne	r3, #0
 81025be:	b2db      	uxtb	r3, r3
 81025c0:	2b00      	cmp	r3, #0
 81025c2:	d030      	beq.n	8102626 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 81025c4:	68b8      	ldr	r0, [r7, #8]
 81025c6:	f7ff fe1c 	bl	8102202 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 81025ca:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 81025cc:	2b00      	cmp	r3, #0
 81025ce:	d013      	beq.n	81025f8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 81025d0:	68bc      	ldr	r4, [r7, #8]
 81025d2:	68b8      	ldr	r0, [r7, #8]
 81025d4:	f000 facc 	bl	8102b70 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81025d8:	4603      	mov	r3, r0
 81025da:	681b      	ldr	r3, [r3, #0]
 81025dc:	4618      	mov	r0, r3
 81025de:	f7ff ff49 	bl	8102474 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81025e2:	4603      	mov	r3, r0
 81025e4:	683a      	ldr	r2, [r7, #0]
 81025e6:	4619      	mov	r1, r3
 81025e8:	4620      	mov	r0, r4
 81025ea:	f7ff fc48 	bl	8101e7e <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81025ee:	4603      	mov	r3, r0
 81025f0:	2b00      	cmp	r3, #0
 81025f2:	d001      	beq.n	81025f8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 81025f4:	2301      	movs	r3, #1
 81025f6:	e000      	b.n	81025fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 81025f8:	2300      	movs	r3, #0
	  if (size() > 0
 81025fa:	2b00      	cmp	r3, #0
 81025fc:	d00c      	beq.n	8102618 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 81025fe:	2300      	movs	r3, #0
 8102600:	61fb      	str	r3, [r7, #28]
 8102602:	68b8      	ldr	r0, [r7, #8]
 8102604:	f000 fab4 	bl	8102b70 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8102608:	4602      	mov	r2, r0
 810260a:	f107 031c 	add.w	r3, r7, #28
 810260e:	4619      	mov	r1, r3
 8102610:	68f8      	ldr	r0, [r7, #12]
 8102612:	f000 f972 	bl	81028fa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102616:	e0db      	b.n	81027d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8102618:	68fb      	ldr	r3, [r7, #12]
 810261a:	683a      	ldr	r2, [r7, #0]
 810261c:	68b9      	ldr	r1, [r7, #8]
 810261e:	4618      	mov	r0, r3
 8102620:	f7ff fd1b 	bl	810205a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8102624:	e0d4      	b.n	81027d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8102626:	68bc      	ldr	r4, [r7, #8]
 8102628:	69bb      	ldr	r3, [r7, #24]
 810262a:	4618      	mov	r0, r3
 810262c:	f7ff ff22 	bl	8102474 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102630:	4603      	mov	r3, r0
 8102632:	461a      	mov	r2, r3
 8102634:	6839      	ldr	r1, [r7, #0]
 8102636:	4620      	mov	r0, r4
 8102638:	f7ff fc21 	bl	8101e7e <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810263c:	4603      	mov	r3, r0
 810263e:	2b00      	cmp	r3, #0
 8102640:	d057      	beq.n	81026f2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 8102642:	69bb      	ldr	r3, [r7, #24]
 8102644:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8102646:	69bc      	ldr	r4, [r7, #24]
 8102648:	68b8      	ldr	r0, [r7, #8]
 810264a:	f000 fa9d 	bl	8102b88 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 810264e:	4603      	mov	r3, r0
 8102650:	681b      	ldr	r3, [r3, #0]
 8102652:	429c      	cmp	r4, r3
 8102654:	bf0c      	ite	eq
 8102656:	2301      	moveq	r3, #1
 8102658:	2300      	movne	r3, #0
 810265a:	b2db      	uxtb	r3, r3
 810265c:	2b00      	cmp	r3, #0
 810265e:	d00d      	beq.n	810267c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8102660:	68b8      	ldr	r0, [r7, #8]
 8102662:	f000 fa91 	bl	8102b88 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8102666:	4604      	mov	r4, r0
 8102668:	68b8      	ldr	r0, [r7, #8]
 810266a:	f000 fa8d 	bl	8102b88 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 810266e:	4603      	mov	r3, r0
 8102670:	461a      	mov	r2, r3
 8102672:	4621      	mov	r1, r4
 8102674:	68f8      	ldr	r0, [r7, #12]
 8102676:	f000 fa93 	bl	8102ba0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 810267a:	e0a9      	b.n	81027d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 810267c:	68bc      	ldr	r4, [r7, #8]
 810267e:	f107 0314 	add.w	r3, r7, #20
 8102682:	4618      	mov	r0, r3
 8102684:	f000 f928 	bl	81028d8 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
 8102688:	4603      	mov	r3, r0
 810268a:	681b      	ldr	r3, [r3, #0]
 810268c:	4618      	mov	r0, r3
 810268e:	f7ff fef1 	bl	8102474 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102692:	4603      	mov	r3, r0
 8102694:	683a      	ldr	r2, [r7, #0]
 8102696:	4619      	mov	r1, r3
 8102698:	4620      	mov	r0, r4
 810269a:	f7ff fbf0 	bl	8101e7e <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810269e:	4603      	mov	r3, r0
 81026a0:	2b00      	cmp	r3, #0
 81026a2:	d01f      	beq.n	81026e4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 81026a4:	697b      	ldr	r3, [r7, #20]
 81026a6:	4618      	mov	r0, r3
 81026a8:	f7ff fc6e 	bl	8101f88 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81026ac:	4603      	mov	r3, r0
 81026ae:	2b00      	cmp	r3, #0
 81026b0:	bf0c      	ite	eq
 81026b2:	2301      	moveq	r3, #1
 81026b4:	2300      	movne	r3, #0
 81026b6:	b2db      	uxtb	r3, r3
 81026b8:	2b00      	cmp	r3, #0
 81026ba:	d00a      	beq.n	81026d2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 81026bc:	2300      	movs	r3, #0
 81026be:	623b      	str	r3, [r7, #32]
 81026c0:	f107 0214 	add.w	r2, r7, #20
 81026c4:	f107 0320 	add.w	r3, r7, #32
 81026c8:	4619      	mov	r1, r3
 81026ca:	68f8      	ldr	r0, [r7, #12]
 81026cc:	f000 f915 	bl	81028fa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81026d0:	e07e      	b.n	81027d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 81026d2:	f107 0218 	add.w	r2, r7, #24
 81026d6:	f107 0318 	add.w	r3, r7, #24
 81026da:	4619      	mov	r1, r3
 81026dc:	68f8      	ldr	r0, [r7, #12]
 81026de:	f000 fa5f 	bl	8102ba0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 81026e2:	e075      	b.n	81027d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 81026e4:	68fb      	ldr	r3, [r7, #12]
 81026e6:	683a      	ldr	r2, [r7, #0]
 81026e8:	68b9      	ldr	r1, [r7, #8]
 81026ea:	4618      	mov	r0, r3
 81026ec:	f7ff fcb5 	bl	810205a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 81026f0:	e06e      	b.n	81027d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 81026f2:	68bc      	ldr	r4, [r7, #8]
 81026f4:	69bb      	ldr	r3, [r7, #24]
 81026f6:	4618      	mov	r0, r3
 81026f8:	f7ff febc 	bl	8102474 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81026fc:	4603      	mov	r3, r0
 81026fe:	683a      	ldr	r2, [r7, #0]
 8102700:	4619      	mov	r1, r3
 8102702:	4620      	mov	r0, r4
 8102704:	f7ff fbbb 	bl	8101e7e <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102708:	4603      	mov	r3, r0
 810270a:	2b00      	cmp	r3, #0
 810270c:	d056      	beq.n	81027bc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 810270e:	69bb      	ldr	r3, [r7, #24]
 8102710:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8102712:	69bc      	ldr	r4, [r7, #24]
 8102714:	68b8      	ldr	r0, [r7, #8]
 8102716:	f000 fa2b 	bl	8102b70 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 810271a:	4603      	mov	r3, r0
 810271c:	681b      	ldr	r3, [r3, #0]
 810271e:	429c      	cmp	r4, r3
 8102720:	bf0c      	ite	eq
 8102722:	2301      	moveq	r3, #1
 8102724:	2300      	movne	r3, #0
 8102726:	b2db      	uxtb	r3, r3
 8102728:	2b00      	cmp	r3, #0
 810272a:	d00c      	beq.n	8102746 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 810272c:	2300      	movs	r3, #0
 810272e:	627b      	str	r3, [r7, #36]	@ 0x24
 8102730:	68b8      	ldr	r0, [r7, #8]
 8102732:	f000 fa1d 	bl	8102b70 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8102736:	4602      	mov	r2, r0
 8102738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810273c:	4619      	mov	r1, r3
 810273e:	68f8      	ldr	r0, [r7, #12]
 8102740:	f000 f8db 	bl	81028fa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102744:	e044      	b.n	81027d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8102746:	68bc      	ldr	r4, [r7, #8]
 8102748:	f107 0310 	add.w	r3, r7, #16
 810274c:	4618      	mov	r0, r3
 810274e:	f000 fa40 	bl	8102bd2 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>
 8102752:	4603      	mov	r3, r0
 8102754:	681b      	ldr	r3, [r3, #0]
 8102756:	4618      	mov	r0, r3
 8102758:	f7ff fe8c 	bl	8102474 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810275c:	4603      	mov	r3, r0
 810275e:	461a      	mov	r2, r3
 8102760:	6839      	ldr	r1, [r7, #0]
 8102762:	4620      	mov	r0, r4
 8102764:	f7ff fb8b 	bl	8101e7e <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102768:	4603      	mov	r3, r0
 810276a:	2b00      	cmp	r3, #0
 810276c:	d01f      	beq.n	81027ae <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 810276e:	69bb      	ldr	r3, [r7, #24]
 8102770:	4618      	mov	r0, r3
 8102772:	f7ff fc09 	bl	8101f88 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8102776:	4603      	mov	r3, r0
 8102778:	2b00      	cmp	r3, #0
 810277a:	bf0c      	ite	eq
 810277c:	2301      	moveq	r3, #1
 810277e:	2300      	movne	r3, #0
 8102780:	b2db      	uxtb	r3, r3
 8102782:	2b00      	cmp	r3, #0
 8102784:	d00a      	beq.n	810279c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 8102786:	2300      	movs	r3, #0
 8102788:	62bb      	str	r3, [r7, #40]	@ 0x28
 810278a:	f107 0218 	add.w	r2, r7, #24
 810278e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102792:	4619      	mov	r1, r3
 8102794:	68f8      	ldr	r0, [r7, #12]
 8102796:	f000 f8b0 	bl	81028fa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 810279a:	e019      	b.n	81027d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 810279c:	f107 0210 	add.w	r2, r7, #16
 81027a0:	f107 0310 	add.w	r3, r7, #16
 81027a4:	4619      	mov	r1, r3
 81027a6:	68f8      	ldr	r0, [r7, #12]
 81027a8:	f000 f9fa 	bl	8102ba0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 81027ac:	e010      	b.n	81027d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 81027ae:	68fb      	ldr	r3, [r7, #12]
 81027b0:	683a      	ldr	r2, [r7, #0]
 81027b2:	68b9      	ldr	r1, [r7, #8]
 81027b4:	4618      	mov	r0, r3
 81027b6:	f7ff fc50 	bl	810205a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 81027ba:	e009      	b.n	81027d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 81027bc:	2300      	movs	r3, #0
 81027be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81027c0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 81027c4:	f107 0318 	add.w	r3, r7, #24
 81027c8:	4619      	mov	r1, r3
 81027ca:	68f8      	ldr	r0, [r7, #12]
 81027cc:	f000 f895 	bl	81028fa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81027d0:	68f8      	ldr	r0, [r7, #12]
 81027d2:	3734      	adds	r7, #52	@ 0x34
 81027d4:	46bd      	mov	sp, r7
 81027d6:	bd90      	pop	{r4, r7, pc}

081027d8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 81027d8:	b590      	push	{r4, r7, lr}
 81027da:	b083      	sub	sp, #12
 81027dc:	af00      	add	r7, sp, #0
 81027de:	6078      	str	r0, [r7, #4]
 81027e0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 81027e2:	6878      	ldr	r0, [r7, #4]
 81027e4:	f000 fa06 	bl	8102bf4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81027e8:	4604      	mov	r4, r0
 81027ea:	6838      	ldr	r0, [r7, #0]
 81027ec:	f7ff fe70 	bl	81024d0 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 81027f0:	4603      	mov	r3, r0
 81027f2:	4619      	mov	r1, r3
 81027f4:	4620      	mov	r0, r4
 81027f6:	f000 fa08 	bl	8102c0a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>
      }
 81027fa:	bf00      	nop
 81027fc:	370c      	adds	r7, #12
 81027fe:	46bd      	mov	sp, r7
 8102800:	bd90      	pop	{r4, r7, pc}

08102802 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8102802:	b580      	push	{r7, lr}
 8102804:	b082      	sub	sp, #8
 8102806:	af00      	add	r7, sp, #0
 8102808:	6078      	str	r0, [r7, #4]
 810280a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 810280c:	6878      	ldr	r0, [r7, #4]
 810280e:	f000 f9f1 	bl	8102bf4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102812:	4603      	mov	r3, r0
 8102814:	2201      	movs	r2, #1
 8102816:	6839      	ldr	r1, [r7, #0]
 8102818:	4618      	mov	r0, r3
 810281a:	f000 fa03 	bl	8102c24 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>
 810281e:	bf00      	nop
 8102820:	3708      	adds	r7, #8
 8102822:	46bd      	mov	sp, r7
 8102824:	bd80      	pop	{r7, pc}

08102826 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8102826:	b590      	push	{r4, r7, lr}
 8102828:	b087      	sub	sp, #28
 810282a:	af00      	add	r7, sp, #0
 810282c:	60f8      	str	r0, [r7, #12]
 810282e:	60b9      	str	r1, [r7, #8]
 8102830:	607a      	str	r2, [r7, #4]
	  _Link_type __tmp = _M_get_node();
 8102832:	68f8      	ldr	r0, [r7, #12]
 8102834:	f000 fa05 	bl	8102c42 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8102838:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 810283a:	68b8      	ldr	r0, [r7, #8]
 810283c:	f7ff f8ab 	bl	8101996 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102840:	4604      	mov	r4, r0
 8102842:	6878      	ldr	r0, [r7, #4]
 8102844:	f7ff f8b2 	bl	81019ac <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102848:	4603      	mov	r3, r0
 810284a:	4622      	mov	r2, r4
 810284c:	6979      	ldr	r1, [r7, #20]
 810284e:	68f8      	ldr	r0, [r7, #12]
 8102850:	f000 fa08 	bl	8102c64 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8102854:	697b      	ldr	r3, [r7, #20]
	}
 8102856:	4618      	mov	r0, r3
 8102858:	371c      	adds	r7, #28
 810285a:	46bd      	mov	sp, r7
 810285c:	bd90      	pop	{r4, r7, pc}

0810285e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 810285e:	b580      	push	{r7, lr}
 8102860:	b084      	sub	sp, #16
 8102862:	af00      	add	r7, sp, #0
 8102864:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8102866:	6878      	ldr	r0, [r7, #4]
 8102868:	f000 fa21 	bl	8102cae <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810286c:	4602      	mov	r2, r0
 810286e:	f107 030c 	add.w	r3, r7, #12
 8102872:	4611      	mov	r1, r2
 8102874:	4618      	mov	r0, r3
 8102876:	f000 fa28 	bl	8102cca <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>
 810287a:	4603      	mov	r3, r0
      }
 810287c:	4618      	mov	r0, r3
 810287e:	3710      	adds	r7, #16
 8102880:	46bd      	mov	sp, r7
 8102882:	bd80      	pop	{r7, pc}

08102884 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8102884:	b580      	push	{r7, lr}
 8102886:	b084      	sub	sp, #16
 8102888:	af00      	add	r7, sp, #0
 810288a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	68da      	ldr	r2, [r3, #12]
 8102890:	f107 030c 	add.w	r3, r7, #12
 8102894:	4611      	mov	r1, r2
 8102896:	4618      	mov	r0, r3
 8102898:	f7ff fca4 	bl	81021e4 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 810289c:	68fb      	ldr	r3, [r7, #12]
 810289e:	4618      	mov	r0, r3
 81028a0:	3710      	adds	r7, #16
 81028a2:	46bd      	mov	sp, r7
 81028a4:	bd80      	pop	{r7, pc}

081028a6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 81028a6:	b580      	push	{r7, lr}
 81028a8:	b084      	sub	sp, #16
 81028aa:	af00      	add	r7, sp, #0
 81028ac:	60f8      	str	r0, [r7, #12]
 81028ae:	60b9      	str	r1, [r7, #8]
 81028b0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 81028b2:	68b8      	ldr	r0, [r7, #8]
 81028b4:	f000 fa15 	bl	8102ce2 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>
 81028b8:	4603      	mov	r3, r0
 81028ba:	681a      	ldr	r2, [r3, #0]
 81028bc:	68fb      	ldr	r3, [r7, #12]
 81028be:	601a      	str	r2, [r3, #0]
 81028c0:	6878      	ldr	r0, [r7, #4]
 81028c2:	f000 fa19 	bl	8102cf8 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 81028c6:	4603      	mov	r3, r0
 81028c8:	681a      	ldr	r2, [r3, #0]
 81028ca:	68fb      	ldr	r3, [r7, #12]
 81028cc:	605a      	str	r2, [r3, #4]
 81028ce:	68fb      	ldr	r3, [r7, #12]
 81028d0:	4618      	mov	r0, r3
 81028d2:	3710      	adds	r7, #16
 81028d4:	46bd      	mov	sp, r7
 81028d6:	bd80      	pop	{r7, pc}

081028d8 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 81028d8:	b580      	push	{r7, lr}
 81028da:	b082      	sub	sp, #8
 81028dc:	af00      	add	r7, sp, #0
 81028de:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 81028e0:	687b      	ldr	r3, [r7, #4]
 81028e2:	681b      	ldr	r3, [r3, #0]
 81028e4:	4618      	mov	r0, r3
 81028e6:	f013 f809 	bl	81158fc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 81028ea:	4602      	mov	r2, r0
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	601a      	str	r2, [r3, #0]
	return *this;
 81028f0:	687b      	ldr	r3, [r7, #4]
      }
 81028f2:	4618      	mov	r0, r3
 81028f4:	3708      	adds	r7, #8
 81028f6:	46bd      	mov	sp, r7
 81028f8:	bd80      	pop	{r7, pc}

081028fa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 81028fa:	b480      	push	{r7}
 81028fc:	b085      	sub	sp, #20
 81028fe:	af00      	add	r7, sp, #0
 8102900:	60f8      	str	r0, [r7, #12]
 8102902:	60b9      	str	r1, [r7, #8]
 8102904:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8102906:	68bb      	ldr	r3, [r7, #8]
 8102908:	681a      	ldr	r2, [r3, #0]
 810290a:	68fb      	ldr	r3, [r7, #12]
 810290c:	601a      	str	r2, [r3, #0]
 810290e:	687b      	ldr	r3, [r7, #4]
 8102910:	681a      	ldr	r2, [r3, #0]
 8102912:	68fb      	ldr	r3, [r7, #12]
 8102914:	605a      	str	r2, [r3, #4]
 8102916:	68fb      	ldr	r3, [r7, #12]
 8102918:	4618      	mov	r0, r3
 810291a:	3714      	adds	r7, #20
 810291c:	46bd      	mov	sp, r7
 810291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102922:	4770      	bx	lr

08102924 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102924:	b5b0      	push	{r4, r5, r7, lr}
 8102926:	b086      	sub	sp, #24
 8102928:	af00      	add	r7, sp, #0
 810292a:	60f8      	str	r0, [r7, #12]
 810292c:	60b9      	str	r1, [r7, #8]
 810292e:	607a      	str	r2, [r7, #4]
 8102930:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8102932:	68bb      	ldr	r3, [r7, #8]
 8102934:	2b00      	cmp	r3, #0
 8102936:	d117      	bne.n	8102968 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8102938:	68f8      	ldr	r0, [r7, #12]
 810293a:	f7ff fd5e 	bl	81023fa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 810293e:	4602      	mov	r2, r0
 8102940:	687b      	ldr	r3, [r7, #4]
 8102942:	4293      	cmp	r3, r2
 8102944:	d010      	beq.n	8102968 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8102946:	68fc      	ldr	r4, [r7, #12]
 8102948:	6838      	ldr	r0, [r7, #0]
 810294a:	f7ff ff88 	bl	810285e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 810294e:	4605      	mov	r5, r0
 8102950:	6878      	ldr	r0, [r7, #4]
 8102952:	f7ff fd8f 	bl	8102474 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102956:	4603      	mov	r3, r0
 8102958:	461a      	mov	r2, r3
 810295a:	4629      	mov	r1, r5
 810295c:	4620      	mov	r0, r4
 810295e:	f7ff fa8e 	bl	8101e7e <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102962:	4603      	mov	r3, r0
 8102964:	2b00      	cmp	r3, #0
 8102966:	d001      	beq.n	810296c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
 8102968:	2301      	movs	r3, #1
 810296a:	e000      	b.n	810296e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4a>
 810296c:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 810296e:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8102970:	68fb      	ldr	r3, [r7, #12]
 8102972:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8102974:	7df8      	ldrb	r0, [r7, #23]
 8102976:	687a      	ldr	r2, [r7, #4]
 8102978:	6839      	ldr	r1, [r7, #0]
 810297a:	f012 ffc1 	bl	8115900 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 810297e:	68fb      	ldr	r3, [r7, #12]
 8102980:	695b      	ldr	r3, [r3, #20]
 8102982:	1c5a      	adds	r2, r3, #1
 8102984:	68fb      	ldr	r3, [r7, #12]
 8102986:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8102988:	f107 0310 	add.w	r3, r7, #16
 810298c:	6839      	ldr	r1, [r7, #0]
 810298e:	4618      	mov	r0, r3
 8102990:	f7ff fc28 	bl	81021e4 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102994:	693b      	ldr	r3, [r7, #16]
    }
 8102996:	4618      	mov	r0, r3
 8102998:	3718      	adds	r7, #24
 810299a:	46bd      	mov	sp, r7
 810299c:	bdb0      	pop	{r4, r5, r7, pc}

0810299e <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810299e:	b480      	push	{r7}
 81029a0:	b083      	sub	sp, #12
 81029a2:	af00      	add	r7, sp, #0
 81029a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81029a6:	687b      	ldr	r3, [r7, #4]
 81029a8:	4618      	mov	r0, r3
 81029aa:	370c      	adds	r7, #12
 81029ac:	46bd      	mov	sp, r7
 81029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029b2:	4770      	bx	lr

081029b4 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81029b4:	b480      	push	{r7}
 81029b6:	b083      	sub	sp, #12
 81029b8:	af00      	add	r7, sp, #0
 81029ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81029bc:	687b      	ldr	r3, [r7, #4]
 81029be:	4618      	mov	r0, r3
 81029c0:	370c      	adds	r7, #12
 81029c2:	46bd      	mov	sp, r7
 81029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029c8:	4770      	bx	lr

081029ca <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 81029ca:	b480      	push	{r7}
 81029cc:	b083      	sub	sp, #12
 81029ce:	af00      	add	r7, sp, #0
 81029d0:	6078      	str	r0, [r7, #4]
 81029d2:	6039      	str	r1, [r7, #0]
 81029d4:	bf00      	nop
 81029d6:	370c      	adds	r7, #12
 81029d8:	46bd      	mov	sp, r7
 81029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029de:	4770      	bx	lr

081029e0 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 81029e0:	b580      	push	{r7, lr}
 81029e2:	b084      	sub	sp, #16
 81029e4:	af00      	add	r7, sp, #0
 81029e6:	60f8      	str	r0, [r7, #12]
 81029e8:	60b9      	str	r1, [r7, #8]
 81029ea:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 81029ec:	687a      	ldr	r2, [r7, #4]
 81029ee:	4613      	mov	r3, r2
 81029f0:	005b      	lsls	r3, r3, #1
 81029f2:	4413      	add	r3, r2
 81029f4:	00db      	lsls	r3, r3, #3
 81029f6:	4619      	mov	r1, r3
 81029f8:	68b8      	ldr	r0, [r7, #8]
 81029fa:	f012 ff15 	bl	8115828 <_ZdlPvj>
      }
 81029fe:	bf00      	nop
 8102a00:	3710      	adds	r7, #16
 8102a02:	46bd      	mov	sp, r7
 8102a04:	bd80      	pop	{r7, pc}

08102a06 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8102a06:	b580      	push	{r7, lr}
 8102a08:	b082      	sub	sp, #8
 8102a0a:	af00      	add	r7, sp, #0
 8102a0c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8102a0e:	687b      	ldr	r3, [r7, #4]
 8102a10:	4618      	mov	r0, r3
 8102a12:	f000 f999 	bl	8102d48 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8102a16:	4603      	mov	r3, r0
 8102a18:	4618      	mov	r0, r3
 8102a1a:	f000 f979 	bl	8102d10 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>
 8102a1e:	4603      	mov	r3, r0
 8102a20:	4618      	mov	r0, r3
 8102a22:	3708      	adds	r7, #8
 8102a24:	46bd      	mov	sp, r7
 8102a26:	bd80      	pop	{r7, pc}

08102a28 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8102a28:	b480      	push	{r7}
 8102a2a:	b083      	sub	sp, #12
 8102a2c:	af00      	add	r7, sp, #0
 8102a2e:	6078      	str	r0, [r7, #4]
 8102a30:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	681a      	ldr	r2, [r3, #0]
 8102a36:	683b      	ldr	r3, [r7, #0]
 8102a38:	681b      	ldr	r3, [r3, #0]
 8102a3a:	429a      	cmp	r2, r3
 8102a3c:	d201      	bcs.n	8102a42 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8102a3e:	683b      	ldr	r3, [r7, #0]
 8102a40:	e000      	b.n	8102a44 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8102a42:	687b      	ldr	r3, [r7, #4]
    }
 8102a44:	4618      	mov	r0, r3
 8102a46:	370c      	adds	r7, #12
 8102a48:	46bd      	mov	sp, r7
 8102a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a4e:	4770      	bx	lr

08102a50 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8102a50:	b580      	push	{r7, lr}
 8102a52:	b082      	sub	sp, #8
 8102a54:	af00      	add	r7, sp, #0
 8102a56:	6078      	str	r0, [r7, #4]
 8102a58:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8102a5a:	2200      	movs	r2, #0
 8102a5c:	6839      	ldr	r1, [r7, #0]
 8102a5e:	6878      	ldr	r0, [r7, #4]
 8102a60:	f000 f97e 	bl	8102d60 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>
 8102a64:	4603      	mov	r3, r0
 8102a66:	4618      	mov	r0, r3
 8102a68:	3708      	adds	r7, #8
 8102a6a:	46bd      	mov	sp, r7
 8102a6c:	bd80      	pop	{r7, pc}

08102a6e <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8102a6e:	b580      	push	{r7, lr}
 8102a70:	b084      	sub	sp, #16
 8102a72:	af00      	add	r7, sp, #0
 8102a74:	60f8      	str	r0, [r7, #12]
 8102a76:	60b9      	str	r1, [r7, #8]
 8102a78:	607a      	str	r2, [r7, #4]
 8102a7a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8102a7c:	683b      	ldr	r3, [r7, #0]
 8102a7e:	687a      	ldr	r2, [r7, #4]
 8102a80:	68b9      	ldr	r1, [r7, #8]
 8102a82:	68f8      	ldr	r0, [r7, #12]
 8102a84:	f000 f99a 	bl	8102dbc <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8102a88:	4603      	mov	r3, r0
      }
 8102a8a:	4618      	mov	r0, r3
 8102a8c:	3710      	adds	r7, #16
 8102a8e:	46bd      	mov	sp, r7
 8102a90:	bd80      	pop	{r7, pc}

08102a92 <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8102a92:	b580      	push	{r7, lr}
 8102a94:	b084      	sub	sp, #16
 8102a96:	af00      	add	r7, sp, #0
 8102a98:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8102a9a:	f107 030c 	add.w	r3, r7, #12
 8102a9e:	6879      	ldr	r1, [r7, #4]
 8102aa0:	4618      	mov	r0, r3
 8102aa2:	f000 f9a8 	bl	8102df6 <_ZNSt13move_iteratorIP8SMessageEC1ES1_>
 8102aa6:	68fb      	ldr	r3, [r7, #12]
 8102aa8:	4618      	mov	r0, r3
 8102aaa:	3710      	adds	r7, #16
 8102aac:	46bd      	mov	sp, r7
 8102aae:	bd80      	pop	{r7, pc}

08102ab0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8102ab0:	b580      	push	{r7, lr}
 8102ab2:	b084      	sub	sp, #16
 8102ab4:	af00      	add	r7, sp, #0
 8102ab6:	60f8      	str	r0, [r7, #12]
 8102ab8:	60b9      	str	r1, [r7, #8]
 8102aba:	607a      	str	r2, [r7, #4]
 8102abc:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8102abe:	687a      	ldr	r2, [r7, #4]
 8102ac0:	68b9      	ldr	r1, [r7, #8]
 8102ac2:	68f8      	ldr	r0, [r7, #12]
 8102ac4:	f000 f9a9 	bl	8102e1a <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8102ac8:	4603      	mov	r3, r0
    }
 8102aca:	4618      	mov	r0, r3
 8102acc:	3710      	adds	r7, #16
 8102ace:	46bd      	mov	sp, r7
 8102ad0:	bd80      	pop	{r7, pc}

08102ad2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8102ad2:	b580      	push	{r7, lr}
 8102ad4:	b082      	sub	sp, #8
 8102ad6:	af00      	add	r7, sp, #0
 8102ad8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8102ada:	6878      	ldr	r0, [r7, #4]
 8102adc:	f000 f9b1 	bl	8102e42 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8102ae0:	4603      	mov	r3, r0
 8102ae2:	4618      	mov	r0, r3
 8102ae4:	3708      	adds	r7, #8
 8102ae6:	46bd      	mov	sp, r7
 8102ae8:	bd80      	pop	{r7, pc}

08102aea <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8102aea:	b480      	push	{r7}
 8102aec:	b083      	sub	sp, #12
 8102aee:	af00      	add	r7, sp, #0
 8102af0:	6078      	str	r0, [r7, #4]
 8102af2:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8102af4:	687b      	ldr	r3, [r7, #4]
 8102af6:	683a      	ldr	r2, [r7, #0]
 8102af8:	601a      	str	r2, [r3, #0]
 8102afa:	687b      	ldr	r3, [r7, #4]
 8102afc:	4618      	mov	r0, r3
 8102afe:	370c      	adds	r7, #12
 8102b00:	46bd      	mov	sp, r7
 8102b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b06:	4770      	bx	lr

08102b08 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8102b08:	b5b0      	push	{r4, r5, r7, lr}
 8102b0a:	b088      	sub	sp, #32
 8102b0c:	af02      	add	r7, sp, #8
 8102b0e:	60f8      	str	r0, [r7, #12]
 8102b10:	60b9      	str	r1, [r7, #8]
 8102b12:	607a      	str	r2, [r7, #4]
 8102b14:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8102b16:	68f8      	ldr	r0, [r7, #12]
 8102b18:	f000 f893 	bl	8102c42 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8102b1c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8102b1e:	68b8      	ldr	r0, [r7, #8]
 8102b20:	f7ff fcf3 	bl	810250a <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102b24:	4604      	mov	r4, r0
 8102b26:	6878      	ldr	r0, [r7, #4]
 8102b28:	f7ff fcfa 	bl	8102520 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102b2c:	4605      	mov	r5, r0
 8102b2e:	6838      	ldr	r0, [r7, #0]
 8102b30:	f7ff fd01 	bl	8102536 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102b34:	4603      	mov	r3, r0
 8102b36:	9300      	str	r3, [sp, #0]
 8102b38:	462b      	mov	r3, r5
 8102b3a:	4622      	mov	r2, r4
 8102b3c:	6979      	ldr	r1, [r7, #20]
 8102b3e:	68f8      	ldr	r0, [r7, #12]
 8102b40:	f000 f98a 	bl	8102e58 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8102b44:	697b      	ldr	r3, [r7, #20]
	}
 8102b46:	4618      	mov	r0, r3
 8102b48:	3718      	adds	r7, #24
 8102b4a:	46bd      	mov	sp, r7
 8102b4c:	bdb0      	pop	{r4, r5, r7, pc}

08102b4e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8102b4e:	b580      	push	{r7, lr}
 8102b50:	b084      	sub	sp, #16
 8102b52:	af00      	add	r7, sp, #0
 8102b54:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8102b56:	687b      	ldr	r3, [r7, #4]
 8102b58:	681a      	ldr	r2, [r3, #0]
 8102b5a:	f107 030c 	add.w	r3, r7, #12
 8102b5e:	4611      	mov	r1, r2
 8102b60:	4618      	mov	r0, r3
 8102b62:	f7ff fb3f 	bl	81021e4 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102b66:	68fb      	ldr	r3, [r7, #12]
 8102b68:	4618      	mov	r0, r3
 8102b6a:	3710      	adds	r7, #16
 8102b6c:	46bd      	mov	sp, r7
 8102b6e:	bd80      	pop	{r7, pc}

08102b70 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8102b70:	b480      	push	{r7}
 8102b72:	b083      	sub	sp, #12
 8102b74:	af00      	add	r7, sp, #0
 8102b76:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8102b78:	687b      	ldr	r3, [r7, #4]
 8102b7a:	3310      	adds	r3, #16
 8102b7c:	4618      	mov	r0, r3
 8102b7e:	370c      	adds	r7, #12
 8102b80:	46bd      	mov	sp, r7
 8102b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b86:	4770      	bx	lr

08102b88 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8102b88:	b480      	push	{r7}
 8102b8a:	b083      	sub	sp, #12
 8102b8c:	af00      	add	r7, sp, #0
 8102b8e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8102b90:	687b      	ldr	r3, [r7, #4]
 8102b92:	330c      	adds	r3, #12
 8102b94:	4618      	mov	r0, r3
 8102b96:	370c      	adds	r7, #12
 8102b98:	46bd      	mov	sp, r7
 8102b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b9e:	4770      	bx	lr

08102ba0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8102ba0:	b580      	push	{r7, lr}
 8102ba2:	b084      	sub	sp, #16
 8102ba4:	af00      	add	r7, sp, #0
 8102ba6:	60f8      	str	r0, [r7, #12]
 8102ba8:	60b9      	str	r1, [r7, #8]
 8102baa:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8102bac:	68b8      	ldr	r0, [r7, #8]
 8102bae:	f000 f8a3 	bl	8102cf8 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8102bb2:	4603      	mov	r3, r0
 8102bb4:	681a      	ldr	r2, [r3, #0]
 8102bb6:	68fb      	ldr	r3, [r7, #12]
 8102bb8:	601a      	str	r2, [r3, #0]
 8102bba:	6878      	ldr	r0, [r7, #4]
 8102bbc:	f000 f89c 	bl	8102cf8 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8102bc0:	4603      	mov	r3, r0
 8102bc2:	681a      	ldr	r2, [r3, #0]
 8102bc4:	68fb      	ldr	r3, [r7, #12]
 8102bc6:	605a      	str	r2, [r3, #4]
 8102bc8:	68fb      	ldr	r3, [r7, #12]
 8102bca:	4618      	mov	r0, r3
 8102bcc:	3710      	adds	r7, #16
 8102bce:	46bd      	mov	sp, r7
 8102bd0:	bd80      	pop	{r7, pc}

08102bd2 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8102bd2:	b580      	push	{r7, lr}
 8102bd4:	b082      	sub	sp, #8
 8102bd6:	af00      	add	r7, sp, #0
 8102bd8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8102bda:	687b      	ldr	r3, [r7, #4]
 8102bdc:	681b      	ldr	r3, [r3, #0]
 8102bde:	4618      	mov	r0, r3
 8102be0:	f012 fe8a 	bl	81158f8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8102be4:	4602      	mov	r2, r0
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	601a      	str	r2, [r3, #0]
	return *this;
 8102bea:	687b      	ldr	r3, [r7, #4]
      }
 8102bec:	4618      	mov	r0, r3
 8102bee:	3708      	adds	r7, #8
 8102bf0:	46bd      	mov	sp, r7
 8102bf2:	bd80      	pop	{r7, pc}

08102bf4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8102bf4:	b480      	push	{r7}
 8102bf6:	b083      	sub	sp, #12
 8102bf8:	af00      	add	r7, sp, #0
 8102bfa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8102bfc:	687b      	ldr	r3, [r7, #4]
 8102bfe:	4618      	mov	r0, r3
 8102c00:	370c      	adds	r7, #12
 8102c02:	46bd      	mov	sp, r7
 8102c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c08:	4770      	bx	lr

08102c0a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8102c0a:	b580      	push	{r7, lr}
 8102c0c:	b082      	sub	sp, #8
 8102c0e:	af00      	add	r7, sp, #0
 8102c10:	6078      	str	r0, [r7, #4]
 8102c12:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8102c14:	6839      	ldr	r1, [r7, #0]
 8102c16:	6878      	ldr	r0, [r7, #4]
 8102c18:	f000 f94b 	bl	8102eb2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>
	}
 8102c1c:	bf00      	nop
 8102c1e:	3708      	adds	r7, #8
 8102c20:	46bd      	mov	sp, r7
 8102c22:	bd80      	pop	{r7, pc}

08102c24 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8102c24:	b580      	push	{r7, lr}
 8102c26:	b084      	sub	sp, #16
 8102c28:	af00      	add	r7, sp, #0
 8102c2a:	60f8      	str	r0, [r7, #12]
 8102c2c:	60b9      	str	r1, [r7, #8]
 8102c2e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8102c30:	687a      	ldr	r2, [r7, #4]
 8102c32:	68b9      	ldr	r1, [r7, #8]
 8102c34:	68f8      	ldr	r0, [r7, #12]
 8102c36:	f000 f947 	bl	8102ec8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>
 8102c3a:	bf00      	nop
 8102c3c:	3710      	adds	r7, #16
 8102c3e:	46bd      	mov	sp, r7
 8102c40:	bd80      	pop	{r7, pc}

08102c42 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8102c42:	b580      	push	{r7, lr}
 8102c44:	b082      	sub	sp, #8
 8102c46:	af00      	add	r7, sp, #0
 8102c48:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8102c4a:	6878      	ldr	r0, [r7, #4]
 8102c4c:	f7ff ffd2 	bl	8102bf4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102c50:	4603      	mov	r3, r0
 8102c52:	2101      	movs	r1, #1
 8102c54:	4618      	mov	r0, r3
 8102c56:	f000 f94a 	bl	8102eee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>
 8102c5a:	4603      	mov	r3, r0
 8102c5c:	4618      	mov	r0, r3
 8102c5e:	3708      	adds	r7, #8
 8102c60:	46bd      	mov	sp, r7
 8102c62:	bd80      	pop	{r7, pc}

08102c64 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8102c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8102c66:	b085      	sub	sp, #20
 8102c68:	af00      	add	r7, sp, #0
 8102c6a:	60f8      	str	r0, [r7, #12]
 8102c6c:	60b9      	str	r1, [r7, #8]
 8102c6e:	607a      	str	r2, [r7, #4]
 8102c70:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8102c72:	68bb      	ldr	r3, [r7, #8]
 8102c74:	4619      	mov	r1, r3
 8102c76:	2018      	movs	r0, #24
 8102c78:	f7fd ff89 	bl	8100b8e <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8102c7c:	68f8      	ldr	r0, [r7, #12]
 8102c7e:	f7ff ffb9 	bl	8102bf4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102c82:	4604      	mov	r4, r0
 8102c84:	68b8      	ldr	r0, [r7, #8]
 8102c86:	f7ff fc23 	bl	81024d0 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102c8a:	4605      	mov	r5, r0
 8102c8c:	6878      	ldr	r0, [r7, #4]
 8102c8e:	f7fe fe82 	bl	8101996 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102c92:	4606      	mov	r6, r0
 8102c94:	6838      	ldr	r0, [r7, #0]
 8102c96:	f7fe fe89 	bl	81019ac <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102c9a:	4603      	mov	r3, r0
 8102c9c:	4632      	mov	r2, r6
 8102c9e:	4629      	mov	r1, r5
 8102ca0:	4620      	mov	r0, r4
 8102ca2:	f000 f933 	bl	8102f0c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>
	}
 8102ca6:	bf00      	nop
 8102ca8:	3714      	adds	r7, #20
 8102caa:	46bd      	mov	sp, r7
 8102cac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08102cae <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr() const
 8102cae:	b580      	push	{r7, lr}
 8102cb0:	b082      	sub	sp, #8
 8102cb2:	af00      	add	r7, sp, #0
 8102cb4:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8102cb6:	687b      	ldr	r3, [r7, #4]
 8102cb8:	3310      	adds	r3, #16
 8102cba:	4618      	mov	r0, r3
 8102cbc:	f000 f93e 	bl	8102f3c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 8102cc0:	4603      	mov	r3, r0
 8102cc2:	4618      	mov	r0, r3
 8102cc4:	3708      	adds	r7, #8
 8102cc6:	46bd      	mov	sp, r7
 8102cc8:	bd80      	pop	{r7, pc}

08102cca <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8102cca:	b480      	push	{r7}
 8102ccc:	b083      	sub	sp, #12
 8102cce:	af00      	add	r7, sp, #0
 8102cd0:	6078      	str	r0, [r7, #4]
 8102cd2:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8102cd4:	683b      	ldr	r3, [r7, #0]
 8102cd6:	4618      	mov	r0, r3
 8102cd8:	370c      	adds	r7, #12
 8102cda:	46bd      	mov	sp, r7
 8102cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ce0:	4770      	bx	lr

08102ce2 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102ce2:	b480      	push	{r7}
 8102ce4:	b083      	sub	sp, #12
 8102ce6:	af00      	add	r7, sp, #0
 8102ce8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102cea:	687b      	ldr	r3, [r7, #4]
 8102cec:	4618      	mov	r0, r3
 8102cee:	370c      	adds	r7, #12
 8102cf0:	46bd      	mov	sp, r7
 8102cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cf6:	4770      	bx	lr

08102cf8 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102cf8:	b480      	push	{r7}
 8102cfa:	b083      	sub	sp, #12
 8102cfc:	af00      	add	r7, sp, #0
 8102cfe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102d00:	687b      	ldr	r3, [r7, #4]
 8102d02:	4618      	mov	r0, r3
 8102d04:	370c      	adds	r7, #12
 8102d06:	46bd      	mov	sp, r7
 8102d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d0c:	4770      	bx	lr
	...

08102d10 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8102d10:	b580      	push	{r7, lr}
 8102d12:	b084      	sub	sp, #16
 8102d14:	af00      	add	r7, sp, #0
 8102d16:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8102d18:	4b0a      	ldr	r3, [pc, #40]	@ (8102d44 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8102d1a:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8102d1c:	6878      	ldr	r0, [r7, #4]
 8102d1e:	f000 f919 	bl	8102f54 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>
 8102d22:	4603      	mov	r3, r0
 8102d24:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8102d26:	f107 0208 	add.w	r2, r7, #8
 8102d2a:	f107 030c 	add.w	r3, r7, #12
 8102d2e:	4611      	mov	r1, r2
 8102d30:	4618      	mov	r0, r3
 8102d32:	f000 f91b 	bl	8102f6c <_ZSt3minIjERKT_S2_S2_>
 8102d36:	4603      	mov	r3, r0
 8102d38:	681b      	ldr	r3, [r3, #0]
      }
 8102d3a:	4618      	mov	r0, r3
 8102d3c:	3710      	adds	r7, #16
 8102d3e:	46bd      	mov	sp, r7
 8102d40:	bd80      	pop	{r7, pc}
 8102d42:	bf00      	nop
 8102d44:	05555555 	.word	0x05555555

08102d48 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8102d48:	b480      	push	{r7}
 8102d4a:	b083      	sub	sp, #12
 8102d4c:	af00      	add	r7, sp, #0
 8102d4e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	4618      	mov	r0, r3
 8102d54:	370c      	adds	r7, #12
 8102d56:	46bd      	mov	sp, r7
 8102d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d5c:	4770      	bx	lr
	...

08102d60 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8102d60:	b580      	push	{r7, lr}
 8102d62:	b084      	sub	sp, #16
 8102d64:	af00      	add	r7, sp, #0
 8102d66:	60f8      	str	r0, [r7, #12]
 8102d68:	60b9      	str	r1, [r7, #8]
 8102d6a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8102d6c:	68f8      	ldr	r0, [r7, #12]
 8102d6e:	f000 f911 	bl	8102f94 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 8102d72:	4602      	mov	r2, r0
 8102d74:	68bb      	ldr	r3, [r7, #8]
 8102d76:	4293      	cmp	r3, r2
 8102d78:	bf8c      	ite	hi
 8102d7a:	2301      	movhi	r3, #1
 8102d7c:	2300      	movls	r3, #0
 8102d7e:	b2db      	uxtb	r3, r3
 8102d80:	2b00      	cmp	r3, #0
 8102d82:	bf14      	ite	ne
 8102d84:	2301      	movne	r3, #1
 8102d86:	2300      	moveq	r3, #0
 8102d88:	b2db      	uxtb	r3, r3
 8102d8a:	2b00      	cmp	r3, #0
 8102d8c:	d007      	beq.n	8102d9e <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8102d8e:	68bb      	ldr	r3, [r7, #8]
 8102d90:	4a09      	ldr	r2, [pc, #36]	@ (8102db8 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x58>)
 8102d92:	4293      	cmp	r3, r2
 8102d94:	d901      	bls.n	8102d9a <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8102d96:	f012 fe1a 	bl	81159ce <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8102d9a:	f012 fe15 	bl	81159c8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8102d9e:	68ba      	ldr	r2, [r7, #8]
 8102da0:	4613      	mov	r3, r2
 8102da2:	005b      	lsls	r3, r3, #1
 8102da4:	4413      	add	r3, r2
 8102da6:	00db      	lsls	r3, r3, #3
 8102da8:	4618      	mov	r0, r3
 8102daa:	f012 fd3f 	bl	811582c <_Znwj>
 8102dae:	4603      	mov	r3, r0
      }
 8102db0:	4618      	mov	r0, r3
 8102db2:	3710      	adds	r7, #16
 8102db4:	46bd      	mov	sp, r7
 8102db6:	bd80      	pop	{r7, pc}
 8102db8:	0aaaaaaa 	.word	0x0aaaaaaa

08102dbc <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8102dbc:	b5b0      	push	{r4, r5, r7, lr}
 8102dbe:	b084      	sub	sp, #16
 8102dc0:	af00      	add	r7, sp, #0
 8102dc2:	60f8      	str	r0, [r7, #12]
 8102dc4:	60b9      	str	r1, [r7, #8]
 8102dc6:	607a      	str	r2, [r7, #4]
 8102dc8:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8102dca:	68f8      	ldr	r0, [r7, #12]
 8102dcc:	f000 f8f0 	bl	8102fb0 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102dd0:	4604      	mov	r4, r0
 8102dd2:	68b8      	ldr	r0, [r7, #8]
 8102dd4:	f000 f8ec 	bl	8102fb0 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102dd8:	4605      	mov	r5, r0
 8102dda:	6878      	ldr	r0, [r7, #4]
 8102ddc:	f000 f8e8 	bl	8102fb0 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102de0:	4602      	mov	r2, r0
 8102de2:	683b      	ldr	r3, [r7, #0]
 8102de4:	4629      	mov	r1, r5
 8102de6:	4620      	mov	r0, r4
 8102de8:	f000 f8ee 	bl	8102fc8 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8102dec:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8102dee:	4618      	mov	r0, r3
 8102df0:	3710      	adds	r7, #16
 8102df2:	46bd      	mov	sp, r7
 8102df4:	bdb0      	pop	{r4, r5, r7, pc}

08102df6 <_ZNSt13move_iteratorIP8SMessageEC1ES1_>:
      move_iterator(iterator_type __i)
 8102df6:	b580      	push	{r7, lr}
 8102df8:	b082      	sub	sp, #8
 8102dfa:	af00      	add	r7, sp, #0
 8102dfc:	6078      	str	r0, [r7, #4]
 8102dfe:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8102e00:	463b      	mov	r3, r7
 8102e02:	4618      	mov	r0, r3
 8102e04:	f000 f90a 	bl	810301c <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>
 8102e08:	4603      	mov	r3, r0
 8102e0a:	681a      	ldr	r2, [r3, #0]
 8102e0c:	687b      	ldr	r3, [r7, #4]
 8102e0e:	601a      	str	r2, [r3, #0]
 8102e10:	687b      	ldr	r3, [r7, #4]
 8102e12:	4618      	mov	r0, r3
 8102e14:	3708      	adds	r7, #8
 8102e16:	46bd      	mov	sp, r7
 8102e18:	bd80      	pop	{r7, pc}

08102e1a <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8102e1a:	b580      	push	{r7, lr}
 8102e1c:	b086      	sub	sp, #24
 8102e1e:	af00      	add	r7, sp, #0
 8102e20:	60f8      	str	r0, [r7, #12]
 8102e22:	60b9      	str	r1, [r7, #8]
 8102e24:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8102e26:	2301      	movs	r3, #1
 8102e28:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8102e2a:	2301      	movs	r3, #1
 8102e2c:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8102e2e:	687a      	ldr	r2, [r7, #4]
 8102e30:	68b9      	ldr	r1, [r7, #8]
 8102e32:	68f8      	ldr	r0, [r7, #12]
 8102e34:	f000 f8fd 	bl	8103032 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>
 8102e38:	4603      	mov	r3, r0
    }
 8102e3a:	4618      	mov	r0, r3
 8102e3c:	3718      	adds	r7, #24
 8102e3e:	46bd      	mov	sp, r7
 8102e40:	bd80      	pop	{r7, pc}

08102e42 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() noexcept
 8102e42:	b480      	push	{r7}
 8102e44:	b083      	sub	sp, #12
 8102e46:	af00      	add	r7, sp, #0
 8102e48:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8102e4a:	687b      	ldr	r3, [r7, #4]
 8102e4c:	4618      	mov	r0, r3
 8102e4e:	370c      	adds	r7, #12
 8102e50:	46bd      	mov	sp, r7
 8102e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e56:	4770      	bx	lr

08102e58 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8102e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8102e5c:	b086      	sub	sp, #24
 8102e5e:	af02      	add	r7, sp, #8
 8102e60:	60f8      	str	r0, [r7, #12]
 8102e62:	60b9      	str	r1, [r7, #8]
 8102e64:	607a      	str	r2, [r7, #4]
 8102e66:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8102e68:	68bb      	ldr	r3, [r7, #8]
 8102e6a:	4619      	mov	r1, r3
 8102e6c:	2018      	movs	r0, #24
 8102e6e:	f7fd fe8e 	bl	8100b8e <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8102e72:	68f8      	ldr	r0, [r7, #12]
 8102e74:	f7ff febe 	bl	8102bf4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102e78:	4604      	mov	r4, r0
 8102e7a:	68b8      	ldr	r0, [r7, #8]
 8102e7c:	f7ff fb28 	bl	81024d0 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102e80:	4605      	mov	r5, r0
 8102e82:	6878      	ldr	r0, [r7, #4]
 8102e84:	f7ff fb41 	bl	810250a <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102e88:	4606      	mov	r6, r0
 8102e8a:	6838      	ldr	r0, [r7, #0]
 8102e8c:	f7ff fb48 	bl	8102520 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102e90:	4680      	mov	r8, r0
 8102e92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102e94:	f7ff fb4f 	bl	8102536 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102e98:	4603      	mov	r3, r0
 8102e9a:	9300      	str	r3, [sp, #0]
 8102e9c:	4643      	mov	r3, r8
 8102e9e:	4632      	mov	r2, r6
 8102ea0:	4629      	mov	r1, r5
 8102ea2:	4620      	mov	r0, r4
 8102ea4:	f000 f8d5 	bl	8103052 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8102ea8:	bf00      	nop
 8102eaa:	3710      	adds	r7, #16
 8102eac:	46bd      	mov	sp, r7
 8102eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08102eb2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8102eb2:	b480      	push	{r7}
 8102eb4:	b083      	sub	sp, #12
 8102eb6:	af00      	add	r7, sp, #0
 8102eb8:	6078      	str	r0, [r7, #4]
 8102eba:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8102ebc:	bf00      	nop
 8102ebe:	370c      	adds	r7, #12
 8102ec0:	46bd      	mov	sp, r7
 8102ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ec6:	4770      	bx	lr

08102ec8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8102ec8:	b580      	push	{r7, lr}
 8102eca:	b084      	sub	sp, #16
 8102ecc:	af00      	add	r7, sp, #0
 8102ece:	60f8      	str	r0, [r7, #12]
 8102ed0:	60b9      	str	r1, [r7, #8]
 8102ed2:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8102ed4:	687a      	ldr	r2, [r7, #4]
 8102ed6:	4613      	mov	r3, r2
 8102ed8:	005b      	lsls	r3, r3, #1
 8102eda:	4413      	add	r3, r2
 8102edc:	00db      	lsls	r3, r3, #3
 8102ede:	4619      	mov	r1, r3
 8102ee0:	68b8      	ldr	r0, [r7, #8]
 8102ee2:	f012 fca1 	bl	8115828 <_ZdlPvj>
      }
 8102ee6:	bf00      	nop
 8102ee8:	3710      	adds	r7, #16
 8102eea:	46bd      	mov	sp, r7
 8102eec:	bd80      	pop	{r7, pc}

08102eee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8102eee:	b580      	push	{r7, lr}
 8102ef0:	b082      	sub	sp, #8
 8102ef2:	af00      	add	r7, sp, #0
 8102ef4:	6078      	str	r0, [r7, #4]
 8102ef6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8102ef8:	2200      	movs	r2, #0
 8102efa:	6839      	ldr	r1, [r7, #0]
 8102efc:	6878      	ldr	r0, [r7, #4]
 8102efe:	f000 f8c7 	bl	8103090 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>
 8102f02:	4603      	mov	r3, r0
 8102f04:	4618      	mov	r0, r3
 8102f06:	3708      	adds	r7, #8
 8102f08:	46bd      	mov	sp, r7
 8102f0a:	bd80      	pop	{r7, pc}

08102f0c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8102f0c:	b590      	push	{r4, r7, lr}
 8102f0e:	b085      	sub	sp, #20
 8102f10:	af00      	add	r7, sp, #0
 8102f12:	60f8      	str	r0, [r7, #12]
 8102f14:	60b9      	str	r1, [r7, #8]
 8102f16:	607a      	str	r2, [r7, #4]
 8102f18:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8102f1a:	6878      	ldr	r0, [r7, #4]
 8102f1c:	f7fe fd3b 	bl	8101996 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102f20:	4604      	mov	r4, r0
 8102f22:	6838      	ldr	r0, [r7, #0]
 8102f24:	f7fe fd42 	bl	81019ac <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102f28:	4603      	mov	r3, r0
 8102f2a:	4622      	mov	r2, r4
 8102f2c:	68b9      	ldr	r1, [r7, #8]
 8102f2e:	68f8      	ldr	r0, [r7, #12]
 8102f30:	f000 f8dc 	bl	81030ec <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>
	}
 8102f34:	bf00      	nop
 8102f36:	3714      	adds	r7, #20
 8102f38:	46bd      	mov	sp, r7
 8102f3a:	bd90      	pop	{r4, r7, pc}

08102f3c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8102f3c:	b580      	push	{r7, lr}
 8102f3e:	b082      	sub	sp, #8
 8102f40:	af00      	add	r7, sp, #0
 8102f42:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8102f44:	6878      	ldr	r0, [r7, #4]
 8102f46:	f000 f8ef 	bl	8103128 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8102f4a:	4603      	mov	r3, r0
 8102f4c:	4618      	mov	r0, r3
 8102f4e:	3708      	adds	r7, #8
 8102f50:	46bd      	mov	sp, r7
 8102f52:	bd80      	pop	{r7, pc}

08102f54 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8102f54:	b580      	push	{r7, lr}
 8102f56:	b082      	sub	sp, #8
 8102f58:	af00      	add	r7, sp, #0
 8102f5a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8102f5c:	6878      	ldr	r0, [r7, #4]
 8102f5e:	f000 f8ee 	bl	810313e <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>
 8102f62:	4603      	mov	r3, r0
      }
 8102f64:	4618      	mov	r0, r3
 8102f66:	3708      	adds	r7, #8
 8102f68:	46bd      	mov	sp, r7
 8102f6a:	bd80      	pop	{r7, pc}

08102f6c <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8102f6c:	b480      	push	{r7}
 8102f6e:	b083      	sub	sp, #12
 8102f70:	af00      	add	r7, sp, #0
 8102f72:	6078      	str	r0, [r7, #4]
 8102f74:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8102f76:	683b      	ldr	r3, [r7, #0]
 8102f78:	681a      	ldr	r2, [r3, #0]
 8102f7a:	687b      	ldr	r3, [r7, #4]
 8102f7c:	681b      	ldr	r3, [r3, #0]
 8102f7e:	429a      	cmp	r2, r3
 8102f80:	d201      	bcs.n	8102f86 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8102f82:	683b      	ldr	r3, [r7, #0]
 8102f84:	e000      	b.n	8102f88 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8102f86:	687b      	ldr	r3, [r7, #4]
    }
 8102f88:	4618      	mov	r0, r3
 8102f8a:	370c      	adds	r7, #12
 8102f8c:	46bd      	mov	sp, r7
 8102f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f92:	4770      	bx	lr

08102f94 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8102f94:	b480      	push	{r7}
 8102f96:	b083      	sub	sp, #12
 8102f98:	af00      	add	r7, sp, #0
 8102f9a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8102f9c:	4b03      	ldr	r3, [pc, #12]	@ (8102fac <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8102f9e:	4618      	mov	r0, r3
 8102fa0:	370c      	adds	r7, #12
 8102fa2:	46bd      	mov	sp, r7
 8102fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fa8:	4770      	bx	lr
 8102faa:	bf00      	nop
 8102fac:	05555555 	.word	0x05555555

08102fb0 <_ZSt12__niter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8102fb0:	b480      	push	{r7}
 8102fb2:	b083      	sub	sp, #12
 8102fb4:	af00      	add	r7, sp, #0
 8102fb6:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	4618      	mov	r0, r3
 8102fbc:	370c      	adds	r7, #12
 8102fbe:	46bd      	mov	sp, r7
 8102fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fc4:	4770      	bx	lr
	...

08102fc8 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8102fc8:	b580      	push	{r7, lr}
 8102fca:	b086      	sub	sp, #24
 8102fcc:	af00      	add	r7, sp, #0
 8102fce:	60f8      	str	r0, [r7, #12]
 8102fd0:	60b9      	str	r1, [r7, #8]
 8102fd2:	607a      	str	r2, [r7, #4]
 8102fd4:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8102fd6:	68ba      	ldr	r2, [r7, #8]
 8102fd8:	68fb      	ldr	r3, [r7, #12]
 8102fda:	1ad3      	subs	r3, r2, r3
 8102fdc:	10db      	asrs	r3, r3, #3
 8102fde:	4a0e      	ldr	r2, [pc, #56]	@ (8103018 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x50>)
 8102fe0:	fb02 f303 	mul.w	r3, r2, r3
 8102fe4:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8102fe6:	697b      	ldr	r3, [r7, #20]
 8102fe8:	2b00      	cmp	r3, #0
 8102fea:	dd09      	ble.n	8103000 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x38>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8102fec:	697a      	ldr	r2, [r7, #20]
 8102fee:	4613      	mov	r3, r2
 8102ff0:	005b      	lsls	r3, r3, #1
 8102ff2:	4413      	add	r3, r2
 8102ff4:	00db      	lsls	r3, r3, #3
 8102ff6:	461a      	mov	r2, r3
 8102ff8:	68f9      	ldr	r1, [r7, #12]
 8102ffa:	6878      	ldr	r0, [r7, #4]
 8102ffc:	f012 ff25 	bl	8115e4a <memmove>
      return __result + __count;
 8103000:	697a      	ldr	r2, [r7, #20]
 8103002:	4613      	mov	r3, r2
 8103004:	005b      	lsls	r3, r3, #1
 8103006:	4413      	add	r3, r2
 8103008:	00db      	lsls	r3, r3, #3
 810300a:	461a      	mov	r2, r3
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	4413      	add	r3, r2
    }
 8103010:	4618      	mov	r0, r3
 8103012:	3718      	adds	r7, #24
 8103014:	46bd      	mov	sp, r7
 8103016:	bd80      	pop	{r7, pc}
 8103018:	aaaaaaab 	.word	0xaaaaaaab

0810301c <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 810301c:	b480      	push	{r7}
 810301e:	b083      	sub	sp, #12
 8103020:	af00      	add	r7, sp, #0
 8103022:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8103024:	687b      	ldr	r3, [r7, #4]
 8103026:	4618      	mov	r0, r3
 8103028:	370c      	adds	r7, #12
 810302a:	46bd      	mov	sp, r7
 810302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103030:	4770      	bx	lr

08103032 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8103032:	b580      	push	{r7, lr}
 8103034:	b084      	sub	sp, #16
 8103036:	af00      	add	r7, sp, #0
 8103038:	60f8      	str	r0, [r7, #12]
 810303a:	60b9      	str	r1, [r7, #8]
 810303c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 810303e:	687a      	ldr	r2, [r7, #4]
 8103040:	68b9      	ldr	r1, [r7, #8]
 8103042:	68f8      	ldr	r0, [r7, #12]
 8103044:	f000 f887 	bl	8103156 <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8103048:	4603      	mov	r3, r0
 810304a:	4618      	mov	r0, r3
 810304c:	3710      	adds	r7, #16
 810304e:	46bd      	mov	sp, r7
 8103050:	bd80      	pop	{r7, pc}

08103052 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8103052:	b5b0      	push	{r4, r5, r7, lr}
 8103054:	b086      	sub	sp, #24
 8103056:	af02      	add	r7, sp, #8
 8103058:	60f8      	str	r0, [r7, #12]
 810305a:	60b9      	str	r1, [r7, #8]
 810305c:	607a      	str	r2, [r7, #4]
 810305e:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8103060:	6878      	ldr	r0, [r7, #4]
 8103062:	f7ff fa52 	bl	810250a <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103066:	4604      	mov	r4, r0
 8103068:	6838      	ldr	r0, [r7, #0]
 810306a:	f7ff fa59 	bl	8102520 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810306e:	4605      	mov	r5, r0
 8103070:	6a38      	ldr	r0, [r7, #32]
 8103072:	f7ff fa60 	bl	8102536 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103076:	4603      	mov	r3, r0
 8103078:	9300      	str	r3, [sp, #0]
 810307a:	462b      	mov	r3, r5
 810307c:	4622      	mov	r2, r4
 810307e:	68b9      	ldr	r1, [r7, #8]
 8103080:	68f8      	ldr	r0, [r7, #12]
 8103082:	f000 f890 	bl	81031a6 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>
	}
 8103086:	bf00      	nop
 8103088:	3710      	adds	r7, #16
 810308a:	46bd      	mov	sp, r7
 810308c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08103090 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8103090:	b580      	push	{r7, lr}
 8103092:	b084      	sub	sp, #16
 8103094:	af00      	add	r7, sp, #0
 8103096:	60f8      	str	r0, [r7, #12]
 8103098:	60b9      	str	r1, [r7, #8]
 810309a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 810309c:	68f8      	ldr	r0, [r7, #12]
 810309e:	f000 f8ab 	bl	81031f8 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>
 81030a2:	4602      	mov	r2, r0
 81030a4:	68bb      	ldr	r3, [r7, #8]
 81030a6:	4293      	cmp	r3, r2
 81030a8:	bf8c      	ite	hi
 81030aa:	2301      	movhi	r3, #1
 81030ac:	2300      	movls	r3, #0
 81030ae:	b2db      	uxtb	r3, r3
 81030b0:	2b00      	cmp	r3, #0
 81030b2:	bf14      	ite	ne
 81030b4:	2301      	movne	r3, #1
 81030b6:	2300      	moveq	r3, #0
 81030b8:	b2db      	uxtb	r3, r3
 81030ba:	2b00      	cmp	r3, #0
 81030bc:	d007      	beq.n	81030ce <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 81030be:	68bb      	ldr	r3, [r7, #8]
 81030c0:	4a09      	ldr	r2, [pc, #36]	@ (81030e8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x58>)
 81030c2:	4293      	cmp	r3, r2
 81030c4:	d901      	bls.n	81030ca <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 81030c6:	f012 fc82 	bl	81159ce <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 81030ca:	f012 fc7d 	bl	81159c8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 81030ce:	68ba      	ldr	r2, [r7, #8]
 81030d0:	4613      	mov	r3, r2
 81030d2:	005b      	lsls	r3, r3, #1
 81030d4:	4413      	add	r3, r2
 81030d6:	00db      	lsls	r3, r3, #3
 81030d8:	4618      	mov	r0, r3
 81030da:	f012 fba7 	bl	811582c <_Znwj>
 81030de:	4603      	mov	r3, r0
      }
 81030e0:	4618      	mov	r0, r3
 81030e2:	3710      	adds	r7, #16
 81030e4:	46bd      	mov	sp, r7
 81030e6:	bd80      	pop	{r7, pc}
 81030e8:	0aaaaaaa 	.word	0x0aaaaaaa

081030ec <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 81030ec:	b5b0      	push	{r4, r5, r7, lr}
 81030ee:	b084      	sub	sp, #16
 81030f0:	af00      	add	r7, sp, #0
 81030f2:	60f8      	str	r0, [r7, #12]
 81030f4:	60b9      	str	r1, [r7, #8]
 81030f6:	607a      	str	r2, [r7, #4]
 81030f8:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 81030fa:	68bb      	ldr	r3, [r7, #8]
 81030fc:	4619      	mov	r1, r3
 81030fe:	2008      	movs	r0, #8
 8103100:	f7fd fd45 	bl	8100b8e <_ZnwjPv>
 8103104:	4604      	mov	r4, r0
 8103106:	6878      	ldr	r0, [r7, #4]
 8103108:	f7fe fc45 	bl	8101996 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810310c:	4605      	mov	r5, r0
 810310e:	6838      	ldr	r0, [r7, #0]
 8103110:	f7fe fc4c 	bl	81019ac <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8103114:	4603      	mov	r3, r0
 8103116:	461a      	mov	r2, r3
 8103118:	4629      	mov	r1, r5
 810311a:	4620      	mov	r0, r4
 810311c:	f000 f87a 	bl	8103214 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>
 8103120:	bf00      	nop
 8103122:	3710      	adds	r7, #16
 8103124:	46bd      	mov	sp, r7
 8103126:	bdb0      	pop	{r4, r5, r7, pc}

08103128 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() const noexcept
 8103128:	b480      	push	{r7}
 810312a:	b083      	sub	sp, #12
 810312c:	af00      	add	r7, sp, #0
 810312e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8103130:	687b      	ldr	r3, [r7, #4]
 8103132:	4618      	mov	r0, r3
 8103134:	370c      	adds	r7, #12
 8103136:	46bd      	mov	sp, r7
 8103138:	f85d 7b04 	ldr.w	r7, [sp], #4
 810313c:	4770      	bx	lr

0810313e <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 810313e:	b580      	push	{r7, lr}
 8103140:	b082      	sub	sp, #8
 8103142:	af00      	add	r7, sp, #0
 8103144:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8103146:	6878      	ldr	r0, [r7, #4]
 8103148:	f7ff ff24 	bl	8102f94 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 810314c:	4603      	mov	r3, r0
 810314e:	4618      	mov	r0, r3
 8103150:	3708      	adds	r7, #8
 8103152:	46bd      	mov	sp, r7
 8103154:	bd80      	pop	{r7, pc}

08103156 <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8103156:	b590      	push	{r4, r7, lr}
 8103158:	b085      	sub	sp, #20
 810315a:	af00      	add	r7, sp, #0
 810315c:	60f8      	str	r0, [r7, #12]
 810315e:	60b9      	str	r1, [r7, #8]
 8103160:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8103162:	68f8      	ldr	r0, [r7, #12]
 8103164:	f000 f86f 	bl	8103246 <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8103168:	4604      	mov	r4, r0
 810316a:	68b8      	ldr	r0, [r7, #8]
 810316c:	f000 f86b 	bl	8103246 <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8103170:	4603      	mov	r3, r0
 8103172:	687a      	ldr	r2, [r7, #4]
 8103174:	4619      	mov	r1, r3
 8103176:	4620      	mov	r0, r4
 8103178:	f000 f876 	bl	8103268 <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>
 810317c:	4603      	mov	r3, r0
    }
 810317e:	4618      	mov	r0, r3
 8103180:	3714      	adds	r7, #20
 8103182:	46bd      	mov	sp, r7
 8103184:	bd90      	pop	{r4, r7, pc}

08103186 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8103186:	b580      	push	{r7, lr}
 8103188:	b082      	sub	sp, #8
 810318a:	af00      	add	r7, sp, #0
 810318c:	6078      	str	r0, [r7, #4]
 810318e:	6039      	str	r1, [r7, #0]
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	683a      	ldr	r2, [r7, #0]
 8103194:	4611      	mov	r1, r2
 8103196:	4618      	mov	r0, r3
 8103198:	f000 f889 	bl	81032ae <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 810319c:	687b      	ldr	r3, [r7, #4]
 810319e:	4618      	mov	r0, r3
 81031a0:	3708      	adds	r7, #8
 81031a2:	46bd      	mov	sp, r7
 81031a4:	bd80      	pop	{r7, pc}

081031a6 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 81031a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 81031a8:	b087      	sub	sp, #28
 81031aa:	af00      	add	r7, sp, #0
 81031ac:	60f8      	str	r0, [r7, #12]
 81031ae:	60b9      	str	r1, [r7, #8]
 81031b0:	607a      	str	r2, [r7, #4]
 81031b2:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 81031b4:	68bb      	ldr	r3, [r7, #8]
 81031b6:	4619      	mov	r1, r3
 81031b8:	2008      	movs	r0, #8
 81031ba:	f7fd fce8 	bl	8100b8e <_ZnwjPv>
 81031be:	4604      	mov	r4, r0
 81031c0:	6878      	ldr	r0, [r7, #4]
 81031c2:	f7ff f9a2 	bl	810250a <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81031c6:	6838      	ldr	r0, [r7, #0]
 81031c8:	f7ff f9aa 	bl	8102520 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81031cc:	4602      	mov	r2, r0
 81031ce:	f107 0314 	add.w	r3, r7, #20
 81031d2:	4611      	mov	r1, r2
 81031d4:	4618      	mov	r0, r3
 81031d6:	f7ff ffd6 	bl	8103186 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 81031da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81031dc:	f7ff f9ab 	bl	8102536 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81031e0:	f107 0214 	add.w	r2, r7, #20
 81031e4:	4633      	mov	r3, r6
 81031e6:	4629      	mov	r1, r5
 81031e8:	4620      	mov	r0, r4
 81031ea:	f000 f870 	bl	81032ce <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 81031ee:	bf00      	nop
 81031f0:	371c      	adds	r7, #28
 81031f2:	46bd      	mov	sp, r7
 81031f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

081031f8 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 81031f8:	b480      	push	{r7}
 81031fa:	b083      	sub	sp, #12
 81031fc:	af00      	add	r7, sp, #0
 81031fe:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8103200:	4b03      	ldr	r3, [pc, #12]	@ (8103210 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv+0x18>)
      }
 8103202:	4618      	mov	r0, r3
 8103204:	370c      	adds	r7, #12
 8103206:	46bd      	mov	sp, r7
 8103208:	f85d 7b04 	ldr.w	r7, [sp], #4
 810320c:	4770      	bx	lr
 810320e:	bf00      	nop
 8103210:	05555555 	.word	0x05555555

08103214 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8103214:	b580      	push	{r7, lr}
 8103216:	b084      	sub	sp, #16
 8103218:	af00      	add	r7, sp, #0
 810321a:	60f8      	str	r0, [r7, #12]
 810321c:	60b9      	str	r1, [r7, #8]
 810321e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8103220:	68b8      	ldr	r0, [r7, #8]
 8103222:	f7fe fbb8 	bl	8101996 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8103226:	4603      	mov	r3, r0
 8103228:	781a      	ldrb	r2, [r3, #0]
 810322a:	68fb      	ldr	r3, [r7, #12]
 810322c:	701a      	strb	r2, [r3, #0]
 810322e:	6878      	ldr	r0, [r7, #4]
 8103230:	f7fe fbbc 	bl	81019ac <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8103234:	4603      	mov	r3, r0
 8103236:	681a      	ldr	r2, [r3, #0]
 8103238:	68fb      	ldr	r3, [r7, #12]
 810323a:	605a      	str	r2, [r3, #4]
 810323c:	68fb      	ldr	r3, [r7, #12]
 810323e:	4618      	mov	r0, r3
 8103240:	3710      	adds	r7, #16
 8103242:	46bd      	mov	sp, r7
 8103244:	bd80      	pop	{r7, pc}

08103246 <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8103246:	b580      	push	{r7, lr}
 8103248:	b082      	sub	sp, #8
 810324a:	af00      	add	r7, sp, #0
 810324c:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 810324e:	1d3b      	adds	r3, r7, #4
 8103250:	4618      	mov	r0, r3
 8103252:	f000 f850 	bl	81032f6 <_ZNKSt13move_iteratorIP8SMessageE4baseEv>
 8103256:	4603      	mov	r3, r0
 8103258:	4618      	mov	r0, r3
 810325a:	f000 f858 	bl	810330e <_ZSt12__miter_baseIP8SMessageET_S2_>
 810325e:	4603      	mov	r3, r0
 8103260:	4618      	mov	r0, r3
 8103262:	3708      	adds	r7, #8
 8103264:	46bd      	mov	sp, r7
 8103266:	bd80      	pop	{r7, pc}

08103268 <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8103268:	b5b0      	push	{r4, r5, r7, lr}
 810326a:	b084      	sub	sp, #16
 810326c:	af00      	add	r7, sp, #0
 810326e:	60f8      	str	r0, [r7, #12]
 8103270:	60b9      	str	r1, [r7, #8]
 8103272:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8103274:	68f8      	ldr	r0, [r7, #12]
 8103276:	f7ff fe9b 	bl	8102fb0 <_ZSt12__niter_baseIP8SMessageET_S2_>
 810327a:	4604      	mov	r4, r0
 810327c:	68b8      	ldr	r0, [r7, #8]
 810327e:	f7ff fe97 	bl	8102fb0 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8103282:	4605      	mov	r5, r0
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	4618      	mov	r0, r3
 8103288:	f7ff fe92 	bl	8102fb0 <_ZSt12__niter_baseIP8SMessageET_S2_>
 810328c:	4603      	mov	r3, r0
 810328e:	461a      	mov	r2, r3
 8103290:	4629      	mov	r1, r5
 8103292:	4620      	mov	r0, r4
 8103294:	f000 f846 	bl	8103324 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 8103298:	4602      	mov	r2, r0
 810329a:	1d3b      	adds	r3, r7, #4
 810329c:	4611      	mov	r1, r2
 810329e:	4618      	mov	r0, r3
 81032a0:	f000 f850 	bl	8103344 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>
 81032a4:	4603      	mov	r3, r0
    }
 81032a6:	4618      	mov	r0, r3
 81032a8:	3710      	adds	r7, #16
 81032aa:	46bd      	mov	sp, r7
 81032ac:	bdb0      	pop	{r4, r5, r7, pc}

081032ae <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 81032ae:	b480      	push	{r7}
 81032b0:	b083      	sub	sp, #12
 81032b2:	af00      	add	r7, sp, #0
 81032b4:	6078      	str	r0, [r7, #4]
 81032b6:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 81032b8:	687b      	ldr	r3, [r7, #4]
 81032ba:	683a      	ldr	r2, [r7, #0]
 81032bc:	6812      	ldr	r2, [r2, #0]
 81032be:	601a      	str	r2, [r3, #0]
      { }
 81032c0:	687b      	ldr	r3, [r7, #4]
 81032c2:	4618      	mov	r0, r3
 81032c4:	370c      	adds	r7, #12
 81032c6:	46bd      	mov	sp, r7
 81032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032cc:	4770      	bx	lr

081032ce <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 81032ce:	b5b0      	push	{r4, r5, r7, lr}
 81032d0:	b086      	sub	sp, #24
 81032d2:	af02      	add	r7, sp, #8
 81032d4:	60f8      	str	r0, [r7, #12]
 81032d6:	7239      	strb	r1, [r7, #8]
 81032d8:	607a      	str	r2, [r7, #4]
 81032da:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 81032dc:	463a      	mov	r2, r7
 81032de:	f88d 4000 	strb.w	r4, [sp]
 81032e2:	462b      	mov	r3, r5
 81032e4:	6879      	ldr	r1, [r7, #4]
 81032e6:	68f8      	ldr	r0, [r7, #12]
 81032e8:	f000 f838 	bl	810335c <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 81032ec:	68fb      	ldr	r3, [r7, #12]
 81032ee:	4618      	mov	r0, r3
 81032f0:	3710      	adds	r7, #16
 81032f2:	46bd      	mov	sp, r7
 81032f4:	bdb0      	pop	{r4, r5, r7, pc}

081032f6 <_ZNKSt13move_iteratorIP8SMessageE4baseEv>:
      base() const
 81032f6:	b480      	push	{r7}
 81032f8:	b083      	sub	sp, #12
 81032fa:	af00      	add	r7, sp, #0
 81032fc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 81032fe:	687b      	ldr	r3, [r7, #4]
 8103300:	681b      	ldr	r3, [r3, #0]
 8103302:	4618      	mov	r0, r3
 8103304:	370c      	adds	r7, #12
 8103306:	46bd      	mov	sp, r7
 8103308:	f85d 7b04 	ldr.w	r7, [sp], #4
 810330c:	4770      	bx	lr

0810330e <_ZSt12__miter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 810330e:	b480      	push	{r7}
 8103310:	b083      	sub	sp, #12
 8103312:	af00      	add	r7, sp, #0
 8103314:	6078      	str	r0, [r7, #4]
    { return __it; }
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	4618      	mov	r0, r3
 810331a:	370c      	adds	r7, #12
 810331c:	46bd      	mov	sp, r7
 810331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103322:	4770      	bx	lr

08103324 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8103324:	b580      	push	{r7, lr}
 8103326:	b084      	sub	sp, #16
 8103328:	af00      	add	r7, sp, #0
 810332a:	60f8      	str	r0, [r7, #12]
 810332c:	60b9      	str	r1, [r7, #8]
 810332e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8103330:	687a      	ldr	r2, [r7, #4]
 8103332:	68b9      	ldr	r1, [r7, #8]
 8103334:	68f8      	ldr	r0, [r7, #12]
 8103336:	f000 f82b 	bl	8103390 <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 810333a:	4603      	mov	r3, r0
 810333c:	4618      	mov	r0, r3
 810333e:	3710      	adds	r7, #16
 8103340:	46bd      	mov	sp, r7
 8103342:	bd80      	pop	{r7, pc}

08103344 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8103344:	b480      	push	{r7}
 8103346:	b083      	sub	sp, #12
 8103348:	af00      	add	r7, sp, #0
 810334a:	6078      	str	r0, [r7, #4]
 810334c:	6039      	str	r1, [r7, #0]
    { return __res; }
 810334e:	683b      	ldr	r3, [r7, #0]
 8103350:	4618      	mov	r0, r3
 8103352:	370c      	adds	r7, #12
 8103354:	46bd      	mov	sp, r7
 8103356:	f85d 7b04 	ldr.w	r7, [sp], #4
 810335a:	4770      	bx	lr

0810335c <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 810335c:	b580      	push	{r7, lr}
 810335e:	b084      	sub	sp, #16
 8103360:	af00      	add	r7, sp, #0
 8103362:	60f8      	str	r0, [r7, #12]
 8103364:	60b9      	str	r1, [r7, #8]
 8103366:	607a      	str	r2, [r7, #4]
 8103368:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 810336a:	68b8      	ldr	r0, [r7, #8]
 810336c:	f000 f820 	bl	81033b0 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8103370:	4603      	mov	r3, r0
 8103372:	4618      	mov	r0, r3
 8103374:	f000 f829 	bl	81033ca <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>
 8103378:	4603      	mov	r3, r0
 810337a:	781a      	ldrb	r2, [r3, #0]
 810337c:	68fb      	ldr	r3, [r7, #12]
 810337e:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8103380:	68fb      	ldr	r3, [r7, #12]
 8103382:	2200      	movs	r2, #0
 8103384:	605a      	str	r2, [r3, #4]
      { }
 8103386:	68fb      	ldr	r3, [r7, #12]
 8103388:	4618      	mov	r0, r3
 810338a:	3710      	adds	r7, #16
 810338c:	46bd      	mov	sp, r7
 810338e:	bd80      	pop	{r7, pc}

08103390 <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8103390:	b580      	push	{r7, lr}
 8103392:	b084      	sub	sp, #16
 8103394:	af00      	add	r7, sp, #0
 8103396:	60f8      	str	r0, [r7, #12]
 8103398:	60b9      	str	r1, [r7, #8]
 810339a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 810339c:	687a      	ldr	r2, [r7, #4]
 810339e:	68b9      	ldr	r1, [r7, #8]
 81033a0:	68f8      	ldr	r0, [r7, #12]
 81033a2:	f000 f81d 	bl	81033e0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>
 81033a6:	4603      	mov	r3, r0
    }
 81033a8:	4618      	mov	r0, r3
 81033aa:	3710      	adds	r7, #16
 81033ac:	46bd      	mov	sp, r7
 81033ae:	bd80      	pop	{r7, pc}

081033b0 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 81033b0:	b580      	push	{r7, lr}
 81033b2:	b082      	sub	sp, #8
 81033b4:	af00      	add	r7, sp, #0
 81033b6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 81033b8:	687b      	ldr	r3, [r7, #4]
 81033ba:	4618      	mov	r0, r3
 81033bc:	f000 f83a 	bl	8103434 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 81033c0:	4603      	mov	r3, r0
 81033c2:	4618      	mov	r0, r3
 81033c4:	3708      	adds	r7, #8
 81033c6:	46bd      	mov	sp, r7
 81033c8:	bd80      	pop	{r7, pc}

081033ca <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81033ca:	b480      	push	{r7}
 81033cc:	b083      	sub	sp, #12
 81033ce:	af00      	add	r7, sp, #0
 81033d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81033d2:	687b      	ldr	r3, [r7, #4]
 81033d4:	4618      	mov	r0, r3
 81033d6:	370c      	adds	r7, #12
 81033d8:	46bd      	mov	sp, r7
 81033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033de:	4770      	bx	lr

081033e0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 81033e0:	b580      	push	{r7, lr}
 81033e2:	b086      	sub	sp, #24
 81033e4:	af00      	add	r7, sp, #0
 81033e6:	60f8      	str	r0, [r7, #12]
 81033e8:	60b9      	str	r1, [r7, #8]
 81033ea:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 81033ec:	68ba      	ldr	r2, [r7, #8]
 81033ee:	68fb      	ldr	r3, [r7, #12]
 81033f0:	1ad3      	subs	r3, r2, r3
 81033f2:	10db      	asrs	r3, r3, #3
 81033f4:	4a0e      	ldr	r2, [pc, #56]	@ (8103430 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x50>)
 81033f6:	fb02 f303 	mul.w	r3, r2, r3
 81033fa:	617b      	str	r3, [r7, #20]
	  if (_Num)
 81033fc:	697b      	ldr	r3, [r7, #20]
 81033fe:	2b00      	cmp	r3, #0
 8103400:	d009      	beq.n	8103416 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8103402:	697a      	ldr	r2, [r7, #20]
 8103404:	4613      	mov	r3, r2
 8103406:	005b      	lsls	r3, r3, #1
 8103408:	4413      	add	r3, r2
 810340a:	00db      	lsls	r3, r3, #3
 810340c:	461a      	mov	r2, r3
 810340e:	68f9      	ldr	r1, [r7, #12]
 8103410:	6878      	ldr	r0, [r7, #4]
 8103412:	f012 fd1a 	bl	8115e4a <memmove>
	  return __result + _Num;
 8103416:	697a      	ldr	r2, [r7, #20]
 8103418:	4613      	mov	r3, r2
 810341a:	005b      	lsls	r3, r3, #1
 810341c:	4413      	add	r3, r2
 810341e:	00db      	lsls	r3, r3, #3
 8103420:	461a      	mov	r2, r3
 8103422:	687b      	ldr	r3, [r7, #4]
 8103424:	4413      	add	r3, r2
	}
 8103426:	4618      	mov	r0, r3
 8103428:	3718      	adds	r7, #24
 810342a:	46bd      	mov	sp, r7
 810342c:	bd80      	pop	{r7, pc}
 810342e:	bf00      	nop
 8103430:	aaaaaaab 	.word	0xaaaaaaab

08103434 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8103434:	b580      	push	{r7, lr}
 8103436:	b082      	sub	sp, #8
 8103438:	af00      	add	r7, sp, #0
 810343a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810343c:	6878      	ldr	r0, [r7, #4]
 810343e:	f000 f805 	bl	810344c <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>
 8103442:	4603      	mov	r3, r0
 8103444:	4618      	mov	r0, r3
 8103446:	3708      	adds	r7, #8
 8103448:	46bd      	mov	sp, r7
 810344a:	bd80      	pop	{r7, pc}

0810344c <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 810344c:	b580      	push	{r7, lr}
 810344e:	b082      	sub	sp, #8
 8103450:	af00      	add	r7, sp, #0
 8103452:	6078      	str	r0, [r7, #4]
 8103454:	687b      	ldr	r3, [r7, #4]
 8103456:	4618      	mov	r0, r3
 8103458:	f000 f805 	bl	8103466 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>
 810345c:	4603      	mov	r3, r0
 810345e:	4618      	mov	r0, r3
 8103460:	3708      	adds	r7, #8
 8103462:	46bd      	mov	sp, r7
 8103464:	bd80      	pop	{r7, pc}

08103466 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8103466:	b480      	push	{r7}
 8103468:	b083      	sub	sp, #12
 810346a:	af00      	add	r7, sp, #0
 810346c:	6078      	str	r0, [r7, #4]
 810346e:	687b      	ldr	r3, [r7, #4]
 8103470:	681b      	ldr	r3, [r3, #0]
 8103472:	4618      	mov	r0, r3
 8103474:	370c      	adds	r7, #12
 8103476:	46bd      	mov	sp, r7
 8103478:	f85d 7b04 	ldr.w	r7, [sp], #4
 810347c:	4770      	bx	lr
	...

08103480 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8103480:	b580      	push	{r7, lr}
 8103482:	b084      	sub	sp, #16
 8103484:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8103486:	4b92      	ldr	r3, [pc, #584]	@ (81036d0 <MX_LWIP_Init+0x250>)
 8103488:	22c0      	movs	r2, #192	@ 0xc0
 810348a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 810348c:	4b90      	ldr	r3, [pc, #576]	@ (81036d0 <MX_LWIP_Init+0x250>)
 810348e:	22a8      	movs	r2, #168	@ 0xa8
 8103490:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8103492:	4b8f      	ldr	r3, [pc, #572]	@ (81036d0 <MX_LWIP_Init+0x250>)
 8103494:	2201      	movs	r2, #1
 8103496:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 11;
 8103498:	4b8d      	ldr	r3, [pc, #564]	@ (81036d0 <MX_LWIP_Init+0x250>)
 810349a:	220b      	movs	r2, #11
 810349c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 810349e:	4b8d      	ldr	r3, [pc, #564]	@ (81036d4 <MX_LWIP_Init+0x254>)
 81034a0:	22ff      	movs	r2, #255	@ 0xff
 81034a2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 81034a4:	4b8b      	ldr	r3, [pc, #556]	@ (81036d4 <MX_LWIP_Init+0x254>)
 81034a6:	22ff      	movs	r2, #255	@ 0xff
 81034a8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 81034aa:	4b8a      	ldr	r3, [pc, #552]	@ (81036d4 <MX_LWIP_Init+0x254>)
 81034ac:	22ff      	movs	r2, #255	@ 0xff
 81034ae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 81034b0:	4b88      	ldr	r3, [pc, #544]	@ (81036d4 <MX_LWIP_Init+0x254>)
 81034b2:	2200      	movs	r2, #0
 81034b4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 81034b6:	4b88      	ldr	r3, [pc, #544]	@ (81036d8 <MX_LWIP_Init+0x258>)
 81034b8:	2200      	movs	r2, #0
 81034ba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 81034bc:	4b86      	ldr	r3, [pc, #536]	@ (81036d8 <MX_LWIP_Init+0x258>)
 81034be:	2200      	movs	r2, #0
 81034c0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 81034c2:	4b85      	ldr	r3, [pc, #532]	@ (81036d8 <MX_LWIP_Init+0x258>)
 81034c4:	2200      	movs	r2, #0
 81034c6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 81034c8:	4b83      	ldr	r3, [pc, #524]	@ (81036d8 <MX_LWIP_Init+0x258>)
 81034ca:	2200      	movs	r2, #0
 81034cc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 81034ce:	2100      	movs	r1, #0
 81034d0:	2000      	movs	r0, #0
 81034d2:	f011 fe07 	bl	81150e4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 81034d6:	4b7e      	ldr	r3, [pc, #504]	@ (81036d0 <MX_LWIP_Init+0x250>)
 81034d8:	781b      	ldrb	r3, [r3, #0]
 81034da:	061a      	lsls	r2, r3, #24
 81034dc:	4b7c      	ldr	r3, [pc, #496]	@ (81036d0 <MX_LWIP_Init+0x250>)
 81034de:	785b      	ldrb	r3, [r3, #1]
 81034e0:	041b      	lsls	r3, r3, #16
 81034e2:	431a      	orrs	r2, r3
 81034e4:	4b7a      	ldr	r3, [pc, #488]	@ (81036d0 <MX_LWIP_Init+0x250>)
 81034e6:	789b      	ldrb	r3, [r3, #2]
 81034e8:	021b      	lsls	r3, r3, #8
 81034ea:	4313      	orrs	r3, r2
 81034ec:	4a78      	ldr	r2, [pc, #480]	@ (81036d0 <MX_LWIP_Init+0x250>)
 81034ee:	78d2      	ldrb	r2, [r2, #3]
 81034f0:	4313      	orrs	r3, r2
 81034f2:	061a      	lsls	r2, r3, #24
 81034f4:	4b76      	ldr	r3, [pc, #472]	@ (81036d0 <MX_LWIP_Init+0x250>)
 81034f6:	781b      	ldrb	r3, [r3, #0]
 81034f8:	0619      	lsls	r1, r3, #24
 81034fa:	4b75      	ldr	r3, [pc, #468]	@ (81036d0 <MX_LWIP_Init+0x250>)
 81034fc:	785b      	ldrb	r3, [r3, #1]
 81034fe:	041b      	lsls	r3, r3, #16
 8103500:	4319      	orrs	r1, r3
 8103502:	4b73      	ldr	r3, [pc, #460]	@ (81036d0 <MX_LWIP_Init+0x250>)
 8103504:	789b      	ldrb	r3, [r3, #2]
 8103506:	021b      	lsls	r3, r3, #8
 8103508:	430b      	orrs	r3, r1
 810350a:	4971      	ldr	r1, [pc, #452]	@ (81036d0 <MX_LWIP_Init+0x250>)
 810350c:	78c9      	ldrb	r1, [r1, #3]
 810350e:	430b      	orrs	r3, r1
 8103510:	021b      	lsls	r3, r3, #8
 8103512:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8103516:	431a      	orrs	r2, r3
 8103518:	4b6d      	ldr	r3, [pc, #436]	@ (81036d0 <MX_LWIP_Init+0x250>)
 810351a:	781b      	ldrb	r3, [r3, #0]
 810351c:	0619      	lsls	r1, r3, #24
 810351e:	4b6c      	ldr	r3, [pc, #432]	@ (81036d0 <MX_LWIP_Init+0x250>)
 8103520:	785b      	ldrb	r3, [r3, #1]
 8103522:	041b      	lsls	r3, r3, #16
 8103524:	4319      	orrs	r1, r3
 8103526:	4b6a      	ldr	r3, [pc, #424]	@ (81036d0 <MX_LWIP_Init+0x250>)
 8103528:	789b      	ldrb	r3, [r3, #2]
 810352a:	021b      	lsls	r3, r3, #8
 810352c:	430b      	orrs	r3, r1
 810352e:	4968      	ldr	r1, [pc, #416]	@ (81036d0 <MX_LWIP_Init+0x250>)
 8103530:	78c9      	ldrb	r1, [r1, #3]
 8103532:	430b      	orrs	r3, r1
 8103534:	0a1b      	lsrs	r3, r3, #8
 8103536:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 810353a:	431a      	orrs	r2, r3
 810353c:	4b64      	ldr	r3, [pc, #400]	@ (81036d0 <MX_LWIP_Init+0x250>)
 810353e:	781b      	ldrb	r3, [r3, #0]
 8103540:	0619      	lsls	r1, r3, #24
 8103542:	4b63      	ldr	r3, [pc, #396]	@ (81036d0 <MX_LWIP_Init+0x250>)
 8103544:	785b      	ldrb	r3, [r3, #1]
 8103546:	041b      	lsls	r3, r3, #16
 8103548:	4319      	orrs	r1, r3
 810354a:	4b61      	ldr	r3, [pc, #388]	@ (81036d0 <MX_LWIP_Init+0x250>)
 810354c:	789b      	ldrb	r3, [r3, #2]
 810354e:	021b      	lsls	r3, r3, #8
 8103550:	430b      	orrs	r3, r1
 8103552:	495f      	ldr	r1, [pc, #380]	@ (81036d0 <MX_LWIP_Init+0x250>)
 8103554:	78c9      	ldrb	r1, [r1, #3]
 8103556:	430b      	orrs	r3, r1
 8103558:	0e1b      	lsrs	r3, r3, #24
 810355a:	4313      	orrs	r3, r2
 810355c:	4a5f      	ldr	r2, [pc, #380]	@ (81036dc <MX_LWIP_Init+0x25c>)
 810355e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8103560:	4b5c      	ldr	r3, [pc, #368]	@ (81036d4 <MX_LWIP_Init+0x254>)
 8103562:	781b      	ldrb	r3, [r3, #0]
 8103564:	061a      	lsls	r2, r3, #24
 8103566:	4b5b      	ldr	r3, [pc, #364]	@ (81036d4 <MX_LWIP_Init+0x254>)
 8103568:	785b      	ldrb	r3, [r3, #1]
 810356a:	041b      	lsls	r3, r3, #16
 810356c:	431a      	orrs	r2, r3
 810356e:	4b59      	ldr	r3, [pc, #356]	@ (81036d4 <MX_LWIP_Init+0x254>)
 8103570:	789b      	ldrb	r3, [r3, #2]
 8103572:	021b      	lsls	r3, r3, #8
 8103574:	4313      	orrs	r3, r2
 8103576:	4a57      	ldr	r2, [pc, #348]	@ (81036d4 <MX_LWIP_Init+0x254>)
 8103578:	78d2      	ldrb	r2, [r2, #3]
 810357a:	4313      	orrs	r3, r2
 810357c:	061a      	lsls	r2, r3, #24
 810357e:	4b55      	ldr	r3, [pc, #340]	@ (81036d4 <MX_LWIP_Init+0x254>)
 8103580:	781b      	ldrb	r3, [r3, #0]
 8103582:	0619      	lsls	r1, r3, #24
 8103584:	4b53      	ldr	r3, [pc, #332]	@ (81036d4 <MX_LWIP_Init+0x254>)
 8103586:	785b      	ldrb	r3, [r3, #1]
 8103588:	041b      	lsls	r3, r3, #16
 810358a:	4319      	orrs	r1, r3
 810358c:	4b51      	ldr	r3, [pc, #324]	@ (81036d4 <MX_LWIP_Init+0x254>)
 810358e:	789b      	ldrb	r3, [r3, #2]
 8103590:	021b      	lsls	r3, r3, #8
 8103592:	430b      	orrs	r3, r1
 8103594:	494f      	ldr	r1, [pc, #316]	@ (81036d4 <MX_LWIP_Init+0x254>)
 8103596:	78c9      	ldrb	r1, [r1, #3]
 8103598:	430b      	orrs	r3, r1
 810359a:	021b      	lsls	r3, r3, #8
 810359c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 81035a0:	431a      	orrs	r2, r3
 81035a2:	4b4c      	ldr	r3, [pc, #304]	@ (81036d4 <MX_LWIP_Init+0x254>)
 81035a4:	781b      	ldrb	r3, [r3, #0]
 81035a6:	0619      	lsls	r1, r3, #24
 81035a8:	4b4a      	ldr	r3, [pc, #296]	@ (81036d4 <MX_LWIP_Init+0x254>)
 81035aa:	785b      	ldrb	r3, [r3, #1]
 81035ac:	041b      	lsls	r3, r3, #16
 81035ae:	4319      	orrs	r1, r3
 81035b0:	4b48      	ldr	r3, [pc, #288]	@ (81036d4 <MX_LWIP_Init+0x254>)
 81035b2:	789b      	ldrb	r3, [r3, #2]
 81035b4:	021b      	lsls	r3, r3, #8
 81035b6:	430b      	orrs	r3, r1
 81035b8:	4946      	ldr	r1, [pc, #280]	@ (81036d4 <MX_LWIP_Init+0x254>)
 81035ba:	78c9      	ldrb	r1, [r1, #3]
 81035bc:	430b      	orrs	r3, r1
 81035be:	0a1b      	lsrs	r3, r3, #8
 81035c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 81035c4:	431a      	orrs	r2, r3
 81035c6:	4b43      	ldr	r3, [pc, #268]	@ (81036d4 <MX_LWIP_Init+0x254>)
 81035c8:	781b      	ldrb	r3, [r3, #0]
 81035ca:	0619      	lsls	r1, r3, #24
 81035cc:	4b41      	ldr	r3, [pc, #260]	@ (81036d4 <MX_LWIP_Init+0x254>)
 81035ce:	785b      	ldrb	r3, [r3, #1]
 81035d0:	041b      	lsls	r3, r3, #16
 81035d2:	4319      	orrs	r1, r3
 81035d4:	4b3f      	ldr	r3, [pc, #252]	@ (81036d4 <MX_LWIP_Init+0x254>)
 81035d6:	789b      	ldrb	r3, [r3, #2]
 81035d8:	021b      	lsls	r3, r3, #8
 81035da:	430b      	orrs	r3, r1
 81035dc:	493d      	ldr	r1, [pc, #244]	@ (81036d4 <MX_LWIP_Init+0x254>)
 81035de:	78c9      	ldrb	r1, [r1, #3]
 81035e0:	430b      	orrs	r3, r1
 81035e2:	0e1b      	lsrs	r3, r3, #24
 81035e4:	4313      	orrs	r3, r2
 81035e6:	4a3e      	ldr	r2, [pc, #248]	@ (81036e0 <MX_LWIP_Init+0x260>)
 81035e8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 81035ea:	4b3b      	ldr	r3, [pc, #236]	@ (81036d8 <MX_LWIP_Init+0x258>)
 81035ec:	781b      	ldrb	r3, [r3, #0]
 81035ee:	061a      	lsls	r2, r3, #24
 81035f0:	4b39      	ldr	r3, [pc, #228]	@ (81036d8 <MX_LWIP_Init+0x258>)
 81035f2:	785b      	ldrb	r3, [r3, #1]
 81035f4:	041b      	lsls	r3, r3, #16
 81035f6:	431a      	orrs	r2, r3
 81035f8:	4b37      	ldr	r3, [pc, #220]	@ (81036d8 <MX_LWIP_Init+0x258>)
 81035fa:	789b      	ldrb	r3, [r3, #2]
 81035fc:	021b      	lsls	r3, r3, #8
 81035fe:	4313      	orrs	r3, r2
 8103600:	4a35      	ldr	r2, [pc, #212]	@ (81036d8 <MX_LWIP_Init+0x258>)
 8103602:	78d2      	ldrb	r2, [r2, #3]
 8103604:	4313      	orrs	r3, r2
 8103606:	061a      	lsls	r2, r3, #24
 8103608:	4b33      	ldr	r3, [pc, #204]	@ (81036d8 <MX_LWIP_Init+0x258>)
 810360a:	781b      	ldrb	r3, [r3, #0]
 810360c:	0619      	lsls	r1, r3, #24
 810360e:	4b32      	ldr	r3, [pc, #200]	@ (81036d8 <MX_LWIP_Init+0x258>)
 8103610:	785b      	ldrb	r3, [r3, #1]
 8103612:	041b      	lsls	r3, r3, #16
 8103614:	4319      	orrs	r1, r3
 8103616:	4b30      	ldr	r3, [pc, #192]	@ (81036d8 <MX_LWIP_Init+0x258>)
 8103618:	789b      	ldrb	r3, [r3, #2]
 810361a:	021b      	lsls	r3, r3, #8
 810361c:	430b      	orrs	r3, r1
 810361e:	492e      	ldr	r1, [pc, #184]	@ (81036d8 <MX_LWIP_Init+0x258>)
 8103620:	78c9      	ldrb	r1, [r1, #3]
 8103622:	430b      	orrs	r3, r1
 8103624:	021b      	lsls	r3, r3, #8
 8103626:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810362a:	431a      	orrs	r2, r3
 810362c:	4b2a      	ldr	r3, [pc, #168]	@ (81036d8 <MX_LWIP_Init+0x258>)
 810362e:	781b      	ldrb	r3, [r3, #0]
 8103630:	0619      	lsls	r1, r3, #24
 8103632:	4b29      	ldr	r3, [pc, #164]	@ (81036d8 <MX_LWIP_Init+0x258>)
 8103634:	785b      	ldrb	r3, [r3, #1]
 8103636:	041b      	lsls	r3, r3, #16
 8103638:	4319      	orrs	r1, r3
 810363a:	4b27      	ldr	r3, [pc, #156]	@ (81036d8 <MX_LWIP_Init+0x258>)
 810363c:	789b      	ldrb	r3, [r3, #2]
 810363e:	021b      	lsls	r3, r3, #8
 8103640:	430b      	orrs	r3, r1
 8103642:	4925      	ldr	r1, [pc, #148]	@ (81036d8 <MX_LWIP_Init+0x258>)
 8103644:	78c9      	ldrb	r1, [r1, #3]
 8103646:	430b      	orrs	r3, r1
 8103648:	0a1b      	lsrs	r3, r3, #8
 810364a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 810364e:	431a      	orrs	r2, r3
 8103650:	4b21      	ldr	r3, [pc, #132]	@ (81036d8 <MX_LWIP_Init+0x258>)
 8103652:	781b      	ldrb	r3, [r3, #0]
 8103654:	0619      	lsls	r1, r3, #24
 8103656:	4b20      	ldr	r3, [pc, #128]	@ (81036d8 <MX_LWIP_Init+0x258>)
 8103658:	785b      	ldrb	r3, [r3, #1]
 810365a:	041b      	lsls	r3, r3, #16
 810365c:	4319      	orrs	r1, r3
 810365e:	4b1e      	ldr	r3, [pc, #120]	@ (81036d8 <MX_LWIP_Init+0x258>)
 8103660:	789b      	ldrb	r3, [r3, #2]
 8103662:	021b      	lsls	r3, r3, #8
 8103664:	430b      	orrs	r3, r1
 8103666:	491c      	ldr	r1, [pc, #112]	@ (81036d8 <MX_LWIP_Init+0x258>)
 8103668:	78c9      	ldrb	r1, [r1, #3]
 810366a:	430b      	orrs	r3, r1
 810366c:	0e1b      	lsrs	r3, r3, #24
 810366e:	4313      	orrs	r3, r2
 8103670:	4a1c      	ldr	r2, [pc, #112]	@ (81036e4 <MX_LWIP_Init+0x264>)
 8103672:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8103674:	4b1c      	ldr	r3, [pc, #112]	@ (81036e8 <MX_LWIP_Init+0x268>)
 8103676:	9302      	str	r3, [sp, #8]
 8103678:	4b1c      	ldr	r3, [pc, #112]	@ (81036ec <MX_LWIP_Init+0x26c>)
 810367a:	9301      	str	r3, [sp, #4]
 810367c:	2300      	movs	r3, #0
 810367e:	9300      	str	r3, [sp, #0]
 8103680:	4b18      	ldr	r3, [pc, #96]	@ (81036e4 <MX_LWIP_Init+0x264>)
 8103682:	4a17      	ldr	r2, [pc, #92]	@ (81036e0 <MX_LWIP_Init+0x260>)
 8103684:	4915      	ldr	r1, [pc, #84]	@ (81036dc <MX_LWIP_Init+0x25c>)
 8103686:	481a      	ldr	r0, [pc, #104]	@ (81036f0 <MX_LWIP_Init+0x270>)
 8103688:	f00b f89c 	bl	810e7c4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 810368c:	4818      	ldr	r0, [pc, #96]	@ (81036f0 <MX_LWIP_Init+0x270>)
 810368e:	f00b fa4b 	bl	810eb28 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8103692:	4817      	ldr	r0, [pc, #92]	@ (81036f0 <MX_LWIP_Init+0x270>)
 8103694:	f00b fa58 	bl	810eb48 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8103698:	4916      	ldr	r1, [pc, #88]	@ (81036f4 <MX_LWIP_Init+0x274>)
 810369a:	4815      	ldr	r0, [pc, #84]	@ (81036f0 <MX_LWIP_Init+0x270>)
 810369c:	f00b fb56 	bl	810ed4c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 81036a0:	2224      	movs	r2, #36	@ 0x24
 81036a2:	2100      	movs	r1, #0
 81036a4:	4814      	ldr	r0, [pc, #80]	@ (81036f8 <MX_LWIP_Init+0x278>)
 81036a6:	f012 fbea 	bl	8115e7e <memset>
  attributes.name = "EthLink";
 81036aa:	4b13      	ldr	r3, [pc, #76]	@ (81036f8 <MX_LWIP_Init+0x278>)
 81036ac:	4a13      	ldr	r2, [pc, #76]	@ (81036fc <MX_LWIP_Init+0x27c>)
 81036ae:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 81036b0:	4b11      	ldr	r3, [pc, #68]	@ (81036f8 <MX_LWIP_Init+0x278>)
 81036b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81036b6:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 81036b8:	4b0f      	ldr	r3, [pc, #60]	@ (81036f8 <MX_LWIP_Init+0x278>)
 81036ba:	2210      	movs	r2, #16
 81036bc:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 81036be:	4a0e      	ldr	r2, [pc, #56]	@ (81036f8 <MX_LWIP_Init+0x278>)
 81036c0:	490b      	ldr	r1, [pc, #44]	@ (81036f0 <MX_LWIP_Init+0x270>)
 81036c2:	480f      	ldr	r0, [pc, #60]	@ (8103700 <MX_LWIP_Init+0x280>)
 81036c4:	f003 fd85 	bl	81071d2 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 81036c8:	bf00      	nop
 81036ca:	46bd      	mov	sp, r7
 81036cc:	bd80      	pop	{r7, pc}
 81036ce:	bf00      	nop
 81036d0:	10000154 	.word	0x10000154
 81036d4:	10000158 	.word	0x10000158
 81036d8:	1000015c 	.word	0x1000015c
 81036dc:	10000148 	.word	0x10000148
 81036e0:	1000014c 	.word	0x1000014c
 81036e4:	10000150 	.word	0x10000150
 81036e8:	08115021 	.word	0x08115021
 81036ec:	08103bed 	.word	0x08103bed
 81036f0:	10000114 	.word	0x10000114
 81036f4:	08103705 	.word	0x08103705
 81036f8:	10000160 	.word	0x10000160
 81036fc:	08116b5c 	.word	0x08116b5c
 8103700:	08103ead 	.word	0x08103ead

08103704 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8103704:	b480      	push	{r7}
 8103706:	b083      	sub	sp, #12
 8103708:	af00      	add	r7, sp, #0
 810370a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 810370c:	bf00      	nop
 810370e:	370c      	adds	r7, #12
 8103710:	46bd      	mov	sp, r7
 8103712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103716:	4770      	bx	lr

08103718 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8103718:	b580      	push	{r7, lr}
 810371a:	b082      	sub	sp, #8
 810371c:	af00      	add	r7, sp, #0
 810371e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8103720:	4b04      	ldr	r3, [pc, #16]	@ (8103734 <HAL_ETH_RxCpltCallback+0x1c>)
 8103722:	681b      	ldr	r3, [r3, #0]
 8103724:	4618      	mov	r0, r3
 8103726:	f003 ffeb 	bl	8107700 <osSemaphoreRelease>
}
 810372a:	bf00      	nop
 810372c:	3708      	adds	r7, #8
 810372e:	46bd      	mov	sp, r7
 8103730:	bd80      	pop	{r7, pc}
 8103732:	bf00      	nop
 8103734:	1000018c 	.word	0x1000018c

08103738 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8103738:	b580      	push	{r7, lr}
 810373a:	b082      	sub	sp, #8
 810373c:	af00      	add	r7, sp, #0
 810373e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8103740:	4b04      	ldr	r3, [pc, #16]	@ (8103754 <HAL_ETH_TxCpltCallback+0x1c>)
 8103742:	681b      	ldr	r3, [r3, #0]
 8103744:	4618      	mov	r0, r3
 8103746:	f003 ffdb 	bl	8107700 <osSemaphoreRelease>
}
 810374a:	bf00      	nop
 810374c:	3708      	adds	r7, #8
 810374e:	46bd      	mov	sp, r7
 8103750:	bd80      	pop	{r7, pc}
 8103752:	bf00      	nop
 8103754:	10000190 	.word	0x10000190

08103758 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8103758:	b580      	push	{r7, lr}
 810375a:	b082      	sub	sp, #8
 810375c:	af00      	add	r7, sp, #0
 810375e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8103760:	6878      	ldr	r0, [r7, #4]
 8103762:	f001 ff98 	bl	8105696 <HAL_ETH_GetDMAError>
 8103766:	4603      	mov	r3, r0
 8103768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810376c:	2b80      	cmp	r3, #128	@ 0x80
 810376e:	d104      	bne.n	810377a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8103770:	4b04      	ldr	r3, [pc, #16]	@ (8103784 <HAL_ETH_ErrorCallback+0x2c>)
 8103772:	681b      	ldr	r3, [r3, #0]
 8103774:	4618      	mov	r0, r3
 8103776:	f003 ffc3 	bl	8107700 <osSemaphoreRelease>
  }
}
 810377a:	bf00      	nop
 810377c:	3708      	adds	r7, #8
 810377e:	46bd      	mov	sp, r7
 8103780:	bd80      	pop	{r7, pc}
 8103782:	bf00      	nop
 8103784:	1000018c 	.word	0x1000018c

08103788 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8103788:	b580      	push	{r7, lr}
 810378a:	b0aa      	sub	sp, #168	@ 0xa8
 810378c:	af00      	add	r7, sp, #0
 810378e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8103790:	2300      	movs	r3, #0
 8103792:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8103796:	2300      	movs	r3, #0
 8103798:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 810379c:	2300      	movs	r3, #0
 810379e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 81037a2:	f107 0310 	add.w	r3, r7, #16
 81037a6:	2264      	movs	r2, #100	@ 0x64
 81037a8:	2100      	movs	r1, #0
 81037aa:	4618      	mov	r0, r3
 81037ac:	f012 fb67 	bl	8115e7e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 81037b0:	4b89      	ldr	r3, [pc, #548]	@ (81039d8 <low_level_init+0x250>)
 81037b2:	4a8a      	ldr	r2, [pc, #552]	@ (81039dc <low_level_init+0x254>)
 81037b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 81037b6:	2300      	movs	r3, #0
 81037b8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 81037ba:	2380      	movs	r3, #128	@ 0x80
 81037bc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 81037be:	23e1      	movs	r3, #225	@ 0xe1
 81037c0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 81037c2:	2300      	movs	r3, #0
 81037c4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 81037c6:	2300      	movs	r3, #0
 81037c8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 81037ca:	2300      	movs	r3, #0
 81037cc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 81037ce:	4a82      	ldr	r2, [pc, #520]	@ (81039d8 <low_level_init+0x250>)
 81037d0:	f107 0308 	add.w	r3, r7, #8
 81037d4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 81037d6:	4b80      	ldr	r3, [pc, #512]	@ (81039d8 <low_level_init+0x250>)
 81037d8:	2201      	movs	r2, #1
 81037da:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 81037dc:	4b7e      	ldr	r3, [pc, #504]	@ (81039d8 <low_level_init+0x250>)
 81037de:	4a80      	ldr	r2, [pc, #512]	@ (81039e0 <low_level_init+0x258>)
 81037e0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 81037e2:	4b7d      	ldr	r3, [pc, #500]	@ (81039d8 <low_level_init+0x250>)
 81037e4:	4a7f      	ldr	r2, [pc, #508]	@ (81039e4 <low_level_init+0x25c>)
 81037e6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 81037e8:	4b7b      	ldr	r3, [pc, #492]	@ (81039d8 <low_level_init+0x250>)
 81037ea:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81037ee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 81037f0:	4879      	ldr	r0, [pc, #484]	@ (81039d8 <low_level_init+0x250>)
 81037f2:	f000 ff5f 	bl	81046b4 <HAL_ETH_Init>
 81037f6:	4603      	mov	r3, r0
 81037f8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 81037fc:	2238      	movs	r2, #56	@ 0x38
 81037fe:	2100      	movs	r1, #0
 8103800:	4879      	ldr	r0, [pc, #484]	@ (81039e8 <low_level_init+0x260>)
 8103802:	f012 fb3c 	bl	8115e7e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8103806:	4b78      	ldr	r3, [pc, #480]	@ (81039e8 <low_level_init+0x260>)
 8103808:	2221      	movs	r2, #33	@ 0x21
 810380a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 810380c:	4b76      	ldr	r3, [pc, #472]	@ (81039e8 <low_level_init+0x260>)
 810380e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8103812:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8103814:	4b74      	ldr	r3, [pc, #464]	@ (81039e8 <low_level_init+0x260>)
 8103816:	2200      	movs	r2, #0
 8103818:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 810381a:	4874      	ldr	r0, [pc, #464]	@ (81039ec <low_level_init+0x264>)
 810381c:	f00a fe8c 	bl	810e538 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8103820:	687b      	ldr	r3, [r7, #4]
 8103822:	2206      	movs	r2, #6
 8103824:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8103828:	4b6b      	ldr	r3, [pc, #428]	@ (81039d8 <low_level_init+0x250>)
 810382a:	685b      	ldr	r3, [r3, #4]
 810382c:	781a      	ldrb	r2, [r3, #0]
 810382e:	687b      	ldr	r3, [r7, #4]
 8103830:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8103834:	4b68      	ldr	r3, [pc, #416]	@ (81039d8 <low_level_init+0x250>)
 8103836:	685b      	ldr	r3, [r3, #4]
 8103838:	785a      	ldrb	r2, [r3, #1]
 810383a:	687b      	ldr	r3, [r7, #4]
 810383c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8103840:	4b65      	ldr	r3, [pc, #404]	@ (81039d8 <low_level_init+0x250>)
 8103842:	685b      	ldr	r3, [r3, #4]
 8103844:	789a      	ldrb	r2, [r3, #2]
 8103846:	687b      	ldr	r3, [r7, #4]
 8103848:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 810384c:	4b62      	ldr	r3, [pc, #392]	@ (81039d8 <low_level_init+0x250>)
 810384e:	685b      	ldr	r3, [r3, #4]
 8103850:	78da      	ldrb	r2, [r3, #3]
 8103852:	687b      	ldr	r3, [r7, #4]
 8103854:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8103858:	4b5f      	ldr	r3, [pc, #380]	@ (81039d8 <low_level_init+0x250>)
 810385a:	685b      	ldr	r3, [r3, #4]
 810385c:	791a      	ldrb	r2, [r3, #4]
 810385e:	687b      	ldr	r3, [r7, #4]
 8103860:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8103864:	4b5c      	ldr	r3, [pc, #368]	@ (81039d8 <low_level_init+0x250>)
 8103866:	685b      	ldr	r3, [r3, #4]
 8103868:	795a      	ldrb	r2, [r3, #5]
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8103870:	687b      	ldr	r3, [r7, #4]
 8103872:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8103876:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8103878:	687b      	ldr	r3, [r7, #4]
 810387a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810387e:	f043 030a 	orr.w	r3, r3, #10
 8103882:	b2da      	uxtb	r2, r3
 8103884:	687b      	ldr	r3, [r7, #4]
 8103886:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 810388a:	2200      	movs	r2, #0
 810388c:	2100      	movs	r1, #0
 810388e:	2001      	movs	r0, #1
 8103890:	f003 fe5a 	bl	8107548 <osSemaphoreNew>
 8103894:	4603      	mov	r3, r0
 8103896:	4a56      	ldr	r2, [pc, #344]	@ (81039f0 <low_level_init+0x268>)
 8103898:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 810389a:	2200      	movs	r2, #0
 810389c:	2100      	movs	r1, #0
 810389e:	2001      	movs	r0, #1
 81038a0:	f003 fe52 	bl	8107548 <osSemaphoreNew>
 81038a4:	4603      	mov	r3, r0
 81038a6:	4a53      	ldr	r2, [pc, #332]	@ (81039f4 <low_level_init+0x26c>)
 81038a8:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 81038aa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 81038ae:	2224      	movs	r2, #36	@ 0x24
 81038b0:	2100      	movs	r1, #0
 81038b2:	4618      	mov	r0, r3
 81038b4:	f012 fae3 	bl	8115e7e <memset>
  attributes.name = "EthIf";
 81038b8:	4b4f      	ldr	r3, [pc, #316]	@ (81039f8 <low_level_init+0x270>)
 81038ba:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 81038bc:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 81038c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 81038c4:	2330      	movs	r3, #48	@ 0x30
 81038c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 81038ca:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 81038ce:	461a      	mov	r2, r3
 81038d0:	6879      	ldr	r1, [r7, #4]
 81038d2:	484a      	ldr	r0, [pc, #296]	@ (81039fc <low_level_init+0x274>)
 81038d4:	f003 fc7d 	bl	81071d2 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 81038d8:	4949      	ldr	r1, [pc, #292]	@ (8103a00 <low_level_init+0x278>)
 81038da:	484a      	ldr	r0, [pc, #296]	@ (8103a04 <low_level_init+0x27c>)
 81038dc:	f000 fc41 	bl	8104162 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 81038e0:	4848      	ldr	r0, [pc, #288]	@ (8103a04 <low_level_init+0x27c>)
 81038e2:	f000 fc70 	bl	81041c6 <LAN8742_Init>
 81038e6:	4603      	mov	r3, r0
 81038e8:	2b00      	cmp	r3, #0
 81038ea:	d006      	beq.n	81038fa <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 81038ec:	6878      	ldr	r0, [r7, #4]
 81038ee:	f00b f9fd 	bl	810ecec <netif_set_link_down>
    netif_set_down(netif);
 81038f2:	6878      	ldr	r0, [r7, #4]
 81038f4:	f00b f994 	bl	810ec20 <netif_set_down>
 81038f8:	e06b      	b.n	81039d2 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 81038fa:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 81038fe:	2b00      	cmp	r3, #0
 8103900:	d165      	bne.n	81039ce <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8103902:	4840      	ldr	r0, [pc, #256]	@ (8103a04 <low_level_init+0x27c>)
 8103904:	f000 fcac 	bl	8104260 <LAN8742_GetLinkState>
 8103908:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 810390c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8103910:	2b01      	cmp	r3, #1
 8103912:	dc06      	bgt.n	8103922 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8103914:	6878      	ldr	r0, [r7, #4]
 8103916:	f00b f9e9 	bl	810ecec <netif_set_link_down>
      netif_set_down(netif);
 810391a:	6878      	ldr	r0, [r7, #4]
 810391c:	f00b f980 	bl	810ec20 <netif_set_down>
 8103920:	e057      	b.n	81039d2 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8103922:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8103926:	3b02      	subs	r3, #2
 8103928:	2b03      	cmp	r3, #3
 810392a:	d82b      	bhi.n	8103984 <low_level_init+0x1fc>
 810392c:	a201      	add	r2, pc, #4	@ (adr r2, 8103934 <low_level_init+0x1ac>)
 810392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103932:	bf00      	nop
 8103934:	08103945 	.word	0x08103945
 8103938:	08103957 	.word	0x08103957
 810393c:	08103967 	.word	0x08103967
 8103940:	08103977 	.word	0x08103977
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8103944:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8103948:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 810394c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8103950:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8103954:	e01f      	b.n	8103996 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8103956:	2300      	movs	r3, #0
 8103958:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 810395c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8103960:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8103964:	e017      	b.n	8103996 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8103966:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810396a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 810396e:	2300      	movs	r3, #0
 8103970:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8103974:	e00f      	b.n	8103996 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8103976:	2300      	movs	r3, #0
 8103978:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 810397c:	2300      	movs	r3, #0
 810397e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8103982:	e008      	b.n	8103996 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8103984:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8103988:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 810398c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8103990:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8103994:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8103996:	f107 0310 	add.w	r3, r7, #16
 810399a:	4619      	mov	r1, r3
 810399c:	480e      	ldr	r0, [pc, #56]	@ (81039d8 <low_level_init+0x250>)
 810399e:	f001 fc2f 	bl	8105200 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 81039a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 81039a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 81039a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 81039ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 81039ae:	f107 0310 	add.w	r3, r7, #16
 81039b2:	4619      	mov	r1, r3
 81039b4:	4808      	ldr	r0, [pc, #32]	@ (81039d8 <low_level_init+0x250>)
 81039b6:	f001 fdf7 	bl	81055a8 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 81039ba:	4807      	ldr	r0, [pc, #28]	@ (81039d8 <low_level_init+0x250>)
 81039bc:	f000 ff78 	bl	81048b0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 81039c0:	6878      	ldr	r0, [r7, #4]
 81039c2:	f00b f8c1 	bl	810eb48 <netif_set_up>
    netif_set_link_up(netif);
 81039c6:	6878      	ldr	r0, [r7, #4]
 81039c8:	f00b f95c 	bl	810ec84 <netif_set_link_up>
 81039cc:	e001      	b.n	81039d2 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 81039ce:	f7fc feef 	bl	81007b0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 81039d2:	37a8      	adds	r7, #168	@ 0xa8
 81039d4:	46bd      	mov	sp, r7
 81039d6:	bd80      	pop	{r7, pc}
 81039d8:	10000194 	.word	0x10000194
 81039dc:	40028000 	.word	0x40028000
 81039e0:	10040100 	.word	0x10040100
 81039e4:	10040000 	.word	0x10040000
 81039e8:	10000244 	.word	0x10000244
 81039ec:	08119b10 	.word	0x08119b10
 81039f0:	1000018c 	.word	0x1000018c
 81039f4:	10000190 	.word	0x10000190
 81039f8:	08116b64 	.word	0x08116b64
 81039fc:	08103b99 	.word	0x08103b99
 8103a00:	10000000 	.word	0x10000000
 8103a04:	1000027c 	.word	0x1000027c

08103a08 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8103a08:	b580      	push	{r7, lr}
 8103a0a:	b092      	sub	sp, #72	@ 0x48
 8103a0c:	af00      	add	r7, sp, #0
 8103a0e:	6078      	str	r0, [r7, #4]
 8103a10:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8103a12:	2300      	movs	r3, #0
 8103a14:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8103a16:	2300      	movs	r3, #0
 8103a18:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8103a1a:	2300      	movs	r3, #0
 8103a1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8103a20:	f107 030c 	add.w	r3, r7, #12
 8103a24:	2230      	movs	r2, #48	@ 0x30
 8103a26:	2100      	movs	r1, #0
 8103a28:	4618      	mov	r0, r3
 8103a2a:	f012 fa28 	bl	8115e7e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8103a2e:	f107 030c 	add.w	r3, r7, #12
 8103a32:	2230      	movs	r2, #48	@ 0x30
 8103a34:	2100      	movs	r1, #0
 8103a36:	4618      	mov	r0, r3
 8103a38:	f012 fa21 	bl	8115e7e <memset>

  for(q = p; q != NULL; q = q->next)
 8103a3c:	683b      	ldr	r3, [r7, #0]
 8103a3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8103a40:	e045      	b.n	8103ace <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8103a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8103a44:	2b03      	cmp	r3, #3
 8103a46:	d902      	bls.n	8103a4e <low_level_output+0x46>
      return ERR_IF;
 8103a48:	f06f 030b 	mvn.w	r3, #11
 8103a4c:	e07f      	b.n	8103b4e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8103a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8103a50:	6859      	ldr	r1, [r3, #4]
 8103a52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8103a54:	4613      	mov	r3, r2
 8103a56:	005b      	lsls	r3, r3, #1
 8103a58:	4413      	add	r3, r2
 8103a5a:	009b      	lsls	r3, r3, #2
 8103a5c:	3348      	adds	r3, #72	@ 0x48
 8103a5e:	443b      	add	r3, r7
 8103a60:	3b3c      	subs	r3, #60	@ 0x3c
 8103a62:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8103a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8103a66:	895b      	ldrh	r3, [r3, #10]
 8103a68:	4619      	mov	r1, r3
 8103a6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8103a6c:	4613      	mov	r3, r2
 8103a6e:	005b      	lsls	r3, r3, #1
 8103a70:	4413      	add	r3, r2
 8103a72:	009b      	lsls	r3, r3, #2
 8103a74:	3348      	adds	r3, #72	@ 0x48
 8103a76:	443b      	add	r3, r7
 8103a78:	3b38      	subs	r3, #56	@ 0x38
 8103a7a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8103a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8103a7e:	2b00      	cmp	r3, #0
 8103a80:	d011      	beq.n	8103aa6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8103a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8103a84:	1e5a      	subs	r2, r3, #1
 8103a86:	f107 000c 	add.w	r0, r7, #12
 8103a8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8103a8c:	460b      	mov	r3, r1
 8103a8e:	005b      	lsls	r3, r3, #1
 8103a90:	440b      	add	r3, r1
 8103a92:	009b      	lsls	r3, r3, #2
 8103a94:	18c1      	adds	r1, r0, r3
 8103a96:	4613      	mov	r3, r2
 8103a98:	005b      	lsls	r3, r3, #1
 8103a9a:	4413      	add	r3, r2
 8103a9c:	009b      	lsls	r3, r3, #2
 8103a9e:	3348      	adds	r3, #72	@ 0x48
 8103aa0:	443b      	add	r3, r7
 8103aa2:	3b34      	subs	r3, #52	@ 0x34
 8103aa4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8103aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8103aa8:	681b      	ldr	r3, [r3, #0]
 8103aaa:	2b00      	cmp	r3, #0
 8103aac:	d109      	bne.n	8103ac2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8103aae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8103ab0:	4613      	mov	r3, r2
 8103ab2:	005b      	lsls	r3, r3, #1
 8103ab4:	4413      	add	r3, r2
 8103ab6:	009b      	lsls	r3, r3, #2
 8103ab8:	3348      	adds	r3, #72	@ 0x48
 8103aba:	443b      	add	r3, r7
 8103abc:	3b34      	subs	r3, #52	@ 0x34
 8103abe:	2200      	movs	r2, #0
 8103ac0:	601a      	str	r2, [r3, #0]
    }

    i++;
 8103ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8103ac4:	3301      	adds	r3, #1
 8103ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8103ac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	643b      	str	r3, [r7, #64]	@ 0x40
 8103ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8103ad0:	2b00      	cmp	r3, #0
 8103ad2:	d1b6      	bne.n	8103a42 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8103ad4:	683b      	ldr	r3, [r7, #0]
 8103ad6:	891b      	ldrh	r3, [r3, #8]
 8103ad8:	461a      	mov	r2, r3
 8103ada:	4b1f      	ldr	r3, [pc, #124]	@ (8103b58 <low_level_output+0x150>)
 8103adc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8103ade:	4a1e      	ldr	r2, [pc, #120]	@ (8103b58 <low_level_output+0x150>)
 8103ae0:	f107 030c 	add.w	r3, r7, #12
 8103ae4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8103ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8103b58 <low_level_output+0x150>)
 8103ae8:	683b      	ldr	r3, [r7, #0]
 8103aea:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8103aec:	6838      	ldr	r0, [r7, #0]
 8103aee:	f00b fd81 	bl	810f5f4 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8103af2:	4919      	ldr	r1, [pc, #100]	@ (8103b58 <low_level_output+0x150>)
 8103af4:	4819      	ldr	r0, [pc, #100]	@ (8103b5c <low_level_output+0x154>)
 8103af6:	f000 ffc8 	bl	8104a8a <HAL_ETH_Transmit_IT>
 8103afa:	4603      	mov	r3, r0
 8103afc:	2b00      	cmp	r3, #0
 8103afe:	d103      	bne.n	8103b08 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8103b00:	2300      	movs	r3, #0
 8103b02:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8103b06:	e01b      	b.n	8103b40 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8103b08:	4814      	ldr	r0, [pc, #80]	@ (8103b5c <low_level_output+0x154>)
 8103b0a:	f001 fdb7 	bl	810567c <HAL_ETH_GetError>
 8103b0e:	4603      	mov	r3, r0
 8103b10:	f003 0302 	and.w	r3, r3, #2
 8103b14:	2b00      	cmp	r3, #0
 8103b16:	d00d      	beq.n	8103b34 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8103b18:	4b11      	ldr	r3, [pc, #68]	@ (8103b60 <low_level_output+0x158>)
 8103b1a:	681b      	ldr	r3, [r3, #0]
 8103b1c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8103b20:	4618      	mov	r0, r3
 8103b22:	f003 fd9b 	bl	810765c <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8103b26:	480d      	ldr	r0, [pc, #52]	@ (8103b5c <low_level_output+0x154>)
 8103b28:	f001 f936 	bl	8104d98 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8103b2c:	23fe      	movs	r3, #254	@ 0xfe
 8103b2e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8103b32:	e005      	b.n	8103b40 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8103b34:	6838      	ldr	r0, [r7, #0]
 8103b36:	f00b fcb7 	bl	810f4a8 <pbuf_free>
        errval =  ERR_IF;
 8103b3a:	23f4      	movs	r3, #244	@ 0xf4
 8103b3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8103b40:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8103b44:	f113 0f02 	cmn.w	r3, #2
 8103b48:	d0d3      	beq.n	8103af2 <low_level_output+0xea>

  return errval;
 8103b4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8103b4e:	4618      	mov	r0, r3
 8103b50:	3748      	adds	r7, #72	@ 0x48
 8103b52:	46bd      	mov	sp, r7
 8103b54:	bd80      	pop	{r7, pc}
 8103b56:	bf00      	nop
 8103b58:	10000244 	.word	0x10000244
 8103b5c:	10000194 	.word	0x10000194
 8103b60:	10000190 	.word	0x10000190

08103b64 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8103b64:	b580      	push	{r7, lr}
 8103b66:	b084      	sub	sp, #16
 8103b68:	af00      	add	r7, sp, #0
 8103b6a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8103b6c:	2300      	movs	r3, #0
 8103b6e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8103b70:	4b07      	ldr	r3, [pc, #28]	@ (8103b90 <low_level_input+0x2c>)
 8103b72:	781b      	ldrb	r3, [r3, #0]
 8103b74:	2b00      	cmp	r3, #0
 8103b76:	d105      	bne.n	8103b84 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8103b78:	f107 030c 	add.w	r3, r7, #12
 8103b7c:	4619      	mov	r1, r3
 8103b7e:	4805      	ldr	r0, [pc, #20]	@ (8103b94 <low_level_input+0x30>)
 8103b80:	f000 ffd4 	bl	8104b2c <HAL_ETH_ReadData>
  }

  return p;
 8103b84:	68fb      	ldr	r3, [r7, #12]
}
 8103b86:	4618      	mov	r0, r3
 8103b88:	3710      	adds	r7, #16
 8103b8a:	46bd      	mov	sp, r7
 8103b8c:	bd80      	pop	{r7, pc}
 8103b8e:	bf00      	nop
 8103b90:	10000188 	.word	0x10000188
 8103b94:	10000194 	.word	0x10000194

08103b98 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8103b98:	b580      	push	{r7, lr}
 8103b9a:	b084      	sub	sp, #16
 8103b9c:	af00      	add	r7, sp, #0
 8103b9e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8103ba0:	2300      	movs	r3, #0
 8103ba2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8103ba4:	687b      	ldr	r3, [r7, #4]
 8103ba6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8103ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8103be8 <ethernetif_input+0x50>)
 8103baa:	681b      	ldr	r3, [r3, #0]
 8103bac:	f04f 31ff 	mov.w	r1, #4294967295
 8103bb0:	4618      	mov	r0, r3
 8103bb2:	f003 fd53 	bl	810765c <osSemaphoreAcquire>
 8103bb6:	4603      	mov	r3, r0
 8103bb8:	2b00      	cmp	r3, #0
 8103bba:	d1f5      	bne.n	8103ba8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8103bbc:	68b8      	ldr	r0, [r7, #8]
 8103bbe:	f7ff ffd1 	bl	8103b64 <low_level_input>
 8103bc2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8103bc4:	68fb      	ldr	r3, [r7, #12]
 8103bc6:	2b00      	cmp	r3, #0
 8103bc8:	d00a      	beq.n	8103be0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8103bca:	68bb      	ldr	r3, [r7, #8]
 8103bcc:	691b      	ldr	r3, [r3, #16]
 8103bce:	68b9      	ldr	r1, [r7, #8]
 8103bd0:	68f8      	ldr	r0, [r7, #12]
 8103bd2:	4798      	blx	r3
 8103bd4:	4603      	mov	r3, r0
 8103bd6:	2b00      	cmp	r3, #0
 8103bd8:	d002      	beq.n	8103be0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8103bda:	68f8      	ldr	r0, [r7, #12]
 8103bdc:	f00b fc64 	bl	810f4a8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8103be0:	68fb      	ldr	r3, [r7, #12]
 8103be2:	2b00      	cmp	r3, #0
 8103be4:	d1ea      	bne.n	8103bbc <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8103be6:	e7df      	b.n	8103ba8 <ethernetif_input+0x10>
 8103be8:	1000018c 	.word	0x1000018c

08103bec <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8103bec:	b580      	push	{r7, lr}
 8103bee:	b082      	sub	sp, #8
 8103bf0:	af00      	add	r7, sp, #0
 8103bf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8103bf4:	687b      	ldr	r3, [r7, #4]
 8103bf6:	2b00      	cmp	r3, #0
 8103bf8:	d106      	bne.n	8103c08 <ethernetif_init+0x1c>
 8103bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8103c34 <ethernetif_init+0x48>)
 8103bfc:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8103c00:	490d      	ldr	r1, [pc, #52]	@ (8103c38 <ethernetif_init+0x4c>)
 8103c02:	480e      	ldr	r0, [pc, #56]	@ (8103c3c <ethernetif_init+0x50>)
 8103c04:	f012 f8bc 	bl	8115d80 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8103c08:	687b      	ldr	r3, [r7, #4]
 8103c0a:	2273      	movs	r2, #115	@ 0x73
 8103c0c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	2274      	movs	r2, #116	@ 0x74
 8103c14:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	4a09      	ldr	r2, [pc, #36]	@ (8103c40 <ethernetif_init+0x54>)
 8103c1c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8103c1e:	687b      	ldr	r3, [r7, #4]
 8103c20:	4a08      	ldr	r2, [pc, #32]	@ (8103c44 <ethernetif_init+0x58>)
 8103c22:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8103c24:	6878      	ldr	r0, [r7, #4]
 8103c26:	f7ff fdaf 	bl	8103788 <low_level_init>

  return ERR_OK;
 8103c2a:	2300      	movs	r3, #0
}
 8103c2c:	4618      	mov	r0, r3
 8103c2e:	3708      	adds	r7, #8
 8103c30:	46bd      	mov	sp, r7
 8103c32:	bd80      	pop	{r7, pc}
 8103c34:	08116b6c 	.word	0x08116b6c
 8103c38:	08116bcc 	.word	0x08116bcc
 8103c3c:	08116bdc 	.word	0x08116bdc
 8103c40:	0810be91 	.word	0x0810be91
 8103c44:	08103a09 	.word	0x08103a09

08103c48 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8103c48:	b580      	push	{r7, lr}
 8103c4a:	b084      	sub	sp, #16
 8103c4c:	af00      	add	r7, sp, #0
 8103c4e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8103c54:	68f9      	ldr	r1, [r7, #12]
 8103c56:	4809      	ldr	r0, [pc, #36]	@ (8103c7c <pbuf_free_custom+0x34>)
 8103c58:	f00a fd5e 	bl	810e718 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8103c5c:	4b08      	ldr	r3, [pc, #32]	@ (8103c80 <pbuf_free_custom+0x38>)
 8103c5e:	781b      	ldrb	r3, [r3, #0]
 8103c60:	2b01      	cmp	r3, #1
 8103c62:	d107      	bne.n	8103c74 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8103c64:	4b06      	ldr	r3, [pc, #24]	@ (8103c80 <pbuf_free_custom+0x38>)
 8103c66:	2200      	movs	r2, #0
 8103c68:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8103c6a:	4b06      	ldr	r3, [pc, #24]	@ (8103c84 <pbuf_free_custom+0x3c>)
 8103c6c:	681b      	ldr	r3, [r3, #0]
 8103c6e:	4618      	mov	r0, r3
 8103c70:	f003 fd46 	bl	8107700 <osSemaphoreRelease>
  }
}
 8103c74:	bf00      	nop
 8103c76:	3710      	adds	r7, #16
 8103c78:	46bd      	mov	sp, r7
 8103c7a:	bd80      	pop	{r7, pc}
 8103c7c:	08119b10 	.word	0x08119b10
 8103c80:	10000188 	.word	0x10000188
 8103c84:	1000018c 	.word	0x1000018c

08103c88 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8103c88:	b580      	push	{r7, lr}
 8103c8a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8103c8c:	f000 fbfe 	bl	810448c <HAL_GetTick>
 8103c90:	4603      	mov	r3, r0
}
 8103c92:	4618      	mov	r0, r3
 8103c94:	bd80      	pop	{r7, pc}
	...

08103c98 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8103c98:	b580      	push	{r7, lr}
 8103c9a:	b08e      	sub	sp, #56	@ 0x38
 8103c9c:	af00      	add	r7, sp, #0
 8103c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103ca0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103ca4:	2200      	movs	r2, #0
 8103ca6:	601a      	str	r2, [r3, #0]
 8103ca8:	605a      	str	r2, [r3, #4]
 8103caa:	609a      	str	r2, [r3, #8]
 8103cac:	60da      	str	r2, [r3, #12]
 8103cae:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8103cb0:	687b      	ldr	r3, [r7, #4]
 8103cb2:	681b      	ldr	r3, [r3, #0]
 8103cb4:	4a51      	ldr	r2, [pc, #324]	@ (8103dfc <HAL_ETH_MspInit+0x164>)
 8103cb6:	4293      	cmp	r3, r2
 8103cb8:	f040 809b 	bne.w	8103df2 <HAL_ETH_MspInit+0x15a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8103cbc:	4b50      	ldr	r3, [pc, #320]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103cbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103cc2:	4a4f      	ldr	r2, [pc, #316]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103cc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8103cc8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103cd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103cd6:	623b      	str	r3, [r7, #32]
 8103cd8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8103cda:	4b49      	ldr	r3, [pc, #292]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103cdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103ce0:	4a47      	ldr	r2, [pc, #284]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8103ce6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103cea:	4b45      	ldr	r3, [pc, #276]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103cec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8103cf4:	61fb      	str	r3, [r7, #28]
 8103cf6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8103cf8:	4b41      	ldr	r3, [pc, #260]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103cfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103cfe:	4a40      	ldr	r2, [pc, #256]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103d04:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103d08:	4b3d      	ldr	r3, [pc, #244]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103d0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103d12:	61bb      	str	r3, [r7, #24]
 8103d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8103d16:	4b3a      	ldr	r3, [pc, #232]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103d1c:	4a38      	ldr	r2, [pc, #224]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8103d22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103d26:	4b36      	ldr	r3, [pc, #216]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103d30:	617b      	str	r3, [r7, #20]
 8103d32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8103d34:	4b32      	ldr	r3, [pc, #200]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103d3a:	4a31      	ldr	r2, [pc, #196]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103d3c:	f043 0304 	orr.w	r3, r3, #4
 8103d40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103d44:	4b2e      	ldr	r3, [pc, #184]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103d4a:	f003 0304 	and.w	r3, r3, #4
 8103d4e:	613b      	str	r3, [r7, #16]
 8103d50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8103d52:	4b2b      	ldr	r3, [pc, #172]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103d58:	4a29      	ldr	r2, [pc, #164]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103d5a:	f043 0301 	orr.w	r3, r3, #1
 8103d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8103d62:	4b27      	ldr	r3, [pc, #156]	@ (8103e00 <HAL_ETH_MspInit+0x168>)
 8103d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8103d68:	f003 0301 	and.w	r3, r3, #1
 8103d6c:	60fb      	str	r3, [r7, #12]
 8103d6e:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8103d70:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8103d74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103d76:	2302      	movs	r3, #2
 8103d78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103d7a:	2300      	movs	r3, #0
 8103d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8103d7e:	2303      	movs	r3, #3
 8103d80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8103d82:	230b      	movs	r3, #11
 8103d84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8103d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103d8a:	4619      	mov	r1, r3
 8103d8c:	481d      	ldr	r0, [pc, #116]	@ (8103e04 <HAL_ETH_MspInit+0x16c>)
 8103d8e:	f002 fa0f 	bl	81061b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8103d92:	2332      	movs	r3, #50	@ 0x32
 8103d94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103d96:	2302      	movs	r3, #2
 8103d98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103d9a:	2300      	movs	r3, #0
 8103d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8103d9e:	2303      	movs	r3, #3
 8103da0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8103da2:	230b      	movs	r3, #11
 8103da4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8103da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103daa:	4619      	mov	r1, r3
 8103dac:	4816      	ldr	r0, [pc, #88]	@ (8103e08 <HAL_ETH_MspInit+0x170>)
 8103dae:	f002 f9ff 	bl	81061b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 8103db2:	2386      	movs	r3, #134	@ 0x86
 8103db4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103db6:	2302      	movs	r3, #2
 8103db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103dba:	2300      	movs	r3, #0
 8103dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8103dbe:	2303      	movs	r3, #3
 8103dc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8103dc2:	230b      	movs	r3, #11
 8103dc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103dca:	4619      	mov	r1, r3
 8103dcc:	480f      	ldr	r0, [pc, #60]	@ (8103e0c <HAL_ETH_MspInit+0x174>)
 8103dce:	f002 f9ef 	bl	81061b0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8103dd2:	2200      	movs	r2, #0
 8103dd4:	2105      	movs	r1, #5
 8103dd6:	203d      	movs	r0, #61	@ 0x3d
 8103dd8:	f000 fc30 	bl	810463c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8103ddc:	203d      	movs	r0, #61	@ 0x3d
 8103dde:	f000 fc47 	bl	8104670 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 6, 0);
 8103de2:	2200      	movs	r2, #0
 8103de4:	2106      	movs	r1, #6
 8103de6:	203e      	movs	r0, #62	@ 0x3e
 8103de8:	f000 fc28 	bl	810463c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8103dec:	203e      	movs	r0, #62	@ 0x3e
 8103dee:	f000 fc3f 	bl	8104670 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8103df2:	bf00      	nop
 8103df4:	3738      	adds	r7, #56	@ 0x38
 8103df6:	46bd      	mov	sp, r7
 8103df8:	bd80      	pop	{r7, pc}
 8103dfa:	bf00      	nop
 8103dfc:	40028000 	.word	0x40028000
 8103e00:	58024400 	.word	0x58024400
 8103e04:	58021800 	.word	0x58021800
 8103e08:	58020800 	.word	0x58020800
 8103e0c:	58020000 	.word	0x58020000

08103e10 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8103e10:	b580      	push	{r7, lr}
 8103e12:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8103e14:	4802      	ldr	r0, [pc, #8]	@ (8103e20 <ETH_PHY_IO_Init+0x10>)
 8103e16:	f001 fbe1 	bl	81055dc <HAL_ETH_SetMDIOClockRange>

  return 0;
 8103e1a:	2300      	movs	r3, #0
}
 8103e1c:	4618      	mov	r0, r3
 8103e1e:	bd80      	pop	{r7, pc}
 8103e20:	10000194 	.word	0x10000194

08103e24 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8103e24:	b480      	push	{r7}
 8103e26:	af00      	add	r7, sp, #0
  return 0;
 8103e28:	2300      	movs	r3, #0
}
 8103e2a:	4618      	mov	r0, r3
 8103e2c:	46bd      	mov	sp, r7
 8103e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e32:	4770      	bx	lr

08103e34 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8103e34:	b580      	push	{r7, lr}
 8103e36:	b084      	sub	sp, #16
 8103e38:	af00      	add	r7, sp, #0
 8103e3a:	60f8      	str	r0, [r7, #12]
 8103e3c:	60b9      	str	r1, [r7, #8]
 8103e3e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8103e40:	687b      	ldr	r3, [r7, #4]
 8103e42:	68ba      	ldr	r2, [r7, #8]
 8103e44:	68f9      	ldr	r1, [r7, #12]
 8103e46:	4807      	ldr	r0, [pc, #28]	@ (8103e64 <ETH_PHY_IO_ReadReg+0x30>)
 8103e48:	f001 f932 	bl	81050b0 <HAL_ETH_ReadPHYRegister>
 8103e4c:	4603      	mov	r3, r0
 8103e4e:	2b00      	cmp	r3, #0
 8103e50:	d002      	beq.n	8103e58 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8103e52:	f04f 33ff 	mov.w	r3, #4294967295
 8103e56:	e000      	b.n	8103e5a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8103e58:	2300      	movs	r3, #0
}
 8103e5a:	4618      	mov	r0, r3
 8103e5c:	3710      	adds	r7, #16
 8103e5e:	46bd      	mov	sp, r7
 8103e60:	bd80      	pop	{r7, pc}
 8103e62:	bf00      	nop
 8103e64:	10000194 	.word	0x10000194

08103e68 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8103e68:	b580      	push	{r7, lr}
 8103e6a:	b084      	sub	sp, #16
 8103e6c:	af00      	add	r7, sp, #0
 8103e6e:	60f8      	str	r0, [r7, #12]
 8103e70:	60b9      	str	r1, [r7, #8]
 8103e72:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8103e74:	687b      	ldr	r3, [r7, #4]
 8103e76:	68ba      	ldr	r2, [r7, #8]
 8103e78:	68f9      	ldr	r1, [r7, #12]
 8103e7a:	4807      	ldr	r0, [pc, #28]	@ (8103e98 <ETH_PHY_IO_WriteReg+0x30>)
 8103e7c:	f001 f96c 	bl	8105158 <HAL_ETH_WritePHYRegister>
 8103e80:	4603      	mov	r3, r0
 8103e82:	2b00      	cmp	r3, #0
 8103e84:	d002      	beq.n	8103e8c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8103e86:	f04f 33ff 	mov.w	r3, #4294967295
 8103e8a:	e000      	b.n	8103e8e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8103e8c:	2300      	movs	r3, #0
}
 8103e8e:	4618      	mov	r0, r3
 8103e90:	3710      	adds	r7, #16
 8103e92:	46bd      	mov	sp, r7
 8103e94:	bd80      	pop	{r7, pc}
 8103e96:	bf00      	nop
 8103e98:	10000194 	.word	0x10000194

08103e9c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8103e9c:	b580      	push	{r7, lr}
 8103e9e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8103ea0:	f000 faf4 	bl	810448c <HAL_GetTick>
 8103ea4:	4603      	mov	r3, r0
}
 8103ea6:	4618      	mov	r0, r3
 8103ea8:	bd80      	pop	{r7, pc}
	...

08103eac <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8103eac:	b580      	push	{r7, lr}
 8103eae:	b0a2      	sub	sp, #136	@ 0x88
 8103eb0:	af00      	add	r7, sp, #0
 8103eb2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8103eb4:	f107 0310 	add.w	r3, r7, #16
 8103eb8:	2264      	movs	r2, #100	@ 0x64
 8103eba:	2100      	movs	r1, #0
 8103ebc:	4618      	mov	r0, r3
 8103ebe:	f011 ffde 	bl	8115e7e <memset>
  int32_t PHYLinkState = 0;
 8103ec2:	2300      	movs	r3, #0
 8103ec4:	67bb      	str	r3, [r7, #120]	@ 0x78
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8103ec6:	2300      	movs	r3, #0
 8103ec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8103ecc:	2300      	movs	r3, #0
 8103ece:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8103ed2:	2300      	movs	r3, #0
 8103ed4:	67fb      	str	r3, [r7, #124]	@ 0x7c

  struct netif *netif = (struct netif *) argument;
 8103ed6:	687b      	ldr	r3, [r7, #4]
 8103ed8:	677b      	str	r3, [r7, #116]	@ 0x74

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8103eda:	484b      	ldr	r0, [pc, #300]	@ (8104008 <ethernet_link_thread+0x15c>)
 8103edc:	f000 f9c0 	bl	8104260 <LAN8742_GetLinkState>
 8103ee0:	67b8      	str	r0, [r7, #120]	@ 0x78

  uint32_t basic_status;
  HAL_ETH_ReadPHYRegister(&heth, 0x00, 0x01, &basic_status);
 8103ee2:	f107 030c 	add.w	r3, r7, #12
 8103ee6:	2201      	movs	r2, #1
 8103ee8:	2100      	movs	r1, #0
 8103eea:	4848      	ldr	r0, [pc, #288]	@ (810400c <ethernet_link_thread+0x160>)
 8103eec:	f001 f8e0 	bl	81050b0 <HAL_ETH_ReadPHYRegister>
  printf("Basic Status Register: 0x%04lx\n", basic_status);
 8103ef0:	68fb      	ldr	r3, [r7, #12]
 8103ef2:	4619      	mov	r1, r3
 8103ef4:	4846      	ldr	r0, [pc, #280]	@ (8104010 <ethernet_link_thread+0x164>)
 8103ef6:	f011 ff43 	bl	8115d80 <iprintf>

  uint32_t scsr;
  HAL_ETH_ReadPHYRegister(&heth, 0x00, 0x1F, &scsr);
 8103efa:	f107 0308 	add.w	r3, r7, #8
 8103efe:	221f      	movs	r2, #31
 8103f00:	2100      	movs	r1, #0
 8103f02:	4842      	ldr	r0, [pc, #264]	@ (810400c <ethernet_link_thread+0x160>)
 8103f04:	f001 f8d4 	bl	81050b0 <HAL_ETH_ReadPHYRegister>
  printf("Special Control/Status Register: 0x%04lx\n", scsr);
 8103f08:	68bb      	ldr	r3, [r7, #8]
 8103f0a:	4619      	mov	r1, r3
 8103f0c:	4841      	ldr	r0, [pc, #260]	@ (8104014 <ethernet_link_thread+0x168>)
 8103f0e:	f011 ff37 	bl	8115d80 <iprintf>



  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8103f12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8103f14:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8103f18:	089b      	lsrs	r3, r3, #2
 8103f1a:	f003 0301 	and.w	r3, r3, #1
 8103f1e:	b2db      	uxtb	r3, r3
 8103f20:	2b00      	cmp	r3, #0
 8103f22:	d00c      	beq.n	8103f3e <ethernet_link_thread+0x92>
 8103f24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8103f26:	2b01      	cmp	r3, #1
 8103f28:	dc09      	bgt.n	8103f3e <ethernet_link_thread+0x92>
  {
    HAL_ETH_Stop_IT(&heth);
 8103f2a:	4838      	ldr	r0, [pc, #224]	@ (810400c <ethernet_link_thread+0x160>)
 8103f2c:	f000 fd35 	bl	810499a <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8103f30:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8103f32:	f00a fe75 	bl	810ec20 <netif_set_down>
    netif_set_link_down(netif);
 8103f36:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8103f38:	f00a fed8 	bl	810ecec <netif_set_link_down>
 8103f3c:	e05f      	b.n	8103ffe <ethernet_link_thread+0x152>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8103f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8103f40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8103f44:	f003 0304 	and.w	r3, r3, #4
 8103f48:	2b00      	cmp	r3, #0
 8103f4a:	d158      	bne.n	8103ffe <ethernet_link_thread+0x152>
 8103f4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8103f4e:	2b01      	cmp	r3, #1
 8103f50:	dd55      	ble.n	8103ffe <ethernet_link_thread+0x152>
  {
    switch (PHYLinkState)
 8103f52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8103f54:	3b02      	subs	r3, #2
 8103f56:	2b03      	cmp	r3, #3
 8103f58:	d832      	bhi.n	8103fc0 <ethernet_link_thread+0x114>
 8103f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8103f60 <ethernet_link_thread+0xb4>)
 8103f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f60:	08103f71 	.word	0x08103f71
 8103f64:	08103f87 	.word	0x08103f87
 8103f68:	08103f9b 	.word	0x08103f9b
 8103f6c:	08103faf 	.word	0x08103faf
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8103f70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8103f74:	67fb      	str	r3, [r7, #124]	@ 0x7c
      speed = ETH_SPEED_100M;
 8103f76:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8103f7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      linkchanged = 1;
 8103f7e:	2301      	movs	r3, #1
 8103f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      break;
 8103f84:	e01d      	b.n	8103fc2 <ethernet_link_thread+0x116>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8103f86:	2300      	movs	r3, #0
 8103f88:	67fb      	str	r3, [r7, #124]	@ 0x7c
      speed = ETH_SPEED_100M;
 8103f8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8103f8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      linkchanged = 1;
 8103f92:	2301      	movs	r3, #1
 8103f94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      break;
 8103f98:	e013      	b.n	8103fc2 <ethernet_link_thread+0x116>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8103f9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8103f9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      speed = ETH_SPEED_10M;
 8103fa0:	2300      	movs	r3, #0
 8103fa2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      linkchanged = 1;
 8103fa6:	2301      	movs	r3, #1
 8103fa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      break;
 8103fac:	e009      	b.n	8103fc2 <ethernet_link_thread+0x116>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8103fae:	2300      	movs	r3, #0
 8103fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      speed = ETH_SPEED_10M;
 8103fb2:	2300      	movs	r3, #0
 8103fb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      linkchanged = 1;
 8103fb8:	2301      	movs	r3, #1
 8103fba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      break;
 8103fbe:	e000      	b.n	8103fc2 <ethernet_link_thread+0x116>
    default:
      break;
 8103fc0:	bf00      	nop
    }

    if(linkchanged)
 8103fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8103fc6:	2b00      	cmp	r3, #0
 8103fc8:	d019      	beq.n	8103ffe <ethernet_link_thread+0x152>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8103fca:	f107 0310 	add.w	r3, r7, #16
 8103fce:	4619      	mov	r1, r3
 8103fd0:	480e      	ldr	r0, [pc, #56]	@ (810400c <ethernet_link_thread+0x160>)
 8103fd2:	f001 f915 	bl	8105200 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8103fd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8103fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      MACConf.Speed = speed;
 8103fda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8103fde:	627b      	str	r3, [r7, #36]	@ 0x24
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8103fe0:	f107 0310 	add.w	r3, r7, #16
 8103fe4:	4619      	mov	r1, r3
 8103fe6:	4809      	ldr	r0, [pc, #36]	@ (810400c <ethernet_link_thread+0x160>)
 8103fe8:	f001 fade 	bl	81055a8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8103fec:	4807      	ldr	r0, [pc, #28]	@ (810400c <ethernet_link_thread+0x160>)
 8103fee:	f000 fc5f 	bl	81048b0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8103ff2:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8103ff4:	f00a fda8 	bl	810eb48 <netif_set_up>
      netif_set_link_up(netif);
 8103ff8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8103ffa:	f00a fe43 	bl	810ec84 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8103ffe:	2064      	movs	r0, #100	@ 0x64
 8104000:	f003 f979 	bl	81072f6 <osDelay>
  {
 8104004:	e769      	b.n	8103eda <ethernet_link_thread+0x2e>
 8104006:	bf00      	nop
 8104008:	1000027c 	.word	0x1000027c
 810400c:	10000194 	.word	0x10000194
 8104010:	08116c04 	.word	0x08116c04
 8104014:	08116c24 	.word	0x08116c24

08104018 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8104018:	b580      	push	{r7, lr}
 810401a:	b086      	sub	sp, #24
 810401c:	af02      	add	r7, sp, #8
 810401e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8104020:	4812      	ldr	r0, [pc, #72]	@ (810406c <HAL_ETH_RxAllocateCallback+0x54>)
 8104022:	f00a fb05 	bl	810e630 <memp_malloc_pool>
 8104026:	60f8      	str	r0, [r7, #12]
  if (p)
 8104028:	68fb      	ldr	r3, [r7, #12]
 810402a:	2b00      	cmp	r3, #0
 810402c:	d014      	beq.n	8104058 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 810402e:	68fb      	ldr	r3, [r7, #12]
 8104030:	f103 0220 	add.w	r2, r3, #32
 8104034:	687b      	ldr	r3, [r7, #4]
 8104036:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8104038:	68fb      	ldr	r3, [r7, #12]
 810403a:	4a0d      	ldr	r2, [pc, #52]	@ (8104070 <HAL_ETH_RxAllocateCallback+0x58>)
 810403c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	681b      	ldr	r3, [r3, #0]
 8104042:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8104046:	9201      	str	r2, [sp, #4]
 8104048:	9300      	str	r3, [sp, #0]
 810404a:	68fb      	ldr	r3, [r7, #12]
 810404c:	2241      	movs	r2, #65	@ 0x41
 810404e:	2100      	movs	r1, #0
 8104050:	2000      	movs	r0, #0
 8104052:	f00b f871 	bl	810f138 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8104056:	e005      	b.n	8104064 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8104058:	4b06      	ldr	r3, [pc, #24]	@ (8104074 <HAL_ETH_RxAllocateCallback+0x5c>)
 810405a:	2201      	movs	r2, #1
 810405c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 810405e:	687b      	ldr	r3, [r7, #4]
 8104060:	2200      	movs	r2, #0
 8104062:	601a      	str	r2, [r3, #0]
}
 8104064:	bf00      	nop
 8104066:	3710      	adds	r7, #16
 8104068:	46bd      	mov	sp, r7
 810406a:	bd80      	pop	{r7, pc}
 810406c:	08119b10 	.word	0x08119b10
 8104070:	08103c49 	.word	0x08103c49
 8104074:	10000188 	.word	0x10000188

08104078 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8104078:	b480      	push	{r7}
 810407a:	b089      	sub	sp, #36	@ 0x24
 810407c:	af00      	add	r7, sp, #0
 810407e:	60f8      	str	r0, [r7, #12]
 8104080:	60b9      	str	r1, [r7, #8]
 8104082:	607a      	str	r2, [r7, #4]
 8104084:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8104086:	68fb      	ldr	r3, [r7, #12]
 8104088:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 810408a:	68bb      	ldr	r3, [r7, #8]
 810408c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 810408e:	2300      	movs	r3, #0
 8104090:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	3b20      	subs	r3, #32
 8104096:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8104098:	69fb      	ldr	r3, [r7, #28]
 810409a:	2200      	movs	r2, #0
 810409c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 810409e:	69fb      	ldr	r3, [r7, #28]
 81040a0:	2200      	movs	r2, #0
 81040a2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 81040a4:	69fb      	ldr	r3, [r7, #28]
 81040a6:	887a      	ldrh	r2, [r7, #2]
 81040a8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 81040aa:	69bb      	ldr	r3, [r7, #24]
 81040ac:	681b      	ldr	r3, [r3, #0]
 81040ae:	2b00      	cmp	r3, #0
 81040b0:	d103      	bne.n	81040ba <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 81040b2:	69bb      	ldr	r3, [r7, #24]
 81040b4:	69fa      	ldr	r2, [r7, #28]
 81040b6:	601a      	str	r2, [r3, #0]
 81040b8:	e003      	b.n	81040c2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 81040ba:	697b      	ldr	r3, [r7, #20]
 81040bc:	681b      	ldr	r3, [r3, #0]
 81040be:	69fa      	ldr	r2, [r7, #28]
 81040c0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 81040c2:	697b      	ldr	r3, [r7, #20]
 81040c4:	69fa      	ldr	r2, [r7, #28]
 81040c6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 81040c8:	69bb      	ldr	r3, [r7, #24]
 81040ca:	681b      	ldr	r3, [r3, #0]
 81040cc:	61fb      	str	r3, [r7, #28]
 81040ce:	e009      	b.n	81040e4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 81040d0:	69fb      	ldr	r3, [r7, #28]
 81040d2:	891a      	ldrh	r2, [r3, #8]
 81040d4:	887b      	ldrh	r3, [r7, #2]
 81040d6:	4413      	add	r3, r2
 81040d8:	b29a      	uxth	r2, r3
 81040da:	69fb      	ldr	r3, [r7, #28]
 81040dc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 81040de:	69fb      	ldr	r3, [r7, #28]
 81040e0:	681b      	ldr	r3, [r3, #0]
 81040e2:	61fb      	str	r3, [r7, #28]
 81040e4:	69fb      	ldr	r3, [r7, #28]
 81040e6:	2b00      	cmp	r3, #0
 81040e8:	d1f2      	bne.n	81040d0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 81040ea:	bf00      	nop
 81040ec:	bf00      	nop
 81040ee:	3724      	adds	r7, #36	@ 0x24
 81040f0:	46bd      	mov	sp, r7
 81040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040f6:	4770      	bx	lr

081040f8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 81040f8:	b580      	push	{r7, lr}
 81040fa:	b082      	sub	sp, #8
 81040fc:	af00      	add	r7, sp, #0
 81040fe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8104100:	6878      	ldr	r0, [r7, #4]
 8104102:	f00b f9d1 	bl	810f4a8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8104106:	bf00      	nop
 8104108:	3708      	adds	r7, #8
 810410a:	46bd      	mov	sp, r7
 810410c:	bd80      	pop	{r7, pc}
	...

08104110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8104110:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8104148 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8104114:	f000 f92c 	bl	8104370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8104118:	480c      	ldr	r0, [pc, #48]	@ (810414c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810411a:	490d      	ldr	r1, [pc, #52]	@ (8104150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810411c:	4a0d      	ldr	r2, [pc, #52]	@ (8104154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810411e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8104120:	e002      	b.n	8104128 <LoopCopyDataInit>

08104122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8104122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8104124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8104126:	3304      	adds	r3, #4

08104128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8104128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810412a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810412c:	d3f9      	bcc.n	8104122 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810412e:	4a0a      	ldr	r2, [pc, #40]	@ (8104158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8104130:	4c0a      	ldr	r4, [pc, #40]	@ (810415c <LoopFillZerobss+0x22>)
  movs r3, #0
 8104132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8104134:	e001      	b.n	810413a <LoopFillZerobss>

08104136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8104136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8104138:	3204      	adds	r2, #4

0810413a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810413a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810413c:	d3fb      	bcc.n	8104136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810413e:	f011 ff97 	bl	8116070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8104142:	f7fc fa31 	bl	81005a8 <main>
  bx  lr
 8104146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8104148:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810414c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8104150:	10000090 	.word	0x10000090
  ldr r2, =_sidata
 8104154:	08119d44 	.word	0x08119d44
  ldr r2, =_sbss
 8104158:	10000090 	.word	0x10000090
  ldr r4, =_ebss
 810415c:	10011e0c 	.word	0x10011e0c

08104160 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8104160:	e7fe      	b.n	8104160 <ADC3_IRQHandler>

08104162 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8104162:	b480      	push	{r7}
 8104164:	b083      	sub	sp, #12
 8104166:	af00      	add	r7, sp, #0
 8104168:	6078      	str	r0, [r7, #4]
 810416a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 810416c:	687b      	ldr	r3, [r7, #4]
 810416e:	2b00      	cmp	r3, #0
 8104170:	d00b      	beq.n	810418a <LAN8742_RegisterBusIO+0x28>
 8104172:	683b      	ldr	r3, [r7, #0]
 8104174:	68db      	ldr	r3, [r3, #12]
 8104176:	2b00      	cmp	r3, #0
 8104178:	d007      	beq.n	810418a <LAN8742_RegisterBusIO+0x28>
 810417a:	683b      	ldr	r3, [r7, #0]
 810417c:	689b      	ldr	r3, [r3, #8]
 810417e:	2b00      	cmp	r3, #0
 8104180:	d003      	beq.n	810418a <LAN8742_RegisterBusIO+0x28>
 8104182:	683b      	ldr	r3, [r7, #0]
 8104184:	691b      	ldr	r3, [r3, #16]
 8104186:	2b00      	cmp	r3, #0
 8104188:	d102      	bne.n	8104190 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 810418a:	f04f 33ff 	mov.w	r3, #4294967295
 810418e:	e014      	b.n	81041ba <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8104190:	683b      	ldr	r3, [r7, #0]
 8104192:	681a      	ldr	r2, [r3, #0]
 8104194:	687b      	ldr	r3, [r7, #4]
 8104196:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8104198:	683b      	ldr	r3, [r7, #0]
 810419a:	685a      	ldr	r2, [r3, #4]
 810419c:	687b      	ldr	r3, [r7, #4]
 810419e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 81041a0:	683b      	ldr	r3, [r7, #0]
 81041a2:	68da      	ldr	r2, [r3, #12]
 81041a4:	687b      	ldr	r3, [r7, #4]
 81041a6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 81041a8:	683b      	ldr	r3, [r7, #0]
 81041aa:	689a      	ldr	r2, [r3, #8]
 81041ac:	687b      	ldr	r3, [r7, #4]
 81041ae:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 81041b0:	683b      	ldr	r3, [r7, #0]
 81041b2:	691a      	ldr	r2, [r3, #16]
 81041b4:	687b      	ldr	r3, [r7, #4]
 81041b6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 81041b8:	2300      	movs	r3, #0
}
 81041ba:	4618      	mov	r0, r3
 81041bc:	370c      	adds	r7, #12
 81041be:	46bd      	mov	sp, r7
 81041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041c4:	4770      	bx	lr

081041c6 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 81041c6:	b580      	push	{r7, lr}
 81041c8:	b086      	sub	sp, #24
 81041ca:	af00      	add	r7, sp, #0
 81041cc:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 81041ce:	2300      	movs	r3, #0
 81041d0:	60fb      	str	r3, [r7, #12]
 81041d2:	2300      	movs	r3, #0
 81041d4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 81041d6:	2300      	movs	r3, #0
 81041d8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 81041da:	687b      	ldr	r3, [r7, #4]
 81041dc:	685b      	ldr	r3, [r3, #4]
 81041de:	2b00      	cmp	r3, #0
 81041e0:	d139      	bne.n	8104256 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	689b      	ldr	r3, [r3, #8]
 81041e6:	2b00      	cmp	r3, #0
 81041e8:	d002      	beq.n	81041f0 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	689b      	ldr	r3, [r3, #8]
 81041ee:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	2220      	movs	r2, #32
 81041f4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 81041f6:	2300      	movs	r3, #0
 81041f8:	617b      	str	r3, [r7, #20]
 81041fa:	e01c      	b.n	8104236 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 81041fc:	687b      	ldr	r3, [r7, #4]
 81041fe:	695b      	ldr	r3, [r3, #20]
 8104200:	f107 020c 	add.w	r2, r7, #12
 8104204:	2112      	movs	r1, #18
 8104206:	6978      	ldr	r0, [r7, #20]
 8104208:	4798      	blx	r3
 810420a:	4603      	mov	r3, r0
 810420c:	2b00      	cmp	r3, #0
 810420e:	da03      	bge.n	8104218 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8104210:	f06f 0304 	mvn.w	r3, #4
 8104214:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8104216:	e00b      	b.n	8104230 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8104218:	68fb      	ldr	r3, [r7, #12]
 810421a:	f003 031f 	and.w	r3, r3, #31
 810421e:	697a      	ldr	r2, [r7, #20]
 8104220:	429a      	cmp	r2, r3
 8104222:	d105      	bne.n	8104230 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8104224:	687b      	ldr	r3, [r7, #4]
 8104226:	697a      	ldr	r2, [r7, #20]
 8104228:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 810422a:	2300      	movs	r3, #0
 810422c:	613b      	str	r3, [r7, #16]
         break;
 810422e:	e005      	b.n	810423c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8104230:	697b      	ldr	r3, [r7, #20]
 8104232:	3301      	adds	r3, #1
 8104234:	617b      	str	r3, [r7, #20]
 8104236:	697b      	ldr	r3, [r7, #20]
 8104238:	2b1f      	cmp	r3, #31
 810423a:	d9df      	bls.n	81041fc <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 810423c:	687b      	ldr	r3, [r7, #4]
 810423e:	681b      	ldr	r3, [r3, #0]
 8104240:	2b1f      	cmp	r3, #31
 8104242:	d902      	bls.n	810424a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8104244:	f06f 0302 	mvn.w	r3, #2
 8104248:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 810424a:	693b      	ldr	r3, [r7, #16]
 810424c:	2b00      	cmp	r3, #0
 810424e:	d102      	bne.n	8104256 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	2201      	movs	r2, #1
 8104254:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8104256:	693b      	ldr	r3, [r7, #16]
 }
 8104258:	4618      	mov	r0, r3
 810425a:	3718      	adds	r7, #24
 810425c:	46bd      	mov	sp, r7
 810425e:	bd80      	pop	{r7, pc}

08104260 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8104260:	b580      	push	{r7, lr}
 8104262:	b084      	sub	sp, #16
 8104264:	af00      	add	r7, sp, #0
 8104266:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8104268:	2300      	movs	r3, #0
 810426a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 810426c:	687b      	ldr	r3, [r7, #4]
 810426e:	695b      	ldr	r3, [r3, #20]
 8104270:	687a      	ldr	r2, [r7, #4]
 8104272:	6810      	ldr	r0, [r2, #0]
 8104274:	f107 020c 	add.w	r2, r7, #12
 8104278:	2101      	movs	r1, #1
 810427a:	4798      	blx	r3
 810427c:	4603      	mov	r3, r0
 810427e:	2b00      	cmp	r3, #0
 8104280:	da02      	bge.n	8104288 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8104282:	f06f 0304 	mvn.w	r3, #4
 8104286:	e06e      	b.n	8104366 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8104288:	687b      	ldr	r3, [r7, #4]
 810428a:	695b      	ldr	r3, [r3, #20]
 810428c:	687a      	ldr	r2, [r7, #4]
 810428e:	6810      	ldr	r0, [r2, #0]
 8104290:	f107 020c 	add.w	r2, r7, #12
 8104294:	2101      	movs	r1, #1
 8104296:	4798      	blx	r3
 8104298:	4603      	mov	r3, r0
 810429a:	2b00      	cmp	r3, #0
 810429c:	da02      	bge.n	81042a4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 810429e:	f06f 0304 	mvn.w	r3, #4
 81042a2:	e060      	b.n	8104366 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 81042a4:	68fb      	ldr	r3, [r7, #12]
 81042a6:	f003 0304 	and.w	r3, r3, #4
 81042aa:	2b00      	cmp	r3, #0
 81042ac:	d101      	bne.n	81042b2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 81042ae:	2301      	movs	r3, #1
 81042b0:	e059      	b.n	8104366 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 81042b2:	687b      	ldr	r3, [r7, #4]
 81042b4:	695b      	ldr	r3, [r3, #20]
 81042b6:	687a      	ldr	r2, [r7, #4]
 81042b8:	6810      	ldr	r0, [r2, #0]
 81042ba:	f107 020c 	add.w	r2, r7, #12
 81042be:	2100      	movs	r1, #0
 81042c0:	4798      	blx	r3
 81042c2:	4603      	mov	r3, r0
 81042c4:	2b00      	cmp	r3, #0
 81042c6:	da02      	bge.n	81042ce <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 81042c8:	f06f 0304 	mvn.w	r3, #4
 81042cc:	e04b      	b.n	8104366 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 81042ce:	68fb      	ldr	r3, [r7, #12]
 81042d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81042d4:	2b00      	cmp	r3, #0
 81042d6:	d11b      	bne.n	8104310 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 81042d8:	68fb      	ldr	r3, [r7, #12]
 81042da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81042de:	2b00      	cmp	r3, #0
 81042e0:	d006      	beq.n	81042f0 <LAN8742_GetLinkState+0x90>
 81042e2:	68fb      	ldr	r3, [r7, #12]
 81042e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81042e8:	2b00      	cmp	r3, #0
 81042ea:	d001      	beq.n	81042f0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 81042ec:	2302      	movs	r3, #2
 81042ee:	e03a      	b.n	8104366 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 81042f0:	68fb      	ldr	r3, [r7, #12]
 81042f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81042f6:	2b00      	cmp	r3, #0
 81042f8:	d001      	beq.n	81042fe <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 81042fa:	2303      	movs	r3, #3
 81042fc:	e033      	b.n	8104366 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 81042fe:	68fb      	ldr	r3, [r7, #12]
 8104300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104304:	2b00      	cmp	r3, #0
 8104306:	d001      	beq.n	810430c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8104308:	2304      	movs	r3, #4
 810430a:	e02c      	b.n	8104366 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 810430c:	2305      	movs	r3, #5
 810430e:	e02a      	b.n	8104366 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8104310:	687b      	ldr	r3, [r7, #4]
 8104312:	695b      	ldr	r3, [r3, #20]
 8104314:	687a      	ldr	r2, [r7, #4]
 8104316:	6810      	ldr	r0, [r2, #0]
 8104318:	f107 020c 	add.w	r2, r7, #12
 810431c:	211f      	movs	r1, #31
 810431e:	4798      	blx	r3
 8104320:	4603      	mov	r3, r0
 8104322:	2b00      	cmp	r3, #0
 8104324:	da02      	bge.n	810432c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8104326:	f06f 0304 	mvn.w	r3, #4
 810432a:	e01c      	b.n	8104366 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 810432c:	68fb      	ldr	r3, [r7, #12]
 810432e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8104332:	2b00      	cmp	r3, #0
 8104334:	d101      	bne.n	810433a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8104336:	2306      	movs	r3, #6
 8104338:	e015      	b.n	8104366 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 810433a:	68fb      	ldr	r3, [r7, #12]
 810433c:	f003 031c 	and.w	r3, r3, #28
 8104340:	2b18      	cmp	r3, #24
 8104342:	d101      	bne.n	8104348 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8104344:	2302      	movs	r3, #2
 8104346:	e00e      	b.n	8104366 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8104348:	68fb      	ldr	r3, [r7, #12]
 810434a:	f003 031c 	and.w	r3, r3, #28
 810434e:	2b08      	cmp	r3, #8
 8104350:	d101      	bne.n	8104356 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8104352:	2303      	movs	r3, #3
 8104354:	e007      	b.n	8104366 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8104356:	68fb      	ldr	r3, [r7, #12]
 8104358:	f003 031c 	and.w	r3, r3, #28
 810435c:	2b14      	cmp	r3, #20
 810435e:	d101      	bne.n	8104364 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8104360:	2304      	movs	r3, #4
 8104362:	e000      	b.n	8104366 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8104364:	2305      	movs	r3, #5
    }
  }
}
 8104366:	4618      	mov	r0, r3
 8104368:	3710      	adds	r7, #16
 810436a:	46bd      	mov	sp, r7
 810436c:	bd80      	pop	{r7, pc}
	...

08104370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8104370:	b480      	push	{r7}
 8104372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8104374:	4b0b      	ldr	r3, [pc, #44]	@ (81043a4 <SystemInit+0x34>)
 8104376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810437a:	4a0a      	ldr	r2, [pc, #40]	@ (81043a4 <SystemInit+0x34>)
 810437c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8104380:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8104384:	4b07      	ldr	r3, [pc, #28]	@ (81043a4 <SystemInit+0x34>)
 8104386:	691b      	ldr	r3, [r3, #16]
 8104388:	4a06      	ldr	r2, [pc, #24]	@ (81043a4 <SystemInit+0x34>)
 810438a:	f043 0310 	orr.w	r3, r3, #16
 810438e:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8104390:	4b04      	ldr	r3, [pc, #16]	@ (81043a4 <SystemInit+0x34>)
 8104392:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 8104396:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8104398:	bf00      	nop
 810439a:	46bd      	mov	sp, r7
 810439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043a0:	4770      	bx	lr
 81043a2:	bf00      	nop
 81043a4:	e000ed00 	.word	0xe000ed00

081043a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81043a8:	b580      	push	{r7, lr}
 81043aa:	b082      	sub	sp, #8
 81043ac:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81043ae:	4b28      	ldr	r3, [pc, #160]	@ (8104450 <HAL_Init+0xa8>)
 81043b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81043b4:	4a26      	ldr	r2, [pc, #152]	@ (8104450 <HAL_Init+0xa8>)
 81043b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81043ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81043be:	4b24      	ldr	r3, [pc, #144]	@ (8104450 <HAL_Init+0xa8>)
 81043c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81043c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81043c8:	603b      	str	r3, [r7, #0]
 81043ca:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81043cc:	4b21      	ldr	r3, [pc, #132]	@ (8104454 <HAL_Init+0xac>)
 81043ce:	681b      	ldr	r3, [r3, #0]
 81043d0:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81043d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81043d8:	4a1e      	ldr	r2, [pc, #120]	@ (8104454 <HAL_Init+0xac>)
 81043da:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81043de:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81043e0:	4b1c      	ldr	r3, [pc, #112]	@ (8104454 <HAL_Init+0xac>)
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	4a1b      	ldr	r2, [pc, #108]	@ (8104454 <HAL_Init+0xac>)
 81043e6:	f043 0301 	orr.w	r3, r3, #1
 81043ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81043ec:	2003      	movs	r0, #3
 81043ee:	f000 f91a 	bl	8104626 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81043f2:	f002 f979 	bl	81066e8 <HAL_RCC_GetSysClockFreq>
 81043f6:	4602      	mov	r2, r0
 81043f8:	4b15      	ldr	r3, [pc, #84]	@ (8104450 <HAL_Init+0xa8>)
 81043fa:	699b      	ldr	r3, [r3, #24]
 81043fc:	0a1b      	lsrs	r3, r3, #8
 81043fe:	f003 030f 	and.w	r3, r3, #15
 8104402:	4915      	ldr	r1, [pc, #84]	@ (8104458 <HAL_Init+0xb0>)
 8104404:	5ccb      	ldrb	r3, [r1, r3]
 8104406:	f003 031f 	and.w	r3, r3, #31
 810440a:	fa22 f303 	lsr.w	r3, r2, r3
 810440e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104410:	4b0f      	ldr	r3, [pc, #60]	@ (8104450 <HAL_Init+0xa8>)
 8104412:	699b      	ldr	r3, [r3, #24]
 8104414:	f003 030f 	and.w	r3, r3, #15
 8104418:	4a0f      	ldr	r2, [pc, #60]	@ (8104458 <HAL_Init+0xb0>)
 810441a:	5cd3      	ldrb	r3, [r2, r3]
 810441c:	f003 031f 	and.w	r3, r3, #31
 8104420:	687a      	ldr	r2, [r7, #4]
 8104422:	fa22 f303 	lsr.w	r3, r2, r3
 8104426:	4a0d      	ldr	r2, [pc, #52]	@ (810445c <HAL_Init+0xb4>)
 8104428:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810442a:	4b0c      	ldr	r3, [pc, #48]	@ (810445c <HAL_Init+0xb4>)
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	4a0c      	ldr	r2, [pc, #48]	@ (8104460 <HAL_Init+0xb8>)
 8104430:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8104432:	2000      	movs	r0, #0
 8104434:	f7fc fa20 	bl	8100878 <HAL_InitTick>
 8104438:	4603      	mov	r3, r0
 810443a:	2b00      	cmp	r3, #0
 810443c:	d001      	beq.n	8104442 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810443e:	2301      	movs	r3, #1
 8104440:	e002      	b.n	8104448 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8104442:	f7fc f9f3 	bl	810082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8104446:	2300      	movs	r3, #0
}
 8104448:	4618      	mov	r0, r3
 810444a:	3708      	adds	r7, #8
 810444c:	46bd      	mov	sp, r7
 810444e:	bd80      	pop	{r7, pc}
 8104450:	58024400 	.word	0x58024400
 8104454:	40024400 	.word	0x40024400
 8104458:	08119b1c 	.word	0x08119b1c
 810445c:	10000018 	.word	0x10000018
 8104460:	10000014 	.word	0x10000014

08104464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8104464:	b480      	push	{r7}
 8104466:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8104468:	4b06      	ldr	r3, [pc, #24]	@ (8104484 <HAL_IncTick+0x20>)
 810446a:	781b      	ldrb	r3, [r3, #0]
 810446c:	461a      	mov	r2, r3
 810446e:	4b06      	ldr	r3, [pc, #24]	@ (8104488 <HAL_IncTick+0x24>)
 8104470:	681b      	ldr	r3, [r3, #0]
 8104472:	4413      	add	r3, r2
 8104474:	4a04      	ldr	r2, [pc, #16]	@ (8104488 <HAL_IncTick+0x24>)
 8104476:	6013      	str	r3, [r2, #0]
}
 8104478:	bf00      	nop
 810447a:	46bd      	mov	sp, r7
 810447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104480:	4770      	bx	lr
 8104482:	bf00      	nop
 8104484:	10000020 	.word	0x10000020
 8104488:	1000029c 	.word	0x1000029c

0810448c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810448c:	b480      	push	{r7}
 810448e:	af00      	add	r7, sp, #0
  return uwTick;
 8104490:	4b03      	ldr	r3, [pc, #12]	@ (81044a0 <HAL_GetTick+0x14>)
 8104492:	681b      	ldr	r3, [r3, #0]
}
 8104494:	4618      	mov	r0, r3
 8104496:	46bd      	mov	sp, r7
 8104498:	f85d 7b04 	ldr.w	r7, [sp], #4
 810449c:	4770      	bx	lr
 810449e:	bf00      	nop
 81044a0:	1000029c 	.word	0x1000029c

081044a4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 81044a4:	b480      	push	{r7}
 81044a6:	b083      	sub	sp, #12
 81044a8:	af00      	add	r7, sp, #0
 81044aa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 81044ac:	4b06      	ldr	r3, [pc, #24]	@ (81044c8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 81044ae:	685b      	ldr	r3, [r3, #4]
 81044b0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 81044b4:	4904      	ldr	r1, [pc, #16]	@ (81044c8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	4313      	orrs	r3, r2
 81044ba:	604b      	str	r3, [r1, #4]
}
 81044bc:	bf00      	nop
 81044be:	370c      	adds	r7, #12
 81044c0:	46bd      	mov	sp, r7
 81044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044c6:	4770      	bx	lr
 81044c8:	58000400 	.word	0x58000400

081044cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81044cc:	b480      	push	{r7}
 81044ce:	b085      	sub	sp, #20
 81044d0:	af00      	add	r7, sp, #0
 81044d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81044d4:	687b      	ldr	r3, [r7, #4]
 81044d6:	f003 0307 	and.w	r3, r3, #7
 81044da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81044dc:	4b0c      	ldr	r3, [pc, #48]	@ (8104510 <__NVIC_SetPriorityGrouping+0x44>)
 81044de:	68db      	ldr	r3, [r3, #12]
 81044e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81044e2:	68ba      	ldr	r2, [r7, #8]
 81044e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81044e8:	4013      	ands	r3, r2
 81044ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81044ec:	68fb      	ldr	r3, [r7, #12]
 81044ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81044f0:	68bb      	ldr	r3, [r7, #8]
 81044f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81044f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81044f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81044fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81044fe:	4a04      	ldr	r2, [pc, #16]	@ (8104510 <__NVIC_SetPriorityGrouping+0x44>)
 8104500:	68bb      	ldr	r3, [r7, #8]
 8104502:	60d3      	str	r3, [r2, #12]
}
 8104504:	bf00      	nop
 8104506:	3714      	adds	r7, #20
 8104508:	46bd      	mov	sp, r7
 810450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810450e:	4770      	bx	lr
 8104510:	e000ed00 	.word	0xe000ed00

08104514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8104514:	b480      	push	{r7}
 8104516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104518:	4b04      	ldr	r3, [pc, #16]	@ (810452c <__NVIC_GetPriorityGrouping+0x18>)
 810451a:	68db      	ldr	r3, [r3, #12]
 810451c:	0a1b      	lsrs	r3, r3, #8
 810451e:	f003 0307 	and.w	r3, r3, #7
}
 8104522:	4618      	mov	r0, r3
 8104524:	46bd      	mov	sp, r7
 8104526:	f85d 7b04 	ldr.w	r7, [sp], #4
 810452a:	4770      	bx	lr
 810452c:	e000ed00 	.word	0xe000ed00

08104530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104530:	b480      	push	{r7}
 8104532:	b083      	sub	sp, #12
 8104534:	af00      	add	r7, sp, #0
 8104536:	4603      	mov	r3, r0
 8104538:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810453a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810453e:	2b00      	cmp	r3, #0
 8104540:	db0b      	blt.n	810455a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8104542:	88fb      	ldrh	r3, [r7, #6]
 8104544:	f003 021f 	and.w	r2, r3, #31
 8104548:	4907      	ldr	r1, [pc, #28]	@ (8104568 <__NVIC_EnableIRQ+0x38>)
 810454a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810454e:	095b      	lsrs	r3, r3, #5
 8104550:	2001      	movs	r0, #1
 8104552:	fa00 f202 	lsl.w	r2, r0, r2
 8104556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810455a:	bf00      	nop
 810455c:	370c      	adds	r7, #12
 810455e:	46bd      	mov	sp, r7
 8104560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104564:	4770      	bx	lr
 8104566:	bf00      	nop
 8104568:	e000e100 	.word	0xe000e100

0810456c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810456c:	b480      	push	{r7}
 810456e:	b083      	sub	sp, #12
 8104570:	af00      	add	r7, sp, #0
 8104572:	4603      	mov	r3, r0
 8104574:	6039      	str	r1, [r7, #0]
 8104576:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810457c:	2b00      	cmp	r3, #0
 810457e:	db0a      	blt.n	8104596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104580:	683b      	ldr	r3, [r7, #0]
 8104582:	b2da      	uxtb	r2, r3
 8104584:	490c      	ldr	r1, [pc, #48]	@ (81045b8 <__NVIC_SetPriority+0x4c>)
 8104586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810458a:	0112      	lsls	r2, r2, #4
 810458c:	b2d2      	uxtb	r2, r2
 810458e:	440b      	add	r3, r1
 8104590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8104594:	e00a      	b.n	81045ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104596:	683b      	ldr	r3, [r7, #0]
 8104598:	b2da      	uxtb	r2, r3
 810459a:	4908      	ldr	r1, [pc, #32]	@ (81045bc <__NVIC_SetPriority+0x50>)
 810459c:	88fb      	ldrh	r3, [r7, #6]
 810459e:	f003 030f 	and.w	r3, r3, #15
 81045a2:	3b04      	subs	r3, #4
 81045a4:	0112      	lsls	r2, r2, #4
 81045a6:	b2d2      	uxtb	r2, r2
 81045a8:	440b      	add	r3, r1
 81045aa:	761a      	strb	r2, [r3, #24]
}
 81045ac:	bf00      	nop
 81045ae:	370c      	adds	r7, #12
 81045b0:	46bd      	mov	sp, r7
 81045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045b6:	4770      	bx	lr
 81045b8:	e000e100 	.word	0xe000e100
 81045bc:	e000ed00 	.word	0xe000ed00

081045c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81045c0:	b480      	push	{r7}
 81045c2:	b089      	sub	sp, #36	@ 0x24
 81045c4:	af00      	add	r7, sp, #0
 81045c6:	60f8      	str	r0, [r7, #12]
 81045c8:	60b9      	str	r1, [r7, #8]
 81045ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81045cc:	68fb      	ldr	r3, [r7, #12]
 81045ce:	f003 0307 	and.w	r3, r3, #7
 81045d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81045d4:	69fb      	ldr	r3, [r7, #28]
 81045d6:	f1c3 0307 	rsb	r3, r3, #7
 81045da:	2b04      	cmp	r3, #4
 81045dc:	bf28      	it	cs
 81045de:	2304      	movcs	r3, #4
 81045e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81045e2:	69fb      	ldr	r3, [r7, #28]
 81045e4:	3304      	adds	r3, #4
 81045e6:	2b06      	cmp	r3, #6
 81045e8:	d902      	bls.n	81045f0 <NVIC_EncodePriority+0x30>
 81045ea:	69fb      	ldr	r3, [r7, #28]
 81045ec:	3b03      	subs	r3, #3
 81045ee:	e000      	b.n	81045f2 <NVIC_EncodePriority+0x32>
 81045f0:	2300      	movs	r3, #0
 81045f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81045f4:	f04f 32ff 	mov.w	r2, #4294967295
 81045f8:	69bb      	ldr	r3, [r7, #24]
 81045fa:	fa02 f303 	lsl.w	r3, r2, r3
 81045fe:	43da      	mvns	r2, r3
 8104600:	68bb      	ldr	r3, [r7, #8]
 8104602:	401a      	ands	r2, r3
 8104604:	697b      	ldr	r3, [r7, #20]
 8104606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104608:	f04f 31ff 	mov.w	r1, #4294967295
 810460c:	697b      	ldr	r3, [r7, #20]
 810460e:	fa01 f303 	lsl.w	r3, r1, r3
 8104612:	43d9      	mvns	r1, r3
 8104614:	687b      	ldr	r3, [r7, #4]
 8104616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104618:	4313      	orrs	r3, r2
         );
}
 810461a:	4618      	mov	r0, r3
 810461c:	3724      	adds	r7, #36	@ 0x24
 810461e:	46bd      	mov	sp, r7
 8104620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104624:	4770      	bx	lr

08104626 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104626:	b580      	push	{r7, lr}
 8104628:	b082      	sub	sp, #8
 810462a:	af00      	add	r7, sp, #0
 810462c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810462e:	6878      	ldr	r0, [r7, #4]
 8104630:	f7ff ff4c 	bl	81044cc <__NVIC_SetPriorityGrouping>
}
 8104634:	bf00      	nop
 8104636:	3708      	adds	r7, #8
 8104638:	46bd      	mov	sp, r7
 810463a:	bd80      	pop	{r7, pc}

0810463c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810463c:	b580      	push	{r7, lr}
 810463e:	b086      	sub	sp, #24
 8104640:	af00      	add	r7, sp, #0
 8104642:	4603      	mov	r3, r0
 8104644:	60b9      	str	r1, [r7, #8]
 8104646:	607a      	str	r2, [r7, #4]
 8104648:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810464a:	f7ff ff63 	bl	8104514 <__NVIC_GetPriorityGrouping>
 810464e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8104650:	687a      	ldr	r2, [r7, #4]
 8104652:	68b9      	ldr	r1, [r7, #8]
 8104654:	6978      	ldr	r0, [r7, #20]
 8104656:	f7ff ffb3 	bl	81045c0 <NVIC_EncodePriority>
 810465a:	4602      	mov	r2, r0
 810465c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8104660:	4611      	mov	r1, r2
 8104662:	4618      	mov	r0, r3
 8104664:	f7ff ff82 	bl	810456c <__NVIC_SetPriority>
}
 8104668:	bf00      	nop
 810466a:	3718      	adds	r7, #24
 810466c:	46bd      	mov	sp, r7
 810466e:	bd80      	pop	{r7, pc}

08104670 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104670:	b580      	push	{r7, lr}
 8104672:	b082      	sub	sp, #8
 8104674:	af00      	add	r7, sp, #0
 8104676:	4603      	mov	r3, r0
 8104678:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810467a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810467e:	4618      	mov	r0, r3
 8104680:	f7ff ff56 	bl	8104530 <__NVIC_EnableIRQ>
}
 8104684:	bf00      	nop
 8104686:	3708      	adds	r7, #8
 8104688:	46bd      	mov	sp, r7
 810468a:	bd80      	pop	{r7, pc}

0810468c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810468c:	b480      	push	{r7}
 810468e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8104690:	4b07      	ldr	r3, [pc, #28]	@ (81046b0 <HAL_GetCurrentCPUID+0x24>)
 8104692:	681b      	ldr	r3, [r3, #0]
 8104694:	091b      	lsrs	r3, r3, #4
 8104696:	f003 030f 	and.w	r3, r3, #15
 810469a:	2b07      	cmp	r3, #7
 810469c:	d101      	bne.n	81046a2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810469e:	2303      	movs	r3, #3
 81046a0:	e000      	b.n	81046a4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81046a2:	2301      	movs	r3, #1
  }
}
 81046a4:	4618      	mov	r0, r3
 81046a6:	46bd      	mov	sp, r7
 81046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046ac:	4770      	bx	lr
 81046ae:	bf00      	nop
 81046b0:	e000ed00 	.word	0xe000ed00

081046b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 81046b4:	b580      	push	{r7, lr}
 81046b6:	b084      	sub	sp, #16
 81046b8:	af00      	add	r7, sp, #0
 81046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 81046bc:	687b      	ldr	r3, [r7, #4]
 81046be:	2b00      	cmp	r3, #0
 81046c0:	d101      	bne.n	81046c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 81046c2:	2301      	movs	r3, #1
 81046c4:	e0e7      	b.n	8104896 <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 81046c6:	687b      	ldr	r3, [r7, #4]
 81046c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81046cc:	2b00      	cmp	r3, #0
 81046ce:	d106      	bne.n	81046de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 81046d0:	687b      	ldr	r3, [r7, #4]
 81046d2:	2223      	movs	r2, #35	@ 0x23
 81046d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 81046d8:	6878      	ldr	r0, [r7, #4]
 81046da:	f7ff fadd 	bl	8103c98 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81046de:	4b70      	ldr	r3, [pc, #448]	@ (81048a0 <HAL_ETH_Init+0x1ec>)
 81046e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81046e4:	4a6e      	ldr	r2, [pc, #440]	@ (81048a0 <HAL_ETH_Init+0x1ec>)
 81046e6:	f043 0302 	orr.w	r3, r3, #2
 81046ea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81046ee:	4b6c      	ldr	r3, [pc, #432]	@ (81048a0 <HAL_ETH_Init+0x1ec>)
 81046f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81046f4:	f003 0302 	and.w	r3, r3, #2
 81046f8:	60bb      	str	r3, [r7, #8]
 81046fa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 81046fc:	687b      	ldr	r3, [r7, #4]
 81046fe:	7a1b      	ldrb	r3, [r3, #8]
 8104700:	2b00      	cmp	r3, #0
 8104702:	d103      	bne.n	810470c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8104704:	2000      	movs	r0, #0
 8104706:	f7ff fecd 	bl	81044a4 <HAL_SYSCFG_ETHInterfaceSelect>
 810470a:	e003      	b.n	8104714 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 810470c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8104710:	f7ff fec8 	bl	81044a4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8104714:	4b63      	ldr	r3, [pc, #396]	@ (81048a4 <HAL_ETH_Init+0x1f0>)
 8104716:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8104718:	687b      	ldr	r3, [r7, #4]
 810471a:	681b      	ldr	r3, [r3, #0]
 810471c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104720:	681b      	ldr	r3, [r3, #0]
 8104722:	687a      	ldr	r2, [r7, #4]
 8104724:	6812      	ldr	r2, [r2, #0]
 8104726:	f043 0301 	orr.w	r3, r3, #1
 810472a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810472e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8104730:	f7ff feac 	bl	810448c <HAL_GetTick>
 8104734:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8104736:	e011      	b.n	810475c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8104738:	f7ff fea8 	bl	810448c <HAL_GetTick>
 810473c:	4602      	mov	r2, r0
 810473e:	68fb      	ldr	r3, [r7, #12]
 8104740:	1ad3      	subs	r3, r2, r3
 8104742:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8104746:	d909      	bls.n	810475c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8104748:	687b      	ldr	r3, [r7, #4]
 810474a:	2204      	movs	r2, #4
 810474c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	22e0      	movs	r2, #224	@ 0xe0
 8104754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8104758:	2301      	movs	r3, #1
 810475a:	e09c      	b.n	8104896 <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 810475c:	687b      	ldr	r3, [r7, #4]
 810475e:	681b      	ldr	r3, [r3, #0]
 8104760:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104764:	681b      	ldr	r3, [r3, #0]
 8104766:	f003 0301 	and.w	r3, r3, #1
 810476a:	2b00      	cmp	r3, #0
 810476c:	d1e4      	bne.n	8104738 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 810476e:	6878      	ldr	r0, [r7, #4]
 8104770:	f000 ff34 	bl	81055dc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8104774:	f002 f932 	bl	81069dc <HAL_RCC_GetHCLKFreq>
 8104778:	4603      	mov	r3, r0
 810477a:	4a4b      	ldr	r2, [pc, #300]	@ (81048a8 <HAL_ETH_Init+0x1f4>)
 810477c:	fba2 2303 	umull	r2, r3, r2, r3
 8104780:	0c9a      	lsrs	r2, r3, #18
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	681b      	ldr	r3, [r3, #0]
 8104786:	3a01      	subs	r2, #1
 8104788:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 810478c:	6878      	ldr	r0, [r7, #4]
 810478e:	f001 f931 	bl	81059f4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8104792:	687b      	ldr	r3, [r7, #4]
 8104794:	681b      	ldr	r3, [r3, #0]
 8104796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810479a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 810479e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 81047a2:	687a      	ldr	r2, [r7, #4]
 81047a4:	6812      	ldr	r2, [r2, #0]
 81047a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81047aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81047ae:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 81047b2:	687b      	ldr	r3, [r7, #4]
 81047b4:	695b      	ldr	r3, [r3, #20]
 81047b6:	f003 0303 	and.w	r3, r3, #3
 81047ba:	2b00      	cmp	r3, #0
 81047bc:	d009      	beq.n	81047d2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	2201      	movs	r2, #1
 81047c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 81047c6:	687b      	ldr	r3, [r7, #4]
 81047c8:	22e0      	movs	r2, #224	@ 0xe0
 81047ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 81047ce:	2301      	movs	r3, #1
 81047d0:	e061      	b.n	8104896 <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81047da:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 81047de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 81047e2:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 81047e6:	687a      	ldr	r2, [r7, #4]
 81047e8:	6952      	ldr	r2, [r2, #20]
 81047ea:	0051      	lsls	r1, r2, #1
 81047ec:	687a      	ldr	r2, [r7, #4]
 81047ee:	6812      	ldr	r2, [r2, #0]
 81047f0:	430b      	orrs	r3, r1
 81047f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81047f6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 81047fa:	6878      	ldr	r0, [r7, #4]
 81047fc:	f001 f997 	bl	8105b2e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8104800:	6878      	ldr	r0, [r7, #4]
 8104802:	f001 f9dd 	bl	8105bc0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8104806:	687b      	ldr	r3, [r7, #4]
 8104808:	685b      	ldr	r3, [r3, #4]
 810480a:	3305      	adds	r3, #5
 810480c:	781b      	ldrb	r3, [r3, #0]
 810480e:	021a      	lsls	r2, r3, #8
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	685b      	ldr	r3, [r3, #4]
 8104814:	3304      	adds	r3, #4
 8104816:	781b      	ldrb	r3, [r3, #0]
 8104818:	4619      	mov	r1, r3
 810481a:	687b      	ldr	r3, [r7, #4]
 810481c:	681b      	ldr	r3, [r3, #0]
 810481e:	430a      	orrs	r2, r1
 8104820:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104824:	687b      	ldr	r3, [r7, #4]
 8104826:	685b      	ldr	r3, [r3, #4]
 8104828:	3303      	adds	r3, #3
 810482a:	781b      	ldrb	r3, [r3, #0]
 810482c:	061a      	lsls	r2, r3, #24
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	685b      	ldr	r3, [r3, #4]
 8104832:	3302      	adds	r3, #2
 8104834:	781b      	ldrb	r3, [r3, #0]
 8104836:	041b      	lsls	r3, r3, #16
 8104838:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810483a:	687b      	ldr	r3, [r7, #4]
 810483c:	685b      	ldr	r3, [r3, #4]
 810483e:	3301      	adds	r3, #1
 8104840:	781b      	ldrb	r3, [r3, #0]
 8104842:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104844:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8104846:	687b      	ldr	r3, [r7, #4]
 8104848:	685b      	ldr	r3, [r3, #4]
 810484a:	781b      	ldrb	r3, [r3, #0]
 810484c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810484e:	687b      	ldr	r3, [r7, #4]
 8104850:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8104852:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104854:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8104858:	687b      	ldr	r3, [r7, #4]
 810485a:	681b      	ldr	r3, [r3, #0]
 810485c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	681a      	ldr	r2, [r3, #0]
 8104864:	4b11      	ldr	r3, [pc, #68]	@ (81048ac <HAL_ETH_Init+0x1f8>)
 8104866:	430b      	orrs	r3, r1
 8104868:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 810486c:	687b      	ldr	r3, [r7, #4]
 810486e:	681b      	ldr	r3, [r3, #0]
 8104870:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 8104874:	687a      	ldr	r2, [r7, #4]
 8104876:	6812      	ldr	r2, [r2, #0]
 8104878:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 810487c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8104880:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8104884:	687b      	ldr	r3, [r7, #4]
 8104886:	2200      	movs	r2, #0
 8104888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 810488c:	687b      	ldr	r3, [r7, #4]
 810488e:	2210      	movs	r2, #16
 8104890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104894:	2300      	movs	r3, #0
}
 8104896:	4618      	mov	r0, r3
 8104898:	3710      	adds	r7, #16
 810489a:	46bd      	mov	sp, r7
 810489c:	bd80      	pop	{r7, pc}
 810489e:	bf00      	nop
 81048a0:	58024400 	.word	0x58024400
 81048a4:	58000400 	.word	0x58000400
 81048a8:	431bde83 	.word	0x431bde83
 81048ac:	0c020060 	.word	0x0c020060

081048b0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 81048b0:	b580      	push	{r7, lr}
 81048b2:	b082      	sub	sp, #8
 81048b4:	af00      	add	r7, sp, #0
 81048b6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 81048b8:	687b      	ldr	r3, [r7, #4]
 81048ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81048be:	2b10      	cmp	r3, #16
 81048c0:	d166      	bne.n	8104990 <HAL_ETH_Start_IT+0xe0>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 81048c2:	687b      	ldr	r3, [r7, #4]
 81048c4:	2223      	movs	r2, #35	@ 0x23
 81048c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 81048ca:	687b      	ldr	r3, [r7, #4]
 81048cc:	2201      	movs	r2, #1
 81048ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 81048d0:	687b      	ldr	r3, [r7, #4]
 81048d2:	2204      	movs	r2, #4
 81048d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 81048d6:	6878      	ldr	r0, [r7, #4]
 81048d8:	f000 f9e5 	bl	8104ca6 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 81048dc:	687b      	ldr	r3, [r7, #4]
 81048de:	681b      	ldr	r3, [r3, #0]
 81048e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81048e4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81048e8:	687a      	ldr	r2, [r7, #4]
 81048ea:	6812      	ldr	r2, [r2, #0]
 81048ec:	f043 0301 	orr.w	r3, r3, #1
 81048f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81048f4:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 81048f8:	687b      	ldr	r3, [r7, #4]
 81048fa:	681b      	ldr	r3, [r3, #0]
 81048fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104900:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8104904:	687a      	ldr	r2, [r7, #4]
 8104906:	6812      	ldr	r2, [r2, #0]
 8104908:	f043 0301 	orr.w	r3, r3, #1
 810490c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104910:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8104914:	687b      	ldr	r3, [r7, #4]
 8104916:	681b      	ldr	r3, [r3, #0]
 8104918:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810491c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8104920:	687a      	ldr	r2, [r7, #4]
 8104922:	6812      	ldr	r2, [r2, #0]
 8104924:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8104928:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810492c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8104930:	687b      	ldr	r3, [r7, #4]
 8104932:	681b      	ldr	r3, [r3, #0]
 8104934:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8104938:	687b      	ldr	r3, [r7, #4]
 810493a:	681b      	ldr	r3, [r3, #0]
 810493c:	f042 0201 	orr.w	r2, r2, #1
 8104940:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	681b      	ldr	r3, [r3, #0]
 8104948:	681a      	ldr	r2, [r3, #0]
 810494a:	687b      	ldr	r3, [r7, #4]
 810494c:	681b      	ldr	r3, [r3, #0]
 810494e:	f042 0202 	orr.w	r2, r2, #2
 8104952:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8104954:	687b      	ldr	r3, [r7, #4]
 8104956:	681b      	ldr	r3, [r3, #0]
 8104958:	681a      	ldr	r2, [r3, #0]
 810495a:	687b      	ldr	r3, [r7, #4]
 810495c:	681b      	ldr	r3, [r3, #0]
 810495e:	f042 0201 	orr.w	r2, r2, #1
 8104962:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8104964:	687b      	ldr	r3, [r7, #4]
 8104966:	681b      	ldr	r3, [r3, #0]
 8104968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810496c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8104970:	687a      	ldr	r2, [r7, #4]
 8104972:	6812      	ldr	r2, [r2, #0]
 8104974:	f443 4350 	orr.w	r3, r3, #53248	@ 0xd000
 8104978:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 810497c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104980:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8104984:	687b      	ldr	r3, [r7, #4]
 8104986:	2223      	movs	r2, #35	@ 0x23
 8104988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 810498c:	2300      	movs	r3, #0
 810498e:	e000      	b.n	8104992 <HAL_ETH_Start_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8104990:	2301      	movs	r3, #1
  }
}
 8104992:	4618      	mov	r0, r3
 8104994:	3708      	adds	r7, #8
 8104996:	46bd      	mov	sp, r7
 8104998:	bd80      	pop	{r7, pc}

0810499a <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 810499a:	b480      	push	{r7}
 810499c:	b085      	sub	sp, #20
 810499e:	af00      	add	r7, sp, #0
 81049a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 81049a2:	687b      	ldr	r3, [r7, #4]
 81049a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81049a8:	2b23      	cmp	r3, #35	@ 0x23
 81049aa:	d167      	bne.n	8104a7c <HAL_ETH_Stop_IT+0xe2>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 81049ac:	687b      	ldr	r3, [r7, #4]
 81049ae:	2223      	movs	r2, #35	@ 0x23
 81049b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 81049b4:	687b      	ldr	r3, [r7, #4]
 81049b6:	681b      	ldr	r3, [r3, #0]
 81049b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81049bc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 81049c0:	687a      	ldr	r2, [r7, #4]
 81049c2:	6812      	ldr	r2, [r2, #0]
 81049c4:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 81049c8:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 81049cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81049d0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	681b      	ldr	r3, [r3, #0]
 81049d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81049dc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81049e0:	687a      	ldr	r2, [r7, #4]
 81049e2:	6812      	ldr	r2, [r2, #0]
 81049e4:	f023 0301 	bic.w	r3, r3, #1
 81049e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81049ec:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 81049f0:	687b      	ldr	r3, [r7, #4]
 81049f2:	681b      	ldr	r3, [r3, #0]
 81049f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81049f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 81049fc:	687a      	ldr	r2, [r7, #4]
 81049fe:	6812      	ldr	r2, [r2, #0]
 8104a00:	f023 0301 	bic.w	r3, r3, #1
 8104a04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104a08:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8104a0c:	687b      	ldr	r3, [r7, #4]
 8104a0e:	681b      	ldr	r3, [r3, #0]
 8104a10:	681a      	ldr	r2, [r3, #0]
 8104a12:	687b      	ldr	r3, [r7, #4]
 8104a14:	681b      	ldr	r3, [r3, #0]
 8104a16:	f022 0201 	bic.w	r2, r2, #1
 8104a1a:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8104a1c:	687b      	ldr	r3, [r7, #4]
 8104a1e:	681b      	ldr	r3, [r3, #0]
 8104a20:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8104a24:	687b      	ldr	r3, [r7, #4]
 8104a26:	681b      	ldr	r3, [r3, #0]
 8104a28:	f042 0201 	orr.w	r2, r2, #1
 8104a2c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8104a30:	687b      	ldr	r3, [r7, #4]
 8104a32:	681b      	ldr	r3, [r3, #0]
 8104a34:	681a      	ldr	r2, [r3, #0]
 8104a36:	687b      	ldr	r3, [r7, #4]
 8104a38:	681b      	ldr	r3, [r3, #0]
 8104a3a:	f022 0202 	bic.w	r2, r2, #2
 8104a3e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8104a40:	2300      	movs	r3, #0
 8104a42:	60fb      	str	r3, [r7, #12]
 8104a44:	e00e      	b.n	8104a64 <HAL_ETH_Stop_IT+0xca>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8104a46:	687b      	ldr	r3, [r7, #4]
 8104a48:	68fa      	ldr	r2, [r7, #12]
 8104a4a:	3212      	adds	r2, #18
 8104a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104a50:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8104a52:	68bb      	ldr	r3, [r7, #8]
 8104a54:	68db      	ldr	r3, [r3, #12]
 8104a56:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8104a5a:	68bb      	ldr	r3, [r7, #8]
 8104a5c:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8104a5e:	68fb      	ldr	r3, [r7, #12]
 8104a60:	3301      	adds	r3, #1
 8104a62:	60fb      	str	r3, [r7, #12]
 8104a64:	68fb      	ldr	r3, [r7, #12]
 8104a66:	2b03      	cmp	r3, #3
 8104a68:	d9ed      	bls.n	8104a46 <HAL_ETH_Stop_IT+0xac>
    }

    heth->RxDescList.ItMode = 0U;
 8104a6a:	687b      	ldr	r3, [r7, #4]
 8104a6c:	2200      	movs	r2, #0
 8104a6e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	2210      	movs	r2, #16
 8104a74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8104a78:	2300      	movs	r3, #0
 8104a7a:	e000      	b.n	8104a7e <HAL_ETH_Stop_IT+0xe4>
  }
  else
  {
    return HAL_ERROR;
 8104a7c:	2301      	movs	r3, #1
  }
}
 8104a7e:	4618      	mov	r0, r3
 8104a80:	3714      	adds	r7, #20
 8104a82:	46bd      	mov	sp, r7
 8104a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a88:	4770      	bx	lr

08104a8a <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8104a8a:	b580      	push	{r7, lr}
 8104a8c:	b082      	sub	sp, #8
 8104a8e:	af00      	add	r7, sp, #0
 8104a90:	6078      	str	r0, [r7, #4]
 8104a92:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8104a94:	683b      	ldr	r3, [r7, #0]
 8104a96:	2b00      	cmp	r3, #0
 8104a98:	d109      	bne.n	8104aae <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8104a9a:	687b      	ldr	r3, [r7, #4]
 8104a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104aa0:	f043 0201 	orr.w	r2, r3, #1
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8104aaa:	2301      	movs	r3, #1
 8104aac:	e03a      	b.n	8104b24 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104ab4:	2b23      	cmp	r3, #35	@ 0x23
 8104ab6:	d134      	bne.n	8104b22 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8104ab8:	683b      	ldr	r3, [r7, #0]
 8104aba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104abc:	687b      	ldr	r3, [r7, #4]
 8104abe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8104ac0:	2201      	movs	r2, #1
 8104ac2:	6839      	ldr	r1, [r7, #0]
 8104ac4:	6878      	ldr	r0, [r7, #4]
 8104ac6:	f001 f8d8 	bl	8105c7a <ETH_Prepare_Tx_Descriptors>
 8104aca:	4603      	mov	r3, r0
 8104acc:	2b00      	cmp	r3, #0
 8104ace:	d009      	beq.n	8104ae4 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8104ad0:	687b      	ldr	r3, [r7, #4]
 8104ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104ad6:	f043 0202 	orr.w	r2, r3, #2
 8104ada:	687b      	ldr	r3, [r7, #4]
 8104adc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8104ae0:	2301      	movs	r3, #1
 8104ae2:	e01f      	b.n	8104b24 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8104ae4:	f3bf 8f4f 	dsb	sy
}
 8104ae8:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8104aea:	687b      	ldr	r3, [r7, #4]
 8104aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104aee:	1c5a      	adds	r2, r3, #1
 8104af0:	687b      	ldr	r3, [r7, #4]
 8104af2:	629a      	str	r2, [r3, #40]	@ 0x28
 8104af4:	687b      	ldr	r3, [r7, #4]
 8104af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104af8:	2b03      	cmp	r3, #3
 8104afa:	d904      	bls.n	8104b06 <HAL_ETH_Transmit_IT+0x7c>
 8104afc:	687b      	ldr	r3, [r7, #4]
 8104afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104b00:	1f1a      	subs	r2, r3, #4
 8104b02:	687b      	ldr	r3, [r7, #4]
 8104b04:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8104b06:	687b      	ldr	r3, [r7, #4]
 8104b08:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8104b0a:	687b      	ldr	r3, [r7, #4]
 8104b0c:	681a      	ldr	r2, [r3, #0]
 8104b0e:	687b      	ldr	r3, [r7, #4]
 8104b10:	3106      	adds	r1, #6
 8104b12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8104b16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104b1a:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8104b1e:	2300      	movs	r3, #0
 8104b20:	e000      	b.n	8104b24 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8104b22:	2301      	movs	r3, #1
  }
}
 8104b24:	4618      	mov	r0, r3
 8104b26:	3708      	adds	r7, #8
 8104b28:	46bd      	mov	sp, r7
 8104b2a:	bd80      	pop	{r7, pc}

08104b2c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8104b2c:	b580      	push	{r7, lr}
 8104b2e:	b088      	sub	sp, #32
 8104b30:	af00      	add	r7, sp, #0
 8104b32:	6078      	str	r0, [r7, #4]
 8104b34:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8104b36:	2300      	movs	r3, #0
 8104b38:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8104b3a:	2300      	movs	r3, #0
 8104b3c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8104b3e:	683b      	ldr	r3, [r7, #0]
 8104b40:	2b00      	cmp	r3, #0
 8104b42:	d109      	bne.n	8104b58 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8104b44:	687b      	ldr	r3, [r7, #4]
 8104b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104b4a:	f043 0201 	orr.w	r2, r3, #1
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8104b54:	2301      	movs	r3, #1
 8104b56:	e0a2      	b.n	8104c9e <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8104b58:	687b      	ldr	r3, [r7, #4]
 8104b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104b5e:	2b23      	cmp	r3, #35	@ 0x23
 8104b60:	d001      	beq.n	8104b66 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8104b62:	2301      	movs	r3, #1
 8104b64:	e09b      	b.n	8104c9e <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104b6a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8104b6c:	687b      	ldr	r3, [r7, #4]
 8104b6e:	69fa      	ldr	r2, [r7, #28]
 8104b70:	3212      	adds	r2, #18
 8104b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104b76:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8104b78:	687b      	ldr	r3, [r7, #4]
 8104b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104b7c:	f1c3 0304 	rsb	r3, r3, #4
 8104b80:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8104b82:	e064      	b.n	8104c4e <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8104b84:	69bb      	ldr	r3, [r7, #24]
 8104b86:	68db      	ldr	r3, [r3, #12]
 8104b88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8104b8c:	2b00      	cmp	r3, #0
 8104b8e:	d007      	beq.n	8104ba0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8104b90:	69bb      	ldr	r3, [r7, #24]
 8104b92:	685a      	ldr	r2, [r3, #4]
 8104b94:	687b      	ldr	r3, [r7, #4]
 8104b96:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8104b98:	69bb      	ldr	r3, [r7, #24]
 8104b9a:	681a      	ldr	r2, [r3, #0]
 8104b9c:	687b      	ldr	r3, [r7, #4]
 8104b9e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8104ba0:	69bb      	ldr	r3, [r7, #24]
 8104ba2:	68db      	ldr	r3, [r3, #12]
 8104ba4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104ba8:	2b00      	cmp	r3, #0
 8104baa:	d103      	bne.n	8104bb4 <HAL_ETH_ReadData+0x88>
 8104bac:	687b      	ldr	r3, [r7, #4]
 8104bae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8104bb0:	2b00      	cmp	r3, #0
 8104bb2:	d03a      	beq.n	8104c2a <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8104bb4:	69bb      	ldr	r3, [r7, #24]
 8104bb6:	68db      	ldr	r3, [r3, #12]
 8104bb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104bbc:	2b00      	cmp	r3, #0
 8104bbe:	d005      	beq.n	8104bcc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8104bc0:	687b      	ldr	r3, [r7, #4]
 8104bc2:	2200      	movs	r2, #0
 8104bc4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8104bc6:	687b      	ldr	r3, [r7, #4]
 8104bc8:	2200      	movs	r2, #0
 8104bca:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8104bcc:	69bb      	ldr	r3, [r7, #24]
 8104bce:	68db      	ldr	r3, [r3, #12]
 8104bd0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104bd8:	1ad3      	subs	r3, r2, r3
 8104bda:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8104bdc:	69bb      	ldr	r3, [r7, #24]
 8104bde:	68db      	ldr	r3, [r3, #12]
 8104be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8104be4:	2b00      	cmp	r3, #0
 8104be6:	d005      	beq.n	8104bf4 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8104be8:	69bb      	ldr	r3, [r7, #24]
 8104bea:	68da      	ldr	r2, [r3, #12]
 8104bec:	687b      	ldr	r3, [r7, #4]
 8104bee:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8104bf0:	2301      	movs	r3, #1
 8104bf2:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8104bf4:	687b      	ldr	r3, [r7, #4]
 8104bf6:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8104bfa:	687b      	ldr	r3, [r7, #4]
 8104bfc:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8104c00:	69bb      	ldr	r3, [r7, #24]
 8104c02:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8104c04:	461a      	mov	r2, r3
 8104c06:	68bb      	ldr	r3, [r7, #8]
 8104c08:	b29b      	uxth	r3, r3
 8104c0a:	f7ff fa35 	bl	8104078 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8104c0e:	687b      	ldr	r3, [r7, #4]
 8104c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104c12:	1c5a      	adds	r2, r3, #1
 8104c14:	687b      	ldr	r3, [r7, #4]
 8104c16:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8104c18:	687b      	ldr	r3, [r7, #4]
 8104c1a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8104c1c:	68bb      	ldr	r3, [r7, #8]
 8104c1e:	441a      	add	r2, r3
 8104c20:	687b      	ldr	r3, [r7, #4]
 8104c22:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8104c24:	69bb      	ldr	r3, [r7, #24]
 8104c26:	2200      	movs	r2, #0
 8104c28:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8104c2a:	69fb      	ldr	r3, [r7, #28]
 8104c2c:	3301      	adds	r3, #1
 8104c2e:	61fb      	str	r3, [r7, #28]
 8104c30:	69fb      	ldr	r3, [r7, #28]
 8104c32:	2b03      	cmp	r3, #3
 8104c34:	d902      	bls.n	8104c3c <HAL_ETH_ReadData+0x110>
 8104c36:	69fb      	ldr	r3, [r7, #28]
 8104c38:	3b04      	subs	r3, #4
 8104c3a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8104c3c:	687b      	ldr	r3, [r7, #4]
 8104c3e:	69fa      	ldr	r2, [r7, #28]
 8104c40:	3212      	adds	r2, #18
 8104c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104c46:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8104c48:	697b      	ldr	r3, [r7, #20]
 8104c4a:	3301      	adds	r3, #1
 8104c4c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8104c4e:	69bb      	ldr	r3, [r7, #24]
 8104c50:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8104c52:	2b00      	cmp	r3, #0
 8104c54:	db06      	blt.n	8104c64 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8104c56:	697a      	ldr	r2, [r7, #20]
 8104c58:	68fb      	ldr	r3, [r7, #12]
 8104c5a:	429a      	cmp	r2, r3
 8104c5c:	d202      	bcs.n	8104c64 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8104c5e:	7cfb      	ldrb	r3, [r7, #19]
 8104c60:	2b00      	cmp	r3, #0
 8104c62:	d08f      	beq.n	8104b84 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8104c64:	687b      	ldr	r3, [r7, #4]
 8104c66:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8104c68:	697b      	ldr	r3, [r7, #20]
 8104c6a:	441a      	add	r2, r3
 8104c6c:	687b      	ldr	r3, [r7, #4]
 8104c6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8104c70:	687b      	ldr	r3, [r7, #4]
 8104c72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104c74:	2b00      	cmp	r3, #0
 8104c76:	d002      	beq.n	8104c7e <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8104c78:	6878      	ldr	r0, [r7, #4]
 8104c7a:	f000 f814 	bl	8104ca6 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8104c7e:	687b      	ldr	r3, [r7, #4]
 8104c80:	69fa      	ldr	r2, [r7, #28]
 8104c82:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8104c84:	7cfb      	ldrb	r3, [r7, #19]
 8104c86:	2b01      	cmp	r3, #1
 8104c88:	d108      	bne.n	8104c9c <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8104c8a:	687b      	ldr	r3, [r7, #4]
 8104c8c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8104c8e:	683b      	ldr	r3, [r7, #0]
 8104c90:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8104c92:	687b      	ldr	r3, [r7, #4]
 8104c94:	2200      	movs	r2, #0
 8104c96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8104c98:	2300      	movs	r3, #0
 8104c9a:	e000      	b.n	8104c9e <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8104c9c:	2301      	movs	r3, #1
}
 8104c9e:	4618      	mov	r0, r3
 8104ca0:	3720      	adds	r7, #32
 8104ca2:	46bd      	mov	sp, r7
 8104ca4:	bd80      	pop	{r7, pc}

08104ca6 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8104ca6:	b580      	push	{r7, lr}
 8104ca8:	b088      	sub	sp, #32
 8104caa:	af00      	add	r7, sp, #0
 8104cac:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8104cae:	2300      	movs	r3, #0
 8104cb0:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8104cb2:	2301      	movs	r3, #1
 8104cb4:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8104cb6:	687b      	ldr	r3, [r7, #4]
 8104cb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104cba:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8104cbc:	687b      	ldr	r3, [r7, #4]
 8104cbe:	69fa      	ldr	r2, [r7, #28]
 8104cc0:	3212      	adds	r2, #18
 8104cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104cc6:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8104cc8:	687b      	ldr	r3, [r7, #4]
 8104cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104ccc:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8104cce:	e038      	b.n	8104d42 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8104cd0:	697b      	ldr	r3, [r7, #20]
 8104cd2:	691b      	ldr	r3, [r3, #16]
 8104cd4:	2b00      	cmp	r3, #0
 8104cd6:	d112      	bne.n	8104cfe <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8104cd8:	f107 0308 	add.w	r3, r7, #8
 8104cdc:	4618      	mov	r0, r3
 8104cde:	f7ff f99b 	bl	8104018 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8104ce2:	68bb      	ldr	r3, [r7, #8]
 8104ce4:	2b00      	cmp	r3, #0
 8104ce6:	d102      	bne.n	8104cee <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8104ce8:	2300      	movs	r3, #0
 8104cea:	74fb      	strb	r3, [r7, #19]
 8104cec:	e007      	b.n	8104cfe <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8104cee:	68bb      	ldr	r3, [r7, #8]
 8104cf0:	461a      	mov	r2, r3
 8104cf2:	697b      	ldr	r3, [r7, #20]
 8104cf4:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8104cf6:	68bb      	ldr	r3, [r7, #8]
 8104cf8:	461a      	mov	r2, r3
 8104cfa:	697b      	ldr	r3, [r7, #20]
 8104cfc:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8104cfe:	7cfb      	ldrb	r3, [r7, #19]
 8104d00:	2b00      	cmp	r3, #0
 8104d02:	d01e      	beq.n	8104d42 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8104d04:	687b      	ldr	r3, [r7, #4]
 8104d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104d08:	2b00      	cmp	r3, #0
 8104d0a:	d004      	beq.n	8104d16 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8104d0c:	697b      	ldr	r3, [r7, #20]
 8104d0e:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8104d12:	60da      	str	r2, [r3, #12]
 8104d14:	e003      	b.n	8104d1e <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8104d16:	697b      	ldr	r3, [r7, #20]
 8104d18:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8104d1c:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8104d1e:	69fb      	ldr	r3, [r7, #28]
 8104d20:	3301      	adds	r3, #1
 8104d22:	61fb      	str	r3, [r7, #28]
 8104d24:	69fb      	ldr	r3, [r7, #28]
 8104d26:	2b03      	cmp	r3, #3
 8104d28:	d902      	bls.n	8104d30 <ETH_UpdateDescriptor+0x8a>
 8104d2a:	69fb      	ldr	r3, [r7, #28]
 8104d2c:	3b04      	subs	r3, #4
 8104d2e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8104d30:	687b      	ldr	r3, [r7, #4]
 8104d32:	69fa      	ldr	r2, [r7, #28]
 8104d34:	3212      	adds	r2, #18
 8104d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104d3a:	617b      	str	r3, [r7, #20]
      desccount--;
 8104d3c:	69bb      	ldr	r3, [r7, #24]
 8104d3e:	3b01      	subs	r3, #1
 8104d40:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8104d42:	69bb      	ldr	r3, [r7, #24]
 8104d44:	2b00      	cmp	r3, #0
 8104d46:	d002      	beq.n	8104d4e <ETH_UpdateDescriptor+0xa8>
 8104d48:	7cfb      	ldrb	r3, [r7, #19]
 8104d4a:	2b00      	cmp	r3, #0
 8104d4c:	d1c0      	bne.n	8104cd0 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8104d4e:	687b      	ldr	r3, [r7, #4]
 8104d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104d52:	69ba      	ldr	r2, [r7, #24]
 8104d54:	429a      	cmp	r2, r3
 8104d56:	d01b      	beq.n	8104d90 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8104d58:	69fb      	ldr	r3, [r7, #28]
 8104d5a:	3301      	adds	r3, #1
 8104d5c:	f003 0303 	and.w	r3, r3, #3
 8104d60:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8104d62:	f3bf 8f5f 	dmb	sy
}
 8104d66:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8104d68:	687b      	ldr	r3, [r7, #4]
 8104d6a:	6919      	ldr	r1, [r3, #16]
 8104d6c:	68fa      	ldr	r2, [r7, #12]
 8104d6e:	4613      	mov	r3, r2
 8104d70:	005b      	lsls	r3, r3, #1
 8104d72:	4413      	add	r3, r2
 8104d74:	00db      	lsls	r3, r3, #3
 8104d76:	18ca      	adds	r2, r1, r3
 8104d78:	687b      	ldr	r3, [r7, #4]
 8104d7a:	681b      	ldr	r3, [r3, #0]
 8104d7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104d80:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	69fa      	ldr	r2, [r7, #28]
 8104d88:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8104d8a:	687b      	ldr	r3, [r7, #4]
 8104d8c:	69ba      	ldr	r2, [r7, #24]
 8104d8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8104d90:	bf00      	nop
 8104d92:	3720      	adds	r7, #32
 8104d94:	46bd      	mov	sp, r7
 8104d96:	bd80      	pop	{r7, pc}

08104d98 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8104d98:	b580      	push	{r7, lr}
 8104d9a:	b086      	sub	sp, #24
 8104d9c:	af00      	add	r7, sp, #0
 8104d9e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8104da0:	687b      	ldr	r3, [r7, #4]
 8104da2:	3318      	adds	r3, #24
 8104da4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8104da6:	68bb      	ldr	r3, [r7, #8]
 8104da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104daa:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8104dac:	68bb      	ldr	r3, [r7, #8]
 8104dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104db0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8104db2:	2301      	movs	r3, #1
 8104db4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8104db6:	e047      	b.n	8104e48 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8104db8:	2301      	movs	r3, #1
 8104dba:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8104dbc:	697b      	ldr	r3, [r7, #20]
 8104dbe:	3b01      	subs	r3, #1
 8104dc0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8104dc2:	68ba      	ldr	r2, [r7, #8]
 8104dc4:	693b      	ldr	r3, [r7, #16]
 8104dc6:	3304      	adds	r3, #4
 8104dc8:	009b      	lsls	r3, r3, #2
 8104dca:	4413      	add	r3, r2
 8104dcc:	685b      	ldr	r3, [r3, #4]
 8104dce:	2b00      	cmp	r3, #0
 8104dd0:	d10a      	bne.n	8104de8 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8104dd2:	693b      	ldr	r3, [r7, #16]
 8104dd4:	3301      	adds	r3, #1
 8104dd6:	613b      	str	r3, [r7, #16]
 8104dd8:	693b      	ldr	r3, [r7, #16]
 8104dda:	2b03      	cmp	r3, #3
 8104ddc:	d902      	bls.n	8104de4 <HAL_ETH_ReleaseTxPacket+0x4c>
 8104dde:	693b      	ldr	r3, [r7, #16]
 8104de0:	3b04      	subs	r3, #4
 8104de2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8104de4:	2300      	movs	r3, #0
 8104de6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8104de8:	7bbb      	ldrb	r3, [r7, #14]
 8104dea:	2b00      	cmp	r3, #0
 8104dec:	d02c      	beq.n	8104e48 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8104dee:	687b      	ldr	r3, [r7, #4]
 8104df0:	68d9      	ldr	r1, [r3, #12]
 8104df2:	693a      	ldr	r2, [r7, #16]
 8104df4:	4613      	mov	r3, r2
 8104df6:	005b      	lsls	r3, r3, #1
 8104df8:	4413      	add	r3, r2
 8104dfa:	00db      	lsls	r3, r3, #3
 8104dfc:	440b      	add	r3, r1
 8104dfe:	68db      	ldr	r3, [r3, #12]
 8104e00:	2b00      	cmp	r3, #0
 8104e02:	db1f      	blt.n	8104e44 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8104e04:	68ba      	ldr	r2, [r7, #8]
 8104e06:	693b      	ldr	r3, [r7, #16]
 8104e08:	3304      	adds	r3, #4
 8104e0a:	009b      	lsls	r3, r3, #2
 8104e0c:	4413      	add	r3, r2
 8104e0e:	685b      	ldr	r3, [r3, #4]
 8104e10:	4618      	mov	r0, r3
 8104e12:	f7ff f971 	bl	81040f8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8104e16:	68ba      	ldr	r2, [r7, #8]
 8104e18:	693b      	ldr	r3, [r7, #16]
 8104e1a:	3304      	adds	r3, #4
 8104e1c:	009b      	lsls	r3, r3, #2
 8104e1e:	4413      	add	r3, r2
 8104e20:	2200      	movs	r2, #0
 8104e22:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8104e24:	693b      	ldr	r3, [r7, #16]
 8104e26:	3301      	adds	r3, #1
 8104e28:	613b      	str	r3, [r7, #16]
 8104e2a:	693b      	ldr	r3, [r7, #16]
 8104e2c:	2b03      	cmp	r3, #3
 8104e2e:	d902      	bls.n	8104e36 <HAL_ETH_ReleaseTxPacket+0x9e>
 8104e30:	693b      	ldr	r3, [r7, #16]
 8104e32:	3b04      	subs	r3, #4
 8104e34:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8104e36:	68bb      	ldr	r3, [r7, #8]
 8104e38:	697a      	ldr	r2, [r7, #20]
 8104e3a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8104e3c:	68bb      	ldr	r3, [r7, #8]
 8104e3e:	693a      	ldr	r2, [r7, #16]
 8104e40:	62da      	str	r2, [r3, #44]	@ 0x2c
 8104e42:	e001      	b.n	8104e48 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8104e44:	2300      	movs	r3, #0
 8104e46:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8104e48:	697b      	ldr	r3, [r7, #20]
 8104e4a:	2b00      	cmp	r3, #0
 8104e4c:	d002      	beq.n	8104e54 <HAL_ETH_ReleaseTxPacket+0xbc>
 8104e4e:	7bfb      	ldrb	r3, [r7, #15]
 8104e50:	2b00      	cmp	r3, #0
 8104e52:	d1b1      	bne.n	8104db8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8104e54:	2300      	movs	r3, #0
}
 8104e56:	4618      	mov	r0, r3
 8104e58:	3718      	adds	r7, #24
 8104e5a:	46bd      	mov	sp, r7
 8104e5c:	bd80      	pop	{r7, pc}
	...

08104e60 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8104e60:	b580      	push	{r7, lr}
 8104e62:	b088      	sub	sp, #32
 8104e64:	af00      	add	r7, sp, #0
 8104e66:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8104e68:	687b      	ldr	r3, [r7, #4]
 8104e6a:	681b      	ldr	r3, [r3, #0]
 8104e6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8104e70:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8104e72:	687b      	ldr	r3, [r7, #4]
 8104e74:	681b      	ldr	r3, [r3, #0]
 8104e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104e7a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8104e7e:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8104e80:	687b      	ldr	r3, [r7, #4]
 8104e82:	681b      	ldr	r3, [r3, #0]
 8104e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104e88:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8104e8c:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8104e8e:	4b77      	ldr	r3, [pc, #476]	@ (810506c <HAL_ETH_IRQHandler+0x20c>)
 8104e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104e92:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 8104e94:	4b76      	ldr	r3, [pc, #472]	@ (8105070 <HAL_ETH_IRQHandler+0x210>)
 8104e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104e98:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8104e9a:	69bb      	ldr	r3, [r7, #24]
 8104e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104ea0:	2b00      	cmp	r3, #0
 8104ea2:	d010      	beq.n	8104ec6 <HAL_ETH_IRQHandler+0x66>
 8104ea4:	697b      	ldr	r3, [r7, #20]
 8104ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104eaa:	2b00      	cmp	r3, #0
 8104eac:	d00b      	beq.n	8104ec6 <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8104eae:	687b      	ldr	r3, [r7, #4]
 8104eb0:	681b      	ldr	r3, [r3, #0]
 8104eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104eb6:	461a      	mov	r2, r3
 8104eb8:	f248 0340 	movw	r3, #32832	@ 0x8040
 8104ebc:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8104ec0:	6878      	ldr	r0, [r7, #4]
 8104ec2:	f7fe fc29 	bl	8103718 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8104ec6:	69bb      	ldr	r3, [r7, #24]
 8104ec8:	f003 0301 	and.w	r3, r3, #1
 8104ecc:	2b00      	cmp	r3, #0
 8104ece:	d010      	beq.n	8104ef2 <HAL_ETH_IRQHandler+0x92>
 8104ed0:	697b      	ldr	r3, [r7, #20]
 8104ed2:	f003 0301 	and.w	r3, r3, #1
 8104ed6:	2b00      	cmp	r3, #0
 8104ed8:	d00b      	beq.n	8104ef2 <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8104eda:	687b      	ldr	r3, [r7, #4]
 8104edc:	681b      	ldr	r3, [r3, #0]
 8104ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104ee2:	461a      	mov	r2, r3
 8104ee4:	f248 0301 	movw	r3, #32769	@ 0x8001
 8104ee8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8104eec:	6878      	ldr	r0, [r7, #4]
 8104eee:	f7fe fc23 	bl	8103738 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8104ef2:	69bb      	ldr	r3, [r7, #24]
 8104ef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8104ef8:	2b00      	cmp	r3, #0
 8104efa:	d047      	beq.n	8104f8c <HAL_ETH_IRQHandler+0x12c>
 8104efc:	697b      	ldr	r3, [r7, #20]
 8104efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8104f02:	2b00      	cmp	r3, #0
 8104f04:	d042      	beq.n	8104f8c <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8104f06:	687b      	ldr	r3, [r7, #4]
 8104f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104f0c:	f043 0208 	orr.w	r2, r3, #8
 8104f10:	687b      	ldr	r3, [r7, #4]
 8104f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8104f16:	69bb      	ldr	r3, [r7, #24]
 8104f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8104f1c:	2b00      	cmp	r3, #0
 8104f1e:	d01e      	beq.n	8104f5e <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8104f20:	687b      	ldr	r3, [r7, #4]
 8104f22:	681b      	ldr	r3, [r3, #0]
 8104f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104f28:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8104f2c:	f241 1302 	movw	r3, #4354	@ 0x1102
 8104f30:	4013      	ands	r3, r2
 8104f32:	687a      	ldr	r2, [r7, #4]
 8104f34:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8104f38:	687b      	ldr	r3, [r7, #4]
 8104f3a:	681b      	ldr	r3, [r3, #0]
 8104f3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104f40:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8104f44:	687a      	ldr	r2, [r7, #4]
 8104f46:	6812      	ldr	r2, [r2, #0]
 8104f48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8104f4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104f50:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8104f54:	687b      	ldr	r3, [r7, #4]
 8104f56:	22e0      	movs	r2, #224	@ 0xe0
 8104f58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8104f5c:	e013      	b.n	8104f86 <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8104f5e:	687b      	ldr	r3, [r7, #4]
 8104f60:	681b      	ldr	r3, [r3, #0]
 8104f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104f66:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8104f6a:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8104f6e:	687b      	ldr	r3, [r7, #4]
 8104f70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8104f74:	687b      	ldr	r3, [r7, #4]
 8104f76:	681b      	ldr	r3, [r3, #0]
 8104f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104f7c:	461a      	mov	r2, r3
 8104f7e:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8104f82:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8104f86:	6878      	ldr	r0, [r7, #4]
 8104f88:	f7fe fbe6 	bl	8103758 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8104f8c:	69fb      	ldr	r3, [r7, #28]
 8104f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8104f92:	2b00      	cmp	r3, #0
 8104f94:	d104      	bne.n	8104fa0 <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8104f96:	69fb      	ldr	r3, [r7, #28]
 8104f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8104f9c:	2b00      	cmp	r3, #0
 8104f9e:	d019      	beq.n	8104fd4 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8104fa0:	687b      	ldr	r3, [r7, #4]
 8104fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104fa6:	f043 0210 	orr.w	r2, r3, #16
 8104faa:	687b      	ldr	r3, [r7, #4]
 8104fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	681b      	ldr	r3, [r3, #0]
 8104fb4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	22e0      	movs	r2, #224	@ 0xe0
 8104fc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8104fc6:	6878      	ldr	r0, [r7, #4]
 8104fc8:	f7fe fbc6 	bl	8103758 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8104fcc:	687b      	ldr	r3, [r7, #4]
 8104fce:	2200      	movs	r2, #0
 8104fd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8104fd4:	69fb      	ldr	r3, [r7, #28]
 8104fd6:	f003 0310 	and.w	r3, r3, #16
 8104fda:	2b00      	cmp	r3, #0
 8104fdc:	d00f      	beq.n	8104ffe <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8104fde:	687b      	ldr	r3, [r7, #4]
 8104fe0:	681b      	ldr	r3, [r3, #0]
 8104fe2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8104fe6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8104ff0:	6878      	ldr	r0, [r7, #4]
 8104ff2:	f000 f83f 	bl	8105074 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8104ff6:	687b      	ldr	r3, [r7, #4]
 8104ff8:	2200      	movs	r2, #0
 8104ffa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8104ffe:	69fb      	ldr	r3, [r7, #28]
 8105000:	f003 0320 	and.w	r3, r3, #32
 8105004:	2b00      	cmp	r3, #0
 8105006:	d00f      	beq.n	8105028 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8105008:	687b      	ldr	r3, [r7, #4]
 810500a:	681b      	ldr	r3, [r3, #0]
 810500c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8105010:	f003 020f 	and.w	r2, r3, #15
 8105014:	687b      	ldr	r3, [r7, #4]
 8105016:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 810501a:	6878      	ldr	r0, [r7, #4]
 810501c:	f000 f834 	bl	8105088 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8105020:	687b      	ldr	r3, [r7, #4]
 8105022:	2200      	movs	r2, #0
 8105024:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8105028:	f7ff fb30 	bl	810468c <HAL_GetCurrentCPUID>
 810502c:	4603      	mov	r3, r0
 810502e:	2b03      	cmp	r3, #3
 8105030:	d10c      	bne.n	810504c <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8105032:	693b      	ldr	r3, [r7, #16]
 8105034:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8105038:	2b00      	cmp	r3, #0
 810503a:	d013      	beq.n	8105064 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 810503c:	4b0b      	ldr	r3, [pc, #44]	@ (810506c <HAL_ETH_IRQHandler+0x20c>)
 810503e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8105042:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8105044:	6878      	ldr	r0, [r7, #4]
 8105046:	f000 f829 	bl	810509c <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 810504a:	e00b      	b.n	8105064 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 810504c:	68fb      	ldr	r3, [r7, #12]
 810504e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8105052:	2b00      	cmp	r3, #0
 8105054:	d006      	beq.n	8105064 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8105056:	4b06      	ldr	r3, [pc, #24]	@ (8105070 <HAL_ETH_IRQHandler+0x210>)
 8105058:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 810505c:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 810505e:	6878      	ldr	r0, [r7, #4]
 8105060:	f000 f81c 	bl	810509c <HAL_ETH_WakeUpCallback>
}
 8105064:	bf00      	nop
 8105066:	3720      	adds	r7, #32
 8105068:	46bd      	mov	sp, r7
 810506a:	bd80      	pop	{r7, pc}
 810506c:	58000080 	.word	0x58000080
 8105070:	580000c0 	.word	0x580000c0

08105074 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8105074:	b480      	push	{r7}
 8105076:	b083      	sub	sp, #12
 8105078:	af00      	add	r7, sp, #0
 810507a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 810507c:	bf00      	nop
 810507e:	370c      	adds	r7, #12
 8105080:	46bd      	mov	sp, r7
 8105082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105086:	4770      	bx	lr

08105088 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8105088:	b480      	push	{r7}
 810508a:	b083      	sub	sp, #12
 810508c:	af00      	add	r7, sp, #0
 810508e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8105090:	bf00      	nop
 8105092:	370c      	adds	r7, #12
 8105094:	46bd      	mov	sp, r7
 8105096:	f85d 7b04 	ldr.w	r7, [sp], #4
 810509a:	4770      	bx	lr

0810509c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 810509c:	b480      	push	{r7}
 810509e:	b083      	sub	sp, #12
 81050a0:	af00      	add	r7, sp, #0
 81050a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 81050a4:	bf00      	nop
 81050a6:	370c      	adds	r7, #12
 81050a8:	46bd      	mov	sp, r7
 81050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050ae:	4770      	bx	lr

081050b0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 81050b0:	b580      	push	{r7, lr}
 81050b2:	b086      	sub	sp, #24
 81050b4:	af00      	add	r7, sp, #0
 81050b6:	60f8      	str	r0, [r7, #12]
 81050b8:	60b9      	str	r1, [r7, #8]
 81050ba:	607a      	str	r2, [r7, #4]
 81050bc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 81050be:	68fb      	ldr	r3, [r7, #12]
 81050c0:	681b      	ldr	r3, [r3, #0]
 81050c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81050c6:	f003 0301 	and.w	r3, r3, #1
 81050ca:	2b00      	cmp	r3, #0
 81050cc:	d001      	beq.n	81050d2 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 81050ce:	2301      	movs	r3, #1
 81050d0:	e03e      	b.n	8105150 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 81050d2:	68fb      	ldr	r3, [r7, #12]
 81050d4:	681b      	ldr	r3, [r3, #0]
 81050d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81050da:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 81050dc:	697b      	ldr	r3, [r7, #20]
 81050de:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 81050e2:	68bb      	ldr	r3, [r7, #8]
 81050e4:	055b      	lsls	r3, r3, #21
 81050e6:	4313      	orrs	r3, r2
 81050e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 81050ea:	697b      	ldr	r3, [r7, #20]
 81050ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 81050f0:	687b      	ldr	r3, [r7, #4]
 81050f2:	041b      	lsls	r3, r3, #16
 81050f4:	4313      	orrs	r3, r2
 81050f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 81050f8:	697b      	ldr	r3, [r7, #20]
 81050fa:	f043 030c 	orr.w	r3, r3, #12
 81050fe:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8105100:	697b      	ldr	r3, [r7, #20]
 8105102:	f043 0301 	orr.w	r3, r3, #1
 8105106:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8105108:	68fb      	ldr	r3, [r7, #12]
 810510a:	681b      	ldr	r3, [r3, #0]
 810510c:	697a      	ldr	r2, [r7, #20]
 810510e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8105112:	f7ff f9bb 	bl	810448c <HAL_GetTick>
 8105116:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8105118:	e009      	b.n	810512e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 810511a:	f7ff f9b7 	bl	810448c <HAL_GetTick>
 810511e:	4602      	mov	r2, r0
 8105120:	693b      	ldr	r3, [r7, #16]
 8105122:	1ad3      	subs	r3, r2, r3
 8105124:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8105128:	d901      	bls.n	810512e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 810512a:	2301      	movs	r3, #1
 810512c:	e010      	b.n	8105150 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810512e:	68fb      	ldr	r3, [r7, #12]
 8105130:	681b      	ldr	r3, [r3, #0]
 8105132:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8105136:	f003 0301 	and.w	r3, r3, #1
 810513a:	2b00      	cmp	r3, #0
 810513c:	d1ed      	bne.n	810511a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 810513e:	68fb      	ldr	r3, [r7, #12]
 8105140:	681b      	ldr	r3, [r3, #0]
 8105142:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8105146:	b29b      	uxth	r3, r3
 8105148:	461a      	mov	r2, r3
 810514a:	683b      	ldr	r3, [r7, #0]
 810514c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810514e:	2300      	movs	r3, #0
}
 8105150:	4618      	mov	r0, r3
 8105152:	3718      	adds	r7, #24
 8105154:	46bd      	mov	sp, r7
 8105156:	bd80      	pop	{r7, pc}

08105158 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8105158:	b580      	push	{r7, lr}
 810515a:	b086      	sub	sp, #24
 810515c:	af00      	add	r7, sp, #0
 810515e:	60f8      	str	r0, [r7, #12]
 8105160:	60b9      	str	r1, [r7, #8]
 8105162:	607a      	str	r2, [r7, #4]
 8105164:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8105166:	68fb      	ldr	r3, [r7, #12]
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810516e:	f003 0301 	and.w	r3, r3, #1
 8105172:	2b00      	cmp	r3, #0
 8105174:	d001      	beq.n	810517a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8105176:	2301      	movs	r3, #1
 8105178:	e03c      	b.n	81051f4 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 810517a:	68fb      	ldr	r3, [r7, #12]
 810517c:	681b      	ldr	r3, [r3, #0]
 810517e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8105182:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8105184:	697b      	ldr	r3, [r7, #20]
 8105186:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 810518a:	68bb      	ldr	r3, [r7, #8]
 810518c:	055b      	lsls	r3, r3, #21
 810518e:	4313      	orrs	r3, r2
 8105190:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8105192:	697b      	ldr	r3, [r7, #20]
 8105194:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8105198:	687b      	ldr	r3, [r7, #4]
 810519a:	041b      	lsls	r3, r3, #16
 810519c:	4313      	orrs	r3, r2
 810519e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 81051a0:	697b      	ldr	r3, [r7, #20]
 81051a2:	f023 030c 	bic.w	r3, r3, #12
 81051a6:	f043 0304 	orr.w	r3, r3, #4
 81051aa:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 81051ac:	697b      	ldr	r3, [r7, #20]
 81051ae:	f043 0301 	orr.w	r3, r3, #1
 81051b2:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 81051b4:	683b      	ldr	r3, [r7, #0]
 81051b6:	b29a      	uxth	r2, r3
 81051b8:	4b10      	ldr	r3, [pc, #64]	@ (81051fc <HAL_ETH_WritePHYRegister+0xa4>)
 81051ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 81051be:	4a0f      	ldr	r2, [pc, #60]	@ (81051fc <HAL_ETH_WritePHYRegister+0xa4>)
 81051c0:	697b      	ldr	r3, [r7, #20]
 81051c2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 81051c6:	f7ff f961 	bl	810448c <HAL_GetTick>
 81051ca:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 81051cc:	e009      	b.n	81051e2 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 81051ce:	f7ff f95d 	bl	810448c <HAL_GetTick>
 81051d2:	4602      	mov	r2, r0
 81051d4:	693b      	ldr	r3, [r7, #16]
 81051d6:	1ad3      	subs	r3, r2, r3
 81051d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 81051dc:	d901      	bls.n	81051e2 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 81051de:	2301      	movs	r3, #1
 81051e0:	e008      	b.n	81051f4 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 81051e2:	68fb      	ldr	r3, [r7, #12]
 81051e4:	681b      	ldr	r3, [r3, #0]
 81051e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81051ea:	f003 0301 	and.w	r3, r3, #1
 81051ee:	2b00      	cmp	r3, #0
 81051f0:	d1ed      	bne.n	81051ce <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 81051f2:	2300      	movs	r3, #0
}
 81051f4:	4618      	mov	r0, r3
 81051f6:	3718      	adds	r7, #24
 81051f8:	46bd      	mov	sp, r7
 81051fa:	bd80      	pop	{r7, pc}
 81051fc:	40028000 	.word	0x40028000

08105200 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8105200:	b480      	push	{r7}
 8105202:	b083      	sub	sp, #12
 8105204:	af00      	add	r7, sp, #0
 8105206:	6078      	str	r0, [r7, #4]
 8105208:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 810520a:	683b      	ldr	r3, [r7, #0]
 810520c:	2b00      	cmp	r3, #0
 810520e:	d101      	bne.n	8105214 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8105210:	2301      	movs	r3, #1
 8105212:	e1c3      	b.n	810559c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8105214:	687b      	ldr	r3, [r7, #4]
 8105216:	681b      	ldr	r3, [r3, #0]
 8105218:	681b      	ldr	r3, [r3, #0]
 810521a:	f003 020c 	and.w	r2, r3, #12
 810521e:	683b      	ldr	r3, [r7, #0]
 8105220:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8105222:	687b      	ldr	r3, [r7, #4]
 8105224:	681b      	ldr	r3, [r3, #0]
 8105226:	681b      	ldr	r3, [r3, #0]
 8105228:	f003 0310 	and.w	r3, r3, #16
 810522c:	2b00      	cmp	r3, #0
 810522e:	bf14      	ite	ne
 8105230:	2301      	movne	r3, #1
 8105232:	2300      	moveq	r3, #0
 8105234:	b2db      	uxtb	r3, r3
 8105236:	461a      	mov	r2, r3
 8105238:	683b      	ldr	r3, [r7, #0]
 810523a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	681b      	ldr	r3, [r3, #0]
 8105242:	681b      	ldr	r3, [r3, #0]
 8105244:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8105248:	683b      	ldr	r3, [r7, #0]
 810524a:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 810524c:	687b      	ldr	r3, [r7, #4]
 810524e:	681b      	ldr	r3, [r3, #0]
 8105250:	681b      	ldr	r3, [r3, #0]
 8105252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105256:	2b00      	cmp	r3, #0
 8105258:	bf0c      	ite	eq
 810525a:	2301      	moveq	r3, #1
 810525c:	2300      	movne	r3, #0
 810525e:	b2db      	uxtb	r3, r3
 8105260:	461a      	mov	r2, r3
 8105262:	683b      	ldr	r3, [r7, #0]
 8105264:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8105268:	687b      	ldr	r3, [r7, #4]
 810526a:	681b      	ldr	r3, [r3, #0]
 810526c:	681b      	ldr	r3, [r3, #0]
 810526e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8105272:	2b00      	cmp	r3, #0
 8105274:	bf14      	ite	ne
 8105276:	2301      	movne	r3, #1
 8105278:	2300      	moveq	r3, #0
 810527a:	b2db      	uxtb	r3, r3
 810527c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 810527e:	683b      	ldr	r3, [r7, #0]
 8105280:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8105282:	687b      	ldr	r3, [r7, #4]
 8105284:	681b      	ldr	r3, [r3, #0]
 8105286:	681b      	ldr	r3, [r3, #0]
 8105288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810528c:	2b00      	cmp	r3, #0
 810528e:	bf0c      	ite	eq
 8105290:	2301      	moveq	r3, #1
 8105292:	2300      	movne	r3, #0
 8105294:	b2db      	uxtb	r3, r3
 8105296:	461a      	mov	r2, r3
 8105298:	683b      	ldr	r3, [r7, #0]
 810529a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 810529c:	687b      	ldr	r3, [r7, #4]
 810529e:	681b      	ldr	r3, [r3, #0]
 81052a0:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 81052a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81052a6:	2b00      	cmp	r3, #0
 81052a8:	bf14      	ite	ne
 81052aa:	2301      	movne	r3, #1
 81052ac:	2300      	moveq	r3, #0
 81052ae:	b2db      	uxtb	r3, r3
 81052b0:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 81052b2:	683b      	ldr	r3, [r7, #0]
 81052b4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	681b      	ldr	r3, [r3, #0]
 81052ba:	681b      	ldr	r3, [r3, #0]
 81052bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81052c0:	2b00      	cmp	r3, #0
 81052c2:	bf14      	ite	ne
 81052c4:	2301      	movne	r3, #1
 81052c6:	2300      	moveq	r3, #0
 81052c8:	b2db      	uxtb	r3, r3
 81052ca:	461a      	mov	r2, r3
 81052cc:	683b      	ldr	r3, [r7, #0]
 81052ce:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 81052d0:	687b      	ldr	r3, [r7, #4]
 81052d2:	681b      	ldr	r3, [r3, #0]
 81052d4:	681b      	ldr	r3, [r3, #0]
 81052d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 81052da:	683b      	ldr	r3, [r7, #0]
 81052dc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 81052de:	687b      	ldr	r3, [r7, #4]
 81052e0:	681b      	ldr	r3, [r3, #0]
 81052e2:	681b      	ldr	r3, [r3, #0]
 81052e4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 81052e8:	683b      	ldr	r3, [r7, #0]
 81052ea:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 81052ec:	687b      	ldr	r3, [r7, #4]
 81052ee:	681b      	ldr	r3, [r3, #0]
 81052f0:	681b      	ldr	r3, [r3, #0]
 81052f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81052f6:	2b00      	cmp	r3, #0
 81052f8:	bf14      	ite	ne
 81052fa:	2301      	movne	r3, #1
 81052fc:	2300      	moveq	r3, #0
 81052fe:	b2db      	uxtb	r3, r3
 8105300:	461a      	mov	r2, r3
 8105302:	683b      	ldr	r3, [r7, #0]
 8105304:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8105306:	687b      	ldr	r3, [r7, #4]
 8105308:	681b      	ldr	r3, [r3, #0]
 810530a:	681b      	ldr	r3, [r3, #0]
 810530c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105310:	2b00      	cmp	r3, #0
 8105312:	bf0c      	ite	eq
 8105314:	2301      	moveq	r3, #1
 8105316:	2300      	movne	r3, #0
 8105318:	b2db      	uxtb	r3, r3
 810531a:	461a      	mov	r2, r3
 810531c:	683b      	ldr	r3, [r7, #0]
 810531e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8105320:	687b      	ldr	r3, [r7, #4]
 8105322:	681b      	ldr	r3, [r3, #0]
 8105324:	681b      	ldr	r3, [r3, #0]
 8105326:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 810532a:	2b00      	cmp	r3, #0
 810532c:	bf0c      	ite	eq
 810532e:	2301      	moveq	r3, #1
 8105330:	2300      	movne	r3, #0
 8105332:	b2db      	uxtb	r3, r3
 8105334:	461a      	mov	r2, r3
 8105336:	683b      	ldr	r3, [r7, #0]
 8105338:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 810533a:	687b      	ldr	r3, [r7, #4]
 810533c:	681b      	ldr	r3, [r3, #0]
 810533e:	681b      	ldr	r3, [r3, #0]
 8105340:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8105344:	2b00      	cmp	r3, #0
 8105346:	bf14      	ite	ne
 8105348:	2301      	movne	r3, #1
 810534a:	2300      	moveq	r3, #0
 810534c:	b2db      	uxtb	r3, r3
 810534e:	461a      	mov	r2, r3
 8105350:	683b      	ldr	r3, [r7, #0]
 8105352:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8105354:	687b      	ldr	r3, [r7, #4]
 8105356:	681b      	ldr	r3, [r3, #0]
 8105358:	681b      	ldr	r3, [r3, #0]
 810535a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810535e:	2b00      	cmp	r3, #0
 8105360:	bf14      	ite	ne
 8105362:	2301      	movne	r3, #1
 8105364:	2300      	moveq	r3, #0
 8105366:	b2db      	uxtb	r3, r3
 8105368:	461a      	mov	r2, r3
 810536a:	683b      	ldr	r3, [r7, #0]
 810536c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 810536e:	687b      	ldr	r3, [r7, #4]
 8105370:	681b      	ldr	r3, [r3, #0]
 8105372:	681b      	ldr	r3, [r3, #0]
 8105374:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8105378:	2b00      	cmp	r3, #0
 810537a:	bf14      	ite	ne
 810537c:	2301      	movne	r3, #1
 810537e:	2300      	moveq	r3, #0
 8105380:	b2db      	uxtb	r3, r3
 8105382:	461a      	mov	r2, r3
 8105384:	683b      	ldr	r3, [r7, #0]
 8105386:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8105388:	687b      	ldr	r3, [r7, #4]
 810538a:	681b      	ldr	r3, [r3, #0]
 810538c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 810538e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8105392:	2b00      	cmp	r3, #0
 8105394:	bf14      	ite	ne
 8105396:	2301      	movne	r3, #1
 8105398:	2300      	moveq	r3, #0
 810539a:	b2db      	uxtb	r3, r3
 810539c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 810539e:	683b      	ldr	r3, [r7, #0]
 81053a0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 81053a2:	687b      	ldr	r3, [r7, #4]
 81053a4:	681b      	ldr	r3, [r3, #0]
 81053a6:	681b      	ldr	r3, [r3, #0]
 81053a8:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 81053ac:	683b      	ldr	r3, [r7, #0]
 81053ae:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 81053b0:	687b      	ldr	r3, [r7, #4]
 81053b2:	681b      	ldr	r3, [r3, #0]
 81053b4:	681b      	ldr	r3, [r3, #0]
 81053b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81053ba:	2b00      	cmp	r3, #0
 81053bc:	bf14      	ite	ne
 81053be:	2301      	movne	r3, #1
 81053c0:	2300      	moveq	r3, #0
 81053c2:	b2db      	uxtb	r3, r3
 81053c4:	461a      	mov	r2, r3
 81053c6:	683b      	ldr	r3, [r7, #0]
 81053c8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 81053ca:	687b      	ldr	r3, [r7, #4]
 81053cc:	681b      	ldr	r3, [r3, #0]
 81053ce:	681b      	ldr	r3, [r3, #0]
 81053d0:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 81053d4:	683b      	ldr	r3, [r7, #0]
 81053d6:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 81053d8:	687b      	ldr	r3, [r7, #4]
 81053da:	681b      	ldr	r3, [r3, #0]
 81053dc:	685b      	ldr	r3, [r3, #4]
 81053de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 81053e2:	683b      	ldr	r3, [r7, #0]
 81053e4:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 81053e6:	687b      	ldr	r3, [r7, #4]
 81053e8:	681b      	ldr	r3, [r3, #0]
 81053ea:	685b      	ldr	r3, [r3, #4]
 81053ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81053f0:	2b00      	cmp	r3, #0
 81053f2:	bf0c      	ite	eq
 81053f4:	2301      	moveq	r3, #1
 81053f6:	2300      	movne	r3, #0
 81053f8:	b2db      	uxtb	r3, r3
 81053fa:	461a      	mov	r2, r3
 81053fc:	683b      	ldr	r3, [r7, #0]
 81053fe:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8105402:	687b      	ldr	r3, [r7, #4]
 8105404:	681b      	ldr	r3, [r3, #0]
 8105406:	685b      	ldr	r3, [r3, #4]
 8105408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810540c:	2b00      	cmp	r3, #0
 810540e:	bf14      	ite	ne
 8105410:	2301      	movne	r3, #1
 8105412:	2300      	moveq	r3, #0
 8105414:	b2db      	uxtb	r3, r3
 8105416:	461a      	mov	r2, r3
 8105418:	683b      	ldr	r3, [r7, #0]
 810541a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 810541e:	687b      	ldr	r3, [r7, #4]
 8105420:	681b      	ldr	r3, [r3, #0]
 8105422:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8105424:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8105428:	2b00      	cmp	r3, #0
 810542a:	bf14      	ite	ne
 810542c:	2301      	movne	r3, #1
 810542e:	2300      	moveq	r3, #0
 8105430:	b2db      	uxtb	r3, r3
 8105432:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8105434:	683b      	ldr	r3, [r7, #0]
 8105436:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 810543a:	687b      	ldr	r3, [r7, #4]
 810543c:	681b      	ldr	r3, [r3, #0]
 810543e:	685b      	ldr	r3, [r3, #4]
 8105440:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8105444:	2b00      	cmp	r3, #0
 8105446:	bf14      	ite	ne
 8105448:	2301      	movne	r3, #1
 810544a:	2300      	moveq	r3, #0
 810544c:	b2db      	uxtb	r3, r3
 810544e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8105450:	683b      	ldr	r3, [r7, #0]
 8105452:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8105456:	687b      	ldr	r3, [r7, #4]
 8105458:	681b      	ldr	r3, [r3, #0]
 810545a:	685b      	ldr	r3, [r3, #4]
 810545c:	0e5b      	lsrs	r3, r3, #25
 810545e:	f003 021f 	and.w	r2, r3, #31
 8105462:	683b      	ldr	r3, [r7, #0]
 8105464:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8105466:	687b      	ldr	r3, [r7, #4]
 8105468:	681b      	ldr	r3, [r3, #0]
 810546a:	68db      	ldr	r3, [r3, #12]
 810546c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105470:	2b00      	cmp	r3, #0
 8105472:	bf14      	ite	ne
 8105474:	2301      	movne	r3, #1
 8105476:	2300      	moveq	r3, #0
 8105478:	b2db      	uxtb	r3, r3
 810547a:	461a      	mov	r2, r3
 810547c:	683b      	ldr	r3, [r7, #0]
 810547e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8105482:	687b      	ldr	r3, [r7, #4]
 8105484:	681b      	ldr	r3, [r3, #0]
 8105486:	68db      	ldr	r3, [r3, #12]
 8105488:	f003 020f 	and.w	r2, r3, #15
 810548c:	683b      	ldr	r3, [r7, #0]
 810548e:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8105490:	687b      	ldr	r3, [r7, #4]
 8105492:	681b      	ldr	r3, [r3, #0]
 8105494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105496:	f003 0302 	and.w	r3, r3, #2
 810549a:	2b00      	cmp	r3, #0
 810549c:	bf14      	ite	ne
 810549e:	2301      	movne	r3, #1
 81054a0:	2300      	moveq	r3, #0
 81054a2:	b2db      	uxtb	r3, r3
 81054a4:	461a      	mov	r2, r3
 81054a6:	683b      	ldr	r3, [r7, #0]
 81054a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 81054ac:	687b      	ldr	r3, [r7, #4]
 81054ae:	681b      	ldr	r3, [r3, #0]
 81054b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81054b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81054b6:	2b00      	cmp	r3, #0
 81054b8:	bf0c      	ite	eq
 81054ba:	2301      	moveq	r3, #1
 81054bc:	2300      	movne	r3, #0
 81054be:	b2db      	uxtb	r3, r3
 81054c0:	461a      	mov	r2, r3
 81054c2:	683b      	ldr	r3, [r7, #0]
 81054c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 81054c8:	687b      	ldr	r3, [r7, #4]
 81054ca:	681b      	ldr	r3, [r3, #0]
 81054cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81054ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 81054d2:	683b      	ldr	r3, [r7, #0]
 81054d4:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 81054d6:	687b      	ldr	r3, [r7, #4]
 81054d8:	681b      	ldr	r3, [r3, #0]
 81054da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81054dc:	0c1b      	lsrs	r3, r3, #16
 81054de:	b29a      	uxth	r2, r3
 81054e0:	683b      	ldr	r3, [r7, #0]
 81054e2:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 81054e4:	687b      	ldr	r3, [r7, #4]
 81054e6:	681b      	ldr	r3, [r3, #0]
 81054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81054ec:	f003 0301 	and.w	r3, r3, #1
 81054f0:	2b00      	cmp	r3, #0
 81054f2:	bf14      	ite	ne
 81054f4:	2301      	movne	r3, #1
 81054f6:	2300      	moveq	r3, #0
 81054f8:	b2db      	uxtb	r3, r3
 81054fa:	461a      	mov	r2, r3
 81054fc:	683b      	ldr	r3, [r7, #0]
 81054fe:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8105502:	687b      	ldr	r3, [r7, #4]
 8105504:	681b      	ldr	r3, [r3, #0]
 8105506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810550a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 810550e:	2b00      	cmp	r3, #0
 8105510:	bf14      	ite	ne
 8105512:	2301      	movne	r3, #1
 8105514:	2300      	moveq	r3, #0
 8105516:	b2db      	uxtb	r3, r3
 8105518:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 810551a:	683b      	ldr	r3, [r7, #0]
 810551c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8105520:	687b      	ldr	r3, [r7, #4]
 8105522:	681b      	ldr	r3, [r3, #0]
 8105524:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8105528:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 810552c:	683b      	ldr	r3, [r7, #0]
 810552e:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8105530:	687b      	ldr	r3, [r7, #4]
 8105532:	681b      	ldr	r3, [r3, #0]
 8105534:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8105538:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 810553c:	683b      	ldr	r3, [r7, #0]
 810553e:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8105540:	687b      	ldr	r3, [r7, #4]
 8105542:	681b      	ldr	r3, [r3, #0]
 8105544:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8105548:	f003 0308 	and.w	r3, r3, #8
 810554c:	2b00      	cmp	r3, #0
 810554e:	bf14      	ite	ne
 8105550:	2301      	movne	r3, #1
 8105552:	2300      	moveq	r3, #0
 8105554:	b2db      	uxtb	r3, r3
 8105556:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8105558:	683b      	ldr	r3, [r7, #0]
 810555a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	681b      	ldr	r3, [r3, #0]
 8105562:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8105566:	f003 0310 	and.w	r3, r3, #16
 810556a:	2b00      	cmp	r3, #0
 810556c:	bf14      	ite	ne
 810556e:	2301      	movne	r3, #1
 8105570:	2300      	moveq	r3, #0
 8105572:	b2db      	uxtb	r3, r3
 8105574:	461a      	mov	r2, r3
 8105576:	683b      	ldr	r3, [r7, #0]
 8105578:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810557c:	687b      	ldr	r3, [r7, #4]
 810557e:	681b      	ldr	r3, [r3, #0]
 8105580:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8105584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105588:	2b00      	cmp	r3, #0
 810558a:	bf0c      	ite	eq
 810558c:	2301      	moveq	r3, #1
 810558e:	2300      	movne	r3, #0
 8105590:	b2db      	uxtb	r3, r3
 8105592:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8105594:	683b      	ldr	r3, [r7, #0]
 8105596:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 810559a:	2300      	movs	r3, #0
}
 810559c:	4618      	mov	r0, r3
 810559e:	370c      	adds	r7, #12
 81055a0:	46bd      	mov	sp, r7
 81055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055a6:	4770      	bx	lr

081055a8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 81055a8:	b580      	push	{r7, lr}
 81055aa:	b082      	sub	sp, #8
 81055ac:	af00      	add	r7, sp, #0
 81055ae:	6078      	str	r0, [r7, #4]
 81055b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 81055b2:	683b      	ldr	r3, [r7, #0]
 81055b4:	2b00      	cmp	r3, #0
 81055b6:	d101      	bne.n	81055bc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 81055b8:	2301      	movs	r3, #1
 81055ba:	e00b      	b.n	81055d4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 81055bc:	687b      	ldr	r3, [r7, #4]
 81055be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81055c2:	2b10      	cmp	r3, #16
 81055c4:	d105      	bne.n	81055d2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 81055c6:	6839      	ldr	r1, [r7, #0]
 81055c8:	6878      	ldr	r0, [r7, #4]
 81055ca:	f000 f871 	bl	81056b0 <ETH_SetMACConfig>

    return HAL_OK;
 81055ce:	2300      	movs	r3, #0
 81055d0:	e000      	b.n	81055d4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 81055d2:	2301      	movs	r3, #1
  }
}
 81055d4:	4618      	mov	r0, r3
 81055d6:	3708      	adds	r7, #8
 81055d8:	46bd      	mov	sp, r7
 81055da:	bd80      	pop	{r7, pc}

081055dc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 81055dc:	b580      	push	{r7, lr}
 81055de:	b084      	sub	sp, #16
 81055e0:	af00      	add	r7, sp, #0
 81055e2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 81055e4:	687b      	ldr	r3, [r7, #4]
 81055e6:	681b      	ldr	r3, [r3, #0]
 81055e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81055ec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 81055ee:	68fb      	ldr	r3, [r7, #12]
 81055f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81055f4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 81055f6:	f001 f9f1 	bl	81069dc <HAL_RCC_GetHCLKFreq>
 81055fa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 81055fc:	68bb      	ldr	r3, [r7, #8]
 81055fe:	4a1a      	ldr	r2, [pc, #104]	@ (8105668 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8105600:	4293      	cmp	r3, r2
 8105602:	d804      	bhi.n	810560e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8105604:	68fb      	ldr	r3, [r7, #12]
 8105606:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 810560a:	60fb      	str	r3, [r7, #12]
 810560c:	e022      	b.n	8105654 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 810560e:	68bb      	ldr	r3, [r7, #8]
 8105610:	4a16      	ldr	r2, [pc, #88]	@ (810566c <HAL_ETH_SetMDIOClockRange+0x90>)
 8105612:	4293      	cmp	r3, r2
 8105614:	d204      	bcs.n	8105620 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8105616:	68fb      	ldr	r3, [r7, #12]
 8105618:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 810561c:	60fb      	str	r3, [r7, #12]
 810561e:	e019      	b.n	8105654 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8105620:	68bb      	ldr	r3, [r7, #8]
 8105622:	4a13      	ldr	r2, [pc, #76]	@ (8105670 <HAL_ETH_SetMDIOClockRange+0x94>)
 8105624:	4293      	cmp	r3, r2
 8105626:	d915      	bls.n	8105654 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8105628:	68bb      	ldr	r3, [r7, #8]
 810562a:	4a12      	ldr	r2, [pc, #72]	@ (8105674 <HAL_ETH_SetMDIOClockRange+0x98>)
 810562c:	4293      	cmp	r3, r2
 810562e:	d804      	bhi.n	810563a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8105630:	68fb      	ldr	r3, [r7, #12]
 8105632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8105636:	60fb      	str	r3, [r7, #12]
 8105638:	e00c      	b.n	8105654 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 810563a:	68bb      	ldr	r3, [r7, #8]
 810563c:	4a0e      	ldr	r2, [pc, #56]	@ (8105678 <HAL_ETH_SetMDIOClockRange+0x9c>)
 810563e:	4293      	cmp	r3, r2
 8105640:	d804      	bhi.n	810564c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8105642:	68fb      	ldr	r3, [r7, #12]
 8105644:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8105648:	60fb      	str	r3, [r7, #12]
 810564a:	e003      	b.n	8105654 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 810564c:	68fb      	ldr	r3, [r7, #12]
 810564e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8105652:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	68fa      	ldr	r2, [r7, #12]
 810565a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 810565e:	bf00      	nop
 8105660:	3710      	adds	r7, #16
 8105662:	46bd      	mov	sp, r7
 8105664:	bd80      	pop	{r7, pc}
 8105666:	bf00      	nop
 8105668:	02160ebf 	.word	0x02160ebf
 810566c:	03938700 	.word	0x03938700
 8105670:	05f5e0ff 	.word	0x05f5e0ff
 8105674:	08f0d17f 	.word	0x08f0d17f
 8105678:	0ee6b27f 	.word	0x0ee6b27f

0810567c <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 810567c:	b480      	push	{r7}
 810567e:	b083      	sub	sp, #12
 8105680:	af00      	add	r7, sp, #0
 8105682:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8105684:	687b      	ldr	r3, [r7, #4]
 8105686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 810568a:	4618      	mov	r0, r3
 810568c:	370c      	adds	r7, #12
 810568e:	46bd      	mov	sp, r7
 8105690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105694:	4770      	bx	lr

08105696 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8105696:	b480      	push	{r7}
 8105698:	b083      	sub	sp, #12
 810569a:	af00      	add	r7, sp, #0
 810569c:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 810569e:	687b      	ldr	r3, [r7, #4]
 81056a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 81056a4:	4618      	mov	r0, r3
 81056a6:	370c      	adds	r7, #12
 81056a8:	46bd      	mov	sp, r7
 81056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056ae:	4770      	bx	lr

081056b0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 81056b0:	b480      	push	{r7}
 81056b2:	b085      	sub	sp, #20
 81056b4:	af00      	add	r7, sp, #0
 81056b6:	6078      	str	r0, [r7, #4]
 81056b8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 81056ba:	683b      	ldr	r3, [r7, #0]
 81056bc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 81056be:	683b      	ldr	r3, [r7, #0]
 81056c0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 81056c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81056c4:	683b      	ldr	r3, [r7, #0]
 81056c6:	791b      	ldrb	r3, [r3, #4]
 81056c8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 81056ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81056cc:	683b      	ldr	r3, [r7, #0]
 81056ce:	7b1b      	ldrb	r3, [r3, #12]
 81056d0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81056d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81056d4:	683b      	ldr	r3, [r7, #0]
 81056d6:	7b5b      	ldrb	r3, [r3, #13]
 81056d8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81056da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81056dc:	683b      	ldr	r3, [r7, #0]
 81056de:	7b9b      	ldrb	r3, [r3, #14]
 81056e0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81056e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81056e4:	683b      	ldr	r3, [r7, #0]
 81056e6:	7bdb      	ldrb	r3, [r3, #15]
 81056e8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81056ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 81056ec:	683a      	ldr	r2, [r7, #0]
 81056ee:	7c12      	ldrb	r2, [r2, #16]
 81056f0:	2a00      	cmp	r2, #0
 81056f2:	d102      	bne.n	81056fa <ETH_SetMACConfig+0x4a>
 81056f4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 81056f8:	e000      	b.n	81056fc <ETH_SetMACConfig+0x4c>
 81056fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81056fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 81056fe:	683a      	ldr	r2, [r7, #0]
 8105700:	7c52      	ldrb	r2, [r2, #17]
 8105702:	2a00      	cmp	r2, #0
 8105704:	d102      	bne.n	810570c <ETH_SetMACConfig+0x5c>
 8105706:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 810570a:	e000      	b.n	810570e <ETH_SetMACConfig+0x5e>
 810570c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810570e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8105710:	683b      	ldr	r3, [r7, #0]
 8105712:	7c9b      	ldrb	r3, [r3, #18]
 8105714:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8105716:	431a      	orrs	r2, r3
               macconf->Speed |
 8105718:	683b      	ldr	r3, [r7, #0]
 810571a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 810571c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 810571e:	683b      	ldr	r3, [r7, #0]
 8105720:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8105722:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8105724:	683b      	ldr	r3, [r7, #0]
 8105726:	7f1b      	ldrb	r3, [r3, #28]
 8105728:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 810572a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 810572c:	683b      	ldr	r3, [r7, #0]
 810572e:	7f5b      	ldrb	r3, [r3, #29]
 8105730:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8105732:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8105734:	683a      	ldr	r2, [r7, #0]
 8105736:	7f92      	ldrb	r2, [r2, #30]
 8105738:	2a00      	cmp	r2, #0
 810573a:	d102      	bne.n	8105742 <ETH_SetMACConfig+0x92>
 810573c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8105740:	e000      	b.n	8105744 <ETH_SetMACConfig+0x94>
 8105742:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8105744:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8105746:	683b      	ldr	r3, [r7, #0]
 8105748:	7fdb      	ldrb	r3, [r3, #31]
 810574a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 810574c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810574e:	683a      	ldr	r2, [r7, #0]
 8105750:	f892 2020 	ldrb.w	r2, [r2, #32]
 8105754:	2a00      	cmp	r2, #0
 8105756:	d102      	bne.n	810575e <ETH_SetMACConfig+0xae>
 8105758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810575c:	e000      	b.n	8105760 <ETH_SetMACConfig+0xb0>
 810575e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8105760:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8105762:	683b      	ldr	r3, [r7, #0]
 8105764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8105766:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8105768:	683b      	ldr	r3, [r7, #0]
 810576a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810576e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8105770:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8105772:	683b      	ldr	r3, [r7, #0]
 8105774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8105776:	4313      	orrs	r3, r2
 8105778:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 810577a:	687b      	ldr	r3, [r7, #4]
 810577c:	681b      	ldr	r3, [r3, #0]
 810577e:	681a      	ldr	r2, [r3, #0]
 8105780:	4b57      	ldr	r3, [pc, #348]	@ (81058e0 <ETH_SetMACConfig+0x230>)
 8105782:	4013      	ands	r3, r2
 8105784:	687a      	ldr	r2, [r7, #4]
 8105786:	6812      	ldr	r2, [r2, #0]
 8105788:	68f9      	ldr	r1, [r7, #12]
 810578a:	430b      	orrs	r3, r1
 810578c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810578e:	683b      	ldr	r3, [r7, #0]
 8105790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105792:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8105794:	683b      	ldr	r3, [r7, #0]
 8105796:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 810579a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810579c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810579e:	683b      	ldr	r3, [r7, #0]
 81057a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81057a4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81057a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81057a8:	683b      	ldr	r3, [r7, #0]
 81057aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 81057ae:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81057b0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 81057b2:	683a      	ldr	r2, [r7, #0]
 81057b4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 81057b8:	2a00      	cmp	r2, #0
 81057ba:	d102      	bne.n	81057c2 <ETH_SetMACConfig+0x112>
 81057bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 81057c0:	e000      	b.n	81057c4 <ETH_SetMACConfig+0x114>
 81057c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81057c4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 81057c6:	683b      	ldr	r3, [r7, #0]
 81057c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81057ca:	4313      	orrs	r3, r2
 81057cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 81057ce:	687b      	ldr	r3, [r7, #4]
 81057d0:	681b      	ldr	r3, [r3, #0]
 81057d2:	685a      	ldr	r2, [r3, #4]
 81057d4:	4b43      	ldr	r3, [pc, #268]	@ (81058e4 <ETH_SetMACConfig+0x234>)
 81057d6:	4013      	ands	r3, r2
 81057d8:	687a      	ldr	r2, [r7, #4]
 81057da:	6812      	ldr	r2, [r2, #0]
 81057dc:	68f9      	ldr	r1, [r7, #12]
 81057de:	430b      	orrs	r3, r1
 81057e0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81057e2:	683b      	ldr	r3, [r7, #0]
 81057e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81057e8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 81057ea:	683b      	ldr	r3, [r7, #0]
 81057ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81057ee:	4313      	orrs	r3, r2
 81057f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 81057f2:	687b      	ldr	r3, [r7, #4]
 81057f4:	681b      	ldr	r3, [r3, #0]
 81057f6:	68db      	ldr	r3, [r3, #12]
 81057f8:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 81057fc:	f023 0301 	bic.w	r3, r3, #1
 8105800:	687a      	ldr	r2, [r7, #4]
 8105802:	6812      	ldr	r2, [r2, #0]
 8105804:	68f9      	ldr	r1, [r7, #12]
 8105806:	430b      	orrs	r3, r1
 8105808:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810580a:	683b      	ldr	r3, [r7, #0]
 810580c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8105810:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8105812:	683b      	ldr	r3, [r7, #0]
 8105814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8105816:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8105818:	683a      	ldr	r2, [r7, #0]
 810581a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 810581e:	2a00      	cmp	r2, #0
 8105820:	d101      	bne.n	8105826 <ETH_SetMACConfig+0x176>
 8105822:	2280      	movs	r2, #128	@ 0x80
 8105824:	e000      	b.n	8105828 <ETH_SetMACConfig+0x178>
 8105826:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8105828:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 810582a:	683b      	ldr	r3, [r7, #0]
 810582c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810582e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8105830:	4313      	orrs	r3, r2
 8105832:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8105834:	687b      	ldr	r3, [r7, #4]
 8105836:	681b      	ldr	r3, [r3, #0]
 8105838:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810583a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 810583e:	4013      	ands	r3, r2
 8105840:	687a      	ldr	r2, [r7, #4]
 8105842:	6812      	ldr	r2, [r2, #0]
 8105844:	68f9      	ldr	r1, [r7, #12]
 8105846:	430b      	orrs	r3, r1
 8105848:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810584a:	683b      	ldr	r3, [r7, #0]
 810584c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8105850:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8105852:	683b      	ldr	r3, [r7, #0]
 8105854:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8105858:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810585a:	4313      	orrs	r3, r2
 810585c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 810585e:	687b      	ldr	r3, [r7, #4]
 8105860:	681b      	ldr	r3, [r3, #0]
 8105862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105866:	f023 0103 	bic.w	r1, r3, #3
 810586a:	687b      	ldr	r3, [r7, #4]
 810586c:	681b      	ldr	r3, [r3, #0]
 810586e:	68fa      	ldr	r2, [r7, #12]
 8105870:	430a      	orrs	r2, r1
 8105872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8105876:	687b      	ldr	r3, [r7, #4]
 8105878:	681b      	ldr	r3, [r3, #0]
 810587a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 810587e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8105882:	683b      	ldr	r3, [r7, #0]
 8105884:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8105886:	687b      	ldr	r3, [r7, #4]
 8105888:	681b      	ldr	r3, [r3, #0]
 810588a:	430a      	orrs	r2, r1
 810588c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8105890:	683b      	ldr	r3, [r7, #0]
 8105892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8105894:	683a      	ldr	r2, [r7, #0]
 8105896:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 810589a:	2a00      	cmp	r2, #0
 810589c:	d101      	bne.n	81058a2 <ETH_SetMACConfig+0x1f2>
 810589e:	2240      	movs	r2, #64	@ 0x40
 81058a0:	e000      	b.n	81058a4 <ETH_SetMACConfig+0x1f4>
 81058a2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 81058a4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 81058a6:	683b      	ldr	r3, [r7, #0]
 81058a8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 81058ac:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81058ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 81058b0:	683b      	ldr	r3, [r7, #0]
 81058b2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 81058b6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 81058b8:	4313      	orrs	r3, r2
 81058ba:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 81058bc:	687b      	ldr	r3, [r7, #4]
 81058be:	681b      	ldr	r3, [r3, #0]
 81058c0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 81058c4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 81058c8:	687b      	ldr	r3, [r7, #4]
 81058ca:	681b      	ldr	r3, [r3, #0]
 81058cc:	68fa      	ldr	r2, [r7, #12]
 81058ce:	430a      	orrs	r2, r1
 81058d0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 81058d4:	bf00      	nop
 81058d6:	3714      	adds	r7, #20
 81058d8:	46bd      	mov	sp, r7
 81058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058de:	4770      	bx	lr
 81058e0:	00048083 	.word	0x00048083
 81058e4:	c0f88000 	.word	0xc0f88000

081058e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 81058e8:	b480      	push	{r7}
 81058ea:	b085      	sub	sp, #20
 81058ec:	af00      	add	r7, sp, #0
 81058ee:	6078      	str	r0, [r7, #4]
 81058f0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 81058f2:	687b      	ldr	r3, [r7, #4]
 81058f4:	681b      	ldr	r3, [r3, #0]
 81058f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81058fa:	681b      	ldr	r3, [r3, #0]
 81058fc:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 8105900:	f023 0302 	bic.w	r3, r3, #2
 8105904:	683a      	ldr	r2, [r7, #0]
 8105906:	6811      	ldr	r1, [r2, #0]
 8105908:	687a      	ldr	r2, [r7, #4]
 810590a:	6812      	ldr	r2, [r2, #0]
 810590c:	430b      	orrs	r3, r1
 810590e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105912:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8105914:	683b      	ldr	r3, [r7, #0]
 8105916:	791b      	ldrb	r3, [r3, #4]
 8105918:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 810591a:	683b      	ldr	r3, [r7, #0]
 810591c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810591e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8105920:	683b      	ldr	r3, [r7, #0]
 8105922:	7b1b      	ldrb	r3, [r3, #12]
 8105924:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8105926:	4313      	orrs	r3, r2
 8105928:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 810592a:	687b      	ldr	r3, [r7, #4]
 810592c:	681b      	ldr	r3, [r3, #0]
 810592e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105932:	685b      	ldr	r3, [r3, #4]
 8105934:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8105938:	f023 0301 	bic.w	r3, r3, #1
 810593c:	687a      	ldr	r2, [r7, #4]
 810593e:	6812      	ldr	r2, [r2, #0]
 8105940:	68f9      	ldr	r1, [r7, #12]
 8105942:	430b      	orrs	r3, r1
 8105944:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105948:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810594a:	683b      	ldr	r3, [r7, #0]
 810594c:	7b5b      	ldrb	r3, [r3, #13]
 810594e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8105950:	683b      	ldr	r3, [r7, #0]
 8105952:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8105954:	4313      	orrs	r3, r2
 8105956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8105958:	687b      	ldr	r3, [r7, #4]
 810595a:	681b      	ldr	r3, [r3, #0]
 810595c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105960:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8105964:	4b21      	ldr	r3, [pc, #132]	@ (81059ec <ETH_SetDMAConfig+0x104>)
 8105966:	4013      	ands	r3, r2
 8105968:	687a      	ldr	r2, [r7, #4]
 810596a:	6812      	ldr	r2, [r2, #0]
 810596c:	68f9      	ldr	r1, [r7, #12]
 810596e:	430b      	orrs	r3, r1
 8105970:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8105974:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8105978:	683b      	ldr	r3, [r7, #0]
 810597a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 810597c:	683b      	ldr	r3, [r7, #0]
 810597e:	7d1b      	ldrb	r3, [r3, #20]
 8105980:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8105982:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8105984:	683b      	ldr	r3, [r7, #0]
 8105986:	7f5b      	ldrb	r3, [r3, #29]
 8105988:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 810598a:	4313      	orrs	r3, r2
 810598c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 810598e:	687b      	ldr	r3, [r7, #4]
 8105990:	681b      	ldr	r3, [r3, #0]
 8105992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105996:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 810599a:	4b15      	ldr	r3, [pc, #84]	@ (81059f0 <ETH_SetDMAConfig+0x108>)
 810599c:	4013      	ands	r3, r2
 810599e:	687a      	ldr	r2, [r7, #4]
 81059a0:	6812      	ldr	r2, [r2, #0]
 81059a2:	68f9      	ldr	r1, [r7, #12]
 81059a4:	430b      	orrs	r3, r1
 81059a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81059aa:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81059ae:	683b      	ldr	r3, [r7, #0]
 81059b0:	7f1b      	ldrb	r3, [r3, #28]
 81059b2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 81059b4:	683b      	ldr	r3, [r7, #0]
 81059b6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81059b8:	4313      	orrs	r3, r2
 81059ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 81059bc:	687b      	ldr	r3, [r7, #4]
 81059be:	681b      	ldr	r3, [r3, #0]
 81059c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81059c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 81059c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81059cc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 81059d0:	687a      	ldr	r2, [r7, #4]
 81059d2:	6812      	ldr	r2, [r2, #0]
 81059d4:	68f9      	ldr	r1, [r7, #12]
 81059d6:	430b      	orrs	r3, r1
 81059d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81059dc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 81059e0:	bf00      	nop
 81059e2:	3714      	adds	r7, #20
 81059e4:	46bd      	mov	sp, r7
 81059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059ea:	4770      	bx	lr
 81059ec:	fffec000 	.word	0xfffec000
 81059f0:	ffc0efef 	.word	0xffc0efef

081059f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 81059f4:	b580      	push	{r7, lr}
 81059f6:	b0a4      	sub	sp, #144	@ 0x90
 81059f8:	af00      	add	r7, sp, #0
 81059fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 81059fc:	2301      	movs	r3, #1
 81059fe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8105a02:	2300      	movs	r3, #0
 8105a04:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8105a06:	2300      	movs	r3, #0
 8105a08:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8105a0c:	2300      	movs	r3, #0
 8105a0e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8105a12:	2301      	movs	r3, #1
 8105a14:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8105a18:	2301      	movs	r3, #1
 8105a1a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8105a1e:	2301      	movs	r3, #1
 8105a20:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8105a24:	2300      	movs	r3, #0
 8105a26:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8105a2a:	2301      	movs	r3, #1
 8105a2c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8105a30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8105a34:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8105a36:	2300      	movs	r3, #0
 8105a38:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8105a3c:	2300      	movs	r3, #0
 8105a3e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8105a40:	2300      	movs	r3, #0
 8105a42:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8105a46:	2300      	movs	r3, #0
 8105a48:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8105a4c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8105a50:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8105a52:	2300      	movs	r3, #0
 8105a54:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8105a58:	2300      	movs	r3, #0
 8105a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8105a5c:	2301      	movs	r3, #1
 8105a5e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8105a62:	2300      	movs	r3, #0
 8105a64:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8105a68:	2300      	movs	r3, #0
 8105a6a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8105a6e:	2300      	movs	r3, #0
 8105a70:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8105a72:	2300      	movs	r3, #0
 8105a74:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8105a76:	2300      	movs	r3, #0
 8105a78:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8105a7a:	2300      	movs	r3, #0
 8105a7c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8105a80:	2300      	movs	r3, #0
 8105a82:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8105a86:	2301      	movs	r3, #1
 8105a88:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8105a8c:	2320      	movs	r3, #32
 8105a8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8105a92:	2301      	movs	r3, #1
 8105a94:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8105a98:	2300      	movs	r3, #0
 8105a9a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8105a9e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8105aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8105aa4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8105aa8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8105aaa:	2300      	movs	r3, #0
 8105aac:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8105ab0:	2302      	movs	r3, #2
 8105ab2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8105ab6:	2300      	movs	r3, #0
 8105ab8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8105abc:	2300      	movs	r3, #0
 8105abe:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8105ac2:	2300      	movs	r3, #0
 8105ac4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8105ac8:	2301      	movs	r3, #1
 8105aca:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8105ace:	2300      	movs	r3, #0
 8105ad0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8105ad2:	2301      	movs	r3, #1
 8105ad4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8105ad8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8105adc:	4619      	mov	r1, r3
 8105ade:	6878      	ldr	r0, [r7, #4]
 8105ae0:	f7ff fde6 	bl	81056b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8105ae4:	2301      	movs	r3, #1
 8105ae6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8105ae8:	2301      	movs	r3, #1
 8105aea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8105aec:	2300      	movs	r3, #0
 8105aee:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8105af0:	2300      	movs	r3, #0
 8105af2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8105af6:	2300      	movs	r3, #0
 8105af8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8105afa:	2300      	movs	r3, #0
 8105afc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8105afe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8105b02:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8105b04:	2300      	movs	r3, #0
 8105b06:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8105b08:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8105b0c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8105b0e:	2300      	movs	r3, #0
 8105b10:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8105b14:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8105b18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8105b1a:	f107 0308 	add.w	r3, r7, #8
 8105b1e:	4619      	mov	r1, r3
 8105b20:	6878      	ldr	r0, [r7, #4]
 8105b22:	f7ff fee1 	bl	81058e8 <ETH_SetDMAConfig>
}
 8105b26:	bf00      	nop
 8105b28:	3790      	adds	r7, #144	@ 0x90
 8105b2a:	46bd      	mov	sp, r7
 8105b2c:	bd80      	pop	{r7, pc}

08105b2e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8105b2e:	b480      	push	{r7}
 8105b30:	b085      	sub	sp, #20
 8105b32:	af00      	add	r7, sp, #0
 8105b34:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8105b36:	2300      	movs	r3, #0
 8105b38:	60fb      	str	r3, [r7, #12]
 8105b3a:	e01d      	b.n	8105b78 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8105b3c:	687b      	ldr	r3, [r7, #4]
 8105b3e:	68d9      	ldr	r1, [r3, #12]
 8105b40:	68fa      	ldr	r2, [r7, #12]
 8105b42:	4613      	mov	r3, r2
 8105b44:	005b      	lsls	r3, r3, #1
 8105b46:	4413      	add	r3, r2
 8105b48:	00db      	lsls	r3, r3, #3
 8105b4a:	440b      	add	r3, r1
 8105b4c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8105b4e:	68bb      	ldr	r3, [r7, #8]
 8105b50:	2200      	movs	r2, #0
 8105b52:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8105b54:	68bb      	ldr	r3, [r7, #8]
 8105b56:	2200      	movs	r2, #0
 8105b58:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8105b5a:	68bb      	ldr	r3, [r7, #8]
 8105b5c:	2200      	movs	r2, #0
 8105b5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8105b60:	68bb      	ldr	r3, [r7, #8]
 8105b62:	2200      	movs	r2, #0
 8105b64:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8105b66:	68b9      	ldr	r1, [r7, #8]
 8105b68:	687b      	ldr	r3, [r7, #4]
 8105b6a:	68fa      	ldr	r2, [r7, #12]
 8105b6c:	3206      	adds	r2, #6
 8105b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8105b72:	68fb      	ldr	r3, [r7, #12]
 8105b74:	3301      	adds	r3, #1
 8105b76:	60fb      	str	r3, [r7, #12]
 8105b78:	68fb      	ldr	r3, [r7, #12]
 8105b7a:	2b03      	cmp	r3, #3
 8105b7c:	d9de      	bls.n	8105b3c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8105b7e:	687b      	ldr	r3, [r7, #4]
 8105b80:	2200      	movs	r2, #0
 8105b82:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8105b84:	687b      	ldr	r3, [r7, #4]
 8105b86:	681b      	ldr	r3, [r3, #0]
 8105b88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105b8c:	461a      	mov	r2, r3
 8105b8e:	2303      	movs	r3, #3
 8105b90:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8105b94:	687b      	ldr	r3, [r7, #4]
 8105b96:	68da      	ldr	r2, [r3, #12]
 8105b98:	687b      	ldr	r3, [r7, #4]
 8105b9a:	681b      	ldr	r3, [r3, #0]
 8105b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105ba0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8105ba4:	687b      	ldr	r3, [r7, #4]
 8105ba6:	68da      	ldr	r2, [r3, #12]
 8105ba8:	687b      	ldr	r3, [r7, #4]
 8105baa:	681b      	ldr	r3, [r3, #0]
 8105bac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105bb0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8105bb4:	bf00      	nop
 8105bb6:	3714      	adds	r7, #20
 8105bb8:	46bd      	mov	sp, r7
 8105bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bbe:	4770      	bx	lr

08105bc0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8105bc0:	b480      	push	{r7}
 8105bc2:	b085      	sub	sp, #20
 8105bc4:	af00      	add	r7, sp, #0
 8105bc6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8105bc8:	2300      	movs	r3, #0
 8105bca:	60fb      	str	r3, [r7, #12]
 8105bcc:	e023      	b.n	8105c16 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8105bce:	687b      	ldr	r3, [r7, #4]
 8105bd0:	6919      	ldr	r1, [r3, #16]
 8105bd2:	68fa      	ldr	r2, [r7, #12]
 8105bd4:	4613      	mov	r3, r2
 8105bd6:	005b      	lsls	r3, r3, #1
 8105bd8:	4413      	add	r3, r2
 8105bda:	00db      	lsls	r3, r3, #3
 8105bdc:	440b      	add	r3, r1
 8105bde:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8105be0:	68bb      	ldr	r3, [r7, #8]
 8105be2:	2200      	movs	r2, #0
 8105be4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8105be6:	68bb      	ldr	r3, [r7, #8]
 8105be8:	2200      	movs	r2, #0
 8105bea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8105bec:	68bb      	ldr	r3, [r7, #8]
 8105bee:	2200      	movs	r2, #0
 8105bf0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8105bf2:	68bb      	ldr	r3, [r7, #8]
 8105bf4:	2200      	movs	r2, #0
 8105bf6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8105bf8:	68bb      	ldr	r3, [r7, #8]
 8105bfa:	2200      	movs	r2, #0
 8105bfc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8105bfe:	68bb      	ldr	r3, [r7, #8]
 8105c00:	2200      	movs	r2, #0
 8105c02:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8105c04:	68b9      	ldr	r1, [r7, #8]
 8105c06:	687b      	ldr	r3, [r7, #4]
 8105c08:	68fa      	ldr	r2, [r7, #12]
 8105c0a:	3212      	adds	r2, #18
 8105c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8105c10:	68fb      	ldr	r3, [r7, #12]
 8105c12:	3301      	adds	r3, #1
 8105c14:	60fb      	str	r3, [r7, #12]
 8105c16:	68fb      	ldr	r3, [r7, #12]
 8105c18:	2b03      	cmp	r3, #3
 8105c1a:	d9d8      	bls.n	8105bce <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	2200      	movs	r2, #0
 8105c20:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8105c22:	687b      	ldr	r3, [r7, #4]
 8105c24:	2200      	movs	r2, #0
 8105c26:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8105c28:	687b      	ldr	r3, [r7, #4]
 8105c2a:	2200      	movs	r2, #0
 8105c2c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8105c2e:	687b      	ldr	r3, [r7, #4]
 8105c30:	2200      	movs	r2, #0
 8105c32:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8105c34:	687b      	ldr	r3, [r7, #4]
 8105c36:	2200      	movs	r2, #0
 8105c38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8105c3a:	687b      	ldr	r3, [r7, #4]
 8105c3c:	681b      	ldr	r3, [r3, #0]
 8105c3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105c42:	461a      	mov	r2, r3
 8105c44:	2303      	movs	r3, #3
 8105c46:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8105c4a:	687b      	ldr	r3, [r7, #4]
 8105c4c:	691a      	ldr	r2, [r3, #16]
 8105c4e:	687b      	ldr	r3, [r7, #4]
 8105c50:	681b      	ldr	r3, [r3, #0]
 8105c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105c56:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8105c5a:	687b      	ldr	r3, [r7, #4]
 8105c5c:	691b      	ldr	r3, [r3, #16]
 8105c5e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8105c62:	687b      	ldr	r3, [r7, #4]
 8105c64:	681b      	ldr	r3, [r3, #0]
 8105c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8105c6a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8105c6e:	bf00      	nop
 8105c70:	3714      	adds	r7, #20
 8105c72:	46bd      	mov	sp, r7
 8105c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c78:	4770      	bx	lr

08105c7a <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8105c7a:	b480      	push	{r7}
 8105c7c:	b091      	sub	sp, #68	@ 0x44
 8105c7e:	af00      	add	r7, sp, #0
 8105c80:	60f8      	str	r0, [r7, #12]
 8105c82:	60b9      	str	r1, [r7, #8]
 8105c84:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8105c86:	68fb      	ldr	r3, [r7, #12]
 8105c88:	3318      	adds	r3, #24
 8105c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8105c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105c8e:	691b      	ldr	r3, [r3, #16]
 8105c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8105c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105c94:	691b      	ldr	r3, [r3, #16]
 8105c96:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8105c98:	2300      	movs	r3, #0
 8105c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8105c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105c9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8105ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105ca4:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8105ca6:	68bb      	ldr	r3, [r7, #8]
 8105ca8:	689b      	ldr	r3, [r3, #8]
 8105caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8105cac:	2300      	movs	r3, #0
 8105cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8105cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105cb2:	68db      	ldr	r3, [r3, #12]
 8105cb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8105cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8105cbc:	d007      	beq.n	8105cce <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8105cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105cc2:	3304      	adds	r3, #4
 8105cc4:	009b      	lsls	r3, r3, #2
 8105cc6:	4413      	add	r3, r2
 8105cc8:	685b      	ldr	r3, [r3, #4]
 8105cca:	2b00      	cmp	r3, #0
 8105ccc:	d001      	beq.n	8105cd2 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8105cce:	2302      	movs	r3, #2
 8105cd0:	e267      	b.n	81061a2 <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8105cd2:	68bb      	ldr	r3, [r7, #8]
 8105cd4:	681b      	ldr	r3, [r3, #0]
 8105cd6:	f003 0304 	and.w	r3, r3, #4
 8105cda:	2b00      	cmp	r3, #0
 8105cdc:	d044      	beq.n	8105d68 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8105cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ce0:	68db      	ldr	r3, [r3, #12]
 8105ce2:	0c1b      	lsrs	r3, r3, #16
 8105ce4:	041b      	lsls	r3, r3, #16
 8105ce6:	68ba      	ldr	r2, [r7, #8]
 8105ce8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8105cea:	431a      	orrs	r2, r3
 8105cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105cee:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8105cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105cf2:	68db      	ldr	r3, [r3, #12]
 8105cf4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8105cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105cfa:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8105cfc:	68fb      	ldr	r3, [r7, #12]
 8105cfe:	681b      	ldr	r3, [r3, #0]
 8105d00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8105d02:	68fb      	ldr	r3, [r7, #12]
 8105d04:	681b      	ldr	r3, [r3, #0]
 8105d06:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8105d0a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8105d0c:	68bb      	ldr	r3, [r7, #8]
 8105d0e:	681b      	ldr	r3, [r3, #0]
 8105d10:	f003 0308 	and.w	r3, r3, #8
 8105d14:	2b00      	cmp	r3, #0
 8105d16:	d027      	beq.n	8105d68 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8105d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d1a:	689b      	ldr	r3, [r3, #8]
 8105d1c:	b29a      	uxth	r2, r3
 8105d1e:	68bb      	ldr	r3, [r7, #8]
 8105d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105d22:	041b      	lsls	r3, r3, #16
 8105d24:	431a      	orrs	r2, r3
 8105d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d28:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8105d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d2c:	68db      	ldr	r3, [r3, #12]
 8105d2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8105d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d34:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8105d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d38:	68db      	ldr	r3, [r3, #12]
 8105d3a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8105d3e:	68bb      	ldr	r3, [r7, #8]
 8105d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105d42:	431a      	orrs	r2, r3
 8105d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d46:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8105d48:	68fb      	ldr	r3, [r7, #12]
 8105d4a:	681b      	ldr	r3, [r3, #0]
 8105d4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8105d4e:	68fb      	ldr	r3, [r7, #12]
 8105d50:	681b      	ldr	r3, [r3, #0]
 8105d52:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8105d56:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8105d58:	68fb      	ldr	r3, [r7, #12]
 8105d5a:	681b      	ldr	r3, [r3, #0]
 8105d5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8105d5e:	68fb      	ldr	r3, [r7, #12]
 8105d60:	681b      	ldr	r3, [r3, #0]
 8105d62:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8105d66:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8105d68:	68bb      	ldr	r3, [r7, #8]
 8105d6a:	681b      	ldr	r3, [r3, #0]
 8105d6c:	f003 0310 	and.w	r3, r3, #16
 8105d70:	2b00      	cmp	r3, #0
 8105d72:	d010      	beq.n	8105d96 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8105d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d76:	689b      	ldr	r3, [r3, #8]
 8105d78:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8105d7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8105d80:	68ba      	ldr	r2, [r7, #8]
 8105d82:	6992      	ldr	r2, [r2, #24]
 8105d84:	431a      	orrs	r2, r3
 8105d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d88:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8105d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d8c:	68db      	ldr	r3, [r3, #12]
 8105d8e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8105d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d94:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8105d96:	68bb      	ldr	r3, [r7, #8]
 8105d98:	681b      	ldr	r3, [r3, #0]
 8105d9a:	f003 0304 	and.w	r3, r3, #4
 8105d9e:	2b00      	cmp	r3, #0
 8105da0:	d105      	bne.n	8105dae <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8105da2:	68bb      	ldr	r3, [r7, #8]
 8105da4:	681b      	ldr	r3, [r3, #0]
 8105da6:	f003 0310 	and.w	r3, r3, #16
 8105daa:	2b00      	cmp	r3, #0
 8105dac:	d036      	beq.n	8105e1c <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8105dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105db0:	68db      	ldr	r3, [r3, #12]
 8105db2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8105db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105db8:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8105dba:	f3bf 8f5f 	dmb	sy
}
 8105dbe:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8105dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105dc2:	68db      	ldr	r3, [r3, #12]
 8105dc4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8105dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105dca:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8105dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105dce:	3301      	adds	r3, #1
 8105dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105dd4:	2b03      	cmp	r3, #3
 8105dd6:	d902      	bls.n	8105dde <ETH_Prepare_Tx_Descriptors+0x164>
 8105dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105dda:	3b04      	subs	r3, #4
 8105ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8105dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105de0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8105de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105de6:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8105de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105dea:	3301      	adds	r3, #1
 8105dec:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8105dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105df0:	68db      	ldr	r3, [r3, #12]
 8105df2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8105df6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8105dfa:	d10f      	bne.n	8105e1c <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8105dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105dfe:	6a3a      	ldr	r2, [r7, #32]
 8105e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105e04:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8105e06:	f3bf 8f5f 	dmb	sy
}
 8105e0a:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8105e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e0e:	68db      	ldr	r3, [r3, #12]
 8105e10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8105e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e16:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8105e18:	2302      	movs	r3, #2
 8105e1a:	e1c2      	b.n	81061a2 <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8105e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105e1e:	3301      	adds	r3, #1
 8105e20:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8105e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105e24:	681b      	ldr	r3, [r3, #0]
 8105e26:	461a      	mov	r2, r3
 8105e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e2a:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8105e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e2e:	689b      	ldr	r3, [r3, #8]
 8105e30:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8105e34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8105e38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105e3a:	6852      	ldr	r2, [r2, #4]
 8105e3c:	431a      	orrs	r2, r3
 8105e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e40:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8105e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105e44:	689b      	ldr	r3, [r3, #8]
 8105e46:	2b00      	cmp	r3, #0
 8105e48:	d014      	beq.n	8105e74 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8105e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105e4c:	689b      	ldr	r3, [r3, #8]
 8105e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8105e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105e52:	681b      	ldr	r3, [r3, #0]
 8105e54:	461a      	mov	r2, r3
 8105e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e58:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8105e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e5c:	689b      	ldr	r3, [r3, #8]
 8105e5e:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8105e62:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8105e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105e68:	6852      	ldr	r2, [r2, #4]
 8105e6a:	0412      	lsls	r2, r2, #16
 8105e6c:	431a      	orrs	r2, r3
 8105e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e70:	609a      	str	r2, [r3, #8]
 8105e72:	e00a      	b.n	8105e8a <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8105e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e76:	2200      	movs	r2, #0
 8105e78:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8105e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e7c:	689b      	ldr	r3, [r3, #8]
 8105e7e:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8105e82:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8105e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105e88:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8105e8a:	68bb      	ldr	r3, [r7, #8]
 8105e8c:	681b      	ldr	r3, [r3, #0]
 8105e8e:	f003 0310 	and.w	r3, r3, #16
 8105e92:	2b00      	cmp	r3, #0
 8105e94:	d019      	beq.n	8105eca <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8105e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e98:	68db      	ldr	r3, [r3, #12]
 8105e9a:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8105e9e:	68bb      	ldr	r3, [r7, #8]
 8105ea0:	6a1b      	ldr	r3, [r3, #32]
 8105ea2:	04db      	lsls	r3, r3, #19
 8105ea4:	431a      	orrs	r2, r3
 8105ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ea8:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8105eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105eac:	68db      	ldr	r3, [r3, #12]
 8105eae:	0c9b      	lsrs	r3, r3, #18
 8105eb0:	049b      	lsls	r3, r3, #18
 8105eb2:	68ba      	ldr	r2, [r7, #8]
 8105eb4:	69d2      	ldr	r2, [r2, #28]
 8105eb6:	431a      	orrs	r2, r3
 8105eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105eba:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8105ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ebe:	68db      	ldr	r3, [r3, #12]
 8105ec0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8105ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ec6:	60da      	str	r2, [r3, #12]
 8105ec8:	e028      	b.n	8105f1c <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8105eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ecc:	68db      	ldr	r3, [r3, #12]
 8105ece:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8105ed2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8105ed6:	68ba      	ldr	r2, [r7, #8]
 8105ed8:	6852      	ldr	r2, [r2, #4]
 8105eda:	431a      	orrs	r2, r3
 8105edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ede:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8105ee0:	68bb      	ldr	r3, [r7, #8]
 8105ee2:	681b      	ldr	r3, [r3, #0]
 8105ee4:	f003 0301 	and.w	r3, r3, #1
 8105ee8:	2b00      	cmp	r3, #0
 8105eea:	d008      	beq.n	8105efe <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8105eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105eee:	68db      	ldr	r3, [r3, #12]
 8105ef0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8105ef4:	68bb      	ldr	r3, [r7, #8]
 8105ef6:	695b      	ldr	r3, [r3, #20]
 8105ef8:	431a      	orrs	r2, r3
 8105efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105efc:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8105efe:	68bb      	ldr	r3, [r7, #8]
 8105f00:	681b      	ldr	r3, [r3, #0]
 8105f02:	f003 0320 	and.w	r3, r3, #32
 8105f06:	2b00      	cmp	r3, #0
 8105f08:	d008      	beq.n	8105f1c <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8105f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f0c:	68db      	ldr	r3, [r3, #12]
 8105f0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8105f12:	68bb      	ldr	r3, [r7, #8]
 8105f14:	691b      	ldr	r3, [r3, #16]
 8105f16:	431a      	orrs	r2, r3
 8105f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f1a:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8105f1c:	68bb      	ldr	r3, [r7, #8]
 8105f1e:	681b      	ldr	r3, [r3, #0]
 8105f20:	f003 0304 	and.w	r3, r3, #4
 8105f24:	2b00      	cmp	r3, #0
 8105f26:	d008      	beq.n	8105f3a <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8105f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f2a:	689b      	ldr	r3, [r3, #8]
 8105f2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8105f30:	68bb      	ldr	r3, [r7, #8]
 8105f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105f34:	431a      	orrs	r2, r3
 8105f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f38:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8105f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f3c:	68db      	ldr	r3, [r3, #12]
 8105f3e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8105f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f44:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8105f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f48:	68db      	ldr	r3, [r3, #12]
 8105f4a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8105f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f50:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8105f52:	f3bf 8f5f 	dmb	sy
}
 8105f56:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8105f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f5a:	68db      	ldr	r3, [r3, #12]
 8105f5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8105f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f62:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8105f64:	68bb      	ldr	r3, [r7, #8]
 8105f66:	681b      	ldr	r3, [r3, #0]
 8105f68:	f003 0302 	and.w	r3, r3, #2
 8105f6c:	2b00      	cmp	r3, #0
 8105f6e:	f000 80d9 	beq.w	8106124 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8105f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f74:	68db      	ldr	r3, [r3, #12]
 8105f76:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8105f7a:	68bb      	ldr	r3, [r7, #8]
 8105f7c:	68db      	ldr	r3, [r3, #12]
 8105f7e:	431a      	orrs	r2, r3
 8105f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f82:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8105f84:	e0ce      	b.n	8106124 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8105f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f88:	68db      	ldr	r3, [r3, #12]
 8105f8a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8105f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f90:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8105f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105f94:	3301      	adds	r3, #1
 8105f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105f9a:	2b03      	cmp	r3, #3
 8105f9c:	d902      	bls.n	8105fa4 <ETH_Prepare_Tx_Descriptors+0x32a>
 8105f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105fa0:	3b04      	subs	r3, #4
 8105fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8105fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105fa6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8105fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105fac:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8105fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fb0:	68db      	ldr	r3, [r3, #12]
 8105fb2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8105fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fb8:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8105fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105fbc:	68db      	ldr	r3, [r3, #12]
 8105fbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8105fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8105fc6:	d007      	beq.n	8105fd8 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8105fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105fcc:	3304      	adds	r3, #4
 8105fce:	009b      	lsls	r3, r3, #2
 8105fd0:	4413      	add	r3, r2
 8105fd2:	685b      	ldr	r3, [r3, #4]
 8105fd4:	2b00      	cmp	r3, #0
 8105fd6:	d029      	beq.n	810602c <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8105fd8:	6a3b      	ldr	r3, [r7, #32]
 8105fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8105fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105fde:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8105fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105fe4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8105fe6:	2300      	movs	r3, #0
 8105fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8105fea:	e019      	b.n	8106020 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8105fec:	f3bf 8f5f 	dmb	sy
}
 8105ff0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8105ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ff4:	68db      	ldr	r3, [r3, #12]
 8105ff6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8105ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ffc:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8105ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8106000:	3301      	adds	r3, #1
 8106002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8106006:	2b03      	cmp	r3, #3
 8106008:	d902      	bls.n	8106010 <ETH_Prepare_Tx_Descriptors+0x396>
 810600a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810600c:	3b04      	subs	r3, #4
 810600e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8106010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106012:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8106014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106018:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 810601a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810601c:	3301      	adds	r3, #1
 810601e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8106020:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8106022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106024:	429a      	cmp	r2, r3
 8106026:	d3e1      	bcc.n	8105fec <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8106028:	2302      	movs	r3, #2
 810602a:	e0ba      	b.n	81061a2 <ETH_Prepare_Tx_Descriptors+0x528>
    }

    descnbr += 1U;
 810602c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810602e:	3301      	adds	r3, #1
 8106030:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8106032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106034:	689b      	ldr	r3, [r3, #8]
 8106036:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8106038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810603a:	681b      	ldr	r3, [r3, #0]
 810603c:	461a      	mov	r2, r3
 810603e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106040:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8106042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106044:	689b      	ldr	r3, [r3, #8]
 8106046:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 810604a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810604e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8106050:	6852      	ldr	r2, [r2, #4]
 8106052:	431a      	orrs	r2, r3
 8106054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106056:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8106058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810605a:	689b      	ldr	r3, [r3, #8]
 810605c:	2b00      	cmp	r3, #0
 810605e:	d014      	beq.n	810608a <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8106060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106062:	689b      	ldr	r3, [r3, #8]
 8106064:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8106066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106068:	681b      	ldr	r3, [r3, #0]
 810606a:	461a      	mov	r2, r3
 810606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810606e:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8106070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106072:	689b      	ldr	r3, [r3, #8]
 8106074:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8106078:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810607c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810607e:	6852      	ldr	r2, [r2, #4]
 8106080:	0412      	lsls	r2, r2, #16
 8106082:	431a      	orrs	r2, r3
 8106084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106086:	609a      	str	r2, [r3, #8]
 8106088:	e00a      	b.n	81060a0 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 810608a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810608c:	2200      	movs	r2, #0
 810608e:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8106090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106092:	689b      	ldr	r3, [r3, #8]
 8106094:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8106098:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810609c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810609e:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 81060a0:	68bb      	ldr	r3, [r7, #8]
 81060a2:	681b      	ldr	r3, [r3, #0]
 81060a4:	f003 0310 	and.w	r3, r3, #16
 81060a8:	2b00      	cmp	r3, #0
 81060aa:	d00f      	beq.n	81060cc <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 81060ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060ae:	68db      	ldr	r3, [r3, #12]
 81060b0:	0c9b      	lsrs	r3, r3, #18
 81060b2:	049b      	lsls	r3, r3, #18
 81060b4:	68ba      	ldr	r2, [r7, #8]
 81060b6:	69d2      	ldr	r2, [r2, #28]
 81060b8:	431a      	orrs	r2, r3
 81060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060bc:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 81060be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060c0:	68db      	ldr	r3, [r3, #12]
 81060c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 81060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060c8:	60da      	str	r2, [r3, #12]
 81060ca:	e019      	b.n	8106100 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 81060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060ce:	68db      	ldr	r3, [r3, #12]
 81060d0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 81060d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 81060d8:	68ba      	ldr	r2, [r7, #8]
 81060da:	6852      	ldr	r2, [r2, #4]
 81060dc:	431a      	orrs	r2, r3
 81060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060e0:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 81060e2:	68bb      	ldr	r3, [r7, #8]
 81060e4:	681b      	ldr	r3, [r3, #0]
 81060e6:	f003 0301 	and.w	r3, r3, #1
 81060ea:	2b00      	cmp	r3, #0
 81060ec:	d008      	beq.n	8106100 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 81060ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060f0:	68db      	ldr	r3, [r3, #12]
 81060f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 81060f6:	68bb      	ldr	r3, [r7, #8]
 81060f8:	695b      	ldr	r3, [r3, #20]
 81060fa:	431a      	orrs	r2, r3
 81060fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060fe:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8106100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106102:	3301      	adds	r3, #1
 8106104:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8106106:	f3bf 8f5f 	dmb	sy
}
 810610a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 810610c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810610e:	68db      	ldr	r3, [r3, #12]
 8106110:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8106114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106116:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8106118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810611a:	68db      	ldr	r3, [r3, #12]
 810611c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8106120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106122:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8106124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106126:	689b      	ldr	r3, [r3, #8]
 8106128:	2b00      	cmp	r3, #0
 810612a:	f47f af2c 	bne.w	8105f86 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 810612e:	687b      	ldr	r3, [r7, #4]
 8106130:	2b00      	cmp	r3, #0
 8106132:	d006      	beq.n	8106142 <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8106134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106136:	689b      	ldr	r3, [r3, #8]
 8106138:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810613c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810613e:	609a      	str	r2, [r3, #8]
 8106140:	e005      	b.n	810614e <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8106142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106144:	689b      	ldr	r3, [r3, #8]
 8106146:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 810614a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810614c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 810614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106150:	68db      	ldr	r3, [r3, #12]
 8106152:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8106156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106158:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 810615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810615c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810615e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8106160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8106162:	3304      	adds	r3, #4
 8106164:	009b      	lsls	r3, r3, #2
 8106166:	440b      	add	r3, r1
 8106168:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 810616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810616c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810616e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8106170:	f3ef 8310 	mrs	r3, PRIMASK
 8106174:	613b      	str	r3, [r7, #16]
  return(result);
 8106176:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8106178:	61fb      	str	r3, [r7, #28]
 810617a:	2301      	movs	r3, #1
 810617c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 810617e:	697b      	ldr	r3, [r7, #20]
 8106180:	f383 8810 	msr	PRIMASK, r3
}
 8106184:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8106186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106188:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 810618a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810618c:	4413      	add	r3, r2
 810618e:	1c5a      	adds	r2, r3, #1
 8106190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106192:	629a      	str	r2, [r3, #40]	@ 0x28
 8106194:	69fb      	ldr	r3, [r7, #28]
 8106196:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8106198:	69bb      	ldr	r3, [r7, #24]
 810619a:	f383 8810 	msr	PRIMASK, r3
}
 810619e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 81061a0:	2300      	movs	r3, #0
}
 81061a2:	4618      	mov	r0, r3
 81061a4:	3744      	adds	r7, #68	@ 0x44
 81061a6:	46bd      	mov	sp, r7
 81061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061ac:	4770      	bx	lr
	...

081061b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81061b0:	b480      	push	{r7}
 81061b2:	b089      	sub	sp, #36	@ 0x24
 81061b4:	af00      	add	r7, sp, #0
 81061b6:	6078      	str	r0, [r7, #4]
 81061b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81061ba:	2300      	movs	r3, #0
 81061bc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81061be:	4b89      	ldr	r3, [pc, #548]	@ (81063e4 <HAL_GPIO_Init+0x234>)
 81061c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81061c2:	e194      	b.n	81064ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81061c4:	683b      	ldr	r3, [r7, #0]
 81061c6:	681a      	ldr	r2, [r3, #0]
 81061c8:	2101      	movs	r1, #1
 81061ca:	69fb      	ldr	r3, [r7, #28]
 81061cc:	fa01 f303 	lsl.w	r3, r1, r3
 81061d0:	4013      	ands	r3, r2
 81061d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81061d4:	693b      	ldr	r3, [r7, #16]
 81061d6:	2b00      	cmp	r3, #0
 81061d8:	f000 8186 	beq.w	81064e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81061dc:	683b      	ldr	r3, [r7, #0]
 81061de:	685b      	ldr	r3, [r3, #4]
 81061e0:	f003 0303 	and.w	r3, r3, #3
 81061e4:	2b01      	cmp	r3, #1
 81061e6:	d005      	beq.n	81061f4 <HAL_GPIO_Init+0x44>
 81061e8:	683b      	ldr	r3, [r7, #0]
 81061ea:	685b      	ldr	r3, [r3, #4]
 81061ec:	f003 0303 	and.w	r3, r3, #3
 81061f0:	2b02      	cmp	r3, #2
 81061f2:	d130      	bne.n	8106256 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81061f4:	687b      	ldr	r3, [r7, #4]
 81061f6:	689b      	ldr	r3, [r3, #8]
 81061f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81061fa:	69fb      	ldr	r3, [r7, #28]
 81061fc:	005b      	lsls	r3, r3, #1
 81061fe:	2203      	movs	r2, #3
 8106200:	fa02 f303 	lsl.w	r3, r2, r3
 8106204:	43db      	mvns	r3, r3
 8106206:	69ba      	ldr	r2, [r7, #24]
 8106208:	4013      	ands	r3, r2
 810620a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810620c:	683b      	ldr	r3, [r7, #0]
 810620e:	68da      	ldr	r2, [r3, #12]
 8106210:	69fb      	ldr	r3, [r7, #28]
 8106212:	005b      	lsls	r3, r3, #1
 8106214:	fa02 f303 	lsl.w	r3, r2, r3
 8106218:	69ba      	ldr	r2, [r7, #24]
 810621a:	4313      	orrs	r3, r2
 810621c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810621e:	687b      	ldr	r3, [r7, #4]
 8106220:	69ba      	ldr	r2, [r7, #24]
 8106222:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8106224:	687b      	ldr	r3, [r7, #4]
 8106226:	685b      	ldr	r3, [r3, #4]
 8106228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810622a:	2201      	movs	r2, #1
 810622c:	69fb      	ldr	r3, [r7, #28]
 810622e:	fa02 f303 	lsl.w	r3, r2, r3
 8106232:	43db      	mvns	r3, r3
 8106234:	69ba      	ldr	r2, [r7, #24]
 8106236:	4013      	ands	r3, r2
 8106238:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810623a:	683b      	ldr	r3, [r7, #0]
 810623c:	685b      	ldr	r3, [r3, #4]
 810623e:	091b      	lsrs	r3, r3, #4
 8106240:	f003 0201 	and.w	r2, r3, #1
 8106244:	69fb      	ldr	r3, [r7, #28]
 8106246:	fa02 f303 	lsl.w	r3, r2, r3
 810624a:	69ba      	ldr	r2, [r7, #24]
 810624c:	4313      	orrs	r3, r2
 810624e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8106250:	687b      	ldr	r3, [r7, #4]
 8106252:	69ba      	ldr	r2, [r7, #24]
 8106254:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8106256:	683b      	ldr	r3, [r7, #0]
 8106258:	685b      	ldr	r3, [r3, #4]
 810625a:	f003 0303 	and.w	r3, r3, #3
 810625e:	2b03      	cmp	r3, #3
 8106260:	d017      	beq.n	8106292 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8106262:	687b      	ldr	r3, [r7, #4]
 8106264:	68db      	ldr	r3, [r3, #12]
 8106266:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8106268:	69fb      	ldr	r3, [r7, #28]
 810626a:	005b      	lsls	r3, r3, #1
 810626c:	2203      	movs	r2, #3
 810626e:	fa02 f303 	lsl.w	r3, r2, r3
 8106272:	43db      	mvns	r3, r3
 8106274:	69ba      	ldr	r2, [r7, #24]
 8106276:	4013      	ands	r3, r2
 8106278:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810627a:	683b      	ldr	r3, [r7, #0]
 810627c:	689a      	ldr	r2, [r3, #8]
 810627e:	69fb      	ldr	r3, [r7, #28]
 8106280:	005b      	lsls	r3, r3, #1
 8106282:	fa02 f303 	lsl.w	r3, r2, r3
 8106286:	69ba      	ldr	r2, [r7, #24]
 8106288:	4313      	orrs	r3, r2
 810628a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	69ba      	ldr	r2, [r7, #24]
 8106290:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8106292:	683b      	ldr	r3, [r7, #0]
 8106294:	685b      	ldr	r3, [r3, #4]
 8106296:	f003 0303 	and.w	r3, r3, #3
 810629a:	2b02      	cmp	r3, #2
 810629c:	d123      	bne.n	81062e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810629e:	69fb      	ldr	r3, [r7, #28]
 81062a0:	08da      	lsrs	r2, r3, #3
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	3208      	adds	r2, #8
 81062a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81062aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81062ac:	69fb      	ldr	r3, [r7, #28]
 81062ae:	f003 0307 	and.w	r3, r3, #7
 81062b2:	009b      	lsls	r3, r3, #2
 81062b4:	220f      	movs	r2, #15
 81062b6:	fa02 f303 	lsl.w	r3, r2, r3
 81062ba:	43db      	mvns	r3, r3
 81062bc:	69ba      	ldr	r2, [r7, #24]
 81062be:	4013      	ands	r3, r2
 81062c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81062c2:	683b      	ldr	r3, [r7, #0]
 81062c4:	691a      	ldr	r2, [r3, #16]
 81062c6:	69fb      	ldr	r3, [r7, #28]
 81062c8:	f003 0307 	and.w	r3, r3, #7
 81062cc:	009b      	lsls	r3, r3, #2
 81062ce:	fa02 f303 	lsl.w	r3, r2, r3
 81062d2:	69ba      	ldr	r2, [r7, #24]
 81062d4:	4313      	orrs	r3, r2
 81062d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81062d8:	69fb      	ldr	r3, [r7, #28]
 81062da:	08da      	lsrs	r2, r3, #3
 81062dc:	687b      	ldr	r3, [r7, #4]
 81062de:	3208      	adds	r2, #8
 81062e0:	69b9      	ldr	r1, [r7, #24]
 81062e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81062e6:	687b      	ldr	r3, [r7, #4]
 81062e8:	681b      	ldr	r3, [r3, #0]
 81062ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81062ec:	69fb      	ldr	r3, [r7, #28]
 81062ee:	005b      	lsls	r3, r3, #1
 81062f0:	2203      	movs	r2, #3
 81062f2:	fa02 f303 	lsl.w	r3, r2, r3
 81062f6:	43db      	mvns	r3, r3
 81062f8:	69ba      	ldr	r2, [r7, #24]
 81062fa:	4013      	ands	r3, r2
 81062fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81062fe:	683b      	ldr	r3, [r7, #0]
 8106300:	685b      	ldr	r3, [r3, #4]
 8106302:	f003 0203 	and.w	r2, r3, #3
 8106306:	69fb      	ldr	r3, [r7, #28]
 8106308:	005b      	lsls	r3, r3, #1
 810630a:	fa02 f303 	lsl.w	r3, r2, r3
 810630e:	69ba      	ldr	r2, [r7, #24]
 8106310:	4313      	orrs	r3, r2
 8106312:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8106314:	687b      	ldr	r3, [r7, #4]
 8106316:	69ba      	ldr	r2, [r7, #24]
 8106318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810631a:	683b      	ldr	r3, [r7, #0]
 810631c:	685b      	ldr	r3, [r3, #4]
 810631e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8106322:	2b00      	cmp	r3, #0
 8106324:	f000 80e0 	beq.w	81064e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8106328:	4b2f      	ldr	r3, [pc, #188]	@ (81063e8 <HAL_GPIO_Init+0x238>)
 810632a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810632e:	4a2e      	ldr	r2, [pc, #184]	@ (81063e8 <HAL_GPIO_Init+0x238>)
 8106330:	f043 0302 	orr.w	r3, r3, #2
 8106334:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8106338:	4b2b      	ldr	r3, [pc, #172]	@ (81063e8 <HAL_GPIO_Init+0x238>)
 810633a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810633e:	f003 0302 	and.w	r3, r3, #2
 8106342:	60fb      	str	r3, [r7, #12]
 8106344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8106346:	4a29      	ldr	r2, [pc, #164]	@ (81063ec <HAL_GPIO_Init+0x23c>)
 8106348:	69fb      	ldr	r3, [r7, #28]
 810634a:	089b      	lsrs	r3, r3, #2
 810634c:	3302      	adds	r3, #2
 810634e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8106354:	69fb      	ldr	r3, [r7, #28]
 8106356:	f003 0303 	and.w	r3, r3, #3
 810635a:	009b      	lsls	r3, r3, #2
 810635c:	220f      	movs	r2, #15
 810635e:	fa02 f303 	lsl.w	r3, r2, r3
 8106362:	43db      	mvns	r3, r3
 8106364:	69ba      	ldr	r2, [r7, #24]
 8106366:	4013      	ands	r3, r2
 8106368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810636a:	687b      	ldr	r3, [r7, #4]
 810636c:	4a20      	ldr	r2, [pc, #128]	@ (81063f0 <HAL_GPIO_Init+0x240>)
 810636e:	4293      	cmp	r3, r2
 8106370:	d052      	beq.n	8106418 <HAL_GPIO_Init+0x268>
 8106372:	687b      	ldr	r3, [r7, #4]
 8106374:	4a1f      	ldr	r2, [pc, #124]	@ (81063f4 <HAL_GPIO_Init+0x244>)
 8106376:	4293      	cmp	r3, r2
 8106378:	d031      	beq.n	81063de <HAL_GPIO_Init+0x22e>
 810637a:	687b      	ldr	r3, [r7, #4]
 810637c:	4a1e      	ldr	r2, [pc, #120]	@ (81063f8 <HAL_GPIO_Init+0x248>)
 810637e:	4293      	cmp	r3, r2
 8106380:	d02b      	beq.n	81063da <HAL_GPIO_Init+0x22a>
 8106382:	687b      	ldr	r3, [r7, #4]
 8106384:	4a1d      	ldr	r2, [pc, #116]	@ (81063fc <HAL_GPIO_Init+0x24c>)
 8106386:	4293      	cmp	r3, r2
 8106388:	d025      	beq.n	81063d6 <HAL_GPIO_Init+0x226>
 810638a:	687b      	ldr	r3, [r7, #4]
 810638c:	4a1c      	ldr	r2, [pc, #112]	@ (8106400 <HAL_GPIO_Init+0x250>)
 810638e:	4293      	cmp	r3, r2
 8106390:	d01f      	beq.n	81063d2 <HAL_GPIO_Init+0x222>
 8106392:	687b      	ldr	r3, [r7, #4]
 8106394:	4a1b      	ldr	r2, [pc, #108]	@ (8106404 <HAL_GPIO_Init+0x254>)
 8106396:	4293      	cmp	r3, r2
 8106398:	d019      	beq.n	81063ce <HAL_GPIO_Init+0x21e>
 810639a:	687b      	ldr	r3, [r7, #4]
 810639c:	4a1a      	ldr	r2, [pc, #104]	@ (8106408 <HAL_GPIO_Init+0x258>)
 810639e:	4293      	cmp	r3, r2
 81063a0:	d013      	beq.n	81063ca <HAL_GPIO_Init+0x21a>
 81063a2:	687b      	ldr	r3, [r7, #4]
 81063a4:	4a19      	ldr	r2, [pc, #100]	@ (810640c <HAL_GPIO_Init+0x25c>)
 81063a6:	4293      	cmp	r3, r2
 81063a8:	d00d      	beq.n	81063c6 <HAL_GPIO_Init+0x216>
 81063aa:	687b      	ldr	r3, [r7, #4]
 81063ac:	4a18      	ldr	r2, [pc, #96]	@ (8106410 <HAL_GPIO_Init+0x260>)
 81063ae:	4293      	cmp	r3, r2
 81063b0:	d007      	beq.n	81063c2 <HAL_GPIO_Init+0x212>
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	4a17      	ldr	r2, [pc, #92]	@ (8106414 <HAL_GPIO_Init+0x264>)
 81063b6:	4293      	cmp	r3, r2
 81063b8:	d101      	bne.n	81063be <HAL_GPIO_Init+0x20e>
 81063ba:	2309      	movs	r3, #9
 81063bc:	e02d      	b.n	810641a <HAL_GPIO_Init+0x26a>
 81063be:	230a      	movs	r3, #10
 81063c0:	e02b      	b.n	810641a <HAL_GPIO_Init+0x26a>
 81063c2:	2308      	movs	r3, #8
 81063c4:	e029      	b.n	810641a <HAL_GPIO_Init+0x26a>
 81063c6:	2307      	movs	r3, #7
 81063c8:	e027      	b.n	810641a <HAL_GPIO_Init+0x26a>
 81063ca:	2306      	movs	r3, #6
 81063cc:	e025      	b.n	810641a <HAL_GPIO_Init+0x26a>
 81063ce:	2305      	movs	r3, #5
 81063d0:	e023      	b.n	810641a <HAL_GPIO_Init+0x26a>
 81063d2:	2304      	movs	r3, #4
 81063d4:	e021      	b.n	810641a <HAL_GPIO_Init+0x26a>
 81063d6:	2303      	movs	r3, #3
 81063d8:	e01f      	b.n	810641a <HAL_GPIO_Init+0x26a>
 81063da:	2302      	movs	r3, #2
 81063dc:	e01d      	b.n	810641a <HAL_GPIO_Init+0x26a>
 81063de:	2301      	movs	r3, #1
 81063e0:	e01b      	b.n	810641a <HAL_GPIO_Init+0x26a>
 81063e2:	bf00      	nop
 81063e4:	580000c0 	.word	0x580000c0
 81063e8:	58024400 	.word	0x58024400
 81063ec:	58000400 	.word	0x58000400
 81063f0:	58020000 	.word	0x58020000
 81063f4:	58020400 	.word	0x58020400
 81063f8:	58020800 	.word	0x58020800
 81063fc:	58020c00 	.word	0x58020c00
 8106400:	58021000 	.word	0x58021000
 8106404:	58021400 	.word	0x58021400
 8106408:	58021800 	.word	0x58021800
 810640c:	58021c00 	.word	0x58021c00
 8106410:	58022000 	.word	0x58022000
 8106414:	58022400 	.word	0x58022400
 8106418:	2300      	movs	r3, #0
 810641a:	69fa      	ldr	r2, [r7, #28]
 810641c:	f002 0203 	and.w	r2, r2, #3
 8106420:	0092      	lsls	r2, r2, #2
 8106422:	4093      	lsls	r3, r2
 8106424:	69ba      	ldr	r2, [r7, #24]
 8106426:	4313      	orrs	r3, r2
 8106428:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810642a:	4938      	ldr	r1, [pc, #224]	@ (810650c <HAL_GPIO_Init+0x35c>)
 810642c:	69fb      	ldr	r3, [r7, #28]
 810642e:	089b      	lsrs	r3, r3, #2
 8106430:	3302      	adds	r3, #2
 8106432:	69ba      	ldr	r2, [r7, #24]
 8106434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8106438:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810643c:	681b      	ldr	r3, [r3, #0]
 810643e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106440:	693b      	ldr	r3, [r7, #16]
 8106442:	43db      	mvns	r3, r3
 8106444:	69ba      	ldr	r2, [r7, #24]
 8106446:	4013      	ands	r3, r2
 8106448:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810644a:	683b      	ldr	r3, [r7, #0]
 810644c:	685b      	ldr	r3, [r3, #4]
 810644e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8106452:	2b00      	cmp	r3, #0
 8106454:	d003      	beq.n	810645e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8106456:	69ba      	ldr	r2, [r7, #24]
 8106458:	693b      	ldr	r3, [r7, #16]
 810645a:	4313      	orrs	r3, r2
 810645c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810645e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8106462:	69bb      	ldr	r3, [r7, #24]
 8106464:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8106466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810646a:	685b      	ldr	r3, [r3, #4]
 810646c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810646e:	693b      	ldr	r3, [r7, #16]
 8106470:	43db      	mvns	r3, r3
 8106472:	69ba      	ldr	r2, [r7, #24]
 8106474:	4013      	ands	r3, r2
 8106476:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8106478:	683b      	ldr	r3, [r7, #0]
 810647a:	685b      	ldr	r3, [r3, #4]
 810647c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8106480:	2b00      	cmp	r3, #0
 8106482:	d003      	beq.n	810648c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8106484:	69ba      	ldr	r2, [r7, #24]
 8106486:	693b      	ldr	r3, [r7, #16]
 8106488:	4313      	orrs	r3, r2
 810648a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810648c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8106490:	69bb      	ldr	r3, [r7, #24]
 8106492:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8106494:	697b      	ldr	r3, [r7, #20]
 8106496:	685b      	ldr	r3, [r3, #4]
 8106498:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810649a:	693b      	ldr	r3, [r7, #16]
 810649c:	43db      	mvns	r3, r3
 810649e:	69ba      	ldr	r2, [r7, #24]
 81064a0:	4013      	ands	r3, r2
 81064a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81064a4:	683b      	ldr	r3, [r7, #0]
 81064a6:	685b      	ldr	r3, [r3, #4]
 81064a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81064ac:	2b00      	cmp	r3, #0
 81064ae:	d003      	beq.n	81064b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81064b0:	69ba      	ldr	r2, [r7, #24]
 81064b2:	693b      	ldr	r3, [r7, #16]
 81064b4:	4313      	orrs	r3, r2
 81064b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81064b8:	697b      	ldr	r3, [r7, #20]
 81064ba:	69ba      	ldr	r2, [r7, #24]
 81064bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81064be:	697b      	ldr	r3, [r7, #20]
 81064c0:	681b      	ldr	r3, [r3, #0]
 81064c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81064c4:	693b      	ldr	r3, [r7, #16]
 81064c6:	43db      	mvns	r3, r3
 81064c8:	69ba      	ldr	r2, [r7, #24]
 81064ca:	4013      	ands	r3, r2
 81064cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81064ce:	683b      	ldr	r3, [r7, #0]
 81064d0:	685b      	ldr	r3, [r3, #4]
 81064d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81064d6:	2b00      	cmp	r3, #0
 81064d8:	d003      	beq.n	81064e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81064da:	69ba      	ldr	r2, [r7, #24]
 81064dc:	693b      	ldr	r3, [r7, #16]
 81064de:	4313      	orrs	r3, r2
 81064e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81064e2:	697b      	ldr	r3, [r7, #20]
 81064e4:	69ba      	ldr	r2, [r7, #24]
 81064e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81064e8:	69fb      	ldr	r3, [r7, #28]
 81064ea:	3301      	adds	r3, #1
 81064ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81064ee:	683b      	ldr	r3, [r7, #0]
 81064f0:	681a      	ldr	r2, [r3, #0]
 81064f2:	69fb      	ldr	r3, [r7, #28]
 81064f4:	fa22 f303 	lsr.w	r3, r2, r3
 81064f8:	2b00      	cmp	r3, #0
 81064fa:	f47f ae63 	bne.w	81061c4 <HAL_GPIO_Init+0x14>
  }
}
 81064fe:	bf00      	nop
 8106500:	bf00      	nop
 8106502:	3724      	adds	r7, #36	@ 0x24
 8106504:	46bd      	mov	sp, r7
 8106506:	f85d 7b04 	ldr.w	r7, [sp], #4
 810650a:	4770      	bx	lr
 810650c:	58000400 	.word	0x58000400

08106510 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8106510:	b480      	push	{r7}
 8106512:	b083      	sub	sp, #12
 8106514:	af00      	add	r7, sp, #0
 8106516:	6078      	str	r0, [r7, #4]
 8106518:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 810651a:	490e      	ldr	r1, [pc, #56]	@ (8106554 <HAL_HSEM_Take+0x44>)
 810651c:	683b      	ldr	r3, [r7, #0]
 810651e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8106522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106526:	687a      	ldr	r2, [r7, #4]
 8106528:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 810652c:	4a09      	ldr	r2, [pc, #36]	@ (8106554 <HAL_HSEM_Take+0x44>)
 810652e:	687b      	ldr	r3, [r7, #4]
 8106530:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8106534:	683b      	ldr	r3, [r7, #0]
 8106536:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810653a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810653e:	429a      	cmp	r2, r3
 8106540:	d101      	bne.n	8106546 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8106542:	2300      	movs	r3, #0
 8106544:	e000      	b.n	8106548 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8106546:	2301      	movs	r3, #1
}
 8106548:	4618      	mov	r0, r3
 810654a:	370c      	adds	r7, #12
 810654c:	46bd      	mov	sp, r7
 810654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106552:	4770      	bx	lr
 8106554:	58026400 	.word	0x58026400

08106558 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8106558:	b480      	push	{r7}
 810655a:	b083      	sub	sp, #12
 810655c:	af00      	add	r7, sp, #0
 810655e:	6078      	str	r0, [r7, #4]
 8106560:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8106562:	4906      	ldr	r1, [pc, #24]	@ (810657c <HAL_HSEM_Release+0x24>)
 8106564:	683b      	ldr	r3, [r7, #0]
 8106566:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810656a:	687b      	ldr	r3, [r7, #4]
 810656c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8106570:	bf00      	nop
 8106572:	370c      	adds	r7, #12
 8106574:	46bd      	mov	sp, r7
 8106576:	f85d 7b04 	ldr.w	r7, [sp], #4
 810657a:	4770      	bx	lr
 810657c:	58026400 	.word	0x58026400

08106580 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8106580:	b480      	push	{r7}
 8106582:	b083      	sub	sp, #12
 8106584:	af00      	add	r7, sp, #0
 8106586:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8106588:	4b05      	ldr	r3, [pc, #20]	@ (81065a0 <HAL_HSEM_ActivateNotification+0x20>)
 810658a:	681a      	ldr	r2, [r3, #0]
 810658c:	4904      	ldr	r1, [pc, #16]	@ (81065a0 <HAL_HSEM_ActivateNotification+0x20>)
 810658e:	687b      	ldr	r3, [r7, #4]
 8106590:	4313      	orrs	r3, r2
 8106592:	600b      	str	r3, [r1, #0]
#endif
}
 8106594:	bf00      	nop
 8106596:	370c      	adds	r7, #12
 8106598:	46bd      	mov	sp, r7
 810659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810659e:	4770      	bx	lr
 81065a0:	58026510 	.word	0x58026510

081065a4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 81065a4:	b580      	push	{r7, lr}
 81065a6:	b082      	sub	sp, #8
 81065a8:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81065aa:	4b0a      	ldr	r3, [pc, #40]	@ (81065d4 <HAL_HSEM_IRQHandler+0x30>)
 81065ac:	68db      	ldr	r3, [r3, #12]
 81065ae:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81065b0:	4b08      	ldr	r3, [pc, #32]	@ (81065d4 <HAL_HSEM_IRQHandler+0x30>)
 81065b2:	681a      	ldr	r2, [r3, #0]
 81065b4:	687b      	ldr	r3, [r7, #4]
 81065b6:	43db      	mvns	r3, r3
 81065b8:	4906      	ldr	r1, [pc, #24]	@ (81065d4 <HAL_HSEM_IRQHandler+0x30>)
 81065ba:	4013      	ands	r3, r2
 81065bc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 81065be:	4a05      	ldr	r2, [pc, #20]	@ (81065d4 <HAL_HSEM_IRQHandler+0x30>)
 81065c0:	687b      	ldr	r3, [r7, #4]
 81065c2:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 81065c4:	6878      	ldr	r0, [r7, #4]
 81065c6:	f7f9 fedb 	bl	8100380 <HAL_HSEM_FreeCallback>
}
 81065ca:	bf00      	nop
 81065cc:	3708      	adds	r7, #8
 81065ce:	46bd      	mov	sp, r7
 81065d0:	bd80      	pop	{r7, pc}
 81065d2:	bf00      	nop
 81065d4:	58026510 	.word	0x58026510

081065d8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81065d8:	b580      	push	{r7, lr}
 81065da:	b084      	sub	sp, #16
 81065dc:	af00      	add	r7, sp, #0
 81065de:	60f8      	str	r0, [r7, #12]
 81065e0:	460b      	mov	r3, r1
 81065e2:	607a      	str	r2, [r7, #4]
 81065e4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81065e6:	4b37      	ldr	r3, [pc, #220]	@ (81066c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81065e8:	681b      	ldr	r3, [r3, #0]
 81065ea:	f023 0201 	bic.w	r2, r3, #1
 81065ee:	4935      	ldr	r1, [pc, #212]	@ (81066c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81065f0:	68fb      	ldr	r3, [r7, #12]
 81065f2:	4313      	orrs	r3, r2
 81065f4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	2b00      	cmp	r3, #0
 81065fa:	d123      	bne.n	8106644 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81065fc:	f7fe f846 	bl	810468c <HAL_GetCurrentCPUID>
 8106600:	4603      	mov	r3, r0
 8106602:	2b03      	cmp	r3, #3
 8106604:	d158      	bne.n	81066b8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8106606:	4b2f      	ldr	r3, [pc, #188]	@ (81066c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106608:	691b      	ldr	r3, [r3, #16]
 810660a:	4a2e      	ldr	r2, [pc, #184]	@ (81066c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810660c:	f023 0301 	bic.w	r3, r3, #1
 8106610:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106612:	4b2d      	ldr	r3, [pc, #180]	@ (81066c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106614:	691b      	ldr	r3, [r3, #16]
 8106616:	4a2c      	ldr	r2, [pc, #176]	@ (81066c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106618:	f043 0304 	orr.w	r3, r3, #4
 810661c:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810661e:	f3bf 8f4f 	dsb	sy
}
 8106622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8106624:	f3bf 8f6f 	isb	sy
}
 8106628:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810662a:	7afb      	ldrb	r3, [r7, #11]
 810662c:	2b01      	cmp	r3, #1
 810662e:	d101      	bne.n	8106634 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106630:	bf30      	wfi
 8106632:	e000      	b.n	8106636 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106634:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106636:	4b24      	ldr	r3, [pc, #144]	@ (81066c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106638:	691b      	ldr	r3, [r3, #16]
 810663a:	4a23      	ldr	r2, [pc, #140]	@ (81066c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810663c:	f023 0304 	bic.w	r3, r3, #4
 8106640:	6113      	str	r3, [r2, #16]
 8106642:	e03c      	b.n	81066be <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8106644:	687b      	ldr	r3, [r7, #4]
 8106646:	2b01      	cmp	r3, #1
 8106648:	d123      	bne.n	8106692 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810664a:	f7fe f81f 	bl	810468c <HAL_GetCurrentCPUID>
 810664e:	4603      	mov	r3, r0
 8106650:	2b01      	cmp	r3, #1
 8106652:	d133      	bne.n	81066bc <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8106654:	4b1b      	ldr	r3, [pc, #108]	@ (81066c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106656:	695b      	ldr	r3, [r3, #20]
 8106658:	4a1a      	ldr	r2, [pc, #104]	@ (81066c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810665a:	f023 0302 	bic.w	r3, r3, #2
 810665e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106660:	4b19      	ldr	r3, [pc, #100]	@ (81066c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106662:	691b      	ldr	r3, [r3, #16]
 8106664:	4a18      	ldr	r2, [pc, #96]	@ (81066c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106666:	f043 0304 	orr.w	r3, r3, #4
 810666a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810666c:	f3bf 8f4f 	dsb	sy
}
 8106670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8106672:	f3bf 8f6f 	isb	sy
}
 8106676:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106678:	7afb      	ldrb	r3, [r7, #11]
 810667a:	2b01      	cmp	r3, #1
 810667c:	d101      	bne.n	8106682 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810667e:	bf30      	wfi
 8106680:	e000      	b.n	8106684 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106682:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106684:	4b10      	ldr	r3, [pc, #64]	@ (81066c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106686:	691b      	ldr	r3, [r3, #16]
 8106688:	4a0f      	ldr	r2, [pc, #60]	@ (81066c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810668a:	f023 0304 	bic.w	r3, r3, #4
 810668e:	6113      	str	r3, [r2, #16]
 8106690:	e015      	b.n	81066be <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8106692:	f7fd fffb 	bl	810468c <HAL_GetCurrentCPUID>
 8106696:	4603      	mov	r3, r0
 8106698:	2b03      	cmp	r3, #3
 810669a:	d106      	bne.n	81066aa <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810669c:	4b09      	ldr	r3, [pc, #36]	@ (81066c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810669e:	691b      	ldr	r3, [r3, #16]
 81066a0:	4a08      	ldr	r2, [pc, #32]	@ (81066c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81066a2:	f023 0304 	bic.w	r3, r3, #4
 81066a6:	6113      	str	r3, [r2, #16]
 81066a8:	e009      	b.n	81066be <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81066aa:	4b06      	ldr	r3, [pc, #24]	@ (81066c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81066ac:	695b      	ldr	r3, [r3, #20]
 81066ae:	4a05      	ldr	r2, [pc, #20]	@ (81066c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81066b0:	f023 0304 	bic.w	r3, r3, #4
 81066b4:	6153      	str	r3, [r2, #20]
 81066b6:	e002      	b.n	81066be <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81066b8:	bf00      	nop
 81066ba:	e000      	b.n	81066be <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81066bc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81066be:	3710      	adds	r7, #16
 81066c0:	46bd      	mov	sp, r7
 81066c2:	bd80      	pop	{r7, pc}
 81066c4:	58024800 	.word	0x58024800
 81066c8:	e000ed00 	.word	0xe000ed00

081066cc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81066cc:	b580      	push	{r7, lr}
 81066ce:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81066d0:	f7fd ffdc 	bl	810468c <HAL_GetCurrentCPUID>
 81066d4:	4603      	mov	r3, r0
 81066d6:	2b03      	cmp	r3, #3
 81066d8:	d101      	bne.n	81066de <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81066da:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81066dc:	e001      	b.n	81066e2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81066de:	bf40      	sev
    __WFE ();
 81066e0:	bf20      	wfe
}
 81066e2:	bf00      	nop
 81066e4:	bd80      	pop	{r7, pc}
	...

081066e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81066e8:	b480      	push	{r7}
 81066ea:	b089      	sub	sp, #36	@ 0x24
 81066ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81066ee:	4bb3      	ldr	r3, [pc, #716]	@ (81069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81066f0:	691b      	ldr	r3, [r3, #16]
 81066f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81066f6:	2b18      	cmp	r3, #24
 81066f8:	f200 8155 	bhi.w	81069a6 <HAL_RCC_GetSysClockFreq+0x2be>
 81066fc:	a201      	add	r2, pc, #4	@ (adr r2, 8106704 <HAL_RCC_GetSysClockFreq+0x1c>)
 81066fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106702:	bf00      	nop
 8106704:	08106769 	.word	0x08106769
 8106708:	081069a7 	.word	0x081069a7
 810670c:	081069a7 	.word	0x081069a7
 8106710:	081069a7 	.word	0x081069a7
 8106714:	081069a7 	.word	0x081069a7
 8106718:	081069a7 	.word	0x081069a7
 810671c:	081069a7 	.word	0x081069a7
 8106720:	081069a7 	.word	0x081069a7
 8106724:	0810678f 	.word	0x0810678f
 8106728:	081069a7 	.word	0x081069a7
 810672c:	081069a7 	.word	0x081069a7
 8106730:	081069a7 	.word	0x081069a7
 8106734:	081069a7 	.word	0x081069a7
 8106738:	081069a7 	.word	0x081069a7
 810673c:	081069a7 	.word	0x081069a7
 8106740:	081069a7 	.word	0x081069a7
 8106744:	08106795 	.word	0x08106795
 8106748:	081069a7 	.word	0x081069a7
 810674c:	081069a7 	.word	0x081069a7
 8106750:	081069a7 	.word	0x081069a7
 8106754:	081069a7 	.word	0x081069a7
 8106758:	081069a7 	.word	0x081069a7
 810675c:	081069a7 	.word	0x081069a7
 8106760:	081069a7 	.word	0x081069a7
 8106764:	0810679b 	.word	0x0810679b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106768:	4b94      	ldr	r3, [pc, #592]	@ (81069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810676a:	681b      	ldr	r3, [r3, #0]
 810676c:	f003 0320 	and.w	r3, r3, #32
 8106770:	2b00      	cmp	r3, #0
 8106772:	d009      	beq.n	8106788 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106774:	4b91      	ldr	r3, [pc, #580]	@ (81069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106776:	681b      	ldr	r3, [r3, #0]
 8106778:	08db      	lsrs	r3, r3, #3
 810677a:	f003 0303 	and.w	r3, r3, #3
 810677e:	4a90      	ldr	r2, [pc, #576]	@ (81069c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106780:	fa22 f303 	lsr.w	r3, r2, r3
 8106784:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8106786:	e111      	b.n	81069ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8106788:	4b8d      	ldr	r3, [pc, #564]	@ (81069c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810678a:	61bb      	str	r3, [r7, #24]
      break;
 810678c:	e10e      	b.n	81069ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810678e:	4b8d      	ldr	r3, [pc, #564]	@ (81069c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106790:	61bb      	str	r3, [r7, #24]
      break;
 8106792:	e10b      	b.n	81069ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8106794:	4b8c      	ldr	r3, [pc, #560]	@ (81069c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8106796:	61bb      	str	r3, [r7, #24]
      break;
 8106798:	e108      	b.n	81069ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810679a:	4b88      	ldr	r3, [pc, #544]	@ (81069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810679c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810679e:	f003 0303 	and.w	r3, r3, #3
 81067a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81067a4:	4b85      	ldr	r3, [pc, #532]	@ (81069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81067a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81067a8:	091b      	lsrs	r3, r3, #4
 81067aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81067ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81067b0:	4b82      	ldr	r3, [pc, #520]	@ (81069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81067b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81067b4:	f003 0301 	and.w	r3, r3, #1
 81067b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81067ba:	4b80      	ldr	r3, [pc, #512]	@ (81069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81067bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81067be:	08db      	lsrs	r3, r3, #3
 81067c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81067c4:	68fa      	ldr	r2, [r7, #12]
 81067c6:	fb02 f303 	mul.w	r3, r2, r3
 81067ca:	ee07 3a90 	vmov	s15, r3
 81067ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81067d6:	693b      	ldr	r3, [r7, #16]
 81067d8:	2b00      	cmp	r3, #0
 81067da:	f000 80e1 	beq.w	81069a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 81067de:	697b      	ldr	r3, [r7, #20]
 81067e0:	2b02      	cmp	r3, #2
 81067e2:	f000 8083 	beq.w	81068ec <HAL_RCC_GetSysClockFreq+0x204>
 81067e6:	697b      	ldr	r3, [r7, #20]
 81067e8:	2b02      	cmp	r3, #2
 81067ea:	f200 80a1 	bhi.w	8106930 <HAL_RCC_GetSysClockFreq+0x248>
 81067ee:	697b      	ldr	r3, [r7, #20]
 81067f0:	2b00      	cmp	r3, #0
 81067f2:	d003      	beq.n	81067fc <HAL_RCC_GetSysClockFreq+0x114>
 81067f4:	697b      	ldr	r3, [r7, #20]
 81067f6:	2b01      	cmp	r3, #1
 81067f8:	d056      	beq.n	81068a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 81067fa:	e099      	b.n	8106930 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81067fc:	4b6f      	ldr	r3, [pc, #444]	@ (81069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81067fe:	681b      	ldr	r3, [r3, #0]
 8106800:	f003 0320 	and.w	r3, r3, #32
 8106804:	2b00      	cmp	r3, #0
 8106806:	d02d      	beq.n	8106864 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106808:	4b6c      	ldr	r3, [pc, #432]	@ (81069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810680a:	681b      	ldr	r3, [r3, #0]
 810680c:	08db      	lsrs	r3, r3, #3
 810680e:	f003 0303 	and.w	r3, r3, #3
 8106812:	4a6b      	ldr	r2, [pc, #428]	@ (81069c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106814:	fa22 f303 	lsr.w	r3, r2, r3
 8106818:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810681a:	687b      	ldr	r3, [r7, #4]
 810681c:	ee07 3a90 	vmov	s15, r3
 8106820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106824:	693b      	ldr	r3, [r7, #16]
 8106826:	ee07 3a90 	vmov	s15, r3
 810682a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810682e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106832:	4b62      	ldr	r3, [pc, #392]	@ (81069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810683a:	ee07 3a90 	vmov	s15, r3
 810683e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106842:	ed97 6a02 	vldr	s12, [r7, #8]
 8106846:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81069cc <HAL_RCC_GetSysClockFreq+0x2e4>
 810684a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810684e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810685a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810685e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8106862:	e087      	b.n	8106974 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106864:	693b      	ldr	r3, [r7, #16]
 8106866:	ee07 3a90 	vmov	s15, r3
 810686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810686e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81069d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8106872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106876:	4b51      	ldr	r3, [pc, #324]	@ (81069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810687a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810687e:	ee07 3a90 	vmov	s15, r3
 8106882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106886:	ed97 6a02 	vldr	s12, [r7, #8]
 810688a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81069cc <HAL_RCC_GetSysClockFreq+0x2e4>
 810688e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810689a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810689e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81068a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81068a6:	e065      	b.n	8106974 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81068a8:	693b      	ldr	r3, [r7, #16]
 81068aa:	ee07 3a90 	vmov	s15, r3
 81068ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068b2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81069d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 81068b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81068ba:	4b40      	ldr	r3, [pc, #256]	@ (81069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81068bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81068be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81068c2:	ee07 3a90 	vmov	s15, r3
 81068c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81068ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81068ce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81069cc <HAL_RCC_GetSysClockFreq+0x2e4>
 81068d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81068d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81068da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81068de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81068e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81068e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81068ea:	e043      	b.n	8106974 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81068ec:	693b      	ldr	r3, [r7, #16]
 81068ee:	ee07 3a90 	vmov	s15, r3
 81068f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81069d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 81068fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81068fe:	4b2f      	ldr	r3, [pc, #188]	@ (81069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106906:	ee07 3a90 	vmov	s15, r3
 810690a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810690e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106912:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81069cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8106916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810691a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810691e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106926:	ee67 7a27 	vmul.f32	s15, s14, s15
 810692a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810692e:	e021      	b.n	8106974 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106930:	693b      	ldr	r3, [r7, #16]
 8106932:	ee07 3a90 	vmov	s15, r3
 8106936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810693a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81069d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810693e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106942:	4b1e      	ldr	r3, [pc, #120]	@ (81069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810694a:	ee07 3a90 	vmov	s15, r3
 810694e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106952:	ed97 6a02 	vldr	s12, [r7, #8]
 8106956:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81069cc <HAL_RCC_GetSysClockFreq+0x2e4>
 810695a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810695e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810696a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810696e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106972:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8106974:	4b11      	ldr	r3, [pc, #68]	@ (81069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106978:	0a5b      	lsrs	r3, r3, #9
 810697a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810697e:	3301      	adds	r3, #1
 8106980:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8106982:	683b      	ldr	r3, [r7, #0]
 8106984:	ee07 3a90 	vmov	s15, r3
 8106988:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810698c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106998:	ee17 3a90 	vmov	r3, s15
 810699c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810699e:	e005      	b.n	81069ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81069a0:	2300      	movs	r3, #0
 81069a2:	61bb      	str	r3, [r7, #24]
      break;
 81069a4:	e002      	b.n	81069ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81069a6:	4b07      	ldr	r3, [pc, #28]	@ (81069c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81069a8:	61bb      	str	r3, [r7, #24]
      break;
 81069aa:	bf00      	nop
  }

  return sysclockfreq;
 81069ac:	69bb      	ldr	r3, [r7, #24]
}
 81069ae:	4618      	mov	r0, r3
 81069b0:	3724      	adds	r7, #36	@ 0x24
 81069b2:	46bd      	mov	sp, r7
 81069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069b8:	4770      	bx	lr
 81069ba:	bf00      	nop
 81069bc:	58024400 	.word	0x58024400
 81069c0:	03d09000 	.word	0x03d09000
 81069c4:	003d0900 	.word	0x003d0900
 81069c8:	017d7840 	.word	0x017d7840
 81069cc:	46000000 	.word	0x46000000
 81069d0:	4c742400 	.word	0x4c742400
 81069d4:	4a742400 	.word	0x4a742400
 81069d8:	4bbebc20 	.word	0x4bbebc20

081069dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81069dc:	b580      	push	{r7, lr}
 81069de:	b082      	sub	sp, #8
 81069e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81069e2:	f7ff fe81 	bl	81066e8 <HAL_RCC_GetSysClockFreq>
 81069e6:	4602      	mov	r2, r0
 81069e8:	4b11      	ldr	r3, [pc, #68]	@ (8106a30 <HAL_RCC_GetHCLKFreq+0x54>)
 81069ea:	699b      	ldr	r3, [r3, #24]
 81069ec:	0a1b      	lsrs	r3, r3, #8
 81069ee:	f003 030f 	and.w	r3, r3, #15
 81069f2:	4910      	ldr	r1, [pc, #64]	@ (8106a34 <HAL_RCC_GetHCLKFreq+0x58>)
 81069f4:	5ccb      	ldrb	r3, [r1, r3]
 81069f6:	f003 031f 	and.w	r3, r3, #31
 81069fa:	fa22 f303 	lsr.w	r3, r2, r3
 81069fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106a00:	4b0b      	ldr	r3, [pc, #44]	@ (8106a30 <HAL_RCC_GetHCLKFreq+0x54>)
 8106a02:	699b      	ldr	r3, [r3, #24]
 8106a04:	f003 030f 	and.w	r3, r3, #15
 8106a08:	4a0a      	ldr	r2, [pc, #40]	@ (8106a34 <HAL_RCC_GetHCLKFreq+0x58>)
 8106a0a:	5cd3      	ldrb	r3, [r2, r3]
 8106a0c:	f003 031f 	and.w	r3, r3, #31
 8106a10:	687a      	ldr	r2, [r7, #4]
 8106a12:	fa22 f303 	lsr.w	r3, r2, r3
 8106a16:	4a08      	ldr	r2, [pc, #32]	@ (8106a38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106a18:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8106a1a:	4b07      	ldr	r3, [pc, #28]	@ (8106a38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106a1c:	681b      	ldr	r3, [r3, #0]
 8106a1e:	4a07      	ldr	r2, [pc, #28]	@ (8106a3c <HAL_RCC_GetHCLKFreq+0x60>)
 8106a20:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8106a22:	4b05      	ldr	r3, [pc, #20]	@ (8106a38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106a24:	681b      	ldr	r3, [r3, #0]
}
 8106a26:	4618      	mov	r0, r3
 8106a28:	3708      	adds	r7, #8
 8106a2a:	46bd      	mov	sp, r7
 8106a2c:	bd80      	pop	{r7, pc}
 8106a2e:	bf00      	nop
 8106a30:	58024400 	.word	0x58024400
 8106a34:	08119b1c 	.word	0x08119b1c
 8106a38:	10000018 	.word	0x10000018
 8106a3c:	10000014 	.word	0x10000014

08106a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106a40:	b580      	push	{r7, lr}
 8106a42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8106a44:	f7ff ffca 	bl	81069dc <HAL_RCC_GetHCLKFreq>
 8106a48:	4602      	mov	r2, r0
 8106a4a:	4b06      	ldr	r3, [pc, #24]	@ (8106a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8106a4c:	69db      	ldr	r3, [r3, #28]
 8106a4e:	091b      	lsrs	r3, r3, #4
 8106a50:	f003 0307 	and.w	r3, r3, #7
 8106a54:	4904      	ldr	r1, [pc, #16]	@ (8106a68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8106a56:	5ccb      	ldrb	r3, [r1, r3]
 8106a58:	f003 031f 	and.w	r3, r3, #31
 8106a5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106a60:	4618      	mov	r0, r3
 8106a62:	bd80      	pop	{r7, pc}
 8106a64:	58024400 	.word	0x58024400
 8106a68:	08119b1c 	.word	0x08119b1c

08106a6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8106a6c:	b480      	push	{r7}
 8106a6e:	b083      	sub	sp, #12
 8106a70:	af00      	add	r7, sp, #0
 8106a72:	6078      	str	r0, [r7, #4]
 8106a74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8106a76:	687b      	ldr	r3, [r7, #4]
 8106a78:	223f      	movs	r2, #63	@ 0x3f
 8106a7a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8106a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8106ae8 <HAL_RCC_GetClockConfig+0x7c>)
 8106a7e:	691b      	ldr	r3, [r3, #16]
 8106a80:	f003 0207 	and.w	r2, r3, #7
 8106a84:	687b      	ldr	r3, [r7, #4]
 8106a86:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8106a88:	4b17      	ldr	r3, [pc, #92]	@ (8106ae8 <HAL_RCC_GetClockConfig+0x7c>)
 8106a8a:	699b      	ldr	r3, [r3, #24]
 8106a8c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8106a90:	687b      	ldr	r3, [r7, #4]
 8106a92:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8106a94:	4b14      	ldr	r3, [pc, #80]	@ (8106ae8 <HAL_RCC_GetClockConfig+0x7c>)
 8106a96:	699b      	ldr	r3, [r3, #24]
 8106a98:	f003 020f 	and.w	r2, r3, #15
 8106a9c:	687b      	ldr	r3, [r7, #4]
 8106a9e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8106aa0:	4b11      	ldr	r3, [pc, #68]	@ (8106ae8 <HAL_RCC_GetClockConfig+0x7c>)
 8106aa2:	699b      	ldr	r3, [r3, #24]
 8106aa4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8106aa8:	687b      	ldr	r3, [r7, #4]
 8106aaa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8106aac:	4b0e      	ldr	r3, [pc, #56]	@ (8106ae8 <HAL_RCC_GetClockConfig+0x7c>)
 8106aae:	69db      	ldr	r3, [r3, #28]
 8106ab0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8106ab4:	687b      	ldr	r3, [r7, #4]
 8106ab6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8106ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8106ae8 <HAL_RCC_GetClockConfig+0x7c>)
 8106aba:	69db      	ldr	r3, [r3, #28]
 8106abc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8106ac0:	687b      	ldr	r3, [r7, #4]
 8106ac2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8106ac4:	4b08      	ldr	r3, [pc, #32]	@ (8106ae8 <HAL_RCC_GetClockConfig+0x7c>)
 8106ac6:	6a1b      	ldr	r3, [r3, #32]
 8106ac8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8106acc:	687b      	ldr	r3, [r7, #4]
 8106ace:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8106ad0:	4b06      	ldr	r3, [pc, #24]	@ (8106aec <HAL_RCC_GetClockConfig+0x80>)
 8106ad2:	681b      	ldr	r3, [r3, #0]
 8106ad4:	f003 020f 	and.w	r2, r3, #15
 8106ad8:	683b      	ldr	r3, [r7, #0]
 8106ada:	601a      	str	r2, [r3, #0]
}
 8106adc:	bf00      	nop
 8106ade:	370c      	adds	r7, #12
 8106ae0:	46bd      	mov	sp, r7
 8106ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ae6:	4770      	bx	lr
 8106ae8:	58024400 	.word	0x58024400
 8106aec:	52002000 	.word	0x52002000

08106af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8106af0:	b580      	push	{r7, lr}
 8106af2:	b082      	sub	sp, #8
 8106af4:	af00      	add	r7, sp, #0
 8106af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106af8:	687b      	ldr	r3, [r7, #4]
 8106afa:	2b00      	cmp	r3, #0
 8106afc:	d101      	bne.n	8106b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8106afe:	2301      	movs	r3, #1
 8106b00:	e049      	b.n	8106b96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106b02:	687b      	ldr	r3, [r7, #4]
 8106b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8106b08:	b2db      	uxtb	r3, r3
 8106b0a:	2b00      	cmp	r3, #0
 8106b0c:	d106      	bne.n	8106b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106b0e:	687b      	ldr	r3, [r7, #4]
 8106b10:	2200      	movs	r2, #0
 8106b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106b16:	6878      	ldr	r0, [r7, #4]
 8106b18:	f000 f841 	bl	8106b9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106b1c:	687b      	ldr	r3, [r7, #4]
 8106b1e:	2202      	movs	r2, #2
 8106b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106b24:	687b      	ldr	r3, [r7, #4]
 8106b26:	681a      	ldr	r2, [r3, #0]
 8106b28:	687b      	ldr	r3, [r7, #4]
 8106b2a:	3304      	adds	r3, #4
 8106b2c:	4619      	mov	r1, r3
 8106b2e:	4610      	mov	r0, r2
 8106b30:	f000 f9e8 	bl	8106f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106b34:	687b      	ldr	r3, [r7, #4]
 8106b36:	2201      	movs	r2, #1
 8106b38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106b3c:	687b      	ldr	r3, [r7, #4]
 8106b3e:	2201      	movs	r2, #1
 8106b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106b44:	687b      	ldr	r3, [r7, #4]
 8106b46:	2201      	movs	r2, #1
 8106b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106b4c:	687b      	ldr	r3, [r7, #4]
 8106b4e:	2201      	movs	r2, #1
 8106b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106b54:	687b      	ldr	r3, [r7, #4]
 8106b56:	2201      	movs	r2, #1
 8106b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106b5c:	687b      	ldr	r3, [r7, #4]
 8106b5e:	2201      	movs	r2, #1
 8106b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106b64:	687b      	ldr	r3, [r7, #4]
 8106b66:	2201      	movs	r2, #1
 8106b68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106b6c:	687b      	ldr	r3, [r7, #4]
 8106b6e:	2201      	movs	r2, #1
 8106b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106b74:	687b      	ldr	r3, [r7, #4]
 8106b76:	2201      	movs	r2, #1
 8106b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106b7c:	687b      	ldr	r3, [r7, #4]
 8106b7e:	2201      	movs	r2, #1
 8106b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106b84:	687b      	ldr	r3, [r7, #4]
 8106b86:	2201      	movs	r2, #1
 8106b88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106b8c:	687b      	ldr	r3, [r7, #4]
 8106b8e:	2201      	movs	r2, #1
 8106b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8106b94:	2300      	movs	r3, #0
}
 8106b96:	4618      	mov	r0, r3
 8106b98:	3708      	adds	r7, #8
 8106b9a:	46bd      	mov	sp, r7
 8106b9c:	bd80      	pop	{r7, pc}

08106b9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8106b9e:	b480      	push	{r7}
 8106ba0:	b083      	sub	sp, #12
 8106ba2:	af00      	add	r7, sp, #0
 8106ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8106ba6:	bf00      	nop
 8106ba8:	370c      	adds	r7, #12
 8106baa:	46bd      	mov	sp, r7
 8106bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bb0:	4770      	bx	lr
	...

08106bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8106bb4:	b480      	push	{r7}
 8106bb6:	b085      	sub	sp, #20
 8106bb8:	af00      	add	r7, sp, #0
 8106bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8106bbc:	687b      	ldr	r3, [r7, #4]
 8106bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8106bc2:	b2db      	uxtb	r3, r3
 8106bc4:	2b01      	cmp	r3, #1
 8106bc6:	d001      	beq.n	8106bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8106bc8:	2301      	movs	r3, #1
 8106bca:	e054      	b.n	8106c76 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106bcc:	687b      	ldr	r3, [r7, #4]
 8106bce:	2202      	movs	r2, #2
 8106bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8106bd4:	687b      	ldr	r3, [r7, #4]
 8106bd6:	681b      	ldr	r3, [r3, #0]
 8106bd8:	68da      	ldr	r2, [r3, #12]
 8106bda:	687b      	ldr	r3, [r7, #4]
 8106bdc:	681b      	ldr	r3, [r3, #0]
 8106bde:	f042 0201 	orr.w	r2, r2, #1
 8106be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106be4:	687b      	ldr	r3, [r7, #4]
 8106be6:	681b      	ldr	r3, [r3, #0]
 8106be8:	4a26      	ldr	r2, [pc, #152]	@ (8106c84 <HAL_TIM_Base_Start_IT+0xd0>)
 8106bea:	4293      	cmp	r3, r2
 8106bec:	d022      	beq.n	8106c34 <HAL_TIM_Base_Start_IT+0x80>
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	681b      	ldr	r3, [r3, #0]
 8106bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106bf6:	d01d      	beq.n	8106c34 <HAL_TIM_Base_Start_IT+0x80>
 8106bf8:	687b      	ldr	r3, [r7, #4]
 8106bfa:	681b      	ldr	r3, [r3, #0]
 8106bfc:	4a22      	ldr	r2, [pc, #136]	@ (8106c88 <HAL_TIM_Base_Start_IT+0xd4>)
 8106bfe:	4293      	cmp	r3, r2
 8106c00:	d018      	beq.n	8106c34 <HAL_TIM_Base_Start_IT+0x80>
 8106c02:	687b      	ldr	r3, [r7, #4]
 8106c04:	681b      	ldr	r3, [r3, #0]
 8106c06:	4a21      	ldr	r2, [pc, #132]	@ (8106c8c <HAL_TIM_Base_Start_IT+0xd8>)
 8106c08:	4293      	cmp	r3, r2
 8106c0a:	d013      	beq.n	8106c34 <HAL_TIM_Base_Start_IT+0x80>
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	681b      	ldr	r3, [r3, #0]
 8106c10:	4a1f      	ldr	r2, [pc, #124]	@ (8106c90 <HAL_TIM_Base_Start_IT+0xdc>)
 8106c12:	4293      	cmp	r3, r2
 8106c14:	d00e      	beq.n	8106c34 <HAL_TIM_Base_Start_IT+0x80>
 8106c16:	687b      	ldr	r3, [r7, #4]
 8106c18:	681b      	ldr	r3, [r3, #0]
 8106c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8106c94 <HAL_TIM_Base_Start_IT+0xe0>)
 8106c1c:	4293      	cmp	r3, r2
 8106c1e:	d009      	beq.n	8106c34 <HAL_TIM_Base_Start_IT+0x80>
 8106c20:	687b      	ldr	r3, [r7, #4]
 8106c22:	681b      	ldr	r3, [r3, #0]
 8106c24:	4a1c      	ldr	r2, [pc, #112]	@ (8106c98 <HAL_TIM_Base_Start_IT+0xe4>)
 8106c26:	4293      	cmp	r3, r2
 8106c28:	d004      	beq.n	8106c34 <HAL_TIM_Base_Start_IT+0x80>
 8106c2a:	687b      	ldr	r3, [r7, #4]
 8106c2c:	681b      	ldr	r3, [r3, #0]
 8106c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8106c9c <HAL_TIM_Base_Start_IT+0xe8>)
 8106c30:	4293      	cmp	r3, r2
 8106c32:	d115      	bne.n	8106c60 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106c34:	687b      	ldr	r3, [r7, #4]
 8106c36:	681b      	ldr	r3, [r3, #0]
 8106c38:	689a      	ldr	r2, [r3, #8]
 8106c3a:	4b19      	ldr	r3, [pc, #100]	@ (8106ca0 <HAL_TIM_Base_Start_IT+0xec>)
 8106c3c:	4013      	ands	r3, r2
 8106c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106c40:	68fb      	ldr	r3, [r7, #12]
 8106c42:	2b06      	cmp	r3, #6
 8106c44:	d015      	beq.n	8106c72 <HAL_TIM_Base_Start_IT+0xbe>
 8106c46:	68fb      	ldr	r3, [r7, #12]
 8106c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106c4c:	d011      	beq.n	8106c72 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8106c4e:	687b      	ldr	r3, [r7, #4]
 8106c50:	681b      	ldr	r3, [r3, #0]
 8106c52:	681a      	ldr	r2, [r3, #0]
 8106c54:	687b      	ldr	r3, [r7, #4]
 8106c56:	681b      	ldr	r3, [r3, #0]
 8106c58:	f042 0201 	orr.w	r2, r2, #1
 8106c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106c5e:	e008      	b.n	8106c72 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106c60:	687b      	ldr	r3, [r7, #4]
 8106c62:	681b      	ldr	r3, [r3, #0]
 8106c64:	681a      	ldr	r2, [r3, #0]
 8106c66:	687b      	ldr	r3, [r7, #4]
 8106c68:	681b      	ldr	r3, [r3, #0]
 8106c6a:	f042 0201 	orr.w	r2, r2, #1
 8106c6e:	601a      	str	r2, [r3, #0]
 8106c70:	e000      	b.n	8106c74 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106c72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106c74:	2300      	movs	r3, #0
}
 8106c76:	4618      	mov	r0, r3
 8106c78:	3714      	adds	r7, #20
 8106c7a:	46bd      	mov	sp, r7
 8106c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c80:	4770      	bx	lr
 8106c82:	bf00      	nop
 8106c84:	40010000 	.word	0x40010000
 8106c88:	40000400 	.word	0x40000400
 8106c8c:	40000800 	.word	0x40000800
 8106c90:	40000c00 	.word	0x40000c00
 8106c94:	40010400 	.word	0x40010400
 8106c98:	40001800 	.word	0x40001800
 8106c9c:	40014000 	.word	0x40014000
 8106ca0:	00010007 	.word	0x00010007

08106ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8106ca4:	b580      	push	{r7, lr}
 8106ca6:	b084      	sub	sp, #16
 8106ca8:	af00      	add	r7, sp, #0
 8106caa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8106cac:	687b      	ldr	r3, [r7, #4]
 8106cae:	681b      	ldr	r3, [r3, #0]
 8106cb0:	68db      	ldr	r3, [r3, #12]
 8106cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8106cb4:	687b      	ldr	r3, [r7, #4]
 8106cb6:	681b      	ldr	r3, [r3, #0]
 8106cb8:	691b      	ldr	r3, [r3, #16]
 8106cba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8106cbc:	68bb      	ldr	r3, [r7, #8]
 8106cbe:	f003 0302 	and.w	r3, r3, #2
 8106cc2:	2b00      	cmp	r3, #0
 8106cc4:	d020      	beq.n	8106d08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8106cc6:	68fb      	ldr	r3, [r7, #12]
 8106cc8:	f003 0302 	and.w	r3, r3, #2
 8106ccc:	2b00      	cmp	r3, #0
 8106cce:	d01b      	beq.n	8106d08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8106cd0:	687b      	ldr	r3, [r7, #4]
 8106cd2:	681b      	ldr	r3, [r3, #0]
 8106cd4:	f06f 0202 	mvn.w	r2, #2
 8106cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8106cda:	687b      	ldr	r3, [r7, #4]
 8106cdc:	2201      	movs	r2, #1
 8106cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106ce0:	687b      	ldr	r3, [r7, #4]
 8106ce2:	681b      	ldr	r3, [r3, #0]
 8106ce4:	699b      	ldr	r3, [r3, #24]
 8106ce6:	f003 0303 	and.w	r3, r3, #3
 8106cea:	2b00      	cmp	r3, #0
 8106cec:	d003      	beq.n	8106cf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8106cee:	6878      	ldr	r0, [r7, #4]
 8106cf0:	f000 f8e9 	bl	8106ec6 <HAL_TIM_IC_CaptureCallback>
 8106cf4:	e005      	b.n	8106d02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8106cf6:	6878      	ldr	r0, [r7, #4]
 8106cf8:	f000 f8db 	bl	8106eb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106cfc:	6878      	ldr	r0, [r7, #4]
 8106cfe:	f000 f8ec 	bl	8106eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106d02:	687b      	ldr	r3, [r7, #4]
 8106d04:	2200      	movs	r2, #0
 8106d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8106d08:	68bb      	ldr	r3, [r7, #8]
 8106d0a:	f003 0304 	and.w	r3, r3, #4
 8106d0e:	2b00      	cmp	r3, #0
 8106d10:	d020      	beq.n	8106d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8106d12:	68fb      	ldr	r3, [r7, #12]
 8106d14:	f003 0304 	and.w	r3, r3, #4
 8106d18:	2b00      	cmp	r3, #0
 8106d1a:	d01b      	beq.n	8106d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8106d1c:	687b      	ldr	r3, [r7, #4]
 8106d1e:	681b      	ldr	r3, [r3, #0]
 8106d20:	f06f 0204 	mvn.w	r2, #4
 8106d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8106d26:	687b      	ldr	r3, [r7, #4]
 8106d28:	2202      	movs	r2, #2
 8106d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8106d2c:	687b      	ldr	r3, [r7, #4]
 8106d2e:	681b      	ldr	r3, [r3, #0]
 8106d30:	699b      	ldr	r3, [r3, #24]
 8106d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106d36:	2b00      	cmp	r3, #0
 8106d38:	d003      	beq.n	8106d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106d3a:	6878      	ldr	r0, [r7, #4]
 8106d3c:	f000 f8c3 	bl	8106ec6 <HAL_TIM_IC_CaptureCallback>
 8106d40:	e005      	b.n	8106d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106d42:	6878      	ldr	r0, [r7, #4]
 8106d44:	f000 f8b5 	bl	8106eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106d48:	6878      	ldr	r0, [r7, #4]
 8106d4a:	f000 f8c6 	bl	8106eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106d4e:	687b      	ldr	r3, [r7, #4]
 8106d50:	2200      	movs	r2, #0
 8106d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8106d54:	68bb      	ldr	r3, [r7, #8]
 8106d56:	f003 0308 	and.w	r3, r3, #8
 8106d5a:	2b00      	cmp	r3, #0
 8106d5c:	d020      	beq.n	8106da0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8106d5e:	68fb      	ldr	r3, [r7, #12]
 8106d60:	f003 0308 	and.w	r3, r3, #8
 8106d64:	2b00      	cmp	r3, #0
 8106d66:	d01b      	beq.n	8106da0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8106d68:	687b      	ldr	r3, [r7, #4]
 8106d6a:	681b      	ldr	r3, [r3, #0]
 8106d6c:	f06f 0208 	mvn.w	r2, #8
 8106d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8106d72:	687b      	ldr	r3, [r7, #4]
 8106d74:	2204      	movs	r2, #4
 8106d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8106d78:	687b      	ldr	r3, [r7, #4]
 8106d7a:	681b      	ldr	r3, [r3, #0]
 8106d7c:	69db      	ldr	r3, [r3, #28]
 8106d7e:	f003 0303 	and.w	r3, r3, #3
 8106d82:	2b00      	cmp	r3, #0
 8106d84:	d003      	beq.n	8106d8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106d86:	6878      	ldr	r0, [r7, #4]
 8106d88:	f000 f89d 	bl	8106ec6 <HAL_TIM_IC_CaptureCallback>
 8106d8c:	e005      	b.n	8106d9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106d8e:	6878      	ldr	r0, [r7, #4]
 8106d90:	f000 f88f 	bl	8106eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106d94:	6878      	ldr	r0, [r7, #4]
 8106d96:	f000 f8a0 	bl	8106eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106d9a:	687b      	ldr	r3, [r7, #4]
 8106d9c:	2200      	movs	r2, #0
 8106d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8106da0:	68bb      	ldr	r3, [r7, #8]
 8106da2:	f003 0310 	and.w	r3, r3, #16
 8106da6:	2b00      	cmp	r3, #0
 8106da8:	d020      	beq.n	8106dec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8106daa:	68fb      	ldr	r3, [r7, #12]
 8106dac:	f003 0310 	and.w	r3, r3, #16
 8106db0:	2b00      	cmp	r3, #0
 8106db2:	d01b      	beq.n	8106dec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8106db4:	687b      	ldr	r3, [r7, #4]
 8106db6:	681b      	ldr	r3, [r3, #0]
 8106db8:	f06f 0210 	mvn.w	r2, #16
 8106dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8106dbe:	687b      	ldr	r3, [r7, #4]
 8106dc0:	2208      	movs	r2, #8
 8106dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	681b      	ldr	r3, [r3, #0]
 8106dc8:	69db      	ldr	r3, [r3, #28]
 8106dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106dce:	2b00      	cmp	r3, #0
 8106dd0:	d003      	beq.n	8106dda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106dd2:	6878      	ldr	r0, [r7, #4]
 8106dd4:	f000 f877 	bl	8106ec6 <HAL_TIM_IC_CaptureCallback>
 8106dd8:	e005      	b.n	8106de6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106dda:	6878      	ldr	r0, [r7, #4]
 8106ddc:	f000 f869 	bl	8106eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106de0:	6878      	ldr	r0, [r7, #4]
 8106de2:	f000 f87a 	bl	8106eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106de6:	687b      	ldr	r3, [r7, #4]
 8106de8:	2200      	movs	r2, #0
 8106dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8106dec:	68bb      	ldr	r3, [r7, #8]
 8106dee:	f003 0301 	and.w	r3, r3, #1
 8106df2:	2b00      	cmp	r3, #0
 8106df4:	d00c      	beq.n	8106e10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8106df6:	68fb      	ldr	r3, [r7, #12]
 8106df8:	f003 0301 	and.w	r3, r3, #1
 8106dfc:	2b00      	cmp	r3, #0
 8106dfe:	d007      	beq.n	8106e10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8106e00:	687b      	ldr	r3, [r7, #4]
 8106e02:	681b      	ldr	r3, [r3, #0]
 8106e04:	f06f 0201 	mvn.w	r2, #1
 8106e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8106e0a:	6878      	ldr	r0, [r7, #4]
 8106e0c:	f7f9 fcbe 	bl	810078c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8106e10:	68bb      	ldr	r3, [r7, #8]
 8106e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106e16:	2b00      	cmp	r3, #0
 8106e18:	d104      	bne.n	8106e24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8106e1a:	68bb      	ldr	r3, [r7, #8]
 8106e1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8106e20:	2b00      	cmp	r3, #0
 8106e22:	d00c      	beq.n	8106e3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8106e24:	68fb      	ldr	r3, [r7, #12]
 8106e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106e2a:	2b00      	cmp	r3, #0
 8106e2c:	d007      	beq.n	8106e3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8106e2e:	687b      	ldr	r3, [r7, #4]
 8106e30:	681b      	ldr	r3, [r3, #0]
 8106e32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8106e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8106e38:	6878      	ldr	r0, [r7, #4]
 8106e3a:	f000 f913 	bl	8107064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8106e3e:	68bb      	ldr	r3, [r7, #8]
 8106e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106e44:	2b00      	cmp	r3, #0
 8106e46:	d00c      	beq.n	8106e62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8106e48:	68fb      	ldr	r3, [r7, #12]
 8106e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8106e4e:	2b00      	cmp	r3, #0
 8106e50:	d007      	beq.n	8106e62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8106e52:	687b      	ldr	r3, [r7, #4]
 8106e54:	681b      	ldr	r3, [r3, #0]
 8106e56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8106e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8106e5c:	6878      	ldr	r0, [r7, #4]
 8106e5e:	f000 f90b 	bl	8107078 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8106e62:	68bb      	ldr	r3, [r7, #8]
 8106e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106e68:	2b00      	cmp	r3, #0
 8106e6a:	d00c      	beq.n	8106e86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8106e6c:	68fb      	ldr	r3, [r7, #12]
 8106e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106e72:	2b00      	cmp	r3, #0
 8106e74:	d007      	beq.n	8106e86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8106e76:	687b      	ldr	r3, [r7, #4]
 8106e78:	681b      	ldr	r3, [r3, #0]
 8106e7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8106e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8106e80:	6878      	ldr	r0, [r7, #4]
 8106e82:	f000 f834 	bl	8106eee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8106e86:	68bb      	ldr	r3, [r7, #8]
 8106e88:	f003 0320 	and.w	r3, r3, #32
 8106e8c:	2b00      	cmp	r3, #0
 8106e8e:	d00c      	beq.n	8106eaa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8106e90:	68fb      	ldr	r3, [r7, #12]
 8106e92:	f003 0320 	and.w	r3, r3, #32
 8106e96:	2b00      	cmp	r3, #0
 8106e98:	d007      	beq.n	8106eaa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8106e9a:	687b      	ldr	r3, [r7, #4]
 8106e9c:	681b      	ldr	r3, [r3, #0]
 8106e9e:	f06f 0220 	mvn.w	r2, #32
 8106ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8106ea4:	6878      	ldr	r0, [r7, #4]
 8106ea6:	f000 f8d3 	bl	8107050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8106eaa:	bf00      	nop
 8106eac:	3710      	adds	r7, #16
 8106eae:	46bd      	mov	sp, r7
 8106eb0:	bd80      	pop	{r7, pc}

08106eb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8106eb2:	b480      	push	{r7}
 8106eb4:	b083      	sub	sp, #12
 8106eb6:	af00      	add	r7, sp, #0
 8106eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8106eba:	bf00      	nop
 8106ebc:	370c      	adds	r7, #12
 8106ebe:	46bd      	mov	sp, r7
 8106ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ec4:	4770      	bx	lr

08106ec6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8106ec6:	b480      	push	{r7}
 8106ec8:	b083      	sub	sp, #12
 8106eca:	af00      	add	r7, sp, #0
 8106ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8106ece:	bf00      	nop
 8106ed0:	370c      	adds	r7, #12
 8106ed2:	46bd      	mov	sp, r7
 8106ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ed8:	4770      	bx	lr

08106eda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8106eda:	b480      	push	{r7}
 8106edc:	b083      	sub	sp, #12
 8106ede:	af00      	add	r7, sp, #0
 8106ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8106ee2:	bf00      	nop
 8106ee4:	370c      	adds	r7, #12
 8106ee6:	46bd      	mov	sp, r7
 8106ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106eec:	4770      	bx	lr

08106eee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8106eee:	b480      	push	{r7}
 8106ef0:	b083      	sub	sp, #12
 8106ef2:	af00      	add	r7, sp, #0
 8106ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8106ef6:	bf00      	nop
 8106ef8:	370c      	adds	r7, #12
 8106efa:	46bd      	mov	sp, r7
 8106efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f00:	4770      	bx	lr
	...

08106f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8106f04:	b480      	push	{r7}
 8106f06:	b085      	sub	sp, #20
 8106f08:	af00      	add	r7, sp, #0
 8106f0a:	6078      	str	r0, [r7, #4]
 8106f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8106f0e:	687b      	ldr	r3, [r7, #4]
 8106f10:	681b      	ldr	r3, [r3, #0]
 8106f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106f14:	687b      	ldr	r3, [r7, #4]
 8106f16:	4a46      	ldr	r2, [pc, #280]	@ (8107030 <TIM_Base_SetConfig+0x12c>)
 8106f18:	4293      	cmp	r3, r2
 8106f1a:	d013      	beq.n	8106f44 <TIM_Base_SetConfig+0x40>
 8106f1c:	687b      	ldr	r3, [r7, #4]
 8106f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106f22:	d00f      	beq.n	8106f44 <TIM_Base_SetConfig+0x40>
 8106f24:	687b      	ldr	r3, [r7, #4]
 8106f26:	4a43      	ldr	r2, [pc, #268]	@ (8107034 <TIM_Base_SetConfig+0x130>)
 8106f28:	4293      	cmp	r3, r2
 8106f2a:	d00b      	beq.n	8106f44 <TIM_Base_SetConfig+0x40>
 8106f2c:	687b      	ldr	r3, [r7, #4]
 8106f2e:	4a42      	ldr	r2, [pc, #264]	@ (8107038 <TIM_Base_SetConfig+0x134>)
 8106f30:	4293      	cmp	r3, r2
 8106f32:	d007      	beq.n	8106f44 <TIM_Base_SetConfig+0x40>
 8106f34:	687b      	ldr	r3, [r7, #4]
 8106f36:	4a41      	ldr	r2, [pc, #260]	@ (810703c <TIM_Base_SetConfig+0x138>)
 8106f38:	4293      	cmp	r3, r2
 8106f3a:	d003      	beq.n	8106f44 <TIM_Base_SetConfig+0x40>
 8106f3c:	687b      	ldr	r3, [r7, #4]
 8106f3e:	4a40      	ldr	r2, [pc, #256]	@ (8107040 <TIM_Base_SetConfig+0x13c>)
 8106f40:	4293      	cmp	r3, r2
 8106f42:	d108      	bne.n	8106f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106f44:	68fb      	ldr	r3, [r7, #12]
 8106f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8106f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8106f4c:	683b      	ldr	r3, [r7, #0]
 8106f4e:	685b      	ldr	r3, [r3, #4]
 8106f50:	68fa      	ldr	r2, [r7, #12]
 8106f52:	4313      	orrs	r3, r2
 8106f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8106f56:	687b      	ldr	r3, [r7, #4]
 8106f58:	4a35      	ldr	r2, [pc, #212]	@ (8107030 <TIM_Base_SetConfig+0x12c>)
 8106f5a:	4293      	cmp	r3, r2
 8106f5c:	d01f      	beq.n	8106f9e <TIM_Base_SetConfig+0x9a>
 8106f5e:	687b      	ldr	r3, [r7, #4]
 8106f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106f64:	d01b      	beq.n	8106f9e <TIM_Base_SetConfig+0x9a>
 8106f66:	687b      	ldr	r3, [r7, #4]
 8106f68:	4a32      	ldr	r2, [pc, #200]	@ (8107034 <TIM_Base_SetConfig+0x130>)
 8106f6a:	4293      	cmp	r3, r2
 8106f6c:	d017      	beq.n	8106f9e <TIM_Base_SetConfig+0x9a>
 8106f6e:	687b      	ldr	r3, [r7, #4]
 8106f70:	4a31      	ldr	r2, [pc, #196]	@ (8107038 <TIM_Base_SetConfig+0x134>)
 8106f72:	4293      	cmp	r3, r2
 8106f74:	d013      	beq.n	8106f9e <TIM_Base_SetConfig+0x9a>
 8106f76:	687b      	ldr	r3, [r7, #4]
 8106f78:	4a30      	ldr	r2, [pc, #192]	@ (810703c <TIM_Base_SetConfig+0x138>)
 8106f7a:	4293      	cmp	r3, r2
 8106f7c:	d00f      	beq.n	8106f9e <TIM_Base_SetConfig+0x9a>
 8106f7e:	687b      	ldr	r3, [r7, #4]
 8106f80:	4a2f      	ldr	r2, [pc, #188]	@ (8107040 <TIM_Base_SetConfig+0x13c>)
 8106f82:	4293      	cmp	r3, r2
 8106f84:	d00b      	beq.n	8106f9e <TIM_Base_SetConfig+0x9a>
 8106f86:	687b      	ldr	r3, [r7, #4]
 8106f88:	4a2e      	ldr	r2, [pc, #184]	@ (8107044 <TIM_Base_SetConfig+0x140>)
 8106f8a:	4293      	cmp	r3, r2
 8106f8c:	d007      	beq.n	8106f9e <TIM_Base_SetConfig+0x9a>
 8106f8e:	687b      	ldr	r3, [r7, #4]
 8106f90:	4a2d      	ldr	r2, [pc, #180]	@ (8107048 <TIM_Base_SetConfig+0x144>)
 8106f92:	4293      	cmp	r3, r2
 8106f94:	d003      	beq.n	8106f9e <TIM_Base_SetConfig+0x9a>
 8106f96:	687b      	ldr	r3, [r7, #4]
 8106f98:	4a2c      	ldr	r2, [pc, #176]	@ (810704c <TIM_Base_SetConfig+0x148>)
 8106f9a:	4293      	cmp	r3, r2
 8106f9c:	d108      	bne.n	8106fb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8106f9e:	68fb      	ldr	r3, [r7, #12]
 8106fa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8106fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106fa6:	683b      	ldr	r3, [r7, #0]
 8106fa8:	68db      	ldr	r3, [r3, #12]
 8106faa:	68fa      	ldr	r2, [r7, #12]
 8106fac:	4313      	orrs	r3, r2
 8106fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106fb0:	68fb      	ldr	r3, [r7, #12]
 8106fb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8106fb6:	683b      	ldr	r3, [r7, #0]
 8106fb8:	695b      	ldr	r3, [r3, #20]
 8106fba:	4313      	orrs	r3, r2
 8106fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8106fbe:	687b      	ldr	r3, [r7, #4]
 8106fc0:	68fa      	ldr	r2, [r7, #12]
 8106fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106fc4:	683b      	ldr	r3, [r7, #0]
 8106fc6:	689a      	ldr	r2, [r3, #8]
 8106fc8:	687b      	ldr	r3, [r7, #4]
 8106fca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8106fcc:	683b      	ldr	r3, [r7, #0]
 8106fce:	681a      	ldr	r2, [r3, #0]
 8106fd0:	687b      	ldr	r3, [r7, #4]
 8106fd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8106fd4:	687b      	ldr	r3, [r7, #4]
 8106fd6:	4a16      	ldr	r2, [pc, #88]	@ (8107030 <TIM_Base_SetConfig+0x12c>)
 8106fd8:	4293      	cmp	r3, r2
 8106fda:	d00f      	beq.n	8106ffc <TIM_Base_SetConfig+0xf8>
 8106fdc:	687b      	ldr	r3, [r7, #4]
 8106fde:	4a18      	ldr	r2, [pc, #96]	@ (8107040 <TIM_Base_SetConfig+0x13c>)
 8106fe0:	4293      	cmp	r3, r2
 8106fe2:	d00b      	beq.n	8106ffc <TIM_Base_SetConfig+0xf8>
 8106fe4:	687b      	ldr	r3, [r7, #4]
 8106fe6:	4a17      	ldr	r2, [pc, #92]	@ (8107044 <TIM_Base_SetConfig+0x140>)
 8106fe8:	4293      	cmp	r3, r2
 8106fea:	d007      	beq.n	8106ffc <TIM_Base_SetConfig+0xf8>
 8106fec:	687b      	ldr	r3, [r7, #4]
 8106fee:	4a16      	ldr	r2, [pc, #88]	@ (8107048 <TIM_Base_SetConfig+0x144>)
 8106ff0:	4293      	cmp	r3, r2
 8106ff2:	d003      	beq.n	8106ffc <TIM_Base_SetConfig+0xf8>
 8106ff4:	687b      	ldr	r3, [r7, #4]
 8106ff6:	4a15      	ldr	r2, [pc, #84]	@ (810704c <TIM_Base_SetConfig+0x148>)
 8106ff8:	4293      	cmp	r3, r2
 8106ffa:	d103      	bne.n	8107004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8106ffc:	683b      	ldr	r3, [r7, #0]
 8106ffe:	691a      	ldr	r2, [r3, #16]
 8107000:	687b      	ldr	r3, [r7, #4]
 8107002:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107004:	687b      	ldr	r3, [r7, #4]
 8107006:	2201      	movs	r2, #1
 8107008:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810700a:	687b      	ldr	r3, [r7, #4]
 810700c:	691b      	ldr	r3, [r3, #16]
 810700e:	f003 0301 	and.w	r3, r3, #1
 8107012:	2b01      	cmp	r3, #1
 8107014:	d105      	bne.n	8107022 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8107016:	687b      	ldr	r3, [r7, #4]
 8107018:	691b      	ldr	r3, [r3, #16]
 810701a:	f023 0201 	bic.w	r2, r3, #1
 810701e:	687b      	ldr	r3, [r7, #4]
 8107020:	611a      	str	r2, [r3, #16]
  }
}
 8107022:	bf00      	nop
 8107024:	3714      	adds	r7, #20
 8107026:	46bd      	mov	sp, r7
 8107028:	f85d 7b04 	ldr.w	r7, [sp], #4
 810702c:	4770      	bx	lr
 810702e:	bf00      	nop
 8107030:	40010000 	.word	0x40010000
 8107034:	40000400 	.word	0x40000400
 8107038:	40000800 	.word	0x40000800
 810703c:	40000c00 	.word	0x40000c00
 8107040:	40010400 	.word	0x40010400
 8107044:	40014000 	.word	0x40014000
 8107048:	40014400 	.word	0x40014400
 810704c:	40014800 	.word	0x40014800

08107050 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8107050:	b480      	push	{r7}
 8107052:	b083      	sub	sp, #12
 8107054:	af00      	add	r7, sp, #0
 8107056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8107058:	bf00      	nop
 810705a:	370c      	adds	r7, #12
 810705c:	46bd      	mov	sp, r7
 810705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107062:	4770      	bx	lr

08107064 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8107064:	b480      	push	{r7}
 8107066:	b083      	sub	sp, #12
 8107068:	af00      	add	r7, sp, #0
 810706a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810706c:	bf00      	nop
 810706e:	370c      	adds	r7, #12
 8107070:	46bd      	mov	sp, r7
 8107072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107076:	4770      	bx	lr

08107078 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8107078:	b480      	push	{r7}
 810707a:	b083      	sub	sp, #12
 810707c:	af00      	add	r7, sp, #0
 810707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8107080:	bf00      	nop
 8107082:	370c      	adds	r7, #12
 8107084:	46bd      	mov	sp, r7
 8107086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810708a:	4770      	bx	lr

0810708c <__NVIC_SetPriority>:
{
 810708c:	b480      	push	{r7}
 810708e:	b083      	sub	sp, #12
 8107090:	af00      	add	r7, sp, #0
 8107092:	4603      	mov	r3, r0
 8107094:	6039      	str	r1, [r7, #0]
 8107096:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8107098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810709c:	2b00      	cmp	r3, #0
 810709e:	db0a      	blt.n	81070b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81070a0:	683b      	ldr	r3, [r7, #0]
 81070a2:	b2da      	uxtb	r2, r3
 81070a4:	490c      	ldr	r1, [pc, #48]	@ (81070d8 <__NVIC_SetPriority+0x4c>)
 81070a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81070aa:	0112      	lsls	r2, r2, #4
 81070ac:	b2d2      	uxtb	r2, r2
 81070ae:	440b      	add	r3, r1
 81070b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 81070b4:	e00a      	b.n	81070cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81070b6:	683b      	ldr	r3, [r7, #0]
 81070b8:	b2da      	uxtb	r2, r3
 81070ba:	4908      	ldr	r1, [pc, #32]	@ (81070dc <__NVIC_SetPriority+0x50>)
 81070bc:	88fb      	ldrh	r3, [r7, #6]
 81070be:	f003 030f 	and.w	r3, r3, #15
 81070c2:	3b04      	subs	r3, #4
 81070c4:	0112      	lsls	r2, r2, #4
 81070c6:	b2d2      	uxtb	r2, r2
 81070c8:	440b      	add	r3, r1
 81070ca:	761a      	strb	r2, [r3, #24]
}
 81070cc:	bf00      	nop
 81070ce:	370c      	adds	r7, #12
 81070d0:	46bd      	mov	sp, r7
 81070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070d6:	4770      	bx	lr
 81070d8:	e000e100 	.word	0xe000e100
 81070dc:	e000ed00 	.word	0xe000ed00

081070e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 81070e0:	b580      	push	{r7, lr}
 81070e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 81070e4:	4b05      	ldr	r3, [pc, #20]	@ (81070fc <SysTick_Handler+0x1c>)
 81070e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 81070e8:	f003 fbb0 	bl	810a84c <xTaskGetSchedulerState>
 81070ec:	4603      	mov	r3, r0
 81070ee:	2b01      	cmp	r3, #1
 81070f0:	d001      	beq.n	81070f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 81070f2:	f001 f921 	bl	8108338 <xPortSysTickHandler>
  }
}
 81070f6:	bf00      	nop
 81070f8:	bd80      	pop	{r7, pc}
 81070fa:	bf00      	nop
 81070fc:	e000e010 	.word	0xe000e010

08107100 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8107100:	b580      	push	{r7, lr}
 8107102:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8107104:	2100      	movs	r1, #0
 8107106:	f06f 0004 	mvn.w	r0, #4
 810710a:	f7ff ffbf 	bl	810708c <__NVIC_SetPriority>
#endif
}
 810710e:	bf00      	nop
 8107110:	bd80      	pop	{r7, pc}
	...

08107114 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8107114:	b480      	push	{r7}
 8107116:	b083      	sub	sp, #12
 8107118:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810711a:	f3ef 8305 	mrs	r3, IPSR
 810711e:	603b      	str	r3, [r7, #0]
  return(result);
 8107120:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8107122:	2b00      	cmp	r3, #0
 8107124:	d003      	beq.n	810712e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8107126:	f06f 0305 	mvn.w	r3, #5
 810712a:	607b      	str	r3, [r7, #4]
 810712c:	e00c      	b.n	8107148 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810712e:	4b0a      	ldr	r3, [pc, #40]	@ (8107158 <osKernelInitialize+0x44>)
 8107130:	681b      	ldr	r3, [r3, #0]
 8107132:	2b00      	cmp	r3, #0
 8107134:	d105      	bne.n	8107142 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8107136:	4b08      	ldr	r3, [pc, #32]	@ (8107158 <osKernelInitialize+0x44>)
 8107138:	2201      	movs	r2, #1
 810713a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810713c:	2300      	movs	r3, #0
 810713e:	607b      	str	r3, [r7, #4]
 8107140:	e002      	b.n	8107148 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8107142:	f04f 33ff 	mov.w	r3, #4294967295
 8107146:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8107148:	687b      	ldr	r3, [r7, #4]
}
 810714a:	4618      	mov	r0, r3
 810714c:	370c      	adds	r7, #12
 810714e:	46bd      	mov	sp, r7
 8107150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107154:	4770      	bx	lr
 8107156:	bf00      	nop
 8107158:	100002a0 	.word	0x100002a0

0810715c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810715c:	b580      	push	{r7, lr}
 810715e:	b082      	sub	sp, #8
 8107160:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8107162:	f3ef 8305 	mrs	r3, IPSR
 8107166:	603b      	str	r3, [r7, #0]
  return(result);
 8107168:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810716a:	2b00      	cmp	r3, #0
 810716c:	d003      	beq.n	8107176 <osKernelStart+0x1a>
    stat = osErrorISR;
 810716e:	f06f 0305 	mvn.w	r3, #5
 8107172:	607b      	str	r3, [r7, #4]
 8107174:	e010      	b.n	8107198 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8107176:	4b0b      	ldr	r3, [pc, #44]	@ (81071a4 <osKernelStart+0x48>)
 8107178:	681b      	ldr	r3, [r3, #0]
 810717a:	2b01      	cmp	r3, #1
 810717c:	d109      	bne.n	8107192 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810717e:	f7ff ffbf 	bl	8107100 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8107182:	4b08      	ldr	r3, [pc, #32]	@ (81071a4 <osKernelStart+0x48>)
 8107184:	2202      	movs	r2, #2
 8107186:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8107188:	f002 feda 	bl	8109f40 <vTaskStartScheduler>
      stat = osOK;
 810718c:	2300      	movs	r3, #0
 810718e:	607b      	str	r3, [r7, #4]
 8107190:	e002      	b.n	8107198 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8107192:	f04f 33ff 	mov.w	r3, #4294967295
 8107196:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8107198:	687b      	ldr	r3, [r7, #4]
}
 810719a:	4618      	mov	r0, r3
 810719c:	3708      	adds	r7, #8
 810719e:	46bd      	mov	sp, r7
 81071a0:	bd80      	pop	{r7, pc}
 81071a2:	bf00      	nop
 81071a4:	100002a0 	.word	0x100002a0

081071a8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 81071a8:	b580      	push	{r7, lr}
 81071aa:	b082      	sub	sp, #8
 81071ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81071ae:	f3ef 8305 	mrs	r3, IPSR
 81071b2:	603b      	str	r3, [r7, #0]
  return(result);
 81071b4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 81071b6:	2b00      	cmp	r3, #0
 81071b8:	d003      	beq.n	81071c2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 81071ba:	f002 ffed 	bl	810a198 <xTaskGetTickCountFromISR>
 81071be:	6078      	str	r0, [r7, #4]
 81071c0:	e002      	b.n	81071c8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 81071c2:	f002 ffd9 	bl	810a178 <xTaskGetTickCount>
 81071c6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 81071c8:	687b      	ldr	r3, [r7, #4]
}
 81071ca:	4618      	mov	r0, r3
 81071cc:	3708      	adds	r7, #8
 81071ce:	46bd      	mov	sp, r7
 81071d0:	bd80      	pop	{r7, pc}

081071d2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 81071d2:	b580      	push	{r7, lr}
 81071d4:	b08e      	sub	sp, #56	@ 0x38
 81071d6:	af04      	add	r7, sp, #16
 81071d8:	60f8      	str	r0, [r7, #12]
 81071da:	60b9      	str	r1, [r7, #8]
 81071dc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81071de:	2300      	movs	r3, #0
 81071e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81071e2:	f3ef 8305 	mrs	r3, IPSR
 81071e6:	617b      	str	r3, [r7, #20]
  return(result);
 81071e8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 81071ea:	2b00      	cmp	r3, #0
 81071ec:	d17e      	bne.n	81072ec <osThreadNew+0x11a>
 81071ee:	68fb      	ldr	r3, [r7, #12]
 81071f0:	2b00      	cmp	r3, #0
 81071f2:	d07b      	beq.n	81072ec <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 81071f4:	2380      	movs	r3, #128	@ 0x80
 81071f6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 81071f8:	2318      	movs	r3, #24
 81071fa:	61fb      	str	r3, [r7, #28]

    name = NULL;
 81071fc:	2300      	movs	r3, #0
 81071fe:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8107200:	f04f 33ff 	mov.w	r3, #4294967295
 8107204:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8107206:	687b      	ldr	r3, [r7, #4]
 8107208:	2b00      	cmp	r3, #0
 810720a:	d045      	beq.n	8107298 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810720c:	687b      	ldr	r3, [r7, #4]
 810720e:	681b      	ldr	r3, [r3, #0]
 8107210:	2b00      	cmp	r3, #0
 8107212:	d002      	beq.n	810721a <osThreadNew+0x48>
        name = attr->name;
 8107214:	687b      	ldr	r3, [r7, #4]
 8107216:	681b      	ldr	r3, [r3, #0]
 8107218:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810721a:	687b      	ldr	r3, [r7, #4]
 810721c:	699b      	ldr	r3, [r3, #24]
 810721e:	2b00      	cmp	r3, #0
 8107220:	d002      	beq.n	8107228 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8107222:	687b      	ldr	r3, [r7, #4]
 8107224:	699b      	ldr	r3, [r3, #24]
 8107226:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8107228:	69fb      	ldr	r3, [r7, #28]
 810722a:	2b00      	cmp	r3, #0
 810722c:	d008      	beq.n	8107240 <osThreadNew+0x6e>
 810722e:	69fb      	ldr	r3, [r7, #28]
 8107230:	2b38      	cmp	r3, #56	@ 0x38
 8107232:	d805      	bhi.n	8107240 <osThreadNew+0x6e>
 8107234:	687b      	ldr	r3, [r7, #4]
 8107236:	685b      	ldr	r3, [r3, #4]
 8107238:	f003 0301 	and.w	r3, r3, #1
 810723c:	2b00      	cmp	r3, #0
 810723e:	d001      	beq.n	8107244 <osThreadNew+0x72>
        return (NULL);
 8107240:	2300      	movs	r3, #0
 8107242:	e054      	b.n	81072ee <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8107244:	687b      	ldr	r3, [r7, #4]
 8107246:	695b      	ldr	r3, [r3, #20]
 8107248:	2b00      	cmp	r3, #0
 810724a:	d003      	beq.n	8107254 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810724c:	687b      	ldr	r3, [r7, #4]
 810724e:	695b      	ldr	r3, [r3, #20]
 8107250:	089b      	lsrs	r3, r3, #2
 8107252:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8107254:	687b      	ldr	r3, [r7, #4]
 8107256:	689b      	ldr	r3, [r3, #8]
 8107258:	2b00      	cmp	r3, #0
 810725a:	d00e      	beq.n	810727a <osThreadNew+0xa8>
 810725c:	687b      	ldr	r3, [r7, #4]
 810725e:	68db      	ldr	r3, [r3, #12]
 8107260:	2ba7      	cmp	r3, #167	@ 0xa7
 8107262:	d90a      	bls.n	810727a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8107264:	687b      	ldr	r3, [r7, #4]
 8107266:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8107268:	2b00      	cmp	r3, #0
 810726a:	d006      	beq.n	810727a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810726c:	687b      	ldr	r3, [r7, #4]
 810726e:	695b      	ldr	r3, [r3, #20]
 8107270:	2b00      	cmp	r3, #0
 8107272:	d002      	beq.n	810727a <osThreadNew+0xa8>
        mem = 1;
 8107274:	2301      	movs	r3, #1
 8107276:	61bb      	str	r3, [r7, #24]
 8107278:	e010      	b.n	810729c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810727a:	687b      	ldr	r3, [r7, #4]
 810727c:	689b      	ldr	r3, [r3, #8]
 810727e:	2b00      	cmp	r3, #0
 8107280:	d10c      	bne.n	810729c <osThreadNew+0xca>
 8107282:	687b      	ldr	r3, [r7, #4]
 8107284:	68db      	ldr	r3, [r3, #12]
 8107286:	2b00      	cmp	r3, #0
 8107288:	d108      	bne.n	810729c <osThreadNew+0xca>
 810728a:	687b      	ldr	r3, [r7, #4]
 810728c:	691b      	ldr	r3, [r3, #16]
 810728e:	2b00      	cmp	r3, #0
 8107290:	d104      	bne.n	810729c <osThreadNew+0xca>
          mem = 0;
 8107292:	2300      	movs	r3, #0
 8107294:	61bb      	str	r3, [r7, #24]
 8107296:	e001      	b.n	810729c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8107298:	2300      	movs	r3, #0
 810729a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810729c:	69bb      	ldr	r3, [r7, #24]
 810729e:	2b01      	cmp	r3, #1
 81072a0:	d110      	bne.n	81072c4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81072a2:	687b      	ldr	r3, [r7, #4]
 81072a4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 81072a6:	687a      	ldr	r2, [r7, #4]
 81072a8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81072aa:	9202      	str	r2, [sp, #8]
 81072ac:	9301      	str	r3, [sp, #4]
 81072ae:	69fb      	ldr	r3, [r7, #28]
 81072b0:	9300      	str	r3, [sp, #0]
 81072b2:	68bb      	ldr	r3, [r7, #8]
 81072b4:	6a3a      	ldr	r2, [r7, #32]
 81072b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81072b8:	68f8      	ldr	r0, [r7, #12]
 81072ba:	f002 fc4d 	bl	8109b58 <xTaskCreateStatic>
 81072be:	4603      	mov	r3, r0
 81072c0:	613b      	str	r3, [r7, #16]
 81072c2:	e013      	b.n	81072ec <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 81072c4:	69bb      	ldr	r3, [r7, #24]
 81072c6:	2b00      	cmp	r3, #0
 81072c8:	d110      	bne.n	81072ec <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81072ca:	6a3b      	ldr	r3, [r7, #32]
 81072cc:	b29a      	uxth	r2, r3
 81072ce:	f107 0310 	add.w	r3, r7, #16
 81072d2:	9301      	str	r3, [sp, #4]
 81072d4:	69fb      	ldr	r3, [r7, #28]
 81072d6:	9300      	str	r3, [sp, #0]
 81072d8:	68bb      	ldr	r3, [r7, #8]
 81072da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81072dc:	68f8      	ldr	r0, [r7, #12]
 81072de:	f002 fc9b 	bl	8109c18 <xTaskCreate>
 81072e2:	4603      	mov	r3, r0
 81072e4:	2b01      	cmp	r3, #1
 81072e6:	d001      	beq.n	81072ec <osThreadNew+0x11a>
            hTask = NULL;
 81072e8:	2300      	movs	r3, #0
 81072ea:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 81072ec:	693b      	ldr	r3, [r7, #16]
}
 81072ee:	4618      	mov	r0, r3
 81072f0:	3728      	adds	r7, #40	@ 0x28
 81072f2:	46bd      	mov	sp, r7
 81072f4:	bd80      	pop	{r7, pc}

081072f6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 81072f6:	b580      	push	{r7, lr}
 81072f8:	b084      	sub	sp, #16
 81072fa:	af00      	add	r7, sp, #0
 81072fc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81072fe:	f3ef 8305 	mrs	r3, IPSR
 8107302:	60bb      	str	r3, [r7, #8]
  return(result);
 8107304:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8107306:	2b00      	cmp	r3, #0
 8107308:	d003      	beq.n	8107312 <osDelay+0x1c>
    stat = osErrorISR;
 810730a:	f06f 0305 	mvn.w	r3, #5
 810730e:	60fb      	str	r3, [r7, #12]
 8107310:	e007      	b.n	8107322 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8107312:	2300      	movs	r3, #0
 8107314:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8107316:	687b      	ldr	r3, [r7, #4]
 8107318:	2b00      	cmp	r3, #0
 810731a:	d002      	beq.n	8107322 <osDelay+0x2c>
      vTaskDelay(ticks);
 810731c:	6878      	ldr	r0, [r7, #4]
 810731e:	f002 fdd9 	bl	8109ed4 <vTaskDelay>
    }
  }

  return (stat);
 8107322:	68fb      	ldr	r3, [r7, #12]
}
 8107324:	4618      	mov	r0, r3
 8107326:	3710      	adds	r7, #16
 8107328:	46bd      	mov	sp, r7
 810732a:	bd80      	pop	{r7, pc}

0810732c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 810732c:	b580      	push	{r7, lr}
 810732e:	b088      	sub	sp, #32
 8107330:	af00      	add	r7, sp, #0
 8107332:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8107334:	2300      	movs	r3, #0
 8107336:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8107338:	f3ef 8305 	mrs	r3, IPSR
 810733c:	60bb      	str	r3, [r7, #8]
  return(result);
 810733e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8107340:	2b00      	cmp	r3, #0
 8107342:	d174      	bne.n	810742e <osMutexNew+0x102>
    if (attr != NULL) {
 8107344:	687b      	ldr	r3, [r7, #4]
 8107346:	2b00      	cmp	r3, #0
 8107348:	d003      	beq.n	8107352 <osMutexNew+0x26>
      type = attr->attr_bits;
 810734a:	687b      	ldr	r3, [r7, #4]
 810734c:	685b      	ldr	r3, [r3, #4]
 810734e:	61bb      	str	r3, [r7, #24]
 8107350:	e001      	b.n	8107356 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8107352:	2300      	movs	r3, #0
 8107354:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8107356:	69bb      	ldr	r3, [r7, #24]
 8107358:	f003 0301 	and.w	r3, r3, #1
 810735c:	2b00      	cmp	r3, #0
 810735e:	d002      	beq.n	8107366 <osMutexNew+0x3a>
      rmtx = 1U;
 8107360:	2301      	movs	r3, #1
 8107362:	617b      	str	r3, [r7, #20]
 8107364:	e001      	b.n	810736a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8107366:	2300      	movs	r3, #0
 8107368:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 810736a:	69bb      	ldr	r3, [r7, #24]
 810736c:	f003 0308 	and.w	r3, r3, #8
 8107370:	2b00      	cmp	r3, #0
 8107372:	d15c      	bne.n	810742e <osMutexNew+0x102>
      mem = -1;
 8107374:	f04f 33ff 	mov.w	r3, #4294967295
 8107378:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 810737a:	687b      	ldr	r3, [r7, #4]
 810737c:	2b00      	cmp	r3, #0
 810737e:	d015      	beq.n	81073ac <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8107380:	687b      	ldr	r3, [r7, #4]
 8107382:	689b      	ldr	r3, [r3, #8]
 8107384:	2b00      	cmp	r3, #0
 8107386:	d006      	beq.n	8107396 <osMutexNew+0x6a>
 8107388:	687b      	ldr	r3, [r7, #4]
 810738a:	68db      	ldr	r3, [r3, #12]
 810738c:	2b4f      	cmp	r3, #79	@ 0x4f
 810738e:	d902      	bls.n	8107396 <osMutexNew+0x6a>
          mem = 1;
 8107390:	2301      	movs	r3, #1
 8107392:	613b      	str	r3, [r7, #16]
 8107394:	e00c      	b.n	81073b0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8107396:	687b      	ldr	r3, [r7, #4]
 8107398:	689b      	ldr	r3, [r3, #8]
 810739a:	2b00      	cmp	r3, #0
 810739c:	d108      	bne.n	81073b0 <osMutexNew+0x84>
 810739e:	687b      	ldr	r3, [r7, #4]
 81073a0:	68db      	ldr	r3, [r3, #12]
 81073a2:	2b00      	cmp	r3, #0
 81073a4:	d104      	bne.n	81073b0 <osMutexNew+0x84>
            mem = 0;
 81073a6:	2300      	movs	r3, #0
 81073a8:	613b      	str	r3, [r7, #16]
 81073aa:	e001      	b.n	81073b0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 81073ac:	2300      	movs	r3, #0
 81073ae:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 81073b0:	693b      	ldr	r3, [r7, #16]
 81073b2:	2b01      	cmp	r3, #1
 81073b4:	d112      	bne.n	81073dc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 81073b6:	697b      	ldr	r3, [r7, #20]
 81073b8:	2b00      	cmp	r3, #0
 81073ba:	d007      	beq.n	81073cc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 81073bc:	687b      	ldr	r3, [r7, #4]
 81073be:	689b      	ldr	r3, [r3, #8]
 81073c0:	4619      	mov	r1, r3
 81073c2:	2004      	movs	r0, #4
 81073c4:	f001 f9c1 	bl	810874a <xQueueCreateMutexStatic>
 81073c8:	61f8      	str	r0, [r7, #28]
 81073ca:	e016      	b.n	81073fa <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 81073cc:	687b      	ldr	r3, [r7, #4]
 81073ce:	689b      	ldr	r3, [r3, #8]
 81073d0:	4619      	mov	r1, r3
 81073d2:	2001      	movs	r0, #1
 81073d4:	f001 f9b9 	bl	810874a <xQueueCreateMutexStatic>
 81073d8:	61f8      	str	r0, [r7, #28]
 81073da:	e00e      	b.n	81073fa <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 81073dc:	693b      	ldr	r3, [r7, #16]
 81073de:	2b00      	cmp	r3, #0
 81073e0:	d10b      	bne.n	81073fa <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 81073e2:	697b      	ldr	r3, [r7, #20]
 81073e4:	2b00      	cmp	r3, #0
 81073e6:	d004      	beq.n	81073f2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 81073e8:	2004      	movs	r0, #4
 81073ea:	f001 f996 	bl	810871a <xQueueCreateMutex>
 81073ee:	61f8      	str	r0, [r7, #28]
 81073f0:	e003      	b.n	81073fa <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 81073f2:	2001      	movs	r0, #1
 81073f4:	f001 f991 	bl	810871a <xQueueCreateMutex>
 81073f8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 81073fa:	69fb      	ldr	r3, [r7, #28]
 81073fc:	2b00      	cmp	r3, #0
 81073fe:	d00c      	beq.n	810741a <osMutexNew+0xee>
        if (attr != NULL) {
 8107400:	687b      	ldr	r3, [r7, #4]
 8107402:	2b00      	cmp	r3, #0
 8107404:	d003      	beq.n	810740e <osMutexNew+0xe2>
          name = attr->name;
 8107406:	687b      	ldr	r3, [r7, #4]
 8107408:	681b      	ldr	r3, [r3, #0]
 810740a:	60fb      	str	r3, [r7, #12]
 810740c:	e001      	b.n	8107412 <osMutexNew+0xe6>
        } else {
          name = NULL;
 810740e:	2300      	movs	r3, #0
 8107410:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8107412:	68f9      	ldr	r1, [r7, #12]
 8107414:	69f8      	ldr	r0, [r7, #28]
 8107416:	f002 f87d 	bl	8109514 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 810741a:	69fb      	ldr	r3, [r7, #28]
 810741c:	2b00      	cmp	r3, #0
 810741e:	d006      	beq.n	810742e <osMutexNew+0x102>
 8107420:	697b      	ldr	r3, [r7, #20]
 8107422:	2b00      	cmp	r3, #0
 8107424:	d003      	beq.n	810742e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8107426:	69fb      	ldr	r3, [r7, #28]
 8107428:	f043 0301 	orr.w	r3, r3, #1
 810742c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 810742e:	69fb      	ldr	r3, [r7, #28]
}
 8107430:	4618      	mov	r0, r3
 8107432:	3720      	adds	r7, #32
 8107434:	46bd      	mov	sp, r7
 8107436:	bd80      	pop	{r7, pc}

08107438 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8107438:	b580      	push	{r7, lr}
 810743a:	b086      	sub	sp, #24
 810743c:	af00      	add	r7, sp, #0
 810743e:	6078      	str	r0, [r7, #4]
 8107440:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8107442:	687b      	ldr	r3, [r7, #4]
 8107444:	f023 0301 	bic.w	r3, r3, #1
 8107448:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 810744a:	687b      	ldr	r3, [r7, #4]
 810744c:	f003 0301 	and.w	r3, r3, #1
 8107450:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8107452:	2300      	movs	r3, #0
 8107454:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8107456:	f3ef 8305 	mrs	r3, IPSR
 810745a:	60bb      	str	r3, [r7, #8]
  return(result);
 810745c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 810745e:	2b00      	cmp	r3, #0
 8107460:	d003      	beq.n	810746a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8107462:	f06f 0305 	mvn.w	r3, #5
 8107466:	617b      	str	r3, [r7, #20]
 8107468:	e02c      	b.n	81074c4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 810746a:	693b      	ldr	r3, [r7, #16]
 810746c:	2b00      	cmp	r3, #0
 810746e:	d103      	bne.n	8107478 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8107470:	f06f 0303 	mvn.w	r3, #3
 8107474:	617b      	str	r3, [r7, #20]
 8107476:	e025      	b.n	81074c4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8107478:	68fb      	ldr	r3, [r7, #12]
 810747a:	2b00      	cmp	r3, #0
 810747c:	d011      	beq.n	81074a2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 810747e:	6839      	ldr	r1, [r7, #0]
 8107480:	6938      	ldr	r0, [r7, #16]
 8107482:	f001 f9b2 	bl	81087ea <xQueueTakeMutexRecursive>
 8107486:	4603      	mov	r3, r0
 8107488:	2b01      	cmp	r3, #1
 810748a:	d01b      	beq.n	81074c4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 810748c:	683b      	ldr	r3, [r7, #0]
 810748e:	2b00      	cmp	r3, #0
 8107490:	d003      	beq.n	810749a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8107492:	f06f 0301 	mvn.w	r3, #1
 8107496:	617b      	str	r3, [r7, #20]
 8107498:	e014      	b.n	81074c4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 810749a:	f06f 0302 	mvn.w	r3, #2
 810749e:	617b      	str	r3, [r7, #20]
 81074a0:	e010      	b.n	81074c4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 81074a2:	6839      	ldr	r1, [r7, #0]
 81074a4:	6938      	ldr	r0, [r7, #16]
 81074a6:	f001 fd57 	bl	8108f58 <xQueueSemaphoreTake>
 81074aa:	4603      	mov	r3, r0
 81074ac:	2b01      	cmp	r3, #1
 81074ae:	d009      	beq.n	81074c4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 81074b0:	683b      	ldr	r3, [r7, #0]
 81074b2:	2b00      	cmp	r3, #0
 81074b4:	d003      	beq.n	81074be <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 81074b6:	f06f 0301 	mvn.w	r3, #1
 81074ba:	617b      	str	r3, [r7, #20]
 81074bc:	e002      	b.n	81074c4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 81074be:	f06f 0302 	mvn.w	r3, #2
 81074c2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 81074c4:	697b      	ldr	r3, [r7, #20]
}
 81074c6:	4618      	mov	r0, r3
 81074c8:	3718      	adds	r7, #24
 81074ca:	46bd      	mov	sp, r7
 81074cc:	bd80      	pop	{r7, pc}

081074ce <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 81074ce:	b580      	push	{r7, lr}
 81074d0:	b086      	sub	sp, #24
 81074d2:	af00      	add	r7, sp, #0
 81074d4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 81074d6:	687b      	ldr	r3, [r7, #4]
 81074d8:	f023 0301 	bic.w	r3, r3, #1
 81074dc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 81074de:	687b      	ldr	r3, [r7, #4]
 81074e0:	f003 0301 	and.w	r3, r3, #1
 81074e4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 81074e6:	2300      	movs	r3, #0
 81074e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81074ea:	f3ef 8305 	mrs	r3, IPSR
 81074ee:	60bb      	str	r3, [r7, #8]
  return(result);
 81074f0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 81074f2:	2b00      	cmp	r3, #0
 81074f4:	d003      	beq.n	81074fe <osMutexRelease+0x30>
    stat = osErrorISR;
 81074f6:	f06f 0305 	mvn.w	r3, #5
 81074fa:	617b      	str	r3, [r7, #20]
 81074fc:	e01f      	b.n	810753e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 81074fe:	693b      	ldr	r3, [r7, #16]
 8107500:	2b00      	cmp	r3, #0
 8107502:	d103      	bne.n	810750c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8107504:	f06f 0303 	mvn.w	r3, #3
 8107508:	617b      	str	r3, [r7, #20]
 810750a:	e018      	b.n	810753e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 810750c:	68fb      	ldr	r3, [r7, #12]
 810750e:	2b00      	cmp	r3, #0
 8107510:	d009      	beq.n	8107526 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8107512:	6938      	ldr	r0, [r7, #16]
 8107514:	f001 f934 	bl	8108780 <xQueueGiveMutexRecursive>
 8107518:	4603      	mov	r3, r0
 810751a:	2b01      	cmp	r3, #1
 810751c:	d00f      	beq.n	810753e <osMutexRelease+0x70>
        stat = osErrorResource;
 810751e:	f06f 0302 	mvn.w	r3, #2
 8107522:	617b      	str	r3, [r7, #20]
 8107524:	e00b      	b.n	810753e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8107526:	2300      	movs	r3, #0
 8107528:	2200      	movs	r2, #0
 810752a:	2100      	movs	r1, #0
 810752c:	6938      	ldr	r0, [r7, #16]
 810752e:	f001 fa01 	bl	8108934 <xQueueGenericSend>
 8107532:	4603      	mov	r3, r0
 8107534:	2b01      	cmp	r3, #1
 8107536:	d002      	beq.n	810753e <osMutexRelease+0x70>
        stat = osErrorResource;
 8107538:	f06f 0302 	mvn.w	r3, #2
 810753c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 810753e:	697b      	ldr	r3, [r7, #20]
}
 8107540:	4618      	mov	r0, r3
 8107542:	3718      	adds	r7, #24
 8107544:	46bd      	mov	sp, r7
 8107546:	bd80      	pop	{r7, pc}

08107548 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8107548:	b580      	push	{r7, lr}
 810754a:	b08a      	sub	sp, #40	@ 0x28
 810754c:	af02      	add	r7, sp, #8
 810754e:	60f8      	str	r0, [r7, #12]
 8107550:	60b9      	str	r1, [r7, #8]
 8107552:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8107554:	2300      	movs	r3, #0
 8107556:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8107558:	f3ef 8305 	mrs	r3, IPSR
 810755c:	613b      	str	r3, [r7, #16]
  return(result);
 810755e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8107560:	2b00      	cmp	r3, #0
 8107562:	d175      	bne.n	8107650 <osSemaphoreNew+0x108>
 8107564:	68fb      	ldr	r3, [r7, #12]
 8107566:	2b00      	cmp	r3, #0
 8107568:	d072      	beq.n	8107650 <osSemaphoreNew+0x108>
 810756a:	68ba      	ldr	r2, [r7, #8]
 810756c:	68fb      	ldr	r3, [r7, #12]
 810756e:	429a      	cmp	r2, r3
 8107570:	d86e      	bhi.n	8107650 <osSemaphoreNew+0x108>
    mem = -1;
 8107572:	f04f 33ff 	mov.w	r3, #4294967295
 8107576:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8107578:	687b      	ldr	r3, [r7, #4]
 810757a:	2b00      	cmp	r3, #0
 810757c:	d015      	beq.n	81075aa <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 810757e:	687b      	ldr	r3, [r7, #4]
 8107580:	689b      	ldr	r3, [r3, #8]
 8107582:	2b00      	cmp	r3, #0
 8107584:	d006      	beq.n	8107594 <osSemaphoreNew+0x4c>
 8107586:	687b      	ldr	r3, [r7, #4]
 8107588:	68db      	ldr	r3, [r3, #12]
 810758a:	2b4f      	cmp	r3, #79	@ 0x4f
 810758c:	d902      	bls.n	8107594 <osSemaphoreNew+0x4c>
        mem = 1;
 810758e:	2301      	movs	r3, #1
 8107590:	61bb      	str	r3, [r7, #24]
 8107592:	e00c      	b.n	81075ae <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8107594:	687b      	ldr	r3, [r7, #4]
 8107596:	689b      	ldr	r3, [r3, #8]
 8107598:	2b00      	cmp	r3, #0
 810759a:	d108      	bne.n	81075ae <osSemaphoreNew+0x66>
 810759c:	687b      	ldr	r3, [r7, #4]
 810759e:	68db      	ldr	r3, [r3, #12]
 81075a0:	2b00      	cmp	r3, #0
 81075a2:	d104      	bne.n	81075ae <osSemaphoreNew+0x66>
          mem = 0;
 81075a4:	2300      	movs	r3, #0
 81075a6:	61bb      	str	r3, [r7, #24]
 81075a8:	e001      	b.n	81075ae <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 81075aa:	2300      	movs	r3, #0
 81075ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 81075ae:	69bb      	ldr	r3, [r7, #24]
 81075b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81075b4:	d04c      	beq.n	8107650 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 81075b6:	68fb      	ldr	r3, [r7, #12]
 81075b8:	2b01      	cmp	r3, #1
 81075ba:	d128      	bne.n	810760e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 81075bc:	69bb      	ldr	r3, [r7, #24]
 81075be:	2b01      	cmp	r3, #1
 81075c0:	d10a      	bne.n	81075d8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 81075c2:	687b      	ldr	r3, [r7, #4]
 81075c4:	689b      	ldr	r3, [r3, #8]
 81075c6:	2203      	movs	r2, #3
 81075c8:	9200      	str	r2, [sp, #0]
 81075ca:	2200      	movs	r2, #0
 81075cc:	2100      	movs	r1, #0
 81075ce:	2001      	movs	r0, #1
 81075d0:	f000 ffae 	bl	8108530 <xQueueGenericCreateStatic>
 81075d4:	61f8      	str	r0, [r7, #28]
 81075d6:	e005      	b.n	81075e4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 81075d8:	2203      	movs	r2, #3
 81075da:	2100      	movs	r1, #0
 81075dc:	2001      	movs	r0, #1
 81075de:	f001 f824 	bl	810862a <xQueueGenericCreate>
 81075e2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 81075e4:	69fb      	ldr	r3, [r7, #28]
 81075e6:	2b00      	cmp	r3, #0
 81075e8:	d022      	beq.n	8107630 <osSemaphoreNew+0xe8>
 81075ea:	68bb      	ldr	r3, [r7, #8]
 81075ec:	2b00      	cmp	r3, #0
 81075ee:	d01f      	beq.n	8107630 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 81075f0:	2300      	movs	r3, #0
 81075f2:	2200      	movs	r2, #0
 81075f4:	2100      	movs	r1, #0
 81075f6:	69f8      	ldr	r0, [r7, #28]
 81075f8:	f001 f99c 	bl	8108934 <xQueueGenericSend>
 81075fc:	4603      	mov	r3, r0
 81075fe:	2b01      	cmp	r3, #1
 8107600:	d016      	beq.n	8107630 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8107602:	69f8      	ldr	r0, [r7, #28]
 8107604:	f001 fe3a 	bl	810927c <vQueueDelete>
            hSemaphore = NULL;
 8107608:	2300      	movs	r3, #0
 810760a:	61fb      	str	r3, [r7, #28]
 810760c:	e010      	b.n	8107630 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 810760e:	69bb      	ldr	r3, [r7, #24]
 8107610:	2b01      	cmp	r3, #1
 8107612:	d108      	bne.n	8107626 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8107614:	687b      	ldr	r3, [r7, #4]
 8107616:	689b      	ldr	r3, [r3, #8]
 8107618:	461a      	mov	r2, r3
 810761a:	68b9      	ldr	r1, [r7, #8]
 810761c:	68f8      	ldr	r0, [r7, #12]
 810761e:	f001 f91b 	bl	8108858 <xQueueCreateCountingSemaphoreStatic>
 8107622:	61f8      	str	r0, [r7, #28]
 8107624:	e004      	b.n	8107630 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8107626:	68b9      	ldr	r1, [r7, #8]
 8107628:	68f8      	ldr	r0, [r7, #12]
 810762a:	f001 f94e 	bl	81088ca <xQueueCreateCountingSemaphore>
 810762e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8107630:	69fb      	ldr	r3, [r7, #28]
 8107632:	2b00      	cmp	r3, #0
 8107634:	d00c      	beq.n	8107650 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8107636:	687b      	ldr	r3, [r7, #4]
 8107638:	2b00      	cmp	r3, #0
 810763a:	d003      	beq.n	8107644 <osSemaphoreNew+0xfc>
          name = attr->name;
 810763c:	687b      	ldr	r3, [r7, #4]
 810763e:	681b      	ldr	r3, [r3, #0]
 8107640:	617b      	str	r3, [r7, #20]
 8107642:	e001      	b.n	8107648 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8107644:	2300      	movs	r3, #0
 8107646:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8107648:	6979      	ldr	r1, [r7, #20]
 810764a:	69f8      	ldr	r0, [r7, #28]
 810764c:	f001 ff62 	bl	8109514 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8107650:	69fb      	ldr	r3, [r7, #28]
}
 8107652:	4618      	mov	r0, r3
 8107654:	3720      	adds	r7, #32
 8107656:	46bd      	mov	sp, r7
 8107658:	bd80      	pop	{r7, pc}
	...

0810765c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 810765c:	b580      	push	{r7, lr}
 810765e:	b086      	sub	sp, #24
 8107660:	af00      	add	r7, sp, #0
 8107662:	6078      	str	r0, [r7, #4]
 8107664:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8107666:	687b      	ldr	r3, [r7, #4]
 8107668:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 810766a:	2300      	movs	r3, #0
 810766c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 810766e:	693b      	ldr	r3, [r7, #16]
 8107670:	2b00      	cmp	r3, #0
 8107672:	d103      	bne.n	810767c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8107674:	f06f 0303 	mvn.w	r3, #3
 8107678:	617b      	str	r3, [r7, #20]
 810767a:	e039      	b.n	81076f0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810767c:	f3ef 8305 	mrs	r3, IPSR
 8107680:	60fb      	str	r3, [r7, #12]
  return(result);
 8107682:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8107684:	2b00      	cmp	r3, #0
 8107686:	d022      	beq.n	81076ce <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8107688:	683b      	ldr	r3, [r7, #0]
 810768a:	2b00      	cmp	r3, #0
 810768c:	d003      	beq.n	8107696 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 810768e:	f06f 0303 	mvn.w	r3, #3
 8107692:	617b      	str	r3, [r7, #20]
 8107694:	e02c      	b.n	81076f0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8107696:	2300      	movs	r3, #0
 8107698:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 810769a:	f107 0308 	add.w	r3, r7, #8
 810769e:	461a      	mov	r2, r3
 81076a0:	2100      	movs	r1, #0
 81076a2:	6938      	ldr	r0, [r7, #16]
 81076a4:	f001 fd68 	bl	8109178 <xQueueReceiveFromISR>
 81076a8:	4603      	mov	r3, r0
 81076aa:	2b01      	cmp	r3, #1
 81076ac:	d003      	beq.n	81076b6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 81076ae:	f06f 0302 	mvn.w	r3, #2
 81076b2:	617b      	str	r3, [r7, #20]
 81076b4:	e01c      	b.n	81076f0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 81076b6:	68bb      	ldr	r3, [r7, #8]
 81076b8:	2b00      	cmp	r3, #0
 81076ba:	d019      	beq.n	81076f0 <osSemaphoreAcquire+0x94>
 81076bc:	4b0f      	ldr	r3, [pc, #60]	@ (81076fc <osSemaphoreAcquire+0xa0>)
 81076be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81076c2:	601a      	str	r2, [r3, #0]
 81076c4:	f3bf 8f4f 	dsb	sy
 81076c8:	f3bf 8f6f 	isb	sy
 81076cc:	e010      	b.n	81076f0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 81076ce:	6839      	ldr	r1, [r7, #0]
 81076d0:	6938      	ldr	r0, [r7, #16]
 81076d2:	f001 fc41 	bl	8108f58 <xQueueSemaphoreTake>
 81076d6:	4603      	mov	r3, r0
 81076d8:	2b01      	cmp	r3, #1
 81076da:	d009      	beq.n	81076f0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 81076dc:	683b      	ldr	r3, [r7, #0]
 81076de:	2b00      	cmp	r3, #0
 81076e0:	d003      	beq.n	81076ea <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 81076e2:	f06f 0301 	mvn.w	r3, #1
 81076e6:	617b      	str	r3, [r7, #20]
 81076e8:	e002      	b.n	81076f0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 81076ea:	f06f 0302 	mvn.w	r3, #2
 81076ee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 81076f0:	697b      	ldr	r3, [r7, #20]
}
 81076f2:	4618      	mov	r0, r3
 81076f4:	3718      	adds	r7, #24
 81076f6:	46bd      	mov	sp, r7
 81076f8:	bd80      	pop	{r7, pc}
 81076fa:	bf00      	nop
 81076fc:	e000ed04 	.word	0xe000ed04

08107700 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8107700:	b580      	push	{r7, lr}
 8107702:	b086      	sub	sp, #24
 8107704:	af00      	add	r7, sp, #0
 8107706:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8107708:	687b      	ldr	r3, [r7, #4]
 810770a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 810770c:	2300      	movs	r3, #0
 810770e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8107710:	693b      	ldr	r3, [r7, #16]
 8107712:	2b00      	cmp	r3, #0
 8107714:	d103      	bne.n	810771e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8107716:	f06f 0303 	mvn.w	r3, #3
 810771a:	617b      	str	r3, [r7, #20]
 810771c:	e02c      	b.n	8107778 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810771e:	f3ef 8305 	mrs	r3, IPSR
 8107722:	60fb      	str	r3, [r7, #12]
  return(result);
 8107724:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8107726:	2b00      	cmp	r3, #0
 8107728:	d01a      	beq.n	8107760 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 810772a:	2300      	movs	r3, #0
 810772c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 810772e:	f107 0308 	add.w	r3, r7, #8
 8107732:	4619      	mov	r1, r3
 8107734:	6938      	ldr	r0, [r7, #16]
 8107736:	f001 fa9d 	bl	8108c74 <xQueueGiveFromISR>
 810773a:	4603      	mov	r3, r0
 810773c:	2b01      	cmp	r3, #1
 810773e:	d003      	beq.n	8107748 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8107740:	f06f 0302 	mvn.w	r3, #2
 8107744:	617b      	str	r3, [r7, #20]
 8107746:	e017      	b.n	8107778 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8107748:	68bb      	ldr	r3, [r7, #8]
 810774a:	2b00      	cmp	r3, #0
 810774c:	d014      	beq.n	8107778 <osSemaphoreRelease+0x78>
 810774e:	4b0d      	ldr	r3, [pc, #52]	@ (8107784 <osSemaphoreRelease+0x84>)
 8107750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107754:	601a      	str	r2, [r3, #0]
 8107756:	f3bf 8f4f 	dsb	sy
 810775a:	f3bf 8f6f 	isb	sy
 810775e:	e00b      	b.n	8107778 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8107760:	2300      	movs	r3, #0
 8107762:	2200      	movs	r2, #0
 8107764:	2100      	movs	r1, #0
 8107766:	6938      	ldr	r0, [r7, #16]
 8107768:	f001 f8e4 	bl	8108934 <xQueueGenericSend>
 810776c:	4603      	mov	r3, r0
 810776e:	2b01      	cmp	r3, #1
 8107770:	d002      	beq.n	8107778 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8107772:	f06f 0302 	mvn.w	r3, #2
 8107776:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8107778:	697b      	ldr	r3, [r7, #20]
}
 810777a:	4618      	mov	r0, r3
 810777c:	3718      	adds	r7, #24
 810777e:	46bd      	mov	sp, r7
 8107780:	bd80      	pop	{r7, pc}
 8107782:	bf00      	nop
 8107784:	e000ed04 	.word	0xe000ed04

08107788 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8107788:	b580      	push	{r7, lr}
 810778a:	b08a      	sub	sp, #40	@ 0x28
 810778c:	af02      	add	r7, sp, #8
 810778e:	60f8      	str	r0, [r7, #12]
 8107790:	60b9      	str	r1, [r7, #8]
 8107792:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8107794:	2300      	movs	r3, #0
 8107796:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8107798:	f3ef 8305 	mrs	r3, IPSR
 810779c:	613b      	str	r3, [r7, #16]
  return(result);
 810779e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 81077a0:	2b00      	cmp	r3, #0
 81077a2:	d15f      	bne.n	8107864 <osMessageQueueNew+0xdc>
 81077a4:	68fb      	ldr	r3, [r7, #12]
 81077a6:	2b00      	cmp	r3, #0
 81077a8:	d05c      	beq.n	8107864 <osMessageQueueNew+0xdc>
 81077aa:	68bb      	ldr	r3, [r7, #8]
 81077ac:	2b00      	cmp	r3, #0
 81077ae:	d059      	beq.n	8107864 <osMessageQueueNew+0xdc>
    mem = -1;
 81077b0:	f04f 33ff 	mov.w	r3, #4294967295
 81077b4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 81077b6:	687b      	ldr	r3, [r7, #4]
 81077b8:	2b00      	cmp	r3, #0
 81077ba:	d029      	beq.n	8107810 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 81077bc:	687b      	ldr	r3, [r7, #4]
 81077be:	689b      	ldr	r3, [r3, #8]
 81077c0:	2b00      	cmp	r3, #0
 81077c2:	d012      	beq.n	81077ea <osMessageQueueNew+0x62>
 81077c4:	687b      	ldr	r3, [r7, #4]
 81077c6:	68db      	ldr	r3, [r3, #12]
 81077c8:	2b4f      	cmp	r3, #79	@ 0x4f
 81077ca:	d90e      	bls.n	81077ea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 81077cc:	687b      	ldr	r3, [r7, #4]
 81077ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 81077d0:	2b00      	cmp	r3, #0
 81077d2:	d00a      	beq.n	81077ea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 81077d4:	687b      	ldr	r3, [r7, #4]
 81077d6:	695a      	ldr	r2, [r3, #20]
 81077d8:	68fb      	ldr	r3, [r7, #12]
 81077da:	68b9      	ldr	r1, [r7, #8]
 81077dc:	fb01 f303 	mul.w	r3, r1, r3
 81077e0:	429a      	cmp	r2, r3
 81077e2:	d302      	bcc.n	81077ea <osMessageQueueNew+0x62>
        mem = 1;
 81077e4:	2301      	movs	r3, #1
 81077e6:	61bb      	str	r3, [r7, #24]
 81077e8:	e014      	b.n	8107814 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 81077ea:	687b      	ldr	r3, [r7, #4]
 81077ec:	689b      	ldr	r3, [r3, #8]
 81077ee:	2b00      	cmp	r3, #0
 81077f0:	d110      	bne.n	8107814 <osMessageQueueNew+0x8c>
 81077f2:	687b      	ldr	r3, [r7, #4]
 81077f4:	68db      	ldr	r3, [r3, #12]
 81077f6:	2b00      	cmp	r3, #0
 81077f8:	d10c      	bne.n	8107814 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 81077fa:	687b      	ldr	r3, [r7, #4]
 81077fc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 81077fe:	2b00      	cmp	r3, #0
 8107800:	d108      	bne.n	8107814 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8107802:	687b      	ldr	r3, [r7, #4]
 8107804:	695b      	ldr	r3, [r3, #20]
 8107806:	2b00      	cmp	r3, #0
 8107808:	d104      	bne.n	8107814 <osMessageQueueNew+0x8c>
          mem = 0;
 810780a:	2300      	movs	r3, #0
 810780c:	61bb      	str	r3, [r7, #24]
 810780e:	e001      	b.n	8107814 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8107810:	2300      	movs	r3, #0
 8107812:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8107814:	69bb      	ldr	r3, [r7, #24]
 8107816:	2b01      	cmp	r3, #1
 8107818:	d10b      	bne.n	8107832 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 810781a:	687b      	ldr	r3, [r7, #4]
 810781c:	691a      	ldr	r2, [r3, #16]
 810781e:	687b      	ldr	r3, [r7, #4]
 8107820:	689b      	ldr	r3, [r3, #8]
 8107822:	2100      	movs	r1, #0
 8107824:	9100      	str	r1, [sp, #0]
 8107826:	68b9      	ldr	r1, [r7, #8]
 8107828:	68f8      	ldr	r0, [r7, #12]
 810782a:	f000 fe81 	bl	8108530 <xQueueGenericCreateStatic>
 810782e:	61f8      	str	r0, [r7, #28]
 8107830:	e008      	b.n	8107844 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8107832:	69bb      	ldr	r3, [r7, #24]
 8107834:	2b00      	cmp	r3, #0
 8107836:	d105      	bne.n	8107844 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8107838:	2200      	movs	r2, #0
 810783a:	68b9      	ldr	r1, [r7, #8]
 810783c:	68f8      	ldr	r0, [r7, #12]
 810783e:	f000 fef4 	bl	810862a <xQueueGenericCreate>
 8107842:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8107844:	69fb      	ldr	r3, [r7, #28]
 8107846:	2b00      	cmp	r3, #0
 8107848:	d00c      	beq.n	8107864 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 810784a:	687b      	ldr	r3, [r7, #4]
 810784c:	2b00      	cmp	r3, #0
 810784e:	d003      	beq.n	8107858 <osMessageQueueNew+0xd0>
        name = attr->name;
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	681b      	ldr	r3, [r3, #0]
 8107854:	617b      	str	r3, [r7, #20]
 8107856:	e001      	b.n	810785c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8107858:	2300      	movs	r3, #0
 810785a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 810785c:	6979      	ldr	r1, [r7, #20]
 810785e:	69f8      	ldr	r0, [r7, #28]
 8107860:	f001 fe58 	bl	8109514 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8107864:	69fb      	ldr	r3, [r7, #28]
}
 8107866:	4618      	mov	r0, r3
 8107868:	3720      	adds	r7, #32
 810786a:	46bd      	mov	sp, r7
 810786c:	bd80      	pop	{r7, pc}
	...

08107870 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8107870:	b580      	push	{r7, lr}
 8107872:	b088      	sub	sp, #32
 8107874:	af00      	add	r7, sp, #0
 8107876:	60f8      	str	r0, [r7, #12]
 8107878:	60b9      	str	r1, [r7, #8]
 810787a:	603b      	str	r3, [r7, #0]
 810787c:	4613      	mov	r3, r2
 810787e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8107880:	68fb      	ldr	r3, [r7, #12]
 8107882:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8107884:	2300      	movs	r3, #0
 8107886:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8107888:	f3ef 8305 	mrs	r3, IPSR
 810788c:	617b      	str	r3, [r7, #20]
  return(result);
 810788e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8107890:	2b00      	cmp	r3, #0
 8107892:	d028      	beq.n	81078e6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8107894:	69bb      	ldr	r3, [r7, #24]
 8107896:	2b00      	cmp	r3, #0
 8107898:	d005      	beq.n	81078a6 <osMessageQueuePut+0x36>
 810789a:	68bb      	ldr	r3, [r7, #8]
 810789c:	2b00      	cmp	r3, #0
 810789e:	d002      	beq.n	81078a6 <osMessageQueuePut+0x36>
 81078a0:	683b      	ldr	r3, [r7, #0]
 81078a2:	2b00      	cmp	r3, #0
 81078a4:	d003      	beq.n	81078ae <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 81078a6:	f06f 0303 	mvn.w	r3, #3
 81078aa:	61fb      	str	r3, [r7, #28]
 81078ac:	e038      	b.n	8107920 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 81078ae:	2300      	movs	r3, #0
 81078b0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 81078b2:	f107 0210 	add.w	r2, r7, #16
 81078b6:	2300      	movs	r3, #0
 81078b8:	68b9      	ldr	r1, [r7, #8]
 81078ba:	69b8      	ldr	r0, [r7, #24]
 81078bc:	f001 f93c 	bl	8108b38 <xQueueGenericSendFromISR>
 81078c0:	4603      	mov	r3, r0
 81078c2:	2b01      	cmp	r3, #1
 81078c4:	d003      	beq.n	81078ce <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 81078c6:	f06f 0302 	mvn.w	r3, #2
 81078ca:	61fb      	str	r3, [r7, #28]
 81078cc:	e028      	b.n	8107920 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 81078ce:	693b      	ldr	r3, [r7, #16]
 81078d0:	2b00      	cmp	r3, #0
 81078d2:	d025      	beq.n	8107920 <osMessageQueuePut+0xb0>
 81078d4:	4b15      	ldr	r3, [pc, #84]	@ (810792c <osMessageQueuePut+0xbc>)
 81078d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81078da:	601a      	str	r2, [r3, #0]
 81078dc:	f3bf 8f4f 	dsb	sy
 81078e0:	f3bf 8f6f 	isb	sy
 81078e4:	e01c      	b.n	8107920 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 81078e6:	69bb      	ldr	r3, [r7, #24]
 81078e8:	2b00      	cmp	r3, #0
 81078ea:	d002      	beq.n	81078f2 <osMessageQueuePut+0x82>
 81078ec:	68bb      	ldr	r3, [r7, #8]
 81078ee:	2b00      	cmp	r3, #0
 81078f0:	d103      	bne.n	81078fa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 81078f2:	f06f 0303 	mvn.w	r3, #3
 81078f6:	61fb      	str	r3, [r7, #28]
 81078f8:	e012      	b.n	8107920 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 81078fa:	2300      	movs	r3, #0
 81078fc:	683a      	ldr	r2, [r7, #0]
 81078fe:	68b9      	ldr	r1, [r7, #8]
 8107900:	69b8      	ldr	r0, [r7, #24]
 8107902:	f001 f817 	bl	8108934 <xQueueGenericSend>
 8107906:	4603      	mov	r3, r0
 8107908:	2b01      	cmp	r3, #1
 810790a:	d009      	beq.n	8107920 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 810790c:	683b      	ldr	r3, [r7, #0]
 810790e:	2b00      	cmp	r3, #0
 8107910:	d003      	beq.n	810791a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8107912:	f06f 0301 	mvn.w	r3, #1
 8107916:	61fb      	str	r3, [r7, #28]
 8107918:	e002      	b.n	8107920 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 810791a:	f06f 0302 	mvn.w	r3, #2
 810791e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8107920:	69fb      	ldr	r3, [r7, #28]
}
 8107922:	4618      	mov	r0, r3
 8107924:	3720      	adds	r7, #32
 8107926:	46bd      	mov	sp, r7
 8107928:	bd80      	pop	{r7, pc}
 810792a:	bf00      	nop
 810792c:	e000ed04 	.word	0xe000ed04

08107930 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8107930:	b580      	push	{r7, lr}
 8107932:	b088      	sub	sp, #32
 8107934:	af00      	add	r7, sp, #0
 8107936:	60f8      	str	r0, [r7, #12]
 8107938:	60b9      	str	r1, [r7, #8]
 810793a:	607a      	str	r2, [r7, #4]
 810793c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 810793e:	68fb      	ldr	r3, [r7, #12]
 8107940:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8107942:	2300      	movs	r3, #0
 8107944:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8107946:	f3ef 8305 	mrs	r3, IPSR
 810794a:	617b      	str	r3, [r7, #20]
  return(result);
 810794c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 810794e:	2b00      	cmp	r3, #0
 8107950:	d028      	beq.n	81079a4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8107952:	69bb      	ldr	r3, [r7, #24]
 8107954:	2b00      	cmp	r3, #0
 8107956:	d005      	beq.n	8107964 <osMessageQueueGet+0x34>
 8107958:	68bb      	ldr	r3, [r7, #8]
 810795a:	2b00      	cmp	r3, #0
 810795c:	d002      	beq.n	8107964 <osMessageQueueGet+0x34>
 810795e:	683b      	ldr	r3, [r7, #0]
 8107960:	2b00      	cmp	r3, #0
 8107962:	d003      	beq.n	810796c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8107964:	f06f 0303 	mvn.w	r3, #3
 8107968:	61fb      	str	r3, [r7, #28]
 810796a:	e037      	b.n	81079dc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 810796c:	2300      	movs	r3, #0
 810796e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8107970:	f107 0310 	add.w	r3, r7, #16
 8107974:	461a      	mov	r2, r3
 8107976:	68b9      	ldr	r1, [r7, #8]
 8107978:	69b8      	ldr	r0, [r7, #24]
 810797a:	f001 fbfd 	bl	8109178 <xQueueReceiveFromISR>
 810797e:	4603      	mov	r3, r0
 8107980:	2b01      	cmp	r3, #1
 8107982:	d003      	beq.n	810798c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8107984:	f06f 0302 	mvn.w	r3, #2
 8107988:	61fb      	str	r3, [r7, #28]
 810798a:	e027      	b.n	81079dc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 810798c:	693b      	ldr	r3, [r7, #16]
 810798e:	2b00      	cmp	r3, #0
 8107990:	d024      	beq.n	81079dc <osMessageQueueGet+0xac>
 8107992:	4b15      	ldr	r3, [pc, #84]	@ (81079e8 <osMessageQueueGet+0xb8>)
 8107994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107998:	601a      	str	r2, [r3, #0]
 810799a:	f3bf 8f4f 	dsb	sy
 810799e:	f3bf 8f6f 	isb	sy
 81079a2:	e01b      	b.n	81079dc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 81079a4:	69bb      	ldr	r3, [r7, #24]
 81079a6:	2b00      	cmp	r3, #0
 81079a8:	d002      	beq.n	81079b0 <osMessageQueueGet+0x80>
 81079aa:	68bb      	ldr	r3, [r7, #8]
 81079ac:	2b00      	cmp	r3, #0
 81079ae:	d103      	bne.n	81079b8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 81079b0:	f06f 0303 	mvn.w	r3, #3
 81079b4:	61fb      	str	r3, [r7, #28]
 81079b6:	e011      	b.n	81079dc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 81079b8:	683a      	ldr	r2, [r7, #0]
 81079ba:	68b9      	ldr	r1, [r7, #8]
 81079bc:	69b8      	ldr	r0, [r7, #24]
 81079be:	f001 f9e9 	bl	8108d94 <xQueueReceive>
 81079c2:	4603      	mov	r3, r0
 81079c4:	2b01      	cmp	r3, #1
 81079c6:	d009      	beq.n	81079dc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 81079c8:	683b      	ldr	r3, [r7, #0]
 81079ca:	2b00      	cmp	r3, #0
 81079cc:	d003      	beq.n	81079d6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 81079ce:	f06f 0301 	mvn.w	r3, #1
 81079d2:	61fb      	str	r3, [r7, #28]
 81079d4:	e002      	b.n	81079dc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 81079d6:	f06f 0302 	mvn.w	r3, #2
 81079da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 81079dc:	69fb      	ldr	r3, [r7, #28]
}
 81079de:	4618      	mov	r0, r3
 81079e0:	3720      	adds	r7, #32
 81079e2:	46bd      	mov	sp, r7
 81079e4:	bd80      	pop	{r7, pc}
 81079e6:	bf00      	nop
 81079e8:	e000ed04 	.word	0xe000ed04

081079ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 81079ec:	b480      	push	{r7}
 81079ee:	b085      	sub	sp, #20
 81079f0:	af00      	add	r7, sp, #0
 81079f2:	60f8      	str	r0, [r7, #12]
 81079f4:	60b9      	str	r1, [r7, #8]
 81079f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 81079f8:	68fb      	ldr	r3, [r7, #12]
 81079fa:	4a07      	ldr	r2, [pc, #28]	@ (8107a18 <vApplicationGetIdleTaskMemory+0x2c>)
 81079fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 81079fe:	68bb      	ldr	r3, [r7, #8]
 8107a00:	4a06      	ldr	r2, [pc, #24]	@ (8107a1c <vApplicationGetIdleTaskMemory+0x30>)
 8107a02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8107a04:	687b      	ldr	r3, [r7, #4]
 8107a06:	2280      	movs	r2, #128	@ 0x80
 8107a08:	601a      	str	r2, [r3, #0]
}
 8107a0a:	bf00      	nop
 8107a0c:	3714      	adds	r7, #20
 8107a0e:	46bd      	mov	sp, r7
 8107a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a14:	4770      	bx	lr
 8107a16:	bf00      	nop
 8107a18:	100002a4 	.word	0x100002a4
 8107a1c:	1000034c 	.word	0x1000034c

08107a20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8107a20:	b480      	push	{r7}
 8107a22:	b085      	sub	sp, #20
 8107a24:	af00      	add	r7, sp, #0
 8107a26:	60f8      	str	r0, [r7, #12]
 8107a28:	60b9      	str	r1, [r7, #8]
 8107a2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8107a2c:	68fb      	ldr	r3, [r7, #12]
 8107a2e:	4a07      	ldr	r2, [pc, #28]	@ (8107a4c <vApplicationGetTimerTaskMemory+0x2c>)
 8107a30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8107a32:	68bb      	ldr	r3, [r7, #8]
 8107a34:	4a06      	ldr	r2, [pc, #24]	@ (8107a50 <vApplicationGetTimerTaskMemory+0x30>)
 8107a36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8107a38:	687b      	ldr	r3, [r7, #4]
 8107a3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8107a3e:	601a      	str	r2, [r3, #0]
}
 8107a40:	bf00      	nop
 8107a42:	3714      	adds	r7, #20
 8107a44:	46bd      	mov	sp, r7
 8107a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a4a:	4770      	bx	lr
 8107a4c:	1000054c 	.word	0x1000054c
 8107a50:	100005f4 	.word	0x100005f4

08107a54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8107a54:	b580      	push	{r7, lr}
 8107a56:	b08a      	sub	sp, #40	@ 0x28
 8107a58:	af00      	add	r7, sp, #0
 8107a5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8107a5c:	2300      	movs	r3, #0
 8107a5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8107a60:	f002 fade 	bl	810a020 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8107a64:	4b5c      	ldr	r3, [pc, #368]	@ (8107bd8 <pvPortMalloc+0x184>)
 8107a66:	681b      	ldr	r3, [r3, #0]
 8107a68:	2b00      	cmp	r3, #0
 8107a6a:	d101      	bne.n	8107a70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8107a6c:	f000 f930 	bl	8107cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8107a70:	4b5a      	ldr	r3, [pc, #360]	@ (8107bdc <pvPortMalloc+0x188>)
 8107a72:	681a      	ldr	r2, [r3, #0]
 8107a74:	687b      	ldr	r3, [r7, #4]
 8107a76:	4013      	ands	r3, r2
 8107a78:	2b00      	cmp	r3, #0
 8107a7a:	f040 8095 	bne.w	8107ba8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8107a7e:	687b      	ldr	r3, [r7, #4]
 8107a80:	2b00      	cmp	r3, #0
 8107a82:	d01e      	beq.n	8107ac2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8107a84:	2208      	movs	r2, #8
 8107a86:	687b      	ldr	r3, [r7, #4]
 8107a88:	4413      	add	r3, r2
 8107a8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8107a8c:	687b      	ldr	r3, [r7, #4]
 8107a8e:	f003 0307 	and.w	r3, r3, #7
 8107a92:	2b00      	cmp	r3, #0
 8107a94:	d015      	beq.n	8107ac2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8107a96:	687b      	ldr	r3, [r7, #4]
 8107a98:	f023 0307 	bic.w	r3, r3, #7
 8107a9c:	3308      	adds	r3, #8
 8107a9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8107aa0:	687b      	ldr	r3, [r7, #4]
 8107aa2:	f003 0307 	and.w	r3, r3, #7
 8107aa6:	2b00      	cmp	r3, #0
 8107aa8:	d00b      	beq.n	8107ac2 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8107aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107aae:	f383 8811 	msr	BASEPRI, r3
 8107ab2:	f3bf 8f6f 	isb	sy
 8107ab6:	f3bf 8f4f 	dsb	sy
 8107aba:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8107abc:	bf00      	nop
 8107abe:	bf00      	nop
 8107ac0:	e7fd      	b.n	8107abe <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8107ac2:	687b      	ldr	r3, [r7, #4]
 8107ac4:	2b00      	cmp	r3, #0
 8107ac6:	d06f      	beq.n	8107ba8 <pvPortMalloc+0x154>
 8107ac8:	4b45      	ldr	r3, [pc, #276]	@ (8107be0 <pvPortMalloc+0x18c>)
 8107aca:	681b      	ldr	r3, [r3, #0]
 8107acc:	687a      	ldr	r2, [r7, #4]
 8107ace:	429a      	cmp	r2, r3
 8107ad0:	d86a      	bhi.n	8107ba8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8107ad2:	4b44      	ldr	r3, [pc, #272]	@ (8107be4 <pvPortMalloc+0x190>)
 8107ad4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8107ad6:	4b43      	ldr	r3, [pc, #268]	@ (8107be4 <pvPortMalloc+0x190>)
 8107ad8:	681b      	ldr	r3, [r3, #0]
 8107ada:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8107adc:	e004      	b.n	8107ae8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8107ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107ae0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8107ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107ae4:	681b      	ldr	r3, [r3, #0]
 8107ae6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8107ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107aea:	685b      	ldr	r3, [r3, #4]
 8107aec:	687a      	ldr	r2, [r7, #4]
 8107aee:	429a      	cmp	r2, r3
 8107af0:	d903      	bls.n	8107afa <pvPortMalloc+0xa6>
 8107af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107af4:	681b      	ldr	r3, [r3, #0]
 8107af6:	2b00      	cmp	r3, #0
 8107af8:	d1f1      	bne.n	8107ade <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8107afa:	4b37      	ldr	r3, [pc, #220]	@ (8107bd8 <pvPortMalloc+0x184>)
 8107afc:	681b      	ldr	r3, [r3, #0]
 8107afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8107b00:	429a      	cmp	r2, r3
 8107b02:	d051      	beq.n	8107ba8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8107b04:	6a3b      	ldr	r3, [r7, #32]
 8107b06:	681b      	ldr	r3, [r3, #0]
 8107b08:	2208      	movs	r2, #8
 8107b0a:	4413      	add	r3, r2
 8107b0c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8107b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107b10:	681a      	ldr	r2, [r3, #0]
 8107b12:	6a3b      	ldr	r3, [r7, #32]
 8107b14:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8107b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107b18:	685a      	ldr	r2, [r3, #4]
 8107b1a:	687b      	ldr	r3, [r7, #4]
 8107b1c:	1ad2      	subs	r2, r2, r3
 8107b1e:	2308      	movs	r3, #8
 8107b20:	005b      	lsls	r3, r3, #1
 8107b22:	429a      	cmp	r2, r3
 8107b24:	d920      	bls.n	8107b68 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8107b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8107b28:	687b      	ldr	r3, [r7, #4]
 8107b2a:	4413      	add	r3, r2
 8107b2c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8107b2e:	69bb      	ldr	r3, [r7, #24]
 8107b30:	f003 0307 	and.w	r3, r3, #7
 8107b34:	2b00      	cmp	r3, #0
 8107b36:	d00b      	beq.n	8107b50 <pvPortMalloc+0xfc>
	__asm volatile
 8107b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107b3c:	f383 8811 	msr	BASEPRI, r3
 8107b40:	f3bf 8f6f 	isb	sy
 8107b44:	f3bf 8f4f 	dsb	sy
 8107b48:	613b      	str	r3, [r7, #16]
}
 8107b4a:	bf00      	nop
 8107b4c:	bf00      	nop
 8107b4e:	e7fd      	b.n	8107b4c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8107b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107b52:	685a      	ldr	r2, [r3, #4]
 8107b54:	687b      	ldr	r3, [r7, #4]
 8107b56:	1ad2      	subs	r2, r2, r3
 8107b58:	69bb      	ldr	r3, [r7, #24]
 8107b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8107b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107b5e:	687a      	ldr	r2, [r7, #4]
 8107b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8107b62:	69b8      	ldr	r0, [r7, #24]
 8107b64:	f000 f916 	bl	8107d94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8107b68:	4b1d      	ldr	r3, [pc, #116]	@ (8107be0 <pvPortMalloc+0x18c>)
 8107b6a:	681a      	ldr	r2, [r3, #0]
 8107b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107b6e:	685b      	ldr	r3, [r3, #4]
 8107b70:	1ad3      	subs	r3, r2, r3
 8107b72:	4a1b      	ldr	r2, [pc, #108]	@ (8107be0 <pvPortMalloc+0x18c>)
 8107b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8107b76:	4b1a      	ldr	r3, [pc, #104]	@ (8107be0 <pvPortMalloc+0x18c>)
 8107b78:	681a      	ldr	r2, [r3, #0]
 8107b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8107be8 <pvPortMalloc+0x194>)
 8107b7c:	681b      	ldr	r3, [r3, #0]
 8107b7e:	429a      	cmp	r2, r3
 8107b80:	d203      	bcs.n	8107b8a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8107b82:	4b17      	ldr	r3, [pc, #92]	@ (8107be0 <pvPortMalloc+0x18c>)
 8107b84:	681b      	ldr	r3, [r3, #0]
 8107b86:	4a18      	ldr	r2, [pc, #96]	@ (8107be8 <pvPortMalloc+0x194>)
 8107b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8107b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107b8c:	685a      	ldr	r2, [r3, #4]
 8107b8e:	4b13      	ldr	r3, [pc, #76]	@ (8107bdc <pvPortMalloc+0x188>)
 8107b90:	681b      	ldr	r3, [r3, #0]
 8107b92:	431a      	orrs	r2, r3
 8107b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8107b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107b9a:	2200      	movs	r2, #0
 8107b9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8107b9e:	4b13      	ldr	r3, [pc, #76]	@ (8107bec <pvPortMalloc+0x198>)
 8107ba0:	681b      	ldr	r3, [r3, #0]
 8107ba2:	3301      	adds	r3, #1
 8107ba4:	4a11      	ldr	r2, [pc, #68]	@ (8107bec <pvPortMalloc+0x198>)
 8107ba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8107ba8:	f002 fa48 	bl	810a03c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8107bac:	69fb      	ldr	r3, [r7, #28]
 8107bae:	f003 0307 	and.w	r3, r3, #7
 8107bb2:	2b00      	cmp	r3, #0
 8107bb4:	d00b      	beq.n	8107bce <pvPortMalloc+0x17a>
	__asm volatile
 8107bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107bba:	f383 8811 	msr	BASEPRI, r3
 8107bbe:	f3bf 8f6f 	isb	sy
 8107bc2:	f3bf 8f4f 	dsb	sy
 8107bc6:	60fb      	str	r3, [r7, #12]
}
 8107bc8:	bf00      	nop
 8107bca:	bf00      	nop
 8107bcc:	e7fd      	b.n	8107bca <pvPortMalloc+0x176>
	return pvReturn;
 8107bce:	69fb      	ldr	r3, [r7, #28]
}
 8107bd0:	4618      	mov	r0, r3
 8107bd2:	3728      	adds	r7, #40	@ 0x28
 8107bd4:	46bd      	mov	sp, r7
 8107bd6:	bd80      	pop	{r7, pc}
 8107bd8:	1000a9fc 	.word	0x1000a9fc
 8107bdc:	1000aa10 	.word	0x1000aa10
 8107be0:	1000aa00 	.word	0x1000aa00
 8107be4:	1000a9f4 	.word	0x1000a9f4
 8107be8:	1000aa04 	.word	0x1000aa04
 8107bec:	1000aa08 	.word	0x1000aa08

08107bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8107bf0:	b580      	push	{r7, lr}
 8107bf2:	b086      	sub	sp, #24
 8107bf4:	af00      	add	r7, sp, #0
 8107bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8107bf8:	687b      	ldr	r3, [r7, #4]
 8107bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8107bfc:	687b      	ldr	r3, [r7, #4]
 8107bfe:	2b00      	cmp	r3, #0
 8107c00:	d04f      	beq.n	8107ca2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8107c02:	2308      	movs	r3, #8
 8107c04:	425b      	negs	r3, r3
 8107c06:	697a      	ldr	r2, [r7, #20]
 8107c08:	4413      	add	r3, r2
 8107c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8107c0c:	697b      	ldr	r3, [r7, #20]
 8107c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8107c10:	693b      	ldr	r3, [r7, #16]
 8107c12:	685a      	ldr	r2, [r3, #4]
 8107c14:	4b25      	ldr	r3, [pc, #148]	@ (8107cac <vPortFree+0xbc>)
 8107c16:	681b      	ldr	r3, [r3, #0]
 8107c18:	4013      	ands	r3, r2
 8107c1a:	2b00      	cmp	r3, #0
 8107c1c:	d10b      	bne.n	8107c36 <vPortFree+0x46>
	__asm volatile
 8107c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107c22:	f383 8811 	msr	BASEPRI, r3
 8107c26:	f3bf 8f6f 	isb	sy
 8107c2a:	f3bf 8f4f 	dsb	sy
 8107c2e:	60fb      	str	r3, [r7, #12]
}
 8107c30:	bf00      	nop
 8107c32:	bf00      	nop
 8107c34:	e7fd      	b.n	8107c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8107c36:	693b      	ldr	r3, [r7, #16]
 8107c38:	681b      	ldr	r3, [r3, #0]
 8107c3a:	2b00      	cmp	r3, #0
 8107c3c:	d00b      	beq.n	8107c56 <vPortFree+0x66>
	__asm volatile
 8107c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107c42:	f383 8811 	msr	BASEPRI, r3
 8107c46:	f3bf 8f6f 	isb	sy
 8107c4a:	f3bf 8f4f 	dsb	sy
 8107c4e:	60bb      	str	r3, [r7, #8]
}
 8107c50:	bf00      	nop
 8107c52:	bf00      	nop
 8107c54:	e7fd      	b.n	8107c52 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8107c56:	693b      	ldr	r3, [r7, #16]
 8107c58:	685a      	ldr	r2, [r3, #4]
 8107c5a:	4b14      	ldr	r3, [pc, #80]	@ (8107cac <vPortFree+0xbc>)
 8107c5c:	681b      	ldr	r3, [r3, #0]
 8107c5e:	4013      	ands	r3, r2
 8107c60:	2b00      	cmp	r3, #0
 8107c62:	d01e      	beq.n	8107ca2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8107c64:	693b      	ldr	r3, [r7, #16]
 8107c66:	681b      	ldr	r3, [r3, #0]
 8107c68:	2b00      	cmp	r3, #0
 8107c6a:	d11a      	bne.n	8107ca2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8107c6c:	693b      	ldr	r3, [r7, #16]
 8107c6e:	685a      	ldr	r2, [r3, #4]
 8107c70:	4b0e      	ldr	r3, [pc, #56]	@ (8107cac <vPortFree+0xbc>)
 8107c72:	681b      	ldr	r3, [r3, #0]
 8107c74:	43db      	mvns	r3, r3
 8107c76:	401a      	ands	r2, r3
 8107c78:	693b      	ldr	r3, [r7, #16]
 8107c7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8107c7c:	f002 f9d0 	bl	810a020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8107c80:	693b      	ldr	r3, [r7, #16]
 8107c82:	685a      	ldr	r2, [r3, #4]
 8107c84:	4b0a      	ldr	r3, [pc, #40]	@ (8107cb0 <vPortFree+0xc0>)
 8107c86:	681b      	ldr	r3, [r3, #0]
 8107c88:	4413      	add	r3, r2
 8107c8a:	4a09      	ldr	r2, [pc, #36]	@ (8107cb0 <vPortFree+0xc0>)
 8107c8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8107c8e:	6938      	ldr	r0, [r7, #16]
 8107c90:	f000 f880 	bl	8107d94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8107c94:	4b07      	ldr	r3, [pc, #28]	@ (8107cb4 <vPortFree+0xc4>)
 8107c96:	681b      	ldr	r3, [r3, #0]
 8107c98:	3301      	adds	r3, #1
 8107c9a:	4a06      	ldr	r2, [pc, #24]	@ (8107cb4 <vPortFree+0xc4>)
 8107c9c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8107c9e:	f002 f9cd 	bl	810a03c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8107ca2:	bf00      	nop
 8107ca4:	3718      	adds	r7, #24
 8107ca6:	46bd      	mov	sp, r7
 8107ca8:	bd80      	pop	{r7, pc}
 8107caa:	bf00      	nop
 8107cac:	1000aa10 	.word	0x1000aa10
 8107cb0:	1000aa00 	.word	0x1000aa00
 8107cb4:	1000aa0c 	.word	0x1000aa0c

08107cb8 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8107cb8:	b480      	push	{r7}
 8107cba:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8107cbc:	4b03      	ldr	r3, [pc, #12]	@ (8107ccc <xPortGetFreeHeapSize+0x14>)
 8107cbe:	681b      	ldr	r3, [r3, #0]
}
 8107cc0:	4618      	mov	r0, r3
 8107cc2:	46bd      	mov	sp, r7
 8107cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cc8:	4770      	bx	lr
 8107cca:	bf00      	nop
 8107ccc:	1000aa00 	.word	0x1000aa00

08107cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8107cd0:	b480      	push	{r7}
 8107cd2:	b085      	sub	sp, #20
 8107cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8107cd6:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8107cda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8107cdc:	4b27      	ldr	r3, [pc, #156]	@ (8107d7c <prvHeapInit+0xac>)
 8107cde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8107ce0:	68fb      	ldr	r3, [r7, #12]
 8107ce2:	f003 0307 	and.w	r3, r3, #7
 8107ce6:	2b00      	cmp	r3, #0
 8107ce8:	d00c      	beq.n	8107d04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8107cea:	68fb      	ldr	r3, [r7, #12]
 8107cec:	3307      	adds	r3, #7
 8107cee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8107cf0:	68fb      	ldr	r3, [r7, #12]
 8107cf2:	f023 0307 	bic.w	r3, r3, #7
 8107cf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8107cf8:	68ba      	ldr	r2, [r7, #8]
 8107cfa:	68fb      	ldr	r3, [r7, #12]
 8107cfc:	1ad3      	subs	r3, r2, r3
 8107cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8107d7c <prvHeapInit+0xac>)
 8107d00:	4413      	add	r3, r2
 8107d02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8107d04:	68fb      	ldr	r3, [r7, #12]
 8107d06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8107d08:	4a1d      	ldr	r2, [pc, #116]	@ (8107d80 <prvHeapInit+0xb0>)
 8107d0a:	687b      	ldr	r3, [r7, #4]
 8107d0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8107d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8107d80 <prvHeapInit+0xb0>)
 8107d10:	2200      	movs	r2, #0
 8107d12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8107d14:	687b      	ldr	r3, [r7, #4]
 8107d16:	68ba      	ldr	r2, [r7, #8]
 8107d18:	4413      	add	r3, r2
 8107d1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8107d1c:	2208      	movs	r2, #8
 8107d1e:	68fb      	ldr	r3, [r7, #12]
 8107d20:	1a9b      	subs	r3, r3, r2
 8107d22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8107d24:	68fb      	ldr	r3, [r7, #12]
 8107d26:	f023 0307 	bic.w	r3, r3, #7
 8107d2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8107d2c:	68fb      	ldr	r3, [r7, #12]
 8107d2e:	4a15      	ldr	r2, [pc, #84]	@ (8107d84 <prvHeapInit+0xb4>)
 8107d30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8107d32:	4b14      	ldr	r3, [pc, #80]	@ (8107d84 <prvHeapInit+0xb4>)
 8107d34:	681b      	ldr	r3, [r3, #0]
 8107d36:	2200      	movs	r2, #0
 8107d38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8107d3a:	4b12      	ldr	r3, [pc, #72]	@ (8107d84 <prvHeapInit+0xb4>)
 8107d3c:	681b      	ldr	r3, [r3, #0]
 8107d3e:	2200      	movs	r2, #0
 8107d40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8107d42:	687b      	ldr	r3, [r7, #4]
 8107d44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8107d46:	683b      	ldr	r3, [r7, #0]
 8107d48:	68fa      	ldr	r2, [r7, #12]
 8107d4a:	1ad2      	subs	r2, r2, r3
 8107d4c:	683b      	ldr	r3, [r7, #0]
 8107d4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8107d50:	4b0c      	ldr	r3, [pc, #48]	@ (8107d84 <prvHeapInit+0xb4>)
 8107d52:	681a      	ldr	r2, [r3, #0]
 8107d54:	683b      	ldr	r3, [r7, #0]
 8107d56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8107d58:	683b      	ldr	r3, [r7, #0]
 8107d5a:	685b      	ldr	r3, [r3, #4]
 8107d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8107d88 <prvHeapInit+0xb8>)
 8107d5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8107d60:	683b      	ldr	r3, [r7, #0]
 8107d62:	685b      	ldr	r3, [r3, #4]
 8107d64:	4a09      	ldr	r2, [pc, #36]	@ (8107d8c <prvHeapInit+0xbc>)
 8107d66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8107d68:	4b09      	ldr	r3, [pc, #36]	@ (8107d90 <prvHeapInit+0xc0>)
 8107d6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8107d6e:	601a      	str	r2, [r3, #0]
}
 8107d70:	bf00      	nop
 8107d72:	3714      	adds	r7, #20
 8107d74:	46bd      	mov	sp, r7
 8107d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d7a:	4770      	bx	lr
 8107d7c:	100009f4 	.word	0x100009f4
 8107d80:	1000a9f4 	.word	0x1000a9f4
 8107d84:	1000a9fc 	.word	0x1000a9fc
 8107d88:	1000aa04 	.word	0x1000aa04
 8107d8c:	1000aa00 	.word	0x1000aa00
 8107d90:	1000aa10 	.word	0x1000aa10

08107d94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8107d94:	b480      	push	{r7}
 8107d96:	b085      	sub	sp, #20
 8107d98:	af00      	add	r7, sp, #0
 8107d9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8107d9c:	4b28      	ldr	r3, [pc, #160]	@ (8107e40 <prvInsertBlockIntoFreeList+0xac>)
 8107d9e:	60fb      	str	r3, [r7, #12]
 8107da0:	e002      	b.n	8107da8 <prvInsertBlockIntoFreeList+0x14>
 8107da2:	68fb      	ldr	r3, [r7, #12]
 8107da4:	681b      	ldr	r3, [r3, #0]
 8107da6:	60fb      	str	r3, [r7, #12]
 8107da8:	68fb      	ldr	r3, [r7, #12]
 8107daa:	681b      	ldr	r3, [r3, #0]
 8107dac:	687a      	ldr	r2, [r7, #4]
 8107dae:	429a      	cmp	r2, r3
 8107db0:	d8f7      	bhi.n	8107da2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8107db2:	68fb      	ldr	r3, [r7, #12]
 8107db4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8107db6:	68fb      	ldr	r3, [r7, #12]
 8107db8:	685b      	ldr	r3, [r3, #4]
 8107dba:	68ba      	ldr	r2, [r7, #8]
 8107dbc:	4413      	add	r3, r2
 8107dbe:	687a      	ldr	r2, [r7, #4]
 8107dc0:	429a      	cmp	r2, r3
 8107dc2:	d108      	bne.n	8107dd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8107dc4:	68fb      	ldr	r3, [r7, #12]
 8107dc6:	685a      	ldr	r2, [r3, #4]
 8107dc8:	687b      	ldr	r3, [r7, #4]
 8107dca:	685b      	ldr	r3, [r3, #4]
 8107dcc:	441a      	add	r2, r3
 8107dce:	68fb      	ldr	r3, [r7, #12]
 8107dd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8107dd2:	68fb      	ldr	r3, [r7, #12]
 8107dd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8107dd6:	687b      	ldr	r3, [r7, #4]
 8107dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8107dda:	687b      	ldr	r3, [r7, #4]
 8107ddc:	685b      	ldr	r3, [r3, #4]
 8107dde:	68ba      	ldr	r2, [r7, #8]
 8107de0:	441a      	add	r2, r3
 8107de2:	68fb      	ldr	r3, [r7, #12]
 8107de4:	681b      	ldr	r3, [r3, #0]
 8107de6:	429a      	cmp	r2, r3
 8107de8:	d118      	bne.n	8107e1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8107dea:	68fb      	ldr	r3, [r7, #12]
 8107dec:	681a      	ldr	r2, [r3, #0]
 8107dee:	4b15      	ldr	r3, [pc, #84]	@ (8107e44 <prvInsertBlockIntoFreeList+0xb0>)
 8107df0:	681b      	ldr	r3, [r3, #0]
 8107df2:	429a      	cmp	r2, r3
 8107df4:	d00d      	beq.n	8107e12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8107df6:	687b      	ldr	r3, [r7, #4]
 8107df8:	685a      	ldr	r2, [r3, #4]
 8107dfa:	68fb      	ldr	r3, [r7, #12]
 8107dfc:	681b      	ldr	r3, [r3, #0]
 8107dfe:	685b      	ldr	r3, [r3, #4]
 8107e00:	441a      	add	r2, r3
 8107e02:	687b      	ldr	r3, [r7, #4]
 8107e04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8107e06:	68fb      	ldr	r3, [r7, #12]
 8107e08:	681b      	ldr	r3, [r3, #0]
 8107e0a:	681a      	ldr	r2, [r3, #0]
 8107e0c:	687b      	ldr	r3, [r7, #4]
 8107e0e:	601a      	str	r2, [r3, #0]
 8107e10:	e008      	b.n	8107e24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8107e12:	4b0c      	ldr	r3, [pc, #48]	@ (8107e44 <prvInsertBlockIntoFreeList+0xb0>)
 8107e14:	681a      	ldr	r2, [r3, #0]
 8107e16:	687b      	ldr	r3, [r7, #4]
 8107e18:	601a      	str	r2, [r3, #0]
 8107e1a:	e003      	b.n	8107e24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8107e1c:	68fb      	ldr	r3, [r7, #12]
 8107e1e:	681a      	ldr	r2, [r3, #0]
 8107e20:	687b      	ldr	r3, [r7, #4]
 8107e22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8107e24:	68fa      	ldr	r2, [r7, #12]
 8107e26:	687b      	ldr	r3, [r7, #4]
 8107e28:	429a      	cmp	r2, r3
 8107e2a:	d002      	beq.n	8107e32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8107e2c:	68fb      	ldr	r3, [r7, #12]
 8107e2e:	687a      	ldr	r2, [r7, #4]
 8107e30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8107e32:	bf00      	nop
 8107e34:	3714      	adds	r7, #20
 8107e36:	46bd      	mov	sp, r7
 8107e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e3c:	4770      	bx	lr
 8107e3e:	bf00      	nop
 8107e40:	1000a9f4 	.word	0x1000a9f4
 8107e44:	1000a9fc 	.word	0x1000a9fc

08107e48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8107e48:	b480      	push	{r7}
 8107e4a:	b083      	sub	sp, #12
 8107e4c:	af00      	add	r7, sp, #0
 8107e4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8107e50:	687b      	ldr	r3, [r7, #4]
 8107e52:	f103 0208 	add.w	r2, r3, #8
 8107e56:	687b      	ldr	r3, [r7, #4]
 8107e58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8107e5a:	687b      	ldr	r3, [r7, #4]
 8107e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8107e60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8107e62:	687b      	ldr	r3, [r7, #4]
 8107e64:	f103 0208 	add.w	r2, r3, #8
 8107e68:	687b      	ldr	r3, [r7, #4]
 8107e6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8107e6c:	687b      	ldr	r3, [r7, #4]
 8107e6e:	f103 0208 	add.w	r2, r3, #8
 8107e72:	687b      	ldr	r3, [r7, #4]
 8107e74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8107e76:	687b      	ldr	r3, [r7, #4]
 8107e78:	2200      	movs	r2, #0
 8107e7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8107e7c:	bf00      	nop
 8107e7e:	370c      	adds	r7, #12
 8107e80:	46bd      	mov	sp, r7
 8107e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e86:	4770      	bx	lr

08107e88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8107e88:	b480      	push	{r7}
 8107e8a:	b083      	sub	sp, #12
 8107e8c:	af00      	add	r7, sp, #0
 8107e8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8107e90:	687b      	ldr	r3, [r7, #4]
 8107e92:	2200      	movs	r2, #0
 8107e94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8107e96:	bf00      	nop
 8107e98:	370c      	adds	r7, #12
 8107e9a:	46bd      	mov	sp, r7
 8107e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ea0:	4770      	bx	lr

08107ea2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8107ea2:	b480      	push	{r7}
 8107ea4:	b085      	sub	sp, #20
 8107ea6:	af00      	add	r7, sp, #0
 8107ea8:	6078      	str	r0, [r7, #4]
 8107eaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8107eac:	687b      	ldr	r3, [r7, #4]
 8107eae:	685b      	ldr	r3, [r3, #4]
 8107eb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8107eb2:	683b      	ldr	r3, [r7, #0]
 8107eb4:	68fa      	ldr	r2, [r7, #12]
 8107eb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8107eb8:	68fb      	ldr	r3, [r7, #12]
 8107eba:	689a      	ldr	r2, [r3, #8]
 8107ebc:	683b      	ldr	r3, [r7, #0]
 8107ebe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8107ec0:	68fb      	ldr	r3, [r7, #12]
 8107ec2:	689b      	ldr	r3, [r3, #8]
 8107ec4:	683a      	ldr	r2, [r7, #0]
 8107ec6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8107ec8:	68fb      	ldr	r3, [r7, #12]
 8107eca:	683a      	ldr	r2, [r7, #0]
 8107ecc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8107ece:	683b      	ldr	r3, [r7, #0]
 8107ed0:	687a      	ldr	r2, [r7, #4]
 8107ed2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8107ed4:	687b      	ldr	r3, [r7, #4]
 8107ed6:	681b      	ldr	r3, [r3, #0]
 8107ed8:	1c5a      	adds	r2, r3, #1
 8107eda:	687b      	ldr	r3, [r7, #4]
 8107edc:	601a      	str	r2, [r3, #0]
}
 8107ede:	bf00      	nop
 8107ee0:	3714      	adds	r7, #20
 8107ee2:	46bd      	mov	sp, r7
 8107ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ee8:	4770      	bx	lr

08107eea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8107eea:	b480      	push	{r7}
 8107eec:	b085      	sub	sp, #20
 8107eee:	af00      	add	r7, sp, #0
 8107ef0:	6078      	str	r0, [r7, #4]
 8107ef2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8107ef4:	683b      	ldr	r3, [r7, #0]
 8107ef6:	681b      	ldr	r3, [r3, #0]
 8107ef8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8107efa:	68bb      	ldr	r3, [r7, #8]
 8107efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107f00:	d103      	bne.n	8107f0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8107f02:	687b      	ldr	r3, [r7, #4]
 8107f04:	691b      	ldr	r3, [r3, #16]
 8107f06:	60fb      	str	r3, [r7, #12]
 8107f08:	e00c      	b.n	8107f24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8107f0a:	687b      	ldr	r3, [r7, #4]
 8107f0c:	3308      	adds	r3, #8
 8107f0e:	60fb      	str	r3, [r7, #12]
 8107f10:	e002      	b.n	8107f18 <vListInsert+0x2e>
 8107f12:	68fb      	ldr	r3, [r7, #12]
 8107f14:	685b      	ldr	r3, [r3, #4]
 8107f16:	60fb      	str	r3, [r7, #12]
 8107f18:	68fb      	ldr	r3, [r7, #12]
 8107f1a:	685b      	ldr	r3, [r3, #4]
 8107f1c:	681b      	ldr	r3, [r3, #0]
 8107f1e:	68ba      	ldr	r2, [r7, #8]
 8107f20:	429a      	cmp	r2, r3
 8107f22:	d2f6      	bcs.n	8107f12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8107f24:	68fb      	ldr	r3, [r7, #12]
 8107f26:	685a      	ldr	r2, [r3, #4]
 8107f28:	683b      	ldr	r3, [r7, #0]
 8107f2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8107f2c:	683b      	ldr	r3, [r7, #0]
 8107f2e:	685b      	ldr	r3, [r3, #4]
 8107f30:	683a      	ldr	r2, [r7, #0]
 8107f32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8107f34:	683b      	ldr	r3, [r7, #0]
 8107f36:	68fa      	ldr	r2, [r7, #12]
 8107f38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8107f3a:	68fb      	ldr	r3, [r7, #12]
 8107f3c:	683a      	ldr	r2, [r7, #0]
 8107f3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8107f40:	683b      	ldr	r3, [r7, #0]
 8107f42:	687a      	ldr	r2, [r7, #4]
 8107f44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8107f46:	687b      	ldr	r3, [r7, #4]
 8107f48:	681b      	ldr	r3, [r3, #0]
 8107f4a:	1c5a      	adds	r2, r3, #1
 8107f4c:	687b      	ldr	r3, [r7, #4]
 8107f4e:	601a      	str	r2, [r3, #0]
}
 8107f50:	bf00      	nop
 8107f52:	3714      	adds	r7, #20
 8107f54:	46bd      	mov	sp, r7
 8107f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f5a:	4770      	bx	lr

08107f5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8107f5c:	b480      	push	{r7}
 8107f5e:	b085      	sub	sp, #20
 8107f60:	af00      	add	r7, sp, #0
 8107f62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8107f64:	687b      	ldr	r3, [r7, #4]
 8107f66:	691b      	ldr	r3, [r3, #16]
 8107f68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8107f6a:	687b      	ldr	r3, [r7, #4]
 8107f6c:	685b      	ldr	r3, [r3, #4]
 8107f6e:	687a      	ldr	r2, [r7, #4]
 8107f70:	6892      	ldr	r2, [r2, #8]
 8107f72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8107f74:	687b      	ldr	r3, [r7, #4]
 8107f76:	689b      	ldr	r3, [r3, #8]
 8107f78:	687a      	ldr	r2, [r7, #4]
 8107f7a:	6852      	ldr	r2, [r2, #4]
 8107f7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8107f7e:	68fb      	ldr	r3, [r7, #12]
 8107f80:	685b      	ldr	r3, [r3, #4]
 8107f82:	687a      	ldr	r2, [r7, #4]
 8107f84:	429a      	cmp	r2, r3
 8107f86:	d103      	bne.n	8107f90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8107f88:	687b      	ldr	r3, [r7, #4]
 8107f8a:	689a      	ldr	r2, [r3, #8]
 8107f8c:	68fb      	ldr	r3, [r7, #12]
 8107f8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8107f90:	687b      	ldr	r3, [r7, #4]
 8107f92:	2200      	movs	r2, #0
 8107f94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8107f96:	68fb      	ldr	r3, [r7, #12]
 8107f98:	681b      	ldr	r3, [r3, #0]
 8107f9a:	1e5a      	subs	r2, r3, #1
 8107f9c:	68fb      	ldr	r3, [r7, #12]
 8107f9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8107fa0:	68fb      	ldr	r3, [r7, #12]
 8107fa2:	681b      	ldr	r3, [r3, #0]
}
 8107fa4:	4618      	mov	r0, r3
 8107fa6:	3714      	adds	r7, #20
 8107fa8:	46bd      	mov	sp, r7
 8107faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fae:	4770      	bx	lr

08107fb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8107fb0:	b480      	push	{r7}
 8107fb2:	b085      	sub	sp, #20
 8107fb4:	af00      	add	r7, sp, #0
 8107fb6:	60f8      	str	r0, [r7, #12]
 8107fb8:	60b9      	str	r1, [r7, #8]
 8107fba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8107fbc:	68fb      	ldr	r3, [r7, #12]
 8107fbe:	3b04      	subs	r3, #4
 8107fc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8107fc2:	68fb      	ldr	r3, [r7, #12]
 8107fc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8107fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8107fca:	68fb      	ldr	r3, [r7, #12]
 8107fcc:	3b04      	subs	r3, #4
 8107fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8107fd0:	68bb      	ldr	r3, [r7, #8]
 8107fd2:	f023 0201 	bic.w	r2, r3, #1
 8107fd6:	68fb      	ldr	r3, [r7, #12]
 8107fd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8107fda:	68fb      	ldr	r3, [r7, #12]
 8107fdc:	3b04      	subs	r3, #4
 8107fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8107fe0:	4a0c      	ldr	r2, [pc, #48]	@ (8108014 <pxPortInitialiseStack+0x64>)
 8107fe2:	68fb      	ldr	r3, [r7, #12]
 8107fe4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8107fe6:	68fb      	ldr	r3, [r7, #12]
 8107fe8:	3b14      	subs	r3, #20
 8107fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8107fec:	687a      	ldr	r2, [r7, #4]
 8107fee:	68fb      	ldr	r3, [r7, #12]
 8107ff0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8107ff2:	68fb      	ldr	r3, [r7, #12]
 8107ff4:	3b04      	subs	r3, #4
 8107ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8107ff8:	68fb      	ldr	r3, [r7, #12]
 8107ffa:	f06f 0202 	mvn.w	r2, #2
 8107ffe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8108000:	68fb      	ldr	r3, [r7, #12]
 8108002:	3b20      	subs	r3, #32
 8108004:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8108006:	68fb      	ldr	r3, [r7, #12]
}
 8108008:	4618      	mov	r0, r3
 810800a:	3714      	adds	r7, #20
 810800c:	46bd      	mov	sp, r7
 810800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108012:	4770      	bx	lr
 8108014:	08108019 	.word	0x08108019

08108018 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8108018:	b480      	push	{r7}
 810801a:	b085      	sub	sp, #20
 810801c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810801e:	2300      	movs	r3, #0
 8108020:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8108022:	4b13      	ldr	r3, [pc, #76]	@ (8108070 <prvTaskExitError+0x58>)
 8108024:	681b      	ldr	r3, [r3, #0]
 8108026:	f1b3 3fff 	cmp.w	r3, #4294967295
 810802a:	d00b      	beq.n	8108044 <prvTaskExitError+0x2c>
	__asm volatile
 810802c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108030:	f383 8811 	msr	BASEPRI, r3
 8108034:	f3bf 8f6f 	isb	sy
 8108038:	f3bf 8f4f 	dsb	sy
 810803c:	60fb      	str	r3, [r7, #12]
}
 810803e:	bf00      	nop
 8108040:	bf00      	nop
 8108042:	e7fd      	b.n	8108040 <prvTaskExitError+0x28>
	__asm volatile
 8108044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108048:	f383 8811 	msr	BASEPRI, r3
 810804c:	f3bf 8f6f 	isb	sy
 8108050:	f3bf 8f4f 	dsb	sy
 8108054:	60bb      	str	r3, [r7, #8]
}
 8108056:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8108058:	bf00      	nop
 810805a:	687b      	ldr	r3, [r7, #4]
 810805c:	2b00      	cmp	r3, #0
 810805e:	d0fc      	beq.n	810805a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8108060:	bf00      	nop
 8108062:	bf00      	nop
 8108064:	3714      	adds	r7, #20
 8108066:	46bd      	mov	sp, r7
 8108068:	f85d 7b04 	ldr.w	r7, [sp], #4
 810806c:	4770      	bx	lr
 810806e:	bf00      	nop
 8108070:	10000024 	.word	0x10000024
	...

08108080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8108080:	4b07      	ldr	r3, [pc, #28]	@ (81080a0 <pxCurrentTCBConst2>)
 8108082:	6819      	ldr	r1, [r3, #0]
 8108084:	6808      	ldr	r0, [r1, #0]
 8108086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810808a:	f380 8809 	msr	PSP, r0
 810808e:	f3bf 8f6f 	isb	sy
 8108092:	f04f 0000 	mov.w	r0, #0
 8108096:	f380 8811 	msr	BASEPRI, r0
 810809a:	4770      	bx	lr
 810809c:	f3af 8000 	nop.w

081080a0 <pxCurrentTCBConst2>:
 81080a0:	1000aa5c 	.word	0x1000aa5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81080a4:	bf00      	nop
 81080a6:	bf00      	nop

081080a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 81080a8:	4808      	ldr	r0, [pc, #32]	@ (81080cc <prvPortStartFirstTask+0x24>)
 81080aa:	6800      	ldr	r0, [r0, #0]
 81080ac:	6800      	ldr	r0, [r0, #0]
 81080ae:	f380 8808 	msr	MSP, r0
 81080b2:	f04f 0000 	mov.w	r0, #0
 81080b6:	f380 8814 	msr	CONTROL, r0
 81080ba:	b662      	cpsie	i
 81080bc:	b661      	cpsie	f
 81080be:	f3bf 8f4f 	dsb	sy
 81080c2:	f3bf 8f6f 	isb	sy
 81080c6:	df00      	svc	0
 81080c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81080ca:	bf00      	nop
 81080cc:	e000ed08 	.word	0xe000ed08

081080d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 81080d0:	b580      	push	{r7, lr}
 81080d2:	b086      	sub	sp, #24
 81080d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 81080d6:	4b47      	ldr	r3, [pc, #284]	@ (81081f4 <xPortStartScheduler+0x124>)
 81080d8:	681b      	ldr	r3, [r3, #0]
 81080da:	4a47      	ldr	r2, [pc, #284]	@ (81081f8 <xPortStartScheduler+0x128>)
 81080dc:	4293      	cmp	r3, r2
 81080de:	d10b      	bne.n	81080f8 <xPortStartScheduler+0x28>
	__asm volatile
 81080e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81080e4:	f383 8811 	msr	BASEPRI, r3
 81080e8:	f3bf 8f6f 	isb	sy
 81080ec:	f3bf 8f4f 	dsb	sy
 81080f0:	613b      	str	r3, [r7, #16]
}
 81080f2:	bf00      	nop
 81080f4:	bf00      	nop
 81080f6:	e7fd      	b.n	81080f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 81080f8:	4b3e      	ldr	r3, [pc, #248]	@ (81081f4 <xPortStartScheduler+0x124>)
 81080fa:	681b      	ldr	r3, [r3, #0]
 81080fc:	4a3f      	ldr	r2, [pc, #252]	@ (81081fc <xPortStartScheduler+0x12c>)
 81080fe:	4293      	cmp	r3, r2
 8108100:	d10b      	bne.n	810811a <xPortStartScheduler+0x4a>
	__asm volatile
 8108102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108106:	f383 8811 	msr	BASEPRI, r3
 810810a:	f3bf 8f6f 	isb	sy
 810810e:	f3bf 8f4f 	dsb	sy
 8108112:	60fb      	str	r3, [r7, #12]
}
 8108114:	bf00      	nop
 8108116:	bf00      	nop
 8108118:	e7fd      	b.n	8108116 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810811a:	4b39      	ldr	r3, [pc, #228]	@ (8108200 <xPortStartScheduler+0x130>)
 810811c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810811e:	697b      	ldr	r3, [r7, #20]
 8108120:	781b      	ldrb	r3, [r3, #0]
 8108122:	b2db      	uxtb	r3, r3
 8108124:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8108126:	697b      	ldr	r3, [r7, #20]
 8108128:	22ff      	movs	r2, #255	@ 0xff
 810812a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810812c:	697b      	ldr	r3, [r7, #20]
 810812e:	781b      	ldrb	r3, [r3, #0]
 8108130:	b2db      	uxtb	r3, r3
 8108132:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8108134:	78fb      	ldrb	r3, [r7, #3]
 8108136:	b2db      	uxtb	r3, r3
 8108138:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810813c:	b2da      	uxtb	r2, r3
 810813e:	4b31      	ldr	r3, [pc, #196]	@ (8108204 <xPortStartScheduler+0x134>)
 8108140:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8108142:	4b31      	ldr	r3, [pc, #196]	@ (8108208 <xPortStartScheduler+0x138>)
 8108144:	2207      	movs	r2, #7
 8108146:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8108148:	e009      	b.n	810815e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810814a:	4b2f      	ldr	r3, [pc, #188]	@ (8108208 <xPortStartScheduler+0x138>)
 810814c:	681b      	ldr	r3, [r3, #0]
 810814e:	3b01      	subs	r3, #1
 8108150:	4a2d      	ldr	r2, [pc, #180]	@ (8108208 <xPortStartScheduler+0x138>)
 8108152:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8108154:	78fb      	ldrb	r3, [r7, #3]
 8108156:	b2db      	uxtb	r3, r3
 8108158:	005b      	lsls	r3, r3, #1
 810815a:	b2db      	uxtb	r3, r3
 810815c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810815e:	78fb      	ldrb	r3, [r7, #3]
 8108160:	b2db      	uxtb	r3, r3
 8108162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108166:	2b80      	cmp	r3, #128	@ 0x80
 8108168:	d0ef      	beq.n	810814a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810816a:	4b27      	ldr	r3, [pc, #156]	@ (8108208 <xPortStartScheduler+0x138>)
 810816c:	681b      	ldr	r3, [r3, #0]
 810816e:	f1c3 0307 	rsb	r3, r3, #7
 8108172:	2b04      	cmp	r3, #4
 8108174:	d00b      	beq.n	810818e <xPortStartScheduler+0xbe>
	__asm volatile
 8108176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810817a:	f383 8811 	msr	BASEPRI, r3
 810817e:	f3bf 8f6f 	isb	sy
 8108182:	f3bf 8f4f 	dsb	sy
 8108186:	60bb      	str	r3, [r7, #8]
}
 8108188:	bf00      	nop
 810818a:	bf00      	nop
 810818c:	e7fd      	b.n	810818a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810818e:	4b1e      	ldr	r3, [pc, #120]	@ (8108208 <xPortStartScheduler+0x138>)
 8108190:	681b      	ldr	r3, [r3, #0]
 8108192:	021b      	lsls	r3, r3, #8
 8108194:	4a1c      	ldr	r2, [pc, #112]	@ (8108208 <xPortStartScheduler+0x138>)
 8108196:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8108198:	4b1b      	ldr	r3, [pc, #108]	@ (8108208 <xPortStartScheduler+0x138>)
 810819a:	681b      	ldr	r3, [r3, #0]
 810819c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 81081a0:	4a19      	ldr	r2, [pc, #100]	@ (8108208 <xPortStartScheduler+0x138>)
 81081a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 81081a4:	687b      	ldr	r3, [r7, #4]
 81081a6:	b2da      	uxtb	r2, r3
 81081a8:	697b      	ldr	r3, [r7, #20]
 81081aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 81081ac:	4b17      	ldr	r3, [pc, #92]	@ (810820c <xPortStartScheduler+0x13c>)
 81081ae:	681b      	ldr	r3, [r3, #0]
 81081b0:	4a16      	ldr	r2, [pc, #88]	@ (810820c <xPortStartScheduler+0x13c>)
 81081b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81081b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 81081b8:	4b14      	ldr	r3, [pc, #80]	@ (810820c <xPortStartScheduler+0x13c>)
 81081ba:	681b      	ldr	r3, [r3, #0]
 81081bc:	4a13      	ldr	r2, [pc, #76]	@ (810820c <xPortStartScheduler+0x13c>)
 81081be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 81081c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81081c4:	f000 f8da 	bl	810837c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81081c8:	4b11      	ldr	r3, [pc, #68]	@ (8108210 <xPortStartScheduler+0x140>)
 81081ca:	2200      	movs	r2, #0
 81081cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81081ce:	f000 f8f9 	bl	81083c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 81081d2:	4b10      	ldr	r3, [pc, #64]	@ (8108214 <xPortStartScheduler+0x144>)
 81081d4:	681b      	ldr	r3, [r3, #0]
 81081d6:	4a0f      	ldr	r2, [pc, #60]	@ (8108214 <xPortStartScheduler+0x144>)
 81081d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 81081dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 81081de:	f7ff ff63 	bl	81080a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81081e2:	f002 f8a5 	bl	810a330 <vTaskSwitchContext>
	prvTaskExitError();
 81081e6:	f7ff ff17 	bl	8108018 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81081ea:	2300      	movs	r3, #0
}
 81081ec:	4618      	mov	r0, r3
 81081ee:	3718      	adds	r7, #24
 81081f0:	46bd      	mov	sp, r7
 81081f2:	bd80      	pop	{r7, pc}
 81081f4:	e000ed00 	.word	0xe000ed00
 81081f8:	410fc271 	.word	0x410fc271
 81081fc:	410fc270 	.word	0x410fc270
 8108200:	e000e400 	.word	0xe000e400
 8108204:	1000aa14 	.word	0x1000aa14
 8108208:	1000aa18 	.word	0x1000aa18
 810820c:	e000ed20 	.word	0xe000ed20
 8108210:	10000024 	.word	0x10000024
 8108214:	e000ef34 	.word	0xe000ef34

08108218 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8108218:	b480      	push	{r7}
 810821a:	b083      	sub	sp, #12
 810821c:	af00      	add	r7, sp, #0
	__asm volatile
 810821e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108222:	f383 8811 	msr	BASEPRI, r3
 8108226:	f3bf 8f6f 	isb	sy
 810822a:	f3bf 8f4f 	dsb	sy
 810822e:	607b      	str	r3, [r7, #4]
}
 8108230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8108232:	4b10      	ldr	r3, [pc, #64]	@ (8108274 <vPortEnterCritical+0x5c>)
 8108234:	681b      	ldr	r3, [r3, #0]
 8108236:	3301      	adds	r3, #1
 8108238:	4a0e      	ldr	r2, [pc, #56]	@ (8108274 <vPortEnterCritical+0x5c>)
 810823a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810823c:	4b0d      	ldr	r3, [pc, #52]	@ (8108274 <vPortEnterCritical+0x5c>)
 810823e:	681b      	ldr	r3, [r3, #0]
 8108240:	2b01      	cmp	r3, #1
 8108242:	d110      	bne.n	8108266 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8108244:	4b0c      	ldr	r3, [pc, #48]	@ (8108278 <vPortEnterCritical+0x60>)
 8108246:	681b      	ldr	r3, [r3, #0]
 8108248:	b2db      	uxtb	r3, r3
 810824a:	2b00      	cmp	r3, #0
 810824c:	d00b      	beq.n	8108266 <vPortEnterCritical+0x4e>
	__asm volatile
 810824e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108252:	f383 8811 	msr	BASEPRI, r3
 8108256:	f3bf 8f6f 	isb	sy
 810825a:	f3bf 8f4f 	dsb	sy
 810825e:	603b      	str	r3, [r7, #0]
}
 8108260:	bf00      	nop
 8108262:	bf00      	nop
 8108264:	e7fd      	b.n	8108262 <vPortEnterCritical+0x4a>
	}
}
 8108266:	bf00      	nop
 8108268:	370c      	adds	r7, #12
 810826a:	46bd      	mov	sp, r7
 810826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108270:	4770      	bx	lr
 8108272:	bf00      	nop
 8108274:	10000024 	.word	0x10000024
 8108278:	e000ed04 	.word	0xe000ed04

0810827c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810827c:	b480      	push	{r7}
 810827e:	b083      	sub	sp, #12
 8108280:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8108282:	4b12      	ldr	r3, [pc, #72]	@ (81082cc <vPortExitCritical+0x50>)
 8108284:	681b      	ldr	r3, [r3, #0]
 8108286:	2b00      	cmp	r3, #0
 8108288:	d10b      	bne.n	81082a2 <vPortExitCritical+0x26>
	__asm volatile
 810828a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810828e:	f383 8811 	msr	BASEPRI, r3
 8108292:	f3bf 8f6f 	isb	sy
 8108296:	f3bf 8f4f 	dsb	sy
 810829a:	607b      	str	r3, [r7, #4]
}
 810829c:	bf00      	nop
 810829e:	bf00      	nop
 81082a0:	e7fd      	b.n	810829e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 81082a2:	4b0a      	ldr	r3, [pc, #40]	@ (81082cc <vPortExitCritical+0x50>)
 81082a4:	681b      	ldr	r3, [r3, #0]
 81082a6:	3b01      	subs	r3, #1
 81082a8:	4a08      	ldr	r2, [pc, #32]	@ (81082cc <vPortExitCritical+0x50>)
 81082aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 81082ac:	4b07      	ldr	r3, [pc, #28]	@ (81082cc <vPortExitCritical+0x50>)
 81082ae:	681b      	ldr	r3, [r3, #0]
 81082b0:	2b00      	cmp	r3, #0
 81082b2:	d105      	bne.n	81082c0 <vPortExitCritical+0x44>
 81082b4:	2300      	movs	r3, #0
 81082b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81082b8:	683b      	ldr	r3, [r7, #0]
 81082ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 81082be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 81082c0:	bf00      	nop
 81082c2:	370c      	adds	r7, #12
 81082c4:	46bd      	mov	sp, r7
 81082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082ca:	4770      	bx	lr
 81082cc:	10000024 	.word	0x10000024

081082d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81082d0:	f3ef 8009 	mrs	r0, PSP
 81082d4:	f3bf 8f6f 	isb	sy
 81082d8:	4b15      	ldr	r3, [pc, #84]	@ (8108330 <pxCurrentTCBConst>)
 81082da:	681a      	ldr	r2, [r3, #0]
 81082dc:	f01e 0f10 	tst.w	lr, #16
 81082e0:	bf08      	it	eq
 81082e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81082e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81082ea:	6010      	str	r0, [r2, #0]
 81082ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 81082f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 81082f4:	f380 8811 	msr	BASEPRI, r0
 81082f8:	f3bf 8f4f 	dsb	sy
 81082fc:	f3bf 8f6f 	isb	sy
 8108300:	f002 f816 	bl	810a330 <vTaskSwitchContext>
 8108304:	f04f 0000 	mov.w	r0, #0
 8108308:	f380 8811 	msr	BASEPRI, r0
 810830c:	bc09      	pop	{r0, r3}
 810830e:	6819      	ldr	r1, [r3, #0]
 8108310:	6808      	ldr	r0, [r1, #0]
 8108312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108316:	f01e 0f10 	tst.w	lr, #16
 810831a:	bf08      	it	eq
 810831c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8108320:	f380 8809 	msr	PSP, r0
 8108324:	f3bf 8f6f 	isb	sy
 8108328:	4770      	bx	lr
 810832a:	bf00      	nop
 810832c:	f3af 8000 	nop.w

08108330 <pxCurrentTCBConst>:
 8108330:	1000aa5c 	.word	0x1000aa5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8108334:	bf00      	nop
 8108336:	bf00      	nop

08108338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8108338:	b580      	push	{r7, lr}
 810833a:	b082      	sub	sp, #8
 810833c:	af00      	add	r7, sp, #0
	__asm volatile
 810833e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108342:	f383 8811 	msr	BASEPRI, r3
 8108346:	f3bf 8f6f 	isb	sy
 810834a:	f3bf 8f4f 	dsb	sy
 810834e:	607b      	str	r3, [r7, #4]
}
 8108350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8108352:	f001 ff33 	bl	810a1bc <xTaskIncrementTick>
 8108356:	4603      	mov	r3, r0
 8108358:	2b00      	cmp	r3, #0
 810835a:	d003      	beq.n	8108364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810835c:	4b06      	ldr	r3, [pc, #24]	@ (8108378 <xPortSysTickHandler+0x40>)
 810835e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8108362:	601a      	str	r2, [r3, #0]
 8108364:	2300      	movs	r3, #0
 8108366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8108368:	683b      	ldr	r3, [r7, #0]
 810836a:	f383 8811 	msr	BASEPRI, r3
}
 810836e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8108370:	bf00      	nop
 8108372:	3708      	adds	r7, #8
 8108374:	46bd      	mov	sp, r7
 8108376:	bd80      	pop	{r7, pc}
 8108378:	e000ed04 	.word	0xe000ed04

0810837c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810837c:	b480      	push	{r7}
 810837e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8108380:	4b0b      	ldr	r3, [pc, #44]	@ (81083b0 <vPortSetupTimerInterrupt+0x34>)
 8108382:	2200      	movs	r2, #0
 8108384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8108386:	4b0b      	ldr	r3, [pc, #44]	@ (81083b4 <vPortSetupTimerInterrupt+0x38>)
 8108388:	2200      	movs	r2, #0
 810838a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810838c:	4b0a      	ldr	r3, [pc, #40]	@ (81083b8 <vPortSetupTimerInterrupt+0x3c>)
 810838e:	681b      	ldr	r3, [r3, #0]
 8108390:	4a0a      	ldr	r2, [pc, #40]	@ (81083bc <vPortSetupTimerInterrupt+0x40>)
 8108392:	fba2 2303 	umull	r2, r3, r2, r3
 8108396:	099b      	lsrs	r3, r3, #6
 8108398:	4a09      	ldr	r2, [pc, #36]	@ (81083c0 <vPortSetupTimerInterrupt+0x44>)
 810839a:	3b01      	subs	r3, #1
 810839c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810839e:	4b04      	ldr	r3, [pc, #16]	@ (81083b0 <vPortSetupTimerInterrupt+0x34>)
 81083a0:	2207      	movs	r2, #7
 81083a2:	601a      	str	r2, [r3, #0]
}
 81083a4:	bf00      	nop
 81083a6:	46bd      	mov	sp, r7
 81083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083ac:	4770      	bx	lr
 81083ae:	bf00      	nop
 81083b0:	e000e010 	.word	0xe000e010
 81083b4:	e000e018 	.word	0xe000e018
 81083b8:	10000018 	.word	0x10000018
 81083bc:	10624dd3 	.word	0x10624dd3
 81083c0:	e000e014 	.word	0xe000e014

081083c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81083c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 81083d4 <vPortEnableVFP+0x10>
 81083c8:	6801      	ldr	r1, [r0, #0]
 81083ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81083ce:	6001      	str	r1, [r0, #0]
 81083d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81083d2:	bf00      	nop
 81083d4:	e000ed88 	.word	0xe000ed88

081083d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 81083d8:	b480      	push	{r7}
 81083da:	b085      	sub	sp, #20
 81083dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 81083de:	f3ef 8305 	mrs	r3, IPSR
 81083e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 81083e4:	68fb      	ldr	r3, [r7, #12]
 81083e6:	2b0f      	cmp	r3, #15
 81083e8:	d915      	bls.n	8108416 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 81083ea:	4a18      	ldr	r2, [pc, #96]	@ (810844c <vPortValidateInterruptPriority+0x74>)
 81083ec:	68fb      	ldr	r3, [r7, #12]
 81083ee:	4413      	add	r3, r2
 81083f0:	781b      	ldrb	r3, [r3, #0]
 81083f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 81083f4:	4b16      	ldr	r3, [pc, #88]	@ (8108450 <vPortValidateInterruptPriority+0x78>)
 81083f6:	781b      	ldrb	r3, [r3, #0]
 81083f8:	7afa      	ldrb	r2, [r7, #11]
 81083fa:	429a      	cmp	r2, r3
 81083fc:	d20b      	bcs.n	8108416 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 81083fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108402:	f383 8811 	msr	BASEPRI, r3
 8108406:	f3bf 8f6f 	isb	sy
 810840a:	f3bf 8f4f 	dsb	sy
 810840e:	607b      	str	r3, [r7, #4]
}
 8108410:	bf00      	nop
 8108412:	bf00      	nop
 8108414:	e7fd      	b.n	8108412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8108416:	4b0f      	ldr	r3, [pc, #60]	@ (8108454 <vPortValidateInterruptPriority+0x7c>)
 8108418:	681b      	ldr	r3, [r3, #0]
 810841a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810841e:	4b0e      	ldr	r3, [pc, #56]	@ (8108458 <vPortValidateInterruptPriority+0x80>)
 8108420:	681b      	ldr	r3, [r3, #0]
 8108422:	429a      	cmp	r2, r3
 8108424:	d90b      	bls.n	810843e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8108426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810842a:	f383 8811 	msr	BASEPRI, r3
 810842e:	f3bf 8f6f 	isb	sy
 8108432:	f3bf 8f4f 	dsb	sy
 8108436:	603b      	str	r3, [r7, #0]
}
 8108438:	bf00      	nop
 810843a:	bf00      	nop
 810843c:	e7fd      	b.n	810843a <vPortValidateInterruptPriority+0x62>
	}
 810843e:	bf00      	nop
 8108440:	3714      	adds	r7, #20
 8108442:	46bd      	mov	sp, r7
 8108444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108448:	4770      	bx	lr
 810844a:	bf00      	nop
 810844c:	e000e3f0 	.word	0xe000e3f0
 8108450:	1000aa14 	.word	0x1000aa14
 8108454:	e000ed0c 	.word	0xe000ed0c
 8108458:	1000aa18 	.word	0x1000aa18

0810845c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810845c:	b580      	push	{r7, lr}
 810845e:	b084      	sub	sp, #16
 8108460:	af00      	add	r7, sp, #0
 8108462:	6078      	str	r0, [r7, #4]
 8108464:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8108466:	687b      	ldr	r3, [r7, #4]
 8108468:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810846a:	68fb      	ldr	r3, [r7, #12]
 810846c:	2b00      	cmp	r3, #0
 810846e:	d10b      	bne.n	8108488 <xQueueGenericReset+0x2c>
	__asm volatile
 8108470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108474:	f383 8811 	msr	BASEPRI, r3
 8108478:	f3bf 8f6f 	isb	sy
 810847c:	f3bf 8f4f 	dsb	sy
 8108480:	60bb      	str	r3, [r7, #8]
}
 8108482:	bf00      	nop
 8108484:	bf00      	nop
 8108486:	e7fd      	b.n	8108484 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8108488:	f7ff fec6 	bl	8108218 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810848c:	68fb      	ldr	r3, [r7, #12]
 810848e:	681a      	ldr	r2, [r3, #0]
 8108490:	68fb      	ldr	r3, [r7, #12]
 8108492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108494:	68f9      	ldr	r1, [r7, #12]
 8108496:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8108498:	fb01 f303 	mul.w	r3, r1, r3
 810849c:	441a      	add	r2, r3
 810849e:	68fb      	ldr	r3, [r7, #12]
 81084a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 81084a2:	68fb      	ldr	r3, [r7, #12]
 81084a4:	2200      	movs	r2, #0
 81084a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 81084a8:	68fb      	ldr	r3, [r7, #12]
 81084aa:	681a      	ldr	r2, [r3, #0]
 81084ac:	68fb      	ldr	r3, [r7, #12]
 81084ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81084b0:	68fb      	ldr	r3, [r7, #12]
 81084b2:	681a      	ldr	r2, [r3, #0]
 81084b4:	68fb      	ldr	r3, [r7, #12]
 81084b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81084b8:	3b01      	subs	r3, #1
 81084ba:	68f9      	ldr	r1, [r7, #12]
 81084bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 81084be:	fb01 f303 	mul.w	r3, r1, r3
 81084c2:	441a      	add	r2, r3
 81084c4:	68fb      	ldr	r3, [r7, #12]
 81084c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 81084c8:	68fb      	ldr	r3, [r7, #12]
 81084ca:	22ff      	movs	r2, #255	@ 0xff
 81084cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 81084d0:	68fb      	ldr	r3, [r7, #12]
 81084d2:	22ff      	movs	r2, #255	@ 0xff
 81084d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 81084d8:	683b      	ldr	r3, [r7, #0]
 81084da:	2b00      	cmp	r3, #0
 81084dc:	d114      	bne.n	8108508 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81084de:	68fb      	ldr	r3, [r7, #12]
 81084e0:	691b      	ldr	r3, [r3, #16]
 81084e2:	2b00      	cmp	r3, #0
 81084e4:	d01a      	beq.n	810851c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81084e6:	68fb      	ldr	r3, [r7, #12]
 81084e8:	3310      	adds	r3, #16
 81084ea:	4618      	mov	r0, r3
 81084ec:	f001 ffd8 	bl	810a4a0 <xTaskRemoveFromEventList>
 81084f0:	4603      	mov	r3, r0
 81084f2:	2b00      	cmp	r3, #0
 81084f4:	d012      	beq.n	810851c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 81084f6:	4b0d      	ldr	r3, [pc, #52]	@ (810852c <xQueueGenericReset+0xd0>)
 81084f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81084fc:	601a      	str	r2, [r3, #0]
 81084fe:	f3bf 8f4f 	dsb	sy
 8108502:	f3bf 8f6f 	isb	sy
 8108506:	e009      	b.n	810851c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8108508:	68fb      	ldr	r3, [r7, #12]
 810850a:	3310      	adds	r3, #16
 810850c:	4618      	mov	r0, r3
 810850e:	f7ff fc9b 	bl	8107e48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8108512:	68fb      	ldr	r3, [r7, #12]
 8108514:	3324      	adds	r3, #36	@ 0x24
 8108516:	4618      	mov	r0, r3
 8108518:	f7ff fc96 	bl	8107e48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810851c:	f7ff feae 	bl	810827c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8108520:	2301      	movs	r3, #1
}
 8108522:	4618      	mov	r0, r3
 8108524:	3710      	adds	r7, #16
 8108526:	46bd      	mov	sp, r7
 8108528:	bd80      	pop	{r7, pc}
 810852a:	bf00      	nop
 810852c:	e000ed04 	.word	0xe000ed04

08108530 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8108530:	b580      	push	{r7, lr}
 8108532:	b08e      	sub	sp, #56	@ 0x38
 8108534:	af02      	add	r7, sp, #8
 8108536:	60f8      	str	r0, [r7, #12]
 8108538:	60b9      	str	r1, [r7, #8]
 810853a:	607a      	str	r2, [r7, #4]
 810853c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810853e:	68fb      	ldr	r3, [r7, #12]
 8108540:	2b00      	cmp	r3, #0
 8108542:	d10b      	bne.n	810855c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8108544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108548:	f383 8811 	msr	BASEPRI, r3
 810854c:	f3bf 8f6f 	isb	sy
 8108550:	f3bf 8f4f 	dsb	sy
 8108554:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8108556:	bf00      	nop
 8108558:	bf00      	nop
 810855a:	e7fd      	b.n	8108558 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810855c:	683b      	ldr	r3, [r7, #0]
 810855e:	2b00      	cmp	r3, #0
 8108560:	d10b      	bne.n	810857a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8108562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108566:	f383 8811 	msr	BASEPRI, r3
 810856a:	f3bf 8f6f 	isb	sy
 810856e:	f3bf 8f4f 	dsb	sy
 8108572:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8108574:	bf00      	nop
 8108576:	bf00      	nop
 8108578:	e7fd      	b.n	8108576 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810857a:	687b      	ldr	r3, [r7, #4]
 810857c:	2b00      	cmp	r3, #0
 810857e:	d002      	beq.n	8108586 <xQueueGenericCreateStatic+0x56>
 8108580:	68bb      	ldr	r3, [r7, #8]
 8108582:	2b00      	cmp	r3, #0
 8108584:	d001      	beq.n	810858a <xQueueGenericCreateStatic+0x5a>
 8108586:	2301      	movs	r3, #1
 8108588:	e000      	b.n	810858c <xQueueGenericCreateStatic+0x5c>
 810858a:	2300      	movs	r3, #0
 810858c:	2b00      	cmp	r3, #0
 810858e:	d10b      	bne.n	81085a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8108590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108594:	f383 8811 	msr	BASEPRI, r3
 8108598:	f3bf 8f6f 	isb	sy
 810859c:	f3bf 8f4f 	dsb	sy
 81085a0:	623b      	str	r3, [r7, #32]
}
 81085a2:	bf00      	nop
 81085a4:	bf00      	nop
 81085a6:	e7fd      	b.n	81085a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 81085a8:	687b      	ldr	r3, [r7, #4]
 81085aa:	2b00      	cmp	r3, #0
 81085ac:	d102      	bne.n	81085b4 <xQueueGenericCreateStatic+0x84>
 81085ae:	68bb      	ldr	r3, [r7, #8]
 81085b0:	2b00      	cmp	r3, #0
 81085b2:	d101      	bne.n	81085b8 <xQueueGenericCreateStatic+0x88>
 81085b4:	2301      	movs	r3, #1
 81085b6:	e000      	b.n	81085ba <xQueueGenericCreateStatic+0x8a>
 81085b8:	2300      	movs	r3, #0
 81085ba:	2b00      	cmp	r3, #0
 81085bc:	d10b      	bne.n	81085d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 81085be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81085c2:	f383 8811 	msr	BASEPRI, r3
 81085c6:	f3bf 8f6f 	isb	sy
 81085ca:	f3bf 8f4f 	dsb	sy
 81085ce:	61fb      	str	r3, [r7, #28]
}
 81085d0:	bf00      	nop
 81085d2:	bf00      	nop
 81085d4:	e7fd      	b.n	81085d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 81085d6:	2350      	movs	r3, #80	@ 0x50
 81085d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 81085da:	697b      	ldr	r3, [r7, #20]
 81085dc:	2b50      	cmp	r3, #80	@ 0x50
 81085de:	d00b      	beq.n	81085f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 81085e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81085e4:	f383 8811 	msr	BASEPRI, r3
 81085e8:	f3bf 8f6f 	isb	sy
 81085ec:	f3bf 8f4f 	dsb	sy
 81085f0:	61bb      	str	r3, [r7, #24]
}
 81085f2:	bf00      	nop
 81085f4:	bf00      	nop
 81085f6:	e7fd      	b.n	81085f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 81085f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81085fa:	683b      	ldr	r3, [r7, #0]
 81085fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 81085fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108600:	2b00      	cmp	r3, #0
 8108602:	d00d      	beq.n	8108620 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8108604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108606:	2201      	movs	r2, #1
 8108608:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810860c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8108610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108612:	9300      	str	r3, [sp, #0]
 8108614:	4613      	mov	r3, r2
 8108616:	687a      	ldr	r2, [r7, #4]
 8108618:	68b9      	ldr	r1, [r7, #8]
 810861a:	68f8      	ldr	r0, [r7, #12]
 810861c:	f000 f840 	bl	81086a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8108620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8108622:	4618      	mov	r0, r3
 8108624:	3730      	adds	r7, #48	@ 0x30
 8108626:	46bd      	mov	sp, r7
 8108628:	bd80      	pop	{r7, pc}

0810862a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810862a:	b580      	push	{r7, lr}
 810862c:	b08a      	sub	sp, #40	@ 0x28
 810862e:	af02      	add	r7, sp, #8
 8108630:	60f8      	str	r0, [r7, #12]
 8108632:	60b9      	str	r1, [r7, #8]
 8108634:	4613      	mov	r3, r2
 8108636:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8108638:	68fb      	ldr	r3, [r7, #12]
 810863a:	2b00      	cmp	r3, #0
 810863c:	d10b      	bne.n	8108656 <xQueueGenericCreate+0x2c>
	__asm volatile
 810863e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108642:	f383 8811 	msr	BASEPRI, r3
 8108646:	f3bf 8f6f 	isb	sy
 810864a:	f3bf 8f4f 	dsb	sy
 810864e:	613b      	str	r3, [r7, #16]
}
 8108650:	bf00      	nop
 8108652:	bf00      	nop
 8108654:	e7fd      	b.n	8108652 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8108656:	68fb      	ldr	r3, [r7, #12]
 8108658:	68ba      	ldr	r2, [r7, #8]
 810865a:	fb02 f303 	mul.w	r3, r2, r3
 810865e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8108660:	69fb      	ldr	r3, [r7, #28]
 8108662:	3350      	adds	r3, #80	@ 0x50
 8108664:	4618      	mov	r0, r3
 8108666:	f7ff f9f5 	bl	8107a54 <pvPortMalloc>
 810866a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810866c:	69bb      	ldr	r3, [r7, #24]
 810866e:	2b00      	cmp	r3, #0
 8108670:	d011      	beq.n	8108696 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8108672:	69bb      	ldr	r3, [r7, #24]
 8108674:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8108676:	697b      	ldr	r3, [r7, #20]
 8108678:	3350      	adds	r3, #80	@ 0x50
 810867a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810867c:	69bb      	ldr	r3, [r7, #24]
 810867e:	2200      	movs	r2, #0
 8108680:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8108684:	79fa      	ldrb	r2, [r7, #7]
 8108686:	69bb      	ldr	r3, [r7, #24]
 8108688:	9300      	str	r3, [sp, #0]
 810868a:	4613      	mov	r3, r2
 810868c:	697a      	ldr	r2, [r7, #20]
 810868e:	68b9      	ldr	r1, [r7, #8]
 8108690:	68f8      	ldr	r0, [r7, #12]
 8108692:	f000 f805 	bl	81086a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8108696:	69bb      	ldr	r3, [r7, #24]
	}
 8108698:	4618      	mov	r0, r3
 810869a:	3720      	adds	r7, #32
 810869c:	46bd      	mov	sp, r7
 810869e:	bd80      	pop	{r7, pc}

081086a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 81086a0:	b580      	push	{r7, lr}
 81086a2:	b084      	sub	sp, #16
 81086a4:	af00      	add	r7, sp, #0
 81086a6:	60f8      	str	r0, [r7, #12]
 81086a8:	60b9      	str	r1, [r7, #8]
 81086aa:	607a      	str	r2, [r7, #4]
 81086ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 81086ae:	68bb      	ldr	r3, [r7, #8]
 81086b0:	2b00      	cmp	r3, #0
 81086b2:	d103      	bne.n	81086bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 81086b4:	69bb      	ldr	r3, [r7, #24]
 81086b6:	69ba      	ldr	r2, [r7, #24]
 81086b8:	601a      	str	r2, [r3, #0]
 81086ba:	e002      	b.n	81086c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 81086bc:	69bb      	ldr	r3, [r7, #24]
 81086be:	687a      	ldr	r2, [r7, #4]
 81086c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 81086c2:	69bb      	ldr	r3, [r7, #24]
 81086c4:	68fa      	ldr	r2, [r7, #12]
 81086c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 81086c8:	69bb      	ldr	r3, [r7, #24]
 81086ca:	68ba      	ldr	r2, [r7, #8]
 81086cc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 81086ce:	2101      	movs	r1, #1
 81086d0:	69b8      	ldr	r0, [r7, #24]
 81086d2:	f7ff fec3 	bl	810845c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 81086d6:	69bb      	ldr	r3, [r7, #24]
 81086d8:	78fa      	ldrb	r2, [r7, #3]
 81086da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 81086de:	bf00      	nop
 81086e0:	3710      	adds	r7, #16
 81086e2:	46bd      	mov	sp, r7
 81086e4:	bd80      	pop	{r7, pc}

081086e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 81086e6:	b580      	push	{r7, lr}
 81086e8:	b082      	sub	sp, #8
 81086ea:	af00      	add	r7, sp, #0
 81086ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 81086ee:	687b      	ldr	r3, [r7, #4]
 81086f0:	2b00      	cmp	r3, #0
 81086f2:	d00e      	beq.n	8108712 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 81086f4:	687b      	ldr	r3, [r7, #4]
 81086f6:	2200      	movs	r2, #0
 81086f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 81086fa:	687b      	ldr	r3, [r7, #4]
 81086fc:	2200      	movs	r2, #0
 81086fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8108700:	687b      	ldr	r3, [r7, #4]
 8108702:	2200      	movs	r2, #0
 8108704:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8108706:	2300      	movs	r3, #0
 8108708:	2200      	movs	r2, #0
 810870a:	2100      	movs	r1, #0
 810870c:	6878      	ldr	r0, [r7, #4]
 810870e:	f000 f911 	bl	8108934 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8108712:	bf00      	nop
 8108714:	3708      	adds	r7, #8
 8108716:	46bd      	mov	sp, r7
 8108718:	bd80      	pop	{r7, pc}

0810871a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 810871a:	b580      	push	{r7, lr}
 810871c:	b086      	sub	sp, #24
 810871e:	af00      	add	r7, sp, #0
 8108720:	4603      	mov	r3, r0
 8108722:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8108724:	2301      	movs	r3, #1
 8108726:	617b      	str	r3, [r7, #20]
 8108728:	2300      	movs	r3, #0
 810872a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 810872c:	79fb      	ldrb	r3, [r7, #7]
 810872e:	461a      	mov	r2, r3
 8108730:	6939      	ldr	r1, [r7, #16]
 8108732:	6978      	ldr	r0, [r7, #20]
 8108734:	f7ff ff79 	bl	810862a <xQueueGenericCreate>
 8108738:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 810873a:	68f8      	ldr	r0, [r7, #12]
 810873c:	f7ff ffd3 	bl	81086e6 <prvInitialiseMutex>

		return xNewQueue;
 8108740:	68fb      	ldr	r3, [r7, #12]
	}
 8108742:	4618      	mov	r0, r3
 8108744:	3718      	adds	r7, #24
 8108746:	46bd      	mov	sp, r7
 8108748:	bd80      	pop	{r7, pc}

0810874a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 810874a:	b580      	push	{r7, lr}
 810874c:	b088      	sub	sp, #32
 810874e:	af02      	add	r7, sp, #8
 8108750:	4603      	mov	r3, r0
 8108752:	6039      	str	r1, [r7, #0]
 8108754:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8108756:	2301      	movs	r3, #1
 8108758:	617b      	str	r3, [r7, #20]
 810875a:	2300      	movs	r3, #0
 810875c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 810875e:	79fb      	ldrb	r3, [r7, #7]
 8108760:	9300      	str	r3, [sp, #0]
 8108762:	683b      	ldr	r3, [r7, #0]
 8108764:	2200      	movs	r2, #0
 8108766:	6939      	ldr	r1, [r7, #16]
 8108768:	6978      	ldr	r0, [r7, #20]
 810876a:	f7ff fee1 	bl	8108530 <xQueueGenericCreateStatic>
 810876e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8108770:	68f8      	ldr	r0, [r7, #12]
 8108772:	f7ff ffb8 	bl	81086e6 <prvInitialiseMutex>

		return xNewQueue;
 8108776:	68fb      	ldr	r3, [r7, #12]
	}
 8108778:	4618      	mov	r0, r3
 810877a:	3718      	adds	r7, #24
 810877c:	46bd      	mov	sp, r7
 810877e:	bd80      	pop	{r7, pc}

08108780 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8108780:	b590      	push	{r4, r7, lr}
 8108782:	b087      	sub	sp, #28
 8108784:	af00      	add	r7, sp, #0
 8108786:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8108788:	687b      	ldr	r3, [r7, #4]
 810878a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 810878c:	693b      	ldr	r3, [r7, #16]
 810878e:	2b00      	cmp	r3, #0
 8108790:	d10b      	bne.n	81087aa <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8108792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108796:	f383 8811 	msr	BASEPRI, r3
 810879a:	f3bf 8f6f 	isb	sy
 810879e:	f3bf 8f4f 	dsb	sy
 81087a2:	60fb      	str	r3, [r7, #12]
}
 81087a4:	bf00      	nop
 81087a6:	bf00      	nop
 81087a8:	e7fd      	b.n	81087a6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 81087aa:	693b      	ldr	r3, [r7, #16]
 81087ac:	689c      	ldr	r4, [r3, #8]
 81087ae:	f002 f83d 	bl	810a82c <xTaskGetCurrentTaskHandle>
 81087b2:	4603      	mov	r3, r0
 81087b4:	429c      	cmp	r4, r3
 81087b6:	d111      	bne.n	81087dc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 81087b8:	693b      	ldr	r3, [r7, #16]
 81087ba:	68db      	ldr	r3, [r3, #12]
 81087bc:	1e5a      	subs	r2, r3, #1
 81087be:	693b      	ldr	r3, [r7, #16]
 81087c0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 81087c2:	693b      	ldr	r3, [r7, #16]
 81087c4:	68db      	ldr	r3, [r3, #12]
 81087c6:	2b00      	cmp	r3, #0
 81087c8:	d105      	bne.n	81087d6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 81087ca:	2300      	movs	r3, #0
 81087cc:	2200      	movs	r2, #0
 81087ce:	2100      	movs	r1, #0
 81087d0:	6938      	ldr	r0, [r7, #16]
 81087d2:	f000 f8af 	bl	8108934 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 81087d6:	2301      	movs	r3, #1
 81087d8:	617b      	str	r3, [r7, #20]
 81087da:	e001      	b.n	81087e0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 81087dc:	2300      	movs	r3, #0
 81087de:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 81087e0:	697b      	ldr	r3, [r7, #20]
	}
 81087e2:	4618      	mov	r0, r3
 81087e4:	371c      	adds	r7, #28
 81087e6:	46bd      	mov	sp, r7
 81087e8:	bd90      	pop	{r4, r7, pc}

081087ea <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 81087ea:	b590      	push	{r4, r7, lr}
 81087ec:	b087      	sub	sp, #28
 81087ee:	af00      	add	r7, sp, #0
 81087f0:	6078      	str	r0, [r7, #4]
 81087f2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 81087f4:	687b      	ldr	r3, [r7, #4]
 81087f6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 81087f8:	693b      	ldr	r3, [r7, #16]
 81087fa:	2b00      	cmp	r3, #0
 81087fc:	d10b      	bne.n	8108816 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 81087fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108802:	f383 8811 	msr	BASEPRI, r3
 8108806:	f3bf 8f6f 	isb	sy
 810880a:	f3bf 8f4f 	dsb	sy
 810880e:	60fb      	str	r3, [r7, #12]
}
 8108810:	bf00      	nop
 8108812:	bf00      	nop
 8108814:	e7fd      	b.n	8108812 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8108816:	693b      	ldr	r3, [r7, #16]
 8108818:	689c      	ldr	r4, [r3, #8]
 810881a:	f002 f807 	bl	810a82c <xTaskGetCurrentTaskHandle>
 810881e:	4603      	mov	r3, r0
 8108820:	429c      	cmp	r4, r3
 8108822:	d107      	bne.n	8108834 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8108824:	693b      	ldr	r3, [r7, #16]
 8108826:	68db      	ldr	r3, [r3, #12]
 8108828:	1c5a      	adds	r2, r3, #1
 810882a:	693b      	ldr	r3, [r7, #16]
 810882c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 810882e:	2301      	movs	r3, #1
 8108830:	617b      	str	r3, [r7, #20]
 8108832:	e00c      	b.n	810884e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8108834:	6839      	ldr	r1, [r7, #0]
 8108836:	6938      	ldr	r0, [r7, #16]
 8108838:	f000 fb8e 	bl	8108f58 <xQueueSemaphoreTake>
 810883c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 810883e:	697b      	ldr	r3, [r7, #20]
 8108840:	2b00      	cmp	r3, #0
 8108842:	d004      	beq.n	810884e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8108844:	693b      	ldr	r3, [r7, #16]
 8108846:	68db      	ldr	r3, [r3, #12]
 8108848:	1c5a      	adds	r2, r3, #1
 810884a:	693b      	ldr	r3, [r7, #16]
 810884c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 810884e:	697b      	ldr	r3, [r7, #20]
	}
 8108850:	4618      	mov	r0, r3
 8108852:	371c      	adds	r7, #28
 8108854:	46bd      	mov	sp, r7
 8108856:	bd90      	pop	{r4, r7, pc}

08108858 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8108858:	b580      	push	{r7, lr}
 810885a:	b08a      	sub	sp, #40	@ 0x28
 810885c:	af02      	add	r7, sp, #8
 810885e:	60f8      	str	r0, [r7, #12]
 8108860:	60b9      	str	r1, [r7, #8]
 8108862:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8108864:	68fb      	ldr	r3, [r7, #12]
 8108866:	2b00      	cmp	r3, #0
 8108868:	d10b      	bne.n	8108882 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 810886a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810886e:	f383 8811 	msr	BASEPRI, r3
 8108872:	f3bf 8f6f 	isb	sy
 8108876:	f3bf 8f4f 	dsb	sy
 810887a:	61bb      	str	r3, [r7, #24]
}
 810887c:	bf00      	nop
 810887e:	bf00      	nop
 8108880:	e7fd      	b.n	810887e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8108882:	68ba      	ldr	r2, [r7, #8]
 8108884:	68fb      	ldr	r3, [r7, #12]
 8108886:	429a      	cmp	r2, r3
 8108888:	d90b      	bls.n	81088a2 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 810888a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810888e:	f383 8811 	msr	BASEPRI, r3
 8108892:	f3bf 8f6f 	isb	sy
 8108896:	f3bf 8f4f 	dsb	sy
 810889a:	617b      	str	r3, [r7, #20]
}
 810889c:	bf00      	nop
 810889e:	bf00      	nop
 81088a0:	e7fd      	b.n	810889e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 81088a2:	2302      	movs	r3, #2
 81088a4:	9300      	str	r3, [sp, #0]
 81088a6:	687b      	ldr	r3, [r7, #4]
 81088a8:	2200      	movs	r2, #0
 81088aa:	2100      	movs	r1, #0
 81088ac:	68f8      	ldr	r0, [r7, #12]
 81088ae:	f7ff fe3f 	bl	8108530 <xQueueGenericCreateStatic>
 81088b2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 81088b4:	69fb      	ldr	r3, [r7, #28]
 81088b6:	2b00      	cmp	r3, #0
 81088b8:	d002      	beq.n	81088c0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 81088ba:	69fb      	ldr	r3, [r7, #28]
 81088bc:	68ba      	ldr	r2, [r7, #8]
 81088be:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 81088c0:	69fb      	ldr	r3, [r7, #28]
	}
 81088c2:	4618      	mov	r0, r3
 81088c4:	3720      	adds	r7, #32
 81088c6:	46bd      	mov	sp, r7
 81088c8:	bd80      	pop	{r7, pc}

081088ca <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 81088ca:	b580      	push	{r7, lr}
 81088cc:	b086      	sub	sp, #24
 81088ce:	af00      	add	r7, sp, #0
 81088d0:	6078      	str	r0, [r7, #4]
 81088d2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 81088d4:	687b      	ldr	r3, [r7, #4]
 81088d6:	2b00      	cmp	r3, #0
 81088d8:	d10b      	bne.n	81088f2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 81088da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81088de:	f383 8811 	msr	BASEPRI, r3
 81088e2:	f3bf 8f6f 	isb	sy
 81088e6:	f3bf 8f4f 	dsb	sy
 81088ea:	613b      	str	r3, [r7, #16]
}
 81088ec:	bf00      	nop
 81088ee:	bf00      	nop
 81088f0:	e7fd      	b.n	81088ee <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 81088f2:	683a      	ldr	r2, [r7, #0]
 81088f4:	687b      	ldr	r3, [r7, #4]
 81088f6:	429a      	cmp	r2, r3
 81088f8:	d90b      	bls.n	8108912 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 81088fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81088fe:	f383 8811 	msr	BASEPRI, r3
 8108902:	f3bf 8f6f 	isb	sy
 8108906:	f3bf 8f4f 	dsb	sy
 810890a:	60fb      	str	r3, [r7, #12]
}
 810890c:	bf00      	nop
 810890e:	bf00      	nop
 8108910:	e7fd      	b.n	810890e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8108912:	2202      	movs	r2, #2
 8108914:	2100      	movs	r1, #0
 8108916:	6878      	ldr	r0, [r7, #4]
 8108918:	f7ff fe87 	bl	810862a <xQueueGenericCreate>
 810891c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 810891e:	697b      	ldr	r3, [r7, #20]
 8108920:	2b00      	cmp	r3, #0
 8108922:	d002      	beq.n	810892a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8108924:	697b      	ldr	r3, [r7, #20]
 8108926:	683a      	ldr	r2, [r7, #0]
 8108928:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810892a:	697b      	ldr	r3, [r7, #20]
	}
 810892c:	4618      	mov	r0, r3
 810892e:	3718      	adds	r7, #24
 8108930:	46bd      	mov	sp, r7
 8108932:	bd80      	pop	{r7, pc}

08108934 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8108934:	b580      	push	{r7, lr}
 8108936:	b08e      	sub	sp, #56	@ 0x38
 8108938:	af00      	add	r7, sp, #0
 810893a:	60f8      	str	r0, [r7, #12]
 810893c:	60b9      	str	r1, [r7, #8]
 810893e:	607a      	str	r2, [r7, #4]
 8108940:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8108942:	2300      	movs	r3, #0
 8108944:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8108946:	68fb      	ldr	r3, [r7, #12]
 8108948:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810894a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810894c:	2b00      	cmp	r3, #0
 810894e:	d10b      	bne.n	8108968 <xQueueGenericSend+0x34>
	__asm volatile
 8108950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108954:	f383 8811 	msr	BASEPRI, r3
 8108958:	f3bf 8f6f 	isb	sy
 810895c:	f3bf 8f4f 	dsb	sy
 8108960:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8108962:	bf00      	nop
 8108964:	bf00      	nop
 8108966:	e7fd      	b.n	8108964 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8108968:	68bb      	ldr	r3, [r7, #8]
 810896a:	2b00      	cmp	r3, #0
 810896c:	d103      	bne.n	8108976 <xQueueGenericSend+0x42>
 810896e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108972:	2b00      	cmp	r3, #0
 8108974:	d101      	bne.n	810897a <xQueueGenericSend+0x46>
 8108976:	2301      	movs	r3, #1
 8108978:	e000      	b.n	810897c <xQueueGenericSend+0x48>
 810897a:	2300      	movs	r3, #0
 810897c:	2b00      	cmp	r3, #0
 810897e:	d10b      	bne.n	8108998 <xQueueGenericSend+0x64>
	__asm volatile
 8108980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108984:	f383 8811 	msr	BASEPRI, r3
 8108988:	f3bf 8f6f 	isb	sy
 810898c:	f3bf 8f4f 	dsb	sy
 8108990:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8108992:	bf00      	nop
 8108994:	bf00      	nop
 8108996:	e7fd      	b.n	8108994 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8108998:	683b      	ldr	r3, [r7, #0]
 810899a:	2b02      	cmp	r3, #2
 810899c:	d103      	bne.n	81089a6 <xQueueGenericSend+0x72>
 810899e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81089a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81089a2:	2b01      	cmp	r3, #1
 81089a4:	d101      	bne.n	81089aa <xQueueGenericSend+0x76>
 81089a6:	2301      	movs	r3, #1
 81089a8:	e000      	b.n	81089ac <xQueueGenericSend+0x78>
 81089aa:	2300      	movs	r3, #0
 81089ac:	2b00      	cmp	r3, #0
 81089ae:	d10b      	bne.n	81089c8 <xQueueGenericSend+0x94>
	__asm volatile
 81089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81089b4:	f383 8811 	msr	BASEPRI, r3
 81089b8:	f3bf 8f6f 	isb	sy
 81089bc:	f3bf 8f4f 	dsb	sy
 81089c0:	623b      	str	r3, [r7, #32]
}
 81089c2:	bf00      	nop
 81089c4:	bf00      	nop
 81089c6:	e7fd      	b.n	81089c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81089c8:	f001 ff40 	bl	810a84c <xTaskGetSchedulerState>
 81089cc:	4603      	mov	r3, r0
 81089ce:	2b00      	cmp	r3, #0
 81089d0:	d102      	bne.n	81089d8 <xQueueGenericSend+0xa4>
 81089d2:	687b      	ldr	r3, [r7, #4]
 81089d4:	2b00      	cmp	r3, #0
 81089d6:	d101      	bne.n	81089dc <xQueueGenericSend+0xa8>
 81089d8:	2301      	movs	r3, #1
 81089da:	e000      	b.n	81089de <xQueueGenericSend+0xaa>
 81089dc:	2300      	movs	r3, #0
 81089de:	2b00      	cmp	r3, #0
 81089e0:	d10b      	bne.n	81089fa <xQueueGenericSend+0xc6>
	__asm volatile
 81089e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81089e6:	f383 8811 	msr	BASEPRI, r3
 81089ea:	f3bf 8f6f 	isb	sy
 81089ee:	f3bf 8f4f 	dsb	sy
 81089f2:	61fb      	str	r3, [r7, #28]
}
 81089f4:	bf00      	nop
 81089f6:	bf00      	nop
 81089f8:	e7fd      	b.n	81089f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81089fa:	f7ff fc0d 	bl	8108218 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81089fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8108a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108a06:	429a      	cmp	r2, r3
 8108a08:	d302      	bcc.n	8108a10 <xQueueGenericSend+0xdc>
 8108a0a:	683b      	ldr	r3, [r7, #0]
 8108a0c:	2b02      	cmp	r3, #2
 8108a0e:	d129      	bne.n	8108a64 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8108a10:	683a      	ldr	r2, [r7, #0]
 8108a12:	68b9      	ldr	r1, [r7, #8]
 8108a14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8108a16:	f000 fc6d 	bl	81092f4 <prvCopyDataToQueue>
 8108a1a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8108a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108a20:	2b00      	cmp	r3, #0
 8108a22:	d010      	beq.n	8108a46 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8108a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a26:	3324      	adds	r3, #36	@ 0x24
 8108a28:	4618      	mov	r0, r3
 8108a2a:	f001 fd39 	bl	810a4a0 <xTaskRemoveFromEventList>
 8108a2e:	4603      	mov	r3, r0
 8108a30:	2b00      	cmp	r3, #0
 8108a32:	d013      	beq.n	8108a5c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8108a34:	4b3f      	ldr	r3, [pc, #252]	@ (8108b34 <xQueueGenericSend+0x200>)
 8108a36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8108a3a:	601a      	str	r2, [r3, #0]
 8108a3c:	f3bf 8f4f 	dsb	sy
 8108a40:	f3bf 8f6f 	isb	sy
 8108a44:	e00a      	b.n	8108a5c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8108a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108a48:	2b00      	cmp	r3, #0
 8108a4a:	d007      	beq.n	8108a5c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8108a4c:	4b39      	ldr	r3, [pc, #228]	@ (8108b34 <xQueueGenericSend+0x200>)
 8108a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8108a52:	601a      	str	r2, [r3, #0]
 8108a54:	f3bf 8f4f 	dsb	sy
 8108a58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8108a5c:	f7ff fc0e 	bl	810827c <vPortExitCritical>
				return pdPASS;
 8108a60:	2301      	movs	r3, #1
 8108a62:	e063      	b.n	8108b2c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8108a64:	687b      	ldr	r3, [r7, #4]
 8108a66:	2b00      	cmp	r3, #0
 8108a68:	d103      	bne.n	8108a72 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8108a6a:	f7ff fc07 	bl	810827c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8108a6e:	2300      	movs	r3, #0
 8108a70:	e05c      	b.n	8108b2c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8108a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108a74:	2b00      	cmp	r3, #0
 8108a76:	d106      	bne.n	8108a86 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8108a78:	f107 0314 	add.w	r3, r7, #20
 8108a7c:	4618      	mov	r0, r3
 8108a7e:	f001 fd73 	bl	810a568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8108a82:	2301      	movs	r3, #1
 8108a84:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8108a86:	f7ff fbf9 	bl	810827c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8108a8a:	f001 fac9 	bl	810a020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8108a8e:	f7ff fbc3 	bl	8108218 <vPortEnterCritical>
 8108a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8108a98:	b25b      	sxtb	r3, r3
 8108a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108a9e:	d103      	bne.n	8108aa8 <xQueueGenericSend+0x174>
 8108aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108aa2:	2200      	movs	r2, #0
 8108aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8108aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8108aae:	b25b      	sxtb	r3, r3
 8108ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108ab4:	d103      	bne.n	8108abe <xQueueGenericSend+0x18a>
 8108ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ab8:	2200      	movs	r2, #0
 8108aba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8108abe:	f7ff fbdd 	bl	810827c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8108ac2:	1d3a      	adds	r2, r7, #4
 8108ac4:	f107 0314 	add.w	r3, r7, #20
 8108ac8:	4611      	mov	r1, r2
 8108aca:	4618      	mov	r0, r3
 8108acc:	f001 fd62 	bl	810a594 <xTaskCheckForTimeOut>
 8108ad0:	4603      	mov	r3, r0
 8108ad2:	2b00      	cmp	r3, #0
 8108ad4:	d124      	bne.n	8108b20 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8108ad6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8108ad8:	f000 fd04 	bl	81094e4 <prvIsQueueFull>
 8108adc:	4603      	mov	r3, r0
 8108ade:	2b00      	cmp	r3, #0
 8108ae0:	d018      	beq.n	8108b14 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8108ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ae4:	3310      	adds	r3, #16
 8108ae6:	687a      	ldr	r2, [r7, #4]
 8108ae8:	4611      	mov	r1, r2
 8108aea:	4618      	mov	r0, r3
 8108aec:	f001 fc86 	bl	810a3fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8108af0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8108af2:	f000 fc8f 	bl	8109414 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8108af6:	f001 faa1 	bl	810a03c <xTaskResumeAll>
 8108afa:	4603      	mov	r3, r0
 8108afc:	2b00      	cmp	r3, #0
 8108afe:	f47f af7c 	bne.w	81089fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8108b02:	4b0c      	ldr	r3, [pc, #48]	@ (8108b34 <xQueueGenericSend+0x200>)
 8108b04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8108b08:	601a      	str	r2, [r3, #0]
 8108b0a:	f3bf 8f4f 	dsb	sy
 8108b0e:	f3bf 8f6f 	isb	sy
 8108b12:	e772      	b.n	81089fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8108b14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8108b16:	f000 fc7d 	bl	8109414 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8108b1a:	f001 fa8f 	bl	810a03c <xTaskResumeAll>
 8108b1e:	e76c      	b.n	81089fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8108b20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8108b22:	f000 fc77 	bl	8109414 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8108b26:	f001 fa89 	bl	810a03c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8108b2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8108b2c:	4618      	mov	r0, r3
 8108b2e:	3738      	adds	r7, #56	@ 0x38
 8108b30:	46bd      	mov	sp, r7
 8108b32:	bd80      	pop	{r7, pc}
 8108b34:	e000ed04 	.word	0xe000ed04

08108b38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8108b38:	b580      	push	{r7, lr}
 8108b3a:	b090      	sub	sp, #64	@ 0x40
 8108b3c:	af00      	add	r7, sp, #0
 8108b3e:	60f8      	str	r0, [r7, #12]
 8108b40:	60b9      	str	r1, [r7, #8]
 8108b42:	607a      	str	r2, [r7, #4]
 8108b44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8108b46:	68fb      	ldr	r3, [r7, #12]
 8108b48:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8108b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108b4c:	2b00      	cmp	r3, #0
 8108b4e:	d10b      	bne.n	8108b68 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8108b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108b54:	f383 8811 	msr	BASEPRI, r3
 8108b58:	f3bf 8f6f 	isb	sy
 8108b5c:	f3bf 8f4f 	dsb	sy
 8108b60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8108b62:	bf00      	nop
 8108b64:	bf00      	nop
 8108b66:	e7fd      	b.n	8108b64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8108b68:	68bb      	ldr	r3, [r7, #8]
 8108b6a:	2b00      	cmp	r3, #0
 8108b6c:	d103      	bne.n	8108b76 <xQueueGenericSendFromISR+0x3e>
 8108b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108b72:	2b00      	cmp	r3, #0
 8108b74:	d101      	bne.n	8108b7a <xQueueGenericSendFromISR+0x42>
 8108b76:	2301      	movs	r3, #1
 8108b78:	e000      	b.n	8108b7c <xQueueGenericSendFromISR+0x44>
 8108b7a:	2300      	movs	r3, #0
 8108b7c:	2b00      	cmp	r3, #0
 8108b7e:	d10b      	bne.n	8108b98 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8108b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108b84:	f383 8811 	msr	BASEPRI, r3
 8108b88:	f3bf 8f6f 	isb	sy
 8108b8c:	f3bf 8f4f 	dsb	sy
 8108b90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8108b92:	bf00      	nop
 8108b94:	bf00      	nop
 8108b96:	e7fd      	b.n	8108b94 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8108b98:	683b      	ldr	r3, [r7, #0]
 8108b9a:	2b02      	cmp	r3, #2
 8108b9c:	d103      	bne.n	8108ba6 <xQueueGenericSendFromISR+0x6e>
 8108b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108ba2:	2b01      	cmp	r3, #1
 8108ba4:	d101      	bne.n	8108baa <xQueueGenericSendFromISR+0x72>
 8108ba6:	2301      	movs	r3, #1
 8108ba8:	e000      	b.n	8108bac <xQueueGenericSendFromISR+0x74>
 8108baa:	2300      	movs	r3, #0
 8108bac:	2b00      	cmp	r3, #0
 8108bae:	d10b      	bne.n	8108bc8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8108bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108bb4:	f383 8811 	msr	BASEPRI, r3
 8108bb8:	f3bf 8f6f 	isb	sy
 8108bbc:	f3bf 8f4f 	dsb	sy
 8108bc0:	623b      	str	r3, [r7, #32]
}
 8108bc2:	bf00      	nop
 8108bc4:	bf00      	nop
 8108bc6:	e7fd      	b.n	8108bc4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8108bc8:	f7ff fc06 	bl	81083d8 <vPortValidateInterruptPriority>
	__asm volatile
 8108bcc:	f3ef 8211 	mrs	r2, BASEPRI
 8108bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108bd4:	f383 8811 	msr	BASEPRI, r3
 8108bd8:	f3bf 8f6f 	isb	sy
 8108bdc:	f3bf 8f4f 	dsb	sy
 8108be0:	61fa      	str	r2, [r7, #28]
 8108be2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8108be4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8108be6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8108be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108bea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8108bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108bf0:	429a      	cmp	r2, r3
 8108bf2:	d302      	bcc.n	8108bfa <xQueueGenericSendFromISR+0xc2>
 8108bf4:	683b      	ldr	r3, [r7, #0]
 8108bf6:	2b02      	cmp	r3, #2
 8108bf8:	d12f      	bne.n	8108c5a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8108bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8108c00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8108c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8108c0a:	683a      	ldr	r2, [r7, #0]
 8108c0c:	68b9      	ldr	r1, [r7, #8]
 8108c0e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8108c10:	f000 fb70 	bl	81092f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8108c14:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8108c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108c1c:	d112      	bne.n	8108c44 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8108c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108c22:	2b00      	cmp	r3, #0
 8108c24:	d016      	beq.n	8108c54 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8108c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108c28:	3324      	adds	r3, #36	@ 0x24
 8108c2a:	4618      	mov	r0, r3
 8108c2c:	f001 fc38 	bl	810a4a0 <xTaskRemoveFromEventList>
 8108c30:	4603      	mov	r3, r0
 8108c32:	2b00      	cmp	r3, #0
 8108c34:	d00e      	beq.n	8108c54 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8108c36:	687b      	ldr	r3, [r7, #4]
 8108c38:	2b00      	cmp	r3, #0
 8108c3a:	d00b      	beq.n	8108c54 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8108c3c:	687b      	ldr	r3, [r7, #4]
 8108c3e:	2201      	movs	r2, #1
 8108c40:	601a      	str	r2, [r3, #0]
 8108c42:	e007      	b.n	8108c54 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8108c44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8108c48:	3301      	adds	r3, #1
 8108c4a:	b2db      	uxtb	r3, r3
 8108c4c:	b25a      	sxtb	r2, r3
 8108c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108c50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8108c54:	2301      	movs	r3, #1
 8108c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8108c58:	e001      	b.n	8108c5e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8108c5a:	2300      	movs	r3, #0
 8108c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108c60:	617b      	str	r3, [r7, #20]
	__asm volatile
 8108c62:	697b      	ldr	r3, [r7, #20]
 8108c64:	f383 8811 	msr	BASEPRI, r3
}
 8108c68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8108c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8108c6c:	4618      	mov	r0, r3
 8108c6e:	3740      	adds	r7, #64	@ 0x40
 8108c70:	46bd      	mov	sp, r7
 8108c72:	bd80      	pop	{r7, pc}

08108c74 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8108c74:	b580      	push	{r7, lr}
 8108c76:	b08e      	sub	sp, #56	@ 0x38
 8108c78:	af00      	add	r7, sp, #0
 8108c7a:	6078      	str	r0, [r7, #4]
 8108c7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8108c7e:	687b      	ldr	r3, [r7, #4]
 8108c80:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8108c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c84:	2b00      	cmp	r3, #0
 8108c86:	d10b      	bne.n	8108ca0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8108c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108c8c:	f383 8811 	msr	BASEPRI, r3
 8108c90:	f3bf 8f6f 	isb	sy
 8108c94:	f3bf 8f4f 	dsb	sy
 8108c98:	623b      	str	r3, [r7, #32]
}
 8108c9a:	bf00      	nop
 8108c9c:	bf00      	nop
 8108c9e:	e7fd      	b.n	8108c9c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8108ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108ca4:	2b00      	cmp	r3, #0
 8108ca6:	d00b      	beq.n	8108cc0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8108ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108cac:	f383 8811 	msr	BASEPRI, r3
 8108cb0:	f3bf 8f6f 	isb	sy
 8108cb4:	f3bf 8f4f 	dsb	sy
 8108cb8:	61fb      	str	r3, [r7, #28]
}
 8108cba:	bf00      	nop
 8108cbc:	bf00      	nop
 8108cbe:	e7fd      	b.n	8108cbc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8108cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cc2:	681b      	ldr	r3, [r3, #0]
 8108cc4:	2b00      	cmp	r3, #0
 8108cc6:	d103      	bne.n	8108cd0 <xQueueGiveFromISR+0x5c>
 8108cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cca:	689b      	ldr	r3, [r3, #8]
 8108ccc:	2b00      	cmp	r3, #0
 8108cce:	d101      	bne.n	8108cd4 <xQueueGiveFromISR+0x60>
 8108cd0:	2301      	movs	r3, #1
 8108cd2:	e000      	b.n	8108cd6 <xQueueGiveFromISR+0x62>
 8108cd4:	2300      	movs	r3, #0
 8108cd6:	2b00      	cmp	r3, #0
 8108cd8:	d10b      	bne.n	8108cf2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8108cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108cde:	f383 8811 	msr	BASEPRI, r3
 8108ce2:	f3bf 8f6f 	isb	sy
 8108ce6:	f3bf 8f4f 	dsb	sy
 8108cea:	61bb      	str	r3, [r7, #24]
}
 8108cec:	bf00      	nop
 8108cee:	bf00      	nop
 8108cf0:	e7fd      	b.n	8108cee <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8108cf2:	f7ff fb71 	bl	81083d8 <vPortValidateInterruptPriority>
	__asm volatile
 8108cf6:	f3ef 8211 	mrs	r2, BASEPRI
 8108cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108cfe:	f383 8811 	msr	BASEPRI, r3
 8108d02:	f3bf 8f6f 	isb	sy
 8108d06:	f3bf 8f4f 	dsb	sy
 8108d0a:	617a      	str	r2, [r7, #20]
 8108d0c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8108d0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8108d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8108d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108d16:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8108d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108d1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8108d1e:	429a      	cmp	r2, r3
 8108d20:	d22b      	bcs.n	8108d7a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8108d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8108d28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8108d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108d2e:	1c5a      	adds	r2, r3, #1
 8108d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d32:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8108d34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8108d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108d3c:	d112      	bne.n	8108d64 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8108d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108d42:	2b00      	cmp	r3, #0
 8108d44:	d016      	beq.n	8108d74 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8108d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d48:	3324      	adds	r3, #36	@ 0x24
 8108d4a:	4618      	mov	r0, r3
 8108d4c:	f001 fba8 	bl	810a4a0 <xTaskRemoveFromEventList>
 8108d50:	4603      	mov	r3, r0
 8108d52:	2b00      	cmp	r3, #0
 8108d54:	d00e      	beq.n	8108d74 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8108d56:	683b      	ldr	r3, [r7, #0]
 8108d58:	2b00      	cmp	r3, #0
 8108d5a:	d00b      	beq.n	8108d74 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8108d5c:	683b      	ldr	r3, [r7, #0]
 8108d5e:	2201      	movs	r2, #1
 8108d60:	601a      	str	r2, [r3, #0]
 8108d62:	e007      	b.n	8108d74 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8108d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8108d68:	3301      	adds	r3, #1
 8108d6a:	b2db      	uxtb	r3, r3
 8108d6c:	b25a      	sxtb	r2, r3
 8108d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8108d74:	2301      	movs	r3, #1
 8108d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8108d78:	e001      	b.n	8108d7e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8108d7a:	2300      	movs	r3, #0
 8108d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8108d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108d80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8108d82:	68fb      	ldr	r3, [r7, #12]
 8108d84:	f383 8811 	msr	BASEPRI, r3
}
 8108d88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8108d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8108d8c:	4618      	mov	r0, r3
 8108d8e:	3738      	adds	r7, #56	@ 0x38
 8108d90:	46bd      	mov	sp, r7
 8108d92:	bd80      	pop	{r7, pc}

08108d94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8108d94:	b580      	push	{r7, lr}
 8108d96:	b08c      	sub	sp, #48	@ 0x30
 8108d98:	af00      	add	r7, sp, #0
 8108d9a:	60f8      	str	r0, [r7, #12]
 8108d9c:	60b9      	str	r1, [r7, #8]
 8108d9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8108da0:	2300      	movs	r3, #0
 8108da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8108da4:	68fb      	ldr	r3, [r7, #12]
 8108da6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8108da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108daa:	2b00      	cmp	r3, #0
 8108dac:	d10b      	bne.n	8108dc6 <xQueueReceive+0x32>
	__asm volatile
 8108dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108db2:	f383 8811 	msr	BASEPRI, r3
 8108db6:	f3bf 8f6f 	isb	sy
 8108dba:	f3bf 8f4f 	dsb	sy
 8108dbe:	623b      	str	r3, [r7, #32]
}
 8108dc0:	bf00      	nop
 8108dc2:	bf00      	nop
 8108dc4:	e7fd      	b.n	8108dc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8108dc6:	68bb      	ldr	r3, [r7, #8]
 8108dc8:	2b00      	cmp	r3, #0
 8108dca:	d103      	bne.n	8108dd4 <xQueueReceive+0x40>
 8108dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108dd0:	2b00      	cmp	r3, #0
 8108dd2:	d101      	bne.n	8108dd8 <xQueueReceive+0x44>
 8108dd4:	2301      	movs	r3, #1
 8108dd6:	e000      	b.n	8108dda <xQueueReceive+0x46>
 8108dd8:	2300      	movs	r3, #0
 8108dda:	2b00      	cmp	r3, #0
 8108ddc:	d10b      	bne.n	8108df6 <xQueueReceive+0x62>
	__asm volatile
 8108dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108de2:	f383 8811 	msr	BASEPRI, r3
 8108de6:	f3bf 8f6f 	isb	sy
 8108dea:	f3bf 8f4f 	dsb	sy
 8108dee:	61fb      	str	r3, [r7, #28]
}
 8108df0:	bf00      	nop
 8108df2:	bf00      	nop
 8108df4:	e7fd      	b.n	8108df2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8108df6:	f001 fd29 	bl	810a84c <xTaskGetSchedulerState>
 8108dfa:	4603      	mov	r3, r0
 8108dfc:	2b00      	cmp	r3, #0
 8108dfe:	d102      	bne.n	8108e06 <xQueueReceive+0x72>
 8108e00:	687b      	ldr	r3, [r7, #4]
 8108e02:	2b00      	cmp	r3, #0
 8108e04:	d101      	bne.n	8108e0a <xQueueReceive+0x76>
 8108e06:	2301      	movs	r3, #1
 8108e08:	e000      	b.n	8108e0c <xQueueReceive+0x78>
 8108e0a:	2300      	movs	r3, #0
 8108e0c:	2b00      	cmp	r3, #0
 8108e0e:	d10b      	bne.n	8108e28 <xQueueReceive+0x94>
	__asm volatile
 8108e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108e14:	f383 8811 	msr	BASEPRI, r3
 8108e18:	f3bf 8f6f 	isb	sy
 8108e1c:	f3bf 8f4f 	dsb	sy
 8108e20:	61bb      	str	r3, [r7, #24]
}
 8108e22:	bf00      	nop
 8108e24:	bf00      	nop
 8108e26:	e7fd      	b.n	8108e24 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8108e28:	f7ff f9f6 	bl	8108218 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8108e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108e30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8108e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108e34:	2b00      	cmp	r3, #0
 8108e36:	d01f      	beq.n	8108e78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8108e38:	68b9      	ldr	r1, [r7, #8]
 8108e3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108e3c:	f000 fac4 	bl	81093c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8108e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108e42:	1e5a      	subs	r2, r3, #1
 8108e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108e46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8108e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108e4a:	691b      	ldr	r3, [r3, #16]
 8108e4c:	2b00      	cmp	r3, #0
 8108e4e:	d00f      	beq.n	8108e70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8108e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108e52:	3310      	adds	r3, #16
 8108e54:	4618      	mov	r0, r3
 8108e56:	f001 fb23 	bl	810a4a0 <xTaskRemoveFromEventList>
 8108e5a:	4603      	mov	r3, r0
 8108e5c:	2b00      	cmp	r3, #0
 8108e5e:	d007      	beq.n	8108e70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8108e60:	4b3c      	ldr	r3, [pc, #240]	@ (8108f54 <xQueueReceive+0x1c0>)
 8108e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8108e66:	601a      	str	r2, [r3, #0]
 8108e68:	f3bf 8f4f 	dsb	sy
 8108e6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8108e70:	f7ff fa04 	bl	810827c <vPortExitCritical>
				return pdPASS;
 8108e74:	2301      	movs	r3, #1
 8108e76:	e069      	b.n	8108f4c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8108e78:	687b      	ldr	r3, [r7, #4]
 8108e7a:	2b00      	cmp	r3, #0
 8108e7c:	d103      	bne.n	8108e86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8108e7e:	f7ff f9fd 	bl	810827c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8108e82:	2300      	movs	r3, #0
 8108e84:	e062      	b.n	8108f4c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8108e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108e88:	2b00      	cmp	r3, #0
 8108e8a:	d106      	bne.n	8108e9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8108e8c:	f107 0310 	add.w	r3, r7, #16
 8108e90:	4618      	mov	r0, r3
 8108e92:	f001 fb69 	bl	810a568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8108e96:	2301      	movs	r3, #1
 8108e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8108e9a:	f7ff f9ef 	bl	810827c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8108e9e:	f001 f8bf 	bl	810a020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8108ea2:	f7ff f9b9 	bl	8108218 <vPortEnterCritical>
 8108ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8108eac:	b25b      	sxtb	r3, r3
 8108eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108eb2:	d103      	bne.n	8108ebc <xQueueReceive+0x128>
 8108eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108eb6:	2200      	movs	r2, #0
 8108eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8108ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8108ec2:	b25b      	sxtb	r3, r3
 8108ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108ec8:	d103      	bne.n	8108ed2 <xQueueReceive+0x13e>
 8108eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108ecc:	2200      	movs	r2, #0
 8108ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8108ed2:	f7ff f9d3 	bl	810827c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8108ed6:	1d3a      	adds	r2, r7, #4
 8108ed8:	f107 0310 	add.w	r3, r7, #16
 8108edc:	4611      	mov	r1, r2
 8108ede:	4618      	mov	r0, r3
 8108ee0:	f001 fb58 	bl	810a594 <xTaskCheckForTimeOut>
 8108ee4:	4603      	mov	r3, r0
 8108ee6:	2b00      	cmp	r3, #0
 8108ee8:	d123      	bne.n	8108f32 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8108eea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108eec:	f000 fae4 	bl	81094b8 <prvIsQueueEmpty>
 8108ef0:	4603      	mov	r3, r0
 8108ef2:	2b00      	cmp	r3, #0
 8108ef4:	d017      	beq.n	8108f26 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8108ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108ef8:	3324      	adds	r3, #36	@ 0x24
 8108efa:	687a      	ldr	r2, [r7, #4]
 8108efc:	4611      	mov	r1, r2
 8108efe:	4618      	mov	r0, r3
 8108f00:	f001 fa7c 	bl	810a3fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8108f04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108f06:	f000 fa85 	bl	8109414 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8108f0a:	f001 f897 	bl	810a03c <xTaskResumeAll>
 8108f0e:	4603      	mov	r3, r0
 8108f10:	2b00      	cmp	r3, #0
 8108f12:	d189      	bne.n	8108e28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8108f14:	4b0f      	ldr	r3, [pc, #60]	@ (8108f54 <xQueueReceive+0x1c0>)
 8108f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8108f1a:	601a      	str	r2, [r3, #0]
 8108f1c:	f3bf 8f4f 	dsb	sy
 8108f20:	f3bf 8f6f 	isb	sy
 8108f24:	e780      	b.n	8108e28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8108f26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108f28:	f000 fa74 	bl	8109414 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8108f2c:	f001 f886 	bl	810a03c <xTaskResumeAll>
 8108f30:	e77a      	b.n	8108e28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8108f32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108f34:	f000 fa6e 	bl	8109414 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8108f38:	f001 f880 	bl	810a03c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8108f3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108f3e:	f000 fabb 	bl	81094b8 <prvIsQueueEmpty>
 8108f42:	4603      	mov	r3, r0
 8108f44:	2b00      	cmp	r3, #0
 8108f46:	f43f af6f 	beq.w	8108e28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8108f4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8108f4c:	4618      	mov	r0, r3
 8108f4e:	3730      	adds	r7, #48	@ 0x30
 8108f50:	46bd      	mov	sp, r7
 8108f52:	bd80      	pop	{r7, pc}
 8108f54:	e000ed04 	.word	0xe000ed04

08108f58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8108f58:	b580      	push	{r7, lr}
 8108f5a:	b08e      	sub	sp, #56	@ 0x38
 8108f5c:	af00      	add	r7, sp, #0
 8108f5e:	6078      	str	r0, [r7, #4]
 8108f60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8108f62:	2300      	movs	r3, #0
 8108f64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8108f66:	687b      	ldr	r3, [r7, #4]
 8108f68:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8108f6a:	2300      	movs	r3, #0
 8108f6c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8108f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108f70:	2b00      	cmp	r3, #0
 8108f72:	d10b      	bne.n	8108f8c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8108f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108f78:	f383 8811 	msr	BASEPRI, r3
 8108f7c:	f3bf 8f6f 	isb	sy
 8108f80:	f3bf 8f4f 	dsb	sy
 8108f84:	623b      	str	r3, [r7, #32]
}
 8108f86:	bf00      	nop
 8108f88:	bf00      	nop
 8108f8a:	e7fd      	b.n	8108f88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8108f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108f90:	2b00      	cmp	r3, #0
 8108f92:	d00b      	beq.n	8108fac <xQueueSemaphoreTake+0x54>
	__asm volatile
 8108f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108f98:	f383 8811 	msr	BASEPRI, r3
 8108f9c:	f3bf 8f6f 	isb	sy
 8108fa0:	f3bf 8f4f 	dsb	sy
 8108fa4:	61fb      	str	r3, [r7, #28]
}
 8108fa6:	bf00      	nop
 8108fa8:	bf00      	nop
 8108faa:	e7fd      	b.n	8108fa8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8108fac:	f001 fc4e 	bl	810a84c <xTaskGetSchedulerState>
 8108fb0:	4603      	mov	r3, r0
 8108fb2:	2b00      	cmp	r3, #0
 8108fb4:	d102      	bne.n	8108fbc <xQueueSemaphoreTake+0x64>
 8108fb6:	683b      	ldr	r3, [r7, #0]
 8108fb8:	2b00      	cmp	r3, #0
 8108fba:	d101      	bne.n	8108fc0 <xQueueSemaphoreTake+0x68>
 8108fbc:	2301      	movs	r3, #1
 8108fbe:	e000      	b.n	8108fc2 <xQueueSemaphoreTake+0x6a>
 8108fc0:	2300      	movs	r3, #0
 8108fc2:	2b00      	cmp	r3, #0
 8108fc4:	d10b      	bne.n	8108fde <xQueueSemaphoreTake+0x86>
	__asm volatile
 8108fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108fca:	f383 8811 	msr	BASEPRI, r3
 8108fce:	f3bf 8f6f 	isb	sy
 8108fd2:	f3bf 8f4f 	dsb	sy
 8108fd6:	61bb      	str	r3, [r7, #24]
}
 8108fd8:	bf00      	nop
 8108fda:	bf00      	nop
 8108fdc:	e7fd      	b.n	8108fda <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8108fde:	f7ff f91b 	bl	8108218 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8108fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108fe6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8108fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108fea:	2b00      	cmp	r3, #0
 8108fec:	d024      	beq.n	8109038 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8108fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108ff0:	1e5a      	subs	r2, r3, #1
 8108ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108ff4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8108ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108ff8:	681b      	ldr	r3, [r3, #0]
 8108ffa:	2b00      	cmp	r3, #0
 8108ffc:	d104      	bne.n	8109008 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8108ffe:	f001 fd9f 	bl	810ab40 <pvTaskIncrementMutexHeldCount>
 8109002:	4602      	mov	r2, r0
 8109004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109006:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810900a:	691b      	ldr	r3, [r3, #16]
 810900c:	2b00      	cmp	r3, #0
 810900e:	d00f      	beq.n	8109030 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109012:	3310      	adds	r3, #16
 8109014:	4618      	mov	r0, r3
 8109016:	f001 fa43 	bl	810a4a0 <xTaskRemoveFromEventList>
 810901a:	4603      	mov	r3, r0
 810901c:	2b00      	cmp	r3, #0
 810901e:	d007      	beq.n	8109030 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8109020:	4b54      	ldr	r3, [pc, #336]	@ (8109174 <xQueueSemaphoreTake+0x21c>)
 8109022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8109026:	601a      	str	r2, [r3, #0]
 8109028:	f3bf 8f4f 	dsb	sy
 810902c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8109030:	f7ff f924 	bl	810827c <vPortExitCritical>
				return pdPASS;
 8109034:	2301      	movs	r3, #1
 8109036:	e098      	b.n	810916a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8109038:	683b      	ldr	r3, [r7, #0]
 810903a:	2b00      	cmp	r3, #0
 810903c:	d112      	bne.n	8109064 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 810903e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109040:	2b00      	cmp	r3, #0
 8109042:	d00b      	beq.n	810905c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8109044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109048:	f383 8811 	msr	BASEPRI, r3
 810904c:	f3bf 8f6f 	isb	sy
 8109050:	f3bf 8f4f 	dsb	sy
 8109054:	617b      	str	r3, [r7, #20]
}
 8109056:	bf00      	nop
 8109058:	bf00      	nop
 810905a:	e7fd      	b.n	8109058 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 810905c:	f7ff f90e 	bl	810827c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8109060:	2300      	movs	r3, #0
 8109062:	e082      	b.n	810916a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8109064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109066:	2b00      	cmp	r3, #0
 8109068:	d106      	bne.n	8109078 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810906a:	f107 030c 	add.w	r3, r7, #12
 810906e:	4618      	mov	r0, r3
 8109070:	f001 fa7a 	bl	810a568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8109074:	2301      	movs	r3, #1
 8109076:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8109078:	f7ff f900 	bl	810827c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 810907c:	f000 ffd0 	bl	810a020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8109080:	f7ff f8ca 	bl	8108218 <vPortEnterCritical>
 8109084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109086:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810908a:	b25b      	sxtb	r3, r3
 810908c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109090:	d103      	bne.n	810909a <xQueueSemaphoreTake+0x142>
 8109092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109094:	2200      	movs	r2, #0
 8109096:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810909a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810909c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81090a0:	b25b      	sxtb	r3, r3
 81090a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81090a6:	d103      	bne.n	81090b0 <xQueueSemaphoreTake+0x158>
 81090a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81090aa:	2200      	movs	r2, #0
 81090ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81090b0:	f7ff f8e4 	bl	810827c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81090b4:	463a      	mov	r2, r7
 81090b6:	f107 030c 	add.w	r3, r7, #12
 81090ba:	4611      	mov	r1, r2
 81090bc:	4618      	mov	r0, r3
 81090be:	f001 fa69 	bl	810a594 <xTaskCheckForTimeOut>
 81090c2:	4603      	mov	r3, r0
 81090c4:	2b00      	cmp	r3, #0
 81090c6:	d132      	bne.n	810912e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81090c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81090ca:	f000 f9f5 	bl	81094b8 <prvIsQueueEmpty>
 81090ce:	4603      	mov	r3, r0
 81090d0:	2b00      	cmp	r3, #0
 81090d2:	d026      	beq.n	8109122 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81090d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81090d6:	681b      	ldr	r3, [r3, #0]
 81090d8:	2b00      	cmp	r3, #0
 81090da:	d109      	bne.n	81090f0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 81090dc:	f7ff f89c 	bl	8108218 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 81090e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81090e2:	689b      	ldr	r3, [r3, #8]
 81090e4:	4618      	mov	r0, r3
 81090e6:	f001 fbcf 	bl	810a888 <xTaskPriorityInherit>
 81090ea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 81090ec:	f7ff f8c6 	bl	810827c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81090f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81090f2:	3324      	adds	r3, #36	@ 0x24
 81090f4:	683a      	ldr	r2, [r7, #0]
 81090f6:	4611      	mov	r1, r2
 81090f8:	4618      	mov	r0, r3
 81090fa:	f001 f97f 	bl	810a3fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81090fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8109100:	f000 f988 	bl	8109414 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8109104:	f000 ff9a 	bl	810a03c <xTaskResumeAll>
 8109108:	4603      	mov	r3, r0
 810910a:	2b00      	cmp	r3, #0
 810910c:	f47f af67 	bne.w	8108fde <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8109110:	4b18      	ldr	r3, [pc, #96]	@ (8109174 <xQueueSemaphoreTake+0x21c>)
 8109112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8109116:	601a      	str	r2, [r3, #0]
 8109118:	f3bf 8f4f 	dsb	sy
 810911c:	f3bf 8f6f 	isb	sy
 8109120:	e75d      	b.n	8108fde <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8109122:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8109124:	f000 f976 	bl	8109414 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8109128:	f000 ff88 	bl	810a03c <xTaskResumeAll>
 810912c:	e757      	b.n	8108fde <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 810912e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8109130:	f000 f970 	bl	8109414 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8109134:	f000 ff82 	bl	810a03c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8109138:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810913a:	f000 f9bd 	bl	81094b8 <prvIsQueueEmpty>
 810913e:	4603      	mov	r3, r0
 8109140:	2b00      	cmp	r3, #0
 8109142:	f43f af4c 	beq.w	8108fde <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8109146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109148:	2b00      	cmp	r3, #0
 810914a:	d00d      	beq.n	8109168 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 810914c:	f7ff f864 	bl	8108218 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8109150:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8109152:	f000 f8b7 	bl	81092c4 <prvGetDisinheritPriorityAfterTimeout>
 8109156:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8109158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810915a:	689b      	ldr	r3, [r3, #8]
 810915c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810915e:	4618      	mov	r0, r3
 8109160:	f001 fc6a 	bl	810aa38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8109164:	f7ff f88a 	bl	810827c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8109168:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810916a:	4618      	mov	r0, r3
 810916c:	3738      	adds	r7, #56	@ 0x38
 810916e:	46bd      	mov	sp, r7
 8109170:	bd80      	pop	{r7, pc}
 8109172:	bf00      	nop
 8109174:	e000ed04 	.word	0xe000ed04

08109178 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8109178:	b580      	push	{r7, lr}
 810917a:	b08e      	sub	sp, #56	@ 0x38
 810917c:	af00      	add	r7, sp, #0
 810917e:	60f8      	str	r0, [r7, #12]
 8109180:	60b9      	str	r1, [r7, #8]
 8109182:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8109184:	68fb      	ldr	r3, [r7, #12]
 8109186:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8109188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810918a:	2b00      	cmp	r3, #0
 810918c:	d10b      	bne.n	81091a6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 810918e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109192:	f383 8811 	msr	BASEPRI, r3
 8109196:	f3bf 8f6f 	isb	sy
 810919a:	f3bf 8f4f 	dsb	sy
 810919e:	623b      	str	r3, [r7, #32]
}
 81091a0:	bf00      	nop
 81091a2:	bf00      	nop
 81091a4:	e7fd      	b.n	81091a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81091a6:	68bb      	ldr	r3, [r7, #8]
 81091a8:	2b00      	cmp	r3, #0
 81091aa:	d103      	bne.n	81091b4 <xQueueReceiveFromISR+0x3c>
 81091ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81091ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81091b0:	2b00      	cmp	r3, #0
 81091b2:	d101      	bne.n	81091b8 <xQueueReceiveFromISR+0x40>
 81091b4:	2301      	movs	r3, #1
 81091b6:	e000      	b.n	81091ba <xQueueReceiveFromISR+0x42>
 81091b8:	2300      	movs	r3, #0
 81091ba:	2b00      	cmp	r3, #0
 81091bc:	d10b      	bne.n	81091d6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 81091be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81091c2:	f383 8811 	msr	BASEPRI, r3
 81091c6:	f3bf 8f6f 	isb	sy
 81091ca:	f3bf 8f4f 	dsb	sy
 81091ce:	61fb      	str	r3, [r7, #28]
}
 81091d0:	bf00      	nop
 81091d2:	bf00      	nop
 81091d4:	e7fd      	b.n	81091d2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81091d6:	f7ff f8ff 	bl	81083d8 <vPortValidateInterruptPriority>
	__asm volatile
 81091da:	f3ef 8211 	mrs	r2, BASEPRI
 81091de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81091e2:	f383 8811 	msr	BASEPRI, r3
 81091e6:	f3bf 8f6f 	isb	sy
 81091ea:	f3bf 8f4f 	dsb	sy
 81091ee:	61ba      	str	r2, [r7, #24]
 81091f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 81091f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81091f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81091f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81091f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81091fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81091fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81091fe:	2b00      	cmp	r3, #0
 8109200:	d02f      	beq.n	8109262 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8109202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109204:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8109208:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 810920c:	68b9      	ldr	r1, [r7, #8]
 810920e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8109210:	f000 f8da 	bl	81093c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8109214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109216:	1e5a      	subs	r2, r3, #1
 8109218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810921a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 810921c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8109220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109224:	d112      	bne.n	810924c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109228:	691b      	ldr	r3, [r3, #16]
 810922a:	2b00      	cmp	r3, #0
 810922c:	d016      	beq.n	810925c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810922e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109230:	3310      	adds	r3, #16
 8109232:	4618      	mov	r0, r3
 8109234:	f001 f934 	bl	810a4a0 <xTaskRemoveFromEventList>
 8109238:	4603      	mov	r3, r0
 810923a:	2b00      	cmp	r3, #0
 810923c:	d00e      	beq.n	810925c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 810923e:	687b      	ldr	r3, [r7, #4]
 8109240:	2b00      	cmp	r3, #0
 8109242:	d00b      	beq.n	810925c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8109244:	687b      	ldr	r3, [r7, #4]
 8109246:	2201      	movs	r2, #1
 8109248:	601a      	str	r2, [r3, #0]
 810924a:	e007      	b.n	810925c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 810924c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109250:	3301      	adds	r3, #1
 8109252:	b2db      	uxtb	r3, r3
 8109254:	b25a      	sxtb	r2, r3
 8109256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 810925c:	2301      	movs	r3, #1
 810925e:	637b      	str	r3, [r7, #52]	@ 0x34
 8109260:	e001      	b.n	8109266 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8109262:	2300      	movs	r3, #0
 8109264:	637b      	str	r3, [r7, #52]	@ 0x34
 8109266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109268:	613b      	str	r3, [r7, #16]
	__asm volatile
 810926a:	693b      	ldr	r3, [r7, #16]
 810926c:	f383 8811 	msr	BASEPRI, r3
}
 8109270:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8109272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8109274:	4618      	mov	r0, r3
 8109276:	3738      	adds	r7, #56	@ 0x38
 8109278:	46bd      	mov	sp, r7
 810927a:	bd80      	pop	{r7, pc}

0810927c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 810927c:	b580      	push	{r7, lr}
 810927e:	b084      	sub	sp, #16
 8109280:	af00      	add	r7, sp, #0
 8109282:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8109284:	687b      	ldr	r3, [r7, #4]
 8109286:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8109288:	68fb      	ldr	r3, [r7, #12]
 810928a:	2b00      	cmp	r3, #0
 810928c:	d10b      	bne.n	81092a6 <vQueueDelete+0x2a>
	__asm volatile
 810928e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109292:	f383 8811 	msr	BASEPRI, r3
 8109296:	f3bf 8f6f 	isb	sy
 810929a:	f3bf 8f4f 	dsb	sy
 810929e:	60bb      	str	r3, [r7, #8]
}
 81092a0:	bf00      	nop
 81092a2:	bf00      	nop
 81092a4:	e7fd      	b.n	81092a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 81092a6:	68f8      	ldr	r0, [r7, #12]
 81092a8:	f000 f95e 	bl	8109568 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 81092ac:	68fb      	ldr	r3, [r7, #12]
 81092ae:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 81092b2:	2b00      	cmp	r3, #0
 81092b4:	d102      	bne.n	81092bc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 81092b6:	68f8      	ldr	r0, [r7, #12]
 81092b8:	f7fe fc9a 	bl	8107bf0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 81092bc:	bf00      	nop
 81092be:	3710      	adds	r7, #16
 81092c0:	46bd      	mov	sp, r7
 81092c2:	bd80      	pop	{r7, pc}

081092c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 81092c4:	b480      	push	{r7}
 81092c6:	b085      	sub	sp, #20
 81092c8:	af00      	add	r7, sp, #0
 81092ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 81092cc:	687b      	ldr	r3, [r7, #4]
 81092ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81092d0:	2b00      	cmp	r3, #0
 81092d2:	d006      	beq.n	81092e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 81092d4:	687b      	ldr	r3, [r7, #4]
 81092d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81092d8:	681b      	ldr	r3, [r3, #0]
 81092da:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 81092de:	60fb      	str	r3, [r7, #12]
 81092e0:	e001      	b.n	81092e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 81092e2:	2300      	movs	r3, #0
 81092e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 81092e6:	68fb      	ldr	r3, [r7, #12]
	}
 81092e8:	4618      	mov	r0, r3
 81092ea:	3714      	adds	r7, #20
 81092ec:	46bd      	mov	sp, r7
 81092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092f2:	4770      	bx	lr

081092f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 81092f4:	b580      	push	{r7, lr}
 81092f6:	b086      	sub	sp, #24
 81092f8:	af00      	add	r7, sp, #0
 81092fa:	60f8      	str	r0, [r7, #12]
 81092fc:	60b9      	str	r1, [r7, #8]
 81092fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8109300:	2300      	movs	r3, #0
 8109302:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8109304:	68fb      	ldr	r3, [r7, #12]
 8109306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109308:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810930a:	68fb      	ldr	r3, [r7, #12]
 810930c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810930e:	2b00      	cmp	r3, #0
 8109310:	d10d      	bne.n	810932e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8109312:	68fb      	ldr	r3, [r7, #12]
 8109314:	681b      	ldr	r3, [r3, #0]
 8109316:	2b00      	cmp	r3, #0
 8109318:	d14d      	bne.n	81093b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810931a:	68fb      	ldr	r3, [r7, #12]
 810931c:	689b      	ldr	r3, [r3, #8]
 810931e:	4618      	mov	r0, r3
 8109320:	f001 fb1a 	bl	810a958 <xTaskPriorityDisinherit>
 8109324:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8109326:	68fb      	ldr	r3, [r7, #12]
 8109328:	2200      	movs	r2, #0
 810932a:	609a      	str	r2, [r3, #8]
 810932c:	e043      	b.n	81093b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810932e:	687b      	ldr	r3, [r7, #4]
 8109330:	2b00      	cmp	r3, #0
 8109332:	d119      	bne.n	8109368 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8109334:	68fb      	ldr	r3, [r7, #12]
 8109336:	6858      	ldr	r0, [r3, #4]
 8109338:	68fb      	ldr	r3, [r7, #12]
 810933a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810933c:	461a      	mov	r2, r3
 810933e:	68b9      	ldr	r1, [r7, #8]
 8109340:	f00c febd 	bl	81160be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8109344:	68fb      	ldr	r3, [r7, #12]
 8109346:	685a      	ldr	r2, [r3, #4]
 8109348:	68fb      	ldr	r3, [r7, #12]
 810934a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810934c:	441a      	add	r2, r3
 810934e:	68fb      	ldr	r3, [r7, #12]
 8109350:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8109352:	68fb      	ldr	r3, [r7, #12]
 8109354:	685a      	ldr	r2, [r3, #4]
 8109356:	68fb      	ldr	r3, [r7, #12]
 8109358:	689b      	ldr	r3, [r3, #8]
 810935a:	429a      	cmp	r2, r3
 810935c:	d32b      	bcc.n	81093b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810935e:	68fb      	ldr	r3, [r7, #12]
 8109360:	681a      	ldr	r2, [r3, #0]
 8109362:	68fb      	ldr	r3, [r7, #12]
 8109364:	605a      	str	r2, [r3, #4]
 8109366:	e026      	b.n	81093b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8109368:	68fb      	ldr	r3, [r7, #12]
 810936a:	68d8      	ldr	r0, [r3, #12]
 810936c:	68fb      	ldr	r3, [r7, #12]
 810936e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109370:	461a      	mov	r2, r3
 8109372:	68b9      	ldr	r1, [r7, #8]
 8109374:	f00c fea3 	bl	81160be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8109378:	68fb      	ldr	r3, [r7, #12]
 810937a:	68da      	ldr	r2, [r3, #12]
 810937c:	68fb      	ldr	r3, [r7, #12]
 810937e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109380:	425b      	negs	r3, r3
 8109382:	441a      	add	r2, r3
 8109384:	68fb      	ldr	r3, [r7, #12]
 8109386:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8109388:	68fb      	ldr	r3, [r7, #12]
 810938a:	68da      	ldr	r2, [r3, #12]
 810938c:	68fb      	ldr	r3, [r7, #12]
 810938e:	681b      	ldr	r3, [r3, #0]
 8109390:	429a      	cmp	r2, r3
 8109392:	d207      	bcs.n	81093a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8109394:	68fb      	ldr	r3, [r7, #12]
 8109396:	689a      	ldr	r2, [r3, #8]
 8109398:	68fb      	ldr	r3, [r7, #12]
 810939a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810939c:	425b      	negs	r3, r3
 810939e:	441a      	add	r2, r3
 81093a0:	68fb      	ldr	r3, [r7, #12]
 81093a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 81093a4:	687b      	ldr	r3, [r7, #4]
 81093a6:	2b02      	cmp	r3, #2
 81093a8:	d105      	bne.n	81093b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81093aa:	693b      	ldr	r3, [r7, #16]
 81093ac:	2b00      	cmp	r3, #0
 81093ae:	d002      	beq.n	81093b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 81093b0:	693b      	ldr	r3, [r7, #16]
 81093b2:	3b01      	subs	r3, #1
 81093b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 81093b6:	693b      	ldr	r3, [r7, #16]
 81093b8:	1c5a      	adds	r2, r3, #1
 81093ba:	68fb      	ldr	r3, [r7, #12]
 81093bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 81093be:	697b      	ldr	r3, [r7, #20]
}
 81093c0:	4618      	mov	r0, r3
 81093c2:	3718      	adds	r7, #24
 81093c4:	46bd      	mov	sp, r7
 81093c6:	bd80      	pop	{r7, pc}

081093c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 81093c8:	b580      	push	{r7, lr}
 81093ca:	b082      	sub	sp, #8
 81093cc:	af00      	add	r7, sp, #0
 81093ce:	6078      	str	r0, [r7, #4]
 81093d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 81093d2:	687b      	ldr	r3, [r7, #4]
 81093d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81093d6:	2b00      	cmp	r3, #0
 81093d8:	d018      	beq.n	810940c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81093da:	687b      	ldr	r3, [r7, #4]
 81093dc:	68da      	ldr	r2, [r3, #12]
 81093de:	687b      	ldr	r3, [r7, #4]
 81093e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81093e2:	441a      	add	r2, r3
 81093e4:	687b      	ldr	r3, [r7, #4]
 81093e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 81093e8:	687b      	ldr	r3, [r7, #4]
 81093ea:	68da      	ldr	r2, [r3, #12]
 81093ec:	687b      	ldr	r3, [r7, #4]
 81093ee:	689b      	ldr	r3, [r3, #8]
 81093f0:	429a      	cmp	r2, r3
 81093f2:	d303      	bcc.n	81093fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 81093f4:	687b      	ldr	r3, [r7, #4]
 81093f6:	681a      	ldr	r2, [r3, #0]
 81093f8:	687b      	ldr	r3, [r7, #4]
 81093fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81093fc:	687b      	ldr	r3, [r7, #4]
 81093fe:	68d9      	ldr	r1, [r3, #12]
 8109400:	687b      	ldr	r3, [r7, #4]
 8109402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109404:	461a      	mov	r2, r3
 8109406:	6838      	ldr	r0, [r7, #0]
 8109408:	f00c fe59 	bl	81160be <memcpy>
	}
}
 810940c:	bf00      	nop
 810940e:	3708      	adds	r7, #8
 8109410:	46bd      	mov	sp, r7
 8109412:	bd80      	pop	{r7, pc}

08109414 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8109414:	b580      	push	{r7, lr}
 8109416:	b084      	sub	sp, #16
 8109418:	af00      	add	r7, sp, #0
 810941a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810941c:	f7fe fefc 	bl	8108218 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8109420:	687b      	ldr	r3, [r7, #4]
 8109422:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8109426:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8109428:	e011      	b.n	810944e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810942a:	687b      	ldr	r3, [r7, #4]
 810942c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810942e:	2b00      	cmp	r3, #0
 8109430:	d012      	beq.n	8109458 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8109432:	687b      	ldr	r3, [r7, #4]
 8109434:	3324      	adds	r3, #36	@ 0x24
 8109436:	4618      	mov	r0, r3
 8109438:	f001 f832 	bl	810a4a0 <xTaskRemoveFromEventList>
 810943c:	4603      	mov	r3, r0
 810943e:	2b00      	cmp	r3, #0
 8109440:	d001      	beq.n	8109446 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8109442:	f001 f90b 	bl	810a65c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8109446:	7bfb      	ldrb	r3, [r7, #15]
 8109448:	3b01      	subs	r3, #1
 810944a:	b2db      	uxtb	r3, r3
 810944c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810944e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8109452:	2b00      	cmp	r3, #0
 8109454:	dce9      	bgt.n	810942a <prvUnlockQueue+0x16>
 8109456:	e000      	b.n	810945a <prvUnlockQueue+0x46>
					break;
 8109458:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810945a:	687b      	ldr	r3, [r7, #4]
 810945c:	22ff      	movs	r2, #255	@ 0xff
 810945e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8109462:	f7fe ff0b 	bl	810827c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8109466:	f7fe fed7 	bl	8108218 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810946a:	687b      	ldr	r3, [r7, #4]
 810946c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8109470:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8109472:	e011      	b.n	8109498 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109474:	687b      	ldr	r3, [r7, #4]
 8109476:	691b      	ldr	r3, [r3, #16]
 8109478:	2b00      	cmp	r3, #0
 810947a:	d012      	beq.n	81094a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810947c:	687b      	ldr	r3, [r7, #4]
 810947e:	3310      	adds	r3, #16
 8109480:	4618      	mov	r0, r3
 8109482:	f001 f80d 	bl	810a4a0 <xTaskRemoveFromEventList>
 8109486:	4603      	mov	r3, r0
 8109488:	2b00      	cmp	r3, #0
 810948a:	d001      	beq.n	8109490 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810948c:	f001 f8e6 	bl	810a65c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8109490:	7bbb      	ldrb	r3, [r7, #14]
 8109492:	3b01      	subs	r3, #1
 8109494:	b2db      	uxtb	r3, r3
 8109496:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8109498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810949c:	2b00      	cmp	r3, #0
 810949e:	dce9      	bgt.n	8109474 <prvUnlockQueue+0x60>
 81094a0:	e000      	b.n	81094a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 81094a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 81094a4:	687b      	ldr	r3, [r7, #4]
 81094a6:	22ff      	movs	r2, #255	@ 0xff
 81094a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 81094ac:	f7fe fee6 	bl	810827c <vPortExitCritical>
}
 81094b0:	bf00      	nop
 81094b2:	3710      	adds	r7, #16
 81094b4:	46bd      	mov	sp, r7
 81094b6:	bd80      	pop	{r7, pc}

081094b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 81094b8:	b580      	push	{r7, lr}
 81094ba:	b084      	sub	sp, #16
 81094bc:	af00      	add	r7, sp, #0
 81094be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81094c0:	f7fe feaa 	bl	8108218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 81094c4:	687b      	ldr	r3, [r7, #4]
 81094c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81094c8:	2b00      	cmp	r3, #0
 81094ca:	d102      	bne.n	81094d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 81094cc:	2301      	movs	r3, #1
 81094ce:	60fb      	str	r3, [r7, #12]
 81094d0:	e001      	b.n	81094d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 81094d2:	2300      	movs	r3, #0
 81094d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81094d6:	f7fe fed1 	bl	810827c <vPortExitCritical>

	return xReturn;
 81094da:	68fb      	ldr	r3, [r7, #12]
}
 81094dc:	4618      	mov	r0, r3
 81094de:	3710      	adds	r7, #16
 81094e0:	46bd      	mov	sp, r7
 81094e2:	bd80      	pop	{r7, pc}

081094e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 81094e4:	b580      	push	{r7, lr}
 81094e6:	b084      	sub	sp, #16
 81094e8:	af00      	add	r7, sp, #0
 81094ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81094ec:	f7fe fe94 	bl	8108218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 81094f0:	687b      	ldr	r3, [r7, #4]
 81094f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81094f4:	687b      	ldr	r3, [r7, #4]
 81094f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81094f8:	429a      	cmp	r2, r3
 81094fa:	d102      	bne.n	8109502 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 81094fc:	2301      	movs	r3, #1
 81094fe:	60fb      	str	r3, [r7, #12]
 8109500:	e001      	b.n	8109506 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8109502:	2300      	movs	r3, #0
 8109504:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8109506:	f7fe feb9 	bl	810827c <vPortExitCritical>

	return xReturn;
 810950a:	68fb      	ldr	r3, [r7, #12]
}
 810950c:	4618      	mov	r0, r3
 810950e:	3710      	adds	r7, #16
 8109510:	46bd      	mov	sp, r7
 8109512:	bd80      	pop	{r7, pc}

08109514 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8109514:	b480      	push	{r7}
 8109516:	b085      	sub	sp, #20
 8109518:	af00      	add	r7, sp, #0
 810951a:	6078      	str	r0, [r7, #4]
 810951c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810951e:	2300      	movs	r3, #0
 8109520:	60fb      	str	r3, [r7, #12]
 8109522:	e014      	b.n	810954e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8109524:	4a0f      	ldr	r2, [pc, #60]	@ (8109564 <vQueueAddToRegistry+0x50>)
 8109526:	68fb      	ldr	r3, [r7, #12]
 8109528:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810952c:	2b00      	cmp	r3, #0
 810952e:	d10b      	bne.n	8109548 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8109530:	490c      	ldr	r1, [pc, #48]	@ (8109564 <vQueueAddToRegistry+0x50>)
 8109532:	68fb      	ldr	r3, [r7, #12]
 8109534:	683a      	ldr	r2, [r7, #0]
 8109536:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810953a:	4a0a      	ldr	r2, [pc, #40]	@ (8109564 <vQueueAddToRegistry+0x50>)
 810953c:	68fb      	ldr	r3, [r7, #12]
 810953e:	00db      	lsls	r3, r3, #3
 8109540:	4413      	add	r3, r2
 8109542:	687a      	ldr	r2, [r7, #4]
 8109544:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8109546:	e006      	b.n	8109556 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8109548:	68fb      	ldr	r3, [r7, #12]
 810954a:	3301      	adds	r3, #1
 810954c:	60fb      	str	r3, [r7, #12]
 810954e:	68fb      	ldr	r3, [r7, #12]
 8109550:	2b07      	cmp	r3, #7
 8109552:	d9e7      	bls.n	8109524 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8109554:	bf00      	nop
 8109556:	bf00      	nop
 8109558:	3714      	adds	r7, #20
 810955a:	46bd      	mov	sp, r7
 810955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109560:	4770      	bx	lr
 8109562:	bf00      	nop
 8109564:	1000aa1c 	.word	0x1000aa1c

08109568 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8109568:	b480      	push	{r7}
 810956a:	b085      	sub	sp, #20
 810956c:	af00      	add	r7, sp, #0
 810956e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8109570:	2300      	movs	r3, #0
 8109572:	60fb      	str	r3, [r7, #12]
 8109574:	e016      	b.n	81095a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8109576:	4a10      	ldr	r2, [pc, #64]	@ (81095b8 <vQueueUnregisterQueue+0x50>)
 8109578:	68fb      	ldr	r3, [r7, #12]
 810957a:	00db      	lsls	r3, r3, #3
 810957c:	4413      	add	r3, r2
 810957e:	685b      	ldr	r3, [r3, #4]
 8109580:	687a      	ldr	r2, [r7, #4]
 8109582:	429a      	cmp	r2, r3
 8109584:	d10b      	bne.n	810959e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8109586:	4a0c      	ldr	r2, [pc, #48]	@ (81095b8 <vQueueUnregisterQueue+0x50>)
 8109588:	68fb      	ldr	r3, [r7, #12]
 810958a:	2100      	movs	r1, #0
 810958c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8109590:	4a09      	ldr	r2, [pc, #36]	@ (81095b8 <vQueueUnregisterQueue+0x50>)
 8109592:	68fb      	ldr	r3, [r7, #12]
 8109594:	00db      	lsls	r3, r3, #3
 8109596:	4413      	add	r3, r2
 8109598:	2200      	movs	r2, #0
 810959a:	605a      	str	r2, [r3, #4]
				break;
 810959c:	e006      	b.n	81095ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810959e:	68fb      	ldr	r3, [r7, #12]
 81095a0:	3301      	adds	r3, #1
 81095a2:	60fb      	str	r3, [r7, #12]
 81095a4:	68fb      	ldr	r3, [r7, #12]
 81095a6:	2b07      	cmp	r3, #7
 81095a8:	d9e5      	bls.n	8109576 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 81095aa:	bf00      	nop
 81095ac:	bf00      	nop
 81095ae:	3714      	adds	r7, #20
 81095b0:	46bd      	mov	sp, r7
 81095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81095b6:	4770      	bx	lr
 81095b8:	1000aa1c 	.word	0x1000aa1c

081095bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81095bc:	b580      	push	{r7, lr}
 81095be:	b086      	sub	sp, #24
 81095c0:	af00      	add	r7, sp, #0
 81095c2:	60f8      	str	r0, [r7, #12]
 81095c4:	60b9      	str	r1, [r7, #8]
 81095c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 81095c8:	68fb      	ldr	r3, [r7, #12]
 81095ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 81095cc:	f7fe fe24 	bl	8108218 <vPortEnterCritical>
 81095d0:	697b      	ldr	r3, [r7, #20]
 81095d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81095d6:	b25b      	sxtb	r3, r3
 81095d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81095dc:	d103      	bne.n	81095e6 <vQueueWaitForMessageRestricted+0x2a>
 81095de:	697b      	ldr	r3, [r7, #20]
 81095e0:	2200      	movs	r2, #0
 81095e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81095e6:	697b      	ldr	r3, [r7, #20]
 81095e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81095ec:	b25b      	sxtb	r3, r3
 81095ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 81095f2:	d103      	bne.n	81095fc <vQueueWaitForMessageRestricted+0x40>
 81095f4:	697b      	ldr	r3, [r7, #20]
 81095f6:	2200      	movs	r2, #0
 81095f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81095fc:	f7fe fe3e 	bl	810827c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8109600:	697b      	ldr	r3, [r7, #20]
 8109602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109604:	2b00      	cmp	r3, #0
 8109606:	d106      	bne.n	8109616 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8109608:	697b      	ldr	r3, [r7, #20]
 810960a:	3324      	adds	r3, #36	@ 0x24
 810960c:	687a      	ldr	r2, [r7, #4]
 810960e:	68b9      	ldr	r1, [r7, #8]
 8109610:	4618      	mov	r0, r3
 8109612:	f000 ff19 	bl	810a448 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8109616:	6978      	ldr	r0, [r7, #20]
 8109618:	f7ff fefc 	bl	8109414 <prvUnlockQueue>
	}
 810961c:	bf00      	nop
 810961e:	3718      	adds	r7, #24
 8109620:	46bd      	mov	sp, r7
 8109622:	bd80      	pop	{r7, pc}

08109624 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 8109624:	b580      	push	{r7, lr}
 8109626:	b090      	sub	sp, #64	@ 0x40
 8109628:	af02      	add	r7, sp, #8
 810962a:	60f8      	str	r0, [r7, #12]
 810962c:	60b9      	str	r1, [r7, #8]
 810962e:	607a      	str	r2, [r7, #4]
 8109630:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 8109632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8109634:	62fb      	str	r3, [r7, #44]	@ 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 8109636:	683b      	ldr	r3, [r7, #0]
 8109638:	2b00      	cmp	r3, #0
 810963a:	d10b      	bne.n	8109654 <xStreamBufferGenericCreateStatic+0x30>
	__asm volatile
 810963c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109640:	f383 8811 	msr	BASEPRI, r3
 8109644:	f3bf 8f6f 	isb	sy
 8109648:	f3bf 8f4f 	dsb	sy
 810964c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810964e:	bf00      	nop
 8109650:	bf00      	nop
 8109652:	e7fd      	b.n	8109650 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 8109654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8109656:	2b00      	cmp	r3, #0
 8109658:	d10b      	bne.n	8109672 <xStreamBufferGenericCreateStatic+0x4e>
	__asm volatile
 810965a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810965e:	f383 8811 	msr	BASEPRI, r3
 8109662:	f3bf 8f6f 	isb	sy
 8109666:	f3bf 8f4f 	dsb	sy
 810966a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810966c:	bf00      	nop
 810966e:	bf00      	nop
 8109670:	e7fd      	b.n	810966e <xStreamBufferGenericCreateStatic+0x4a>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8109672:	68ba      	ldr	r2, [r7, #8]
 8109674:	68fb      	ldr	r3, [r7, #12]
 8109676:	429a      	cmp	r2, r3
 8109678:	d90b      	bls.n	8109692 <xStreamBufferGenericCreateStatic+0x6e>
	__asm volatile
 810967a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810967e:	f383 8811 	msr	BASEPRI, r3
 8109682:	f3bf 8f6f 	isb	sy
 8109686:	f3bf 8f4f 	dsb	sy
 810968a:	623b      	str	r3, [r7, #32]
}
 810968c:	bf00      	nop
 810968e:	bf00      	nop
 8109690:	e7fd      	b.n	810968e <xStreamBufferGenericCreateStatic+0x6a>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8109692:	68bb      	ldr	r3, [r7, #8]
 8109694:	2b00      	cmp	r3, #0
 8109696:	d101      	bne.n	810969c <xStreamBufferGenericCreateStatic+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8109698:	2301      	movs	r3, #1
 810969a:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 810969c:	687b      	ldr	r3, [r7, #4]
 810969e:	2b00      	cmp	r3, #0
 81096a0:	d003      	beq.n	81096aa <xStreamBufferGenericCreateStatic+0x86>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 81096a2:	2303      	movs	r3, #3
 81096a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 81096a8:	e002      	b.n	81096b0 <xStreamBufferGenericCreateStatic+0x8c>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 81096aa:	2302      	movs	r3, #2
 81096ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 81096b0:	68fb      	ldr	r3, [r7, #12]
 81096b2:	2b04      	cmp	r3, #4
 81096b4:	d80b      	bhi.n	81096ce <xStreamBufferGenericCreateStatic+0xaa>
	__asm volatile
 81096b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81096ba:	f383 8811 	msr	BASEPRI, r3
 81096be:	f3bf 8f6f 	isb	sy
 81096c2:	f3bf 8f4f 	dsb	sy
 81096c6:	61fb      	str	r3, [r7, #28]
}
 81096c8:	bf00      	nop
 81096ca:	bf00      	nop
 81096cc:	e7fd      	b.n	81096ca <xStreamBufferGenericCreateStatic+0xa6>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 81096ce:	2324      	movs	r3, #36	@ 0x24
 81096d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 81096d2:	697b      	ldr	r3, [r7, #20]
 81096d4:	2b24      	cmp	r3, #36	@ 0x24
 81096d6:	d00b      	beq.n	81096f0 <xStreamBufferGenericCreateStatic+0xcc>
	__asm volatile
 81096d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81096dc:	f383 8811 	msr	BASEPRI, r3
 81096e0:	f3bf 8f6f 	isb	sy
 81096e4:	f3bf 8f4f 	dsb	sy
 81096e8:	61bb      	str	r3, [r7, #24]
}
 81096ea:	bf00      	nop
 81096ec:	bf00      	nop
 81096ee:	e7fd      	b.n	81096ec <xStreamBufferGenericCreateStatic+0xc8>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 81096f0:	683b      	ldr	r3, [r7, #0]
 81096f2:	2b00      	cmp	r3, #0
 81096f4:	d015      	beq.n	8109722 <xStreamBufferGenericCreateStatic+0xfe>
 81096f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81096f8:	2b00      	cmp	r3, #0
 81096fa:	d012      	beq.n	8109722 <xStreamBufferGenericCreateStatic+0xfe>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 81096fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8109700:	9300      	str	r3, [sp, #0]
 8109702:	68bb      	ldr	r3, [r7, #8]
 8109704:	68fa      	ldr	r2, [r7, #12]
 8109706:	6839      	ldr	r1, [r7, #0]
 8109708:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810970a:	f000 f9f1 	bl	8109af0 <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 810970e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109710:	7f1b      	ldrb	r3, [r3, #28]
 8109712:	f043 0302 	orr.w	r3, r3, #2
 8109716:	b2da      	uxtb	r2, r3
 8109718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810971a:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 810971c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810971e:	637b      	str	r3, [r7, #52]	@ 0x34
 8109720:	e001      	b.n	8109726 <xStreamBufferGenericCreateStatic+0x102>
		}
		else
		{
			xReturn = NULL;
 8109722:	2300      	movs	r3, #0
 8109724:	637b      	str	r3, [r7, #52]	@ 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 8109726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8109728:	4618      	mov	r0, r3
 810972a:	3738      	adds	r7, #56	@ 0x38
 810972c:	46bd      	mov	sp, r7
 810972e:	bd80      	pop	{r7, pc}

08109730 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8109730:	b580      	push	{r7, lr}
 8109732:	b08e      	sub	sp, #56	@ 0x38
 8109734:	af02      	add	r7, sp, #8
 8109736:	60f8      	str	r0, [r7, #12]
 8109738:	60b9      	str	r1, [r7, #8]
 810973a:	607a      	str	r2, [r7, #4]
 810973c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810973e:	68fb      	ldr	r3, [r7, #12]
 8109740:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8109742:	2300      	movs	r3, #0
 8109744:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8109746:	68bb      	ldr	r3, [r7, #8]
 8109748:	2b00      	cmp	r3, #0
 810974a:	d10b      	bne.n	8109764 <xStreamBufferReceive+0x34>
	__asm volatile
 810974c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109750:	f383 8811 	msr	BASEPRI, r3
 8109754:	f3bf 8f6f 	isb	sy
 8109758:	f3bf 8f4f 	dsb	sy
 810975c:	61fb      	str	r3, [r7, #28]
}
 810975e:	bf00      	nop
 8109760:	bf00      	nop
 8109762:	e7fd      	b.n	8109760 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8109764:	6a3b      	ldr	r3, [r7, #32]
 8109766:	2b00      	cmp	r3, #0
 8109768:	d10b      	bne.n	8109782 <xStreamBufferReceive+0x52>
	__asm volatile
 810976a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810976e:	f383 8811 	msr	BASEPRI, r3
 8109772:	f3bf 8f6f 	isb	sy
 8109776:	f3bf 8f4f 	dsb	sy
 810977a:	61bb      	str	r3, [r7, #24]
}
 810977c:	bf00      	nop
 810977e:	bf00      	nop
 8109780:	e7fd      	b.n	810977e <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8109782:	6a3b      	ldr	r3, [r7, #32]
 8109784:	7f1b      	ldrb	r3, [r3, #28]
 8109786:	f003 0301 	and.w	r3, r3, #1
 810978a:	2b00      	cmp	r3, #0
 810978c:	d002      	beq.n	8109794 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 810978e:	2304      	movs	r3, #4
 8109790:	627b      	str	r3, [r7, #36]	@ 0x24
 8109792:	e001      	b.n	8109798 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8109794:	2300      	movs	r3, #0
 8109796:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8109798:	683b      	ldr	r3, [r7, #0]
 810979a:	2b00      	cmp	r3, #0
 810979c:	d035      	beq.n	810980a <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 810979e:	f7fe fd3b 	bl	8108218 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 81097a2:	6a38      	ldr	r0, [r7, #32]
 81097a4:	f000 f984 	bl	8109ab0 <prvBytesInBuffer>
 81097a8:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 81097aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81097ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81097ae:	429a      	cmp	r2, r3
 81097b0:	d817      	bhi.n	81097e2 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 81097b2:	2000      	movs	r0, #0
 81097b4:	f001 fb1e 	bl	810adf4 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 81097b8:	6a3b      	ldr	r3, [r7, #32]
 81097ba:	691b      	ldr	r3, [r3, #16]
 81097bc:	2b00      	cmp	r3, #0
 81097be:	d00b      	beq.n	81097d8 <xStreamBufferReceive+0xa8>
	__asm volatile
 81097c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81097c4:	f383 8811 	msr	BASEPRI, r3
 81097c8:	f3bf 8f6f 	isb	sy
 81097cc:	f3bf 8f4f 	dsb	sy
 81097d0:	617b      	str	r3, [r7, #20]
}
 81097d2:	bf00      	nop
 81097d4:	bf00      	nop
 81097d6:	e7fd      	b.n	81097d4 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 81097d8:	f001 f828 	bl	810a82c <xTaskGetCurrentTaskHandle>
 81097dc:	4602      	mov	r2, r0
 81097de:	6a3b      	ldr	r3, [r7, #32]
 81097e0:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 81097e2:	f7fe fd4b 	bl	810827c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 81097e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81097e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81097ea:	429a      	cmp	r2, r3
 81097ec:	d811      	bhi.n	8109812 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 81097ee:	683b      	ldr	r3, [r7, #0]
 81097f0:	2200      	movs	r2, #0
 81097f2:	2100      	movs	r1, #0
 81097f4:	2000      	movs	r0, #0
 81097f6:	f001 f9b7 	bl	810ab68 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 81097fa:	6a3b      	ldr	r3, [r7, #32]
 81097fc:	2200      	movs	r2, #0
 81097fe:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8109800:	6a38      	ldr	r0, [r7, #32]
 8109802:	f000 f955 	bl	8109ab0 <prvBytesInBuffer>
 8109806:	62b8      	str	r0, [r7, #40]	@ 0x28
 8109808:	e003      	b.n	8109812 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 810980a:	6a38      	ldr	r0, [r7, #32]
 810980c:	f000 f950 	bl	8109ab0 <prvBytesInBuffer>
 8109810:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8109812:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8109814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109816:	429a      	cmp	r2, r3
 8109818:	d90e      	bls.n	8109838 <xStreamBufferReceive+0x108>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 810981a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810981c:	9300      	str	r3, [sp, #0]
 810981e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109820:	687a      	ldr	r2, [r7, #4]
 8109822:	68b9      	ldr	r1, [r7, #8]
 8109824:	6a38      	ldr	r0, [r7, #32]
 8109826:	f000 f80c 	bl	8109842 <prvReadMessageFromBuffer>
 810982a:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 810982c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810982e:	2b00      	cmp	r3, #0
 8109830:	d002      	beq.n	8109838 <xStreamBufferReceive+0x108>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8109832:	6a38      	ldr	r0, [r7, #32]
 8109834:	f7f6 fe66 	bl	8100504 <vGenerateRemoteInterrupt>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8109838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 810983a:	4618      	mov	r0, r3
 810983c:	3730      	adds	r7, #48	@ 0x30
 810983e:	46bd      	mov	sp, r7
 8109840:	bd80      	pop	{r7, pc}

08109842 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8109842:	b580      	push	{r7, lr}
 8109844:	b088      	sub	sp, #32
 8109846:	af00      	add	r7, sp, #0
 8109848:	60f8      	str	r0, [r7, #12]
 810984a:	60b9      	str	r1, [r7, #8]
 810984c:	607a      	str	r2, [r7, #4]
 810984e:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8109850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109852:	2b00      	cmp	r3, #0
 8109854:	d019      	beq.n	810988a <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8109856:	68fb      	ldr	r3, [r7, #12]
 8109858:	681b      	ldr	r3, [r3, #0]
 810985a:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 810985c:	f107 0110 	add.w	r1, r7, #16
 8109860:	683b      	ldr	r3, [r7, #0]
 8109862:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8109864:	68f8      	ldr	r0, [r7, #12]
 8109866:	f000 f8a6 	bl	81099b6 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 810986a:	693b      	ldr	r3, [r7, #16]
 810986c:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 810986e:	683a      	ldr	r2, [r7, #0]
 8109870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109872:	1ad3      	subs	r3, r2, r3
 8109874:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8109876:	69fa      	ldr	r2, [r7, #28]
 8109878:	687b      	ldr	r3, [r7, #4]
 810987a:	429a      	cmp	r2, r3
 810987c:	d907      	bls.n	810988e <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 810987e:	68fb      	ldr	r3, [r7, #12]
 8109880:	69ba      	ldr	r2, [r7, #24]
 8109882:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8109884:	2300      	movs	r3, #0
 8109886:	61fb      	str	r3, [r7, #28]
 8109888:	e001      	b.n	810988e <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 810988a:	687b      	ldr	r3, [r7, #4]
 810988c:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 810988e:	683b      	ldr	r3, [r7, #0]
 8109890:	69fa      	ldr	r2, [r7, #28]
 8109892:	68b9      	ldr	r1, [r7, #8]
 8109894:	68f8      	ldr	r0, [r7, #12]
 8109896:	f000 f88e 	bl	81099b6 <prvReadBytesFromBuffer>
 810989a:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 810989c:	697b      	ldr	r3, [r7, #20]
}
 810989e:	4618      	mov	r0, r3
 81098a0:	3720      	adds	r7, #32
 81098a2:	46bd      	mov	sp, r7
 81098a4:	bd80      	pop	{r7, pc}

081098a6 <xStreamBufferSendCompletedFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 81098a6:	b580      	push	{r7, lr}
 81098a8:	b08c      	sub	sp, #48	@ 0x30
 81098aa:	af02      	add	r7, sp, #8
 81098ac:	6078      	str	r0, [r7, #4]
 81098ae:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 81098b0:	687b      	ldr	r3, [r7, #4]
 81098b2:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 81098b4:	6a3b      	ldr	r3, [r7, #32]
 81098b6:	2b00      	cmp	r3, #0
 81098b8:	d10b      	bne.n	81098d2 <xStreamBufferSendCompletedFromISR+0x2c>
	__asm volatile
 81098ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81098be:	f383 8811 	msr	BASEPRI, r3
 81098c2:	f3bf 8f6f 	isb	sy
 81098c6:	f3bf 8f4f 	dsb	sy
 81098ca:	61bb      	str	r3, [r7, #24]
}
 81098cc:	bf00      	nop
 81098ce:	bf00      	nop
 81098d0:	e7fd      	b.n	81098ce <xStreamBufferSendCompletedFromISR+0x28>
	__asm volatile
 81098d2:	f3ef 8211 	mrs	r2, BASEPRI
 81098d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81098da:	f383 8811 	msr	BASEPRI, r3
 81098de:	f3bf 8f6f 	isb	sy
 81098e2:	f3bf 8f4f 	dsb	sy
 81098e6:	617a      	str	r2, [r7, #20]
 81098e8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 81098ea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 81098ec:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 81098ee:	6a3b      	ldr	r3, [r7, #32]
 81098f0:	691b      	ldr	r3, [r3, #16]
 81098f2:	2b00      	cmp	r3, #0
 81098f4:	d00e      	beq.n	8109914 <xStreamBufferSendCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 81098f6:	6a3b      	ldr	r3, [r7, #32]
 81098f8:	6918      	ldr	r0, [r3, #16]
 81098fa:	683b      	ldr	r3, [r7, #0]
 81098fc:	9300      	str	r3, [sp, #0]
 81098fe:	2300      	movs	r3, #0
 8109900:	2200      	movs	r2, #0
 8109902:	2100      	movs	r1, #0
 8109904:	f001 f990 	bl	810ac28 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 8109908:	6a3b      	ldr	r3, [r7, #32]
 810990a:	2200      	movs	r2, #0
 810990c:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 810990e:	2301      	movs	r3, #1
 8109910:	627b      	str	r3, [r7, #36]	@ 0x24
 8109912:	e001      	b.n	8109918 <xStreamBufferSendCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 8109914:	2300      	movs	r3, #0
 8109916:	627b      	str	r3, [r7, #36]	@ 0x24
 8109918:	69fb      	ldr	r3, [r7, #28]
 810991a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 810991c:	68fb      	ldr	r3, [r7, #12]
 810991e:	f383 8811 	msr	BASEPRI, r3
}
 8109922:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8109924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8109926:	4618      	mov	r0, r3
 8109928:	3728      	adds	r7, #40	@ 0x28
 810992a:	46bd      	mov	sp, r7
 810992c:	bd80      	pop	{r7, pc}

0810992e <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 810992e:	b580      	push	{r7, lr}
 8109930:	b08c      	sub	sp, #48	@ 0x30
 8109932:	af02      	add	r7, sp, #8
 8109934:	6078      	str	r0, [r7, #4]
 8109936:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8109938:	687b      	ldr	r3, [r7, #4]
 810993a:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 810993c:	6a3b      	ldr	r3, [r7, #32]
 810993e:	2b00      	cmp	r3, #0
 8109940:	d10b      	bne.n	810995a <xStreamBufferReceiveCompletedFromISR+0x2c>
	__asm volatile
 8109942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109946:	f383 8811 	msr	BASEPRI, r3
 810994a:	f3bf 8f6f 	isb	sy
 810994e:	f3bf 8f4f 	dsb	sy
 8109952:	61bb      	str	r3, [r7, #24]
}
 8109954:	bf00      	nop
 8109956:	bf00      	nop
 8109958:	e7fd      	b.n	8109956 <xStreamBufferReceiveCompletedFromISR+0x28>
	__asm volatile
 810995a:	f3ef 8211 	mrs	r2, BASEPRI
 810995e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109962:	f383 8811 	msr	BASEPRI, r3
 8109966:	f3bf 8f6f 	isb	sy
 810996a:	f3bf 8f4f 	dsb	sy
 810996e:	617a      	str	r2, [r7, #20]
 8109970:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8109972:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8109974:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 8109976:	6a3b      	ldr	r3, [r7, #32]
 8109978:	695b      	ldr	r3, [r3, #20]
 810997a:	2b00      	cmp	r3, #0
 810997c:	d00e      	beq.n	810999c <xStreamBufferReceiveCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 810997e:	6a3b      	ldr	r3, [r7, #32]
 8109980:	6958      	ldr	r0, [r3, #20]
 8109982:	683b      	ldr	r3, [r7, #0]
 8109984:	9300      	str	r3, [sp, #0]
 8109986:	2300      	movs	r3, #0
 8109988:	2200      	movs	r2, #0
 810998a:	2100      	movs	r1, #0
 810998c:	f001 f94c 	bl	810ac28 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8109990:	6a3b      	ldr	r3, [r7, #32]
 8109992:	2200      	movs	r2, #0
 8109994:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
 8109996:	2301      	movs	r3, #1
 8109998:	627b      	str	r3, [r7, #36]	@ 0x24
 810999a:	e001      	b.n	81099a0 <xStreamBufferReceiveCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 810999c:	2300      	movs	r3, #0
 810999e:	627b      	str	r3, [r7, #36]	@ 0x24
 81099a0:	69fb      	ldr	r3, [r7, #28]
 81099a2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 81099a4:	68fb      	ldr	r3, [r7, #12]
 81099a6:	f383 8811 	msr	BASEPRI, r3
}
 81099aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81099ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 81099ae:	4618      	mov	r0, r3
 81099b0:	3728      	adds	r7, #40	@ 0x28
 81099b2:	46bd      	mov	sp, r7
 81099b4:	bd80      	pop	{r7, pc}

081099b6 <prvReadBytesFromBuffer>:
	return xCount;
}
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 81099b6:	b580      	push	{r7, lr}
 81099b8:	b08a      	sub	sp, #40	@ 0x28
 81099ba:	af00      	add	r7, sp, #0
 81099bc:	60f8      	str	r0, [r7, #12]
 81099be:	60b9      	str	r1, [r7, #8]
 81099c0:	607a      	str	r2, [r7, #4]
 81099c2:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 81099c4:	687a      	ldr	r2, [r7, #4]
 81099c6:	683b      	ldr	r3, [r7, #0]
 81099c8:	4293      	cmp	r3, r2
 81099ca:	bf28      	it	cs
 81099cc:	4613      	movcs	r3, r2
 81099ce:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 81099d0:	6a3b      	ldr	r3, [r7, #32]
 81099d2:	2b00      	cmp	r3, #0
 81099d4:	d067      	beq.n	8109aa6 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 81099d6:	68fb      	ldr	r3, [r7, #12]
 81099d8:	681b      	ldr	r3, [r3, #0]
 81099da:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 81099dc:	68fb      	ldr	r3, [r7, #12]
 81099de:	689a      	ldr	r2, [r3, #8]
 81099e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81099e2:	1ad3      	subs	r3, r2, r3
 81099e4:	6a3a      	ldr	r2, [r7, #32]
 81099e6:	4293      	cmp	r3, r2
 81099e8:	bf28      	it	cs
 81099ea:	4613      	movcs	r3, r2
 81099ec:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 81099ee:	69fa      	ldr	r2, [r7, #28]
 81099f0:	687b      	ldr	r3, [r7, #4]
 81099f2:	429a      	cmp	r2, r3
 81099f4:	d90b      	bls.n	8109a0e <prvReadBytesFromBuffer+0x58>
	__asm volatile
 81099f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81099fa:	f383 8811 	msr	BASEPRI, r3
 81099fe:	f3bf 8f6f 	isb	sy
 8109a02:	f3bf 8f4f 	dsb	sy
 8109a06:	61bb      	str	r3, [r7, #24]
}
 8109a08:	bf00      	nop
 8109a0a:	bf00      	nop
 8109a0c:	e7fd      	b.n	8109a0a <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8109a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109a10:	69fb      	ldr	r3, [r7, #28]
 8109a12:	441a      	add	r2, r3
 8109a14:	68fb      	ldr	r3, [r7, #12]
 8109a16:	689b      	ldr	r3, [r3, #8]
 8109a18:	429a      	cmp	r2, r3
 8109a1a:	d90b      	bls.n	8109a34 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 8109a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109a20:	f383 8811 	msr	BASEPRI, r3
 8109a24:	f3bf 8f6f 	isb	sy
 8109a28:	f3bf 8f4f 	dsb	sy
 8109a2c:	617b      	str	r3, [r7, #20]
}
 8109a2e:	bf00      	nop
 8109a30:	bf00      	nop
 8109a32:	e7fd      	b.n	8109a30 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8109a34:	68fb      	ldr	r3, [r7, #12]
 8109a36:	699a      	ldr	r2, [r3, #24]
 8109a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109a3a:	4413      	add	r3, r2
 8109a3c:	69fa      	ldr	r2, [r7, #28]
 8109a3e:	4619      	mov	r1, r3
 8109a40:	68b8      	ldr	r0, [r7, #8]
 8109a42:	f00c fb3c 	bl	81160be <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8109a46:	6a3a      	ldr	r2, [r7, #32]
 8109a48:	69fb      	ldr	r3, [r7, #28]
 8109a4a:	429a      	cmp	r2, r3
 8109a4c:	d91a      	bls.n	8109a84 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8109a4e:	6a3a      	ldr	r2, [r7, #32]
 8109a50:	687b      	ldr	r3, [r7, #4]
 8109a52:	429a      	cmp	r2, r3
 8109a54:	d90b      	bls.n	8109a6e <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 8109a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109a5a:	f383 8811 	msr	BASEPRI, r3
 8109a5e:	f3bf 8f6f 	isb	sy
 8109a62:	f3bf 8f4f 	dsb	sy
 8109a66:	613b      	str	r3, [r7, #16]
}
 8109a68:	bf00      	nop
 8109a6a:	bf00      	nop
 8109a6c:	e7fd      	b.n	8109a6a <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8109a6e:	68ba      	ldr	r2, [r7, #8]
 8109a70:	69fb      	ldr	r3, [r7, #28]
 8109a72:	18d0      	adds	r0, r2, r3
 8109a74:	68fb      	ldr	r3, [r7, #12]
 8109a76:	6999      	ldr	r1, [r3, #24]
 8109a78:	6a3a      	ldr	r2, [r7, #32]
 8109a7a:	69fb      	ldr	r3, [r7, #28]
 8109a7c:	1ad3      	subs	r3, r2, r3
 8109a7e:	461a      	mov	r2, r3
 8109a80:	f00c fb1d 	bl	81160be <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8109a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109a86:	6a3b      	ldr	r3, [r7, #32]
 8109a88:	4413      	add	r3, r2
 8109a8a:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8109a8c:	68fb      	ldr	r3, [r7, #12]
 8109a8e:	689b      	ldr	r3, [r3, #8]
 8109a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109a92:	429a      	cmp	r2, r3
 8109a94:	d304      	bcc.n	8109aa0 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8109a96:	68fb      	ldr	r3, [r7, #12]
 8109a98:	689b      	ldr	r3, [r3, #8]
 8109a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109a9c:	1ad3      	subs	r3, r2, r3
 8109a9e:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8109aa0:	68fb      	ldr	r3, [r7, #12]
 8109aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109aa4:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8109aa6:	6a3b      	ldr	r3, [r7, #32]
}
 8109aa8:	4618      	mov	r0, r3
 8109aaa:	3728      	adds	r7, #40	@ 0x28
 8109aac:	46bd      	mov	sp, r7
 8109aae:	bd80      	pop	{r7, pc}

08109ab0 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8109ab0:	b480      	push	{r7}
 8109ab2:	b085      	sub	sp, #20
 8109ab4:	af00      	add	r7, sp, #0
 8109ab6:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8109ab8:	687b      	ldr	r3, [r7, #4]
 8109aba:	689a      	ldr	r2, [r3, #8]
 8109abc:	687b      	ldr	r3, [r7, #4]
 8109abe:	685b      	ldr	r3, [r3, #4]
 8109ac0:	4413      	add	r3, r2
 8109ac2:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8109ac4:	687b      	ldr	r3, [r7, #4]
 8109ac6:	681b      	ldr	r3, [r3, #0]
 8109ac8:	68fa      	ldr	r2, [r7, #12]
 8109aca:	1ad3      	subs	r3, r2, r3
 8109acc:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8109ace:	687b      	ldr	r3, [r7, #4]
 8109ad0:	689b      	ldr	r3, [r3, #8]
 8109ad2:	68fa      	ldr	r2, [r7, #12]
 8109ad4:	429a      	cmp	r2, r3
 8109ad6:	d304      	bcc.n	8109ae2 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8109ad8:	687b      	ldr	r3, [r7, #4]
 8109ada:	689b      	ldr	r3, [r3, #8]
 8109adc:	68fa      	ldr	r2, [r7, #12]
 8109ade:	1ad3      	subs	r3, r2, r3
 8109ae0:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8109ae2:	68fb      	ldr	r3, [r7, #12]
}
 8109ae4:	4618      	mov	r0, r3
 8109ae6:	3714      	adds	r7, #20
 8109ae8:	46bd      	mov	sp, r7
 8109aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109aee:	4770      	bx	lr

08109af0 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8109af0:	b580      	push	{r7, lr}
 8109af2:	b086      	sub	sp, #24
 8109af4:	af00      	add	r7, sp, #0
 8109af6:	60f8      	str	r0, [r7, #12]
 8109af8:	60b9      	str	r1, [r7, #8]
 8109afa:	607a      	str	r2, [r7, #4]
 8109afc:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8109afe:	2355      	movs	r3, #85	@ 0x55
 8109b00:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8109b02:	687a      	ldr	r2, [r7, #4]
 8109b04:	6979      	ldr	r1, [r7, #20]
 8109b06:	68b8      	ldr	r0, [r7, #8]
 8109b08:	f00c f9b9 	bl	8115e7e <memset>
 8109b0c:	4602      	mov	r2, r0
 8109b0e:	68bb      	ldr	r3, [r7, #8]
 8109b10:	4293      	cmp	r3, r2
 8109b12:	d00b      	beq.n	8109b2c <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 8109b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109b18:	f383 8811 	msr	BASEPRI, r3
 8109b1c:	f3bf 8f6f 	isb	sy
 8109b20:	f3bf 8f4f 	dsb	sy
 8109b24:	613b      	str	r3, [r7, #16]
}
 8109b26:	bf00      	nop
 8109b28:	bf00      	nop
 8109b2a:	e7fd      	b.n	8109b28 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8109b2c:	2224      	movs	r2, #36	@ 0x24
 8109b2e:	2100      	movs	r1, #0
 8109b30:	68f8      	ldr	r0, [r7, #12]
 8109b32:	f00c f9a4 	bl	8115e7e <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8109b36:	68fb      	ldr	r3, [r7, #12]
 8109b38:	68ba      	ldr	r2, [r7, #8]
 8109b3a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8109b3c:	68fb      	ldr	r3, [r7, #12]
 8109b3e:	687a      	ldr	r2, [r7, #4]
 8109b40:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8109b42:	68fb      	ldr	r3, [r7, #12]
 8109b44:	683a      	ldr	r2, [r7, #0]
 8109b46:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8109b48:	68fb      	ldr	r3, [r7, #12]
 8109b4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8109b4e:	771a      	strb	r2, [r3, #28]
}
 8109b50:	bf00      	nop
 8109b52:	3718      	adds	r7, #24
 8109b54:	46bd      	mov	sp, r7
 8109b56:	bd80      	pop	{r7, pc}

08109b58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8109b58:	b580      	push	{r7, lr}
 8109b5a:	b08e      	sub	sp, #56	@ 0x38
 8109b5c:	af04      	add	r7, sp, #16
 8109b5e:	60f8      	str	r0, [r7, #12]
 8109b60:	60b9      	str	r1, [r7, #8]
 8109b62:	607a      	str	r2, [r7, #4]
 8109b64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8109b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109b68:	2b00      	cmp	r3, #0
 8109b6a:	d10b      	bne.n	8109b84 <xTaskCreateStatic+0x2c>
	__asm volatile
 8109b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109b70:	f383 8811 	msr	BASEPRI, r3
 8109b74:	f3bf 8f6f 	isb	sy
 8109b78:	f3bf 8f4f 	dsb	sy
 8109b7c:	623b      	str	r3, [r7, #32]
}
 8109b7e:	bf00      	nop
 8109b80:	bf00      	nop
 8109b82:	e7fd      	b.n	8109b80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8109b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109b86:	2b00      	cmp	r3, #0
 8109b88:	d10b      	bne.n	8109ba2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8109b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109b8e:	f383 8811 	msr	BASEPRI, r3
 8109b92:	f3bf 8f6f 	isb	sy
 8109b96:	f3bf 8f4f 	dsb	sy
 8109b9a:	61fb      	str	r3, [r7, #28]
}
 8109b9c:	bf00      	nop
 8109b9e:	bf00      	nop
 8109ba0:	e7fd      	b.n	8109b9e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8109ba2:	23a8      	movs	r3, #168	@ 0xa8
 8109ba4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8109ba6:	693b      	ldr	r3, [r7, #16]
 8109ba8:	2ba8      	cmp	r3, #168	@ 0xa8
 8109baa:	d00b      	beq.n	8109bc4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8109bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109bb0:	f383 8811 	msr	BASEPRI, r3
 8109bb4:	f3bf 8f6f 	isb	sy
 8109bb8:	f3bf 8f4f 	dsb	sy
 8109bbc:	61bb      	str	r3, [r7, #24]
}
 8109bbe:	bf00      	nop
 8109bc0:	bf00      	nop
 8109bc2:	e7fd      	b.n	8109bc0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8109bc4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8109bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109bc8:	2b00      	cmp	r3, #0
 8109bca:	d01e      	beq.n	8109c0a <xTaskCreateStatic+0xb2>
 8109bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109bce:	2b00      	cmp	r3, #0
 8109bd0:	d01b      	beq.n	8109c0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8109bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109bd4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8109bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109bd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8109bda:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8109bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109bde:	2202      	movs	r2, #2
 8109be0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8109be4:	2300      	movs	r3, #0
 8109be6:	9303      	str	r3, [sp, #12]
 8109be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109bea:	9302      	str	r3, [sp, #8]
 8109bec:	f107 0314 	add.w	r3, r7, #20
 8109bf0:	9301      	str	r3, [sp, #4]
 8109bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109bf4:	9300      	str	r3, [sp, #0]
 8109bf6:	683b      	ldr	r3, [r7, #0]
 8109bf8:	687a      	ldr	r2, [r7, #4]
 8109bfa:	68b9      	ldr	r1, [r7, #8]
 8109bfc:	68f8      	ldr	r0, [r7, #12]
 8109bfe:	f000 f851 	bl	8109ca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8109c02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8109c04:	f000 f8f6 	bl	8109df4 <prvAddNewTaskToReadyList>
 8109c08:	e001      	b.n	8109c0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8109c0a:	2300      	movs	r3, #0
 8109c0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8109c0e:	697b      	ldr	r3, [r7, #20]
	}
 8109c10:	4618      	mov	r0, r3
 8109c12:	3728      	adds	r7, #40	@ 0x28
 8109c14:	46bd      	mov	sp, r7
 8109c16:	bd80      	pop	{r7, pc}

08109c18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8109c18:	b580      	push	{r7, lr}
 8109c1a:	b08c      	sub	sp, #48	@ 0x30
 8109c1c:	af04      	add	r7, sp, #16
 8109c1e:	60f8      	str	r0, [r7, #12]
 8109c20:	60b9      	str	r1, [r7, #8]
 8109c22:	603b      	str	r3, [r7, #0]
 8109c24:	4613      	mov	r3, r2
 8109c26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8109c28:	88fb      	ldrh	r3, [r7, #6]
 8109c2a:	009b      	lsls	r3, r3, #2
 8109c2c:	4618      	mov	r0, r3
 8109c2e:	f7fd ff11 	bl	8107a54 <pvPortMalloc>
 8109c32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8109c34:	697b      	ldr	r3, [r7, #20]
 8109c36:	2b00      	cmp	r3, #0
 8109c38:	d00e      	beq.n	8109c58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8109c3a:	20a8      	movs	r0, #168	@ 0xa8
 8109c3c:	f7fd ff0a 	bl	8107a54 <pvPortMalloc>
 8109c40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8109c42:	69fb      	ldr	r3, [r7, #28]
 8109c44:	2b00      	cmp	r3, #0
 8109c46:	d003      	beq.n	8109c50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8109c48:	69fb      	ldr	r3, [r7, #28]
 8109c4a:	697a      	ldr	r2, [r7, #20]
 8109c4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8109c4e:	e005      	b.n	8109c5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8109c50:	6978      	ldr	r0, [r7, #20]
 8109c52:	f7fd ffcd 	bl	8107bf0 <vPortFree>
 8109c56:	e001      	b.n	8109c5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8109c58:	2300      	movs	r3, #0
 8109c5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8109c5c:	69fb      	ldr	r3, [r7, #28]
 8109c5e:	2b00      	cmp	r3, #0
 8109c60:	d017      	beq.n	8109c92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8109c62:	69fb      	ldr	r3, [r7, #28]
 8109c64:	2200      	movs	r2, #0
 8109c66:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8109c6a:	88fa      	ldrh	r2, [r7, #6]
 8109c6c:	2300      	movs	r3, #0
 8109c6e:	9303      	str	r3, [sp, #12]
 8109c70:	69fb      	ldr	r3, [r7, #28]
 8109c72:	9302      	str	r3, [sp, #8]
 8109c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109c76:	9301      	str	r3, [sp, #4]
 8109c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109c7a:	9300      	str	r3, [sp, #0]
 8109c7c:	683b      	ldr	r3, [r7, #0]
 8109c7e:	68b9      	ldr	r1, [r7, #8]
 8109c80:	68f8      	ldr	r0, [r7, #12]
 8109c82:	f000 f80f 	bl	8109ca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8109c86:	69f8      	ldr	r0, [r7, #28]
 8109c88:	f000 f8b4 	bl	8109df4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8109c8c:	2301      	movs	r3, #1
 8109c8e:	61bb      	str	r3, [r7, #24]
 8109c90:	e002      	b.n	8109c98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8109c92:	f04f 33ff 	mov.w	r3, #4294967295
 8109c96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8109c98:	69bb      	ldr	r3, [r7, #24]
	}
 8109c9a:	4618      	mov	r0, r3
 8109c9c:	3720      	adds	r7, #32
 8109c9e:	46bd      	mov	sp, r7
 8109ca0:	bd80      	pop	{r7, pc}
	...

08109ca4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8109ca4:	b580      	push	{r7, lr}
 8109ca6:	b088      	sub	sp, #32
 8109ca8:	af00      	add	r7, sp, #0
 8109caa:	60f8      	str	r0, [r7, #12]
 8109cac:	60b9      	str	r1, [r7, #8]
 8109cae:	607a      	str	r2, [r7, #4]
 8109cb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8109cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109cb4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8109cb6:	687b      	ldr	r3, [r7, #4]
 8109cb8:	009b      	lsls	r3, r3, #2
 8109cba:	461a      	mov	r2, r3
 8109cbc:	21a5      	movs	r1, #165	@ 0xa5
 8109cbe:	f00c f8de 	bl	8115e7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8109cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109cc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8109cc6:	687b      	ldr	r3, [r7, #4]
 8109cc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8109ccc:	3b01      	subs	r3, #1
 8109cce:	009b      	lsls	r3, r3, #2
 8109cd0:	4413      	add	r3, r2
 8109cd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8109cd4:	69bb      	ldr	r3, [r7, #24]
 8109cd6:	f023 0307 	bic.w	r3, r3, #7
 8109cda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8109cdc:	69bb      	ldr	r3, [r7, #24]
 8109cde:	f003 0307 	and.w	r3, r3, #7
 8109ce2:	2b00      	cmp	r3, #0
 8109ce4:	d00b      	beq.n	8109cfe <prvInitialiseNewTask+0x5a>
	__asm volatile
 8109ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109cea:	f383 8811 	msr	BASEPRI, r3
 8109cee:	f3bf 8f6f 	isb	sy
 8109cf2:	f3bf 8f4f 	dsb	sy
 8109cf6:	617b      	str	r3, [r7, #20]
}
 8109cf8:	bf00      	nop
 8109cfa:	bf00      	nop
 8109cfc:	e7fd      	b.n	8109cfa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8109cfe:	68bb      	ldr	r3, [r7, #8]
 8109d00:	2b00      	cmp	r3, #0
 8109d02:	d01f      	beq.n	8109d44 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8109d04:	2300      	movs	r3, #0
 8109d06:	61fb      	str	r3, [r7, #28]
 8109d08:	e012      	b.n	8109d30 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8109d0a:	68ba      	ldr	r2, [r7, #8]
 8109d0c:	69fb      	ldr	r3, [r7, #28]
 8109d0e:	4413      	add	r3, r2
 8109d10:	7819      	ldrb	r1, [r3, #0]
 8109d12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109d14:	69fb      	ldr	r3, [r7, #28]
 8109d16:	4413      	add	r3, r2
 8109d18:	3334      	adds	r3, #52	@ 0x34
 8109d1a:	460a      	mov	r2, r1
 8109d1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8109d1e:	68ba      	ldr	r2, [r7, #8]
 8109d20:	69fb      	ldr	r3, [r7, #28]
 8109d22:	4413      	add	r3, r2
 8109d24:	781b      	ldrb	r3, [r3, #0]
 8109d26:	2b00      	cmp	r3, #0
 8109d28:	d006      	beq.n	8109d38 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8109d2a:	69fb      	ldr	r3, [r7, #28]
 8109d2c:	3301      	adds	r3, #1
 8109d2e:	61fb      	str	r3, [r7, #28]
 8109d30:	69fb      	ldr	r3, [r7, #28]
 8109d32:	2b0f      	cmp	r3, #15
 8109d34:	d9e9      	bls.n	8109d0a <prvInitialiseNewTask+0x66>
 8109d36:	e000      	b.n	8109d3a <prvInitialiseNewTask+0x96>
			{
				break;
 8109d38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8109d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d3c:	2200      	movs	r2, #0
 8109d3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8109d42:	e003      	b.n	8109d4c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8109d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d46:	2200      	movs	r2, #0
 8109d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8109d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109d4e:	2b37      	cmp	r3, #55	@ 0x37
 8109d50:	d901      	bls.n	8109d56 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8109d52:	2337      	movs	r3, #55	@ 0x37
 8109d54:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8109d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8109d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8109d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8109d60:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8109d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d64:	2200      	movs	r2, #0
 8109d66:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8109d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d6a:	3304      	adds	r3, #4
 8109d6c:	4618      	mov	r0, r3
 8109d6e:	f7fe f88b 	bl	8107e88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8109d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d74:	3318      	adds	r3, #24
 8109d76:	4618      	mov	r0, r3
 8109d78:	f7fe f886 	bl	8107e88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8109d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109d80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8109d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109d84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8109d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8109d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109d90:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8109d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d94:	2200      	movs	r2, #0
 8109d96:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8109d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d9c:	2200      	movs	r2, #0
 8109d9e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8109da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109da4:	3354      	adds	r3, #84	@ 0x54
 8109da6:	224c      	movs	r2, #76	@ 0x4c
 8109da8:	2100      	movs	r1, #0
 8109daa:	4618      	mov	r0, r3
 8109dac:	f00c f867 	bl	8115e7e <memset>
 8109db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109db2:	4a0d      	ldr	r2, [pc, #52]	@ (8109de8 <prvInitialiseNewTask+0x144>)
 8109db4:	659a      	str	r2, [r3, #88]	@ 0x58
 8109db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109db8:	4a0c      	ldr	r2, [pc, #48]	@ (8109dec <prvInitialiseNewTask+0x148>)
 8109dba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8109dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8109df0 <prvInitialiseNewTask+0x14c>)
 8109dc0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8109dc2:	683a      	ldr	r2, [r7, #0]
 8109dc4:	68f9      	ldr	r1, [r7, #12]
 8109dc6:	69b8      	ldr	r0, [r7, #24]
 8109dc8:	f7fe f8f2 	bl	8107fb0 <pxPortInitialiseStack>
 8109dcc:	4602      	mov	r2, r0
 8109dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109dd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8109dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109dd4:	2b00      	cmp	r3, #0
 8109dd6:	d002      	beq.n	8109dde <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8109dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109ddc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8109dde:	bf00      	nop
 8109de0:	3720      	adds	r7, #32
 8109de2:	46bd      	mov	sp, r7
 8109de4:	bd80      	pop	{r7, pc}
 8109de6:	bf00      	nop
 8109de8:	10011cc8 	.word	0x10011cc8
 8109dec:	10011d30 	.word	0x10011d30
 8109df0:	10011d98 	.word	0x10011d98

08109df4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8109df4:	b580      	push	{r7, lr}
 8109df6:	b082      	sub	sp, #8
 8109df8:	af00      	add	r7, sp, #0
 8109dfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8109dfc:	f7fe fa0c 	bl	8108218 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8109e00:	4b2d      	ldr	r3, [pc, #180]	@ (8109eb8 <prvAddNewTaskToReadyList+0xc4>)
 8109e02:	681b      	ldr	r3, [r3, #0]
 8109e04:	3301      	adds	r3, #1
 8109e06:	4a2c      	ldr	r2, [pc, #176]	@ (8109eb8 <prvAddNewTaskToReadyList+0xc4>)
 8109e08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8109e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8109ebc <prvAddNewTaskToReadyList+0xc8>)
 8109e0c:	681b      	ldr	r3, [r3, #0]
 8109e0e:	2b00      	cmp	r3, #0
 8109e10:	d109      	bne.n	8109e26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8109e12:	4a2a      	ldr	r2, [pc, #168]	@ (8109ebc <prvAddNewTaskToReadyList+0xc8>)
 8109e14:	687b      	ldr	r3, [r7, #4]
 8109e16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8109e18:	4b27      	ldr	r3, [pc, #156]	@ (8109eb8 <prvAddNewTaskToReadyList+0xc4>)
 8109e1a:	681b      	ldr	r3, [r3, #0]
 8109e1c:	2b01      	cmp	r3, #1
 8109e1e:	d110      	bne.n	8109e42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8109e20:	f000 fc40 	bl	810a6a4 <prvInitialiseTaskLists>
 8109e24:	e00d      	b.n	8109e42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8109e26:	4b26      	ldr	r3, [pc, #152]	@ (8109ec0 <prvAddNewTaskToReadyList+0xcc>)
 8109e28:	681b      	ldr	r3, [r3, #0]
 8109e2a:	2b00      	cmp	r3, #0
 8109e2c:	d109      	bne.n	8109e42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8109e2e:	4b23      	ldr	r3, [pc, #140]	@ (8109ebc <prvAddNewTaskToReadyList+0xc8>)
 8109e30:	681b      	ldr	r3, [r3, #0]
 8109e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8109e34:	687b      	ldr	r3, [r7, #4]
 8109e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109e38:	429a      	cmp	r2, r3
 8109e3a:	d802      	bhi.n	8109e42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8109e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8109ebc <prvAddNewTaskToReadyList+0xc8>)
 8109e3e:	687b      	ldr	r3, [r7, #4]
 8109e40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8109e42:	4b20      	ldr	r3, [pc, #128]	@ (8109ec4 <prvAddNewTaskToReadyList+0xd0>)
 8109e44:	681b      	ldr	r3, [r3, #0]
 8109e46:	3301      	adds	r3, #1
 8109e48:	4a1e      	ldr	r2, [pc, #120]	@ (8109ec4 <prvAddNewTaskToReadyList+0xd0>)
 8109e4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8109e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8109ec4 <prvAddNewTaskToReadyList+0xd0>)
 8109e4e:	681a      	ldr	r2, [r3, #0]
 8109e50:	687b      	ldr	r3, [r7, #4]
 8109e52:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8109e54:	687b      	ldr	r3, [r7, #4]
 8109e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8109e58:	4b1b      	ldr	r3, [pc, #108]	@ (8109ec8 <prvAddNewTaskToReadyList+0xd4>)
 8109e5a:	681b      	ldr	r3, [r3, #0]
 8109e5c:	429a      	cmp	r2, r3
 8109e5e:	d903      	bls.n	8109e68 <prvAddNewTaskToReadyList+0x74>
 8109e60:	687b      	ldr	r3, [r7, #4]
 8109e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109e64:	4a18      	ldr	r2, [pc, #96]	@ (8109ec8 <prvAddNewTaskToReadyList+0xd4>)
 8109e66:	6013      	str	r3, [r2, #0]
 8109e68:	687b      	ldr	r3, [r7, #4]
 8109e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8109e6c:	4613      	mov	r3, r2
 8109e6e:	009b      	lsls	r3, r3, #2
 8109e70:	4413      	add	r3, r2
 8109e72:	009b      	lsls	r3, r3, #2
 8109e74:	4a15      	ldr	r2, [pc, #84]	@ (8109ecc <prvAddNewTaskToReadyList+0xd8>)
 8109e76:	441a      	add	r2, r3
 8109e78:	687b      	ldr	r3, [r7, #4]
 8109e7a:	3304      	adds	r3, #4
 8109e7c:	4619      	mov	r1, r3
 8109e7e:	4610      	mov	r0, r2
 8109e80:	f7fe f80f 	bl	8107ea2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8109e84:	f7fe f9fa 	bl	810827c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8109e88:	4b0d      	ldr	r3, [pc, #52]	@ (8109ec0 <prvAddNewTaskToReadyList+0xcc>)
 8109e8a:	681b      	ldr	r3, [r3, #0]
 8109e8c:	2b00      	cmp	r3, #0
 8109e8e:	d00e      	beq.n	8109eae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8109e90:	4b0a      	ldr	r3, [pc, #40]	@ (8109ebc <prvAddNewTaskToReadyList+0xc8>)
 8109e92:	681b      	ldr	r3, [r3, #0]
 8109e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8109e96:	687b      	ldr	r3, [r7, #4]
 8109e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109e9a:	429a      	cmp	r2, r3
 8109e9c:	d207      	bcs.n	8109eae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8109e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8109ed0 <prvAddNewTaskToReadyList+0xdc>)
 8109ea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8109ea4:	601a      	str	r2, [r3, #0]
 8109ea6:	f3bf 8f4f 	dsb	sy
 8109eaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8109eae:	bf00      	nop
 8109eb0:	3708      	adds	r7, #8
 8109eb2:	46bd      	mov	sp, r7
 8109eb4:	bd80      	pop	{r7, pc}
 8109eb6:	bf00      	nop
 8109eb8:	1000af30 	.word	0x1000af30
 8109ebc:	1000aa5c 	.word	0x1000aa5c
 8109ec0:	1000af3c 	.word	0x1000af3c
 8109ec4:	1000af4c 	.word	0x1000af4c
 8109ec8:	1000af38 	.word	0x1000af38
 8109ecc:	1000aa60 	.word	0x1000aa60
 8109ed0:	e000ed04 	.word	0xe000ed04

08109ed4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8109ed4:	b580      	push	{r7, lr}
 8109ed6:	b084      	sub	sp, #16
 8109ed8:	af00      	add	r7, sp, #0
 8109eda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8109edc:	2300      	movs	r3, #0
 8109ede:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8109ee0:	687b      	ldr	r3, [r7, #4]
 8109ee2:	2b00      	cmp	r3, #0
 8109ee4:	d018      	beq.n	8109f18 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8109ee6:	4b14      	ldr	r3, [pc, #80]	@ (8109f38 <vTaskDelay+0x64>)
 8109ee8:	681b      	ldr	r3, [r3, #0]
 8109eea:	2b00      	cmp	r3, #0
 8109eec:	d00b      	beq.n	8109f06 <vTaskDelay+0x32>
	__asm volatile
 8109eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109ef2:	f383 8811 	msr	BASEPRI, r3
 8109ef6:	f3bf 8f6f 	isb	sy
 8109efa:	f3bf 8f4f 	dsb	sy
 8109efe:	60bb      	str	r3, [r7, #8]
}
 8109f00:	bf00      	nop
 8109f02:	bf00      	nop
 8109f04:	e7fd      	b.n	8109f02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8109f06:	f000 f88b 	bl	810a020 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8109f0a:	2100      	movs	r1, #0
 8109f0c:	6878      	ldr	r0, [r7, #4]
 8109f0e:	f000 ff97 	bl	810ae40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8109f12:	f000 f893 	bl	810a03c <xTaskResumeAll>
 8109f16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8109f18:	68fb      	ldr	r3, [r7, #12]
 8109f1a:	2b00      	cmp	r3, #0
 8109f1c:	d107      	bne.n	8109f2e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8109f1e:	4b07      	ldr	r3, [pc, #28]	@ (8109f3c <vTaskDelay+0x68>)
 8109f20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8109f24:	601a      	str	r2, [r3, #0]
 8109f26:	f3bf 8f4f 	dsb	sy
 8109f2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8109f2e:	bf00      	nop
 8109f30:	3710      	adds	r7, #16
 8109f32:	46bd      	mov	sp, r7
 8109f34:	bd80      	pop	{r7, pc}
 8109f36:	bf00      	nop
 8109f38:	1000af58 	.word	0x1000af58
 8109f3c:	e000ed04 	.word	0xe000ed04

08109f40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8109f40:	b580      	push	{r7, lr}
 8109f42:	b08a      	sub	sp, #40	@ 0x28
 8109f44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8109f46:	2300      	movs	r3, #0
 8109f48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8109f4a:	2300      	movs	r3, #0
 8109f4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8109f4e:	463a      	mov	r2, r7
 8109f50:	1d39      	adds	r1, r7, #4
 8109f52:	f107 0308 	add.w	r3, r7, #8
 8109f56:	4618      	mov	r0, r3
 8109f58:	f7fd fd48 	bl	81079ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8109f5c:	6839      	ldr	r1, [r7, #0]
 8109f5e:	687b      	ldr	r3, [r7, #4]
 8109f60:	68ba      	ldr	r2, [r7, #8]
 8109f62:	9202      	str	r2, [sp, #8]
 8109f64:	9301      	str	r3, [sp, #4]
 8109f66:	2300      	movs	r3, #0
 8109f68:	9300      	str	r3, [sp, #0]
 8109f6a:	2300      	movs	r3, #0
 8109f6c:	460a      	mov	r2, r1
 8109f6e:	4924      	ldr	r1, [pc, #144]	@ (810a000 <vTaskStartScheduler+0xc0>)
 8109f70:	4824      	ldr	r0, [pc, #144]	@ (810a004 <vTaskStartScheduler+0xc4>)
 8109f72:	f7ff fdf1 	bl	8109b58 <xTaskCreateStatic>
 8109f76:	4603      	mov	r3, r0
 8109f78:	4a23      	ldr	r2, [pc, #140]	@ (810a008 <vTaskStartScheduler+0xc8>)
 8109f7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8109f7c:	4b22      	ldr	r3, [pc, #136]	@ (810a008 <vTaskStartScheduler+0xc8>)
 8109f7e:	681b      	ldr	r3, [r3, #0]
 8109f80:	2b00      	cmp	r3, #0
 8109f82:	d002      	beq.n	8109f8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8109f84:	2301      	movs	r3, #1
 8109f86:	617b      	str	r3, [r7, #20]
 8109f88:	e001      	b.n	8109f8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8109f8a:	2300      	movs	r3, #0
 8109f8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8109f8e:	697b      	ldr	r3, [r7, #20]
 8109f90:	2b01      	cmp	r3, #1
 8109f92:	d102      	bne.n	8109f9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8109f94:	f000 ffa8 	bl	810aee8 <xTimerCreateTimerTask>
 8109f98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8109f9a:	697b      	ldr	r3, [r7, #20]
 8109f9c:	2b01      	cmp	r3, #1
 8109f9e:	d11b      	bne.n	8109fd8 <vTaskStartScheduler+0x98>
	__asm volatile
 8109fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109fa4:	f383 8811 	msr	BASEPRI, r3
 8109fa8:	f3bf 8f6f 	isb	sy
 8109fac:	f3bf 8f4f 	dsb	sy
 8109fb0:	613b      	str	r3, [r7, #16]
}
 8109fb2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8109fb4:	4b15      	ldr	r3, [pc, #84]	@ (810a00c <vTaskStartScheduler+0xcc>)
 8109fb6:	681b      	ldr	r3, [r3, #0]
 8109fb8:	3354      	adds	r3, #84	@ 0x54
 8109fba:	4a15      	ldr	r2, [pc, #84]	@ (810a010 <vTaskStartScheduler+0xd0>)
 8109fbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8109fbe:	4b15      	ldr	r3, [pc, #84]	@ (810a014 <vTaskStartScheduler+0xd4>)
 8109fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8109fc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8109fc6:	4b14      	ldr	r3, [pc, #80]	@ (810a018 <vTaskStartScheduler+0xd8>)
 8109fc8:	2201      	movs	r2, #1
 8109fca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8109fcc:	4b13      	ldr	r3, [pc, #76]	@ (810a01c <vTaskStartScheduler+0xdc>)
 8109fce:	2200      	movs	r2, #0
 8109fd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8109fd2:	f7fe f87d 	bl	81080d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8109fd6:	e00f      	b.n	8109ff8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8109fd8:	697b      	ldr	r3, [r7, #20]
 8109fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109fde:	d10b      	bne.n	8109ff8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8109fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109fe4:	f383 8811 	msr	BASEPRI, r3
 8109fe8:	f3bf 8f6f 	isb	sy
 8109fec:	f3bf 8f4f 	dsb	sy
 8109ff0:	60fb      	str	r3, [r7, #12]
}
 8109ff2:	bf00      	nop
 8109ff4:	bf00      	nop
 8109ff6:	e7fd      	b.n	8109ff4 <vTaskStartScheduler+0xb4>
}
 8109ff8:	bf00      	nop
 8109ffa:	3718      	adds	r7, #24
 8109ffc:	46bd      	mov	sp, r7
 8109ffe:	bd80      	pop	{r7, pc}
 810a000:	08116c50 	.word	0x08116c50
 810a004:	0810a675 	.word	0x0810a675
 810a008:	1000af54 	.word	0x1000af54
 810a00c:	1000aa5c 	.word	0x1000aa5c
 810a010:	10000040 	.word	0x10000040
 810a014:	1000af50 	.word	0x1000af50
 810a018:	1000af3c 	.word	0x1000af3c
 810a01c:	1000af34 	.word	0x1000af34

0810a020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810a020:	b480      	push	{r7}
 810a022:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810a024:	4b04      	ldr	r3, [pc, #16]	@ (810a038 <vTaskSuspendAll+0x18>)
 810a026:	681b      	ldr	r3, [r3, #0]
 810a028:	3301      	adds	r3, #1
 810a02a:	4a03      	ldr	r2, [pc, #12]	@ (810a038 <vTaskSuspendAll+0x18>)
 810a02c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810a02e:	bf00      	nop
 810a030:	46bd      	mov	sp, r7
 810a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a036:	4770      	bx	lr
 810a038:	1000af58 	.word	0x1000af58

0810a03c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810a03c:	b580      	push	{r7, lr}
 810a03e:	b084      	sub	sp, #16
 810a040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810a042:	2300      	movs	r3, #0
 810a044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810a046:	2300      	movs	r3, #0
 810a048:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810a04a:	4b42      	ldr	r3, [pc, #264]	@ (810a154 <xTaskResumeAll+0x118>)
 810a04c:	681b      	ldr	r3, [r3, #0]
 810a04e:	2b00      	cmp	r3, #0
 810a050:	d10b      	bne.n	810a06a <xTaskResumeAll+0x2e>
	__asm volatile
 810a052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a056:	f383 8811 	msr	BASEPRI, r3
 810a05a:	f3bf 8f6f 	isb	sy
 810a05e:	f3bf 8f4f 	dsb	sy
 810a062:	603b      	str	r3, [r7, #0]
}
 810a064:	bf00      	nop
 810a066:	bf00      	nop
 810a068:	e7fd      	b.n	810a066 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810a06a:	f7fe f8d5 	bl	8108218 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810a06e:	4b39      	ldr	r3, [pc, #228]	@ (810a154 <xTaskResumeAll+0x118>)
 810a070:	681b      	ldr	r3, [r3, #0]
 810a072:	3b01      	subs	r3, #1
 810a074:	4a37      	ldr	r2, [pc, #220]	@ (810a154 <xTaskResumeAll+0x118>)
 810a076:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a078:	4b36      	ldr	r3, [pc, #216]	@ (810a154 <xTaskResumeAll+0x118>)
 810a07a:	681b      	ldr	r3, [r3, #0]
 810a07c:	2b00      	cmp	r3, #0
 810a07e:	d162      	bne.n	810a146 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810a080:	4b35      	ldr	r3, [pc, #212]	@ (810a158 <xTaskResumeAll+0x11c>)
 810a082:	681b      	ldr	r3, [r3, #0]
 810a084:	2b00      	cmp	r3, #0
 810a086:	d05e      	beq.n	810a146 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a088:	e02f      	b.n	810a0ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a08a:	4b34      	ldr	r3, [pc, #208]	@ (810a15c <xTaskResumeAll+0x120>)
 810a08c:	68db      	ldr	r3, [r3, #12]
 810a08e:	68db      	ldr	r3, [r3, #12]
 810a090:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a092:	68fb      	ldr	r3, [r7, #12]
 810a094:	3318      	adds	r3, #24
 810a096:	4618      	mov	r0, r3
 810a098:	f7fd ff60 	bl	8107f5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a09c:	68fb      	ldr	r3, [r7, #12]
 810a09e:	3304      	adds	r3, #4
 810a0a0:	4618      	mov	r0, r3
 810a0a2:	f7fd ff5b 	bl	8107f5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810a0a6:	68fb      	ldr	r3, [r7, #12]
 810a0a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a0aa:	4b2d      	ldr	r3, [pc, #180]	@ (810a160 <xTaskResumeAll+0x124>)
 810a0ac:	681b      	ldr	r3, [r3, #0]
 810a0ae:	429a      	cmp	r2, r3
 810a0b0:	d903      	bls.n	810a0ba <xTaskResumeAll+0x7e>
 810a0b2:	68fb      	ldr	r3, [r7, #12]
 810a0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a0b6:	4a2a      	ldr	r2, [pc, #168]	@ (810a160 <xTaskResumeAll+0x124>)
 810a0b8:	6013      	str	r3, [r2, #0]
 810a0ba:	68fb      	ldr	r3, [r7, #12]
 810a0bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a0be:	4613      	mov	r3, r2
 810a0c0:	009b      	lsls	r3, r3, #2
 810a0c2:	4413      	add	r3, r2
 810a0c4:	009b      	lsls	r3, r3, #2
 810a0c6:	4a27      	ldr	r2, [pc, #156]	@ (810a164 <xTaskResumeAll+0x128>)
 810a0c8:	441a      	add	r2, r3
 810a0ca:	68fb      	ldr	r3, [r7, #12]
 810a0cc:	3304      	adds	r3, #4
 810a0ce:	4619      	mov	r1, r3
 810a0d0:	4610      	mov	r0, r2
 810a0d2:	f7fd fee6 	bl	8107ea2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a0d6:	68fb      	ldr	r3, [r7, #12]
 810a0d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a0da:	4b23      	ldr	r3, [pc, #140]	@ (810a168 <xTaskResumeAll+0x12c>)
 810a0dc:	681b      	ldr	r3, [r3, #0]
 810a0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a0e0:	429a      	cmp	r2, r3
 810a0e2:	d302      	bcc.n	810a0ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810a0e4:	4b21      	ldr	r3, [pc, #132]	@ (810a16c <xTaskResumeAll+0x130>)
 810a0e6:	2201      	movs	r2, #1
 810a0e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a0ea:	4b1c      	ldr	r3, [pc, #112]	@ (810a15c <xTaskResumeAll+0x120>)
 810a0ec:	681b      	ldr	r3, [r3, #0]
 810a0ee:	2b00      	cmp	r3, #0
 810a0f0:	d1cb      	bne.n	810a08a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810a0f2:	68fb      	ldr	r3, [r7, #12]
 810a0f4:	2b00      	cmp	r3, #0
 810a0f6:	d001      	beq.n	810a0fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810a0f8:	f000 fb78 	bl	810a7ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810a0fc:	4b1c      	ldr	r3, [pc, #112]	@ (810a170 <xTaskResumeAll+0x134>)
 810a0fe:	681b      	ldr	r3, [r3, #0]
 810a100:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810a102:	687b      	ldr	r3, [r7, #4]
 810a104:	2b00      	cmp	r3, #0
 810a106:	d010      	beq.n	810a12a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810a108:	f000 f858 	bl	810a1bc <xTaskIncrementTick>
 810a10c:	4603      	mov	r3, r0
 810a10e:	2b00      	cmp	r3, #0
 810a110:	d002      	beq.n	810a118 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 810a112:	4b16      	ldr	r3, [pc, #88]	@ (810a16c <xTaskResumeAll+0x130>)
 810a114:	2201      	movs	r2, #1
 810a116:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810a118:	687b      	ldr	r3, [r7, #4]
 810a11a:	3b01      	subs	r3, #1
 810a11c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810a11e:	687b      	ldr	r3, [r7, #4]
 810a120:	2b00      	cmp	r3, #0
 810a122:	d1f1      	bne.n	810a108 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810a124:	4b12      	ldr	r3, [pc, #72]	@ (810a170 <xTaskResumeAll+0x134>)
 810a126:	2200      	movs	r2, #0
 810a128:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810a12a:	4b10      	ldr	r3, [pc, #64]	@ (810a16c <xTaskResumeAll+0x130>)
 810a12c:	681b      	ldr	r3, [r3, #0]
 810a12e:	2b00      	cmp	r3, #0
 810a130:	d009      	beq.n	810a146 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810a132:	2301      	movs	r3, #1
 810a134:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810a136:	4b0f      	ldr	r3, [pc, #60]	@ (810a174 <xTaskResumeAll+0x138>)
 810a138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810a13c:	601a      	str	r2, [r3, #0]
 810a13e:	f3bf 8f4f 	dsb	sy
 810a142:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810a146:	f7fe f899 	bl	810827c <vPortExitCritical>

	return xAlreadyYielded;
 810a14a:	68bb      	ldr	r3, [r7, #8]
}
 810a14c:	4618      	mov	r0, r3
 810a14e:	3710      	adds	r7, #16
 810a150:	46bd      	mov	sp, r7
 810a152:	bd80      	pop	{r7, pc}
 810a154:	1000af58 	.word	0x1000af58
 810a158:	1000af30 	.word	0x1000af30
 810a15c:	1000aef0 	.word	0x1000aef0
 810a160:	1000af38 	.word	0x1000af38
 810a164:	1000aa60 	.word	0x1000aa60
 810a168:	1000aa5c 	.word	0x1000aa5c
 810a16c:	1000af44 	.word	0x1000af44
 810a170:	1000af40 	.word	0x1000af40
 810a174:	e000ed04 	.word	0xe000ed04

0810a178 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810a178:	b480      	push	{r7}
 810a17a:	b083      	sub	sp, #12
 810a17c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810a17e:	4b05      	ldr	r3, [pc, #20]	@ (810a194 <xTaskGetTickCount+0x1c>)
 810a180:	681b      	ldr	r3, [r3, #0]
 810a182:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810a184:	687b      	ldr	r3, [r7, #4]
}
 810a186:	4618      	mov	r0, r3
 810a188:	370c      	adds	r7, #12
 810a18a:	46bd      	mov	sp, r7
 810a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a190:	4770      	bx	lr
 810a192:	bf00      	nop
 810a194:	1000af34 	.word	0x1000af34

0810a198 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 810a198:	b580      	push	{r7, lr}
 810a19a:	b082      	sub	sp, #8
 810a19c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810a19e:	f7fe f91b 	bl	81083d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 810a1a2:	2300      	movs	r3, #0
 810a1a4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 810a1a6:	4b04      	ldr	r3, [pc, #16]	@ (810a1b8 <xTaskGetTickCountFromISR+0x20>)
 810a1a8:	681b      	ldr	r3, [r3, #0]
 810a1aa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810a1ac:	683b      	ldr	r3, [r7, #0]
}
 810a1ae:	4618      	mov	r0, r3
 810a1b0:	3708      	adds	r7, #8
 810a1b2:	46bd      	mov	sp, r7
 810a1b4:	bd80      	pop	{r7, pc}
 810a1b6:	bf00      	nop
 810a1b8:	1000af34 	.word	0x1000af34

0810a1bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810a1bc:	b580      	push	{r7, lr}
 810a1be:	b086      	sub	sp, #24
 810a1c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810a1c2:	2300      	movs	r3, #0
 810a1c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a1c6:	4b4f      	ldr	r3, [pc, #316]	@ (810a304 <xTaskIncrementTick+0x148>)
 810a1c8:	681b      	ldr	r3, [r3, #0]
 810a1ca:	2b00      	cmp	r3, #0
 810a1cc:	f040 8090 	bne.w	810a2f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810a1d0:	4b4d      	ldr	r3, [pc, #308]	@ (810a308 <xTaskIncrementTick+0x14c>)
 810a1d2:	681b      	ldr	r3, [r3, #0]
 810a1d4:	3301      	adds	r3, #1
 810a1d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810a1d8:	4a4b      	ldr	r2, [pc, #300]	@ (810a308 <xTaskIncrementTick+0x14c>)
 810a1da:	693b      	ldr	r3, [r7, #16]
 810a1dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810a1de:	693b      	ldr	r3, [r7, #16]
 810a1e0:	2b00      	cmp	r3, #0
 810a1e2:	d121      	bne.n	810a228 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 810a1e4:	4b49      	ldr	r3, [pc, #292]	@ (810a30c <xTaskIncrementTick+0x150>)
 810a1e6:	681b      	ldr	r3, [r3, #0]
 810a1e8:	681b      	ldr	r3, [r3, #0]
 810a1ea:	2b00      	cmp	r3, #0
 810a1ec:	d00b      	beq.n	810a206 <xTaskIncrementTick+0x4a>
	__asm volatile
 810a1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a1f2:	f383 8811 	msr	BASEPRI, r3
 810a1f6:	f3bf 8f6f 	isb	sy
 810a1fa:	f3bf 8f4f 	dsb	sy
 810a1fe:	603b      	str	r3, [r7, #0]
}
 810a200:	bf00      	nop
 810a202:	bf00      	nop
 810a204:	e7fd      	b.n	810a202 <xTaskIncrementTick+0x46>
 810a206:	4b41      	ldr	r3, [pc, #260]	@ (810a30c <xTaskIncrementTick+0x150>)
 810a208:	681b      	ldr	r3, [r3, #0]
 810a20a:	60fb      	str	r3, [r7, #12]
 810a20c:	4b40      	ldr	r3, [pc, #256]	@ (810a310 <xTaskIncrementTick+0x154>)
 810a20e:	681b      	ldr	r3, [r3, #0]
 810a210:	4a3e      	ldr	r2, [pc, #248]	@ (810a30c <xTaskIncrementTick+0x150>)
 810a212:	6013      	str	r3, [r2, #0]
 810a214:	4a3e      	ldr	r2, [pc, #248]	@ (810a310 <xTaskIncrementTick+0x154>)
 810a216:	68fb      	ldr	r3, [r7, #12]
 810a218:	6013      	str	r3, [r2, #0]
 810a21a:	4b3e      	ldr	r3, [pc, #248]	@ (810a314 <xTaskIncrementTick+0x158>)
 810a21c:	681b      	ldr	r3, [r3, #0]
 810a21e:	3301      	adds	r3, #1
 810a220:	4a3c      	ldr	r2, [pc, #240]	@ (810a314 <xTaskIncrementTick+0x158>)
 810a222:	6013      	str	r3, [r2, #0]
 810a224:	f000 fae2 	bl	810a7ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810a228:	4b3b      	ldr	r3, [pc, #236]	@ (810a318 <xTaskIncrementTick+0x15c>)
 810a22a:	681b      	ldr	r3, [r3, #0]
 810a22c:	693a      	ldr	r2, [r7, #16]
 810a22e:	429a      	cmp	r2, r3
 810a230:	d349      	bcc.n	810a2c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a232:	4b36      	ldr	r3, [pc, #216]	@ (810a30c <xTaskIncrementTick+0x150>)
 810a234:	681b      	ldr	r3, [r3, #0]
 810a236:	681b      	ldr	r3, [r3, #0]
 810a238:	2b00      	cmp	r3, #0
 810a23a:	d104      	bne.n	810a246 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a23c:	4b36      	ldr	r3, [pc, #216]	@ (810a318 <xTaskIncrementTick+0x15c>)
 810a23e:	f04f 32ff 	mov.w	r2, #4294967295
 810a242:	601a      	str	r2, [r3, #0]
					break;
 810a244:	e03f      	b.n	810a2c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a246:	4b31      	ldr	r3, [pc, #196]	@ (810a30c <xTaskIncrementTick+0x150>)
 810a248:	681b      	ldr	r3, [r3, #0]
 810a24a:	68db      	ldr	r3, [r3, #12]
 810a24c:	68db      	ldr	r3, [r3, #12]
 810a24e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810a250:	68bb      	ldr	r3, [r7, #8]
 810a252:	685b      	ldr	r3, [r3, #4]
 810a254:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810a256:	693a      	ldr	r2, [r7, #16]
 810a258:	687b      	ldr	r3, [r7, #4]
 810a25a:	429a      	cmp	r2, r3
 810a25c:	d203      	bcs.n	810a266 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810a25e:	4a2e      	ldr	r2, [pc, #184]	@ (810a318 <xTaskIncrementTick+0x15c>)
 810a260:	687b      	ldr	r3, [r7, #4]
 810a262:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810a264:	e02f      	b.n	810a2c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a266:	68bb      	ldr	r3, [r7, #8]
 810a268:	3304      	adds	r3, #4
 810a26a:	4618      	mov	r0, r3
 810a26c:	f7fd fe76 	bl	8107f5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810a270:	68bb      	ldr	r3, [r7, #8]
 810a272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a274:	2b00      	cmp	r3, #0
 810a276:	d004      	beq.n	810a282 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a278:	68bb      	ldr	r3, [r7, #8]
 810a27a:	3318      	adds	r3, #24
 810a27c:	4618      	mov	r0, r3
 810a27e:	f7fd fe6d 	bl	8107f5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810a282:	68bb      	ldr	r3, [r7, #8]
 810a284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a286:	4b25      	ldr	r3, [pc, #148]	@ (810a31c <xTaskIncrementTick+0x160>)
 810a288:	681b      	ldr	r3, [r3, #0]
 810a28a:	429a      	cmp	r2, r3
 810a28c:	d903      	bls.n	810a296 <xTaskIncrementTick+0xda>
 810a28e:	68bb      	ldr	r3, [r7, #8]
 810a290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a292:	4a22      	ldr	r2, [pc, #136]	@ (810a31c <xTaskIncrementTick+0x160>)
 810a294:	6013      	str	r3, [r2, #0]
 810a296:	68bb      	ldr	r3, [r7, #8]
 810a298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a29a:	4613      	mov	r3, r2
 810a29c:	009b      	lsls	r3, r3, #2
 810a29e:	4413      	add	r3, r2
 810a2a0:	009b      	lsls	r3, r3, #2
 810a2a2:	4a1f      	ldr	r2, [pc, #124]	@ (810a320 <xTaskIncrementTick+0x164>)
 810a2a4:	441a      	add	r2, r3
 810a2a6:	68bb      	ldr	r3, [r7, #8]
 810a2a8:	3304      	adds	r3, #4
 810a2aa:	4619      	mov	r1, r3
 810a2ac:	4610      	mov	r0, r2
 810a2ae:	f7fd fdf8 	bl	8107ea2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a2b2:	68bb      	ldr	r3, [r7, #8]
 810a2b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a2b6:	4b1b      	ldr	r3, [pc, #108]	@ (810a324 <xTaskIncrementTick+0x168>)
 810a2b8:	681b      	ldr	r3, [r3, #0]
 810a2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a2bc:	429a      	cmp	r2, r3
 810a2be:	d3b8      	bcc.n	810a232 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 810a2c0:	2301      	movs	r3, #1
 810a2c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a2c4:	e7b5      	b.n	810a232 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810a2c6:	4b17      	ldr	r3, [pc, #92]	@ (810a324 <xTaskIncrementTick+0x168>)
 810a2c8:	681b      	ldr	r3, [r3, #0]
 810a2ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a2cc:	4914      	ldr	r1, [pc, #80]	@ (810a320 <xTaskIncrementTick+0x164>)
 810a2ce:	4613      	mov	r3, r2
 810a2d0:	009b      	lsls	r3, r3, #2
 810a2d2:	4413      	add	r3, r2
 810a2d4:	009b      	lsls	r3, r3, #2
 810a2d6:	440b      	add	r3, r1
 810a2d8:	681b      	ldr	r3, [r3, #0]
 810a2da:	2b01      	cmp	r3, #1
 810a2dc:	d901      	bls.n	810a2e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810a2de:	2301      	movs	r3, #1
 810a2e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810a2e2:	4b11      	ldr	r3, [pc, #68]	@ (810a328 <xTaskIncrementTick+0x16c>)
 810a2e4:	681b      	ldr	r3, [r3, #0]
 810a2e6:	2b00      	cmp	r3, #0
 810a2e8:	d007      	beq.n	810a2fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810a2ea:	2301      	movs	r3, #1
 810a2ec:	617b      	str	r3, [r7, #20]
 810a2ee:	e004      	b.n	810a2fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810a2f0:	4b0e      	ldr	r3, [pc, #56]	@ (810a32c <xTaskIncrementTick+0x170>)
 810a2f2:	681b      	ldr	r3, [r3, #0]
 810a2f4:	3301      	adds	r3, #1
 810a2f6:	4a0d      	ldr	r2, [pc, #52]	@ (810a32c <xTaskIncrementTick+0x170>)
 810a2f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810a2fa:	697b      	ldr	r3, [r7, #20]
}
 810a2fc:	4618      	mov	r0, r3
 810a2fe:	3718      	adds	r7, #24
 810a300:	46bd      	mov	sp, r7
 810a302:	bd80      	pop	{r7, pc}
 810a304:	1000af58 	.word	0x1000af58
 810a308:	1000af34 	.word	0x1000af34
 810a30c:	1000aee8 	.word	0x1000aee8
 810a310:	1000aeec 	.word	0x1000aeec
 810a314:	1000af48 	.word	0x1000af48
 810a318:	1000af50 	.word	0x1000af50
 810a31c:	1000af38 	.word	0x1000af38
 810a320:	1000aa60 	.word	0x1000aa60
 810a324:	1000aa5c 	.word	0x1000aa5c
 810a328:	1000af44 	.word	0x1000af44
 810a32c:	1000af40 	.word	0x1000af40

0810a330 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810a330:	b480      	push	{r7}
 810a332:	b085      	sub	sp, #20
 810a334:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810a336:	4b2b      	ldr	r3, [pc, #172]	@ (810a3e4 <vTaskSwitchContext+0xb4>)
 810a338:	681b      	ldr	r3, [r3, #0]
 810a33a:	2b00      	cmp	r3, #0
 810a33c:	d003      	beq.n	810a346 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810a33e:	4b2a      	ldr	r3, [pc, #168]	@ (810a3e8 <vTaskSwitchContext+0xb8>)
 810a340:	2201      	movs	r2, #1
 810a342:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810a344:	e047      	b.n	810a3d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 810a346:	4b28      	ldr	r3, [pc, #160]	@ (810a3e8 <vTaskSwitchContext+0xb8>)
 810a348:	2200      	movs	r2, #0
 810a34a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a34c:	4b27      	ldr	r3, [pc, #156]	@ (810a3ec <vTaskSwitchContext+0xbc>)
 810a34e:	681b      	ldr	r3, [r3, #0]
 810a350:	60fb      	str	r3, [r7, #12]
 810a352:	e011      	b.n	810a378 <vTaskSwitchContext+0x48>
 810a354:	68fb      	ldr	r3, [r7, #12]
 810a356:	2b00      	cmp	r3, #0
 810a358:	d10b      	bne.n	810a372 <vTaskSwitchContext+0x42>
	__asm volatile
 810a35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a35e:	f383 8811 	msr	BASEPRI, r3
 810a362:	f3bf 8f6f 	isb	sy
 810a366:	f3bf 8f4f 	dsb	sy
 810a36a:	607b      	str	r3, [r7, #4]
}
 810a36c:	bf00      	nop
 810a36e:	bf00      	nop
 810a370:	e7fd      	b.n	810a36e <vTaskSwitchContext+0x3e>
 810a372:	68fb      	ldr	r3, [r7, #12]
 810a374:	3b01      	subs	r3, #1
 810a376:	60fb      	str	r3, [r7, #12]
 810a378:	491d      	ldr	r1, [pc, #116]	@ (810a3f0 <vTaskSwitchContext+0xc0>)
 810a37a:	68fa      	ldr	r2, [r7, #12]
 810a37c:	4613      	mov	r3, r2
 810a37e:	009b      	lsls	r3, r3, #2
 810a380:	4413      	add	r3, r2
 810a382:	009b      	lsls	r3, r3, #2
 810a384:	440b      	add	r3, r1
 810a386:	681b      	ldr	r3, [r3, #0]
 810a388:	2b00      	cmp	r3, #0
 810a38a:	d0e3      	beq.n	810a354 <vTaskSwitchContext+0x24>
 810a38c:	68fa      	ldr	r2, [r7, #12]
 810a38e:	4613      	mov	r3, r2
 810a390:	009b      	lsls	r3, r3, #2
 810a392:	4413      	add	r3, r2
 810a394:	009b      	lsls	r3, r3, #2
 810a396:	4a16      	ldr	r2, [pc, #88]	@ (810a3f0 <vTaskSwitchContext+0xc0>)
 810a398:	4413      	add	r3, r2
 810a39a:	60bb      	str	r3, [r7, #8]
 810a39c:	68bb      	ldr	r3, [r7, #8]
 810a39e:	685b      	ldr	r3, [r3, #4]
 810a3a0:	685a      	ldr	r2, [r3, #4]
 810a3a2:	68bb      	ldr	r3, [r7, #8]
 810a3a4:	605a      	str	r2, [r3, #4]
 810a3a6:	68bb      	ldr	r3, [r7, #8]
 810a3a8:	685a      	ldr	r2, [r3, #4]
 810a3aa:	68bb      	ldr	r3, [r7, #8]
 810a3ac:	3308      	adds	r3, #8
 810a3ae:	429a      	cmp	r2, r3
 810a3b0:	d104      	bne.n	810a3bc <vTaskSwitchContext+0x8c>
 810a3b2:	68bb      	ldr	r3, [r7, #8]
 810a3b4:	685b      	ldr	r3, [r3, #4]
 810a3b6:	685a      	ldr	r2, [r3, #4]
 810a3b8:	68bb      	ldr	r3, [r7, #8]
 810a3ba:	605a      	str	r2, [r3, #4]
 810a3bc:	68bb      	ldr	r3, [r7, #8]
 810a3be:	685b      	ldr	r3, [r3, #4]
 810a3c0:	68db      	ldr	r3, [r3, #12]
 810a3c2:	4a0c      	ldr	r2, [pc, #48]	@ (810a3f4 <vTaskSwitchContext+0xc4>)
 810a3c4:	6013      	str	r3, [r2, #0]
 810a3c6:	4a09      	ldr	r2, [pc, #36]	@ (810a3ec <vTaskSwitchContext+0xbc>)
 810a3c8:	68fb      	ldr	r3, [r7, #12]
 810a3ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810a3cc:	4b09      	ldr	r3, [pc, #36]	@ (810a3f4 <vTaskSwitchContext+0xc4>)
 810a3ce:	681b      	ldr	r3, [r3, #0]
 810a3d0:	3354      	adds	r3, #84	@ 0x54
 810a3d2:	4a09      	ldr	r2, [pc, #36]	@ (810a3f8 <vTaskSwitchContext+0xc8>)
 810a3d4:	6013      	str	r3, [r2, #0]
}
 810a3d6:	bf00      	nop
 810a3d8:	3714      	adds	r7, #20
 810a3da:	46bd      	mov	sp, r7
 810a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3e0:	4770      	bx	lr
 810a3e2:	bf00      	nop
 810a3e4:	1000af58 	.word	0x1000af58
 810a3e8:	1000af44 	.word	0x1000af44
 810a3ec:	1000af38 	.word	0x1000af38
 810a3f0:	1000aa60 	.word	0x1000aa60
 810a3f4:	1000aa5c 	.word	0x1000aa5c
 810a3f8:	10000040 	.word	0x10000040

0810a3fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810a3fc:	b580      	push	{r7, lr}
 810a3fe:	b084      	sub	sp, #16
 810a400:	af00      	add	r7, sp, #0
 810a402:	6078      	str	r0, [r7, #4]
 810a404:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810a406:	687b      	ldr	r3, [r7, #4]
 810a408:	2b00      	cmp	r3, #0
 810a40a:	d10b      	bne.n	810a424 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810a40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a410:	f383 8811 	msr	BASEPRI, r3
 810a414:	f3bf 8f6f 	isb	sy
 810a418:	f3bf 8f4f 	dsb	sy
 810a41c:	60fb      	str	r3, [r7, #12]
}
 810a41e:	bf00      	nop
 810a420:	bf00      	nop
 810a422:	e7fd      	b.n	810a420 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810a424:	4b07      	ldr	r3, [pc, #28]	@ (810a444 <vTaskPlaceOnEventList+0x48>)
 810a426:	681b      	ldr	r3, [r3, #0]
 810a428:	3318      	adds	r3, #24
 810a42a:	4619      	mov	r1, r3
 810a42c:	6878      	ldr	r0, [r7, #4]
 810a42e:	f7fd fd5c 	bl	8107eea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810a432:	2101      	movs	r1, #1
 810a434:	6838      	ldr	r0, [r7, #0]
 810a436:	f000 fd03 	bl	810ae40 <prvAddCurrentTaskToDelayedList>
}
 810a43a:	bf00      	nop
 810a43c:	3710      	adds	r7, #16
 810a43e:	46bd      	mov	sp, r7
 810a440:	bd80      	pop	{r7, pc}
 810a442:	bf00      	nop
 810a444:	1000aa5c 	.word	0x1000aa5c

0810a448 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810a448:	b580      	push	{r7, lr}
 810a44a:	b086      	sub	sp, #24
 810a44c:	af00      	add	r7, sp, #0
 810a44e:	60f8      	str	r0, [r7, #12]
 810a450:	60b9      	str	r1, [r7, #8]
 810a452:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810a454:	68fb      	ldr	r3, [r7, #12]
 810a456:	2b00      	cmp	r3, #0
 810a458:	d10b      	bne.n	810a472 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810a45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a45e:	f383 8811 	msr	BASEPRI, r3
 810a462:	f3bf 8f6f 	isb	sy
 810a466:	f3bf 8f4f 	dsb	sy
 810a46a:	617b      	str	r3, [r7, #20]
}
 810a46c:	bf00      	nop
 810a46e:	bf00      	nop
 810a470:	e7fd      	b.n	810a46e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810a472:	4b0a      	ldr	r3, [pc, #40]	@ (810a49c <vTaskPlaceOnEventListRestricted+0x54>)
 810a474:	681b      	ldr	r3, [r3, #0]
 810a476:	3318      	adds	r3, #24
 810a478:	4619      	mov	r1, r3
 810a47a:	68f8      	ldr	r0, [r7, #12]
 810a47c:	f7fd fd11 	bl	8107ea2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810a480:	687b      	ldr	r3, [r7, #4]
 810a482:	2b00      	cmp	r3, #0
 810a484:	d002      	beq.n	810a48c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810a486:	f04f 33ff 	mov.w	r3, #4294967295
 810a48a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810a48c:	6879      	ldr	r1, [r7, #4]
 810a48e:	68b8      	ldr	r0, [r7, #8]
 810a490:	f000 fcd6 	bl	810ae40 <prvAddCurrentTaskToDelayedList>
	}
 810a494:	bf00      	nop
 810a496:	3718      	adds	r7, #24
 810a498:	46bd      	mov	sp, r7
 810a49a:	bd80      	pop	{r7, pc}
 810a49c:	1000aa5c 	.word	0x1000aa5c

0810a4a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810a4a0:	b580      	push	{r7, lr}
 810a4a2:	b086      	sub	sp, #24
 810a4a4:	af00      	add	r7, sp, #0
 810a4a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a4a8:	687b      	ldr	r3, [r7, #4]
 810a4aa:	68db      	ldr	r3, [r3, #12]
 810a4ac:	68db      	ldr	r3, [r3, #12]
 810a4ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810a4b0:	693b      	ldr	r3, [r7, #16]
 810a4b2:	2b00      	cmp	r3, #0
 810a4b4:	d10b      	bne.n	810a4ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810a4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a4ba:	f383 8811 	msr	BASEPRI, r3
 810a4be:	f3bf 8f6f 	isb	sy
 810a4c2:	f3bf 8f4f 	dsb	sy
 810a4c6:	60fb      	str	r3, [r7, #12]
}
 810a4c8:	bf00      	nop
 810a4ca:	bf00      	nop
 810a4cc:	e7fd      	b.n	810a4ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810a4ce:	693b      	ldr	r3, [r7, #16]
 810a4d0:	3318      	adds	r3, #24
 810a4d2:	4618      	mov	r0, r3
 810a4d4:	f7fd fd42 	bl	8107f5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a4d8:	4b1d      	ldr	r3, [pc, #116]	@ (810a550 <xTaskRemoveFromEventList+0xb0>)
 810a4da:	681b      	ldr	r3, [r3, #0]
 810a4dc:	2b00      	cmp	r3, #0
 810a4de:	d11d      	bne.n	810a51c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810a4e0:	693b      	ldr	r3, [r7, #16]
 810a4e2:	3304      	adds	r3, #4
 810a4e4:	4618      	mov	r0, r3
 810a4e6:	f7fd fd39 	bl	8107f5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810a4ea:	693b      	ldr	r3, [r7, #16]
 810a4ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a4ee:	4b19      	ldr	r3, [pc, #100]	@ (810a554 <xTaskRemoveFromEventList+0xb4>)
 810a4f0:	681b      	ldr	r3, [r3, #0]
 810a4f2:	429a      	cmp	r2, r3
 810a4f4:	d903      	bls.n	810a4fe <xTaskRemoveFromEventList+0x5e>
 810a4f6:	693b      	ldr	r3, [r7, #16]
 810a4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a4fa:	4a16      	ldr	r2, [pc, #88]	@ (810a554 <xTaskRemoveFromEventList+0xb4>)
 810a4fc:	6013      	str	r3, [r2, #0]
 810a4fe:	693b      	ldr	r3, [r7, #16]
 810a500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a502:	4613      	mov	r3, r2
 810a504:	009b      	lsls	r3, r3, #2
 810a506:	4413      	add	r3, r2
 810a508:	009b      	lsls	r3, r3, #2
 810a50a:	4a13      	ldr	r2, [pc, #76]	@ (810a558 <xTaskRemoveFromEventList+0xb8>)
 810a50c:	441a      	add	r2, r3
 810a50e:	693b      	ldr	r3, [r7, #16]
 810a510:	3304      	adds	r3, #4
 810a512:	4619      	mov	r1, r3
 810a514:	4610      	mov	r0, r2
 810a516:	f7fd fcc4 	bl	8107ea2 <vListInsertEnd>
 810a51a:	e005      	b.n	810a528 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810a51c:	693b      	ldr	r3, [r7, #16]
 810a51e:	3318      	adds	r3, #24
 810a520:	4619      	mov	r1, r3
 810a522:	480e      	ldr	r0, [pc, #56]	@ (810a55c <xTaskRemoveFromEventList+0xbc>)
 810a524:	f7fd fcbd 	bl	8107ea2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810a528:	693b      	ldr	r3, [r7, #16]
 810a52a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a52c:	4b0c      	ldr	r3, [pc, #48]	@ (810a560 <xTaskRemoveFromEventList+0xc0>)
 810a52e:	681b      	ldr	r3, [r3, #0]
 810a530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a532:	429a      	cmp	r2, r3
 810a534:	d905      	bls.n	810a542 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810a536:	2301      	movs	r3, #1
 810a538:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810a53a:	4b0a      	ldr	r3, [pc, #40]	@ (810a564 <xTaskRemoveFromEventList+0xc4>)
 810a53c:	2201      	movs	r2, #1
 810a53e:	601a      	str	r2, [r3, #0]
 810a540:	e001      	b.n	810a546 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 810a542:	2300      	movs	r3, #0
 810a544:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810a546:	697b      	ldr	r3, [r7, #20]
}
 810a548:	4618      	mov	r0, r3
 810a54a:	3718      	adds	r7, #24
 810a54c:	46bd      	mov	sp, r7
 810a54e:	bd80      	pop	{r7, pc}
 810a550:	1000af58 	.word	0x1000af58
 810a554:	1000af38 	.word	0x1000af38
 810a558:	1000aa60 	.word	0x1000aa60
 810a55c:	1000aef0 	.word	0x1000aef0
 810a560:	1000aa5c 	.word	0x1000aa5c
 810a564:	1000af44 	.word	0x1000af44

0810a568 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810a568:	b480      	push	{r7}
 810a56a:	b083      	sub	sp, #12
 810a56c:	af00      	add	r7, sp, #0
 810a56e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810a570:	4b06      	ldr	r3, [pc, #24]	@ (810a58c <vTaskInternalSetTimeOutState+0x24>)
 810a572:	681a      	ldr	r2, [r3, #0]
 810a574:	687b      	ldr	r3, [r7, #4]
 810a576:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810a578:	4b05      	ldr	r3, [pc, #20]	@ (810a590 <vTaskInternalSetTimeOutState+0x28>)
 810a57a:	681a      	ldr	r2, [r3, #0]
 810a57c:	687b      	ldr	r3, [r7, #4]
 810a57e:	605a      	str	r2, [r3, #4]
}
 810a580:	bf00      	nop
 810a582:	370c      	adds	r7, #12
 810a584:	46bd      	mov	sp, r7
 810a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a58a:	4770      	bx	lr
 810a58c:	1000af48 	.word	0x1000af48
 810a590:	1000af34 	.word	0x1000af34

0810a594 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810a594:	b580      	push	{r7, lr}
 810a596:	b088      	sub	sp, #32
 810a598:	af00      	add	r7, sp, #0
 810a59a:	6078      	str	r0, [r7, #4]
 810a59c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810a59e:	687b      	ldr	r3, [r7, #4]
 810a5a0:	2b00      	cmp	r3, #0
 810a5a2:	d10b      	bne.n	810a5bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 810a5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a5a8:	f383 8811 	msr	BASEPRI, r3
 810a5ac:	f3bf 8f6f 	isb	sy
 810a5b0:	f3bf 8f4f 	dsb	sy
 810a5b4:	613b      	str	r3, [r7, #16]
}
 810a5b6:	bf00      	nop
 810a5b8:	bf00      	nop
 810a5ba:	e7fd      	b.n	810a5b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810a5bc:	683b      	ldr	r3, [r7, #0]
 810a5be:	2b00      	cmp	r3, #0
 810a5c0:	d10b      	bne.n	810a5da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 810a5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a5c6:	f383 8811 	msr	BASEPRI, r3
 810a5ca:	f3bf 8f6f 	isb	sy
 810a5ce:	f3bf 8f4f 	dsb	sy
 810a5d2:	60fb      	str	r3, [r7, #12]
}
 810a5d4:	bf00      	nop
 810a5d6:	bf00      	nop
 810a5d8:	e7fd      	b.n	810a5d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810a5da:	f7fd fe1d 	bl	8108218 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810a5de:	4b1d      	ldr	r3, [pc, #116]	@ (810a654 <xTaskCheckForTimeOut+0xc0>)
 810a5e0:	681b      	ldr	r3, [r3, #0]
 810a5e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810a5e4:	687b      	ldr	r3, [r7, #4]
 810a5e6:	685b      	ldr	r3, [r3, #4]
 810a5e8:	69ba      	ldr	r2, [r7, #24]
 810a5ea:	1ad3      	subs	r3, r2, r3
 810a5ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810a5ee:	683b      	ldr	r3, [r7, #0]
 810a5f0:	681b      	ldr	r3, [r3, #0]
 810a5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a5f6:	d102      	bne.n	810a5fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810a5f8:	2300      	movs	r3, #0
 810a5fa:	61fb      	str	r3, [r7, #28]
 810a5fc:	e023      	b.n	810a646 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810a5fe:	687b      	ldr	r3, [r7, #4]
 810a600:	681a      	ldr	r2, [r3, #0]
 810a602:	4b15      	ldr	r3, [pc, #84]	@ (810a658 <xTaskCheckForTimeOut+0xc4>)
 810a604:	681b      	ldr	r3, [r3, #0]
 810a606:	429a      	cmp	r2, r3
 810a608:	d007      	beq.n	810a61a <xTaskCheckForTimeOut+0x86>
 810a60a:	687b      	ldr	r3, [r7, #4]
 810a60c:	685b      	ldr	r3, [r3, #4]
 810a60e:	69ba      	ldr	r2, [r7, #24]
 810a610:	429a      	cmp	r2, r3
 810a612:	d302      	bcc.n	810a61a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810a614:	2301      	movs	r3, #1
 810a616:	61fb      	str	r3, [r7, #28]
 810a618:	e015      	b.n	810a646 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810a61a:	683b      	ldr	r3, [r7, #0]
 810a61c:	681b      	ldr	r3, [r3, #0]
 810a61e:	697a      	ldr	r2, [r7, #20]
 810a620:	429a      	cmp	r2, r3
 810a622:	d20b      	bcs.n	810a63c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810a624:	683b      	ldr	r3, [r7, #0]
 810a626:	681a      	ldr	r2, [r3, #0]
 810a628:	697b      	ldr	r3, [r7, #20]
 810a62a:	1ad2      	subs	r2, r2, r3
 810a62c:	683b      	ldr	r3, [r7, #0]
 810a62e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810a630:	6878      	ldr	r0, [r7, #4]
 810a632:	f7ff ff99 	bl	810a568 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810a636:	2300      	movs	r3, #0
 810a638:	61fb      	str	r3, [r7, #28]
 810a63a:	e004      	b.n	810a646 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 810a63c:	683b      	ldr	r3, [r7, #0]
 810a63e:	2200      	movs	r2, #0
 810a640:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810a642:	2301      	movs	r3, #1
 810a644:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810a646:	f7fd fe19 	bl	810827c <vPortExitCritical>

	return xReturn;
 810a64a:	69fb      	ldr	r3, [r7, #28]
}
 810a64c:	4618      	mov	r0, r3
 810a64e:	3720      	adds	r7, #32
 810a650:	46bd      	mov	sp, r7
 810a652:	bd80      	pop	{r7, pc}
 810a654:	1000af34 	.word	0x1000af34
 810a658:	1000af48 	.word	0x1000af48

0810a65c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810a65c:	b480      	push	{r7}
 810a65e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810a660:	4b03      	ldr	r3, [pc, #12]	@ (810a670 <vTaskMissedYield+0x14>)
 810a662:	2201      	movs	r2, #1
 810a664:	601a      	str	r2, [r3, #0]
}
 810a666:	bf00      	nop
 810a668:	46bd      	mov	sp, r7
 810a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a66e:	4770      	bx	lr
 810a670:	1000af44 	.word	0x1000af44

0810a674 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810a674:	b580      	push	{r7, lr}
 810a676:	b082      	sub	sp, #8
 810a678:	af00      	add	r7, sp, #0
 810a67a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810a67c:	f000 f852 	bl	810a724 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810a680:	4b06      	ldr	r3, [pc, #24]	@ (810a69c <prvIdleTask+0x28>)
 810a682:	681b      	ldr	r3, [r3, #0]
 810a684:	2b01      	cmp	r3, #1
 810a686:	d9f9      	bls.n	810a67c <prvIdleTask+0x8>
			{
				taskYIELD();
 810a688:	4b05      	ldr	r3, [pc, #20]	@ (810a6a0 <prvIdleTask+0x2c>)
 810a68a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810a68e:	601a      	str	r2, [r3, #0]
 810a690:	f3bf 8f4f 	dsb	sy
 810a694:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810a698:	e7f0      	b.n	810a67c <prvIdleTask+0x8>
 810a69a:	bf00      	nop
 810a69c:	1000aa60 	.word	0x1000aa60
 810a6a0:	e000ed04 	.word	0xe000ed04

0810a6a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810a6a4:	b580      	push	{r7, lr}
 810a6a6:	b082      	sub	sp, #8
 810a6a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810a6aa:	2300      	movs	r3, #0
 810a6ac:	607b      	str	r3, [r7, #4]
 810a6ae:	e00c      	b.n	810a6ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810a6b0:	687a      	ldr	r2, [r7, #4]
 810a6b2:	4613      	mov	r3, r2
 810a6b4:	009b      	lsls	r3, r3, #2
 810a6b6:	4413      	add	r3, r2
 810a6b8:	009b      	lsls	r3, r3, #2
 810a6ba:	4a12      	ldr	r2, [pc, #72]	@ (810a704 <prvInitialiseTaskLists+0x60>)
 810a6bc:	4413      	add	r3, r2
 810a6be:	4618      	mov	r0, r3
 810a6c0:	f7fd fbc2 	bl	8107e48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810a6c4:	687b      	ldr	r3, [r7, #4]
 810a6c6:	3301      	adds	r3, #1
 810a6c8:	607b      	str	r3, [r7, #4]
 810a6ca:	687b      	ldr	r3, [r7, #4]
 810a6cc:	2b37      	cmp	r3, #55	@ 0x37
 810a6ce:	d9ef      	bls.n	810a6b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810a6d0:	480d      	ldr	r0, [pc, #52]	@ (810a708 <prvInitialiseTaskLists+0x64>)
 810a6d2:	f7fd fbb9 	bl	8107e48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810a6d6:	480d      	ldr	r0, [pc, #52]	@ (810a70c <prvInitialiseTaskLists+0x68>)
 810a6d8:	f7fd fbb6 	bl	8107e48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810a6dc:	480c      	ldr	r0, [pc, #48]	@ (810a710 <prvInitialiseTaskLists+0x6c>)
 810a6de:	f7fd fbb3 	bl	8107e48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810a6e2:	480c      	ldr	r0, [pc, #48]	@ (810a714 <prvInitialiseTaskLists+0x70>)
 810a6e4:	f7fd fbb0 	bl	8107e48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810a6e8:	480b      	ldr	r0, [pc, #44]	@ (810a718 <prvInitialiseTaskLists+0x74>)
 810a6ea:	f7fd fbad 	bl	8107e48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810a6ee:	4b0b      	ldr	r3, [pc, #44]	@ (810a71c <prvInitialiseTaskLists+0x78>)
 810a6f0:	4a05      	ldr	r2, [pc, #20]	@ (810a708 <prvInitialiseTaskLists+0x64>)
 810a6f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810a6f4:	4b0a      	ldr	r3, [pc, #40]	@ (810a720 <prvInitialiseTaskLists+0x7c>)
 810a6f6:	4a05      	ldr	r2, [pc, #20]	@ (810a70c <prvInitialiseTaskLists+0x68>)
 810a6f8:	601a      	str	r2, [r3, #0]
}
 810a6fa:	bf00      	nop
 810a6fc:	3708      	adds	r7, #8
 810a6fe:	46bd      	mov	sp, r7
 810a700:	bd80      	pop	{r7, pc}
 810a702:	bf00      	nop
 810a704:	1000aa60 	.word	0x1000aa60
 810a708:	1000aec0 	.word	0x1000aec0
 810a70c:	1000aed4 	.word	0x1000aed4
 810a710:	1000aef0 	.word	0x1000aef0
 810a714:	1000af04 	.word	0x1000af04
 810a718:	1000af1c 	.word	0x1000af1c
 810a71c:	1000aee8 	.word	0x1000aee8
 810a720:	1000aeec 	.word	0x1000aeec

0810a724 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810a724:	b580      	push	{r7, lr}
 810a726:	b082      	sub	sp, #8
 810a728:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810a72a:	e019      	b.n	810a760 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810a72c:	f7fd fd74 	bl	8108218 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a730:	4b10      	ldr	r3, [pc, #64]	@ (810a774 <prvCheckTasksWaitingTermination+0x50>)
 810a732:	68db      	ldr	r3, [r3, #12]
 810a734:	68db      	ldr	r3, [r3, #12]
 810a736:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a738:	687b      	ldr	r3, [r7, #4]
 810a73a:	3304      	adds	r3, #4
 810a73c:	4618      	mov	r0, r3
 810a73e:	f7fd fc0d 	bl	8107f5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 810a742:	4b0d      	ldr	r3, [pc, #52]	@ (810a778 <prvCheckTasksWaitingTermination+0x54>)
 810a744:	681b      	ldr	r3, [r3, #0]
 810a746:	3b01      	subs	r3, #1
 810a748:	4a0b      	ldr	r2, [pc, #44]	@ (810a778 <prvCheckTasksWaitingTermination+0x54>)
 810a74a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810a74c:	4b0b      	ldr	r3, [pc, #44]	@ (810a77c <prvCheckTasksWaitingTermination+0x58>)
 810a74e:	681b      	ldr	r3, [r3, #0]
 810a750:	3b01      	subs	r3, #1
 810a752:	4a0a      	ldr	r2, [pc, #40]	@ (810a77c <prvCheckTasksWaitingTermination+0x58>)
 810a754:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810a756:	f7fd fd91 	bl	810827c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810a75a:	6878      	ldr	r0, [r7, #4]
 810a75c:	f000 f810 	bl	810a780 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810a760:	4b06      	ldr	r3, [pc, #24]	@ (810a77c <prvCheckTasksWaitingTermination+0x58>)
 810a762:	681b      	ldr	r3, [r3, #0]
 810a764:	2b00      	cmp	r3, #0
 810a766:	d1e1      	bne.n	810a72c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810a768:	bf00      	nop
 810a76a:	bf00      	nop
 810a76c:	3708      	adds	r7, #8
 810a76e:	46bd      	mov	sp, r7
 810a770:	bd80      	pop	{r7, pc}
 810a772:	bf00      	nop
 810a774:	1000af04 	.word	0x1000af04
 810a778:	1000af30 	.word	0x1000af30
 810a77c:	1000af18 	.word	0x1000af18

0810a780 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810a780:	b580      	push	{r7, lr}
 810a782:	b084      	sub	sp, #16
 810a784:	af00      	add	r7, sp, #0
 810a786:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 810a788:	687b      	ldr	r3, [r7, #4]
 810a78a:	3354      	adds	r3, #84	@ 0x54
 810a78c:	4618      	mov	r0, r3
 810a78e:	f00b fbbf 	bl	8115f10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810a792:	687b      	ldr	r3, [r7, #4]
 810a794:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810a798:	2b00      	cmp	r3, #0
 810a79a:	d108      	bne.n	810a7ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810a79c:	687b      	ldr	r3, [r7, #4]
 810a79e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a7a0:	4618      	mov	r0, r3
 810a7a2:	f7fd fa25 	bl	8107bf0 <vPortFree>
				vPortFree( pxTCB );
 810a7a6:	6878      	ldr	r0, [r7, #4]
 810a7a8:	f7fd fa22 	bl	8107bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810a7ac:	e019      	b.n	810a7e2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810a7ae:	687b      	ldr	r3, [r7, #4]
 810a7b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810a7b4:	2b01      	cmp	r3, #1
 810a7b6:	d103      	bne.n	810a7c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 810a7b8:	6878      	ldr	r0, [r7, #4]
 810a7ba:	f7fd fa19 	bl	8107bf0 <vPortFree>
	}
 810a7be:	e010      	b.n	810a7e2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810a7c0:	687b      	ldr	r3, [r7, #4]
 810a7c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810a7c6:	2b02      	cmp	r3, #2
 810a7c8:	d00b      	beq.n	810a7e2 <prvDeleteTCB+0x62>
	__asm volatile
 810a7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a7ce:	f383 8811 	msr	BASEPRI, r3
 810a7d2:	f3bf 8f6f 	isb	sy
 810a7d6:	f3bf 8f4f 	dsb	sy
 810a7da:	60fb      	str	r3, [r7, #12]
}
 810a7dc:	bf00      	nop
 810a7de:	bf00      	nop
 810a7e0:	e7fd      	b.n	810a7de <prvDeleteTCB+0x5e>
	}
 810a7e2:	bf00      	nop
 810a7e4:	3710      	adds	r7, #16
 810a7e6:	46bd      	mov	sp, r7
 810a7e8:	bd80      	pop	{r7, pc}
	...

0810a7ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810a7ec:	b480      	push	{r7}
 810a7ee:	b083      	sub	sp, #12
 810a7f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a7f2:	4b0c      	ldr	r3, [pc, #48]	@ (810a824 <prvResetNextTaskUnblockTime+0x38>)
 810a7f4:	681b      	ldr	r3, [r3, #0]
 810a7f6:	681b      	ldr	r3, [r3, #0]
 810a7f8:	2b00      	cmp	r3, #0
 810a7fa:	d104      	bne.n	810a806 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810a7fc:	4b0a      	ldr	r3, [pc, #40]	@ (810a828 <prvResetNextTaskUnblockTime+0x3c>)
 810a7fe:	f04f 32ff 	mov.w	r2, #4294967295
 810a802:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810a804:	e008      	b.n	810a818 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a806:	4b07      	ldr	r3, [pc, #28]	@ (810a824 <prvResetNextTaskUnblockTime+0x38>)
 810a808:	681b      	ldr	r3, [r3, #0]
 810a80a:	68db      	ldr	r3, [r3, #12]
 810a80c:	68db      	ldr	r3, [r3, #12]
 810a80e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810a810:	687b      	ldr	r3, [r7, #4]
 810a812:	685b      	ldr	r3, [r3, #4]
 810a814:	4a04      	ldr	r2, [pc, #16]	@ (810a828 <prvResetNextTaskUnblockTime+0x3c>)
 810a816:	6013      	str	r3, [r2, #0]
}
 810a818:	bf00      	nop
 810a81a:	370c      	adds	r7, #12
 810a81c:	46bd      	mov	sp, r7
 810a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a822:	4770      	bx	lr
 810a824:	1000aee8 	.word	0x1000aee8
 810a828:	1000af50 	.word	0x1000af50

0810a82c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 810a82c:	b480      	push	{r7}
 810a82e:	b083      	sub	sp, #12
 810a830:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 810a832:	4b05      	ldr	r3, [pc, #20]	@ (810a848 <xTaskGetCurrentTaskHandle+0x1c>)
 810a834:	681b      	ldr	r3, [r3, #0]
 810a836:	607b      	str	r3, [r7, #4]

		return xReturn;
 810a838:	687b      	ldr	r3, [r7, #4]
	}
 810a83a:	4618      	mov	r0, r3
 810a83c:	370c      	adds	r7, #12
 810a83e:	46bd      	mov	sp, r7
 810a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a844:	4770      	bx	lr
 810a846:	bf00      	nop
 810a848:	1000aa5c 	.word	0x1000aa5c

0810a84c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810a84c:	b480      	push	{r7}
 810a84e:	b083      	sub	sp, #12
 810a850:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810a852:	4b0b      	ldr	r3, [pc, #44]	@ (810a880 <xTaskGetSchedulerState+0x34>)
 810a854:	681b      	ldr	r3, [r3, #0]
 810a856:	2b00      	cmp	r3, #0
 810a858:	d102      	bne.n	810a860 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810a85a:	2301      	movs	r3, #1
 810a85c:	607b      	str	r3, [r7, #4]
 810a85e:	e008      	b.n	810a872 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a860:	4b08      	ldr	r3, [pc, #32]	@ (810a884 <xTaskGetSchedulerState+0x38>)
 810a862:	681b      	ldr	r3, [r3, #0]
 810a864:	2b00      	cmp	r3, #0
 810a866:	d102      	bne.n	810a86e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810a868:	2302      	movs	r3, #2
 810a86a:	607b      	str	r3, [r7, #4]
 810a86c:	e001      	b.n	810a872 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810a86e:	2300      	movs	r3, #0
 810a870:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810a872:	687b      	ldr	r3, [r7, #4]
	}
 810a874:	4618      	mov	r0, r3
 810a876:	370c      	adds	r7, #12
 810a878:	46bd      	mov	sp, r7
 810a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a87e:	4770      	bx	lr
 810a880:	1000af3c 	.word	0x1000af3c
 810a884:	1000af58 	.word	0x1000af58

0810a888 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 810a888:	b580      	push	{r7, lr}
 810a88a:	b084      	sub	sp, #16
 810a88c:	af00      	add	r7, sp, #0
 810a88e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 810a890:	687b      	ldr	r3, [r7, #4]
 810a892:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 810a894:	2300      	movs	r3, #0
 810a896:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 810a898:	687b      	ldr	r3, [r7, #4]
 810a89a:	2b00      	cmp	r3, #0
 810a89c:	d051      	beq.n	810a942 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 810a89e:	68bb      	ldr	r3, [r7, #8]
 810a8a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a8a2:	4b2a      	ldr	r3, [pc, #168]	@ (810a94c <xTaskPriorityInherit+0xc4>)
 810a8a4:	681b      	ldr	r3, [r3, #0]
 810a8a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a8a8:	429a      	cmp	r2, r3
 810a8aa:	d241      	bcs.n	810a930 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810a8ac:	68bb      	ldr	r3, [r7, #8]
 810a8ae:	699b      	ldr	r3, [r3, #24]
 810a8b0:	2b00      	cmp	r3, #0
 810a8b2:	db06      	blt.n	810a8c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a8b4:	4b25      	ldr	r3, [pc, #148]	@ (810a94c <xTaskPriorityInherit+0xc4>)
 810a8b6:	681b      	ldr	r3, [r3, #0]
 810a8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a8ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810a8be:	68bb      	ldr	r3, [r7, #8]
 810a8c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 810a8c2:	68bb      	ldr	r3, [r7, #8]
 810a8c4:	6959      	ldr	r1, [r3, #20]
 810a8c6:	68bb      	ldr	r3, [r7, #8]
 810a8c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a8ca:	4613      	mov	r3, r2
 810a8cc:	009b      	lsls	r3, r3, #2
 810a8ce:	4413      	add	r3, r2
 810a8d0:	009b      	lsls	r3, r3, #2
 810a8d2:	4a1f      	ldr	r2, [pc, #124]	@ (810a950 <xTaskPriorityInherit+0xc8>)
 810a8d4:	4413      	add	r3, r2
 810a8d6:	4299      	cmp	r1, r3
 810a8d8:	d122      	bne.n	810a920 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810a8da:	68bb      	ldr	r3, [r7, #8]
 810a8dc:	3304      	adds	r3, #4
 810a8de:	4618      	mov	r0, r3
 810a8e0:	f7fd fb3c 	bl	8107f5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810a8e4:	4b19      	ldr	r3, [pc, #100]	@ (810a94c <xTaskPriorityInherit+0xc4>)
 810a8e6:	681b      	ldr	r3, [r3, #0]
 810a8e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a8ea:	68bb      	ldr	r3, [r7, #8]
 810a8ec:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 810a8ee:	68bb      	ldr	r3, [r7, #8]
 810a8f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a8f2:	4b18      	ldr	r3, [pc, #96]	@ (810a954 <xTaskPriorityInherit+0xcc>)
 810a8f4:	681b      	ldr	r3, [r3, #0]
 810a8f6:	429a      	cmp	r2, r3
 810a8f8:	d903      	bls.n	810a902 <xTaskPriorityInherit+0x7a>
 810a8fa:	68bb      	ldr	r3, [r7, #8]
 810a8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a8fe:	4a15      	ldr	r2, [pc, #84]	@ (810a954 <xTaskPriorityInherit+0xcc>)
 810a900:	6013      	str	r3, [r2, #0]
 810a902:	68bb      	ldr	r3, [r7, #8]
 810a904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a906:	4613      	mov	r3, r2
 810a908:	009b      	lsls	r3, r3, #2
 810a90a:	4413      	add	r3, r2
 810a90c:	009b      	lsls	r3, r3, #2
 810a90e:	4a10      	ldr	r2, [pc, #64]	@ (810a950 <xTaskPriorityInherit+0xc8>)
 810a910:	441a      	add	r2, r3
 810a912:	68bb      	ldr	r3, [r7, #8]
 810a914:	3304      	adds	r3, #4
 810a916:	4619      	mov	r1, r3
 810a918:	4610      	mov	r0, r2
 810a91a:	f7fd fac2 	bl	8107ea2 <vListInsertEnd>
 810a91e:	e004      	b.n	810a92a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810a920:	4b0a      	ldr	r3, [pc, #40]	@ (810a94c <xTaskPriorityInherit+0xc4>)
 810a922:	681b      	ldr	r3, [r3, #0]
 810a924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a926:	68bb      	ldr	r3, [r7, #8]
 810a928:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 810a92a:	2301      	movs	r3, #1
 810a92c:	60fb      	str	r3, [r7, #12]
 810a92e:	e008      	b.n	810a942 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 810a930:	68bb      	ldr	r3, [r7, #8]
 810a932:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810a934:	4b05      	ldr	r3, [pc, #20]	@ (810a94c <xTaskPriorityInherit+0xc4>)
 810a936:	681b      	ldr	r3, [r3, #0]
 810a938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a93a:	429a      	cmp	r2, r3
 810a93c:	d201      	bcs.n	810a942 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 810a93e:	2301      	movs	r3, #1
 810a940:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810a942:	68fb      	ldr	r3, [r7, #12]
	}
 810a944:	4618      	mov	r0, r3
 810a946:	3710      	adds	r7, #16
 810a948:	46bd      	mov	sp, r7
 810a94a:	bd80      	pop	{r7, pc}
 810a94c:	1000aa5c 	.word	0x1000aa5c
 810a950:	1000aa60 	.word	0x1000aa60
 810a954:	1000af38 	.word	0x1000af38

0810a958 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810a958:	b580      	push	{r7, lr}
 810a95a:	b086      	sub	sp, #24
 810a95c:	af00      	add	r7, sp, #0
 810a95e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810a960:	687b      	ldr	r3, [r7, #4]
 810a962:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810a964:	2300      	movs	r3, #0
 810a966:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810a968:	687b      	ldr	r3, [r7, #4]
 810a96a:	2b00      	cmp	r3, #0
 810a96c:	d058      	beq.n	810aa20 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810a96e:	4b2f      	ldr	r3, [pc, #188]	@ (810aa2c <xTaskPriorityDisinherit+0xd4>)
 810a970:	681b      	ldr	r3, [r3, #0]
 810a972:	693a      	ldr	r2, [r7, #16]
 810a974:	429a      	cmp	r2, r3
 810a976:	d00b      	beq.n	810a990 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 810a978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a97c:	f383 8811 	msr	BASEPRI, r3
 810a980:	f3bf 8f6f 	isb	sy
 810a984:	f3bf 8f4f 	dsb	sy
 810a988:	60fb      	str	r3, [r7, #12]
}
 810a98a:	bf00      	nop
 810a98c:	bf00      	nop
 810a98e:	e7fd      	b.n	810a98c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810a990:	693b      	ldr	r3, [r7, #16]
 810a992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a994:	2b00      	cmp	r3, #0
 810a996:	d10b      	bne.n	810a9b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 810a998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a99c:	f383 8811 	msr	BASEPRI, r3
 810a9a0:	f3bf 8f6f 	isb	sy
 810a9a4:	f3bf 8f4f 	dsb	sy
 810a9a8:	60bb      	str	r3, [r7, #8]
}
 810a9aa:	bf00      	nop
 810a9ac:	bf00      	nop
 810a9ae:	e7fd      	b.n	810a9ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 810a9b0:	693b      	ldr	r3, [r7, #16]
 810a9b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a9b4:	1e5a      	subs	r2, r3, #1
 810a9b6:	693b      	ldr	r3, [r7, #16]
 810a9b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810a9ba:	693b      	ldr	r3, [r7, #16]
 810a9bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a9be:	693b      	ldr	r3, [r7, #16]
 810a9c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a9c2:	429a      	cmp	r2, r3
 810a9c4:	d02c      	beq.n	810aa20 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810a9c6:	693b      	ldr	r3, [r7, #16]
 810a9c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a9ca:	2b00      	cmp	r3, #0
 810a9cc:	d128      	bne.n	810aa20 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810a9ce:	693b      	ldr	r3, [r7, #16]
 810a9d0:	3304      	adds	r3, #4
 810a9d2:	4618      	mov	r0, r3
 810a9d4:	f7fd fac2 	bl	8107f5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810a9d8:	693b      	ldr	r3, [r7, #16]
 810a9da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810a9dc:	693b      	ldr	r3, [r7, #16]
 810a9de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a9e0:	693b      	ldr	r3, [r7, #16]
 810a9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a9e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810a9e8:	693b      	ldr	r3, [r7, #16]
 810a9ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810a9ec:	693b      	ldr	r3, [r7, #16]
 810a9ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a9f0:	4b0f      	ldr	r3, [pc, #60]	@ (810aa30 <xTaskPriorityDisinherit+0xd8>)
 810a9f2:	681b      	ldr	r3, [r3, #0]
 810a9f4:	429a      	cmp	r2, r3
 810a9f6:	d903      	bls.n	810aa00 <xTaskPriorityDisinherit+0xa8>
 810a9f8:	693b      	ldr	r3, [r7, #16]
 810a9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a9fc:	4a0c      	ldr	r2, [pc, #48]	@ (810aa30 <xTaskPriorityDisinherit+0xd8>)
 810a9fe:	6013      	str	r3, [r2, #0]
 810aa00:	693b      	ldr	r3, [r7, #16]
 810aa02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810aa04:	4613      	mov	r3, r2
 810aa06:	009b      	lsls	r3, r3, #2
 810aa08:	4413      	add	r3, r2
 810aa0a:	009b      	lsls	r3, r3, #2
 810aa0c:	4a09      	ldr	r2, [pc, #36]	@ (810aa34 <xTaskPriorityDisinherit+0xdc>)
 810aa0e:	441a      	add	r2, r3
 810aa10:	693b      	ldr	r3, [r7, #16]
 810aa12:	3304      	adds	r3, #4
 810aa14:	4619      	mov	r1, r3
 810aa16:	4610      	mov	r0, r2
 810aa18:	f7fd fa43 	bl	8107ea2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810aa1c:	2301      	movs	r3, #1
 810aa1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810aa20:	697b      	ldr	r3, [r7, #20]
	}
 810aa22:	4618      	mov	r0, r3
 810aa24:	3718      	adds	r7, #24
 810aa26:	46bd      	mov	sp, r7
 810aa28:	bd80      	pop	{r7, pc}
 810aa2a:	bf00      	nop
 810aa2c:	1000aa5c 	.word	0x1000aa5c
 810aa30:	1000af38 	.word	0x1000af38
 810aa34:	1000aa60 	.word	0x1000aa60

0810aa38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 810aa38:	b580      	push	{r7, lr}
 810aa3a:	b088      	sub	sp, #32
 810aa3c:	af00      	add	r7, sp, #0
 810aa3e:	6078      	str	r0, [r7, #4]
 810aa40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 810aa42:	687b      	ldr	r3, [r7, #4]
 810aa44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 810aa46:	2301      	movs	r3, #1
 810aa48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810aa4a:	687b      	ldr	r3, [r7, #4]
 810aa4c:	2b00      	cmp	r3, #0
 810aa4e:	d06c      	beq.n	810ab2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 810aa50:	69bb      	ldr	r3, [r7, #24]
 810aa52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810aa54:	2b00      	cmp	r3, #0
 810aa56:	d10b      	bne.n	810aa70 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 810aa58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810aa5c:	f383 8811 	msr	BASEPRI, r3
 810aa60:	f3bf 8f6f 	isb	sy
 810aa64:	f3bf 8f4f 	dsb	sy
 810aa68:	60fb      	str	r3, [r7, #12]
}
 810aa6a:	bf00      	nop
 810aa6c:	bf00      	nop
 810aa6e:	e7fd      	b.n	810aa6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 810aa70:	69bb      	ldr	r3, [r7, #24]
 810aa72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810aa74:	683a      	ldr	r2, [r7, #0]
 810aa76:	429a      	cmp	r2, r3
 810aa78:	d902      	bls.n	810aa80 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 810aa7a:	683b      	ldr	r3, [r7, #0]
 810aa7c:	61fb      	str	r3, [r7, #28]
 810aa7e:	e002      	b.n	810aa86 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 810aa80:	69bb      	ldr	r3, [r7, #24]
 810aa82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810aa84:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 810aa86:	69bb      	ldr	r3, [r7, #24]
 810aa88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810aa8a:	69fa      	ldr	r2, [r7, #28]
 810aa8c:	429a      	cmp	r2, r3
 810aa8e:	d04c      	beq.n	810ab2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 810aa90:	69bb      	ldr	r3, [r7, #24]
 810aa92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810aa94:	697a      	ldr	r2, [r7, #20]
 810aa96:	429a      	cmp	r2, r3
 810aa98:	d147      	bne.n	810ab2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 810aa9a:	4b26      	ldr	r3, [pc, #152]	@ (810ab34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 810aa9c:	681b      	ldr	r3, [r3, #0]
 810aa9e:	69ba      	ldr	r2, [r7, #24]
 810aaa0:	429a      	cmp	r2, r3
 810aaa2:	d10b      	bne.n	810aabc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 810aaa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810aaa8:	f383 8811 	msr	BASEPRI, r3
 810aaac:	f3bf 8f6f 	isb	sy
 810aab0:	f3bf 8f4f 	dsb	sy
 810aab4:	60bb      	str	r3, [r7, #8]
}
 810aab6:	bf00      	nop
 810aab8:	bf00      	nop
 810aaba:	e7fd      	b.n	810aab8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 810aabc:	69bb      	ldr	r3, [r7, #24]
 810aabe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810aac0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 810aac2:	69bb      	ldr	r3, [r7, #24]
 810aac4:	69fa      	ldr	r2, [r7, #28]
 810aac6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810aac8:	69bb      	ldr	r3, [r7, #24]
 810aaca:	699b      	ldr	r3, [r3, #24]
 810aacc:	2b00      	cmp	r3, #0
 810aace:	db04      	blt.n	810aada <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810aad0:	69fb      	ldr	r3, [r7, #28]
 810aad2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810aad6:	69bb      	ldr	r3, [r7, #24]
 810aad8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 810aada:	69bb      	ldr	r3, [r7, #24]
 810aadc:	6959      	ldr	r1, [r3, #20]
 810aade:	693a      	ldr	r2, [r7, #16]
 810aae0:	4613      	mov	r3, r2
 810aae2:	009b      	lsls	r3, r3, #2
 810aae4:	4413      	add	r3, r2
 810aae6:	009b      	lsls	r3, r3, #2
 810aae8:	4a13      	ldr	r2, [pc, #76]	@ (810ab38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810aaea:	4413      	add	r3, r2
 810aaec:	4299      	cmp	r1, r3
 810aaee:	d11c      	bne.n	810ab2a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810aaf0:	69bb      	ldr	r3, [r7, #24]
 810aaf2:	3304      	adds	r3, #4
 810aaf4:	4618      	mov	r0, r3
 810aaf6:	f7fd fa31 	bl	8107f5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 810aafa:	69bb      	ldr	r3, [r7, #24]
 810aafc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810aafe:	4b0f      	ldr	r3, [pc, #60]	@ (810ab3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 810ab00:	681b      	ldr	r3, [r3, #0]
 810ab02:	429a      	cmp	r2, r3
 810ab04:	d903      	bls.n	810ab0e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 810ab06:	69bb      	ldr	r3, [r7, #24]
 810ab08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ab0a:	4a0c      	ldr	r2, [pc, #48]	@ (810ab3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 810ab0c:	6013      	str	r3, [r2, #0]
 810ab0e:	69bb      	ldr	r3, [r7, #24]
 810ab10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ab12:	4613      	mov	r3, r2
 810ab14:	009b      	lsls	r3, r3, #2
 810ab16:	4413      	add	r3, r2
 810ab18:	009b      	lsls	r3, r3, #2
 810ab1a:	4a07      	ldr	r2, [pc, #28]	@ (810ab38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810ab1c:	441a      	add	r2, r3
 810ab1e:	69bb      	ldr	r3, [r7, #24]
 810ab20:	3304      	adds	r3, #4
 810ab22:	4619      	mov	r1, r3
 810ab24:	4610      	mov	r0, r2
 810ab26:	f7fd f9bc 	bl	8107ea2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810ab2a:	bf00      	nop
 810ab2c:	3720      	adds	r7, #32
 810ab2e:	46bd      	mov	sp, r7
 810ab30:	bd80      	pop	{r7, pc}
 810ab32:	bf00      	nop
 810ab34:	1000aa5c 	.word	0x1000aa5c
 810ab38:	1000aa60 	.word	0x1000aa60
 810ab3c:	1000af38 	.word	0x1000af38

0810ab40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 810ab40:	b480      	push	{r7}
 810ab42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 810ab44:	4b07      	ldr	r3, [pc, #28]	@ (810ab64 <pvTaskIncrementMutexHeldCount+0x24>)
 810ab46:	681b      	ldr	r3, [r3, #0]
 810ab48:	2b00      	cmp	r3, #0
 810ab4a:	d004      	beq.n	810ab56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 810ab4c:	4b05      	ldr	r3, [pc, #20]	@ (810ab64 <pvTaskIncrementMutexHeldCount+0x24>)
 810ab4e:	681b      	ldr	r3, [r3, #0]
 810ab50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810ab52:	3201      	adds	r2, #1
 810ab54:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 810ab56:	4b03      	ldr	r3, [pc, #12]	@ (810ab64 <pvTaskIncrementMutexHeldCount+0x24>)
 810ab58:	681b      	ldr	r3, [r3, #0]
	}
 810ab5a:	4618      	mov	r0, r3
 810ab5c:	46bd      	mov	sp, r7
 810ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab62:	4770      	bx	lr
 810ab64:	1000aa5c 	.word	0x1000aa5c

0810ab68 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 810ab68:	b580      	push	{r7, lr}
 810ab6a:	b086      	sub	sp, #24
 810ab6c:	af00      	add	r7, sp, #0
 810ab6e:	60f8      	str	r0, [r7, #12]
 810ab70:	60b9      	str	r1, [r7, #8]
 810ab72:	607a      	str	r2, [r7, #4]
 810ab74:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 810ab76:	f7fd fb4f 	bl	8108218 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 810ab7a:	4b29      	ldr	r3, [pc, #164]	@ (810ac20 <xTaskNotifyWait+0xb8>)
 810ab7c:	681b      	ldr	r3, [r3, #0]
 810ab7e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 810ab82:	b2db      	uxtb	r3, r3
 810ab84:	2b02      	cmp	r3, #2
 810ab86:	d01c      	beq.n	810abc2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 810ab88:	4b25      	ldr	r3, [pc, #148]	@ (810ac20 <xTaskNotifyWait+0xb8>)
 810ab8a:	681b      	ldr	r3, [r3, #0]
 810ab8c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 810ab90:	68fa      	ldr	r2, [r7, #12]
 810ab92:	43d2      	mvns	r2, r2
 810ab94:	400a      	ands	r2, r1
 810ab96:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 810ab9a:	4b21      	ldr	r3, [pc, #132]	@ (810ac20 <xTaskNotifyWait+0xb8>)
 810ab9c:	681b      	ldr	r3, [r3, #0]
 810ab9e:	2201      	movs	r2, #1
 810aba0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 810aba4:	683b      	ldr	r3, [r7, #0]
 810aba6:	2b00      	cmp	r3, #0
 810aba8:	d00b      	beq.n	810abc2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810abaa:	2101      	movs	r1, #1
 810abac:	6838      	ldr	r0, [r7, #0]
 810abae:	f000 f947 	bl	810ae40 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 810abb2:	4b1c      	ldr	r3, [pc, #112]	@ (810ac24 <xTaskNotifyWait+0xbc>)
 810abb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810abb8:	601a      	str	r2, [r3, #0]
 810abba:	f3bf 8f4f 	dsb	sy
 810abbe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810abc2:	f7fd fb5b 	bl	810827c <vPortExitCritical>

		taskENTER_CRITICAL();
 810abc6:	f7fd fb27 	bl	8108218 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 810abca:	687b      	ldr	r3, [r7, #4]
 810abcc:	2b00      	cmp	r3, #0
 810abce:	d005      	beq.n	810abdc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 810abd0:	4b13      	ldr	r3, [pc, #76]	@ (810ac20 <xTaskNotifyWait+0xb8>)
 810abd2:	681b      	ldr	r3, [r3, #0]
 810abd4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 810abd8:	687b      	ldr	r3, [r7, #4]
 810abda:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 810abdc:	4b10      	ldr	r3, [pc, #64]	@ (810ac20 <xTaskNotifyWait+0xb8>)
 810abde:	681b      	ldr	r3, [r3, #0]
 810abe0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 810abe4:	b2db      	uxtb	r3, r3
 810abe6:	2b02      	cmp	r3, #2
 810abe8:	d002      	beq.n	810abf0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 810abea:	2300      	movs	r3, #0
 810abec:	617b      	str	r3, [r7, #20]
 810abee:	e00a      	b.n	810ac06 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 810abf0:	4b0b      	ldr	r3, [pc, #44]	@ (810ac20 <xTaskNotifyWait+0xb8>)
 810abf2:	681b      	ldr	r3, [r3, #0]
 810abf4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 810abf8:	68ba      	ldr	r2, [r7, #8]
 810abfa:	43d2      	mvns	r2, r2
 810abfc:	400a      	ands	r2, r1
 810abfe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 810ac02:	2301      	movs	r3, #1
 810ac04:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810ac06:	4b06      	ldr	r3, [pc, #24]	@ (810ac20 <xTaskNotifyWait+0xb8>)
 810ac08:	681b      	ldr	r3, [r3, #0]
 810ac0a:	2200      	movs	r2, #0
 810ac0c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 810ac10:	f7fd fb34 	bl	810827c <vPortExitCritical>

		return xReturn;
 810ac14:	697b      	ldr	r3, [r7, #20]
	}
 810ac16:	4618      	mov	r0, r3
 810ac18:	3718      	adds	r7, #24
 810ac1a:	46bd      	mov	sp, r7
 810ac1c:	bd80      	pop	{r7, pc}
 810ac1e:	bf00      	nop
 810ac20:	1000aa5c 	.word	0x1000aa5c
 810ac24:	e000ed04 	.word	0xe000ed04

0810ac28 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 810ac28:	b580      	push	{r7, lr}
 810ac2a:	b08e      	sub	sp, #56	@ 0x38
 810ac2c:	af00      	add	r7, sp, #0
 810ac2e:	60f8      	str	r0, [r7, #12]
 810ac30:	60b9      	str	r1, [r7, #8]
 810ac32:	603b      	str	r3, [r7, #0]
 810ac34:	4613      	mov	r3, r2
 810ac36:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 810ac38:	2301      	movs	r3, #1
 810ac3a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 810ac3c:	68fb      	ldr	r3, [r7, #12]
 810ac3e:	2b00      	cmp	r3, #0
 810ac40:	d10b      	bne.n	810ac5a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 810ac42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ac46:	f383 8811 	msr	BASEPRI, r3
 810ac4a:	f3bf 8f6f 	isb	sy
 810ac4e:	f3bf 8f4f 	dsb	sy
 810ac52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810ac54:	bf00      	nop
 810ac56:	bf00      	nop
 810ac58:	e7fd      	b.n	810ac56 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810ac5a:	f7fd fbbd 	bl	81083d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 810ac5e:	68fb      	ldr	r3, [r7, #12]
 810ac60:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 810ac62:	f3ef 8211 	mrs	r2, BASEPRI
 810ac66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ac6a:	f383 8811 	msr	BASEPRI, r3
 810ac6e:	f3bf 8f6f 	isb	sy
 810ac72:	f3bf 8f4f 	dsb	sy
 810ac76:	623a      	str	r2, [r7, #32]
 810ac78:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 810ac7a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810ac7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 810ac7e:	683b      	ldr	r3, [r7, #0]
 810ac80:	2b00      	cmp	r3, #0
 810ac82:	d004      	beq.n	810ac8e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 810ac84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac86:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 810ac8a:	683b      	ldr	r3, [r7, #0]
 810ac8c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 810ac8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac90:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 810ac94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 810ac98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac9a:	2202      	movs	r2, #2
 810ac9c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 810aca0:	79fb      	ldrb	r3, [r7, #7]
 810aca2:	2b04      	cmp	r3, #4
 810aca4:	d82e      	bhi.n	810ad04 <xTaskGenericNotifyFromISR+0xdc>
 810aca6:	a201      	add	r2, pc, #4	@ (adr r2, 810acac <xTaskGenericNotifyFromISR+0x84>)
 810aca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810acac:	0810ad29 	.word	0x0810ad29
 810acb0:	0810acc1 	.word	0x0810acc1
 810acb4:	0810acd3 	.word	0x0810acd3
 810acb8:	0810ace3 	.word	0x0810ace3
 810acbc:	0810aced 	.word	0x0810aced
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 810acc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810acc2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 810acc6:	68bb      	ldr	r3, [r7, #8]
 810acc8:	431a      	orrs	r2, r3
 810acca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810accc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 810acd0:	e02d      	b.n	810ad2e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 810acd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810acd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810acd8:	1c5a      	adds	r2, r3, #1
 810acda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810acdc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 810ace0:	e025      	b.n	810ad2e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 810ace2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ace4:	68ba      	ldr	r2, [r7, #8]
 810ace6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 810acea:	e020      	b.n	810ad2e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 810acec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 810acf0:	2b02      	cmp	r3, #2
 810acf2:	d004      	beq.n	810acfe <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 810acf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810acf6:	68ba      	ldr	r2, [r7, #8]
 810acf8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 810acfc:	e017      	b.n	810ad2e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 810acfe:	2300      	movs	r3, #0
 810ad00:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 810ad02:	e014      	b.n	810ad2e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 810ad04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ad0e:	d00d      	beq.n	810ad2c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 810ad10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ad14:	f383 8811 	msr	BASEPRI, r3
 810ad18:	f3bf 8f6f 	isb	sy
 810ad1c:	f3bf 8f4f 	dsb	sy
 810ad20:	61bb      	str	r3, [r7, #24]
}
 810ad22:	bf00      	nop
 810ad24:	bf00      	nop
 810ad26:	e7fd      	b.n	810ad24 <xTaskGenericNotifyFromISR+0xfc>
					break;
 810ad28:	bf00      	nop
 810ad2a:	e000      	b.n	810ad2e <xTaskGenericNotifyFromISR+0x106>
					break;
 810ad2c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 810ad2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 810ad32:	2b01      	cmp	r3, #1
 810ad34:	d147      	bne.n	810adc6 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 810ad36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ad3a:	2b00      	cmp	r3, #0
 810ad3c:	d00b      	beq.n	810ad56 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 810ad3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ad42:	f383 8811 	msr	BASEPRI, r3
 810ad46:	f3bf 8f6f 	isb	sy
 810ad4a:	f3bf 8f4f 	dsb	sy
 810ad4e:	617b      	str	r3, [r7, #20]
}
 810ad50:	bf00      	nop
 810ad52:	bf00      	nop
 810ad54:	e7fd      	b.n	810ad52 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810ad56:	4b21      	ldr	r3, [pc, #132]	@ (810addc <xTaskGenericNotifyFromISR+0x1b4>)
 810ad58:	681b      	ldr	r3, [r3, #0]
 810ad5a:	2b00      	cmp	r3, #0
 810ad5c:	d11d      	bne.n	810ad9a <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810ad5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad60:	3304      	adds	r3, #4
 810ad62:	4618      	mov	r0, r3
 810ad64:	f7fd f8fa 	bl	8107f5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810ad68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ad6c:	4b1c      	ldr	r3, [pc, #112]	@ (810ade0 <xTaskGenericNotifyFromISR+0x1b8>)
 810ad6e:	681b      	ldr	r3, [r3, #0]
 810ad70:	429a      	cmp	r2, r3
 810ad72:	d903      	bls.n	810ad7c <xTaskGenericNotifyFromISR+0x154>
 810ad74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ad78:	4a19      	ldr	r2, [pc, #100]	@ (810ade0 <xTaskGenericNotifyFromISR+0x1b8>)
 810ad7a:	6013      	str	r3, [r2, #0]
 810ad7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ad80:	4613      	mov	r3, r2
 810ad82:	009b      	lsls	r3, r3, #2
 810ad84:	4413      	add	r3, r2
 810ad86:	009b      	lsls	r3, r3, #2
 810ad88:	4a16      	ldr	r2, [pc, #88]	@ (810ade4 <xTaskGenericNotifyFromISR+0x1bc>)
 810ad8a:	441a      	add	r2, r3
 810ad8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad8e:	3304      	adds	r3, #4
 810ad90:	4619      	mov	r1, r3
 810ad92:	4610      	mov	r0, r2
 810ad94:	f7fd f885 	bl	8107ea2 <vListInsertEnd>
 810ad98:	e005      	b.n	810ada6 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 810ad9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad9c:	3318      	adds	r3, #24
 810ad9e:	4619      	mov	r1, r3
 810ada0:	4811      	ldr	r0, [pc, #68]	@ (810ade8 <xTaskGenericNotifyFromISR+0x1c0>)
 810ada2:	f7fd f87e 	bl	8107ea2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 810ada6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ada8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810adaa:	4b10      	ldr	r3, [pc, #64]	@ (810adec <xTaskGenericNotifyFromISR+0x1c4>)
 810adac:	681b      	ldr	r3, [r3, #0]
 810adae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810adb0:	429a      	cmp	r2, r3
 810adb2:	d908      	bls.n	810adc6 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 810adb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810adb6:	2b00      	cmp	r3, #0
 810adb8:	d002      	beq.n	810adc0 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 810adba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810adbc:	2201      	movs	r2, #1
 810adbe:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 810adc0:	4b0b      	ldr	r3, [pc, #44]	@ (810adf0 <xTaskGenericNotifyFromISR+0x1c8>)
 810adc2:	2201      	movs	r2, #1
 810adc4:	601a      	str	r2, [r3, #0]
 810adc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810adc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 810adca:	693b      	ldr	r3, [r7, #16]
 810adcc:	f383 8811 	msr	BASEPRI, r3
}
 810add0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 810add2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 810add4:	4618      	mov	r0, r3
 810add6:	3738      	adds	r7, #56	@ 0x38
 810add8:	46bd      	mov	sp, r7
 810adda:	bd80      	pop	{r7, pc}
 810addc:	1000af58 	.word	0x1000af58
 810ade0:	1000af38 	.word	0x1000af38
 810ade4:	1000aa60 	.word	0x1000aa60
 810ade8:	1000aef0 	.word	0x1000aef0
 810adec:	1000aa5c 	.word	0x1000aa5c
 810adf0:	1000af44 	.word	0x1000af44

0810adf4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 810adf4:	b580      	push	{r7, lr}
 810adf6:	b084      	sub	sp, #16
 810adf8:	af00      	add	r7, sp, #0
 810adfa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 810adfc:	687b      	ldr	r3, [r7, #4]
 810adfe:	2b00      	cmp	r3, #0
 810ae00:	d102      	bne.n	810ae08 <xTaskNotifyStateClear+0x14>
 810ae02:	4b0e      	ldr	r3, [pc, #56]	@ (810ae3c <xTaskNotifyStateClear+0x48>)
 810ae04:	681b      	ldr	r3, [r3, #0]
 810ae06:	e000      	b.n	810ae0a <xTaskNotifyStateClear+0x16>
 810ae08:	687b      	ldr	r3, [r7, #4]
 810ae0a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 810ae0c:	f7fd fa04 	bl	8108218 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 810ae10:	68bb      	ldr	r3, [r7, #8]
 810ae12:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 810ae16:	b2db      	uxtb	r3, r3
 810ae18:	2b02      	cmp	r3, #2
 810ae1a:	d106      	bne.n	810ae2a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810ae1c:	68bb      	ldr	r3, [r7, #8]
 810ae1e:	2200      	movs	r2, #0
 810ae20:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 810ae24:	2301      	movs	r3, #1
 810ae26:	60fb      	str	r3, [r7, #12]
 810ae28:	e001      	b.n	810ae2e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 810ae2a:	2300      	movs	r3, #0
 810ae2c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 810ae2e:	f7fd fa25 	bl	810827c <vPortExitCritical>

		return xReturn;
 810ae32:	68fb      	ldr	r3, [r7, #12]
	}
 810ae34:	4618      	mov	r0, r3
 810ae36:	3710      	adds	r7, #16
 810ae38:	46bd      	mov	sp, r7
 810ae3a:	bd80      	pop	{r7, pc}
 810ae3c:	1000aa5c 	.word	0x1000aa5c

0810ae40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810ae40:	b580      	push	{r7, lr}
 810ae42:	b084      	sub	sp, #16
 810ae44:	af00      	add	r7, sp, #0
 810ae46:	6078      	str	r0, [r7, #4]
 810ae48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810ae4a:	4b21      	ldr	r3, [pc, #132]	@ (810aed0 <prvAddCurrentTaskToDelayedList+0x90>)
 810ae4c:	681b      	ldr	r3, [r3, #0]
 810ae4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810ae50:	4b20      	ldr	r3, [pc, #128]	@ (810aed4 <prvAddCurrentTaskToDelayedList+0x94>)
 810ae52:	681b      	ldr	r3, [r3, #0]
 810ae54:	3304      	adds	r3, #4
 810ae56:	4618      	mov	r0, r3
 810ae58:	f7fd f880 	bl	8107f5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810ae5c:	687b      	ldr	r3, [r7, #4]
 810ae5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ae62:	d10a      	bne.n	810ae7a <prvAddCurrentTaskToDelayedList+0x3a>
 810ae64:	683b      	ldr	r3, [r7, #0]
 810ae66:	2b00      	cmp	r3, #0
 810ae68:	d007      	beq.n	810ae7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810ae6a:	4b1a      	ldr	r3, [pc, #104]	@ (810aed4 <prvAddCurrentTaskToDelayedList+0x94>)
 810ae6c:	681b      	ldr	r3, [r3, #0]
 810ae6e:	3304      	adds	r3, #4
 810ae70:	4619      	mov	r1, r3
 810ae72:	4819      	ldr	r0, [pc, #100]	@ (810aed8 <prvAddCurrentTaskToDelayedList+0x98>)
 810ae74:	f7fd f815 	bl	8107ea2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810ae78:	e026      	b.n	810aec8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810ae7a:	68fa      	ldr	r2, [r7, #12]
 810ae7c:	687b      	ldr	r3, [r7, #4]
 810ae7e:	4413      	add	r3, r2
 810ae80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810ae82:	4b14      	ldr	r3, [pc, #80]	@ (810aed4 <prvAddCurrentTaskToDelayedList+0x94>)
 810ae84:	681b      	ldr	r3, [r3, #0]
 810ae86:	68ba      	ldr	r2, [r7, #8]
 810ae88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810ae8a:	68ba      	ldr	r2, [r7, #8]
 810ae8c:	68fb      	ldr	r3, [r7, #12]
 810ae8e:	429a      	cmp	r2, r3
 810ae90:	d209      	bcs.n	810aea6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810ae92:	4b12      	ldr	r3, [pc, #72]	@ (810aedc <prvAddCurrentTaskToDelayedList+0x9c>)
 810ae94:	681a      	ldr	r2, [r3, #0]
 810ae96:	4b0f      	ldr	r3, [pc, #60]	@ (810aed4 <prvAddCurrentTaskToDelayedList+0x94>)
 810ae98:	681b      	ldr	r3, [r3, #0]
 810ae9a:	3304      	adds	r3, #4
 810ae9c:	4619      	mov	r1, r3
 810ae9e:	4610      	mov	r0, r2
 810aea0:	f7fd f823 	bl	8107eea <vListInsert>
}
 810aea4:	e010      	b.n	810aec8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810aea6:	4b0e      	ldr	r3, [pc, #56]	@ (810aee0 <prvAddCurrentTaskToDelayedList+0xa0>)
 810aea8:	681a      	ldr	r2, [r3, #0]
 810aeaa:	4b0a      	ldr	r3, [pc, #40]	@ (810aed4 <prvAddCurrentTaskToDelayedList+0x94>)
 810aeac:	681b      	ldr	r3, [r3, #0]
 810aeae:	3304      	adds	r3, #4
 810aeb0:	4619      	mov	r1, r3
 810aeb2:	4610      	mov	r0, r2
 810aeb4:	f7fd f819 	bl	8107eea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810aeb8:	4b0a      	ldr	r3, [pc, #40]	@ (810aee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 810aeba:	681b      	ldr	r3, [r3, #0]
 810aebc:	68ba      	ldr	r2, [r7, #8]
 810aebe:	429a      	cmp	r2, r3
 810aec0:	d202      	bcs.n	810aec8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810aec2:	4a08      	ldr	r2, [pc, #32]	@ (810aee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 810aec4:	68bb      	ldr	r3, [r7, #8]
 810aec6:	6013      	str	r3, [r2, #0]
}
 810aec8:	bf00      	nop
 810aeca:	3710      	adds	r7, #16
 810aecc:	46bd      	mov	sp, r7
 810aece:	bd80      	pop	{r7, pc}
 810aed0:	1000af34 	.word	0x1000af34
 810aed4:	1000aa5c 	.word	0x1000aa5c
 810aed8:	1000af1c 	.word	0x1000af1c
 810aedc:	1000aeec 	.word	0x1000aeec
 810aee0:	1000aee8 	.word	0x1000aee8
 810aee4:	1000af50 	.word	0x1000af50

0810aee8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810aee8:	b580      	push	{r7, lr}
 810aeea:	b08a      	sub	sp, #40	@ 0x28
 810aeec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810aeee:	2300      	movs	r3, #0
 810aef0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810aef2:	f000 fb13 	bl	810b51c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810aef6:	4b1d      	ldr	r3, [pc, #116]	@ (810af6c <xTimerCreateTimerTask+0x84>)
 810aef8:	681b      	ldr	r3, [r3, #0]
 810aefa:	2b00      	cmp	r3, #0
 810aefc:	d021      	beq.n	810af42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810aefe:	2300      	movs	r3, #0
 810af00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810af02:	2300      	movs	r3, #0
 810af04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810af06:	1d3a      	adds	r2, r7, #4
 810af08:	f107 0108 	add.w	r1, r7, #8
 810af0c:	f107 030c 	add.w	r3, r7, #12
 810af10:	4618      	mov	r0, r3
 810af12:	f7fc fd85 	bl	8107a20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810af16:	6879      	ldr	r1, [r7, #4]
 810af18:	68bb      	ldr	r3, [r7, #8]
 810af1a:	68fa      	ldr	r2, [r7, #12]
 810af1c:	9202      	str	r2, [sp, #8]
 810af1e:	9301      	str	r3, [sp, #4]
 810af20:	2302      	movs	r3, #2
 810af22:	9300      	str	r3, [sp, #0]
 810af24:	2300      	movs	r3, #0
 810af26:	460a      	mov	r2, r1
 810af28:	4911      	ldr	r1, [pc, #68]	@ (810af70 <xTimerCreateTimerTask+0x88>)
 810af2a:	4812      	ldr	r0, [pc, #72]	@ (810af74 <xTimerCreateTimerTask+0x8c>)
 810af2c:	f7fe fe14 	bl	8109b58 <xTaskCreateStatic>
 810af30:	4603      	mov	r3, r0
 810af32:	4a11      	ldr	r2, [pc, #68]	@ (810af78 <xTimerCreateTimerTask+0x90>)
 810af34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810af36:	4b10      	ldr	r3, [pc, #64]	@ (810af78 <xTimerCreateTimerTask+0x90>)
 810af38:	681b      	ldr	r3, [r3, #0]
 810af3a:	2b00      	cmp	r3, #0
 810af3c:	d001      	beq.n	810af42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810af3e:	2301      	movs	r3, #1
 810af40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810af42:	697b      	ldr	r3, [r7, #20]
 810af44:	2b00      	cmp	r3, #0
 810af46:	d10b      	bne.n	810af60 <xTimerCreateTimerTask+0x78>
	__asm volatile
 810af48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810af4c:	f383 8811 	msr	BASEPRI, r3
 810af50:	f3bf 8f6f 	isb	sy
 810af54:	f3bf 8f4f 	dsb	sy
 810af58:	613b      	str	r3, [r7, #16]
}
 810af5a:	bf00      	nop
 810af5c:	bf00      	nop
 810af5e:	e7fd      	b.n	810af5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 810af60:	697b      	ldr	r3, [r7, #20]
}
 810af62:	4618      	mov	r0, r3
 810af64:	3718      	adds	r7, #24
 810af66:	46bd      	mov	sp, r7
 810af68:	bd80      	pop	{r7, pc}
 810af6a:	bf00      	nop
 810af6c:	1000af8c 	.word	0x1000af8c
 810af70:	08116c58 	.word	0x08116c58
 810af74:	0810b0b5 	.word	0x0810b0b5
 810af78:	1000af90 	.word	0x1000af90

0810af7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810af7c:	b580      	push	{r7, lr}
 810af7e:	b08a      	sub	sp, #40	@ 0x28
 810af80:	af00      	add	r7, sp, #0
 810af82:	60f8      	str	r0, [r7, #12]
 810af84:	60b9      	str	r1, [r7, #8]
 810af86:	607a      	str	r2, [r7, #4]
 810af88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810af8a:	2300      	movs	r3, #0
 810af8c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810af8e:	68fb      	ldr	r3, [r7, #12]
 810af90:	2b00      	cmp	r3, #0
 810af92:	d10b      	bne.n	810afac <xTimerGenericCommand+0x30>
	__asm volatile
 810af94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810af98:	f383 8811 	msr	BASEPRI, r3
 810af9c:	f3bf 8f6f 	isb	sy
 810afa0:	f3bf 8f4f 	dsb	sy
 810afa4:	623b      	str	r3, [r7, #32]
}
 810afa6:	bf00      	nop
 810afa8:	bf00      	nop
 810afaa:	e7fd      	b.n	810afa8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810afac:	4b19      	ldr	r3, [pc, #100]	@ (810b014 <xTimerGenericCommand+0x98>)
 810afae:	681b      	ldr	r3, [r3, #0]
 810afb0:	2b00      	cmp	r3, #0
 810afb2:	d02a      	beq.n	810b00a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810afb4:	68bb      	ldr	r3, [r7, #8]
 810afb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810afb8:	687b      	ldr	r3, [r7, #4]
 810afba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810afbc:	68fb      	ldr	r3, [r7, #12]
 810afbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810afc0:	68bb      	ldr	r3, [r7, #8]
 810afc2:	2b05      	cmp	r3, #5
 810afc4:	dc18      	bgt.n	810aff8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810afc6:	f7ff fc41 	bl	810a84c <xTaskGetSchedulerState>
 810afca:	4603      	mov	r3, r0
 810afcc:	2b02      	cmp	r3, #2
 810afce:	d109      	bne.n	810afe4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810afd0:	4b10      	ldr	r3, [pc, #64]	@ (810b014 <xTimerGenericCommand+0x98>)
 810afd2:	6818      	ldr	r0, [r3, #0]
 810afd4:	f107 0110 	add.w	r1, r7, #16
 810afd8:	2300      	movs	r3, #0
 810afda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810afdc:	f7fd fcaa 	bl	8108934 <xQueueGenericSend>
 810afe0:	6278      	str	r0, [r7, #36]	@ 0x24
 810afe2:	e012      	b.n	810b00a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810afe4:	4b0b      	ldr	r3, [pc, #44]	@ (810b014 <xTimerGenericCommand+0x98>)
 810afe6:	6818      	ldr	r0, [r3, #0]
 810afe8:	f107 0110 	add.w	r1, r7, #16
 810afec:	2300      	movs	r3, #0
 810afee:	2200      	movs	r2, #0
 810aff0:	f7fd fca0 	bl	8108934 <xQueueGenericSend>
 810aff4:	6278      	str	r0, [r7, #36]	@ 0x24
 810aff6:	e008      	b.n	810b00a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810aff8:	4b06      	ldr	r3, [pc, #24]	@ (810b014 <xTimerGenericCommand+0x98>)
 810affa:	6818      	ldr	r0, [r3, #0]
 810affc:	f107 0110 	add.w	r1, r7, #16
 810b000:	2300      	movs	r3, #0
 810b002:	683a      	ldr	r2, [r7, #0]
 810b004:	f7fd fd98 	bl	8108b38 <xQueueGenericSendFromISR>
 810b008:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810b00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810b00c:	4618      	mov	r0, r3
 810b00e:	3728      	adds	r7, #40	@ 0x28
 810b010:	46bd      	mov	sp, r7
 810b012:	bd80      	pop	{r7, pc}
 810b014:	1000af8c 	.word	0x1000af8c

0810b018 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810b018:	b580      	push	{r7, lr}
 810b01a:	b088      	sub	sp, #32
 810b01c:	af02      	add	r7, sp, #8
 810b01e:	6078      	str	r0, [r7, #4]
 810b020:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b022:	4b23      	ldr	r3, [pc, #140]	@ (810b0b0 <prvProcessExpiredTimer+0x98>)
 810b024:	681b      	ldr	r3, [r3, #0]
 810b026:	68db      	ldr	r3, [r3, #12]
 810b028:	68db      	ldr	r3, [r3, #12]
 810b02a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810b02c:	697b      	ldr	r3, [r7, #20]
 810b02e:	3304      	adds	r3, #4
 810b030:	4618      	mov	r0, r3
 810b032:	f7fc ff93 	bl	8107f5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810b036:	697b      	ldr	r3, [r7, #20]
 810b038:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b03c:	f003 0304 	and.w	r3, r3, #4
 810b040:	2b00      	cmp	r3, #0
 810b042:	d023      	beq.n	810b08c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810b044:	697b      	ldr	r3, [r7, #20]
 810b046:	699a      	ldr	r2, [r3, #24]
 810b048:	687b      	ldr	r3, [r7, #4]
 810b04a:	18d1      	adds	r1, r2, r3
 810b04c:	687b      	ldr	r3, [r7, #4]
 810b04e:	683a      	ldr	r2, [r7, #0]
 810b050:	6978      	ldr	r0, [r7, #20]
 810b052:	f000 f8d5 	bl	810b200 <prvInsertTimerInActiveList>
 810b056:	4603      	mov	r3, r0
 810b058:	2b00      	cmp	r3, #0
 810b05a:	d020      	beq.n	810b09e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810b05c:	2300      	movs	r3, #0
 810b05e:	9300      	str	r3, [sp, #0]
 810b060:	2300      	movs	r3, #0
 810b062:	687a      	ldr	r2, [r7, #4]
 810b064:	2100      	movs	r1, #0
 810b066:	6978      	ldr	r0, [r7, #20]
 810b068:	f7ff ff88 	bl	810af7c <xTimerGenericCommand>
 810b06c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810b06e:	693b      	ldr	r3, [r7, #16]
 810b070:	2b00      	cmp	r3, #0
 810b072:	d114      	bne.n	810b09e <prvProcessExpiredTimer+0x86>
	__asm volatile
 810b074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b078:	f383 8811 	msr	BASEPRI, r3
 810b07c:	f3bf 8f6f 	isb	sy
 810b080:	f3bf 8f4f 	dsb	sy
 810b084:	60fb      	str	r3, [r7, #12]
}
 810b086:	bf00      	nop
 810b088:	bf00      	nop
 810b08a:	e7fd      	b.n	810b088 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810b08c:	697b      	ldr	r3, [r7, #20]
 810b08e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b092:	f023 0301 	bic.w	r3, r3, #1
 810b096:	b2da      	uxtb	r2, r3
 810b098:	697b      	ldr	r3, [r7, #20]
 810b09a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810b09e:	697b      	ldr	r3, [r7, #20]
 810b0a0:	6a1b      	ldr	r3, [r3, #32]
 810b0a2:	6978      	ldr	r0, [r7, #20]
 810b0a4:	4798      	blx	r3
}
 810b0a6:	bf00      	nop
 810b0a8:	3718      	adds	r7, #24
 810b0aa:	46bd      	mov	sp, r7
 810b0ac:	bd80      	pop	{r7, pc}
 810b0ae:	bf00      	nop
 810b0b0:	1000af84 	.word	0x1000af84

0810b0b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810b0b4:	b580      	push	{r7, lr}
 810b0b6:	b084      	sub	sp, #16
 810b0b8:	af00      	add	r7, sp, #0
 810b0ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810b0bc:	f107 0308 	add.w	r3, r7, #8
 810b0c0:	4618      	mov	r0, r3
 810b0c2:	f000 f859 	bl	810b178 <prvGetNextExpireTime>
 810b0c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810b0c8:	68bb      	ldr	r3, [r7, #8]
 810b0ca:	4619      	mov	r1, r3
 810b0cc:	68f8      	ldr	r0, [r7, #12]
 810b0ce:	f000 f805 	bl	810b0dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810b0d2:	f000 f8d7 	bl	810b284 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810b0d6:	bf00      	nop
 810b0d8:	e7f0      	b.n	810b0bc <prvTimerTask+0x8>
	...

0810b0dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810b0dc:	b580      	push	{r7, lr}
 810b0de:	b084      	sub	sp, #16
 810b0e0:	af00      	add	r7, sp, #0
 810b0e2:	6078      	str	r0, [r7, #4]
 810b0e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810b0e6:	f7fe ff9b 	bl	810a020 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810b0ea:	f107 0308 	add.w	r3, r7, #8
 810b0ee:	4618      	mov	r0, r3
 810b0f0:	f000 f866 	bl	810b1c0 <prvSampleTimeNow>
 810b0f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810b0f6:	68bb      	ldr	r3, [r7, #8]
 810b0f8:	2b00      	cmp	r3, #0
 810b0fa:	d130      	bne.n	810b15e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810b0fc:	683b      	ldr	r3, [r7, #0]
 810b0fe:	2b00      	cmp	r3, #0
 810b100:	d10a      	bne.n	810b118 <prvProcessTimerOrBlockTask+0x3c>
 810b102:	687a      	ldr	r2, [r7, #4]
 810b104:	68fb      	ldr	r3, [r7, #12]
 810b106:	429a      	cmp	r2, r3
 810b108:	d806      	bhi.n	810b118 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810b10a:	f7fe ff97 	bl	810a03c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810b10e:	68f9      	ldr	r1, [r7, #12]
 810b110:	6878      	ldr	r0, [r7, #4]
 810b112:	f7ff ff81 	bl	810b018 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810b116:	e024      	b.n	810b162 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810b118:	683b      	ldr	r3, [r7, #0]
 810b11a:	2b00      	cmp	r3, #0
 810b11c:	d008      	beq.n	810b130 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810b11e:	4b13      	ldr	r3, [pc, #76]	@ (810b16c <prvProcessTimerOrBlockTask+0x90>)
 810b120:	681b      	ldr	r3, [r3, #0]
 810b122:	681b      	ldr	r3, [r3, #0]
 810b124:	2b00      	cmp	r3, #0
 810b126:	d101      	bne.n	810b12c <prvProcessTimerOrBlockTask+0x50>
 810b128:	2301      	movs	r3, #1
 810b12a:	e000      	b.n	810b12e <prvProcessTimerOrBlockTask+0x52>
 810b12c:	2300      	movs	r3, #0
 810b12e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810b130:	4b0f      	ldr	r3, [pc, #60]	@ (810b170 <prvProcessTimerOrBlockTask+0x94>)
 810b132:	6818      	ldr	r0, [r3, #0]
 810b134:	687a      	ldr	r2, [r7, #4]
 810b136:	68fb      	ldr	r3, [r7, #12]
 810b138:	1ad3      	subs	r3, r2, r3
 810b13a:	683a      	ldr	r2, [r7, #0]
 810b13c:	4619      	mov	r1, r3
 810b13e:	f7fe fa3d 	bl	81095bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810b142:	f7fe ff7b 	bl	810a03c <xTaskResumeAll>
 810b146:	4603      	mov	r3, r0
 810b148:	2b00      	cmp	r3, #0
 810b14a:	d10a      	bne.n	810b162 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810b14c:	4b09      	ldr	r3, [pc, #36]	@ (810b174 <prvProcessTimerOrBlockTask+0x98>)
 810b14e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810b152:	601a      	str	r2, [r3, #0]
 810b154:	f3bf 8f4f 	dsb	sy
 810b158:	f3bf 8f6f 	isb	sy
}
 810b15c:	e001      	b.n	810b162 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810b15e:	f7fe ff6d 	bl	810a03c <xTaskResumeAll>
}
 810b162:	bf00      	nop
 810b164:	3710      	adds	r7, #16
 810b166:	46bd      	mov	sp, r7
 810b168:	bd80      	pop	{r7, pc}
 810b16a:	bf00      	nop
 810b16c:	1000af88 	.word	0x1000af88
 810b170:	1000af8c 	.word	0x1000af8c
 810b174:	e000ed04 	.word	0xe000ed04

0810b178 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810b178:	b480      	push	{r7}
 810b17a:	b085      	sub	sp, #20
 810b17c:	af00      	add	r7, sp, #0
 810b17e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810b180:	4b0e      	ldr	r3, [pc, #56]	@ (810b1bc <prvGetNextExpireTime+0x44>)
 810b182:	681b      	ldr	r3, [r3, #0]
 810b184:	681b      	ldr	r3, [r3, #0]
 810b186:	2b00      	cmp	r3, #0
 810b188:	d101      	bne.n	810b18e <prvGetNextExpireTime+0x16>
 810b18a:	2201      	movs	r2, #1
 810b18c:	e000      	b.n	810b190 <prvGetNextExpireTime+0x18>
 810b18e:	2200      	movs	r2, #0
 810b190:	687b      	ldr	r3, [r7, #4]
 810b192:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810b194:	687b      	ldr	r3, [r7, #4]
 810b196:	681b      	ldr	r3, [r3, #0]
 810b198:	2b00      	cmp	r3, #0
 810b19a:	d105      	bne.n	810b1a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810b19c:	4b07      	ldr	r3, [pc, #28]	@ (810b1bc <prvGetNextExpireTime+0x44>)
 810b19e:	681b      	ldr	r3, [r3, #0]
 810b1a0:	68db      	ldr	r3, [r3, #12]
 810b1a2:	681b      	ldr	r3, [r3, #0]
 810b1a4:	60fb      	str	r3, [r7, #12]
 810b1a6:	e001      	b.n	810b1ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810b1a8:	2300      	movs	r3, #0
 810b1aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810b1ac:	68fb      	ldr	r3, [r7, #12]
}
 810b1ae:	4618      	mov	r0, r3
 810b1b0:	3714      	adds	r7, #20
 810b1b2:	46bd      	mov	sp, r7
 810b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b1b8:	4770      	bx	lr
 810b1ba:	bf00      	nop
 810b1bc:	1000af84 	.word	0x1000af84

0810b1c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810b1c0:	b580      	push	{r7, lr}
 810b1c2:	b084      	sub	sp, #16
 810b1c4:	af00      	add	r7, sp, #0
 810b1c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810b1c8:	f7fe ffd6 	bl	810a178 <xTaskGetTickCount>
 810b1cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810b1ce:	4b0b      	ldr	r3, [pc, #44]	@ (810b1fc <prvSampleTimeNow+0x3c>)
 810b1d0:	681b      	ldr	r3, [r3, #0]
 810b1d2:	68fa      	ldr	r2, [r7, #12]
 810b1d4:	429a      	cmp	r2, r3
 810b1d6:	d205      	bcs.n	810b1e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810b1d8:	f000 f93a 	bl	810b450 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810b1dc:	687b      	ldr	r3, [r7, #4]
 810b1de:	2201      	movs	r2, #1
 810b1e0:	601a      	str	r2, [r3, #0]
 810b1e2:	e002      	b.n	810b1ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810b1e4:	687b      	ldr	r3, [r7, #4]
 810b1e6:	2200      	movs	r2, #0
 810b1e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810b1ea:	4a04      	ldr	r2, [pc, #16]	@ (810b1fc <prvSampleTimeNow+0x3c>)
 810b1ec:	68fb      	ldr	r3, [r7, #12]
 810b1ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810b1f0:	68fb      	ldr	r3, [r7, #12]
}
 810b1f2:	4618      	mov	r0, r3
 810b1f4:	3710      	adds	r7, #16
 810b1f6:	46bd      	mov	sp, r7
 810b1f8:	bd80      	pop	{r7, pc}
 810b1fa:	bf00      	nop
 810b1fc:	1000af94 	.word	0x1000af94

0810b200 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810b200:	b580      	push	{r7, lr}
 810b202:	b086      	sub	sp, #24
 810b204:	af00      	add	r7, sp, #0
 810b206:	60f8      	str	r0, [r7, #12]
 810b208:	60b9      	str	r1, [r7, #8]
 810b20a:	607a      	str	r2, [r7, #4]
 810b20c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810b20e:	2300      	movs	r3, #0
 810b210:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810b212:	68fb      	ldr	r3, [r7, #12]
 810b214:	68ba      	ldr	r2, [r7, #8]
 810b216:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810b218:	68fb      	ldr	r3, [r7, #12]
 810b21a:	68fa      	ldr	r2, [r7, #12]
 810b21c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810b21e:	68ba      	ldr	r2, [r7, #8]
 810b220:	687b      	ldr	r3, [r7, #4]
 810b222:	429a      	cmp	r2, r3
 810b224:	d812      	bhi.n	810b24c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810b226:	687a      	ldr	r2, [r7, #4]
 810b228:	683b      	ldr	r3, [r7, #0]
 810b22a:	1ad2      	subs	r2, r2, r3
 810b22c:	68fb      	ldr	r3, [r7, #12]
 810b22e:	699b      	ldr	r3, [r3, #24]
 810b230:	429a      	cmp	r2, r3
 810b232:	d302      	bcc.n	810b23a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810b234:	2301      	movs	r3, #1
 810b236:	617b      	str	r3, [r7, #20]
 810b238:	e01b      	b.n	810b272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810b23a:	4b10      	ldr	r3, [pc, #64]	@ (810b27c <prvInsertTimerInActiveList+0x7c>)
 810b23c:	681a      	ldr	r2, [r3, #0]
 810b23e:	68fb      	ldr	r3, [r7, #12]
 810b240:	3304      	adds	r3, #4
 810b242:	4619      	mov	r1, r3
 810b244:	4610      	mov	r0, r2
 810b246:	f7fc fe50 	bl	8107eea <vListInsert>
 810b24a:	e012      	b.n	810b272 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810b24c:	687a      	ldr	r2, [r7, #4]
 810b24e:	683b      	ldr	r3, [r7, #0]
 810b250:	429a      	cmp	r2, r3
 810b252:	d206      	bcs.n	810b262 <prvInsertTimerInActiveList+0x62>
 810b254:	68ba      	ldr	r2, [r7, #8]
 810b256:	683b      	ldr	r3, [r7, #0]
 810b258:	429a      	cmp	r2, r3
 810b25a:	d302      	bcc.n	810b262 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810b25c:	2301      	movs	r3, #1
 810b25e:	617b      	str	r3, [r7, #20]
 810b260:	e007      	b.n	810b272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810b262:	4b07      	ldr	r3, [pc, #28]	@ (810b280 <prvInsertTimerInActiveList+0x80>)
 810b264:	681a      	ldr	r2, [r3, #0]
 810b266:	68fb      	ldr	r3, [r7, #12]
 810b268:	3304      	adds	r3, #4
 810b26a:	4619      	mov	r1, r3
 810b26c:	4610      	mov	r0, r2
 810b26e:	f7fc fe3c 	bl	8107eea <vListInsert>
		}
	}

	return xProcessTimerNow;
 810b272:	697b      	ldr	r3, [r7, #20]
}
 810b274:	4618      	mov	r0, r3
 810b276:	3718      	adds	r7, #24
 810b278:	46bd      	mov	sp, r7
 810b27a:	bd80      	pop	{r7, pc}
 810b27c:	1000af88 	.word	0x1000af88
 810b280:	1000af84 	.word	0x1000af84

0810b284 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810b284:	b580      	push	{r7, lr}
 810b286:	b08e      	sub	sp, #56	@ 0x38
 810b288:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810b28a:	e0ce      	b.n	810b42a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810b28c:	687b      	ldr	r3, [r7, #4]
 810b28e:	2b00      	cmp	r3, #0
 810b290:	da19      	bge.n	810b2c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810b292:	1d3b      	adds	r3, r7, #4
 810b294:	3304      	adds	r3, #4
 810b296:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810b298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810b29a:	2b00      	cmp	r3, #0
 810b29c:	d10b      	bne.n	810b2b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 810b29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b2a2:	f383 8811 	msr	BASEPRI, r3
 810b2a6:	f3bf 8f6f 	isb	sy
 810b2aa:	f3bf 8f4f 	dsb	sy
 810b2ae:	61fb      	str	r3, [r7, #28]
}
 810b2b0:	bf00      	nop
 810b2b2:	bf00      	nop
 810b2b4:	e7fd      	b.n	810b2b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810b2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810b2b8:	681b      	ldr	r3, [r3, #0]
 810b2ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b2bc:	6850      	ldr	r0, [r2, #4]
 810b2be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b2c0:	6892      	ldr	r2, [r2, #8]
 810b2c2:	4611      	mov	r1, r2
 810b2c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810b2c6:	687b      	ldr	r3, [r7, #4]
 810b2c8:	2b00      	cmp	r3, #0
 810b2ca:	f2c0 80ae 	blt.w	810b42a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810b2ce:	68fb      	ldr	r3, [r7, #12]
 810b2d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810b2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b2d4:	695b      	ldr	r3, [r3, #20]
 810b2d6:	2b00      	cmp	r3, #0
 810b2d8:	d004      	beq.n	810b2e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810b2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b2dc:	3304      	adds	r3, #4
 810b2de:	4618      	mov	r0, r3
 810b2e0:	f7fc fe3c 	bl	8107f5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810b2e4:	463b      	mov	r3, r7
 810b2e6:	4618      	mov	r0, r3
 810b2e8:	f7ff ff6a 	bl	810b1c0 <prvSampleTimeNow>
 810b2ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810b2ee:	687b      	ldr	r3, [r7, #4]
 810b2f0:	2b09      	cmp	r3, #9
 810b2f2:	f200 8097 	bhi.w	810b424 <prvProcessReceivedCommands+0x1a0>
 810b2f6:	a201      	add	r2, pc, #4	@ (adr r2, 810b2fc <prvProcessReceivedCommands+0x78>)
 810b2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b2fc:	0810b325 	.word	0x0810b325
 810b300:	0810b325 	.word	0x0810b325
 810b304:	0810b325 	.word	0x0810b325
 810b308:	0810b39b 	.word	0x0810b39b
 810b30c:	0810b3af 	.word	0x0810b3af
 810b310:	0810b3fb 	.word	0x0810b3fb
 810b314:	0810b325 	.word	0x0810b325
 810b318:	0810b325 	.word	0x0810b325
 810b31c:	0810b39b 	.word	0x0810b39b
 810b320:	0810b3af 	.word	0x0810b3af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810b324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b326:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b32a:	f043 0301 	orr.w	r3, r3, #1
 810b32e:	b2da      	uxtb	r2, r3
 810b330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b332:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810b336:	68ba      	ldr	r2, [r7, #8]
 810b338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b33a:	699b      	ldr	r3, [r3, #24]
 810b33c:	18d1      	adds	r1, r2, r3
 810b33e:	68bb      	ldr	r3, [r7, #8]
 810b340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810b342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b344:	f7ff ff5c 	bl	810b200 <prvInsertTimerInActiveList>
 810b348:	4603      	mov	r3, r0
 810b34a:	2b00      	cmp	r3, #0
 810b34c:	d06c      	beq.n	810b428 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810b34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b350:	6a1b      	ldr	r3, [r3, #32]
 810b352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b354:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810b356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b35c:	f003 0304 	and.w	r3, r3, #4
 810b360:	2b00      	cmp	r3, #0
 810b362:	d061      	beq.n	810b428 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810b364:	68ba      	ldr	r2, [r7, #8]
 810b366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b368:	699b      	ldr	r3, [r3, #24]
 810b36a:	441a      	add	r2, r3
 810b36c:	2300      	movs	r3, #0
 810b36e:	9300      	str	r3, [sp, #0]
 810b370:	2300      	movs	r3, #0
 810b372:	2100      	movs	r1, #0
 810b374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b376:	f7ff fe01 	bl	810af7c <xTimerGenericCommand>
 810b37a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810b37c:	6a3b      	ldr	r3, [r7, #32]
 810b37e:	2b00      	cmp	r3, #0
 810b380:	d152      	bne.n	810b428 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 810b382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b386:	f383 8811 	msr	BASEPRI, r3
 810b38a:	f3bf 8f6f 	isb	sy
 810b38e:	f3bf 8f4f 	dsb	sy
 810b392:	61bb      	str	r3, [r7, #24]
}
 810b394:	bf00      	nop
 810b396:	bf00      	nop
 810b398:	e7fd      	b.n	810b396 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810b39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b39c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b3a0:	f023 0301 	bic.w	r3, r3, #1
 810b3a4:	b2da      	uxtb	r2, r3
 810b3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b3a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810b3ac:	e03d      	b.n	810b42a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810b3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b3b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b3b4:	f043 0301 	orr.w	r3, r3, #1
 810b3b8:	b2da      	uxtb	r2, r3
 810b3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b3bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810b3c0:	68ba      	ldr	r2, [r7, #8]
 810b3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b3c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810b3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b3c8:	699b      	ldr	r3, [r3, #24]
 810b3ca:	2b00      	cmp	r3, #0
 810b3cc:	d10b      	bne.n	810b3e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 810b3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b3d2:	f383 8811 	msr	BASEPRI, r3
 810b3d6:	f3bf 8f6f 	isb	sy
 810b3da:	f3bf 8f4f 	dsb	sy
 810b3de:	617b      	str	r3, [r7, #20]
}
 810b3e0:	bf00      	nop
 810b3e2:	bf00      	nop
 810b3e4:	e7fd      	b.n	810b3e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810b3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b3e8:	699a      	ldr	r2, [r3, #24]
 810b3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b3ec:	18d1      	adds	r1, r2, r3
 810b3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b3f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810b3f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b3f4:	f7ff ff04 	bl	810b200 <prvInsertTimerInActiveList>
					break;
 810b3f8:	e017      	b.n	810b42a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810b3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b3fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b400:	f003 0302 	and.w	r3, r3, #2
 810b404:	2b00      	cmp	r3, #0
 810b406:	d103      	bne.n	810b410 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 810b408:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b40a:	f7fc fbf1 	bl	8107bf0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810b40e:	e00c      	b.n	810b42a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810b410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b412:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b416:	f023 0301 	bic.w	r3, r3, #1
 810b41a:	b2da      	uxtb	r2, r3
 810b41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b41e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810b422:	e002      	b.n	810b42a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 810b424:	bf00      	nop
 810b426:	e000      	b.n	810b42a <prvProcessReceivedCommands+0x1a6>
					break;
 810b428:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810b42a:	4b08      	ldr	r3, [pc, #32]	@ (810b44c <prvProcessReceivedCommands+0x1c8>)
 810b42c:	681b      	ldr	r3, [r3, #0]
 810b42e:	1d39      	adds	r1, r7, #4
 810b430:	2200      	movs	r2, #0
 810b432:	4618      	mov	r0, r3
 810b434:	f7fd fcae 	bl	8108d94 <xQueueReceive>
 810b438:	4603      	mov	r3, r0
 810b43a:	2b00      	cmp	r3, #0
 810b43c:	f47f af26 	bne.w	810b28c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 810b440:	bf00      	nop
 810b442:	bf00      	nop
 810b444:	3730      	adds	r7, #48	@ 0x30
 810b446:	46bd      	mov	sp, r7
 810b448:	bd80      	pop	{r7, pc}
 810b44a:	bf00      	nop
 810b44c:	1000af8c 	.word	0x1000af8c

0810b450 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810b450:	b580      	push	{r7, lr}
 810b452:	b088      	sub	sp, #32
 810b454:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810b456:	e049      	b.n	810b4ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810b458:	4b2e      	ldr	r3, [pc, #184]	@ (810b514 <prvSwitchTimerLists+0xc4>)
 810b45a:	681b      	ldr	r3, [r3, #0]
 810b45c:	68db      	ldr	r3, [r3, #12]
 810b45e:	681b      	ldr	r3, [r3, #0]
 810b460:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b462:	4b2c      	ldr	r3, [pc, #176]	@ (810b514 <prvSwitchTimerLists+0xc4>)
 810b464:	681b      	ldr	r3, [r3, #0]
 810b466:	68db      	ldr	r3, [r3, #12]
 810b468:	68db      	ldr	r3, [r3, #12]
 810b46a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810b46c:	68fb      	ldr	r3, [r7, #12]
 810b46e:	3304      	adds	r3, #4
 810b470:	4618      	mov	r0, r3
 810b472:	f7fc fd73 	bl	8107f5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810b476:	68fb      	ldr	r3, [r7, #12]
 810b478:	6a1b      	ldr	r3, [r3, #32]
 810b47a:	68f8      	ldr	r0, [r7, #12]
 810b47c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810b47e:	68fb      	ldr	r3, [r7, #12]
 810b480:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b484:	f003 0304 	and.w	r3, r3, #4
 810b488:	2b00      	cmp	r3, #0
 810b48a:	d02f      	beq.n	810b4ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810b48c:	68fb      	ldr	r3, [r7, #12]
 810b48e:	699b      	ldr	r3, [r3, #24]
 810b490:	693a      	ldr	r2, [r7, #16]
 810b492:	4413      	add	r3, r2
 810b494:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810b496:	68ba      	ldr	r2, [r7, #8]
 810b498:	693b      	ldr	r3, [r7, #16]
 810b49a:	429a      	cmp	r2, r3
 810b49c:	d90e      	bls.n	810b4bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810b49e:	68fb      	ldr	r3, [r7, #12]
 810b4a0:	68ba      	ldr	r2, [r7, #8]
 810b4a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810b4a4:	68fb      	ldr	r3, [r7, #12]
 810b4a6:	68fa      	ldr	r2, [r7, #12]
 810b4a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810b4aa:	4b1a      	ldr	r3, [pc, #104]	@ (810b514 <prvSwitchTimerLists+0xc4>)
 810b4ac:	681a      	ldr	r2, [r3, #0]
 810b4ae:	68fb      	ldr	r3, [r7, #12]
 810b4b0:	3304      	adds	r3, #4
 810b4b2:	4619      	mov	r1, r3
 810b4b4:	4610      	mov	r0, r2
 810b4b6:	f7fc fd18 	bl	8107eea <vListInsert>
 810b4ba:	e017      	b.n	810b4ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810b4bc:	2300      	movs	r3, #0
 810b4be:	9300      	str	r3, [sp, #0]
 810b4c0:	2300      	movs	r3, #0
 810b4c2:	693a      	ldr	r2, [r7, #16]
 810b4c4:	2100      	movs	r1, #0
 810b4c6:	68f8      	ldr	r0, [r7, #12]
 810b4c8:	f7ff fd58 	bl	810af7c <xTimerGenericCommand>
 810b4cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810b4ce:	687b      	ldr	r3, [r7, #4]
 810b4d0:	2b00      	cmp	r3, #0
 810b4d2:	d10b      	bne.n	810b4ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 810b4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b4d8:	f383 8811 	msr	BASEPRI, r3
 810b4dc:	f3bf 8f6f 	isb	sy
 810b4e0:	f3bf 8f4f 	dsb	sy
 810b4e4:	603b      	str	r3, [r7, #0]
}
 810b4e6:	bf00      	nop
 810b4e8:	bf00      	nop
 810b4ea:	e7fd      	b.n	810b4e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810b4ec:	4b09      	ldr	r3, [pc, #36]	@ (810b514 <prvSwitchTimerLists+0xc4>)
 810b4ee:	681b      	ldr	r3, [r3, #0]
 810b4f0:	681b      	ldr	r3, [r3, #0]
 810b4f2:	2b00      	cmp	r3, #0
 810b4f4:	d1b0      	bne.n	810b458 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810b4f6:	4b07      	ldr	r3, [pc, #28]	@ (810b514 <prvSwitchTimerLists+0xc4>)
 810b4f8:	681b      	ldr	r3, [r3, #0]
 810b4fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810b4fc:	4b06      	ldr	r3, [pc, #24]	@ (810b518 <prvSwitchTimerLists+0xc8>)
 810b4fe:	681b      	ldr	r3, [r3, #0]
 810b500:	4a04      	ldr	r2, [pc, #16]	@ (810b514 <prvSwitchTimerLists+0xc4>)
 810b502:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810b504:	4a04      	ldr	r2, [pc, #16]	@ (810b518 <prvSwitchTimerLists+0xc8>)
 810b506:	697b      	ldr	r3, [r7, #20]
 810b508:	6013      	str	r3, [r2, #0]
}
 810b50a:	bf00      	nop
 810b50c:	3718      	adds	r7, #24
 810b50e:	46bd      	mov	sp, r7
 810b510:	bd80      	pop	{r7, pc}
 810b512:	bf00      	nop
 810b514:	1000af84 	.word	0x1000af84
 810b518:	1000af88 	.word	0x1000af88

0810b51c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810b51c:	b580      	push	{r7, lr}
 810b51e:	b082      	sub	sp, #8
 810b520:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810b522:	f7fc fe79 	bl	8108218 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810b526:	4b15      	ldr	r3, [pc, #84]	@ (810b57c <prvCheckForValidListAndQueue+0x60>)
 810b528:	681b      	ldr	r3, [r3, #0]
 810b52a:	2b00      	cmp	r3, #0
 810b52c:	d120      	bne.n	810b570 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810b52e:	4814      	ldr	r0, [pc, #80]	@ (810b580 <prvCheckForValidListAndQueue+0x64>)
 810b530:	f7fc fc8a 	bl	8107e48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810b534:	4813      	ldr	r0, [pc, #76]	@ (810b584 <prvCheckForValidListAndQueue+0x68>)
 810b536:	f7fc fc87 	bl	8107e48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810b53a:	4b13      	ldr	r3, [pc, #76]	@ (810b588 <prvCheckForValidListAndQueue+0x6c>)
 810b53c:	4a10      	ldr	r2, [pc, #64]	@ (810b580 <prvCheckForValidListAndQueue+0x64>)
 810b53e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810b540:	4b12      	ldr	r3, [pc, #72]	@ (810b58c <prvCheckForValidListAndQueue+0x70>)
 810b542:	4a10      	ldr	r2, [pc, #64]	@ (810b584 <prvCheckForValidListAndQueue+0x68>)
 810b544:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810b546:	2300      	movs	r3, #0
 810b548:	9300      	str	r3, [sp, #0]
 810b54a:	4b11      	ldr	r3, [pc, #68]	@ (810b590 <prvCheckForValidListAndQueue+0x74>)
 810b54c:	4a11      	ldr	r2, [pc, #68]	@ (810b594 <prvCheckForValidListAndQueue+0x78>)
 810b54e:	2110      	movs	r1, #16
 810b550:	200a      	movs	r0, #10
 810b552:	f7fc ffed 	bl	8108530 <xQueueGenericCreateStatic>
 810b556:	4603      	mov	r3, r0
 810b558:	4a08      	ldr	r2, [pc, #32]	@ (810b57c <prvCheckForValidListAndQueue+0x60>)
 810b55a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810b55c:	4b07      	ldr	r3, [pc, #28]	@ (810b57c <prvCheckForValidListAndQueue+0x60>)
 810b55e:	681b      	ldr	r3, [r3, #0]
 810b560:	2b00      	cmp	r3, #0
 810b562:	d005      	beq.n	810b570 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810b564:	4b05      	ldr	r3, [pc, #20]	@ (810b57c <prvCheckForValidListAndQueue+0x60>)
 810b566:	681b      	ldr	r3, [r3, #0]
 810b568:	490b      	ldr	r1, [pc, #44]	@ (810b598 <prvCheckForValidListAndQueue+0x7c>)
 810b56a:	4618      	mov	r0, r3
 810b56c:	f7fd ffd2 	bl	8109514 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810b570:	f7fc fe84 	bl	810827c <vPortExitCritical>
}
 810b574:	bf00      	nop
 810b576:	46bd      	mov	sp, r7
 810b578:	bd80      	pop	{r7, pc}
 810b57a:	bf00      	nop
 810b57c:	1000af8c 	.word	0x1000af8c
 810b580:	1000af5c 	.word	0x1000af5c
 810b584:	1000af70 	.word	0x1000af70
 810b588:	1000af84 	.word	0x1000af84
 810b58c:	1000af88 	.word	0x1000af88
 810b590:	1000b038 	.word	0x1000b038
 810b594:	1000af98 	.word	0x1000af98
 810b598:	08116c60 	.word	0x08116c60

0810b59c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 810b59c:	b480      	push	{r7}
 810b59e:	b083      	sub	sp, #12
 810b5a0:	af00      	add	r7, sp, #0
 810b5a2:	4603      	mov	r3, r0
 810b5a4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 810b5a6:	88fb      	ldrh	r3, [r7, #6]
 810b5a8:	021b      	lsls	r3, r3, #8
 810b5aa:	b21a      	sxth	r2, r3
 810b5ac:	88fb      	ldrh	r3, [r7, #6]
 810b5ae:	0a1b      	lsrs	r3, r3, #8
 810b5b0:	b29b      	uxth	r3, r3
 810b5b2:	b21b      	sxth	r3, r3
 810b5b4:	4313      	orrs	r3, r2
 810b5b6:	b21b      	sxth	r3, r3
 810b5b8:	b29b      	uxth	r3, r3
}
 810b5ba:	4618      	mov	r0, r3
 810b5bc:	370c      	adds	r7, #12
 810b5be:	46bd      	mov	sp, r7
 810b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5c4:	4770      	bx	lr

0810b5c6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 810b5c6:	b480      	push	{r7}
 810b5c8:	b083      	sub	sp, #12
 810b5ca:	af00      	add	r7, sp, #0
 810b5cc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 810b5ce:	687b      	ldr	r3, [r7, #4]
 810b5d0:	061a      	lsls	r2, r3, #24
 810b5d2:	687b      	ldr	r3, [r7, #4]
 810b5d4:	021b      	lsls	r3, r3, #8
 810b5d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810b5da:	431a      	orrs	r2, r3
 810b5dc:	687b      	ldr	r3, [r7, #4]
 810b5de:	0a1b      	lsrs	r3, r3, #8
 810b5e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 810b5e4:	431a      	orrs	r2, r3
 810b5e6:	687b      	ldr	r3, [r7, #4]
 810b5e8:	0e1b      	lsrs	r3, r3, #24
 810b5ea:	4313      	orrs	r3, r2
}
 810b5ec:	4618      	mov	r0, r3
 810b5ee:	370c      	adds	r7, #12
 810b5f0:	46bd      	mov	sp, r7
 810b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5f6:	4770      	bx	lr

0810b5f8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 810b5f8:	b580      	push	{r7, lr}
 810b5fa:	b082      	sub	sp, #8
 810b5fc:	af00      	add	r7, sp, #0
 810b5fe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 810b600:	4915      	ldr	r1, [pc, #84]	@ (810b658 <etharp_free_entry+0x60>)
 810b602:	687a      	ldr	r2, [r7, #4]
 810b604:	4613      	mov	r3, r2
 810b606:	005b      	lsls	r3, r3, #1
 810b608:	4413      	add	r3, r2
 810b60a:	00db      	lsls	r3, r3, #3
 810b60c:	440b      	add	r3, r1
 810b60e:	681b      	ldr	r3, [r3, #0]
 810b610:	2b00      	cmp	r3, #0
 810b612:	d013      	beq.n	810b63c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 810b614:	4910      	ldr	r1, [pc, #64]	@ (810b658 <etharp_free_entry+0x60>)
 810b616:	687a      	ldr	r2, [r7, #4]
 810b618:	4613      	mov	r3, r2
 810b61a:	005b      	lsls	r3, r3, #1
 810b61c:	4413      	add	r3, r2
 810b61e:	00db      	lsls	r3, r3, #3
 810b620:	440b      	add	r3, r1
 810b622:	681b      	ldr	r3, [r3, #0]
 810b624:	4618      	mov	r0, r3
 810b626:	f003 ff3f 	bl	810f4a8 <pbuf_free>
    arp_table[i].q = NULL;
 810b62a:	490b      	ldr	r1, [pc, #44]	@ (810b658 <etharp_free_entry+0x60>)
 810b62c:	687a      	ldr	r2, [r7, #4]
 810b62e:	4613      	mov	r3, r2
 810b630:	005b      	lsls	r3, r3, #1
 810b632:	4413      	add	r3, r2
 810b634:	00db      	lsls	r3, r3, #3
 810b636:	440b      	add	r3, r1
 810b638:	2200      	movs	r2, #0
 810b63a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 810b63c:	4906      	ldr	r1, [pc, #24]	@ (810b658 <etharp_free_entry+0x60>)
 810b63e:	687a      	ldr	r2, [r7, #4]
 810b640:	4613      	mov	r3, r2
 810b642:	005b      	lsls	r3, r3, #1
 810b644:	4413      	add	r3, r2
 810b646:	00db      	lsls	r3, r3, #3
 810b648:	440b      	add	r3, r1
 810b64a:	3314      	adds	r3, #20
 810b64c:	2200      	movs	r2, #0
 810b64e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 810b650:	bf00      	nop
 810b652:	3708      	adds	r7, #8
 810b654:	46bd      	mov	sp, r7
 810b656:	bd80      	pop	{r7, pc}
 810b658:	1000b088 	.word	0x1000b088

0810b65c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 810b65c:	b580      	push	{r7, lr}
 810b65e:	b082      	sub	sp, #8
 810b660:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810b662:	2300      	movs	r3, #0
 810b664:	607b      	str	r3, [r7, #4]
 810b666:	e096      	b.n	810b796 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 810b668:	494f      	ldr	r1, [pc, #316]	@ (810b7a8 <etharp_tmr+0x14c>)
 810b66a:	687a      	ldr	r2, [r7, #4]
 810b66c:	4613      	mov	r3, r2
 810b66e:	005b      	lsls	r3, r3, #1
 810b670:	4413      	add	r3, r2
 810b672:	00db      	lsls	r3, r3, #3
 810b674:	440b      	add	r3, r1
 810b676:	3314      	adds	r3, #20
 810b678:	781b      	ldrb	r3, [r3, #0]
 810b67a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 810b67c:	78fb      	ldrb	r3, [r7, #3]
 810b67e:	2b00      	cmp	r3, #0
 810b680:	f000 8086 	beq.w	810b790 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 810b684:	4948      	ldr	r1, [pc, #288]	@ (810b7a8 <etharp_tmr+0x14c>)
 810b686:	687a      	ldr	r2, [r7, #4]
 810b688:	4613      	mov	r3, r2
 810b68a:	005b      	lsls	r3, r3, #1
 810b68c:	4413      	add	r3, r2
 810b68e:	00db      	lsls	r3, r3, #3
 810b690:	440b      	add	r3, r1
 810b692:	3312      	adds	r3, #18
 810b694:	881b      	ldrh	r3, [r3, #0]
 810b696:	3301      	adds	r3, #1
 810b698:	b298      	uxth	r0, r3
 810b69a:	4943      	ldr	r1, [pc, #268]	@ (810b7a8 <etharp_tmr+0x14c>)
 810b69c:	687a      	ldr	r2, [r7, #4]
 810b69e:	4613      	mov	r3, r2
 810b6a0:	005b      	lsls	r3, r3, #1
 810b6a2:	4413      	add	r3, r2
 810b6a4:	00db      	lsls	r3, r3, #3
 810b6a6:	440b      	add	r3, r1
 810b6a8:	3312      	adds	r3, #18
 810b6aa:	4602      	mov	r2, r0
 810b6ac:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 810b6ae:	493e      	ldr	r1, [pc, #248]	@ (810b7a8 <etharp_tmr+0x14c>)
 810b6b0:	687a      	ldr	r2, [r7, #4]
 810b6b2:	4613      	mov	r3, r2
 810b6b4:	005b      	lsls	r3, r3, #1
 810b6b6:	4413      	add	r3, r2
 810b6b8:	00db      	lsls	r3, r3, #3
 810b6ba:	440b      	add	r3, r1
 810b6bc:	3312      	adds	r3, #18
 810b6be:	881b      	ldrh	r3, [r3, #0]
 810b6c0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 810b6c4:	d215      	bcs.n	810b6f2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 810b6c6:	4938      	ldr	r1, [pc, #224]	@ (810b7a8 <etharp_tmr+0x14c>)
 810b6c8:	687a      	ldr	r2, [r7, #4]
 810b6ca:	4613      	mov	r3, r2
 810b6cc:	005b      	lsls	r3, r3, #1
 810b6ce:	4413      	add	r3, r2
 810b6d0:	00db      	lsls	r3, r3, #3
 810b6d2:	440b      	add	r3, r1
 810b6d4:	3314      	adds	r3, #20
 810b6d6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 810b6d8:	2b01      	cmp	r3, #1
 810b6da:	d10e      	bne.n	810b6fa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 810b6dc:	4932      	ldr	r1, [pc, #200]	@ (810b7a8 <etharp_tmr+0x14c>)
 810b6de:	687a      	ldr	r2, [r7, #4]
 810b6e0:	4613      	mov	r3, r2
 810b6e2:	005b      	lsls	r3, r3, #1
 810b6e4:	4413      	add	r3, r2
 810b6e6:	00db      	lsls	r3, r3, #3
 810b6e8:	440b      	add	r3, r1
 810b6ea:	3312      	adds	r3, #18
 810b6ec:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 810b6ee:	2b04      	cmp	r3, #4
 810b6f0:	d903      	bls.n	810b6fa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 810b6f2:	6878      	ldr	r0, [r7, #4]
 810b6f4:	f7ff ff80 	bl	810b5f8 <etharp_free_entry>
 810b6f8:	e04a      	b.n	810b790 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 810b6fa:	492b      	ldr	r1, [pc, #172]	@ (810b7a8 <etharp_tmr+0x14c>)
 810b6fc:	687a      	ldr	r2, [r7, #4]
 810b6fe:	4613      	mov	r3, r2
 810b700:	005b      	lsls	r3, r3, #1
 810b702:	4413      	add	r3, r2
 810b704:	00db      	lsls	r3, r3, #3
 810b706:	440b      	add	r3, r1
 810b708:	3314      	adds	r3, #20
 810b70a:	781b      	ldrb	r3, [r3, #0]
 810b70c:	2b03      	cmp	r3, #3
 810b70e:	d10a      	bne.n	810b726 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 810b710:	4925      	ldr	r1, [pc, #148]	@ (810b7a8 <etharp_tmr+0x14c>)
 810b712:	687a      	ldr	r2, [r7, #4]
 810b714:	4613      	mov	r3, r2
 810b716:	005b      	lsls	r3, r3, #1
 810b718:	4413      	add	r3, r2
 810b71a:	00db      	lsls	r3, r3, #3
 810b71c:	440b      	add	r3, r1
 810b71e:	3314      	adds	r3, #20
 810b720:	2204      	movs	r2, #4
 810b722:	701a      	strb	r2, [r3, #0]
 810b724:	e034      	b.n	810b790 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 810b726:	4920      	ldr	r1, [pc, #128]	@ (810b7a8 <etharp_tmr+0x14c>)
 810b728:	687a      	ldr	r2, [r7, #4]
 810b72a:	4613      	mov	r3, r2
 810b72c:	005b      	lsls	r3, r3, #1
 810b72e:	4413      	add	r3, r2
 810b730:	00db      	lsls	r3, r3, #3
 810b732:	440b      	add	r3, r1
 810b734:	3314      	adds	r3, #20
 810b736:	781b      	ldrb	r3, [r3, #0]
 810b738:	2b04      	cmp	r3, #4
 810b73a:	d10a      	bne.n	810b752 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 810b73c:	491a      	ldr	r1, [pc, #104]	@ (810b7a8 <etharp_tmr+0x14c>)
 810b73e:	687a      	ldr	r2, [r7, #4]
 810b740:	4613      	mov	r3, r2
 810b742:	005b      	lsls	r3, r3, #1
 810b744:	4413      	add	r3, r2
 810b746:	00db      	lsls	r3, r3, #3
 810b748:	440b      	add	r3, r1
 810b74a:	3314      	adds	r3, #20
 810b74c:	2202      	movs	r2, #2
 810b74e:	701a      	strb	r2, [r3, #0]
 810b750:	e01e      	b.n	810b790 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 810b752:	4915      	ldr	r1, [pc, #84]	@ (810b7a8 <etharp_tmr+0x14c>)
 810b754:	687a      	ldr	r2, [r7, #4]
 810b756:	4613      	mov	r3, r2
 810b758:	005b      	lsls	r3, r3, #1
 810b75a:	4413      	add	r3, r2
 810b75c:	00db      	lsls	r3, r3, #3
 810b75e:	440b      	add	r3, r1
 810b760:	3314      	adds	r3, #20
 810b762:	781b      	ldrb	r3, [r3, #0]
 810b764:	2b01      	cmp	r3, #1
 810b766:	d113      	bne.n	810b790 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 810b768:	490f      	ldr	r1, [pc, #60]	@ (810b7a8 <etharp_tmr+0x14c>)
 810b76a:	687a      	ldr	r2, [r7, #4]
 810b76c:	4613      	mov	r3, r2
 810b76e:	005b      	lsls	r3, r3, #1
 810b770:	4413      	add	r3, r2
 810b772:	00db      	lsls	r3, r3, #3
 810b774:	440b      	add	r3, r1
 810b776:	3308      	adds	r3, #8
 810b778:	6818      	ldr	r0, [r3, #0]
 810b77a:	687a      	ldr	r2, [r7, #4]
 810b77c:	4613      	mov	r3, r2
 810b77e:	005b      	lsls	r3, r3, #1
 810b780:	4413      	add	r3, r2
 810b782:	00db      	lsls	r3, r3, #3
 810b784:	4a08      	ldr	r2, [pc, #32]	@ (810b7a8 <etharp_tmr+0x14c>)
 810b786:	4413      	add	r3, r2
 810b788:	3304      	adds	r3, #4
 810b78a:	4619      	mov	r1, r3
 810b78c:	f000 fe6e 	bl	810c46c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810b790:	687b      	ldr	r3, [r7, #4]
 810b792:	3301      	adds	r3, #1
 810b794:	607b      	str	r3, [r7, #4]
 810b796:	687b      	ldr	r3, [r7, #4]
 810b798:	2b09      	cmp	r3, #9
 810b79a:	f77f af65 	ble.w	810b668 <etharp_tmr+0xc>
      }
    }
  }
}
 810b79e:	bf00      	nop
 810b7a0:	bf00      	nop
 810b7a2:	3708      	adds	r7, #8
 810b7a4:	46bd      	mov	sp, r7
 810b7a6:	bd80      	pop	{r7, pc}
 810b7a8:	1000b088 	.word	0x1000b088

0810b7ac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 810b7ac:	b580      	push	{r7, lr}
 810b7ae:	b08a      	sub	sp, #40	@ 0x28
 810b7b0:	af00      	add	r7, sp, #0
 810b7b2:	60f8      	str	r0, [r7, #12]
 810b7b4:	460b      	mov	r3, r1
 810b7b6:	607a      	str	r2, [r7, #4]
 810b7b8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 810b7ba:	230a      	movs	r3, #10
 810b7bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 810b7be:	230a      	movs	r3, #10
 810b7c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 810b7c2:	230a      	movs	r3, #10
 810b7c4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 810b7c6:	2300      	movs	r3, #0
 810b7c8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 810b7ca:	230a      	movs	r3, #10
 810b7cc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 810b7ce:	2300      	movs	r3, #0
 810b7d0:	83bb      	strh	r3, [r7, #28]
 810b7d2:	2300      	movs	r3, #0
 810b7d4:	837b      	strh	r3, [r7, #26]
 810b7d6:	2300      	movs	r3, #0
 810b7d8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810b7da:	2300      	movs	r3, #0
 810b7dc:	843b      	strh	r3, [r7, #32]
 810b7de:	e0ae      	b.n	810b93e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 810b7e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810b7e4:	49a6      	ldr	r1, [pc, #664]	@ (810ba80 <etharp_find_entry+0x2d4>)
 810b7e6:	4613      	mov	r3, r2
 810b7e8:	005b      	lsls	r3, r3, #1
 810b7ea:	4413      	add	r3, r2
 810b7ec:	00db      	lsls	r3, r3, #3
 810b7ee:	440b      	add	r3, r1
 810b7f0:	3314      	adds	r3, #20
 810b7f2:	781b      	ldrb	r3, [r3, #0]
 810b7f4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 810b7f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 810b7fa:	2b0a      	cmp	r3, #10
 810b7fc:	d105      	bne.n	810b80a <etharp_find_entry+0x5e>
 810b7fe:	7dfb      	ldrb	r3, [r7, #23]
 810b800:	2b00      	cmp	r3, #0
 810b802:	d102      	bne.n	810b80a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 810b804:	8c3b      	ldrh	r3, [r7, #32]
 810b806:	847b      	strh	r3, [r7, #34]	@ 0x22
 810b808:	e095      	b.n	810b936 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 810b80a:	7dfb      	ldrb	r3, [r7, #23]
 810b80c:	2b00      	cmp	r3, #0
 810b80e:	f000 8092 	beq.w	810b936 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 810b812:	7dfb      	ldrb	r3, [r7, #23]
 810b814:	2b01      	cmp	r3, #1
 810b816:	d009      	beq.n	810b82c <etharp_find_entry+0x80>
 810b818:	7dfb      	ldrb	r3, [r7, #23]
 810b81a:	2b01      	cmp	r3, #1
 810b81c:	d806      	bhi.n	810b82c <etharp_find_entry+0x80>
 810b81e:	4b99      	ldr	r3, [pc, #612]	@ (810ba84 <etharp_find_entry+0x2d8>)
 810b820:	f240 1223 	movw	r2, #291	@ 0x123
 810b824:	4998      	ldr	r1, [pc, #608]	@ (810ba88 <etharp_find_entry+0x2dc>)
 810b826:	4899      	ldr	r0, [pc, #612]	@ (810ba8c <etharp_find_entry+0x2e0>)
 810b828:	f00a faaa 	bl	8115d80 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 810b82c:	68fb      	ldr	r3, [r7, #12]
 810b82e:	2b00      	cmp	r3, #0
 810b830:	d020      	beq.n	810b874 <etharp_find_entry+0xc8>
 810b832:	68fb      	ldr	r3, [r7, #12]
 810b834:	6819      	ldr	r1, [r3, #0]
 810b836:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810b83a:	4891      	ldr	r0, [pc, #580]	@ (810ba80 <etharp_find_entry+0x2d4>)
 810b83c:	4613      	mov	r3, r2
 810b83e:	005b      	lsls	r3, r3, #1
 810b840:	4413      	add	r3, r2
 810b842:	00db      	lsls	r3, r3, #3
 810b844:	4403      	add	r3, r0
 810b846:	3304      	adds	r3, #4
 810b848:	681b      	ldr	r3, [r3, #0]
 810b84a:	4299      	cmp	r1, r3
 810b84c:	d112      	bne.n	810b874 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 810b84e:	687b      	ldr	r3, [r7, #4]
 810b850:	2b00      	cmp	r3, #0
 810b852:	d00c      	beq.n	810b86e <etharp_find_entry+0xc2>
 810b854:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810b858:	4989      	ldr	r1, [pc, #548]	@ (810ba80 <etharp_find_entry+0x2d4>)
 810b85a:	4613      	mov	r3, r2
 810b85c:	005b      	lsls	r3, r3, #1
 810b85e:	4413      	add	r3, r2
 810b860:	00db      	lsls	r3, r3, #3
 810b862:	440b      	add	r3, r1
 810b864:	3308      	adds	r3, #8
 810b866:	681b      	ldr	r3, [r3, #0]
 810b868:	687a      	ldr	r2, [r7, #4]
 810b86a:	429a      	cmp	r2, r3
 810b86c:	d102      	bne.n	810b874 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 810b86e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810b872:	e100      	b.n	810ba76 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 810b874:	7dfb      	ldrb	r3, [r7, #23]
 810b876:	2b01      	cmp	r3, #1
 810b878:	d140      	bne.n	810b8fc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 810b87a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810b87e:	4980      	ldr	r1, [pc, #512]	@ (810ba80 <etharp_find_entry+0x2d4>)
 810b880:	4613      	mov	r3, r2
 810b882:	005b      	lsls	r3, r3, #1
 810b884:	4413      	add	r3, r2
 810b886:	00db      	lsls	r3, r3, #3
 810b888:	440b      	add	r3, r1
 810b88a:	681b      	ldr	r3, [r3, #0]
 810b88c:	2b00      	cmp	r3, #0
 810b88e:	d01a      	beq.n	810b8c6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 810b890:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810b894:	497a      	ldr	r1, [pc, #488]	@ (810ba80 <etharp_find_entry+0x2d4>)
 810b896:	4613      	mov	r3, r2
 810b898:	005b      	lsls	r3, r3, #1
 810b89a:	4413      	add	r3, r2
 810b89c:	00db      	lsls	r3, r3, #3
 810b89e:	440b      	add	r3, r1
 810b8a0:	3312      	adds	r3, #18
 810b8a2:	881b      	ldrh	r3, [r3, #0]
 810b8a4:	8bba      	ldrh	r2, [r7, #28]
 810b8a6:	429a      	cmp	r2, r3
 810b8a8:	d845      	bhi.n	810b936 <etharp_find_entry+0x18a>
            old_queue = i;
 810b8aa:	8c3b      	ldrh	r3, [r7, #32]
 810b8ac:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 810b8ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810b8b2:	4973      	ldr	r1, [pc, #460]	@ (810ba80 <etharp_find_entry+0x2d4>)
 810b8b4:	4613      	mov	r3, r2
 810b8b6:	005b      	lsls	r3, r3, #1
 810b8b8:	4413      	add	r3, r2
 810b8ba:	00db      	lsls	r3, r3, #3
 810b8bc:	440b      	add	r3, r1
 810b8be:	3312      	adds	r3, #18
 810b8c0:	881b      	ldrh	r3, [r3, #0]
 810b8c2:	83bb      	strh	r3, [r7, #28]
 810b8c4:	e037      	b.n	810b936 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 810b8c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810b8ca:	496d      	ldr	r1, [pc, #436]	@ (810ba80 <etharp_find_entry+0x2d4>)
 810b8cc:	4613      	mov	r3, r2
 810b8ce:	005b      	lsls	r3, r3, #1
 810b8d0:	4413      	add	r3, r2
 810b8d2:	00db      	lsls	r3, r3, #3
 810b8d4:	440b      	add	r3, r1
 810b8d6:	3312      	adds	r3, #18
 810b8d8:	881b      	ldrh	r3, [r3, #0]
 810b8da:	8b7a      	ldrh	r2, [r7, #26]
 810b8dc:	429a      	cmp	r2, r3
 810b8de:	d82a      	bhi.n	810b936 <etharp_find_entry+0x18a>
            old_pending = i;
 810b8e0:	8c3b      	ldrh	r3, [r7, #32]
 810b8e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 810b8e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810b8e8:	4965      	ldr	r1, [pc, #404]	@ (810ba80 <etharp_find_entry+0x2d4>)
 810b8ea:	4613      	mov	r3, r2
 810b8ec:	005b      	lsls	r3, r3, #1
 810b8ee:	4413      	add	r3, r2
 810b8f0:	00db      	lsls	r3, r3, #3
 810b8f2:	440b      	add	r3, r1
 810b8f4:	3312      	adds	r3, #18
 810b8f6:	881b      	ldrh	r3, [r3, #0]
 810b8f8:	837b      	strh	r3, [r7, #26]
 810b8fa:	e01c      	b.n	810b936 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 810b8fc:	7dfb      	ldrb	r3, [r7, #23]
 810b8fe:	2b01      	cmp	r3, #1
 810b900:	d919      	bls.n	810b936 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 810b902:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810b906:	495e      	ldr	r1, [pc, #376]	@ (810ba80 <etharp_find_entry+0x2d4>)
 810b908:	4613      	mov	r3, r2
 810b90a:	005b      	lsls	r3, r3, #1
 810b90c:	4413      	add	r3, r2
 810b90e:	00db      	lsls	r3, r3, #3
 810b910:	440b      	add	r3, r1
 810b912:	3312      	adds	r3, #18
 810b914:	881b      	ldrh	r3, [r3, #0]
 810b916:	8b3a      	ldrh	r2, [r7, #24]
 810b918:	429a      	cmp	r2, r3
 810b91a:	d80c      	bhi.n	810b936 <etharp_find_entry+0x18a>
            old_stable = i;
 810b91c:	8c3b      	ldrh	r3, [r7, #32]
 810b91e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 810b920:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810b924:	4956      	ldr	r1, [pc, #344]	@ (810ba80 <etharp_find_entry+0x2d4>)
 810b926:	4613      	mov	r3, r2
 810b928:	005b      	lsls	r3, r3, #1
 810b92a:	4413      	add	r3, r2
 810b92c:	00db      	lsls	r3, r3, #3
 810b92e:	440b      	add	r3, r1
 810b930:	3312      	adds	r3, #18
 810b932:	881b      	ldrh	r3, [r3, #0]
 810b934:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810b936:	8c3b      	ldrh	r3, [r7, #32]
 810b938:	3301      	adds	r3, #1
 810b93a:	b29b      	uxth	r3, r3
 810b93c:	843b      	strh	r3, [r7, #32]
 810b93e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810b942:	2b09      	cmp	r3, #9
 810b944:	f77f af4c 	ble.w	810b7e0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 810b948:	7afb      	ldrb	r3, [r7, #11]
 810b94a:	f003 0302 	and.w	r3, r3, #2
 810b94e:	2b00      	cmp	r3, #0
 810b950:	d108      	bne.n	810b964 <etharp_find_entry+0x1b8>
 810b952:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 810b956:	2b0a      	cmp	r3, #10
 810b958:	d107      	bne.n	810b96a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 810b95a:	7afb      	ldrb	r3, [r7, #11]
 810b95c:	f003 0301 	and.w	r3, r3, #1
 810b960:	2b00      	cmp	r3, #0
 810b962:	d102      	bne.n	810b96a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 810b964:	f04f 33ff 	mov.w	r3, #4294967295
 810b968:	e085      	b.n	810ba76 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 810b96a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 810b96e:	2b09      	cmp	r3, #9
 810b970:	dc02      	bgt.n	810b978 <etharp_find_entry+0x1cc>
    i = empty;
 810b972:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810b974:	843b      	strh	r3, [r7, #32]
 810b976:	e039      	b.n	810b9ec <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 810b978:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 810b97c:	2b09      	cmp	r3, #9
 810b97e:	dc14      	bgt.n	810b9aa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 810b980:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810b982:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 810b984:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810b988:	493d      	ldr	r1, [pc, #244]	@ (810ba80 <etharp_find_entry+0x2d4>)
 810b98a:	4613      	mov	r3, r2
 810b98c:	005b      	lsls	r3, r3, #1
 810b98e:	4413      	add	r3, r2
 810b990:	00db      	lsls	r3, r3, #3
 810b992:	440b      	add	r3, r1
 810b994:	681b      	ldr	r3, [r3, #0]
 810b996:	2b00      	cmp	r3, #0
 810b998:	d018      	beq.n	810b9cc <etharp_find_entry+0x220>
 810b99a:	4b3a      	ldr	r3, [pc, #232]	@ (810ba84 <etharp_find_entry+0x2d8>)
 810b99c:	f240 126d 	movw	r2, #365	@ 0x16d
 810b9a0:	493b      	ldr	r1, [pc, #236]	@ (810ba90 <etharp_find_entry+0x2e4>)
 810b9a2:	483a      	ldr	r0, [pc, #232]	@ (810ba8c <etharp_find_entry+0x2e0>)
 810b9a4:	f00a f9ec 	bl	8115d80 <iprintf>
 810b9a8:	e010      	b.n	810b9cc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 810b9aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 810b9ae:	2b09      	cmp	r3, #9
 810b9b0:	dc02      	bgt.n	810b9b8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 810b9b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 810b9b4:	843b      	strh	r3, [r7, #32]
 810b9b6:	e009      	b.n	810b9cc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 810b9b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 810b9bc:	2b09      	cmp	r3, #9
 810b9be:	dc02      	bgt.n	810b9c6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 810b9c0:	8bfb      	ldrh	r3, [r7, #30]
 810b9c2:	843b      	strh	r3, [r7, #32]
 810b9c4:	e002      	b.n	810b9cc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 810b9c6:	f04f 33ff 	mov.w	r3, #4294967295
 810b9ca:	e054      	b.n	810ba76 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 810b9cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810b9d0:	2b09      	cmp	r3, #9
 810b9d2:	dd06      	ble.n	810b9e2 <etharp_find_entry+0x236>
 810b9d4:	4b2b      	ldr	r3, [pc, #172]	@ (810ba84 <etharp_find_entry+0x2d8>)
 810b9d6:	f240 127f 	movw	r2, #383	@ 0x17f
 810b9da:	492e      	ldr	r1, [pc, #184]	@ (810ba94 <etharp_find_entry+0x2e8>)
 810b9dc:	482b      	ldr	r0, [pc, #172]	@ (810ba8c <etharp_find_entry+0x2e0>)
 810b9de:	f00a f9cf 	bl	8115d80 <iprintf>
    etharp_free_entry(i);
 810b9e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810b9e6:	4618      	mov	r0, r3
 810b9e8:	f7ff fe06 	bl	810b5f8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 810b9ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 810b9f0:	2b09      	cmp	r3, #9
 810b9f2:	dd06      	ble.n	810ba02 <etharp_find_entry+0x256>
 810b9f4:	4b23      	ldr	r3, [pc, #140]	@ (810ba84 <etharp_find_entry+0x2d8>)
 810b9f6:	f240 1283 	movw	r2, #387	@ 0x183
 810b9fa:	4926      	ldr	r1, [pc, #152]	@ (810ba94 <etharp_find_entry+0x2e8>)
 810b9fc:	4823      	ldr	r0, [pc, #140]	@ (810ba8c <etharp_find_entry+0x2e0>)
 810b9fe:	f00a f9bf 	bl	8115d80 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 810ba02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810ba06:	491e      	ldr	r1, [pc, #120]	@ (810ba80 <etharp_find_entry+0x2d4>)
 810ba08:	4613      	mov	r3, r2
 810ba0a:	005b      	lsls	r3, r3, #1
 810ba0c:	4413      	add	r3, r2
 810ba0e:	00db      	lsls	r3, r3, #3
 810ba10:	440b      	add	r3, r1
 810ba12:	3314      	adds	r3, #20
 810ba14:	781b      	ldrb	r3, [r3, #0]
 810ba16:	2b00      	cmp	r3, #0
 810ba18:	d006      	beq.n	810ba28 <etharp_find_entry+0x27c>
 810ba1a:	4b1a      	ldr	r3, [pc, #104]	@ (810ba84 <etharp_find_entry+0x2d8>)
 810ba1c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 810ba20:	491d      	ldr	r1, [pc, #116]	@ (810ba98 <etharp_find_entry+0x2ec>)
 810ba22:	481a      	ldr	r0, [pc, #104]	@ (810ba8c <etharp_find_entry+0x2e0>)
 810ba24:	f00a f9ac 	bl	8115d80 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 810ba28:	68fb      	ldr	r3, [r7, #12]
 810ba2a:	2b00      	cmp	r3, #0
 810ba2c:	d00b      	beq.n	810ba46 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 810ba2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810ba32:	68fb      	ldr	r3, [r7, #12]
 810ba34:	6819      	ldr	r1, [r3, #0]
 810ba36:	4812      	ldr	r0, [pc, #72]	@ (810ba80 <etharp_find_entry+0x2d4>)
 810ba38:	4613      	mov	r3, r2
 810ba3a:	005b      	lsls	r3, r3, #1
 810ba3c:	4413      	add	r3, r2
 810ba3e:	00db      	lsls	r3, r3, #3
 810ba40:	4403      	add	r3, r0
 810ba42:	3304      	adds	r3, #4
 810ba44:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 810ba46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810ba4a:	490d      	ldr	r1, [pc, #52]	@ (810ba80 <etharp_find_entry+0x2d4>)
 810ba4c:	4613      	mov	r3, r2
 810ba4e:	005b      	lsls	r3, r3, #1
 810ba50:	4413      	add	r3, r2
 810ba52:	00db      	lsls	r3, r3, #3
 810ba54:	440b      	add	r3, r1
 810ba56:	3312      	adds	r3, #18
 810ba58:	2200      	movs	r2, #0
 810ba5a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 810ba5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810ba60:	4907      	ldr	r1, [pc, #28]	@ (810ba80 <etharp_find_entry+0x2d4>)
 810ba62:	4613      	mov	r3, r2
 810ba64:	005b      	lsls	r3, r3, #1
 810ba66:	4413      	add	r3, r2
 810ba68:	00db      	lsls	r3, r3, #3
 810ba6a:	440b      	add	r3, r1
 810ba6c:	3308      	adds	r3, #8
 810ba6e:	687a      	ldr	r2, [r7, #4]
 810ba70:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 810ba72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 810ba76:	4618      	mov	r0, r3
 810ba78:	3728      	adds	r7, #40	@ 0x28
 810ba7a:	46bd      	mov	sp, r7
 810ba7c:	bd80      	pop	{r7, pc}
 810ba7e:	bf00      	nop
 810ba80:	1000b088 	.word	0x1000b088
 810ba84:	08116c68 	.word	0x08116c68
 810ba88:	08116ce0 	.word	0x08116ce0
 810ba8c:	08116d20 	.word	0x08116d20
 810ba90:	08116d48 	.word	0x08116d48
 810ba94:	08116d60 	.word	0x08116d60
 810ba98:	08116d74 	.word	0x08116d74

0810ba9c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 810ba9c:	b580      	push	{r7, lr}
 810ba9e:	b088      	sub	sp, #32
 810baa0:	af02      	add	r7, sp, #8
 810baa2:	60f8      	str	r0, [r7, #12]
 810baa4:	60b9      	str	r1, [r7, #8]
 810baa6:	607a      	str	r2, [r7, #4]
 810baa8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 810baaa:	68fb      	ldr	r3, [r7, #12]
 810baac:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810bab0:	2b06      	cmp	r3, #6
 810bab2:	d006      	beq.n	810bac2 <etharp_update_arp_entry+0x26>
 810bab4:	4b48      	ldr	r3, [pc, #288]	@ (810bbd8 <etharp_update_arp_entry+0x13c>)
 810bab6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 810baba:	4948      	ldr	r1, [pc, #288]	@ (810bbdc <etharp_update_arp_entry+0x140>)
 810babc:	4848      	ldr	r0, [pc, #288]	@ (810bbe0 <etharp_update_arp_entry+0x144>)
 810babe:	f00a f95f 	bl	8115d80 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 810bac2:	68bb      	ldr	r3, [r7, #8]
 810bac4:	2b00      	cmp	r3, #0
 810bac6:	d012      	beq.n	810baee <etharp_update_arp_entry+0x52>
 810bac8:	68bb      	ldr	r3, [r7, #8]
 810baca:	681b      	ldr	r3, [r3, #0]
 810bacc:	2b00      	cmp	r3, #0
 810bace:	d00e      	beq.n	810baee <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 810bad0:	68bb      	ldr	r3, [r7, #8]
 810bad2:	681b      	ldr	r3, [r3, #0]
 810bad4:	68f9      	ldr	r1, [r7, #12]
 810bad6:	4618      	mov	r0, r3
 810bad8:	f001 face 	bl	810d078 <ip4_addr_isbroadcast_u32>
 810badc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 810bade:	2b00      	cmp	r3, #0
 810bae0:	d105      	bne.n	810baee <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 810bae2:	68bb      	ldr	r3, [r7, #8]
 810bae4:	681b      	ldr	r3, [r3, #0]
 810bae6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 810baea:	2be0      	cmp	r3, #224	@ 0xe0
 810baec:	d102      	bne.n	810baf4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 810baee:	f06f 030f 	mvn.w	r3, #15
 810baf2:	e06c      	b.n	810bbce <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 810baf4:	78fb      	ldrb	r3, [r7, #3]
 810baf6:	68fa      	ldr	r2, [r7, #12]
 810baf8:	4619      	mov	r1, r3
 810bafa:	68b8      	ldr	r0, [r7, #8]
 810bafc:	f7ff fe56 	bl	810b7ac <etharp_find_entry>
 810bb00:	4603      	mov	r3, r0
 810bb02:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 810bb04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 810bb08:	2b00      	cmp	r3, #0
 810bb0a:	da02      	bge.n	810bb12 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 810bb0c:	8afb      	ldrh	r3, [r7, #22]
 810bb0e:	b25b      	sxtb	r3, r3
 810bb10:	e05d      	b.n	810bbce <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 810bb12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810bb16:	4933      	ldr	r1, [pc, #204]	@ (810bbe4 <etharp_update_arp_entry+0x148>)
 810bb18:	4613      	mov	r3, r2
 810bb1a:	005b      	lsls	r3, r3, #1
 810bb1c:	4413      	add	r3, r2
 810bb1e:	00db      	lsls	r3, r3, #3
 810bb20:	440b      	add	r3, r1
 810bb22:	3314      	adds	r3, #20
 810bb24:	2202      	movs	r2, #2
 810bb26:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 810bb28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810bb2c:	492d      	ldr	r1, [pc, #180]	@ (810bbe4 <etharp_update_arp_entry+0x148>)
 810bb2e:	4613      	mov	r3, r2
 810bb30:	005b      	lsls	r3, r3, #1
 810bb32:	4413      	add	r3, r2
 810bb34:	00db      	lsls	r3, r3, #3
 810bb36:	440b      	add	r3, r1
 810bb38:	3308      	adds	r3, #8
 810bb3a:	68fa      	ldr	r2, [r7, #12]
 810bb3c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 810bb3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810bb42:	4613      	mov	r3, r2
 810bb44:	005b      	lsls	r3, r3, #1
 810bb46:	4413      	add	r3, r2
 810bb48:	00db      	lsls	r3, r3, #3
 810bb4a:	3308      	adds	r3, #8
 810bb4c:	4a25      	ldr	r2, [pc, #148]	@ (810bbe4 <etharp_update_arp_entry+0x148>)
 810bb4e:	4413      	add	r3, r2
 810bb50:	3304      	adds	r3, #4
 810bb52:	2206      	movs	r2, #6
 810bb54:	6879      	ldr	r1, [r7, #4]
 810bb56:	4618      	mov	r0, r3
 810bb58:	f00a fab1 	bl	81160be <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 810bb5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810bb60:	4920      	ldr	r1, [pc, #128]	@ (810bbe4 <etharp_update_arp_entry+0x148>)
 810bb62:	4613      	mov	r3, r2
 810bb64:	005b      	lsls	r3, r3, #1
 810bb66:	4413      	add	r3, r2
 810bb68:	00db      	lsls	r3, r3, #3
 810bb6a:	440b      	add	r3, r1
 810bb6c:	3312      	adds	r3, #18
 810bb6e:	2200      	movs	r2, #0
 810bb70:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 810bb72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810bb76:	491b      	ldr	r1, [pc, #108]	@ (810bbe4 <etharp_update_arp_entry+0x148>)
 810bb78:	4613      	mov	r3, r2
 810bb7a:	005b      	lsls	r3, r3, #1
 810bb7c:	4413      	add	r3, r2
 810bb7e:	00db      	lsls	r3, r3, #3
 810bb80:	440b      	add	r3, r1
 810bb82:	681b      	ldr	r3, [r3, #0]
 810bb84:	2b00      	cmp	r3, #0
 810bb86:	d021      	beq.n	810bbcc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 810bb88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810bb8c:	4915      	ldr	r1, [pc, #84]	@ (810bbe4 <etharp_update_arp_entry+0x148>)
 810bb8e:	4613      	mov	r3, r2
 810bb90:	005b      	lsls	r3, r3, #1
 810bb92:	4413      	add	r3, r2
 810bb94:	00db      	lsls	r3, r3, #3
 810bb96:	440b      	add	r3, r1
 810bb98:	681b      	ldr	r3, [r3, #0]
 810bb9a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 810bb9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 810bba0:	4910      	ldr	r1, [pc, #64]	@ (810bbe4 <etharp_update_arp_entry+0x148>)
 810bba2:	4613      	mov	r3, r2
 810bba4:	005b      	lsls	r3, r3, #1
 810bba6:	4413      	add	r3, r2
 810bba8:	00db      	lsls	r3, r3, #3
 810bbaa:	440b      	add	r3, r1
 810bbac:	2200      	movs	r2, #0
 810bbae:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 810bbb0:	68fb      	ldr	r3, [r7, #12]
 810bbb2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 810bbb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810bbba:	9300      	str	r3, [sp, #0]
 810bbbc:	687b      	ldr	r3, [r7, #4]
 810bbbe:	6939      	ldr	r1, [r7, #16]
 810bbc0:	68f8      	ldr	r0, [r7, #12]
 810bbc2:	f000 fcf3 	bl	810c5ac <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 810bbc6:	6938      	ldr	r0, [r7, #16]
 810bbc8:	f003 fc6e 	bl	810f4a8 <pbuf_free>
  }
  return ERR_OK;
 810bbcc:	2300      	movs	r3, #0
}
 810bbce:	4618      	mov	r0, r3
 810bbd0:	3718      	adds	r7, #24
 810bbd2:	46bd      	mov	sp, r7
 810bbd4:	bd80      	pop	{r7, pc}
 810bbd6:	bf00      	nop
 810bbd8:	08116c68 	.word	0x08116c68
 810bbdc:	08116da0 	.word	0x08116da0
 810bbe0:	08116d20 	.word	0x08116d20
 810bbe4:	1000b088 	.word	0x1000b088

0810bbe8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 810bbe8:	b580      	push	{r7, lr}
 810bbea:	b084      	sub	sp, #16
 810bbec:	af00      	add	r7, sp, #0
 810bbee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810bbf0:	2300      	movs	r3, #0
 810bbf2:	60fb      	str	r3, [r7, #12]
 810bbf4:	e01e      	b.n	810bc34 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 810bbf6:	4913      	ldr	r1, [pc, #76]	@ (810bc44 <etharp_cleanup_netif+0x5c>)
 810bbf8:	68fa      	ldr	r2, [r7, #12]
 810bbfa:	4613      	mov	r3, r2
 810bbfc:	005b      	lsls	r3, r3, #1
 810bbfe:	4413      	add	r3, r2
 810bc00:	00db      	lsls	r3, r3, #3
 810bc02:	440b      	add	r3, r1
 810bc04:	3314      	adds	r3, #20
 810bc06:	781b      	ldrb	r3, [r3, #0]
 810bc08:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 810bc0a:	7afb      	ldrb	r3, [r7, #11]
 810bc0c:	2b00      	cmp	r3, #0
 810bc0e:	d00e      	beq.n	810bc2e <etharp_cleanup_netif+0x46>
 810bc10:	490c      	ldr	r1, [pc, #48]	@ (810bc44 <etharp_cleanup_netif+0x5c>)
 810bc12:	68fa      	ldr	r2, [r7, #12]
 810bc14:	4613      	mov	r3, r2
 810bc16:	005b      	lsls	r3, r3, #1
 810bc18:	4413      	add	r3, r2
 810bc1a:	00db      	lsls	r3, r3, #3
 810bc1c:	440b      	add	r3, r1
 810bc1e:	3308      	adds	r3, #8
 810bc20:	681b      	ldr	r3, [r3, #0]
 810bc22:	687a      	ldr	r2, [r7, #4]
 810bc24:	429a      	cmp	r2, r3
 810bc26:	d102      	bne.n	810bc2e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 810bc28:	68f8      	ldr	r0, [r7, #12]
 810bc2a:	f7ff fce5 	bl	810b5f8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 810bc2e:	68fb      	ldr	r3, [r7, #12]
 810bc30:	3301      	adds	r3, #1
 810bc32:	60fb      	str	r3, [r7, #12]
 810bc34:	68fb      	ldr	r3, [r7, #12]
 810bc36:	2b09      	cmp	r3, #9
 810bc38:	dddd      	ble.n	810bbf6 <etharp_cleanup_netif+0xe>
    }
  }
}
 810bc3a:	bf00      	nop
 810bc3c:	bf00      	nop
 810bc3e:	3710      	adds	r7, #16
 810bc40:	46bd      	mov	sp, r7
 810bc42:	bd80      	pop	{r7, pc}
 810bc44:	1000b088 	.word	0x1000b088

0810bc48 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 810bc48:	b5b0      	push	{r4, r5, r7, lr}
 810bc4a:	b08a      	sub	sp, #40	@ 0x28
 810bc4c:	af04      	add	r7, sp, #16
 810bc4e:	6078      	str	r0, [r7, #4]
 810bc50:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 810bc52:	683b      	ldr	r3, [r7, #0]
 810bc54:	2b00      	cmp	r3, #0
 810bc56:	d107      	bne.n	810bc68 <etharp_input+0x20>
 810bc58:	4b3d      	ldr	r3, [pc, #244]	@ (810bd50 <etharp_input+0x108>)
 810bc5a:	f240 228a 	movw	r2, #650	@ 0x28a
 810bc5e:	493d      	ldr	r1, [pc, #244]	@ (810bd54 <etharp_input+0x10c>)
 810bc60:	483d      	ldr	r0, [pc, #244]	@ (810bd58 <etharp_input+0x110>)
 810bc62:	f00a f88d 	bl	8115d80 <iprintf>
 810bc66:	e06f      	b.n	810bd48 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 810bc68:	687b      	ldr	r3, [r7, #4]
 810bc6a:	685b      	ldr	r3, [r3, #4]
 810bc6c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 810bc6e:	693b      	ldr	r3, [r7, #16]
 810bc70:	881b      	ldrh	r3, [r3, #0]
 810bc72:	b29b      	uxth	r3, r3
 810bc74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810bc78:	d10c      	bne.n	810bc94 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 810bc7a:	693b      	ldr	r3, [r7, #16]
 810bc7c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 810bc7e:	2b06      	cmp	r3, #6
 810bc80:	d108      	bne.n	810bc94 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 810bc82:	693b      	ldr	r3, [r7, #16]
 810bc84:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 810bc86:	2b04      	cmp	r3, #4
 810bc88:	d104      	bne.n	810bc94 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 810bc8a:	693b      	ldr	r3, [r7, #16]
 810bc8c:	885b      	ldrh	r3, [r3, #2]
 810bc8e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 810bc90:	2b08      	cmp	r3, #8
 810bc92:	d003      	beq.n	810bc9c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 810bc94:	6878      	ldr	r0, [r7, #4]
 810bc96:	f003 fc07 	bl	810f4a8 <pbuf_free>
    return;
 810bc9a:	e055      	b.n	810bd48 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 810bc9c:	693b      	ldr	r3, [r7, #16]
 810bc9e:	330e      	adds	r3, #14
 810bca0:	681b      	ldr	r3, [r3, #0]
 810bca2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 810bca4:	693b      	ldr	r3, [r7, #16]
 810bca6:	3318      	adds	r3, #24
 810bca8:	681b      	ldr	r3, [r3, #0]
 810bcaa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 810bcac:	683b      	ldr	r3, [r7, #0]
 810bcae:	3304      	adds	r3, #4
 810bcb0:	681b      	ldr	r3, [r3, #0]
 810bcb2:	2b00      	cmp	r3, #0
 810bcb4:	d102      	bne.n	810bcbc <etharp_input+0x74>
    for_us = 0;
 810bcb6:	2300      	movs	r3, #0
 810bcb8:	75fb      	strb	r3, [r7, #23]
 810bcba:	e009      	b.n	810bcd0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 810bcbc:	68ba      	ldr	r2, [r7, #8]
 810bcbe:	683b      	ldr	r3, [r7, #0]
 810bcc0:	3304      	adds	r3, #4
 810bcc2:	681b      	ldr	r3, [r3, #0]
 810bcc4:	429a      	cmp	r2, r3
 810bcc6:	bf0c      	ite	eq
 810bcc8:	2301      	moveq	r3, #1
 810bcca:	2300      	movne	r3, #0
 810bccc:	b2db      	uxtb	r3, r3
 810bcce:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 810bcd0:	693b      	ldr	r3, [r7, #16]
 810bcd2:	f103 0208 	add.w	r2, r3, #8
 810bcd6:	7dfb      	ldrb	r3, [r7, #23]
 810bcd8:	2b00      	cmp	r3, #0
 810bcda:	d001      	beq.n	810bce0 <etharp_input+0x98>
 810bcdc:	2301      	movs	r3, #1
 810bcde:	e000      	b.n	810bce2 <etharp_input+0x9a>
 810bce0:	2302      	movs	r3, #2
 810bce2:	f107 010c 	add.w	r1, r7, #12
 810bce6:	6838      	ldr	r0, [r7, #0]
 810bce8:	f7ff fed8 	bl	810ba9c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 810bcec:	693b      	ldr	r3, [r7, #16]
 810bcee:	88db      	ldrh	r3, [r3, #6]
 810bcf0:	b29b      	uxth	r3, r3
 810bcf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810bcf6:	d003      	beq.n	810bd00 <etharp_input+0xb8>
 810bcf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810bcfc:	d01e      	beq.n	810bd3c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 810bcfe:	e020      	b.n	810bd42 <etharp_input+0xfa>
      if (for_us) {
 810bd00:	7dfb      	ldrb	r3, [r7, #23]
 810bd02:	2b00      	cmp	r3, #0
 810bd04:	d01c      	beq.n	810bd40 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 810bd06:	683b      	ldr	r3, [r7, #0]
 810bd08:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 810bd0c:	693b      	ldr	r3, [r7, #16]
 810bd0e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 810bd12:	683b      	ldr	r3, [r7, #0]
 810bd14:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 810bd18:	683b      	ldr	r3, [r7, #0]
 810bd1a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 810bd1c:	693a      	ldr	r2, [r7, #16]
 810bd1e:	3208      	adds	r2, #8
        etharp_raw(netif,
 810bd20:	2102      	movs	r1, #2
 810bd22:	9103      	str	r1, [sp, #12]
 810bd24:	f107 010c 	add.w	r1, r7, #12
 810bd28:	9102      	str	r1, [sp, #8]
 810bd2a:	9201      	str	r2, [sp, #4]
 810bd2c:	9300      	str	r3, [sp, #0]
 810bd2e:	462b      	mov	r3, r5
 810bd30:	4622      	mov	r2, r4
 810bd32:	4601      	mov	r1, r0
 810bd34:	6838      	ldr	r0, [r7, #0]
 810bd36:	f000 faeb 	bl	810c310 <etharp_raw>
      break;
 810bd3a:	e001      	b.n	810bd40 <etharp_input+0xf8>
      break;
 810bd3c:	bf00      	nop
 810bd3e:	e000      	b.n	810bd42 <etharp_input+0xfa>
      break;
 810bd40:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 810bd42:	6878      	ldr	r0, [r7, #4]
 810bd44:	f003 fbb0 	bl	810f4a8 <pbuf_free>
}
 810bd48:	3718      	adds	r7, #24
 810bd4a:	46bd      	mov	sp, r7
 810bd4c:	bdb0      	pop	{r4, r5, r7, pc}
 810bd4e:	bf00      	nop
 810bd50:	08116c68 	.word	0x08116c68
 810bd54:	08116df8 	.word	0x08116df8
 810bd58:	08116d20 	.word	0x08116d20

0810bd5c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 810bd5c:	b580      	push	{r7, lr}
 810bd5e:	b086      	sub	sp, #24
 810bd60:	af02      	add	r7, sp, #8
 810bd62:	60f8      	str	r0, [r7, #12]
 810bd64:	60b9      	str	r1, [r7, #8]
 810bd66:	4613      	mov	r3, r2
 810bd68:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 810bd6a:	79fa      	ldrb	r2, [r7, #7]
 810bd6c:	4944      	ldr	r1, [pc, #272]	@ (810be80 <etharp_output_to_arp_index+0x124>)
 810bd6e:	4613      	mov	r3, r2
 810bd70:	005b      	lsls	r3, r3, #1
 810bd72:	4413      	add	r3, r2
 810bd74:	00db      	lsls	r3, r3, #3
 810bd76:	440b      	add	r3, r1
 810bd78:	3314      	adds	r3, #20
 810bd7a:	781b      	ldrb	r3, [r3, #0]
 810bd7c:	2b01      	cmp	r3, #1
 810bd7e:	d806      	bhi.n	810bd8e <etharp_output_to_arp_index+0x32>
 810bd80:	4b40      	ldr	r3, [pc, #256]	@ (810be84 <etharp_output_to_arp_index+0x128>)
 810bd82:	f240 22ee 	movw	r2, #750	@ 0x2ee
 810bd86:	4940      	ldr	r1, [pc, #256]	@ (810be88 <etharp_output_to_arp_index+0x12c>)
 810bd88:	4840      	ldr	r0, [pc, #256]	@ (810be8c <etharp_output_to_arp_index+0x130>)
 810bd8a:	f009 fff9 	bl	8115d80 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 810bd8e:	79fa      	ldrb	r2, [r7, #7]
 810bd90:	493b      	ldr	r1, [pc, #236]	@ (810be80 <etharp_output_to_arp_index+0x124>)
 810bd92:	4613      	mov	r3, r2
 810bd94:	005b      	lsls	r3, r3, #1
 810bd96:	4413      	add	r3, r2
 810bd98:	00db      	lsls	r3, r3, #3
 810bd9a:	440b      	add	r3, r1
 810bd9c:	3314      	adds	r3, #20
 810bd9e:	781b      	ldrb	r3, [r3, #0]
 810bda0:	2b02      	cmp	r3, #2
 810bda2:	d153      	bne.n	810be4c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 810bda4:	79fa      	ldrb	r2, [r7, #7]
 810bda6:	4936      	ldr	r1, [pc, #216]	@ (810be80 <etharp_output_to_arp_index+0x124>)
 810bda8:	4613      	mov	r3, r2
 810bdaa:	005b      	lsls	r3, r3, #1
 810bdac:	4413      	add	r3, r2
 810bdae:	00db      	lsls	r3, r3, #3
 810bdb0:	440b      	add	r3, r1
 810bdb2:	3312      	adds	r3, #18
 810bdb4:	881b      	ldrh	r3, [r3, #0]
 810bdb6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 810bdba:	d919      	bls.n	810bdf0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 810bdbc:	79fa      	ldrb	r2, [r7, #7]
 810bdbe:	4613      	mov	r3, r2
 810bdc0:	005b      	lsls	r3, r3, #1
 810bdc2:	4413      	add	r3, r2
 810bdc4:	00db      	lsls	r3, r3, #3
 810bdc6:	4a2e      	ldr	r2, [pc, #184]	@ (810be80 <etharp_output_to_arp_index+0x124>)
 810bdc8:	4413      	add	r3, r2
 810bdca:	3304      	adds	r3, #4
 810bdcc:	4619      	mov	r1, r3
 810bdce:	68f8      	ldr	r0, [r7, #12]
 810bdd0:	f000 fb4c 	bl	810c46c <etharp_request>
 810bdd4:	4603      	mov	r3, r0
 810bdd6:	2b00      	cmp	r3, #0
 810bdd8:	d138      	bne.n	810be4c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 810bdda:	79fa      	ldrb	r2, [r7, #7]
 810bddc:	4928      	ldr	r1, [pc, #160]	@ (810be80 <etharp_output_to_arp_index+0x124>)
 810bdde:	4613      	mov	r3, r2
 810bde0:	005b      	lsls	r3, r3, #1
 810bde2:	4413      	add	r3, r2
 810bde4:	00db      	lsls	r3, r3, #3
 810bde6:	440b      	add	r3, r1
 810bde8:	3314      	adds	r3, #20
 810bdea:	2203      	movs	r2, #3
 810bdec:	701a      	strb	r2, [r3, #0]
 810bdee:	e02d      	b.n	810be4c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 810bdf0:	79fa      	ldrb	r2, [r7, #7]
 810bdf2:	4923      	ldr	r1, [pc, #140]	@ (810be80 <etharp_output_to_arp_index+0x124>)
 810bdf4:	4613      	mov	r3, r2
 810bdf6:	005b      	lsls	r3, r3, #1
 810bdf8:	4413      	add	r3, r2
 810bdfa:	00db      	lsls	r3, r3, #3
 810bdfc:	440b      	add	r3, r1
 810bdfe:	3312      	adds	r3, #18
 810be00:	881b      	ldrh	r3, [r3, #0]
 810be02:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 810be06:	d321      	bcc.n	810be4c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 810be08:	79fa      	ldrb	r2, [r7, #7]
 810be0a:	4613      	mov	r3, r2
 810be0c:	005b      	lsls	r3, r3, #1
 810be0e:	4413      	add	r3, r2
 810be10:	00db      	lsls	r3, r3, #3
 810be12:	4a1b      	ldr	r2, [pc, #108]	@ (810be80 <etharp_output_to_arp_index+0x124>)
 810be14:	4413      	add	r3, r2
 810be16:	1d19      	adds	r1, r3, #4
 810be18:	79fa      	ldrb	r2, [r7, #7]
 810be1a:	4613      	mov	r3, r2
 810be1c:	005b      	lsls	r3, r3, #1
 810be1e:	4413      	add	r3, r2
 810be20:	00db      	lsls	r3, r3, #3
 810be22:	3308      	adds	r3, #8
 810be24:	4a16      	ldr	r2, [pc, #88]	@ (810be80 <etharp_output_to_arp_index+0x124>)
 810be26:	4413      	add	r3, r2
 810be28:	3304      	adds	r3, #4
 810be2a:	461a      	mov	r2, r3
 810be2c:	68f8      	ldr	r0, [r7, #12]
 810be2e:	f000 fafb 	bl	810c428 <etharp_request_dst>
 810be32:	4603      	mov	r3, r0
 810be34:	2b00      	cmp	r3, #0
 810be36:	d109      	bne.n	810be4c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 810be38:	79fa      	ldrb	r2, [r7, #7]
 810be3a:	4911      	ldr	r1, [pc, #68]	@ (810be80 <etharp_output_to_arp_index+0x124>)
 810be3c:	4613      	mov	r3, r2
 810be3e:	005b      	lsls	r3, r3, #1
 810be40:	4413      	add	r3, r2
 810be42:	00db      	lsls	r3, r3, #3
 810be44:	440b      	add	r3, r1
 810be46:	3314      	adds	r3, #20
 810be48:	2203      	movs	r2, #3
 810be4a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 810be4c:	68fb      	ldr	r3, [r7, #12]
 810be4e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 810be52:	79fa      	ldrb	r2, [r7, #7]
 810be54:	4613      	mov	r3, r2
 810be56:	005b      	lsls	r3, r3, #1
 810be58:	4413      	add	r3, r2
 810be5a:	00db      	lsls	r3, r3, #3
 810be5c:	3308      	adds	r3, #8
 810be5e:	4a08      	ldr	r2, [pc, #32]	@ (810be80 <etharp_output_to_arp_index+0x124>)
 810be60:	4413      	add	r3, r2
 810be62:	3304      	adds	r3, #4
 810be64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810be68:	9200      	str	r2, [sp, #0]
 810be6a:	460a      	mov	r2, r1
 810be6c:	68b9      	ldr	r1, [r7, #8]
 810be6e:	68f8      	ldr	r0, [r7, #12]
 810be70:	f000 fb9c 	bl	810c5ac <ethernet_output>
 810be74:	4603      	mov	r3, r0
}
 810be76:	4618      	mov	r0, r3
 810be78:	3710      	adds	r7, #16
 810be7a:	46bd      	mov	sp, r7
 810be7c:	bd80      	pop	{r7, pc}
 810be7e:	bf00      	nop
 810be80:	1000b088 	.word	0x1000b088
 810be84:	08116c68 	.word	0x08116c68
 810be88:	08116e18 	.word	0x08116e18
 810be8c:	08116d20 	.word	0x08116d20

0810be90 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 810be90:	b580      	push	{r7, lr}
 810be92:	b08a      	sub	sp, #40	@ 0x28
 810be94:	af02      	add	r7, sp, #8
 810be96:	60f8      	str	r0, [r7, #12]
 810be98:	60b9      	str	r1, [r7, #8]
 810be9a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 810be9c:	687b      	ldr	r3, [r7, #4]
 810be9e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 810bea0:	68fb      	ldr	r3, [r7, #12]
 810bea2:	2b00      	cmp	r3, #0
 810bea4:	d106      	bne.n	810beb4 <etharp_output+0x24>
 810bea6:	4b73      	ldr	r3, [pc, #460]	@ (810c074 <etharp_output+0x1e4>)
 810bea8:	f240 321e 	movw	r2, #798	@ 0x31e
 810beac:	4972      	ldr	r1, [pc, #456]	@ (810c078 <etharp_output+0x1e8>)
 810beae:	4873      	ldr	r0, [pc, #460]	@ (810c07c <etharp_output+0x1ec>)
 810beb0:	f009 ff66 	bl	8115d80 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 810beb4:	68bb      	ldr	r3, [r7, #8]
 810beb6:	2b00      	cmp	r3, #0
 810beb8:	d106      	bne.n	810bec8 <etharp_output+0x38>
 810beba:	4b6e      	ldr	r3, [pc, #440]	@ (810c074 <etharp_output+0x1e4>)
 810bebc:	f240 321f 	movw	r2, #799	@ 0x31f
 810bec0:	496f      	ldr	r1, [pc, #444]	@ (810c080 <etharp_output+0x1f0>)
 810bec2:	486e      	ldr	r0, [pc, #440]	@ (810c07c <etharp_output+0x1ec>)
 810bec4:	f009 ff5c 	bl	8115d80 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 810bec8:	687b      	ldr	r3, [r7, #4]
 810beca:	2b00      	cmp	r3, #0
 810becc:	d106      	bne.n	810bedc <etharp_output+0x4c>
 810bece:	4b69      	ldr	r3, [pc, #420]	@ (810c074 <etharp_output+0x1e4>)
 810bed0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 810bed4:	496b      	ldr	r1, [pc, #428]	@ (810c084 <etharp_output+0x1f4>)
 810bed6:	4869      	ldr	r0, [pc, #420]	@ (810c07c <etharp_output+0x1ec>)
 810bed8:	f009 ff52 	bl	8115d80 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 810bedc:	687b      	ldr	r3, [r7, #4]
 810bede:	681b      	ldr	r3, [r3, #0]
 810bee0:	68f9      	ldr	r1, [r7, #12]
 810bee2:	4618      	mov	r0, r3
 810bee4:	f001 f8c8 	bl	810d078 <ip4_addr_isbroadcast_u32>
 810bee8:	4603      	mov	r3, r0
 810beea:	2b00      	cmp	r3, #0
 810beec:	d002      	beq.n	810bef4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 810beee:	4b66      	ldr	r3, [pc, #408]	@ (810c088 <etharp_output+0x1f8>)
 810bef0:	61fb      	str	r3, [r7, #28]
 810bef2:	e0af      	b.n	810c054 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 810bef4:	687b      	ldr	r3, [r7, #4]
 810bef6:	681b      	ldr	r3, [r3, #0]
 810bef8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 810befc:	2be0      	cmp	r3, #224	@ 0xe0
 810befe:	d118      	bne.n	810bf32 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 810bf00:	2301      	movs	r3, #1
 810bf02:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 810bf04:	2300      	movs	r3, #0
 810bf06:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 810bf08:	235e      	movs	r3, #94	@ 0x5e
 810bf0a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 810bf0c:	687b      	ldr	r3, [r7, #4]
 810bf0e:	3301      	adds	r3, #1
 810bf10:	781b      	ldrb	r3, [r3, #0]
 810bf12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810bf16:	b2db      	uxtb	r3, r3
 810bf18:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 810bf1a:	687b      	ldr	r3, [r7, #4]
 810bf1c:	3302      	adds	r3, #2
 810bf1e:	781b      	ldrb	r3, [r3, #0]
 810bf20:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 810bf22:	687b      	ldr	r3, [r7, #4]
 810bf24:	3303      	adds	r3, #3
 810bf26:	781b      	ldrb	r3, [r3, #0]
 810bf28:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 810bf2a:	f107 0310 	add.w	r3, r7, #16
 810bf2e:	61fb      	str	r3, [r7, #28]
 810bf30:	e090      	b.n	810c054 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 810bf32:	687b      	ldr	r3, [r7, #4]
 810bf34:	681a      	ldr	r2, [r3, #0]
 810bf36:	68fb      	ldr	r3, [r7, #12]
 810bf38:	3304      	adds	r3, #4
 810bf3a:	681b      	ldr	r3, [r3, #0]
 810bf3c:	405a      	eors	r2, r3
 810bf3e:	68fb      	ldr	r3, [r7, #12]
 810bf40:	3308      	adds	r3, #8
 810bf42:	681b      	ldr	r3, [r3, #0]
 810bf44:	4013      	ands	r3, r2
 810bf46:	2b00      	cmp	r3, #0
 810bf48:	d012      	beq.n	810bf70 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 810bf4a:	687b      	ldr	r3, [r7, #4]
 810bf4c:	681b      	ldr	r3, [r3, #0]
 810bf4e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 810bf50:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 810bf54:	4293      	cmp	r3, r2
 810bf56:	d00b      	beq.n	810bf70 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 810bf58:	68fb      	ldr	r3, [r7, #12]
 810bf5a:	330c      	adds	r3, #12
 810bf5c:	681b      	ldr	r3, [r3, #0]
 810bf5e:	2b00      	cmp	r3, #0
 810bf60:	d003      	beq.n	810bf6a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 810bf62:	68fb      	ldr	r3, [r7, #12]
 810bf64:	330c      	adds	r3, #12
 810bf66:	61bb      	str	r3, [r7, #24]
 810bf68:	e002      	b.n	810bf70 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 810bf6a:	f06f 0303 	mvn.w	r3, #3
 810bf6e:	e07d      	b.n	810c06c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 810bf70:	4b46      	ldr	r3, [pc, #280]	@ (810c08c <etharp_output+0x1fc>)
 810bf72:	781b      	ldrb	r3, [r3, #0]
 810bf74:	4619      	mov	r1, r3
 810bf76:	4a46      	ldr	r2, [pc, #280]	@ (810c090 <etharp_output+0x200>)
 810bf78:	460b      	mov	r3, r1
 810bf7a:	005b      	lsls	r3, r3, #1
 810bf7c:	440b      	add	r3, r1
 810bf7e:	00db      	lsls	r3, r3, #3
 810bf80:	4413      	add	r3, r2
 810bf82:	3314      	adds	r3, #20
 810bf84:	781b      	ldrb	r3, [r3, #0]
 810bf86:	2b01      	cmp	r3, #1
 810bf88:	d925      	bls.n	810bfd6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 810bf8a:	4b40      	ldr	r3, [pc, #256]	@ (810c08c <etharp_output+0x1fc>)
 810bf8c:	781b      	ldrb	r3, [r3, #0]
 810bf8e:	4619      	mov	r1, r3
 810bf90:	4a3f      	ldr	r2, [pc, #252]	@ (810c090 <etharp_output+0x200>)
 810bf92:	460b      	mov	r3, r1
 810bf94:	005b      	lsls	r3, r3, #1
 810bf96:	440b      	add	r3, r1
 810bf98:	00db      	lsls	r3, r3, #3
 810bf9a:	4413      	add	r3, r2
 810bf9c:	3308      	adds	r3, #8
 810bf9e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 810bfa0:	68fa      	ldr	r2, [r7, #12]
 810bfa2:	429a      	cmp	r2, r3
 810bfa4:	d117      	bne.n	810bfd6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 810bfa6:	69bb      	ldr	r3, [r7, #24]
 810bfa8:	681a      	ldr	r2, [r3, #0]
 810bfaa:	4b38      	ldr	r3, [pc, #224]	@ (810c08c <etharp_output+0x1fc>)
 810bfac:	781b      	ldrb	r3, [r3, #0]
 810bfae:	4618      	mov	r0, r3
 810bfb0:	4937      	ldr	r1, [pc, #220]	@ (810c090 <etharp_output+0x200>)
 810bfb2:	4603      	mov	r3, r0
 810bfb4:	005b      	lsls	r3, r3, #1
 810bfb6:	4403      	add	r3, r0
 810bfb8:	00db      	lsls	r3, r3, #3
 810bfba:	440b      	add	r3, r1
 810bfbc:	3304      	adds	r3, #4
 810bfbe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 810bfc0:	429a      	cmp	r2, r3
 810bfc2:	d108      	bne.n	810bfd6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 810bfc4:	4b31      	ldr	r3, [pc, #196]	@ (810c08c <etharp_output+0x1fc>)
 810bfc6:	781b      	ldrb	r3, [r3, #0]
 810bfc8:	461a      	mov	r2, r3
 810bfca:	68b9      	ldr	r1, [r7, #8]
 810bfcc:	68f8      	ldr	r0, [r7, #12]
 810bfce:	f7ff fec5 	bl	810bd5c <etharp_output_to_arp_index>
 810bfd2:	4603      	mov	r3, r0
 810bfd4:	e04a      	b.n	810c06c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 810bfd6:	2300      	movs	r3, #0
 810bfd8:	75fb      	strb	r3, [r7, #23]
 810bfda:	e031      	b.n	810c040 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 810bfdc:	7dfa      	ldrb	r2, [r7, #23]
 810bfde:	492c      	ldr	r1, [pc, #176]	@ (810c090 <etharp_output+0x200>)
 810bfe0:	4613      	mov	r3, r2
 810bfe2:	005b      	lsls	r3, r3, #1
 810bfe4:	4413      	add	r3, r2
 810bfe6:	00db      	lsls	r3, r3, #3
 810bfe8:	440b      	add	r3, r1
 810bfea:	3314      	adds	r3, #20
 810bfec:	781b      	ldrb	r3, [r3, #0]
 810bfee:	2b01      	cmp	r3, #1
 810bff0:	d923      	bls.n	810c03a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 810bff2:	7dfa      	ldrb	r2, [r7, #23]
 810bff4:	4926      	ldr	r1, [pc, #152]	@ (810c090 <etharp_output+0x200>)
 810bff6:	4613      	mov	r3, r2
 810bff8:	005b      	lsls	r3, r3, #1
 810bffa:	4413      	add	r3, r2
 810bffc:	00db      	lsls	r3, r3, #3
 810bffe:	440b      	add	r3, r1
 810c000:	3308      	adds	r3, #8
 810c002:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 810c004:	68fa      	ldr	r2, [r7, #12]
 810c006:	429a      	cmp	r2, r3
 810c008:	d117      	bne.n	810c03a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 810c00a:	69bb      	ldr	r3, [r7, #24]
 810c00c:	6819      	ldr	r1, [r3, #0]
 810c00e:	7dfa      	ldrb	r2, [r7, #23]
 810c010:	481f      	ldr	r0, [pc, #124]	@ (810c090 <etharp_output+0x200>)
 810c012:	4613      	mov	r3, r2
 810c014:	005b      	lsls	r3, r3, #1
 810c016:	4413      	add	r3, r2
 810c018:	00db      	lsls	r3, r3, #3
 810c01a:	4403      	add	r3, r0
 810c01c:	3304      	adds	r3, #4
 810c01e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 810c020:	4299      	cmp	r1, r3
 810c022:	d10a      	bne.n	810c03a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 810c024:	4a19      	ldr	r2, [pc, #100]	@ (810c08c <etharp_output+0x1fc>)
 810c026:	7dfb      	ldrb	r3, [r7, #23]
 810c028:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 810c02a:	7dfb      	ldrb	r3, [r7, #23]
 810c02c:	461a      	mov	r2, r3
 810c02e:	68b9      	ldr	r1, [r7, #8]
 810c030:	68f8      	ldr	r0, [r7, #12]
 810c032:	f7ff fe93 	bl	810bd5c <etharp_output_to_arp_index>
 810c036:	4603      	mov	r3, r0
 810c038:	e018      	b.n	810c06c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 810c03a:	7dfb      	ldrb	r3, [r7, #23]
 810c03c:	3301      	adds	r3, #1
 810c03e:	75fb      	strb	r3, [r7, #23]
 810c040:	7dfb      	ldrb	r3, [r7, #23]
 810c042:	2b09      	cmp	r3, #9
 810c044:	d9ca      	bls.n	810bfdc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 810c046:	68ba      	ldr	r2, [r7, #8]
 810c048:	69b9      	ldr	r1, [r7, #24]
 810c04a:	68f8      	ldr	r0, [r7, #12]
 810c04c:	f000 f822 	bl	810c094 <etharp_query>
 810c050:	4603      	mov	r3, r0
 810c052:	e00b      	b.n	810c06c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 810c054:	68fb      	ldr	r3, [r7, #12]
 810c056:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 810c05a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810c05e:	9300      	str	r3, [sp, #0]
 810c060:	69fb      	ldr	r3, [r7, #28]
 810c062:	68b9      	ldr	r1, [r7, #8]
 810c064:	68f8      	ldr	r0, [r7, #12]
 810c066:	f000 faa1 	bl	810c5ac <ethernet_output>
 810c06a:	4603      	mov	r3, r0
}
 810c06c:	4618      	mov	r0, r3
 810c06e:	3720      	adds	r7, #32
 810c070:	46bd      	mov	sp, r7
 810c072:	bd80      	pop	{r7, pc}
 810c074:	08116c68 	.word	0x08116c68
 810c078:	08116df8 	.word	0x08116df8
 810c07c:	08116d20 	.word	0x08116d20
 810c080:	08116e48 	.word	0x08116e48
 810c084:	08116de8 	.word	0x08116de8
 810c088:	08119b2c 	.word	0x08119b2c
 810c08c:	1000b178 	.word	0x1000b178
 810c090:	1000b088 	.word	0x1000b088

0810c094 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 810c094:	b580      	push	{r7, lr}
 810c096:	b08c      	sub	sp, #48	@ 0x30
 810c098:	af02      	add	r7, sp, #8
 810c09a:	60f8      	str	r0, [r7, #12]
 810c09c:	60b9      	str	r1, [r7, #8]
 810c09e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 810c0a0:	68fb      	ldr	r3, [r7, #12]
 810c0a2:	3326      	adds	r3, #38	@ 0x26
 810c0a4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 810c0a6:	23ff      	movs	r3, #255	@ 0xff
 810c0a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 810c0ac:	2300      	movs	r3, #0
 810c0ae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 810c0b0:	68bb      	ldr	r3, [r7, #8]
 810c0b2:	681b      	ldr	r3, [r3, #0]
 810c0b4:	68f9      	ldr	r1, [r7, #12]
 810c0b6:	4618      	mov	r0, r3
 810c0b8:	f000 ffde 	bl	810d078 <ip4_addr_isbroadcast_u32>
 810c0bc:	4603      	mov	r3, r0
 810c0be:	2b00      	cmp	r3, #0
 810c0c0:	d10c      	bne.n	810c0dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 810c0c2:	68bb      	ldr	r3, [r7, #8]
 810c0c4:	681b      	ldr	r3, [r3, #0]
 810c0c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 810c0ca:	2be0      	cmp	r3, #224	@ 0xe0
 810c0cc:	d006      	beq.n	810c0dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 810c0ce:	68bb      	ldr	r3, [r7, #8]
 810c0d0:	2b00      	cmp	r3, #0
 810c0d2:	d003      	beq.n	810c0dc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 810c0d4:	68bb      	ldr	r3, [r7, #8]
 810c0d6:	681b      	ldr	r3, [r3, #0]
 810c0d8:	2b00      	cmp	r3, #0
 810c0da:	d102      	bne.n	810c0e2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 810c0dc:	f06f 030f 	mvn.w	r3, #15
 810c0e0:	e101      	b.n	810c2e6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 810c0e2:	68fa      	ldr	r2, [r7, #12]
 810c0e4:	2101      	movs	r1, #1
 810c0e6:	68b8      	ldr	r0, [r7, #8]
 810c0e8:	f7ff fb60 	bl	810b7ac <etharp_find_entry>
 810c0ec:	4603      	mov	r3, r0
 810c0ee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 810c0f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 810c0f4:	2b00      	cmp	r3, #0
 810c0f6:	da02      	bge.n	810c0fe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 810c0f8:	8a7b      	ldrh	r3, [r7, #18]
 810c0fa:	b25b      	sxtb	r3, r3
 810c0fc:	e0f3      	b.n	810c2e6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 810c0fe:	8a7b      	ldrh	r3, [r7, #18]
 810c100:	2b7e      	cmp	r3, #126	@ 0x7e
 810c102:	d906      	bls.n	810c112 <etharp_query+0x7e>
 810c104:	4b7a      	ldr	r3, [pc, #488]	@ (810c2f0 <etharp_query+0x25c>)
 810c106:	f240 32c1 	movw	r2, #961	@ 0x3c1
 810c10a:	497a      	ldr	r1, [pc, #488]	@ (810c2f4 <etharp_query+0x260>)
 810c10c:	487a      	ldr	r0, [pc, #488]	@ (810c2f8 <etharp_query+0x264>)
 810c10e:	f009 fe37 	bl	8115d80 <iprintf>
  i = (netif_addr_idx_t)i_err;
 810c112:	8a7b      	ldrh	r3, [r7, #18]
 810c114:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 810c116:	7c7a      	ldrb	r2, [r7, #17]
 810c118:	4978      	ldr	r1, [pc, #480]	@ (810c2fc <etharp_query+0x268>)
 810c11a:	4613      	mov	r3, r2
 810c11c:	005b      	lsls	r3, r3, #1
 810c11e:	4413      	add	r3, r2
 810c120:	00db      	lsls	r3, r3, #3
 810c122:	440b      	add	r3, r1
 810c124:	3314      	adds	r3, #20
 810c126:	781b      	ldrb	r3, [r3, #0]
 810c128:	2b00      	cmp	r3, #0
 810c12a:	d115      	bne.n	810c158 <etharp_query+0xc4>
    is_new_entry = 1;
 810c12c:	2301      	movs	r3, #1
 810c12e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 810c130:	7c7a      	ldrb	r2, [r7, #17]
 810c132:	4972      	ldr	r1, [pc, #456]	@ (810c2fc <etharp_query+0x268>)
 810c134:	4613      	mov	r3, r2
 810c136:	005b      	lsls	r3, r3, #1
 810c138:	4413      	add	r3, r2
 810c13a:	00db      	lsls	r3, r3, #3
 810c13c:	440b      	add	r3, r1
 810c13e:	3314      	adds	r3, #20
 810c140:	2201      	movs	r2, #1
 810c142:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 810c144:	7c7a      	ldrb	r2, [r7, #17]
 810c146:	496d      	ldr	r1, [pc, #436]	@ (810c2fc <etharp_query+0x268>)
 810c148:	4613      	mov	r3, r2
 810c14a:	005b      	lsls	r3, r3, #1
 810c14c:	4413      	add	r3, r2
 810c14e:	00db      	lsls	r3, r3, #3
 810c150:	440b      	add	r3, r1
 810c152:	3308      	adds	r3, #8
 810c154:	68fa      	ldr	r2, [r7, #12]
 810c156:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 810c158:	7c7a      	ldrb	r2, [r7, #17]
 810c15a:	4968      	ldr	r1, [pc, #416]	@ (810c2fc <etharp_query+0x268>)
 810c15c:	4613      	mov	r3, r2
 810c15e:	005b      	lsls	r3, r3, #1
 810c160:	4413      	add	r3, r2
 810c162:	00db      	lsls	r3, r3, #3
 810c164:	440b      	add	r3, r1
 810c166:	3314      	adds	r3, #20
 810c168:	781b      	ldrb	r3, [r3, #0]
 810c16a:	2b01      	cmp	r3, #1
 810c16c:	d011      	beq.n	810c192 <etharp_query+0xfe>
 810c16e:	7c7a      	ldrb	r2, [r7, #17]
 810c170:	4962      	ldr	r1, [pc, #392]	@ (810c2fc <etharp_query+0x268>)
 810c172:	4613      	mov	r3, r2
 810c174:	005b      	lsls	r3, r3, #1
 810c176:	4413      	add	r3, r2
 810c178:	00db      	lsls	r3, r3, #3
 810c17a:	440b      	add	r3, r1
 810c17c:	3314      	adds	r3, #20
 810c17e:	781b      	ldrb	r3, [r3, #0]
 810c180:	2b01      	cmp	r3, #1
 810c182:	d806      	bhi.n	810c192 <etharp_query+0xfe>
 810c184:	4b5a      	ldr	r3, [pc, #360]	@ (810c2f0 <etharp_query+0x25c>)
 810c186:	f240 32cd 	movw	r2, #973	@ 0x3cd
 810c18a:	495d      	ldr	r1, [pc, #372]	@ (810c300 <etharp_query+0x26c>)
 810c18c:	485a      	ldr	r0, [pc, #360]	@ (810c2f8 <etharp_query+0x264>)
 810c18e:	f009 fdf7 	bl	8115d80 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 810c192:	6a3b      	ldr	r3, [r7, #32]
 810c194:	2b00      	cmp	r3, #0
 810c196:	d102      	bne.n	810c19e <etharp_query+0x10a>
 810c198:	687b      	ldr	r3, [r7, #4]
 810c19a:	2b00      	cmp	r3, #0
 810c19c:	d10c      	bne.n	810c1b8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 810c19e:	68b9      	ldr	r1, [r7, #8]
 810c1a0:	68f8      	ldr	r0, [r7, #12]
 810c1a2:	f000 f963 	bl	810c46c <etharp_request>
 810c1a6:	4603      	mov	r3, r0
 810c1a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 810c1ac:	687b      	ldr	r3, [r7, #4]
 810c1ae:	2b00      	cmp	r3, #0
 810c1b0:	d102      	bne.n	810c1b8 <etharp_query+0x124>
      return result;
 810c1b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 810c1b6:	e096      	b.n	810c2e6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 810c1b8:	687b      	ldr	r3, [r7, #4]
 810c1ba:	2b00      	cmp	r3, #0
 810c1bc:	d106      	bne.n	810c1cc <etharp_query+0x138>
 810c1be:	4b4c      	ldr	r3, [pc, #304]	@ (810c2f0 <etharp_query+0x25c>)
 810c1c0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 810c1c4:	494f      	ldr	r1, [pc, #316]	@ (810c304 <etharp_query+0x270>)
 810c1c6:	484c      	ldr	r0, [pc, #304]	@ (810c2f8 <etharp_query+0x264>)
 810c1c8:	f009 fdda 	bl	8115d80 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 810c1cc:	7c7a      	ldrb	r2, [r7, #17]
 810c1ce:	494b      	ldr	r1, [pc, #300]	@ (810c2fc <etharp_query+0x268>)
 810c1d0:	4613      	mov	r3, r2
 810c1d2:	005b      	lsls	r3, r3, #1
 810c1d4:	4413      	add	r3, r2
 810c1d6:	00db      	lsls	r3, r3, #3
 810c1d8:	440b      	add	r3, r1
 810c1da:	3314      	adds	r3, #20
 810c1dc:	781b      	ldrb	r3, [r3, #0]
 810c1de:	2b01      	cmp	r3, #1
 810c1e0:	d917      	bls.n	810c212 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 810c1e2:	4a49      	ldr	r2, [pc, #292]	@ (810c308 <etharp_query+0x274>)
 810c1e4:	7c7b      	ldrb	r3, [r7, #17]
 810c1e6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 810c1e8:	7c7a      	ldrb	r2, [r7, #17]
 810c1ea:	4613      	mov	r3, r2
 810c1ec:	005b      	lsls	r3, r3, #1
 810c1ee:	4413      	add	r3, r2
 810c1f0:	00db      	lsls	r3, r3, #3
 810c1f2:	3308      	adds	r3, #8
 810c1f4:	4a41      	ldr	r2, [pc, #260]	@ (810c2fc <etharp_query+0x268>)
 810c1f6:	4413      	add	r3, r2
 810c1f8:	3304      	adds	r3, #4
 810c1fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810c1fe:	9200      	str	r2, [sp, #0]
 810c200:	697a      	ldr	r2, [r7, #20]
 810c202:	6879      	ldr	r1, [r7, #4]
 810c204:	68f8      	ldr	r0, [r7, #12]
 810c206:	f000 f9d1 	bl	810c5ac <ethernet_output>
 810c20a:	4603      	mov	r3, r0
 810c20c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 810c210:	e067      	b.n	810c2e2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 810c212:	7c7a      	ldrb	r2, [r7, #17]
 810c214:	4939      	ldr	r1, [pc, #228]	@ (810c2fc <etharp_query+0x268>)
 810c216:	4613      	mov	r3, r2
 810c218:	005b      	lsls	r3, r3, #1
 810c21a:	4413      	add	r3, r2
 810c21c:	00db      	lsls	r3, r3, #3
 810c21e:	440b      	add	r3, r1
 810c220:	3314      	adds	r3, #20
 810c222:	781b      	ldrb	r3, [r3, #0]
 810c224:	2b01      	cmp	r3, #1
 810c226:	d15c      	bne.n	810c2e2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 810c228:	2300      	movs	r3, #0
 810c22a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 810c22c:	687b      	ldr	r3, [r7, #4]
 810c22e:	61fb      	str	r3, [r7, #28]
    while (p) {
 810c230:	e01c      	b.n	810c26c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 810c232:	69fb      	ldr	r3, [r7, #28]
 810c234:	895a      	ldrh	r2, [r3, #10]
 810c236:	69fb      	ldr	r3, [r7, #28]
 810c238:	891b      	ldrh	r3, [r3, #8]
 810c23a:	429a      	cmp	r2, r3
 810c23c:	d10a      	bne.n	810c254 <etharp_query+0x1c0>
 810c23e:	69fb      	ldr	r3, [r7, #28]
 810c240:	681b      	ldr	r3, [r3, #0]
 810c242:	2b00      	cmp	r3, #0
 810c244:	d006      	beq.n	810c254 <etharp_query+0x1c0>
 810c246:	4b2a      	ldr	r3, [pc, #168]	@ (810c2f0 <etharp_query+0x25c>)
 810c248:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 810c24c:	492f      	ldr	r1, [pc, #188]	@ (810c30c <etharp_query+0x278>)
 810c24e:	482a      	ldr	r0, [pc, #168]	@ (810c2f8 <etharp_query+0x264>)
 810c250:	f009 fd96 	bl	8115d80 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 810c254:	69fb      	ldr	r3, [r7, #28]
 810c256:	7b1b      	ldrb	r3, [r3, #12]
 810c258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810c25c:	2b00      	cmp	r3, #0
 810c25e:	d002      	beq.n	810c266 <etharp_query+0x1d2>
        copy_needed = 1;
 810c260:	2301      	movs	r3, #1
 810c262:	61bb      	str	r3, [r7, #24]
        break;
 810c264:	e005      	b.n	810c272 <etharp_query+0x1de>
      }
      p = p->next;
 810c266:	69fb      	ldr	r3, [r7, #28]
 810c268:	681b      	ldr	r3, [r3, #0]
 810c26a:	61fb      	str	r3, [r7, #28]
    while (p) {
 810c26c:	69fb      	ldr	r3, [r7, #28]
 810c26e:	2b00      	cmp	r3, #0
 810c270:	d1df      	bne.n	810c232 <etharp_query+0x19e>
    }
    if (copy_needed) {
 810c272:	69bb      	ldr	r3, [r7, #24]
 810c274:	2b00      	cmp	r3, #0
 810c276:	d007      	beq.n	810c288 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 810c278:	687a      	ldr	r2, [r7, #4]
 810c27a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 810c27e:	200e      	movs	r0, #14
 810c280:	f003 fb7a 	bl	810f978 <pbuf_clone>
 810c284:	61f8      	str	r0, [r7, #28]
 810c286:	e004      	b.n	810c292 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 810c288:	687b      	ldr	r3, [r7, #4]
 810c28a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 810c28c:	69f8      	ldr	r0, [r7, #28]
 810c28e:	f003 f9b1 	bl	810f5f4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 810c292:	69fb      	ldr	r3, [r7, #28]
 810c294:	2b00      	cmp	r3, #0
 810c296:	d021      	beq.n	810c2dc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 810c298:	7c7a      	ldrb	r2, [r7, #17]
 810c29a:	4918      	ldr	r1, [pc, #96]	@ (810c2fc <etharp_query+0x268>)
 810c29c:	4613      	mov	r3, r2
 810c29e:	005b      	lsls	r3, r3, #1
 810c2a0:	4413      	add	r3, r2
 810c2a2:	00db      	lsls	r3, r3, #3
 810c2a4:	440b      	add	r3, r1
 810c2a6:	681b      	ldr	r3, [r3, #0]
 810c2a8:	2b00      	cmp	r3, #0
 810c2aa:	d00a      	beq.n	810c2c2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 810c2ac:	7c7a      	ldrb	r2, [r7, #17]
 810c2ae:	4913      	ldr	r1, [pc, #76]	@ (810c2fc <etharp_query+0x268>)
 810c2b0:	4613      	mov	r3, r2
 810c2b2:	005b      	lsls	r3, r3, #1
 810c2b4:	4413      	add	r3, r2
 810c2b6:	00db      	lsls	r3, r3, #3
 810c2b8:	440b      	add	r3, r1
 810c2ba:	681b      	ldr	r3, [r3, #0]
 810c2bc:	4618      	mov	r0, r3
 810c2be:	f003 f8f3 	bl	810f4a8 <pbuf_free>
      }
      arp_table[i].q = p;
 810c2c2:	7c7a      	ldrb	r2, [r7, #17]
 810c2c4:	490d      	ldr	r1, [pc, #52]	@ (810c2fc <etharp_query+0x268>)
 810c2c6:	4613      	mov	r3, r2
 810c2c8:	005b      	lsls	r3, r3, #1
 810c2ca:	4413      	add	r3, r2
 810c2cc:	00db      	lsls	r3, r3, #3
 810c2ce:	440b      	add	r3, r1
 810c2d0:	69fa      	ldr	r2, [r7, #28]
 810c2d2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 810c2d4:	2300      	movs	r3, #0
 810c2d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 810c2da:	e002      	b.n	810c2e2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 810c2dc:	23ff      	movs	r3, #255	@ 0xff
 810c2de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 810c2e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 810c2e6:	4618      	mov	r0, r3
 810c2e8:	3728      	adds	r7, #40	@ 0x28
 810c2ea:	46bd      	mov	sp, r7
 810c2ec:	bd80      	pop	{r7, pc}
 810c2ee:	bf00      	nop
 810c2f0:	08116c68 	.word	0x08116c68
 810c2f4:	08116e54 	.word	0x08116e54
 810c2f8:	08116d20 	.word	0x08116d20
 810c2fc:	1000b088 	.word	0x1000b088
 810c300:	08116e64 	.word	0x08116e64
 810c304:	08116e48 	.word	0x08116e48
 810c308:	1000b178 	.word	0x1000b178
 810c30c:	08116e8c 	.word	0x08116e8c

0810c310 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 810c310:	b580      	push	{r7, lr}
 810c312:	b08a      	sub	sp, #40	@ 0x28
 810c314:	af02      	add	r7, sp, #8
 810c316:	60f8      	str	r0, [r7, #12]
 810c318:	60b9      	str	r1, [r7, #8]
 810c31a:	607a      	str	r2, [r7, #4]
 810c31c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 810c31e:	2300      	movs	r3, #0
 810c320:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 810c322:	68fb      	ldr	r3, [r7, #12]
 810c324:	2b00      	cmp	r3, #0
 810c326:	d106      	bne.n	810c336 <etharp_raw+0x26>
 810c328:	4b3a      	ldr	r3, [pc, #232]	@ (810c414 <etharp_raw+0x104>)
 810c32a:	f240 4257 	movw	r2, #1111	@ 0x457
 810c32e:	493a      	ldr	r1, [pc, #232]	@ (810c418 <etharp_raw+0x108>)
 810c330:	483a      	ldr	r0, [pc, #232]	@ (810c41c <etharp_raw+0x10c>)
 810c332:	f009 fd25 	bl	8115d80 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 810c336:	f44f 7220 	mov.w	r2, #640	@ 0x280
 810c33a:	211c      	movs	r1, #28
 810c33c:	200e      	movs	r0, #14
 810c33e:	f002 fdcf 	bl	810eee0 <pbuf_alloc>
 810c342:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 810c344:	69bb      	ldr	r3, [r7, #24]
 810c346:	2b00      	cmp	r3, #0
 810c348:	d102      	bne.n	810c350 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 810c34a:	f04f 33ff 	mov.w	r3, #4294967295
 810c34e:	e05d      	b.n	810c40c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 810c350:	69bb      	ldr	r3, [r7, #24]
 810c352:	895b      	ldrh	r3, [r3, #10]
 810c354:	2b1b      	cmp	r3, #27
 810c356:	d806      	bhi.n	810c366 <etharp_raw+0x56>
 810c358:	4b2e      	ldr	r3, [pc, #184]	@ (810c414 <etharp_raw+0x104>)
 810c35a:	f240 4262 	movw	r2, #1122	@ 0x462
 810c35e:	4930      	ldr	r1, [pc, #192]	@ (810c420 <etharp_raw+0x110>)
 810c360:	482e      	ldr	r0, [pc, #184]	@ (810c41c <etharp_raw+0x10c>)
 810c362:	f009 fd0d 	bl	8115d80 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 810c366:	69bb      	ldr	r3, [r7, #24]
 810c368:	685b      	ldr	r3, [r3, #4]
 810c36a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 810c36c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 810c36e:	4618      	mov	r0, r3
 810c370:	f7ff f914 	bl	810b59c <lwip_htons>
 810c374:	4603      	mov	r3, r0
 810c376:	461a      	mov	r2, r3
 810c378:	697b      	ldr	r3, [r7, #20]
 810c37a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 810c37c:	68fb      	ldr	r3, [r7, #12]
 810c37e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810c382:	2b06      	cmp	r3, #6
 810c384:	d006      	beq.n	810c394 <etharp_raw+0x84>
 810c386:	4b23      	ldr	r3, [pc, #140]	@ (810c414 <etharp_raw+0x104>)
 810c388:	f240 4269 	movw	r2, #1129	@ 0x469
 810c38c:	4925      	ldr	r1, [pc, #148]	@ (810c424 <etharp_raw+0x114>)
 810c38e:	4823      	ldr	r0, [pc, #140]	@ (810c41c <etharp_raw+0x10c>)
 810c390:	f009 fcf6 	bl	8115d80 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 810c394:	697b      	ldr	r3, [r7, #20]
 810c396:	3308      	adds	r3, #8
 810c398:	2206      	movs	r2, #6
 810c39a:	6839      	ldr	r1, [r7, #0]
 810c39c:	4618      	mov	r0, r3
 810c39e:	f009 fe8e 	bl	81160be <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 810c3a2:	697b      	ldr	r3, [r7, #20]
 810c3a4:	3312      	adds	r3, #18
 810c3a6:	2206      	movs	r2, #6
 810c3a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810c3aa:	4618      	mov	r0, r3
 810c3ac:	f009 fe87 	bl	81160be <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 810c3b0:	697b      	ldr	r3, [r7, #20]
 810c3b2:	330e      	adds	r3, #14
 810c3b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810c3b6:	6812      	ldr	r2, [r2, #0]
 810c3b8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 810c3ba:	697b      	ldr	r3, [r7, #20]
 810c3bc:	3318      	adds	r3, #24
 810c3be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810c3c0:	6812      	ldr	r2, [r2, #0]
 810c3c2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 810c3c4:	697b      	ldr	r3, [r7, #20]
 810c3c6:	2200      	movs	r2, #0
 810c3c8:	701a      	strb	r2, [r3, #0]
 810c3ca:	2200      	movs	r2, #0
 810c3cc:	f042 0201 	orr.w	r2, r2, #1
 810c3d0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 810c3d2:	697b      	ldr	r3, [r7, #20]
 810c3d4:	2200      	movs	r2, #0
 810c3d6:	f042 0208 	orr.w	r2, r2, #8
 810c3da:	709a      	strb	r2, [r3, #2]
 810c3dc:	2200      	movs	r2, #0
 810c3de:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 810c3e0:	697b      	ldr	r3, [r7, #20]
 810c3e2:	2206      	movs	r2, #6
 810c3e4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 810c3e6:	697b      	ldr	r3, [r7, #20]
 810c3e8:	2204      	movs	r2, #4
 810c3ea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 810c3ec:	f640 0306 	movw	r3, #2054	@ 0x806
 810c3f0:	9300      	str	r3, [sp, #0]
 810c3f2:	687b      	ldr	r3, [r7, #4]
 810c3f4:	68ba      	ldr	r2, [r7, #8]
 810c3f6:	69b9      	ldr	r1, [r7, #24]
 810c3f8:	68f8      	ldr	r0, [r7, #12]
 810c3fa:	f000 f8d7 	bl	810c5ac <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 810c3fe:	69b8      	ldr	r0, [r7, #24]
 810c400:	f003 f852 	bl	810f4a8 <pbuf_free>
  p = NULL;
 810c404:	2300      	movs	r3, #0
 810c406:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 810c408:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 810c40c:	4618      	mov	r0, r3
 810c40e:	3720      	adds	r7, #32
 810c410:	46bd      	mov	sp, r7
 810c412:	bd80      	pop	{r7, pc}
 810c414:	08116c68 	.word	0x08116c68
 810c418:	08116df8 	.word	0x08116df8
 810c41c:	08116d20 	.word	0x08116d20
 810c420:	08116ea8 	.word	0x08116ea8
 810c424:	08116edc 	.word	0x08116edc

0810c428 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 810c428:	b580      	push	{r7, lr}
 810c42a:	b088      	sub	sp, #32
 810c42c:	af04      	add	r7, sp, #16
 810c42e:	60f8      	str	r0, [r7, #12]
 810c430:	60b9      	str	r1, [r7, #8]
 810c432:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 810c434:	68fb      	ldr	r3, [r7, #12]
 810c436:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 810c43a:	68fb      	ldr	r3, [r7, #12]
 810c43c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 810c440:	68fb      	ldr	r3, [r7, #12]
 810c442:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 810c444:	2201      	movs	r2, #1
 810c446:	9203      	str	r2, [sp, #12]
 810c448:	68ba      	ldr	r2, [r7, #8]
 810c44a:	9202      	str	r2, [sp, #8]
 810c44c:	4a06      	ldr	r2, [pc, #24]	@ (810c468 <etharp_request_dst+0x40>)
 810c44e:	9201      	str	r2, [sp, #4]
 810c450:	9300      	str	r3, [sp, #0]
 810c452:	4603      	mov	r3, r0
 810c454:	687a      	ldr	r2, [r7, #4]
 810c456:	68f8      	ldr	r0, [r7, #12]
 810c458:	f7ff ff5a 	bl	810c310 <etharp_raw>
 810c45c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 810c45e:	4618      	mov	r0, r3
 810c460:	3710      	adds	r7, #16
 810c462:	46bd      	mov	sp, r7
 810c464:	bd80      	pop	{r7, pc}
 810c466:	bf00      	nop
 810c468:	08119b34 	.word	0x08119b34

0810c46c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 810c46c:	b580      	push	{r7, lr}
 810c46e:	b082      	sub	sp, #8
 810c470:	af00      	add	r7, sp, #0
 810c472:	6078      	str	r0, [r7, #4]
 810c474:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 810c476:	4a05      	ldr	r2, [pc, #20]	@ (810c48c <etharp_request+0x20>)
 810c478:	6839      	ldr	r1, [r7, #0]
 810c47a:	6878      	ldr	r0, [r7, #4]
 810c47c:	f7ff ffd4 	bl	810c428 <etharp_request_dst>
 810c480:	4603      	mov	r3, r0
}
 810c482:	4618      	mov	r0, r3
 810c484:	3708      	adds	r7, #8
 810c486:	46bd      	mov	sp, r7
 810c488:	bd80      	pop	{r7, pc}
 810c48a:	bf00      	nop
 810c48c:	08119b2c 	.word	0x08119b2c

0810c490 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 810c490:	b580      	push	{r7, lr}
 810c492:	b086      	sub	sp, #24
 810c494:	af00      	add	r7, sp, #0
 810c496:	6078      	str	r0, [r7, #4]
 810c498:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 810c49a:	230e      	movs	r3, #14
 810c49c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 810c49e:	687b      	ldr	r3, [r7, #4]
 810c4a0:	895b      	ldrh	r3, [r3, #10]
 810c4a2:	2b0e      	cmp	r3, #14
 810c4a4:	d96e      	bls.n	810c584 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 810c4a6:	687b      	ldr	r3, [r7, #4]
 810c4a8:	7bdb      	ldrb	r3, [r3, #15]
 810c4aa:	2b00      	cmp	r3, #0
 810c4ac:	d106      	bne.n	810c4bc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 810c4ae:	683b      	ldr	r3, [r7, #0]
 810c4b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810c4b4:	3301      	adds	r3, #1
 810c4b6:	b2da      	uxtb	r2, r3
 810c4b8:	687b      	ldr	r3, [r7, #4]
 810c4ba:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 810c4bc:	687b      	ldr	r3, [r7, #4]
 810c4be:	685b      	ldr	r3, [r3, #4]
 810c4c0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 810c4c2:	693b      	ldr	r3, [r7, #16]
 810c4c4:	7b1a      	ldrb	r2, [r3, #12]
 810c4c6:	7b5b      	ldrb	r3, [r3, #13]
 810c4c8:	021b      	lsls	r3, r3, #8
 810c4ca:	4313      	orrs	r3, r2
 810c4cc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 810c4ce:	693b      	ldr	r3, [r7, #16]
 810c4d0:	781b      	ldrb	r3, [r3, #0]
 810c4d2:	f003 0301 	and.w	r3, r3, #1
 810c4d6:	2b00      	cmp	r3, #0
 810c4d8:	d023      	beq.n	810c522 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 810c4da:	693b      	ldr	r3, [r7, #16]
 810c4dc:	781b      	ldrb	r3, [r3, #0]
 810c4de:	2b01      	cmp	r3, #1
 810c4e0:	d10f      	bne.n	810c502 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 810c4e2:	693b      	ldr	r3, [r7, #16]
 810c4e4:	785b      	ldrb	r3, [r3, #1]
 810c4e6:	2b00      	cmp	r3, #0
 810c4e8:	d11b      	bne.n	810c522 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 810c4ea:	693b      	ldr	r3, [r7, #16]
 810c4ec:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 810c4ee:	2b5e      	cmp	r3, #94	@ 0x5e
 810c4f0:	d117      	bne.n	810c522 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 810c4f2:	687b      	ldr	r3, [r7, #4]
 810c4f4:	7b5b      	ldrb	r3, [r3, #13]
 810c4f6:	f043 0310 	orr.w	r3, r3, #16
 810c4fa:	b2da      	uxtb	r2, r3
 810c4fc:	687b      	ldr	r3, [r7, #4]
 810c4fe:	735a      	strb	r2, [r3, #13]
 810c500:	e00f      	b.n	810c522 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 810c502:	693b      	ldr	r3, [r7, #16]
 810c504:	2206      	movs	r2, #6
 810c506:	4928      	ldr	r1, [pc, #160]	@ (810c5a8 <ethernet_input+0x118>)
 810c508:	4618      	mov	r0, r3
 810c50a:	f009 fc8e 	bl	8115e2a <memcmp>
 810c50e:	4603      	mov	r3, r0
 810c510:	2b00      	cmp	r3, #0
 810c512:	d106      	bne.n	810c522 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 810c514:	687b      	ldr	r3, [r7, #4]
 810c516:	7b5b      	ldrb	r3, [r3, #13]
 810c518:	f043 0308 	orr.w	r3, r3, #8
 810c51c:	b2da      	uxtb	r2, r3
 810c51e:	687b      	ldr	r3, [r7, #4]
 810c520:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 810c522:	89fb      	ldrh	r3, [r7, #14]
 810c524:	2b08      	cmp	r3, #8
 810c526:	d003      	beq.n	810c530 <ethernet_input+0xa0>
 810c528:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 810c52c:	d014      	beq.n	810c558 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 810c52e:	e032      	b.n	810c596 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 810c530:	683b      	ldr	r3, [r7, #0]
 810c532:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810c536:	f003 0308 	and.w	r3, r3, #8
 810c53a:	2b00      	cmp	r3, #0
 810c53c:	d024      	beq.n	810c588 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 810c53e:	8afb      	ldrh	r3, [r7, #22]
 810c540:	4619      	mov	r1, r3
 810c542:	6878      	ldr	r0, [r7, #4]
 810c544:	f002 ff2a 	bl	810f39c <pbuf_remove_header>
 810c548:	4603      	mov	r3, r0
 810c54a:	2b00      	cmp	r3, #0
 810c54c:	d11e      	bne.n	810c58c <ethernet_input+0xfc>
        ip4_input(p, netif);
 810c54e:	6839      	ldr	r1, [r7, #0]
 810c550:	6878      	ldr	r0, [r7, #4]
 810c552:	f000 fb95 	bl	810cc80 <ip4_input>
      break;
 810c556:	e013      	b.n	810c580 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 810c558:	683b      	ldr	r3, [r7, #0]
 810c55a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810c55e:	f003 0308 	and.w	r3, r3, #8
 810c562:	2b00      	cmp	r3, #0
 810c564:	d014      	beq.n	810c590 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 810c566:	8afb      	ldrh	r3, [r7, #22]
 810c568:	4619      	mov	r1, r3
 810c56a:	6878      	ldr	r0, [r7, #4]
 810c56c:	f002 ff16 	bl	810f39c <pbuf_remove_header>
 810c570:	4603      	mov	r3, r0
 810c572:	2b00      	cmp	r3, #0
 810c574:	d10e      	bne.n	810c594 <ethernet_input+0x104>
        etharp_input(p, netif);
 810c576:	6839      	ldr	r1, [r7, #0]
 810c578:	6878      	ldr	r0, [r7, #4]
 810c57a:	f7ff fb65 	bl	810bc48 <etharp_input>
      break;
 810c57e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 810c580:	2300      	movs	r3, #0
 810c582:	e00c      	b.n	810c59e <ethernet_input+0x10e>
    goto free_and_return;
 810c584:	bf00      	nop
 810c586:	e006      	b.n	810c596 <ethernet_input+0x106>
        goto free_and_return;
 810c588:	bf00      	nop
 810c58a:	e004      	b.n	810c596 <ethernet_input+0x106>
        goto free_and_return;
 810c58c:	bf00      	nop
 810c58e:	e002      	b.n	810c596 <ethernet_input+0x106>
        goto free_and_return;
 810c590:	bf00      	nop
 810c592:	e000      	b.n	810c596 <ethernet_input+0x106>
        goto free_and_return;
 810c594:	bf00      	nop

free_and_return:
  pbuf_free(p);
 810c596:	6878      	ldr	r0, [r7, #4]
 810c598:	f002 ff86 	bl	810f4a8 <pbuf_free>
  return ERR_OK;
 810c59c:	2300      	movs	r3, #0
}
 810c59e:	4618      	mov	r0, r3
 810c5a0:	3718      	adds	r7, #24
 810c5a2:	46bd      	mov	sp, r7
 810c5a4:	bd80      	pop	{r7, pc}
 810c5a6:	bf00      	nop
 810c5a8:	08119b2c 	.word	0x08119b2c

0810c5ac <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 810c5ac:	b580      	push	{r7, lr}
 810c5ae:	b086      	sub	sp, #24
 810c5b0:	af00      	add	r7, sp, #0
 810c5b2:	60f8      	str	r0, [r7, #12]
 810c5b4:	60b9      	str	r1, [r7, #8]
 810c5b6:	607a      	str	r2, [r7, #4]
 810c5b8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 810c5ba:	8c3b      	ldrh	r3, [r7, #32]
 810c5bc:	4618      	mov	r0, r3
 810c5be:	f7fe ffed 	bl	810b59c <lwip_htons>
 810c5c2:	4603      	mov	r3, r0
 810c5c4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 810c5c6:	210e      	movs	r1, #14
 810c5c8:	68b8      	ldr	r0, [r7, #8]
 810c5ca:	f002 fed7 	bl	810f37c <pbuf_add_header>
 810c5ce:	4603      	mov	r3, r0
 810c5d0:	2b00      	cmp	r3, #0
 810c5d2:	d125      	bne.n	810c620 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 810c5d4:	68bb      	ldr	r3, [r7, #8]
 810c5d6:	685b      	ldr	r3, [r3, #4]
 810c5d8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 810c5da:	693b      	ldr	r3, [r7, #16]
 810c5dc:	8afa      	ldrh	r2, [r7, #22]
 810c5de:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 810c5e0:	693b      	ldr	r3, [r7, #16]
 810c5e2:	2206      	movs	r2, #6
 810c5e4:	6839      	ldr	r1, [r7, #0]
 810c5e6:	4618      	mov	r0, r3
 810c5e8:	f009 fd69 	bl	81160be <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 810c5ec:	693b      	ldr	r3, [r7, #16]
 810c5ee:	3306      	adds	r3, #6
 810c5f0:	2206      	movs	r2, #6
 810c5f2:	6879      	ldr	r1, [r7, #4]
 810c5f4:	4618      	mov	r0, r3
 810c5f6:	f009 fd62 	bl	81160be <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 810c5fa:	68fb      	ldr	r3, [r7, #12]
 810c5fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810c600:	2b06      	cmp	r3, #6
 810c602:	d006      	beq.n	810c612 <ethernet_output+0x66>
 810c604:	4b0a      	ldr	r3, [pc, #40]	@ (810c630 <ethernet_output+0x84>)
 810c606:	f44f 7299 	mov.w	r2, #306	@ 0x132
 810c60a:	490a      	ldr	r1, [pc, #40]	@ (810c634 <ethernet_output+0x88>)
 810c60c:	480a      	ldr	r0, [pc, #40]	@ (810c638 <ethernet_output+0x8c>)
 810c60e:	f009 fbb7 	bl	8115d80 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 810c612:	68fb      	ldr	r3, [r7, #12]
 810c614:	699b      	ldr	r3, [r3, #24]
 810c616:	68b9      	ldr	r1, [r7, #8]
 810c618:	68f8      	ldr	r0, [r7, #12]
 810c61a:	4798      	blx	r3
 810c61c:	4603      	mov	r3, r0
 810c61e:	e002      	b.n	810c626 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 810c620:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 810c622:	f06f 0301 	mvn.w	r3, #1
}
 810c626:	4618      	mov	r0, r3
 810c628:	3718      	adds	r7, #24
 810c62a:	46bd      	mov	sp, r7
 810c62c:	bd80      	pop	{r7, pc}
 810c62e:	bf00      	nop
 810c630:	08116f20 	.word	0x08116f20
 810c634:	08116f94 	.word	0x08116f94
 810c638:	08116fc8 	.word	0x08116fc8

0810c63c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 810c63c:	b580      	push	{r7, lr}
 810c63e:	b08e      	sub	sp, #56	@ 0x38
 810c640:	af04      	add	r7, sp, #16
 810c642:	6078      	str	r0, [r7, #4]
 810c644:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 810c646:	4b87      	ldr	r3, [pc, #540]	@ (810c864 <icmp_input+0x228>)
 810c648:	689b      	ldr	r3, [r3, #8]
 810c64a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 810c64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c64e:	781b      	ldrb	r3, [r3, #0]
 810c650:	f003 030f 	and.w	r3, r3, #15
 810c654:	b2db      	uxtb	r3, r3
 810c656:	009b      	lsls	r3, r3, #2
 810c658:	b2db      	uxtb	r3, r3
 810c65a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 810c65c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810c65e:	2b13      	cmp	r3, #19
 810c660:	f240 80e8 	bls.w	810c834 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 810c664:	687b      	ldr	r3, [r7, #4]
 810c666:	895b      	ldrh	r3, [r3, #10]
 810c668:	2b03      	cmp	r3, #3
 810c66a:	f240 80e5 	bls.w	810c838 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 810c66e:	687b      	ldr	r3, [r7, #4]
 810c670:	685b      	ldr	r3, [r3, #4]
 810c672:	781b      	ldrb	r3, [r3, #0]
 810c674:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 810c678:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 810c67c:	2b00      	cmp	r3, #0
 810c67e:	f000 80d2 	beq.w	810c826 <icmp_input+0x1ea>
 810c682:	2b08      	cmp	r3, #8
 810c684:	f040 80d2 	bne.w	810c82c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 810c688:	4b77      	ldr	r3, [pc, #476]	@ (810c868 <icmp_input+0x22c>)
 810c68a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 810c68c:	4b75      	ldr	r3, [pc, #468]	@ (810c864 <icmp_input+0x228>)
 810c68e:	695b      	ldr	r3, [r3, #20]
 810c690:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 810c694:	2be0      	cmp	r3, #224	@ 0xe0
 810c696:	f000 80d6 	beq.w	810c846 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 810c69a:	4b72      	ldr	r3, [pc, #456]	@ (810c864 <icmp_input+0x228>)
 810c69c:	695b      	ldr	r3, [r3, #20]
 810c69e:	4a71      	ldr	r2, [pc, #452]	@ (810c864 <icmp_input+0x228>)
 810c6a0:	6812      	ldr	r2, [r2, #0]
 810c6a2:	4611      	mov	r1, r2
 810c6a4:	4618      	mov	r0, r3
 810c6a6:	f000 fce7 	bl	810d078 <ip4_addr_isbroadcast_u32>
 810c6aa:	4603      	mov	r3, r0
 810c6ac:	2b00      	cmp	r3, #0
 810c6ae:	f040 80cc 	bne.w	810c84a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 810c6b2:	687b      	ldr	r3, [r7, #4]
 810c6b4:	891b      	ldrh	r3, [r3, #8]
 810c6b6:	2b07      	cmp	r3, #7
 810c6b8:	f240 80c0 	bls.w	810c83c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 810c6bc:	6878      	ldr	r0, [r7, #4]
 810c6be:	f000 f9e0 	bl	810ca82 <inet_chksum_pbuf>
 810c6c2:	4603      	mov	r3, r0
 810c6c4:	2b00      	cmp	r3, #0
 810c6c6:	d003      	beq.n	810c6d0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 810c6c8:	6878      	ldr	r0, [r7, #4]
 810c6ca:	f002 feed 	bl	810f4a8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 810c6ce:	e0c5      	b.n	810c85c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 810c6d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810c6d2:	330e      	adds	r3, #14
 810c6d4:	4619      	mov	r1, r3
 810c6d6:	6878      	ldr	r0, [r7, #4]
 810c6d8:	f002 fe50 	bl	810f37c <pbuf_add_header>
 810c6dc:	4603      	mov	r3, r0
 810c6de:	2b00      	cmp	r3, #0
 810c6e0:	d04b      	beq.n	810c77a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 810c6e2:	687b      	ldr	r3, [r7, #4]
 810c6e4:	891a      	ldrh	r2, [r3, #8]
 810c6e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810c6e8:	4413      	add	r3, r2
 810c6ea:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 810c6ec:	687b      	ldr	r3, [r7, #4]
 810c6ee:	891b      	ldrh	r3, [r3, #8]
 810c6f0:	8b7a      	ldrh	r2, [r7, #26]
 810c6f2:	429a      	cmp	r2, r3
 810c6f4:	f0c0 80ab 	bcc.w	810c84e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 810c6f8:	8b7b      	ldrh	r3, [r7, #26]
 810c6fa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 810c6fe:	4619      	mov	r1, r3
 810c700:	200e      	movs	r0, #14
 810c702:	f002 fbed 	bl	810eee0 <pbuf_alloc>
 810c706:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 810c708:	697b      	ldr	r3, [r7, #20]
 810c70a:	2b00      	cmp	r3, #0
 810c70c:	f000 80a1 	beq.w	810c852 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 810c710:	697b      	ldr	r3, [r7, #20]
 810c712:	895b      	ldrh	r3, [r3, #10]
 810c714:	461a      	mov	r2, r3
 810c716:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810c718:	3308      	adds	r3, #8
 810c71a:	429a      	cmp	r2, r3
 810c71c:	d203      	bcs.n	810c726 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 810c71e:	6978      	ldr	r0, [r7, #20]
 810c720:	f002 fec2 	bl	810f4a8 <pbuf_free>
          goto icmperr;
 810c724:	e096      	b.n	810c854 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 810c726:	697b      	ldr	r3, [r7, #20]
 810c728:	685b      	ldr	r3, [r3, #4]
 810c72a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 810c72c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810c72e:	4618      	mov	r0, r3
 810c730:	f009 fcc5 	bl	81160be <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 810c734:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810c736:	4619      	mov	r1, r3
 810c738:	6978      	ldr	r0, [r7, #20]
 810c73a:	f002 fe2f 	bl	810f39c <pbuf_remove_header>
 810c73e:	4603      	mov	r3, r0
 810c740:	2b00      	cmp	r3, #0
 810c742:	d009      	beq.n	810c758 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 810c744:	4b49      	ldr	r3, [pc, #292]	@ (810c86c <icmp_input+0x230>)
 810c746:	22b6      	movs	r2, #182	@ 0xb6
 810c748:	4949      	ldr	r1, [pc, #292]	@ (810c870 <icmp_input+0x234>)
 810c74a:	484a      	ldr	r0, [pc, #296]	@ (810c874 <icmp_input+0x238>)
 810c74c:	f009 fb18 	bl	8115d80 <iprintf>
          pbuf_free(r);
 810c750:	6978      	ldr	r0, [r7, #20]
 810c752:	f002 fea9 	bl	810f4a8 <pbuf_free>
          goto icmperr;
 810c756:	e07d      	b.n	810c854 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 810c758:	6879      	ldr	r1, [r7, #4]
 810c75a:	6978      	ldr	r0, [r7, #20]
 810c75c:	f002 ffc8 	bl	810f6f0 <pbuf_copy>
 810c760:	4603      	mov	r3, r0
 810c762:	2b00      	cmp	r3, #0
 810c764:	d003      	beq.n	810c76e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 810c766:	6978      	ldr	r0, [r7, #20]
 810c768:	f002 fe9e 	bl	810f4a8 <pbuf_free>
          goto icmperr;
 810c76c:	e072      	b.n	810c854 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 810c76e:	6878      	ldr	r0, [r7, #4]
 810c770:	f002 fe9a 	bl	810f4a8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 810c774:	697b      	ldr	r3, [r7, #20]
 810c776:	607b      	str	r3, [r7, #4]
 810c778:	e00f      	b.n	810c79a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 810c77a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810c77c:	330e      	adds	r3, #14
 810c77e:	4619      	mov	r1, r3
 810c780:	6878      	ldr	r0, [r7, #4]
 810c782:	f002 fe0b 	bl	810f39c <pbuf_remove_header>
 810c786:	4603      	mov	r3, r0
 810c788:	2b00      	cmp	r3, #0
 810c78a:	d006      	beq.n	810c79a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 810c78c:	4b37      	ldr	r3, [pc, #220]	@ (810c86c <icmp_input+0x230>)
 810c78e:	22c7      	movs	r2, #199	@ 0xc7
 810c790:	4939      	ldr	r1, [pc, #228]	@ (810c878 <icmp_input+0x23c>)
 810c792:	4838      	ldr	r0, [pc, #224]	@ (810c874 <icmp_input+0x238>)
 810c794:	f009 faf4 	bl	8115d80 <iprintf>
          goto icmperr;
 810c798:	e05c      	b.n	810c854 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 810c79a:	687b      	ldr	r3, [r7, #4]
 810c79c:	685b      	ldr	r3, [r3, #4]
 810c79e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 810c7a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810c7a2:	4619      	mov	r1, r3
 810c7a4:	6878      	ldr	r0, [r7, #4]
 810c7a6:	f002 fde9 	bl	810f37c <pbuf_add_header>
 810c7aa:	4603      	mov	r3, r0
 810c7ac:	2b00      	cmp	r3, #0
 810c7ae:	d13c      	bne.n	810c82a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 810c7b0:	687b      	ldr	r3, [r7, #4]
 810c7b2:	685b      	ldr	r3, [r3, #4]
 810c7b4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 810c7b6:	69fb      	ldr	r3, [r7, #28]
 810c7b8:	681a      	ldr	r2, [r3, #0]
 810c7ba:	68fb      	ldr	r3, [r7, #12]
 810c7bc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 810c7be:	4b29      	ldr	r3, [pc, #164]	@ (810c864 <icmp_input+0x228>)
 810c7c0:	691a      	ldr	r2, [r3, #16]
 810c7c2:	68fb      	ldr	r3, [r7, #12]
 810c7c4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 810c7c6:	693b      	ldr	r3, [r7, #16]
 810c7c8:	2200      	movs	r2, #0
 810c7ca:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 810c7cc:	693b      	ldr	r3, [r7, #16]
 810c7ce:	885b      	ldrh	r3, [r3, #2]
 810c7d0:	b29b      	uxth	r3, r3
 810c7d2:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 810c7d6:	4293      	cmp	r3, r2
 810c7d8:	d907      	bls.n	810c7ea <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 810c7da:	693b      	ldr	r3, [r7, #16]
 810c7dc:	885b      	ldrh	r3, [r3, #2]
 810c7de:	b29b      	uxth	r3, r3
 810c7e0:	3309      	adds	r3, #9
 810c7e2:	b29a      	uxth	r2, r3
 810c7e4:	693b      	ldr	r3, [r7, #16]
 810c7e6:	805a      	strh	r2, [r3, #2]
 810c7e8:	e006      	b.n	810c7f8 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 810c7ea:	693b      	ldr	r3, [r7, #16]
 810c7ec:	885b      	ldrh	r3, [r3, #2]
 810c7ee:	b29b      	uxth	r3, r3
 810c7f0:	3308      	adds	r3, #8
 810c7f2:	b29a      	uxth	r2, r3
 810c7f4:	693b      	ldr	r3, [r7, #16]
 810c7f6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 810c7f8:	68fb      	ldr	r3, [r7, #12]
 810c7fa:	22ff      	movs	r2, #255	@ 0xff
 810c7fc:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 810c7fe:	68fb      	ldr	r3, [r7, #12]
 810c800:	2200      	movs	r2, #0
 810c802:	729a      	strb	r2, [r3, #10]
 810c804:	2200      	movs	r2, #0
 810c806:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 810c808:	683b      	ldr	r3, [r7, #0]
 810c80a:	9302      	str	r3, [sp, #8]
 810c80c:	2301      	movs	r3, #1
 810c80e:	9301      	str	r3, [sp, #4]
 810c810:	2300      	movs	r3, #0
 810c812:	9300      	str	r3, [sp, #0]
 810c814:	23ff      	movs	r3, #255	@ 0xff
 810c816:	2200      	movs	r2, #0
 810c818:	69f9      	ldr	r1, [r7, #28]
 810c81a:	6878      	ldr	r0, [r7, #4]
 810c81c:	f000 fb54 	bl	810cec8 <ip4_output_if>
 810c820:	4603      	mov	r3, r0
 810c822:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 810c824:	e001      	b.n	810c82a <icmp_input+0x1ee>
      break;
 810c826:	bf00      	nop
 810c828:	e000      	b.n	810c82c <icmp_input+0x1f0>
      break;
 810c82a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 810c82c:	6878      	ldr	r0, [r7, #4]
 810c82e:	f002 fe3b 	bl	810f4a8 <pbuf_free>
  return;
 810c832:	e013      	b.n	810c85c <icmp_input+0x220>
    goto lenerr;
 810c834:	bf00      	nop
 810c836:	e002      	b.n	810c83e <icmp_input+0x202>
    goto lenerr;
 810c838:	bf00      	nop
 810c83a:	e000      	b.n	810c83e <icmp_input+0x202>
        goto lenerr;
 810c83c:	bf00      	nop
lenerr:
  pbuf_free(p);
 810c83e:	6878      	ldr	r0, [r7, #4]
 810c840:	f002 fe32 	bl	810f4a8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 810c844:	e00a      	b.n	810c85c <icmp_input+0x220>
        goto icmperr;
 810c846:	bf00      	nop
 810c848:	e004      	b.n	810c854 <icmp_input+0x218>
        goto icmperr;
 810c84a:	bf00      	nop
 810c84c:	e002      	b.n	810c854 <icmp_input+0x218>
          goto icmperr;
 810c84e:	bf00      	nop
 810c850:	e000      	b.n	810c854 <icmp_input+0x218>
          goto icmperr;
 810c852:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 810c854:	6878      	ldr	r0, [r7, #4]
 810c856:	f002 fe27 	bl	810f4a8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 810c85a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 810c85c:	3728      	adds	r7, #40	@ 0x28
 810c85e:	46bd      	mov	sp, r7
 810c860:	bd80      	pop	{r7, pc}
 810c862:	bf00      	nop
 810c864:	1000b17c 	.word	0x1000b17c
 810c868:	1000b190 	.word	0x1000b190
 810c86c:	08116ff0 	.word	0x08116ff0
 810c870:	08117064 	.word	0x08117064
 810c874:	0811709c 	.word	0x0811709c
 810c878:	081170c4 	.word	0x081170c4

0810c87c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 810c87c:	b580      	push	{r7, lr}
 810c87e:	b082      	sub	sp, #8
 810c880:	af00      	add	r7, sp, #0
 810c882:	6078      	str	r0, [r7, #4]
 810c884:	460b      	mov	r3, r1
 810c886:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 810c888:	78fb      	ldrb	r3, [r7, #3]
 810c88a:	461a      	mov	r2, r3
 810c88c:	2103      	movs	r1, #3
 810c88e:	6878      	ldr	r0, [r7, #4]
 810c890:	f000 f814 	bl	810c8bc <icmp_send_response>
}
 810c894:	bf00      	nop
 810c896:	3708      	adds	r7, #8
 810c898:	46bd      	mov	sp, r7
 810c89a:	bd80      	pop	{r7, pc}

0810c89c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 810c89c:	b580      	push	{r7, lr}
 810c89e:	b082      	sub	sp, #8
 810c8a0:	af00      	add	r7, sp, #0
 810c8a2:	6078      	str	r0, [r7, #4]
 810c8a4:	460b      	mov	r3, r1
 810c8a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 810c8a8:	78fb      	ldrb	r3, [r7, #3]
 810c8aa:	461a      	mov	r2, r3
 810c8ac:	210b      	movs	r1, #11
 810c8ae:	6878      	ldr	r0, [r7, #4]
 810c8b0:	f000 f804 	bl	810c8bc <icmp_send_response>
}
 810c8b4:	bf00      	nop
 810c8b6:	3708      	adds	r7, #8
 810c8b8:	46bd      	mov	sp, r7
 810c8ba:	bd80      	pop	{r7, pc}

0810c8bc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 810c8bc:	b580      	push	{r7, lr}
 810c8be:	b08c      	sub	sp, #48	@ 0x30
 810c8c0:	af04      	add	r7, sp, #16
 810c8c2:	6078      	str	r0, [r7, #4]
 810c8c4:	460b      	mov	r3, r1
 810c8c6:	70fb      	strb	r3, [r7, #3]
 810c8c8:	4613      	mov	r3, r2
 810c8ca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 810c8cc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 810c8d0:	2124      	movs	r1, #36	@ 0x24
 810c8d2:	2022      	movs	r0, #34	@ 0x22
 810c8d4:	f002 fb04 	bl	810eee0 <pbuf_alloc>
 810c8d8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 810c8da:	69fb      	ldr	r3, [r7, #28]
 810c8dc:	2b00      	cmp	r3, #0
 810c8de:	d056      	beq.n	810c98e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 810c8e0:	69fb      	ldr	r3, [r7, #28]
 810c8e2:	895b      	ldrh	r3, [r3, #10]
 810c8e4:	2b23      	cmp	r3, #35	@ 0x23
 810c8e6:	d806      	bhi.n	810c8f6 <icmp_send_response+0x3a>
 810c8e8:	4b2b      	ldr	r3, [pc, #172]	@ (810c998 <icmp_send_response+0xdc>)
 810c8ea:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 810c8ee:	492b      	ldr	r1, [pc, #172]	@ (810c99c <icmp_send_response+0xe0>)
 810c8f0:	482b      	ldr	r0, [pc, #172]	@ (810c9a0 <icmp_send_response+0xe4>)
 810c8f2:	f009 fa45 	bl	8115d80 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 810c8f6:	687b      	ldr	r3, [r7, #4]
 810c8f8:	685b      	ldr	r3, [r3, #4]
 810c8fa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 810c8fc:	69fb      	ldr	r3, [r7, #28]
 810c8fe:	685b      	ldr	r3, [r3, #4]
 810c900:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 810c902:	697b      	ldr	r3, [r7, #20]
 810c904:	78fa      	ldrb	r2, [r7, #3]
 810c906:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 810c908:	697b      	ldr	r3, [r7, #20]
 810c90a:	78ba      	ldrb	r2, [r7, #2]
 810c90c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 810c90e:	697b      	ldr	r3, [r7, #20]
 810c910:	2200      	movs	r2, #0
 810c912:	711a      	strb	r2, [r3, #4]
 810c914:	2200      	movs	r2, #0
 810c916:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 810c918:	697b      	ldr	r3, [r7, #20]
 810c91a:	2200      	movs	r2, #0
 810c91c:	719a      	strb	r2, [r3, #6]
 810c91e:	2200      	movs	r2, #0
 810c920:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 810c922:	69fb      	ldr	r3, [r7, #28]
 810c924:	685b      	ldr	r3, [r3, #4]
 810c926:	f103 0008 	add.w	r0, r3, #8
 810c92a:	687b      	ldr	r3, [r7, #4]
 810c92c:	685b      	ldr	r3, [r3, #4]
 810c92e:	221c      	movs	r2, #28
 810c930:	4619      	mov	r1, r3
 810c932:	f009 fbc4 	bl	81160be <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 810c936:	69bb      	ldr	r3, [r7, #24]
 810c938:	68db      	ldr	r3, [r3, #12]
 810c93a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 810c93c:	f107 030c 	add.w	r3, r7, #12
 810c940:	4618      	mov	r0, r3
 810c942:	f000 f903 	bl	810cb4c <ip4_route>
 810c946:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 810c948:	693b      	ldr	r3, [r7, #16]
 810c94a:	2b00      	cmp	r3, #0
 810c94c:	d01b      	beq.n	810c986 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 810c94e:	697b      	ldr	r3, [r7, #20]
 810c950:	2200      	movs	r2, #0
 810c952:	709a      	strb	r2, [r3, #2]
 810c954:	2200      	movs	r2, #0
 810c956:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 810c958:	69fb      	ldr	r3, [r7, #28]
 810c95a:	895b      	ldrh	r3, [r3, #10]
 810c95c:	4619      	mov	r1, r3
 810c95e:	6978      	ldr	r0, [r7, #20]
 810c960:	f000 f87d 	bl	810ca5e <inet_chksum>
 810c964:	4603      	mov	r3, r0
 810c966:	461a      	mov	r2, r3
 810c968:	697b      	ldr	r3, [r7, #20]
 810c96a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 810c96c:	f107 020c 	add.w	r2, r7, #12
 810c970:	693b      	ldr	r3, [r7, #16]
 810c972:	9302      	str	r3, [sp, #8]
 810c974:	2301      	movs	r3, #1
 810c976:	9301      	str	r3, [sp, #4]
 810c978:	2300      	movs	r3, #0
 810c97a:	9300      	str	r3, [sp, #0]
 810c97c:	23ff      	movs	r3, #255	@ 0xff
 810c97e:	2100      	movs	r1, #0
 810c980:	69f8      	ldr	r0, [r7, #28]
 810c982:	f000 faa1 	bl	810cec8 <ip4_output_if>
  }
  pbuf_free(q);
 810c986:	69f8      	ldr	r0, [r7, #28]
 810c988:	f002 fd8e 	bl	810f4a8 <pbuf_free>
 810c98c:	e000      	b.n	810c990 <icmp_send_response+0xd4>
    return;
 810c98e:	bf00      	nop
}
 810c990:	3720      	adds	r7, #32
 810c992:	46bd      	mov	sp, r7
 810c994:	bd80      	pop	{r7, pc}
 810c996:	bf00      	nop
 810c998:	08116ff0 	.word	0x08116ff0
 810c99c:	081170f8 	.word	0x081170f8
 810c9a0:	0811709c 	.word	0x0811709c

0810c9a4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 810c9a4:	b480      	push	{r7}
 810c9a6:	b089      	sub	sp, #36	@ 0x24
 810c9a8:	af00      	add	r7, sp, #0
 810c9aa:	6078      	str	r0, [r7, #4]
 810c9ac:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 810c9ae:	687b      	ldr	r3, [r7, #4]
 810c9b0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 810c9b2:	2300      	movs	r3, #0
 810c9b4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 810c9b6:	2300      	movs	r3, #0
 810c9b8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 810c9ba:	69fb      	ldr	r3, [r7, #28]
 810c9bc:	f003 0301 	and.w	r3, r3, #1
 810c9c0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 810c9c2:	693b      	ldr	r3, [r7, #16]
 810c9c4:	2b00      	cmp	r3, #0
 810c9c6:	d00d      	beq.n	810c9e4 <lwip_standard_chksum+0x40>
 810c9c8:	683b      	ldr	r3, [r7, #0]
 810c9ca:	2b00      	cmp	r3, #0
 810c9cc:	dd0a      	ble.n	810c9e4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 810c9ce:	69fa      	ldr	r2, [r7, #28]
 810c9d0:	1c53      	adds	r3, r2, #1
 810c9d2:	61fb      	str	r3, [r7, #28]
 810c9d4:	f107 030e 	add.w	r3, r7, #14
 810c9d8:	3301      	adds	r3, #1
 810c9da:	7812      	ldrb	r2, [r2, #0]
 810c9dc:	701a      	strb	r2, [r3, #0]
    len--;
 810c9de:	683b      	ldr	r3, [r7, #0]
 810c9e0:	3b01      	subs	r3, #1
 810c9e2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 810c9e4:	69fb      	ldr	r3, [r7, #28]
 810c9e6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 810c9e8:	e00a      	b.n	810ca00 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 810c9ea:	69bb      	ldr	r3, [r7, #24]
 810c9ec:	1c9a      	adds	r2, r3, #2
 810c9ee:	61ba      	str	r2, [r7, #24]
 810c9f0:	881b      	ldrh	r3, [r3, #0]
 810c9f2:	461a      	mov	r2, r3
 810c9f4:	697b      	ldr	r3, [r7, #20]
 810c9f6:	4413      	add	r3, r2
 810c9f8:	617b      	str	r3, [r7, #20]
    len -= 2;
 810c9fa:	683b      	ldr	r3, [r7, #0]
 810c9fc:	3b02      	subs	r3, #2
 810c9fe:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 810ca00:	683b      	ldr	r3, [r7, #0]
 810ca02:	2b01      	cmp	r3, #1
 810ca04:	dcf1      	bgt.n	810c9ea <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 810ca06:	683b      	ldr	r3, [r7, #0]
 810ca08:	2b00      	cmp	r3, #0
 810ca0a:	dd04      	ble.n	810ca16 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 810ca0c:	f107 030e 	add.w	r3, r7, #14
 810ca10:	69ba      	ldr	r2, [r7, #24]
 810ca12:	7812      	ldrb	r2, [r2, #0]
 810ca14:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 810ca16:	89fb      	ldrh	r3, [r7, #14]
 810ca18:	461a      	mov	r2, r3
 810ca1a:	697b      	ldr	r3, [r7, #20]
 810ca1c:	4413      	add	r3, r2
 810ca1e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 810ca20:	697b      	ldr	r3, [r7, #20]
 810ca22:	0c1a      	lsrs	r2, r3, #16
 810ca24:	697b      	ldr	r3, [r7, #20]
 810ca26:	b29b      	uxth	r3, r3
 810ca28:	4413      	add	r3, r2
 810ca2a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 810ca2c:	697b      	ldr	r3, [r7, #20]
 810ca2e:	0c1a      	lsrs	r2, r3, #16
 810ca30:	697b      	ldr	r3, [r7, #20]
 810ca32:	b29b      	uxth	r3, r3
 810ca34:	4413      	add	r3, r2
 810ca36:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 810ca38:	693b      	ldr	r3, [r7, #16]
 810ca3a:	2b00      	cmp	r3, #0
 810ca3c:	d007      	beq.n	810ca4e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 810ca3e:	697b      	ldr	r3, [r7, #20]
 810ca40:	021b      	lsls	r3, r3, #8
 810ca42:	b29a      	uxth	r2, r3
 810ca44:	697b      	ldr	r3, [r7, #20]
 810ca46:	0a1b      	lsrs	r3, r3, #8
 810ca48:	b2db      	uxtb	r3, r3
 810ca4a:	4313      	orrs	r3, r2
 810ca4c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 810ca4e:	697b      	ldr	r3, [r7, #20]
 810ca50:	b29b      	uxth	r3, r3
}
 810ca52:	4618      	mov	r0, r3
 810ca54:	3724      	adds	r7, #36	@ 0x24
 810ca56:	46bd      	mov	sp, r7
 810ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ca5c:	4770      	bx	lr

0810ca5e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 810ca5e:	b580      	push	{r7, lr}
 810ca60:	b082      	sub	sp, #8
 810ca62:	af00      	add	r7, sp, #0
 810ca64:	6078      	str	r0, [r7, #4]
 810ca66:	460b      	mov	r3, r1
 810ca68:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 810ca6a:	887b      	ldrh	r3, [r7, #2]
 810ca6c:	4619      	mov	r1, r3
 810ca6e:	6878      	ldr	r0, [r7, #4]
 810ca70:	f7ff ff98 	bl	810c9a4 <lwip_standard_chksum>
 810ca74:	4603      	mov	r3, r0
 810ca76:	43db      	mvns	r3, r3
 810ca78:	b29b      	uxth	r3, r3
}
 810ca7a:	4618      	mov	r0, r3
 810ca7c:	3708      	adds	r7, #8
 810ca7e:	46bd      	mov	sp, r7
 810ca80:	bd80      	pop	{r7, pc}

0810ca82 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 810ca82:	b580      	push	{r7, lr}
 810ca84:	b086      	sub	sp, #24
 810ca86:	af00      	add	r7, sp, #0
 810ca88:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 810ca8a:	2300      	movs	r3, #0
 810ca8c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 810ca8e:	2300      	movs	r3, #0
 810ca90:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 810ca92:	687b      	ldr	r3, [r7, #4]
 810ca94:	613b      	str	r3, [r7, #16]
 810ca96:	e02b      	b.n	810caf0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 810ca98:	693b      	ldr	r3, [r7, #16]
 810ca9a:	685a      	ldr	r2, [r3, #4]
 810ca9c:	693b      	ldr	r3, [r7, #16]
 810ca9e:	895b      	ldrh	r3, [r3, #10]
 810caa0:	4619      	mov	r1, r3
 810caa2:	4610      	mov	r0, r2
 810caa4:	f7ff ff7e 	bl	810c9a4 <lwip_standard_chksum>
 810caa8:	4603      	mov	r3, r0
 810caaa:	461a      	mov	r2, r3
 810caac:	697b      	ldr	r3, [r7, #20]
 810caae:	4413      	add	r3, r2
 810cab0:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 810cab2:	697b      	ldr	r3, [r7, #20]
 810cab4:	0c1a      	lsrs	r2, r3, #16
 810cab6:	697b      	ldr	r3, [r7, #20]
 810cab8:	b29b      	uxth	r3, r3
 810caba:	4413      	add	r3, r2
 810cabc:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 810cabe:	693b      	ldr	r3, [r7, #16]
 810cac0:	895b      	ldrh	r3, [r3, #10]
 810cac2:	f003 0301 	and.w	r3, r3, #1
 810cac6:	b29b      	uxth	r3, r3
 810cac8:	2b00      	cmp	r3, #0
 810caca:	d00e      	beq.n	810caea <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 810cacc:	68fb      	ldr	r3, [r7, #12]
 810cace:	2b00      	cmp	r3, #0
 810cad0:	bf0c      	ite	eq
 810cad2:	2301      	moveq	r3, #1
 810cad4:	2300      	movne	r3, #0
 810cad6:	b2db      	uxtb	r3, r3
 810cad8:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 810cada:	697b      	ldr	r3, [r7, #20]
 810cadc:	021b      	lsls	r3, r3, #8
 810cade:	b29a      	uxth	r2, r3
 810cae0:	697b      	ldr	r3, [r7, #20]
 810cae2:	0a1b      	lsrs	r3, r3, #8
 810cae4:	b2db      	uxtb	r3, r3
 810cae6:	4313      	orrs	r3, r2
 810cae8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 810caea:	693b      	ldr	r3, [r7, #16]
 810caec:	681b      	ldr	r3, [r3, #0]
 810caee:	613b      	str	r3, [r7, #16]
 810caf0:	693b      	ldr	r3, [r7, #16]
 810caf2:	2b00      	cmp	r3, #0
 810caf4:	d1d0      	bne.n	810ca98 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 810caf6:	68fb      	ldr	r3, [r7, #12]
 810caf8:	2b00      	cmp	r3, #0
 810cafa:	d007      	beq.n	810cb0c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 810cafc:	697b      	ldr	r3, [r7, #20]
 810cafe:	021b      	lsls	r3, r3, #8
 810cb00:	b29a      	uxth	r2, r3
 810cb02:	697b      	ldr	r3, [r7, #20]
 810cb04:	0a1b      	lsrs	r3, r3, #8
 810cb06:	b2db      	uxtb	r3, r3
 810cb08:	4313      	orrs	r3, r2
 810cb0a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 810cb0c:	697b      	ldr	r3, [r7, #20]
 810cb0e:	b29b      	uxth	r3, r3
 810cb10:	43db      	mvns	r3, r3
 810cb12:	b29b      	uxth	r3, r3
}
 810cb14:	4618      	mov	r0, r3
 810cb16:	3718      	adds	r7, #24
 810cb18:	46bd      	mov	sp, r7
 810cb1a:	bd80      	pop	{r7, pc}

0810cb1c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 810cb1c:	b580      	push	{r7, lr}
 810cb1e:	b082      	sub	sp, #8
 810cb20:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 810cb22:	2300      	movs	r3, #0
 810cb24:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 810cb26:	f002 ffcf 	bl	810fac8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 810cb2a:	f001 f9e9 	bl	810df00 <mem_init>
  memp_init();
 810cb2e:	f001 fd33 	bl	810e598 <memp_init>
  pbuf_init();
  netif_init();
 810cb32:	f001 fe3f 	bl	810e7b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 810cb36:	f008 fcbd 	bl	81154b4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 810cb3a:	f003 f841 	bl	810fbc0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 810cb3e:	f008 fbff 	bl	8115340 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 810cb42:	bf00      	nop
 810cb44:	3708      	adds	r7, #8
 810cb46:	46bd      	mov	sp, r7
 810cb48:	bd80      	pop	{r7, pc}
	...

0810cb4c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 810cb4c:	b480      	push	{r7}
 810cb4e:	b085      	sub	sp, #20
 810cb50:	af00      	add	r7, sp, #0
 810cb52:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 810cb54:	4b33      	ldr	r3, [pc, #204]	@ (810cc24 <ip4_route+0xd8>)
 810cb56:	681b      	ldr	r3, [r3, #0]
 810cb58:	60fb      	str	r3, [r7, #12]
 810cb5a:	e036      	b.n	810cbca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 810cb5c:	68fb      	ldr	r3, [r7, #12]
 810cb5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810cb62:	f003 0301 	and.w	r3, r3, #1
 810cb66:	b2db      	uxtb	r3, r3
 810cb68:	2b00      	cmp	r3, #0
 810cb6a:	d02b      	beq.n	810cbc4 <ip4_route+0x78>
 810cb6c:	68fb      	ldr	r3, [r7, #12]
 810cb6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810cb72:	089b      	lsrs	r3, r3, #2
 810cb74:	f003 0301 	and.w	r3, r3, #1
 810cb78:	b2db      	uxtb	r3, r3
 810cb7a:	2b00      	cmp	r3, #0
 810cb7c:	d022      	beq.n	810cbc4 <ip4_route+0x78>
 810cb7e:	68fb      	ldr	r3, [r7, #12]
 810cb80:	3304      	adds	r3, #4
 810cb82:	681b      	ldr	r3, [r3, #0]
 810cb84:	2b00      	cmp	r3, #0
 810cb86:	d01d      	beq.n	810cbc4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 810cb88:	687b      	ldr	r3, [r7, #4]
 810cb8a:	681a      	ldr	r2, [r3, #0]
 810cb8c:	68fb      	ldr	r3, [r7, #12]
 810cb8e:	3304      	adds	r3, #4
 810cb90:	681b      	ldr	r3, [r3, #0]
 810cb92:	405a      	eors	r2, r3
 810cb94:	68fb      	ldr	r3, [r7, #12]
 810cb96:	3308      	adds	r3, #8
 810cb98:	681b      	ldr	r3, [r3, #0]
 810cb9a:	4013      	ands	r3, r2
 810cb9c:	2b00      	cmp	r3, #0
 810cb9e:	d101      	bne.n	810cba4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 810cba0:	68fb      	ldr	r3, [r7, #12]
 810cba2:	e038      	b.n	810cc16 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 810cba4:	68fb      	ldr	r3, [r7, #12]
 810cba6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810cbaa:	f003 0302 	and.w	r3, r3, #2
 810cbae:	2b00      	cmp	r3, #0
 810cbb0:	d108      	bne.n	810cbc4 <ip4_route+0x78>
 810cbb2:	687b      	ldr	r3, [r7, #4]
 810cbb4:	681a      	ldr	r2, [r3, #0]
 810cbb6:	68fb      	ldr	r3, [r7, #12]
 810cbb8:	330c      	adds	r3, #12
 810cbba:	681b      	ldr	r3, [r3, #0]
 810cbbc:	429a      	cmp	r2, r3
 810cbbe:	d101      	bne.n	810cbc4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 810cbc0:	68fb      	ldr	r3, [r7, #12]
 810cbc2:	e028      	b.n	810cc16 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 810cbc4:	68fb      	ldr	r3, [r7, #12]
 810cbc6:	681b      	ldr	r3, [r3, #0]
 810cbc8:	60fb      	str	r3, [r7, #12]
 810cbca:	68fb      	ldr	r3, [r7, #12]
 810cbcc:	2b00      	cmp	r3, #0
 810cbce:	d1c5      	bne.n	810cb5c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 810cbd0:	4b15      	ldr	r3, [pc, #84]	@ (810cc28 <ip4_route+0xdc>)
 810cbd2:	681b      	ldr	r3, [r3, #0]
 810cbd4:	2b00      	cmp	r3, #0
 810cbd6:	d01a      	beq.n	810cc0e <ip4_route+0xc2>
 810cbd8:	4b13      	ldr	r3, [pc, #76]	@ (810cc28 <ip4_route+0xdc>)
 810cbda:	681b      	ldr	r3, [r3, #0]
 810cbdc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810cbe0:	f003 0301 	and.w	r3, r3, #1
 810cbe4:	2b00      	cmp	r3, #0
 810cbe6:	d012      	beq.n	810cc0e <ip4_route+0xc2>
 810cbe8:	4b0f      	ldr	r3, [pc, #60]	@ (810cc28 <ip4_route+0xdc>)
 810cbea:	681b      	ldr	r3, [r3, #0]
 810cbec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810cbf0:	f003 0304 	and.w	r3, r3, #4
 810cbf4:	2b00      	cmp	r3, #0
 810cbf6:	d00a      	beq.n	810cc0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 810cbf8:	4b0b      	ldr	r3, [pc, #44]	@ (810cc28 <ip4_route+0xdc>)
 810cbfa:	681b      	ldr	r3, [r3, #0]
 810cbfc:	3304      	adds	r3, #4
 810cbfe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 810cc00:	2b00      	cmp	r3, #0
 810cc02:	d004      	beq.n	810cc0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 810cc04:	687b      	ldr	r3, [r7, #4]
 810cc06:	681b      	ldr	r3, [r3, #0]
 810cc08:	b2db      	uxtb	r3, r3
 810cc0a:	2b7f      	cmp	r3, #127	@ 0x7f
 810cc0c:	d101      	bne.n	810cc12 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 810cc0e:	2300      	movs	r3, #0
 810cc10:	e001      	b.n	810cc16 <ip4_route+0xca>
  }

  return netif_default;
 810cc12:	4b05      	ldr	r3, [pc, #20]	@ (810cc28 <ip4_route+0xdc>)
 810cc14:	681b      	ldr	r3, [r3, #0]
}
 810cc16:	4618      	mov	r0, r3
 810cc18:	3714      	adds	r7, #20
 810cc1a:	46bd      	mov	sp, r7
 810cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc20:	4770      	bx	lr
 810cc22:	bf00      	nop
 810cc24:	10011c3c 	.word	0x10011c3c
 810cc28:	10011c40 	.word	0x10011c40

0810cc2c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 810cc2c:	b580      	push	{r7, lr}
 810cc2e:	b082      	sub	sp, #8
 810cc30:	af00      	add	r7, sp, #0
 810cc32:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 810cc34:	687b      	ldr	r3, [r7, #4]
 810cc36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810cc3a:	f003 0301 	and.w	r3, r3, #1
 810cc3e:	b2db      	uxtb	r3, r3
 810cc40:	2b00      	cmp	r3, #0
 810cc42:	d016      	beq.n	810cc72 <ip4_input_accept+0x46>
 810cc44:	687b      	ldr	r3, [r7, #4]
 810cc46:	3304      	adds	r3, #4
 810cc48:	681b      	ldr	r3, [r3, #0]
 810cc4a:	2b00      	cmp	r3, #0
 810cc4c:	d011      	beq.n	810cc72 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 810cc4e:	4b0b      	ldr	r3, [pc, #44]	@ (810cc7c <ip4_input_accept+0x50>)
 810cc50:	695a      	ldr	r2, [r3, #20]
 810cc52:	687b      	ldr	r3, [r7, #4]
 810cc54:	3304      	adds	r3, #4
 810cc56:	681b      	ldr	r3, [r3, #0]
 810cc58:	429a      	cmp	r2, r3
 810cc5a:	d008      	beq.n	810cc6e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 810cc5c:	4b07      	ldr	r3, [pc, #28]	@ (810cc7c <ip4_input_accept+0x50>)
 810cc5e:	695b      	ldr	r3, [r3, #20]
 810cc60:	6879      	ldr	r1, [r7, #4]
 810cc62:	4618      	mov	r0, r3
 810cc64:	f000 fa08 	bl	810d078 <ip4_addr_isbroadcast_u32>
 810cc68:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 810cc6a:	2b00      	cmp	r3, #0
 810cc6c:	d001      	beq.n	810cc72 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 810cc6e:	2301      	movs	r3, #1
 810cc70:	e000      	b.n	810cc74 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 810cc72:	2300      	movs	r3, #0
}
 810cc74:	4618      	mov	r0, r3
 810cc76:	3708      	adds	r7, #8
 810cc78:	46bd      	mov	sp, r7
 810cc7a:	bd80      	pop	{r7, pc}
 810cc7c:	1000b17c 	.word	0x1000b17c

0810cc80 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 810cc80:	b580      	push	{r7, lr}
 810cc82:	b086      	sub	sp, #24
 810cc84:	af00      	add	r7, sp, #0
 810cc86:	6078      	str	r0, [r7, #4]
 810cc88:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 810cc8a:	687b      	ldr	r3, [r7, #4]
 810cc8c:	685b      	ldr	r3, [r3, #4]
 810cc8e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 810cc90:	697b      	ldr	r3, [r7, #20]
 810cc92:	781b      	ldrb	r3, [r3, #0]
 810cc94:	091b      	lsrs	r3, r3, #4
 810cc96:	b2db      	uxtb	r3, r3
 810cc98:	2b04      	cmp	r3, #4
 810cc9a:	d004      	beq.n	810cca6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 810cc9c:	6878      	ldr	r0, [r7, #4]
 810cc9e:	f002 fc03 	bl	810f4a8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 810cca2:	2300      	movs	r3, #0
 810cca4:	e107      	b.n	810ceb6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 810cca6:	697b      	ldr	r3, [r7, #20]
 810cca8:	781b      	ldrb	r3, [r3, #0]
 810ccaa:	f003 030f 	and.w	r3, r3, #15
 810ccae:	b2db      	uxtb	r3, r3
 810ccb0:	009b      	lsls	r3, r3, #2
 810ccb2:	b2db      	uxtb	r3, r3
 810ccb4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 810ccb6:	697b      	ldr	r3, [r7, #20]
 810ccb8:	885b      	ldrh	r3, [r3, #2]
 810ccba:	b29b      	uxth	r3, r3
 810ccbc:	4618      	mov	r0, r3
 810ccbe:	f7fe fc6d 	bl	810b59c <lwip_htons>
 810ccc2:	4603      	mov	r3, r0
 810ccc4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 810ccc6:	687b      	ldr	r3, [r7, #4]
 810ccc8:	891b      	ldrh	r3, [r3, #8]
 810ccca:	89ba      	ldrh	r2, [r7, #12]
 810cccc:	429a      	cmp	r2, r3
 810ccce:	d204      	bcs.n	810ccda <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 810ccd0:	89bb      	ldrh	r3, [r7, #12]
 810ccd2:	4619      	mov	r1, r3
 810ccd4:	6878      	ldr	r0, [r7, #4]
 810ccd6:	f002 fa63 	bl	810f1a0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 810ccda:	687b      	ldr	r3, [r7, #4]
 810ccdc:	895b      	ldrh	r3, [r3, #10]
 810ccde:	89fa      	ldrh	r2, [r7, #14]
 810cce0:	429a      	cmp	r2, r3
 810cce2:	d807      	bhi.n	810ccf4 <ip4_input+0x74>
 810cce4:	687b      	ldr	r3, [r7, #4]
 810cce6:	891b      	ldrh	r3, [r3, #8]
 810cce8:	89ba      	ldrh	r2, [r7, #12]
 810ccea:	429a      	cmp	r2, r3
 810ccec:	d802      	bhi.n	810ccf4 <ip4_input+0x74>
 810ccee:	89fb      	ldrh	r3, [r7, #14]
 810ccf0:	2b13      	cmp	r3, #19
 810ccf2:	d804      	bhi.n	810ccfe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 810ccf4:	6878      	ldr	r0, [r7, #4]
 810ccf6:	f002 fbd7 	bl	810f4a8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 810ccfa:	2300      	movs	r3, #0
 810ccfc:	e0db      	b.n	810ceb6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 810ccfe:	697b      	ldr	r3, [r7, #20]
 810cd00:	691b      	ldr	r3, [r3, #16]
 810cd02:	4a6f      	ldr	r2, [pc, #444]	@ (810cec0 <ip4_input+0x240>)
 810cd04:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 810cd06:	697b      	ldr	r3, [r7, #20]
 810cd08:	68db      	ldr	r3, [r3, #12]
 810cd0a:	4a6d      	ldr	r2, [pc, #436]	@ (810cec0 <ip4_input+0x240>)
 810cd0c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 810cd0e:	4b6c      	ldr	r3, [pc, #432]	@ (810cec0 <ip4_input+0x240>)
 810cd10:	695b      	ldr	r3, [r3, #20]
 810cd12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 810cd16:	2be0      	cmp	r3, #224	@ 0xe0
 810cd18:	d112      	bne.n	810cd40 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 810cd1a:	683b      	ldr	r3, [r7, #0]
 810cd1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810cd20:	f003 0301 	and.w	r3, r3, #1
 810cd24:	b2db      	uxtb	r3, r3
 810cd26:	2b00      	cmp	r3, #0
 810cd28:	d007      	beq.n	810cd3a <ip4_input+0xba>
 810cd2a:	683b      	ldr	r3, [r7, #0]
 810cd2c:	3304      	adds	r3, #4
 810cd2e:	681b      	ldr	r3, [r3, #0]
 810cd30:	2b00      	cmp	r3, #0
 810cd32:	d002      	beq.n	810cd3a <ip4_input+0xba>
      netif = inp;
 810cd34:	683b      	ldr	r3, [r7, #0]
 810cd36:	613b      	str	r3, [r7, #16]
 810cd38:	e02a      	b.n	810cd90 <ip4_input+0x110>
    } else {
      netif = NULL;
 810cd3a:	2300      	movs	r3, #0
 810cd3c:	613b      	str	r3, [r7, #16]
 810cd3e:	e027      	b.n	810cd90 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 810cd40:	6838      	ldr	r0, [r7, #0]
 810cd42:	f7ff ff73 	bl	810cc2c <ip4_input_accept>
 810cd46:	4603      	mov	r3, r0
 810cd48:	2b00      	cmp	r3, #0
 810cd4a:	d002      	beq.n	810cd52 <ip4_input+0xd2>
      netif = inp;
 810cd4c:	683b      	ldr	r3, [r7, #0]
 810cd4e:	613b      	str	r3, [r7, #16]
 810cd50:	e01e      	b.n	810cd90 <ip4_input+0x110>
    } else {
      netif = NULL;
 810cd52:	2300      	movs	r3, #0
 810cd54:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 810cd56:	4b5a      	ldr	r3, [pc, #360]	@ (810cec0 <ip4_input+0x240>)
 810cd58:	695b      	ldr	r3, [r3, #20]
 810cd5a:	b2db      	uxtb	r3, r3
 810cd5c:	2b7f      	cmp	r3, #127	@ 0x7f
 810cd5e:	d017      	beq.n	810cd90 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 810cd60:	4b58      	ldr	r3, [pc, #352]	@ (810cec4 <ip4_input+0x244>)
 810cd62:	681b      	ldr	r3, [r3, #0]
 810cd64:	613b      	str	r3, [r7, #16]
 810cd66:	e00e      	b.n	810cd86 <ip4_input+0x106>
          if (netif == inp) {
 810cd68:	693a      	ldr	r2, [r7, #16]
 810cd6a:	683b      	ldr	r3, [r7, #0]
 810cd6c:	429a      	cmp	r2, r3
 810cd6e:	d006      	beq.n	810cd7e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 810cd70:	6938      	ldr	r0, [r7, #16]
 810cd72:	f7ff ff5b 	bl	810cc2c <ip4_input_accept>
 810cd76:	4603      	mov	r3, r0
 810cd78:	2b00      	cmp	r3, #0
 810cd7a:	d108      	bne.n	810cd8e <ip4_input+0x10e>
 810cd7c:	e000      	b.n	810cd80 <ip4_input+0x100>
            continue;
 810cd7e:	bf00      	nop
        NETIF_FOREACH(netif) {
 810cd80:	693b      	ldr	r3, [r7, #16]
 810cd82:	681b      	ldr	r3, [r3, #0]
 810cd84:	613b      	str	r3, [r7, #16]
 810cd86:	693b      	ldr	r3, [r7, #16]
 810cd88:	2b00      	cmp	r3, #0
 810cd8a:	d1ed      	bne.n	810cd68 <ip4_input+0xe8>
 810cd8c:	e000      	b.n	810cd90 <ip4_input+0x110>
            break;
 810cd8e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 810cd90:	4b4b      	ldr	r3, [pc, #300]	@ (810cec0 <ip4_input+0x240>)
 810cd92:	691b      	ldr	r3, [r3, #16]
 810cd94:	6839      	ldr	r1, [r7, #0]
 810cd96:	4618      	mov	r0, r3
 810cd98:	f000 f96e 	bl	810d078 <ip4_addr_isbroadcast_u32>
 810cd9c:	4603      	mov	r3, r0
 810cd9e:	2b00      	cmp	r3, #0
 810cda0:	d105      	bne.n	810cdae <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 810cda2:	4b47      	ldr	r3, [pc, #284]	@ (810cec0 <ip4_input+0x240>)
 810cda4:	691b      	ldr	r3, [r3, #16]
 810cda6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 810cdaa:	2be0      	cmp	r3, #224	@ 0xe0
 810cdac:	d104      	bne.n	810cdb8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 810cdae:	6878      	ldr	r0, [r7, #4]
 810cdb0:	f002 fb7a 	bl	810f4a8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 810cdb4:	2300      	movs	r3, #0
 810cdb6:	e07e      	b.n	810ceb6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 810cdb8:	693b      	ldr	r3, [r7, #16]
 810cdba:	2b00      	cmp	r3, #0
 810cdbc:	d104      	bne.n	810cdc8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 810cdbe:	6878      	ldr	r0, [r7, #4]
 810cdc0:	f002 fb72 	bl	810f4a8 <pbuf_free>
    return ERR_OK;
 810cdc4:	2300      	movs	r3, #0
 810cdc6:	e076      	b.n	810ceb6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 810cdc8:	697b      	ldr	r3, [r7, #20]
 810cdca:	88db      	ldrh	r3, [r3, #6]
 810cdcc:	b29b      	uxth	r3, r3
 810cdce:	461a      	mov	r2, r3
 810cdd0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 810cdd4:	4013      	ands	r3, r2
 810cdd6:	2b00      	cmp	r3, #0
 810cdd8:	d00b      	beq.n	810cdf2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 810cdda:	6878      	ldr	r0, [r7, #4]
 810cddc:	f000 fc92 	bl	810d704 <ip4_reass>
 810cde0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 810cde2:	687b      	ldr	r3, [r7, #4]
 810cde4:	2b00      	cmp	r3, #0
 810cde6:	d101      	bne.n	810cdec <ip4_input+0x16c>
      return ERR_OK;
 810cde8:	2300      	movs	r3, #0
 810cdea:	e064      	b.n	810ceb6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 810cdec:	687b      	ldr	r3, [r7, #4]
 810cdee:	685b      	ldr	r3, [r3, #4]
 810cdf0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 810cdf2:	4a33      	ldr	r2, [pc, #204]	@ (810cec0 <ip4_input+0x240>)
 810cdf4:	693b      	ldr	r3, [r7, #16]
 810cdf6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 810cdf8:	4a31      	ldr	r2, [pc, #196]	@ (810cec0 <ip4_input+0x240>)
 810cdfa:	683b      	ldr	r3, [r7, #0]
 810cdfc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 810cdfe:	4a30      	ldr	r2, [pc, #192]	@ (810cec0 <ip4_input+0x240>)
 810ce00:	697b      	ldr	r3, [r7, #20]
 810ce02:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 810ce04:	697b      	ldr	r3, [r7, #20]
 810ce06:	781b      	ldrb	r3, [r3, #0]
 810ce08:	f003 030f 	and.w	r3, r3, #15
 810ce0c:	b2db      	uxtb	r3, r3
 810ce0e:	009b      	lsls	r3, r3, #2
 810ce10:	b2db      	uxtb	r3, r3
 810ce12:	461a      	mov	r2, r3
 810ce14:	4b2a      	ldr	r3, [pc, #168]	@ (810cec0 <ip4_input+0x240>)
 810ce16:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 810ce18:	89fb      	ldrh	r3, [r7, #14]
 810ce1a:	4619      	mov	r1, r3
 810ce1c:	6878      	ldr	r0, [r7, #4]
 810ce1e:	f002 fabd 	bl	810f39c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 810ce22:	697b      	ldr	r3, [r7, #20]
 810ce24:	7a5b      	ldrb	r3, [r3, #9]
 810ce26:	2b11      	cmp	r3, #17
 810ce28:	d006      	beq.n	810ce38 <ip4_input+0x1b8>
 810ce2a:	2b11      	cmp	r3, #17
 810ce2c:	dc13      	bgt.n	810ce56 <ip4_input+0x1d6>
 810ce2e:	2b01      	cmp	r3, #1
 810ce30:	d00c      	beq.n	810ce4c <ip4_input+0x1cc>
 810ce32:	2b06      	cmp	r3, #6
 810ce34:	d005      	beq.n	810ce42 <ip4_input+0x1c2>
 810ce36:	e00e      	b.n	810ce56 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 810ce38:	6839      	ldr	r1, [r7, #0]
 810ce3a:	6878      	ldr	r0, [r7, #4]
 810ce3c:	f008 fbb0 	bl	81155a0 <udp_input>
        break;
 810ce40:	e026      	b.n	810ce90 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 810ce42:	6839      	ldr	r1, [r7, #0]
 810ce44:	6878      	ldr	r0, [r7, #4]
 810ce46:	f004 fa5b 	bl	8111300 <tcp_input>
        break;
 810ce4a:	e021      	b.n	810ce90 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 810ce4c:	6839      	ldr	r1, [r7, #0]
 810ce4e:	6878      	ldr	r0, [r7, #4]
 810ce50:	f7ff fbf4 	bl	810c63c <icmp_input>
        break;
 810ce54:	e01c      	b.n	810ce90 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 810ce56:	4b1a      	ldr	r3, [pc, #104]	@ (810cec0 <ip4_input+0x240>)
 810ce58:	695b      	ldr	r3, [r3, #20]
 810ce5a:	6939      	ldr	r1, [r7, #16]
 810ce5c:	4618      	mov	r0, r3
 810ce5e:	f000 f90b 	bl	810d078 <ip4_addr_isbroadcast_u32>
 810ce62:	4603      	mov	r3, r0
 810ce64:	2b00      	cmp	r3, #0
 810ce66:	d10f      	bne.n	810ce88 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 810ce68:	4b15      	ldr	r3, [pc, #84]	@ (810cec0 <ip4_input+0x240>)
 810ce6a:	695b      	ldr	r3, [r3, #20]
 810ce6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 810ce70:	2be0      	cmp	r3, #224	@ 0xe0
 810ce72:	d009      	beq.n	810ce88 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 810ce74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810ce78:	4619      	mov	r1, r3
 810ce7a:	6878      	ldr	r0, [r7, #4]
 810ce7c:	f002 fb01 	bl	810f482 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 810ce80:	2102      	movs	r1, #2
 810ce82:	6878      	ldr	r0, [r7, #4]
 810ce84:	f7ff fcfa 	bl	810c87c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 810ce88:	6878      	ldr	r0, [r7, #4]
 810ce8a:	f002 fb0d 	bl	810f4a8 <pbuf_free>
        break;
 810ce8e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 810ce90:	4b0b      	ldr	r3, [pc, #44]	@ (810cec0 <ip4_input+0x240>)
 810ce92:	2200      	movs	r2, #0
 810ce94:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 810ce96:	4b0a      	ldr	r3, [pc, #40]	@ (810cec0 <ip4_input+0x240>)
 810ce98:	2200      	movs	r2, #0
 810ce9a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 810ce9c:	4b08      	ldr	r3, [pc, #32]	@ (810cec0 <ip4_input+0x240>)
 810ce9e:	2200      	movs	r2, #0
 810cea0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 810cea2:	4b07      	ldr	r3, [pc, #28]	@ (810cec0 <ip4_input+0x240>)
 810cea4:	2200      	movs	r2, #0
 810cea6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 810cea8:	4b05      	ldr	r3, [pc, #20]	@ (810cec0 <ip4_input+0x240>)
 810ceaa:	2200      	movs	r2, #0
 810ceac:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 810ceae:	4b04      	ldr	r3, [pc, #16]	@ (810cec0 <ip4_input+0x240>)
 810ceb0:	2200      	movs	r2, #0
 810ceb2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 810ceb4:	2300      	movs	r3, #0
}
 810ceb6:	4618      	mov	r0, r3
 810ceb8:	3718      	adds	r7, #24
 810ceba:	46bd      	mov	sp, r7
 810cebc:	bd80      	pop	{r7, pc}
 810cebe:	bf00      	nop
 810cec0:	1000b17c 	.word	0x1000b17c
 810cec4:	10011c3c 	.word	0x10011c3c

0810cec8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 810cec8:	b580      	push	{r7, lr}
 810ceca:	b08a      	sub	sp, #40	@ 0x28
 810cecc:	af04      	add	r7, sp, #16
 810cece:	60f8      	str	r0, [r7, #12]
 810ced0:	60b9      	str	r1, [r7, #8]
 810ced2:	607a      	str	r2, [r7, #4]
 810ced4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 810ced6:	68bb      	ldr	r3, [r7, #8]
 810ced8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 810ceda:	687b      	ldr	r3, [r7, #4]
 810cedc:	2b00      	cmp	r3, #0
 810cede:	d009      	beq.n	810cef4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 810cee0:	68bb      	ldr	r3, [r7, #8]
 810cee2:	2b00      	cmp	r3, #0
 810cee4:	d003      	beq.n	810ceee <ip4_output_if+0x26>
 810cee6:	68bb      	ldr	r3, [r7, #8]
 810cee8:	681b      	ldr	r3, [r3, #0]
 810ceea:	2b00      	cmp	r3, #0
 810ceec:	d102      	bne.n	810cef4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 810ceee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cef0:	3304      	adds	r3, #4
 810cef2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 810cef4:	78fa      	ldrb	r2, [r7, #3]
 810cef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cef8:	9302      	str	r3, [sp, #8]
 810cefa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810cefe:	9301      	str	r3, [sp, #4]
 810cf00:	f897 3020 	ldrb.w	r3, [r7, #32]
 810cf04:	9300      	str	r3, [sp, #0]
 810cf06:	4613      	mov	r3, r2
 810cf08:	687a      	ldr	r2, [r7, #4]
 810cf0a:	6979      	ldr	r1, [r7, #20]
 810cf0c:	68f8      	ldr	r0, [r7, #12]
 810cf0e:	f000 f805 	bl	810cf1c <ip4_output_if_src>
 810cf12:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 810cf14:	4618      	mov	r0, r3
 810cf16:	3718      	adds	r7, #24
 810cf18:	46bd      	mov	sp, r7
 810cf1a:	bd80      	pop	{r7, pc}

0810cf1c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 810cf1c:	b580      	push	{r7, lr}
 810cf1e:	b088      	sub	sp, #32
 810cf20:	af00      	add	r7, sp, #0
 810cf22:	60f8      	str	r0, [r7, #12]
 810cf24:	60b9      	str	r1, [r7, #8]
 810cf26:	607a      	str	r2, [r7, #4]
 810cf28:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 810cf2a:	68fb      	ldr	r3, [r7, #12]
 810cf2c:	7b9b      	ldrb	r3, [r3, #14]
 810cf2e:	2b01      	cmp	r3, #1
 810cf30:	d006      	beq.n	810cf40 <ip4_output_if_src+0x24>
 810cf32:	4b4b      	ldr	r3, [pc, #300]	@ (810d060 <ip4_output_if_src+0x144>)
 810cf34:	f44f 7255 	mov.w	r2, #852	@ 0x354
 810cf38:	494a      	ldr	r1, [pc, #296]	@ (810d064 <ip4_output_if_src+0x148>)
 810cf3a:	484b      	ldr	r0, [pc, #300]	@ (810d068 <ip4_output_if_src+0x14c>)
 810cf3c:	f008 ff20 	bl	8115d80 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 810cf40:	687b      	ldr	r3, [r7, #4]
 810cf42:	2b00      	cmp	r3, #0
 810cf44:	d060      	beq.n	810d008 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 810cf46:	2314      	movs	r3, #20
 810cf48:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 810cf4a:	2114      	movs	r1, #20
 810cf4c:	68f8      	ldr	r0, [r7, #12]
 810cf4e:	f002 fa15 	bl	810f37c <pbuf_add_header>
 810cf52:	4603      	mov	r3, r0
 810cf54:	2b00      	cmp	r3, #0
 810cf56:	d002      	beq.n	810cf5e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 810cf58:	f06f 0301 	mvn.w	r3, #1
 810cf5c:	e07c      	b.n	810d058 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 810cf5e:	68fb      	ldr	r3, [r7, #12]
 810cf60:	685b      	ldr	r3, [r3, #4]
 810cf62:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 810cf64:	68fb      	ldr	r3, [r7, #12]
 810cf66:	895b      	ldrh	r3, [r3, #10]
 810cf68:	2b13      	cmp	r3, #19
 810cf6a:	d806      	bhi.n	810cf7a <ip4_output_if_src+0x5e>
 810cf6c:	4b3c      	ldr	r3, [pc, #240]	@ (810d060 <ip4_output_if_src+0x144>)
 810cf6e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 810cf72:	493e      	ldr	r1, [pc, #248]	@ (810d06c <ip4_output_if_src+0x150>)
 810cf74:	483c      	ldr	r0, [pc, #240]	@ (810d068 <ip4_output_if_src+0x14c>)
 810cf76:	f008 ff03 	bl	8115d80 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 810cf7a:	69fb      	ldr	r3, [r7, #28]
 810cf7c:	78fa      	ldrb	r2, [r7, #3]
 810cf7e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 810cf80:	69fb      	ldr	r3, [r7, #28]
 810cf82:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 810cf86:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 810cf88:	687b      	ldr	r3, [r7, #4]
 810cf8a:	681a      	ldr	r2, [r3, #0]
 810cf8c:	69fb      	ldr	r3, [r7, #28]
 810cf8e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 810cf90:	8b7b      	ldrh	r3, [r7, #26]
 810cf92:	089b      	lsrs	r3, r3, #2
 810cf94:	b29b      	uxth	r3, r3
 810cf96:	b2db      	uxtb	r3, r3
 810cf98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810cf9c:	b2da      	uxtb	r2, r3
 810cf9e:	69fb      	ldr	r3, [r7, #28]
 810cfa0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 810cfa2:	69fb      	ldr	r3, [r7, #28]
 810cfa4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 810cfa8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 810cfaa:	68fb      	ldr	r3, [r7, #12]
 810cfac:	891b      	ldrh	r3, [r3, #8]
 810cfae:	4618      	mov	r0, r3
 810cfb0:	f7fe faf4 	bl	810b59c <lwip_htons>
 810cfb4:	4603      	mov	r3, r0
 810cfb6:	461a      	mov	r2, r3
 810cfb8:	69fb      	ldr	r3, [r7, #28]
 810cfba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 810cfbc:	69fb      	ldr	r3, [r7, #28]
 810cfbe:	2200      	movs	r2, #0
 810cfc0:	719a      	strb	r2, [r3, #6]
 810cfc2:	2200      	movs	r2, #0
 810cfc4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 810cfc6:	4b2a      	ldr	r3, [pc, #168]	@ (810d070 <ip4_output_if_src+0x154>)
 810cfc8:	881b      	ldrh	r3, [r3, #0]
 810cfca:	4618      	mov	r0, r3
 810cfcc:	f7fe fae6 	bl	810b59c <lwip_htons>
 810cfd0:	4603      	mov	r3, r0
 810cfd2:	461a      	mov	r2, r3
 810cfd4:	69fb      	ldr	r3, [r7, #28]
 810cfd6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 810cfd8:	4b25      	ldr	r3, [pc, #148]	@ (810d070 <ip4_output_if_src+0x154>)
 810cfda:	881b      	ldrh	r3, [r3, #0]
 810cfdc:	3301      	adds	r3, #1
 810cfde:	b29a      	uxth	r2, r3
 810cfe0:	4b23      	ldr	r3, [pc, #140]	@ (810d070 <ip4_output_if_src+0x154>)
 810cfe2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 810cfe4:	68bb      	ldr	r3, [r7, #8]
 810cfe6:	2b00      	cmp	r3, #0
 810cfe8:	d104      	bne.n	810cff4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 810cfea:	4b22      	ldr	r3, [pc, #136]	@ (810d074 <ip4_output_if_src+0x158>)
 810cfec:	681a      	ldr	r2, [r3, #0]
 810cfee:	69fb      	ldr	r3, [r7, #28]
 810cff0:	60da      	str	r2, [r3, #12]
 810cff2:	e003      	b.n	810cffc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 810cff4:	68bb      	ldr	r3, [r7, #8]
 810cff6:	681a      	ldr	r2, [r3, #0]
 810cff8:	69fb      	ldr	r3, [r7, #28]
 810cffa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 810cffc:	69fb      	ldr	r3, [r7, #28]
 810cffe:	2200      	movs	r2, #0
 810d000:	729a      	strb	r2, [r3, #10]
 810d002:	2200      	movs	r2, #0
 810d004:	72da      	strb	r2, [r3, #11]
 810d006:	e00f      	b.n	810d028 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 810d008:	68fb      	ldr	r3, [r7, #12]
 810d00a:	895b      	ldrh	r3, [r3, #10]
 810d00c:	2b13      	cmp	r3, #19
 810d00e:	d802      	bhi.n	810d016 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 810d010:	f06f 0301 	mvn.w	r3, #1
 810d014:	e020      	b.n	810d058 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 810d016:	68fb      	ldr	r3, [r7, #12]
 810d018:	685b      	ldr	r3, [r3, #4]
 810d01a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 810d01c:	69fb      	ldr	r3, [r7, #28]
 810d01e:	691b      	ldr	r3, [r3, #16]
 810d020:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 810d022:	f107 0314 	add.w	r3, r7, #20
 810d026:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 810d028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d02a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 810d02c:	2b00      	cmp	r3, #0
 810d02e:	d00c      	beq.n	810d04a <ip4_output_if_src+0x12e>
 810d030:	68fb      	ldr	r3, [r7, #12]
 810d032:	891a      	ldrh	r2, [r3, #8]
 810d034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d036:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 810d038:	429a      	cmp	r2, r3
 810d03a:	d906      	bls.n	810d04a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 810d03c:	687a      	ldr	r2, [r7, #4]
 810d03e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 810d040:	68f8      	ldr	r0, [r7, #12]
 810d042:	f000 fd53 	bl	810daec <ip4_frag>
 810d046:	4603      	mov	r3, r0
 810d048:	e006      	b.n	810d058 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 810d04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d04c:	695b      	ldr	r3, [r3, #20]
 810d04e:	687a      	ldr	r2, [r7, #4]
 810d050:	68f9      	ldr	r1, [r7, #12]
 810d052:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810d054:	4798      	blx	r3
 810d056:	4603      	mov	r3, r0
}
 810d058:	4618      	mov	r0, r3
 810d05a:	3720      	adds	r7, #32
 810d05c:	46bd      	mov	sp, r7
 810d05e:	bd80      	pop	{r7, pc}
 810d060:	08117124 	.word	0x08117124
 810d064:	08117198 	.word	0x08117198
 810d068:	081171a4 	.word	0x081171a4
 810d06c:	081171cc 	.word	0x081171cc
 810d070:	1000b194 	.word	0x1000b194
 810d074:	08119b3c 	.word	0x08119b3c

0810d078 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 810d078:	b480      	push	{r7}
 810d07a:	b085      	sub	sp, #20
 810d07c:	af00      	add	r7, sp, #0
 810d07e:	6078      	str	r0, [r7, #4]
 810d080:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 810d082:	687b      	ldr	r3, [r7, #4]
 810d084:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 810d086:	687b      	ldr	r3, [r7, #4]
 810d088:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d08c:	d002      	beq.n	810d094 <ip4_addr_isbroadcast_u32+0x1c>
 810d08e:	687b      	ldr	r3, [r7, #4]
 810d090:	2b00      	cmp	r3, #0
 810d092:	d101      	bne.n	810d098 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 810d094:	2301      	movs	r3, #1
 810d096:	e02a      	b.n	810d0ee <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 810d098:	683b      	ldr	r3, [r7, #0]
 810d09a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810d09e:	f003 0302 	and.w	r3, r3, #2
 810d0a2:	2b00      	cmp	r3, #0
 810d0a4:	d101      	bne.n	810d0aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 810d0a6:	2300      	movs	r3, #0
 810d0a8:	e021      	b.n	810d0ee <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 810d0aa:	683b      	ldr	r3, [r7, #0]
 810d0ac:	3304      	adds	r3, #4
 810d0ae:	681b      	ldr	r3, [r3, #0]
 810d0b0:	687a      	ldr	r2, [r7, #4]
 810d0b2:	429a      	cmp	r2, r3
 810d0b4:	d101      	bne.n	810d0ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 810d0b6:	2300      	movs	r3, #0
 810d0b8:	e019      	b.n	810d0ee <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 810d0ba:	68fa      	ldr	r2, [r7, #12]
 810d0bc:	683b      	ldr	r3, [r7, #0]
 810d0be:	3304      	adds	r3, #4
 810d0c0:	681b      	ldr	r3, [r3, #0]
 810d0c2:	405a      	eors	r2, r3
 810d0c4:	683b      	ldr	r3, [r7, #0]
 810d0c6:	3308      	adds	r3, #8
 810d0c8:	681b      	ldr	r3, [r3, #0]
 810d0ca:	4013      	ands	r3, r2
 810d0cc:	2b00      	cmp	r3, #0
 810d0ce:	d10d      	bne.n	810d0ec <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 810d0d0:	683b      	ldr	r3, [r7, #0]
 810d0d2:	3308      	adds	r3, #8
 810d0d4:	681b      	ldr	r3, [r3, #0]
 810d0d6:	43da      	mvns	r2, r3
 810d0d8:	687b      	ldr	r3, [r7, #4]
 810d0da:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 810d0dc:	683b      	ldr	r3, [r7, #0]
 810d0de:	3308      	adds	r3, #8
 810d0e0:	681b      	ldr	r3, [r3, #0]
 810d0e2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 810d0e4:	429a      	cmp	r2, r3
 810d0e6:	d101      	bne.n	810d0ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 810d0e8:	2301      	movs	r3, #1
 810d0ea:	e000      	b.n	810d0ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 810d0ec:	2300      	movs	r3, #0
  }
}
 810d0ee:	4618      	mov	r0, r3
 810d0f0:	3714      	adds	r7, #20
 810d0f2:	46bd      	mov	sp, r7
 810d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d0f8:	4770      	bx	lr
	...

0810d0fc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 810d0fc:	b580      	push	{r7, lr}
 810d0fe:	b084      	sub	sp, #16
 810d100:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 810d102:	2300      	movs	r3, #0
 810d104:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 810d106:	4b12      	ldr	r3, [pc, #72]	@ (810d150 <ip_reass_tmr+0x54>)
 810d108:	681b      	ldr	r3, [r3, #0]
 810d10a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 810d10c:	e018      	b.n	810d140 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 810d10e:	68fb      	ldr	r3, [r7, #12]
 810d110:	7fdb      	ldrb	r3, [r3, #31]
 810d112:	2b00      	cmp	r3, #0
 810d114:	d00b      	beq.n	810d12e <ip_reass_tmr+0x32>
      r->timer--;
 810d116:	68fb      	ldr	r3, [r7, #12]
 810d118:	7fdb      	ldrb	r3, [r3, #31]
 810d11a:	3b01      	subs	r3, #1
 810d11c:	b2da      	uxtb	r2, r3
 810d11e:	68fb      	ldr	r3, [r7, #12]
 810d120:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 810d122:	68fb      	ldr	r3, [r7, #12]
 810d124:	60bb      	str	r3, [r7, #8]
      r = r->next;
 810d126:	68fb      	ldr	r3, [r7, #12]
 810d128:	681b      	ldr	r3, [r3, #0]
 810d12a:	60fb      	str	r3, [r7, #12]
 810d12c:	e008      	b.n	810d140 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 810d12e:	68fb      	ldr	r3, [r7, #12]
 810d130:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 810d132:	68fb      	ldr	r3, [r7, #12]
 810d134:	681b      	ldr	r3, [r3, #0]
 810d136:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 810d138:	68b9      	ldr	r1, [r7, #8]
 810d13a:	6878      	ldr	r0, [r7, #4]
 810d13c:	f000 f80a 	bl	810d154 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 810d140:	68fb      	ldr	r3, [r7, #12]
 810d142:	2b00      	cmp	r3, #0
 810d144:	d1e3      	bne.n	810d10e <ip_reass_tmr+0x12>
    }
  }
}
 810d146:	bf00      	nop
 810d148:	bf00      	nop
 810d14a:	3710      	adds	r7, #16
 810d14c:	46bd      	mov	sp, r7
 810d14e:	bd80      	pop	{r7, pc}
 810d150:	1000b198 	.word	0x1000b198

0810d154 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 810d154:	b580      	push	{r7, lr}
 810d156:	b088      	sub	sp, #32
 810d158:	af00      	add	r7, sp, #0
 810d15a:	6078      	str	r0, [r7, #4]
 810d15c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 810d15e:	2300      	movs	r3, #0
 810d160:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 810d162:	683a      	ldr	r2, [r7, #0]
 810d164:	687b      	ldr	r3, [r7, #4]
 810d166:	429a      	cmp	r2, r3
 810d168:	d105      	bne.n	810d176 <ip_reass_free_complete_datagram+0x22>
 810d16a:	4b45      	ldr	r3, [pc, #276]	@ (810d280 <ip_reass_free_complete_datagram+0x12c>)
 810d16c:	22ab      	movs	r2, #171	@ 0xab
 810d16e:	4945      	ldr	r1, [pc, #276]	@ (810d284 <ip_reass_free_complete_datagram+0x130>)
 810d170:	4845      	ldr	r0, [pc, #276]	@ (810d288 <ip_reass_free_complete_datagram+0x134>)
 810d172:	f008 fe05 	bl	8115d80 <iprintf>
  if (prev != NULL) {
 810d176:	683b      	ldr	r3, [r7, #0]
 810d178:	2b00      	cmp	r3, #0
 810d17a:	d00a      	beq.n	810d192 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 810d17c:	683b      	ldr	r3, [r7, #0]
 810d17e:	681b      	ldr	r3, [r3, #0]
 810d180:	687a      	ldr	r2, [r7, #4]
 810d182:	429a      	cmp	r2, r3
 810d184:	d005      	beq.n	810d192 <ip_reass_free_complete_datagram+0x3e>
 810d186:	4b3e      	ldr	r3, [pc, #248]	@ (810d280 <ip_reass_free_complete_datagram+0x12c>)
 810d188:	22ad      	movs	r2, #173	@ 0xad
 810d18a:	4940      	ldr	r1, [pc, #256]	@ (810d28c <ip_reass_free_complete_datagram+0x138>)
 810d18c:	483e      	ldr	r0, [pc, #248]	@ (810d288 <ip_reass_free_complete_datagram+0x134>)
 810d18e:	f008 fdf7 	bl	8115d80 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 810d192:	687b      	ldr	r3, [r7, #4]
 810d194:	685b      	ldr	r3, [r3, #4]
 810d196:	685b      	ldr	r3, [r3, #4]
 810d198:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 810d19a:	697b      	ldr	r3, [r7, #20]
 810d19c:	889b      	ldrh	r3, [r3, #4]
 810d19e:	b29b      	uxth	r3, r3
 810d1a0:	2b00      	cmp	r3, #0
 810d1a2:	d12a      	bne.n	810d1fa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 810d1a4:	687b      	ldr	r3, [r7, #4]
 810d1a6:	685b      	ldr	r3, [r3, #4]
 810d1a8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 810d1aa:	697b      	ldr	r3, [r7, #20]
 810d1ac:	681a      	ldr	r2, [r3, #0]
 810d1ae:	687b      	ldr	r3, [r7, #4]
 810d1b0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 810d1b2:	69bb      	ldr	r3, [r7, #24]
 810d1b4:	6858      	ldr	r0, [r3, #4]
 810d1b6:	687b      	ldr	r3, [r7, #4]
 810d1b8:	3308      	adds	r3, #8
 810d1ba:	2214      	movs	r2, #20
 810d1bc:	4619      	mov	r1, r3
 810d1be:	f008 ff7e 	bl	81160be <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 810d1c2:	2101      	movs	r1, #1
 810d1c4:	69b8      	ldr	r0, [r7, #24]
 810d1c6:	f7ff fb69 	bl	810c89c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 810d1ca:	69b8      	ldr	r0, [r7, #24]
 810d1cc:	f002 f9fa 	bl	810f5c4 <pbuf_clen>
 810d1d0:	4603      	mov	r3, r0
 810d1d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 810d1d4:	8bfa      	ldrh	r2, [r7, #30]
 810d1d6:	8a7b      	ldrh	r3, [r7, #18]
 810d1d8:	4413      	add	r3, r2
 810d1da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810d1de:	db05      	blt.n	810d1ec <ip_reass_free_complete_datagram+0x98>
 810d1e0:	4b27      	ldr	r3, [pc, #156]	@ (810d280 <ip_reass_free_complete_datagram+0x12c>)
 810d1e2:	22bc      	movs	r2, #188	@ 0xbc
 810d1e4:	492a      	ldr	r1, [pc, #168]	@ (810d290 <ip_reass_free_complete_datagram+0x13c>)
 810d1e6:	4828      	ldr	r0, [pc, #160]	@ (810d288 <ip_reass_free_complete_datagram+0x134>)
 810d1e8:	f008 fdca 	bl	8115d80 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 810d1ec:	8bfa      	ldrh	r2, [r7, #30]
 810d1ee:	8a7b      	ldrh	r3, [r7, #18]
 810d1f0:	4413      	add	r3, r2
 810d1f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 810d1f4:	69b8      	ldr	r0, [r7, #24]
 810d1f6:	f002 f957 	bl	810f4a8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 810d1fa:	687b      	ldr	r3, [r7, #4]
 810d1fc:	685b      	ldr	r3, [r3, #4]
 810d1fe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 810d200:	e01f      	b.n	810d242 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 810d202:	69bb      	ldr	r3, [r7, #24]
 810d204:	685b      	ldr	r3, [r3, #4]
 810d206:	617b      	str	r3, [r7, #20]
    pcur = p;
 810d208:	69bb      	ldr	r3, [r7, #24]
 810d20a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 810d20c:	697b      	ldr	r3, [r7, #20]
 810d20e:	681b      	ldr	r3, [r3, #0]
 810d210:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 810d212:	68f8      	ldr	r0, [r7, #12]
 810d214:	f002 f9d6 	bl	810f5c4 <pbuf_clen>
 810d218:	4603      	mov	r3, r0
 810d21a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 810d21c:	8bfa      	ldrh	r2, [r7, #30]
 810d21e:	8a7b      	ldrh	r3, [r7, #18]
 810d220:	4413      	add	r3, r2
 810d222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810d226:	db05      	blt.n	810d234 <ip_reass_free_complete_datagram+0xe0>
 810d228:	4b15      	ldr	r3, [pc, #84]	@ (810d280 <ip_reass_free_complete_datagram+0x12c>)
 810d22a:	22cc      	movs	r2, #204	@ 0xcc
 810d22c:	4918      	ldr	r1, [pc, #96]	@ (810d290 <ip_reass_free_complete_datagram+0x13c>)
 810d22e:	4816      	ldr	r0, [pc, #88]	@ (810d288 <ip_reass_free_complete_datagram+0x134>)
 810d230:	f008 fda6 	bl	8115d80 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 810d234:	8bfa      	ldrh	r2, [r7, #30]
 810d236:	8a7b      	ldrh	r3, [r7, #18]
 810d238:	4413      	add	r3, r2
 810d23a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 810d23c:	68f8      	ldr	r0, [r7, #12]
 810d23e:	f002 f933 	bl	810f4a8 <pbuf_free>
  while (p != NULL) {
 810d242:	69bb      	ldr	r3, [r7, #24]
 810d244:	2b00      	cmp	r3, #0
 810d246:	d1dc      	bne.n	810d202 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 810d248:	6839      	ldr	r1, [r7, #0]
 810d24a:	6878      	ldr	r0, [r7, #4]
 810d24c:	f000 f8c2 	bl	810d3d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 810d250:	4b10      	ldr	r3, [pc, #64]	@ (810d294 <ip_reass_free_complete_datagram+0x140>)
 810d252:	881b      	ldrh	r3, [r3, #0]
 810d254:	8bfa      	ldrh	r2, [r7, #30]
 810d256:	429a      	cmp	r2, r3
 810d258:	d905      	bls.n	810d266 <ip_reass_free_complete_datagram+0x112>
 810d25a:	4b09      	ldr	r3, [pc, #36]	@ (810d280 <ip_reass_free_complete_datagram+0x12c>)
 810d25c:	22d2      	movs	r2, #210	@ 0xd2
 810d25e:	490e      	ldr	r1, [pc, #56]	@ (810d298 <ip_reass_free_complete_datagram+0x144>)
 810d260:	4809      	ldr	r0, [pc, #36]	@ (810d288 <ip_reass_free_complete_datagram+0x134>)
 810d262:	f008 fd8d 	bl	8115d80 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 810d266:	4b0b      	ldr	r3, [pc, #44]	@ (810d294 <ip_reass_free_complete_datagram+0x140>)
 810d268:	881a      	ldrh	r2, [r3, #0]
 810d26a:	8bfb      	ldrh	r3, [r7, #30]
 810d26c:	1ad3      	subs	r3, r2, r3
 810d26e:	b29a      	uxth	r2, r3
 810d270:	4b08      	ldr	r3, [pc, #32]	@ (810d294 <ip_reass_free_complete_datagram+0x140>)
 810d272:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 810d274:	8bfb      	ldrh	r3, [r7, #30]
}
 810d276:	4618      	mov	r0, r3
 810d278:	3720      	adds	r7, #32
 810d27a:	46bd      	mov	sp, r7
 810d27c:	bd80      	pop	{r7, pc}
 810d27e:	bf00      	nop
 810d280:	081171fc 	.word	0x081171fc
 810d284:	08117274 	.word	0x08117274
 810d288:	08117280 	.word	0x08117280
 810d28c:	081172a8 	.word	0x081172a8
 810d290:	081172bc 	.word	0x081172bc
 810d294:	1000b19c 	.word	0x1000b19c
 810d298:	081172dc 	.word	0x081172dc

0810d29c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 810d29c:	b580      	push	{r7, lr}
 810d29e:	b08a      	sub	sp, #40	@ 0x28
 810d2a0:	af00      	add	r7, sp, #0
 810d2a2:	6078      	str	r0, [r7, #4]
 810d2a4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 810d2a6:	2300      	movs	r3, #0
 810d2a8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 810d2aa:	2300      	movs	r3, #0
 810d2ac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 810d2ae:	2300      	movs	r3, #0
 810d2b0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 810d2b2:	2300      	movs	r3, #0
 810d2b4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 810d2b6:	2300      	movs	r3, #0
 810d2b8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 810d2ba:	4b28      	ldr	r3, [pc, #160]	@ (810d35c <ip_reass_remove_oldest_datagram+0xc0>)
 810d2bc:	681b      	ldr	r3, [r3, #0]
 810d2be:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 810d2c0:	e030      	b.n	810d324 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 810d2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d2c4:	695a      	ldr	r2, [r3, #20]
 810d2c6:	687b      	ldr	r3, [r7, #4]
 810d2c8:	68db      	ldr	r3, [r3, #12]
 810d2ca:	429a      	cmp	r2, r3
 810d2cc:	d10c      	bne.n	810d2e8 <ip_reass_remove_oldest_datagram+0x4c>
 810d2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d2d0:	699a      	ldr	r2, [r3, #24]
 810d2d2:	687b      	ldr	r3, [r7, #4]
 810d2d4:	691b      	ldr	r3, [r3, #16]
 810d2d6:	429a      	cmp	r2, r3
 810d2d8:	d106      	bne.n	810d2e8 <ip_reass_remove_oldest_datagram+0x4c>
 810d2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d2dc:	899a      	ldrh	r2, [r3, #12]
 810d2de:	687b      	ldr	r3, [r7, #4]
 810d2e0:	889b      	ldrh	r3, [r3, #4]
 810d2e2:	b29b      	uxth	r3, r3
 810d2e4:	429a      	cmp	r2, r3
 810d2e6:	d014      	beq.n	810d312 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 810d2e8:	693b      	ldr	r3, [r7, #16]
 810d2ea:	3301      	adds	r3, #1
 810d2ec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 810d2ee:	6a3b      	ldr	r3, [r7, #32]
 810d2f0:	2b00      	cmp	r3, #0
 810d2f2:	d104      	bne.n	810d2fe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 810d2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d2f6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 810d2f8:	69fb      	ldr	r3, [r7, #28]
 810d2fa:	61bb      	str	r3, [r7, #24]
 810d2fc:	e009      	b.n	810d312 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 810d2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d300:	7fda      	ldrb	r2, [r3, #31]
 810d302:	6a3b      	ldr	r3, [r7, #32]
 810d304:	7fdb      	ldrb	r3, [r3, #31]
 810d306:	429a      	cmp	r2, r3
 810d308:	d803      	bhi.n	810d312 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 810d30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d30c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 810d30e:	69fb      	ldr	r3, [r7, #28]
 810d310:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 810d312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d314:	681b      	ldr	r3, [r3, #0]
 810d316:	2b00      	cmp	r3, #0
 810d318:	d001      	beq.n	810d31e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 810d31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d31c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 810d31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d320:	681b      	ldr	r3, [r3, #0]
 810d322:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 810d324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d326:	2b00      	cmp	r3, #0
 810d328:	d1cb      	bne.n	810d2c2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 810d32a:	6a3b      	ldr	r3, [r7, #32]
 810d32c:	2b00      	cmp	r3, #0
 810d32e:	d008      	beq.n	810d342 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 810d330:	69b9      	ldr	r1, [r7, #24]
 810d332:	6a38      	ldr	r0, [r7, #32]
 810d334:	f7ff ff0e 	bl	810d154 <ip_reass_free_complete_datagram>
 810d338:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 810d33a:	697a      	ldr	r2, [r7, #20]
 810d33c:	68fb      	ldr	r3, [r7, #12]
 810d33e:	4413      	add	r3, r2
 810d340:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 810d342:	697a      	ldr	r2, [r7, #20]
 810d344:	683b      	ldr	r3, [r7, #0]
 810d346:	429a      	cmp	r2, r3
 810d348:	da02      	bge.n	810d350 <ip_reass_remove_oldest_datagram+0xb4>
 810d34a:	693b      	ldr	r3, [r7, #16]
 810d34c:	2b01      	cmp	r3, #1
 810d34e:	dcac      	bgt.n	810d2aa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 810d350:	697b      	ldr	r3, [r7, #20]
}
 810d352:	4618      	mov	r0, r3
 810d354:	3728      	adds	r7, #40	@ 0x28
 810d356:	46bd      	mov	sp, r7
 810d358:	bd80      	pop	{r7, pc}
 810d35a:	bf00      	nop
 810d35c:	1000b198 	.word	0x1000b198

0810d360 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 810d360:	b580      	push	{r7, lr}
 810d362:	b084      	sub	sp, #16
 810d364:	af00      	add	r7, sp, #0
 810d366:	6078      	str	r0, [r7, #4]
 810d368:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 810d36a:	2004      	movs	r0, #4
 810d36c:	f001 f982 	bl	810e674 <memp_malloc>
 810d370:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 810d372:	68fb      	ldr	r3, [r7, #12]
 810d374:	2b00      	cmp	r3, #0
 810d376:	d110      	bne.n	810d39a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 810d378:	6839      	ldr	r1, [r7, #0]
 810d37a:	6878      	ldr	r0, [r7, #4]
 810d37c:	f7ff ff8e 	bl	810d29c <ip_reass_remove_oldest_datagram>
 810d380:	4602      	mov	r2, r0
 810d382:	683b      	ldr	r3, [r7, #0]
 810d384:	4293      	cmp	r3, r2
 810d386:	dc03      	bgt.n	810d390 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 810d388:	2004      	movs	r0, #4
 810d38a:	f001 f973 	bl	810e674 <memp_malloc>
 810d38e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 810d390:	68fb      	ldr	r3, [r7, #12]
 810d392:	2b00      	cmp	r3, #0
 810d394:	d101      	bne.n	810d39a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 810d396:	2300      	movs	r3, #0
 810d398:	e016      	b.n	810d3c8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 810d39a:	2220      	movs	r2, #32
 810d39c:	2100      	movs	r1, #0
 810d39e:	68f8      	ldr	r0, [r7, #12]
 810d3a0:	f008 fd6d 	bl	8115e7e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 810d3a4:	68fb      	ldr	r3, [r7, #12]
 810d3a6:	220f      	movs	r2, #15
 810d3a8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 810d3aa:	4b09      	ldr	r3, [pc, #36]	@ (810d3d0 <ip_reass_enqueue_new_datagram+0x70>)
 810d3ac:	681a      	ldr	r2, [r3, #0]
 810d3ae:	68fb      	ldr	r3, [r7, #12]
 810d3b0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 810d3b2:	4a07      	ldr	r2, [pc, #28]	@ (810d3d0 <ip_reass_enqueue_new_datagram+0x70>)
 810d3b4:	68fb      	ldr	r3, [r7, #12]
 810d3b6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 810d3b8:	68fb      	ldr	r3, [r7, #12]
 810d3ba:	3308      	adds	r3, #8
 810d3bc:	2214      	movs	r2, #20
 810d3be:	6879      	ldr	r1, [r7, #4]
 810d3c0:	4618      	mov	r0, r3
 810d3c2:	f008 fe7c 	bl	81160be <memcpy>
  return ipr;
 810d3c6:	68fb      	ldr	r3, [r7, #12]
}
 810d3c8:	4618      	mov	r0, r3
 810d3ca:	3710      	adds	r7, #16
 810d3cc:	46bd      	mov	sp, r7
 810d3ce:	bd80      	pop	{r7, pc}
 810d3d0:	1000b198 	.word	0x1000b198

0810d3d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 810d3d4:	b580      	push	{r7, lr}
 810d3d6:	b082      	sub	sp, #8
 810d3d8:	af00      	add	r7, sp, #0
 810d3da:	6078      	str	r0, [r7, #4]
 810d3dc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 810d3de:	4b10      	ldr	r3, [pc, #64]	@ (810d420 <ip_reass_dequeue_datagram+0x4c>)
 810d3e0:	681b      	ldr	r3, [r3, #0]
 810d3e2:	687a      	ldr	r2, [r7, #4]
 810d3e4:	429a      	cmp	r2, r3
 810d3e6:	d104      	bne.n	810d3f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 810d3e8:	687b      	ldr	r3, [r7, #4]
 810d3ea:	681b      	ldr	r3, [r3, #0]
 810d3ec:	4a0c      	ldr	r2, [pc, #48]	@ (810d420 <ip_reass_dequeue_datagram+0x4c>)
 810d3ee:	6013      	str	r3, [r2, #0]
 810d3f0:	e00d      	b.n	810d40e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 810d3f2:	683b      	ldr	r3, [r7, #0]
 810d3f4:	2b00      	cmp	r3, #0
 810d3f6:	d106      	bne.n	810d406 <ip_reass_dequeue_datagram+0x32>
 810d3f8:	4b0a      	ldr	r3, [pc, #40]	@ (810d424 <ip_reass_dequeue_datagram+0x50>)
 810d3fa:	f240 1245 	movw	r2, #325	@ 0x145
 810d3fe:	490a      	ldr	r1, [pc, #40]	@ (810d428 <ip_reass_dequeue_datagram+0x54>)
 810d400:	480a      	ldr	r0, [pc, #40]	@ (810d42c <ip_reass_dequeue_datagram+0x58>)
 810d402:	f008 fcbd 	bl	8115d80 <iprintf>
    prev->next = ipr->next;
 810d406:	687b      	ldr	r3, [r7, #4]
 810d408:	681a      	ldr	r2, [r3, #0]
 810d40a:	683b      	ldr	r3, [r7, #0]
 810d40c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 810d40e:	6879      	ldr	r1, [r7, #4]
 810d410:	2004      	movs	r0, #4
 810d412:	f001 f9a5 	bl	810e760 <memp_free>
}
 810d416:	bf00      	nop
 810d418:	3708      	adds	r7, #8
 810d41a:	46bd      	mov	sp, r7
 810d41c:	bd80      	pop	{r7, pc}
 810d41e:	bf00      	nop
 810d420:	1000b198 	.word	0x1000b198
 810d424:	081171fc 	.word	0x081171fc
 810d428:	08117300 	.word	0x08117300
 810d42c:	08117280 	.word	0x08117280

0810d430 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 810d430:	b580      	push	{r7, lr}
 810d432:	b08c      	sub	sp, #48	@ 0x30
 810d434:	af00      	add	r7, sp, #0
 810d436:	60f8      	str	r0, [r7, #12]
 810d438:	60b9      	str	r1, [r7, #8]
 810d43a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 810d43c:	2300      	movs	r3, #0
 810d43e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 810d440:	2301      	movs	r3, #1
 810d442:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 810d444:	68bb      	ldr	r3, [r7, #8]
 810d446:	685b      	ldr	r3, [r3, #4]
 810d448:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 810d44a:	69fb      	ldr	r3, [r7, #28]
 810d44c:	885b      	ldrh	r3, [r3, #2]
 810d44e:	b29b      	uxth	r3, r3
 810d450:	4618      	mov	r0, r3
 810d452:	f7fe f8a3 	bl	810b59c <lwip_htons>
 810d456:	4603      	mov	r3, r0
 810d458:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 810d45a:	69fb      	ldr	r3, [r7, #28]
 810d45c:	781b      	ldrb	r3, [r3, #0]
 810d45e:	f003 030f 	and.w	r3, r3, #15
 810d462:	b2db      	uxtb	r3, r3
 810d464:	009b      	lsls	r3, r3, #2
 810d466:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 810d468:	7e7b      	ldrb	r3, [r7, #25]
 810d46a:	b29b      	uxth	r3, r3
 810d46c:	8b7a      	ldrh	r2, [r7, #26]
 810d46e:	429a      	cmp	r2, r3
 810d470:	d202      	bcs.n	810d478 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 810d472:	f04f 33ff 	mov.w	r3, #4294967295
 810d476:	e135      	b.n	810d6e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 810d478:	7e7b      	ldrb	r3, [r7, #25]
 810d47a:	b29b      	uxth	r3, r3
 810d47c:	8b7a      	ldrh	r2, [r7, #26]
 810d47e:	1ad3      	subs	r3, r2, r3
 810d480:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 810d482:	69fb      	ldr	r3, [r7, #28]
 810d484:	88db      	ldrh	r3, [r3, #6]
 810d486:	b29b      	uxth	r3, r3
 810d488:	4618      	mov	r0, r3
 810d48a:	f7fe f887 	bl	810b59c <lwip_htons>
 810d48e:	4603      	mov	r3, r0
 810d490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810d494:	b29b      	uxth	r3, r3
 810d496:	00db      	lsls	r3, r3, #3
 810d498:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 810d49a:	68bb      	ldr	r3, [r7, #8]
 810d49c:	685b      	ldr	r3, [r3, #4]
 810d49e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 810d4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d4a2:	2200      	movs	r2, #0
 810d4a4:	701a      	strb	r2, [r3, #0]
 810d4a6:	2200      	movs	r2, #0
 810d4a8:	705a      	strb	r2, [r3, #1]
 810d4aa:	2200      	movs	r2, #0
 810d4ac:	709a      	strb	r2, [r3, #2]
 810d4ae:	2200      	movs	r2, #0
 810d4b0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 810d4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d4b4:	8afa      	ldrh	r2, [r7, #22]
 810d4b6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 810d4b8:	8afa      	ldrh	r2, [r7, #22]
 810d4ba:	8b7b      	ldrh	r3, [r7, #26]
 810d4bc:	4413      	add	r3, r2
 810d4be:	b29a      	uxth	r2, r3
 810d4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d4c2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 810d4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d4c6:	88db      	ldrh	r3, [r3, #6]
 810d4c8:	b29b      	uxth	r3, r3
 810d4ca:	8afa      	ldrh	r2, [r7, #22]
 810d4cc:	429a      	cmp	r2, r3
 810d4ce:	d902      	bls.n	810d4d6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 810d4d0:	f04f 33ff 	mov.w	r3, #4294967295
 810d4d4:	e106      	b.n	810d6e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 810d4d6:	68fb      	ldr	r3, [r7, #12]
 810d4d8:	685b      	ldr	r3, [r3, #4]
 810d4da:	627b      	str	r3, [r7, #36]	@ 0x24
 810d4dc:	e068      	b.n	810d5b0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 810d4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d4e0:	685b      	ldr	r3, [r3, #4]
 810d4e2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 810d4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d4e6:	889b      	ldrh	r3, [r3, #4]
 810d4e8:	b29a      	uxth	r2, r3
 810d4ea:	693b      	ldr	r3, [r7, #16]
 810d4ec:	889b      	ldrh	r3, [r3, #4]
 810d4ee:	b29b      	uxth	r3, r3
 810d4f0:	429a      	cmp	r2, r3
 810d4f2:	d235      	bcs.n	810d560 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 810d4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d4f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810d4f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 810d4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d4fc:	2b00      	cmp	r3, #0
 810d4fe:	d020      	beq.n	810d542 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 810d500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d502:	889b      	ldrh	r3, [r3, #4]
 810d504:	b29a      	uxth	r2, r3
 810d506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d508:	88db      	ldrh	r3, [r3, #6]
 810d50a:	b29b      	uxth	r3, r3
 810d50c:	429a      	cmp	r2, r3
 810d50e:	d307      	bcc.n	810d520 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 810d510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d512:	88db      	ldrh	r3, [r3, #6]
 810d514:	b29a      	uxth	r2, r3
 810d516:	693b      	ldr	r3, [r7, #16]
 810d518:	889b      	ldrh	r3, [r3, #4]
 810d51a:	b29b      	uxth	r3, r3
 810d51c:	429a      	cmp	r2, r3
 810d51e:	d902      	bls.n	810d526 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 810d520:	f04f 33ff 	mov.w	r3, #4294967295
 810d524:	e0de      	b.n	810d6e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 810d526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d528:	68ba      	ldr	r2, [r7, #8]
 810d52a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 810d52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d52e:	88db      	ldrh	r3, [r3, #6]
 810d530:	b29a      	uxth	r2, r3
 810d532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d534:	889b      	ldrh	r3, [r3, #4]
 810d536:	b29b      	uxth	r3, r3
 810d538:	429a      	cmp	r2, r3
 810d53a:	d03d      	beq.n	810d5b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 810d53c:	2300      	movs	r3, #0
 810d53e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 810d540:	e03a      	b.n	810d5b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 810d542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d544:	88db      	ldrh	r3, [r3, #6]
 810d546:	b29a      	uxth	r2, r3
 810d548:	693b      	ldr	r3, [r7, #16]
 810d54a:	889b      	ldrh	r3, [r3, #4]
 810d54c:	b29b      	uxth	r3, r3
 810d54e:	429a      	cmp	r2, r3
 810d550:	d902      	bls.n	810d558 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 810d552:	f04f 33ff 	mov.w	r3, #4294967295
 810d556:	e0c5      	b.n	810d6e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 810d558:	68fb      	ldr	r3, [r7, #12]
 810d55a:	68ba      	ldr	r2, [r7, #8]
 810d55c:	605a      	str	r2, [r3, #4]
      break;
 810d55e:	e02b      	b.n	810d5b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 810d560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d562:	889b      	ldrh	r3, [r3, #4]
 810d564:	b29a      	uxth	r2, r3
 810d566:	693b      	ldr	r3, [r7, #16]
 810d568:	889b      	ldrh	r3, [r3, #4]
 810d56a:	b29b      	uxth	r3, r3
 810d56c:	429a      	cmp	r2, r3
 810d56e:	d102      	bne.n	810d576 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 810d570:	f04f 33ff 	mov.w	r3, #4294967295
 810d574:	e0b6      	b.n	810d6e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 810d576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d578:	889b      	ldrh	r3, [r3, #4]
 810d57a:	b29a      	uxth	r2, r3
 810d57c:	693b      	ldr	r3, [r7, #16]
 810d57e:	88db      	ldrh	r3, [r3, #6]
 810d580:	b29b      	uxth	r3, r3
 810d582:	429a      	cmp	r2, r3
 810d584:	d202      	bcs.n	810d58c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 810d586:	f04f 33ff 	mov.w	r3, #4294967295
 810d58a:	e0ab      	b.n	810d6e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 810d58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d58e:	2b00      	cmp	r3, #0
 810d590:	d009      	beq.n	810d5a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 810d592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d594:	88db      	ldrh	r3, [r3, #6]
 810d596:	b29a      	uxth	r2, r3
 810d598:	693b      	ldr	r3, [r7, #16]
 810d59a:	889b      	ldrh	r3, [r3, #4]
 810d59c:	b29b      	uxth	r3, r3
 810d59e:	429a      	cmp	r2, r3
 810d5a0:	d001      	beq.n	810d5a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 810d5a2:	2300      	movs	r3, #0
 810d5a4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 810d5a6:	693b      	ldr	r3, [r7, #16]
 810d5a8:	681b      	ldr	r3, [r3, #0]
 810d5aa:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 810d5ac:	693b      	ldr	r3, [r7, #16]
 810d5ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 810d5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d5b2:	2b00      	cmp	r3, #0
 810d5b4:	d193      	bne.n	810d4de <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 810d5b6:	e000      	b.n	810d5ba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 810d5b8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 810d5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d5bc:	2b00      	cmp	r3, #0
 810d5be:	d12d      	bne.n	810d61c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 810d5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d5c2:	2b00      	cmp	r3, #0
 810d5c4:	d01c      	beq.n	810d600 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 810d5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d5c8:	88db      	ldrh	r3, [r3, #6]
 810d5ca:	b29a      	uxth	r2, r3
 810d5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d5ce:	889b      	ldrh	r3, [r3, #4]
 810d5d0:	b29b      	uxth	r3, r3
 810d5d2:	429a      	cmp	r2, r3
 810d5d4:	d906      	bls.n	810d5e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 810d5d6:	4b45      	ldr	r3, [pc, #276]	@ (810d6ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810d5d8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 810d5dc:	4944      	ldr	r1, [pc, #272]	@ (810d6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 810d5de:	4845      	ldr	r0, [pc, #276]	@ (810d6f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810d5e0:	f008 fbce 	bl	8115d80 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 810d5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d5e6:	68ba      	ldr	r2, [r7, #8]
 810d5e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 810d5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d5ec:	88db      	ldrh	r3, [r3, #6]
 810d5ee:	b29a      	uxth	r2, r3
 810d5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d5f2:	889b      	ldrh	r3, [r3, #4]
 810d5f4:	b29b      	uxth	r3, r3
 810d5f6:	429a      	cmp	r2, r3
 810d5f8:	d010      	beq.n	810d61c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 810d5fa:	2300      	movs	r3, #0
 810d5fc:	623b      	str	r3, [r7, #32]
 810d5fe:	e00d      	b.n	810d61c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 810d600:	68fb      	ldr	r3, [r7, #12]
 810d602:	685b      	ldr	r3, [r3, #4]
 810d604:	2b00      	cmp	r3, #0
 810d606:	d006      	beq.n	810d616 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 810d608:	4b38      	ldr	r3, [pc, #224]	@ (810d6ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810d60a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 810d60e:	493a      	ldr	r1, [pc, #232]	@ (810d6f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 810d610:	4838      	ldr	r0, [pc, #224]	@ (810d6f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810d612:	f008 fbb5 	bl	8115d80 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 810d616:	68fb      	ldr	r3, [r7, #12]
 810d618:	68ba      	ldr	r2, [r7, #8]
 810d61a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 810d61c:	687b      	ldr	r3, [r7, #4]
 810d61e:	2b00      	cmp	r3, #0
 810d620:	d105      	bne.n	810d62e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 810d622:	68fb      	ldr	r3, [r7, #12]
 810d624:	7f9b      	ldrb	r3, [r3, #30]
 810d626:	f003 0301 	and.w	r3, r3, #1
 810d62a:	2b00      	cmp	r3, #0
 810d62c:	d059      	beq.n	810d6e2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 810d62e:	6a3b      	ldr	r3, [r7, #32]
 810d630:	2b00      	cmp	r3, #0
 810d632:	d04f      	beq.n	810d6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 810d634:	68fb      	ldr	r3, [r7, #12]
 810d636:	685b      	ldr	r3, [r3, #4]
 810d638:	2b00      	cmp	r3, #0
 810d63a:	d006      	beq.n	810d64a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 810d63c:	68fb      	ldr	r3, [r7, #12]
 810d63e:	685b      	ldr	r3, [r3, #4]
 810d640:	685b      	ldr	r3, [r3, #4]
 810d642:	889b      	ldrh	r3, [r3, #4]
 810d644:	b29b      	uxth	r3, r3
 810d646:	2b00      	cmp	r3, #0
 810d648:	d002      	beq.n	810d650 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 810d64a:	2300      	movs	r3, #0
 810d64c:	623b      	str	r3, [r7, #32]
 810d64e:	e041      	b.n	810d6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 810d650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d652:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 810d654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d656:	681b      	ldr	r3, [r3, #0]
 810d658:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 810d65a:	e012      	b.n	810d682 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 810d65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d65e:	685b      	ldr	r3, [r3, #4]
 810d660:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 810d662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d664:	88db      	ldrh	r3, [r3, #6]
 810d666:	b29a      	uxth	r2, r3
 810d668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d66a:	889b      	ldrh	r3, [r3, #4]
 810d66c:	b29b      	uxth	r3, r3
 810d66e:	429a      	cmp	r2, r3
 810d670:	d002      	beq.n	810d678 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 810d672:	2300      	movs	r3, #0
 810d674:	623b      	str	r3, [r7, #32]
            break;
 810d676:	e007      	b.n	810d688 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 810d678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d67a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 810d67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d67e:	681b      	ldr	r3, [r3, #0]
 810d680:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 810d682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d684:	2b00      	cmp	r3, #0
 810d686:	d1e9      	bne.n	810d65c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 810d688:	6a3b      	ldr	r3, [r7, #32]
 810d68a:	2b00      	cmp	r3, #0
 810d68c:	d022      	beq.n	810d6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 810d68e:	68fb      	ldr	r3, [r7, #12]
 810d690:	685b      	ldr	r3, [r3, #4]
 810d692:	2b00      	cmp	r3, #0
 810d694:	d106      	bne.n	810d6a4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 810d696:	4b15      	ldr	r3, [pc, #84]	@ (810d6ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810d698:	f240 12df 	movw	r2, #479	@ 0x1df
 810d69c:	4917      	ldr	r1, [pc, #92]	@ (810d6fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 810d69e:	4815      	ldr	r0, [pc, #84]	@ (810d6f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810d6a0:	f008 fb6e 	bl	8115d80 <iprintf>
          LWIP_ASSERT("sanity check",
 810d6a4:	68fb      	ldr	r3, [r7, #12]
 810d6a6:	685b      	ldr	r3, [r3, #4]
 810d6a8:	685b      	ldr	r3, [r3, #4]
 810d6aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810d6ac:	429a      	cmp	r2, r3
 810d6ae:	d106      	bne.n	810d6be <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 810d6b0:	4b0e      	ldr	r3, [pc, #56]	@ (810d6ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810d6b2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810d6b6:	4911      	ldr	r1, [pc, #68]	@ (810d6fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 810d6b8:	480e      	ldr	r0, [pc, #56]	@ (810d6f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810d6ba:	f008 fb61 	bl	8115d80 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 810d6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d6c0:	681b      	ldr	r3, [r3, #0]
 810d6c2:	2b00      	cmp	r3, #0
 810d6c4:	d006      	beq.n	810d6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 810d6c6:	4b09      	ldr	r3, [pc, #36]	@ (810d6ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 810d6c8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 810d6cc:	490c      	ldr	r1, [pc, #48]	@ (810d700 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 810d6ce:	4809      	ldr	r0, [pc, #36]	@ (810d6f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 810d6d0:	f008 fb56 	bl	8115d80 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 810d6d4:	6a3b      	ldr	r3, [r7, #32]
 810d6d6:	2b00      	cmp	r3, #0
 810d6d8:	bf14      	ite	ne
 810d6da:	2301      	movne	r3, #1
 810d6dc:	2300      	moveq	r3, #0
 810d6de:	b2db      	uxtb	r3, r3
 810d6e0:	e000      	b.n	810d6e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 810d6e2:	2300      	movs	r3, #0
}
 810d6e4:	4618      	mov	r0, r3
 810d6e6:	3730      	adds	r7, #48	@ 0x30
 810d6e8:	46bd      	mov	sp, r7
 810d6ea:	bd80      	pop	{r7, pc}
 810d6ec:	081171fc 	.word	0x081171fc
 810d6f0:	0811731c 	.word	0x0811731c
 810d6f4:	08117280 	.word	0x08117280
 810d6f8:	0811733c 	.word	0x0811733c
 810d6fc:	08117374 	.word	0x08117374
 810d700:	08117384 	.word	0x08117384

0810d704 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 810d704:	b580      	push	{r7, lr}
 810d706:	b08e      	sub	sp, #56	@ 0x38
 810d708:	af00      	add	r7, sp, #0
 810d70a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 810d70c:	687b      	ldr	r3, [r7, #4]
 810d70e:	685b      	ldr	r3, [r3, #4]
 810d710:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 810d712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d714:	781b      	ldrb	r3, [r3, #0]
 810d716:	f003 030f 	and.w	r3, r3, #15
 810d71a:	b2db      	uxtb	r3, r3
 810d71c:	009b      	lsls	r3, r3, #2
 810d71e:	b2db      	uxtb	r3, r3
 810d720:	2b14      	cmp	r3, #20
 810d722:	f040 8171 	bne.w	810da08 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 810d726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d728:	88db      	ldrh	r3, [r3, #6]
 810d72a:	b29b      	uxth	r3, r3
 810d72c:	4618      	mov	r0, r3
 810d72e:	f7fd ff35 	bl	810b59c <lwip_htons>
 810d732:	4603      	mov	r3, r0
 810d734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810d738:	b29b      	uxth	r3, r3
 810d73a:	00db      	lsls	r3, r3, #3
 810d73c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 810d73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d740:	885b      	ldrh	r3, [r3, #2]
 810d742:	b29b      	uxth	r3, r3
 810d744:	4618      	mov	r0, r3
 810d746:	f7fd ff29 	bl	810b59c <lwip_htons>
 810d74a:	4603      	mov	r3, r0
 810d74c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 810d74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d750:	781b      	ldrb	r3, [r3, #0]
 810d752:	f003 030f 	and.w	r3, r3, #15
 810d756:	b2db      	uxtb	r3, r3
 810d758:	009b      	lsls	r3, r3, #2
 810d75a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 810d75e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 810d762:	b29b      	uxth	r3, r3
 810d764:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 810d766:	429a      	cmp	r2, r3
 810d768:	f0c0 8150 	bcc.w	810da0c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 810d76c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 810d770:	b29b      	uxth	r3, r3
 810d772:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 810d774:	1ad3      	subs	r3, r2, r3
 810d776:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 810d778:	6878      	ldr	r0, [r7, #4]
 810d77a:	f001 ff23 	bl	810f5c4 <pbuf_clen>
 810d77e:	4603      	mov	r3, r0
 810d780:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 810d782:	4b8c      	ldr	r3, [pc, #560]	@ (810d9b4 <ip4_reass+0x2b0>)
 810d784:	881b      	ldrh	r3, [r3, #0]
 810d786:	461a      	mov	r2, r3
 810d788:	8c3b      	ldrh	r3, [r7, #32]
 810d78a:	4413      	add	r3, r2
 810d78c:	2b0a      	cmp	r3, #10
 810d78e:	dd10      	ble.n	810d7b2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 810d790:	8c3b      	ldrh	r3, [r7, #32]
 810d792:	4619      	mov	r1, r3
 810d794:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d796:	f7ff fd81 	bl	810d29c <ip_reass_remove_oldest_datagram>
 810d79a:	4603      	mov	r3, r0
 810d79c:	2b00      	cmp	r3, #0
 810d79e:	f000 8137 	beq.w	810da10 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 810d7a2:	4b84      	ldr	r3, [pc, #528]	@ (810d9b4 <ip4_reass+0x2b0>)
 810d7a4:	881b      	ldrh	r3, [r3, #0]
 810d7a6:	461a      	mov	r2, r3
 810d7a8:	8c3b      	ldrh	r3, [r7, #32]
 810d7aa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 810d7ac:	2b0a      	cmp	r3, #10
 810d7ae:	f300 812f 	bgt.w	810da10 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 810d7b2:	4b81      	ldr	r3, [pc, #516]	@ (810d9b8 <ip4_reass+0x2b4>)
 810d7b4:	681b      	ldr	r3, [r3, #0]
 810d7b6:	633b      	str	r3, [r7, #48]	@ 0x30
 810d7b8:	e015      	b.n	810d7e6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 810d7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d7bc:	695a      	ldr	r2, [r3, #20]
 810d7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d7c0:	68db      	ldr	r3, [r3, #12]
 810d7c2:	429a      	cmp	r2, r3
 810d7c4:	d10c      	bne.n	810d7e0 <ip4_reass+0xdc>
 810d7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d7c8:	699a      	ldr	r2, [r3, #24]
 810d7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d7cc:	691b      	ldr	r3, [r3, #16]
 810d7ce:	429a      	cmp	r2, r3
 810d7d0:	d106      	bne.n	810d7e0 <ip4_reass+0xdc>
 810d7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d7d4:	899a      	ldrh	r2, [r3, #12]
 810d7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d7d8:	889b      	ldrh	r3, [r3, #4]
 810d7da:	b29b      	uxth	r3, r3
 810d7dc:	429a      	cmp	r2, r3
 810d7de:	d006      	beq.n	810d7ee <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 810d7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d7e2:	681b      	ldr	r3, [r3, #0]
 810d7e4:	633b      	str	r3, [r7, #48]	@ 0x30
 810d7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d7e8:	2b00      	cmp	r3, #0
 810d7ea:	d1e6      	bne.n	810d7ba <ip4_reass+0xb6>
 810d7ec:	e000      	b.n	810d7f0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 810d7ee:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 810d7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d7f2:	2b00      	cmp	r3, #0
 810d7f4:	d109      	bne.n	810d80a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 810d7f6:	8c3b      	ldrh	r3, [r7, #32]
 810d7f8:	4619      	mov	r1, r3
 810d7fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d7fc:	f7ff fdb0 	bl	810d360 <ip_reass_enqueue_new_datagram>
 810d800:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 810d802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d804:	2b00      	cmp	r3, #0
 810d806:	d11c      	bne.n	810d842 <ip4_reass+0x13e>
      goto nullreturn;
 810d808:	e105      	b.n	810da16 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 810d80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d80c:	88db      	ldrh	r3, [r3, #6]
 810d80e:	b29b      	uxth	r3, r3
 810d810:	4618      	mov	r0, r3
 810d812:	f7fd fec3 	bl	810b59c <lwip_htons>
 810d816:	4603      	mov	r3, r0
 810d818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810d81c:	2b00      	cmp	r3, #0
 810d81e:	d110      	bne.n	810d842 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 810d820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d822:	89db      	ldrh	r3, [r3, #14]
 810d824:	4618      	mov	r0, r3
 810d826:	f7fd feb9 	bl	810b59c <lwip_htons>
 810d82a:	4603      	mov	r3, r0
 810d82c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 810d830:	2b00      	cmp	r3, #0
 810d832:	d006      	beq.n	810d842 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 810d834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d836:	3308      	adds	r3, #8
 810d838:	2214      	movs	r2, #20
 810d83a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810d83c:	4618      	mov	r0, r3
 810d83e:	f008 fc3e 	bl	81160be <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 810d842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d844:	88db      	ldrh	r3, [r3, #6]
 810d846:	b29b      	uxth	r3, r3
 810d848:	f003 0320 	and.w	r3, r3, #32
 810d84c:	2b00      	cmp	r3, #0
 810d84e:	bf0c      	ite	eq
 810d850:	2301      	moveq	r3, #1
 810d852:	2300      	movne	r3, #0
 810d854:	b2db      	uxtb	r3, r3
 810d856:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 810d858:	69fb      	ldr	r3, [r7, #28]
 810d85a:	2b00      	cmp	r3, #0
 810d85c:	d00e      	beq.n	810d87c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 810d85e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 810d860:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810d862:	4413      	add	r3, r2
 810d864:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 810d866:	8b7a      	ldrh	r2, [r7, #26]
 810d868:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 810d86a:	429a      	cmp	r2, r3
 810d86c:	f0c0 80a0 	bcc.w	810d9b0 <ip4_reass+0x2ac>
 810d870:	8b7b      	ldrh	r3, [r7, #26]
 810d872:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 810d876:	4293      	cmp	r3, r2
 810d878:	f200 809a 	bhi.w	810d9b0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 810d87c:	69fa      	ldr	r2, [r7, #28]
 810d87e:	6879      	ldr	r1, [r7, #4]
 810d880:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810d882:	f7ff fdd5 	bl	810d430 <ip_reass_chain_frag_into_datagram_and_validate>
 810d886:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 810d888:	697b      	ldr	r3, [r7, #20]
 810d88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d88e:	f000 809b 	beq.w	810d9c8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 810d892:	4b48      	ldr	r3, [pc, #288]	@ (810d9b4 <ip4_reass+0x2b0>)
 810d894:	881a      	ldrh	r2, [r3, #0]
 810d896:	8c3b      	ldrh	r3, [r7, #32]
 810d898:	4413      	add	r3, r2
 810d89a:	b29a      	uxth	r2, r3
 810d89c:	4b45      	ldr	r3, [pc, #276]	@ (810d9b4 <ip4_reass+0x2b0>)
 810d89e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 810d8a0:	69fb      	ldr	r3, [r7, #28]
 810d8a2:	2b00      	cmp	r3, #0
 810d8a4:	d00d      	beq.n	810d8c2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 810d8a6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 810d8a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810d8aa:	4413      	add	r3, r2
 810d8ac:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 810d8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d8b0:	8a7a      	ldrh	r2, [r7, #18]
 810d8b2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 810d8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d8b6:	7f9b      	ldrb	r3, [r3, #30]
 810d8b8:	f043 0301 	orr.w	r3, r3, #1
 810d8bc:	b2da      	uxtb	r2, r3
 810d8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d8c0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 810d8c2:	697b      	ldr	r3, [r7, #20]
 810d8c4:	2b01      	cmp	r3, #1
 810d8c6:	d171      	bne.n	810d9ac <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 810d8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d8ca:	8b9b      	ldrh	r3, [r3, #28]
 810d8cc:	3314      	adds	r3, #20
 810d8ce:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 810d8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d8d2:	685b      	ldr	r3, [r3, #4]
 810d8d4:	685b      	ldr	r3, [r3, #4]
 810d8d6:	681b      	ldr	r3, [r3, #0]
 810d8d8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 810d8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d8dc:	685b      	ldr	r3, [r3, #4]
 810d8de:	685b      	ldr	r3, [r3, #4]
 810d8e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 810d8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d8e4:	3308      	adds	r3, #8
 810d8e6:	2214      	movs	r2, #20
 810d8e8:	4619      	mov	r1, r3
 810d8ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d8ec:	f008 fbe7 	bl	81160be <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 810d8f0:	8a3b      	ldrh	r3, [r7, #16]
 810d8f2:	4618      	mov	r0, r3
 810d8f4:	f7fd fe52 	bl	810b59c <lwip_htons>
 810d8f8:	4603      	mov	r3, r0
 810d8fa:	461a      	mov	r2, r3
 810d8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d8fe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 810d900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d902:	2200      	movs	r2, #0
 810d904:	719a      	strb	r2, [r3, #6]
 810d906:	2200      	movs	r2, #0
 810d908:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 810d90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d90c:	2200      	movs	r2, #0
 810d90e:	729a      	strb	r2, [r3, #10]
 810d910:	2200      	movs	r2, #0
 810d912:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 810d914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d916:	685b      	ldr	r3, [r3, #4]
 810d918:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 810d91a:	e00d      	b.n	810d938 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 810d91c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d91e:	685b      	ldr	r3, [r3, #4]
 810d920:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 810d922:	2114      	movs	r1, #20
 810d924:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 810d926:	f001 fd39 	bl	810f39c <pbuf_remove_header>
      pbuf_cat(p, r);
 810d92a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 810d92c:	6878      	ldr	r0, [r7, #4]
 810d92e:	f001 fe89 	bl	810f644 <pbuf_cat>
      r = iprh->next_pbuf;
 810d932:	68fb      	ldr	r3, [r7, #12]
 810d934:	681b      	ldr	r3, [r3, #0]
 810d936:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 810d938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d93a:	2b00      	cmp	r3, #0
 810d93c:	d1ee      	bne.n	810d91c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 810d93e:	4b1e      	ldr	r3, [pc, #120]	@ (810d9b8 <ip4_reass+0x2b4>)
 810d940:	681b      	ldr	r3, [r3, #0]
 810d942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d944:	429a      	cmp	r2, r3
 810d946:	d102      	bne.n	810d94e <ip4_reass+0x24a>
      ipr_prev = NULL;
 810d948:	2300      	movs	r3, #0
 810d94a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810d94c:	e010      	b.n	810d970 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 810d94e:	4b1a      	ldr	r3, [pc, #104]	@ (810d9b8 <ip4_reass+0x2b4>)
 810d950:	681b      	ldr	r3, [r3, #0]
 810d952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810d954:	e007      	b.n	810d966 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 810d956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d958:	681b      	ldr	r3, [r3, #0]
 810d95a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d95c:	429a      	cmp	r2, r3
 810d95e:	d006      	beq.n	810d96e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 810d960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d962:	681b      	ldr	r3, [r3, #0]
 810d964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810d966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d968:	2b00      	cmp	r3, #0
 810d96a:	d1f4      	bne.n	810d956 <ip4_reass+0x252>
 810d96c:	e000      	b.n	810d970 <ip4_reass+0x26c>
          break;
 810d96e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 810d970:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810d972:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810d974:	f7ff fd2e 	bl	810d3d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 810d978:	6878      	ldr	r0, [r7, #4]
 810d97a:	f001 fe23 	bl	810f5c4 <pbuf_clen>
 810d97e:	4603      	mov	r3, r0
 810d980:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 810d982:	4b0c      	ldr	r3, [pc, #48]	@ (810d9b4 <ip4_reass+0x2b0>)
 810d984:	881b      	ldrh	r3, [r3, #0]
 810d986:	8c3a      	ldrh	r2, [r7, #32]
 810d988:	429a      	cmp	r2, r3
 810d98a:	d906      	bls.n	810d99a <ip4_reass+0x296>
 810d98c:	4b0b      	ldr	r3, [pc, #44]	@ (810d9bc <ip4_reass+0x2b8>)
 810d98e:	f240 229b 	movw	r2, #667	@ 0x29b
 810d992:	490b      	ldr	r1, [pc, #44]	@ (810d9c0 <ip4_reass+0x2bc>)
 810d994:	480b      	ldr	r0, [pc, #44]	@ (810d9c4 <ip4_reass+0x2c0>)
 810d996:	f008 f9f3 	bl	8115d80 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 810d99a:	4b06      	ldr	r3, [pc, #24]	@ (810d9b4 <ip4_reass+0x2b0>)
 810d99c:	881a      	ldrh	r2, [r3, #0]
 810d99e:	8c3b      	ldrh	r3, [r7, #32]
 810d9a0:	1ad3      	subs	r3, r2, r3
 810d9a2:	b29a      	uxth	r2, r3
 810d9a4:	4b03      	ldr	r3, [pc, #12]	@ (810d9b4 <ip4_reass+0x2b0>)
 810d9a6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 810d9a8:	687b      	ldr	r3, [r7, #4]
 810d9aa:	e038      	b.n	810da1e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 810d9ac:	2300      	movs	r3, #0
 810d9ae:	e036      	b.n	810da1e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 810d9b0:	bf00      	nop
 810d9b2:	e00a      	b.n	810d9ca <ip4_reass+0x2c6>
 810d9b4:	1000b19c 	.word	0x1000b19c
 810d9b8:	1000b198 	.word	0x1000b198
 810d9bc:	081171fc 	.word	0x081171fc
 810d9c0:	081173a8 	.word	0x081173a8
 810d9c4:	08117280 	.word	0x08117280
    goto nullreturn_ipr;
 810d9c8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 810d9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9cc:	2b00      	cmp	r3, #0
 810d9ce:	d106      	bne.n	810d9de <ip4_reass+0x2da>
 810d9d0:	4b15      	ldr	r3, [pc, #84]	@ (810da28 <ip4_reass+0x324>)
 810d9d2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 810d9d6:	4915      	ldr	r1, [pc, #84]	@ (810da2c <ip4_reass+0x328>)
 810d9d8:	4815      	ldr	r0, [pc, #84]	@ (810da30 <ip4_reass+0x32c>)
 810d9da:	f008 f9d1 	bl	8115d80 <iprintf>
  if (ipr->p == NULL) {
 810d9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9e0:	685b      	ldr	r3, [r3, #4]
 810d9e2:	2b00      	cmp	r3, #0
 810d9e4:	d116      	bne.n	810da14 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 810d9e6:	4b13      	ldr	r3, [pc, #76]	@ (810da34 <ip4_reass+0x330>)
 810d9e8:	681b      	ldr	r3, [r3, #0]
 810d9ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d9ec:	429a      	cmp	r2, r3
 810d9ee:	d006      	beq.n	810d9fe <ip4_reass+0x2fa>
 810d9f0:	4b0d      	ldr	r3, [pc, #52]	@ (810da28 <ip4_reass+0x324>)
 810d9f2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 810d9f6:	4910      	ldr	r1, [pc, #64]	@ (810da38 <ip4_reass+0x334>)
 810d9f8:	480d      	ldr	r0, [pc, #52]	@ (810da30 <ip4_reass+0x32c>)
 810d9fa:	f008 f9c1 	bl	8115d80 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 810d9fe:	2100      	movs	r1, #0
 810da00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810da02:	f7ff fce7 	bl	810d3d4 <ip_reass_dequeue_datagram>
 810da06:	e006      	b.n	810da16 <ip4_reass+0x312>
    goto nullreturn;
 810da08:	bf00      	nop
 810da0a:	e004      	b.n	810da16 <ip4_reass+0x312>
    goto nullreturn;
 810da0c:	bf00      	nop
 810da0e:	e002      	b.n	810da16 <ip4_reass+0x312>
      goto nullreturn;
 810da10:	bf00      	nop
 810da12:	e000      	b.n	810da16 <ip4_reass+0x312>
  }

nullreturn:
 810da14:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 810da16:	6878      	ldr	r0, [r7, #4]
 810da18:	f001 fd46 	bl	810f4a8 <pbuf_free>
  return NULL;
 810da1c:	2300      	movs	r3, #0
}
 810da1e:	4618      	mov	r0, r3
 810da20:	3738      	adds	r7, #56	@ 0x38
 810da22:	46bd      	mov	sp, r7
 810da24:	bd80      	pop	{r7, pc}
 810da26:	bf00      	nop
 810da28:	081171fc 	.word	0x081171fc
 810da2c:	081173c4 	.word	0x081173c4
 810da30:	08117280 	.word	0x08117280
 810da34:	1000b198 	.word	0x1000b198
 810da38:	081173d0 	.word	0x081173d0

0810da3c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 810da3c:	b580      	push	{r7, lr}
 810da3e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 810da40:	2005      	movs	r0, #5
 810da42:	f000 fe17 	bl	810e674 <memp_malloc>
 810da46:	4603      	mov	r3, r0
}
 810da48:	4618      	mov	r0, r3
 810da4a:	bd80      	pop	{r7, pc}

0810da4c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 810da4c:	b580      	push	{r7, lr}
 810da4e:	b082      	sub	sp, #8
 810da50:	af00      	add	r7, sp, #0
 810da52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 810da54:	687b      	ldr	r3, [r7, #4]
 810da56:	2b00      	cmp	r3, #0
 810da58:	d106      	bne.n	810da68 <ip_frag_free_pbuf_custom_ref+0x1c>
 810da5a:	4b07      	ldr	r3, [pc, #28]	@ (810da78 <ip_frag_free_pbuf_custom_ref+0x2c>)
 810da5c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 810da60:	4906      	ldr	r1, [pc, #24]	@ (810da7c <ip_frag_free_pbuf_custom_ref+0x30>)
 810da62:	4807      	ldr	r0, [pc, #28]	@ (810da80 <ip_frag_free_pbuf_custom_ref+0x34>)
 810da64:	f008 f98c 	bl	8115d80 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 810da68:	6879      	ldr	r1, [r7, #4]
 810da6a:	2005      	movs	r0, #5
 810da6c:	f000 fe78 	bl	810e760 <memp_free>
}
 810da70:	bf00      	nop
 810da72:	3708      	adds	r7, #8
 810da74:	46bd      	mov	sp, r7
 810da76:	bd80      	pop	{r7, pc}
 810da78:	081171fc 	.word	0x081171fc
 810da7c:	081173f0 	.word	0x081173f0
 810da80:	08117280 	.word	0x08117280

0810da84 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 810da84:	b580      	push	{r7, lr}
 810da86:	b084      	sub	sp, #16
 810da88:	af00      	add	r7, sp, #0
 810da8a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 810da8c:	687b      	ldr	r3, [r7, #4]
 810da8e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 810da90:	68fb      	ldr	r3, [r7, #12]
 810da92:	2b00      	cmp	r3, #0
 810da94:	d106      	bne.n	810daa4 <ipfrag_free_pbuf_custom+0x20>
 810da96:	4b11      	ldr	r3, [pc, #68]	@ (810dadc <ipfrag_free_pbuf_custom+0x58>)
 810da98:	f240 22ce 	movw	r2, #718	@ 0x2ce
 810da9c:	4910      	ldr	r1, [pc, #64]	@ (810dae0 <ipfrag_free_pbuf_custom+0x5c>)
 810da9e:	4811      	ldr	r0, [pc, #68]	@ (810dae4 <ipfrag_free_pbuf_custom+0x60>)
 810daa0:	f008 f96e 	bl	8115d80 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 810daa4:	68fa      	ldr	r2, [r7, #12]
 810daa6:	687b      	ldr	r3, [r7, #4]
 810daa8:	429a      	cmp	r2, r3
 810daaa:	d006      	beq.n	810daba <ipfrag_free_pbuf_custom+0x36>
 810daac:	4b0b      	ldr	r3, [pc, #44]	@ (810dadc <ipfrag_free_pbuf_custom+0x58>)
 810daae:	f240 22cf 	movw	r2, #719	@ 0x2cf
 810dab2:	490d      	ldr	r1, [pc, #52]	@ (810dae8 <ipfrag_free_pbuf_custom+0x64>)
 810dab4:	480b      	ldr	r0, [pc, #44]	@ (810dae4 <ipfrag_free_pbuf_custom+0x60>)
 810dab6:	f008 f963 	bl	8115d80 <iprintf>
  if (pcr->original != NULL) {
 810daba:	68fb      	ldr	r3, [r7, #12]
 810dabc:	695b      	ldr	r3, [r3, #20]
 810dabe:	2b00      	cmp	r3, #0
 810dac0:	d004      	beq.n	810dacc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 810dac2:	68fb      	ldr	r3, [r7, #12]
 810dac4:	695b      	ldr	r3, [r3, #20]
 810dac6:	4618      	mov	r0, r3
 810dac8:	f001 fcee 	bl	810f4a8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 810dacc:	68f8      	ldr	r0, [r7, #12]
 810dace:	f7ff ffbd 	bl	810da4c <ip_frag_free_pbuf_custom_ref>
}
 810dad2:	bf00      	nop
 810dad4:	3710      	adds	r7, #16
 810dad6:	46bd      	mov	sp, r7
 810dad8:	bd80      	pop	{r7, pc}
 810dada:	bf00      	nop
 810dadc:	081171fc 	.word	0x081171fc
 810dae0:	081173fc 	.word	0x081173fc
 810dae4:	08117280 	.word	0x08117280
 810dae8:	08117408 	.word	0x08117408

0810daec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 810daec:	b580      	push	{r7, lr}
 810daee:	b094      	sub	sp, #80	@ 0x50
 810daf0:	af02      	add	r7, sp, #8
 810daf2:	60f8      	str	r0, [r7, #12]
 810daf4:	60b9      	str	r1, [r7, #8]
 810daf6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 810daf8:	2300      	movs	r3, #0
 810dafa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 810dafe:	68bb      	ldr	r3, [r7, #8]
 810db00:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 810db02:	3b14      	subs	r3, #20
 810db04:	2b00      	cmp	r3, #0
 810db06:	da00      	bge.n	810db0a <ip4_frag+0x1e>
 810db08:	3307      	adds	r3, #7
 810db0a:	10db      	asrs	r3, r3, #3
 810db0c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 810db0e:	2314      	movs	r3, #20
 810db10:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 810db12:	68fb      	ldr	r3, [r7, #12]
 810db14:	685b      	ldr	r3, [r3, #4]
 810db16:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 810db18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810db1a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 810db1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db1e:	781b      	ldrb	r3, [r3, #0]
 810db20:	f003 030f 	and.w	r3, r3, #15
 810db24:	b2db      	uxtb	r3, r3
 810db26:	009b      	lsls	r3, r3, #2
 810db28:	b2db      	uxtb	r3, r3
 810db2a:	2b14      	cmp	r3, #20
 810db2c:	d002      	beq.n	810db34 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 810db2e:	f06f 0305 	mvn.w	r3, #5
 810db32:	e110      	b.n	810dd56 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 810db34:	68fb      	ldr	r3, [r7, #12]
 810db36:	895b      	ldrh	r3, [r3, #10]
 810db38:	2b13      	cmp	r3, #19
 810db3a:	d809      	bhi.n	810db50 <ip4_frag+0x64>
 810db3c:	4b88      	ldr	r3, [pc, #544]	@ (810dd60 <ip4_frag+0x274>)
 810db3e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 810db42:	4988      	ldr	r1, [pc, #544]	@ (810dd64 <ip4_frag+0x278>)
 810db44:	4888      	ldr	r0, [pc, #544]	@ (810dd68 <ip4_frag+0x27c>)
 810db46:	f008 f91b 	bl	8115d80 <iprintf>
 810db4a:	f06f 0305 	mvn.w	r3, #5
 810db4e:	e102      	b.n	810dd56 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 810db50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db52:	88db      	ldrh	r3, [r3, #6]
 810db54:	b29b      	uxth	r3, r3
 810db56:	4618      	mov	r0, r3
 810db58:	f7fd fd20 	bl	810b59c <lwip_htons>
 810db5c:	4603      	mov	r3, r0
 810db5e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 810db60:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 810db62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810db66:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 810db6a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 810db6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810db70:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 810db72:	68fb      	ldr	r3, [r7, #12]
 810db74:	891b      	ldrh	r3, [r3, #8]
 810db76:	3b14      	subs	r3, #20
 810db78:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 810db7c:	e0e1      	b.n	810dd42 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 810db7e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 810db80:	00db      	lsls	r3, r3, #3
 810db82:	b29b      	uxth	r3, r3
 810db84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 810db88:	4293      	cmp	r3, r2
 810db8a:	bf28      	it	cs
 810db8c:	4613      	movcs	r3, r2
 810db8e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 810db90:	f44f 7220 	mov.w	r2, #640	@ 0x280
 810db94:	2114      	movs	r1, #20
 810db96:	200e      	movs	r0, #14
 810db98:	f001 f9a2 	bl	810eee0 <pbuf_alloc>
 810db9c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 810db9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dba0:	2b00      	cmp	r3, #0
 810dba2:	f000 80d5 	beq.w	810dd50 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 810dba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dba8:	895b      	ldrh	r3, [r3, #10]
 810dbaa:	2b13      	cmp	r3, #19
 810dbac:	d806      	bhi.n	810dbbc <ip4_frag+0xd0>
 810dbae:	4b6c      	ldr	r3, [pc, #432]	@ (810dd60 <ip4_frag+0x274>)
 810dbb0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 810dbb4:	496d      	ldr	r1, [pc, #436]	@ (810dd6c <ip4_frag+0x280>)
 810dbb6:	486c      	ldr	r0, [pc, #432]	@ (810dd68 <ip4_frag+0x27c>)
 810dbb8:	f008 f8e2 	bl	8115d80 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 810dbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dbbe:	685b      	ldr	r3, [r3, #4]
 810dbc0:	2214      	movs	r2, #20
 810dbc2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 810dbc4:	4618      	mov	r0, r3
 810dbc6:	f008 fa7a 	bl	81160be <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 810dbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dbcc:	685b      	ldr	r3, [r3, #4]
 810dbce:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 810dbd0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810dbd2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 810dbd6:	e064      	b.n	810dca2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 810dbd8:	68fb      	ldr	r3, [r7, #12]
 810dbda:	895a      	ldrh	r2, [r3, #10]
 810dbdc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 810dbde:	1ad3      	subs	r3, r2, r3
 810dbe0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 810dbe2:	68fb      	ldr	r3, [r7, #12]
 810dbe4:	895b      	ldrh	r3, [r3, #10]
 810dbe6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 810dbe8:	429a      	cmp	r2, r3
 810dbea:	d906      	bls.n	810dbfa <ip4_frag+0x10e>
 810dbec:	4b5c      	ldr	r3, [pc, #368]	@ (810dd60 <ip4_frag+0x274>)
 810dbee:	f240 322d 	movw	r2, #813	@ 0x32d
 810dbf2:	495f      	ldr	r1, [pc, #380]	@ (810dd70 <ip4_frag+0x284>)
 810dbf4:	485c      	ldr	r0, [pc, #368]	@ (810dd68 <ip4_frag+0x27c>)
 810dbf6:	f008 f8c3 	bl	8115d80 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 810dbfa:	8bfa      	ldrh	r2, [r7, #30]
 810dbfc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 810dc00:	4293      	cmp	r3, r2
 810dc02:	bf28      	it	cs
 810dc04:	4613      	movcs	r3, r2
 810dc06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 810dc0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 810dc0e:	2b00      	cmp	r3, #0
 810dc10:	d105      	bne.n	810dc1e <ip4_frag+0x132>
        poff = 0;
 810dc12:	2300      	movs	r3, #0
 810dc14:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 810dc16:	68fb      	ldr	r3, [r7, #12]
 810dc18:	681b      	ldr	r3, [r3, #0]
 810dc1a:	60fb      	str	r3, [r7, #12]
        continue;
 810dc1c:	e041      	b.n	810dca2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 810dc1e:	f7ff ff0d 	bl	810da3c <ip_frag_alloc_pbuf_custom_ref>
 810dc22:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 810dc24:	69bb      	ldr	r3, [r7, #24]
 810dc26:	2b00      	cmp	r3, #0
 810dc28:	d103      	bne.n	810dc32 <ip4_frag+0x146>
        pbuf_free(rambuf);
 810dc2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810dc2c:	f001 fc3c 	bl	810f4a8 <pbuf_free>
        goto memerr;
 810dc30:	e08f      	b.n	810dd52 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 810dc32:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 810dc34:	68fb      	ldr	r3, [r7, #12]
 810dc36:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 810dc38:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 810dc3a:	4413      	add	r3, r2
 810dc3c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 810dc40:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 810dc44:	9201      	str	r2, [sp, #4]
 810dc46:	9300      	str	r3, [sp, #0]
 810dc48:	4603      	mov	r3, r0
 810dc4a:	2241      	movs	r2, #65	@ 0x41
 810dc4c:	2000      	movs	r0, #0
 810dc4e:	f001 fa73 	bl	810f138 <pbuf_alloced_custom>
 810dc52:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 810dc54:	697b      	ldr	r3, [r7, #20]
 810dc56:	2b00      	cmp	r3, #0
 810dc58:	d106      	bne.n	810dc68 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 810dc5a:	69b8      	ldr	r0, [r7, #24]
 810dc5c:	f7ff fef6 	bl	810da4c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 810dc60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810dc62:	f001 fc21 	bl	810f4a8 <pbuf_free>
        goto memerr;
 810dc66:	e074      	b.n	810dd52 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 810dc68:	68f8      	ldr	r0, [r7, #12]
 810dc6a:	f001 fcc3 	bl	810f5f4 <pbuf_ref>
      pcr->original = p;
 810dc6e:	69bb      	ldr	r3, [r7, #24]
 810dc70:	68fa      	ldr	r2, [r7, #12]
 810dc72:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 810dc74:	69bb      	ldr	r3, [r7, #24]
 810dc76:	4a3f      	ldr	r2, [pc, #252]	@ (810dd74 <ip4_frag+0x288>)
 810dc78:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 810dc7a:	6979      	ldr	r1, [r7, #20]
 810dc7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810dc7e:	f001 fce1 	bl	810f644 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 810dc82:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 810dc86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 810dc8a:	1ad3      	subs	r3, r2, r3
 810dc8c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 810dc90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 810dc94:	2b00      	cmp	r3, #0
 810dc96:	d004      	beq.n	810dca2 <ip4_frag+0x1b6>
        poff = 0;
 810dc98:	2300      	movs	r3, #0
 810dc9a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 810dc9c:	68fb      	ldr	r3, [r7, #12]
 810dc9e:	681b      	ldr	r3, [r3, #0]
 810dca0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 810dca2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 810dca6:	2b00      	cmp	r3, #0
 810dca8:	d196      	bne.n	810dbd8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 810dcaa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 810dcac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 810dcb0:	4413      	add	r3, r2
 810dcb2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 810dcb4:	68bb      	ldr	r3, [r7, #8]
 810dcb6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 810dcb8:	f1a3 0213 	sub.w	r2, r3, #19
 810dcbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 810dcc0:	429a      	cmp	r2, r3
 810dcc2:	bfcc      	ite	gt
 810dcc4:	2301      	movgt	r3, #1
 810dcc6:	2300      	movle	r3, #0
 810dcc8:	b2db      	uxtb	r3, r3
 810dcca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 810dccc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 810dcd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810dcd4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 810dcd6:	6a3b      	ldr	r3, [r7, #32]
 810dcd8:	2b00      	cmp	r3, #0
 810dcda:	d002      	beq.n	810dce2 <ip4_frag+0x1f6>
 810dcdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810dcde:	2b00      	cmp	r3, #0
 810dce0:	d003      	beq.n	810dcea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 810dce2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 810dce4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 810dce8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 810dcea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 810dcec:	4618      	mov	r0, r3
 810dcee:	f7fd fc55 	bl	810b59c <lwip_htons>
 810dcf2:	4603      	mov	r3, r0
 810dcf4:	461a      	mov	r2, r3
 810dcf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dcf8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 810dcfa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810dcfc:	3314      	adds	r3, #20
 810dcfe:	b29b      	uxth	r3, r3
 810dd00:	4618      	mov	r0, r3
 810dd02:	f7fd fc4b 	bl	810b59c <lwip_htons>
 810dd06:	4603      	mov	r3, r0
 810dd08:	461a      	mov	r2, r3
 810dd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd0c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 810dd0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd10:	2200      	movs	r2, #0
 810dd12:	729a      	strb	r2, [r3, #10]
 810dd14:	2200      	movs	r2, #0
 810dd16:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 810dd18:	68bb      	ldr	r3, [r7, #8]
 810dd1a:	695b      	ldr	r3, [r3, #20]
 810dd1c:	687a      	ldr	r2, [r7, #4]
 810dd1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810dd20:	68b8      	ldr	r0, [r7, #8]
 810dd22:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 810dd24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810dd26:	f001 fbbf 	bl	810f4a8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 810dd2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 810dd2e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 810dd30:	1ad3      	subs	r3, r2, r3
 810dd32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 810dd36:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 810dd3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 810dd3c:	4413      	add	r3, r2
 810dd3e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 810dd42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 810dd46:	2b00      	cmp	r3, #0
 810dd48:	f47f af19 	bne.w	810db7e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 810dd4c:	2300      	movs	r3, #0
 810dd4e:	e002      	b.n	810dd56 <ip4_frag+0x26a>
      goto memerr;
 810dd50:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 810dd52:	f04f 33ff 	mov.w	r3, #4294967295
}
 810dd56:	4618      	mov	r0, r3
 810dd58:	3748      	adds	r7, #72	@ 0x48
 810dd5a:	46bd      	mov	sp, r7
 810dd5c:	bd80      	pop	{r7, pc}
 810dd5e:	bf00      	nop
 810dd60:	081171fc 	.word	0x081171fc
 810dd64:	08117414 	.word	0x08117414
 810dd68:	08117280 	.word	0x08117280
 810dd6c:	08117430 	.word	0x08117430
 810dd70:	08117450 	.word	0x08117450
 810dd74:	0810da85 	.word	0x0810da85

0810dd78 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 810dd78:	b480      	push	{r7}
 810dd7a:	b083      	sub	sp, #12
 810dd7c:	af00      	add	r7, sp, #0
 810dd7e:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 810dd80:	4b04      	ldr	r3, [pc, #16]	@ (810dd94 <ptr_to_mem+0x1c>)
 810dd82:	681a      	ldr	r2, [r3, #0]
 810dd84:	687b      	ldr	r3, [r7, #4]
 810dd86:	4413      	add	r3, r2
}
 810dd88:	4618      	mov	r0, r3
 810dd8a:	370c      	adds	r7, #12
 810dd8c:	46bd      	mov	sp, r7
 810dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dd92:	4770      	bx	lr
 810dd94:	1000b1a0 	.word	0x1000b1a0

0810dd98 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 810dd98:	b480      	push	{r7}
 810dd9a:	b083      	sub	sp, #12
 810dd9c:	af00      	add	r7, sp, #0
 810dd9e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 810dda0:	4b04      	ldr	r3, [pc, #16]	@ (810ddb4 <mem_to_ptr+0x1c>)
 810dda2:	681b      	ldr	r3, [r3, #0]
 810dda4:	687a      	ldr	r2, [r7, #4]
 810dda6:	1ad3      	subs	r3, r2, r3
}
 810dda8:	4618      	mov	r0, r3
 810ddaa:	370c      	adds	r7, #12
 810ddac:	46bd      	mov	sp, r7
 810ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ddb2:	4770      	bx	lr
 810ddb4:	1000b1a0 	.word	0x1000b1a0

0810ddb8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 810ddb8:	b590      	push	{r4, r7, lr}
 810ddba:	b085      	sub	sp, #20
 810ddbc:	af00      	add	r7, sp, #0
 810ddbe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 810ddc0:	4b45      	ldr	r3, [pc, #276]	@ (810ded8 <plug_holes+0x120>)
 810ddc2:	681b      	ldr	r3, [r3, #0]
 810ddc4:	687a      	ldr	r2, [r7, #4]
 810ddc6:	429a      	cmp	r2, r3
 810ddc8:	d206      	bcs.n	810ddd8 <plug_holes+0x20>
 810ddca:	4b44      	ldr	r3, [pc, #272]	@ (810dedc <plug_holes+0x124>)
 810ddcc:	f240 12df 	movw	r2, #479	@ 0x1df
 810ddd0:	4943      	ldr	r1, [pc, #268]	@ (810dee0 <plug_holes+0x128>)
 810ddd2:	4844      	ldr	r0, [pc, #272]	@ (810dee4 <plug_holes+0x12c>)
 810ddd4:	f007 ffd4 	bl	8115d80 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 810ddd8:	4b43      	ldr	r3, [pc, #268]	@ (810dee8 <plug_holes+0x130>)
 810ddda:	681b      	ldr	r3, [r3, #0]
 810dddc:	687a      	ldr	r2, [r7, #4]
 810ddde:	429a      	cmp	r2, r3
 810dde0:	d306      	bcc.n	810ddf0 <plug_holes+0x38>
 810dde2:	4b3e      	ldr	r3, [pc, #248]	@ (810dedc <plug_holes+0x124>)
 810dde4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 810dde8:	4940      	ldr	r1, [pc, #256]	@ (810deec <plug_holes+0x134>)
 810ddea:	483e      	ldr	r0, [pc, #248]	@ (810dee4 <plug_holes+0x12c>)
 810ddec:	f007 ffc8 	bl	8115d80 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 810ddf0:	687b      	ldr	r3, [r7, #4]
 810ddf2:	7a1b      	ldrb	r3, [r3, #8]
 810ddf4:	2b00      	cmp	r3, #0
 810ddf6:	d006      	beq.n	810de06 <plug_holes+0x4e>
 810ddf8:	4b38      	ldr	r3, [pc, #224]	@ (810dedc <plug_holes+0x124>)
 810ddfa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 810ddfe:	493c      	ldr	r1, [pc, #240]	@ (810def0 <plug_holes+0x138>)
 810de00:	4838      	ldr	r0, [pc, #224]	@ (810dee4 <plug_holes+0x12c>)
 810de02:	f007 ffbd 	bl	8115d80 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 810de06:	687b      	ldr	r3, [r7, #4]
 810de08:	681b      	ldr	r3, [r3, #0]
 810de0a:	4a3a      	ldr	r2, [pc, #232]	@ (810def4 <plug_holes+0x13c>)
 810de0c:	4293      	cmp	r3, r2
 810de0e:	d906      	bls.n	810de1e <plug_holes+0x66>
 810de10:	4b32      	ldr	r3, [pc, #200]	@ (810dedc <plug_holes+0x124>)
 810de12:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 810de16:	4938      	ldr	r1, [pc, #224]	@ (810def8 <plug_holes+0x140>)
 810de18:	4832      	ldr	r0, [pc, #200]	@ (810dee4 <plug_holes+0x12c>)
 810de1a:	f007 ffb1 	bl	8115d80 <iprintf>

  nmem = ptr_to_mem(mem->next);
 810de1e:	687b      	ldr	r3, [r7, #4]
 810de20:	681b      	ldr	r3, [r3, #0]
 810de22:	4618      	mov	r0, r3
 810de24:	f7ff ffa8 	bl	810dd78 <ptr_to_mem>
 810de28:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 810de2a:	687a      	ldr	r2, [r7, #4]
 810de2c:	68fb      	ldr	r3, [r7, #12]
 810de2e:	429a      	cmp	r2, r3
 810de30:	d024      	beq.n	810de7c <plug_holes+0xc4>
 810de32:	68fb      	ldr	r3, [r7, #12]
 810de34:	7a1b      	ldrb	r3, [r3, #8]
 810de36:	2b00      	cmp	r3, #0
 810de38:	d120      	bne.n	810de7c <plug_holes+0xc4>
 810de3a:	4b2b      	ldr	r3, [pc, #172]	@ (810dee8 <plug_holes+0x130>)
 810de3c:	681b      	ldr	r3, [r3, #0]
 810de3e:	68fa      	ldr	r2, [r7, #12]
 810de40:	429a      	cmp	r2, r3
 810de42:	d01b      	beq.n	810de7c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 810de44:	4b2d      	ldr	r3, [pc, #180]	@ (810defc <plug_holes+0x144>)
 810de46:	681b      	ldr	r3, [r3, #0]
 810de48:	68fa      	ldr	r2, [r7, #12]
 810de4a:	429a      	cmp	r2, r3
 810de4c:	d102      	bne.n	810de54 <plug_holes+0x9c>
      lfree = mem;
 810de4e:	4a2b      	ldr	r2, [pc, #172]	@ (810defc <plug_holes+0x144>)
 810de50:	687b      	ldr	r3, [r7, #4]
 810de52:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 810de54:	68fb      	ldr	r3, [r7, #12]
 810de56:	681a      	ldr	r2, [r3, #0]
 810de58:	687b      	ldr	r3, [r7, #4]
 810de5a:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 810de5c:	68fb      	ldr	r3, [r7, #12]
 810de5e:	681b      	ldr	r3, [r3, #0]
 810de60:	4a24      	ldr	r2, [pc, #144]	@ (810def4 <plug_holes+0x13c>)
 810de62:	4293      	cmp	r3, r2
 810de64:	d00a      	beq.n	810de7c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 810de66:	68fb      	ldr	r3, [r7, #12]
 810de68:	681b      	ldr	r3, [r3, #0]
 810de6a:	4618      	mov	r0, r3
 810de6c:	f7ff ff84 	bl	810dd78 <ptr_to_mem>
 810de70:	4604      	mov	r4, r0
 810de72:	6878      	ldr	r0, [r7, #4]
 810de74:	f7ff ff90 	bl	810dd98 <mem_to_ptr>
 810de78:	4603      	mov	r3, r0
 810de7a:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 810de7c:	687b      	ldr	r3, [r7, #4]
 810de7e:	685b      	ldr	r3, [r3, #4]
 810de80:	4618      	mov	r0, r3
 810de82:	f7ff ff79 	bl	810dd78 <ptr_to_mem>
 810de86:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 810de88:	68ba      	ldr	r2, [r7, #8]
 810de8a:	687b      	ldr	r3, [r7, #4]
 810de8c:	429a      	cmp	r2, r3
 810de8e:	d01f      	beq.n	810ded0 <plug_holes+0x118>
 810de90:	68bb      	ldr	r3, [r7, #8]
 810de92:	7a1b      	ldrb	r3, [r3, #8]
 810de94:	2b00      	cmp	r3, #0
 810de96:	d11b      	bne.n	810ded0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 810de98:	4b18      	ldr	r3, [pc, #96]	@ (810defc <plug_holes+0x144>)
 810de9a:	681b      	ldr	r3, [r3, #0]
 810de9c:	687a      	ldr	r2, [r7, #4]
 810de9e:	429a      	cmp	r2, r3
 810dea0:	d102      	bne.n	810dea8 <plug_holes+0xf0>
      lfree = pmem;
 810dea2:	4a16      	ldr	r2, [pc, #88]	@ (810defc <plug_holes+0x144>)
 810dea4:	68bb      	ldr	r3, [r7, #8]
 810dea6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 810dea8:	687b      	ldr	r3, [r7, #4]
 810deaa:	681a      	ldr	r2, [r3, #0]
 810deac:	68bb      	ldr	r3, [r7, #8]
 810deae:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 810deb0:	687b      	ldr	r3, [r7, #4]
 810deb2:	681b      	ldr	r3, [r3, #0]
 810deb4:	4a0f      	ldr	r2, [pc, #60]	@ (810def4 <plug_holes+0x13c>)
 810deb6:	4293      	cmp	r3, r2
 810deb8:	d00a      	beq.n	810ded0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 810deba:	687b      	ldr	r3, [r7, #4]
 810debc:	681b      	ldr	r3, [r3, #0]
 810debe:	4618      	mov	r0, r3
 810dec0:	f7ff ff5a 	bl	810dd78 <ptr_to_mem>
 810dec4:	4604      	mov	r4, r0
 810dec6:	68b8      	ldr	r0, [r7, #8]
 810dec8:	f7ff ff66 	bl	810dd98 <mem_to_ptr>
 810decc:	4603      	mov	r3, r0
 810dece:	6063      	str	r3, [r4, #4]
    }
  }
}
 810ded0:	bf00      	nop
 810ded2:	3714      	adds	r7, #20
 810ded4:	46bd      	mov	sp, r7
 810ded6:	bd90      	pop	{r4, r7, pc}
 810ded8:	1000b1a0 	.word	0x1000b1a0
 810dedc:	08117460 	.word	0x08117460
 810dee0:	081174d0 	.word	0x081174d0
 810dee4:	081174e8 	.word	0x081174e8
 810dee8:	1000b1a4 	.word	0x1000b1a4
 810deec:	08117510 	.word	0x08117510
 810def0:	0811752c 	.word	0x0811752c
 810def4:	0001ffe8 	.word	0x0001ffe8
 810def8:	08117548 	.word	0x08117548
 810defc:	1000b1ac 	.word	0x1000b1ac

0810df00 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 810df00:	b580      	push	{r7, lr}
 810df02:	b082      	sub	sp, #8
 810df04:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 810df06:	4b1b      	ldr	r3, [pc, #108]	@ (810df74 <mem_init+0x74>)
 810df08:	4a1b      	ldr	r2, [pc, #108]	@ (810df78 <mem_init+0x78>)
 810df0a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 810df0c:	4b19      	ldr	r3, [pc, #100]	@ (810df74 <mem_init+0x74>)
 810df0e:	681b      	ldr	r3, [r3, #0]
 810df10:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 810df12:	687b      	ldr	r3, [r7, #4]
 810df14:	4a19      	ldr	r2, [pc, #100]	@ (810df7c <mem_init+0x7c>)
 810df16:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 810df18:	687b      	ldr	r3, [r7, #4]
 810df1a:	2200      	movs	r2, #0
 810df1c:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 810df1e:	687b      	ldr	r3, [r7, #4]
 810df20:	2200      	movs	r2, #0
 810df22:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 810df24:	4815      	ldr	r0, [pc, #84]	@ (810df7c <mem_init+0x7c>)
 810df26:	f7ff ff27 	bl	810dd78 <ptr_to_mem>
 810df2a:	4603      	mov	r3, r0
 810df2c:	4a14      	ldr	r2, [pc, #80]	@ (810df80 <mem_init+0x80>)
 810df2e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 810df30:	4b13      	ldr	r3, [pc, #76]	@ (810df80 <mem_init+0x80>)
 810df32:	681b      	ldr	r3, [r3, #0]
 810df34:	2201      	movs	r2, #1
 810df36:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 810df38:	4b11      	ldr	r3, [pc, #68]	@ (810df80 <mem_init+0x80>)
 810df3a:	681b      	ldr	r3, [r3, #0]
 810df3c:	4a0f      	ldr	r2, [pc, #60]	@ (810df7c <mem_init+0x7c>)
 810df3e:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 810df40:	4b0f      	ldr	r3, [pc, #60]	@ (810df80 <mem_init+0x80>)
 810df42:	681b      	ldr	r3, [r3, #0]
 810df44:	4a0d      	ldr	r2, [pc, #52]	@ (810df7c <mem_init+0x7c>)
 810df46:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 810df48:	4b0a      	ldr	r3, [pc, #40]	@ (810df74 <mem_init+0x74>)
 810df4a:	681b      	ldr	r3, [r3, #0]
 810df4c:	4a0d      	ldr	r2, [pc, #52]	@ (810df84 <mem_init+0x84>)
 810df4e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 810df50:	480d      	ldr	r0, [pc, #52]	@ (810df88 <mem_init+0x88>)
 810df52:	f001 fdc5 	bl	810fae0 <sys_mutex_new>
 810df56:	4603      	mov	r3, r0
 810df58:	2b00      	cmp	r3, #0
 810df5a:	d006      	beq.n	810df6a <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 810df5c:	4b0b      	ldr	r3, [pc, #44]	@ (810df8c <mem_init+0x8c>)
 810df5e:	f240 221f 	movw	r2, #543	@ 0x21f
 810df62:	490b      	ldr	r1, [pc, #44]	@ (810df90 <mem_init+0x90>)
 810df64:	480b      	ldr	r0, [pc, #44]	@ (810df94 <mem_init+0x94>)
 810df66:	f007 ff0b 	bl	8115d80 <iprintf>
  }
}
 810df6a:	bf00      	nop
 810df6c:	3708      	adds	r7, #8
 810df6e:	46bd      	mov	sp, r7
 810df70:	bd80      	pop	{r7, pc}
 810df72:	bf00      	nop
 810df74:	1000b1a0 	.word	0x1000b1a0
 810df78:	10020000 	.word	0x10020000
 810df7c:	0001ffe8 	.word	0x0001ffe8
 810df80:	1000b1a4 	.word	0x1000b1a4
 810df84:	1000b1ac 	.word	0x1000b1ac
 810df88:	1000b1a8 	.word	0x1000b1a8
 810df8c:	08117460 	.word	0x08117460
 810df90:	08117574 	.word	0x08117574
 810df94:	081174e8 	.word	0x081174e8

0810df98 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 810df98:	b580      	push	{r7, lr}
 810df9a:	b086      	sub	sp, #24
 810df9c:	af00      	add	r7, sp, #0
 810df9e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 810dfa0:	6878      	ldr	r0, [r7, #4]
 810dfa2:	f7ff fef9 	bl	810dd98 <mem_to_ptr>
 810dfa6:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 810dfa8:	687b      	ldr	r3, [r7, #4]
 810dfaa:	681b      	ldr	r3, [r3, #0]
 810dfac:	4618      	mov	r0, r3
 810dfae:	f7ff fee3 	bl	810dd78 <ptr_to_mem>
 810dfb2:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 810dfb4:	687b      	ldr	r3, [r7, #4]
 810dfb6:	685b      	ldr	r3, [r3, #4]
 810dfb8:	4618      	mov	r0, r3
 810dfba:	f7ff fedd 	bl	810dd78 <ptr_to_mem>
 810dfbe:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 810dfc0:	687b      	ldr	r3, [r7, #4]
 810dfc2:	681b      	ldr	r3, [r3, #0]
 810dfc4:	4a11      	ldr	r2, [pc, #68]	@ (810e00c <mem_link_valid+0x74>)
 810dfc6:	4293      	cmp	r3, r2
 810dfc8:	d818      	bhi.n	810dffc <mem_link_valid+0x64>
 810dfca:	687b      	ldr	r3, [r7, #4]
 810dfcc:	685b      	ldr	r3, [r3, #4]
 810dfce:	4a0f      	ldr	r2, [pc, #60]	@ (810e00c <mem_link_valid+0x74>)
 810dfd0:	4293      	cmp	r3, r2
 810dfd2:	d813      	bhi.n	810dffc <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 810dfd4:	687b      	ldr	r3, [r7, #4]
 810dfd6:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 810dfd8:	697a      	ldr	r2, [r7, #20]
 810dfda:	429a      	cmp	r2, r3
 810dfdc:	d004      	beq.n	810dfe8 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 810dfde:	68fb      	ldr	r3, [r7, #12]
 810dfe0:	681b      	ldr	r3, [r3, #0]
 810dfe2:	697a      	ldr	r2, [r7, #20]
 810dfe4:	429a      	cmp	r2, r3
 810dfe6:	d109      	bne.n	810dffc <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 810dfe8:	4b09      	ldr	r3, [pc, #36]	@ (810e010 <mem_link_valid+0x78>)
 810dfea:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 810dfec:	693a      	ldr	r2, [r7, #16]
 810dfee:	429a      	cmp	r2, r3
 810dff0:	d006      	beq.n	810e000 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 810dff2:	693b      	ldr	r3, [r7, #16]
 810dff4:	685b      	ldr	r3, [r3, #4]
 810dff6:	697a      	ldr	r2, [r7, #20]
 810dff8:	429a      	cmp	r2, r3
 810dffa:	d001      	beq.n	810e000 <mem_link_valid+0x68>
    return 0;
 810dffc:	2300      	movs	r3, #0
 810dffe:	e000      	b.n	810e002 <mem_link_valid+0x6a>
  }
  return 1;
 810e000:	2301      	movs	r3, #1
}
 810e002:	4618      	mov	r0, r3
 810e004:	3718      	adds	r7, #24
 810e006:	46bd      	mov	sp, r7
 810e008:	bd80      	pop	{r7, pc}
 810e00a:	bf00      	nop
 810e00c:	0001ffe8 	.word	0x0001ffe8
 810e010:	1000b1a4 	.word	0x1000b1a4

0810e014 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 810e014:	b580      	push	{r7, lr}
 810e016:	b088      	sub	sp, #32
 810e018:	af00      	add	r7, sp, #0
 810e01a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 810e01c:	687b      	ldr	r3, [r7, #4]
 810e01e:	2b00      	cmp	r3, #0
 810e020:	d070      	beq.n	810e104 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 810e022:	687b      	ldr	r3, [r7, #4]
 810e024:	f003 0303 	and.w	r3, r3, #3
 810e028:	2b00      	cmp	r3, #0
 810e02a:	d00d      	beq.n	810e048 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 810e02c:	4b37      	ldr	r3, [pc, #220]	@ (810e10c <mem_free+0xf8>)
 810e02e:	f240 2273 	movw	r2, #627	@ 0x273
 810e032:	4937      	ldr	r1, [pc, #220]	@ (810e110 <mem_free+0xfc>)
 810e034:	4837      	ldr	r0, [pc, #220]	@ (810e114 <mem_free+0x100>)
 810e036:	f007 fea3 	bl	8115d80 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 810e03a:	f001 fda3 	bl	810fb84 <sys_arch_protect>
 810e03e:	60f8      	str	r0, [r7, #12]
 810e040:	68f8      	ldr	r0, [r7, #12]
 810e042:	f001 fdad 	bl	810fba0 <sys_arch_unprotect>
    return;
 810e046:	e05e      	b.n	810e106 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 810e048:	687b      	ldr	r3, [r7, #4]
 810e04a:	3b0c      	subs	r3, #12
 810e04c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 810e04e:	4b32      	ldr	r3, [pc, #200]	@ (810e118 <mem_free+0x104>)
 810e050:	681b      	ldr	r3, [r3, #0]
 810e052:	69fa      	ldr	r2, [r7, #28]
 810e054:	429a      	cmp	r2, r3
 810e056:	d306      	bcc.n	810e066 <mem_free+0x52>
 810e058:	687b      	ldr	r3, [r7, #4]
 810e05a:	f103 020c 	add.w	r2, r3, #12
 810e05e:	4b2f      	ldr	r3, [pc, #188]	@ (810e11c <mem_free+0x108>)
 810e060:	681b      	ldr	r3, [r3, #0]
 810e062:	429a      	cmp	r2, r3
 810e064:	d90d      	bls.n	810e082 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 810e066:	4b29      	ldr	r3, [pc, #164]	@ (810e10c <mem_free+0xf8>)
 810e068:	f240 227f 	movw	r2, #639	@ 0x27f
 810e06c:	492c      	ldr	r1, [pc, #176]	@ (810e120 <mem_free+0x10c>)
 810e06e:	4829      	ldr	r0, [pc, #164]	@ (810e114 <mem_free+0x100>)
 810e070:	f007 fe86 	bl	8115d80 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 810e074:	f001 fd86 	bl	810fb84 <sys_arch_protect>
 810e078:	6138      	str	r0, [r7, #16]
 810e07a:	6938      	ldr	r0, [r7, #16]
 810e07c:	f001 fd90 	bl	810fba0 <sys_arch_unprotect>
    return;
 810e080:	e041      	b.n	810e106 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 810e082:	4828      	ldr	r0, [pc, #160]	@ (810e124 <mem_free+0x110>)
 810e084:	f001 fd42 	bl	810fb0c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 810e088:	69fb      	ldr	r3, [r7, #28]
 810e08a:	7a1b      	ldrb	r3, [r3, #8]
 810e08c:	2b00      	cmp	r3, #0
 810e08e:	d110      	bne.n	810e0b2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 810e090:	4b1e      	ldr	r3, [pc, #120]	@ (810e10c <mem_free+0xf8>)
 810e092:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 810e096:	4924      	ldr	r1, [pc, #144]	@ (810e128 <mem_free+0x114>)
 810e098:	481e      	ldr	r0, [pc, #120]	@ (810e114 <mem_free+0x100>)
 810e09a:	f007 fe71 	bl	8115d80 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 810e09e:	4821      	ldr	r0, [pc, #132]	@ (810e124 <mem_free+0x110>)
 810e0a0:	f001 fd43 	bl	810fb2a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 810e0a4:	f001 fd6e 	bl	810fb84 <sys_arch_protect>
 810e0a8:	6178      	str	r0, [r7, #20]
 810e0aa:	6978      	ldr	r0, [r7, #20]
 810e0ac:	f001 fd78 	bl	810fba0 <sys_arch_unprotect>
    return;
 810e0b0:	e029      	b.n	810e106 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 810e0b2:	69f8      	ldr	r0, [r7, #28]
 810e0b4:	f7ff ff70 	bl	810df98 <mem_link_valid>
 810e0b8:	4603      	mov	r3, r0
 810e0ba:	2b00      	cmp	r3, #0
 810e0bc:	d110      	bne.n	810e0e0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 810e0be:	4b13      	ldr	r3, [pc, #76]	@ (810e10c <mem_free+0xf8>)
 810e0c0:	f240 2295 	movw	r2, #661	@ 0x295
 810e0c4:	4919      	ldr	r1, [pc, #100]	@ (810e12c <mem_free+0x118>)
 810e0c6:	4813      	ldr	r0, [pc, #76]	@ (810e114 <mem_free+0x100>)
 810e0c8:	f007 fe5a 	bl	8115d80 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 810e0cc:	4815      	ldr	r0, [pc, #84]	@ (810e124 <mem_free+0x110>)
 810e0ce:	f001 fd2c 	bl	810fb2a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 810e0d2:	f001 fd57 	bl	810fb84 <sys_arch_protect>
 810e0d6:	61b8      	str	r0, [r7, #24]
 810e0d8:	69b8      	ldr	r0, [r7, #24]
 810e0da:	f001 fd61 	bl	810fba0 <sys_arch_unprotect>
    return;
 810e0de:	e012      	b.n	810e106 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 810e0e0:	69fb      	ldr	r3, [r7, #28]
 810e0e2:	2200      	movs	r2, #0
 810e0e4:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 810e0e6:	4b12      	ldr	r3, [pc, #72]	@ (810e130 <mem_free+0x11c>)
 810e0e8:	681b      	ldr	r3, [r3, #0]
 810e0ea:	69fa      	ldr	r2, [r7, #28]
 810e0ec:	429a      	cmp	r2, r3
 810e0ee:	d202      	bcs.n	810e0f6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 810e0f0:	4a0f      	ldr	r2, [pc, #60]	@ (810e130 <mem_free+0x11c>)
 810e0f2:	69fb      	ldr	r3, [r7, #28]
 810e0f4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 810e0f6:	69f8      	ldr	r0, [r7, #28]
 810e0f8:	f7ff fe5e 	bl	810ddb8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 810e0fc:	4809      	ldr	r0, [pc, #36]	@ (810e124 <mem_free+0x110>)
 810e0fe:	f001 fd14 	bl	810fb2a <sys_mutex_unlock>
 810e102:	e000      	b.n	810e106 <mem_free+0xf2>
    return;
 810e104:	bf00      	nop
}
 810e106:	3720      	adds	r7, #32
 810e108:	46bd      	mov	sp, r7
 810e10a:	bd80      	pop	{r7, pc}
 810e10c:	08117460 	.word	0x08117460
 810e110:	08117590 	.word	0x08117590
 810e114:	081174e8 	.word	0x081174e8
 810e118:	1000b1a0 	.word	0x1000b1a0
 810e11c:	1000b1a4 	.word	0x1000b1a4
 810e120:	081175b4 	.word	0x081175b4
 810e124:	1000b1a8 	.word	0x1000b1a8
 810e128:	081175d0 	.word	0x081175d0
 810e12c:	081175f8 	.word	0x081175f8
 810e130:	1000b1ac 	.word	0x1000b1ac

0810e134 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 810e134:	b580      	push	{r7, lr}
 810e136:	b08a      	sub	sp, #40	@ 0x28
 810e138:	af00      	add	r7, sp, #0
 810e13a:	6078      	str	r0, [r7, #4]
 810e13c:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 810e13e:	683b      	ldr	r3, [r7, #0]
 810e140:	3303      	adds	r3, #3
 810e142:	f023 0303 	bic.w	r3, r3, #3
 810e146:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 810e148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e14a:	2b0b      	cmp	r3, #11
 810e14c:	d801      	bhi.n	810e152 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 810e14e:	230c      	movs	r3, #12
 810e150:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 810e152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e154:	4a6e      	ldr	r2, [pc, #440]	@ (810e310 <mem_trim+0x1dc>)
 810e156:	4293      	cmp	r3, r2
 810e158:	d803      	bhi.n	810e162 <mem_trim+0x2e>
 810e15a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e15c:	683b      	ldr	r3, [r7, #0]
 810e15e:	429a      	cmp	r2, r3
 810e160:	d201      	bcs.n	810e166 <mem_trim+0x32>
    return NULL;
 810e162:	2300      	movs	r3, #0
 810e164:	e0d0      	b.n	810e308 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 810e166:	4b6b      	ldr	r3, [pc, #428]	@ (810e314 <mem_trim+0x1e0>)
 810e168:	681b      	ldr	r3, [r3, #0]
 810e16a:	687a      	ldr	r2, [r7, #4]
 810e16c:	429a      	cmp	r2, r3
 810e16e:	d304      	bcc.n	810e17a <mem_trim+0x46>
 810e170:	4b69      	ldr	r3, [pc, #420]	@ (810e318 <mem_trim+0x1e4>)
 810e172:	681b      	ldr	r3, [r3, #0]
 810e174:	687a      	ldr	r2, [r7, #4]
 810e176:	429a      	cmp	r2, r3
 810e178:	d306      	bcc.n	810e188 <mem_trim+0x54>
 810e17a:	4b68      	ldr	r3, [pc, #416]	@ (810e31c <mem_trim+0x1e8>)
 810e17c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 810e180:	4967      	ldr	r1, [pc, #412]	@ (810e320 <mem_trim+0x1ec>)
 810e182:	4868      	ldr	r0, [pc, #416]	@ (810e324 <mem_trim+0x1f0>)
 810e184:	f007 fdfc 	bl	8115d80 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 810e188:	4b62      	ldr	r3, [pc, #392]	@ (810e314 <mem_trim+0x1e0>)
 810e18a:	681b      	ldr	r3, [r3, #0]
 810e18c:	687a      	ldr	r2, [r7, #4]
 810e18e:	429a      	cmp	r2, r3
 810e190:	d304      	bcc.n	810e19c <mem_trim+0x68>
 810e192:	4b61      	ldr	r3, [pc, #388]	@ (810e318 <mem_trim+0x1e4>)
 810e194:	681b      	ldr	r3, [r3, #0]
 810e196:	687a      	ldr	r2, [r7, #4]
 810e198:	429a      	cmp	r2, r3
 810e19a:	d307      	bcc.n	810e1ac <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 810e19c:	f001 fcf2 	bl	810fb84 <sys_arch_protect>
 810e1a0:	60b8      	str	r0, [r7, #8]
 810e1a2:	68b8      	ldr	r0, [r7, #8]
 810e1a4:	f001 fcfc 	bl	810fba0 <sys_arch_unprotect>
    return rmem;
 810e1a8:	687b      	ldr	r3, [r7, #4]
 810e1aa:	e0ad      	b.n	810e308 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 810e1ac:	687b      	ldr	r3, [r7, #4]
 810e1ae:	3b0c      	subs	r3, #12
 810e1b0:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 810e1b2:	6a38      	ldr	r0, [r7, #32]
 810e1b4:	f7ff fdf0 	bl	810dd98 <mem_to_ptr>
 810e1b8:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 810e1ba:	6a3b      	ldr	r3, [r7, #32]
 810e1bc:	681a      	ldr	r2, [r3, #0]
 810e1be:	69fb      	ldr	r3, [r7, #28]
 810e1c0:	1ad3      	subs	r3, r2, r3
 810e1c2:	3b0c      	subs	r3, #12
 810e1c4:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 810e1c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e1c8:	69bb      	ldr	r3, [r7, #24]
 810e1ca:	429a      	cmp	r2, r3
 810e1cc:	d906      	bls.n	810e1dc <mem_trim+0xa8>
 810e1ce:	4b53      	ldr	r3, [pc, #332]	@ (810e31c <mem_trim+0x1e8>)
 810e1d0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 810e1d4:	4954      	ldr	r1, [pc, #336]	@ (810e328 <mem_trim+0x1f4>)
 810e1d6:	4853      	ldr	r0, [pc, #332]	@ (810e324 <mem_trim+0x1f0>)
 810e1d8:	f007 fdd2 	bl	8115d80 <iprintf>
  if (newsize > size) {
 810e1dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e1de:	69bb      	ldr	r3, [r7, #24]
 810e1e0:	429a      	cmp	r2, r3
 810e1e2:	d901      	bls.n	810e1e8 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 810e1e4:	2300      	movs	r3, #0
 810e1e6:	e08f      	b.n	810e308 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 810e1e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e1ea:	69bb      	ldr	r3, [r7, #24]
 810e1ec:	429a      	cmp	r2, r3
 810e1ee:	d101      	bne.n	810e1f4 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 810e1f0:	687b      	ldr	r3, [r7, #4]
 810e1f2:	e089      	b.n	810e308 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 810e1f4:	484d      	ldr	r0, [pc, #308]	@ (810e32c <mem_trim+0x1f8>)
 810e1f6:	f001 fc89 	bl	810fb0c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 810e1fa:	6a3b      	ldr	r3, [r7, #32]
 810e1fc:	681b      	ldr	r3, [r3, #0]
 810e1fe:	4618      	mov	r0, r3
 810e200:	f7ff fdba 	bl	810dd78 <ptr_to_mem>
 810e204:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 810e206:	697b      	ldr	r3, [r7, #20]
 810e208:	7a1b      	ldrb	r3, [r3, #8]
 810e20a:	2b00      	cmp	r3, #0
 810e20c:	d13c      	bne.n	810e288 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 810e20e:	6a3b      	ldr	r3, [r7, #32]
 810e210:	681b      	ldr	r3, [r3, #0]
 810e212:	4a3f      	ldr	r2, [pc, #252]	@ (810e310 <mem_trim+0x1dc>)
 810e214:	4293      	cmp	r3, r2
 810e216:	d106      	bne.n	810e226 <mem_trim+0xf2>
 810e218:	4b40      	ldr	r3, [pc, #256]	@ (810e31c <mem_trim+0x1e8>)
 810e21a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 810e21e:	4944      	ldr	r1, [pc, #272]	@ (810e330 <mem_trim+0x1fc>)
 810e220:	4840      	ldr	r0, [pc, #256]	@ (810e324 <mem_trim+0x1f0>)
 810e222:	f007 fdad 	bl	8115d80 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 810e226:	697b      	ldr	r3, [r7, #20]
 810e228:	681b      	ldr	r3, [r3, #0]
 810e22a:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 810e22c:	69fa      	ldr	r2, [r7, #28]
 810e22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e230:	4413      	add	r3, r2
 810e232:	330c      	adds	r3, #12
 810e234:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 810e236:	4b3f      	ldr	r3, [pc, #252]	@ (810e334 <mem_trim+0x200>)
 810e238:	681b      	ldr	r3, [r3, #0]
 810e23a:	697a      	ldr	r2, [r7, #20]
 810e23c:	429a      	cmp	r2, r3
 810e23e:	d105      	bne.n	810e24c <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 810e240:	6938      	ldr	r0, [r7, #16]
 810e242:	f7ff fd99 	bl	810dd78 <ptr_to_mem>
 810e246:	4603      	mov	r3, r0
 810e248:	4a3a      	ldr	r2, [pc, #232]	@ (810e334 <mem_trim+0x200>)
 810e24a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 810e24c:	6938      	ldr	r0, [r7, #16]
 810e24e:	f7ff fd93 	bl	810dd78 <ptr_to_mem>
 810e252:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 810e254:	697b      	ldr	r3, [r7, #20]
 810e256:	2200      	movs	r2, #0
 810e258:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 810e25a:	697b      	ldr	r3, [r7, #20]
 810e25c:	68fa      	ldr	r2, [r7, #12]
 810e25e:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 810e260:	697b      	ldr	r3, [r7, #20]
 810e262:	69fa      	ldr	r2, [r7, #28]
 810e264:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 810e266:	6a3b      	ldr	r3, [r7, #32]
 810e268:	693a      	ldr	r2, [r7, #16]
 810e26a:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 810e26c:	697b      	ldr	r3, [r7, #20]
 810e26e:	681b      	ldr	r3, [r3, #0]
 810e270:	4a27      	ldr	r2, [pc, #156]	@ (810e310 <mem_trim+0x1dc>)
 810e272:	4293      	cmp	r3, r2
 810e274:	d044      	beq.n	810e300 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 810e276:	697b      	ldr	r3, [r7, #20]
 810e278:	681b      	ldr	r3, [r3, #0]
 810e27a:	4618      	mov	r0, r3
 810e27c:	f7ff fd7c 	bl	810dd78 <ptr_to_mem>
 810e280:	4602      	mov	r2, r0
 810e282:	693b      	ldr	r3, [r7, #16]
 810e284:	6053      	str	r3, [r2, #4]
 810e286:	e03b      	b.n	810e300 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 810e288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e28a:	3318      	adds	r3, #24
 810e28c:	69ba      	ldr	r2, [r7, #24]
 810e28e:	429a      	cmp	r2, r3
 810e290:	d336      	bcc.n	810e300 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 810e292:	69fa      	ldr	r2, [r7, #28]
 810e294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e296:	4413      	add	r3, r2
 810e298:	330c      	adds	r3, #12
 810e29a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 810e29c:	6a3b      	ldr	r3, [r7, #32]
 810e29e:	681b      	ldr	r3, [r3, #0]
 810e2a0:	4a1b      	ldr	r2, [pc, #108]	@ (810e310 <mem_trim+0x1dc>)
 810e2a2:	4293      	cmp	r3, r2
 810e2a4:	d106      	bne.n	810e2b4 <mem_trim+0x180>
 810e2a6:	4b1d      	ldr	r3, [pc, #116]	@ (810e31c <mem_trim+0x1e8>)
 810e2a8:	f240 3216 	movw	r2, #790	@ 0x316
 810e2ac:	4920      	ldr	r1, [pc, #128]	@ (810e330 <mem_trim+0x1fc>)
 810e2ae:	481d      	ldr	r0, [pc, #116]	@ (810e324 <mem_trim+0x1f0>)
 810e2b0:	f007 fd66 	bl	8115d80 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 810e2b4:	6938      	ldr	r0, [r7, #16]
 810e2b6:	f7ff fd5f 	bl	810dd78 <ptr_to_mem>
 810e2ba:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 810e2bc:	4b1d      	ldr	r3, [pc, #116]	@ (810e334 <mem_trim+0x200>)
 810e2be:	681b      	ldr	r3, [r3, #0]
 810e2c0:	697a      	ldr	r2, [r7, #20]
 810e2c2:	429a      	cmp	r2, r3
 810e2c4:	d202      	bcs.n	810e2cc <mem_trim+0x198>
      lfree = mem2;
 810e2c6:	4a1b      	ldr	r2, [pc, #108]	@ (810e334 <mem_trim+0x200>)
 810e2c8:	697b      	ldr	r3, [r7, #20]
 810e2ca:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 810e2cc:	697b      	ldr	r3, [r7, #20]
 810e2ce:	2200      	movs	r2, #0
 810e2d0:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 810e2d2:	6a3b      	ldr	r3, [r7, #32]
 810e2d4:	681a      	ldr	r2, [r3, #0]
 810e2d6:	697b      	ldr	r3, [r7, #20]
 810e2d8:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 810e2da:	697b      	ldr	r3, [r7, #20]
 810e2dc:	69fa      	ldr	r2, [r7, #28]
 810e2de:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 810e2e0:	6a3b      	ldr	r3, [r7, #32]
 810e2e2:	693a      	ldr	r2, [r7, #16]
 810e2e4:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 810e2e6:	697b      	ldr	r3, [r7, #20]
 810e2e8:	681b      	ldr	r3, [r3, #0]
 810e2ea:	4a09      	ldr	r2, [pc, #36]	@ (810e310 <mem_trim+0x1dc>)
 810e2ec:	4293      	cmp	r3, r2
 810e2ee:	d007      	beq.n	810e300 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 810e2f0:	697b      	ldr	r3, [r7, #20]
 810e2f2:	681b      	ldr	r3, [r3, #0]
 810e2f4:	4618      	mov	r0, r3
 810e2f6:	f7ff fd3f 	bl	810dd78 <ptr_to_mem>
 810e2fa:	4602      	mov	r2, r0
 810e2fc:	693b      	ldr	r3, [r7, #16]
 810e2fe:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 810e300:	480a      	ldr	r0, [pc, #40]	@ (810e32c <mem_trim+0x1f8>)
 810e302:	f001 fc12 	bl	810fb2a <sys_mutex_unlock>
  return rmem;
 810e306:	687b      	ldr	r3, [r7, #4]
}
 810e308:	4618      	mov	r0, r3
 810e30a:	3728      	adds	r7, #40	@ 0x28
 810e30c:	46bd      	mov	sp, r7
 810e30e:	bd80      	pop	{r7, pc}
 810e310:	0001ffe8 	.word	0x0001ffe8
 810e314:	1000b1a0 	.word	0x1000b1a0
 810e318:	1000b1a4 	.word	0x1000b1a4
 810e31c:	08117460 	.word	0x08117460
 810e320:	0811762c 	.word	0x0811762c
 810e324:	081174e8 	.word	0x081174e8
 810e328:	08117644 	.word	0x08117644
 810e32c:	1000b1a8 	.word	0x1000b1a8
 810e330:	08117664 	.word	0x08117664
 810e334:	1000b1ac 	.word	0x1000b1ac

0810e338 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 810e338:	b580      	push	{r7, lr}
 810e33a:	b088      	sub	sp, #32
 810e33c:	af00      	add	r7, sp, #0
 810e33e:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 810e340:	687b      	ldr	r3, [r7, #4]
 810e342:	2b00      	cmp	r3, #0
 810e344:	d101      	bne.n	810e34a <mem_malloc+0x12>
    return NULL;
 810e346:	2300      	movs	r3, #0
 810e348:	e0db      	b.n	810e502 <mem_malloc+0x1ca>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 810e34a:	687b      	ldr	r3, [r7, #4]
 810e34c:	3303      	adds	r3, #3
 810e34e:	f023 0303 	bic.w	r3, r3, #3
 810e352:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 810e354:	69bb      	ldr	r3, [r7, #24]
 810e356:	2b0b      	cmp	r3, #11
 810e358:	d801      	bhi.n	810e35e <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 810e35a:	230c      	movs	r3, #12
 810e35c:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 810e35e:	69bb      	ldr	r3, [r7, #24]
 810e360:	4a6a      	ldr	r2, [pc, #424]	@ (810e50c <mem_malloc+0x1d4>)
 810e362:	4293      	cmp	r3, r2
 810e364:	d803      	bhi.n	810e36e <mem_malloc+0x36>
 810e366:	69ba      	ldr	r2, [r7, #24]
 810e368:	687b      	ldr	r3, [r7, #4]
 810e36a:	429a      	cmp	r2, r3
 810e36c:	d201      	bcs.n	810e372 <mem_malloc+0x3a>
    return NULL;
 810e36e:	2300      	movs	r3, #0
 810e370:	e0c7      	b.n	810e502 <mem_malloc+0x1ca>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 810e372:	4867      	ldr	r0, [pc, #412]	@ (810e510 <mem_malloc+0x1d8>)
 810e374:	f001 fbca 	bl	810fb0c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 810e378:	4b66      	ldr	r3, [pc, #408]	@ (810e514 <mem_malloc+0x1dc>)
 810e37a:	681b      	ldr	r3, [r3, #0]
 810e37c:	4618      	mov	r0, r3
 810e37e:	f7ff fd0b 	bl	810dd98 <mem_to_ptr>
 810e382:	61f8      	str	r0, [r7, #28]
 810e384:	e0b0      	b.n	810e4e8 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 810e386:	69f8      	ldr	r0, [r7, #28]
 810e388:	f7ff fcf6 	bl	810dd78 <ptr_to_mem>
 810e38c:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 810e38e:	693b      	ldr	r3, [r7, #16]
 810e390:	7a1b      	ldrb	r3, [r3, #8]
 810e392:	2b00      	cmp	r3, #0
 810e394:	f040 80a2 	bne.w	810e4dc <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 810e398:	693b      	ldr	r3, [r7, #16]
 810e39a:	681a      	ldr	r2, [r3, #0]
 810e39c:	69fb      	ldr	r3, [r7, #28]
 810e39e:	1ad3      	subs	r3, r2, r3
 810e3a0:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 810e3a2:	69ba      	ldr	r2, [r7, #24]
 810e3a4:	429a      	cmp	r2, r3
 810e3a6:	f200 8099 	bhi.w	810e4dc <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 810e3aa:	693b      	ldr	r3, [r7, #16]
 810e3ac:	681a      	ldr	r2, [r3, #0]
 810e3ae:	69fb      	ldr	r3, [r7, #28]
 810e3b0:	1ad3      	subs	r3, r2, r3
 810e3b2:	f1a3 020c 	sub.w	r2, r3, #12
 810e3b6:	69bb      	ldr	r3, [r7, #24]
 810e3b8:	3318      	adds	r3, #24
 810e3ba:	429a      	cmp	r2, r3
 810e3bc:	d331      	bcc.n	810e422 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 810e3be:	69fa      	ldr	r2, [r7, #28]
 810e3c0:	69bb      	ldr	r3, [r7, #24]
 810e3c2:	4413      	add	r3, r2
 810e3c4:	330c      	adds	r3, #12
 810e3c6:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 810e3c8:	68fb      	ldr	r3, [r7, #12]
 810e3ca:	4a50      	ldr	r2, [pc, #320]	@ (810e50c <mem_malloc+0x1d4>)
 810e3cc:	4293      	cmp	r3, r2
 810e3ce:	d106      	bne.n	810e3de <mem_malloc+0xa6>
 810e3d0:	4b51      	ldr	r3, [pc, #324]	@ (810e518 <mem_malloc+0x1e0>)
 810e3d2:	f240 3287 	movw	r2, #903	@ 0x387
 810e3d6:	4951      	ldr	r1, [pc, #324]	@ (810e51c <mem_malloc+0x1e4>)
 810e3d8:	4851      	ldr	r0, [pc, #324]	@ (810e520 <mem_malloc+0x1e8>)
 810e3da:	f007 fcd1 	bl	8115d80 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 810e3de:	68f8      	ldr	r0, [r7, #12]
 810e3e0:	f7ff fcca 	bl	810dd78 <ptr_to_mem>
 810e3e4:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 810e3e6:	68bb      	ldr	r3, [r7, #8]
 810e3e8:	2200      	movs	r2, #0
 810e3ea:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 810e3ec:	693b      	ldr	r3, [r7, #16]
 810e3ee:	681a      	ldr	r2, [r3, #0]
 810e3f0:	68bb      	ldr	r3, [r7, #8]
 810e3f2:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 810e3f4:	68bb      	ldr	r3, [r7, #8]
 810e3f6:	69fa      	ldr	r2, [r7, #28]
 810e3f8:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 810e3fa:	693b      	ldr	r3, [r7, #16]
 810e3fc:	68fa      	ldr	r2, [r7, #12]
 810e3fe:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 810e400:	693b      	ldr	r3, [r7, #16]
 810e402:	2201      	movs	r2, #1
 810e404:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 810e406:	68bb      	ldr	r3, [r7, #8]
 810e408:	681b      	ldr	r3, [r3, #0]
 810e40a:	4a40      	ldr	r2, [pc, #256]	@ (810e50c <mem_malloc+0x1d4>)
 810e40c:	4293      	cmp	r3, r2
 810e40e:	d00b      	beq.n	810e428 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 810e410:	68bb      	ldr	r3, [r7, #8]
 810e412:	681b      	ldr	r3, [r3, #0]
 810e414:	4618      	mov	r0, r3
 810e416:	f7ff fcaf 	bl	810dd78 <ptr_to_mem>
 810e41a:	4602      	mov	r2, r0
 810e41c:	68fb      	ldr	r3, [r7, #12]
 810e41e:	6053      	str	r3, [r2, #4]
 810e420:	e002      	b.n	810e428 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 810e422:	693b      	ldr	r3, [r7, #16]
 810e424:	2201      	movs	r2, #1
 810e426:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 810e428:	4b3a      	ldr	r3, [pc, #232]	@ (810e514 <mem_malloc+0x1dc>)
 810e42a:	681b      	ldr	r3, [r3, #0]
 810e42c:	693a      	ldr	r2, [r7, #16]
 810e42e:	429a      	cmp	r2, r3
 810e430:	d127      	bne.n	810e482 <mem_malloc+0x14a>
          struct mem *cur = lfree;
 810e432:	4b38      	ldr	r3, [pc, #224]	@ (810e514 <mem_malloc+0x1dc>)
 810e434:	681b      	ldr	r3, [r3, #0]
 810e436:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 810e438:	e005      	b.n	810e446 <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 810e43a:	697b      	ldr	r3, [r7, #20]
 810e43c:	681b      	ldr	r3, [r3, #0]
 810e43e:	4618      	mov	r0, r3
 810e440:	f7ff fc9a 	bl	810dd78 <ptr_to_mem>
 810e444:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 810e446:	697b      	ldr	r3, [r7, #20]
 810e448:	7a1b      	ldrb	r3, [r3, #8]
 810e44a:	2b00      	cmp	r3, #0
 810e44c:	d004      	beq.n	810e458 <mem_malloc+0x120>
 810e44e:	4b35      	ldr	r3, [pc, #212]	@ (810e524 <mem_malloc+0x1ec>)
 810e450:	681b      	ldr	r3, [r3, #0]
 810e452:	697a      	ldr	r2, [r7, #20]
 810e454:	429a      	cmp	r2, r3
 810e456:	d1f0      	bne.n	810e43a <mem_malloc+0x102>
          }
          lfree = cur;
 810e458:	4a2e      	ldr	r2, [pc, #184]	@ (810e514 <mem_malloc+0x1dc>)
 810e45a:	697b      	ldr	r3, [r7, #20]
 810e45c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 810e45e:	4b2d      	ldr	r3, [pc, #180]	@ (810e514 <mem_malloc+0x1dc>)
 810e460:	681a      	ldr	r2, [r3, #0]
 810e462:	4b30      	ldr	r3, [pc, #192]	@ (810e524 <mem_malloc+0x1ec>)
 810e464:	681b      	ldr	r3, [r3, #0]
 810e466:	429a      	cmp	r2, r3
 810e468:	d00b      	beq.n	810e482 <mem_malloc+0x14a>
 810e46a:	4b2a      	ldr	r3, [pc, #168]	@ (810e514 <mem_malloc+0x1dc>)
 810e46c:	681b      	ldr	r3, [r3, #0]
 810e46e:	7a1b      	ldrb	r3, [r3, #8]
 810e470:	2b00      	cmp	r3, #0
 810e472:	d006      	beq.n	810e482 <mem_malloc+0x14a>
 810e474:	4b28      	ldr	r3, [pc, #160]	@ (810e518 <mem_malloc+0x1e0>)
 810e476:	f240 32b5 	movw	r2, #949	@ 0x3b5
 810e47a:	492b      	ldr	r1, [pc, #172]	@ (810e528 <mem_malloc+0x1f0>)
 810e47c:	4828      	ldr	r0, [pc, #160]	@ (810e520 <mem_malloc+0x1e8>)
 810e47e:	f007 fc7f 	bl	8115d80 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 810e482:	4823      	ldr	r0, [pc, #140]	@ (810e510 <mem_malloc+0x1d8>)
 810e484:	f001 fb51 	bl	810fb2a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 810e488:	693a      	ldr	r2, [r7, #16]
 810e48a:	69bb      	ldr	r3, [r7, #24]
 810e48c:	4413      	add	r3, r2
 810e48e:	330c      	adds	r3, #12
 810e490:	4a24      	ldr	r2, [pc, #144]	@ (810e524 <mem_malloc+0x1ec>)
 810e492:	6812      	ldr	r2, [r2, #0]
 810e494:	4293      	cmp	r3, r2
 810e496:	d906      	bls.n	810e4a6 <mem_malloc+0x16e>
 810e498:	4b1f      	ldr	r3, [pc, #124]	@ (810e518 <mem_malloc+0x1e0>)
 810e49a:	f240 32b9 	movw	r2, #953	@ 0x3b9
 810e49e:	4923      	ldr	r1, [pc, #140]	@ (810e52c <mem_malloc+0x1f4>)
 810e4a0:	481f      	ldr	r0, [pc, #124]	@ (810e520 <mem_malloc+0x1e8>)
 810e4a2:	f007 fc6d 	bl	8115d80 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 810e4a6:	693b      	ldr	r3, [r7, #16]
 810e4a8:	f003 0303 	and.w	r3, r3, #3
 810e4ac:	2b00      	cmp	r3, #0
 810e4ae:	d006      	beq.n	810e4be <mem_malloc+0x186>
 810e4b0:	4b19      	ldr	r3, [pc, #100]	@ (810e518 <mem_malloc+0x1e0>)
 810e4b2:	f240 32bb 	movw	r2, #955	@ 0x3bb
 810e4b6:	491e      	ldr	r1, [pc, #120]	@ (810e530 <mem_malloc+0x1f8>)
 810e4b8:	4819      	ldr	r0, [pc, #100]	@ (810e520 <mem_malloc+0x1e8>)
 810e4ba:	f007 fc61 	bl	8115d80 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 810e4be:	693b      	ldr	r3, [r7, #16]
 810e4c0:	f003 0303 	and.w	r3, r3, #3
 810e4c4:	2b00      	cmp	r3, #0
 810e4c6:	d006      	beq.n	810e4d6 <mem_malloc+0x19e>
 810e4c8:	4b13      	ldr	r3, [pc, #76]	@ (810e518 <mem_malloc+0x1e0>)
 810e4ca:	f240 32bd 	movw	r2, #957	@ 0x3bd
 810e4ce:	4919      	ldr	r1, [pc, #100]	@ (810e534 <mem_malloc+0x1fc>)
 810e4d0:	4813      	ldr	r0, [pc, #76]	@ (810e520 <mem_malloc+0x1e8>)
 810e4d2:	f007 fc55 	bl	8115d80 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 810e4d6:	693b      	ldr	r3, [r7, #16]
 810e4d8:	330c      	adds	r3, #12
 810e4da:	e012      	b.n	810e502 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
 810e4dc:	69f8      	ldr	r0, [r7, #28]
 810e4de:	f7ff fc4b 	bl	810dd78 <ptr_to_mem>
 810e4e2:	4603      	mov	r3, r0
 810e4e4:	681b      	ldr	r3, [r3, #0]
 810e4e6:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 810e4e8:	69bb      	ldr	r3, [r7, #24]
 810e4ea:	f5c3 33ff 	rsb	r3, r3, #130560	@ 0x1fe00
 810e4ee:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 810e4f2:	69fa      	ldr	r2, [r7, #28]
 810e4f4:	429a      	cmp	r2, r3
 810e4f6:	f4ff af46 	bcc.w	810e386 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 810e4fa:	4805      	ldr	r0, [pc, #20]	@ (810e510 <mem_malloc+0x1d8>)
 810e4fc:	f001 fb15 	bl	810fb2a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 810e500:	2300      	movs	r3, #0
}
 810e502:	4618      	mov	r0, r3
 810e504:	3720      	adds	r7, #32
 810e506:	46bd      	mov	sp, r7
 810e508:	bd80      	pop	{r7, pc}
 810e50a:	bf00      	nop
 810e50c:	0001ffe8 	.word	0x0001ffe8
 810e510:	1000b1a8 	.word	0x1000b1a8
 810e514:	1000b1ac 	.word	0x1000b1ac
 810e518:	08117460 	.word	0x08117460
 810e51c:	08117664 	.word	0x08117664
 810e520:	081174e8 	.word	0x081174e8
 810e524:	1000b1a4 	.word	0x1000b1a4
 810e528:	08117678 	.word	0x08117678
 810e52c:	08117694 	.word	0x08117694
 810e530:	081176c4 	.word	0x081176c4
 810e534:	081176f4 	.word	0x081176f4

0810e538 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 810e538:	b480      	push	{r7}
 810e53a:	b085      	sub	sp, #20
 810e53c:	af00      	add	r7, sp, #0
 810e53e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 810e540:	687b      	ldr	r3, [r7, #4]
 810e542:	689b      	ldr	r3, [r3, #8]
 810e544:	2200      	movs	r2, #0
 810e546:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 810e548:	687b      	ldr	r3, [r7, #4]
 810e54a:	685b      	ldr	r3, [r3, #4]
 810e54c:	3303      	adds	r3, #3
 810e54e:	f023 0303 	bic.w	r3, r3, #3
 810e552:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 810e554:	2300      	movs	r3, #0
 810e556:	60fb      	str	r3, [r7, #12]
 810e558:	e011      	b.n	810e57e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 810e55a:	687b      	ldr	r3, [r7, #4]
 810e55c:	689b      	ldr	r3, [r3, #8]
 810e55e:	681a      	ldr	r2, [r3, #0]
 810e560:	68bb      	ldr	r3, [r7, #8]
 810e562:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 810e564:	687b      	ldr	r3, [r7, #4]
 810e566:	689b      	ldr	r3, [r3, #8]
 810e568:	68ba      	ldr	r2, [r7, #8]
 810e56a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 810e56c:	687b      	ldr	r3, [r7, #4]
 810e56e:	881b      	ldrh	r3, [r3, #0]
 810e570:	461a      	mov	r2, r3
 810e572:	68bb      	ldr	r3, [r7, #8]
 810e574:	4413      	add	r3, r2
 810e576:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 810e578:	68fb      	ldr	r3, [r7, #12]
 810e57a:	3301      	adds	r3, #1
 810e57c:	60fb      	str	r3, [r7, #12]
 810e57e:	687b      	ldr	r3, [r7, #4]
 810e580:	885b      	ldrh	r3, [r3, #2]
 810e582:	461a      	mov	r2, r3
 810e584:	68fb      	ldr	r3, [r7, #12]
 810e586:	4293      	cmp	r3, r2
 810e588:	dbe7      	blt.n	810e55a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 810e58a:	bf00      	nop
 810e58c:	bf00      	nop
 810e58e:	3714      	adds	r7, #20
 810e590:	46bd      	mov	sp, r7
 810e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e596:	4770      	bx	lr

0810e598 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 810e598:	b580      	push	{r7, lr}
 810e59a:	b082      	sub	sp, #8
 810e59c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 810e59e:	2300      	movs	r3, #0
 810e5a0:	80fb      	strh	r3, [r7, #6]
 810e5a2:	e009      	b.n	810e5b8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 810e5a4:	88fb      	ldrh	r3, [r7, #6]
 810e5a6:	4a08      	ldr	r2, [pc, #32]	@ (810e5c8 <memp_init+0x30>)
 810e5a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810e5ac:	4618      	mov	r0, r3
 810e5ae:	f7ff ffc3 	bl	810e538 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 810e5b2:	88fb      	ldrh	r3, [r7, #6]
 810e5b4:	3301      	adds	r3, #1
 810e5b6:	80fb      	strh	r3, [r7, #6]
 810e5b8:	88fb      	ldrh	r3, [r7, #6]
 810e5ba:	2b0c      	cmp	r3, #12
 810e5bc:	d9f2      	bls.n	810e5a4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 810e5be:	bf00      	nop
 810e5c0:	bf00      	nop
 810e5c2:	3708      	adds	r7, #8
 810e5c4:	46bd      	mov	sp, r7
 810e5c6:	bd80      	pop	{r7, pc}
 810e5c8:	08119bdc 	.word	0x08119bdc

0810e5cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 810e5cc:	b580      	push	{r7, lr}
 810e5ce:	b084      	sub	sp, #16
 810e5d0:	af00      	add	r7, sp, #0
 810e5d2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 810e5d4:	f001 fad6 	bl	810fb84 <sys_arch_protect>
 810e5d8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 810e5da:	687b      	ldr	r3, [r7, #4]
 810e5dc:	689b      	ldr	r3, [r3, #8]
 810e5de:	681b      	ldr	r3, [r3, #0]
 810e5e0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 810e5e2:	68bb      	ldr	r3, [r7, #8]
 810e5e4:	2b00      	cmp	r3, #0
 810e5e6:	d015      	beq.n	810e614 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 810e5e8:	687b      	ldr	r3, [r7, #4]
 810e5ea:	689b      	ldr	r3, [r3, #8]
 810e5ec:	68ba      	ldr	r2, [r7, #8]
 810e5ee:	6812      	ldr	r2, [r2, #0]
 810e5f0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 810e5f2:	68bb      	ldr	r3, [r7, #8]
 810e5f4:	f003 0303 	and.w	r3, r3, #3
 810e5f8:	2b00      	cmp	r3, #0
 810e5fa:	d006      	beq.n	810e60a <do_memp_malloc_pool+0x3e>
 810e5fc:	4b09      	ldr	r3, [pc, #36]	@ (810e624 <do_memp_malloc_pool+0x58>)
 810e5fe:	f44f 728c 	mov.w	r2, #280	@ 0x118
 810e602:	4909      	ldr	r1, [pc, #36]	@ (810e628 <do_memp_malloc_pool+0x5c>)
 810e604:	4809      	ldr	r0, [pc, #36]	@ (810e62c <do_memp_malloc_pool+0x60>)
 810e606:	f007 fbbb 	bl	8115d80 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 810e60a:	68f8      	ldr	r0, [r7, #12]
 810e60c:	f001 fac8 	bl	810fba0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 810e610:	68bb      	ldr	r3, [r7, #8]
 810e612:	e003      	b.n	810e61c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 810e614:	68f8      	ldr	r0, [r7, #12]
 810e616:	f001 fac3 	bl	810fba0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 810e61a:	2300      	movs	r3, #0
}
 810e61c:	4618      	mov	r0, r3
 810e61e:	3710      	adds	r7, #16
 810e620:	46bd      	mov	sp, r7
 810e622:	bd80      	pop	{r7, pc}
 810e624:	08117718 	.word	0x08117718
 810e628:	08117788 	.word	0x08117788
 810e62c:	081177ac 	.word	0x081177ac

0810e630 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 810e630:	b580      	push	{r7, lr}
 810e632:	b082      	sub	sp, #8
 810e634:	af00      	add	r7, sp, #0
 810e636:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 810e638:	687b      	ldr	r3, [r7, #4]
 810e63a:	2b00      	cmp	r3, #0
 810e63c:	d106      	bne.n	810e64c <memp_malloc_pool+0x1c>
 810e63e:	4b0a      	ldr	r3, [pc, #40]	@ (810e668 <memp_malloc_pool+0x38>)
 810e640:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 810e644:	4909      	ldr	r1, [pc, #36]	@ (810e66c <memp_malloc_pool+0x3c>)
 810e646:	480a      	ldr	r0, [pc, #40]	@ (810e670 <memp_malloc_pool+0x40>)
 810e648:	f007 fb9a 	bl	8115d80 <iprintf>
  if (desc == NULL) {
 810e64c:	687b      	ldr	r3, [r7, #4]
 810e64e:	2b00      	cmp	r3, #0
 810e650:	d101      	bne.n	810e656 <memp_malloc_pool+0x26>
    return NULL;
 810e652:	2300      	movs	r3, #0
 810e654:	e003      	b.n	810e65e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 810e656:	6878      	ldr	r0, [r7, #4]
 810e658:	f7ff ffb8 	bl	810e5cc <do_memp_malloc_pool>
 810e65c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 810e65e:	4618      	mov	r0, r3
 810e660:	3708      	adds	r7, #8
 810e662:	46bd      	mov	sp, r7
 810e664:	bd80      	pop	{r7, pc}
 810e666:	bf00      	nop
 810e668:	08117718 	.word	0x08117718
 810e66c:	081177d4 	.word	0x081177d4
 810e670:	081177ac 	.word	0x081177ac

0810e674 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 810e674:	b580      	push	{r7, lr}
 810e676:	b084      	sub	sp, #16
 810e678:	af00      	add	r7, sp, #0
 810e67a:	4603      	mov	r3, r0
 810e67c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 810e67e:	79fb      	ldrb	r3, [r7, #7]
 810e680:	2b0c      	cmp	r3, #12
 810e682:	d908      	bls.n	810e696 <memp_malloc+0x22>
 810e684:	4b0a      	ldr	r3, [pc, #40]	@ (810e6b0 <memp_malloc+0x3c>)
 810e686:	f240 1257 	movw	r2, #343	@ 0x157
 810e68a:	490a      	ldr	r1, [pc, #40]	@ (810e6b4 <memp_malloc+0x40>)
 810e68c:	480a      	ldr	r0, [pc, #40]	@ (810e6b8 <memp_malloc+0x44>)
 810e68e:	f007 fb77 	bl	8115d80 <iprintf>
 810e692:	2300      	movs	r3, #0
 810e694:	e008      	b.n	810e6a8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 810e696:	79fb      	ldrb	r3, [r7, #7]
 810e698:	4a08      	ldr	r2, [pc, #32]	@ (810e6bc <memp_malloc+0x48>)
 810e69a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810e69e:	4618      	mov	r0, r3
 810e6a0:	f7ff ff94 	bl	810e5cc <do_memp_malloc_pool>
 810e6a4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 810e6a6:	68fb      	ldr	r3, [r7, #12]
}
 810e6a8:	4618      	mov	r0, r3
 810e6aa:	3710      	adds	r7, #16
 810e6ac:	46bd      	mov	sp, r7
 810e6ae:	bd80      	pop	{r7, pc}
 810e6b0:	08117718 	.word	0x08117718
 810e6b4:	081177e8 	.word	0x081177e8
 810e6b8:	081177ac 	.word	0x081177ac
 810e6bc:	08119bdc 	.word	0x08119bdc

0810e6c0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 810e6c0:	b580      	push	{r7, lr}
 810e6c2:	b084      	sub	sp, #16
 810e6c4:	af00      	add	r7, sp, #0
 810e6c6:	6078      	str	r0, [r7, #4]
 810e6c8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 810e6ca:	683b      	ldr	r3, [r7, #0]
 810e6cc:	f003 0303 	and.w	r3, r3, #3
 810e6d0:	2b00      	cmp	r3, #0
 810e6d2:	d006      	beq.n	810e6e2 <do_memp_free_pool+0x22>
 810e6d4:	4b0d      	ldr	r3, [pc, #52]	@ (810e70c <do_memp_free_pool+0x4c>)
 810e6d6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 810e6da:	490d      	ldr	r1, [pc, #52]	@ (810e710 <do_memp_free_pool+0x50>)
 810e6dc:	480d      	ldr	r0, [pc, #52]	@ (810e714 <do_memp_free_pool+0x54>)
 810e6de:	f007 fb4f 	bl	8115d80 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 810e6e2:	683b      	ldr	r3, [r7, #0]
 810e6e4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 810e6e6:	f001 fa4d 	bl	810fb84 <sys_arch_protect>
 810e6ea:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 810e6ec:	687b      	ldr	r3, [r7, #4]
 810e6ee:	689b      	ldr	r3, [r3, #8]
 810e6f0:	681a      	ldr	r2, [r3, #0]
 810e6f2:	68fb      	ldr	r3, [r7, #12]
 810e6f4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 810e6f6:	687b      	ldr	r3, [r7, #4]
 810e6f8:	689b      	ldr	r3, [r3, #8]
 810e6fa:	68fa      	ldr	r2, [r7, #12]
 810e6fc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 810e6fe:	68b8      	ldr	r0, [r7, #8]
 810e700:	f001 fa4e 	bl	810fba0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 810e704:	bf00      	nop
 810e706:	3710      	adds	r7, #16
 810e708:	46bd      	mov	sp, r7
 810e70a:	bd80      	pop	{r7, pc}
 810e70c:	08117718 	.word	0x08117718
 810e710:	08117808 	.word	0x08117808
 810e714:	081177ac 	.word	0x081177ac

0810e718 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 810e718:	b580      	push	{r7, lr}
 810e71a:	b082      	sub	sp, #8
 810e71c:	af00      	add	r7, sp, #0
 810e71e:	6078      	str	r0, [r7, #4]
 810e720:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 810e722:	687b      	ldr	r3, [r7, #4]
 810e724:	2b00      	cmp	r3, #0
 810e726:	d106      	bne.n	810e736 <memp_free_pool+0x1e>
 810e728:	4b0a      	ldr	r3, [pc, #40]	@ (810e754 <memp_free_pool+0x3c>)
 810e72a:	f240 1295 	movw	r2, #405	@ 0x195
 810e72e:	490a      	ldr	r1, [pc, #40]	@ (810e758 <memp_free_pool+0x40>)
 810e730:	480a      	ldr	r0, [pc, #40]	@ (810e75c <memp_free_pool+0x44>)
 810e732:	f007 fb25 	bl	8115d80 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 810e736:	687b      	ldr	r3, [r7, #4]
 810e738:	2b00      	cmp	r3, #0
 810e73a:	d007      	beq.n	810e74c <memp_free_pool+0x34>
 810e73c:	683b      	ldr	r3, [r7, #0]
 810e73e:	2b00      	cmp	r3, #0
 810e740:	d004      	beq.n	810e74c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 810e742:	6839      	ldr	r1, [r7, #0]
 810e744:	6878      	ldr	r0, [r7, #4]
 810e746:	f7ff ffbb 	bl	810e6c0 <do_memp_free_pool>
 810e74a:	e000      	b.n	810e74e <memp_free_pool+0x36>
    return;
 810e74c:	bf00      	nop
}
 810e74e:	3708      	adds	r7, #8
 810e750:	46bd      	mov	sp, r7
 810e752:	bd80      	pop	{r7, pc}
 810e754:	08117718 	.word	0x08117718
 810e758:	081177d4 	.word	0x081177d4
 810e75c:	081177ac 	.word	0x081177ac

0810e760 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 810e760:	b580      	push	{r7, lr}
 810e762:	b082      	sub	sp, #8
 810e764:	af00      	add	r7, sp, #0
 810e766:	4603      	mov	r3, r0
 810e768:	6039      	str	r1, [r7, #0]
 810e76a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 810e76c:	79fb      	ldrb	r3, [r7, #7]
 810e76e:	2b0c      	cmp	r3, #12
 810e770:	d907      	bls.n	810e782 <memp_free+0x22>
 810e772:	4b0c      	ldr	r3, [pc, #48]	@ (810e7a4 <memp_free+0x44>)
 810e774:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 810e778:	490b      	ldr	r1, [pc, #44]	@ (810e7a8 <memp_free+0x48>)
 810e77a:	480c      	ldr	r0, [pc, #48]	@ (810e7ac <memp_free+0x4c>)
 810e77c:	f007 fb00 	bl	8115d80 <iprintf>
 810e780:	e00c      	b.n	810e79c <memp_free+0x3c>

  if (mem == NULL) {
 810e782:	683b      	ldr	r3, [r7, #0]
 810e784:	2b00      	cmp	r3, #0
 810e786:	d008      	beq.n	810e79a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 810e788:	79fb      	ldrb	r3, [r7, #7]
 810e78a:	4a09      	ldr	r2, [pc, #36]	@ (810e7b0 <memp_free+0x50>)
 810e78c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810e790:	6839      	ldr	r1, [r7, #0]
 810e792:	4618      	mov	r0, r3
 810e794:	f7ff ff94 	bl	810e6c0 <do_memp_free_pool>
 810e798:	e000      	b.n	810e79c <memp_free+0x3c>
    return;
 810e79a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 810e79c:	3708      	adds	r7, #8
 810e79e:	46bd      	mov	sp, r7
 810e7a0:	bd80      	pop	{r7, pc}
 810e7a2:	bf00      	nop
 810e7a4:	08117718 	.word	0x08117718
 810e7a8:	08117828 	.word	0x08117828
 810e7ac:	081177ac 	.word	0x081177ac
 810e7b0:	08119bdc 	.word	0x08119bdc

0810e7b4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 810e7b4:	b480      	push	{r7}
 810e7b6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 810e7b8:	bf00      	nop
 810e7ba:	46bd      	mov	sp, r7
 810e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e7c0:	4770      	bx	lr
	...

0810e7c4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 810e7c4:	b580      	push	{r7, lr}
 810e7c6:	b086      	sub	sp, #24
 810e7c8:	af00      	add	r7, sp, #0
 810e7ca:	60f8      	str	r0, [r7, #12]
 810e7cc:	60b9      	str	r1, [r7, #8]
 810e7ce:	607a      	str	r2, [r7, #4]
 810e7d0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 810e7d2:	68fb      	ldr	r3, [r7, #12]
 810e7d4:	2b00      	cmp	r3, #0
 810e7d6:	d108      	bne.n	810e7ea <netif_add+0x26>
 810e7d8:	4b57      	ldr	r3, [pc, #348]	@ (810e938 <netif_add+0x174>)
 810e7da:	f240 1227 	movw	r2, #295	@ 0x127
 810e7de:	4957      	ldr	r1, [pc, #348]	@ (810e93c <netif_add+0x178>)
 810e7e0:	4857      	ldr	r0, [pc, #348]	@ (810e940 <netif_add+0x17c>)
 810e7e2:	f007 facd 	bl	8115d80 <iprintf>
 810e7e6:	2300      	movs	r3, #0
 810e7e8:	e0a2      	b.n	810e930 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 810e7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e7ec:	2b00      	cmp	r3, #0
 810e7ee:	d108      	bne.n	810e802 <netif_add+0x3e>
 810e7f0:	4b51      	ldr	r3, [pc, #324]	@ (810e938 <netif_add+0x174>)
 810e7f2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 810e7f6:	4953      	ldr	r1, [pc, #332]	@ (810e944 <netif_add+0x180>)
 810e7f8:	4851      	ldr	r0, [pc, #324]	@ (810e940 <netif_add+0x17c>)
 810e7fa:	f007 fac1 	bl	8115d80 <iprintf>
 810e7fe:	2300      	movs	r3, #0
 810e800:	e096      	b.n	810e930 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 810e802:	68bb      	ldr	r3, [r7, #8]
 810e804:	2b00      	cmp	r3, #0
 810e806:	d101      	bne.n	810e80c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 810e808:	4b4f      	ldr	r3, [pc, #316]	@ (810e948 <netif_add+0x184>)
 810e80a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 810e80c:	687b      	ldr	r3, [r7, #4]
 810e80e:	2b00      	cmp	r3, #0
 810e810:	d101      	bne.n	810e816 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 810e812:	4b4d      	ldr	r3, [pc, #308]	@ (810e948 <netif_add+0x184>)
 810e814:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 810e816:	683b      	ldr	r3, [r7, #0]
 810e818:	2b00      	cmp	r3, #0
 810e81a:	d101      	bne.n	810e820 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 810e81c:	4b4a      	ldr	r3, [pc, #296]	@ (810e948 <netif_add+0x184>)
 810e81e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 810e820:	68fb      	ldr	r3, [r7, #12]
 810e822:	2200      	movs	r2, #0
 810e824:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 810e826:	68fb      	ldr	r3, [r7, #12]
 810e828:	2200      	movs	r2, #0
 810e82a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 810e82c:	68fb      	ldr	r3, [r7, #12]
 810e82e:	2200      	movs	r2, #0
 810e830:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 810e832:	68fb      	ldr	r3, [r7, #12]
 810e834:	4a45      	ldr	r2, [pc, #276]	@ (810e94c <netif_add+0x188>)
 810e836:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 810e838:	68fb      	ldr	r3, [r7, #12]
 810e83a:	2200      	movs	r2, #0
 810e83c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 810e83e:	68fb      	ldr	r3, [r7, #12]
 810e840:	2200      	movs	r2, #0
 810e842:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 810e846:	68fb      	ldr	r3, [r7, #12]
 810e848:	2200      	movs	r2, #0
 810e84a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 810e84c:	68fb      	ldr	r3, [r7, #12]
 810e84e:	6a3a      	ldr	r2, [r7, #32]
 810e850:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 810e852:	4b3f      	ldr	r3, [pc, #252]	@ (810e950 <netif_add+0x18c>)
 810e854:	781a      	ldrb	r2, [r3, #0]
 810e856:	68fb      	ldr	r3, [r7, #12]
 810e858:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 810e85c:	68fb      	ldr	r3, [r7, #12]
 810e85e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810e860:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 810e862:	683b      	ldr	r3, [r7, #0]
 810e864:	687a      	ldr	r2, [r7, #4]
 810e866:	68b9      	ldr	r1, [r7, #8]
 810e868:	68f8      	ldr	r0, [r7, #12]
 810e86a:	f000 f913 	bl	810ea94 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 810e86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e870:	68f8      	ldr	r0, [r7, #12]
 810e872:	4798      	blx	r3
 810e874:	4603      	mov	r3, r0
 810e876:	2b00      	cmp	r3, #0
 810e878:	d001      	beq.n	810e87e <netif_add+0xba>
    return NULL;
 810e87a:	2300      	movs	r3, #0
 810e87c:	e058      	b.n	810e930 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 810e87e:	68fb      	ldr	r3, [r7, #12]
 810e880:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810e884:	2bff      	cmp	r3, #255	@ 0xff
 810e886:	d103      	bne.n	810e890 <netif_add+0xcc>
        netif->num = 0;
 810e888:	68fb      	ldr	r3, [r7, #12]
 810e88a:	2200      	movs	r2, #0
 810e88c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 810e890:	2300      	movs	r3, #0
 810e892:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 810e894:	4b2f      	ldr	r3, [pc, #188]	@ (810e954 <netif_add+0x190>)
 810e896:	681b      	ldr	r3, [r3, #0]
 810e898:	617b      	str	r3, [r7, #20]
 810e89a:	e02b      	b.n	810e8f4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 810e89c:	697a      	ldr	r2, [r7, #20]
 810e89e:	68fb      	ldr	r3, [r7, #12]
 810e8a0:	429a      	cmp	r2, r3
 810e8a2:	d106      	bne.n	810e8b2 <netif_add+0xee>
 810e8a4:	4b24      	ldr	r3, [pc, #144]	@ (810e938 <netif_add+0x174>)
 810e8a6:	f240 128b 	movw	r2, #395	@ 0x18b
 810e8aa:	492b      	ldr	r1, [pc, #172]	@ (810e958 <netif_add+0x194>)
 810e8ac:	4824      	ldr	r0, [pc, #144]	@ (810e940 <netif_add+0x17c>)
 810e8ae:	f007 fa67 	bl	8115d80 <iprintf>
        num_netifs++;
 810e8b2:	693b      	ldr	r3, [r7, #16]
 810e8b4:	3301      	adds	r3, #1
 810e8b6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 810e8b8:	693b      	ldr	r3, [r7, #16]
 810e8ba:	2bff      	cmp	r3, #255	@ 0xff
 810e8bc:	dd06      	ble.n	810e8cc <netif_add+0x108>
 810e8be:	4b1e      	ldr	r3, [pc, #120]	@ (810e938 <netif_add+0x174>)
 810e8c0:	f240 128d 	movw	r2, #397	@ 0x18d
 810e8c4:	4925      	ldr	r1, [pc, #148]	@ (810e95c <netif_add+0x198>)
 810e8c6:	481e      	ldr	r0, [pc, #120]	@ (810e940 <netif_add+0x17c>)
 810e8c8:	f007 fa5a 	bl	8115d80 <iprintf>
        if (netif2->num == netif->num) {
 810e8cc:	697b      	ldr	r3, [r7, #20]
 810e8ce:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 810e8d2:	68fb      	ldr	r3, [r7, #12]
 810e8d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810e8d8:	429a      	cmp	r2, r3
 810e8da:	d108      	bne.n	810e8ee <netif_add+0x12a>
          netif->num++;
 810e8dc:	68fb      	ldr	r3, [r7, #12]
 810e8de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810e8e2:	3301      	adds	r3, #1
 810e8e4:	b2da      	uxtb	r2, r3
 810e8e6:	68fb      	ldr	r3, [r7, #12]
 810e8e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 810e8ec:	e005      	b.n	810e8fa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 810e8ee:	697b      	ldr	r3, [r7, #20]
 810e8f0:	681b      	ldr	r3, [r3, #0]
 810e8f2:	617b      	str	r3, [r7, #20]
 810e8f4:	697b      	ldr	r3, [r7, #20]
 810e8f6:	2b00      	cmp	r3, #0
 810e8f8:	d1d0      	bne.n	810e89c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 810e8fa:	697b      	ldr	r3, [r7, #20]
 810e8fc:	2b00      	cmp	r3, #0
 810e8fe:	d1be      	bne.n	810e87e <netif_add+0xba>
  }
  if (netif->num == 254) {
 810e900:	68fb      	ldr	r3, [r7, #12]
 810e902:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810e906:	2bfe      	cmp	r3, #254	@ 0xfe
 810e908:	d103      	bne.n	810e912 <netif_add+0x14e>
    netif_num = 0;
 810e90a:	4b11      	ldr	r3, [pc, #68]	@ (810e950 <netif_add+0x18c>)
 810e90c:	2200      	movs	r2, #0
 810e90e:	701a      	strb	r2, [r3, #0]
 810e910:	e006      	b.n	810e920 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 810e912:	68fb      	ldr	r3, [r7, #12]
 810e914:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810e918:	3301      	adds	r3, #1
 810e91a:	b2da      	uxtb	r2, r3
 810e91c:	4b0c      	ldr	r3, [pc, #48]	@ (810e950 <netif_add+0x18c>)
 810e91e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 810e920:	4b0c      	ldr	r3, [pc, #48]	@ (810e954 <netif_add+0x190>)
 810e922:	681a      	ldr	r2, [r3, #0]
 810e924:	68fb      	ldr	r3, [r7, #12]
 810e926:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 810e928:	4a0a      	ldr	r2, [pc, #40]	@ (810e954 <netif_add+0x190>)
 810e92a:	68fb      	ldr	r3, [r7, #12]
 810e92c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 810e92e:	68fb      	ldr	r3, [r7, #12]
}
 810e930:	4618      	mov	r0, r3
 810e932:	3718      	adds	r7, #24
 810e934:	46bd      	mov	sp, r7
 810e936:	bd80      	pop	{r7, pc}
 810e938:	08117844 	.word	0x08117844
 810e93c:	08117914 	.word	0x08117914
 810e940:	081178d0 	.word	0x081178d0
 810e944:	08117930 	.word	0x08117930
 810e948:	08119b3c 	.word	0x08119b3c
 810e94c:	0810ed6f 	.word	0x0810ed6f
 810e950:	10011c44 	.word	0x10011c44
 810e954:	10011c3c 	.word	0x10011c3c
 810e958:	08117954 	.word	0x08117954
 810e95c:	08117968 	.word	0x08117968

0810e960 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 810e960:	b580      	push	{r7, lr}
 810e962:	b082      	sub	sp, #8
 810e964:	af00      	add	r7, sp, #0
 810e966:	6078      	str	r0, [r7, #4]
 810e968:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 810e96a:	6839      	ldr	r1, [r7, #0]
 810e96c:	6878      	ldr	r0, [r7, #4]
 810e96e:	f002 fc75 	bl	811125c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 810e972:	6839      	ldr	r1, [r7, #0]
 810e974:	6878      	ldr	r0, [r7, #4]
 810e976:	f006 ff27 	bl	81157c8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 810e97a:	bf00      	nop
 810e97c:	3708      	adds	r7, #8
 810e97e:	46bd      	mov	sp, r7
 810e980:	bd80      	pop	{r7, pc}
	...

0810e984 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 810e984:	b580      	push	{r7, lr}
 810e986:	b086      	sub	sp, #24
 810e988:	af00      	add	r7, sp, #0
 810e98a:	60f8      	str	r0, [r7, #12]
 810e98c:	60b9      	str	r1, [r7, #8]
 810e98e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 810e990:	68bb      	ldr	r3, [r7, #8]
 810e992:	2b00      	cmp	r3, #0
 810e994:	d106      	bne.n	810e9a4 <netif_do_set_ipaddr+0x20>
 810e996:	4b1d      	ldr	r3, [pc, #116]	@ (810ea0c <netif_do_set_ipaddr+0x88>)
 810e998:	f240 12cb 	movw	r2, #459	@ 0x1cb
 810e99c:	491c      	ldr	r1, [pc, #112]	@ (810ea10 <netif_do_set_ipaddr+0x8c>)
 810e99e:	481d      	ldr	r0, [pc, #116]	@ (810ea14 <netif_do_set_ipaddr+0x90>)
 810e9a0:	f007 f9ee 	bl	8115d80 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 810e9a4:	687b      	ldr	r3, [r7, #4]
 810e9a6:	2b00      	cmp	r3, #0
 810e9a8:	d106      	bne.n	810e9b8 <netif_do_set_ipaddr+0x34>
 810e9aa:	4b18      	ldr	r3, [pc, #96]	@ (810ea0c <netif_do_set_ipaddr+0x88>)
 810e9ac:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 810e9b0:	4917      	ldr	r1, [pc, #92]	@ (810ea10 <netif_do_set_ipaddr+0x8c>)
 810e9b2:	4818      	ldr	r0, [pc, #96]	@ (810ea14 <netif_do_set_ipaddr+0x90>)
 810e9b4:	f007 f9e4 	bl	8115d80 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 810e9b8:	68bb      	ldr	r3, [r7, #8]
 810e9ba:	681a      	ldr	r2, [r3, #0]
 810e9bc:	68fb      	ldr	r3, [r7, #12]
 810e9be:	3304      	adds	r3, #4
 810e9c0:	681b      	ldr	r3, [r3, #0]
 810e9c2:	429a      	cmp	r2, r3
 810e9c4:	d01c      	beq.n	810ea00 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 810e9c6:	68bb      	ldr	r3, [r7, #8]
 810e9c8:	681b      	ldr	r3, [r3, #0]
 810e9ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 810e9cc:	68fb      	ldr	r3, [r7, #12]
 810e9ce:	3304      	adds	r3, #4
 810e9d0:	681a      	ldr	r2, [r3, #0]
 810e9d2:	687b      	ldr	r3, [r7, #4]
 810e9d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 810e9d6:	f107 0314 	add.w	r3, r7, #20
 810e9da:	4619      	mov	r1, r3
 810e9dc:	6878      	ldr	r0, [r7, #4]
 810e9de:	f7ff ffbf 	bl	810e960 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 810e9e2:	68bb      	ldr	r3, [r7, #8]
 810e9e4:	2b00      	cmp	r3, #0
 810e9e6:	d002      	beq.n	810e9ee <netif_do_set_ipaddr+0x6a>
 810e9e8:	68bb      	ldr	r3, [r7, #8]
 810e9ea:	681b      	ldr	r3, [r3, #0]
 810e9ec:	e000      	b.n	810e9f0 <netif_do_set_ipaddr+0x6c>
 810e9ee:	2300      	movs	r3, #0
 810e9f0:	68fa      	ldr	r2, [r7, #12]
 810e9f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 810e9f4:	2101      	movs	r1, #1
 810e9f6:	68f8      	ldr	r0, [r7, #12]
 810e9f8:	f000 f8d2 	bl	810eba0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 810e9fc:	2301      	movs	r3, #1
 810e9fe:	e000      	b.n	810ea02 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 810ea00:	2300      	movs	r3, #0
}
 810ea02:	4618      	mov	r0, r3
 810ea04:	3718      	adds	r7, #24
 810ea06:	46bd      	mov	sp, r7
 810ea08:	bd80      	pop	{r7, pc}
 810ea0a:	bf00      	nop
 810ea0c:	08117844 	.word	0x08117844
 810ea10:	08117998 	.word	0x08117998
 810ea14:	081178d0 	.word	0x081178d0

0810ea18 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 810ea18:	b480      	push	{r7}
 810ea1a:	b085      	sub	sp, #20
 810ea1c:	af00      	add	r7, sp, #0
 810ea1e:	60f8      	str	r0, [r7, #12]
 810ea20:	60b9      	str	r1, [r7, #8]
 810ea22:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 810ea24:	68bb      	ldr	r3, [r7, #8]
 810ea26:	681a      	ldr	r2, [r3, #0]
 810ea28:	68fb      	ldr	r3, [r7, #12]
 810ea2a:	3308      	adds	r3, #8
 810ea2c:	681b      	ldr	r3, [r3, #0]
 810ea2e:	429a      	cmp	r2, r3
 810ea30:	d00a      	beq.n	810ea48 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 810ea32:	68bb      	ldr	r3, [r7, #8]
 810ea34:	2b00      	cmp	r3, #0
 810ea36:	d002      	beq.n	810ea3e <netif_do_set_netmask+0x26>
 810ea38:	68bb      	ldr	r3, [r7, #8]
 810ea3a:	681b      	ldr	r3, [r3, #0]
 810ea3c:	e000      	b.n	810ea40 <netif_do_set_netmask+0x28>
 810ea3e:	2300      	movs	r3, #0
 810ea40:	68fa      	ldr	r2, [r7, #12]
 810ea42:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 810ea44:	2301      	movs	r3, #1
 810ea46:	e000      	b.n	810ea4a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 810ea48:	2300      	movs	r3, #0
}
 810ea4a:	4618      	mov	r0, r3
 810ea4c:	3714      	adds	r7, #20
 810ea4e:	46bd      	mov	sp, r7
 810ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea54:	4770      	bx	lr

0810ea56 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 810ea56:	b480      	push	{r7}
 810ea58:	b085      	sub	sp, #20
 810ea5a:	af00      	add	r7, sp, #0
 810ea5c:	60f8      	str	r0, [r7, #12]
 810ea5e:	60b9      	str	r1, [r7, #8]
 810ea60:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 810ea62:	68bb      	ldr	r3, [r7, #8]
 810ea64:	681a      	ldr	r2, [r3, #0]
 810ea66:	68fb      	ldr	r3, [r7, #12]
 810ea68:	330c      	adds	r3, #12
 810ea6a:	681b      	ldr	r3, [r3, #0]
 810ea6c:	429a      	cmp	r2, r3
 810ea6e:	d00a      	beq.n	810ea86 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 810ea70:	68bb      	ldr	r3, [r7, #8]
 810ea72:	2b00      	cmp	r3, #0
 810ea74:	d002      	beq.n	810ea7c <netif_do_set_gw+0x26>
 810ea76:	68bb      	ldr	r3, [r7, #8]
 810ea78:	681b      	ldr	r3, [r3, #0]
 810ea7a:	e000      	b.n	810ea7e <netif_do_set_gw+0x28>
 810ea7c:	2300      	movs	r3, #0
 810ea7e:	68fa      	ldr	r2, [r7, #12]
 810ea80:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 810ea82:	2301      	movs	r3, #1
 810ea84:	e000      	b.n	810ea88 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 810ea86:	2300      	movs	r3, #0
}
 810ea88:	4618      	mov	r0, r3
 810ea8a:	3714      	adds	r7, #20
 810ea8c:	46bd      	mov	sp, r7
 810ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea92:	4770      	bx	lr

0810ea94 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 810ea94:	b580      	push	{r7, lr}
 810ea96:	b088      	sub	sp, #32
 810ea98:	af00      	add	r7, sp, #0
 810ea9a:	60f8      	str	r0, [r7, #12]
 810ea9c:	60b9      	str	r1, [r7, #8]
 810ea9e:	607a      	str	r2, [r7, #4]
 810eaa0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 810eaa2:	2300      	movs	r3, #0
 810eaa4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 810eaa6:	2300      	movs	r3, #0
 810eaa8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 810eaaa:	68bb      	ldr	r3, [r7, #8]
 810eaac:	2b00      	cmp	r3, #0
 810eaae:	d101      	bne.n	810eab4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 810eab0:	4b1c      	ldr	r3, [pc, #112]	@ (810eb24 <netif_set_addr+0x90>)
 810eab2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 810eab4:	687b      	ldr	r3, [r7, #4]
 810eab6:	2b00      	cmp	r3, #0
 810eab8:	d101      	bne.n	810eabe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 810eaba:	4b1a      	ldr	r3, [pc, #104]	@ (810eb24 <netif_set_addr+0x90>)
 810eabc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 810eabe:	683b      	ldr	r3, [r7, #0]
 810eac0:	2b00      	cmp	r3, #0
 810eac2:	d101      	bne.n	810eac8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 810eac4:	4b17      	ldr	r3, [pc, #92]	@ (810eb24 <netif_set_addr+0x90>)
 810eac6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 810eac8:	68bb      	ldr	r3, [r7, #8]
 810eaca:	2b00      	cmp	r3, #0
 810eacc:	d003      	beq.n	810ead6 <netif_set_addr+0x42>
 810eace:	68bb      	ldr	r3, [r7, #8]
 810ead0:	681b      	ldr	r3, [r3, #0]
 810ead2:	2b00      	cmp	r3, #0
 810ead4:	d101      	bne.n	810eada <netif_set_addr+0x46>
 810ead6:	2301      	movs	r3, #1
 810ead8:	e000      	b.n	810eadc <netif_set_addr+0x48>
 810eada:	2300      	movs	r3, #0
 810eadc:	617b      	str	r3, [r7, #20]
  if (remove) {
 810eade:	697b      	ldr	r3, [r7, #20]
 810eae0:	2b00      	cmp	r3, #0
 810eae2:	d006      	beq.n	810eaf2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 810eae4:	f107 0310 	add.w	r3, r7, #16
 810eae8:	461a      	mov	r2, r3
 810eaea:	68b9      	ldr	r1, [r7, #8]
 810eaec:	68f8      	ldr	r0, [r7, #12]
 810eaee:	f7ff ff49 	bl	810e984 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 810eaf2:	69fa      	ldr	r2, [r7, #28]
 810eaf4:	6879      	ldr	r1, [r7, #4]
 810eaf6:	68f8      	ldr	r0, [r7, #12]
 810eaf8:	f7ff ff8e 	bl	810ea18 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 810eafc:	69ba      	ldr	r2, [r7, #24]
 810eafe:	6839      	ldr	r1, [r7, #0]
 810eb00:	68f8      	ldr	r0, [r7, #12]
 810eb02:	f7ff ffa8 	bl	810ea56 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 810eb06:	697b      	ldr	r3, [r7, #20]
 810eb08:	2b00      	cmp	r3, #0
 810eb0a:	d106      	bne.n	810eb1a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 810eb0c:	f107 0310 	add.w	r3, r7, #16
 810eb10:	461a      	mov	r2, r3
 810eb12:	68b9      	ldr	r1, [r7, #8]
 810eb14:	68f8      	ldr	r0, [r7, #12]
 810eb16:	f7ff ff35 	bl	810e984 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 810eb1a:	bf00      	nop
 810eb1c:	3720      	adds	r7, #32
 810eb1e:	46bd      	mov	sp, r7
 810eb20:	bd80      	pop	{r7, pc}
 810eb22:	bf00      	nop
 810eb24:	08119b3c 	.word	0x08119b3c

0810eb28 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 810eb28:	b480      	push	{r7}
 810eb2a:	b083      	sub	sp, #12
 810eb2c:	af00      	add	r7, sp, #0
 810eb2e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 810eb30:	4a04      	ldr	r2, [pc, #16]	@ (810eb44 <netif_set_default+0x1c>)
 810eb32:	687b      	ldr	r3, [r7, #4]
 810eb34:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 810eb36:	bf00      	nop
 810eb38:	370c      	adds	r7, #12
 810eb3a:	46bd      	mov	sp, r7
 810eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eb40:	4770      	bx	lr
 810eb42:	bf00      	nop
 810eb44:	10011c40 	.word	0x10011c40

0810eb48 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 810eb48:	b580      	push	{r7, lr}
 810eb4a:	b082      	sub	sp, #8
 810eb4c:	af00      	add	r7, sp, #0
 810eb4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 810eb50:	687b      	ldr	r3, [r7, #4]
 810eb52:	2b00      	cmp	r3, #0
 810eb54:	d107      	bne.n	810eb66 <netif_set_up+0x1e>
 810eb56:	4b0f      	ldr	r3, [pc, #60]	@ (810eb94 <netif_set_up+0x4c>)
 810eb58:	f44f 7254 	mov.w	r2, #848	@ 0x350
 810eb5c:	490e      	ldr	r1, [pc, #56]	@ (810eb98 <netif_set_up+0x50>)
 810eb5e:	480f      	ldr	r0, [pc, #60]	@ (810eb9c <netif_set_up+0x54>)
 810eb60:	f007 f90e 	bl	8115d80 <iprintf>
 810eb64:	e013      	b.n	810eb8e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 810eb66:	687b      	ldr	r3, [r7, #4]
 810eb68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810eb6c:	f003 0301 	and.w	r3, r3, #1
 810eb70:	2b00      	cmp	r3, #0
 810eb72:	d10c      	bne.n	810eb8e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 810eb74:	687b      	ldr	r3, [r7, #4]
 810eb76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810eb7a:	f043 0301 	orr.w	r3, r3, #1
 810eb7e:	b2da      	uxtb	r2, r3
 810eb80:	687b      	ldr	r3, [r7, #4]
 810eb82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 810eb86:	2103      	movs	r1, #3
 810eb88:	6878      	ldr	r0, [r7, #4]
 810eb8a:	f000 f809 	bl	810eba0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 810eb8e:	3708      	adds	r7, #8
 810eb90:	46bd      	mov	sp, r7
 810eb92:	bd80      	pop	{r7, pc}
 810eb94:	08117844 	.word	0x08117844
 810eb98:	08117a08 	.word	0x08117a08
 810eb9c:	081178d0 	.word	0x081178d0

0810eba0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 810eba0:	b580      	push	{r7, lr}
 810eba2:	b082      	sub	sp, #8
 810eba4:	af00      	add	r7, sp, #0
 810eba6:	6078      	str	r0, [r7, #4]
 810eba8:	460b      	mov	r3, r1
 810ebaa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 810ebac:	687b      	ldr	r3, [r7, #4]
 810ebae:	2b00      	cmp	r3, #0
 810ebb0:	d106      	bne.n	810ebc0 <netif_issue_reports+0x20>
 810ebb2:	4b18      	ldr	r3, [pc, #96]	@ (810ec14 <netif_issue_reports+0x74>)
 810ebb4:	f240 326d 	movw	r2, #877	@ 0x36d
 810ebb8:	4917      	ldr	r1, [pc, #92]	@ (810ec18 <netif_issue_reports+0x78>)
 810ebba:	4818      	ldr	r0, [pc, #96]	@ (810ec1c <netif_issue_reports+0x7c>)
 810ebbc:	f007 f8e0 	bl	8115d80 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 810ebc0:	687b      	ldr	r3, [r7, #4]
 810ebc2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810ebc6:	f003 0304 	and.w	r3, r3, #4
 810ebca:	2b00      	cmp	r3, #0
 810ebcc:	d01e      	beq.n	810ec0c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 810ebce:	687b      	ldr	r3, [r7, #4]
 810ebd0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810ebd4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 810ebd8:	2b00      	cmp	r3, #0
 810ebda:	d017      	beq.n	810ec0c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 810ebdc:	78fb      	ldrb	r3, [r7, #3]
 810ebde:	f003 0301 	and.w	r3, r3, #1
 810ebe2:	2b00      	cmp	r3, #0
 810ebe4:	d013      	beq.n	810ec0e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 810ebe6:	687b      	ldr	r3, [r7, #4]
 810ebe8:	3304      	adds	r3, #4
 810ebea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 810ebec:	2b00      	cmp	r3, #0
 810ebee:	d00e      	beq.n	810ec0e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 810ebf0:	687b      	ldr	r3, [r7, #4]
 810ebf2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810ebf6:	f003 0308 	and.w	r3, r3, #8
 810ebfa:	2b00      	cmp	r3, #0
 810ebfc:	d007      	beq.n	810ec0e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 810ebfe:	687b      	ldr	r3, [r7, #4]
 810ec00:	3304      	adds	r3, #4
 810ec02:	4619      	mov	r1, r3
 810ec04:	6878      	ldr	r0, [r7, #4]
 810ec06:	f7fd fc31 	bl	810c46c <etharp_request>
 810ec0a:	e000      	b.n	810ec0e <netif_issue_reports+0x6e>
    return;
 810ec0c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 810ec0e:	3708      	adds	r7, #8
 810ec10:	46bd      	mov	sp, r7
 810ec12:	bd80      	pop	{r7, pc}
 810ec14:	08117844 	.word	0x08117844
 810ec18:	08117a24 	.word	0x08117a24
 810ec1c:	081178d0 	.word	0x081178d0

0810ec20 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 810ec20:	b580      	push	{r7, lr}
 810ec22:	b082      	sub	sp, #8
 810ec24:	af00      	add	r7, sp, #0
 810ec26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 810ec28:	687b      	ldr	r3, [r7, #4]
 810ec2a:	2b00      	cmp	r3, #0
 810ec2c:	d107      	bne.n	810ec3e <netif_set_down+0x1e>
 810ec2e:	4b12      	ldr	r3, [pc, #72]	@ (810ec78 <netif_set_down+0x58>)
 810ec30:	f240 329b 	movw	r2, #923	@ 0x39b
 810ec34:	4911      	ldr	r1, [pc, #68]	@ (810ec7c <netif_set_down+0x5c>)
 810ec36:	4812      	ldr	r0, [pc, #72]	@ (810ec80 <netif_set_down+0x60>)
 810ec38:	f007 f8a2 	bl	8115d80 <iprintf>
 810ec3c:	e019      	b.n	810ec72 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 810ec3e:	687b      	ldr	r3, [r7, #4]
 810ec40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810ec44:	f003 0301 	and.w	r3, r3, #1
 810ec48:	2b00      	cmp	r3, #0
 810ec4a:	d012      	beq.n	810ec72 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 810ec4c:	687b      	ldr	r3, [r7, #4]
 810ec4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810ec52:	f023 0301 	bic.w	r3, r3, #1
 810ec56:	b2da      	uxtb	r2, r3
 810ec58:	687b      	ldr	r3, [r7, #4]
 810ec5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 810ec5e:	687b      	ldr	r3, [r7, #4]
 810ec60:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810ec64:	f003 0308 	and.w	r3, r3, #8
 810ec68:	2b00      	cmp	r3, #0
 810ec6a:	d002      	beq.n	810ec72 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 810ec6c:	6878      	ldr	r0, [r7, #4]
 810ec6e:	f7fc ffbb 	bl	810bbe8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 810ec72:	3708      	adds	r7, #8
 810ec74:	46bd      	mov	sp, r7
 810ec76:	bd80      	pop	{r7, pc}
 810ec78:	08117844 	.word	0x08117844
 810ec7c:	08117a48 	.word	0x08117a48
 810ec80:	081178d0 	.word	0x081178d0

0810ec84 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 810ec84:	b580      	push	{r7, lr}
 810ec86:	b082      	sub	sp, #8
 810ec88:	af00      	add	r7, sp, #0
 810ec8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 810ec8c:	687b      	ldr	r3, [r7, #4]
 810ec8e:	2b00      	cmp	r3, #0
 810ec90:	d107      	bne.n	810eca2 <netif_set_link_up+0x1e>
 810ec92:	4b13      	ldr	r3, [pc, #76]	@ (810ece0 <netif_set_link_up+0x5c>)
 810ec94:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 810ec98:	4912      	ldr	r1, [pc, #72]	@ (810ece4 <netif_set_link_up+0x60>)
 810ec9a:	4813      	ldr	r0, [pc, #76]	@ (810ece8 <netif_set_link_up+0x64>)
 810ec9c:	f007 f870 	bl	8115d80 <iprintf>
 810eca0:	e01b      	b.n	810ecda <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 810eca2:	687b      	ldr	r3, [r7, #4]
 810eca4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810eca8:	f003 0304 	and.w	r3, r3, #4
 810ecac:	2b00      	cmp	r3, #0
 810ecae:	d114      	bne.n	810ecda <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 810ecb0:	687b      	ldr	r3, [r7, #4]
 810ecb2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810ecb6:	f043 0304 	orr.w	r3, r3, #4
 810ecba:	b2da      	uxtb	r2, r3
 810ecbc:	687b      	ldr	r3, [r7, #4]
 810ecbe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 810ecc2:	2103      	movs	r1, #3
 810ecc4:	6878      	ldr	r0, [r7, #4]
 810ecc6:	f7ff ff6b 	bl	810eba0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 810ecca:	687b      	ldr	r3, [r7, #4]
 810eccc:	69db      	ldr	r3, [r3, #28]
 810ecce:	2b00      	cmp	r3, #0
 810ecd0:	d003      	beq.n	810ecda <netif_set_link_up+0x56>
 810ecd2:	687b      	ldr	r3, [r7, #4]
 810ecd4:	69db      	ldr	r3, [r3, #28]
 810ecd6:	6878      	ldr	r0, [r7, #4]
 810ecd8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 810ecda:	3708      	adds	r7, #8
 810ecdc:	46bd      	mov	sp, r7
 810ecde:	bd80      	pop	{r7, pc}
 810ece0:	08117844 	.word	0x08117844
 810ece4:	08117a68 	.word	0x08117a68
 810ece8:	081178d0 	.word	0x081178d0

0810ecec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 810ecec:	b580      	push	{r7, lr}
 810ecee:	b082      	sub	sp, #8
 810ecf0:	af00      	add	r7, sp, #0
 810ecf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 810ecf4:	687b      	ldr	r3, [r7, #4]
 810ecf6:	2b00      	cmp	r3, #0
 810ecf8:	d107      	bne.n	810ed0a <netif_set_link_down+0x1e>
 810ecfa:	4b11      	ldr	r3, [pc, #68]	@ (810ed40 <netif_set_link_down+0x54>)
 810ecfc:	f240 4206 	movw	r2, #1030	@ 0x406
 810ed00:	4910      	ldr	r1, [pc, #64]	@ (810ed44 <netif_set_link_down+0x58>)
 810ed02:	4811      	ldr	r0, [pc, #68]	@ (810ed48 <netif_set_link_down+0x5c>)
 810ed04:	f007 f83c 	bl	8115d80 <iprintf>
 810ed08:	e017      	b.n	810ed3a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 810ed0a:	687b      	ldr	r3, [r7, #4]
 810ed0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810ed10:	f003 0304 	and.w	r3, r3, #4
 810ed14:	2b00      	cmp	r3, #0
 810ed16:	d010      	beq.n	810ed3a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 810ed18:	687b      	ldr	r3, [r7, #4]
 810ed1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810ed1e:	f023 0304 	bic.w	r3, r3, #4
 810ed22:	b2da      	uxtb	r2, r3
 810ed24:	687b      	ldr	r3, [r7, #4]
 810ed26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 810ed2a:	687b      	ldr	r3, [r7, #4]
 810ed2c:	69db      	ldr	r3, [r3, #28]
 810ed2e:	2b00      	cmp	r3, #0
 810ed30:	d003      	beq.n	810ed3a <netif_set_link_down+0x4e>
 810ed32:	687b      	ldr	r3, [r7, #4]
 810ed34:	69db      	ldr	r3, [r3, #28]
 810ed36:	6878      	ldr	r0, [r7, #4]
 810ed38:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 810ed3a:	3708      	adds	r7, #8
 810ed3c:	46bd      	mov	sp, r7
 810ed3e:	bd80      	pop	{r7, pc}
 810ed40:	08117844 	.word	0x08117844
 810ed44:	08117a8c 	.word	0x08117a8c
 810ed48:	081178d0 	.word	0x081178d0

0810ed4c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 810ed4c:	b480      	push	{r7}
 810ed4e:	b083      	sub	sp, #12
 810ed50:	af00      	add	r7, sp, #0
 810ed52:	6078      	str	r0, [r7, #4]
 810ed54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 810ed56:	687b      	ldr	r3, [r7, #4]
 810ed58:	2b00      	cmp	r3, #0
 810ed5a:	d002      	beq.n	810ed62 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 810ed5c:	687b      	ldr	r3, [r7, #4]
 810ed5e:	683a      	ldr	r2, [r7, #0]
 810ed60:	61da      	str	r2, [r3, #28]
  }
}
 810ed62:	bf00      	nop
 810ed64:	370c      	adds	r7, #12
 810ed66:	46bd      	mov	sp, r7
 810ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ed6c:	4770      	bx	lr

0810ed6e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 810ed6e:	b480      	push	{r7}
 810ed70:	b085      	sub	sp, #20
 810ed72:	af00      	add	r7, sp, #0
 810ed74:	60f8      	str	r0, [r7, #12]
 810ed76:	60b9      	str	r1, [r7, #8]
 810ed78:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 810ed7a:	f06f 030b 	mvn.w	r3, #11
}
 810ed7e:	4618      	mov	r0, r3
 810ed80:	3714      	adds	r7, #20
 810ed82:	46bd      	mov	sp, r7
 810ed84:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ed88:	4770      	bx	lr
	...

0810ed8c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 810ed8c:	b480      	push	{r7}
 810ed8e:	b085      	sub	sp, #20
 810ed90:	af00      	add	r7, sp, #0
 810ed92:	4603      	mov	r3, r0
 810ed94:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 810ed96:	79fb      	ldrb	r3, [r7, #7]
 810ed98:	2b00      	cmp	r3, #0
 810ed9a:	d013      	beq.n	810edc4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 810ed9c:	4b0d      	ldr	r3, [pc, #52]	@ (810edd4 <netif_get_by_index+0x48>)
 810ed9e:	681b      	ldr	r3, [r3, #0]
 810eda0:	60fb      	str	r3, [r7, #12]
 810eda2:	e00c      	b.n	810edbe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 810eda4:	68fb      	ldr	r3, [r7, #12]
 810eda6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810edaa:	3301      	adds	r3, #1
 810edac:	b2db      	uxtb	r3, r3
 810edae:	79fa      	ldrb	r2, [r7, #7]
 810edb0:	429a      	cmp	r2, r3
 810edb2:	d101      	bne.n	810edb8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 810edb4:	68fb      	ldr	r3, [r7, #12]
 810edb6:	e006      	b.n	810edc6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 810edb8:	68fb      	ldr	r3, [r7, #12]
 810edba:	681b      	ldr	r3, [r3, #0]
 810edbc:	60fb      	str	r3, [r7, #12]
 810edbe:	68fb      	ldr	r3, [r7, #12]
 810edc0:	2b00      	cmp	r3, #0
 810edc2:	d1ef      	bne.n	810eda4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 810edc4:	2300      	movs	r3, #0
}
 810edc6:	4618      	mov	r0, r3
 810edc8:	3714      	adds	r7, #20
 810edca:	46bd      	mov	sp, r7
 810edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810edd0:	4770      	bx	lr
 810edd2:	bf00      	nop
 810edd4:	10011c3c 	.word	0x10011c3c

0810edd8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 810edd8:	b580      	push	{r7, lr}
 810edda:	b082      	sub	sp, #8
 810eddc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 810edde:	f000 fed1 	bl	810fb84 <sys_arch_protect>
 810ede2:	6038      	str	r0, [r7, #0]
 810ede4:	4b0d      	ldr	r3, [pc, #52]	@ (810ee1c <pbuf_free_ooseq+0x44>)
 810ede6:	2200      	movs	r2, #0
 810ede8:	701a      	strb	r2, [r3, #0]
 810edea:	6838      	ldr	r0, [r7, #0]
 810edec:	f000 fed8 	bl	810fba0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 810edf0:	4b0b      	ldr	r3, [pc, #44]	@ (810ee20 <pbuf_free_ooseq+0x48>)
 810edf2:	681b      	ldr	r3, [r3, #0]
 810edf4:	607b      	str	r3, [r7, #4]
 810edf6:	e00a      	b.n	810ee0e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 810edf8:	687b      	ldr	r3, [r7, #4]
 810edfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810edfc:	2b00      	cmp	r3, #0
 810edfe:	d003      	beq.n	810ee08 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 810ee00:	6878      	ldr	r0, [r7, #4]
 810ee02:	f002 fa69 	bl	81112d8 <tcp_free_ooseq>
      return;
 810ee06:	e005      	b.n	810ee14 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 810ee08:	687b      	ldr	r3, [r7, #4]
 810ee0a:	68db      	ldr	r3, [r3, #12]
 810ee0c:	607b      	str	r3, [r7, #4]
 810ee0e:	687b      	ldr	r3, [r7, #4]
 810ee10:	2b00      	cmp	r3, #0
 810ee12:	d1f1      	bne.n	810edf8 <pbuf_free_ooseq+0x20>
    }
  }
}
 810ee14:	3708      	adds	r7, #8
 810ee16:	46bd      	mov	sp, r7
 810ee18:	bd80      	pop	{r7, pc}
 810ee1a:	bf00      	nop
 810ee1c:	10011c45 	.word	0x10011c45
 810ee20:	10011c58 	.word	0x10011c58

0810ee24 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 810ee24:	b580      	push	{r7, lr}
 810ee26:	b082      	sub	sp, #8
 810ee28:	af00      	add	r7, sp, #0
 810ee2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 810ee2c:	f7ff ffd4 	bl	810edd8 <pbuf_free_ooseq>
}
 810ee30:	bf00      	nop
 810ee32:	3708      	adds	r7, #8
 810ee34:	46bd      	mov	sp, r7
 810ee36:	bd80      	pop	{r7, pc}

0810ee38 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 810ee38:	b580      	push	{r7, lr}
 810ee3a:	b082      	sub	sp, #8
 810ee3c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 810ee3e:	f000 fea1 	bl	810fb84 <sys_arch_protect>
 810ee42:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 810ee44:	4b0f      	ldr	r3, [pc, #60]	@ (810ee84 <pbuf_pool_is_empty+0x4c>)
 810ee46:	781b      	ldrb	r3, [r3, #0]
 810ee48:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 810ee4a:	4b0e      	ldr	r3, [pc, #56]	@ (810ee84 <pbuf_pool_is_empty+0x4c>)
 810ee4c:	2201      	movs	r2, #1
 810ee4e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 810ee50:	6878      	ldr	r0, [r7, #4]
 810ee52:	f000 fea5 	bl	810fba0 <sys_arch_unprotect>

  if (!queued) {
 810ee56:	78fb      	ldrb	r3, [r7, #3]
 810ee58:	2b00      	cmp	r3, #0
 810ee5a:	d10f      	bne.n	810ee7c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 810ee5c:	2100      	movs	r1, #0
 810ee5e:	480a      	ldr	r0, [pc, #40]	@ (810ee88 <pbuf_pool_is_empty+0x50>)
 810ee60:	f006 f900 	bl	8115064 <tcpip_try_callback>
 810ee64:	4603      	mov	r3, r0
 810ee66:	2b00      	cmp	r3, #0
 810ee68:	d008      	beq.n	810ee7c <pbuf_pool_is_empty+0x44>
 810ee6a:	f000 fe8b 	bl	810fb84 <sys_arch_protect>
 810ee6e:	6078      	str	r0, [r7, #4]
 810ee70:	4b04      	ldr	r3, [pc, #16]	@ (810ee84 <pbuf_pool_is_empty+0x4c>)
 810ee72:	2200      	movs	r2, #0
 810ee74:	701a      	strb	r2, [r3, #0]
 810ee76:	6878      	ldr	r0, [r7, #4]
 810ee78:	f000 fe92 	bl	810fba0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 810ee7c:	bf00      	nop
 810ee7e:	3708      	adds	r7, #8
 810ee80:	46bd      	mov	sp, r7
 810ee82:	bd80      	pop	{r7, pc}
 810ee84:	10011c45 	.word	0x10011c45
 810ee88:	0810ee25 	.word	0x0810ee25

0810ee8c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 810ee8c:	b480      	push	{r7}
 810ee8e:	b085      	sub	sp, #20
 810ee90:	af00      	add	r7, sp, #0
 810ee92:	60f8      	str	r0, [r7, #12]
 810ee94:	60b9      	str	r1, [r7, #8]
 810ee96:	4611      	mov	r1, r2
 810ee98:	461a      	mov	r2, r3
 810ee9a:	460b      	mov	r3, r1
 810ee9c:	80fb      	strh	r3, [r7, #6]
 810ee9e:	4613      	mov	r3, r2
 810eea0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 810eea2:	68fb      	ldr	r3, [r7, #12]
 810eea4:	2200      	movs	r2, #0
 810eea6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 810eea8:	68fb      	ldr	r3, [r7, #12]
 810eeaa:	68ba      	ldr	r2, [r7, #8]
 810eeac:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 810eeae:	68fb      	ldr	r3, [r7, #12]
 810eeb0:	88fa      	ldrh	r2, [r7, #6]
 810eeb2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 810eeb4:	68fb      	ldr	r3, [r7, #12]
 810eeb6:	88ba      	ldrh	r2, [r7, #4]
 810eeb8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 810eeba:	8b3b      	ldrh	r3, [r7, #24]
 810eebc:	b2da      	uxtb	r2, r3
 810eebe:	68fb      	ldr	r3, [r7, #12]
 810eec0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 810eec2:	68fb      	ldr	r3, [r7, #12]
 810eec4:	7f3a      	ldrb	r2, [r7, #28]
 810eec6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 810eec8:	68fb      	ldr	r3, [r7, #12]
 810eeca:	2201      	movs	r2, #1
 810eecc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 810eece:	68fb      	ldr	r3, [r7, #12]
 810eed0:	2200      	movs	r2, #0
 810eed2:	73da      	strb	r2, [r3, #15]
}
 810eed4:	bf00      	nop
 810eed6:	3714      	adds	r7, #20
 810eed8:	46bd      	mov	sp, r7
 810eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eede:	4770      	bx	lr

0810eee0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 810eee0:	b580      	push	{r7, lr}
 810eee2:	b08c      	sub	sp, #48	@ 0x30
 810eee4:	af02      	add	r7, sp, #8
 810eee6:	4603      	mov	r3, r0
 810eee8:	71fb      	strb	r3, [r7, #7]
 810eeea:	460b      	mov	r3, r1
 810eeec:	80bb      	strh	r3, [r7, #4]
 810eeee:	4613      	mov	r3, r2
 810eef0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 810eef2:	79fb      	ldrb	r3, [r7, #7]
 810eef4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 810eef6:	887b      	ldrh	r3, [r7, #2]
 810eef8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 810eefc:	f000 8082 	beq.w	810f004 <pbuf_alloc+0x124>
 810ef00:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 810ef04:	f300 80c9 	bgt.w	810f09a <pbuf_alloc+0x1ba>
 810ef08:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 810ef0c:	d010      	beq.n	810ef30 <pbuf_alloc+0x50>
 810ef0e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 810ef12:	f300 80c2 	bgt.w	810f09a <pbuf_alloc+0x1ba>
 810ef16:	2b01      	cmp	r3, #1
 810ef18:	d002      	beq.n	810ef20 <pbuf_alloc+0x40>
 810ef1a:	2b41      	cmp	r3, #65	@ 0x41
 810ef1c:	f040 80bd 	bne.w	810f09a <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 810ef20:	887a      	ldrh	r2, [r7, #2]
 810ef22:	88bb      	ldrh	r3, [r7, #4]
 810ef24:	4619      	mov	r1, r3
 810ef26:	2000      	movs	r0, #0
 810ef28:	f000 f8d2 	bl	810f0d0 <pbuf_alloc_reference>
 810ef2c:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 810ef2e:	e0be      	b.n	810f0ae <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 810ef30:	2300      	movs	r3, #0
 810ef32:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 810ef34:	2300      	movs	r3, #0
 810ef36:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 810ef38:	88bb      	ldrh	r3, [r7, #4]
 810ef3a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 810ef3c:	200c      	movs	r0, #12
 810ef3e:	f7ff fb99 	bl	810e674 <memp_malloc>
 810ef42:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 810ef44:	693b      	ldr	r3, [r7, #16]
 810ef46:	2b00      	cmp	r3, #0
 810ef48:	d109      	bne.n	810ef5e <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 810ef4a:	f7ff ff75 	bl	810ee38 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 810ef4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ef50:	2b00      	cmp	r3, #0
 810ef52:	d002      	beq.n	810ef5a <pbuf_alloc+0x7a>
            pbuf_free(p);
 810ef54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810ef56:	f000 faa7 	bl	810f4a8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 810ef5a:	2300      	movs	r3, #0
 810ef5c:	e0a8      	b.n	810f0b0 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 810ef5e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810ef60:	3303      	adds	r3, #3
 810ef62:	b29b      	uxth	r3, r3
 810ef64:	f023 0303 	bic.w	r3, r3, #3
 810ef68:	b29b      	uxth	r3, r3
 810ef6a:	f5c3 63bd 	rsb	r3, r3, #1512	@ 0x5e8
 810ef6e:	3304      	adds	r3, #4
 810ef70:	b29b      	uxth	r3, r3
 810ef72:	8b7a      	ldrh	r2, [r7, #26]
 810ef74:	4293      	cmp	r3, r2
 810ef76:	bf28      	it	cs
 810ef78:	4613      	movcs	r3, r2
 810ef7a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 810ef7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810ef7e:	3310      	adds	r3, #16
 810ef80:	693a      	ldr	r2, [r7, #16]
 810ef82:	4413      	add	r3, r2
 810ef84:	3303      	adds	r3, #3
 810ef86:	f023 0303 	bic.w	r3, r3, #3
 810ef8a:	4618      	mov	r0, r3
 810ef8c:	89f9      	ldrh	r1, [r7, #14]
 810ef8e:	8b7a      	ldrh	r2, [r7, #26]
 810ef90:	2300      	movs	r3, #0
 810ef92:	9301      	str	r3, [sp, #4]
 810ef94:	887b      	ldrh	r3, [r7, #2]
 810ef96:	9300      	str	r3, [sp, #0]
 810ef98:	460b      	mov	r3, r1
 810ef9a:	4601      	mov	r1, r0
 810ef9c:	6938      	ldr	r0, [r7, #16]
 810ef9e:	f7ff ff75 	bl	810ee8c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 810efa2:	693b      	ldr	r3, [r7, #16]
 810efa4:	685b      	ldr	r3, [r3, #4]
 810efa6:	f003 0303 	and.w	r3, r3, #3
 810efaa:	2b00      	cmp	r3, #0
 810efac:	d006      	beq.n	810efbc <pbuf_alloc+0xdc>
 810efae:	4b42      	ldr	r3, [pc, #264]	@ (810f0b8 <pbuf_alloc+0x1d8>)
 810efb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810efb4:	4941      	ldr	r1, [pc, #260]	@ (810f0bc <pbuf_alloc+0x1dc>)
 810efb6:	4842      	ldr	r0, [pc, #264]	@ (810f0c0 <pbuf_alloc+0x1e0>)
 810efb8:	f006 fee2 	bl	8115d80 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 810efbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810efbe:	3303      	adds	r3, #3
 810efc0:	f023 0303 	bic.w	r3, r3, #3
 810efc4:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 810efc8:	4293      	cmp	r3, r2
 810efca:	d106      	bne.n	810efda <pbuf_alloc+0xfa>
 810efcc:	4b3a      	ldr	r3, [pc, #232]	@ (810f0b8 <pbuf_alloc+0x1d8>)
 810efce:	f44f 7281 	mov.w	r2, #258	@ 0x102
 810efd2:	493c      	ldr	r1, [pc, #240]	@ (810f0c4 <pbuf_alloc+0x1e4>)
 810efd4:	483a      	ldr	r0, [pc, #232]	@ (810f0c0 <pbuf_alloc+0x1e0>)
 810efd6:	f006 fed3 	bl	8115d80 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 810efda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810efdc:	2b00      	cmp	r3, #0
 810efde:	d102      	bne.n	810efe6 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 810efe0:	693b      	ldr	r3, [r7, #16]
 810efe2:	627b      	str	r3, [r7, #36]	@ 0x24
 810efe4:	e002      	b.n	810efec <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 810efe6:	69fb      	ldr	r3, [r7, #28]
 810efe8:	693a      	ldr	r2, [r7, #16]
 810efea:	601a      	str	r2, [r3, #0]
        }
        last = q;
 810efec:	693b      	ldr	r3, [r7, #16]
 810efee:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 810eff0:	8b7a      	ldrh	r2, [r7, #26]
 810eff2:	89fb      	ldrh	r3, [r7, #14]
 810eff4:	1ad3      	subs	r3, r2, r3
 810eff6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 810eff8:	2300      	movs	r3, #0
 810effa:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 810effc:	8b7b      	ldrh	r3, [r7, #26]
 810effe:	2b00      	cmp	r3, #0
 810f000:	d19c      	bne.n	810ef3c <pbuf_alloc+0x5c>
      break;
 810f002:	e054      	b.n	810f0ae <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 810f004:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810f006:	3303      	adds	r3, #3
 810f008:	b29b      	uxth	r3, r3
 810f00a:	f023 0303 	bic.w	r3, r3, #3
 810f00e:	b29a      	uxth	r2, r3
 810f010:	88bb      	ldrh	r3, [r7, #4]
 810f012:	3303      	adds	r3, #3
 810f014:	b29b      	uxth	r3, r3
 810f016:	f023 0303 	bic.w	r3, r3, #3
 810f01a:	b29b      	uxth	r3, r3
 810f01c:	4413      	add	r3, r2
 810f01e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 810f020:	8b3b      	ldrh	r3, [r7, #24]
 810f022:	3310      	adds	r3, #16
 810f024:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 810f026:	8b3a      	ldrh	r2, [r7, #24]
 810f028:	88bb      	ldrh	r3, [r7, #4]
 810f02a:	3303      	adds	r3, #3
 810f02c:	f023 0303 	bic.w	r3, r3, #3
 810f030:	429a      	cmp	r2, r3
 810f032:	d306      	bcc.n	810f042 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 810f034:	88bb      	ldrh	r3, [r7, #4]
 810f036:	3303      	adds	r3, #3
 810f038:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 810f03c:	697a      	ldr	r2, [r7, #20]
 810f03e:	429a      	cmp	r2, r3
 810f040:	d201      	bcs.n	810f046 <pbuf_alloc+0x166>
        return NULL;
 810f042:	2300      	movs	r3, #0
 810f044:	e034      	b.n	810f0b0 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 810f046:	6978      	ldr	r0, [r7, #20]
 810f048:	f7ff f976 	bl	810e338 <mem_malloc>
 810f04c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 810f04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f050:	2b00      	cmp	r3, #0
 810f052:	d101      	bne.n	810f058 <pbuf_alloc+0x178>
        return NULL;
 810f054:	2300      	movs	r3, #0
 810f056:	e02b      	b.n	810f0b0 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 810f058:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 810f05a:	3310      	adds	r3, #16
 810f05c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810f05e:	4413      	add	r3, r2
 810f060:	3303      	adds	r3, #3
 810f062:	f023 0303 	bic.w	r3, r3, #3
 810f066:	4618      	mov	r0, r3
 810f068:	88b9      	ldrh	r1, [r7, #4]
 810f06a:	88ba      	ldrh	r2, [r7, #4]
 810f06c:	2300      	movs	r3, #0
 810f06e:	9301      	str	r3, [sp, #4]
 810f070:	887b      	ldrh	r3, [r7, #2]
 810f072:	9300      	str	r3, [sp, #0]
 810f074:	460b      	mov	r3, r1
 810f076:	4601      	mov	r1, r0
 810f078:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810f07a:	f7ff ff07 	bl	810ee8c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 810f07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f080:	685b      	ldr	r3, [r3, #4]
 810f082:	f003 0303 	and.w	r3, r3, #3
 810f086:	2b00      	cmp	r3, #0
 810f088:	d010      	beq.n	810f0ac <pbuf_alloc+0x1cc>
 810f08a:	4b0b      	ldr	r3, [pc, #44]	@ (810f0b8 <pbuf_alloc+0x1d8>)
 810f08c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 810f090:	490d      	ldr	r1, [pc, #52]	@ (810f0c8 <pbuf_alloc+0x1e8>)
 810f092:	480b      	ldr	r0, [pc, #44]	@ (810f0c0 <pbuf_alloc+0x1e0>)
 810f094:	f006 fe74 	bl	8115d80 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 810f098:	e008      	b.n	810f0ac <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 810f09a:	4b07      	ldr	r3, [pc, #28]	@ (810f0b8 <pbuf_alloc+0x1d8>)
 810f09c:	f240 1227 	movw	r2, #295	@ 0x127
 810f0a0:	490a      	ldr	r1, [pc, #40]	@ (810f0cc <pbuf_alloc+0x1ec>)
 810f0a2:	4807      	ldr	r0, [pc, #28]	@ (810f0c0 <pbuf_alloc+0x1e0>)
 810f0a4:	f006 fe6c 	bl	8115d80 <iprintf>
      return NULL;
 810f0a8:	2300      	movs	r3, #0
 810f0aa:	e001      	b.n	810f0b0 <pbuf_alloc+0x1d0>
      break;
 810f0ac:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 810f0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810f0b0:	4618      	mov	r0, r3
 810f0b2:	3728      	adds	r7, #40	@ 0x28
 810f0b4:	46bd      	mov	sp, r7
 810f0b6:	bd80      	pop	{r7, pc}
 810f0b8:	08117ab0 	.word	0x08117ab0
 810f0bc:	08117b20 	.word	0x08117b20
 810f0c0:	08117b50 	.word	0x08117b50
 810f0c4:	08117b78 	.word	0x08117b78
 810f0c8:	08117bac 	.word	0x08117bac
 810f0cc:	08117bd8 	.word	0x08117bd8

0810f0d0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 810f0d0:	b580      	push	{r7, lr}
 810f0d2:	b086      	sub	sp, #24
 810f0d4:	af02      	add	r7, sp, #8
 810f0d6:	6078      	str	r0, [r7, #4]
 810f0d8:	460b      	mov	r3, r1
 810f0da:	807b      	strh	r3, [r7, #2]
 810f0dc:	4613      	mov	r3, r2
 810f0de:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 810f0e0:	883b      	ldrh	r3, [r7, #0]
 810f0e2:	2b41      	cmp	r3, #65	@ 0x41
 810f0e4:	d009      	beq.n	810f0fa <pbuf_alloc_reference+0x2a>
 810f0e6:	883b      	ldrh	r3, [r7, #0]
 810f0e8:	2b01      	cmp	r3, #1
 810f0ea:	d006      	beq.n	810f0fa <pbuf_alloc_reference+0x2a>
 810f0ec:	4b0f      	ldr	r3, [pc, #60]	@ (810f12c <pbuf_alloc_reference+0x5c>)
 810f0ee:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 810f0f2:	490f      	ldr	r1, [pc, #60]	@ (810f130 <pbuf_alloc_reference+0x60>)
 810f0f4:	480f      	ldr	r0, [pc, #60]	@ (810f134 <pbuf_alloc_reference+0x64>)
 810f0f6:	f006 fe43 	bl	8115d80 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 810f0fa:	200b      	movs	r0, #11
 810f0fc:	f7ff faba 	bl	810e674 <memp_malloc>
 810f100:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 810f102:	68fb      	ldr	r3, [r7, #12]
 810f104:	2b00      	cmp	r3, #0
 810f106:	d101      	bne.n	810f10c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 810f108:	2300      	movs	r3, #0
 810f10a:	e00b      	b.n	810f124 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 810f10c:	8879      	ldrh	r1, [r7, #2]
 810f10e:	887a      	ldrh	r2, [r7, #2]
 810f110:	2300      	movs	r3, #0
 810f112:	9301      	str	r3, [sp, #4]
 810f114:	883b      	ldrh	r3, [r7, #0]
 810f116:	9300      	str	r3, [sp, #0]
 810f118:	460b      	mov	r3, r1
 810f11a:	6879      	ldr	r1, [r7, #4]
 810f11c:	68f8      	ldr	r0, [r7, #12]
 810f11e:	f7ff feb5 	bl	810ee8c <pbuf_init_alloced_pbuf>
  return p;
 810f122:	68fb      	ldr	r3, [r7, #12]
}
 810f124:	4618      	mov	r0, r3
 810f126:	3710      	adds	r7, #16
 810f128:	46bd      	mov	sp, r7
 810f12a:	bd80      	pop	{r7, pc}
 810f12c:	08117ab0 	.word	0x08117ab0
 810f130:	08117bf4 	.word	0x08117bf4
 810f134:	08117b50 	.word	0x08117b50

0810f138 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 810f138:	b580      	push	{r7, lr}
 810f13a:	b088      	sub	sp, #32
 810f13c:	af02      	add	r7, sp, #8
 810f13e:	607b      	str	r3, [r7, #4]
 810f140:	4603      	mov	r3, r0
 810f142:	73fb      	strb	r3, [r7, #15]
 810f144:	460b      	mov	r3, r1
 810f146:	81bb      	strh	r3, [r7, #12]
 810f148:	4613      	mov	r3, r2
 810f14a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 810f14c:	7bfb      	ldrb	r3, [r7, #15]
 810f14e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 810f150:	8a7b      	ldrh	r3, [r7, #18]
 810f152:	3303      	adds	r3, #3
 810f154:	f023 0203 	bic.w	r2, r3, #3
 810f158:	89bb      	ldrh	r3, [r7, #12]
 810f15a:	441a      	add	r2, r3
 810f15c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810f15e:	429a      	cmp	r2, r3
 810f160:	d901      	bls.n	810f166 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 810f162:	2300      	movs	r3, #0
 810f164:	e018      	b.n	810f198 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 810f166:	6a3b      	ldr	r3, [r7, #32]
 810f168:	2b00      	cmp	r3, #0
 810f16a:	d007      	beq.n	810f17c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 810f16c:	8a7b      	ldrh	r3, [r7, #18]
 810f16e:	3303      	adds	r3, #3
 810f170:	f023 0303 	bic.w	r3, r3, #3
 810f174:	6a3a      	ldr	r2, [r7, #32]
 810f176:	4413      	add	r3, r2
 810f178:	617b      	str	r3, [r7, #20]
 810f17a:	e001      	b.n	810f180 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 810f17c:	2300      	movs	r3, #0
 810f17e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 810f180:	6878      	ldr	r0, [r7, #4]
 810f182:	89b9      	ldrh	r1, [r7, #12]
 810f184:	89ba      	ldrh	r2, [r7, #12]
 810f186:	2302      	movs	r3, #2
 810f188:	9301      	str	r3, [sp, #4]
 810f18a:	897b      	ldrh	r3, [r7, #10]
 810f18c:	9300      	str	r3, [sp, #0]
 810f18e:	460b      	mov	r3, r1
 810f190:	6979      	ldr	r1, [r7, #20]
 810f192:	f7ff fe7b 	bl	810ee8c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 810f196:	687b      	ldr	r3, [r7, #4]
}
 810f198:	4618      	mov	r0, r3
 810f19a:	3718      	adds	r7, #24
 810f19c:	46bd      	mov	sp, r7
 810f19e:	bd80      	pop	{r7, pc}

0810f1a0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 810f1a0:	b580      	push	{r7, lr}
 810f1a2:	b084      	sub	sp, #16
 810f1a4:	af00      	add	r7, sp, #0
 810f1a6:	6078      	str	r0, [r7, #4]
 810f1a8:	460b      	mov	r3, r1
 810f1aa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 810f1ac:	687b      	ldr	r3, [r7, #4]
 810f1ae:	2b00      	cmp	r3, #0
 810f1b0:	d106      	bne.n	810f1c0 <pbuf_realloc+0x20>
 810f1b2:	4b39      	ldr	r3, [pc, #228]	@ (810f298 <pbuf_realloc+0xf8>)
 810f1b4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 810f1b8:	4938      	ldr	r1, [pc, #224]	@ (810f29c <pbuf_realloc+0xfc>)
 810f1ba:	4839      	ldr	r0, [pc, #228]	@ (810f2a0 <pbuf_realloc+0x100>)
 810f1bc:	f006 fde0 	bl	8115d80 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 810f1c0:	687b      	ldr	r3, [r7, #4]
 810f1c2:	891b      	ldrh	r3, [r3, #8]
 810f1c4:	887a      	ldrh	r2, [r7, #2]
 810f1c6:	429a      	cmp	r2, r3
 810f1c8:	d261      	bcs.n	810f28e <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 810f1ca:	687b      	ldr	r3, [r7, #4]
 810f1cc:	891a      	ldrh	r2, [r3, #8]
 810f1ce:	887b      	ldrh	r3, [r7, #2]
 810f1d0:	1ad3      	subs	r3, r2, r3
 810f1d2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 810f1d4:	887b      	ldrh	r3, [r7, #2]
 810f1d6:	817b      	strh	r3, [r7, #10]
  q = p;
 810f1d8:	687b      	ldr	r3, [r7, #4]
 810f1da:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 810f1dc:	e018      	b.n	810f210 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 810f1de:	68fb      	ldr	r3, [r7, #12]
 810f1e0:	895b      	ldrh	r3, [r3, #10]
 810f1e2:	897a      	ldrh	r2, [r7, #10]
 810f1e4:	1ad3      	subs	r3, r2, r3
 810f1e6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 810f1e8:	68fb      	ldr	r3, [r7, #12]
 810f1ea:	891a      	ldrh	r2, [r3, #8]
 810f1ec:	893b      	ldrh	r3, [r7, #8]
 810f1ee:	1ad3      	subs	r3, r2, r3
 810f1f0:	b29a      	uxth	r2, r3
 810f1f2:	68fb      	ldr	r3, [r7, #12]
 810f1f4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 810f1f6:	68fb      	ldr	r3, [r7, #12]
 810f1f8:	681b      	ldr	r3, [r3, #0]
 810f1fa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 810f1fc:	68fb      	ldr	r3, [r7, #12]
 810f1fe:	2b00      	cmp	r3, #0
 810f200:	d106      	bne.n	810f210 <pbuf_realloc+0x70>
 810f202:	4b25      	ldr	r3, [pc, #148]	@ (810f298 <pbuf_realloc+0xf8>)
 810f204:	f240 12af 	movw	r2, #431	@ 0x1af
 810f208:	4926      	ldr	r1, [pc, #152]	@ (810f2a4 <pbuf_realloc+0x104>)
 810f20a:	4825      	ldr	r0, [pc, #148]	@ (810f2a0 <pbuf_realloc+0x100>)
 810f20c:	f006 fdb8 	bl	8115d80 <iprintf>
  while (rem_len > q->len) {
 810f210:	68fb      	ldr	r3, [r7, #12]
 810f212:	895b      	ldrh	r3, [r3, #10]
 810f214:	897a      	ldrh	r2, [r7, #10]
 810f216:	429a      	cmp	r2, r3
 810f218:	d8e1      	bhi.n	810f1de <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 810f21a:	68fb      	ldr	r3, [r7, #12]
 810f21c:	7b1b      	ldrb	r3, [r3, #12]
 810f21e:	f003 030f 	and.w	r3, r3, #15
 810f222:	2b00      	cmp	r3, #0
 810f224:	d11f      	bne.n	810f266 <pbuf_realloc+0xc6>
 810f226:	68fb      	ldr	r3, [r7, #12]
 810f228:	895b      	ldrh	r3, [r3, #10]
 810f22a:	897a      	ldrh	r2, [r7, #10]
 810f22c:	429a      	cmp	r2, r3
 810f22e:	d01a      	beq.n	810f266 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 810f230:	68fb      	ldr	r3, [r7, #12]
 810f232:	7b5b      	ldrb	r3, [r3, #13]
 810f234:	f003 0302 	and.w	r3, r3, #2
 810f238:	2b00      	cmp	r3, #0
 810f23a:	d114      	bne.n	810f266 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 810f23c:	68fb      	ldr	r3, [r7, #12]
 810f23e:	685a      	ldr	r2, [r3, #4]
 810f240:	68fb      	ldr	r3, [r7, #12]
 810f242:	1ad2      	subs	r2, r2, r3
 810f244:	897b      	ldrh	r3, [r7, #10]
 810f246:	4413      	add	r3, r2
 810f248:	4619      	mov	r1, r3
 810f24a:	68f8      	ldr	r0, [r7, #12]
 810f24c:	f7fe ff72 	bl	810e134 <mem_trim>
 810f250:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 810f252:	68fb      	ldr	r3, [r7, #12]
 810f254:	2b00      	cmp	r3, #0
 810f256:	d106      	bne.n	810f266 <pbuf_realloc+0xc6>
 810f258:	4b0f      	ldr	r3, [pc, #60]	@ (810f298 <pbuf_realloc+0xf8>)
 810f25a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 810f25e:	4912      	ldr	r1, [pc, #72]	@ (810f2a8 <pbuf_realloc+0x108>)
 810f260:	480f      	ldr	r0, [pc, #60]	@ (810f2a0 <pbuf_realloc+0x100>)
 810f262:	f006 fd8d 	bl	8115d80 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 810f266:	68fb      	ldr	r3, [r7, #12]
 810f268:	897a      	ldrh	r2, [r7, #10]
 810f26a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 810f26c:	68fb      	ldr	r3, [r7, #12]
 810f26e:	895a      	ldrh	r2, [r3, #10]
 810f270:	68fb      	ldr	r3, [r7, #12]
 810f272:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 810f274:	68fb      	ldr	r3, [r7, #12]
 810f276:	681b      	ldr	r3, [r3, #0]
 810f278:	2b00      	cmp	r3, #0
 810f27a:	d004      	beq.n	810f286 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 810f27c:	68fb      	ldr	r3, [r7, #12]
 810f27e:	681b      	ldr	r3, [r3, #0]
 810f280:	4618      	mov	r0, r3
 810f282:	f000 f911 	bl	810f4a8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 810f286:	68fb      	ldr	r3, [r7, #12]
 810f288:	2200      	movs	r2, #0
 810f28a:	601a      	str	r2, [r3, #0]
 810f28c:	e000      	b.n	810f290 <pbuf_realloc+0xf0>
    return;
 810f28e:	bf00      	nop

}
 810f290:	3710      	adds	r7, #16
 810f292:	46bd      	mov	sp, r7
 810f294:	bd80      	pop	{r7, pc}
 810f296:	bf00      	nop
 810f298:	08117ab0 	.word	0x08117ab0
 810f29c:	08117c08 	.word	0x08117c08
 810f2a0:	08117b50 	.word	0x08117b50
 810f2a4:	08117c20 	.word	0x08117c20
 810f2a8:	08117c38 	.word	0x08117c38

0810f2ac <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 810f2ac:	b580      	push	{r7, lr}
 810f2ae:	b086      	sub	sp, #24
 810f2b0:	af00      	add	r7, sp, #0
 810f2b2:	60f8      	str	r0, [r7, #12]
 810f2b4:	60b9      	str	r1, [r7, #8]
 810f2b6:	4613      	mov	r3, r2
 810f2b8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 810f2ba:	68fb      	ldr	r3, [r7, #12]
 810f2bc:	2b00      	cmp	r3, #0
 810f2be:	d106      	bne.n	810f2ce <pbuf_add_header_impl+0x22>
 810f2c0:	4b2b      	ldr	r3, [pc, #172]	@ (810f370 <pbuf_add_header_impl+0xc4>)
 810f2c2:	f240 12df 	movw	r2, #479	@ 0x1df
 810f2c6:	492b      	ldr	r1, [pc, #172]	@ (810f374 <pbuf_add_header_impl+0xc8>)
 810f2c8:	482b      	ldr	r0, [pc, #172]	@ (810f378 <pbuf_add_header_impl+0xcc>)
 810f2ca:	f006 fd59 	bl	8115d80 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 810f2ce:	68fb      	ldr	r3, [r7, #12]
 810f2d0:	2b00      	cmp	r3, #0
 810f2d2:	d003      	beq.n	810f2dc <pbuf_add_header_impl+0x30>
 810f2d4:	68bb      	ldr	r3, [r7, #8]
 810f2d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810f2da:	d301      	bcc.n	810f2e0 <pbuf_add_header_impl+0x34>
    return 1;
 810f2dc:	2301      	movs	r3, #1
 810f2de:	e043      	b.n	810f368 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 810f2e0:	68bb      	ldr	r3, [r7, #8]
 810f2e2:	2b00      	cmp	r3, #0
 810f2e4:	d101      	bne.n	810f2ea <pbuf_add_header_impl+0x3e>
    return 0;
 810f2e6:	2300      	movs	r3, #0
 810f2e8:	e03e      	b.n	810f368 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 810f2ea:	68bb      	ldr	r3, [r7, #8]
 810f2ec:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 810f2ee:	68fb      	ldr	r3, [r7, #12]
 810f2f0:	891a      	ldrh	r2, [r3, #8]
 810f2f2:	8a7b      	ldrh	r3, [r7, #18]
 810f2f4:	4413      	add	r3, r2
 810f2f6:	b29b      	uxth	r3, r3
 810f2f8:	8a7a      	ldrh	r2, [r7, #18]
 810f2fa:	429a      	cmp	r2, r3
 810f2fc:	d901      	bls.n	810f302 <pbuf_add_header_impl+0x56>
    return 1;
 810f2fe:	2301      	movs	r3, #1
 810f300:	e032      	b.n	810f368 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 810f302:	68fb      	ldr	r3, [r7, #12]
 810f304:	7b1b      	ldrb	r3, [r3, #12]
 810f306:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 810f308:	8a3b      	ldrh	r3, [r7, #16]
 810f30a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810f30e:	2b00      	cmp	r3, #0
 810f310:	d00c      	beq.n	810f32c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 810f312:	68fb      	ldr	r3, [r7, #12]
 810f314:	685a      	ldr	r2, [r3, #4]
 810f316:	68bb      	ldr	r3, [r7, #8]
 810f318:	425b      	negs	r3, r3
 810f31a:	4413      	add	r3, r2
 810f31c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 810f31e:	68fb      	ldr	r3, [r7, #12]
 810f320:	3310      	adds	r3, #16
 810f322:	697a      	ldr	r2, [r7, #20]
 810f324:	429a      	cmp	r2, r3
 810f326:	d20d      	bcs.n	810f344 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 810f328:	2301      	movs	r3, #1
 810f32a:	e01d      	b.n	810f368 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 810f32c:	79fb      	ldrb	r3, [r7, #7]
 810f32e:	2b00      	cmp	r3, #0
 810f330:	d006      	beq.n	810f340 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 810f332:	68fb      	ldr	r3, [r7, #12]
 810f334:	685a      	ldr	r2, [r3, #4]
 810f336:	68bb      	ldr	r3, [r7, #8]
 810f338:	425b      	negs	r3, r3
 810f33a:	4413      	add	r3, r2
 810f33c:	617b      	str	r3, [r7, #20]
 810f33e:	e001      	b.n	810f344 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 810f340:	2301      	movs	r3, #1
 810f342:	e011      	b.n	810f368 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 810f344:	68fb      	ldr	r3, [r7, #12]
 810f346:	697a      	ldr	r2, [r7, #20]
 810f348:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 810f34a:	68fb      	ldr	r3, [r7, #12]
 810f34c:	895a      	ldrh	r2, [r3, #10]
 810f34e:	8a7b      	ldrh	r3, [r7, #18]
 810f350:	4413      	add	r3, r2
 810f352:	b29a      	uxth	r2, r3
 810f354:	68fb      	ldr	r3, [r7, #12]
 810f356:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 810f358:	68fb      	ldr	r3, [r7, #12]
 810f35a:	891a      	ldrh	r2, [r3, #8]
 810f35c:	8a7b      	ldrh	r3, [r7, #18]
 810f35e:	4413      	add	r3, r2
 810f360:	b29a      	uxth	r2, r3
 810f362:	68fb      	ldr	r3, [r7, #12]
 810f364:	811a      	strh	r2, [r3, #8]


  return 0;
 810f366:	2300      	movs	r3, #0
}
 810f368:	4618      	mov	r0, r3
 810f36a:	3718      	adds	r7, #24
 810f36c:	46bd      	mov	sp, r7
 810f36e:	bd80      	pop	{r7, pc}
 810f370:	08117ab0 	.word	0x08117ab0
 810f374:	08117c54 	.word	0x08117c54
 810f378:	08117b50 	.word	0x08117b50

0810f37c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 810f37c:	b580      	push	{r7, lr}
 810f37e:	b082      	sub	sp, #8
 810f380:	af00      	add	r7, sp, #0
 810f382:	6078      	str	r0, [r7, #4]
 810f384:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 810f386:	2200      	movs	r2, #0
 810f388:	6839      	ldr	r1, [r7, #0]
 810f38a:	6878      	ldr	r0, [r7, #4]
 810f38c:	f7ff ff8e 	bl	810f2ac <pbuf_add_header_impl>
 810f390:	4603      	mov	r3, r0
}
 810f392:	4618      	mov	r0, r3
 810f394:	3708      	adds	r7, #8
 810f396:	46bd      	mov	sp, r7
 810f398:	bd80      	pop	{r7, pc}
	...

0810f39c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 810f39c:	b580      	push	{r7, lr}
 810f39e:	b084      	sub	sp, #16
 810f3a0:	af00      	add	r7, sp, #0
 810f3a2:	6078      	str	r0, [r7, #4]
 810f3a4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 810f3a6:	687b      	ldr	r3, [r7, #4]
 810f3a8:	2b00      	cmp	r3, #0
 810f3aa:	d106      	bne.n	810f3ba <pbuf_remove_header+0x1e>
 810f3ac:	4b20      	ldr	r3, [pc, #128]	@ (810f430 <pbuf_remove_header+0x94>)
 810f3ae:	f240 224b 	movw	r2, #587	@ 0x24b
 810f3b2:	4920      	ldr	r1, [pc, #128]	@ (810f434 <pbuf_remove_header+0x98>)
 810f3b4:	4820      	ldr	r0, [pc, #128]	@ (810f438 <pbuf_remove_header+0x9c>)
 810f3b6:	f006 fce3 	bl	8115d80 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 810f3ba:	687b      	ldr	r3, [r7, #4]
 810f3bc:	2b00      	cmp	r3, #0
 810f3be:	d003      	beq.n	810f3c8 <pbuf_remove_header+0x2c>
 810f3c0:	683b      	ldr	r3, [r7, #0]
 810f3c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810f3c6:	d301      	bcc.n	810f3cc <pbuf_remove_header+0x30>
    return 1;
 810f3c8:	2301      	movs	r3, #1
 810f3ca:	e02c      	b.n	810f426 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 810f3cc:	683b      	ldr	r3, [r7, #0]
 810f3ce:	2b00      	cmp	r3, #0
 810f3d0:	d101      	bne.n	810f3d6 <pbuf_remove_header+0x3a>
    return 0;
 810f3d2:	2300      	movs	r3, #0
 810f3d4:	e027      	b.n	810f426 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 810f3d6:	683b      	ldr	r3, [r7, #0]
 810f3d8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 810f3da:	687b      	ldr	r3, [r7, #4]
 810f3dc:	895b      	ldrh	r3, [r3, #10]
 810f3de:	89fa      	ldrh	r2, [r7, #14]
 810f3e0:	429a      	cmp	r2, r3
 810f3e2:	d908      	bls.n	810f3f6 <pbuf_remove_header+0x5a>
 810f3e4:	4b12      	ldr	r3, [pc, #72]	@ (810f430 <pbuf_remove_header+0x94>)
 810f3e6:	f240 2255 	movw	r2, #597	@ 0x255
 810f3ea:	4914      	ldr	r1, [pc, #80]	@ (810f43c <pbuf_remove_header+0xa0>)
 810f3ec:	4812      	ldr	r0, [pc, #72]	@ (810f438 <pbuf_remove_header+0x9c>)
 810f3ee:	f006 fcc7 	bl	8115d80 <iprintf>
 810f3f2:	2301      	movs	r3, #1
 810f3f4:	e017      	b.n	810f426 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 810f3f6:	687b      	ldr	r3, [r7, #4]
 810f3f8:	685b      	ldr	r3, [r3, #4]
 810f3fa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 810f3fc:	687b      	ldr	r3, [r7, #4]
 810f3fe:	685a      	ldr	r2, [r3, #4]
 810f400:	683b      	ldr	r3, [r7, #0]
 810f402:	441a      	add	r2, r3
 810f404:	687b      	ldr	r3, [r7, #4]
 810f406:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 810f408:	687b      	ldr	r3, [r7, #4]
 810f40a:	895a      	ldrh	r2, [r3, #10]
 810f40c:	89fb      	ldrh	r3, [r7, #14]
 810f40e:	1ad3      	subs	r3, r2, r3
 810f410:	b29a      	uxth	r2, r3
 810f412:	687b      	ldr	r3, [r7, #4]
 810f414:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 810f416:	687b      	ldr	r3, [r7, #4]
 810f418:	891a      	ldrh	r2, [r3, #8]
 810f41a:	89fb      	ldrh	r3, [r7, #14]
 810f41c:	1ad3      	subs	r3, r2, r3
 810f41e:	b29a      	uxth	r2, r3
 810f420:	687b      	ldr	r3, [r7, #4]
 810f422:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 810f424:	2300      	movs	r3, #0
}
 810f426:	4618      	mov	r0, r3
 810f428:	3710      	adds	r7, #16
 810f42a:	46bd      	mov	sp, r7
 810f42c:	bd80      	pop	{r7, pc}
 810f42e:	bf00      	nop
 810f430:	08117ab0 	.word	0x08117ab0
 810f434:	08117c54 	.word	0x08117c54
 810f438:	08117b50 	.word	0x08117b50
 810f43c:	08117c60 	.word	0x08117c60

0810f440 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 810f440:	b580      	push	{r7, lr}
 810f442:	b082      	sub	sp, #8
 810f444:	af00      	add	r7, sp, #0
 810f446:	6078      	str	r0, [r7, #4]
 810f448:	460b      	mov	r3, r1
 810f44a:	807b      	strh	r3, [r7, #2]
 810f44c:	4613      	mov	r3, r2
 810f44e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 810f450:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810f454:	2b00      	cmp	r3, #0
 810f456:	da08      	bge.n	810f46a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 810f458:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810f45c:	425b      	negs	r3, r3
 810f45e:	4619      	mov	r1, r3
 810f460:	6878      	ldr	r0, [r7, #4]
 810f462:	f7ff ff9b 	bl	810f39c <pbuf_remove_header>
 810f466:	4603      	mov	r3, r0
 810f468:	e007      	b.n	810f47a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 810f46a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810f46e:	787a      	ldrb	r2, [r7, #1]
 810f470:	4619      	mov	r1, r3
 810f472:	6878      	ldr	r0, [r7, #4]
 810f474:	f7ff ff1a 	bl	810f2ac <pbuf_add_header_impl>
 810f478:	4603      	mov	r3, r0
  }
}
 810f47a:	4618      	mov	r0, r3
 810f47c:	3708      	adds	r7, #8
 810f47e:	46bd      	mov	sp, r7
 810f480:	bd80      	pop	{r7, pc}

0810f482 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 810f482:	b580      	push	{r7, lr}
 810f484:	b082      	sub	sp, #8
 810f486:	af00      	add	r7, sp, #0
 810f488:	6078      	str	r0, [r7, #4]
 810f48a:	460b      	mov	r3, r1
 810f48c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 810f48e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810f492:	2201      	movs	r2, #1
 810f494:	4619      	mov	r1, r3
 810f496:	6878      	ldr	r0, [r7, #4]
 810f498:	f7ff ffd2 	bl	810f440 <pbuf_header_impl>
 810f49c:	4603      	mov	r3, r0
}
 810f49e:	4618      	mov	r0, r3
 810f4a0:	3708      	adds	r7, #8
 810f4a2:	46bd      	mov	sp, r7
 810f4a4:	bd80      	pop	{r7, pc}
	...

0810f4a8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 810f4a8:	b580      	push	{r7, lr}
 810f4aa:	b088      	sub	sp, #32
 810f4ac:	af00      	add	r7, sp, #0
 810f4ae:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 810f4b0:	687b      	ldr	r3, [r7, #4]
 810f4b2:	2b00      	cmp	r3, #0
 810f4b4:	d10b      	bne.n	810f4ce <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 810f4b6:	687b      	ldr	r3, [r7, #4]
 810f4b8:	2b00      	cmp	r3, #0
 810f4ba:	d106      	bne.n	810f4ca <pbuf_free+0x22>
 810f4bc:	4b3b      	ldr	r3, [pc, #236]	@ (810f5ac <pbuf_free+0x104>)
 810f4be:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 810f4c2:	493b      	ldr	r1, [pc, #236]	@ (810f5b0 <pbuf_free+0x108>)
 810f4c4:	483b      	ldr	r0, [pc, #236]	@ (810f5b4 <pbuf_free+0x10c>)
 810f4c6:	f006 fc5b 	bl	8115d80 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 810f4ca:	2300      	movs	r3, #0
 810f4cc:	e069      	b.n	810f5a2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 810f4ce:	2300      	movs	r3, #0
 810f4d0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 810f4d2:	e062      	b.n	810f59a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 810f4d4:	f000 fb56 	bl	810fb84 <sys_arch_protect>
 810f4d8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 810f4da:	687b      	ldr	r3, [r7, #4]
 810f4dc:	7b9b      	ldrb	r3, [r3, #14]
 810f4de:	2b00      	cmp	r3, #0
 810f4e0:	d106      	bne.n	810f4f0 <pbuf_free+0x48>
 810f4e2:	4b32      	ldr	r3, [pc, #200]	@ (810f5ac <pbuf_free+0x104>)
 810f4e4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 810f4e8:	4933      	ldr	r1, [pc, #204]	@ (810f5b8 <pbuf_free+0x110>)
 810f4ea:	4832      	ldr	r0, [pc, #200]	@ (810f5b4 <pbuf_free+0x10c>)
 810f4ec:	f006 fc48 	bl	8115d80 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 810f4f0:	687b      	ldr	r3, [r7, #4]
 810f4f2:	7b9b      	ldrb	r3, [r3, #14]
 810f4f4:	3b01      	subs	r3, #1
 810f4f6:	b2da      	uxtb	r2, r3
 810f4f8:	687b      	ldr	r3, [r7, #4]
 810f4fa:	739a      	strb	r2, [r3, #14]
 810f4fc:	687b      	ldr	r3, [r7, #4]
 810f4fe:	7b9b      	ldrb	r3, [r3, #14]
 810f500:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 810f502:	69b8      	ldr	r0, [r7, #24]
 810f504:	f000 fb4c 	bl	810fba0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 810f508:	7dfb      	ldrb	r3, [r7, #23]
 810f50a:	2b00      	cmp	r3, #0
 810f50c:	d143      	bne.n	810f596 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 810f50e:	687b      	ldr	r3, [r7, #4]
 810f510:	681b      	ldr	r3, [r3, #0]
 810f512:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 810f514:	687b      	ldr	r3, [r7, #4]
 810f516:	7b1b      	ldrb	r3, [r3, #12]
 810f518:	f003 030f 	and.w	r3, r3, #15
 810f51c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 810f51e:	687b      	ldr	r3, [r7, #4]
 810f520:	7b5b      	ldrb	r3, [r3, #13]
 810f522:	f003 0302 	and.w	r3, r3, #2
 810f526:	2b00      	cmp	r3, #0
 810f528:	d011      	beq.n	810f54e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 810f52a:	687b      	ldr	r3, [r7, #4]
 810f52c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 810f52e:	68bb      	ldr	r3, [r7, #8]
 810f530:	691b      	ldr	r3, [r3, #16]
 810f532:	2b00      	cmp	r3, #0
 810f534:	d106      	bne.n	810f544 <pbuf_free+0x9c>
 810f536:	4b1d      	ldr	r3, [pc, #116]	@ (810f5ac <pbuf_free+0x104>)
 810f538:	f240 22ff 	movw	r2, #767	@ 0x2ff
 810f53c:	491f      	ldr	r1, [pc, #124]	@ (810f5bc <pbuf_free+0x114>)
 810f53e:	481d      	ldr	r0, [pc, #116]	@ (810f5b4 <pbuf_free+0x10c>)
 810f540:	f006 fc1e 	bl	8115d80 <iprintf>
        pc->custom_free_function(p);
 810f544:	68bb      	ldr	r3, [r7, #8]
 810f546:	691b      	ldr	r3, [r3, #16]
 810f548:	6878      	ldr	r0, [r7, #4]
 810f54a:	4798      	blx	r3
 810f54c:	e01d      	b.n	810f58a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 810f54e:	7bfb      	ldrb	r3, [r7, #15]
 810f550:	2b02      	cmp	r3, #2
 810f552:	d104      	bne.n	810f55e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 810f554:	6879      	ldr	r1, [r7, #4]
 810f556:	200c      	movs	r0, #12
 810f558:	f7ff f902 	bl	810e760 <memp_free>
 810f55c:	e015      	b.n	810f58a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 810f55e:	7bfb      	ldrb	r3, [r7, #15]
 810f560:	2b01      	cmp	r3, #1
 810f562:	d104      	bne.n	810f56e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 810f564:	6879      	ldr	r1, [r7, #4]
 810f566:	200b      	movs	r0, #11
 810f568:	f7ff f8fa 	bl	810e760 <memp_free>
 810f56c:	e00d      	b.n	810f58a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 810f56e:	7bfb      	ldrb	r3, [r7, #15]
 810f570:	2b00      	cmp	r3, #0
 810f572:	d103      	bne.n	810f57c <pbuf_free+0xd4>
          mem_free(p);
 810f574:	6878      	ldr	r0, [r7, #4]
 810f576:	f7fe fd4d 	bl	810e014 <mem_free>
 810f57a:	e006      	b.n	810f58a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 810f57c:	4b0b      	ldr	r3, [pc, #44]	@ (810f5ac <pbuf_free+0x104>)
 810f57e:	f240 320f 	movw	r2, #783	@ 0x30f
 810f582:	490f      	ldr	r1, [pc, #60]	@ (810f5c0 <pbuf_free+0x118>)
 810f584:	480b      	ldr	r0, [pc, #44]	@ (810f5b4 <pbuf_free+0x10c>)
 810f586:	f006 fbfb 	bl	8115d80 <iprintf>
        }
      }
      count++;
 810f58a:	7ffb      	ldrb	r3, [r7, #31]
 810f58c:	3301      	adds	r3, #1
 810f58e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 810f590:	693b      	ldr	r3, [r7, #16]
 810f592:	607b      	str	r3, [r7, #4]
 810f594:	e001      	b.n	810f59a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 810f596:	2300      	movs	r3, #0
 810f598:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 810f59a:	687b      	ldr	r3, [r7, #4]
 810f59c:	2b00      	cmp	r3, #0
 810f59e:	d199      	bne.n	810f4d4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 810f5a0:	7ffb      	ldrb	r3, [r7, #31]
}
 810f5a2:	4618      	mov	r0, r3
 810f5a4:	3720      	adds	r7, #32
 810f5a6:	46bd      	mov	sp, r7
 810f5a8:	bd80      	pop	{r7, pc}
 810f5aa:	bf00      	nop
 810f5ac:	08117ab0 	.word	0x08117ab0
 810f5b0:	08117c54 	.word	0x08117c54
 810f5b4:	08117b50 	.word	0x08117b50
 810f5b8:	08117c80 	.word	0x08117c80
 810f5bc:	08117c98 	.word	0x08117c98
 810f5c0:	08117cbc 	.word	0x08117cbc

0810f5c4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 810f5c4:	b480      	push	{r7}
 810f5c6:	b085      	sub	sp, #20
 810f5c8:	af00      	add	r7, sp, #0
 810f5ca:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 810f5cc:	2300      	movs	r3, #0
 810f5ce:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 810f5d0:	e005      	b.n	810f5de <pbuf_clen+0x1a>
    ++len;
 810f5d2:	89fb      	ldrh	r3, [r7, #14]
 810f5d4:	3301      	adds	r3, #1
 810f5d6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 810f5d8:	687b      	ldr	r3, [r7, #4]
 810f5da:	681b      	ldr	r3, [r3, #0]
 810f5dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 810f5de:	687b      	ldr	r3, [r7, #4]
 810f5e0:	2b00      	cmp	r3, #0
 810f5e2:	d1f6      	bne.n	810f5d2 <pbuf_clen+0xe>
  }
  return len;
 810f5e4:	89fb      	ldrh	r3, [r7, #14]
}
 810f5e6:	4618      	mov	r0, r3
 810f5e8:	3714      	adds	r7, #20
 810f5ea:	46bd      	mov	sp, r7
 810f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f5f0:	4770      	bx	lr
	...

0810f5f4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 810f5f4:	b580      	push	{r7, lr}
 810f5f6:	b084      	sub	sp, #16
 810f5f8:	af00      	add	r7, sp, #0
 810f5fa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 810f5fc:	687b      	ldr	r3, [r7, #4]
 810f5fe:	2b00      	cmp	r3, #0
 810f600:	d016      	beq.n	810f630 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 810f602:	f000 fabf 	bl	810fb84 <sys_arch_protect>
 810f606:	60f8      	str	r0, [r7, #12]
 810f608:	687b      	ldr	r3, [r7, #4]
 810f60a:	7b9b      	ldrb	r3, [r3, #14]
 810f60c:	3301      	adds	r3, #1
 810f60e:	b2da      	uxtb	r2, r3
 810f610:	687b      	ldr	r3, [r7, #4]
 810f612:	739a      	strb	r2, [r3, #14]
 810f614:	68f8      	ldr	r0, [r7, #12]
 810f616:	f000 fac3 	bl	810fba0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 810f61a:	687b      	ldr	r3, [r7, #4]
 810f61c:	7b9b      	ldrb	r3, [r3, #14]
 810f61e:	2b00      	cmp	r3, #0
 810f620:	d106      	bne.n	810f630 <pbuf_ref+0x3c>
 810f622:	4b05      	ldr	r3, [pc, #20]	@ (810f638 <pbuf_ref+0x44>)
 810f624:	f240 3242 	movw	r2, #834	@ 0x342
 810f628:	4904      	ldr	r1, [pc, #16]	@ (810f63c <pbuf_ref+0x48>)
 810f62a:	4805      	ldr	r0, [pc, #20]	@ (810f640 <pbuf_ref+0x4c>)
 810f62c:	f006 fba8 	bl	8115d80 <iprintf>
  }
}
 810f630:	bf00      	nop
 810f632:	3710      	adds	r7, #16
 810f634:	46bd      	mov	sp, r7
 810f636:	bd80      	pop	{r7, pc}
 810f638:	08117ab0 	.word	0x08117ab0
 810f63c:	08117cd0 	.word	0x08117cd0
 810f640:	08117b50 	.word	0x08117b50

0810f644 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 810f644:	b580      	push	{r7, lr}
 810f646:	b084      	sub	sp, #16
 810f648:	af00      	add	r7, sp, #0
 810f64a:	6078      	str	r0, [r7, #4]
 810f64c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 810f64e:	687b      	ldr	r3, [r7, #4]
 810f650:	2b00      	cmp	r3, #0
 810f652:	d002      	beq.n	810f65a <pbuf_cat+0x16>
 810f654:	683b      	ldr	r3, [r7, #0]
 810f656:	2b00      	cmp	r3, #0
 810f658:	d107      	bne.n	810f66a <pbuf_cat+0x26>
 810f65a:	4b20      	ldr	r3, [pc, #128]	@ (810f6dc <pbuf_cat+0x98>)
 810f65c:	f240 3259 	movw	r2, #857	@ 0x359
 810f660:	491f      	ldr	r1, [pc, #124]	@ (810f6e0 <pbuf_cat+0x9c>)
 810f662:	4820      	ldr	r0, [pc, #128]	@ (810f6e4 <pbuf_cat+0xa0>)
 810f664:	f006 fb8c 	bl	8115d80 <iprintf>
 810f668:	e034      	b.n	810f6d4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 810f66a:	687b      	ldr	r3, [r7, #4]
 810f66c:	60fb      	str	r3, [r7, #12]
 810f66e:	e00a      	b.n	810f686 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 810f670:	68fb      	ldr	r3, [r7, #12]
 810f672:	891a      	ldrh	r2, [r3, #8]
 810f674:	683b      	ldr	r3, [r7, #0]
 810f676:	891b      	ldrh	r3, [r3, #8]
 810f678:	4413      	add	r3, r2
 810f67a:	b29a      	uxth	r2, r3
 810f67c:	68fb      	ldr	r3, [r7, #12]
 810f67e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 810f680:	68fb      	ldr	r3, [r7, #12]
 810f682:	681b      	ldr	r3, [r3, #0]
 810f684:	60fb      	str	r3, [r7, #12]
 810f686:	68fb      	ldr	r3, [r7, #12]
 810f688:	681b      	ldr	r3, [r3, #0]
 810f68a:	2b00      	cmp	r3, #0
 810f68c:	d1f0      	bne.n	810f670 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 810f68e:	68fb      	ldr	r3, [r7, #12]
 810f690:	891a      	ldrh	r2, [r3, #8]
 810f692:	68fb      	ldr	r3, [r7, #12]
 810f694:	895b      	ldrh	r3, [r3, #10]
 810f696:	429a      	cmp	r2, r3
 810f698:	d006      	beq.n	810f6a8 <pbuf_cat+0x64>
 810f69a:	4b10      	ldr	r3, [pc, #64]	@ (810f6dc <pbuf_cat+0x98>)
 810f69c:	f240 3262 	movw	r2, #866	@ 0x362
 810f6a0:	4911      	ldr	r1, [pc, #68]	@ (810f6e8 <pbuf_cat+0xa4>)
 810f6a2:	4810      	ldr	r0, [pc, #64]	@ (810f6e4 <pbuf_cat+0xa0>)
 810f6a4:	f006 fb6c 	bl	8115d80 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 810f6a8:	68fb      	ldr	r3, [r7, #12]
 810f6aa:	681b      	ldr	r3, [r3, #0]
 810f6ac:	2b00      	cmp	r3, #0
 810f6ae:	d006      	beq.n	810f6be <pbuf_cat+0x7a>
 810f6b0:	4b0a      	ldr	r3, [pc, #40]	@ (810f6dc <pbuf_cat+0x98>)
 810f6b2:	f240 3263 	movw	r2, #867	@ 0x363
 810f6b6:	490d      	ldr	r1, [pc, #52]	@ (810f6ec <pbuf_cat+0xa8>)
 810f6b8:	480a      	ldr	r0, [pc, #40]	@ (810f6e4 <pbuf_cat+0xa0>)
 810f6ba:	f006 fb61 	bl	8115d80 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 810f6be:	68fb      	ldr	r3, [r7, #12]
 810f6c0:	891a      	ldrh	r2, [r3, #8]
 810f6c2:	683b      	ldr	r3, [r7, #0]
 810f6c4:	891b      	ldrh	r3, [r3, #8]
 810f6c6:	4413      	add	r3, r2
 810f6c8:	b29a      	uxth	r2, r3
 810f6ca:	68fb      	ldr	r3, [r7, #12]
 810f6cc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 810f6ce:	68fb      	ldr	r3, [r7, #12]
 810f6d0:	683a      	ldr	r2, [r7, #0]
 810f6d2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 810f6d4:	3710      	adds	r7, #16
 810f6d6:	46bd      	mov	sp, r7
 810f6d8:	bd80      	pop	{r7, pc}
 810f6da:	bf00      	nop
 810f6dc:	08117ab0 	.word	0x08117ab0
 810f6e0:	08117ce4 	.word	0x08117ce4
 810f6e4:	08117b50 	.word	0x08117b50
 810f6e8:	08117d1c 	.word	0x08117d1c
 810f6ec:	08117d4c 	.word	0x08117d4c

0810f6f0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 810f6f0:	b580      	push	{r7, lr}
 810f6f2:	b086      	sub	sp, #24
 810f6f4:	af00      	add	r7, sp, #0
 810f6f6:	6078      	str	r0, [r7, #4]
 810f6f8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 810f6fa:	2300      	movs	r3, #0
 810f6fc:	617b      	str	r3, [r7, #20]
 810f6fe:	2300      	movs	r3, #0
 810f700:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 810f702:	687b      	ldr	r3, [r7, #4]
 810f704:	2b00      	cmp	r3, #0
 810f706:	d008      	beq.n	810f71a <pbuf_copy+0x2a>
 810f708:	683b      	ldr	r3, [r7, #0]
 810f70a:	2b00      	cmp	r3, #0
 810f70c:	d005      	beq.n	810f71a <pbuf_copy+0x2a>
 810f70e:	687b      	ldr	r3, [r7, #4]
 810f710:	891a      	ldrh	r2, [r3, #8]
 810f712:	683b      	ldr	r3, [r7, #0]
 810f714:	891b      	ldrh	r3, [r3, #8]
 810f716:	429a      	cmp	r2, r3
 810f718:	d209      	bcs.n	810f72e <pbuf_copy+0x3e>
 810f71a:	4b57      	ldr	r3, [pc, #348]	@ (810f878 <pbuf_copy+0x188>)
 810f71c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 810f720:	4956      	ldr	r1, [pc, #344]	@ (810f87c <pbuf_copy+0x18c>)
 810f722:	4857      	ldr	r0, [pc, #348]	@ (810f880 <pbuf_copy+0x190>)
 810f724:	f006 fb2c 	bl	8115d80 <iprintf>
 810f728:	f06f 030f 	mvn.w	r3, #15
 810f72c:	e09f      	b.n	810f86e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 810f72e:	687b      	ldr	r3, [r7, #4]
 810f730:	895b      	ldrh	r3, [r3, #10]
 810f732:	461a      	mov	r2, r3
 810f734:	697b      	ldr	r3, [r7, #20]
 810f736:	1ad2      	subs	r2, r2, r3
 810f738:	683b      	ldr	r3, [r7, #0]
 810f73a:	895b      	ldrh	r3, [r3, #10]
 810f73c:	4619      	mov	r1, r3
 810f73e:	693b      	ldr	r3, [r7, #16]
 810f740:	1acb      	subs	r3, r1, r3
 810f742:	429a      	cmp	r2, r3
 810f744:	d306      	bcc.n	810f754 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 810f746:	683b      	ldr	r3, [r7, #0]
 810f748:	895b      	ldrh	r3, [r3, #10]
 810f74a:	461a      	mov	r2, r3
 810f74c:	693b      	ldr	r3, [r7, #16]
 810f74e:	1ad3      	subs	r3, r2, r3
 810f750:	60fb      	str	r3, [r7, #12]
 810f752:	e005      	b.n	810f760 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 810f754:	687b      	ldr	r3, [r7, #4]
 810f756:	895b      	ldrh	r3, [r3, #10]
 810f758:	461a      	mov	r2, r3
 810f75a:	697b      	ldr	r3, [r7, #20]
 810f75c:	1ad3      	subs	r3, r2, r3
 810f75e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 810f760:	687b      	ldr	r3, [r7, #4]
 810f762:	685a      	ldr	r2, [r3, #4]
 810f764:	697b      	ldr	r3, [r7, #20]
 810f766:	18d0      	adds	r0, r2, r3
 810f768:	683b      	ldr	r3, [r7, #0]
 810f76a:	685a      	ldr	r2, [r3, #4]
 810f76c:	693b      	ldr	r3, [r7, #16]
 810f76e:	4413      	add	r3, r2
 810f770:	68fa      	ldr	r2, [r7, #12]
 810f772:	4619      	mov	r1, r3
 810f774:	f006 fca3 	bl	81160be <memcpy>
    offset_to += len;
 810f778:	697a      	ldr	r2, [r7, #20]
 810f77a:	68fb      	ldr	r3, [r7, #12]
 810f77c:	4413      	add	r3, r2
 810f77e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 810f780:	693a      	ldr	r2, [r7, #16]
 810f782:	68fb      	ldr	r3, [r7, #12]
 810f784:	4413      	add	r3, r2
 810f786:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 810f788:	687b      	ldr	r3, [r7, #4]
 810f78a:	895b      	ldrh	r3, [r3, #10]
 810f78c:	461a      	mov	r2, r3
 810f78e:	697b      	ldr	r3, [r7, #20]
 810f790:	4293      	cmp	r3, r2
 810f792:	d906      	bls.n	810f7a2 <pbuf_copy+0xb2>
 810f794:	4b38      	ldr	r3, [pc, #224]	@ (810f878 <pbuf_copy+0x188>)
 810f796:	f240 32d9 	movw	r2, #985	@ 0x3d9
 810f79a:	493a      	ldr	r1, [pc, #232]	@ (810f884 <pbuf_copy+0x194>)
 810f79c:	4838      	ldr	r0, [pc, #224]	@ (810f880 <pbuf_copy+0x190>)
 810f79e:	f006 faef 	bl	8115d80 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 810f7a2:	683b      	ldr	r3, [r7, #0]
 810f7a4:	895b      	ldrh	r3, [r3, #10]
 810f7a6:	461a      	mov	r2, r3
 810f7a8:	693b      	ldr	r3, [r7, #16]
 810f7aa:	4293      	cmp	r3, r2
 810f7ac:	d906      	bls.n	810f7bc <pbuf_copy+0xcc>
 810f7ae:	4b32      	ldr	r3, [pc, #200]	@ (810f878 <pbuf_copy+0x188>)
 810f7b0:	f240 32da 	movw	r2, #986	@ 0x3da
 810f7b4:	4934      	ldr	r1, [pc, #208]	@ (810f888 <pbuf_copy+0x198>)
 810f7b6:	4832      	ldr	r0, [pc, #200]	@ (810f880 <pbuf_copy+0x190>)
 810f7b8:	f006 fae2 	bl	8115d80 <iprintf>
    if (offset_from >= p_from->len) {
 810f7bc:	683b      	ldr	r3, [r7, #0]
 810f7be:	895b      	ldrh	r3, [r3, #10]
 810f7c0:	461a      	mov	r2, r3
 810f7c2:	693b      	ldr	r3, [r7, #16]
 810f7c4:	4293      	cmp	r3, r2
 810f7c6:	d304      	bcc.n	810f7d2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 810f7c8:	2300      	movs	r3, #0
 810f7ca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 810f7cc:	683b      	ldr	r3, [r7, #0]
 810f7ce:	681b      	ldr	r3, [r3, #0]
 810f7d0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 810f7d2:	687b      	ldr	r3, [r7, #4]
 810f7d4:	895b      	ldrh	r3, [r3, #10]
 810f7d6:	461a      	mov	r2, r3
 810f7d8:	697b      	ldr	r3, [r7, #20]
 810f7da:	4293      	cmp	r3, r2
 810f7dc:	d114      	bne.n	810f808 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 810f7de:	2300      	movs	r3, #0
 810f7e0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 810f7e2:	687b      	ldr	r3, [r7, #4]
 810f7e4:	681b      	ldr	r3, [r3, #0]
 810f7e6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 810f7e8:	687b      	ldr	r3, [r7, #4]
 810f7ea:	2b00      	cmp	r3, #0
 810f7ec:	d10c      	bne.n	810f808 <pbuf_copy+0x118>
 810f7ee:	683b      	ldr	r3, [r7, #0]
 810f7f0:	2b00      	cmp	r3, #0
 810f7f2:	d009      	beq.n	810f808 <pbuf_copy+0x118>
 810f7f4:	4b20      	ldr	r3, [pc, #128]	@ (810f878 <pbuf_copy+0x188>)
 810f7f6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 810f7fa:	4924      	ldr	r1, [pc, #144]	@ (810f88c <pbuf_copy+0x19c>)
 810f7fc:	4820      	ldr	r0, [pc, #128]	@ (810f880 <pbuf_copy+0x190>)
 810f7fe:	f006 fabf 	bl	8115d80 <iprintf>
 810f802:	f06f 030f 	mvn.w	r3, #15
 810f806:	e032      	b.n	810f86e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 810f808:	683b      	ldr	r3, [r7, #0]
 810f80a:	2b00      	cmp	r3, #0
 810f80c:	d013      	beq.n	810f836 <pbuf_copy+0x146>
 810f80e:	683b      	ldr	r3, [r7, #0]
 810f810:	895a      	ldrh	r2, [r3, #10]
 810f812:	683b      	ldr	r3, [r7, #0]
 810f814:	891b      	ldrh	r3, [r3, #8]
 810f816:	429a      	cmp	r2, r3
 810f818:	d10d      	bne.n	810f836 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 810f81a:	683b      	ldr	r3, [r7, #0]
 810f81c:	681b      	ldr	r3, [r3, #0]
 810f81e:	2b00      	cmp	r3, #0
 810f820:	d009      	beq.n	810f836 <pbuf_copy+0x146>
 810f822:	4b15      	ldr	r3, [pc, #84]	@ (810f878 <pbuf_copy+0x188>)
 810f824:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 810f828:	4919      	ldr	r1, [pc, #100]	@ (810f890 <pbuf_copy+0x1a0>)
 810f82a:	4815      	ldr	r0, [pc, #84]	@ (810f880 <pbuf_copy+0x190>)
 810f82c:	f006 faa8 	bl	8115d80 <iprintf>
 810f830:	f06f 0305 	mvn.w	r3, #5
 810f834:	e01b      	b.n	810f86e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 810f836:	687b      	ldr	r3, [r7, #4]
 810f838:	2b00      	cmp	r3, #0
 810f83a:	d013      	beq.n	810f864 <pbuf_copy+0x174>
 810f83c:	687b      	ldr	r3, [r7, #4]
 810f83e:	895a      	ldrh	r2, [r3, #10]
 810f840:	687b      	ldr	r3, [r7, #4]
 810f842:	891b      	ldrh	r3, [r3, #8]
 810f844:	429a      	cmp	r2, r3
 810f846:	d10d      	bne.n	810f864 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 810f848:	687b      	ldr	r3, [r7, #4]
 810f84a:	681b      	ldr	r3, [r3, #0]
 810f84c:	2b00      	cmp	r3, #0
 810f84e:	d009      	beq.n	810f864 <pbuf_copy+0x174>
 810f850:	4b09      	ldr	r3, [pc, #36]	@ (810f878 <pbuf_copy+0x188>)
 810f852:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 810f856:	490e      	ldr	r1, [pc, #56]	@ (810f890 <pbuf_copy+0x1a0>)
 810f858:	4809      	ldr	r0, [pc, #36]	@ (810f880 <pbuf_copy+0x190>)
 810f85a:	f006 fa91 	bl	8115d80 <iprintf>
 810f85e:	f06f 0305 	mvn.w	r3, #5
 810f862:	e004      	b.n	810f86e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 810f864:	683b      	ldr	r3, [r7, #0]
 810f866:	2b00      	cmp	r3, #0
 810f868:	f47f af61 	bne.w	810f72e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 810f86c:	2300      	movs	r3, #0
}
 810f86e:	4618      	mov	r0, r3
 810f870:	3718      	adds	r7, #24
 810f872:	46bd      	mov	sp, r7
 810f874:	bd80      	pop	{r7, pc}
 810f876:	bf00      	nop
 810f878:	08117ab0 	.word	0x08117ab0
 810f87c:	08117d98 	.word	0x08117d98
 810f880:	08117b50 	.word	0x08117b50
 810f884:	08117dc8 	.word	0x08117dc8
 810f888:	08117de0 	.word	0x08117de0
 810f88c:	08117dfc 	.word	0x08117dfc
 810f890:	08117e0c 	.word	0x08117e0c

0810f894 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 810f894:	b580      	push	{r7, lr}
 810f896:	b088      	sub	sp, #32
 810f898:	af00      	add	r7, sp, #0
 810f89a:	60f8      	str	r0, [r7, #12]
 810f89c:	60b9      	str	r1, [r7, #8]
 810f89e:	4611      	mov	r1, r2
 810f8a0:	461a      	mov	r2, r3
 810f8a2:	460b      	mov	r3, r1
 810f8a4:	80fb      	strh	r3, [r7, #6]
 810f8a6:	4613      	mov	r3, r2
 810f8a8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 810f8aa:	2300      	movs	r3, #0
 810f8ac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 810f8ae:	2300      	movs	r3, #0
 810f8b0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 810f8b2:	68fb      	ldr	r3, [r7, #12]
 810f8b4:	2b00      	cmp	r3, #0
 810f8b6:	d108      	bne.n	810f8ca <pbuf_copy_partial+0x36>
 810f8b8:	4b2b      	ldr	r3, [pc, #172]	@ (810f968 <pbuf_copy_partial+0xd4>)
 810f8ba:	f240 420a 	movw	r2, #1034	@ 0x40a
 810f8be:	492b      	ldr	r1, [pc, #172]	@ (810f96c <pbuf_copy_partial+0xd8>)
 810f8c0:	482b      	ldr	r0, [pc, #172]	@ (810f970 <pbuf_copy_partial+0xdc>)
 810f8c2:	f006 fa5d 	bl	8115d80 <iprintf>
 810f8c6:	2300      	movs	r3, #0
 810f8c8:	e04a      	b.n	810f960 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 810f8ca:	68bb      	ldr	r3, [r7, #8]
 810f8cc:	2b00      	cmp	r3, #0
 810f8ce:	d108      	bne.n	810f8e2 <pbuf_copy_partial+0x4e>
 810f8d0:	4b25      	ldr	r3, [pc, #148]	@ (810f968 <pbuf_copy_partial+0xd4>)
 810f8d2:	f240 420b 	movw	r2, #1035	@ 0x40b
 810f8d6:	4927      	ldr	r1, [pc, #156]	@ (810f974 <pbuf_copy_partial+0xe0>)
 810f8d8:	4825      	ldr	r0, [pc, #148]	@ (810f970 <pbuf_copy_partial+0xdc>)
 810f8da:	f006 fa51 	bl	8115d80 <iprintf>
 810f8de:	2300      	movs	r3, #0
 810f8e0:	e03e      	b.n	810f960 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 810f8e2:	68fb      	ldr	r3, [r7, #12]
 810f8e4:	61fb      	str	r3, [r7, #28]
 810f8e6:	e034      	b.n	810f952 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 810f8e8:	88bb      	ldrh	r3, [r7, #4]
 810f8ea:	2b00      	cmp	r3, #0
 810f8ec:	d00a      	beq.n	810f904 <pbuf_copy_partial+0x70>
 810f8ee:	69fb      	ldr	r3, [r7, #28]
 810f8f0:	895b      	ldrh	r3, [r3, #10]
 810f8f2:	88ba      	ldrh	r2, [r7, #4]
 810f8f4:	429a      	cmp	r2, r3
 810f8f6:	d305      	bcc.n	810f904 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 810f8f8:	69fb      	ldr	r3, [r7, #28]
 810f8fa:	895b      	ldrh	r3, [r3, #10]
 810f8fc:	88ba      	ldrh	r2, [r7, #4]
 810f8fe:	1ad3      	subs	r3, r2, r3
 810f900:	80bb      	strh	r3, [r7, #4]
 810f902:	e023      	b.n	810f94c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 810f904:	69fb      	ldr	r3, [r7, #28]
 810f906:	895a      	ldrh	r2, [r3, #10]
 810f908:	88bb      	ldrh	r3, [r7, #4]
 810f90a:	1ad3      	subs	r3, r2, r3
 810f90c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 810f90e:	8b3a      	ldrh	r2, [r7, #24]
 810f910:	88fb      	ldrh	r3, [r7, #6]
 810f912:	429a      	cmp	r2, r3
 810f914:	d901      	bls.n	810f91a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 810f916:	88fb      	ldrh	r3, [r7, #6]
 810f918:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 810f91a:	8b7b      	ldrh	r3, [r7, #26]
 810f91c:	68ba      	ldr	r2, [r7, #8]
 810f91e:	18d0      	adds	r0, r2, r3
 810f920:	69fb      	ldr	r3, [r7, #28]
 810f922:	685a      	ldr	r2, [r3, #4]
 810f924:	88bb      	ldrh	r3, [r7, #4]
 810f926:	4413      	add	r3, r2
 810f928:	8b3a      	ldrh	r2, [r7, #24]
 810f92a:	4619      	mov	r1, r3
 810f92c:	f006 fbc7 	bl	81160be <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 810f930:	8afa      	ldrh	r2, [r7, #22]
 810f932:	8b3b      	ldrh	r3, [r7, #24]
 810f934:	4413      	add	r3, r2
 810f936:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 810f938:	8b7a      	ldrh	r2, [r7, #26]
 810f93a:	8b3b      	ldrh	r3, [r7, #24]
 810f93c:	4413      	add	r3, r2
 810f93e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 810f940:	88fa      	ldrh	r2, [r7, #6]
 810f942:	8b3b      	ldrh	r3, [r7, #24]
 810f944:	1ad3      	subs	r3, r2, r3
 810f946:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 810f948:	2300      	movs	r3, #0
 810f94a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 810f94c:	69fb      	ldr	r3, [r7, #28]
 810f94e:	681b      	ldr	r3, [r3, #0]
 810f950:	61fb      	str	r3, [r7, #28]
 810f952:	88fb      	ldrh	r3, [r7, #6]
 810f954:	2b00      	cmp	r3, #0
 810f956:	d002      	beq.n	810f95e <pbuf_copy_partial+0xca>
 810f958:	69fb      	ldr	r3, [r7, #28]
 810f95a:	2b00      	cmp	r3, #0
 810f95c:	d1c4      	bne.n	810f8e8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 810f95e:	8afb      	ldrh	r3, [r7, #22]
}
 810f960:	4618      	mov	r0, r3
 810f962:	3720      	adds	r7, #32
 810f964:	46bd      	mov	sp, r7
 810f966:	bd80      	pop	{r7, pc}
 810f968:	08117ab0 	.word	0x08117ab0
 810f96c:	08117e38 	.word	0x08117e38
 810f970:	08117b50 	.word	0x08117b50
 810f974:	08117e58 	.word	0x08117e58

0810f978 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 810f978:	b580      	push	{r7, lr}
 810f97a:	b084      	sub	sp, #16
 810f97c:	af00      	add	r7, sp, #0
 810f97e:	4603      	mov	r3, r0
 810f980:	603a      	str	r2, [r7, #0]
 810f982:	71fb      	strb	r3, [r7, #7]
 810f984:	460b      	mov	r3, r1
 810f986:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 810f988:	683b      	ldr	r3, [r7, #0]
 810f98a:	8919      	ldrh	r1, [r3, #8]
 810f98c:	88ba      	ldrh	r2, [r7, #4]
 810f98e:	79fb      	ldrb	r3, [r7, #7]
 810f990:	4618      	mov	r0, r3
 810f992:	f7ff faa5 	bl	810eee0 <pbuf_alloc>
 810f996:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 810f998:	68fb      	ldr	r3, [r7, #12]
 810f99a:	2b00      	cmp	r3, #0
 810f99c:	d101      	bne.n	810f9a2 <pbuf_clone+0x2a>
    return NULL;
 810f99e:	2300      	movs	r3, #0
 810f9a0:	e011      	b.n	810f9c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 810f9a2:	6839      	ldr	r1, [r7, #0]
 810f9a4:	68f8      	ldr	r0, [r7, #12]
 810f9a6:	f7ff fea3 	bl	810f6f0 <pbuf_copy>
 810f9aa:	4603      	mov	r3, r0
 810f9ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 810f9ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 810f9b2:	2b00      	cmp	r3, #0
 810f9b4:	d006      	beq.n	810f9c4 <pbuf_clone+0x4c>
 810f9b6:	4b06      	ldr	r3, [pc, #24]	@ (810f9d0 <pbuf_clone+0x58>)
 810f9b8:	f240 5224 	movw	r2, #1316	@ 0x524
 810f9bc:	4905      	ldr	r1, [pc, #20]	@ (810f9d4 <pbuf_clone+0x5c>)
 810f9be:	4806      	ldr	r0, [pc, #24]	@ (810f9d8 <pbuf_clone+0x60>)
 810f9c0:	f006 f9de 	bl	8115d80 <iprintf>
  return q;
 810f9c4:	68fb      	ldr	r3, [r7, #12]
}
 810f9c6:	4618      	mov	r0, r3
 810f9c8:	3710      	adds	r7, #16
 810f9ca:	46bd      	mov	sp, r7
 810f9cc:	bd80      	pop	{r7, pc}
 810f9ce:	bf00      	nop
 810f9d0:	08117ab0 	.word	0x08117ab0
 810f9d4:	08117f64 	.word	0x08117f64
 810f9d8:	08117b50 	.word	0x08117b50

0810f9dc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 810f9dc:	b580      	push	{r7, lr}
 810f9de:	b082      	sub	sp, #8
 810f9e0:	af00      	add	r7, sp, #0
 810f9e2:	6078      	str	r0, [r7, #4]
 810f9e4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 810f9e6:	683b      	ldr	r3, [r7, #0]
 810f9e8:	2200      	movs	r2, #0
 810f9ea:	2104      	movs	r1, #4
 810f9ec:	4618      	mov	r0, r3
 810f9ee:	f7f7 fecb 	bl	8107788 <osMessageQueueNew>
 810f9f2:	4602      	mov	r2, r0
 810f9f4:	687b      	ldr	r3, [r7, #4]
 810f9f6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 810f9f8:	687b      	ldr	r3, [r7, #4]
 810f9fa:	681b      	ldr	r3, [r3, #0]
 810f9fc:	2b00      	cmp	r3, #0
 810f9fe:	d102      	bne.n	810fa06 <sys_mbox_new+0x2a>
    return ERR_MEM;
 810fa00:	f04f 33ff 	mov.w	r3, #4294967295
 810fa04:	e000      	b.n	810fa08 <sys_mbox_new+0x2c>

  return ERR_OK;
 810fa06:	2300      	movs	r3, #0
}
 810fa08:	4618      	mov	r0, r3
 810fa0a:	3708      	adds	r7, #8
 810fa0c:	46bd      	mov	sp, r7
 810fa0e:	bd80      	pop	{r7, pc}

0810fa10 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 810fa10:	b580      	push	{r7, lr}
 810fa12:	b084      	sub	sp, #16
 810fa14:	af00      	add	r7, sp, #0
 810fa16:	6078      	str	r0, [r7, #4]
 810fa18:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 810fa1a:	687b      	ldr	r3, [r7, #4]
 810fa1c:	6818      	ldr	r0, [r3, #0]
 810fa1e:	4639      	mov	r1, r7
 810fa20:	2300      	movs	r3, #0
 810fa22:	2200      	movs	r2, #0
 810fa24:	f7f7 ff24 	bl	8107870 <osMessageQueuePut>
 810fa28:	4603      	mov	r3, r0
 810fa2a:	2b00      	cmp	r3, #0
 810fa2c:	d102      	bne.n	810fa34 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 810fa2e:	2300      	movs	r3, #0
 810fa30:	73fb      	strb	r3, [r7, #15]
 810fa32:	e001      	b.n	810fa38 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 810fa34:	23ff      	movs	r3, #255	@ 0xff
 810fa36:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 810fa38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 810fa3c:	4618      	mov	r0, r3
 810fa3e:	3710      	adds	r7, #16
 810fa40:	46bd      	mov	sp, r7
 810fa42:	bd80      	pop	{r7, pc}

0810fa44 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 810fa44:	b580      	push	{r7, lr}
 810fa46:	b086      	sub	sp, #24
 810fa48:	af00      	add	r7, sp, #0
 810fa4a:	60f8      	str	r0, [r7, #12]
 810fa4c:	60b9      	str	r1, [r7, #8]
 810fa4e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 810fa50:	f7f7 fbaa 	bl	81071a8 <osKernelGetTickCount>
 810fa54:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 810fa56:	687b      	ldr	r3, [r7, #4]
 810fa58:	2b00      	cmp	r3, #0
 810fa5a:	d013      	beq.n	810fa84 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 810fa5c:	68fb      	ldr	r3, [r7, #12]
 810fa5e:	6818      	ldr	r0, [r3, #0]
 810fa60:	687b      	ldr	r3, [r7, #4]
 810fa62:	2200      	movs	r2, #0
 810fa64:	68b9      	ldr	r1, [r7, #8]
 810fa66:	f7f7 ff63 	bl	8107930 <osMessageQueueGet>
 810fa6a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 810fa6c:	693b      	ldr	r3, [r7, #16]
 810fa6e:	2b00      	cmp	r3, #0
 810fa70:	d105      	bne.n	810fa7e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 810fa72:	f7f7 fb99 	bl	81071a8 <osKernelGetTickCount>
 810fa76:	4602      	mov	r2, r0
 810fa78:	697b      	ldr	r3, [r7, #20]
 810fa7a:	1ad3      	subs	r3, r2, r3
 810fa7c:	e00f      	b.n	810fa9e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 810fa7e:	f04f 33ff 	mov.w	r3, #4294967295
 810fa82:	e00c      	b.n	810fa9e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 810fa84:	68fb      	ldr	r3, [r7, #12]
 810fa86:	6818      	ldr	r0, [r3, #0]
 810fa88:	f04f 33ff 	mov.w	r3, #4294967295
 810fa8c:	2200      	movs	r2, #0
 810fa8e:	68b9      	ldr	r1, [r7, #8]
 810fa90:	f7f7 ff4e 	bl	8107930 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 810fa94:	f7f7 fb88 	bl	81071a8 <osKernelGetTickCount>
 810fa98:	4602      	mov	r2, r0
 810fa9a:	697b      	ldr	r3, [r7, #20]
 810fa9c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 810fa9e:	4618      	mov	r0, r3
 810faa0:	3718      	adds	r7, #24
 810faa2:	46bd      	mov	sp, r7
 810faa4:	bd80      	pop	{r7, pc}

0810faa6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 810faa6:	b480      	push	{r7}
 810faa8:	b083      	sub	sp, #12
 810faaa:	af00      	add	r7, sp, #0
 810faac:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 810faae:	687b      	ldr	r3, [r7, #4]
 810fab0:	681b      	ldr	r3, [r3, #0]
 810fab2:	2b00      	cmp	r3, #0
 810fab4:	d101      	bne.n	810faba <sys_mbox_valid+0x14>
    return 0;
 810fab6:	2300      	movs	r3, #0
 810fab8:	e000      	b.n	810fabc <sys_mbox_valid+0x16>
  else
    return 1;
 810faba:	2301      	movs	r3, #1
}
 810fabc:	4618      	mov	r0, r3
 810fabe:	370c      	adds	r7, #12
 810fac0:	46bd      	mov	sp, r7
 810fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fac6:	4770      	bx	lr

0810fac8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 810fac8:	b580      	push	{r7, lr}
 810faca:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 810facc:	2000      	movs	r0, #0
 810face:	f7f7 fc2d 	bl	810732c <osMutexNew>
 810fad2:	4603      	mov	r3, r0
 810fad4:	4a01      	ldr	r2, [pc, #4]	@ (810fadc <sys_init+0x14>)
 810fad6:	6013      	str	r3, [r2, #0]
#endif
}
 810fad8:	bf00      	nop
 810fada:	bd80      	pop	{r7, pc}
 810fadc:	10011c48 	.word	0x10011c48

0810fae0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 810fae0:	b580      	push	{r7, lr}
 810fae2:	b082      	sub	sp, #8
 810fae4:	af00      	add	r7, sp, #0
 810fae6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 810fae8:	2000      	movs	r0, #0
 810faea:	f7f7 fc1f 	bl	810732c <osMutexNew>
 810faee:	4602      	mov	r2, r0
 810faf0:	687b      	ldr	r3, [r7, #4]
 810faf2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 810faf4:	687b      	ldr	r3, [r7, #4]
 810faf6:	681b      	ldr	r3, [r3, #0]
 810faf8:	2b00      	cmp	r3, #0
 810fafa:	d102      	bne.n	810fb02 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 810fafc:	f04f 33ff 	mov.w	r3, #4294967295
 810fb00:	e000      	b.n	810fb04 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 810fb02:	2300      	movs	r3, #0
}
 810fb04:	4618      	mov	r0, r3
 810fb06:	3708      	adds	r7, #8
 810fb08:	46bd      	mov	sp, r7
 810fb0a:	bd80      	pop	{r7, pc}

0810fb0c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 810fb0c:	b580      	push	{r7, lr}
 810fb0e:	b082      	sub	sp, #8
 810fb10:	af00      	add	r7, sp, #0
 810fb12:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 810fb14:	687b      	ldr	r3, [r7, #4]
 810fb16:	681b      	ldr	r3, [r3, #0]
 810fb18:	f04f 31ff 	mov.w	r1, #4294967295
 810fb1c:	4618      	mov	r0, r3
 810fb1e:	f7f7 fc8b 	bl	8107438 <osMutexAcquire>
#endif
}
 810fb22:	bf00      	nop
 810fb24:	3708      	adds	r7, #8
 810fb26:	46bd      	mov	sp, r7
 810fb28:	bd80      	pop	{r7, pc}

0810fb2a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 810fb2a:	b580      	push	{r7, lr}
 810fb2c:	b082      	sub	sp, #8
 810fb2e:	af00      	add	r7, sp, #0
 810fb30:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 810fb32:	687b      	ldr	r3, [r7, #4]
 810fb34:	681b      	ldr	r3, [r3, #0]
 810fb36:	4618      	mov	r0, r3
 810fb38:	f7f7 fcc9 	bl	81074ce <osMutexRelease>
}
 810fb3c:	bf00      	nop
 810fb3e:	3708      	adds	r7, #8
 810fb40:	46bd      	mov	sp, r7
 810fb42:	bd80      	pop	{r7, pc}

0810fb44 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 810fb44:	b580      	push	{r7, lr}
 810fb46:	b08e      	sub	sp, #56	@ 0x38
 810fb48:	af00      	add	r7, sp, #0
 810fb4a:	60f8      	str	r0, [r7, #12]
 810fb4c:	60b9      	str	r1, [r7, #8]
 810fb4e:	607a      	str	r2, [r7, #4]
 810fb50:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 810fb52:	f107 0314 	add.w	r3, r7, #20
 810fb56:	2224      	movs	r2, #36	@ 0x24
 810fb58:	2100      	movs	r1, #0
 810fb5a:	4618      	mov	r0, r3
 810fb5c:	f006 f98f 	bl	8115e7e <memset>
 810fb60:	68fb      	ldr	r3, [r7, #12]
 810fb62:	617b      	str	r3, [r7, #20]
 810fb64:	683b      	ldr	r3, [r7, #0]
 810fb66:	62bb      	str	r3, [r7, #40]	@ 0x28
 810fb68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810fb6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 810fb6c:	f107 0314 	add.w	r3, r7, #20
 810fb70:	461a      	mov	r2, r3
 810fb72:	6879      	ldr	r1, [r7, #4]
 810fb74:	68b8      	ldr	r0, [r7, #8]
 810fb76:	f7f7 fb2c 	bl	81071d2 <osThreadNew>
 810fb7a:	4603      	mov	r3, r0
#endif
}
 810fb7c:	4618      	mov	r0, r3
 810fb7e:	3738      	adds	r7, #56	@ 0x38
 810fb80:	46bd      	mov	sp, r7
 810fb82:	bd80      	pop	{r7, pc}

0810fb84 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 810fb84:	b580      	push	{r7, lr}
 810fb86:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 810fb88:	4b04      	ldr	r3, [pc, #16]	@ (810fb9c <sys_arch_protect+0x18>)
 810fb8a:	681b      	ldr	r3, [r3, #0]
 810fb8c:	f04f 31ff 	mov.w	r1, #4294967295
 810fb90:	4618      	mov	r0, r3
 810fb92:	f7f7 fc51 	bl	8107438 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 810fb96:	2301      	movs	r3, #1
}
 810fb98:	4618      	mov	r0, r3
 810fb9a:	bd80      	pop	{r7, pc}
 810fb9c:	10011c48 	.word	0x10011c48

0810fba0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 810fba0:	b580      	push	{r7, lr}
 810fba2:	b082      	sub	sp, #8
 810fba4:	af00      	add	r7, sp, #0
 810fba6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 810fba8:	4b04      	ldr	r3, [pc, #16]	@ (810fbbc <sys_arch_unprotect+0x1c>)
 810fbaa:	681b      	ldr	r3, [r3, #0]
 810fbac:	4618      	mov	r0, r3
 810fbae:	f7f7 fc8e 	bl	81074ce <osMutexRelease>
}
 810fbb2:	bf00      	nop
 810fbb4:	3708      	adds	r7, #8
 810fbb6:	46bd      	mov	sp, r7
 810fbb8:	bd80      	pop	{r7, pc}
 810fbba:	bf00      	nop
 810fbbc:	10011c48 	.word	0x10011c48

0810fbc0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 810fbc0:	b580      	push	{r7, lr}
 810fbc2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 810fbc4:	f005 ffdc 	bl	8115b80 <rand>
 810fbc8:	4603      	mov	r3, r0
 810fbca:	b29b      	uxth	r3, r3
 810fbcc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 810fbd0:	b29b      	uxth	r3, r3
 810fbd2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 810fbd6:	b29a      	uxth	r2, r3
 810fbd8:	4b01      	ldr	r3, [pc, #4]	@ (810fbe0 <tcp_init+0x20>)
 810fbda:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 810fbdc:	bf00      	nop
 810fbde:	bd80      	pop	{r7, pc}
 810fbe0:	10000028 	.word	0x10000028

0810fbe4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 810fbe4:	b580      	push	{r7, lr}
 810fbe6:	b082      	sub	sp, #8
 810fbe8:	af00      	add	r7, sp, #0
 810fbea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 810fbec:	687b      	ldr	r3, [r7, #4]
 810fbee:	7d1b      	ldrb	r3, [r3, #20]
 810fbf0:	2b01      	cmp	r3, #1
 810fbf2:	d105      	bne.n	810fc00 <tcp_free+0x1c>
 810fbf4:	4b06      	ldr	r3, [pc, #24]	@ (810fc10 <tcp_free+0x2c>)
 810fbf6:	22d4      	movs	r2, #212	@ 0xd4
 810fbf8:	4906      	ldr	r1, [pc, #24]	@ (810fc14 <tcp_free+0x30>)
 810fbfa:	4807      	ldr	r0, [pc, #28]	@ (810fc18 <tcp_free+0x34>)
 810fbfc:	f006 f8c0 	bl	8115d80 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 810fc00:	6879      	ldr	r1, [r7, #4]
 810fc02:	2001      	movs	r0, #1
 810fc04:	f7fe fdac 	bl	810e760 <memp_free>
}
 810fc08:	bf00      	nop
 810fc0a:	3708      	adds	r7, #8
 810fc0c:	46bd      	mov	sp, r7
 810fc0e:	bd80      	pop	{r7, pc}
 810fc10:	08117ff0 	.word	0x08117ff0
 810fc14:	08118060 	.word	0x08118060
 810fc18:	08118074 	.word	0x08118074

0810fc1c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 810fc1c:	b580      	push	{r7, lr}
 810fc1e:	b082      	sub	sp, #8
 810fc20:	af00      	add	r7, sp, #0
 810fc22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 810fc24:	687b      	ldr	r3, [r7, #4]
 810fc26:	7d1b      	ldrb	r3, [r3, #20]
 810fc28:	2b01      	cmp	r3, #1
 810fc2a:	d105      	bne.n	810fc38 <tcp_free_listen+0x1c>
 810fc2c:	4b06      	ldr	r3, [pc, #24]	@ (810fc48 <tcp_free_listen+0x2c>)
 810fc2e:	22df      	movs	r2, #223	@ 0xdf
 810fc30:	4906      	ldr	r1, [pc, #24]	@ (810fc4c <tcp_free_listen+0x30>)
 810fc32:	4807      	ldr	r0, [pc, #28]	@ (810fc50 <tcp_free_listen+0x34>)
 810fc34:	f006 f8a4 	bl	8115d80 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 810fc38:	6879      	ldr	r1, [r7, #4]
 810fc3a:	2002      	movs	r0, #2
 810fc3c:	f7fe fd90 	bl	810e760 <memp_free>
}
 810fc40:	bf00      	nop
 810fc42:	3708      	adds	r7, #8
 810fc44:	46bd      	mov	sp, r7
 810fc46:	bd80      	pop	{r7, pc}
 810fc48:	08117ff0 	.word	0x08117ff0
 810fc4c:	0811809c 	.word	0x0811809c
 810fc50:	08118074 	.word	0x08118074

0810fc54 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 810fc54:	b580      	push	{r7, lr}
 810fc56:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 810fc58:	f000 fea6 	bl	81109a8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 810fc5c:	4b07      	ldr	r3, [pc, #28]	@ (810fc7c <tcp_tmr+0x28>)
 810fc5e:	781b      	ldrb	r3, [r3, #0]
 810fc60:	3301      	adds	r3, #1
 810fc62:	b2da      	uxtb	r2, r3
 810fc64:	4b05      	ldr	r3, [pc, #20]	@ (810fc7c <tcp_tmr+0x28>)
 810fc66:	701a      	strb	r2, [r3, #0]
 810fc68:	4b04      	ldr	r3, [pc, #16]	@ (810fc7c <tcp_tmr+0x28>)
 810fc6a:	781b      	ldrb	r3, [r3, #0]
 810fc6c:	f003 0301 	and.w	r3, r3, #1
 810fc70:	2b00      	cmp	r3, #0
 810fc72:	d001      	beq.n	810fc78 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 810fc74:	f000 fb56 	bl	8110324 <tcp_slowtmr>
  }
}
 810fc78:	bf00      	nop
 810fc7a:	bd80      	pop	{r7, pc}
 810fc7c:	10011c61 	.word	0x10011c61

0810fc80 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 810fc80:	b580      	push	{r7, lr}
 810fc82:	b084      	sub	sp, #16
 810fc84:	af00      	add	r7, sp, #0
 810fc86:	6078      	str	r0, [r7, #4]
 810fc88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 810fc8a:	683b      	ldr	r3, [r7, #0]
 810fc8c:	2b00      	cmp	r3, #0
 810fc8e:	d105      	bne.n	810fc9c <tcp_remove_listener+0x1c>
 810fc90:	4b0d      	ldr	r3, [pc, #52]	@ (810fcc8 <tcp_remove_listener+0x48>)
 810fc92:	22ff      	movs	r2, #255	@ 0xff
 810fc94:	490d      	ldr	r1, [pc, #52]	@ (810fccc <tcp_remove_listener+0x4c>)
 810fc96:	480e      	ldr	r0, [pc, #56]	@ (810fcd0 <tcp_remove_listener+0x50>)
 810fc98:	f006 f872 	bl	8115d80 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 810fc9c:	687b      	ldr	r3, [r7, #4]
 810fc9e:	60fb      	str	r3, [r7, #12]
 810fca0:	e00a      	b.n	810fcb8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 810fca2:	68fb      	ldr	r3, [r7, #12]
 810fca4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810fca6:	683a      	ldr	r2, [r7, #0]
 810fca8:	429a      	cmp	r2, r3
 810fcaa:	d102      	bne.n	810fcb2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 810fcac:	68fb      	ldr	r3, [r7, #12]
 810fcae:	2200      	movs	r2, #0
 810fcb0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 810fcb2:	68fb      	ldr	r3, [r7, #12]
 810fcb4:	68db      	ldr	r3, [r3, #12]
 810fcb6:	60fb      	str	r3, [r7, #12]
 810fcb8:	68fb      	ldr	r3, [r7, #12]
 810fcba:	2b00      	cmp	r3, #0
 810fcbc:	d1f1      	bne.n	810fca2 <tcp_remove_listener+0x22>
    }
  }
}
 810fcbe:	bf00      	nop
 810fcc0:	bf00      	nop
 810fcc2:	3710      	adds	r7, #16
 810fcc4:	46bd      	mov	sp, r7
 810fcc6:	bd80      	pop	{r7, pc}
 810fcc8:	08117ff0 	.word	0x08117ff0
 810fccc:	081180b8 	.word	0x081180b8
 810fcd0:	08118074 	.word	0x08118074

0810fcd4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 810fcd4:	b580      	push	{r7, lr}
 810fcd6:	b084      	sub	sp, #16
 810fcd8:	af00      	add	r7, sp, #0
 810fcda:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 810fcdc:	687b      	ldr	r3, [r7, #4]
 810fcde:	2b00      	cmp	r3, #0
 810fce0:	d106      	bne.n	810fcf0 <tcp_listen_closed+0x1c>
 810fce2:	4b14      	ldr	r3, [pc, #80]	@ (810fd34 <tcp_listen_closed+0x60>)
 810fce4:	f240 1211 	movw	r2, #273	@ 0x111
 810fce8:	4913      	ldr	r1, [pc, #76]	@ (810fd38 <tcp_listen_closed+0x64>)
 810fcea:	4814      	ldr	r0, [pc, #80]	@ (810fd3c <tcp_listen_closed+0x68>)
 810fcec:	f006 f848 	bl	8115d80 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 810fcf0:	687b      	ldr	r3, [r7, #4]
 810fcf2:	7d1b      	ldrb	r3, [r3, #20]
 810fcf4:	2b01      	cmp	r3, #1
 810fcf6:	d006      	beq.n	810fd06 <tcp_listen_closed+0x32>
 810fcf8:	4b0e      	ldr	r3, [pc, #56]	@ (810fd34 <tcp_listen_closed+0x60>)
 810fcfa:	f44f 7289 	mov.w	r2, #274	@ 0x112
 810fcfe:	4910      	ldr	r1, [pc, #64]	@ (810fd40 <tcp_listen_closed+0x6c>)
 810fd00:	480e      	ldr	r0, [pc, #56]	@ (810fd3c <tcp_listen_closed+0x68>)
 810fd02:	f006 f83d 	bl	8115d80 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 810fd06:	2301      	movs	r3, #1
 810fd08:	60fb      	str	r3, [r7, #12]
 810fd0a:	e00b      	b.n	810fd24 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 810fd0c:	4a0d      	ldr	r2, [pc, #52]	@ (810fd44 <tcp_listen_closed+0x70>)
 810fd0e:	68fb      	ldr	r3, [r7, #12]
 810fd10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810fd14:	681b      	ldr	r3, [r3, #0]
 810fd16:	6879      	ldr	r1, [r7, #4]
 810fd18:	4618      	mov	r0, r3
 810fd1a:	f7ff ffb1 	bl	810fc80 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 810fd1e:	68fb      	ldr	r3, [r7, #12]
 810fd20:	3301      	adds	r3, #1
 810fd22:	60fb      	str	r3, [r7, #12]
 810fd24:	68fb      	ldr	r3, [r7, #12]
 810fd26:	2b03      	cmp	r3, #3
 810fd28:	d9f0      	bls.n	810fd0c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 810fd2a:	bf00      	nop
 810fd2c:	bf00      	nop
 810fd2e:	3710      	adds	r7, #16
 810fd30:	46bd      	mov	sp, r7
 810fd32:	bd80      	pop	{r7, pc}
 810fd34:	08117ff0 	.word	0x08117ff0
 810fd38:	081180e0 	.word	0x081180e0
 810fd3c:	08118074 	.word	0x08118074
 810fd40:	081180ec 	.word	0x081180ec
 810fd44:	08119c28 	.word	0x08119c28

0810fd48 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 810fd48:	b5b0      	push	{r4, r5, r7, lr}
 810fd4a:	b088      	sub	sp, #32
 810fd4c:	af04      	add	r7, sp, #16
 810fd4e:	6078      	str	r0, [r7, #4]
 810fd50:	460b      	mov	r3, r1
 810fd52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 810fd54:	687b      	ldr	r3, [r7, #4]
 810fd56:	2b00      	cmp	r3, #0
 810fd58:	d106      	bne.n	810fd68 <tcp_close_shutdown+0x20>
 810fd5a:	4b63      	ldr	r3, [pc, #396]	@ (810fee8 <tcp_close_shutdown+0x1a0>)
 810fd5c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 810fd60:	4962      	ldr	r1, [pc, #392]	@ (810feec <tcp_close_shutdown+0x1a4>)
 810fd62:	4863      	ldr	r0, [pc, #396]	@ (810fef0 <tcp_close_shutdown+0x1a8>)
 810fd64:	f006 f80c 	bl	8115d80 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 810fd68:	78fb      	ldrb	r3, [r7, #3]
 810fd6a:	2b00      	cmp	r3, #0
 810fd6c:	d067      	beq.n	810fe3e <tcp_close_shutdown+0xf6>
 810fd6e:	687b      	ldr	r3, [r7, #4]
 810fd70:	7d1b      	ldrb	r3, [r3, #20]
 810fd72:	2b04      	cmp	r3, #4
 810fd74:	d003      	beq.n	810fd7e <tcp_close_shutdown+0x36>
 810fd76:	687b      	ldr	r3, [r7, #4]
 810fd78:	7d1b      	ldrb	r3, [r3, #20]
 810fd7a:	2b07      	cmp	r3, #7
 810fd7c:	d15f      	bne.n	810fe3e <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 810fd7e:	687b      	ldr	r3, [r7, #4]
 810fd80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810fd82:	2b00      	cmp	r3, #0
 810fd84:	d105      	bne.n	810fd92 <tcp_close_shutdown+0x4a>
 810fd86:	687b      	ldr	r3, [r7, #4]
 810fd88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810fd8a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 810fd8e:	4293      	cmp	r3, r2
 810fd90:	d055      	beq.n	810fe3e <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 810fd92:	687b      	ldr	r3, [r7, #4]
 810fd94:	8b5b      	ldrh	r3, [r3, #26]
 810fd96:	f003 0310 	and.w	r3, r3, #16
 810fd9a:	2b00      	cmp	r3, #0
 810fd9c:	d106      	bne.n	810fdac <tcp_close_shutdown+0x64>
 810fd9e:	4b52      	ldr	r3, [pc, #328]	@ (810fee8 <tcp_close_shutdown+0x1a0>)
 810fda0:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 810fda4:	4953      	ldr	r1, [pc, #332]	@ (810fef4 <tcp_close_shutdown+0x1ac>)
 810fda6:	4852      	ldr	r0, [pc, #328]	@ (810fef0 <tcp_close_shutdown+0x1a8>)
 810fda8:	f005 ffea 	bl	8115d80 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 810fdac:	687b      	ldr	r3, [r7, #4]
 810fdae:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 810fdb0:	687b      	ldr	r3, [r7, #4]
 810fdb2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 810fdb4:	687d      	ldr	r5, [r7, #4]
 810fdb6:	687b      	ldr	r3, [r7, #4]
 810fdb8:	3304      	adds	r3, #4
 810fdba:	687a      	ldr	r2, [r7, #4]
 810fdbc:	8ad2      	ldrh	r2, [r2, #22]
 810fdbe:	6879      	ldr	r1, [r7, #4]
 810fdc0:	8b09      	ldrh	r1, [r1, #24]
 810fdc2:	9102      	str	r1, [sp, #8]
 810fdc4:	9201      	str	r2, [sp, #4]
 810fdc6:	9300      	str	r3, [sp, #0]
 810fdc8:	462b      	mov	r3, r5
 810fdca:	4622      	mov	r2, r4
 810fdcc:	4601      	mov	r1, r0
 810fdce:	6878      	ldr	r0, [r7, #4]
 810fdd0:	f004 fe92 	bl	8114af8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 810fdd4:	6878      	ldr	r0, [r7, #4]
 810fdd6:	f001 f8cb 	bl	8110f70 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 810fdda:	4b47      	ldr	r3, [pc, #284]	@ (810fef8 <tcp_close_shutdown+0x1b0>)
 810fddc:	681b      	ldr	r3, [r3, #0]
 810fdde:	687a      	ldr	r2, [r7, #4]
 810fde0:	429a      	cmp	r2, r3
 810fde2:	d105      	bne.n	810fdf0 <tcp_close_shutdown+0xa8>
 810fde4:	4b44      	ldr	r3, [pc, #272]	@ (810fef8 <tcp_close_shutdown+0x1b0>)
 810fde6:	681b      	ldr	r3, [r3, #0]
 810fde8:	68db      	ldr	r3, [r3, #12]
 810fdea:	4a43      	ldr	r2, [pc, #268]	@ (810fef8 <tcp_close_shutdown+0x1b0>)
 810fdec:	6013      	str	r3, [r2, #0]
 810fdee:	e013      	b.n	810fe18 <tcp_close_shutdown+0xd0>
 810fdf0:	4b41      	ldr	r3, [pc, #260]	@ (810fef8 <tcp_close_shutdown+0x1b0>)
 810fdf2:	681b      	ldr	r3, [r3, #0]
 810fdf4:	60fb      	str	r3, [r7, #12]
 810fdf6:	e00c      	b.n	810fe12 <tcp_close_shutdown+0xca>
 810fdf8:	68fb      	ldr	r3, [r7, #12]
 810fdfa:	68db      	ldr	r3, [r3, #12]
 810fdfc:	687a      	ldr	r2, [r7, #4]
 810fdfe:	429a      	cmp	r2, r3
 810fe00:	d104      	bne.n	810fe0c <tcp_close_shutdown+0xc4>
 810fe02:	687b      	ldr	r3, [r7, #4]
 810fe04:	68da      	ldr	r2, [r3, #12]
 810fe06:	68fb      	ldr	r3, [r7, #12]
 810fe08:	60da      	str	r2, [r3, #12]
 810fe0a:	e005      	b.n	810fe18 <tcp_close_shutdown+0xd0>
 810fe0c:	68fb      	ldr	r3, [r7, #12]
 810fe0e:	68db      	ldr	r3, [r3, #12]
 810fe10:	60fb      	str	r3, [r7, #12]
 810fe12:	68fb      	ldr	r3, [r7, #12]
 810fe14:	2b00      	cmp	r3, #0
 810fe16:	d1ef      	bne.n	810fdf8 <tcp_close_shutdown+0xb0>
 810fe18:	687b      	ldr	r3, [r7, #4]
 810fe1a:	2200      	movs	r2, #0
 810fe1c:	60da      	str	r2, [r3, #12]
 810fe1e:	4b37      	ldr	r3, [pc, #220]	@ (810fefc <tcp_close_shutdown+0x1b4>)
 810fe20:	2201      	movs	r2, #1
 810fe22:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 810fe24:	4b36      	ldr	r3, [pc, #216]	@ (810ff00 <tcp_close_shutdown+0x1b8>)
 810fe26:	681b      	ldr	r3, [r3, #0]
 810fe28:	687a      	ldr	r2, [r7, #4]
 810fe2a:	429a      	cmp	r2, r3
 810fe2c:	d102      	bne.n	810fe34 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 810fe2e:	f003 fd61 	bl	81138f4 <tcp_trigger_input_pcb_close>
 810fe32:	e002      	b.n	810fe3a <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 810fe34:	6878      	ldr	r0, [r7, #4]
 810fe36:	f7ff fed5 	bl	810fbe4 <tcp_free>
      }
      return ERR_OK;
 810fe3a:	2300      	movs	r3, #0
 810fe3c:	e050      	b.n	810fee0 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 810fe3e:	687b      	ldr	r3, [r7, #4]
 810fe40:	7d1b      	ldrb	r3, [r3, #20]
 810fe42:	2b02      	cmp	r3, #2
 810fe44:	d03b      	beq.n	810febe <tcp_close_shutdown+0x176>
 810fe46:	2b02      	cmp	r3, #2
 810fe48:	dc44      	bgt.n	810fed4 <tcp_close_shutdown+0x18c>
 810fe4a:	2b00      	cmp	r3, #0
 810fe4c:	d002      	beq.n	810fe54 <tcp_close_shutdown+0x10c>
 810fe4e:	2b01      	cmp	r3, #1
 810fe50:	d02a      	beq.n	810fea8 <tcp_close_shutdown+0x160>
 810fe52:	e03f      	b.n	810fed4 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 810fe54:	687b      	ldr	r3, [r7, #4]
 810fe56:	8adb      	ldrh	r3, [r3, #22]
 810fe58:	2b00      	cmp	r3, #0
 810fe5a:	d021      	beq.n	810fea0 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 810fe5c:	4b29      	ldr	r3, [pc, #164]	@ (810ff04 <tcp_close_shutdown+0x1bc>)
 810fe5e:	681b      	ldr	r3, [r3, #0]
 810fe60:	687a      	ldr	r2, [r7, #4]
 810fe62:	429a      	cmp	r2, r3
 810fe64:	d105      	bne.n	810fe72 <tcp_close_shutdown+0x12a>
 810fe66:	4b27      	ldr	r3, [pc, #156]	@ (810ff04 <tcp_close_shutdown+0x1bc>)
 810fe68:	681b      	ldr	r3, [r3, #0]
 810fe6a:	68db      	ldr	r3, [r3, #12]
 810fe6c:	4a25      	ldr	r2, [pc, #148]	@ (810ff04 <tcp_close_shutdown+0x1bc>)
 810fe6e:	6013      	str	r3, [r2, #0]
 810fe70:	e013      	b.n	810fe9a <tcp_close_shutdown+0x152>
 810fe72:	4b24      	ldr	r3, [pc, #144]	@ (810ff04 <tcp_close_shutdown+0x1bc>)
 810fe74:	681b      	ldr	r3, [r3, #0]
 810fe76:	60bb      	str	r3, [r7, #8]
 810fe78:	e00c      	b.n	810fe94 <tcp_close_shutdown+0x14c>
 810fe7a:	68bb      	ldr	r3, [r7, #8]
 810fe7c:	68db      	ldr	r3, [r3, #12]
 810fe7e:	687a      	ldr	r2, [r7, #4]
 810fe80:	429a      	cmp	r2, r3
 810fe82:	d104      	bne.n	810fe8e <tcp_close_shutdown+0x146>
 810fe84:	687b      	ldr	r3, [r7, #4]
 810fe86:	68da      	ldr	r2, [r3, #12]
 810fe88:	68bb      	ldr	r3, [r7, #8]
 810fe8a:	60da      	str	r2, [r3, #12]
 810fe8c:	e005      	b.n	810fe9a <tcp_close_shutdown+0x152>
 810fe8e:	68bb      	ldr	r3, [r7, #8]
 810fe90:	68db      	ldr	r3, [r3, #12]
 810fe92:	60bb      	str	r3, [r7, #8]
 810fe94:	68bb      	ldr	r3, [r7, #8]
 810fe96:	2b00      	cmp	r3, #0
 810fe98:	d1ef      	bne.n	810fe7a <tcp_close_shutdown+0x132>
 810fe9a:	687b      	ldr	r3, [r7, #4]
 810fe9c:	2200      	movs	r2, #0
 810fe9e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 810fea0:	6878      	ldr	r0, [r7, #4]
 810fea2:	f7ff fe9f 	bl	810fbe4 <tcp_free>
      break;
 810fea6:	e01a      	b.n	810fede <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 810fea8:	6878      	ldr	r0, [r7, #4]
 810feaa:	f7ff ff13 	bl	810fcd4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 810feae:	6879      	ldr	r1, [r7, #4]
 810feb0:	4815      	ldr	r0, [pc, #84]	@ (810ff08 <tcp_close_shutdown+0x1c0>)
 810feb2:	f001 f8ad 	bl	8111010 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 810feb6:	6878      	ldr	r0, [r7, #4]
 810feb8:	f7ff feb0 	bl	810fc1c <tcp_free_listen>
      break;
 810febc:	e00f      	b.n	810fede <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 810febe:	6879      	ldr	r1, [r7, #4]
 810fec0:	480d      	ldr	r0, [pc, #52]	@ (810fef8 <tcp_close_shutdown+0x1b0>)
 810fec2:	f001 f8a5 	bl	8111010 <tcp_pcb_remove>
 810fec6:	4b0d      	ldr	r3, [pc, #52]	@ (810fefc <tcp_close_shutdown+0x1b4>)
 810fec8:	2201      	movs	r2, #1
 810feca:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 810fecc:	6878      	ldr	r0, [r7, #4]
 810fece:	f7ff fe89 	bl	810fbe4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 810fed2:	e004      	b.n	810fede <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 810fed4:	6878      	ldr	r0, [r7, #4]
 810fed6:	f000 f819 	bl	810ff0c <tcp_close_shutdown_fin>
 810feda:	4603      	mov	r3, r0
 810fedc:	e000      	b.n	810fee0 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 810fede:	2300      	movs	r3, #0
}
 810fee0:	4618      	mov	r0, r3
 810fee2:	3710      	adds	r7, #16
 810fee4:	46bd      	mov	sp, r7
 810fee6:	bdb0      	pop	{r4, r5, r7, pc}
 810fee8:	08117ff0 	.word	0x08117ff0
 810feec:	08118104 	.word	0x08118104
 810fef0:	08118074 	.word	0x08118074
 810fef4:	08118124 	.word	0x08118124
 810fef8:	10011c58 	.word	0x10011c58
 810fefc:	10011c60 	.word	0x10011c60
 810ff00:	10011c98 	.word	0x10011c98
 810ff04:	10011c50 	.word	0x10011c50
 810ff08:	10011c54 	.word	0x10011c54

0810ff0c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 810ff0c:	b580      	push	{r7, lr}
 810ff0e:	b084      	sub	sp, #16
 810ff10:	af00      	add	r7, sp, #0
 810ff12:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 810ff14:	687b      	ldr	r3, [r7, #4]
 810ff16:	2b00      	cmp	r3, #0
 810ff18:	d106      	bne.n	810ff28 <tcp_close_shutdown_fin+0x1c>
 810ff1a:	4b2e      	ldr	r3, [pc, #184]	@ (810ffd4 <tcp_close_shutdown_fin+0xc8>)
 810ff1c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 810ff20:	492d      	ldr	r1, [pc, #180]	@ (810ffd8 <tcp_close_shutdown_fin+0xcc>)
 810ff22:	482e      	ldr	r0, [pc, #184]	@ (810ffdc <tcp_close_shutdown_fin+0xd0>)
 810ff24:	f005 ff2c 	bl	8115d80 <iprintf>

  switch (pcb->state) {
 810ff28:	687b      	ldr	r3, [r7, #4]
 810ff2a:	7d1b      	ldrb	r3, [r3, #20]
 810ff2c:	2b07      	cmp	r3, #7
 810ff2e:	d020      	beq.n	810ff72 <tcp_close_shutdown_fin+0x66>
 810ff30:	2b07      	cmp	r3, #7
 810ff32:	dc2b      	bgt.n	810ff8c <tcp_close_shutdown_fin+0x80>
 810ff34:	2b03      	cmp	r3, #3
 810ff36:	d002      	beq.n	810ff3e <tcp_close_shutdown_fin+0x32>
 810ff38:	2b04      	cmp	r3, #4
 810ff3a:	d00d      	beq.n	810ff58 <tcp_close_shutdown_fin+0x4c>
 810ff3c:	e026      	b.n	810ff8c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 810ff3e:	6878      	ldr	r0, [r7, #4]
 810ff40:	f003 fee8 	bl	8113d14 <tcp_send_fin>
 810ff44:	4603      	mov	r3, r0
 810ff46:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 810ff48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810ff4c:	2b00      	cmp	r3, #0
 810ff4e:	d11f      	bne.n	810ff90 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 810ff50:	687b      	ldr	r3, [r7, #4]
 810ff52:	2205      	movs	r2, #5
 810ff54:	751a      	strb	r2, [r3, #20]
      }
      break;
 810ff56:	e01b      	b.n	810ff90 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 810ff58:	6878      	ldr	r0, [r7, #4]
 810ff5a:	f003 fedb 	bl	8113d14 <tcp_send_fin>
 810ff5e:	4603      	mov	r3, r0
 810ff60:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 810ff62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810ff66:	2b00      	cmp	r3, #0
 810ff68:	d114      	bne.n	810ff94 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 810ff6a:	687b      	ldr	r3, [r7, #4]
 810ff6c:	2205      	movs	r2, #5
 810ff6e:	751a      	strb	r2, [r3, #20]
      }
      break;
 810ff70:	e010      	b.n	810ff94 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 810ff72:	6878      	ldr	r0, [r7, #4]
 810ff74:	f003 fece 	bl	8113d14 <tcp_send_fin>
 810ff78:	4603      	mov	r3, r0
 810ff7a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 810ff7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810ff80:	2b00      	cmp	r3, #0
 810ff82:	d109      	bne.n	810ff98 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 810ff84:	687b      	ldr	r3, [r7, #4]
 810ff86:	2209      	movs	r2, #9
 810ff88:	751a      	strb	r2, [r3, #20]
      }
      break;
 810ff8a:	e005      	b.n	810ff98 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 810ff8c:	2300      	movs	r3, #0
 810ff8e:	e01c      	b.n	810ffca <tcp_close_shutdown_fin+0xbe>
      break;
 810ff90:	bf00      	nop
 810ff92:	e002      	b.n	810ff9a <tcp_close_shutdown_fin+0x8e>
      break;
 810ff94:	bf00      	nop
 810ff96:	e000      	b.n	810ff9a <tcp_close_shutdown_fin+0x8e>
      break;
 810ff98:	bf00      	nop
  }

  if (err == ERR_OK) {
 810ff9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810ff9e:	2b00      	cmp	r3, #0
 810ffa0:	d103      	bne.n	810ffaa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 810ffa2:	6878      	ldr	r0, [r7, #4]
 810ffa4:	f003 fff4 	bl	8113f90 <tcp_output>
 810ffa8:	e00d      	b.n	810ffc6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 810ffaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810ffae:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ffb2:	d108      	bne.n	810ffc6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 810ffb4:	687b      	ldr	r3, [r7, #4]
 810ffb6:	8b5b      	ldrh	r3, [r3, #26]
 810ffb8:	f043 0308 	orr.w	r3, r3, #8
 810ffbc:	b29a      	uxth	r2, r3
 810ffbe:	687b      	ldr	r3, [r7, #4]
 810ffc0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 810ffc2:	2300      	movs	r3, #0
 810ffc4:	e001      	b.n	810ffca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 810ffc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 810ffca:	4618      	mov	r0, r3
 810ffcc:	3710      	adds	r7, #16
 810ffce:	46bd      	mov	sp, r7
 810ffd0:	bd80      	pop	{r7, pc}
 810ffd2:	bf00      	nop
 810ffd4:	08117ff0 	.word	0x08117ff0
 810ffd8:	081180e0 	.word	0x081180e0
 810ffdc:	08118074 	.word	0x08118074

0810ffe0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 810ffe0:	b580      	push	{r7, lr}
 810ffe2:	b082      	sub	sp, #8
 810ffe4:	af00      	add	r7, sp, #0
 810ffe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 810ffe8:	687b      	ldr	r3, [r7, #4]
 810ffea:	2b00      	cmp	r3, #0
 810ffec:	d109      	bne.n	8110002 <tcp_close+0x22>
 810ffee:	4b0f      	ldr	r3, [pc, #60]	@ (811002c <tcp_close+0x4c>)
 810fff0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 810fff4:	490e      	ldr	r1, [pc, #56]	@ (8110030 <tcp_close+0x50>)
 810fff6:	480f      	ldr	r0, [pc, #60]	@ (8110034 <tcp_close+0x54>)
 810fff8:	f005 fec2 	bl	8115d80 <iprintf>
 810fffc:	f06f 030f 	mvn.w	r3, #15
 8110000:	e00f      	b.n	8110022 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8110002:	687b      	ldr	r3, [r7, #4]
 8110004:	7d1b      	ldrb	r3, [r3, #20]
 8110006:	2b01      	cmp	r3, #1
 8110008:	d006      	beq.n	8110018 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 811000a:	687b      	ldr	r3, [r7, #4]
 811000c:	8b5b      	ldrh	r3, [r3, #26]
 811000e:	f043 0310 	orr.w	r3, r3, #16
 8110012:	b29a      	uxth	r2, r3
 8110014:	687b      	ldr	r3, [r7, #4]
 8110016:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8110018:	2101      	movs	r1, #1
 811001a:	6878      	ldr	r0, [r7, #4]
 811001c:	f7ff fe94 	bl	810fd48 <tcp_close_shutdown>
 8110020:	4603      	mov	r3, r0
}
 8110022:	4618      	mov	r0, r3
 8110024:	3708      	adds	r7, #8
 8110026:	46bd      	mov	sp, r7
 8110028:	bd80      	pop	{r7, pc}
 811002a:	bf00      	nop
 811002c:	08117ff0 	.word	0x08117ff0
 8110030:	08118140 	.word	0x08118140
 8110034:	08118074 	.word	0x08118074

08110038 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8110038:	b580      	push	{r7, lr}
 811003a:	b08e      	sub	sp, #56	@ 0x38
 811003c:	af04      	add	r7, sp, #16
 811003e:	6078      	str	r0, [r7, #4]
 8110040:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8110042:	687b      	ldr	r3, [r7, #4]
 8110044:	2b00      	cmp	r3, #0
 8110046:	d107      	bne.n	8110058 <tcp_abandon+0x20>
 8110048:	4b52      	ldr	r3, [pc, #328]	@ (8110194 <tcp_abandon+0x15c>)
 811004a:	f240 223d 	movw	r2, #573	@ 0x23d
 811004e:	4952      	ldr	r1, [pc, #328]	@ (8110198 <tcp_abandon+0x160>)
 8110050:	4852      	ldr	r0, [pc, #328]	@ (811019c <tcp_abandon+0x164>)
 8110052:	f005 fe95 	bl	8115d80 <iprintf>
 8110056:	e099      	b.n	811018c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8110058:	687b      	ldr	r3, [r7, #4]
 811005a:	7d1b      	ldrb	r3, [r3, #20]
 811005c:	2b01      	cmp	r3, #1
 811005e:	d106      	bne.n	811006e <tcp_abandon+0x36>
 8110060:	4b4c      	ldr	r3, [pc, #304]	@ (8110194 <tcp_abandon+0x15c>)
 8110062:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8110066:	494e      	ldr	r1, [pc, #312]	@ (81101a0 <tcp_abandon+0x168>)
 8110068:	484c      	ldr	r0, [pc, #304]	@ (811019c <tcp_abandon+0x164>)
 811006a:	f005 fe89 	bl	8115d80 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 811006e:	687b      	ldr	r3, [r7, #4]
 8110070:	7d1b      	ldrb	r3, [r3, #20]
 8110072:	2b0a      	cmp	r3, #10
 8110074:	d107      	bne.n	8110086 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8110076:	6879      	ldr	r1, [r7, #4]
 8110078:	484a      	ldr	r0, [pc, #296]	@ (81101a4 <tcp_abandon+0x16c>)
 811007a:	f000 ffc9 	bl	8111010 <tcp_pcb_remove>
    tcp_free(pcb);
 811007e:	6878      	ldr	r0, [r7, #4]
 8110080:	f7ff fdb0 	bl	810fbe4 <tcp_free>
 8110084:	e082      	b.n	811018c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8110086:	2300      	movs	r3, #0
 8110088:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 811008a:	2300      	movs	r3, #0
 811008c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 811008e:	687b      	ldr	r3, [r7, #4]
 8110090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8110092:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8110094:	687b      	ldr	r3, [r7, #4]
 8110096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8110098:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 811009a:	687b      	ldr	r3, [r7, #4]
 811009c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81100a0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 81100a2:	687b      	ldr	r3, [r7, #4]
 81100a4:	691b      	ldr	r3, [r3, #16]
 81100a6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 81100a8:	687b      	ldr	r3, [r7, #4]
 81100aa:	7d1b      	ldrb	r3, [r3, #20]
 81100ac:	2b00      	cmp	r3, #0
 81100ae:	d126      	bne.n	81100fe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 81100b0:	687b      	ldr	r3, [r7, #4]
 81100b2:	8adb      	ldrh	r3, [r3, #22]
 81100b4:	2b00      	cmp	r3, #0
 81100b6:	d02e      	beq.n	8110116 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 81100b8:	4b3b      	ldr	r3, [pc, #236]	@ (81101a8 <tcp_abandon+0x170>)
 81100ba:	681b      	ldr	r3, [r3, #0]
 81100bc:	687a      	ldr	r2, [r7, #4]
 81100be:	429a      	cmp	r2, r3
 81100c0:	d105      	bne.n	81100ce <tcp_abandon+0x96>
 81100c2:	4b39      	ldr	r3, [pc, #228]	@ (81101a8 <tcp_abandon+0x170>)
 81100c4:	681b      	ldr	r3, [r3, #0]
 81100c6:	68db      	ldr	r3, [r3, #12]
 81100c8:	4a37      	ldr	r2, [pc, #220]	@ (81101a8 <tcp_abandon+0x170>)
 81100ca:	6013      	str	r3, [r2, #0]
 81100cc:	e013      	b.n	81100f6 <tcp_abandon+0xbe>
 81100ce:	4b36      	ldr	r3, [pc, #216]	@ (81101a8 <tcp_abandon+0x170>)
 81100d0:	681b      	ldr	r3, [r3, #0]
 81100d2:	61fb      	str	r3, [r7, #28]
 81100d4:	e00c      	b.n	81100f0 <tcp_abandon+0xb8>
 81100d6:	69fb      	ldr	r3, [r7, #28]
 81100d8:	68db      	ldr	r3, [r3, #12]
 81100da:	687a      	ldr	r2, [r7, #4]
 81100dc:	429a      	cmp	r2, r3
 81100de:	d104      	bne.n	81100ea <tcp_abandon+0xb2>
 81100e0:	687b      	ldr	r3, [r7, #4]
 81100e2:	68da      	ldr	r2, [r3, #12]
 81100e4:	69fb      	ldr	r3, [r7, #28]
 81100e6:	60da      	str	r2, [r3, #12]
 81100e8:	e005      	b.n	81100f6 <tcp_abandon+0xbe>
 81100ea:	69fb      	ldr	r3, [r7, #28]
 81100ec:	68db      	ldr	r3, [r3, #12]
 81100ee:	61fb      	str	r3, [r7, #28]
 81100f0:	69fb      	ldr	r3, [r7, #28]
 81100f2:	2b00      	cmp	r3, #0
 81100f4:	d1ef      	bne.n	81100d6 <tcp_abandon+0x9e>
 81100f6:	687b      	ldr	r3, [r7, #4]
 81100f8:	2200      	movs	r2, #0
 81100fa:	60da      	str	r2, [r3, #12]
 81100fc:	e00b      	b.n	8110116 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 81100fe:	683b      	ldr	r3, [r7, #0]
 8110100:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8110102:	687b      	ldr	r3, [r7, #4]
 8110104:	8adb      	ldrh	r3, [r3, #22]
 8110106:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8110108:	6879      	ldr	r1, [r7, #4]
 811010a:	4828      	ldr	r0, [pc, #160]	@ (81101ac <tcp_abandon+0x174>)
 811010c:	f000 ff80 	bl	8111010 <tcp_pcb_remove>
 8110110:	4b27      	ldr	r3, [pc, #156]	@ (81101b0 <tcp_abandon+0x178>)
 8110112:	2201      	movs	r2, #1
 8110114:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8110116:	687b      	ldr	r3, [r7, #4]
 8110118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811011a:	2b00      	cmp	r3, #0
 811011c:	d004      	beq.n	8110128 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 811011e:	687b      	ldr	r3, [r7, #4]
 8110120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8110122:	4618      	mov	r0, r3
 8110124:	f000 fd22 	bl	8110b6c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8110128:	687b      	ldr	r3, [r7, #4]
 811012a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811012c:	2b00      	cmp	r3, #0
 811012e:	d004      	beq.n	811013a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8110130:	687b      	ldr	r3, [r7, #4]
 8110132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110134:	4618      	mov	r0, r3
 8110136:	f000 fd19 	bl	8110b6c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 811013a:	687b      	ldr	r3, [r7, #4]
 811013c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811013e:	2b00      	cmp	r3, #0
 8110140:	d004      	beq.n	811014c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8110142:	687b      	ldr	r3, [r7, #4]
 8110144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8110146:	4618      	mov	r0, r3
 8110148:	f000 fd10 	bl	8110b6c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 811014c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811014e:	2b00      	cmp	r3, #0
 8110150:	d00e      	beq.n	8110170 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8110152:	6879      	ldr	r1, [r7, #4]
 8110154:	687b      	ldr	r3, [r7, #4]
 8110156:	3304      	adds	r3, #4
 8110158:	687a      	ldr	r2, [r7, #4]
 811015a:	8b12      	ldrh	r2, [r2, #24]
 811015c:	9202      	str	r2, [sp, #8]
 811015e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8110160:	9201      	str	r2, [sp, #4]
 8110162:	9300      	str	r3, [sp, #0]
 8110164:	460b      	mov	r3, r1
 8110166:	697a      	ldr	r2, [r7, #20]
 8110168:	69b9      	ldr	r1, [r7, #24]
 811016a:	6878      	ldr	r0, [r7, #4]
 811016c:	f004 fcc4 	bl	8114af8 <tcp_rst>
    }
    last_state = pcb->state;
 8110170:	687b      	ldr	r3, [r7, #4]
 8110172:	7d1b      	ldrb	r3, [r3, #20]
 8110174:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8110176:	6878      	ldr	r0, [r7, #4]
 8110178:	f7ff fd34 	bl	810fbe4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 811017c:	693b      	ldr	r3, [r7, #16]
 811017e:	2b00      	cmp	r3, #0
 8110180:	d004      	beq.n	811018c <tcp_abandon+0x154>
 8110182:	693b      	ldr	r3, [r7, #16]
 8110184:	f06f 010c 	mvn.w	r1, #12
 8110188:	68f8      	ldr	r0, [r7, #12]
 811018a:	4798      	blx	r3
  }
}
 811018c:	3728      	adds	r7, #40	@ 0x28
 811018e:	46bd      	mov	sp, r7
 8110190:	bd80      	pop	{r7, pc}
 8110192:	bf00      	nop
 8110194:	08117ff0 	.word	0x08117ff0
 8110198:	08118174 	.word	0x08118174
 811019c:	08118074 	.word	0x08118074
 81101a0:	08118190 	.word	0x08118190
 81101a4:	10011c5c 	.word	0x10011c5c
 81101a8:	10011c50 	.word	0x10011c50
 81101ac:	10011c58 	.word	0x10011c58
 81101b0:	10011c60 	.word	0x10011c60

081101b4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 81101b4:	b580      	push	{r7, lr}
 81101b6:	b082      	sub	sp, #8
 81101b8:	af00      	add	r7, sp, #0
 81101ba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 81101bc:	2101      	movs	r1, #1
 81101be:	6878      	ldr	r0, [r7, #4]
 81101c0:	f7ff ff3a 	bl	8110038 <tcp_abandon>
}
 81101c4:	bf00      	nop
 81101c6:	3708      	adds	r7, #8
 81101c8:	46bd      	mov	sp, r7
 81101ca:	bd80      	pop	{r7, pc}

081101cc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 81101cc:	b580      	push	{r7, lr}
 81101ce:	b084      	sub	sp, #16
 81101d0:	af00      	add	r7, sp, #0
 81101d2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 81101d4:	687b      	ldr	r3, [r7, #4]
 81101d6:	2b00      	cmp	r3, #0
 81101d8:	d106      	bne.n	81101e8 <tcp_update_rcv_ann_wnd+0x1c>
 81101da:	4b25      	ldr	r3, [pc, #148]	@ (8110270 <tcp_update_rcv_ann_wnd+0xa4>)
 81101dc:	f240 32a6 	movw	r2, #934	@ 0x3a6
 81101e0:	4924      	ldr	r1, [pc, #144]	@ (8110274 <tcp_update_rcv_ann_wnd+0xa8>)
 81101e2:	4825      	ldr	r0, [pc, #148]	@ (8110278 <tcp_update_rcv_ann_wnd+0xac>)
 81101e4:	f005 fdcc 	bl	8115d80 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 81101e8:	687b      	ldr	r3, [r7, #4]
 81101ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81101ec:	687a      	ldr	r2, [r7, #4]
 81101ee:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 81101f0:	4413      	add	r3, r2
 81101f2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 81101f4:	687b      	ldr	r3, [r7, #4]
 81101f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81101f8:	687a      	ldr	r2, [r7, #4]
 81101fa:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 81101fc:	f640 3168 	movw	r1, #2920	@ 0xb68
 8110200:	428a      	cmp	r2, r1
 8110202:	bf28      	it	cs
 8110204:	460a      	movcs	r2, r1
 8110206:	b292      	uxth	r2, r2
 8110208:	4413      	add	r3, r2
 811020a:	68fa      	ldr	r2, [r7, #12]
 811020c:	1ad3      	subs	r3, r2, r3
 811020e:	2b00      	cmp	r3, #0
 8110210:	db08      	blt.n	8110224 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8110212:	687b      	ldr	r3, [r7, #4]
 8110214:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8110216:	687b      	ldr	r3, [r7, #4]
 8110218:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 811021a:	687b      	ldr	r3, [r7, #4]
 811021c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811021e:	68fa      	ldr	r2, [r7, #12]
 8110220:	1ad3      	subs	r3, r2, r3
 8110222:	e020      	b.n	8110266 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8110224:	687b      	ldr	r3, [r7, #4]
 8110226:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8110228:	687b      	ldr	r3, [r7, #4]
 811022a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811022c:	1ad3      	subs	r3, r2, r3
 811022e:	2b00      	cmp	r3, #0
 8110230:	dd03      	ble.n	811023a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8110232:	687b      	ldr	r3, [r7, #4]
 8110234:	2200      	movs	r2, #0
 8110236:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8110238:	e014      	b.n	8110264 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 811023a:	687b      	ldr	r3, [r7, #4]
 811023c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811023e:	687b      	ldr	r3, [r7, #4]
 8110240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8110242:	1ad3      	subs	r3, r2, r3
 8110244:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8110246:	68bb      	ldr	r3, [r7, #8]
 8110248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811024c:	d306      	bcc.n	811025c <tcp_update_rcv_ann_wnd+0x90>
 811024e:	4b08      	ldr	r3, [pc, #32]	@ (8110270 <tcp_update_rcv_ann_wnd+0xa4>)
 8110250:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8110254:	4909      	ldr	r1, [pc, #36]	@ (811027c <tcp_update_rcv_ann_wnd+0xb0>)
 8110256:	4808      	ldr	r0, [pc, #32]	@ (8110278 <tcp_update_rcv_ann_wnd+0xac>)
 8110258:	f005 fd92 	bl	8115d80 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 811025c:	68bb      	ldr	r3, [r7, #8]
 811025e:	b29a      	uxth	r2, r3
 8110260:	687b      	ldr	r3, [r7, #4]
 8110262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8110264:	2300      	movs	r3, #0
  }
}
 8110266:	4618      	mov	r0, r3
 8110268:	3710      	adds	r7, #16
 811026a:	46bd      	mov	sp, r7
 811026c:	bd80      	pop	{r7, pc}
 811026e:	bf00      	nop
 8110270:	08117ff0 	.word	0x08117ff0
 8110274:	0811828c 	.word	0x0811828c
 8110278:	08118074 	.word	0x08118074
 811027c:	081182b0 	.word	0x081182b0

08110280 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8110280:	b580      	push	{r7, lr}
 8110282:	b084      	sub	sp, #16
 8110284:	af00      	add	r7, sp, #0
 8110286:	6078      	str	r0, [r7, #4]
 8110288:	460b      	mov	r3, r1
 811028a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 811028c:	687b      	ldr	r3, [r7, #4]
 811028e:	2b00      	cmp	r3, #0
 8110290:	d107      	bne.n	81102a2 <tcp_recved+0x22>
 8110292:	4b20      	ldr	r3, [pc, #128]	@ (8110314 <tcp_recved+0x94>)
 8110294:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8110298:	491f      	ldr	r1, [pc, #124]	@ (8110318 <tcp_recved+0x98>)
 811029a:	4820      	ldr	r0, [pc, #128]	@ (811031c <tcp_recved+0x9c>)
 811029c:	f005 fd70 	bl	8115d80 <iprintf>
 81102a0:	e034      	b.n	811030c <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 81102a2:	687b      	ldr	r3, [r7, #4]
 81102a4:	7d1b      	ldrb	r3, [r3, #20]
 81102a6:	2b01      	cmp	r3, #1
 81102a8:	d106      	bne.n	81102b8 <tcp_recved+0x38>
 81102aa:	4b1a      	ldr	r3, [pc, #104]	@ (8110314 <tcp_recved+0x94>)
 81102ac:	f240 32d2 	movw	r2, #978	@ 0x3d2
 81102b0:	491b      	ldr	r1, [pc, #108]	@ (8110320 <tcp_recved+0xa0>)
 81102b2:	481a      	ldr	r0, [pc, #104]	@ (811031c <tcp_recved+0x9c>)
 81102b4:	f005 fd64 	bl	8115d80 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 81102b8:	687b      	ldr	r3, [r7, #4]
 81102ba:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 81102bc:	887b      	ldrh	r3, [r7, #2]
 81102be:	4413      	add	r3, r2
 81102c0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 81102c2:	89fb      	ldrh	r3, [r7, #14]
 81102c4:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81102c8:	4293      	cmp	r3, r2
 81102ca:	d804      	bhi.n	81102d6 <tcp_recved+0x56>
 81102cc:	687b      	ldr	r3, [r7, #4]
 81102ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81102d0:	89fa      	ldrh	r2, [r7, #14]
 81102d2:	429a      	cmp	r2, r3
 81102d4:	d204      	bcs.n	81102e0 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 81102d6:	687b      	ldr	r3, [r7, #4]
 81102d8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81102dc:	851a      	strh	r2, [r3, #40]	@ 0x28
 81102de:	e002      	b.n	81102e6 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 81102e0:	687b      	ldr	r3, [r7, #4]
 81102e2:	89fa      	ldrh	r2, [r7, #14]
 81102e4:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 81102e6:	6878      	ldr	r0, [r7, #4]
 81102e8:	f7ff ff70 	bl	81101cc <tcp_update_rcv_ann_wnd>
 81102ec:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 81102ee:	68bb      	ldr	r3, [r7, #8]
 81102f0:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 81102f4:	4293      	cmp	r3, r2
 81102f6:	d909      	bls.n	811030c <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 81102f8:	687b      	ldr	r3, [r7, #4]
 81102fa:	8b5b      	ldrh	r3, [r3, #26]
 81102fc:	f043 0302 	orr.w	r3, r3, #2
 8110300:	b29a      	uxth	r2, r3
 8110302:	687b      	ldr	r3, [r7, #4]
 8110304:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8110306:	6878      	ldr	r0, [r7, #4]
 8110308:	f003 fe42 	bl	8113f90 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 811030c:	3710      	adds	r7, #16
 811030e:	46bd      	mov	sp, r7
 8110310:	bd80      	pop	{r7, pc}
 8110312:	bf00      	nop
 8110314:	08117ff0 	.word	0x08117ff0
 8110318:	081182cc 	.word	0x081182cc
 811031c:	08118074 	.word	0x08118074
 8110320:	081182e4 	.word	0x081182e4

08110324 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8110324:	b5b0      	push	{r4, r5, r7, lr}
 8110326:	b090      	sub	sp, #64	@ 0x40
 8110328:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 811032a:	2300      	movs	r3, #0
 811032c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8110330:	4b95      	ldr	r3, [pc, #596]	@ (8110588 <tcp_slowtmr+0x264>)
 8110332:	681b      	ldr	r3, [r3, #0]
 8110334:	3301      	adds	r3, #1
 8110336:	4a94      	ldr	r2, [pc, #592]	@ (8110588 <tcp_slowtmr+0x264>)
 8110338:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 811033a:	4b94      	ldr	r3, [pc, #592]	@ (811058c <tcp_slowtmr+0x268>)
 811033c:	781b      	ldrb	r3, [r3, #0]
 811033e:	3301      	adds	r3, #1
 8110340:	b2da      	uxtb	r2, r3
 8110342:	4b92      	ldr	r3, [pc, #584]	@ (811058c <tcp_slowtmr+0x268>)
 8110344:	701a      	strb	r2, [r3, #0]
 8110346:	e000      	b.n	811034a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8110348:	bf00      	nop
  prev = NULL;
 811034a:	2300      	movs	r3, #0
 811034c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 811034e:	4b90      	ldr	r3, [pc, #576]	@ (8110590 <tcp_slowtmr+0x26c>)
 8110350:	681b      	ldr	r3, [r3, #0]
 8110352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8110354:	e29f      	b.n	8110896 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8110356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110358:	7d1b      	ldrb	r3, [r3, #20]
 811035a:	2b00      	cmp	r3, #0
 811035c:	d106      	bne.n	811036c <tcp_slowtmr+0x48>
 811035e:	4b8d      	ldr	r3, [pc, #564]	@ (8110594 <tcp_slowtmr+0x270>)
 8110360:	f240 42be 	movw	r2, #1214	@ 0x4be
 8110364:	498c      	ldr	r1, [pc, #560]	@ (8110598 <tcp_slowtmr+0x274>)
 8110366:	488d      	ldr	r0, [pc, #564]	@ (811059c <tcp_slowtmr+0x278>)
 8110368:	f005 fd0a 	bl	8115d80 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 811036c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811036e:	7d1b      	ldrb	r3, [r3, #20]
 8110370:	2b01      	cmp	r3, #1
 8110372:	d106      	bne.n	8110382 <tcp_slowtmr+0x5e>
 8110374:	4b87      	ldr	r3, [pc, #540]	@ (8110594 <tcp_slowtmr+0x270>)
 8110376:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 811037a:	4989      	ldr	r1, [pc, #548]	@ (81105a0 <tcp_slowtmr+0x27c>)
 811037c:	4887      	ldr	r0, [pc, #540]	@ (811059c <tcp_slowtmr+0x278>)
 811037e:	f005 fcff 	bl	8115d80 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8110382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110384:	7d1b      	ldrb	r3, [r3, #20]
 8110386:	2b0a      	cmp	r3, #10
 8110388:	d106      	bne.n	8110398 <tcp_slowtmr+0x74>
 811038a:	4b82      	ldr	r3, [pc, #520]	@ (8110594 <tcp_slowtmr+0x270>)
 811038c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8110390:	4984      	ldr	r1, [pc, #528]	@ (81105a4 <tcp_slowtmr+0x280>)
 8110392:	4882      	ldr	r0, [pc, #520]	@ (811059c <tcp_slowtmr+0x278>)
 8110394:	f005 fcf4 	bl	8115d80 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8110398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811039a:	7f9a      	ldrb	r2, [r3, #30]
 811039c:	4b7b      	ldr	r3, [pc, #492]	@ (811058c <tcp_slowtmr+0x268>)
 811039e:	781b      	ldrb	r3, [r3, #0]
 81103a0:	429a      	cmp	r2, r3
 81103a2:	d105      	bne.n	81103b0 <tcp_slowtmr+0x8c>
      prev = pcb;
 81103a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81103a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 81103a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81103aa:	68db      	ldr	r3, [r3, #12]
 81103ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 81103ae:	e272      	b.n	8110896 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 81103b0:	4b76      	ldr	r3, [pc, #472]	@ (811058c <tcp_slowtmr+0x268>)
 81103b2:	781a      	ldrb	r2, [r3, #0]
 81103b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81103b6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 81103b8:	2300      	movs	r3, #0
 81103ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 81103be:	2300      	movs	r3, #0
 81103c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 81103c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81103c6:	7d1b      	ldrb	r3, [r3, #20]
 81103c8:	2b02      	cmp	r3, #2
 81103ca:	d10a      	bne.n	81103e2 <tcp_slowtmr+0xbe>
 81103cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81103ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81103d2:	2b05      	cmp	r3, #5
 81103d4:	d905      	bls.n	81103e2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 81103d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81103da:	3301      	adds	r3, #1
 81103dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 81103e0:	e11e      	b.n	8110620 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 81103e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81103e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81103e8:	2b0b      	cmp	r3, #11
 81103ea:	d905      	bls.n	81103f8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 81103ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81103f0:	3301      	adds	r3, #1
 81103f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 81103f6:	e113      	b.n	8110620 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 81103f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81103fa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 81103fe:	2b00      	cmp	r3, #0
 8110400:	d075      	beq.n	81104ee <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8110402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8110406:	2b00      	cmp	r3, #0
 8110408:	d006      	beq.n	8110418 <tcp_slowtmr+0xf4>
 811040a:	4b62      	ldr	r3, [pc, #392]	@ (8110594 <tcp_slowtmr+0x270>)
 811040c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8110410:	4965      	ldr	r1, [pc, #404]	@ (81105a8 <tcp_slowtmr+0x284>)
 8110412:	4862      	ldr	r0, [pc, #392]	@ (811059c <tcp_slowtmr+0x278>)
 8110414:	f005 fcb4 	bl	8115d80 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8110418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811041a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811041c:	2b00      	cmp	r3, #0
 811041e:	d106      	bne.n	811042e <tcp_slowtmr+0x10a>
 8110420:	4b5c      	ldr	r3, [pc, #368]	@ (8110594 <tcp_slowtmr+0x270>)
 8110422:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8110426:	4961      	ldr	r1, [pc, #388]	@ (81105ac <tcp_slowtmr+0x288>)
 8110428:	485c      	ldr	r0, [pc, #368]	@ (811059c <tcp_slowtmr+0x278>)
 811042a:	f005 fca9 	bl	8115d80 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 811042e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110430:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8110434:	2b0b      	cmp	r3, #11
 8110436:	d905      	bls.n	8110444 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8110438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811043c:	3301      	adds	r3, #1
 811043e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8110442:	e0ed      	b.n	8110620 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8110444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110446:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 811044a:	3b01      	subs	r3, #1
 811044c:	4a58      	ldr	r2, [pc, #352]	@ (81105b0 <tcp_slowtmr+0x28c>)
 811044e:	5cd3      	ldrb	r3, [r2, r3]
 8110450:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8110452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110454:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8110458:	7c7a      	ldrb	r2, [r7, #17]
 811045a:	429a      	cmp	r2, r3
 811045c:	d907      	bls.n	811046e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 811045e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110460:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8110464:	3301      	adds	r3, #1
 8110466:	b2da      	uxtb	r2, r3
 8110468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811046a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 811046e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110470:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8110474:	7c7a      	ldrb	r2, [r7, #17]
 8110476:	429a      	cmp	r2, r3
 8110478:	f200 80d2 	bhi.w	8110620 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 811047c:	2301      	movs	r3, #1
 811047e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8110480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110482:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8110486:	2b00      	cmp	r3, #0
 8110488:	d108      	bne.n	811049c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 811048a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811048c:	f004 fc28 	bl	8114ce0 <tcp_zero_window_probe>
 8110490:	4603      	mov	r3, r0
 8110492:	2b00      	cmp	r3, #0
 8110494:	d014      	beq.n	81104c0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8110496:	2300      	movs	r3, #0
 8110498:	623b      	str	r3, [r7, #32]
 811049a:	e011      	b.n	81104c0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 811049c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811049e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81104a2:	4619      	mov	r1, r3
 81104a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81104a6:	f003 faed 	bl	8113a84 <tcp_split_unsent_seg>
 81104aa:	4603      	mov	r3, r0
 81104ac:	2b00      	cmp	r3, #0
 81104ae:	d107      	bne.n	81104c0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 81104b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81104b2:	f003 fd6d 	bl	8113f90 <tcp_output>
 81104b6:	4603      	mov	r3, r0
 81104b8:	2b00      	cmp	r3, #0
 81104ba:	d101      	bne.n	81104c0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 81104bc:	2300      	movs	r3, #0
 81104be:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 81104c0:	6a3b      	ldr	r3, [r7, #32]
 81104c2:	2b00      	cmp	r3, #0
 81104c4:	f000 80ac 	beq.w	8110620 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 81104c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81104ca:	2200      	movs	r2, #0
 81104cc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 81104d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81104d2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 81104d6:	2b06      	cmp	r3, #6
 81104d8:	f200 80a2 	bhi.w	8110620 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 81104dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81104de:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 81104e2:	3301      	adds	r3, #1
 81104e4:	b2da      	uxtb	r2, r3
 81104e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81104e8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 81104ec:	e098      	b.n	8110620 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 81104ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81104f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 81104f4:	2b00      	cmp	r3, #0
 81104f6:	db0f      	blt.n	8110518 <tcp_slowtmr+0x1f4>
 81104f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81104fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 81104fe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8110502:	4293      	cmp	r3, r2
 8110504:	d008      	beq.n	8110518 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8110506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110508:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811050c:	b29b      	uxth	r3, r3
 811050e:	3301      	adds	r3, #1
 8110510:	b29b      	uxth	r3, r3
 8110512:	b21a      	sxth	r2, r3
 8110514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110516:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8110518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811051a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 811051e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110520:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8110524:	429a      	cmp	r2, r3
 8110526:	db7b      	blt.n	8110620 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8110528:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811052a:	f004 f825 	bl	8114578 <tcp_rexmit_rto_prepare>
 811052e:	4603      	mov	r3, r0
 8110530:	2b00      	cmp	r3, #0
 8110532:	d007      	beq.n	8110544 <tcp_slowtmr+0x220>
 8110534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8110538:	2b00      	cmp	r3, #0
 811053a:	d171      	bne.n	8110620 <tcp_slowtmr+0x2fc>
 811053c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811053e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110540:	2b00      	cmp	r3, #0
 8110542:	d06d      	beq.n	8110620 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8110544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110546:	7d1b      	ldrb	r3, [r3, #20]
 8110548:	2b02      	cmp	r3, #2
 811054a:	d03a      	beq.n	81105c2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 811054c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811054e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8110552:	2b0c      	cmp	r3, #12
 8110554:	bf28      	it	cs
 8110556:	230c      	movcs	r3, #12
 8110558:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 811055a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811055c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8110560:	10db      	asrs	r3, r3, #3
 8110562:	b21b      	sxth	r3, r3
 8110564:	461a      	mov	r2, r3
 8110566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110568:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811056c:	4413      	add	r3, r2
 811056e:	7efa      	ldrb	r2, [r7, #27]
 8110570:	4910      	ldr	r1, [pc, #64]	@ (81105b4 <tcp_slowtmr+0x290>)
 8110572:	5c8a      	ldrb	r2, [r1, r2]
 8110574:	4093      	lsls	r3, r2
 8110576:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8110578:	697b      	ldr	r3, [r7, #20]
 811057a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 811057e:	4293      	cmp	r3, r2
 8110580:	dc1a      	bgt.n	81105b8 <tcp_slowtmr+0x294>
 8110582:	697b      	ldr	r3, [r7, #20]
 8110584:	b21a      	sxth	r2, r3
 8110586:	e019      	b.n	81105bc <tcp_slowtmr+0x298>
 8110588:	10011c4c 	.word	0x10011c4c
 811058c:	10011c62 	.word	0x10011c62
 8110590:	10011c58 	.word	0x10011c58
 8110594:	08117ff0 	.word	0x08117ff0
 8110598:	08118374 	.word	0x08118374
 811059c:	08118074 	.word	0x08118074
 81105a0:	081183a0 	.word	0x081183a0
 81105a4:	081183cc 	.word	0x081183cc
 81105a8:	081183fc 	.word	0x081183fc
 81105ac:	08118430 	.word	0x08118430
 81105b0:	08119c20 	.word	0x08119c20
 81105b4:	08119c10 	.word	0x08119c10
 81105b8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 81105bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81105be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 81105c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81105c4:	2200      	movs	r2, #0
 81105c6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 81105c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81105ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 81105ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81105d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 81105d4:	4293      	cmp	r3, r2
 81105d6:	bf28      	it	cs
 81105d8:	4613      	movcs	r3, r2
 81105da:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 81105dc:	8a7b      	ldrh	r3, [r7, #18]
 81105de:	085b      	lsrs	r3, r3, #1
 81105e0:	b29a      	uxth	r2, r3
 81105e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81105e4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 81105e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81105ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 81105ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81105f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81105f2:	005b      	lsls	r3, r3, #1
 81105f4:	b29b      	uxth	r3, r3
 81105f6:	429a      	cmp	r2, r3
 81105f8:	d206      	bcs.n	8110608 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 81105fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81105fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81105fe:	005b      	lsls	r3, r3, #1
 8110600:	b29a      	uxth	r2, r3
 8110602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110604:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8110608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811060a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 811060c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811060e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8110612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110614:	2200      	movs	r2, #0
 8110616:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 811061a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811061c:	f004 f81c 	bl	8114658 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8110620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110622:	7d1b      	ldrb	r3, [r3, #20]
 8110624:	2b06      	cmp	r3, #6
 8110626:	d111      	bne.n	811064c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8110628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811062a:	8b5b      	ldrh	r3, [r3, #26]
 811062c:	f003 0310 	and.w	r3, r3, #16
 8110630:	2b00      	cmp	r3, #0
 8110632:	d00b      	beq.n	811064c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8110634:	4b9d      	ldr	r3, [pc, #628]	@ (81108ac <tcp_slowtmr+0x588>)
 8110636:	681a      	ldr	r2, [r3, #0]
 8110638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811063a:	6a1b      	ldr	r3, [r3, #32]
 811063c:	1ad3      	subs	r3, r2, r3
 811063e:	2b28      	cmp	r3, #40	@ 0x28
 8110640:	d904      	bls.n	811064c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8110642:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8110646:	3301      	adds	r3, #1
 8110648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 811064c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811064e:	7a5b      	ldrb	r3, [r3, #9]
 8110650:	f003 0308 	and.w	r3, r3, #8
 8110654:	2b00      	cmp	r3, #0
 8110656:	d04c      	beq.n	81106f2 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8110658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811065a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 811065c:	2b04      	cmp	r3, #4
 811065e:	d003      	beq.n	8110668 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8110660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110662:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8110664:	2b07      	cmp	r3, #7
 8110666:	d144      	bne.n	81106f2 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8110668:	4b90      	ldr	r3, [pc, #576]	@ (81108ac <tcp_slowtmr+0x588>)
 811066a:	681a      	ldr	r2, [r3, #0]
 811066c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811066e:	6a1b      	ldr	r3, [r3, #32]
 8110670:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8110672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110674:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8110678:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 811067c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8110680:	498b      	ldr	r1, [pc, #556]	@ (81108b0 <tcp_slowtmr+0x58c>)
 8110682:	fba1 1303 	umull	r1, r3, r1, r3
 8110686:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8110688:	429a      	cmp	r2, r3
 811068a:	d90a      	bls.n	81106a2 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 811068c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8110690:	3301      	adds	r3, #1
 8110692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8110696:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 811069a:	3301      	adds	r3, #1
 811069c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 81106a0:	e027      	b.n	81106f2 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 81106a2:	4b82      	ldr	r3, [pc, #520]	@ (81108ac <tcp_slowtmr+0x588>)
 81106a4:	681a      	ldr	r2, [r3, #0]
 81106a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81106a8:	6a1b      	ldr	r3, [r3, #32]
 81106aa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 81106ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81106ae:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 81106b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81106b4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 81106b8:	4618      	mov	r0, r3
 81106ba:	4b7e      	ldr	r3, [pc, #504]	@ (81108b4 <tcp_slowtmr+0x590>)
 81106bc:	fb00 f303 	mul.w	r3, r0, r3
 81106c0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 81106c2:	497b      	ldr	r1, [pc, #492]	@ (81108b0 <tcp_slowtmr+0x58c>)
 81106c4:	fba1 1303 	umull	r1, r3, r1, r3
 81106c8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 81106ca:	429a      	cmp	r2, r3
 81106cc:	d911      	bls.n	81106f2 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 81106ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81106d0:	f004 fac6 	bl	8114c60 <tcp_keepalive>
 81106d4:	4603      	mov	r3, r0
 81106d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 81106da:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 81106de:	2b00      	cmp	r3, #0
 81106e0:	d107      	bne.n	81106f2 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 81106e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81106e4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 81106e8:	3301      	adds	r3, #1
 81106ea:	b2da      	uxtb	r2, r3
 81106ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81106ee:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 81106f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81106f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81106f6:	2b00      	cmp	r3, #0
 81106f8:	d011      	beq.n	811071e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 81106fa:	4b6c      	ldr	r3, [pc, #432]	@ (81108ac <tcp_slowtmr+0x588>)
 81106fc:	681a      	ldr	r2, [r3, #0]
 81106fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110700:	6a1b      	ldr	r3, [r3, #32]
 8110702:	1ad2      	subs	r2, r2, r3
 8110704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110706:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 811070a:	4619      	mov	r1, r3
 811070c:	460b      	mov	r3, r1
 811070e:	005b      	lsls	r3, r3, #1
 8110710:	440b      	add	r3, r1
 8110712:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8110714:	429a      	cmp	r2, r3
 8110716:	d302      	bcc.n	811071e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8110718:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811071a:	f000 fddd 	bl	81112d8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 811071e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110720:	7d1b      	ldrb	r3, [r3, #20]
 8110722:	2b03      	cmp	r3, #3
 8110724:	d10b      	bne.n	811073e <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8110726:	4b61      	ldr	r3, [pc, #388]	@ (81108ac <tcp_slowtmr+0x588>)
 8110728:	681a      	ldr	r2, [r3, #0]
 811072a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811072c:	6a1b      	ldr	r3, [r3, #32]
 811072e:	1ad3      	subs	r3, r2, r3
 8110730:	2b28      	cmp	r3, #40	@ 0x28
 8110732:	d904      	bls.n	811073e <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8110734:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8110738:	3301      	adds	r3, #1
 811073a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 811073e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110740:	7d1b      	ldrb	r3, [r3, #20]
 8110742:	2b09      	cmp	r3, #9
 8110744:	d10b      	bne.n	811075e <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8110746:	4b59      	ldr	r3, [pc, #356]	@ (81108ac <tcp_slowtmr+0x588>)
 8110748:	681a      	ldr	r2, [r3, #0]
 811074a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811074c:	6a1b      	ldr	r3, [r3, #32]
 811074e:	1ad3      	subs	r3, r2, r3
 8110750:	2bf0      	cmp	r3, #240	@ 0xf0
 8110752:	d904      	bls.n	811075e <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8110754:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8110758:	3301      	adds	r3, #1
 811075a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 811075e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8110762:	2b00      	cmp	r3, #0
 8110764:	d060      	beq.n	8110828 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8110766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811076c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 811076e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8110770:	f000 fbfe 	bl	8110f70 <tcp_pcb_purge>
      if (prev != NULL) {
 8110774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110776:	2b00      	cmp	r3, #0
 8110778:	d010      	beq.n	811079c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 811077a:	4b4f      	ldr	r3, [pc, #316]	@ (81108b8 <tcp_slowtmr+0x594>)
 811077c:	681b      	ldr	r3, [r3, #0]
 811077e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110780:	429a      	cmp	r2, r3
 8110782:	d106      	bne.n	8110792 <tcp_slowtmr+0x46e>
 8110784:	4b4d      	ldr	r3, [pc, #308]	@ (81108bc <tcp_slowtmr+0x598>)
 8110786:	f240 526d 	movw	r2, #1389	@ 0x56d
 811078a:	494d      	ldr	r1, [pc, #308]	@ (81108c0 <tcp_slowtmr+0x59c>)
 811078c:	484d      	ldr	r0, [pc, #308]	@ (81108c4 <tcp_slowtmr+0x5a0>)
 811078e:	f005 faf7 	bl	8115d80 <iprintf>
        prev->next = pcb->next;
 8110792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110794:	68da      	ldr	r2, [r3, #12]
 8110796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110798:	60da      	str	r2, [r3, #12]
 811079a:	e00f      	b.n	81107bc <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 811079c:	4b46      	ldr	r3, [pc, #280]	@ (81108b8 <tcp_slowtmr+0x594>)
 811079e:	681b      	ldr	r3, [r3, #0]
 81107a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81107a2:	429a      	cmp	r2, r3
 81107a4:	d006      	beq.n	81107b4 <tcp_slowtmr+0x490>
 81107a6:	4b45      	ldr	r3, [pc, #276]	@ (81108bc <tcp_slowtmr+0x598>)
 81107a8:	f240 5271 	movw	r2, #1393	@ 0x571
 81107ac:	4946      	ldr	r1, [pc, #280]	@ (81108c8 <tcp_slowtmr+0x5a4>)
 81107ae:	4845      	ldr	r0, [pc, #276]	@ (81108c4 <tcp_slowtmr+0x5a0>)
 81107b0:	f005 fae6 	bl	8115d80 <iprintf>
        tcp_active_pcbs = pcb->next;
 81107b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81107b6:	68db      	ldr	r3, [r3, #12]
 81107b8:	4a3f      	ldr	r2, [pc, #252]	@ (81108b8 <tcp_slowtmr+0x594>)
 81107ba:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 81107bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 81107c0:	2b00      	cmp	r3, #0
 81107c2:	d013      	beq.n	81107ec <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 81107c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81107c6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 81107c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81107ca:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 81107cc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 81107ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81107d0:	3304      	adds	r3, #4
 81107d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81107d4:	8ad2      	ldrh	r2, [r2, #22]
 81107d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81107d8:	8b09      	ldrh	r1, [r1, #24]
 81107da:	9102      	str	r1, [sp, #8]
 81107dc:	9201      	str	r2, [sp, #4]
 81107de:	9300      	str	r3, [sp, #0]
 81107e0:	462b      	mov	r3, r5
 81107e2:	4622      	mov	r2, r4
 81107e4:	4601      	mov	r1, r0
 81107e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81107e8:	f004 f986 	bl	8114af8 <tcp_rst>
      err_arg = pcb->callback_arg;
 81107ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81107ee:	691b      	ldr	r3, [r3, #16]
 81107f0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 81107f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81107f4:	7d1b      	ldrb	r3, [r3, #20]
 81107f6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 81107f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81107fa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 81107fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81107fe:	68db      	ldr	r3, [r3, #12]
 8110800:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8110802:	6838      	ldr	r0, [r7, #0]
 8110804:	f7ff f9ee 	bl	810fbe4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8110808:	4b30      	ldr	r3, [pc, #192]	@ (81108cc <tcp_slowtmr+0x5a8>)
 811080a:	2200      	movs	r2, #0
 811080c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 811080e:	68fb      	ldr	r3, [r7, #12]
 8110810:	2b00      	cmp	r3, #0
 8110812:	d004      	beq.n	811081e <tcp_slowtmr+0x4fa>
 8110814:	68fb      	ldr	r3, [r7, #12]
 8110816:	f06f 010c 	mvn.w	r1, #12
 811081a:	68b8      	ldr	r0, [r7, #8]
 811081c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 811081e:	4b2b      	ldr	r3, [pc, #172]	@ (81108cc <tcp_slowtmr+0x5a8>)
 8110820:	781b      	ldrb	r3, [r3, #0]
 8110822:	2b00      	cmp	r3, #0
 8110824:	d037      	beq.n	8110896 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8110826:	e590      	b.n	811034a <tcp_slowtmr+0x26>
      prev = pcb;
 8110828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811082a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 811082c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811082e:	68db      	ldr	r3, [r3, #12]
 8110830:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8110832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110834:	7f1b      	ldrb	r3, [r3, #28]
 8110836:	3301      	adds	r3, #1
 8110838:	b2da      	uxtb	r2, r3
 811083a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811083c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 811083e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110840:	7f1a      	ldrb	r2, [r3, #28]
 8110842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110844:	7f5b      	ldrb	r3, [r3, #29]
 8110846:	429a      	cmp	r2, r3
 8110848:	d325      	bcc.n	8110896 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 811084a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811084c:	2200      	movs	r2, #0
 811084e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8110850:	4b1e      	ldr	r3, [pc, #120]	@ (81108cc <tcp_slowtmr+0x5a8>)
 8110852:	2200      	movs	r2, #0
 8110854:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8110856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 811085c:	2b00      	cmp	r3, #0
 811085e:	d00b      	beq.n	8110878 <tcp_slowtmr+0x554>
 8110860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8110866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8110868:	6912      	ldr	r2, [r2, #16]
 811086a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 811086c:	4610      	mov	r0, r2
 811086e:	4798      	blx	r3
 8110870:	4603      	mov	r3, r0
 8110872:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8110876:	e002      	b.n	811087e <tcp_slowtmr+0x55a>
 8110878:	2300      	movs	r3, #0
 811087a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 811087e:	4b13      	ldr	r3, [pc, #76]	@ (81108cc <tcp_slowtmr+0x5a8>)
 8110880:	781b      	ldrb	r3, [r3, #0]
 8110882:	2b00      	cmp	r3, #0
 8110884:	f47f ad60 	bne.w	8110348 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8110888:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 811088c:	2b00      	cmp	r3, #0
 811088e:	d102      	bne.n	8110896 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8110890:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8110892:	f003 fb7d 	bl	8113f90 <tcp_output>
  while (pcb != NULL) {
 8110896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110898:	2b00      	cmp	r3, #0
 811089a:	f47f ad5c 	bne.w	8110356 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 811089e:	2300      	movs	r3, #0
 81108a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 81108a2:	4b0b      	ldr	r3, [pc, #44]	@ (81108d0 <tcp_slowtmr+0x5ac>)
 81108a4:	681b      	ldr	r3, [r3, #0]
 81108a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 81108a8:	e067      	b.n	811097a <tcp_slowtmr+0x656>
 81108aa:	bf00      	nop
 81108ac:	10011c4c 	.word	0x10011c4c
 81108b0:	10624dd3 	.word	0x10624dd3
 81108b4:	000124f8 	.word	0x000124f8
 81108b8:	10011c58 	.word	0x10011c58
 81108bc:	08117ff0 	.word	0x08117ff0
 81108c0:	08118468 	.word	0x08118468
 81108c4:	08118074 	.word	0x08118074
 81108c8:	08118494 	.word	0x08118494
 81108cc:	10011c60 	.word	0x10011c60
 81108d0:	10011c5c 	.word	0x10011c5c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 81108d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81108d6:	7d1b      	ldrb	r3, [r3, #20]
 81108d8:	2b0a      	cmp	r3, #10
 81108da:	d006      	beq.n	81108ea <tcp_slowtmr+0x5c6>
 81108dc:	4b2b      	ldr	r3, [pc, #172]	@ (811098c <tcp_slowtmr+0x668>)
 81108de:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 81108e2:	492b      	ldr	r1, [pc, #172]	@ (8110990 <tcp_slowtmr+0x66c>)
 81108e4:	482b      	ldr	r0, [pc, #172]	@ (8110994 <tcp_slowtmr+0x670>)
 81108e6:	f005 fa4b 	bl	8115d80 <iprintf>
    pcb_remove = 0;
 81108ea:	2300      	movs	r3, #0
 81108ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 81108f0:	4b29      	ldr	r3, [pc, #164]	@ (8110998 <tcp_slowtmr+0x674>)
 81108f2:	681a      	ldr	r2, [r3, #0]
 81108f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81108f6:	6a1b      	ldr	r3, [r3, #32]
 81108f8:	1ad3      	subs	r3, r2, r3
 81108fa:	2bf0      	cmp	r3, #240	@ 0xf0
 81108fc:	d904      	bls.n	8110908 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 81108fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8110902:	3301      	adds	r3, #1
 8110904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8110908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811090c:	2b00      	cmp	r3, #0
 811090e:	d02f      	beq.n	8110970 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8110910:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8110912:	f000 fb2d 	bl	8110f70 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8110916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110918:	2b00      	cmp	r3, #0
 811091a:	d010      	beq.n	811093e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 811091c:	4b1f      	ldr	r3, [pc, #124]	@ (811099c <tcp_slowtmr+0x678>)
 811091e:	681b      	ldr	r3, [r3, #0]
 8110920:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110922:	429a      	cmp	r2, r3
 8110924:	d106      	bne.n	8110934 <tcp_slowtmr+0x610>
 8110926:	4b19      	ldr	r3, [pc, #100]	@ (811098c <tcp_slowtmr+0x668>)
 8110928:	f240 52af 	movw	r2, #1455	@ 0x5af
 811092c:	491c      	ldr	r1, [pc, #112]	@ (81109a0 <tcp_slowtmr+0x67c>)
 811092e:	4819      	ldr	r0, [pc, #100]	@ (8110994 <tcp_slowtmr+0x670>)
 8110930:	f005 fa26 	bl	8115d80 <iprintf>
        prev->next = pcb->next;
 8110934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110936:	68da      	ldr	r2, [r3, #12]
 8110938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811093a:	60da      	str	r2, [r3, #12]
 811093c:	e00f      	b.n	811095e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 811093e:	4b17      	ldr	r3, [pc, #92]	@ (811099c <tcp_slowtmr+0x678>)
 8110940:	681b      	ldr	r3, [r3, #0]
 8110942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8110944:	429a      	cmp	r2, r3
 8110946:	d006      	beq.n	8110956 <tcp_slowtmr+0x632>
 8110948:	4b10      	ldr	r3, [pc, #64]	@ (811098c <tcp_slowtmr+0x668>)
 811094a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 811094e:	4915      	ldr	r1, [pc, #84]	@ (81109a4 <tcp_slowtmr+0x680>)
 8110950:	4810      	ldr	r0, [pc, #64]	@ (8110994 <tcp_slowtmr+0x670>)
 8110952:	f005 fa15 	bl	8115d80 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8110956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110958:	68db      	ldr	r3, [r3, #12]
 811095a:	4a10      	ldr	r2, [pc, #64]	@ (811099c <tcp_slowtmr+0x678>)
 811095c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 811095e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110960:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8110962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110964:	68db      	ldr	r3, [r3, #12]
 8110966:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8110968:	69f8      	ldr	r0, [r7, #28]
 811096a:	f7ff f93b 	bl	810fbe4 <tcp_free>
 811096e:	e004      	b.n	811097a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8110970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110972:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8110974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110976:	68db      	ldr	r3, [r3, #12]
 8110978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 811097a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811097c:	2b00      	cmp	r3, #0
 811097e:	d1a9      	bne.n	81108d4 <tcp_slowtmr+0x5b0>
    }
  }
}
 8110980:	bf00      	nop
 8110982:	bf00      	nop
 8110984:	3730      	adds	r7, #48	@ 0x30
 8110986:	46bd      	mov	sp, r7
 8110988:	bdb0      	pop	{r4, r5, r7, pc}
 811098a:	bf00      	nop
 811098c:	08117ff0 	.word	0x08117ff0
 8110990:	081184c0 	.word	0x081184c0
 8110994:	08118074 	.word	0x08118074
 8110998:	10011c4c 	.word	0x10011c4c
 811099c:	10011c5c 	.word	0x10011c5c
 81109a0:	081184f0 	.word	0x081184f0
 81109a4:	08118518 	.word	0x08118518

081109a8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 81109a8:	b580      	push	{r7, lr}
 81109aa:	b082      	sub	sp, #8
 81109ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 81109ae:	4b2d      	ldr	r3, [pc, #180]	@ (8110a64 <tcp_fasttmr+0xbc>)
 81109b0:	781b      	ldrb	r3, [r3, #0]
 81109b2:	3301      	adds	r3, #1
 81109b4:	b2da      	uxtb	r2, r3
 81109b6:	4b2b      	ldr	r3, [pc, #172]	@ (8110a64 <tcp_fasttmr+0xbc>)
 81109b8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 81109ba:	4b2b      	ldr	r3, [pc, #172]	@ (8110a68 <tcp_fasttmr+0xc0>)
 81109bc:	681b      	ldr	r3, [r3, #0]
 81109be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 81109c0:	e048      	b.n	8110a54 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 81109c2:	687b      	ldr	r3, [r7, #4]
 81109c4:	7f9a      	ldrb	r2, [r3, #30]
 81109c6:	4b27      	ldr	r3, [pc, #156]	@ (8110a64 <tcp_fasttmr+0xbc>)
 81109c8:	781b      	ldrb	r3, [r3, #0]
 81109ca:	429a      	cmp	r2, r3
 81109cc:	d03f      	beq.n	8110a4e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 81109ce:	4b25      	ldr	r3, [pc, #148]	@ (8110a64 <tcp_fasttmr+0xbc>)
 81109d0:	781a      	ldrb	r2, [r3, #0]
 81109d2:	687b      	ldr	r3, [r7, #4]
 81109d4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 81109d6:	687b      	ldr	r3, [r7, #4]
 81109d8:	8b5b      	ldrh	r3, [r3, #26]
 81109da:	f003 0301 	and.w	r3, r3, #1
 81109de:	2b00      	cmp	r3, #0
 81109e0:	d010      	beq.n	8110a04 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 81109e2:	687b      	ldr	r3, [r7, #4]
 81109e4:	8b5b      	ldrh	r3, [r3, #26]
 81109e6:	f043 0302 	orr.w	r3, r3, #2
 81109ea:	b29a      	uxth	r2, r3
 81109ec:	687b      	ldr	r3, [r7, #4]
 81109ee:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 81109f0:	6878      	ldr	r0, [r7, #4]
 81109f2:	f003 facd 	bl	8113f90 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 81109f6:	687b      	ldr	r3, [r7, #4]
 81109f8:	8b5b      	ldrh	r3, [r3, #26]
 81109fa:	f023 0303 	bic.w	r3, r3, #3
 81109fe:	b29a      	uxth	r2, r3
 8110a00:	687b      	ldr	r3, [r7, #4]
 8110a02:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8110a04:	687b      	ldr	r3, [r7, #4]
 8110a06:	8b5b      	ldrh	r3, [r3, #26]
 8110a08:	f003 0308 	and.w	r3, r3, #8
 8110a0c:	2b00      	cmp	r3, #0
 8110a0e:	d009      	beq.n	8110a24 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8110a10:	687b      	ldr	r3, [r7, #4]
 8110a12:	8b5b      	ldrh	r3, [r3, #26]
 8110a14:	f023 0308 	bic.w	r3, r3, #8
 8110a18:	b29a      	uxth	r2, r3
 8110a1a:	687b      	ldr	r3, [r7, #4]
 8110a1c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8110a1e:	6878      	ldr	r0, [r7, #4]
 8110a20:	f7ff fa74 	bl	810ff0c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8110a24:	687b      	ldr	r3, [r7, #4]
 8110a26:	68db      	ldr	r3, [r3, #12]
 8110a28:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8110a2a:	687b      	ldr	r3, [r7, #4]
 8110a2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8110a2e:	2b00      	cmp	r3, #0
 8110a30:	d00a      	beq.n	8110a48 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8110a32:	4b0e      	ldr	r3, [pc, #56]	@ (8110a6c <tcp_fasttmr+0xc4>)
 8110a34:	2200      	movs	r2, #0
 8110a36:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8110a38:	6878      	ldr	r0, [r7, #4]
 8110a3a:	f000 f819 	bl	8110a70 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8110a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8110a6c <tcp_fasttmr+0xc4>)
 8110a40:	781b      	ldrb	r3, [r3, #0]
 8110a42:	2b00      	cmp	r3, #0
 8110a44:	d000      	beq.n	8110a48 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8110a46:	e7b8      	b.n	81109ba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8110a48:	683b      	ldr	r3, [r7, #0]
 8110a4a:	607b      	str	r3, [r7, #4]
 8110a4c:	e002      	b.n	8110a54 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8110a4e:	687b      	ldr	r3, [r7, #4]
 8110a50:	68db      	ldr	r3, [r3, #12]
 8110a52:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8110a54:	687b      	ldr	r3, [r7, #4]
 8110a56:	2b00      	cmp	r3, #0
 8110a58:	d1b3      	bne.n	81109c2 <tcp_fasttmr+0x1a>
    }
  }
}
 8110a5a:	bf00      	nop
 8110a5c:	bf00      	nop
 8110a5e:	3708      	adds	r7, #8
 8110a60:	46bd      	mov	sp, r7
 8110a62:	bd80      	pop	{r7, pc}
 8110a64:	10011c62 	.word	0x10011c62
 8110a68:	10011c58 	.word	0x10011c58
 8110a6c:	10011c60 	.word	0x10011c60

08110a70 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8110a70:	b590      	push	{r4, r7, lr}
 8110a72:	b085      	sub	sp, #20
 8110a74:	af00      	add	r7, sp, #0
 8110a76:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8110a78:	687b      	ldr	r3, [r7, #4]
 8110a7a:	2b00      	cmp	r3, #0
 8110a7c:	d109      	bne.n	8110a92 <tcp_process_refused_data+0x22>
 8110a7e:	4b38      	ldr	r3, [pc, #224]	@ (8110b60 <tcp_process_refused_data+0xf0>)
 8110a80:	f240 6209 	movw	r2, #1545	@ 0x609
 8110a84:	4937      	ldr	r1, [pc, #220]	@ (8110b64 <tcp_process_refused_data+0xf4>)
 8110a86:	4838      	ldr	r0, [pc, #224]	@ (8110b68 <tcp_process_refused_data+0xf8>)
 8110a88:	f005 f97a 	bl	8115d80 <iprintf>
 8110a8c:	f06f 030f 	mvn.w	r3, #15
 8110a90:	e061      	b.n	8110b56 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8110a92:	687b      	ldr	r3, [r7, #4]
 8110a94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8110a96:	7b5b      	ldrb	r3, [r3, #13]
 8110a98:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8110a9a:	687b      	ldr	r3, [r7, #4]
 8110a9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8110a9e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8110aa0:	687b      	ldr	r3, [r7, #4]
 8110aa2:	2200      	movs	r2, #0
 8110aa4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8110aa6:	687b      	ldr	r3, [r7, #4]
 8110aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8110aac:	2b00      	cmp	r3, #0
 8110aae:	d00b      	beq.n	8110ac8 <tcp_process_refused_data+0x58>
 8110ab0:	687b      	ldr	r3, [r7, #4]
 8110ab2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8110ab6:	687b      	ldr	r3, [r7, #4]
 8110ab8:	6918      	ldr	r0, [r3, #16]
 8110aba:	2300      	movs	r3, #0
 8110abc:	68ba      	ldr	r2, [r7, #8]
 8110abe:	6879      	ldr	r1, [r7, #4]
 8110ac0:	47a0      	blx	r4
 8110ac2:	4603      	mov	r3, r0
 8110ac4:	73fb      	strb	r3, [r7, #15]
 8110ac6:	e007      	b.n	8110ad8 <tcp_process_refused_data+0x68>
 8110ac8:	2300      	movs	r3, #0
 8110aca:	68ba      	ldr	r2, [r7, #8]
 8110acc:	6879      	ldr	r1, [r7, #4]
 8110ace:	2000      	movs	r0, #0
 8110ad0:	f000 f8a6 	bl	8110c20 <tcp_recv_null>
 8110ad4:	4603      	mov	r3, r0
 8110ad6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8110ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8110adc:	2b00      	cmp	r3, #0
 8110ade:	d12b      	bne.n	8110b38 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8110ae0:	7bbb      	ldrb	r3, [r7, #14]
 8110ae2:	f003 0320 	and.w	r3, r3, #32
 8110ae6:	2b00      	cmp	r3, #0
 8110ae8:	d034      	beq.n	8110b54 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8110aea:	687b      	ldr	r3, [r7, #4]
 8110aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8110aee:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8110af2:	4293      	cmp	r3, r2
 8110af4:	d005      	beq.n	8110b02 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8110af6:	687b      	ldr	r3, [r7, #4]
 8110af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8110afa:	3301      	adds	r3, #1
 8110afc:	b29a      	uxth	r2, r3
 8110afe:	687b      	ldr	r3, [r7, #4]
 8110b00:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8110b02:	687b      	ldr	r3, [r7, #4]
 8110b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8110b08:	2b00      	cmp	r3, #0
 8110b0a:	d00b      	beq.n	8110b24 <tcp_process_refused_data+0xb4>
 8110b0c:	687b      	ldr	r3, [r7, #4]
 8110b0e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8110b12:	687b      	ldr	r3, [r7, #4]
 8110b14:	6918      	ldr	r0, [r3, #16]
 8110b16:	2300      	movs	r3, #0
 8110b18:	2200      	movs	r2, #0
 8110b1a:	6879      	ldr	r1, [r7, #4]
 8110b1c:	47a0      	blx	r4
 8110b1e:	4603      	mov	r3, r0
 8110b20:	73fb      	strb	r3, [r7, #15]
 8110b22:	e001      	b.n	8110b28 <tcp_process_refused_data+0xb8>
 8110b24:	2300      	movs	r3, #0
 8110b26:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8110b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8110b2c:	f113 0f0d 	cmn.w	r3, #13
 8110b30:	d110      	bne.n	8110b54 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8110b32:	f06f 030c 	mvn.w	r3, #12
 8110b36:	e00e      	b.n	8110b56 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8110b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8110b3c:	f113 0f0d 	cmn.w	r3, #13
 8110b40:	d102      	bne.n	8110b48 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8110b42:	f06f 030c 	mvn.w	r3, #12
 8110b46:	e006      	b.n	8110b56 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8110b48:	687b      	ldr	r3, [r7, #4]
 8110b4a:	68ba      	ldr	r2, [r7, #8]
 8110b4c:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8110b4e:	f06f 0304 	mvn.w	r3, #4
 8110b52:	e000      	b.n	8110b56 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8110b54:	2300      	movs	r3, #0
}
 8110b56:	4618      	mov	r0, r3
 8110b58:	3714      	adds	r7, #20
 8110b5a:	46bd      	mov	sp, r7
 8110b5c:	bd90      	pop	{r4, r7, pc}
 8110b5e:	bf00      	nop
 8110b60:	08117ff0 	.word	0x08117ff0
 8110b64:	08118540 	.word	0x08118540
 8110b68:	08118074 	.word	0x08118074

08110b6c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8110b6c:	b580      	push	{r7, lr}
 8110b6e:	b084      	sub	sp, #16
 8110b70:	af00      	add	r7, sp, #0
 8110b72:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8110b74:	e007      	b.n	8110b86 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8110b76:	687b      	ldr	r3, [r7, #4]
 8110b78:	681b      	ldr	r3, [r3, #0]
 8110b7a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8110b7c:	6878      	ldr	r0, [r7, #4]
 8110b7e:	f000 f80a 	bl	8110b96 <tcp_seg_free>
    seg = next;
 8110b82:	68fb      	ldr	r3, [r7, #12]
 8110b84:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8110b86:	687b      	ldr	r3, [r7, #4]
 8110b88:	2b00      	cmp	r3, #0
 8110b8a:	d1f4      	bne.n	8110b76 <tcp_segs_free+0xa>
  }
}
 8110b8c:	bf00      	nop
 8110b8e:	bf00      	nop
 8110b90:	3710      	adds	r7, #16
 8110b92:	46bd      	mov	sp, r7
 8110b94:	bd80      	pop	{r7, pc}

08110b96 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8110b96:	b580      	push	{r7, lr}
 8110b98:	b082      	sub	sp, #8
 8110b9a:	af00      	add	r7, sp, #0
 8110b9c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8110b9e:	687b      	ldr	r3, [r7, #4]
 8110ba0:	2b00      	cmp	r3, #0
 8110ba2:	d00c      	beq.n	8110bbe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8110ba4:	687b      	ldr	r3, [r7, #4]
 8110ba6:	685b      	ldr	r3, [r3, #4]
 8110ba8:	2b00      	cmp	r3, #0
 8110baa:	d004      	beq.n	8110bb6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8110bac:	687b      	ldr	r3, [r7, #4]
 8110bae:	685b      	ldr	r3, [r3, #4]
 8110bb0:	4618      	mov	r0, r3
 8110bb2:	f7fe fc79 	bl	810f4a8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8110bb6:	6879      	ldr	r1, [r7, #4]
 8110bb8:	2003      	movs	r0, #3
 8110bba:	f7fd fdd1 	bl	810e760 <memp_free>
  }
}
 8110bbe:	bf00      	nop
 8110bc0:	3708      	adds	r7, #8
 8110bc2:	46bd      	mov	sp, r7
 8110bc4:	bd80      	pop	{r7, pc}
	...

08110bc8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8110bc8:	b580      	push	{r7, lr}
 8110bca:	b084      	sub	sp, #16
 8110bcc:	af00      	add	r7, sp, #0
 8110bce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8110bd0:	687b      	ldr	r3, [r7, #4]
 8110bd2:	2b00      	cmp	r3, #0
 8110bd4:	d106      	bne.n	8110be4 <tcp_seg_copy+0x1c>
 8110bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8110c14 <tcp_seg_copy+0x4c>)
 8110bd8:	f240 6282 	movw	r2, #1666	@ 0x682
 8110bdc:	490e      	ldr	r1, [pc, #56]	@ (8110c18 <tcp_seg_copy+0x50>)
 8110bde:	480f      	ldr	r0, [pc, #60]	@ (8110c1c <tcp_seg_copy+0x54>)
 8110be0:	f005 f8ce 	bl	8115d80 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8110be4:	2003      	movs	r0, #3
 8110be6:	f7fd fd45 	bl	810e674 <memp_malloc>
 8110bea:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8110bec:	68fb      	ldr	r3, [r7, #12]
 8110bee:	2b00      	cmp	r3, #0
 8110bf0:	d101      	bne.n	8110bf6 <tcp_seg_copy+0x2e>
    return NULL;
 8110bf2:	2300      	movs	r3, #0
 8110bf4:	e00a      	b.n	8110c0c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8110bf6:	2210      	movs	r2, #16
 8110bf8:	6879      	ldr	r1, [r7, #4]
 8110bfa:	68f8      	ldr	r0, [r7, #12]
 8110bfc:	f005 fa5f 	bl	81160be <memcpy>
  pbuf_ref(cseg->p);
 8110c00:	68fb      	ldr	r3, [r7, #12]
 8110c02:	685b      	ldr	r3, [r3, #4]
 8110c04:	4618      	mov	r0, r3
 8110c06:	f7fe fcf5 	bl	810f5f4 <pbuf_ref>
  return cseg;
 8110c0a:	68fb      	ldr	r3, [r7, #12]
}
 8110c0c:	4618      	mov	r0, r3
 8110c0e:	3710      	adds	r7, #16
 8110c10:	46bd      	mov	sp, r7
 8110c12:	bd80      	pop	{r7, pc}
 8110c14:	08117ff0 	.word	0x08117ff0
 8110c18:	08118584 	.word	0x08118584
 8110c1c:	08118074 	.word	0x08118074

08110c20 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8110c20:	b580      	push	{r7, lr}
 8110c22:	b084      	sub	sp, #16
 8110c24:	af00      	add	r7, sp, #0
 8110c26:	60f8      	str	r0, [r7, #12]
 8110c28:	60b9      	str	r1, [r7, #8]
 8110c2a:	607a      	str	r2, [r7, #4]
 8110c2c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8110c2e:	68bb      	ldr	r3, [r7, #8]
 8110c30:	2b00      	cmp	r3, #0
 8110c32:	d109      	bne.n	8110c48 <tcp_recv_null+0x28>
 8110c34:	4b12      	ldr	r3, [pc, #72]	@ (8110c80 <tcp_recv_null+0x60>)
 8110c36:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8110c3a:	4912      	ldr	r1, [pc, #72]	@ (8110c84 <tcp_recv_null+0x64>)
 8110c3c:	4812      	ldr	r0, [pc, #72]	@ (8110c88 <tcp_recv_null+0x68>)
 8110c3e:	f005 f89f 	bl	8115d80 <iprintf>
 8110c42:	f06f 030f 	mvn.w	r3, #15
 8110c46:	e016      	b.n	8110c76 <tcp_recv_null+0x56>

  if (p != NULL) {
 8110c48:	687b      	ldr	r3, [r7, #4]
 8110c4a:	2b00      	cmp	r3, #0
 8110c4c:	d009      	beq.n	8110c62 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8110c4e:	687b      	ldr	r3, [r7, #4]
 8110c50:	891b      	ldrh	r3, [r3, #8]
 8110c52:	4619      	mov	r1, r3
 8110c54:	68b8      	ldr	r0, [r7, #8]
 8110c56:	f7ff fb13 	bl	8110280 <tcp_recved>
    pbuf_free(p);
 8110c5a:	6878      	ldr	r0, [r7, #4]
 8110c5c:	f7fe fc24 	bl	810f4a8 <pbuf_free>
 8110c60:	e008      	b.n	8110c74 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8110c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8110c66:	2b00      	cmp	r3, #0
 8110c68:	d104      	bne.n	8110c74 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8110c6a:	68b8      	ldr	r0, [r7, #8]
 8110c6c:	f7ff f9b8 	bl	810ffe0 <tcp_close>
 8110c70:	4603      	mov	r3, r0
 8110c72:	e000      	b.n	8110c76 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8110c74:	2300      	movs	r3, #0
}
 8110c76:	4618      	mov	r0, r3
 8110c78:	3710      	adds	r7, #16
 8110c7a:	46bd      	mov	sp, r7
 8110c7c:	bd80      	pop	{r7, pc}
 8110c7e:	bf00      	nop
 8110c80:	08117ff0 	.word	0x08117ff0
 8110c84:	081185a0 	.word	0x081185a0
 8110c88:	08118074 	.word	0x08118074

08110c8c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8110c8c:	b580      	push	{r7, lr}
 8110c8e:	b086      	sub	sp, #24
 8110c90:	af00      	add	r7, sp, #0
 8110c92:	4603      	mov	r3, r0
 8110c94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8110c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8110c9a:	2b00      	cmp	r3, #0
 8110c9c:	db01      	blt.n	8110ca2 <tcp_kill_prio+0x16>
 8110c9e:	79fb      	ldrb	r3, [r7, #7]
 8110ca0:	e000      	b.n	8110ca4 <tcp_kill_prio+0x18>
 8110ca2:	237f      	movs	r3, #127	@ 0x7f
 8110ca4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8110ca6:	7afb      	ldrb	r3, [r7, #11]
 8110ca8:	2b00      	cmp	r3, #0
 8110caa:	d034      	beq.n	8110d16 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8110cac:	7afb      	ldrb	r3, [r7, #11]
 8110cae:	3b01      	subs	r3, #1
 8110cb0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8110cb2:	2300      	movs	r3, #0
 8110cb4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8110cb6:	2300      	movs	r3, #0
 8110cb8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8110cba:	4b19      	ldr	r3, [pc, #100]	@ (8110d20 <tcp_kill_prio+0x94>)
 8110cbc:	681b      	ldr	r3, [r3, #0]
 8110cbe:	617b      	str	r3, [r7, #20]
 8110cc0:	e01f      	b.n	8110d02 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8110cc2:	697b      	ldr	r3, [r7, #20]
 8110cc4:	7d5b      	ldrb	r3, [r3, #21]
 8110cc6:	7afa      	ldrb	r2, [r7, #11]
 8110cc8:	429a      	cmp	r2, r3
 8110cca:	d80c      	bhi.n	8110ce6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8110ccc:	697b      	ldr	r3, [r7, #20]
 8110cce:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8110cd0:	7afa      	ldrb	r2, [r7, #11]
 8110cd2:	429a      	cmp	r2, r3
 8110cd4:	d112      	bne.n	8110cfc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8110cd6:	4b13      	ldr	r3, [pc, #76]	@ (8110d24 <tcp_kill_prio+0x98>)
 8110cd8:	681a      	ldr	r2, [r3, #0]
 8110cda:	697b      	ldr	r3, [r7, #20]
 8110cdc:	6a1b      	ldr	r3, [r3, #32]
 8110cde:	1ad3      	subs	r3, r2, r3
 8110ce0:	68fa      	ldr	r2, [r7, #12]
 8110ce2:	429a      	cmp	r2, r3
 8110ce4:	d80a      	bhi.n	8110cfc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8110ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8110d24 <tcp_kill_prio+0x98>)
 8110ce8:	681a      	ldr	r2, [r3, #0]
 8110cea:	697b      	ldr	r3, [r7, #20]
 8110cec:	6a1b      	ldr	r3, [r3, #32]
 8110cee:	1ad3      	subs	r3, r2, r3
 8110cf0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8110cf2:	697b      	ldr	r3, [r7, #20]
 8110cf4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8110cf6:	697b      	ldr	r3, [r7, #20]
 8110cf8:	7d5b      	ldrb	r3, [r3, #21]
 8110cfa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8110cfc:	697b      	ldr	r3, [r7, #20]
 8110cfe:	68db      	ldr	r3, [r3, #12]
 8110d00:	617b      	str	r3, [r7, #20]
 8110d02:	697b      	ldr	r3, [r7, #20]
 8110d04:	2b00      	cmp	r3, #0
 8110d06:	d1dc      	bne.n	8110cc2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8110d08:	693b      	ldr	r3, [r7, #16]
 8110d0a:	2b00      	cmp	r3, #0
 8110d0c:	d004      	beq.n	8110d18 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8110d0e:	6938      	ldr	r0, [r7, #16]
 8110d10:	f7ff fa50 	bl	81101b4 <tcp_abort>
 8110d14:	e000      	b.n	8110d18 <tcp_kill_prio+0x8c>
    return;
 8110d16:	bf00      	nop
  }
}
 8110d18:	3718      	adds	r7, #24
 8110d1a:	46bd      	mov	sp, r7
 8110d1c:	bd80      	pop	{r7, pc}
 8110d1e:	bf00      	nop
 8110d20:	10011c58 	.word	0x10011c58
 8110d24:	10011c4c 	.word	0x10011c4c

08110d28 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8110d28:	b580      	push	{r7, lr}
 8110d2a:	b086      	sub	sp, #24
 8110d2c:	af00      	add	r7, sp, #0
 8110d2e:	4603      	mov	r3, r0
 8110d30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8110d32:	79fb      	ldrb	r3, [r7, #7]
 8110d34:	2b08      	cmp	r3, #8
 8110d36:	d009      	beq.n	8110d4c <tcp_kill_state+0x24>
 8110d38:	79fb      	ldrb	r3, [r7, #7]
 8110d3a:	2b09      	cmp	r3, #9
 8110d3c:	d006      	beq.n	8110d4c <tcp_kill_state+0x24>
 8110d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8110da8 <tcp_kill_state+0x80>)
 8110d40:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8110d44:	4919      	ldr	r1, [pc, #100]	@ (8110dac <tcp_kill_state+0x84>)
 8110d46:	481a      	ldr	r0, [pc, #104]	@ (8110db0 <tcp_kill_state+0x88>)
 8110d48:	f005 f81a 	bl	8115d80 <iprintf>

  inactivity = 0;
 8110d4c:	2300      	movs	r3, #0
 8110d4e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8110d50:	2300      	movs	r3, #0
 8110d52:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8110d54:	4b17      	ldr	r3, [pc, #92]	@ (8110db4 <tcp_kill_state+0x8c>)
 8110d56:	681b      	ldr	r3, [r3, #0]
 8110d58:	617b      	str	r3, [r7, #20]
 8110d5a:	e017      	b.n	8110d8c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8110d5c:	697b      	ldr	r3, [r7, #20]
 8110d5e:	7d1b      	ldrb	r3, [r3, #20]
 8110d60:	79fa      	ldrb	r2, [r7, #7]
 8110d62:	429a      	cmp	r2, r3
 8110d64:	d10f      	bne.n	8110d86 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8110d66:	4b14      	ldr	r3, [pc, #80]	@ (8110db8 <tcp_kill_state+0x90>)
 8110d68:	681a      	ldr	r2, [r3, #0]
 8110d6a:	697b      	ldr	r3, [r7, #20]
 8110d6c:	6a1b      	ldr	r3, [r3, #32]
 8110d6e:	1ad3      	subs	r3, r2, r3
 8110d70:	68fa      	ldr	r2, [r7, #12]
 8110d72:	429a      	cmp	r2, r3
 8110d74:	d807      	bhi.n	8110d86 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8110d76:	4b10      	ldr	r3, [pc, #64]	@ (8110db8 <tcp_kill_state+0x90>)
 8110d78:	681a      	ldr	r2, [r3, #0]
 8110d7a:	697b      	ldr	r3, [r7, #20]
 8110d7c:	6a1b      	ldr	r3, [r3, #32]
 8110d7e:	1ad3      	subs	r3, r2, r3
 8110d80:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8110d82:	697b      	ldr	r3, [r7, #20]
 8110d84:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8110d86:	697b      	ldr	r3, [r7, #20]
 8110d88:	68db      	ldr	r3, [r3, #12]
 8110d8a:	617b      	str	r3, [r7, #20]
 8110d8c:	697b      	ldr	r3, [r7, #20]
 8110d8e:	2b00      	cmp	r3, #0
 8110d90:	d1e4      	bne.n	8110d5c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8110d92:	693b      	ldr	r3, [r7, #16]
 8110d94:	2b00      	cmp	r3, #0
 8110d96:	d003      	beq.n	8110da0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8110d98:	2100      	movs	r1, #0
 8110d9a:	6938      	ldr	r0, [r7, #16]
 8110d9c:	f7ff f94c 	bl	8110038 <tcp_abandon>
  }
}
 8110da0:	bf00      	nop
 8110da2:	3718      	adds	r7, #24
 8110da4:	46bd      	mov	sp, r7
 8110da6:	bd80      	pop	{r7, pc}
 8110da8:	08117ff0 	.word	0x08117ff0
 8110dac:	081185bc 	.word	0x081185bc
 8110db0:	08118074 	.word	0x08118074
 8110db4:	10011c58 	.word	0x10011c58
 8110db8:	10011c4c 	.word	0x10011c4c

08110dbc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8110dbc:	b580      	push	{r7, lr}
 8110dbe:	b084      	sub	sp, #16
 8110dc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8110dc2:	2300      	movs	r3, #0
 8110dc4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8110dc6:	2300      	movs	r3, #0
 8110dc8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8110dca:	4b12      	ldr	r3, [pc, #72]	@ (8110e14 <tcp_kill_timewait+0x58>)
 8110dcc:	681b      	ldr	r3, [r3, #0]
 8110dce:	60fb      	str	r3, [r7, #12]
 8110dd0:	e012      	b.n	8110df8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8110dd2:	4b11      	ldr	r3, [pc, #68]	@ (8110e18 <tcp_kill_timewait+0x5c>)
 8110dd4:	681a      	ldr	r2, [r3, #0]
 8110dd6:	68fb      	ldr	r3, [r7, #12]
 8110dd8:	6a1b      	ldr	r3, [r3, #32]
 8110dda:	1ad3      	subs	r3, r2, r3
 8110ddc:	687a      	ldr	r2, [r7, #4]
 8110dde:	429a      	cmp	r2, r3
 8110de0:	d807      	bhi.n	8110df2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8110de2:	4b0d      	ldr	r3, [pc, #52]	@ (8110e18 <tcp_kill_timewait+0x5c>)
 8110de4:	681a      	ldr	r2, [r3, #0]
 8110de6:	68fb      	ldr	r3, [r7, #12]
 8110de8:	6a1b      	ldr	r3, [r3, #32]
 8110dea:	1ad3      	subs	r3, r2, r3
 8110dec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8110dee:	68fb      	ldr	r3, [r7, #12]
 8110df0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8110df2:	68fb      	ldr	r3, [r7, #12]
 8110df4:	68db      	ldr	r3, [r3, #12]
 8110df6:	60fb      	str	r3, [r7, #12]
 8110df8:	68fb      	ldr	r3, [r7, #12]
 8110dfa:	2b00      	cmp	r3, #0
 8110dfc:	d1e9      	bne.n	8110dd2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8110dfe:	68bb      	ldr	r3, [r7, #8]
 8110e00:	2b00      	cmp	r3, #0
 8110e02:	d002      	beq.n	8110e0a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8110e04:	68b8      	ldr	r0, [r7, #8]
 8110e06:	f7ff f9d5 	bl	81101b4 <tcp_abort>
  }
}
 8110e0a:	bf00      	nop
 8110e0c:	3710      	adds	r7, #16
 8110e0e:	46bd      	mov	sp, r7
 8110e10:	bd80      	pop	{r7, pc}
 8110e12:	bf00      	nop
 8110e14:	10011c5c 	.word	0x10011c5c
 8110e18:	10011c4c 	.word	0x10011c4c

08110e1c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8110e1c:	b580      	push	{r7, lr}
 8110e1e:	b082      	sub	sp, #8
 8110e20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8110e22:	4b10      	ldr	r3, [pc, #64]	@ (8110e64 <tcp_handle_closepend+0x48>)
 8110e24:	681b      	ldr	r3, [r3, #0]
 8110e26:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8110e28:	e014      	b.n	8110e54 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8110e2a:	687b      	ldr	r3, [r7, #4]
 8110e2c:	68db      	ldr	r3, [r3, #12]
 8110e2e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8110e30:	687b      	ldr	r3, [r7, #4]
 8110e32:	8b5b      	ldrh	r3, [r3, #26]
 8110e34:	f003 0308 	and.w	r3, r3, #8
 8110e38:	2b00      	cmp	r3, #0
 8110e3a:	d009      	beq.n	8110e50 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8110e3c:	687b      	ldr	r3, [r7, #4]
 8110e3e:	8b5b      	ldrh	r3, [r3, #26]
 8110e40:	f023 0308 	bic.w	r3, r3, #8
 8110e44:	b29a      	uxth	r2, r3
 8110e46:	687b      	ldr	r3, [r7, #4]
 8110e48:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8110e4a:	6878      	ldr	r0, [r7, #4]
 8110e4c:	f7ff f85e 	bl	810ff0c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8110e50:	683b      	ldr	r3, [r7, #0]
 8110e52:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8110e54:	687b      	ldr	r3, [r7, #4]
 8110e56:	2b00      	cmp	r3, #0
 8110e58:	d1e7      	bne.n	8110e2a <tcp_handle_closepend+0xe>
  }
}
 8110e5a:	bf00      	nop
 8110e5c:	bf00      	nop
 8110e5e:	3708      	adds	r7, #8
 8110e60:	46bd      	mov	sp, r7
 8110e62:	bd80      	pop	{r7, pc}
 8110e64:	10011c58 	.word	0x10011c58

08110e68 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8110e68:	b580      	push	{r7, lr}
 8110e6a:	b084      	sub	sp, #16
 8110e6c:	af00      	add	r7, sp, #0
 8110e6e:	4603      	mov	r3, r0
 8110e70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8110e72:	2001      	movs	r0, #1
 8110e74:	f7fd fbfe 	bl	810e674 <memp_malloc>
 8110e78:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8110e7a:	68fb      	ldr	r3, [r7, #12]
 8110e7c:	2b00      	cmp	r3, #0
 8110e7e:	d126      	bne.n	8110ece <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8110e80:	f7ff ffcc 	bl	8110e1c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8110e84:	f7ff ff9a 	bl	8110dbc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8110e88:	2001      	movs	r0, #1
 8110e8a:	f7fd fbf3 	bl	810e674 <memp_malloc>
 8110e8e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8110e90:	68fb      	ldr	r3, [r7, #12]
 8110e92:	2b00      	cmp	r3, #0
 8110e94:	d11b      	bne.n	8110ece <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8110e96:	2009      	movs	r0, #9
 8110e98:	f7ff ff46 	bl	8110d28 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8110e9c:	2001      	movs	r0, #1
 8110e9e:	f7fd fbe9 	bl	810e674 <memp_malloc>
 8110ea2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8110ea4:	68fb      	ldr	r3, [r7, #12]
 8110ea6:	2b00      	cmp	r3, #0
 8110ea8:	d111      	bne.n	8110ece <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8110eaa:	2008      	movs	r0, #8
 8110eac:	f7ff ff3c 	bl	8110d28 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8110eb0:	2001      	movs	r0, #1
 8110eb2:	f7fd fbdf 	bl	810e674 <memp_malloc>
 8110eb6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8110eb8:	68fb      	ldr	r3, [r7, #12]
 8110eba:	2b00      	cmp	r3, #0
 8110ebc:	d107      	bne.n	8110ece <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8110ebe:	79fb      	ldrb	r3, [r7, #7]
 8110ec0:	4618      	mov	r0, r3
 8110ec2:	f7ff fee3 	bl	8110c8c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8110ec6:	2001      	movs	r0, #1
 8110ec8:	f7fd fbd4 	bl	810e674 <memp_malloc>
 8110ecc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8110ece:	68fb      	ldr	r3, [r7, #12]
 8110ed0:	2b00      	cmp	r3, #0
 8110ed2:	d03f      	beq.n	8110f54 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8110ed4:	229c      	movs	r2, #156	@ 0x9c
 8110ed6:	2100      	movs	r1, #0
 8110ed8:	68f8      	ldr	r0, [r7, #12]
 8110eda:	f004 ffd0 	bl	8115e7e <memset>
    pcb->prio = prio;
 8110ede:	68fb      	ldr	r3, [r7, #12]
 8110ee0:	79fa      	ldrb	r2, [r7, #7]
 8110ee2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8110ee4:	68fb      	ldr	r3, [r7, #12]
 8110ee6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8110eea:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8110eee:	68fb      	ldr	r3, [r7, #12]
 8110ef0:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8110ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8110ef6:	68fb      	ldr	r3, [r7, #12]
 8110ef8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8110efa:	68fb      	ldr	r3, [r7, #12]
 8110efc:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8110efe:	68fb      	ldr	r3, [r7, #12]
 8110f00:	22ff      	movs	r2, #255	@ 0xff
 8110f02:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8110f04:	68fb      	ldr	r3, [r7, #12]
 8110f06:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8110f0a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8110f0c:	68fb      	ldr	r3, [r7, #12]
 8110f0e:	2206      	movs	r2, #6
 8110f10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8110f14:	68fb      	ldr	r3, [r7, #12]
 8110f16:	2206      	movs	r2, #6
 8110f18:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8110f1a:	68fb      	ldr	r3, [r7, #12]
 8110f1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8110f20:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8110f22:	68fb      	ldr	r3, [r7, #12]
 8110f24:	2201      	movs	r2, #1
 8110f26:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8110f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8110f60 <tcp_alloc+0xf8>)
 8110f2c:	681a      	ldr	r2, [r3, #0]
 8110f2e:	68fb      	ldr	r3, [r7, #12]
 8110f30:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8110f32:	4b0c      	ldr	r3, [pc, #48]	@ (8110f64 <tcp_alloc+0xfc>)
 8110f34:	781a      	ldrb	r2, [r3, #0]
 8110f36:	68fb      	ldr	r3, [r7, #12]
 8110f38:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8110f3a:	68fb      	ldr	r3, [r7, #12]
 8110f3c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8110f40:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8110f44:	68fb      	ldr	r3, [r7, #12]
 8110f46:	4a08      	ldr	r2, [pc, #32]	@ (8110f68 <tcp_alloc+0x100>)
 8110f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8110f4c:	68fb      	ldr	r3, [r7, #12]
 8110f4e:	4a07      	ldr	r2, [pc, #28]	@ (8110f6c <tcp_alloc+0x104>)
 8110f50:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8110f54:	68fb      	ldr	r3, [r7, #12]
}
 8110f56:	4618      	mov	r0, r3
 8110f58:	3710      	adds	r7, #16
 8110f5a:	46bd      	mov	sp, r7
 8110f5c:	bd80      	pop	{r7, pc}
 8110f5e:	bf00      	nop
 8110f60:	10011c4c 	.word	0x10011c4c
 8110f64:	10011c62 	.word	0x10011c62
 8110f68:	08110c21 	.word	0x08110c21
 8110f6c:	006ddd00 	.word	0x006ddd00

08110f70 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8110f70:	b580      	push	{r7, lr}
 8110f72:	b082      	sub	sp, #8
 8110f74:	af00      	add	r7, sp, #0
 8110f76:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8110f78:	687b      	ldr	r3, [r7, #4]
 8110f7a:	2b00      	cmp	r3, #0
 8110f7c:	d107      	bne.n	8110f8e <tcp_pcb_purge+0x1e>
 8110f7e:	4b21      	ldr	r3, [pc, #132]	@ (8111004 <tcp_pcb_purge+0x94>)
 8110f80:	f640 0251 	movw	r2, #2129	@ 0x851
 8110f84:	4920      	ldr	r1, [pc, #128]	@ (8111008 <tcp_pcb_purge+0x98>)
 8110f86:	4821      	ldr	r0, [pc, #132]	@ (811100c <tcp_pcb_purge+0x9c>)
 8110f88:	f004 fefa 	bl	8115d80 <iprintf>
 8110f8c:	e037      	b.n	8110ffe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8110f8e:	687b      	ldr	r3, [r7, #4]
 8110f90:	7d1b      	ldrb	r3, [r3, #20]
 8110f92:	2b00      	cmp	r3, #0
 8110f94:	d033      	beq.n	8110ffe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8110f96:	687b      	ldr	r3, [r7, #4]
 8110f98:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8110f9a:	2b0a      	cmp	r3, #10
 8110f9c:	d02f      	beq.n	8110ffe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8110f9e:	687b      	ldr	r3, [r7, #4]
 8110fa0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8110fa2:	2b01      	cmp	r3, #1
 8110fa4:	d02b      	beq.n	8110ffe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8110fa6:	687b      	ldr	r3, [r7, #4]
 8110fa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8110faa:	2b00      	cmp	r3, #0
 8110fac:	d007      	beq.n	8110fbe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8110fae:	687b      	ldr	r3, [r7, #4]
 8110fb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8110fb2:	4618      	mov	r0, r3
 8110fb4:	f7fe fa78 	bl	810f4a8 <pbuf_free>
      pcb->refused_data = NULL;
 8110fb8:	687b      	ldr	r3, [r7, #4]
 8110fba:	2200      	movs	r2, #0
 8110fbc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8110fbe:	687b      	ldr	r3, [r7, #4]
 8110fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8110fc2:	2b00      	cmp	r3, #0
 8110fc4:	d002      	beq.n	8110fcc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8110fc6:	6878      	ldr	r0, [r7, #4]
 8110fc8:	f000 f986 	bl	81112d8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8110fcc:	687b      	ldr	r3, [r7, #4]
 8110fce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8110fd2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8110fd4:	687b      	ldr	r3, [r7, #4]
 8110fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8110fd8:	4618      	mov	r0, r3
 8110fda:	f7ff fdc7 	bl	8110b6c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8110fde:	687b      	ldr	r3, [r7, #4]
 8110fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8110fe2:	4618      	mov	r0, r3
 8110fe4:	f7ff fdc2 	bl	8110b6c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8110fe8:	687b      	ldr	r3, [r7, #4]
 8110fea:	2200      	movs	r2, #0
 8110fec:	66da      	str	r2, [r3, #108]	@ 0x6c
 8110fee:	687b      	ldr	r3, [r7, #4]
 8110ff0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8110ff2:	687b      	ldr	r3, [r7, #4]
 8110ff4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8110ff6:	687b      	ldr	r3, [r7, #4]
 8110ff8:	2200      	movs	r2, #0
 8110ffa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8110ffe:	3708      	adds	r7, #8
 8111000:	46bd      	mov	sp, r7
 8111002:	bd80      	pop	{r7, pc}
 8111004:	08117ff0 	.word	0x08117ff0
 8111008:	0811867c 	.word	0x0811867c
 811100c:	08118074 	.word	0x08118074

08111010 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8111010:	b580      	push	{r7, lr}
 8111012:	b084      	sub	sp, #16
 8111014:	af00      	add	r7, sp, #0
 8111016:	6078      	str	r0, [r7, #4]
 8111018:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 811101a:	683b      	ldr	r3, [r7, #0]
 811101c:	2b00      	cmp	r3, #0
 811101e:	d106      	bne.n	811102e <tcp_pcb_remove+0x1e>
 8111020:	4b3e      	ldr	r3, [pc, #248]	@ (811111c <tcp_pcb_remove+0x10c>)
 8111022:	f640 0283 	movw	r2, #2179	@ 0x883
 8111026:	493e      	ldr	r1, [pc, #248]	@ (8111120 <tcp_pcb_remove+0x110>)
 8111028:	483e      	ldr	r0, [pc, #248]	@ (8111124 <tcp_pcb_remove+0x114>)
 811102a:	f004 fea9 	bl	8115d80 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 811102e:	687b      	ldr	r3, [r7, #4]
 8111030:	2b00      	cmp	r3, #0
 8111032:	d106      	bne.n	8111042 <tcp_pcb_remove+0x32>
 8111034:	4b39      	ldr	r3, [pc, #228]	@ (811111c <tcp_pcb_remove+0x10c>)
 8111036:	f640 0284 	movw	r2, #2180	@ 0x884
 811103a:	493b      	ldr	r1, [pc, #236]	@ (8111128 <tcp_pcb_remove+0x118>)
 811103c:	4839      	ldr	r0, [pc, #228]	@ (8111124 <tcp_pcb_remove+0x114>)
 811103e:	f004 fe9f 	bl	8115d80 <iprintf>

  TCP_RMV(pcblist, pcb);
 8111042:	687b      	ldr	r3, [r7, #4]
 8111044:	681b      	ldr	r3, [r3, #0]
 8111046:	683a      	ldr	r2, [r7, #0]
 8111048:	429a      	cmp	r2, r3
 811104a:	d105      	bne.n	8111058 <tcp_pcb_remove+0x48>
 811104c:	687b      	ldr	r3, [r7, #4]
 811104e:	681b      	ldr	r3, [r3, #0]
 8111050:	68da      	ldr	r2, [r3, #12]
 8111052:	687b      	ldr	r3, [r7, #4]
 8111054:	601a      	str	r2, [r3, #0]
 8111056:	e013      	b.n	8111080 <tcp_pcb_remove+0x70>
 8111058:	687b      	ldr	r3, [r7, #4]
 811105a:	681b      	ldr	r3, [r3, #0]
 811105c:	60fb      	str	r3, [r7, #12]
 811105e:	e00c      	b.n	811107a <tcp_pcb_remove+0x6a>
 8111060:	68fb      	ldr	r3, [r7, #12]
 8111062:	68db      	ldr	r3, [r3, #12]
 8111064:	683a      	ldr	r2, [r7, #0]
 8111066:	429a      	cmp	r2, r3
 8111068:	d104      	bne.n	8111074 <tcp_pcb_remove+0x64>
 811106a:	683b      	ldr	r3, [r7, #0]
 811106c:	68da      	ldr	r2, [r3, #12]
 811106e:	68fb      	ldr	r3, [r7, #12]
 8111070:	60da      	str	r2, [r3, #12]
 8111072:	e005      	b.n	8111080 <tcp_pcb_remove+0x70>
 8111074:	68fb      	ldr	r3, [r7, #12]
 8111076:	68db      	ldr	r3, [r3, #12]
 8111078:	60fb      	str	r3, [r7, #12]
 811107a:	68fb      	ldr	r3, [r7, #12]
 811107c:	2b00      	cmp	r3, #0
 811107e:	d1ef      	bne.n	8111060 <tcp_pcb_remove+0x50>
 8111080:	683b      	ldr	r3, [r7, #0]
 8111082:	2200      	movs	r2, #0
 8111084:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8111086:	6838      	ldr	r0, [r7, #0]
 8111088:	f7ff ff72 	bl	8110f70 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 811108c:	683b      	ldr	r3, [r7, #0]
 811108e:	7d1b      	ldrb	r3, [r3, #20]
 8111090:	2b0a      	cmp	r3, #10
 8111092:	d013      	beq.n	81110bc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8111094:	683b      	ldr	r3, [r7, #0]
 8111096:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8111098:	2b01      	cmp	r3, #1
 811109a:	d00f      	beq.n	81110bc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 811109c:	683b      	ldr	r3, [r7, #0]
 811109e:	8b5b      	ldrh	r3, [r3, #26]
 81110a0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 81110a4:	2b00      	cmp	r3, #0
 81110a6:	d009      	beq.n	81110bc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 81110a8:	683b      	ldr	r3, [r7, #0]
 81110aa:	8b5b      	ldrh	r3, [r3, #26]
 81110ac:	f043 0302 	orr.w	r3, r3, #2
 81110b0:	b29a      	uxth	r2, r3
 81110b2:	683b      	ldr	r3, [r7, #0]
 81110b4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 81110b6:	6838      	ldr	r0, [r7, #0]
 81110b8:	f002 ff6a 	bl	8113f90 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 81110bc:	683b      	ldr	r3, [r7, #0]
 81110be:	7d1b      	ldrb	r3, [r3, #20]
 81110c0:	2b01      	cmp	r3, #1
 81110c2:	d020      	beq.n	8111106 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 81110c4:	683b      	ldr	r3, [r7, #0]
 81110c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81110c8:	2b00      	cmp	r3, #0
 81110ca:	d006      	beq.n	81110da <tcp_pcb_remove+0xca>
 81110cc:	4b13      	ldr	r3, [pc, #76]	@ (811111c <tcp_pcb_remove+0x10c>)
 81110ce:	f640 0293 	movw	r2, #2195	@ 0x893
 81110d2:	4916      	ldr	r1, [pc, #88]	@ (811112c <tcp_pcb_remove+0x11c>)
 81110d4:	4813      	ldr	r0, [pc, #76]	@ (8111124 <tcp_pcb_remove+0x114>)
 81110d6:	f004 fe53 	bl	8115d80 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 81110da:	683b      	ldr	r3, [r7, #0]
 81110dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81110de:	2b00      	cmp	r3, #0
 81110e0:	d006      	beq.n	81110f0 <tcp_pcb_remove+0xe0>
 81110e2:	4b0e      	ldr	r3, [pc, #56]	@ (811111c <tcp_pcb_remove+0x10c>)
 81110e4:	f640 0294 	movw	r2, #2196	@ 0x894
 81110e8:	4911      	ldr	r1, [pc, #68]	@ (8111130 <tcp_pcb_remove+0x120>)
 81110ea:	480e      	ldr	r0, [pc, #56]	@ (8111124 <tcp_pcb_remove+0x114>)
 81110ec:	f004 fe48 	bl	8115d80 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 81110f0:	683b      	ldr	r3, [r7, #0]
 81110f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81110f4:	2b00      	cmp	r3, #0
 81110f6:	d006      	beq.n	8111106 <tcp_pcb_remove+0xf6>
 81110f8:	4b08      	ldr	r3, [pc, #32]	@ (811111c <tcp_pcb_remove+0x10c>)
 81110fa:	f640 0296 	movw	r2, #2198	@ 0x896
 81110fe:	490d      	ldr	r1, [pc, #52]	@ (8111134 <tcp_pcb_remove+0x124>)
 8111100:	4808      	ldr	r0, [pc, #32]	@ (8111124 <tcp_pcb_remove+0x114>)
 8111102:	f004 fe3d 	bl	8115d80 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8111106:	683b      	ldr	r3, [r7, #0]
 8111108:	2200      	movs	r2, #0
 811110a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 811110c:	683b      	ldr	r3, [r7, #0]
 811110e:	2200      	movs	r2, #0
 8111110:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8111112:	bf00      	nop
 8111114:	3710      	adds	r7, #16
 8111116:	46bd      	mov	sp, r7
 8111118:	bd80      	pop	{r7, pc}
 811111a:	bf00      	nop
 811111c:	08117ff0 	.word	0x08117ff0
 8111120:	08118698 	.word	0x08118698
 8111124:	08118074 	.word	0x08118074
 8111128:	081186b4 	.word	0x081186b4
 811112c:	081186d4 	.word	0x081186d4
 8111130:	081186ec 	.word	0x081186ec
 8111134:	08118708 	.word	0x08118708

08111138 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8111138:	b580      	push	{r7, lr}
 811113a:	b082      	sub	sp, #8
 811113c:	af00      	add	r7, sp, #0
 811113e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8111140:	687b      	ldr	r3, [r7, #4]
 8111142:	2b00      	cmp	r3, #0
 8111144:	d106      	bne.n	8111154 <tcp_next_iss+0x1c>
 8111146:	4b0a      	ldr	r3, [pc, #40]	@ (8111170 <tcp_next_iss+0x38>)
 8111148:	f640 02af 	movw	r2, #2223	@ 0x8af
 811114c:	4909      	ldr	r1, [pc, #36]	@ (8111174 <tcp_next_iss+0x3c>)
 811114e:	480a      	ldr	r0, [pc, #40]	@ (8111178 <tcp_next_iss+0x40>)
 8111150:	f004 fe16 	bl	8115d80 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8111154:	4b09      	ldr	r3, [pc, #36]	@ (811117c <tcp_next_iss+0x44>)
 8111156:	681a      	ldr	r2, [r3, #0]
 8111158:	4b09      	ldr	r3, [pc, #36]	@ (8111180 <tcp_next_iss+0x48>)
 811115a:	681b      	ldr	r3, [r3, #0]
 811115c:	4413      	add	r3, r2
 811115e:	4a07      	ldr	r2, [pc, #28]	@ (811117c <tcp_next_iss+0x44>)
 8111160:	6013      	str	r3, [r2, #0]
  return iss;
 8111162:	4b06      	ldr	r3, [pc, #24]	@ (811117c <tcp_next_iss+0x44>)
 8111164:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8111166:	4618      	mov	r0, r3
 8111168:	3708      	adds	r7, #8
 811116a:	46bd      	mov	sp, r7
 811116c:	bd80      	pop	{r7, pc}
 811116e:	bf00      	nop
 8111170:	08117ff0 	.word	0x08117ff0
 8111174:	08118720 	.word	0x08118720
 8111178:	08118074 	.word	0x08118074
 811117c:	1000002c 	.word	0x1000002c
 8111180:	10011c4c 	.word	0x10011c4c

08111184 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8111184:	b580      	push	{r7, lr}
 8111186:	b086      	sub	sp, #24
 8111188:	af00      	add	r7, sp, #0
 811118a:	4603      	mov	r3, r0
 811118c:	60b9      	str	r1, [r7, #8]
 811118e:	607a      	str	r2, [r7, #4]
 8111190:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8111192:	687b      	ldr	r3, [r7, #4]
 8111194:	2b00      	cmp	r3, #0
 8111196:	d106      	bne.n	81111a6 <tcp_eff_send_mss_netif+0x22>
 8111198:	4b14      	ldr	r3, [pc, #80]	@ (81111ec <tcp_eff_send_mss_netif+0x68>)
 811119a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 811119e:	4914      	ldr	r1, [pc, #80]	@ (81111f0 <tcp_eff_send_mss_netif+0x6c>)
 81111a0:	4814      	ldr	r0, [pc, #80]	@ (81111f4 <tcp_eff_send_mss_netif+0x70>)
 81111a2:	f004 fded 	bl	8115d80 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 81111a6:	68bb      	ldr	r3, [r7, #8]
 81111a8:	2b00      	cmp	r3, #0
 81111aa:	d101      	bne.n	81111b0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 81111ac:	89fb      	ldrh	r3, [r7, #14]
 81111ae:	e019      	b.n	81111e4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 81111b0:	68bb      	ldr	r3, [r7, #8]
 81111b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 81111b4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 81111b6:	8afb      	ldrh	r3, [r7, #22]
 81111b8:	2b00      	cmp	r3, #0
 81111ba:	d012      	beq.n	81111e2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 81111bc:	2328      	movs	r3, #40	@ 0x28
 81111be:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 81111c0:	8afa      	ldrh	r2, [r7, #22]
 81111c2:	8abb      	ldrh	r3, [r7, #20]
 81111c4:	429a      	cmp	r2, r3
 81111c6:	d904      	bls.n	81111d2 <tcp_eff_send_mss_netif+0x4e>
 81111c8:	8afa      	ldrh	r2, [r7, #22]
 81111ca:	8abb      	ldrh	r3, [r7, #20]
 81111cc:	1ad3      	subs	r3, r2, r3
 81111ce:	b29b      	uxth	r3, r3
 81111d0:	e000      	b.n	81111d4 <tcp_eff_send_mss_netif+0x50>
 81111d2:	2300      	movs	r3, #0
 81111d4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 81111d6:	8a7a      	ldrh	r2, [r7, #18]
 81111d8:	89fb      	ldrh	r3, [r7, #14]
 81111da:	4293      	cmp	r3, r2
 81111dc:	bf28      	it	cs
 81111de:	4613      	movcs	r3, r2
 81111e0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 81111e2:	89fb      	ldrh	r3, [r7, #14]
}
 81111e4:	4618      	mov	r0, r3
 81111e6:	3718      	adds	r7, #24
 81111e8:	46bd      	mov	sp, r7
 81111ea:	bd80      	pop	{r7, pc}
 81111ec:	08117ff0 	.word	0x08117ff0
 81111f0:	0811873c 	.word	0x0811873c
 81111f4:	08118074 	.word	0x08118074

081111f8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 81111f8:	b580      	push	{r7, lr}
 81111fa:	b084      	sub	sp, #16
 81111fc:	af00      	add	r7, sp, #0
 81111fe:	6078      	str	r0, [r7, #4]
 8111200:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8111202:	683b      	ldr	r3, [r7, #0]
 8111204:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8111206:	687b      	ldr	r3, [r7, #4]
 8111208:	2b00      	cmp	r3, #0
 811120a:	d119      	bne.n	8111240 <tcp_netif_ip_addr_changed_pcblist+0x48>
 811120c:	4b10      	ldr	r3, [pc, #64]	@ (8111250 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 811120e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8111212:	4910      	ldr	r1, [pc, #64]	@ (8111254 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8111214:	4810      	ldr	r0, [pc, #64]	@ (8111258 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8111216:	f004 fdb3 	bl	8115d80 <iprintf>

  while (pcb != NULL) {
 811121a:	e011      	b.n	8111240 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 811121c:	68fb      	ldr	r3, [r7, #12]
 811121e:	681a      	ldr	r2, [r3, #0]
 8111220:	687b      	ldr	r3, [r7, #4]
 8111222:	681b      	ldr	r3, [r3, #0]
 8111224:	429a      	cmp	r2, r3
 8111226:	d108      	bne.n	811123a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8111228:	68fb      	ldr	r3, [r7, #12]
 811122a:	68db      	ldr	r3, [r3, #12]
 811122c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 811122e:	68f8      	ldr	r0, [r7, #12]
 8111230:	f7fe ffc0 	bl	81101b4 <tcp_abort>
      pcb = next;
 8111234:	68bb      	ldr	r3, [r7, #8]
 8111236:	60fb      	str	r3, [r7, #12]
 8111238:	e002      	b.n	8111240 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 811123a:	68fb      	ldr	r3, [r7, #12]
 811123c:	68db      	ldr	r3, [r3, #12]
 811123e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8111240:	68fb      	ldr	r3, [r7, #12]
 8111242:	2b00      	cmp	r3, #0
 8111244:	d1ea      	bne.n	811121c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8111246:	bf00      	nop
 8111248:	bf00      	nop
 811124a:	3710      	adds	r7, #16
 811124c:	46bd      	mov	sp, r7
 811124e:	bd80      	pop	{r7, pc}
 8111250:	08117ff0 	.word	0x08117ff0
 8111254:	08118764 	.word	0x08118764
 8111258:	08118074 	.word	0x08118074

0811125c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 811125c:	b580      	push	{r7, lr}
 811125e:	b084      	sub	sp, #16
 8111260:	af00      	add	r7, sp, #0
 8111262:	6078      	str	r0, [r7, #4]
 8111264:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8111266:	687b      	ldr	r3, [r7, #4]
 8111268:	2b00      	cmp	r3, #0
 811126a:	d02a      	beq.n	81112c2 <tcp_netif_ip_addr_changed+0x66>
 811126c:	687b      	ldr	r3, [r7, #4]
 811126e:	681b      	ldr	r3, [r3, #0]
 8111270:	2b00      	cmp	r3, #0
 8111272:	d026      	beq.n	81112c2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8111274:	4b15      	ldr	r3, [pc, #84]	@ (81112cc <tcp_netif_ip_addr_changed+0x70>)
 8111276:	681b      	ldr	r3, [r3, #0]
 8111278:	4619      	mov	r1, r3
 811127a:	6878      	ldr	r0, [r7, #4]
 811127c:	f7ff ffbc 	bl	81111f8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8111280:	4b13      	ldr	r3, [pc, #76]	@ (81112d0 <tcp_netif_ip_addr_changed+0x74>)
 8111282:	681b      	ldr	r3, [r3, #0]
 8111284:	4619      	mov	r1, r3
 8111286:	6878      	ldr	r0, [r7, #4]
 8111288:	f7ff ffb6 	bl	81111f8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 811128c:	683b      	ldr	r3, [r7, #0]
 811128e:	2b00      	cmp	r3, #0
 8111290:	d017      	beq.n	81112c2 <tcp_netif_ip_addr_changed+0x66>
 8111292:	683b      	ldr	r3, [r7, #0]
 8111294:	681b      	ldr	r3, [r3, #0]
 8111296:	2b00      	cmp	r3, #0
 8111298:	d013      	beq.n	81112c2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811129a:	4b0e      	ldr	r3, [pc, #56]	@ (81112d4 <tcp_netif_ip_addr_changed+0x78>)
 811129c:	681b      	ldr	r3, [r3, #0]
 811129e:	60fb      	str	r3, [r7, #12]
 81112a0:	e00c      	b.n	81112bc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 81112a2:	68fb      	ldr	r3, [r7, #12]
 81112a4:	681a      	ldr	r2, [r3, #0]
 81112a6:	687b      	ldr	r3, [r7, #4]
 81112a8:	681b      	ldr	r3, [r3, #0]
 81112aa:	429a      	cmp	r2, r3
 81112ac:	d103      	bne.n	81112b6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 81112ae:	683b      	ldr	r3, [r7, #0]
 81112b0:	681a      	ldr	r2, [r3, #0]
 81112b2:	68fb      	ldr	r3, [r7, #12]
 81112b4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 81112b6:	68fb      	ldr	r3, [r7, #12]
 81112b8:	68db      	ldr	r3, [r3, #12]
 81112ba:	60fb      	str	r3, [r7, #12]
 81112bc:	68fb      	ldr	r3, [r7, #12]
 81112be:	2b00      	cmp	r3, #0
 81112c0:	d1ef      	bne.n	81112a2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 81112c2:	bf00      	nop
 81112c4:	3710      	adds	r7, #16
 81112c6:	46bd      	mov	sp, r7
 81112c8:	bd80      	pop	{r7, pc}
 81112ca:	bf00      	nop
 81112cc:	10011c58 	.word	0x10011c58
 81112d0:	10011c50 	.word	0x10011c50
 81112d4:	10011c54 	.word	0x10011c54

081112d8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 81112d8:	b580      	push	{r7, lr}
 81112da:	b082      	sub	sp, #8
 81112dc:	af00      	add	r7, sp, #0
 81112de:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 81112e0:	687b      	ldr	r3, [r7, #4]
 81112e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81112e4:	2b00      	cmp	r3, #0
 81112e6:	d007      	beq.n	81112f8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 81112e8:	687b      	ldr	r3, [r7, #4]
 81112ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81112ec:	4618      	mov	r0, r3
 81112ee:	f7ff fc3d 	bl	8110b6c <tcp_segs_free>
    pcb->ooseq = NULL;
 81112f2:	687b      	ldr	r3, [r7, #4]
 81112f4:	2200      	movs	r2, #0
 81112f6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 81112f8:	bf00      	nop
 81112fa:	3708      	adds	r7, #8
 81112fc:	46bd      	mov	sp, r7
 81112fe:	bd80      	pop	{r7, pc}

08111300 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8111300:	b590      	push	{r4, r7, lr}
 8111302:	b08d      	sub	sp, #52	@ 0x34
 8111304:	af04      	add	r7, sp, #16
 8111306:	6078      	str	r0, [r7, #4]
 8111308:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 811130a:	687b      	ldr	r3, [r7, #4]
 811130c:	2b00      	cmp	r3, #0
 811130e:	d105      	bne.n	811131c <tcp_input+0x1c>
 8111310:	4b9b      	ldr	r3, [pc, #620]	@ (8111580 <tcp_input+0x280>)
 8111312:	2283      	movs	r2, #131	@ 0x83
 8111314:	499b      	ldr	r1, [pc, #620]	@ (8111584 <tcp_input+0x284>)
 8111316:	489c      	ldr	r0, [pc, #624]	@ (8111588 <tcp_input+0x288>)
 8111318:	f004 fd32 	bl	8115d80 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 811131c:	687b      	ldr	r3, [r7, #4]
 811131e:	685b      	ldr	r3, [r3, #4]
 8111320:	4a9a      	ldr	r2, [pc, #616]	@ (811158c <tcp_input+0x28c>)
 8111322:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8111324:	687b      	ldr	r3, [r7, #4]
 8111326:	895b      	ldrh	r3, [r3, #10]
 8111328:	2b13      	cmp	r3, #19
 811132a:	f240 83d1 	bls.w	8111ad0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 811132e:	4b98      	ldr	r3, [pc, #608]	@ (8111590 <tcp_input+0x290>)
 8111330:	695b      	ldr	r3, [r3, #20]
 8111332:	4a97      	ldr	r2, [pc, #604]	@ (8111590 <tcp_input+0x290>)
 8111334:	6812      	ldr	r2, [r2, #0]
 8111336:	4611      	mov	r1, r2
 8111338:	4618      	mov	r0, r3
 811133a:	f7fb fe9d 	bl	810d078 <ip4_addr_isbroadcast_u32>
 811133e:	4603      	mov	r3, r0
 8111340:	2b00      	cmp	r3, #0
 8111342:	f040 83c7 	bne.w	8111ad4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8111346:	4b92      	ldr	r3, [pc, #584]	@ (8111590 <tcp_input+0x290>)
 8111348:	695b      	ldr	r3, [r3, #20]
 811134a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 811134e:	2be0      	cmp	r3, #224	@ 0xe0
 8111350:	f000 83c0 	beq.w	8111ad4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8111354:	4b8d      	ldr	r3, [pc, #564]	@ (811158c <tcp_input+0x28c>)
 8111356:	681b      	ldr	r3, [r3, #0]
 8111358:	899b      	ldrh	r3, [r3, #12]
 811135a:	b29b      	uxth	r3, r3
 811135c:	4618      	mov	r0, r3
 811135e:	f7fa f91d 	bl	810b59c <lwip_htons>
 8111362:	4603      	mov	r3, r0
 8111364:	0b1b      	lsrs	r3, r3, #12
 8111366:	b29b      	uxth	r3, r3
 8111368:	b2db      	uxtb	r3, r3
 811136a:	009b      	lsls	r3, r3, #2
 811136c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 811136e:	7cbb      	ldrb	r3, [r7, #18]
 8111370:	2b13      	cmp	r3, #19
 8111372:	f240 83b1 	bls.w	8111ad8 <tcp_input+0x7d8>
 8111376:	7cbb      	ldrb	r3, [r7, #18]
 8111378:	b29a      	uxth	r2, r3
 811137a:	687b      	ldr	r3, [r7, #4]
 811137c:	891b      	ldrh	r3, [r3, #8]
 811137e:	429a      	cmp	r2, r3
 8111380:	f200 83aa 	bhi.w	8111ad8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8111384:	7cbb      	ldrb	r3, [r7, #18]
 8111386:	b29b      	uxth	r3, r3
 8111388:	3b14      	subs	r3, #20
 811138a:	b29a      	uxth	r2, r3
 811138c:	4b81      	ldr	r3, [pc, #516]	@ (8111594 <tcp_input+0x294>)
 811138e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8111390:	4b81      	ldr	r3, [pc, #516]	@ (8111598 <tcp_input+0x298>)
 8111392:	2200      	movs	r2, #0
 8111394:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8111396:	687b      	ldr	r3, [r7, #4]
 8111398:	895a      	ldrh	r2, [r3, #10]
 811139a:	7cbb      	ldrb	r3, [r7, #18]
 811139c:	b29b      	uxth	r3, r3
 811139e:	429a      	cmp	r2, r3
 81113a0:	d309      	bcc.n	81113b6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 81113a2:	4b7c      	ldr	r3, [pc, #496]	@ (8111594 <tcp_input+0x294>)
 81113a4:	881a      	ldrh	r2, [r3, #0]
 81113a6:	4b7d      	ldr	r3, [pc, #500]	@ (811159c <tcp_input+0x29c>)
 81113a8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 81113aa:	7cbb      	ldrb	r3, [r7, #18]
 81113ac:	4619      	mov	r1, r3
 81113ae:	6878      	ldr	r0, [r7, #4]
 81113b0:	f7fd fff4 	bl	810f39c <pbuf_remove_header>
 81113b4:	e04e      	b.n	8111454 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 81113b6:	687b      	ldr	r3, [r7, #4]
 81113b8:	681b      	ldr	r3, [r3, #0]
 81113ba:	2b00      	cmp	r3, #0
 81113bc:	d105      	bne.n	81113ca <tcp_input+0xca>
 81113be:	4b70      	ldr	r3, [pc, #448]	@ (8111580 <tcp_input+0x280>)
 81113c0:	22c2      	movs	r2, #194	@ 0xc2
 81113c2:	4977      	ldr	r1, [pc, #476]	@ (81115a0 <tcp_input+0x2a0>)
 81113c4:	4870      	ldr	r0, [pc, #448]	@ (8111588 <tcp_input+0x288>)
 81113c6:	f004 fcdb 	bl	8115d80 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 81113ca:	2114      	movs	r1, #20
 81113cc:	6878      	ldr	r0, [r7, #4]
 81113ce:	f7fd ffe5 	bl	810f39c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 81113d2:	687b      	ldr	r3, [r7, #4]
 81113d4:	895a      	ldrh	r2, [r3, #10]
 81113d6:	4b71      	ldr	r3, [pc, #452]	@ (811159c <tcp_input+0x29c>)
 81113d8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 81113da:	4b6e      	ldr	r3, [pc, #440]	@ (8111594 <tcp_input+0x294>)
 81113dc:	881a      	ldrh	r2, [r3, #0]
 81113de:	4b6f      	ldr	r3, [pc, #444]	@ (811159c <tcp_input+0x29c>)
 81113e0:	881b      	ldrh	r3, [r3, #0]
 81113e2:	1ad3      	subs	r3, r2, r3
 81113e4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 81113e6:	4b6d      	ldr	r3, [pc, #436]	@ (811159c <tcp_input+0x29c>)
 81113e8:	881b      	ldrh	r3, [r3, #0]
 81113ea:	4619      	mov	r1, r3
 81113ec:	6878      	ldr	r0, [r7, #4]
 81113ee:	f7fd ffd5 	bl	810f39c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 81113f2:	687b      	ldr	r3, [r7, #4]
 81113f4:	681b      	ldr	r3, [r3, #0]
 81113f6:	895b      	ldrh	r3, [r3, #10]
 81113f8:	8a3a      	ldrh	r2, [r7, #16]
 81113fa:	429a      	cmp	r2, r3
 81113fc:	f200 836e 	bhi.w	8111adc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8111400:	687b      	ldr	r3, [r7, #4]
 8111402:	681b      	ldr	r3, [r3, #0]
 8111404:	685b      	ldr	r3, [r3, #4]
 8111406:	4a64      	ldr	r2, [pc, #400]	@ (8111598 <tcp_input+0x298>)
 8111408:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 811140a:	687b      	ldr	r3, [r7, #4]
 811140c:	681b      	ldr	r3, [r3, #0]
 811140e:	8a3a      	ldrh	r2, [r7, #16]
 8111410:	4611      	mov	r1, r2
 8111412:	4618      	mov	r0, r3
 8111414:	f7fd ffc2 	bl	810f39c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8111418:	687b      	ldr	r3, [r7, #4]
 811141a:	891a      	ldrh	r2, [r3, #8]
 811141c:	8a3b      	ldrh	r3, [r7, #16]
 811141e:	1ad3      	subs	r3, r2, r3
 8111420:	b29a      	uxth	r2, r3
 8111422:	687b      	ldr	r3, [r7, #4]
 8111424:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8111426:	687b      	ldr	r3, [r7, #4]
 8111428:	895b      	ldrh	r3, [r3, #10]
 811142a:	2b00      	cmp	r3, #0
 811142c:	d005      	beq.n	811143a <tcp_input+0x13a>
 811142e:	4b54      	ldr	r3, [pc, #336]	@ (8111580 <tcp_input+0x280>)
 8111430:	22df      	movs	r2, #223	@ 0xdf
 8111432:	495c      	ldr	r1, [pc, #368]	@ (81115a4 <tcp_input+0x2a4>)
 8111434:	4854      	ldr	r0, [pc, #336]	@ (8111588 <tcp_input+0x288>)
 8111436:	f004 fca3 	bl	8115d80 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 811143a:	687b      	ldr	r3, [r7, #4]
 811143c:	891a      	ldrh	r2, [r3, #8]
 811143e:	687b      	ldr	r3, [r7, #4]
 8111440:	681b      	ldr	r3, [r3, #0]
 8111442:	891b      	ldrh	r3, [r3, #8]
 8111444:	429a      	cmp	r2, r3
 8111446:	d005      	beq.n	8111454 <tcp_input+0x154>
 8111448:	4b4d      	ldr	r3, [pc, #308]	@ (8111580 <tcp_input+0x280>)
 811144a:	22e0      	movs	r2, #224	@ 0xe0
 811144c:	4956      	ldr	r1, [pc, #344]	@ (81115a8 <tcp_input+0x2a8>)
 811144e:	484e      	ldr	r0, [pc, #312]	@ (8111588 <tcp_input+0x288>)
 8111450:	f004 fc96 	bl	8115d80 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8111454:	4b4d      	ldr	r3, [pc, #308]	@ (811158c <tcp_input+0x28c>)
 8111456:	681b      	ldr	r3, [r3, #0]
 8111458:	881b      	ldrh	r3, [r3, #0]
 811145a:	b29b      	uxth	r3, r3
 811145c:	4a4b      	ldr	r2, [pc, #300]	@ (811158c <tcp_input+0x28c>)
 811145e:	6814      	ldr	r4, [r2, #0]
 8111460:	4618      	mov	r0, r3
 8111462:	f7fa f89b 	bl	810b59c <lwip_htons>
 8111466:	4603      	mov	r3, r0
 8111468:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 811146a:	4b48      	ldr	r3, [pc, #288]	@ (811158c <tcp_input+0x28c>)
 811146c:	681b      	ldr	r3, [r3, #0]
 811146e:	885b      	ldrh	r3, [r3, #2]
 8111470:	b29b      	uxth	r3, r3
 8111472:	4a46      	ldr	r2, [pc, #280]	@ (811158c <tcp_input+0x28c>)
 8111474:	6814      	ldr	r4, [r2, #0]
 8111476:	4618      	mov	r0, r3
 8111478:	f7fa f890 	bl	810b59c <lwip_htons>
 811147c:	4603      	mov	r3, r0
 811147e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8111480:	4b42      	ldr	r3, [pc, #264]	@ (811158c <tcp_input+0x28c>)
 8111482:	681b      	ldr	r3, [r3, #0]
 8111484:	685b      	ldr	r3, [r3, #4]
 8111486:	4a41      	ldr	r2, [pc, #260]	@ (811158c <tcp_input+0x28c>)
 8111488:	6814      	ldr	r4, [r2, #0]
 811148a:	4618      	mov	r0, r3
 811148c:	f7fa f89b 	bl	810b5c6 <lwip_htonl>
 8111490:	4603      	mov	r3, r0
 8111492:	6063      	str	r3, [r4, #4]
 8111494:	6863      	ldr	r3, [r4, #4]
 8111496:	4a45      	ldr	r2, [pc, #276]	@ (81115ac <tcp_input+0x2ac>)
 8111498:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 811149a:	4b3c      	ldr	r3, [pc, #240]	@ (811158c <tcp_input+0x28c>)
 811149c:	681b      	ldr	r3, [r3, #0]
 811149e:	689b      	ldr	r3, [r3, #8]
 81114a0:	4a3a      	ldr	r2, [pc, #232]	@ (811158c <tcp_input+0x28c>)
 81114a2:	6814      	ldr	r4, [r2, #0]
 81114a4:	4618      	mov	r0, r3
 81114a6:	f7fa f88e 	bl	810b5c6 <lwip_htonl>
 81114aa:	4603      	mov	r3, r0
 81114ac:	60a3      	str	r3, [r4, #8]
 81114ae:	68a3      	ldr	r3, [r4, #8]
 81114b0:	4a3f      	ldr	r2, [pc, #252]	@ (81115b0 <tcp_input+0x2b0>)
 81114b2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 81114b4:	4b35      	ldr	r3, [pc, #212]	@ (811158c <tcp_input+0x28c>)
 81114b6:	681b      	ldr	r3, [r3, #0]
 81114b8:	89db      	ldrh	r3, [r3, #14]
 81114ba:	b29b      	uxth	r3, r3
 81114bc:	4a33      	ldr	r2, [pc, #204]	@ (811158c <tcp_input+0x28c>)
 81114be:	6814      	ldr	r4, [r2, #0]
 81114c0:	4618      	mov	r0, r3
 81114c2:	f7fa f86b 	bl	810b59c <lwip_htons>
 81114c6:	4603      	mov	r3, r0
 81114c8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 81114ca:	4b30      	ldr	r3, [pc, #192]	@ (811158c <tcp_input+0x28c>)
 81114cc:	681b      	ldr	r3, [r3, #0]
 81114ce:	899b      	ldrh	r3, [r3, #12]
 81114d0:	b29b      	uxth	r3, r3
 81114d2:	4618      	mov	r0, r3
 81114d4:	f7fa f862 	bl	810b59c <lwip_htons>
 81114d8:	4603      	mov	r3, r0
 81114da:	b2db      	uxtb	r3, r3
 81114dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81114e0:	b2da      	uxtb	r2, r3
 81114e2:	4b34      	ldr	r3, [pc, #208]	@ (81115b4 <tcp_input+0x2b4>)
 81114e4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 81114e6:	687b      	ldr	r3, [r7, #4]
 81114e8:	891a      	ldrh	r2, [r3, #8]
 81114ea:	4b33      	ldr	r3, [pc, #204]	@ (81115b8 <tcp_input+0x2b8>)
 81114ec:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 81114ee:	4b31      	ldr	r3, [pc, #196]	@ (81115b4 <tcp_input+0x2b4>)
 81114f0:	781b      	ldrb	r3, [r3, #0]
 81114f2:	f003 0303 	and.w	r3, r3, #3
 81114f6:	2b00      	cmp	r3, #0
 81114f8:	d00c      	beq.n	8111514 <tcp_input+0x214>
    tcplen++;
 81114fa:	4b2f      	ldr	r3, [pc, #188]	@ (81115b8 <tcp_input+0x2b8>)
 81114fc:	881b      	ldrh	r3, [r3, #0]
 81114fe:	3301      	adds	r3, #1
 8111500:	b29a      	uxth	r2, r3
 8111502:	4b2d      	ldr	r3, [pc, #180]	@ (81115b8 <tcp_input+0x2b8>)
 8111504:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8111506:	687b      	ldr	r3, [r7, #4]
 8111508:	891a      	ldrh	r2, [r3, #8]
 811150a:	4b2b      	ldr	r3, [pc, #172]	@ (81115b8 <tcp_input+0x2b8>)
 811150c:	881b      	ldrh	r3, [r3, #0]
 811150e:	429a      	cmp	r2, r3
 8111510:	f200 82e6 	bhi.w	8111ae0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8111514:	2300      	movs	r3, #0
 8111516:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8111518:	4b28      	ldr	r3, [pc, #160]	@ (81115bc <tcp_input+0x2bc>)
 811151a:	681b      	ldr	r3, [r3, #0]
 811151c:	61fb      	str	r3, [r7, #28]
 811151e:	e09d      	b.n	811165c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8111520:	69fb      	ldr	r3, [r7, #28]
 8111522:	7d1b      	ldrb	r3, [r3, #20]
 8111524:	2b00      	cmp	r3, #0
 8111526:	d105      	bne.n	8111534 <tcp_input+0x234>
 8111528:	4b15      	ldr	r3, [pc, #84]	@ (8111580 <tcp_input+0x280>)
 811152a:	22fb      	movs	r2, #251	@ 0xfb
 811152c:	4924      	ldr	r1, [pc, #144]	@ (81115c0 <tcp_input+0x2c0>)
 811152e:	4816      	ldr	r0, [pc, #88]	@ (8111588 <tcp_input+0x288>)
 8111530:	f004 fc26 	bl	8115d80 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8111534:	69fb      	ldr	r3, [r7, #28]
 8111536:	7d1b      	ldrb	r3, [r3, #20]
 8111538:	2b0a      	cmp	r3, #10
 811153a:	d105      	bne.n	8111548 <tcp_input+0x248>
 811153c:	4b10      	ldr	r3, [pc, #64]	@ (8111580 <tcp_input+0x280>)
 811153e:	22fc      	movs	r2, #252	@ 0xfc
 8111540:	4920      	ldr	r1, [pc, #128]	@ (81115c4 <tcp_input+0x2c4>)
 8111542:	4811      	ldr	r0, [pc, #68]	@ (8111588 <tcp_input+0x288>)
 8111544:	f004 fc1c 	bl	8115d80 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8111548:	69fb      	ldr	r3, [r7, #28]
 811154a:	7d1b      	ldrb	r3, [r3, #20]
 811154c:	2b01      	cmp	r3, #1
 811154e:	d105      	bne.n	811155c <tcp_input+0x25c>
 8111550:	4b0b      	ldr	r3, [pc, #44]	@ (8111580 <tcp_input+0x280>)
 8111552:	22fd      	movs	r2, #253	@ 0xfd
 8111554:	491c      	ldr	r1, [pc, #112]	@ (81115c8 <tcp_input+0x2c8>)
 8111556:	480c      	ldr	r0, [pc, #48]	@ (8111588 <tcp_input+0x288>)
 8111558:	f004 fc12 	bl	8115d80 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811155c:	69fb      	ldr	r3, [r7, #28]
 811155e:	7a1b      	ldrb	r3, [r3, #8]
 8111560:	2b00      	cmp	r3, #0
 8111562:	d033      	beq.n	81115cc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8111564:	69fb      	ldr	r3, [r7, #28]
 8111566:	7a1a      	ldrb	r2, [r3, #8]
 8111568:	4b09      	ldr	r3, [pc, #36]	@ (8111590 <tcp_input+0x290>)
 811156a:	685b      	ldr	r3, [r3, #4]
 811156c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8111570:	3301      	adds	r3, #1
 8111572:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8111574:	429a      	cmp	r2, r3
 8111576:	d029      	beq.n	81115cc <tcp_input+0x2cc>
      prev = pcb;
 8111578:	69fb      	ldr	r3, [r7, #28]
 811157a:	61bb      	str	r3, [r7, #24]
      continue;
 811157c:	e06b      	b.n	8111656 <tcp_input+0x356>
 811157e:	bf00      	nop
 8111580:	08118798 	.word	0x08118798
 8111584:	0811880c 	.word	0x0811880c
 8111588:	08118824 	.word	0x08118824
 811158c:	10011c74 	.word	0x10011c74
 8111590:	1000b17c 	.word	0x1000b17c
 8111594:	10011c78 	.word	0x10011c78
 8111598:	10011c7c 	.word	0x10011c7c
 811159c:	10011c7a 	.word	0x10011c7a
 81115a0:	0811884c 	.word	0x0811884c
 81115a4:	0811885c 	.word	0x0811885c
 81115a8:	08118868 	.word	0x08118868
 81115ac:	10011c84 	.word	0x10011c84
 81115b0:	10011c88 	.word	0x10011c88
 81115b4:	10011c90 	.word	0x10011c90
 81115b8:	10011c8e 	.word	0x10011c8e
 81115bc:	10011c58 	.word	0x10011c58
 81115c0:	08118888 	.word	0x08118888
 81115c4:	081188b0 	.word	0x081188b0
 81115c8:	081188dc 	.word	0x081188dc
    }

    if (pcb->remote_port == tcphdr->src &&
 81115cc:	69fb      	ldr	r3, [r7, #28]
 81115ce:	8b1a      	ldrh	r2, [r3, #24]
 81115d0:	4b72      	ldr	r3, [pc, #456]	@ (811179c <tcp_input+0x49c>)
 81115d2:	681b      	ldr	r3, [r3, #0]
 81115d4:	881b      	ldrh	r3, [r3, #0]
 81115d6:	b29b      	uxth	r3, r3
 81115d8:	429a      	cmp	r2, r3
 81115da:	d13a      	bne.n	8111652 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 81115dc:	69fb      	ldr	r3, [r7, #28]
 81115de:	8ada      	ldrh	r2, [r3, #22]
 81115e0:	4b6e      	ldr	r3, [pc, #440]	@ (811179c <tcp_input+0x49c>)
 81115e2:	681b      	ldr	r3, [r3, #0]
 81115e4:	885b      	ldrh	r3, [r3, #2]
 81115e6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 81115e8:	429a      	cmp	r2, r3
 81115ea:	d132      	bne.n	8111652 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 81115ec:	69fb      	ldr	r3, [r7, #28]
 81115ee:	685a      	ldr	r2, [r3, #4]
 81115f0:	4b6b      	ldr	r3, [pc, #428]	@ (81117a0 <tcp_input+0x4a0>)
 81115f2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 81115f4:	429a      	cmp	r2, r3
 81115f6:	d12c      	bne.n	8111652 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 81115f8:	69fb      	ldr	r3, [r7, #28]
 81115fa:	681a      	ldr	r2, [r3, #0]
 81115fc:	4b68      	ldr	r3, [pc, #416]	@ (81117a0 <tcp_input+0x4a0>)
 81115fe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8111600:	429a      	cmp	r2, r3
 8111602:	d126      	bne.n	8111652 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8111604:	69fb      	ldr	r3, [r7, #28]
 8111606:	68db      	ldr	r3, [r3, #12]
 8111608:	69fa      	ldr	r2, [r7, #28]
 811160a:	429a      	cmp	r2, r3
 811160c:	d106      	bne.n	811161c <tcp_input+0x31c>
 811160e:	4b65      	ldr	r3, [pc, #404]	@ (81117a4 <tcp_input+0x4a4>)
 8111610:	f240 120d 	movw	r2, #269	@ 0x10d
 8111614:	4964      	ldr	r1, [pc, #400]	@ (81117a8 <tcp_input+0x4a8>)
 8111616:	4865      	ldr	r0, [pc, #404]	@ (81117ac <tcp_input+0x4ac>)
 8111618:	f004 fbb2 	bl	8115d80 <iprintf>
      if (prev != NULL) {
 811161c:	69bb      	ldr	r3, [r7, #24]
 811161e:	2b00      	cmp	r3, #0
 8111620:	d00a      	beq.n	8111638 <tcp_input+0x338>
        prev->next = pcb->next;
 8111622:	69fb      	ldr	r3, [r7, #28]
 8111624:	68da      	ldr	r2, [r3, #12]
 8111626:	69bb      	ldr	r3, [r7, #24]
 8111628:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 811162a:	4b61      	ldr	r3, [pc, #388]	@ (81117b0 <tcp_input+0x4b0>)
 811162c:	681a      	ldr	r2, [r3, #0]
 811162e:	69fb      	ldr	r3, [r7, #28]
 8111630:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8111632:	4a5f      	ldr	r2, [pc, #380]	@ (81117b0 <tcp_input+0x4b0>)
 8111634:	69fb      	ldr	r3, [r7, #28]
 8111636:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8111638:	69fb      	ldr	r3, [r7, #28]
 811163a:	68db      	ldr	r3, [r3, #12]
 811163c:	69fa      	ldr	r2, [r7, #28]
 811163e:	429a      	cmp	r2, r3
 8111640:	d111      	bne.n	8111666 <tcp_input+0x366>
 8111642:	4b58      	ldr	r3, [pc, #352]	@ (81117a4 <tcp_input+0x4a4>)
 8111644:	f240 1215 	movw	r2, #277	@ 0x115
 8111648:	495a      	ldr	r1, [pc, #360]	@ (81117b4 <tcp_input+0x4b4>)
 811164a:	4858      	ldr	r0, [pc, #352]	@ (81117ac <tcp_input+0x4ac>)
 811164c:	f004 fb98 	bl	8115d80 <iprintf>
      break;
 8111650:	e009      	b.n	8111666 <tcp_input+0x366>
    }
    prev = pcb;
 8111652:	69fb      	ldr	r3, [r7, #28]
 8111654:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8111656:	69fb      	ldr	r3, [r7, #28]
 8111658:	68db      	ldr	r3, [r3, #12]
 811165a:	61fb      	str	r3, [r7, #28]
 811165c:	69fb      	ldr	r3, [r7, #28]
 811165e:	2b00      	cmp	r3, #0
 8111660:	f47f af5e 	bne.w	8111520 <tcp_input+0x220>
 8111664:	e000      	b.n	8111668 <tcp_input+0x368>
      break;
 8111666:	bf00      	nop
  }

  if (pcb == NULL) {
 8111668:	69fb      	ldr	r3, [r7, #28]
 811166a:	2b00      	cmp	r3, #0
 811166c:	f040 80aa 	bne.w	81117c4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8111670:	4b51      	ldr	r3, [pc, #324]	@ (81117b8 <tcp_input+0x4b8>)
 8111672:	681b      	ldr	r3, [r3, #0]
 8111674:	61fb      	str	r3, [r7, #28]
 8111676:	e03f      	b.n	81116f8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8111678:	69fb      	ldr	r3, [r7, #28]
 811167a:	7d1b      	ldrb	r3, [r3, #20]
 811167c:	2b0a      	cmp	r3, #10
 811167e:	d006      	beq.n	811168e <tcp_input+0x38e>
 8111680:	4b48      	ldr	r3, [pc, #288]	@ (81117a4 <tcp_input+0x4a4>)
 8111682:	f240 121f 	movw	r2, #287	@ 0x11f
 8111686:	494d      	ldr	r1, [pc, #308]	@ (81117bc <tcp_input+0x4bc>)
 8111688:	4848      	ldr	r0, [pc, #288]	@ (81117ac <tcp_input+0x4ac>)
 811168a:	f004 fb79 	bl	8115d80 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811168e:	69fb      	ldr	r3, [r7, #28]
 8111690:	7a1b      	ldrb	r3, [r3, #8]
 8111692:	2b00      	cmp	r3, #0
 8111694:	d009      	beq.n	81116aa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8111696:	69fb      	ldr	r3, [r7, #28]
 8111698:	7a1a      	ldrb	r2, [r3, #8]
 811169a:	4b41      	ldr	r3, [pc, #260]	@ (81117a0 <tcp_input+0x4a0>)
 811169c:	685b      	ldr	r3, [r3, #4]
 811169e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81116a2:	3301      	adds	r3, #1
 81116a4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 81116a6:	429a      	cmp	r2, r3
 81116a8:	d122      	bne.n	81116f0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 81116aa:	69fb      	ldr	r3, [r7, #28]
 81116ac:	8b1a      	ldrh	r2, [r3, #24]
 81116ae:	4b3b      	ldr	r3, [pc, #236]	@ (811179c <tcp_input+0x49c>)
 81116b0:	681b      	ldr	r3, [r3, #0]
 81116b2:	881b      	ldrh	r3, [r3, #0]
 81116b4:	b29b      	uxth	r3, r3
 81116b6:	429a      	cmp	r2, r3
 81116b8:	d11b      	bne.n	81116f2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 81116ba:	69fb      	ldr	r3, [r7, #28]
 81116bc:	8ada      	ldrh	r2, [r3, #22]
 81116be:	4b37      	ldr	r3, [pc, #220]	@ (811179c <tcp_input+0x49c>)
 81116c0:	681b      	ldr	r3, [r3, #0]
 81116c2:	885b      	ldrh	r3, [r3, #2]
 81116c4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 81116c6:	429a      	cmp	r2, r3
 81116c8:	d113      	bne.n	81116f2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 81116ca:	69fb      	ldr	r3, [r7, #28]
 81116cc:	685a      	ldr	r2, [r3, #4]
 81116ce:	4b34      	ldr	r3, [pc, #208]	@ (81117a0 <tcp_input+0x4a0>)
 81116d0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 81116d2:	429a      	cmp	r2, r3
 81116d4:	d10d      	bne.n	81116f2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 81116d6:	69fb      	ldr	r3, [r7, #28]
 81116d8:	681a      	ldr	r2, [r3, #0]
 81116da:	4b31      	ldr	r3, [pc, #196]	@ (81117a0 <tcp_input+0x4a0>)
 81116dc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 81116de:	429a      	cmp	r2, r3
 81116e0:	d107      	bne.n	81116f2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 81116e2:	69f8      	ldr	r0, [r7, #28]
 81116e4:	f000 fb56 	bl	8111d94 <tcp_timewait_input>
        }
        pbuf_free(p);
 81116e8:	6878      	ldr	r0, [r7, #4]
 81116ea:	f7fd fedd 	bl	810f4a8 <pbuf_free>
        return;
 81116ee:	e1fd      	b.n	8111aec <tcp_input+0x7ec>
        continue;
 81116f0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 81116f2:	69fb      	ldr	r3, [r7, #28]
 81116f4:	68db      	ldr	r3, [r3, #12]
 81116f6:	61fb      	str	r3, [r7, #28]
 81116f8:	69fb      	ldr	r3, [r7, #28]
 81116fa:	2b00      	cmp	r3, #0
 81116fc:	d1bc      	bne.n	8111678 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 81116fe:	2300      	movs	r3, #0
 8111700:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8111702:	4b2f      	ldr	r3, [pc, #188]	@ (81117c0 <tcp_input+0x4c0>)
 8111704:	681b      	ldr	r3, [r3, #0]
 8111706:	617b      	str	r3, [r7, #20]
 8111708:	e02a      	b.n	8111760 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 811170a:	697b      	ldr	r3, [r7, #20]
 811170c:	7a1b      	ldrb	r3, [r3, #8]
 811170e:	2b00      	cmp	r3, #0
 8111710:	d00c      	beq.n	811172c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8111712:	697b      	ldr	r3, [r7, #20]
 8111714:	7a1a      	ldrb	r2, [r3, #8]
 8111716:	4b22      	ldr	r3, [pc, #136]	@ (81117a0 <tcp_input+0x4a0>)
 8111718:	685b      	ldr	r3, [r3, #4]
 811171a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811171e:	3301      	adds	r3, #1
 8111720:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8111722:	429a      	cmp	r2, r3
 8111724:	d002      	beq.n	811172c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8111726:	697b      	ldr	r3, [r7, #20]
 8111728:	61bb      	str	r3, [r7, #24]
        continue;
 811172a:	e016      	b.n	811175a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 811172c:	697b      	ldr	r3, [r7, #20]
 811172e:	8ada      	ldrh	r2, [r3, #22]
 8111730:	4b1a      	ldr	r3, [pc, #104]	@ (811179c <tcp_input+0x49c>)
 8111732:	681b      	ldr	r3, [r3, #0]
 8111734:	885b      	ldrh	r3, [r3, #2]
 8111736:	b29b      	uxth	r3, r3
 8111738:	429a      	cmp	r2, r3
 811173a:	d10c      	bne.n	8111756 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 811173c:	697b      	ldr	r3, [r7, #20]
 811173e:	681a      	ldr	r2, [r3, #0]
 8111740:	4b17      	ldr	r3, [pc, #92]	@ (81117a0 <tcp_input+0x4a0>)
 8111742:	695b      	ldr	r3, [r3, #20]
 8111744:	429a      	cmp	r2, r3
 8111746:	d00f      	beq.n	8111768 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8111748:	697b      	ldr	r3, [r7, #20]
 811174a:	2b00      	cmp	r3, #0
 811174c:	d00d      	beq.n	811176a <tcp_input+0x46a>
 811174e:	697b      	ldr	r3, [r7, #20]
 8111750:	681b      	ldr	r3, [r3, #0]
 8111752:	2b00      	cmp	r3, #0
 8111754:	d009      	beq.n	811176a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8111756:	697b      	ldr	r3, [r7, #20]
 8111758:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811175a:	697b      	ldr	r3, [r7, #20]
 811175c:	68db      	ldr	r3, [r3, #12]
 811175e:	617b      	str	r3, [r7, #20]
 8111760:	697b      	ldr	r3, [r7, #20]
 8111762:	2b00      	cmp	r3, #0
 8111764:	d1d1      	bne.n	811170a <tcp_input+0x40a>
 8111766:	e000      	b.n	811176a <tcp_input+0x46a>
            break;
 8111768:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 811176a:	697b      	ldr	r3, [r7, #20]
 811176c:	2b00      	cmp	r3, #0
 811176e:	d029      	beq.n	81117c4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8111770:	69bb      	ldr	r3, [r7, #24]
 8111772:	2b00      	cmp	r3, #0
 8111774:	d00a      	beq.n	811178c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8111776:	697b      	ldr	r3, [r7, #20]
 8111778:	68da      	ldr	r2, [r3, #12]
 811177a:	69bb      	ldr	r3, [r7, #24]
 811177c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 811177e:	4b10      	ldr	r3, [pc, #64]	@ (81117c0 <tcp_input+0x4c0>)
 8111780:	681a      	ldr	r2, [r3, #0]
 8111782:	697b      	ldr	r3, [r7, #20]
 8111784:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8111786:	4a0e      	ldr	r2, [pc, #56]	@ (81117c0 <tcp_input+0x4c0>)
 8111788:	697b      	ldr	r3, [r7, #20]
 811178a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 811178c:	6978      	ldr	r0, [r7, #20]
 811178e:	f000 fa03 	bl	8111b98 <tcp_listen_input>
      }
      pbuf_free(p);
 8111792:	6878      	ldr	r0, [r7, #4]
 8111794:	f7fd fe88 	bl	810f4a8 <pbuf_free>
      return;
 8111798:	e1a8      	b.n	8111aec <tcp_input+0x7ec>
 811179a:	bf00      	nop
 811179c:	10011c74 	.word	0x10011c74
 81117a0:	1000b17c 	.word	0x1000b17c
 81117a4:	08118798 	.word	0x08118798
 81117a8:	08118904 	.word	0x08118904
 81117ac:	08118824 	.word	0x08118824
 81117b0:	10011c58 	.word	0x10011c58
 81117b4:	08118930 	.word	0x08118930
 81117b8:	10011c5c 	.word	0x10011c5c
 81117bc:	0811895c 	.word	0x0811895c
 81117c0:	10011c54 	.word	0x10011c54
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 81117c4:	69fb      	ldr	r3, [r7, #28]
 81117c6:	2b00      	cmp	r3, #0
 81117c8:	f000 8158 	beq.w	8111a7c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 81117cc:	4b95      	ldr	r3, [pc, #596]	@ (8111a24 <tcp_input+0x724>)
 81117ce:	2200      	movs	r2, #0
 81117d0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 81117d2:	687b      	ldr	r3, [r7, #4]
 81117d4:	891a      	ldrh	r2, [r3, #8]
 81117d6:	4b93      	ldr	r3, [pc, #588]	@ (8111a24 <tcp_input+0x724>)
 81117d8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 81117da:	4a92      	ldr	r2, [pc, #584]	@ (8111a24 <tcp_input+0x724>)
 81117dc:	687b      	ldr	r3, [r7, #4]
 81117de:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 81117e0:	4b91      	ldr	r3, [pc, #580]	@ (8111a28 <tcp_input+0x728>)
 81117e2:	681b      	ldr	r3, [r3, #0]
 81117e4:	4a8f      	ldr	r2, [pc, #572]	@ (8111a24 <tcp_input+0x724>)
 81117e6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 81117e8:	4b90      	ldr	r3, [pc, #576]	@ (8111a2c <tcp_input+0x72c>)
 81117ea:	2200      	movs	r2, #0
 81117ec:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 81117ee:	4b90      	ldr	r3, [pc, #576]	@ (8111a30 <tcp_input+0x730>)
 81117f0:	2200      	movs	r2, #0
 81117f2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 81117f4:	4b8f      	ldr	r3, [pc, #572]	@ (8111a34 <tcp_input+0x734>)
 81117f6:	2200      	movs	r2, #0
 81117f8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 81117fa:	4b8f      	ldr	r3, [pc, #572]	@ (8111a38 <tcp_input+0x738>)
 81117fc:	781b      	ldrb	r3, [r3, #0]
 81117fe:	f003 0308 	and.w	r3, r3, #8
 8111802:	2b00      	cmp	r3, #0
 8111804:	d006      	beq.n	8111814 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8111806:	687b      	ldr	r3, [r7, #4]
 8111808:	7b5b      	ldrb	r3, [r3, #13]
 811180a:	f043 0301 	orr.w	r3, r3, #1
 811180e:	b2da      	uxtb	r2, r3
 8111810:	687b      	ldr	r3, [r7, #4]
 8111812:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8111814:	69fb      	ldr	r3, [r7, #28]
 8111816:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8111818:	2b00      	cmp	r3, #0
 811181a:	d017      	beq.n	811184c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 811181c:	69f8      	ldr	r0, [r7, #28]
 811181e:	f7ff f927 	bl	8110a70 <tcp_process_refused_data>
 8111822:	4603      	mov	r3, r0
 8111824:	f113 0f0d 	cmn.w	r3, #13
 8111828:	d007      	beq.n	811183a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 811182a:	69fb      	ldr	r3, [r7, #28]
 811182c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 811182e:	2b00      	cmp	r3, #0
 8111830:	d00c      	beq.n	811184c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8111832:	4b82      	ldr	r3, [pc, #520]	@ (8111a3c <tcp_input+0x73c>)
 8111834:	881b      	ldrh	r3, [r3, #0]
 8111836:	2b00      	cmp	r3, #0
 8111838:	d008      	beq.n	811184c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 811183a:	69fb      	ldr	r3, [r7, #28]
 811183c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 811183e:	2b00      	cmp	r3, #0
 8111840:	f040 80e4 	bne.w	8111a0c <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8111844:	69f8      	ldr	r0, [r7, #28]
 8111846:	f003 f9a9 	bl	8114b9c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 811184a:	e0df      	b.n	8111a0c <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 811184c:	4a7c      	ldr	r2, [pc, #496]	@ (8111a40 <tcp_input+0x740>)
 811184e:	69fb      	ldr	r3, [r7, #28]
 8111850:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8111852:	69f8      	ldr	r0, [r7, #28]
 8111854:	f000 fb18 	bl	8111e88 <tcp_process>
 8111858:	4603      	mov	r3, r0
 811185a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 811185c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8111860:	f113 0f0d 	cmn.w	r3, #13
 8111864:	f000 80d4 	beq.w	8111a10 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8111868:	4b71      	ldr	r3, [pc, #452]	@ (8111a30 <tcp_input+0x730>)
 811186a:	781b      	ldrb	r3, [r3, #0]
 811186c:	f003 0308 	and.w	r3, r3, #8
 8111870:	2b00      	cmp	r3, #0
 8111872:	d015      	beq.n	81118a0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8111874:	69fb      	ldr	r3, [r7, #28]
 8111876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811187a:	2b00      	cmp	r3, #0
 811187c:	d008      	beq.n	8111890 <tcp_input+0x590>
 811187e:	69fb      	ldr	r3, [r7, #28]
 8111880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8111884:	69fa      	ldr	r2, [r7, #28]
 8111886:	6912      	ldr	r2, [r2, #16]
 8111888:	f06f 010d 	mvn.w	r1, #13
 811188c:	4610      	mov	r0, r2
 811188e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8111890:	69f9      	ldr	r1, [r7, #28]
 8111892:	486c      	ldr	r0, [pc, #432]	@ (8111a44 <tcp_input+0x744>)
 8111894:	f7ff fbbc 	bl	8111010 <tcp_pcb_remove>
        tcp_free(pcb);
 8111898:	69f8      	ldr	r0, [r7, #28]
 811189a:	f7fe f9a3 	bl	810fbe4 <tcp_free>
 811189e:	e0da      	b.n	8111a56 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 81118a0:	2300      	movs	r3, #0
 81118a2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 81118a4:	4b63      	ldr	r3, [pc, #396]	@ (8111a34 <tcp_input+0x734>)
 81118a6:	881b      	ldrh	r3, [r3, #0]
 81118a8:	2b00      	cmp	r3, #0
 81118aa:	d01d      	beq.n	81118e8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 81118ac:	4b61      	ldr	r3, [pc, #388]	@ (8111a34 <tcp_input+0x734>)
 81118ae:	881b      	ldrh	r3, [r3, #0]
 81118b0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 81118b2:	69fb      	ldr	r3, [r7, #28]
 81118b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81118b8:	2b00      	cmp	r3, #0
 81118ba:	d00a      	beq.n	81118d2 <tcp_input+0x5d2>
 81118bc:	69fb      	ldr	r3, [r7, #28]
 81118be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81118c2:	69fa      	ldr	r2, [r7, #28]
 81118c4:	6910      	ldr	r0, [r2, #16]
 81118c6:	89fa      	ldrh	r2, [r7, #14]
 81118c8:	69f9      	ldr	r1, [r7, #28]
 81118ca:	4798      	blx	r3
 81118cc:	4603      	mov	r3, r0
 81118ce:	74fb      	strb	r3, [r7, #19]
 81118d0:	e001      	b.n	81118d6 <tcp_input+0x5d6>
 81118d2:	2300      	movs	r3, #0
 81118d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 81118d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 81118da:	f113 0f0d 	cmn.w	r3, #13
 81118de:	f000 8099 	beq.w	8111a14 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 81118e2:	4b54      	ldr	r3, [pc, #336]	@ (8111a34 <tcp_input+0x734>)
 81118e4:	2200      	movs	r2, #0
 81118e6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 81118e8:	69f8      	ldr	r0, [r7, #28]
 81118ea:	f000 f915 	bl	8111b18 <tcp_input_delayed_close>
 81118ee:	4603      	mov	r3, r0
 81118f0:	2b00      	cmp	r3, #0
 81118f2:	f040 8091 	bne.w	8111a18 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 81118f6:	4b4d      	ldr	r3, [pc, #308]	@ (8111a2c <tcp_input+0x72c>)
 81118f8:	681b      	ldr	r3, [r3, #0]
 81118fa:	2b00      	cmp	r3, #0
 81118fc:	d041      	beq.n	8111982 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 81118fe:	69fb      	ldr	r3, [r7, #28]
 8111900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8111902:	2b00      	cmp	r3, #0
 8111904:	d006      	beq.n	8111914 <tcp_input+0x614>
 8111906:	4b50      	ldr	r3, [pc, #320]	@ (8111a48 <tcp_input+0x748>)
 8111908:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 811190c:	494f      	ldr	r1, [pc, #316]	@ (8111a4c <tcp_input+0x74c>)
 811190e:	4850      	ldr	r0, [pc, #320]	@ (8111a50 <tcp_input+0x750>)
 8111910:	f004 fa36 	bl	8115d80 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8111914:	69fb      	ldr	r3, [r7, #28]
 8111916:	8b5b      	ldrh	r3, [r3, #26]
 8111918:	f003 0310 	and.w	r3, r3, #16
 811191c:	2b00      	cmp	r3, #0
 811191e:	d008      	beq.n	8111932 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8111920:	4b42      	ldr	r3, [pc, #264]	@ (8111a2c <tcp_input+0x72c>)
 8111922:	681b      	ldr	r3, [r3, #0]
 8111924:	4618      	mov	r0, r3
 8111926:	f7fd fdbf 	bl	810f4a8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 811192a:	69f8      	ldr	r0, [r7, #28]
 811192c:	f7fe fc42 	bl	81101b4 <tcp_abort>
            goto aborted;
 8111930:	e091      	b.n	8111a56 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8111932:	69fb      	ldr	r3, [r7, #28]
 8111934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8111938:	2b00      	cmp	r3, #0
 811193a:	d00c      	beq.n	8111956 <tcp_input+0x656>
 811193c:	69fb      	ldr	r3, [r7, #28]
 811193e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8111942:	69fb      	ldr	r3, [r7, #28]
 8111944:	6918      	ldr	r0, [r3, #16]
 8111946:	4b39      	ldr	r3, [pc, #228]	@ (8111a2c <tcp_input+0x72c>)
 8111948:	681a      	ldr	r2, [r3, #0]
 811194a:	2300      	movs	r3, #0
 811194c:	69f9      	ldr	r1, [r7, #28]
 811194e:	47a0      	blx	r4
 8111950:	4603      	mov	r3, r0
 8111952:	74fb      	strb	r3, [r7, #19]
 8111954:	e008      	b.n	8111968 <tcp_input+0x668>
 8111956:	4b35      	ldr	r3, [pc, #212]	@ (8111a2c <tcp_input+0x72c>)
 8111958:	681a      	ldr	r2, [r3, #0]
 811195a:	2300      	movs	r3, #0
 811195c:	69f9      	ldr	r1, [r7, #28]
 811195e:	2000      	movs	r0, #0
 8111960:	f7ff f95e 	bl	8110c20 <tcp_recv_null>
 8111964:	4603      	mov	r3, r0
 8111966:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8111968:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811196c:	f113 0f0d 	cmn.w	r3, #13
 8111970:	d054      	beq.n	8111a1c <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8111972:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8111976:	2b00      	cmp	r3, #0
 8111978:	d003      	beq.n	8111982 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 811197a:	4b2c      	ldr	r3, [pc, #176]	@ (8111a2c <tcp_input+0x72c>)
 811197c:	681a      	ldr	r2, [r3, #0]
 811197e:	69fb      	ldr	r3, [r7, #28]
 8111980:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8111982:	4b2b      	ldr	r3, [pc, #172]	@ (8111a30 <tcp_input+0x730>)
 8111984:	781b      	ldrb	r3, [r3, #0]
 8111986:	f003 0320 	and.w	r3, r3, #32
 811198a:	2b00      	cmp	r3, #0
 811198c:	d031      	beq.n	81119f2 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 811198e:	69fb      	ldr	r3, [r7, #28]
 8111990:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8111992:	2b00      	cmp	r3, #0
 8111994:	d009      	beq.n	81119aa <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8111996:	69fb      	ldr	r3, [r7, #28]
 8111998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811199a:	7b5a      	ldrb	r2, [r3, #13]
 811199c:	69fb      	ldr	r3, [r7, #28]
 811199e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81119a0:	f042 0220 	orr.w	r2, r2, #32
 81119a4:	b2d2      	uxtb	r2, r2
 81119a6:	735a      	strb	r2, [r3, #13]
 81119a8:	e023      	b.n	81119f2 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 81119aa:	69fb      	ldr	r3, [r7, #28]
 81119ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81119ae:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81119b2:	4293      	cmp	r3, r2
 81119b4:	d005      	beq.n	81119c2 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 81119b6:	69fb      	ldr	r3, [r7, #28]
 81119b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81119ba:	3301      	adds	r3, #1
 81119bc:	b29a      	uxth	r2, r3
 81119be:	69fb      	ldr	r3, [r7, #28]
 81119c0:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 81119c2:	69fb      	ldr	r3, [r7, #28]
 81119c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81119c8:	2b00      	cmp	r3, #0
 81119ca:	d00b      	beq.n	81119e4 <tcp_input+0x6e4>
 81119cc:	69fb      	ldr	r3, [r7, #28]
 81119ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 81119d2:	69fb      	ldr	r3, [r7, #28]
 81119d4:	6918      	ldr	r0, [r3, #16]
 81119d6:	2300      	movs	r3, #0
 81119d8:	2200      	movs	r2, #0
 81119da:	69f9      	ldr	r1, [r7, #28]
 81119dc:	47a0      	blx	r4
 81119de:	4603      	mov	r3, r0
 81119e0:	74fb      	strb	r3, [r7, #19]
 81119e2:	e001      	b.n	81119e8 <tcp_input+0x6e8>
 81119e4:	2300      	movs	r3, #0
 81119e6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 81119e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 81119ec:	f113 0f0d 	cmn.w	r3, #13
 81119f0:	d016      	beq.n	8111a20 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 81119f2:	4b13      	ldr	r3, [pc, #76]	@ (8111a40 <tcp_input+0x740>)
 81119f4:	2200      	movs	r2, #0
 81119f6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 81119f8:	69f8      	ldr	r0, [r7, #28]
 81119fa:	f000 f88d 	bl	8111b18 <tcp_input_delayed_close>
 81119fe:	4603      	mov	r3, r0
 8111a00:	2b00      	cmp	r3, #0
 8111a02:	d127      	bne.n	8111a54 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8111a04:	69f8      	ldr	r0, [r7, #28]
 8111a06:	f002 fac3 	bl	8113f90 <tcp_output>
 8111a0a:	e024      	b.n	8111a56 <tcp_input+0x756>
        goto aborted;
 8111a0c:	bf00      	nop
 8111a0e:	e022      	b.n	8111a56 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8111a10:	bf00      	nop
 8111a12:	e020      	b.n	8111a56 <tcp_input+0x756>
              goto aborted;
 8111a14:	bf00      	nop
 8111a16:	e01e      	b.n	8111a56 <tcp_input+0x756>
          goto aborted;
 8111a18:	bf00      	nop
 8111a1a:	e01c      	b.n	8111a56 <tcp_input+0x756>
            goto aborted;
 8111a1c:	bf00      	nop
 8111a1e:	e01a      	b.n	8111a56 <tcp_input+0x756>
              goto aborted;
 8111a20:	bf00      	nop
 8111a22:	e018      	b.n	8111a56 <tcp_input+0x756>
 8111a24:	10011c64 	.word	0x10011c64
 8111a28:	10011c74 	.word	0x10011c74
 8111a2c:	10011c94 	.word	0x10011c94
 8111a30:	10011c91 	.word	0x10011c91
 8111a34:	10011c8c 	.word	0x10011c8c
 8111a38:	10011c90 	.word	0x10011c90
 8111a3c:	10011c8e 	.word	0x10011c8e
 8111a40:	10011c98 	.word	0x10011c98
 8111a44:	10011c58 	.word	0x10011c58
 8111a48:	08118798 	.word	0x08118798
 8111a4c:	0811898c 	.word	0x0811898c
 8111a50:	08118824 	.word	0x08118824
          goto aborted;
 8111a54:	bf00      	nop
    tcp_input_pcb = NULL;
 8111a56:	4b27      	ldr	r3, [pc, #156]	@ (8111af4 <tcp_input+0x7f4>)
 8111a58:	2200      	movs	r2, #0
 8111a5a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8111a5c:	4b26      	ldr	r3, [pc, #152]	@ (8111af8 <tcp_input+0x7f8>)
 8111a5e:	2200      	movs	r2, #0
 8111a60:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8111a62:	4b26      	ldr	r3, [pc, #152]	@ (8111afc <tcp_input+0x7fc>)
 8111a64:	685b      	ldr	r3, [r3, #4]
 8111a66:	2b00      	cmp	r3, #0
 8111a68:	d03f      	beq.n	8111aea <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8111a6a:	4b24      	ldr	r3, [pc, #144]	@ (8111afc <tcp_input+0x7fc>)
 8111a6c:	685b      	ldr	r3, [r3, #4]
 8111a6e:	4618      	mov	r0, r3
 8111a70:	f7fd fd1a 	bl	810f4a8 <pbuf_free>
      inseg.p = NULL;
 8111a74:	4b21      	ldr	r3, [pc, #132]	@ (8111afc <tcp_input+0x7fc>)
 8111a76:	2200      	movs	r2, #0
 8111a78:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8111a7a:	e036      	b.n	8111aea <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8111a7c:	4b20      	ldr	r3, [pc, #128]	@ (8111b00 <tcp_input+0x800>)
 8111a7e:	681b      	ldr	r3, [r3, #0]
 8111a80:	899b      	ldrh	r3, [r3, #12]
 8111a82:	b29b      	uxth	r3, r3
 8111a84:	4618      	mov	r0, r3
 8111a86:	f7f9 fd89 	bl	810b59c <lwip_htons>
 8111a8a:	4603      	mov	r3, r0
 8111a8c:	b2db      	uxtb	r3, r3
 8111a8e:	f003 0304 	and.w	r3, r3, #4
 8111a92:	2b00      	cmp	r3, #0
 8111a94:	d118      	bne.n	8111ac8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8111a96:	4b1b      	ldr	r3, [pc, #108]	@ (8111b04 <tcp_input+0x804>)
 8111a98:	6819      	ldr	r1, [r3, #0]
 8111a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8111b08 <tcp_input+0x808>)
 8111a9c:	881b      	ldrh	r3, [r3, #0]
 8111a9e:	461a      	mov	r2, r3
 8111aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8111b0c <tcp_input+0x80c>)
 8111aa2:	681b      	ldr	r3, [r3, #0]
 8111aa4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8111aa6:	4b16      	ldr	r3, [pc, #88]	@ (8111b00 <tcp_input+0x800>)
 8111aa8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8111aaa:	885b      	ldrh	r3, [r3, #2]
 8111aac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8111aae:	4a14      	ldr	r2, [pc, #80]	@ (8111b00 <tcp_input+0x800>)
 8111ab0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8111ab2:	8812      	ldrh	r2, [r2, #0]
 8111ab4:	b292      	uxth	r2, r2
 8111ab6:	9202      	str	r2, [sp, #8]
 8111ab8:	9301      	str	r3, [sp, #4]
 8111aba:	4b15      	ldr	r3, [pc, #84]	@ (8111b10 <tcp_input+0x810>)
 8111abc:	9300      	str	r3, [sp, #0]
 8111abe:	4b15      	ldr	r3, [pc, #84]	@ (8111b14 <tcp_input+0x814>)
 8111ac0:	4602      	mov	r2, r0
 8111ac2:	2000      	movs	r0, #0
 8111ac4:	f003 f818 	bl	8114af8 <tcp_rst>
    pbuf_free(p);
 8111ac8:	6878      	ldr	r0, [r7, #4]
 8111aca:	f7fd fced 	bl	810f4a8 <pbuf_free>
  return;
 8111ace:	e00c      	b.n	8111aea <tcp_input+0x7ea>
    goto dropped;
 8111ad0:	bf00      	nop
 8111ad2:	e006      	b.n	8111ae2 <tcp_input+0x7e2>
    goto dropped;
 8111ad4:	bf00      	nop
 8111ad6:	e004      	b.n	8111ae2 <tcp_input+0x7e2>
    goto dropped;
 8111ad8:	bf00      	nop
 8111ada:	e002      	b.n	8111ae2 <tcp_input+0x7e2>
      goto dropped;
 8111adc:	bf00      	nop
 8111ade:	e000      	b.n	8111ae2 <tcp_input+0x7e2>
      goto dropped;
 8111ae0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8111ae2:	6878      	ldr	r0, [r7, #4]
 8111ae4:	f7fd fce0 	bl	810f4a8 <pbuf_free>
 8111ae8:	e000      	b.n	8111aec <tcp_input+0x7ec>
  return;
 8111aea:	bf00      	nop
}
 8111aec:	3724      	adds	r7, #36	@ 0x24
 8111aee:	46bd      	mov	sp, r7
 8111af0:	bd90      	pop	{r4, r7, pc}
 8111af2:	bf00      	nop
 8111af4:	10011c98 	.word	0x10011c98
 8111af8:	10011c94 	.word	0x10011c94
 8111afc:	10011c64 	.word	0x10011c64
 8111b00:	10011c74 	.word	0x10011c74
 8111b04:	10011c88 	.word	0x10011c88
 8111b08:	10011c8e 	.word	0x10011c8e
 8111b0c:	10011c84 	.word	0x10011c84
 8111b10:	1000b18c 	.word	0x1000b18c
 8111b14:	1000b190 	.word	0x1000b190

08111b18 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8111b18:	b580      	push	{r7, lr}
 8111b1a:	b082      	sub	sp, #8
 8111b1c:	af00      	add	r7, sp, #0
 8111b1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8111b20:	687b      	ldr	r3, [r7, #4]
 8111b22:	2b00      	cmp	r3, #0
 8111b24:	d106      	bne.n	8111b34 <tcp_input_delayed_close+0x1c>
 8111b26:	4b17      	ldr	r3, [pc, #92]	@ (8111b84 <tcp_input_delayed_close+0x6c>)
 8111b28:	f240 225a 	movw	r2, #602	@ 0x25a
 8111b2c:	4916      	ldr	r1, [pc, #88]	@ (8111b88 <tcp_input_delayed_close+0x70>)
 8111b2e:	4817      	ldr	r0, [pc, #92]	@ (8111b8c <tcp_input_delayed_close+0x74>)
 8111b30:	f004 f926 	bl	8115d80 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8111b34:	4b16      	ldr	r3, [pc, #88]	@ (8111b90 <tcp_input_delayed_close+0x78>)
 8111b36:	781b      	ldrb	r3, [r3, #0]
 8111b38:	f003 0310 	and.w	r3, r3, #16
 8111b3c:	2b00      	cmp	r3, #0
 8111b3e:	d01c      	beq.n	8111b7a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8111b40:	687b      	ldr	r3, [r7, #4]
 8111b42:	8b5b      	ldrh	r3, [r3, #26]
 8111b44:	f003 0310 	and.w	r3, r3, #16
 8111b48:	2b00      	cmp	r3, #0
 8111b4a:	d10d      	bne.n	8111b68 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8111b4c:	687b      	ldr	r3, [r7, #4]
 8111b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8111b52:	2b00      	cmp	r3, #0
 8111b54:	d008      	beq.n	8111b68 <tcp_input_delayed_close+0x50>
 8111b56:	687b      	ldr	r3, [r7, #4]
 8111b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8111b5c:	687a      	ldr	r2, [r7, #4]
 8111b5e:	6912      	ldr	r2, [r2, #16]
 8111b60:	f06f 010e 	mvn.w	r1, #14
 8111b64:	4610      	mov	r0, r2
 8111b66:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8111b68:	6879      	ldr	r1, [r7, #4]
 8111b6a:	480a      	ldr	r0, [pc, #40]	@ (8111b94 <tcp_input_delayed_close+0x7c>)
 8111b6c:	f7ff fa50 	bl	8111010 <tcp_pcb_remove>
    tcp_free(pcb);
 8111b70:	6878      	ldr	r0, [r7, #4]
 8111b72:	f7fe f837 	bl	810fbe4 <tcp_free>
    return 1;
 8111b76:	2301      	movs	r3, #1
 8111b78:	e000      	b.n	8111b7c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8111b7a:	2300      	movs	r3, #0
}
 8111b7c:	4618      	mov	r0, r3
 8111b7e:	3708      	adds	r7, #8
 8111b80:	46bd      	mov	sp, r7
 8111b82:	bd80      	pop	{r7, pc}
 8111b84:	08118798 	.word	0x08118798
 8111b88:	081189a8 	.word	0x081189a8
 8111b8c:	08118824 	.word	0x08118824
 8111b90:	10011c91 	.word	0x10011c91
 8111b94:	10011c58 	.word	0x10011c58

08111b98 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8111b98:	b590      	push	{r4, r7, lr}
 8111b9a:	b08b      	sub	sp, #44	@ 0x2c
 8111b9c:	af04      	add	r7, sp, #16
 8111b9e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8111ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8111d60 <tcp_listen_input+0x1c8>)
 8111ba2:	781b      	ldrb	r3, [r3, #0]
 8111ba4:	f003 0304 	and.w	r3, r3, #4
 8111ba8:	2b00      	cmp	r3, #0
 8111baa:	f040 80d2 	bne.w	8111d52 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8111bae:	687b      	ldr	r3, [r7, #4]
 8111bb0:	2b00      	cmp	r3, #0
 8111bb2:	d106      	bne.n	8111bc2 <tcp_listen_input+0x2a>
 8111bb4:	4b6b      	ldr	r3, [pc, #428]	@ (8111d64 <tcp_listen_input+0x1cc>)
 8111bb6:	f240 2281 	movw	r2, #641	@ 0x281
 8111bba:	496b      	ldr	r1, [pc, #428]	@ (8111d68 <tcp_listen_input+0x1d0>)
 8111bbc:	486b      	ldr	r0, [pc, #428]	@ (8111d6c <tcp_listen_input+0x1d4>)
 8111bbe:	f004 f8df 	bl	8115d80 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8111bc2:	4b67      	ldr	r3, [pc, #412]	@ (8111d60 <tcp_listen_input+0x1c8>)
 8111bc4:	781b      	ldrb	r3, [r3, #0]
 8111bc6:	f003 0310 	and.w	r3, r3, #16
 8111bca:	2b00      	cmp	r3, #0
 8111bcc:	d019      	beq.n	8111c02 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8111bce:	4b68      	ldr	r3, [pc, #416]	@ (8111d70 <tcp_listen_input+0x1d8>)
 8111bd0:	6819      	ldr	r1, [r3, #0]
 8111bd2:	4b68      	ldr	r3, [pc, #416]	@ (8111d74 <tcp_listen_input+0x1dc>)
 8111bd4:	881b      	ldrh	r3, [r3, #0]
 8111bd6:	461a      	mov	r2, r3
 8111bd8:	4b67      	ldr	r3, [pc, #412]	@ (8111d78 <tcp_listen_input+0x1e0>)
 8111bda:	681b      	ldr	r3, [r3, #0]
 8111bdc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8111bde:	4b67      	ldr	r3, [pc, #412]	@ (8111d7c <tcp_listen_input+0x1e4>)
 8111be0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8111be2:	885b      	ldrh	r3, [r3, #2]
 8111be4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8111be6:	4a65      	ldr	r2, [pc, #404]	@ (8111d7c <tcp_listen_input+0x1e4>)
 8111be8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8111bea:	8812      	ldrh	r2, [r2, #0]
 8111bec:	b292      	uxth	r2, r2
 8111bee:	9202      	str	r2, [sp, #8]
 8111bf0:	9301      	str	r3, [sp, #4]
 8111bf2:	4b63      	ldr	r3, [pc, #396]	@ (8111d80 <tcp_listen_input+0x1e8>)
 8111bf4:	9300      	str	r3, [sp, #0]
 8111bf6:	4b63      	ldr	r3, [pc, #396]	@ (8111d84 <tcp_listen_input+0x1ec>)
 8111bf8:	4602      	mov	r2, r0
 8111bfa:	6878      	ldr	r0, [r7, #4]
 8111bfc:	f002 ff7c 	bl	8114af8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8111c00:	e0a9      	b.n	8111d56 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8111c02:	4b57      	ldr	r3, [pc, #348]	@ (8111d60 <tcp_listen_input+0x1c8>)
 8111c04:	781b      	ldrb	r3, [r3, #0]
 8111c06:	f003 0302 	and.w	r3, r3, #2
 8111c0a:	2b00      	cmp	r3, #0
 8111c0c:	f000 80a3 	beq.w	8111d56 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8111c10:	687b      	ldr	r3, [r7, #4]
 8111c12:	7d5b      	ldrb	r3, [r3, #21]
 8111c14:	4618      	mov	r0, r3
 8111c16:	f7ff f927 	bl	8110e68 <tcp_alloc>
 8111c1a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8111c1c:	697b      	ldr	r3, [r7, #20]
 8111c1e:	2b00      	cmp	r3, #0
 8111c20:	d111      	bne.n	8111c46 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8111c22:	687b      	ldr	r3, [r7, #4]
 8111c24:	699b      	ldr	r3, [r3, #24]
 8111c26:	2b00      	cmp	r3, #0
 8111c28:	d00a      	beq.n	8111c40 <tcp_listen_input+0xa8>
 8111c2a:	687b      	ldr	r3, [r7, #4]
 8111c2c:	699b      	ldr	r3, [r3, #24]
 8111c2e:	687a      	ldr	r2, [r7, #4]
 8111c30:	6910      	ldr	r0, [r2, #16]
 8111c32:	f04f 32ff 	mov.w	r2, #4294967295
 8111c36:	2100      	movs	r1, #0
 8111c38:	4798      	blx	r3
 8111c3a:	4603      	mov	r3, r0
 8111c3c:	73bb      	strb	r3, [r7, #14]
      return;
 8111c3e:	e08b      	b.n	8111d58 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8111c40:	23f0      	movs	r3, #240	@ 0xf0
 8111c42:	73bb      	strb	r3, [r7, #14]
      return;
 8111c44:	e088      	b.n	8111d58 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8111c46:	4b50      	ldr	r3, [pc, #320]	@ (8111d88 <tcp_listen_input+0x1f0>)
 8111c48:	695a      	ldr	r2, [r3, #20]
 8111c4a:	697b      	ldr	r3, [r7, #20]
 8111c4c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8111c4e:	4b4e      	ldr	r3, [pc, #312]	@ (8111d88 <tcp_listen_input+0x1f0>)
 8111c50:	691a      	ldr	r2, [r3, #16]
 8111c52:	697b      	ldr	r3, [r7, #20]
 8111c54:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8111c56:	687b      	ldr	r3, [r7, #4]
 8111c58:	8ada      	ldrh	r2, [r3, #22]
 8111c5a:	697b      	ldr	r3, [r7, #20]
 8111c5c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8111c5e:	4b47      	ldr	r3, [pc, #284]	@ (8111d7c <tcp_listen_input+0x1e4>)
 8111c60:	681b      	ldr	r3, [r3, #0]
 8111c62:	881b      	ldrh	r3, [r3, #0]
 8111c64:	b29a      	uxth	r2, r3
 8111c66:	697b      	ldr	r3, [r7, #20]
 8111c68:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8111c6a:	697b      	ldr	r3, [r7, #20]
 8111c6c:	2203      	movs	r2, #3
 8111c6e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8111c70:	4b41      	ldr	r3, [pc, #260]	@ (8111d78 <tcp_listen_input+0x1e0>)
 8111c72:	681b      	ldr	r3, [r3, #0]
 8111c74:	1c5a      	adds	r2, r3, #1
 8111c76:	697b      	ldr	r3, [r7, #20]
 8111c78:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8111c7a:	697b      	ldr	r3, [r7, #20]
 8111c7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8111c7e:	697b      	ldr	r3, [r7, #20]
 8111c80:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8111c82:	6978      	ldr	r0, [r7, #20]
 8111c84:	f7ff fa58 	bl	8111138 <tcp_next_iss>
 8111c88:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8111c8a:	697b      	ldr	r3, [r7, #20]
 8111c8c:	693a      	ldr	r2, [r7, #16]
 8111c8e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8111c90:	697b      	ldr	r3, [r7, #20]
 8111c92:	693a      	ldr	r2, [r7, #16]
 8111c94:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8111c96:	697b      	ldr	r3, [r7, #20]
 8111c98:	693a      	ldr	r2, [r7, #16]
 8111c9a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8111c9c:	697b      	ldr	r3, [r7, #20]
 8111c9e:	693a      	ldr	r2, [r7, #16]
 8111ca0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8111ca2:	4b35      	ldr	r3, [pc, #212]	@ (8111d78 <tcp_listen_input+0x1e0>)
 8111ca4:	681b      	ldr	r3, [r3, #0]
 8111ca6:	1e5a      	subs	r2, r3, #1
 8111ca8:	697b      	ldr	r3, [r7, #20]
 8111caa:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8111cac:	687b      	ldr	r3, [r7, #4]
 8111cae:	691a      	ldr	r2, [r3, #16]
 8111cb0:	697b      	ldr	r3, [r7, #20]
 8111cb2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8111cb4:	697b      	ldr	r3, [r7, #20]
 8111cb6:	687a      	ldr	r2, [r7, #4]
 8111cb8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8111cba:	687b      	ldr	r3, [r7, #4]
 8111cbc:	7a5b      	ldrb	r3, [r3, #9]
 8111cbe:	f003 030c 	and.w	r3, r3, #12
 8111cc2:	b2da      	uxtb	r2, r3
 8111cc4:	697b      	ldr	r3, [r7, #20]
 8111cc6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8111cc8:	687b      	ldr	r3, [r7, #4]
 8111cca:	7a1a      	ldrb	r2, [r3, #8]
 8111ccc:	697b      	ldr	r3, [r7, #20]
 8111cce:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8111cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8111d8c <tcp_listen_input+0x1f4>)
 8111cd2:	681a      	ldr	r2, [r3, #0]
 8111cd4:	697b      	ldr	r3, [r7, #20]
 8111cd6:	60da      	str	r2, [r3, #12]
 8111cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8111d8c <tcp_listen_input+0x1f4>)
 8111cda:	697b      	ldr	r3, [r7, #20]
 8111cdc:	6013      	str	r3, [r2, #0]
 8111cde:	f003 fa6f 	bl	81151c0 <tcp_timer_needed>
 8111ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8111d90 <tcp_listen_input+0x1f8>)
 8111ce4:	2201      	movs	r2, #1
 8111ce6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8111ce8:	6978      	ldr	r0, [r7, #20]
 8111cea:	f001 fd8b 	bl	8113804 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8111cee:	4b23      	ldr	r3, [pc, #140]	@ (8111d7c <tcp_listen_input+0x1e4>)
 8111cf0:	681b      	ldr	r3, [r3, #0]
 8111cf2:	89db      	ldrh	r3, [r3, #14]
 8111cf4:	b29a      	uxth	r2, r3
 8111cf6:	697b      	ldr	r3, [r7, #20]
 8111cf8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8111cfc:	697b      	ldr	r3, [r7, #20]
 8111cfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8111d02:	697b      	ldr	r3, [r7, #20]
 8111d04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8111d08:	697b      	ldr	r3, [r7, #20]
 8111d0a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8111d0c:	697b      	ldr	r3, [r7, #20]
 8111d0e:	3304      	adds	r3, #4
 8111d10:	4618      	mov	r0, r3
 8111d12:	f7fa ff1b 	bl	810cb4c <ip4_route>
 8111d16:	4601      	mov	r1, r0
 8111d18:	697b      	ldr	r3, [r7, #20]
 8111d1a:	3304      	adds	r3, #4
 8111d1c:	461a      	mov	r2, r3
 8111d1e:	4620      	mov	r0, r4
 8111d20:	f7ff fa30 	bl	8111184 <tcp_eff_send_mss_netif>
 8111d24:	4603      	mov	r3, r0
 8111d26:	461a      	mov	r2, r3
 8111d28:	697b      	ldr	r3, [r7, #20]
 8111d2a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8111d2c:	2112      	movs	r1, #18
 8111d2e:	6978      	ldr	r0, [r7, #20]
 8111d30:	f002 f840 	bl	8113db4 <tcp_enqueue_flags>
 8111d34:	4603      	mov	r3, r0
 8111d36:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8111d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8111d3c:	2b00      	cmp	r3, #0
 8111d3e:	d004      	beq.n	8111d4a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8111d40:	2100      	movs	r1, #0
 8111d42:	6978      	ldr	r0, [r7, #20]
 8111d44:	f7fe f978 	bl	8110038 <tcp_abandon>
      return;
 8111d48:	e006      	b.n	8111d58 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8111d4a:	6978      	ldr	r0, [r7, #20]
 8111d4c:	f002 f920 	bl	8113f90 <tcp_output>
  return;
 8111d50:	e001      	b.n	8111d56 <tcp_listen_input+0x1be>
    return;
 8111d52:	bf00      	nop
 8111d54:	e000      	b.n	8111d58 <tcp_listen_input+0x1c0>
  return;
 8111d56:	bf00      	nop
}
 8111d58:	371c      	adds	r7, #28
 8111d5a:	46bd      	mov	sp, r7
 8111d5c:	bd90      	pop	{r4, r7, pc}
 8111d5e:	bf00      	nop
 8111d60:	10011c90 	.word	0x10011c90
 8111d64:	08118798 	.word	0x08118798
 8111d68:	081189d0 	.word	0x081189d0
 8111d6c:	08118824 	.word	0x08118824
 8111d70:	10011c88 	.word	0x10011c88
 8111d74:	10011c8e 	.word	0x10011c8e
 8111d78:	10011c84 	.word	0x10011c84
 8111d7c:	10011c74 	.word	0x10011c74
 8111d80:	1000b18c 	.word	0x1000b18c
 8111d84:	1000b190 	.word	0x1000b190
 8111d88:	1000b17c 	.word	0x1000b17c
 8111d8c:	10011c58 	.word	0x10011c58
 8111d90:	10011c60 	.word	0x10011c60

08111d94 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8111d94:	b580      	push	{r7, lr}
 8111d96:	b086      	sub	sp, #24
 8111d98:	af04      	add	r7, sp, #16
 8111d9a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8111d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8111e5c <tcp_timewait_input+0xc8>)
 8111d9e:	781b      	ldrb	r3, [r3, #0]
 8111da0:	f003 0304 	and.w	r3, r3, #4
 8111da4:	2b00      	cmp	r3, #0
 8111da6:	d153      	bne.n	8111e50 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8111da8:	687b      	ldr	r3, [r7, #4]
 8111daa:	2b00      	cmp	r3, #0
 8111dac:	d106      	bne.n	8111dbc <tcp_timewait_input+0x28>
 8111dae:	4b2c      	ldr	r3, [pc, #176]	@ (8111e60 <tcp_timewait_input+0xcc>)
 8111db0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8111db4:	492b      	ldr	r1, [pc, #172]	@ (8111e64 <tcp_timewait_input+0xd0>)
 8111db6:	482c      	ldr	r0, [pc, #176]	@ (8111e68 <tcp_timewait_input+0xd4>)
 8111db8:	f003 ffe2 	bl	8115d80 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8111dbc:	4b27      	ldr	r3, [pc, #156]	@ (8111e5c <tcp_timewait_input+0xc8>)
 8111dbe:	781b      	ldrb	r3, [r3, #0]
 8111dc0:	f003 0302 	and.w	r3, r3, #2
 8111dc4:	2b00      	cmp	r3, #0
 8111dc6:	d02a      	beq.n	8111e1e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8111dc8:	4b28      	ldr	r3, [pc, #160]	@ (8111e6c <tcp_timewait_input+0xd8>)
 8111dca:	681a      	ldr	r2, [r3, #0]
 8111dcc:	687b      	ldr	r3, [r7, #4]
 8111dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111dd0:	1ad3      	subs	r3, r2, r3
 8111dd2:	2b00      	cmp	r3, #0
 8111dd4:	db2d      	blt.n	8111e32 <tcp_timewait_input+0x9e>
 8111dd6:	4b25      	ldr	r3, [pc, #148]	@ (8111e6c <tcp_timewait_input+0xd8>)
 8111dd8:	681a      	ldr	r2, [r3, #0]
 8111dda:	687b      	ldr	r3, [r7, #4]
 8111ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111dde:	6879      	ldr	r1, [r7, #4]
 8111de0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8111de2:	440b      	add	r3, r1
 8111de4:	1ad3      	subs	r3, r2, r3
 8111de6:	2b00      	cmp	r3, #0
 8111de8:	dc23      	bgt.n	8111e32 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8111dea:	4b21      	ldr	r3, [pc, #132]	@ (8111e70 <tcp_timewait_input+0xdc>)
 8111dec:	6819      	ldr	r1, [r3, #0]
 8111dee:	4b21      	ldr	r3, [pc, #132]	@ (8111e74 <tcp_timewait_input+0xe0>)
 8111df0:	881b      	ldrh	r3, [r3, #0]
 8111df2:	461a      	mov	r2, r3
 8111df4:	4b1d      	ldr	r3, [pc, #116]	@ (8111e6c <tcp_timewait_input+0xd8>)
 8111df6:	681b      	ldr	r3, [r3, #0]
 8111df8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8111dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8111e78 <tcp_timewait_input+0xe4>)
 8111dfc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8111dfe:	885b      	ldrh	r3, [r3, #2]
 8111e00:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8111e02:	4a1d      	ldr	r2, [pc, #116]	@ (8111e78 <tcp_timewait_input+0xe4>)
 8111e04:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8111e06:	8812      	ldrh	r2, [r2, #0]
 8111e08:	b292      	uxth	r2, r2
 8111e0a:	9202      	str	r2, [sp, #8]
 8111e0c:	9301      	str	r3, [sp, #4]
 8111e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8111e7c <tcp_timewait_input+0xe8>)
 8111e10:	9300      	str	r3, [sp, #0]
 8111e12:	4b1b      	ldr	r3, [pc, #108]	@ (8111e80 <tcp_timewait_input+0xec>)
 8111e14:	4602      	mov	r2, r0
 8111e16:	6878      	ldr	r0, [r7, #4]
 8111e18:	f002 fe6e 	bl	8114af8 <tcp_rst>
      return;
 8111e1c:	e01b      	b.n	8111e56 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8111e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8111e5c <tcp_timewait_input+0xc8>)
 8111e20:	781b      	ldrb	r3, [r3, #0]
 8111e22:	f003 0301 	and.w	r3, r3, #1
 8111e26:	2b00      	cmp	r3, #0
 8111e28:	d003      	beq.n	8111e32 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8111e2a:	4b16      	ldr	r3, [pc, #88]	@ (8111e84 <tcp_timewait_input+0xf0>)
 8111e2c:	681a      	ldr	r2, [r3, #0]
 8111e2e:	687b      	ldr	r3, [r7, #4]
 8111e30:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8111e32:	4b10      	ldr	r3, [pc, #64]	@ (8111e74 <tcp_timewait_input+0xe0>)
 8111e34:	881b      	ldrh	r3, [r3, #0]
 8111e36:	2b00      	cmp	r3, #0
 8111e38:	d00c      	beq.n	8111e54 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8111e3a:	687b      	ldr	r3, [r7, #4]
 8111e3c:	8b5b      	ldrh	r3, [r3, #26]
 8111e3e:	f043 0302 	orr.w	r3, r3, #2
 8111e42:	b29a      	uxth	r2, r3
 8111e44:	687b      	ldr	r3, [r7, #4]
 8111e46:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8111e48:	6878      	ldr	r0, [r7, #4]
 8111e4a:	f002 f8a1 	bl	8113f90 <tcp_output>
  }
  return;
 8111e4e:	e001      	b.n	8111e54 <tcp_timewait_input+0xc0>
    return;
 8111e50:	bf00      	nop
 8111e52:	e000      	b.n	8111e56 <tcp_timewait_input+0xc2>
  return;
 8111e54:	bf00      	nop
}
 8111e56:	3708      	adds	r7, #8
 8111e58:	46bd      	mov	sp, r7
 8111e5a:	bd80      	pop	{r7, pc}
 8111e5c:	10011c90 	.word	0x10011c90
 8111e60:	08118798 	.word	0x08118798
 8111e64:	081189f0 	.word	0x081189f0
 8111e68:	08118824 	.word	0x08118824
 8111e6c:	10011c84 	.word	0x10011c84
 8111e70:	10011c88 	.word	0x10011c88
 8111e74:	10011c8e 	.word	0x10011c8e
 8111e78:	10011c74 	.word	0x10011c74
 8111e7c:	1000b18c 	.word	0x1000b18c
 8111e80:	1000b190 	.word	0x1000b190
 8111e84:	10011c4c 	.word	0x10011c4c

08111e88 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8111e88:	b590      	push	{r4, r7, lr}
 8111e8a:	b08d      	sub	sp, #52	@ 0x34
 8111e8c:	af04      	add	r7, sp, #16
 8111e8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8111e90:	2300      	movs	r3, #0
 8111e92:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8111e94:	2300      	movs	r3, #0
 8111e96:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8111e98:	687b      	ldr	r3, [r7, #4]
 8111e9a:	2b00      	cmp	r3, #0
 8111e9c:	d106      	bne.n	8111eac <tcp_process+0x24>
 8111e9e:	4b9d      	ldr	r3, [pc, #628]	@ (8112114 <tcp_process+0x28c>)
 8111ea0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8111ea4:	499c      	ldr	r1, [pc, #624]	@ (8112118 <tcp_process+0x290>)
 8111ea6:	489d      	ldr	r0, [pc, #628]	@ (811211c <tcp_process+0x294>)
 8111ea8:	f003 ff6a 	bl	8115d80 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8111eac:	4b9c      	ldr	r3, [pc, #624]	@ (8112120 <tcp_process+0x298>)
 8111eae:	781b      	ldrb	r3, [r3, #0]
 8111eb0:	f003 0304 	and.w	r3, r3, #4
 8111eb4:	2b00      	cmp	r3, #0
 8111eb6:	d04e      	beq.n	8111f56 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8111eb8:	687b      	ldr	r3, [r7, #4]
 8111eba:	7d1b      	ldrb	r3, [r3, #20]
 8111ebc:	2b02      	cmp	r3, #2
 8111ebe:	d108      	bne.n	8111ed2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8111ec0:	687b      	ldr	r3, [r7, #4]
 8111ec2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8111ec4:	4b97      	ldr	r3, [pc, #604]	@ (8112124 <tcp_process+0x29c>)
 8111ec6:	681b      	ldr	r3, [r3, #0]
 8111ec8:	429a      	cmp	r2, r3
 8111eca:	d123      	bne.n	8111f14 <tcp_process+0x8c>
        acceptable = 1;
 8111ecc:	2301      	movs	r3, #1
 8111ece:	76fb      	strb	r3, [r7, #27]
 8111ed0:	e020      	b.n	8111f14 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8111ed2:	687b      	ldr	r3, [r7, #4]
 8111ed4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8111ed6:	4b94      	ldr	r3, [pc, #592]	@ (8112128 <tcp_process+0x2a0>)
 8111ed8:	681b      	ldr	r3, [r3, #0]
 8111eda:	429a      	cmp	r2, r3
 8111edc:	d102      	bne.n	8111ee4 <tcp_process+0x5c>
        acceptable = 1;
 8111ede:	2301      	movs	r3, #1
 8111ee0:	76fb      	strb	r3, [r7, #27]
 8111ee2:	e017      	b.n	8111f14 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8111ee4:	4b90      	ldr	r3, [pc, #576]	@ (8112128 <tcp_process+0x2a0>)
 8111ee6:	681a      	ldr	r2, [r3, #0]
 8111ee8:	687b      	ldr	r3, [r7, #4]
 8111eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111eec:	1ad3      	subs	r3, r2, r3
 8111eee:	2b00      	cmp	r3, #0
 8111ef0:	db10      	blt.n	8111f14 <tcp_process+0x8c>
 8111ef2:	4b8d      	ldr	r3, [pc, #564]	@ (8112128 <tcp_process+0x2a0>)
 8111ef4:	681a      	ldr	r2, [r3, #0]
 8111ef6:	687b      	ldr	r3, [r7, #4]
 8111ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111efa:	6879      	ldr	r1, [r7, #4]
 8111efc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8111efe:	440b      	add	r3, r1
 8111f00:	1ad3      	subs	r3, r2, r3
 8111f02:	2b00      	cmp	r3, #0
 8111f04:	dc06      	bgt.n	8111f14 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8111f06:	687b      	ldr	r3, [r7, #4]
 8111f08:	8b5b      	ldrh	r3, [r3, #26]
 8111f0a:	f043 0302 	orr.w	r3, r3, #2
 8111f0e:	b29a      	uxth	r2, r3
 8111f10:	687b      	ldr	r3, [r7, #4]
 8111f12:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8111f14:	7efb      	ldrb	r3, [r7, #27]
 8111f16:	2b00      	cmp	r3, #0
 8111f18:	d01b      	beq.n	8111f52 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8111f1a:	687b      	ldr	r3, [r7, #4]
 8111f1c:	7d1b      	ldrb	r3, [r3, #20]
 8111f1e:	2b00      	cmp	r3, #0
 8111f20:	d106      	bne.n	8111f30 <tcp_process+0xa8>
 8111f22:	4b7c      	ldr	r3, [pc, #496]	@ (8112114 <tcp_process+0x28c>)
 8111f24:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8111f28:	4980      	ldr	r1, [pc, #512]	@ (811212c <tcp_process+0x2a4>)
 8111f2a:	487c      	ldr	r0, [pc, #496]	@ (811211c <tcp_process+0x294>)
 8111f2c:	f003 ff28 	bl	8115d80 <iprintf>
      recv_flags |= TF_RESET;
 8111f30:	4b7f      	ldr	r3, [pc, #508]	@ (8112130 <tcp_process+0x2a8>)
 8111f32:	781b      	ldrb	r3, [r3, #0]
 8111f34:	f043 0308 	orr.w	r3, r3, #8
 8111f38:	b2da      	uxtb	r2, r3
 8111f3a:	4b7d      	ldr	r3, [pc, #500]	@ (8112130 <tcp_process+0x2a8>)
 8111f3c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8111f3e:	687b      	ldr	r3, [r7, #4]
 8111f40:	8b5b      	ldrh	r3, [r3, #26]
 8111f42:	f023 0301 	bic.w	r3, r3, #1
 8111f46:	b29a      	uxth	r2, r3
 8111f48:	687b      	ldr	r3, [r7, #4]
 8111f4a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8111f4c:	f06f 030d 	mvn.w	r3, #13
 8111f50:	e37a      	b.n	8112648 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8111f52:	2300      	movs	r3, #0
 8111f54:	e378      	b.n	8112648 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8111f56:	4b72      	ldr	r3, [pc, #456]	@ (8112120 <tcp_process+0x298>)
 8111f58:	781b      	ldrb	r3, [r3, #0]
 8111f5a:	f003 0302 	and.w	r3, r3, #2
 8111f5e:	2b00      	cmp	r3, #0
 8111f60:	d010      	beq.n	8111f84 <tcp_process+0xfc>
 8111f62:	687b      	ldr	r3, [r7, #4]
 8111f64:	7d1b      	ldrb	r3, [r3, #20]
 8111f66:	2b02      	cmp	r3, #2
 8111f68:	d00c      	beq.n	8111f84 <tcp_process+0xfc>
 8111f6a:	687b      	ldr	r3, [r7, #4]
 8111f6c:	7d1b      	ldrb	r3, [r3, #20]
 8111f6e:	2b03      	cmp	r3, #3
 8111f70:	d008      	beq.n	8111f84 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8111f72:	687b      	ldr	r3, [r7, #4]
 8111f74:	8b5b      	ldrh	r3, [r3, #26]
 8111f76:	f043 0302 	orr.w	r3, r3, #2
 8111f7a:	b29a      	uxth	r2, r3
 8111f7c:	687b      	ldr	r3, [r7, #4]
 8111f7e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8111f80:	2300      	movs	r3, #0
 8111f82:	e361      	b.n	8112648 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8111f84:	687b      	ldr	r3, [r7, #4]
 8111f86:	8b5b      	ldrh	r3, [r3, #26]
 8111f88:	f003 0310 	and.w	r3, r3, #16
 8111f8c:	2b00      	cmp	r3, #0
 8111f8e:	d103      	bne.n	8111f98 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8111f90:	4b68      	ldr	r3, [pc, #416]	@ (8112134 <tcp_process+0x2ac>)
 8111f92:	681a      	ldr	r2, [r3, #0]
 8111f94:	687b      	ldr	r3, [r7, #4]
 8111f96:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8111f98:	687b      	ldr	r3, [r7, #4]
 8111f9a:	2200      	movs	r2, #0
 8111f9c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8111fa0:	687b      	ldr	r3, [r7, #4]
 8111fa2:	2200      	movs	r2, #0
 8111fa4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8111fa8:	6878      	ldr	r0, [r7, #4]
 8111faa:	f001 fc2b 	bl	8113804 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8111fae:	687b      	ldr	r3, [r7, #4]
 8111fb0:	7d1b      	ldrb	r3, [r3, #20]
 8111fb2:	3b02      	subs	r3, #2
 8111fb4:	2b07      	cmp	r3, #7
 8111fb6:	f200 8337 	bhi.w	8112628 <tcp_process+0x7a0>
 8111fba:	a201      	add	r2, pc, #4	@ (adr r2, 8111fc0 <tcp_process+0x138>)
 8111fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8111fc0:	08111fe1 	.word	0x08111fe1
 8111fc4:	08112211 	.word	0x08112211
 8111fc8:	08112389 	.word	0x08112389
 8111fcc:	081123b3 	.word	0x081123b3
 8111fd0:	081124d7 	.word	0x081124d7
 8111fd4:	08112389 	.word	0x08112389
 8111fd8:	08112563 	.word	0x08112563
 8111fdc:	081125f3 	.word	0x081125f3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8111fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8112120 <tcp_process+0x298>)
 8111fe2:	781b      	ldrb	r3, [r3, #0]
 8111fe4:	f003 0310 	and.w	r3, r3, #16
 8111fe8:	2b00      	cmp	r3, #0
 8111fea:	f000 80e4 	beq.w	81121b6 <tcp_process+0x32e>
 8111fee:	4b4c      	ldr	r3, [pc, #304]	@ (8112120 <tcp_process+0x298>)
 8111ff0:	781b      	ldrb	r3, [r3, #0]
 8111ff2:	f003 0302 	and.w	r3, r3, #2
 8111ff6:	2b00      	cmp	r3, #0
 8111ff8:	f000 80dd 	beq.w	81121b6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8111ffc:	687b      	ldr	r3, [r7, #4]
 8111ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8112000:	1c5a      	adds	r2, r3, #1
 8112002:	4b48      	ldr	r3, [pc, #288]	@ (8112124 <tcp_process+0x29c>)
 8112004:	681b      	ldr	r3, [r3, #0]
 8112006:	429a      	cmp	r2, r3
 8112008:	f040 80d5 	bne.w	81121b6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 811200c:	4b46      	ldr	r3, [pc, #280]	@ (8112128 <tcp_process+0x2a0>)
 811200e:	681b      	ldr	r3, [r3, #0]
 8112010:	1c5a      	adds	r2, r3, #1
 8112012:	687b      	ldr	r3, [r7, #4]
 8112014:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8112016:	687b      	ldr	r3, [r7, #4]
 8112018:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811201a:	687b      	ldr	r3, [r7, #4]
 811201c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 811201e:	4b41      	ldr	r3, [pc, #260]	@ (8112124 <tcp_process+0x29c>)
 8112020:	681a      	ldr	r2, [r3, #0]
 8112022:	687b      	ldr	r3, [r7, #4]
 8112024:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8112026:	4b44      	ldr	r3, [pc, #272]	@ (8112138 <tcp_process+0x2b0>)
 8112028:	681b      	ldr	r3, [r3, #0]
 811202a:	89db      	ldrh	r3, [r3, #14]
 811202c:	b29a      	uxth	r2, r3
 811202e:	687b      	ldr	r3, [r7, #4]
 8112030:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8112034:	687b      	ldr	r3, [r7, #4]
 8112036:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811203a:	687b      	ldr	r3, [r7, #4]
 811203c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8112040:	4b39      	ldr	r3, [pc, #228]	@ (8112128 <tcp_process+0x2a0>)
 8112042:	681b      	ldr	r3, [r3, #0]
 8112044:	1e5a      	subs	r2, r3, #1
 8112046:	687b      	ldr	r3, [r7, #4]
 8112048:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 811204a:	687b      	ldr	r3, [r7, #4]
 811204c:	2204      	movs	r2, #4
 811204e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8112050:	687b      	ldr	r3, [r7, #4]
 8112052:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8112054:	687b      	ldr	r3, [r7, #4]
 8112056:	3304      	adds	r3, #4
 8112058:	4618      	mov	r0, r3
 811205a:	f7fa fd77 	bl	810cb4c <ip4_route>
 811205e:	4601      	mov	r1, r0
 8112060:	687b      	ldr	r3, [r7, #4]
 8112062:	3304      	adds	r3, #4
 8112064:	461a      	mov	r2, r3
 8112066:	4620      	mov	r0, r4
 8112068:	f7ff f88c 	bl	8111184 <tcp_eff_send_mss_netif>
 811206c:	4603      	mov	r3, r0
 811206e:	461a      	mov	r2, r3
 8112070:	687b      	ldr	r3, [r7, #4]
 8112072:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8112074:	687b      	ldr	r3, [r7, #4]
 8112076:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8112078:	009a      	lsls	r2, r3, #2
 811207a:	687b      	ldr	r3, [r7, #4]
 811207c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811207e:	005b      	lsls	r3, r3, #1
 8112080:	f241 111c 	movw	r1, #4380	@ 0x111c
 8112084:	428b      	cmp	r3, r1
 8112086:	bf38      	it	cc
 8112088:	460b      	movcc	r3, r1
 811208a:	429a      	cmp	r2, r3
 811208c:	d204      	bcs.n	8112098 <tcp_process+0x210>
 811208e:	687b      	ldr	r3, [r7, #4]
 8112090:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8112092:	009b      	lsls	r3, r3, #2
 8112094:	b29b      	uxth	r3, r3
 8112096:	e00d      	b.n	81120b4 <tcp_process+0x22c>
 8112098:	687b      	ldr	r3, [r7, #4]
 811209a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811209c:	005b      	lsls	r3, r3, #1
 811209e:	f241 121c 	movw	r2, #4380	@ 0x111c
 81120a2:	4293      	cmp	r3, r2
 81120a4:	d904      	bls.n	81120b0 <tcp_process+0x228>
 81120a6:	687b      	ldr	r3, [r7, #4]
 81120a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81120aa:	005b      	lsls	r3, r3, #1
 81120ac:	b29b      	uxth	r3, r3
 81120ae:	e001      	b.n	81120b4 <tcp_process+0x22c>
 81120b0:	f241 131c 	movw	r3, #4380	@ 0x111c
 81120b4:	687a      	ldr	r2, [r7, #4]
 81120b6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 81120ba:	687b      	ldr	r3, [r7, #4]
 81120bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81120c0:	2b00      	cmp	r3, #0
 81120c2:	d106      	bne.n	81120d2 <tcp_process+0x24a>
 81120c4:	4b13      	ldr	r3, [pc, #76]	@ (8112114 <tcp_process+0x28c>)
 81120c6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 81120ca:	491c      	ldr	r1, [pc, #112]	@ (811213c <tcp_process+0x2b4>)
 81120cc:	4813      	ldr	r0, [pc, #76]	@ (811211c <tcp_process+0x294>)
 81120ce:	f003 fe57 	bl	8115d80 <iprintf>
        --pcb->snd_queuelen;
 81120d2:	687b      	ldr	r3, [r7, #4]
 81120d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81120d8:	3b01      	subs	r3, #1
 81120da:	b29a      	uxth	r2, r3
 81120dc:	687b      	ldr	r3, [r7, #4]
 81120de:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 81120e2:	687b      	ldr	r3, [r7, #4]
 81120e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81120e6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 81120e8:	69fb      	ldr	r3, [r7, #28]
 81120ea:	2b00      	cmp	r3, #0
 81120ec:	d12a      	bne.n	8112144 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 81120ee:	687b      	ldr	r3, [r7, #4]
 81120f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81120f2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 81120f4:	69fb      	ldr	r3, [r7, #28]
 81120f6:	2b00      	cmp	r3, #0
 81120f8:	d106      	bne.n	8112108 <tcp_process+0x280>
 81120fa:	4b06      	ldr	r3, [pc, #24]	@ (8112114 <tcp_process+0x28c>)
 81120fc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8112100:	490f      	ldr	r1, [pc, #60]	@ (8112140 <tcp_process+0x2b8>)
 8112102:	4806      	ldr	r0, [pc, #24]	@ (811211c <tcp_process+0x294>)
 8112104:	f003 fe3c 	bl	8115d80 <iprintf>
          pcb->unsent = rseg->next;
 8112108:	69fb      	ldr	r3, [r7, #28]
 811210a:	681a      	ldr	r2, [r3, #0]
 811210c:	687b      	ldr	r3, [r7, #4]
 811210e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8112110:	e01c      	b.n	811214c <tcp_process+0x2c4>
 8112112:	bf00      	nop
 8112114:	08118798 	.word	0x08118798
 8112118:	08118a10 	.word	0x08118a10
 811211c:	08118824 	.word	0x08118824
 8112120:	10011c90 	.word	0x10011c90
 8112124:	10011c88 	.word	0x10011c88
 8112128:	10011c84 	.word	0x10011c84
 811212c:	08118a2c 	.word	0x08118a2c
 8112130:	10011c91 	.word	0x10011c91
 8112134:	10011c4c 	.word	0x10011c4c
 8112138:	10011c74 	.word	0x10011c74
 811213c:	08118a4c 	.word	0x08118a4c
 8112140:	08118a64 	.word	0x08118a64
        } else {
          pcb->unacked = rseg->next;
 8112144:	69fb      	ldr	r3, [r7, #28]
 8112146:	681a      	ldr	r2, [r3, #0]
 8112148:	687b      	ldr	r3, [r7, #4]
 811214a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 811214c:	69f8      	ldr	r0, [r7, #28]
 811214e:	f7fe fd22 	bl	8110b96 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8112152:	687b      	ldr	r3, [r7, #4]
 8112154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112156:	2b00      	cmp	r3, #0
 8112158:	d104      	bne.n	8112164 <tcp_process+0x2dc>
          pcb->rtime = -1;
 811215a:	687b      	ldr	r3, [r7, #4]
 811215c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8112160:	861a      	strh	r2, [r3, #48]	@ 0x30
 8112162:	e006      	b.n	8112172 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8112164:	687b      	ldr	r3, [r7, #4]
 8112166:	2200      	movs	r2, #0
 8112168:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 811216a:	687b      	ldr	r3, [r7, #4]
 811216c:	2200      	movs	r2, #0
 811216e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8112172:	687b      	ldr	r3, [r7, #4]
 8112174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8112178:	2b00      	cmp	r3, #0
 811217a:	d00a      	beq.n	8112192 <tcp_process+0x30a>
 811217c:	687b      	ldr	r3, [r7, #4]
 811217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8112182:	687a      	ldr	r2, [r7, #4]
 8112184:	6910      	ldr	r0, [r2, #16]
 8112186:	2200      	movs	r2, #0
 8112188:	6879      	ldr	r1, [r7, #4]
 811218a:	4798      	blx	r3
 811218c:	4603      	mov	r3, r0
 811218e:	76bb      	strb	r3, [r7, #26]
 8112190:	e001      	b.n	8112196 <tcp_process+0x30e>
 8112192:	2300      	movs	r3, #0
 8112194:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8112196:	f997 301a 	ldrsb.w	r3, [r7, #26]
 811219a:	f113 0f0d 	cmn.w	r3, #13
 811219e:	d102      	bne.n	81121a6 <tcp_process+0x31e>
          return ERR_ABRT;
 81121a0:	f06f 030c 	mvn.w	r3, #12
 81121a4:	e250      	b.n	8112648 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 81121a6:	687b      	ldr	r3, [r7, #4]
 81121a8:	8b5b      	ldrh	r3, [r3, #26]
 81121aa:	f043 0302 	orr.w	r3, r3, #2
 81121ae:	b29a      	uxth	r2, r3
 81121b0:	687b      	ldr	r3, [r7, #4]
 81121b2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 81121b4:	e23a      	b.n	811262c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 81121b6:	4b98      	ldr	r3, [pc, #608]	@ (8112418 <tcp_process+0x590>)
 81121b8:	781b      	ldrb	r3, [r3, #0]
 81121ba:	f003 0310 	and.w	r3, r3, #16
 81121be:	2b00      	cmp	r3, #0
 81121c0:	f000 8234 	beq.w	811262c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81121c4:	4b95      	ldr	r3, [pc, #596]	@ (811241c <tcp_process+0x594>)
 81121c6:	6819      	ldr	r1, [r3, #0]
 81121c8:	4b95      	ldr	r3, [pc, #596]	@ (8112420 <tcp_process+0x598>)
 81121ca:	881b      	ldrh	r3, [r3, #0]
 81121cc:	461a      	mov	r2, r3
 81121ce:	4b95      	ldr	r3, [pc, #596]	@ (8112424 <tcp_process+0x59c>)
 81121d0:	681b      	ldr	r3, [r3, #0]
 81121d2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81121d4:	4b94      	ldr	r3, [pc, #592]	@ (8112428 <tcp_process+0x5a0>)
 81121d6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81121d8:	885b      	ldrh	r3, [r3, #2]
 81121da:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81121dc:	4a92      	ldr	r2, [pc, #584]	@ (8112428 <tcp_process+0x5a0>)
 81121de:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81121e0:	8812      	ldrh	r2, [r2, #0]
 81121e2:	b292      	uxth	r2, r2
 81121e4:	9202      	str	r2, [sp, #8]
 81121e6:	9301      	str	r3, [sp, #4]
 81121e8:	4b90      	ldr	r3, [pc, #576]	@ (811242c <tcp_process+0x5a4>)
 81121ea:	9300      	str	r3, [sp, #0]
 81121ec:	4b90      	ldr	r3, [pc, #576]	@ (8112430 <tcp_process+0x5a8>)
 81121ee:	4602      	mov	r2, r0
 81121f0:	6878      	ldr	r0, [r7, #4]
 81121f2:	f002 fc81 	bl	8114af8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 81121f6:	687b      	ldr	r3, [r7, #4]
 81121f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81121fc:	2b05      	cmp	r3, #5
 81121fe:	f200 8215 	bhi.w	811262c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8112202:	687b      	ldr	r3, [r7, #4]
 8112204:	2200      	movs	r2, #0
 8112206:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8112208:	6878      	ldr	r0, [r7, #4]
 811220a:	f002 fa4d 	bl	81146a8 <tcp_rexmit_rto>
      break;
 811220e:	e20d      	b.n	811262c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8112210:	4b81      	ldr	r3, [pc, #516]	@ (8112418 <tcp_process+0x590>)
 8112212:	781b      	ldrb	r3, [r3, #0]
 8112214:	f003 0310 	and.w	r3, r3, #16
 8112218:	2b00      	cmp	r3, #0
 811221a:	f000 80a1 	beq.w	8112360 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811221e:	4b7f      	ldr	r3, [pc, #508]	@ (811241c <tcp_process+0x594>)
 8112220:	681a      	ldr	r2, [r3, #0]
 8112222:	687b      	ldr	r3, [r7, #4]
 8112224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8112226:	1ad3      	subs	r3, r2, r3
 8112228:	3b01      	subs	r3, #1
 811222a:	2b00      	cmp	r3, #0
 811222c:	db7e      	blt.n	811232c <tcp_process+0x4a4>
 811222e:	4b7b      	ldr	r3, [pc, #492]	@ (811241c <tcp_process+0x594>)
 8112230:	681a      	ldr	r2, [r3, #0]
 8112232:	687b      	ldr	r3, [r7, #4]
 8112234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8112236:	1ad3      	subs	r3, r2, r3
 8112238:	2b00      	cmp	r3, #0
 811223a:	dc77      	bgt.n	811232c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 811223c:	687b      	ldr	r3, [r7, #4]
 811223e:	2204      	movs	r2, #4
 8112240:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8112242:	687b      	ldr	r3, [r7, #4]
 8112244:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8112246:	2b00      	cmp	r3, #0
 8112248:	d102      	bne.n	8112250 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 811224a:	23fa      	movs	r3, #250	@ 0xfa
 811224c:	76bb      	strb	r3, [r7, #26]
 811224e:	e01d      	b.n	811228c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8112250:	687b      	ldr	r3, [r7, #4]
 8112252:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8112254:	699b      	ldr	r3, [r3, #24]
 8112256:	2b00      	cmp	r3, #0
 8112258:	d106      	bne.n	8112268 <tcp_process+0x3e0>
 811225a:	4b76      	ldr	r3, [pc, #472]	@ (8112434 <tcp_process+0x5ac>)
 811225c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8112260:	4975      	ldr	r1, [pc, #468]	@ (8112438 <tcp_process+0x5b0>)
 8112262:	4876      	ldr	r0, [pc, #472]	@ (811243c <tcp_process+0x5b4>)
 8112264:	f003 fd8c 	bl	8115d80 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8112268:	687b      	ldr	r3, [r7, #4]
 811226a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811226c:	699b      	ldr	r3, [r3, #24]
 811226e:	2b00      	cmp	r3, #0
 8112270:	d00a      	beq.n	8112288 <tcp_process+0x400>
 8112272:	687b      	ldr	r3, [r7, #4]
 8112274:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8112276:	699b      	ldr	r3, [r3, #24]
 8112278:	687a      	ldr	r2, [r7, #4]
 811227a:	6910      	ldr	r0, [r2, #16]
 811227c:	2200      	movs	r2, #0
 811227e:	6879      	ldr	r1, [r7, #4]
 8112280:	4798      	blx	r3
 8112282:	4603      	mov	r3, r0
 8112284:	76bb      	strb	r3, [r7, #26]
 8112286:	e001      	b.n	811228c <tcp_process+0x404>
 8112288:	23f0      	movs	r3, #240	@ 0xf0
 811228a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 811228c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8112290:	2b00      	cmp	r3, #0
 8112292:	d00a      	beq.n	81122aa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8112294:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8112298:	f113 0f0d 	cmn.w	r3, #13
 811229c:	d002      	beq.n	81122a4 <tcp_process+0x41c>
              tcp_abort(pcb);
 811229e:	6878      	ldr	r0, [r7, #4]
 81122a0:	f7fd ff88 	bl	81101b4 <tcp_abort>
            }
            return ERR_ABRT;
 81122a4:	f06f 030c 	mvn.w	r3, #12
 81122a8:	e1ce      	b.n	8112648 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 81122aa:	6878      	ldr	r0, [r7, #4]
 81122ac:	f000 fae0 	bl	8112870 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 81122b0:	4b63      	ldr	r3, [pc, #396]	@ (8112440 <tcp_process+0x5b8>)
 81122b2:	881b      	ldrh	r3, [r3, #0]
 81122b4:	2b00      	cmp	r3, #0
 81122b6:	d005      	beq.n	81122c4 <tcp_process+0x43c>
            recv_acked--;
 81122b8:	4b61      	ldr	r3, [pc, #388]	@ (8112440 <tcp_process+0x5b8>)
 81122ba:	881b      	ldrh	r3, [r3, #0]
 81122bc:	3b01      	subs	r3, #1
 81122be:	b29a      	uxth	r2, r3
 81122c0:	4b5f      	ldr	r3, [pc, #380]	@ (8112440 <tcp_process+0x5b8>)
 81122c2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 81122c4:	687b      	ldr	r3, [r7, #4]
 81122c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81122c8:	009a      	lsls	r2, r3, #2
 81122ca:	687b      	ldr	r3, [r7, #4]
 81122cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81122ce:	005b      	lsls	r3, r3, #1
 81122d0:	f241 111c 	movw	r1, #4380	@ 0x111c
 81122d4:	428b      	cmp	r3, r1
 81122d6:	bf38      	it	cc
 81122d8:	460b      	movcc	r3, r1
 81122da:	429a      	cmp	r2, r3
 81122dc:	d204      	bcs.n	81122e8 <tcp_process+0x460>
 81122de:	687b      	ldr	r3, [r7, #4]
 81122e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81122e2:	009b      	lsls	r3, r3, #2
 81122e4:	b29b      	uxth	r3, r3
 81122e6:	e00d      	b.n	8112304 <tcp_process+0x47c>
 81122e8:	687b      	ldr	r3, [r7, #4]
 81122ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81122ec:	005b      	lsls	r3, r3, #1
 81122ee:	f241 121c 	movw	r2, #4380	@ 0x111c
 81122f2:	4293      	cmp	r3, r2
 81122f4:	d904      	bls.n	8112300 <tcp_process+0x478>
 81122f6:	687b      	ldr	r3, [r7, #4]
 81122f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81122fa:	005b      	lsls	r3, r3, #1
 81122fc:	b29b      	uxth	r3, r3
 81122fe:	e001      	b.n	8112304 <tcp_process+0x47c>
 8112300:	f241 131c 	movw	r3, #4380	@ 0x111c
 8112304:	687a      	ldr	r2, [r7, #4]
 8112306:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 811230a:	4b4e      	ldr	r3, [pc, #312]	@ (8112444 <tcp_process+0x5bc>)
 811230c:	781b      	ldrb	r3, [r3, #0]
 811230e:	f003 0320 	and.w	r3, r3, #32
 8112312:	2b00      	cmp	r3, #0
 8112314:	d037      	beq.n	8112386 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8112316:	687b      	ldr	r3, [r7, #4]
 8112318:	8b5b      	ldrh	r3, [r3, #26]
 811231a:	f043 0302 	orr.w	r3, r3, #2
 811231e:	b29a      	uxth	r2, r3
 8112320:	687b      	ldr	r3, [r7, #4]
 8112322:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8112324:	687b      	ldr	r3, [r7, #4]
 8112326:	2207      	movs	r2, #7
 8112328:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 811232a:	e02c      	b.n	8112386 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811232c:	4b3b      	ldr	r3, [pc, #236]	@ (811241c <tcp_process+0x594>)
 811232e:	6819      	ldr	r1, [r3, #0]
 8112330:	4b3b      	ldr	r3, [pc, #236]	@ (8112420 <tcp_process+0x598>)
 8112332:	881b      	ldrh	r3, [r3, #0]
 8112334:	461a      	mov	r2, r3
 8112336:	4b3b      	ldr	r3, [pc, #236]	@ (8112424 <tcp_process+0x59c>)
 8112338:	681b      	ldr	r3, [r3, #0]
 811233a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811233c:	4b3a      	ldr	r3, [pc, #232]	@ (8112428 <tcp_process+0x5a0>)
 811233e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8112340:	885b      	ldrh	r3, [r3, #2]
 8112342:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8112344:	4a38      	ldr	r2, [pc, #224]	@ (8112428 <tcp_process+0x5a0>)
 8112346:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8112348:	8812      	ldrh	r2, [r2, #0]
 811234a:	b292      	uxth	r2, r2
 811234c:	9202      	str	r2, [sp, #8]
 811234e:	9301      	str	r3, [sp, #4]
 8112350:	4b36      	ldr	r3, [pc, #216]	@ (811242c <tcp_process+0x5a4>)
 8112352:	9300      	str	r3, [sp, #0]
 8112354:	4b36      	ldr	r3, [pc, #216]	@ (8112430 <tcp_process+0x5a8>)
 8112356:	4602      	mov	r2, r0
 8112358:	6878      	ldr	r0, [r7, #4]
 811235a:	f002 fbcd 	bl	8114af8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 811235e:	e167      	b.n	8112630 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8112360:	4b2d      	ldr	r3, [pc, #180]	@ (8112418 <tcp_process+0x590>)
 8112362:	781b      	ldrb	r3, [r3, #0]
 8112364:	f003 0302 	and.w	r3, r3, #2
 8112368:	2b00      	cmp	r3, #0
 811236a:	f000 8161 	beq.w	8112630 <tcp_process+0x7a8>
 811236e:	687b      	ldr	r3, [r7, #4]
 8112370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8112372:	1e5a      	subs	r2, r3, #1
 8112374:	4b2b      	ldr	r3, [pc, #172]	@ (8112424 <tcp_process+0x59c>)
 8112376:	681b      	ldr	r3, [r3, #0]
 8112378:	429a      	cmp	r2, r3
 811237a:	f040 8159 	bne.w	8112630 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 811237e:	6878      	ldr	r0, [r7, #4]
 8112380:	f002 f9b4 	bl	81146ec <tcp_rexmit>
      break;
 8112384:	e154      	b.n	8112630 <tcp_process+0x7a8>
 8112386:	e153      	b.n	8112630 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8112388:	6878      	ldr	r0, [r7, #4]
 811238a:	f000 fa71 	bl	8112870 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 811238e:	4b2d      	ldr	r3, [pc, #180]	@ (8112444 <tcp_process+0x5bc>)
 8112390:	781b      	ldrb	r3, [r3, #0]
 8112392:	f003 0320 	and.w	r3, r3, #32
 8112396:	2b00      	cmp	r3, #0
 8112398:	f000 814c 	beq.w	8112634 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 811239c:	687b      	ldr	r3, [r7, #4]
 811239e:	8b5b      	ldrh	r3, [r3, #26]
 81123a0:	f043 0302 	orr.w	r3, r3, #2
 81123a4:	b29a      	uxth	r2, r3
 81123a6:	687b      	ldr	r3, [r7, #4]
 81123a8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 81123aa:	687b      	ldr	r3, [r7, #4]
 81123ac:	2207      	movs	r2, #7
 81123ae:	751a      	strb	r2, [r3, #20]
      }
      break;
 81123b0:	e140      	b.n	8112634 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 81123b2:	6878      	ldr	r0, [r7, #4]
 81123b4:	f000 fa5c 	bl	8112870 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 81123b8:	4b22      	ldr	r3, [pc, #136]	@ (8112444 <tcp_process+0x5bc>)
 81123ba:	781b      	ldrb	r3, [r3, #0]
 81123bc:	f003 0320 	and.w	r3, r3, #32
 81123c0:	2b00      	cmp	r3, #0
 81123c2:	d071      	beq.n	81124a8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 81123c4:	4b14      	ldr	r3, [pc, #80]	@ (8112418 <tcp_process+0x590>)
 81123c6:	781b      	ldrb	r3, [r3, #0]
 81123c8:	f003 0310 	and.w	r3, r3, #16
 81123cc:	2b00      	cmp	r3, #0
 81123ce:	d060      	beq.n	8112492 <tcp_process+0x60a>
 81123d0:	687b      	ldr	r3, [r7, #4]
 81123d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81123d4:	4b11      	ldr	r3, [pc, #68]	@ (811241c <tcp_process+0x594>)
 81123d6:	681b      	ldr	r3, [r3, #0]
 81123d8:	429a      	cmp	r2, r3
 81123da:	d15a      	bne.n	8112492 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 81123dc:	687b      	ldr	r3, [r7, #4]
 81123de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 81123e0:	2b00      	cmp	r3, #0
 81123e2:	d156      	bne.n	8112492 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 81123e4:	687b      	ldr	r3, [r7, #4]
 81123e6:	8b5b      	ldrh	r3, [r3, #26]
 81123e8:	f043 0302 	orr.w	r3, r3, #2
 81123ec:	b29a      	uxth	r2, r3
 81123ee:	687b      	ldr	r3, [r7, #4]
 81123f0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 81123f2:	6878      	ldr	r0, [r7, #4]
 81123f4:	f7fe fdbc 	bl	8110f70 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 81123f8:	4b13      	ldr	r3, [pc, #76]	@ (8112448 <tcp_process+0x5c0>)
 81123fa:	681b      	ldr	r3, [r3, #0]
 81123fc:	687a      	ldr	r2, [r7, #4]
 81123fe:	429a      	cmp	r2, r3
 8112400:	d105      	bne.n	811240e <tcp_process+0x586>
 8112402:	4b11      	ldr	r3, [pc, #68]	@ (8112448 <tcp_process+0x5c0>)
 8112404:	681b      	ldr	r3, [r3, #0]
 8112406:	68db      	ldr	r3, [r3, #12]
 8112408:	4a0f      	ldr	r2, [pc, #60]	@ (8112448 <tcp_process+0x5c0>)
 811240a:	6013      	str	r3, [r2, #0]
 811240c:	e02e      	b.n	811246c <tcp_process+0x5e4>
 811240e:	4b0e      	ldr	r3, [pc, #56]	@ (8112448 <tcp_process+0x5c0>)
 8112410:	681b      	ldr	r3, [r3, #0]
 8112412:	617b      	str	r3, [r7, #20]
 8112414:	e027      	b.n	8112466 <tcp_process+0x5de>
 8112416:	bf00      	nop
 8112418:	10011c90 	.word	0x10011c90
 811241c:	10011c88 	.word	0x10011c88
 8112420:	10011c8e 	.word	0x10011c8e
 8112424:	10011c84 	.word	0x10011c84
 8112428:	10011c74 	.word	0x10011c74
 811242c:	1000b18c 	.word	0x1000b18c
 8112430:	1000b190 	.word	0x1000b190
 8112434:	08118798 	.word	0x08118798
 8112438:	08118a78 	.word	0x08118a78
 811243c:	08118824 	.word	0x08118824
 8112440:	10011c8c 	.word	0x10011c8c
 8112444:	10011c91 	.word	0x10011c91
 8112448:	10011c58 	.word	0x10011c58
 811244c:	697b      	ldr	r3, [r7, #20]
 811244e:	68db      	ldr	r3, [r3, #12]
 8112450:	687a      	ldr	r2, [r7, #4]
 8112452:	429a      	cmp	r2, r3
 8112454:	d104      	bne.n	8112460 <tcp_process+0x5d8>
 8112456:	687b      	ldr	r3, [r7, #4]
 8112458:	68da      	ldr	r2, [r3, #12]
 811245a:	697b      	ldr	r3, [r7, #20]
 811245c:	60da      	str	r2, [r3, #12]
 811245e:	e005      	b.n	811246c <tcp_process+0x5e4>
 8112460:	697b      	ldr	r3, [r7, #20]
 8112462:	68db      	ldr	r3, [r3, #12]
 8112464:	617b      	str	r3, [r7, #20]
 8112466:	697b      	ldr	r3, [r7, #20]
 8112468:	2b00      	cmp	r3, #0
 811246a:	d1ef      	bne.n	811244c <tcp_process+0x5c4>
 811246c:	687b      	ldr	r3, [r7, #4]
 811246e:	2200      	movs	r2, #0
 8112470:	60da      	str	r2, [r3, #12]
 8112472:	4b77      	ldr	r3, [pc, #476]	@ (8112650 <tcp_process+0x7c8>)
 8112474:	2201      	movs	r2, #1
 8112476:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8112478:	687b      	ldr	r3, [r7, #4]
 811247a:	220a      	movs	r2, #10
 811247c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 811247e:	4b75      	ldr	r3, [pc, #468]	@ (8112654 <tcp_process+0x7cc>)
 8112480:	681a      	ldr	r2, [r3, #0]
 8112482:	687b      	ldr	r3, [r7, #4]
 8112484:	60da      	str	r2, [r3, #12]
 8112486:	4a73      	ldr	r2, [pc, #460]	@ (8112654 <tcp_process+0x7cc>)
 8112488:	687b      	ldr	r3, [r7, #4]
 811248a:	6013      	str	r3, [r2, #0]
 811248c:	f002 fe98 	bl	81151c0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8112490:	e0d2      	b.n	8112638 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8112492:	687b      	ldr	r3, [r7, #4]
 8112494:	8b5b      	ldrh	r3, [r3, #26]
 8112496:	f043 0302 	orr.w	r3, r3, #2
 811249a:	b29a      	uxth	r2, r3
 811249c:	687b      	ldr	r3, [r7, #4]
 811249e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 81124a0:	687b      	ldr	r3, [r7, #4]
 81124a2:	2208      	movs	r2, #8
 81124a4:	751a      	strb	r2, [r3, #20]
      break;
 81124a6:	e0c7      	b.n	8112638 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 81124a8:	4b6b      	ldr	r3, [pc, #428]	@ (8112658 <tcp_process+0x7d0>)
 81124aa:	781b      	ldrb	r3, [r3, #0]
 81124ac:	f003 0310 	and.w	r3, r3, #16
 81124b0:	2b00      	cmp	r3, #0
 81124b2:	f000 80c1 	beq.w	8112638 <tcp_process+0x7b0>
 81124b6:	687b      	ldr	r3, [r7, #4]
 81124b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81124ba:	4b68      	ldr	r3, [pc, #416]	@ (811265c <tcp_process+0x7d4>)
 81124bc:	681b      	ldr	r3, [r3, #0]
 81124be:	429a      	cmp	r2, r3
 81124c0:	f040 80ba 	bne.w	8112638 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 81124c4:	687b      	ldr	r3, [r7, #4]
 81124c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 81124c8:	2b00      	cmp	r3, #0
 81124ca:	f040 80b5 	bne.w	8112638 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 81124ce:	687b      	ldr	r3, [r7, #4]
 81124d0:	2206      	movs	r2, #6
 81124d2:	751a      	strb	r2, [r3, #20]
      break;
 81124d4:	e0b0      	b.n	8112638 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 81124d6:	6878      	ldr	r0, [r7, #4]
 81124d8:	f000 f9ca 	bl	8112870 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 81124dc:	4b60      	ldr	r3, [pc, #384]	@ (8112660 <tcp_process+0x7d8>)
 81124de:	781b      	ldrb	r3, [r3, #0]
 81124e0:	f003 0320 	and.w	r3, r3, #32
 81124e4:	2b00      	cmp	r3, #0
 81124e6:	f000 80a9 	beq.w	811263c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 81124ea:	687b      	ldr	r3, [r7, #4]
 81124ec:	8b5b      	ldrh	r3, [r3, #26]
 81124ee:	f043 0302 	orr.w	r3, r3, #2
 81124f2:	b29a      	uxth	r2, r3
 81124f4:	687b      	ldr	r3, [r7, #4]
 81124f6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 81124f8:	6878      	ldr	r0, [r7, #4]
 81124fa:	f7fe fd39 	bl	8110f70 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 81124fe:	4b59      	ldr	r3, [pc, #356]	@ (8112664 <tcp_process+0x7dc>)
 8112500:	681b      	ldr	r3, [r3, #0]
 8112502:	687a      	ldr	r2, [r7, #4]
 8112504:	429a      	cmp	r2, r3
 8112506:	d105      	bne.n	8112514 <tcp_process+0x68c>
 8112508:	4b56      	ldr	r3, [pc, #344]	@ (8112664 <tcp_process+0x7dc>)
 811250a:	681b      	ldr	r3, [r3, #0]
 811250c:	68db      	ldr	r3, [r3, #12]
 811250e:	4a55      	ldr	r2, [pc, #340]	@ (8112664 <tcp_process+0x7dc>)
 8112510:	6013      	str	r3, [r2, #0]
 8112512:	e013      	b.n	811253c <tcp_process+0x6b4>
 8112514:	4b53      	ldr	r3, [pc, #332]	@ (8112664 <tcp_process+0x7dc>)
 8112516:	681b      	ldr	r3, [r3, #0]
 8112518:	613b      	str	r3, [r7, #16]
 811251a:	e00c      	b.n	8112536 <tcp_process+0x6ae>
 811251c:	693b      	ldr	r3, [r7, #16]
 811251e:	68db      	ldr	r3, [r3, #12]
 8112520:	687a      	ldr	r2, [r7, #4]
 8112522:	429a      	cmp	r2, r3
 8112524:	d104      	bne.n	8112530 <tcp_process+0x6a8>
 8112526:	687b      	ldr	r3, [r7, #4]
 8112528:	68da      	ldr	r2, [r3, #12]
 811252a:	693b      	ldr	r3, [r7, #16]
 811252c:	60da      	str	r2, [r3, #12]
 811252e:	e005      	b.n	811253c <tcp_process+0x6b4>
 8112530:	693b      	ldr	r3, [r7, #16]
 8112532:	68db      	ldr	r3, [r3, #12]
 8112534:	613b      	str	r3, [r7, #16]
 8112536:	693b      	ldr	r3, [r7, #16]
 8112538:	2b00      	cmp	r3, #0
 811253a:	d1ef      	bne.n	811251c <tcp_process+0x694>
 811253c:	687b      	ldr	r3, [r7, #4]
 811253e:	2200      	movs	r2, #0
 8112540:	60da      	str	r2, [r3, #12]
 8112542:	4b43      	ldr	r3, [pc, #268]	@ (8112650 <tcp_process+0x7c8>)
 8112544:	2201      	movs	r2, #1
 8112546:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8112548:	687b      	ldr	r3, [r7, #4]
 811254a:	220a      	movs	r2, #10
 811254c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 811254e:	4b41      	ldr	r3, [pc, #260]	@ (8112654 <tcp_process+0x7cc>)
 8112550:	681a      	ldr	r2, [r3, #0]
 8112552:	687b      	ldr	r3, [r7, #4]
 8112554:	60da      	str	r2, [r3, #12]
 8112556:	4a3f      	ldr	r2, [pc, #252]	@ (8112654 <tcp_process+0x7cc>)
 8112558:	687b      	ldr	r3, [r7, #4]
 811255a:	6013      	str	r3, [r2, #0]
 811255c:	f002 fe30 	bl	81151c0 <tcp_timer_needed>
      }
      break;
 8112560:	e06c      	b.n	811263c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8112562:	6878      	ldr	r0, [r7, #4]
 8112564:	f000 f984 	bl	8112870 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8112568:	4b3b      	ldr	r3, [pc, #236]	@ (8112658 <tcp_process+0x7d0>)
 811256a:	781b      	ldrb	r3, [r3, #0]
 811256c:	f003 0310 	and.w	r3, r3, #16
 8112570:	2b00      	cmp	r3, #0
 8112572:	d065      	beq.n	8112640 <tcp_process+0x7b8>
 8112574:	687b      	ldr	r3, [r7, #4]
 8112576:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8112578:	4b38      	ldr	r3, [pc, #224]	@ (811265c <tcp_process+0x7d4>)
 811257a:	681b      	ldr	r3, [r3, #0]
 811257c:	429a      	cmp	r2, r3
 811257e:	d15f      	bne.n	8112640 <tcp_process+0x7b8>
 8112580:	687b      	ldr	r3, [r7, #4]
 8112582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112584:	2b00      	cmp	r3, #0
 8112586:	d15b      	bne.n	8112640 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8112588:	6878      	ldr	r0, [r7, #4]
 811258a:	f7fe fcf1 	bl	8110f70 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 811258e:	4b35      	ldr	r3, [pc, #212]	@ (8112664 <tcp_process+0x7dc>)
 8112590:	681b      	ldr	r3, [r3, #0]
 8112592:	687a      	ldr	r2, [r7, #4]
 8112594:	429a      	cmp	r2, r3
 8112596:	d105      	bne.n	81125a4 <tcp_process+0x71c>
 8112598:	4b32      	ldr	r3, [pc, #200]	@ (8112664 <tcp_process+0x7dc>)
 811259a:	681b      	ldr	r3, [r3, #0]
 811259c:	68db      	ldr	r3, [r3, #12]
 811259e:	4a31      	ldr	r2, [pc, #196]	@ (8112664 <tcp_process+0x7dc>)
 81125a0:	6013      	str	r3, [r2, #0]
 81125a2:	e013      	b.n	81125cc <tcp_process+0x744>
 81125a4:	4b2f      	ldr	r3, [pc, #188]	@ (8112664 <tcp_process+0x7dc>)
 81125a6:	681b      	ldr	r3, [r3, #0]
 81125a8:	60fb      	str	r3, [r7, #12]
 81125aa:	e00c      	b.n	81125c6 <tcp_process+0x73e>
 81125ac:	68fb      	ldr	r3, [r7, #12]
 81125ae:	68db      	ldr	r3, [r3, #12]
 81125b0:	687a      	ldr	r2, [r7, #4]
 81125b2:	429a      	cmp	r2, r3
 81125b4:	d104      	bne.n	81125c0 <tcp_process+0x738>
 81125b6:	687b      	ldr	r3, [r7, #4]
 81125b8:	68da      	ldr	r2, [r3, #12]
 81125ba:	68fb      	ldr	r3, [r7, #12]
 81125bc:	60da      	str	r2, [r3, #12]
 81125be:	e005      	b.n	81125cc <tcp_process+0x744>
 81125c0:	68fb      	ldr	r3, [r7, #12]
 81125c2:	68db      	ldr	r3, [r3, #12]
 81125c4:	60fb      	str	r3, [r7, #12]
 81125c6:	68fb      	ldr	r3, [r7, #12]
 81125c8:	2b00      	cmp	r3, #0
 81125ca:	d1ef      	bne.n	81125ac <tcp_process+0x724>
 81125cc:	687b      	ldr	r3, [r7, #4]
 81125ce:	2200      	movs	r2, #0
 81125d0:	60da      	str	r2, [r3, #12]
 81125d2:	4b1f      	ldr	r3, [pc, #124]	@ (8112650 <tcp_process+0x7c8>)
 81125d4:	2201      	movs	r2, #1
 81125d6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 81125d8:	687b      	ldr	r3, [r7, #4]
 81125da:	220a      	movs	r2, #10
 81125dc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 81125de:	4b1d      	ldr	r3, [pc, #116]	@ (8112654 <tcp_process+0x7cc>)
 81125e0:	681a      	ldr	r2, [r3, #0]
 81125e2:	687b      	ldr	r3, [r7, #4]
 81125e4:	60da      	str	r2, [r3, #12]
 81125e6:	4a1b      	ldr	r2, [pc, #108]	@ (8112654 <tcp_process+0x7cc>)
 81125e8:	687b      	ldr	r3, [r7, #4]
 81125ea:	6013      	str	r3, [r2, #0]
 81125ec:	f002 fde8 	bl	81151c0 <tcp_timer_needed>
      }
      break;
 81125f0:	e026      	b.n	8112640 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 81125f2:	6878      	ldr	r0, [r7, #4]
 81125f4:	f000 f93c 	bl	8112870 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 81125f8:	4b17      	ldr	r3, [pc, #92]	@ (8112658 <tcp_process+0x7d0>)
 81125fa:	781b      	ldrb	r3, [r3, #0]
 81125fc:	f003 0310 	and.w	r3, r3, #16
 8112600:	2b00      	cmp	r3, #0
 8112602:	d01f      	beq.n	8112644 <tcp_process+0x7bc>
 8112604:	687b      	ldr	r3, [r7, #4]
 8112606:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8112608:	4b14      	ldr	r3, [pc, #80]	@ (811265c <tcp_process+0x7d4>)
 811260a:	681b      	ldr	r3, [r3, #0]
 811260c:	429a      	cmp	r2, r3
 811260e:	d119      	bne.n	8112644 <tcp_process+0x7bc>
 8112610:	687b      	ldr	r3, [r7, #4]
 8112612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112614:	2b00      	cmp	r3, #0
 8112616:	d115      	bne.n	8112644 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8112618:	4b11      	ldr	r3, [pc, #68]	@ (8112660 <tcp_process+0x7d8>)
 811261a:	781b      	ldrb	r3, [r3, #0]
 811261c:	f043 0310 	orr.w	r3, r3, #16
 8112620:	b2da      	uxtb	r2, r3
 8112622:	4b0f      	ldr	r3, [pc, #60]	@ (8112660 <tcp_process+0x7d8>)
 8112624:	701a      	strb	r2, [r3, #0]
      }
      break;
 8112626:	e00d      	b.n	8112644 <tcp_process+0x7bc>
    default:
      break;
 8112628:	bf00      	nop
 811262a:	e00c      	b.n	8112646 <tcp_process+0x7be>
      break;
 811262c:	bf00      	nop
 811262e:	e00a      	b.n	8112646 <tcp_process+0x7be>
      break;
 8112630:	bf00      	nop
 8112632:	e008      	b.n	8112646 <tcp_process+0x7be>
      break;
 8112634:	bf00      	nop
 8112636:	e006      	b.n	8112646 <tcp_process+0x7be>
      break;
 8112638:	bf00      	nop
 811263a:	e004      	b.n	8112646 <tcp_process+0x7be>
      break;
 811263c:	bf00      	nop
 811263e:	e002      	b.n	8112646 <tcp_process+0x7be>
      break;
 8112640:	bf00      	nop
 8112642:	e000      	b.n	8112646 <tcp_process+0x7be>
      break;
 8112644:	bf00      	nop
  }
  return ERR_OK;
 8112646:	2300      	movs	r3, #0
}
 8112648:	4618      	mov	r0, r3
 811264a:	3724      	adds	r7, #36	@ 0x24
 811264c:	46bd      	mov	sp, r7
 811264e:	bd90      	pop	{r4, r7, pc}
 8112650:	10011c60 	.word	0x10011c60
 8112654:	10011c5c 	.word	0x10011c5c
 8112658:	10011c90 	.word	0x10011c90
 811265c:	10011c88 	.word	0x10011c88
 8112660:	10011c91 	.word	0x10011c91
 8112664:	10011c58 	.word	0x10011c58

08112668 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8112668:	b590      	push	{r4, r7, lr}
 811266a:	b085      	sub	sp, #20
 811266c:	af00      	add	r7, sp, #0
 811266e:	6078      	str	r0, [r7, #4]
 8112670:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8112672:	687b      	ldr	r3, [r7, #4]
 8112674:	2b00      	cmp	r3, #0
 8112676:	d106      	bne.n	8112686 <tcp_oos_insert_segment+0x1e>
 8112678:	4b3b      	ldr	r3, [pc, #236]	@ (8112768 <tcp_oos_insert_segment+0x100>)
 811267a:	f240 421f 	movw	r2, #1055	@ 0x41f
 811267e:	493b      	ldr	r1, [pc, #236]	@ (811276c <tcp_oos_insert_segment+0x104>)
 8112680:	483b      	ldr	r0, [pc, #236]	@ (8112770 <tcp_oos_insert_segment+0x108>)
 8112682:	f003 fb7d 	bl	8115d80 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8112686:	687b      	ldr	r3, [r7, #4]
 8112688:	68db      	ldr	r3, [r3, #12]
 811268a:	899b      	ldrh	r3, [r3, #12]
 811268c:	b29b      	uxth	r3, r3
 811268e:	4618      	mov	r0, r3
 8112690:	f7f8 ff84 	bl	810b59c <lwip_htons>
 8112694:	4603      	mov	r3, r0
 8112696:	b2db      	uxtb	r3, r3
 8112698:	f003 0301 	and.w	r3, r3, #1
 811269c:	2b00      	cmp	r3, #0
 811269e:	d028      	beq.n	81126f2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 81126a0:	6838      	ldr	r0, [r7, #0]
 81126a2:	f7fe fa63 	bl	8110b6c <tcp_segs_free>
    next = NULL;
 81126a6:	2300      	movs	r3, #0
 81126a8:	603b      	str	r3, [r7, #0]
 81126aa:	e056      	b.n	811275a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 81126ac:	683b      	ldr	r3, [r7, #0]
 81126ae:	68db      	ldr	r3, [r3, #12]
 81126b0:	899b      	ldrh	r3, [r3, #12]
 81126b2:	b29b      	uxth	r3, r3
 81126b4:	4618      	mov	r0, r3
 81126b6:	f7f8 ff71 	bl	810b59c <lwip_htons>
 81126ba:	4603      	mov	r3, r0
 81126bc:	b2db      	uxtb	r3, r3
 81126be:	f003 0301 	and.w	r3, r3, #1
 81126c2:	2b00      	cmp	r3, #0
 81126c4:	d00d      	beq.n	81126e2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 81126c6:	687b      	ldr	r3, [r7, #4]
 81126c8:	68db      	ldr	r3, [r3, #12]
 81126ca:	899b      	ldrh	r3, [r3, #12]
 81126cc:	b29c      	uxth	r4, r3
 81126ce:	2001      	movs	r0, #1
 81126d0:	f7f8 ff64 	bl	810b59c <lwip_htons>
 81126d4:	4603      	mov	r3, r0
 81126d6:	461a      	mov	r2, r3
 81126d8:	687b      	ldr	r3, [r7, #4]
 81126da:	68db      	ldr	r3, [r3, #12]
 81126dc:	4322      	orrs	r2, r4
 81126de:	b292      	uxth	r2, r2
 81126e0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 81126e2:	683b      	ldr	r3, [r7, #0]
 81126e4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 81126e6:	683b      	ldr	r3, [r7, #0]
 81126e8:	681b      	ldr	r3, [r3, #0]
 81126ea:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 81126ec:	68f8      	ldr	r0, [r7, #12]
 81126ee:	f7fe fa52 	bl	8110b96 <tcp_seg_free>
    while (next &&
 81126f2:	683b      	ldr	r3, [r7, #0]
 81126f4:	2b00      	cmp	r3, #0
 81126f6:	d00e      	beq.n	8112716 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 81126f8:	687b      	ldr	r3, [r7, #4]
 81126fa:	891b      	ldrh	r3, [r3, #8]
 81126fc:	461a      	mov	r2, r3
 81126fe:	4b1d      	ldr	r3, [pc, #116]	@ (8112774 <tcp_oos_insert_segment+0x10c>)
 8112700:	681b      	ldr	r3, [r3, #0]
 8112702:	441a      	add	r2, r3
 8112704:	683b      	ldr	r3, [r7, #0]
 8112706:	68db      	ldr	r3, [r3, #12]
 8112708:	685b      	ldr	r3, [r3, #4]
 811270a:	6839      	ldr	r1, [r7, #0]
 811270c:	8909      	ldrh	r1, [r1, #8]
 811270e:	440b      	add	r3, r1
 8112710:	1ad3      	subs	r3, r2, r3
    while (next &&
 8112712:	2b00      	cmp	r3, #0
 8112714:	daca      	bge.n	81126ac <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8112716:	683b      	ldr	r3, [r7, #0]
 8112718:	2b00      	cmp	r3, #0
 811271a:	d01e      	beq.n	811275a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 811271c:	687b      	ldr	r3, [r7, #4]
 811271e:	891b      	ldrh	r3, [r3, #8]
 8112720:	461a      	mov	r2, r3
 8112722:	4b14      	ldr	r3, [pc, #80]	@ (8112774 <tcp_oos_insert_segment+0x10c>)
 8112724:	681b      	ldr	r3, [r3, #0]
 8112726:	441a      	add	r2, r3
 8112728:	683b      	ldr	r3, [r7, #0]
 811272a:	68db      	ldr	r3, [r3, #12]
 811272c:	685b      	ldr	r3, [r3, #4]
 811272e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8112730:	2b00      	cmp	r3, #0
 8112732:	dd12      	ble.n	811275a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8112734:	683b      	ldr	r3, [r7, #0]
 8112736:	68db      	ldr	r3, [r3, #12]
 8112738:	685b      	ldr	r3, [r3, #4]
 811273a:	b29a      	uxth	r2, r3
 811273c:	4b0d      	ldr	r3, [pc, #52]	@ (8112774 <tcp_oos_insert_segment+0x10c>)
 811273e:	681b      	ldr	r3, [r3, #0]
 8112740:	b29b      	uxth	r3, r3
 8112742:	1ad3      	subs	r3, r2, r3
 8112744:	b29a      	uxth	r2, r3
 8112746:	687b      	ldr	r3, [r7, #4]
 8112748:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 811274a:	687b      	ldr	r3, [r7, #4]
 811274c:	685a      	ldr	r2, [r3, #4]
 811274e:	687b      	ldr	r3, [r7, #4]
 8112750:	891b      	ldrh	r3, [r3, #8]
 8112752:	4619      	mov	r1, r3
 8112754:	4610      	mov	r0, r2
 8112756:	f7fc fd23 	bl	810f1a0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 811275a:	687b      	ldr	r3, [r7, #4]
 811275c:	683a      	ldr	r2, [r7, #0]
 811275e:	601a      	str	r2, [r3, #0]
}
 8112760:	bf00      	nop
 8112762:	3714      	adds	r7, #20
 8112764:	46bd      	mov	sp, r7
 8112766:	bd90      	pop	{r4, r7, pc}
 8112768:	08118798 	.word	0x08118798
 811276c:	08118a98 	.word	0x08118a98
 8112770:	08118824 	.word	0x08118824
 8112774:	10011c84 	.word	0x10011c84

08112778 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8112778:	b5b0      	push	{r4, r5, r7, lr}
 811277a:	b086      	sub	sp, #24
 811277c:	af00      	add	r7, sp, #0
 811277e:	60f8      	str	r0, [r7, #12]
 8112780:	60b9      	str	r1, [r7, #8]
 8112782:	607a      	str	r2, [r7, #4]
 8112784:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8112786:	e03e      	b.n	8112806 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8112788:	68bb      	ldr	r3, [r7, #8]
 811278a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 811278c:	68bb      	ldr	r3, [r7, #8]
 811278e:	681b      	ldr	r3, [r3, #0]
 8112790:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8112792:	697b      	ldr	r3, [r7, #20]
 8112794:	685b      	ldr	r3, [r3, #4]
 8112796:	4618      	mov	r0, r3
 8112798:	f7fc ff14 	bl	810f5c4 <pbuf_clen>
 811279c:	4603      	mov	r3, r0
 811279e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 81127a0:	68fb      	ldr	r3, [r7, #12]
 81127a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81127a6:	8a7a      	ldrh	r2, [r7, #18]
 81127a8:	429a      	cmp	r2, r3
 81127aa:	d906      	bls.n	81127ba <tcp_free_acked_segments+0x42>
 81127ac:	4b2a      	ldr	r3, [pc, #168]	@ (8112858 <tcp_free_acked_segments+0xe0>)
 81127ae:	f240 4257 	movw	r2, #1111	@ 0x457
 81127b2:	492a      	ldr	r1, [pc, #168]	@ (811285c <tcp_free_acked_segments+0xe4>)
 81127b4:	482a      	ldr	r0, [pc, #168]	@ (8112860 <tcp_free_acked_segments+0xe8>)
 81127b6:	f003 fae3 	bl	8115d80 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 81127ba:	68fb      	ldr	r3, [r7, #12]
 81127bc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 81127c0:	8a7b      	ldrh	r3, [r7, #18]
 81127c2:	1ad3      	subs	r3, r2, r3
 81127c4:	b29a      	uxth	r2, r3
 81127c6:	68fb      	ldr	r3, [r7, #12]
 81127c8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 81127cc:	697b      	ldr	r3, [r7, #20]
 81127ce:	891a      	ldrh	r2, [r3, #8]
 81127d0:	4b24      	ldr	r3, [pc, #144]	@ (8112864 <tcp_free_acked_segments+0xec>)
 81127d2:	881b      	ldrh	r3, [r3, #0]
 81127d4:	4413      	add	r3, r2
 81127d6:	b29a      	uxth	r2, r3
 81127d8:	4b22      	ldr	r3, [pc, #136]	@ (8112864 <tcp_free_acked_segments+0xec>)
 81127da:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 81127dc:	6978      	ldr	r0, [r7, #20]
 81127de:	f7fe f9da 	bl	8110b96 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 81127e2:	68fb      	ldr	r3, [r7, #12]
 81127e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81127e8:	2b00      	cmp	r3, #0
 81127ea:	d00c      	beq.n	8112806 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 81127ec:	68bb      	ldr	r3, [r7, #8]
 81127ee:	2b00      	cmp	r3, #0
 81127f0:	d109      	bne.n	8112806 <tcp_free_acked_segments+0x8e>
 81127f2:	683b      	ldr	r3, [r7, #0]
 81127f4:	2b00      	cmp	r3, #0
 81127f6:	d106      	bne.n	8112806 <tcp_free_acked_segments+0x8e>
 81127f8:	4b17      	ldr	r3, [pc, #92]	@ (8112858 <tcp_free_acked_segments+0xe0>)
 81127fa:	f240 4261 	movw	r2, #1121	@ 0x461
 81127fe:	491a      	ldr	r1, [pc, #104]	@ (8112868 <tcp_free_acked_segments+0xf0>)
 8112800:	4817      	ldr	r0, [pc, #92]	@ (8112860 <tcp_free_acked_segments+0xe8>)
 8112802:	f003 fabd 	bl	8115d80 <iprintf>
  while (seg_list != NULL &&
 8112806:	68bb      	ldr	r3, [r7, #8]
 8112808:	2b00      	cmp	r3, #0
 811280a:	d020      	beq.n	811284e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 811280c:	68bb      	ldr	r3, [r7, #8]
 811280e:	68db      	ldr	r3, [r3, #12]
 8112810:	685b      	ldr	r3, [r3, #4]
 8112812:	4618      	mov	r0, r3
 8112814:	f7f8 fed7 	bl	810b5c6 <lwip_htonl>
 8112818:	4604      	mov	r4, r0
 811281a:	68bb      	ldr	r3, [r7, #8]
 811281c:	891b      	ldrh	r3, [r3, #8]
 811281e:	461d      	mov	r5, r3
 8112820:	68bb      	ldr	r3, [r7, #8]
 8112822:	68db      	ldr	r3, [r3, #12]
 8112824:	899b      	ldrh	r3, [r3, #12]
 8112826:	b29b      	uxth	r3, r3
 8112828:	4618      	mov	r0, r3
 811282a:	f7f8 feb7 	bl	810b59c <lwip_htons>
 811282e:	4603      	mov	r3, r0
 8112830:	b2db      	uxtb	r3, r3
 8112832:	f003 0303 	and.w	r3, r3, #3
 8112836:	2b00      	cmp	r3, #0
 8112838:	d001      	beq.n	811283e <tcp_free_acked_segments+0xc6>
 811283a:	2301      	movs	r3, #1
 811283c:	e000      	b.n	8112840 <tcp_free_acked_segments+0xc8>
 811283e:	2300      	movs	r3, #0
 8112840:	442b      	add	r3, r5
 8112842:	18e2      	adds	r2, r4, r3
 8112844:	4b09      	ldr	r3, [pc, #36]	@ (811286c <tcp_free_acked_segments+0xf4>)
 8112846:	681b      	ldr	r3, [r3, #0]
 8112848:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 811284a:	2b00      	cmp	r3, #0
 811284c:	dd9c      	ble.n	8112788 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 811284e:	68bb      	ldr	r3, [r7, #8]
}
 8112850:	4618      	mov	r0, r3
 8112852:	3718      	adds	r7, #24
 8112854:	46bd      	mov	sp, r7
 8112856:	bdb0      	pop	{r4, r5, r7, pc}
 8112858:	08118798 	.word	0x08118798
 811285c:	08118ac0 	.word	0x08118ac0
 8112860:	08118824 	.word	0x08118824
 8112864:	10011c8c 	.word	0x10011c8c
 8112868:	08118ae8 	.word	0x08118ae8
 811286c:	10011c88 	.word	0x10011c88

08112870 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8112870:	b5b0      	push	{r4, r5, r7, lr}
 8112872:	b094      	sub	sp, #80	@ 0x50
 8112874:	af00      	add	r7, sp, #0
 8112876:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8112878:	2300      	movs	r3, #0
 811287a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 811287c:	687b      	ldr	r3, [r7, #4]
 811287e:	2b00      	cmp	r3, #0
 8112880:	d106      	bne.n	8112890 <tcp_receive+0x20>
 8112882:	4b91      	ldr	r3, [pc, #580]	@ (8112ac8 <tcp_receive+0x258>)
 8112884:	f240 427b 	movw	r2, #1147	@ 0x47b
 8112888:	4990      	ldr	r1, [pc, #576]	@ (8112acc <tcp_receive+0x25c>)
 811288a:	4891      	ldr	r0, [pc, #580]	@ (8112ad0 <tcp_receive+0x260>)
 811288c:	f003 fa78 	bl	8115d80 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8112890:	687b      	ldr	r3, [r7, #4]
 8112892:	7d1b      	ldrb	r3, [r3, #20]
 8112894:	2b03      	cmp	r3, #3
 8112896:	d806      	bhi.n	81128a6 <tcp_receive+0x36>
 8112898:	4b8b      	ldr	r3, [pc, #556]	@ (8112ac8 <tcp_receive+0x258>)
 811289a:	f240 427c 	movw	r2, #1148	@ 0x47c
 811289e:	498d      	ldr	r1, [pc, #564]	@ (8112ad4 <tcp_receive+0x264>)
 81128a0:	488b      	ldr	r0, [pc, #556]	@ (8112ad0 <tcp_receive+0x260>)
 81128a2:	f003 fa6d 	bl	8115d80 <iprintf>

  if (flags & TCP_ACK) {
 81128a6:	4b8c      	ldr	r3, [pc, #560]	@ (8112ad8 <tcp_receive+0x268>)
 81128a8:	781b      	ldrb	r3, [r3, #0]
 81128aa:	f003 0310 	and.w	r3, r3, #16
 81128ae:	2b00      	cmp	r3, #0
 81128b0:	f000 8264 	beq.w	8112d7c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 81128b4:	687b      	ldr	r3, [r7, #4]
 81128b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81128ba:	461a      	mov	r2, r3
 81128bc:	687b      	ldr	r3, [r7, #4]
 81128be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81128c0:	4413      	add	r3, r2
 81128c2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 81128c4:	687b      	ldr	r3, [r7, #4]
 81128c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81128c8:	4b84      	ldr	r3, [pc, #528]	@ (8112adc <tcp_receive+0x26c>)
 81128ca:	681b      	ldr	r3, [r3, #0]
 81128cc:	1ad3      	subs	r3, r2, r3
 81128ce:	2b00      	cmp	r3, #0
 81128d0:	db1b      	blt.n	811290a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 81128d2:	687b      	ldr	r3, [r7, #4]
 81128d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81128d6:	4b81      	ldr	r3, [pc, #516]	@ (8112adc <tcp_receive+0x26c>)
 81128d8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 81128da:	429a      	cmp	r2, r3
 81128dc:	d106      	bne.n	81128ec <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 81128de:	687b      	ldr	r3, [r7, #4]
 81128e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81128e2:	4b7f      	ldr	r3, [pc, #508]	@ (8112ae0 <tcp_receive+0x270>)
 81128e4:	681b      	ldr	r3, [r3, #0]
 81128e6:	1ad3      	subs	r3, r2, r3
 81128e8:	2b00      	cmp	r3, #0
 81128ea:	db0e      	blt.n	811290a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 81128ec:	687b      	ldr	r3, [r7, #4]
 81128ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81128f0:	4b7b      	ldr	r3, [pc, #492]	@ (8112ae0 <tcp_receive+0x270>)
 81128f2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 81128f4:	429a      	cmp	r2, r3
 81128f6:	d125      	bne.n	8112944 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 81128f8:	4b7a      	ldr	r3, [pc, #488]	@ (8112ae4 <tcp_receive+0x274>)
 81128fa:	681b      	ldr	r3, [r3, #0]
 81128fc:	89db      	ldrh	r3, [r3, #14]
 81128fe:	b29a      	uxth	r2, r3
 8112900:	687b      	ldr	r3, [r7, #4]
 8112902:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8112906:	429a      	cmp	r2, r3
 8112908:	d91c      	bls.n	8112944 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 811290a:	4b76      	ldr	r3, [pc, #472]	@ (8112ae4 <tcp_receive+0x274>)
 811290c:	681b      	ldr	r3, [r3, #0]
 811290e:	89db      	ldrh	r3, [r3, #14]
 8112910:	b29a      	uxth	r2, r3
 8112912:	687b      	ldr	r3, [r7, #4]
 8112914:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8112918:	687b      	ldr	r3, [r7, #4]
 811291a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 811291e:	687b      	ldr	r3, [r7, #4]
 8112920:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8112924:	429a      	cmp	r2, r3
 8112926:	d205      	bcs.n	8112934 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8112928:	687b      	ldr	r3, [r7, #4]
 811292a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811292e:	687b      	ldr	r3, [r7, #4]
 8112930:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8112934:	4b69      	ldr	r3, [pc, #420]	@ (8112adc <tcp_receive+0x26c>)
 8112936:	681a      	ldr	r2, [r3, #0]
 8112938:	687b      	ldr	r3, [r7, #4]
 811293a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 811293c:	4b68      	ldr	r3, [pc, #416]	@ (8112ae0 <tcp_receive+0x270>)
 811293e:	681a      	ldr	r2, [r3, #0]
 8112940:	687b      	ldr	r3, [r7, #4]
 8112942:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8112944:	4b66      	ldr	r3, [pc, #408]	@ (8112ae0 <tcp_receive+0x270>)
 8112946:	681a      	ldr	r2, [r3, #0]
 8112948:	687b      	ldr	r3, [r7, #4]
 811294a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811294c:	1ad3      	subs	r3, r2, r3
 811294e:	2b00      	cmp	r3, #0
 8112950:	dc58      	bgt.n	8112a04 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8112952:	4b65      	ldr	r3, [pc, #404]	@ (8112ae8 <tcp_receive+0x278>)
 8112954:	881b      	ldrh	r3, [r3, #0]
 8112956:	2b00      	cmp	r3, #0
 8112958:	d14b      	bne.n	81129f2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 811295a:	687b      	ldr	r3, [r7, #4]
 811295c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 811295e:	687a      	ldr	r2, [r7, #4]
 8112960:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8112964:	4413      	add	r3, r2
 8112966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112968:	429a      	cmp	r2, r3
 811296a:	d142      	bne.n	81129f2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 811296c:	687b      	ldr	r3, [r7, #4]
 811296e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8112972:	2b00      	cmp	r3, #0
 8112974:	db3d      	blt.n	81129f2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8112976:	687b      	ldr	r3, [r7, #4]
 8112978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 811297a:	4b59      	ldr	r3, [pc, #356]	@ (8112ae0 <tcp_receive+0x270>)
 811297c:	681b      	ldr	r3, [r3, #0]
 811297e:	429a      	cmp	r2, r3
 8112980:	d137      	bne.n	81129f2 <tcp_receive+0x182>
              found_dupack = 1;
 8112982:	2301      	movs	r3, #1
 8112984:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8112986:	687b      	ldr	r3, [r7, #4]
 8112988:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811298c:	2bff      	cmp	r3, #255	@ 0xff
 811298e:	d007      	beq.n	81129a0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8112990:	687b      	ldr	r3, [r7, #4]
 8112992:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8112996:	3301      	adds	r3, #1
 8112998:	b2da      	uxtb	r2, r3
 811299a:	687b      	ldr	r3, [r7, #4]
 811299c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 81129a0:	687b      	ldr	r3, [r7, #4]
 81129a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 81129a6:	2b03      	cmp	r3, #3
 81129a8:	d91b      	bls.n	81129e2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 81129aa:	687b      	ldr	r3, [r7, #4]
 81129ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 81129b0:	687b      	ldr	r3, [r7, #4]
 81129b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81129b4:	4413      	add	r3, r2
 81129b6:	b29a      	uxth	r2, r3
 81129b8:	687b      	ldr	r3, [r7, #4]
 81129ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 81129be:	429a      	cmp	r2, r3
 81129c0:	d30a      	bcc.n	81129d8 <tcp_receive+0x168>
 81129c2:	687b      	ldr	r3, [r7, #4]
 81129c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 81129c8:	687b      	ldr	r3, [r7, #4]
 81129ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81129cc:	4413      	add	r3, r2
 81129ce:	b29a      	uxth	r2, r3
 81129d0:	687b      	ldr	r3, [r7, #4]
 81129d2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 81129d6:	e004      	b.n	81129e2 <tcp_receive+0x172>
 81129d8:	687b      	ldr	r3, [r7, #4]
 81129da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81129de:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 81129e2:	687b      	ldr	r3, [r7, #4]
 81129e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 81129e8:	2b02      	cmp	r3, #2
 81129ea:	d902      	bls.n	81129f2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 81129ec:	6878      	ldr	r0, [r7, #4]
 81129ee:	f001 fee9 	bl	81147c4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 81129f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81129f4:	2b00      	cmp	r3, #0
 81129f6:	f040 8161 	bne.w	8112cbc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 81129fa:	687b      	ldr	r3, [r7, #4]
 81129fc:	2200      	movs	r2, #0
 81129fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8112a02:	e15b      	b.n	8112cbc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8112a04:	4b36      	ldr	r3, [pc, #216]	@ (8112ae0 <tcp_receive+0x270>)
 8112a06:	681a      	ldr	r2, [r3, #0]
 8112a08:	687b      	ldr	r3, [r7, #4]
 8112a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8112a0c:	1ad3      	subs	r3, r2, r3
 8112a0e:	3b01      	subs	r3, #1
 8112a10:	2b00      	cmp	r3, #0
 8112a12:	f2c0 814e 	blt.w	8112cb2 <tcp_receive+0x442>
 8112a16:	4b32      	ldr	r3, [pc, #200]	@ (8112ae0 <tcp_receive+0x270>)
 8112a18:	681a      	ldr	r2, [r3, #0]
 8112a1a:	687b      	ldr	r3, [r7, #4]
 8112a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8112a1e:	1ad3      	subs	r3, r2, r3
 8112a20:	2b00      	cmp	r3, #0
 8112a22:	f300 8146 	bgt.w	8112cb2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8112a26:	687b      	ldr	r3, [r7, #4]
 8112a28:	8b5b      	ldrh	r3, [r3, #26]
 8112a2a:	f003 0304 	and.w	r3, r3, #4
 8112a2e:	2b00      	cmp	r3, #0
 8112a30:	d010      	beq.n	8112a54 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8112a32:	687b      	ldr	r3, [r7, #4]
 8112a34:	8b5b      	ldrh	r3, [r3, #26]
 8112a36:	f023 0304 	bic.w	r3, r3, #4
 8112a3a:	b29a      	uxth	r2, r3
 8112a3c:	687b      	ldr	r3, [r7, #4]
 8112a3e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8112a40:	687b      	ldr	r3, [r7, #4]
 8112a42:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8112a46:	687b      	ldr	r3, [r7, #4]
 8112a48:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8112a4c:	687b      	ldr	r3, [r7, #4]
 8112a4e:	2200      	movs	r2, #0
 8112a50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8112a54:	687b      	ldr	r3, [r7, #4]
 8112a56:	2200      	movs	r2, #0
 8112a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8112a5c:	687b      	ldr	r3, [r7, #4]
 8112a5e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8112a62:	10db      	asrs	r3, r3, #3
 8112a64:	b21b      	sxth	r3, r3
 8112a66:	b29a      	uxth	r2, r3
 8112a68:	687b      	ldr	r3, [r7, #4]
 8112a6a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8112a6e:	b29b      	uxth	r3, r3
 8112a70:	4413      	add	r3, r2
 8112a72:	b29b      	uxth	r3, r3
 8112a74:	b21a      	sxth	r2, r3
 8112a76:	687b      	ldr	r3, [r7, #4]
 8112a78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8112a7c:	4b18      	ldr	r3, [pc, #96]	@ (8112ae0 <tcp_receive+0x270>)
 8112a7e:	681b      	ldr	r3, [r3, #0]
 8112a80:	b29a      	uxth	r2, r3
 8112a82:	687b      	ldr	r3, [r7, #4]
 8112a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8112a86:	b29b      	uxth	r3, r3
 8112a88:	1ad3      	subs	r3, r2, r3
 8112a8a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8112a8c:	687b      	ldr	r3, [r7, #4]
 8112a8e:	2200      	movs	r2, #0
 8112a90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8112a94:	4b12      	ldr	r3, [pc, #72]	@ (8112ae0 <tcp_receive+0x270>)
 8112a96:	681a      	ldr	r2, [r3, #0]
 8112a98:	687b      	ldr	r3, [r7, #4]
 8112a9a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8112a9c:	687b      	ldr	r3, [r7, #4]
 8112a9e:	7d1b      	ldrb	r3, [r3, #20]
 8112aa0:	2b03      	cmp	r3, #3
 8112aa2:	f240 8097 	bls.w	8112bd4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8112aa6:	687b      	ldr	r3, [r7, #4]
 8112aa8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8112aac:	687b      	ldr	r3, [r7, #4]
 8112aae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8112ab2:	429a      	cmp	r2, r3
 8112ab4:	d245      	bcs.n	8112b42 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8112ab6:	687b      	ldr	r3, [r7, #4]
 8112ab8:	8b5b      	ldrh	r3, [r3, #26]
 8112aba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8112abe:	2b00      	cmp	r3, #0
 8112ac0:	d014      	beq.n	8112aec <tcp_receive+0x27c>
 8112ac2:	2301      	movs	r3, #1
 8112ac4:	e013      	b.n	8112aee <tcp_receive+0x27e>
 8112ac6:	bf00      	nop
 8112ac8:	08118798 	.word	0x08118798
 8112acc:	08118b08 	.word	0x08118b08
 8112ad0:	08118824 	.word	0x08118824
 8112ad4:	08118b24 	.word	0x08118b24
 8112ad8:	10011c90 	.word	0x10011c90
 8112adc:	10011c84 	.word	0x10011c84
 8112ae0:	10011c88 	.word	0x10011c88
 8112ae4:	10011c74 	.word	0x10011c74
 8112ae8:	10011c8e 	.word	0x10011c8e
 8112aec:	2302      	movs	r3, #2
 8112aee:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8112af2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8112af6:	b29a      	uxth	r2, r3
 8112af8:	687b      	ldr	r3, [r7, #4]
 8112afa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8112afc:	fb12 f303 	smulbb	r3, r2, r3
 8112b00:	b29b      	uxth	r3, r3
 8112b02:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8112b04:	4293      	cmp	r3, r2
 8112b06:	bf28      	it	cs
 8112b08:	4613      	movcs	r3, r2
 8112b0a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8112b0c:	687b      	ldr	r3, [r7, #4]
 8112b0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8112b12:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8112b14:	4413      	add	r3, r2
 8112b16:	b29a      	uxth	r2, r3
 8112b18:	687b      	ldr	r3, [r7, #4]
 8112b1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8112b1e:	429a      	cmp	r2, r3
 8112b20:	d309      	bcc.n	8112b36 <tcp_receive+0x2c6>
 8112b22:	687b      	ldr	r3, [r7, #4]
 8112b24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8112b28:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8112b2a:	4413      	add	r3, r2
 8112b2c:	b29a      	uxth	r2, r3
 8112b2e:	687b      	ldr	r3, [r7, #4]
 8112b30:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8112b34:	e04e      	b.n	8112bd4 <tcp_receive+0x364>
 8112b36:	687b      	ldr	r3, [r7, #4]
 8112b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8112b3c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8112b40:	e048      	b.n	8112bd4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8112b42:	687b      	ldr	r3, [r7, #4]
 8112b44:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8112b48:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8112b4a:	4413      	add	r3, r2
 8112b4c:	b29a      	uxth	r2, r3
 8112b4e:	687b      	ldr	r3, [r7, #4]
 8112b50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8112b54:	429a      	cmp	r2, r3
 8112b56:	d309      	bcc.n	8112b6c <tcp_receive+0x2fc>
 8112b58:	687b      	ldr	r3, [r7, #4]
 8112b5a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8112b5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8112b60:	4413      	add	r3, r2
 8112b62:	b29a      	uxth	r2, r3
 8112b64:	687b      	ldr	r3, [r7, #4]
 8112b66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8112b6a:	e004      	b.n	8112b76 <tcp_receive+0x306>
 8112b6c:	687b      	ldr	r3, [r7, #4]
 8112b6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8112b72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8112b76:	687b      	ldr	r3, [r7, #4]
 8112b78:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8112b7c:	687b      	ldr	r3, [r7, #4]
 8112b7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8112b82:	429a      	cmp	r2, r3
 8112b84:	d326      	bcc.n	8112bd4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8112b86:	687b      	ldr	r3, [r7, #4]
 8112b88:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8112b8c:	687b      	ldr	r3, [r7, #4]
 8112b8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8112b92:	1ad3      	subs	r3, r2, r3
 8112b94:	b29a      	uxth	r2, r3
 8112b96:	687b      	ldr	r3, [r7, #4]
 8112b98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8112b9c:	687b      	ldr	r3, [r7, #4]
 8112b9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8112ba2:	687b      	ldr	r3, [r7, #4]
 8112ba4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8112ba6:	4413      	add	r3, r2
 8112ba8:	b29a      	uxth	r2, r3
 8112baa:	687b      	ldr	r3, [r7, #4]
 8112bac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8112bb0:	429a      	cmp	r2, r3
 8112bb2:	d30a      	bcc.n	8112bca <tcp_receive+0x35a>
 8112bb4:	687b      	ldr	r3, [r7, #4]
 8112bb6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8112bba:	687b      	ldr	r3, [r7, #4]
 8112bbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8112bbe:	4413      	add	r3, r2
 8112bc0:	b29a      	uxth	r2, r3
 8112bc2:	687b      	ldr	r3, [r7, #4]
 8112bc4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8112bc8:	e004      	b.n	8112bd4 <tcp_receive+0x364>
 8112bca:	687b      	ldr	r3, [r7, #4]
 8112bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8112bd0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8112bd4:	687b      	ldr	r3, [r7, #4]
 8112bd6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8112bd8:	687b      	ldr	r3, [r7, #4]
 8112bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112bdc:	4a98      	ldr	r2, [pc, #608]	@ (8112e40 <tcp_receive+0x5d0>)
 8112bde:	6878      	ldr	r0, [r7, #4]
 8112be0:	f7ff fdca 	bl	8112778 <tcp_free_acked_segments>
 8112be4:	4602      	mov	r2, r0
 8112be6:	687b      	ldr	r3, [r7, #4]
 8112be8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8112bea:	687b      	ldr	r3, [r7, #4]
 8112bec:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8112bee:	687b      	ldr	r3, [r7, #4]
 8112bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112bf2:	4a94      	ldr	r2, [pc, #592]	@ (8112e44 <tcp_receive+0x5d4>)
 8112bf4:	6878      	ldr	r0, [r7, #4]
 8112bf6:	f7ff fdbf 	bl	8112778 <tcp_free_acked_segments>
 8112bfa:	4602      	mov	r2, r0
 8112bfc:	687b      	ldr	r3, [r7, #4]
 8112bfe:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8112c00:	687b      	ldr	r3, [r7, #4]
 8112c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112c04:	2b00      	cmp	r3, #0
 8112c06:	d104      	bne.n	8112c12 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8112c08:	687b      	ldr	r3, [r7, #4]
 8112c0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8112c0e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8112c10:	e002      	b.n	8112c18 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8112c12:	687b      	ldr	r3, [r7, #4]
 8112c14:	2200      	movs	r2, #0
 8112c16:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8112c18:	687b      	ldr	r3, [r7, #4]
 8112c1a:	2200      	movs	r2, #0
 8112c1c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8112c1e:	687b      	ldr	r3, [r7, #4]
 8112c20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112c22:	2b00      	cmp	r3, #0
 8112c24:	d103      	bne.n	8112c2e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8112c26:	687b      	ldr	r3, [r7, #4]
 8112c28:	2200      	movs	r2, #0
 8112c2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8112c2e:	687b      	ldr	r3, [r7, #4]
 8112c30:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8112c34:	4b84      	ldr	r3, [pc, #528]	@ (8112e48 <tcp_receive+0x5d8>)
 8112c36:	881b      	ldrh	r3, [r3, #0]
 8112c38:	4413      	add	r3, r2
 8112c3a:	b29a      	uxth	r2, r3
 8112c3c:	687b      	ldr	r3, [r7, #4]
 8112c3e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8112c42:	687b      	ldr	r3, [r7, #4]
 8112c44:	8b5b      	ldrh	r3, [r3, #26]
 8112c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8112c4a:	2b00      	cmp	r3, #0
 8112c4c:	d035      	beq.n	8112cba <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8112c4e:	687b      	ldr	r3, [r7, #4]
 8112c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112c52:	2b00      	cmp	r3, #0
 8112c54:	d118      	bne.n	8112c88 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8112c56:	687b      	ldr	r3, [r7, #4]
 8112c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112c5a:	2b00      	cmp	r3, #0
 8112c5c:	d00c      	beq.n	8112c78 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8112c5e:	687b      	ldr	r3, [r7, #4]
 8112c60:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8112c62:	687b      	ldr	r3, [r7, #4]
 8112c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8112c66:	68db      	ldr	r3, [r3, #12]
 8112c68:	685b      	ldr	r3, [r3, #4]
 8112c6a:	4618      	mov	r0, r3
 8112c6c:	f7f8 fcab 	bl	810b5c6 <lwip_htonl>
 8112c70:	4603      	mov	r3, r0
 8112c72:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8112c74:	2b00      	cmp	r3, #0
 8112c76:	dc20      	bgt.n	8112cba <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8112c78:	687b      	ldr	r3, [r7, #4]
 8112c7a:	8b5b      	ldrh	r3, [r3, #26]
 8112c7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8112c80:	b29a      	uxth	r2, r3
 8112c82:	687b      	ldr	r3, [r7, #4]
 8112c84:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8112c86:	e018      	b.n	8112cba <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8112c88:	687b      	ldr	r3, [r7, #4]
 8112c8a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8112c8c:	687b      	ldr	r3, [r7, #4]
 8112c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8112c90:	68db      	ldr	r3, [r3, #12]
 8112c92:	685b      	ldr	r3, [r3, #4]
 8112c94:	4618      	mov	r0, r3
 8112c96:	f7f8 fc96 	bl	810b5c6 <lwip_htonl>
 8112c9a:	4603      	mov	r3, r0
 8112c9c:	1ae3      	subs	r3, r4, r3
 8112c9e:	2b00      	cmp	r3, #0
 8112ca0:	dc0b      	bgt.n	8112cba <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8112ca2:	687b      	ldr	r3, [r7, #4]
 8112ca4:	8b5b      	ldrh	r3, [r3, #26]
 8112ca6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8112caa:	b29a      	uxth	r2, r3
 8112cac:	687b      	ldr	r3, [r7, #4]
 8112cae:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8112cb0:	e003      	b.n	8112cba <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8112cb2:	6878      	ldr	r0, [r7, #4]
 8112cb4:	f001 ff72 	bl	8114b9c <tcp_send_empty_ack>
 8112cb8:	e000      	b.n	8112cbc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8112cba:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8112cbc:	687b      	ldr	r3, [r7, #4]
 8112cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8112cc0:	2b00      	cmp	r3, #0
 8112cc2:	d05b      	beq.n	8112d7c <tcp_receive+0x50c>
 8112cc4:	687b      	ldr	r3, [r7, #4]
 8112cc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8112cc8:	4b60      	ldr	r3, [pc, #384]	@ (8112e4c <tcp_receive+0x5dc>)
 8112cca:	681b      	ldr	r3, [r3, #0]
 8112ccc:	1ad3      	subs	r3, r2, r3
 8112cce:	2b00      	cmp	r3, #0
 8112cd0:	da54      	bge.n	8112d7c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8112cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8112e50 <tcp_receive+0x5e0>)
 8112cd4:	681b      	ldr	r3, [r3, #0]
 8112cd6:	b29a      	uxth	r2, r3
 8112cd8:	687b      	ldr	r3, [r7, #4]
 8112cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8112cdc:	b29b      	uxth	r3, r3
 8112cde:	1ad3      	subs	r3, r2, r3
 8112ce0:	b29b      	uxth	r3, r3
 8112ce2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8112ce6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8112cea:	687b      	ldr	r3, [r7, #4]
 8112cec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8112cf0:	10db      	asrs	r3, r3, #3
 8112cf2:	b21b      	sxth	r3, r3
 8112cf4:	b29b      	uxth	r3, r3
 8112cf6:	1ad3      	subs	r3, r2, r3
 8112cf8:	b29b      	uxth	r3, r3
 8112cfa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8112cfe:	687b      	ldr	r3, [r7, #4]
 8112d00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8112d04:	b29a      	uxth	r2, r3
 8112d06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8112d0a:	4413      	add	r3, r2
 8112d0c:	b29b      	uxth	r3, r3
 8112d0e:	b21a      	sxth	r2, r3
 8112d10:	687b      	ldr	r3, [r7, #4]
 8112d12:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8112d14:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8112d18:	2b00      	cmp	r3, #0
 8112d1a:	da05      	bge.n	8112d28 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8112d1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8112d20:	425b      	negs	r3, r3
 8112d22:	b29b      	uxth	r3, r3
 8112d24:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8112d28:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8112d2c:	687b      	ldr	r3, [r7, #4]
 8112d2e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8112d32:	109b      	asrs	r3, r3, #2
 8112d34:	b21b      	sxth	r3, r3
 8112d36:	b29b      	uxth	r3, r3
 8112d38:	1ad3      	subs	r3, r2, r3
 8112d3a:	b29b      	uxth	r3, r3
 8112d3c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8112d40:	687b      	ldr	r3, [r7, #4]
 8112d42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8112d46:	b29a      	uxth	r2, r3
 8112d48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8112d4c:	4413      	add	r3, r2
 8112d4e:	b29b      	uxth	r3, r3
 8112d50:	b21a      	sxth	r2, r3
 8112d52:	687b      	ldr	r3, [r7, #4]
 8112d54:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8112d56:	687b      	ldr	r3, [r7, #4]
 8112d58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8112d5c:	10db      	asrs	r3, r3, #3
 8112d5e:	b21b      	sxth	r3, r3
 8112d60:	b29a      	uxth	r2, r3
 8112d62:	687b      	ldr	r3, [r7, #4]
 8112d64:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8112d68:	b29b      	uxth	r3, r3
 8112d6a:	4413      	add	r3, r2
 8112d6c:	b29b      	uxth	r3, r3
 8112d6e:	b21a      	sxth	r2, r3
 8112d70:	687b      	ldr	r3, [r7, #4]
 8112d72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8112d76:	687b      	ldr	r3, [r7, #4]
 8112d78:	2200      	movs	r2, #0
 8112d7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8112d7c:	4b35      	ldr	r3, [pc, #212]	@ (8112e54 <tcp_receive+0x5e4>)
 8112d7e:	881b      	ldrh	r3, [r3, #0]
 8112d80:	2b00      	cmp	r3, #0
 8112d82:	f000 84df 	beq.w	8113744 <tcp_receive+0xed4>
 8112d86:	687b      	ldr	r3, [r7, #4]
 8112d88:	7d1b      	ldrb	r3, [r3, #20]
 8112d8a:	2b06      	cmp	r3, #6
 8112d8c:	f200 84da 	bhi.w	8113744 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8112d90:	687b      	ldr	r3, [r7, #4]
 8112d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8112d94:	4b30      	ldr	r3, [pc, #192]	@ (8112e58 <tcp_receive+0x5e8>)
 8112d96:	681b      	ldr	r3, [r3, #0]
 8112d98:	1ad3      	subs	r3, r2, r3
 8112d9a:	3b01      	subs	r3, #1
 8112d9c:	2b00      	cmp	r3, #0
 8112d9e:	f2c0 808f 	blt.w	8112ec0 <tcp_receive+0x650>
 8112da2:	687b      	ldr	r3, [r7, #4]
 8112da4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8112da6:	4b2b      	ldr	r3, [pc, #172]	@ (8112e54 <tcp_receive+0x5e4>)
 8112da8:	881b      	ldrh	r3, [r3, #0]
 8112daa:	4619      	mov	r1, r3
 8112dac:	4b2a      	ldr	r3, [pc, #168]	@ (8112e58 <tcp_receive+0x5e8>)
 8112dae:	681b      	ldr	r3, [r3, #0]
 8112db0:	440b      	add	r3, r1
 8112db2:	1ad3      	subs	r3, r2, r3
 8112db4:	3301      	adds	r3, #1
 8112db6:	2b00      	cmp	r3, #0
 8112db8:	f300 8082 	bgt.w	8112ec0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8112dbc:	4b27      	ldr	r3, [pc, #156]	@ (8112e5c <tcp_receive+0x5ec>)
 8112dbe:	685b      	ldr	r3, [r3, #4]
 8112dc0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8112dc2:	687b      	ldr	r3, [r7, #4]
 8112dc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8112dc6:	4b24      	ldr	r3, [pc, #144]	@ (8112e58 <tcp_receive+0x5e8>)
 8112dc8:	681b      	ldr	r3, [r3, #0]
 8112dca:	1ad3      	subs	r3, r2, r3
 8112dcc:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8112dce:	4b23      	ldr	r3, [pc, #140]	@ (8112e5c <tcp_receive+0x5ec>)
 8112dd0:	685b      	ldr	r3, [r3, #4]
 8112dd2:	2b00      	cmp	r3, #0
 8112dd4:	d106      	bne.n	8112de4 <tcp_receive+0x574>
 8112dd6:	4b22      	ldr	r3, [pc, #136]	@ (8112e60 <tcp_receive+0x5f0>)
 8112dd8:	f240 5294 	movw	r2, #1428	@ 0x594
 8112ddc:	4921      	ldr	r1, [pc, #132]	@ (8112e64 <tcp_receive+0x5f4>)
 8112dde:	4822      	ldr	r0, [pc, #136]	@ (8112e68 <tcp_receive+0x5f8>)
 8112de0:	f002 ffce 	bl	8115d80 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8112de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112de6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8112dea:	4293      	cmp	r3, r2
 8112dec:	d906      	bls.n	8112dfc <tcp_receive+0x58c>
 8112dee:	4b1c      	ldr	r3, [pc, #112]	@ (8112e60 <tcp_receive+0x5f0>)
 8112df0:	f240 5295 	movw	r2, #1429	@ 0x595
 8112df4:	491d      	ldr	r1, [pc, #116]	@ (8112e6c <tcp_receive+0x5fc>)
 8112df6:	481c      	ldr	r0, [pc, #112]	@ (8112e68 <tcp_receive+0x5f8>)
 8112df8:	f002 ffc2 	bl	8115d80 <iprintf>
      off = (u16_t)off32;
 8112dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112dfe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8112e02:	4b16      	ldr	r3, [pc, #88]	@ (8112e5c <tcp_receive+0x5ec>)
 8112e04:	685b      	ldr	r3, [r3, #4]
 8112e06:	891b      	ldrh	r3, [r3, #8]
 8112e08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8112e0c:	429a      	cmp	r2, r3
 8112e0e:	d906      	bls.n	8112e1e <tcp_receive+0x5ae>
 8112e10:	4b13      	ldr	r3, [pc, #76]	@ (8112e60 <tcp_receive+0x5f0>)
 8112e12:	f240 5297 	movw	r2, #1431	@ 0x597
 8112e16:	4916      	ldr	r1, [pc, #88]	@ (8112e70 <tcp_receive+0x600>)
 8112e18:	4813      	ldr	r0, [pc, #76]	@ (8112e68 <tcp_receive+0x5f8>)
 8112e1a:	f002 ffb1 	bl	8115d80 <iprintf>
      inseg.len -= off;
 8112e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8112e5c <tcp_receive+0x5ec>)
 8112e20:	891a      	ldrh	r2, [r3, #8]
 8112e22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8112e26:	1ad3      	subs	r3, r2, r3
 8112e28:	b29a      	uxth	r2, r3
 8112e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8112e5c <tcp_receive+0x5ec>)
 8112e2c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8112e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8112e5c <tcp_receive+0x5ec>)
 8112e30:	685b      	ldr	r3, [r3, #4]
 8112e32:	891a      	ldrh	r2, [r3, #8]
 8112e34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8112e38:	1ad3      	subs	r3, r2, r3
 8112e3a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8112e3c:	e02a      	b.n	8112e94 <tcp_receive+0x624>
 8112e3e:	bf00      	nop
 8112e40:	08118b40 	.word	0x08118b40
 8112e44:	08118b48 	.word	0x08118b48
 8112e48:	10011c8c 	.word	0x10011c8c
 8112e4c:	10011c88 	.word	0x10011c88
 8112e50:	10011c4c 	.word	0x10011c4c
 8112e54:	10011c8e 	.word	0x10011c8e
 8112e58:	10011c84 	.word	0x10011c84
 8112e5c:	10011c64 	.word	0x10011c64
 8112e60:	08118798 	.word	0x08118798
 8112e64:	08118b50 	.word	0x08118b50
 8112e68:	08118824 	.word	0x08118824
 8112e6c:	08118b60 	.word	0x08118b60
 8112e70:	08118b70 	.word	0x08118b70
        off -= p->len;
 8112e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112e76:	895b      	ldrh	r3, [r3, #10]
 8112e78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8112e7c:	1ad3      	subs	r3, r2, r3
 8112e7e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8112e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112e84:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8112e86:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8112e88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112e8a:	2200      	movs	r2, #0
 8112e8c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8112e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112e90:	681b      	ldr	r3, [r3, #0]
 8112e92:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8112e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8112e96:	895b      	ldrh	r3, [r3, #10]
 8112e98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8112e9c:	429a      	cmp	r2, r3
 8112e9e:	d8e9      	bhi.n	8112e74 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8112ea0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8112ea4:	4619      	mov	r1, r3
 8112ea6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8112ea8:	f7fc fa78 	bl	810f39c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8112eac:	687b      	ldr	r3, [r7, #4]
 8112eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8112eb0:	4a90      	ldr	r2, [pc, #576]	@ (81130f4 <tcp_receive+0x884>)
 8112eb2:	6013      	str	r3, [r2, #0]
 8112eb4:	4b90      	ldr	r3, [pc, #576]	@ (81130f8 <tcp_receive+0x888>)
 8112eb6:	68db      	ldr	r3, [r3, #12]
 8112eb8:	4a8e      	ldr	r2, [pc, #568]	@ (81130f4 <tcp_receive+0x884>)
 8112eba:	6812      	ldr	r2, [r2, #0]
 8112ebc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8112ebe:	e00d      	b.n	8112edc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8112ec0:	4b8c      	ldr	r3, [pc, #560]	@ (81130f4 <tcp_receive+0x884>)
 8112ec2:	681a      	ldr	r2, [r3, #0]
 8112ec4:	687b      	ldr	r3, [r7, #4]
 8112ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8112ec8:	1ad3      	subs	r3, r2, r3
 8112eca:	2b00      	cmp	r3, #0
 8112ecc:	da06      	bge.n	8112edc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8112ece:	687b      	ldr	r3, [r7, #4]
 8112ed0:	8b5b      	ldrh	r3, [r3, #26]
 8112ed2:	f043 0302 	orr.w	r3, r3, #2
 8112ed6:	b29a      	uxth	r2, r3
 8112ed8:	687b      	ldr	r3, [r7, #4]
 8112eda:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8112edc:	4b85      	ldr	r3, [pc, #532]	@ (81130f4 <tcp_receive+0x884>)
 8112ede:	681a      	ldr	r2, [r3, #0]
 8112ee0:	687b      	ldr	r3, [r7, #4]
 8112ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8112ee4:	1ad3      	subs	r3, r2, r3
 8112ee6:	2b00      	cmp	r3, #0
 8112ee8:	f2c0 8427 	blt.w	811373a <tcp_receive+0xeca>
 8112eec:	4b81      	ldr	r3, [pc, #516]	@ (81130f4 <tcp_receive+0x884>)
 8112eee:	681a      	ldr	r2, [r3, #0]
 8112ef0:	687b      	ldr	r3, [r7, #4]
 8112ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8112ef4:	6879      	ldr	r1, [r7, #4]
 8112ef6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8112ef8:	440b      	add	r3, r1
 8112efa:	1ad3      	subs	r3, r2, r3
 8112efc:	3301      	adds	r3, #1
 8112efe:	2b00      	cmp	r3, #0
 8112f00:	f300 841b 	bgt.w	811373a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8112f04:	687b      	ldr	r3, [r7, #4]
 8112f06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8112f08:	4b7a      	ldr	r3, [pc, #488]	@ (81130f4 <tcp_receive+0x884>)
 8112f0a:	681b      	ldr	r3, [r3, #0]
 8112f0c:	429a      	cmp	r2, r3
 8112f0e:	f040 8298 	bne.w	8113442 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8112f12:	4b79      	ldr	r3, [pc, #484]	@ (81130f8 <tcp_receive+0x888>)
 8112f14:	891c      	ldrh	r4, [r3, #8]
 8112f16:	4b78      	ldr	r3, [pc, #480]	@ (81130f8 <tcp_receive+0x888>)
 8112f18:	68db      	ldr	r3, [r3, #12]
 8112f1a:	899b      	ldrh	r3, [r3, #12]
 8112f1c:	b29b      	uxth	r3, r3
 8112f1e:	4618      	mov	r0, r3
 8112f20:	f7f8 fb3c 	bl	810b59c <lwip_htons>
 8112f24:	4603      	mov	r3, r0
 8112f26:	b2db      	uxtb	r3, r3
 8112f28:	f003 0303 	and.w	r3, r3, #3
 8112f2c:	2b00      	cmp	r3, #0
 8112f2e:	d001      	beq.n	8112f34 <tcp_receive+0x6c4>
 8112f30:	2301      	movs	r3, #1
 8112f32:	e000      	b.n	8112f36 <tcp_receive+0x6c6>
 8112f34:	2300      	movs	r3, #0
 8112f36:	4423      	add	r3, r4
 8112f38:	b29a      	uxth	r2, r3
 8112f3a:	4b70      	ldr	r3, [pc, #448]	@ (81130fc <tcp_receive+0x88c>)
 8112f3c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8112f3e:	687b      	ldr	r3, [r7, #4]
 8112f40:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8112f42:	4b6e      	ldr	r3, [pc, #440]	@ (81130fc <tcp_receive+0x88c>)
 8112f44:	881b      	ldrh	r3, [r3, #0]
 8112f46:	429a      	cmp	r2, r3
 8112f48:	d274      	bcs.n	8113034 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8112f4a:	4b6b      	ldr	r3, [pc, #428]	@ (81130f8 <tcp_receive+0x888>)
 8112f4c:	68db      	ldr	r3, [r3, #12]
 8112f4e:	899b      	ldrh	r3, [r3, #12]
 8112f50:	b29b      	uxth	r3, r3
 8112f52:	4618      	mov	r0, r3
 8112f54:	f7f8 fb22 	bl	810b59c <lwip_htons>
 8112f58:	4603      	mov	r3, r0
 8112f5a:	b2db      	uxtb	r3, r3
 8112f5c:	f003 0301 	and.w	r3, r3, #1
 8112f60:	2b00      	cmp	r3, #0
 8112f62:	d01e      	beq.n	8112fa2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8112f64:	4b64      	ldr	r3, [pc, #400]	@ (81130f8 <tcp_receive+0x888>)
 8112f66:	68db      	ldr	r3, [r3, #12]
 8112f68:	899b      	ldrh	r3, [r3, #12]
 8112f6a:	b29b      	uxth	r3, r3
 8112f6c:	b21b      	sxth	r3, r3
 8112f6e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8112f72:	b21c      	sxth	r4, r3
 8112f74:	4b60      	ldr	r3, [pc, #384]	@ (81130f8 <tcp_receive+0x888>)
 8112f76:	68db      	ldr	r3, [r3, #12]
 8112f78:	899b      	ldrh	r3, [r3, #12]
 8112f7a:	b29b      	uxth	r3, r3
 8112f7c:	4618      	mov	r0, r3
 8112f7e:	f7f8 fb0d 	bl	810b59c <lwip_htons>
 8112f82:	4603      	mov	r3, r0
 8112f84:	b2db      	uxtb	r3, r3
 8112f86:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8112f8a:	b29b      	uxth	r3, r3
 8112f8c:	4618      	mov	r0, r3
 8112f8e:	f7f8 fb05 	bl	810b59c <lwip_htons>
 8112f92:	4603      	mov	r3, r0
 8112f94:	b21b      	sxth	r3, r3
 8112f96:	4323      	orrs	r3, r4
 8112f98:	b21a      	sxth	r2, r3
 8112f9a:	4b57      	ldr	r3, [pc, #348]	@ (81130f8 <tcp_receive+0x888>)
 8112f9c:	68db      	ldr	r3, [r3, #12]
 8112f9e:	b292      	uxth	r2, r2
 8112fa0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8112fa2:	687b      	ldr	r3, [r7, #4]
 8112fa4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8112fa6:	4b54      	ldr	r3, [pc, #336]	@ (81130f8 <tcp_receive+0x888>)
 8112fa8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8112faa:	4b53      	ldr	r3, [pc, #332]	@ (81130f8 <tcp_receive+0x888>)
 8112fac:	68db      	ldr	r3, [r3, #12]
 8112fae:	899b      	ldrh	r3, [r3, #12]
 8112fb0:	b29b      	uxth	r3, r3
 8112fb2:	4618      	mov	r0, r3
 8112fb4:	f7f8 faf2 	bl	810b59c <lwip_htons>
 8112fb8:	4603      	mov	r3, r0
 8112fba:	b2db      	uxtb	r3, r3
 8112fbc:	f003 0302 	and.w	r3, r3, #2
 8112fc0:	2b00      	cmp	r3, #0
 8112fc2:	d005      	beq.n	8112fd0 <tcp_receive+0x760>
            inseg.len -= 1;
 8112fc4:	4b4c      	ldr	r3, [pc, #304]	@ (81130f8 <tcp_receive+0x888>)
 8112fc6:	891b      	ldrh	r3, [r3, #8]
 8112fc8:	3b01      	subs	r3, #1
 8112fca:	b29a      	uxth	r2, r3
 8112fcc:	4b4a      	ldr	r3, [pc, #296]	@ (81130f8 <tcp_receive+0x888>)
 8112fce:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8112fd0:	4b49      	ldr	r3, [pc, #292]	@ (81130f8 <tcp_receive+0x888>)
 8112fd2:	685b      	ldr	r3, [r3, #4]
 8112fd4:	4a48      	ldr	r2, [pc, #288]	@ (81130f8 <tcp_receive+0x888>)
 8112fd6:	8912      	ldrh	r2, [r2, #8]
 8112fd8:	4611      	mov	r1, r2
 8112fda:	4618      	mov	r0, r3
 8112fdc:	f7fc f8e0 	bl	810f1a0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8112fe0:	4b45      	ldr	r3, [pc, #276]	@ (81130f8 <tcp_receive+0x888>)
 8112fe2:	891c      	ldrh	r4, [r3, #8]
 8112fe4:	4b44      	ldr	r3, [pc, #272]	@ (81130f8 <tcp_receive+0x888>)
 8112fe6:	68db      	ldr	r3, [r3, #12]
 8112fe8:	899b      	ldrh	r3, [r3, #12]
 8112fea:	b29b      	uxth	r3, r3
 8112fec:	4618      	mov	r0, r3
 8112fee:	f7f8 fad5 	bl	810b59c <lwip_htons>
 8112ff2:	4603      	mov	r3, r0
 8112ff4:	b2db      	uxtb	r3, r3
 8112ff6:	f003 0303 	and.w	r3, r3, #3
 8112ffa:	2b00      	cmp	r3, #0
 8112ffc:	d001      	beq.n	8113002 <tcp_receive+0x792>
 8112ffe:	2301      	movs	r3, #1
 8113000:	e000      	b.n	8113004 <tcp_receive+0x794>
 8113002:	2300      	movs	r3, #0
 8113004:	4423      	add	r3, r4
 8113006:	b29a      	uxth	r2, r3
 8113008:	4b3c      	ldr	r3, [pc, #240]	@ (81130fc <tcp_receive+0x88c>)
 811300a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 811300c:	4b3b      	ldr	r3, [pc, #236]	@ (81130fc <tcp_receive+0x88c>)
 811300e:	881b      	ldrh	r3, [r3, #0]
 8113010:	461a      	mov	r2, r3
 8113012:	4b38      	ldr	r3, [pc, #224]	@ (81130f4 <tcp_receive+0x884>)
 8113014:	681b      	ldr	r3, [r3, #0]
 8113016:	441a      	add	r2, r3
 8113018:	687b      	ldr	r3, [r7, #4]
 811301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811301c:	6879      	ldr	r1, [r7, #4]
 811301e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8113020:	440b      	add	r3, r1
 8113022:	429a      	cmp	r2, r3
 8113024:	d006      	beq.n	8113034 <tcp_receive+0x7c4>
 8113026:	4b36      	ldr	r3, [pc, #216]	@ (8113100 <tcp_receive+0x890>)
 8113028:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 811302c:	4935      	ldr	r1, [pc, #212]	@ (8113104 <tcp_receive+0x894>)
 811302e:	4836      	ldr	r0, [pc, #216]	@ (8113108 <tcp_receive+0x898>)
 8113030:	f002 fea6 	bl	8115d80 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8113034:	687b      	ldr	r3, [r7, #4]
 8113036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8113038:	2b00      	cmp	r3, #0
 811303a:	f000 80e6 	beq.w	811320a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811303e:	4b2e      	ldr	r3, [pc, #184]	@ (81130f8 <tcp_receive+0x888>)
 8113040:	68db      	ldr	r3, [r3, #12]
 8113042:	899b      	ldrh	r3, [r3, #12]
 8113044:	b29b      	uxth	r3, r3
 8113046:	4618      	mov	r0, r3
 8113048:	f7f8 faa8 	bl	810b59c <lwip_htons>
 811304c:	4603      	mov	r3, r0
 811304e:	b2db      	uxtb	r3, r3
 8113050:	f003 0301 	and.w	r3, r3, #1
 8113054:	2b00      	cmp	r3, #0
 8113056:	d010      	beq.n	811307a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8113058:	e00a      	b.n	8113070 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 811305a:	687b      	ldr	r3, [r7, #4]
 811305c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811305e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8113060:	687b      	ldr	r3, [r7, #4]
 8113062:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8113064:	681a      	ldr	r2, [r3, #0]
 8113066:	687b      	ldr	r3, [r7, #4]
 8113068:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 811306a:	68f8      	ldr	r0, [r7, #12]
 811306c:	f7fd fd93 	bl	8110b96 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8113070:	687b      	ldr	r3, [r7, #4]
 8113072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8113074:	2b00      	cmp	r3, #0
 8113076:	d1f0      	bne.n	811305a <tcp_receive+0x7ea>
 8113078:	e0c7      	b.n	811320a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 811307a:	687b      	ldr	r3, [r7, #4]
 811307c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811307e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8113080:	e051      	b.n	8113126 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8113082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113084:	68db      	ldr	r3, [r3, #12]
 8113086:	899b      	ldrh	r3, [r3, #12]
 8113088:	b29b      	uxth	r3, r3
 811308a:	4618      	mov	r0, r3
 811308c:	f7f8 fa86 	bl	810b59c <lwip_htons>
 8113090:	4603      	mov	r3, r0
 8113092:	b2db      	uxtb	r3, r3
 8113094:	f003 0301 	and.w	r3, r3, #1
 8113098:	2b00      	cmp	r3, #0
 811309a:	d03c      	beq.n	8113116 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 811309c:	4b16      	ldr	r3, [pc, #88]	@ (81130f8 <tcp_receive+0x888>)
 811309e:	68db      	ldr	r3, [r3, #12]
 81130a0:	899b      	ldrh	r3, [r3, #12]
 81130a2:	b29b      	uxth	r3, r3
 81130a4:	4618      	mov	r0, r3
 81130a6:	f7f8 fa79 	bl	810b59c <lwip_htons>
 81130aa:	4603      	mov	r3, r0
 81130ac:	b2db      	uxtb	r3, r3
 81130ae:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 81130b2:	2b00      	cmp	r3, #0
 81130b4:	d12f      	bne.n	8113116 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 81130b6:	4b10      	ldr	r3, [pc, #64]	@ (81130f8 <tcp_receive+0x888>)
 81130b8:	68db      	ldr	r3, [r3, #12]
 81130ba:	899b      	ldrh	r3, [r3, #12]
 81130bc:	b29c      	uxth	r4, r3
 81130be:	2001      	movs	r0, #1
 81130c0:	f7f8 fa6c 	bl	810b59c <lwip_htons>
 81130c4:	4603      	mov	r3, r0
 81130c6:	461a      	mov	r2, r3
 81130c8:	4b0b      	ldr	r3, [pc, #44]	@ (81130f8 <tcp_receive+0x888>)
 81130ca:	68db      	ldr	r3, [r3, #12]
 81130cc:	4322      	orrs	r2, r4
 81130ce:	b292      	uxth	r2, r2
 81130d0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 81130d2:	4b09      	ldr	r3, [pc, #36]	@ (81130f8 <tcp_receive+0x888>)
 81130d4:	891c      	ldrh	r4, [r3, #8]
 81130d6:	4b08      	ldr	r3, [pc, #32]	@ (81130f8 <tcp_receive+0x888>)
 81130d8:	68db      	ldr	r3, [r3, #12]
 81130da:	899b      	ldrh	r3, [r3, #12]
 81130dc:	b29b      	uxth	r3, r3
 81130de:	4618      	mov	r0, r3
 81130e0:	f7f8 fa5c 	bl	810b59c <lwip_htons>
 81130e4:	4603      	mov	r3, r0
 81130e6:	b2db      	uxtb	r3, r3
 81130e8:	f003 0303 	and.w	r3, r3, #3
 81130ec:	2b00      	cmp	r3, #0
 81130ee:	d00d      	beq.n	811310c <tcp_receive+0x89c>
 81130f0:	2301      	movs	r3, #1
 81130f2:	e00c      	b.n	811310e <tcp_receive+0x89e>
 81130f4:	10011c84 	.word	0x10011c84
 81130f8:	10011c64 	.word	0x10011c64
 81130fc:	10011c8e 	.word	0x10011c8e
 8113100:	08118798 	.word	0x08118798
 8113104:	08118b80 	.word	0x08118b80
 8113108:	08118824 	.word	0x08118824
 811310c:	2300      	movs	r3, #0
 811310e:	4423      	add	r3, r4
 8113110:	b29a      	uxth	r2, r3
 8113112:	4b98      	ldr	r3, [pc, #608]	@ (8113374 <tcp_receive+0xb04>)
 8113114:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8113116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113118:	613b      	str	r3, [r7, #16]
              next = next->next;
 811311a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811311c:	681b      	ldr	r3, [r3, #0]
 811311e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8113120:	6938      	ldr	r0, [r7, #16]
 8113122:	f7fd fd38 	bl	8110b96 <tcp_seg_free>
            while (next &&
 8113126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8113128:	2b00      	cmp	r3, #0
 811312a:	d00e      	beq.n	811314a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 811312c:	4b91      	ldr	r3, [pc, #580]	@ (8113374 <tcp_receive+0xb04>)
 811312e:	881b      	ldrh	r3, [r3, #0]
 8113130:	461a      	mov	r2, r3
 8113132:	4b91      	ldr	r3, [pc, #580]	@ (8113378 <tcp_receive+0xb08>)
 8113134:	681b      	ldr	r3, [r3, #0]
 8113136:	441a      	add	r2, r3
 8113138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811313a:	68db      	ldr	r3, [r3, #12]
 811313c:	685b      	ldr	r3, [r3, #4]
 811313e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8113140:	8909      	ldrh	r1, [r1, #8]
 8113142:	440b      	add	r3, r1
 8113144:	1ad3      	subs	r3, r2, r3
            while (next &&
 8113146:	2b00      	cmp	r3, #0
 8113148:	da9b      	bge.n	8113082 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 811314a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811314c:	2b00      	cmp	r3, #0
 811314e:	d059      	beq.n	8113204 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8113150:	4b88      	ldr	r3, [pc, #544]	@ (8113374 <tcp_receive+0xb04>)
 8113152:	881b      	ldrh	r3, [r3, #0]
 8113154:	461a      	mov	r2, r3
 8113156:	4b88      	ldr	r3, [pc, #544]	@ (8113378 <tcp_receive+0xb08>)
 8113158:	681b      	ldr	r3, [r3, #0]
 811315a:	441a      	add	r2, r3
 811315c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811315e:	68db      	ldr	r3, [r3, #12]
 8113160:	685b      	ldr	r3, [r3, #4]
 8113162:	1ad3      	subs	r3, r2, r3
            if (next &&
 8113164:	2b00      	cmp	r3, #0
 8113166:	dd4d      	ble.n	8113204 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8113168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811316a:	68db      	ldr	r3, [r3, #12]
 811316c:	685b      	ldr	r3, [r3, #4]
 811316e:	b29a      	uxth	r2, r3
 8113170:	4b81      	ldr	r3, [pc, #516]	@ (8113378 <tcp_receive+0xb08>)
 8113172:	681b      	ldr	r3, [r3, #0]
 8113174:	b29b      	uxth	r3, r3
 8113176:	1ad3      	subs	r3, r2, r3
 8113178:	b29a      	uxth	r2, r3
 811317a:	4b80      	ldr	r3, [pc, #512]	@ (811337c <tcp_receive+0xb0c>)
 811317c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 811317e:	4b7f      	ldr	r3, [pc, #508]	@ (811337c <tcp_receive+0xb0c>)
 8113180:	68db      	ldr	r3, [r3, #12]
 8113182:	899b      	ldrh	r3, [r3, #12]
 8113184:	b29b      	uxth	r3, r3
 8113186:	4618      	mov	r0, r3
 8113188:	f7f8 fa08 	bl	810b59c <lwip_htons>
 811318c:	4603      	mov	r3, r0
 811318e:	b2db      	uxtb	r3, r3
 8113190:	f003 0302 	and.w	r3, r3, #2
 8113194:	2b00      	cmp	r3, #0
 8113196:	d005      	beq.n	81131a4 <tcp_receive+0x934>
                inseg.len -= 1;
 8113198:	4b78      	ldr	r3, [pc, #480]	@ (811337c <tcp_receive+0xb0c>)
 811319a:	891b      	ldrh	r3, [r3, #8]
 811319c:	3b01      	subs	r3, #1
 811319e:	b29a      	uxth	r2, r3
 81131a0:	4b76      	ldr	r3, [pc, #472]	@ (811337c <tcp_receive+0xb0c>)
 81131a2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 81131a4:	4b75      	ldr	r3, [pc, #468]	@ (811337c <tcp_receive+0xb0c>)
 81131a6:	685b      	ldr	r3, [r3, #4]
 81131a8:	4a74      	ldr	r2, [pc, #464]	@ (811337c <tcp_receive+0xb0c>)
 81131aa:	8912      	ldrh	r2, [r2, #8]
 81131ac:	4611      	mov	r1, r2
 81131ae:	4618      	mov	r0, r3
 81131b0:	f7fb fff6 	bl	810f1a0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 81131b4:	4b71      	ldr	r3, [pc, #452]	@ (811337c <tcp_receive+0xb0c>)
 81131b6:	891c      	ldrh	r4, [r3, #8]
 81131b8:	4b70      	ldr	r3, [pc, #448]	@ (811337c <tcp_receive+0xb0c>)
 81131ba:	68db      	ldr	r3, [r3, #12]
 81131bc:	899b      	ldrh	r3, [r3, #12]
 81131be:	b29b      	uxth	r3, r3
 81131c0:	4618      	mov	r0, r3
 81131c2:	f7f8 f9eb 	bl	810b59c <lwip_htons>
 81131c6:	4603      	mov	r3, r0
 81131c8:	b2db      	uxtb	r3, r3
 81131ca:	f003 0303 	and.w	r3, r3, #3
 81131ce:	2b00      	cmp	r3, #0
 81131d0:	d001      	beq.n	81131d6 <tcp_receive+0x966>
 81131d2:	2301      	movs	r3, #1
 81131d4:	e000      	b.n	81131d8 <tcp_receive+0x968>
 81131d6:	2300      	movs	r3, #0
 81131d8:	4423      	add	r3, r4
 81131da:	b29a      	uxth	r2, r3
 81131dc:	4b65      	ldr	r3, [pc, #404]	@ (8113374 <tcp_receive+0xb04>)
 81131de:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 81131e0:	4b64      	ldr	r3, [pc, #400]	@ (8113374 <tcp_receive+0xb04>)
 81131e2:	881b      	ldrh	r3, [r3, #0]
 81131e4:	461a      	mov	r2, r3
 81131e6:	4b64      	ldr	r3, [pc, #400]	@ (8113378 <tcp_receive+0xb08>)
 81131e8:	681b      	ldr	r3, [r3, #0]
 81131ea:	441a      	add	r2, r3
 81131ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81131ee:	68db      	ldr	r3, [r3, #12]
 81131f0:	685b      	ldr	r3, [r3, #4]
 81131f2:	429a      	cmp	r2, r3
 81131f4:	d006      	beq.n	8113204 <tcp_receive+0x994>
 81131f6:	4b62      	ldr	r3, [pc, #392]	@ (8113380 <tcp_receive+0xb10>)
 81131f8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 81131fc:	4961      	ldr	r1, [pc, #388]	@ (8113384 <tcp_receive+0xb14>)
 81131fe:	4862      	ldr	r0, [pc, #392]	@ (8113388 <tcp_receive+0xb18>)
 8113200:	f002 fdbe 	bl	8115d80 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8113204:	687b      	ldr	r3, [r7, #4]
 8113206:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8113208:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 811320a:	4b5a      	ldr	r3, [pc, #360]	@ (8113374 <tcp_receive+0xb04>)
 811320c:	881b      	ldrh	r3, [r3, #0]
 811320e:	461a      	mov	r2, r3
 8113210:	4b59      	ldr	r3, [pc, #356]	@ (8113378 <tcp_receive+0xb08>)
 8113212:	681b      	ldr	r3, [r3, #0]
 8113214:	441a      	add	r2, r3
 8113216:	687b      	ldr	r3, [r7, #4]
 8113218:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 811321a:	687b      	ldr	r3, [r7, #4]
 811321c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811321e:	4b55      	ldr	r3, [pc, #340]	@ (8113374 <tcp_receive+0xb04>)
 8113220:	881b      	ldrh	r3, [r3, #0]
 8113222:	429a      	cmp	r2, r3
 8113224:	d206      	bcs.n	8113234 <tcp_receive+0x9c4>
 8113226:	4b56      	ldr	r3, [pc, #344]	@ (8113380 <tcp_receive+0xb10>)
 8113228:	f240 6207 	movw	r2, #1543	@ 0x607
 811322c:	4957      	ldr	r1, [pc, #348]	@ (811338c <tcp_receive+0xb1c>)
 811322e:	4856      	ldr	r0, [pc, #344]	@ (8113388 <tcp_receive+0xb18>)
 8113230:	f002 fda6 	bl	8115d80 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8113234:	687b      	ldr	r3, [r7, #4]
 8113236:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8113238:	4b4e      	ldr	r3, [pc, #312]	@ (8113374 <tcp_receive+0xb04>)
 811323a:	881b      	ldrh	r3, [r3, #0]
 811323c:	1ad3      	subs	r3, r2, r3
 811323e:	b29a      	uxth	r2, r3
 8113240:	687b      	ldr	r3, [r7, #4]
 8113242:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8113244:	6878      	ldr	r0, [r7, #4]
 8113246:	f7fc ffc1 	bl	81101cc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 811324a:	4b4c      	ldr	r3, [pc, #304]	@ (811337c <tcp_receive+0xb0c>)
 811324c:	685b      	ldr	r3, [r3, #4]
 811324e:	891b      	ldrh	r3, [r3, #8]
 8113250:	2b00      	cmp	r3, #0
 8113252:	d006      	beq.n	8113262 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8113254:	4b49      	ldr	r3, [pc, #292]	@ (811337c <tcp_receive+0xb0c>)
 8113256:	685b      	ldr	r3, [r3, #4]
 8113258:	4a4d      	ldr	r2, [pc, #308]	@ (8113390 <tcp_receive+0xb20>)
 811325a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 811325c:	4b47      	ldr	r3, [pc, #284]	@ (811337c <tcp_receive+0xb0c>)
 811325e:	2200      	movs	r2, #0
 8113260:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8113262:	4b46      	ldr	r3, [pc, #280]	@ (811337c <tcp_receive+0xb0c>)
 8113264:	68db      	ldr	r3, [r3, #12]
 8113266:	899b      	ldrh	r3, [r3, #12]
 8113268:	b29b      	uxth	r3, r3
 811326a:	4618      	mov	r0, r3
 811326c:	f7f8 f996 	bl	810b59c <lwip_htons>
 8113270:	4603      	mov	r3, r0
 8113272:	b2db      	uxtb	r3, r3
 8113274:	f003 0301 	and.w	r3, r3, #1
 8113278:	2b00      	cmp	r3, #0
 811327a:	f000 80b8 	beq.w	81133ee <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 811327e:	4b45      	ldr	r3, [pc, #276]	@ (8113394 <tcp_receive+0xb24>)
 8113280:	781b      	ldrb	r3, [r3, #0]
 8113282:	f043 0320 	orr.w	r3, r3, #32
 8113286:	b2da      	uxtb	r2, r3
 8113288:	4b42      	ldr	r3, [pc, #264]	@ (8113394 <tcp_receive+0xb24>)
 811328a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 811328c:	e0af      	b.n	81133ee <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 811328e:	687b      	ldr	r3, [r7, #4]
 8113290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8113292:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8113294:	687b      	ldr	r3, [r7, #4]
 8113296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8113298:	68db      	ldr	r3, [r3, #12]
 811329a:	685b      	ldr	r3, [r3, #4]
 811329c:	4a36      	ldr	r2, [pc, #216]	@ (8113378 <tcp_receive+0xb08>)
 811329e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 81132a0:	68bb      	ldr	r3, [r7, #8]
 81132a2:	891b      	ldrh	r3, [r3, #8]
 81132a4:	461c      	mov	r4, r3
 81132a6:	68bb      	ldr	r3, [r7, #8]
 81132a8:	68db      	ldr	r3, [r3, #12]
 81132aa:	899b      	ldrh	r3, [r3, #12]
 81132ac:	b29b      	uxth	r3, r3
 81132ae:	4618      	mov	r0, r3
 81132b0:	f7f8 f974 	bl	810b59c <lwip_htons>
 81132b4:	4603      	mov	r3, r0
 81132b6:	b2db      	uxtb	r3, r3
 81132b8:	f003 0303 	and.w	r3, r3, #3
 81132bc:	2b00      	cmp	r3, #0
 81132be:	d001      	beq.n	81132c4 <tcp_receive+0xa54>
 81132c0:	2301      	movs	r3, #1
 81132c2:	e000      	b.n	81132c6 <tcp_receive+0xa56>
 81132c4:	2300      	movs	r3, #0
 81132c6:	191a      	adds	r2, r3, r4
 81132c8:	687b      	ldr	r3, [r7, #4]
 81132ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81132cc:	441a      	add	r2, r3
 81132ce:	687b      	ldr	r3, [r7, #4]
 81132d0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 81132d2:	687b      	ldr	r3, [r7, #4]
 81132d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81132d6:	461c      	mov	r4, r3
 81132d8:	68bb      	ldr	r3, [r7, #8]
 81132da:	891b      	ldrh	r3, [r3, #8]
 81132dc:	461d      	mov	r5, r3
 81132de:	68bb      	ldr	r3, [r7, #8]
 81132e0:	68db      	ldr	r3, [r3, #12]
 81132e2:	899b      	ldrh	r3, [r3, #12]
 81132e4:	b29b      	uxth	r3, r3
 81132e6:	4618      	mov	r0, r3
 81132e8:	f7f8 f958 	bl	810b59c <lwip_htons>
 81132ec:	4603      	mov	r3, r0
 81132ee:	b2db      	uxtb	r3, r3
 81132f0:	f003 0303 	and.w	r3, r3, #3
 81132f4:	2b00      	cmp	r3, #0
 81132f6:	d001      	beq.n	81132fc <tcp_receive+0xa8c>
 81132f8:	2301      	movs	r3, #1
 81132fa:	e000      	b.n	81132fe <tcp_receive+0xa8e>
 81132fc:	2300      	movs	r3, #0
 81132fe:	442b      	add	r3, r5
 8113300:	429c      	cmp	r4, r3
 8113302:	d206      	bcs.n	8113312 <tcp_receive+0xaa2>
 8113304:	4b1e      	ldr	r3, [pc, #120]	@ (8113380 <tcp_receive+0xb10>)
 8113306:	f240 622b 	movw	r2, #1579	@ 0x62b
 811330a:	4923      	ldr	r1, [pc, #140]	@ (8113398 <tcp_receive+0xb28>)
 811330c:	481e      	ldr	r0, [pc, #120]	@ (8113388 <tcp_receive+0xb18>)
 811330e:	f002 fd37 	bl	8115d80 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8113312:	68bb      	ldr	r3, [r7, #8]
 8113314:	891b      	ldrh	r3, [r3, #8]
 8113316:	461c      	mov	r4, r3
 8113318:	68bb      	ldr	r3, [r7, #8]
 811331a:	68db      	ldr	r3, [r3, #12]
 811331c:	899b      	ldrh	r3, [r3, #12]
 811331e:	b29b      	uxth	r3, r3
 8113320:	4618      	mov	r0, r3
 8113322:	f7f8 f93b 	bl	810b59c <lwip_htons>
 8113326:	4603      	mov	r3, r0
 8113328:	b2db      	uxtb	r3, r3
 811332a:	f003 0303 	and.w	r3, r3, #3
 811332e:	2b00      	cmp	r3, #0
 8113330:	d001      	beq.n	8113336 <tcp_receive+0xac6>
 8113332:	2301      	movs	r3, #1
 8113334:	e000      	b.n	8113338 <tcp_receive+0xac8>
 8113336:	2300      	movs	r3, #0
 8113338:	1919      	adds	r1, r3, r4
 811333a:	687b      	ldr	r3, [r7, #4]
 811333c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811333e:	b28b      	uxth	r3, r1
 8113340:	1ad3      	subs	r3, r2, r3
 8113342:	b29a      	uxth	r2, r3
 8113344:	687b      	ldr	r3, [r7, #4]
 8113346:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8113348:	6878      	ldr	r0, [r7, #4]
 811334a:	f7fc ff3f 	bl	81101cc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 811334e:	68bb      	ldr	r3, [r7, #8]
 8113350:	685b      	ldr	r3, [r3, #4]
 8113352:	891b      	ldrh	r3, [r3, #8]
 8113354:	2b00      	cmp	r3, #0
 8113356:	d028      	beq.n	81133aa <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8113358:	4b0d      	ldr	r3, [pc, #52]	@ (8113390 <tcp_receive+0xb20>)
 811335a:	681b      	ldr	r3, [r3, #0]
 811335c:	2b00      	cmp	r3, #0
 811335e:	d01d      	beq.n	811339c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8113360:	4b0b      	ldr	r3, [pc, #44]	@ (8113390 <tcp_receive+0xb20>)
 8113362:	681a      	ldr	r2, [r3, #0]
 8113364:	68bb      	ldr	r3, [r7, #8]
 8113366:	685b      	ldr	r3, [r3, #4]
 8113368:	4619      	mov	r1, r3
 811336a:	4610      	mov	r0, r2
 811336c:	f7fc f96a 	bl	810f644 <pbuf_cat>
 8113370:	e018      	b.n	81133a4 <tcp_receive+0xb34>
 8113372:	bf00      	nop
 8113374:	10011c8e 	.word	0x10011c8e
 8113378:	10011c84 	.word	0x10011c84
 811337c:	10011c64 	.word	0x10011c64
 8113380:	08118798 	.word	0x08118798
 8113384:	08118bb8 	.word	0x08118bb8
 8113388:	08118824 	.word	0x08118824
 811338c:	08118bf4 	.word	0x08118bf4
 8113390:	10011c94 	.word	0x10011c94
 8113394:	10011c91 	.word	0x10011c91
 8113398:	08118c14 	.word	0x08118c14
            } else {
              recv_data = cseg->p;
 811339c:	68bb      	ldr	r3, [r7, #8]
 811339e:	685b      	ldr	r3, [r3, #4]
 81133a0:	4a70      	ldr	r2, [pc, #448]	@ (8113564 <tcp_receive+0xcf4>)
 81133a2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 81133a4:	68bb      	ldr	r3, [r7, #8]
 81133a6:	2200      	movs	r2, #0
 81133a8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 81133aa:	68bb      	ldr	r3, [r7, #8]
 81133ac:	68db      	ldr	r3, [r3, #12]
 81133ae:	899b      	ldrh	r3, [r3, #12]
 81133b0:	b29b      	uxth	r3, r3
 81133b2:	4618      	mov	r0, r3
 81133b4:	f7f8 f8f2 	bl	810b59c <lwip_htons>
 81133b8:	4603      	mov	r3, r0
 81133ba:	b2db      	uxtb	r3, r3
 81133bc:	f003 0301 	and.w	r3, r3, #1
 81133c0:	2b00      	cmp	r3, #0
 81133c2:	d00d      	beq.n	81133e0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 81133c4:	4b68      	ldr	r3, [pc, #416]	@ (8113568 <tcp_receive+0xcf8>)
 81133c6:	781b      	ldrb	r3, [r3, #0]
 81133c8:	f043 0320 	orr.w	r3, r3, #32
 81133cc:	b2da      	uxtb	r2, r3
 81133ce:	4b66      	ldr	r3, [pc, #408]	@ (8113568 <tcp_receive+0xcf8>)
 81133d0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 81133d2:	687b      	ldr	r3, [r7, #4]
 81133d4:	7d1b      	ldrb	r3, [r3, #20]
 81133d6:	2b04      	cmp	r3, #4
 81133d8:	d102      	bne.n	81133e0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 81133da:	687b      	ldr	r3, [r7, #4]
 81133dc:	2207      	movs	r2, #7
 81133de:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 81133e0:	68bb      	ldr	r3, [r7, #8]
 81133e2:	681a      	ldr	r2, [r3, #0]
 81133e4:	687b      	ldr	r3, [r7, #4]
 81133e6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 81133e8:	68b8      	ldr	r0, [r7, #8]
 81133ea:	f7fd fbd4 	bl	8110b96 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 81133ee:	687b      	ldr	r3, [r7, #4]
 81133f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81133f2:	2b00      	cmp	r3, #0
 81133f4:	d008      	beq.n	8113408 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 81133f6:	687b      	ldr	r3, [r7, #4]
 81133f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81133fa:	68db      	ldr	r3, [r3, #12]
 81133fc:	685a      	ldr	r2, [r3, #4]
 81133fe:	687b      	ldr	r3, [r7, #4]
 8113400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8113402:	429a      	cmp	r2, r3
 8113404:	f43f af43 	beq.w	811328e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8113408:	687b      	ldr	r3, [r7, #4]
 811340a:	8b5b      	ldrh	r3, [r3, #26]
 811340c:	f003 0301 	and.w	r3, r3, #1
 8113410:	2b00      	cmp	r3, #0
 8113412:	d00e      	beq.n	8113432 <tcp_receive+0xbc2>
 8113414:	687b      	ldr	r3, [r7, #4]
 8113416:	8b5b      	ldrh	r3, [r3, #26]
 8113418:	f023 0301 	bic.w	r3, r3, #1
 811341c:	b29a      	uxth	r2, r3
 811341e:	687b      	ldr	r3, [r7, #4]
 8113420:	835a      	strh	r2, [r3, #26]
 8113422:	687b      	ldr	r3, [r7, #4]
 8113424:	8b5b      	ldrh	r3, [r3, #26]
 8113426:	f043 0302 	orr.w	r3, r3, #2
 811342a:	b29a      	uxth	r2, r3
 811342c:	687b      	ldr	r3, [r7, #4]
 811342e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8113430:	e187      	b.n	8113742 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8113432:	687b      	ldr	r3, [r7, #4]
 8113434:	8b5b      	ldrh	r3, [r3, #26]
 8113436:	f043 0301 	orr.w	r3, r3, #1
 811343a:	b29a      	uxth	r2, r3
 811343c:	687b      	ldr	r3, [r7, #4]
 811343e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8113440:	e17f      	b.n	8113742 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8113442:	687b      	ldr	r3, [r7, #4]
 8113444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8113446:	2b00      	cmp	r3, #0
 8113448:	d106      	bne.n	8113458 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 811344a:	4848      	ldr	r0, [pc, #288]	@ (811356c <tcp_receive+0xcfc>)
 811344c:	f7fd fbbc 	bl	8110bc8 <tcp_seg_copy>
 8113450:	4602      	mov	r2, r0
 8113452:	687b      	ldr	r3, [r7, #4]
 8113454:	675a      	str	r2, [r3, #116]	@ 0x74
 8113456:	e16c      	b.n	8113732 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8113458:	2300      	movs	r3, #0
 811345a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 811345c:	687b      	ldr	r3, [r7, #4]
 811345e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8113460:	63bb      	str	r3, [r7, #56]	@ 0x38
 8113462:	e156      	b.n	8113712 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8113464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113466:	68db      	ldr	r3, [r3, #12]
 8113468:	685a      	ldr	r2, [r3, #4]
 811346a:	4b41      	ldr	r3, [pc, #260]	@ (8113570 <tcp_receive+0xd00>)
 811346c:	681b      	ldr	r3, [r3, #0]
 811346e:	429a      	cmp	r2, r3
 8113470:	d11d      	bne.n	81134ae <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8113472:	4b3e      	ldr	r3, [pc, #248]	@ (811356c <tcp_receive+0xcfc>)
 8113474:	891a      	ldrh	r2, [r3, #8]
 8113476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113478:	891b      	ldrh	r3, [r3, #8]
 811347a:	429a      	cmp	r2, r3
 811347c:	f240 814e 	bls.w	811371c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8113480:	483a      	ldr	r0, [pc, #232]	@ (811356c <tcp_receive+0xcfc>)
 8113482:	f7fd fba1 	bl	8110bc8 <tcp_seg_copy>
 8113486:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8113488:	697b      	ldr	r3, [r7, #20]
 811348a:	2b00      	cmp	r3, #0
 811348c:	f000 8148 	beq.w	8113720 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8113490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113492:	2b00      	cmp	r3, #0
 8113494:	d003      	beq.n	811349e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8113496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113498:	697a      	ldr	r2, [r7, #20]
 811349a:	601a      	str	r2, [r3, #0]
 811349c:	e002      	b.n	81134a4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 811349e:	687b      	ldr	r3, [r7, #4]
 81134a0:	697a      	ldr	r2, [r7, #20]
 81134a2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 81134a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 81134a6:	6978      	ldr	r0, [r7, #20]
 81134a8:	f7ff f8de 	bl	8112668 <tcp_oos_insert_segment>
                }
                break;
 81134ac:	e138      	b.n	8113720 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 81134ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81134b0:	2b00      	cmp	r3, #0
 81134b2:	d117      	bne.n	81134e4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 81134b4:	4b2e      	ldr	r3, [pc, #184]	@ (8113570 <tcp_receive+0xd00>)
 81134b6:	681a      	ldr	r2, [r3, #0]
 81134b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81134ba:	68db      	ldr	r3, [r3, #12]
 81134bc:	685b      	ldr	r3, [r3, #4]
 81134be:	1ad3      	subs	r3, r2, r3
 81134c0:	2b00      	cmp	r3, #0
 81134c2:	da57      	bge.n	8113574 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 81134c4:	4829      	ldr	r0, [pc, #164]	@ (811356c <tcp_receive+0xcfc>)
 81134c6:	f7fd fb7f 	bl	8110bc8 <tcp_seg_copy>
 81134ca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 81134cc:	69bb      	ldr	r3, [r7, #24]
 81134ce:	2b00      	cmp	r3, #0
 81134d0:	f000 8128 	beq.w	8113724 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 81134d4:	687b      	ldr	r3, [r7, #4]
 81134d6:	69ba      	ldr	r2, [r7, #24]
 81134d8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 81134da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 81134dc:	69b8      	ldr	r0, [r7, #24]
 81134de:	f7ff f8c3 	bl	8112668 <tcp_oos_insert_segment>
                  }
                  break;
 81134e2:	e11f      	b.n	8113724 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 81134e4:	4b22      	ldr	r3, [pc, #136]	@ (8113570 <tcp_receive+0xd00>)
 81134e6:	681a      	ldr	r2, [r3, #0]
 81134e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81134ea:	68db      	ldr	r3, [r3, #12]
 81134ec:	685b      	ldr	r3, [r3, #4]
 81134ee:	1ad3      	subs	r3, r2, r3
 81134f0:	3b01      	subs	r3, #1
 81134f2:	2b00      	cmp	r3, #0
 81134f4:	db3e      	blt.n	8113574 <tcp_receive+0xd04>
 81134f6:	4b1e      	ldr	r3, [pc, #120]	@ (8113570 <tcp_receive+0xd00>)
 81134f8:	681a      	ldr	r2, [r3, #0]
 81134fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81134fc:	68db      	ldr	r3, [r3, #12]
 81134fe:	685b      	ldr	r3, [r3, #4]
 8113500:	1ad3      	subs	r3, r2, r3
 8113502:	3301      	adds	r3, #1
 8113504:	2b00      	cmp	r3, #0
 8113506:	dc35      	bgt.n	8113574 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8113508:	4818      	ldr	r0, [pc, #96]	@ (811356c <tcp_receive+0xcfc>)
 811350a:	f7fd fb5d 	bl	8110bc8 <tcp_seg_copy>
 811350e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8113510:	69fb      	ldr	r3, [r7, #28]
 8113512:	2b00      	cmp	r3, #0
 8113514:	f000 8108 	beq.w	8113728 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8113518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811351a:	68db      	ldr	r3, [r3, #12]
 811351c:	685b      	ldr	r3, [r3, #4]
 811351e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8113520:	8912      	ldrh	r2, [r2, #8]
 8113522:	441a      	add	r2, r3
 8113524:	4b12      	ldr	r3, [pc, #72]	@ (8113570 <tcp_receive+0xd00>)
 8113526:	681b      	ldr	r3, [r3, #0]
 8113528:	1ad3      	subs	r3, r2, r3
 811352a:	2b00      	cmp	r3, #0
 811352c:	dd12      	ble.n	8113554 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 811352e:	4b10      	ldr	r3, [pc, #64]	@ (8113570 <tcp_receive+0xd00>)
 8113530:	681b      	ldr	r3, [r3, #0]
 8113532:	b29a      	uxth	r2, r3
 8113534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113536:	68db      	ldr	r3, [r3, #12]
 8113538:	685b      	ldr	r3, [r3, #4]
 811353a:	b29b      	uxth	r3, r3
 811353c:	1ad3      	subs	r3, r2, r3
 811353e:	b29a      	uxth	r2, r3
 8113540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113542:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8113544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113546:	685a      	ldr	r2, [r3, #4]
 8113548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811354a:	891b      	ldrh	r3, [r3, #8]
 811354c:	4619      	mov	r1, r3
 811354e:	4610      	mov	r0, r2
 8113550:	f7fb fe26 	bl	810f1a0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8113554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8113556:	69fa      	ldr	r2, [r7, #28]
 8113558:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 811355a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 811355c:	69f8      	ldr	r0, [r7, #28]
 811355e:	f7ff f883 	bl	8112668 <tcp_oos_insert_segment>
                  }
                  break;
 8113562:	e0e1      	b.n	8113728 <tcp_receive+0xeb8>
 8113564:	10011c94 	.word	0x10011c94
 8113568:	10011c91 	.word	0x10011c91
 811356c:	10011c64 	.word	0x10011c64
 8113570:	10011c84 	.word	0x10011c84
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8113574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113576:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8113578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811357a:	681b      	ldr	r3, [r3, #0]
 811357c:	2b00      	cmp	r3, #0
 811357e:	f040 80c5 	bne.w	811370c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8113582:	4b7f      	ldr	r3, [pc, #508]	@ (8113780 <tcp_receive+0xf10>)
 8113584:	681a      	ldr	r2, [r3, #0]
 8113586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113588:	68db      	ldr	r3, [r3, #12]
 811358a:	685b      	ldr	r3, [r3, #4]
 811358c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 811358e:	2b00      	cmp	r3, #0
 8113590:	f340 80bc 	ble.w	811370c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8113594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113596:	68db      	ldr	r3, [r3, #12]
 8113598:	899b      	ldrh	r3, [r3, #12]
 811359a:	b29b      	uxth	r3, r3
 811359c:	4618      	mov	r0, r3
 811359e:	f7f7 fffd 	bl	810b59c <lwip_htons>
 81135a2:	4603      	mov	r3, r0
 81135a4:	b2db      	uxtb	r3, r3
 81135a6:	f003 0301 	and.w	r3, r3, #1
 81135aa:	2b00      	cmp	r3, #0
 81135ac:	f040 80be 	bne.w	811372c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 81135b0:	4874      	ldr	r0, [pc, #464]	@ (8113784 <tcp_receive+0xf14>)
 81135b2:	f7fd fb09 	bl	8110bc8 <tcp_seg_copy>
 81135b6:	4602      	mov	r2, r0
 81135b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81135ba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 81135bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81135be:	681b      	ldr	r3, [r3, #0]
 81135c0:	2b00      	cmp	r3, #0
 81135c2:	f000 80b5 	beq.w	8113730 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 81135c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81135c8:	68db      	ldr	r3, [r3, #12]
 81135ca:	685b      	ldr	r3, [r3, #4]
 81135cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81135ce:	8912      	ldrh	r2, [r2, #8]
 81135d0:	441a      	add	r2, r3
 81135d2:	4b6b      	ldr	r3, [pc, #428]	@ (8113780 <tcp_receive+0xf10>)
 81135d4:	681b      	ldr	r3, [r3, #0]
 81135d6:	1ad3      	subs	r3, r2, r3
 81135d8:	2b00      	cmp	r3, #0
 81135da:	dd12      	ble.n	8113602 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 81135dc:	4b68      	ldr	r3, [pc, #416]	@ (8113780 <tcp_receive+0xf10>)
 81135de:	681b      	ldr	r3, [r3, #0]
 81135e0:	b29a      	uxth	r2, r3
 81135e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81135e4:	68db      	ldr	r3, [r3, #12]
 81135e6:	685b      	ldr	r3, [r3, #4]
 81135e8:	b29b      	uxth	r3, r3
 81135ea:	1ad3      	subs	r3, r2, r3
 81135ec:	b29a      	uxth	r2, r3
 81135ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81135f0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 81135f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81135f4:	685a      	ldr	r2, [r3, #4]
 81135f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81135f8:	891b      	ldrh	r3, [r3, #8]
 81135fa:	4619      	mov	r1, r3
 81135fc:	4610      	mov	r0, r2
 81135fe:	f7fb fdcf 	bl	810f1a0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8113602:	4b61      	ldr	r3, [pc, #388]	@ (8113788 <tcp_receive+0xf18>)
 8113604:	881b      	ldrh	r3, [r3, #0]
 8113606:	461a      	mov	r2, r3
 8113608:	4b5d      	ldr	r3, [pc, #372]	@ (8113780 <tcp_receive+0xf10>)
 811360a:	681b      	ldr	r3, [r3, #0]
 811360c:	441a      	add	r2, r3
 811360e:	687b      	ldr	r3, [r7, #4]
 8113610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8113612:	6879      	ldr	r1, [r7, #4]
 8113614:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8113616:	440b      	add	r3, r1
 8113618:	1ad3      	subs	r3, r2, r3
 811361a:	2b00      	cmp	r3, #0
 811361c:	f340 8088 	ble.w	8113730 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8113620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113622:	681b      	ldr	r3, [r3, #0]
 8113624:	68db      	ldr	r3, [r3, #12]
 8113626:	899b      	ldrh	r3, [r3, #12]
 8113628:	b29b      	uxth	r3, r3
 811362a:	4618      	mov	r0, r3
 811362c:	f7f7 ffb6 	bl	810b59c <lwip_htons>
 8113630:	4603      	mov	r3, r0
 8113632:	b2db      	uxtb	r3, r3
 8113634:	f003 0301 	and.w	r3, r3, #1
 8113638:	2b00      	cmp	r3, #0
 811363a:	d021      	beq.n	8113680 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 811363c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811363e:	681b      	ldr	r3, [r3, #0]
 8113640:	68db      	ldr	r3, [r3, #12]
 8113642:	899b      	ldrh	r3, [r3, #12]
 8113644:	b29b      	uxth	r3, r3
 8113646:	b21b      	sxth	r3, r3
 8113648:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811364c:	b21c      	sxth	r4, r3
 811364e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113650:	681b      	ldr	r3, [r3, #0]
 8113652:	68db      	ldr	r3, [r3, #12]
 8113654:	899b      	ldrh	r3, [r3, #12]
 8113656:	b29b      	uxth	r3, r3
 8113658:	4618      	mov	r0, r3
 811365a:	f7f7 ff9f 	bl	810b59c <lwip_htons>
 811365e:	4603      	mov	r3, r0
 8113660:	b2db      	uxtb	r3, r3
 8113662:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8113666:	b29b      	uxth	r3, r3
 8113668:	4618      	mov	r0, r3
 811366a:	f7f7 ff97 	bl	810b59c <lwip_htons>
 811366e:	4603      	mov	r3, r0
 8113670:	b21b      	sxth	r3, r3
 8113672:	4323      	orrs	r3, r4
 8113674:	b21a      	sxth	r2, r3
 8113676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113678:	681b      	ldr	r3, [r3, #0]
 811367a:	68db      	ldr	r3, [r3, #12]
 811367c:	b292      	uxth	r2, r2
 811367e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8113680:	687b      	ldr	r3, [r7, #4]
 8113682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8113684:	b29a      	uxth	r2, r3
 8113686:	687b      	ldr	r3, [r7, #4]
 8113688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811368a:	4413      	add	r3, r2
 811368c:	b299      	uxth	r1, r3
 811368e:	4b3c      	ldr	r3, [pc, #240]	@ (8113780 <tcp_receive+0xf10>)
 8113690:	681b      	ldr	r3, [r3, #0]
 8113692:	b29a      	uxth	r2, r3
 8113694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113696:	681b      	ldr	r3, [r3, #0]
 8113698:	1a8a      	subs	r2, r1, r2
 811369a:	b292      	uxth	r2, r2
 811369c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 811369e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81136a0:	681b      	ldr	r3, [r3, #0]
 81136a2:	685a      	ldr	r2, [r3, #4]
 81136a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81136a6:	681b      	ldr	r3, [r3, #0]
 81136a8:	891b      	ldrh	r3, [r3, #8]
 81136aa:	4619      	mov	r1, r3
 81136ac:	4610      	mov	r0, r2
 81136ae:	f7fb fd77 	bl	810f1a0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 81136b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81136b4:	681b      	ldr	r3, [r3, #0]
 81136b6:	891c      	ldrh	r4, [r3, #8]
 81136b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81136ba:	681b      	ldr	r3, [r3, #0]
 81136bc:	68db      	ldr	r3, [r3, #12]
 81136be:	899b      	ldrh	r3, [r3, #12]
 81136c0:	b29b      	uxth	r3, r3
 81136c2:	4618      	mov	r0, r3
 81136c4:	f7f7 ff6a 	bl	810b59c <lwip_htons>
 81136c8:	4603      	mov	r3, r0
 81136ca:	b2db      	uxtb	r3, r3
 81136cc:	f003 0303 	and.w	r3, r3, #3
 81136d0:	2b00      	cmp	r3, #0
 81136d2:	d001      	beq.n	81136d8 <tcp_receive+0xe68>
 81136d4:	2301      	movs	r3, #1
 81136d6:	e000      	b.n	81136da <tcp_receive+0xe6a>
 81136d8:	2300      	movs	r3, #0
 81136da:	4423      	add	r3, r4
 81136dc:	b29a      	uxth	r2, r3
 81136de:	4b2a      	ldr	r3, [pc, #168]	@ (8113788 <tcp_receive+0xf18>)
 81136e0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 81136e2:	4b29      	ldr	r3, [pc, #164]	@ (8113788 <tcp_receive+0xf18>)
 81136e4:	881b      	ldrh	r3, [r3, #0]
 81136e6:	461a      	mov	r2, r3
 81136e8:	4b25      	ldr	r3, [pc, #148]	@ (8113780 <tcp_receive+0xf10>)
 81136ea:	681b      	ldr	r3, [r3, #0]
 81136ec:	441a      	add	r2, r3
 81136ee:	687b      	ldr	r3, [r7, #4]
 81136f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81136f2:	6879      	ldr	r1, [r7, #4]
 81136f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 81136f6:	440b      	add	r3, r1
 81136f8:	429a      	cmp	r2, r3
 81136fa:	d019      	beq.n	8113730 <tcp_receive+0xec0>
 81136fc:	4b23      	ldr	r3, [pc, #140]	@ (811378c <tcp_receive+0xf1c>)
 81136fe:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8113702:	4923      	ldr	r1, [pc, #140]	@ (8113790 <tcp_receive+0xf20>)
 8113704:	4823      	ldr	r0, [pc, #140]	@ (8113794 <tcp_receive+0xf24>)
 8113706:	f002 fb3b 	bl	8115d80 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 811370a:	e011      	b.n	8113730 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 811370c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811370e:	681b      	ldr	r3, [r3, #0]
 8113710:	63bb      	str	r3, [r7, #56]	@ 0x38
 8113712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8113714:	2b00      	cmp	r3, #0
 8113716:	f47f aea5 	bne.w	8113464 <tcp_receive+0xbf4>
 811371a:	e00a      	b.n	8113732 <tcp_receive+0xec2>
                break;
 811371c:	bf00      	nop
 811371e:	e008      	b.n	8113732 <tcp_receive+0xec2>
                break;
 8113720:	bf00      	nop
 8113722:	e006      	b.n	8113732 <tcp_receive+0xec2>
                  break;
 8113724:	bf00      	nop
 8113726:	e004      	b.n	8113732 <tcp_receive+0xec2>
                  break;
 8113728:	bf00      	nop
 811372a:	e002      	b.n	8113732 <tcp_receive+0xec2>
                  break;
 811372c:	bf00      	nop
 811372e:	e000      	b.n	8113732 <tcp_receive+0xec2>
                break;
 8113730:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8113732:	6878      	ldr	r0, [r7, #4]
 8113734:	f001 fa32 	bl	8114b9c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8113738:	e003      	b.n	8113742 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 811373a:	6878      	ldr	r0, [r7, #4]
 811373c:	f001 fa2e 	bl	8114b9c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8113740:	e01a      	b.n	8113778 <tcp_receive+0xf08>
 8113742:	e019      	b.n	8113778 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8113744:	4b0e      	ldr	r3, [pc, #56]	@ (8113780 <tcp_receive+0xf10>)
 8113746:	681a      	ldr	r2, [r3, #0]
 8113748:	687b      	ldr	r3, [r7, #4]
 811374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811374c:	1ad3      	subs	r3, r2, r3
 811374e:	2b00      	cmp	r3, #0
 8113750:	db0a      	blt.n	8113768 <tcp_receive+0xef8>
 8113752:	4b0b      	ldr	r3, [pc, #44]	@ (8113780 <tcp_receive+0xf10>)
 8113754:	681a      	ldr	r2, [r3, #0]
 8113756:	687b      	ldr	r3, [r7, #4]
 8113758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811375a:	6879      	ldr	r1, [r7, #4]
 811375c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811375e:	440b      	add	r3, r1
 8113760:	1ad3      	subs	r3, r2, r3
 8113762:	3301      	adds	r3, #1
 8113764:	2b00      	cmp	r3, #0
 8113766:	dd07      	ble.n	8113778 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8113768:	687b      	ldr	r3, [r7, #4]
 811376a:	8b5b      	ldrh	r3, [r3, #26]
 811376c:	f043 0302 	orr.w	r3, r3, #2
 8113770:	b29a      	uxth	r2, r3
 8113772:	687b      	ldr	r3, [r7, #4]
 8113774:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8113776:	e7ff      	b.n	8113778 <tcp_receive+0xf08>
 8113778:	bf00      	nop
 811377a:	3750      	adds	r7, #80	@ 0x50
 811377c:	46bd      	mov	sp, r7
 811377e:	bdb0      	pop	{r4, r5, r7, pc}
 8113780:	10011c84 	.word	0x10011c84
 8113784:	10011c64 	.word	0x10011c64
 8113788:	10011c8e 	.word	0x10011c8e
 811378c:	08118798 	.word	0x08118798
 8113790:	08118b80 	.word	0x08118b80
 8113794:	08118824 	.word	0x08118824

08113798 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8113798:	b480      	push	{r7}
 811379a:	b083      	sub	sp, #12
 811379c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 811379e:	4b15      	ldr	r3, [pc, #84]	@ (81137f4 <tcp_get_next_optbyte+0x5c>)
 81137a0:	881b      	ldrh	r3, [r3, #0]
 81137a2:	1c5a      	adds	r2, r3, #1
 81137a4:	b291      	uxth	r1, r2
 81137a6:	4a13      	ldr	r2, [pc, #76]	@ (81137f4 <tcp_get_next_optbyte+0x5c>)
 81137a8:	8011      	strh	r1, [r2, #0]
 81137aa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 81137ac:	4b12      	ldr	r3, [pc, #72]	@ (81137f8 <tcp_get_next_optbyte+0x60>)
 81137ae:	681b      	ldr	r3, [r3, #0]
 81137b0:	2b00      	cmp	r3, #0
 81137b2:	d004      	beq.n	81137be <tcp_get_next_optbyte+0x26>
 81137b4:	4b11      	ldr	r3, [pc, #68]	@ (81137fc <tcp_get_next_optbyte+0x64>)
 81137b6:	881b      	ldrh	r3, [r3, #0]
 81137b8:	88fa      	ldrh	r2, [r7, #6]
 81137ba:	429a      	cmp	r2, r3
 81137bc:	d208      	bcs.n	81137d0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 81137be:	4b10      	ldr	r3, [pc, #64]	@ (8113800 <tcp_get_next_optbyte+0x68>)
 81137c0:	681b      	ldr	r3, [r3, #0]
 81137c2:	3314      	adds	r3, #20
 81137c4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 81137c6:	88fb      	ldrh	r3, [r7, #6]
 81137c8:	683a      	ldr	r2, [r7, #0]
 81137ca:	4413      	add	r3, r2
 81137cc:	781b      	ldrb	r3, [r3, #0]
 81137ce:	e00b      	b.n	81137e8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 81137d0:	88fb      	ldrh	r3, [r7, #6]
 81137d2:	b2da      	uxtb	r2, r3
 81137d4:	4b09      	ldr	r3, [pc, #36]	@ (81137fc <tcp_get_next_optbyte+0x64>)
 81137d6:	881b      	ldrh	r3, [r3, #0]
 81137d8:	b2db      	uxtb	r3, r3
 81137da:	1ad3      	subs	r3, r2, r3
 81137dc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 81137de:	4b06      	ldr	r3, [pc, #24]	@ (81137f8 <tcp_get_next_optbyte+0x60>)
 81137e0:	681a      	ldr	r2, [r3, #0]
 81137e2:	797b      	ldrb	r3, [r7, #5]
 81137e4:	4413      	add	r3, r2
 81137e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 81137e8:	4618      	mov	r0, r3
 81137ea:	370c      	adds	r7, #12
 81137ec:	46bd      	mov	sp, r7
 81137ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81137f2:	4770      	bx	lr
 81137f4:	10011c80 	.word	0x10011c80
 81137f8:	10011c7c 	.word	0x10011c7c
 81137fc:	10011c7a 	.word	0x10011c7a
 8113800:	10011c74 	.word	0x10011c74

08113804 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8113804:	b580      	push	{r7, lr}
 8113806:	b084      	sub	sp, #16
 8113808:	af00      	add	r7, sp, #0
 811380a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 811380c:	687b      	ldr	r3, [r7, #4]
 811380e:	2b00      	cmp	r3, #0
 8113810:	d106      	bne.n	8113820 <tcp_parseopt+0x1c>
 8113812:	4b33      	ldr	r3, [pc, #204]	@ (81138e0 <tcp_parseopt+0xdc>)
 8113814:	f240 727d 	movw	r2, #1917	@ 0x77d
 8113818:	4932      	ldr	r1, [pc, #200]	@ (81138e4 <tcp_parseopt+0xe0>)
 811381a:	4833      	ldr	r0, [pc, #204]	@ (81138e8 <tcp_parseopt+0xe4>)
 811381c:	f002 fab0 	bl	8115d80 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8113820:	4b32      	ldr	r3, [pc, #200]	@ (81138ec <tcp_parseopt+0xe8>)
 8113822:	881b      	ldrh	r3, [r3, #0]
 8113824:	2b00      	cmp	r3, #0
 8113826:	d057      	beq.n	81138d8 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8113828:	4b31      	ldr	r3, [pc, #196]	@ (81138f0 <tcp_parseopt+0xec>)
 811382a:	2200      	movs	r2, #0
 811382c:	801a      	strh	r2, [r3, #0]
 811382e:	e047      	b.n	81138c0 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8113830:	f7ff ffb2 	bl	8113798 <tcp_get_next_optbyte>
 8113834:	4603      	mov	r3, r0
 8113836:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8113838:	7bfb      	ldrb	r3, [r7, #15]
 811383a:	2b02      	cmp	r3, #2
 811383c:	d006      	beq.n	811384c <tcp_parseopt+0x48>
 811383e:	2b02      	cmp	r3, #2
 8113840:	dc2b      	bgt.n	811389a <tcp_parseopt+0x96>
 8113842:	2b00      	cmp	r3, #0
 8113844:	d043      	beq.n	81138ce <tcp_parseopt+0xca>
 8113846:	2b01      	cmp	r3, #1
 8113848:	d039      	beq.n	81138be <tcp_parseopt+0xba>
 811384a:	e026      	b.n	811389a <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 811384c:	f7ff ffa4 	bl	8113798 <tcp_get_next_optbyte>
 8113850:	4603      	mov	r3, r0
 8113852:	2b04      	cmp	r3, #4
 8113854:	d13d      	bne.n	81138d2 <tcp_parseopt+0xce>
 8113856:	4b26      	ldr	r3, [pc, #152]	@ (81138f0 <tcp_parseopt+0xec>)
 8113858:	881b      	ldrh	r3, [r3, #0]
 811385a:	3301      	adds	r3, #1
 811385c:	4a23      	ldr	r2, [pc, #140]	@ (81138ec <tcp_parseopt+0xe8>)
 811385e:	8812      	ldrh	r2, [r2, #0]
 8113860:	4293      	cmp	r3, r2
 8113862:	da36      	bge.n	81138d2 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8113864:	f7ff ff98 	bl	8113798 <tcp_get_next_optbyte>
 8113868:	4603      	mov	r3, r0
 811386a:	021b      	lsls	r3, r3, #8
 811386c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 811386e:	f7ff ff93 	bl	8113798 <tcp_get_next_optbyte>
 8113872:	4603      	mov	r3, r0
 8113874:	461a      	mov	r2, r3
 8113876:	89bb      	ldrh	r3, [r7, #12]
 8113878:	4313      	orrs	r3, r2
 811387a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 811387c:	89bb      	ldrh	r3, [r7, #12]
 811387e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8113882:	4293      	cmp	r3, r2
 8113884:	d804      	bhi.n	8113890 <tcp_parseopt+0x8c>
 8113886:	89bb      	ldrh	r3, [r7, #12]
 8113888:	2b00      	cmp	r3, #0
 811388a:	d001      	beq.n	8113890 <tcp_parseopt+0x8c>
 811388c:	89ba      	ldrh	r2, [r7, #12]
 811388e:	e001      	b.n	8113894 <tcp_parseopt+0x90>
 8113890:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8113894:	687b      	ldr	r3, [r7, #4]
 8113896:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8113898:	e012      	b.n	81138c0 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 811389a:	f7ff ff7d 	bl	8113798 <tcp_get_next_optbyte>
 811389e:	4603      	mov	r3, r0
 81138a0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 81138a2:	7afb      	ldrb	r3, [r7, #11]
 81138a4:	2b01      	cmp	r3, #1
 81138a6:	d916      	bls.n	81138d6 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 81138a8:	7afb      	ldrb	r3, [r7, #11]
 81138aa:	b29a      	uxth	r2, r3
 81138ac:	4b10      	ldr	r3, [pc, #64]	@ (81138f0 <tcp_parseopt+0xec>)
 81138ae:	881b      	ldrh	r3, [r3, #0]
 81138b0:	4413      	add	r3, r2
 81138b2:	b29b      	uxth	r3, r3
 81138b4:	3b02      	subs	r3, #2
 81138b6:	b29a      	uxth	r2, r3
 81138b8:	4b0d      	ldr	r3, [pc, #52]	@ (81138f0 <tcp_parseopt+0xec>)
 81138ba:	801a      	strh	r2, [r3, #0]
 81138bc:	e000      	b.n	81138c0 <tcp_parseopt+0xbc>
          break;
 81138be:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 81138c0:	4b0b      	ldr	r3, [pc, #44]	@ (81138f0 <tcp_parseopt+0xec>)
 81138c2:	881a      	ldrh	r2, [r3, #0]
 81138c4:	4b09      	ldr	r3, [pc, #36]	@ (81138ec <tcp_parseopt+0xe8>)
 81138c6:	881b      	ldrh	r3, [r3, #0]
 81138c8:	429a      	cmp	r2, r3
 81138ca:	d3b1      	bcc.n	8113830 <tcp_parseopt+0x2c>
 81138cc:	e004      	b.n	81138d8 <tcp_parseopt+0xd4>
          return;
 81138ce:	bf00      	nop
 81138d0:	e002      	b.n	81138d8 <tcp_parseopt+0xd4>
            return;
 81138d2:	bf00      	nop
 81138d4:	e000      	b.n	81138d8 <tcp_parseopt+0xd4>
            return;
 81138d6:	bf00      	nop
      }
    }
  }
}
 81138d8:	3710      	adds	r7, #16
 81138da:	46bd      	mov	sp, r7
 81138dc:	bd80      	pop	{r7, pc}
 81138de:	bf00      	nop
 81138e0:	08118798 	.word	0x08118798
 81138e4:	08118c3c 	.word	0x08118c3c
 81138e8:	08118824 	.word	0x08118824
 81138ec:	10011c78 	.word	0x10011c78
 81138f0:	10011c80 	.word	0x10011c80

081138f4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 81138f4:	b480      	push	{r7}
 81138f6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 81138f8:	4b05      	ldr	r3, [pc, #20]	@ (8113910 <tcp_trigger_input_pcb_close+0x1c>)
 81138fa:	781b      	ldrb	r3, [r3, #0]
 81138fc:	f043 0310 	orr.w	r3, r3, #16
 8113900:	b2da      	uxtb	r2, r3
 8113902:	4b03      	ldr	r3, [pc, #12]	@ (8113910 <tcp_trigger_input_pcb_close+0x1c>)
 8113904:	701a      	strb	r2, [r3, #0]
}
 8113906:	bf00      	nop
 8113908:	46bd      	mov	sp, r7
 811390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811390e:	4770      	bx	lr
 8113910:	10011c91 	.word	0x10011c91

08113914 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8113914:	b580      	push	{r7, lr}
 8113916:	b084      	sub	sp, #16
 8113918:	af00      	add	r7, sp, #0
 811391a:	60f8      	str	r0, [r7, #12]
 811391c:	60b9      	str	r1, [r7, #8]
 811391e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8113920:	68fb      	ldr	r3, [r7, #12]
 8113922:	2b00      	cmp	r3, #0
 8113924:	d00a      	beq.n	811393c <tcp_route+0x28>
 8113926:	68fb      	ldr	r3, [r7, #12]
 8113928:	7a1b      	ldrb	r3, [r3, #8]
 811392a:	2b00      	cmp	r3, #0
 811392c:	d006      	beq.n	811393c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 811392e:	68fb      	ldr	r3, [r7, #12]
 8113930:	7a1b      	ldrb	r3, [r3, #8]
 8113932:	4618      	mov	r0, r3
 8113934:	f7fb fa2a 	bl	810ed8c <netif_get_by_index>
 8113938:	4603      	mov	r3, r0
 811393a:	e003      	b.n	8113944 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 811393c:	6878      	ldr	r0, [r7, #4]
 811393e:	f7f9 f905 	bl	810cb4c <ip4_route>
 8113942:	4603      	mov	r3, r0
  }
}
 8113944:	4618      	mov	r0, r3
 8113946:	3710      	adds	r7, #16
 8113948:	46bd      	mov	sp, r7
 811394a:	bd80      	pop	{r7, pc}

0811394c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 811394c:	b590      	push	{r4, r7, lr}
 811394e:	b087      	sub	sp, #28
 8113950:	af00      	add	r7, sp, #0
 8113952:	60f8      	str	r0, [r7, #12]
 8113954:	60b9      	str	r1, [r7, #8]
 8113956:	603b      	str	r3, [r7, #0]
 8113958:	4613      	mov	r3, r2
 811395a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 811395c:	68fb      	ldr	r3, [r7, #12]
 811395e:	2b00      	cmp	r3, #0
 8113960:	d105      	bne.n	811396e <tcp_create_segment+0x22>
 8113962:	4b43      	ldr	r3, [pc, #268]	@ (8113a70 <tcp_create_segment+0x124>)
 8113964:	22a3      	movs	r2, #163	@ 0xa3
 8113966:	4943      	ldr	r1, [pc, #268]	@ (8113a74 <tcp_create_segment+0x128>)
 8113968:	4843      	ldr	r0, [pc, #268]	@ (8113a78 <tcp_create_segment+0x12c>)
 811396a:	f002 fa09 	bl	8115d80 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 811396e:	68bb      	ldr	r3, [r7, #8]
 8113970:	2b00      	cmp	r3, #0
 8113972:	d105      	bne.n	8113980 <tcp_create_segment+0x34>
 8113974:	4b3e      	ldr	r3, [pc, #248]	@ (8113a70 <tcp_create_segment+0x124>)
 8113976:	22a4      	movs	r2, #164	@ 0xa4
 8113978:	4940      	ldr	r1, [pc, #256]	@ (8113a7c <tcp_create_segment+0x130>)
 811397a:	483f      	ldr	r0, [pc, #252]	@ (8113a78 <tcp_create_segment+0x12c>)
 811397c:	f002 fa00 	bl	8115d80 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8113980:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8113984:	009b      	lsls	r3, r3, #2
 8113986:	b2db      	uxtb	r3, r3
 8113988:	f003 0304 	and.w	r3, r3, #4
 811398c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 811398e:	2003      	movs	r0, #3
 8113990:	f7fa fe70 	bl	810e674 <memp_malloc>
 8113994:	6138      	str	r0, [r7, #16]
 8113996:	693b      	ldr	r3, [r7, #16]
 8113998:	2b00      	cmp	r3, #0
 811399a:	d104      	bne.n	81139a6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 811399c:	68b8      	ldr	r0, [r7, #8]
 811399e:	f7fb fd83 	bl	810f4a8 <pbuf_free>
    return NULL;
 81139a2:	2300      	movs	r3, #0
 81139a4:	e060      	b.n	8113a68 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 81139a6:	693b      	ldr	r3, [r7, #16]
 81139a8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 81139ac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 81139ae:	693b      	ldr	r3, [r7, #16]
 81139b0:	2200      	movs	r2, #0
 81139b2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 81139b4:	693b      	ldr	r3, [r7, #16]
 81139b6:	68ba      	ldr	r2, [r7, #8]
 81139b8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 81139ba:	68bb      	ldr	r3, [r7, #8]
 81139bc:	891a      	ldrh	r2, [r3, #8]
 81139be:	7dfb      	ldrb	r3, [r7, #23]
 81139c0:	b29b      	uxth	r3, r3
 81139c2:	429a      	cmp	r2, r3
 81139c4:	d205      	bcs.n	81139d2 <tcp_create_segment+0x86>
 81139c6:	4b2a      	ldr	r3, [pc, #168]	@ (8113a70 <tcp_create_segment+0x124>)
 81139c8:	22b0      	movs	r2, #176	@ 0xb0
 81139ca:	492d      	ldr	r1, [pc, #180]	@ (8113a80 <tcp_create_segment+0x134>)
 81139cc:	482a      	ldr	r0, [pc, #168]	@ (8113a78 <tcp_create_segment+0x12c>)
 81139ce:	f002 f9d7 	bl	8115d80 <iprintf>
  seg->len = p->tot_len - optlen;
 81139d2:	68bb      	ldr	r3, [r7, #8]
 81139d4:	891a      	ldrh	r2, [r3, #8]
 81139d6:	7dfb      	ldrb	r3, [r7, #23]
 81139d8:	b29b      	uxth	r3, r3
 81139da:	1ad3      	subs	r3, r2, r3
 81139dc:	b29a      	uxth	r2, r3
 81139de:	693b      	ldr	r3, [r7, #16]
 81139e0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 81139e2:	2114      	movs	r1, #20
 81139e4:	68b8      	ldr	r0, [r7, #8]
 81139e6:	f7fb fcc9 	bl	810f37c <pbuf_add_header>
 81139ea:	4603      	mov	r3, r0
 81139ec:	2b00      	cmp	r3, #0
 81139ee:	d004      	beq.n	81139fa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 81139f0:	6938      	ldr	r0, [r7, #16]
 81139f2:	f7fd f8d0 	bl	8110b96 <tcp_seg_free>
    return NULL;
 81139f6:	2300      	movs	r3, #0
 81139f8:	e036      	b.n	8113a68 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 81139fa:	693b      	ldr	r3, [r7, #16]
 81139fc:	685b      	ldr	r3, [r3, #4]
 81139fe:	685a      	ldr	r2, [r3, #4]
 8113a00:	693b      	ldr	r3, [r7, #16]
 8113a02:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8113a04:	68fb      	ldr	r3, [r7, #12]
 8113a06:	8ada      	ldrh	r2, [r3, #22]
 8113a08:	693b      	ldr	r3, [r7, #16]
 8113a0a:	68dc      	ldr	r4, [r3, #12]
 8113a0c:	4610      	mov	r0, r2
 8113a0e:	f7f7 fdc5 	bl	810b59c <lwip_htons>
 8113a12:	4603      	mov	r3, r0
 8113a14:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8113a16:	68fb      	ldr	r3, [r7, #12]
 8113a18:	8b1a      	ldrh	r2, [r3, #24]
 8113a1a:	693b      	ldr	r3, [r7, #16]
 8113a1c:	68dc      	ldr	r4, [r3, #12]
 8113a1e:	4610      	mov	r0, r2
 8113a20:	f7f7 fdbc 	bl	810b59c <lwip_htons>
 8113a24:	4603      	mov	r3, r0
 8113a26:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8113a28:	693b      	ldr	r3, [r7, #16]
 8113a2a:	68dc      	ldr	r4, [r3, #12]
 8113a2c:	6838      	ldr	r0, [r7, #0]
 8113a2e:	f7f7 fdca 	bl	810b5c6 <lwip_htonl>
 8113a32:	4603      	mov	r3, r0
 8113a34:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8113a36:	7dfb      	ldrb	r3, [r7, #23]
 8113a38:	089b      	lsrs	r3, r3, #2
 8113a3a:	b2db      	uxtb	r3, r3
 8113a3c:	3305      	adds	r3, #5
 8113a3e:	b29b      	uxth	r3, r3
 8113a40:	031b      	lsls	r3, r3, #12
 8113a42:	b29a      	uxth	r2, r3
 8113a44:	79fb      	ldrb	r3, [r7, #7]
 8113a46:	b29b      	uxth	r3, r3
 8113a48:	4313      	orrs	r3, r2
 8113a4a:	b29a      	uxth	r2, r3
 8113a4c:	693b      	ldr	r3, [r7, #16]
 8113a4e:	68dc      	ldr	r4, [r3, #12]
 8113a50:	4610      	mov	r0, r2
 8113a52:	f7f7 fda3 	bl	810b59c <lwip_htons>
 8113a56:	4603      	mov	r3, r0
 8113a58:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8113a5a:	693b      	ldr	r3, [r7, #16]
 8113a5c:	68db      	ldr	r3, [r3, #12]
 8113a5e:	2200      	movs	r2, #0
 8113a60:	749a      	strb	r2, [r3, #18]
 8113a62:	2200      	movs	r2, #0
 8113a64:	74da      	strb	r2, [r3, #19]
  return seg;
 8113a66:	693b      	ldr	r3, [r7, #16]
}
 8113a68:	4618      	mov	r0, r3
 8113a6a:	371c      	adds	r7, #28
 8113a6c:	46bd      	mov	sp, r7
 8113a6e:	bd90      	pop	{r4, r7, pc}
 8113a70:	08118c58 	.word	0x08118c58
 8113a74:	08118ccc 	.word	0x08118ccc
 8113a78:	08118cec 	.word	0x08118cec
 8113a7c:	08118d14 	.word	0x08118d14
 8113a80:	08118d38 	.word	0x08118d38

08113a84 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8113a84:	b590      	push	{r4, r7, lr}
 8113a86:	b08b      	sub	sp, #44	@ 0x2c
 8113a88:	af02      	add	r7, sp, #8
 8113a8a:	6078      	str	r0, [r7, #4]
 8113a8c:	460b      	mov	r3, r1
 8113a8e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8113a90:	2300      	movs	r3, #0
 8113a92:	61fb      	str	r3, [r7, #28]
 8113a94:	2300      	movs	r3, #0
 8113a96:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8113a98:	2300      	movs	r3, #0
 8113a9a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8113a9c:	687b      	ldr	r3, [r7, #4]
 8113a9e:	2b00      	cmp	r3, #0
 8113aa0:	d106      	bne.n	8113ab0 <tcp_split_unsent_seg+0x2c>
 8113aa2:	4b95      	ldr	r3, [pc, #596]	@ (8113cf8 <tcp_split_unsent_seg+0x274>)
 8113aa4:	f240 324b 	movw	r2, #843	@ 0x34b
 8113aa8:	4994      	ldr	r1, [pc, #592]	@ (8113cfc <tcp_split_unsent_seg+0x278>)
 8113aaa:	4895      	ldr	r0, [pc, #596]	@ (8113d00 <tcp_split_unsent_seg+0x27c>)
 8113aac:	f002 f968 	bl	8115d80 <iprintf>

  useg = pcb->unsent;
 8113ab0:	687b      	ldr	r3, [r7, #4]
 8113ab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113ab4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8113ab6:	697b      	ldr	r3, [r7, #20]
 8113ab8:	2b00      	cmp	r3, #0
 8113aba:	d102      	bne.n	8113ac2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8113abc:	f04f 33ff 	mov.w	r3, #4294967295
 8113ac0:	e116      	b.n	8113cf0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8113ac2:	887b      	ldrh	r3, [r7, #2]
 8113ac4:	2b00      	cmp	r3, #0
 8113ac6:	d109      	bne.n	8113adc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8113ac8:	4b8b      	ldr	r3, [pc, #556]	@ (8113cf8 <tcp_split_unsent_seg+0x274>)
 8113aca:	f240 3253 	movw	r2, #851	@ 0x353
 8113ace:	498d      	ldr	r1, [pc, #564]	@ (8113d04 <tcp_split_unsent_seg+0x280>)
 8113ad0:	488b      	ldr	r0, [pc, #556]	@ (8113d00 <tcp_split_unsent_seg+0x27c>)
 8113ad2:	f002 f955 	bl	8115d80 <iprintf>
    return ERR_VAL;
 8113ad6:	f06f 0305 	mvn.w	r3, #5
 8113ada:	e109      	b.n	8113cf0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8113adc:	697b      	ldr	r3, [r7, #20]
 8113ade:	891b      	ldrh	r3, [r3, #8]
 8113ae0:	887a      	ldrh	r2, [r7, #2]
 8113ae2:	429a      	cmp	r2, r3
 8113ae4:	d301      	bcc.n	8113aea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8113ae6:	2300      	movs	r3, #0
 8113ae8:	e102      	b.n	8113cf0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8113aea:	687b      	ldr	r3, [r7, #4]
 8113aec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8113aee:	887a      	ldrh	r2, [r7, #2]
 8113af0:	429a      	cmp	r2, r3
 8113af2:	d906      	bls.n	8113b02 <tcp_split_unsent_seg+0x7e>
 8113af4:	4b80      	ldr	r3, [pc, #512]	@ (8113cf8 <tcp_split_unsent_seg+0x274>)
 8113af6:	f240 325b 	movw	r2, #859	@ 0x35b
 8113afa:	4983      	ldr	r1, [pc, #524]	@ (8113d08 <tcp_split_unsent_seg+0x284>)
 8113afc:	4880      	ldr	r0, [pc, #512]	@ (8113d00 <tcp_split_unsent_seg+0x27c>)
 8113afe:	f002 f93f 	bl	8115d80 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8113b02:	697b      	ldr	r3, [r7, #20]
 8113b04:	891b      	ldrh	r3, [r3, #8]
 8113b06:	2b00      	cmp	r3, #0
 8113b08:	d106      	bne.n	8113b18 <tcp_split_unsent_seg+0x94>
 8113b0a:	4b7b      	ldr	r3, [pc, #492]	@ (8113cf8 <tcp_split_unsent_seg+0x274>)
 8113b0c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8113b10:	497e      	ldr	r1, [pc, #504]	@ (8113d0c <tcp_split_unsent_seg+0x288>)
 8113b12:	487b      	ldr	r0, [pc, #492]	@ (8113d00 <tcp_split_unsent_seg+0x27c>)
 8113b14:	f002 f934 	bl	8115d80 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8113b18:	697b      	ldr	r3, [r7, #20]
 8113b1a:	7a9b      	ldrb	r3, [r3, #10]
 8113b1c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8113b1e:	7bfb      	ldrb	r3, [r7, #15]
 8113b20:	009b      	lsls	r3, r3, #2
 8113b22:	b2db      	uxtb	r3, r3
 8113b24:	f003 0304 	and.w	r3, r3, #4
 8113b28:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8113b2a:	697b      	ldr	r3, [r7, #20]
 8113b2c:	891a      	ldrh	r2, [r3, #8]
 8113b2e:	887b      	ldrh	r3, [r7, #2]
 8113b30:	1ad3      	subs	r3, r2, r3
 8113b32:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8113b34:	7bbb      	ldrb	r3, [r7, #14]
 8113b36:	b29a      	uxth	r2, r3
 8113b38:	89bb      	ldrh	r3, [r7, #12]
 8113b3a:	4413      	add	r3, r2
 8113b3c:	b29b      	uxth	r3, r3
 8113b3e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8113b42:	4619      	mov	r1, r3
 8113b44:	2036      	movs	r0, #54	@ 0x36
 8113b46:	f7fb f9cb 	bl	810eee0 <pbuf_alloc>
 8113b4a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8113b4c:	693b      	ldr	r3, [r7, #16]
 8113b4e:	2b00      	cmp	r3, #0
 8113b50:	f000 80b7 	beq.w	8113cc2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8113b54:	697b      	ldr	r3, [r7, #20]
 8113b56:	685b      	ldr	r3, [r3, #4]
 8113b58:	891a      	ldrh	r2, [r3, #8]
 8113b5a:	697b      	ldr	r3, [r7, #20]
 8113b5c:	891b      	ldrh	r3, [r3, #8]
 8113b5e:	1ad3      	subs	r3, r2, r3
 8113b60:	b29a      	uxth	r2, r3
 8113b62:	887b      	ldrh	r3, [r7, #2]
 8113b64:	4413      	add	r3, r2
 8113b66:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8113b68:	697b      	ldr	r3, [r7, #20]
 8113b6a:	6858      	ldr	r0, [r3, #4]
 8113b6c:	693b      	ldr	r3, [r7, #16]
 8113b6e:	685a      	ldr	r2, [r3, #4]
 8113b70:	7bbb      	ldrb	r3, [r7, #14]
 8113b72:	18d1      	adds	r1, r2, r3
 8113b74:	897b      	ldrh	r3, [r7, #10]
 8113b76:	89ba      	ldrh	r2, [r7, #12]
 8113b78:	f7fb fe8c 	bl	810f894 <pbuf_copy_partial>
 8113b7c:	4603      	mov	r3, r0
 8113b7e:	461a      	mov	r2, r3
 8113b80:	89bb      	ldrh	r3, [r7, #12]
 8113b82:	4293      	cmp	r3, r2
 8113b84:	f040 809f 	bne.w	8113cc6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8113b88:	697b      	ldr	r3, [r7, #20]
 8113b8a:	68db      	ldr	r3, [r3, #12]
 8113b8c:	899b      	ldrh	r3, [r3, #12]
 8113b8e:	b29b      	uxth	r3, r3
 8113b90:	4618      	mov	r0, r3
 8113b92:	f7f7 fd03 	bl	810b59c <lwip_htons>
 8113b96:	4603      	mov	r3, r0
 8113b98:	b2db      	uxtb	r3, r3
 8113b9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8113b9e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8113ba0:	2300      	movs	r3, #0
 8113ba2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8113ba4:	7efb      	ldrb	r3, [r7, #27]
 8113ba6:	f003 0308 	and.w	r3, r3, #8
 8113baa:	2b00      	cmp	r3, #0
 8113bac:	d007      	beq.n	8113bbe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8113bae:	7efb      	ldrb	r3, [r7, #27]
 8113bb0:	f023 0308 	bic.w	r3, r3, #8
 8113bb4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8113bb6:	7ebb      	ldrb	r3, [r7, #26]
 8113bb8:	f043 0308 	orr.w	r3, r3, #8
 8113bbc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8113bbe:	7efb      	ldrb	r3, [r7, #27]
 8113bc0:	f003 0301 	and.w	r3, r3, #1
 8113bc4:	2b00      	cmp	r3, #0
 8113bc6:	d007      	beq.n	8113bd8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8113bc8:	7efb      	ldrb	r3, [r7, #27]
 8113bca:	f023 0301 	bic.w	r3, r3, #1
 8113bce:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8113bd0:	7ebb      	ldrb	r3, [r7, #26]
 8113bd2:	f043 0301 	orr.w	r3, r3, #1
 8113bd6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8113bd8:	697b      	ldr	r3, [r7, #20]
 8113bda:	68db      	ldr	r3, [r3, #12]
 8113bdc:	685b      	ldr	r3, [r3, #4]
 8113bde:	4618      	mov	r0, r3
 8113be0:	f7f7 fcf1 	bl	810b5c6 <lwip_htonl>
 8113be4:	4602      	mov	r2, r0
 8113be6:	887b      	ldrh	r3, [r7, #2]
 8113be8:	18d1      	adds	r1, r2, r3
 8113bea:	7eba      	ldrb	r2, [r7, #26]
 8113bec:	7bfb      	ldrb	r3, [r7, #15]
 8113bee:	9300      	str	r3, [sp, #0]
 8113bf0:	460b      	mov	r3, r1
 8113bf2:	6939      	ldr	r1, [r7, #16]
 8113bf4:	6878      	ldr	r0, [r7, #4]
 8113bf6:	f7ff fea9 	bl	811394c <tcp_create_segment>
 8113bfa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8113bfc:	69fb      	ldr	r3, [r7, #28]
 8113bfe:	2b00      	cmp	r3, #0
 8113c00:	d063      	beq.n	8113cca <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8113c02:	697b      	ldr	r3, [r7, #20]
 8113c04:	685b      	ldr	r3, [r3, #4]
 8113c06:	4618      	mov	r0, r3
 8113c08:	f7fb fcdc 	bl	810f5c4 <pbuf_clen>
 8113c0c:	4603      	mov	r3, r0
 8113c0e:	461a      	mov	r2, r3
 8113c10:	687b      	ldr	r3, [r7, #4]
 8113c12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8113c16:	1a9b      	subs	r3, r3, r2
 8113c18:	b29a      	uxth	r2, r3
 8113c1a:	687b      	ldr	r3, [r7, #4]
 8113c1c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8113c20:	697b      	ldr	r3, [r7, #20]
 8113c22:	6858      	ldr	r0, [r3, #4]
 8113c24:	697b      	ldr	r3, [r7, #20]
 8113c26:	685b      	ldr	r3, [r3, #4]
 8113c28:	891a      	ldrh	r2, [r3, #8]
 8113c2a:	89bb      	ldrh	r3, [r7, #12]
 8113c2c:	1ad3      	subs	r3, r2, r3
 8113c2e:	b29b      	uxth	r3, r3
 8113c30:	4619      	mov	r1, r3
 8113c32:	f7fb fab5 	bl	810f1a0 <pbuf_realloc>
  useg->len -= remainder;
 8113c36:	697b      	ldr	r3, [r7, #20]
 8113c38:	891a      	ldrh	r2, [r3, #8]
 8113c3a:	89bb      	ldrh	r3, [r7, #12]
 8113c3c:	1ad3      	subs	r3, r2, r3
 8113c3e:	b29a      	uxth	r2, r3
 8113c40:	697b      	ldr	r3, [r7, #20]
 8113c42:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8113c44:	697b      	ldr	r3, [r7, #20]
 8113c46:	68db      	ldr	r3, [r3, #12]
 8113c48:	899b      	ldrh	r3, [r3, #12]
 8113c4a:	b29c      	uxth	r4, r3
 8113c4c:	7efb      	ldrb	r3, [r7, #27]
 8113c4e:	b29b      	uxth	r3, r3
 8113c50:	4618      	mov	r0, r3
 8113c52:	f7f7 fca3 	bl	810b59c <lwip_htons>
 8113c56:	4603      	mov	r3, r0
 8113c58:	461a      	mov	r2, r3
 8113c5a:	697b      	ldr	r3, [r7, #20]
 8113c5c:	68db      	ldr	r3, [r3, #12]
 8113c5e:	4322      	orrs	r2, r4
 8113c60:	b292      	uxth	r2, r2
 8113c62:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8113c64:	697b      	ldr	r3, [r7, #20]
 8113c66:	685b      	ldr	r3, [r3, #4]
 8113c68:	4618      	mov	r0, r3
 8113c6a:	f7fb fcab 	bl	810f5c4 <pbuf_clen>
 8113c6e:	4603      	mov	r3, r0
 8113c70:	461a      	mov	r2, r3
 8113c72:	687b      	ldr	r3, [r7, #4]
 8113c74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8113c78:	4413      	add	r3, r2
 8113c7a:	b29a      	uxth	r2, r3
 8113c7c:	687b      	ldr	r3, [r7, #4]
 8113c7e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8113c82:	69fb      	ldr	r3, [r7, #28]
 8113c84:	685b      	ldr	r3, [r3, #4]
 8113c86:	4618      	mov	r0, r3
 8113c88:	f7fb fc9c 	bl	810f5c4 <pbuf_clen>
 8113c8c:	4603      	mov	r3, r0
 8113c8e:	461a      	mov	r2, r3
 8113c90:	687b      	ldr	r3, [r7, #4]
 8113c92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8113c96:	4413      	add	r3, r2
 8113c98:	b29a      	uxth	r2, r3
 8113c9a:	687b      	ldr	r3, [r7, #4]
 8113c9c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8113ca0:	697b      	ldr	r3, [r7, #20]
 8113ca2:	681a      	ldr	r2, [r3, #0]
 8113ca4:	69fb      	ldr	r3, [r7, #28]
 8113ca6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8113ca8:	697b      	ldr	r3, [r7, #20]
 8113caa:	69fa      	ldr	r2, [r7, #28]
 8113cac:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8113cae:	69fb      	ldr	r3, [r7, #28]
 8113cb0:	681b      	ldr	r3, [r3, #0]
 8113cb2:	2b00      	cmp	r3, #0
 8113cb4:	d103      	bne.n	8113cbe <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8113cb6:	687b      	ldr	r3, [r7, #4]
 8113cb8:	2200      	movs	r2, #0
 8113cba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8113cbe:	2300      	movs	r3, #0
 8113cc0:	e016      	b.n	8113cf0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8113cc2:	bf00      	nop
 8113cc4:	e002      	b.n	8113ccc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8113cc6:	bf00      	nop
 8113cc8:	e000      	b.n	8113ccc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8113cca:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8113ccc:	69fb      	ldr	r3, [r7, #28]
 8113cce:	2b00      	cmp	r3, #0
 8113cd0:	d006      	beq.n	8113ce0 <tcp_split_unsent_seg+0x25c>
 8113cd2:	4b09      	ldr	r3, [pc, #36]	@ (8113cf8 <tcp_split_unsent_seg+0x274>)
 8113cd4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8113cd8:	490d      	ldr	r1, [pc, #52]	@ (8113d10 <tcp_split_unsent_seg+0x28c>)
 8113cda:	4809      	ldr	r0, [pc, #36]	@ (8113d00 <tcp_split_unsent_seg+0x27c>)
 8113cdc:	f002 f850 	bl	8115d80 <iprintf>
  if (p != NULL) {
 8113ce0:	693b      	ldr	r3, [r7, #16]
 8113ce2:	2b00      	cmp	r3, #0
 8113ce4:	d002      	beq.n	8113cec <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8113ce6:	6938      	ldr	r0, [r7, #16]
 8113ce8:	f7fb fbde 	bl	810f4a8 <pbuf_free>
  }

  return ERR_MEM;
 8113cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8113cf0:	4618      	mov	r0, r3
 8113cf2:	3724      	adds	r7, #36	@ 0x24
 8113cf4:	46bd      	mov	sp, r7
 8113cf6:	bd90      	pop	{r4, r7, pc}
 8113cf8:	08118c58 	.word	0x08118c58
 8113cfc:	0811902c 	.word	0x0811902c
 8113d00:	08118cec 	.word	0x08118cec
 8113d04:	08119050 	.word	0x08119050
 8113d08:	08119074 	.word	0x08119074
 8113d0c:	08119084 	.word	0x08119084
 8113d10:	08119094 	.word	0x08119094

08113d14 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8113d14:	b590      	push	{r4, r7, lr}
 8113d16:	b085      	sub	sp, #20
 8113d18:	af00      	add	r7, sp, #0
 8113d1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8113d1c:	687b      	ldr	r3, [r7, #4]
 8113d1e:	2b00      	cmp	r3, #0
 8113d20:	d106      	bne.n	8113d30 <tcp_send_fin+0x1c>
 8113d22:	4b21      	ldr	r3, [pc, #132]	@ (8113da8 <tcp_send_fin+0x94>)
 8113d24:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8113d28:	4920      	ldr	r1, [pc, #128]	@ (8113dac <tcp_send_fin+0x98>)
 8113d2a:	4821      	ldr	r0, [pc, #132]	@ (8113db0 <tcp_send_fin+0x9c>)
 8113d2c:	f002 f828 	bl	8115d80 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8113d30:	687b      	ldr	r3, [r7, #4]
 8113d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113d34:	2b00      	cmp	r3, #0
 8113d36:	d02e      	beq.n	8113d96 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8113d38:	687b      	ldr	r3, [r7, #4]
 8113d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113d3c:	60fb      	str	r3, [r7, #12]
 8113d3e:	e002      	b.n	8113d46 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8113d40:	68fb      	ldr	r3, [r7, #12]
 8113d42:	681b      	ldr	r3, [r3, #0]
 8113d44:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8113d46:	68fb      	ldr	r3, [r7, #12]
 8113d48:	681b      	ldr	r3, [r3, #0]
 8113d4a:	2b00      	cmp	r3, #0
 8113d4c:	d1f8      	bne.n	8113d40 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8113d4e:	68fb      	ldr	r3, [r7, #12]
 8113d50:	68db      	ldr	r3, [r3, #12]
 8113d52:	899b      	ldrh	r3, [r3, #12]
 8113d54:	b29b      	uxth	r3, r3
 8113d56:	4618      	mov	r0, r3
 8113d58:	f7f7 fc20 	bl	810b59c <lwip_htons>
 8113d5c:	4603      	mov	r3, r0
 8113d5e:	b2db      	uxtb	r3, r3
 8113d60:	f003 0307 	and.w	r3, r3, #7
 8113d64:	2b00      	cmp	r3, #0
 8113d66:	d116      	bne.n	8113d96 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8113d68:	68fb      	ldr	r3, [r7, #12]
 8113d6a:	68db      	ldr	r3, [r3, #12]
 8113d6c:	899b      	ldrh	r3, [r3, #12]
 8113d6e:	b29c      	uxth	r4, r3
 8113d70:	2001      	movs	r0, #1
 8113d72:	f7f7 fc13 	bl	810b59c <lwip_htons>
 8113d76:	4603      	mov	r3, r0
 8113d78:	461a      	mov	r2, r3
 8113d7a:	68fb      	ldr	r3, [r7, #12]
 8113d7c:	68db      	ldr	r3, [r3, #12]
 8113d7e:	4322      	orrs	r2, r4
 8113d80:	b292      	uxth	r2, r2
 8113d82:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8113d84:	687b      	ldr	r3, [r7, #4]
 8113d86:	8b5b      	ldrh	r3, [r3, #26]
 8113d88:	f043 0320 	orr.w	r3, r3, #32
 8113d8c:	b29a      	uxth	r2, r3
 8113d8e:	687b      	ldr	r3, [r7, #4]
 8113d90:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8113d92:	2300      	movs	r3, #0
 8113d94:	e004      	b.n	8113da0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8113d96:	2101      	movs	r1, #1
 8113d98:	6878      	ldr	r0, [r7, #4]
 8113d9a:	f000 f80b 	bl	8113db4 <tcp_enqueue_flags>
 8113d9e:	4603      	mov	r3, r0
}
 8113da0:	4618      	mov	r0, r3
 8113da2:	3714      	adds	r7, #20
 8113da4:	46bd      	mov	sp, r7
 8113da6:	bd90      	pop	{r4, r7, pc}
 8113da8:	08118c58 	.word	0x08118c58
 8113dac:	081190a0 	.word	0x081190a0
 8113db0:	08118cec 	.word	0x08118cec

08113db4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8113db4:	b580      	push	{r7, lr}
 8113db6:	b08a      	sub	sp, #40	@ 0x28
 8113db8:	af02      	add	r7, sp, #8
 8113dba:	6078      	str	r0, [r7, #4]
 8113dbc:	460b      	mov	r3, r1
 8113dbe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8113dc0:	2300      	movs	r3, #0
 8113dc2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8113dc4:	2300      	movs	r3, #0
 8113dc6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8113dc8:	78fb      	ldrb	r3, [r7, #3]
 8113dca:	f003 0303 	and.w	r3, r3, #3
 8113dce:	2b00      	cmp	r3, #0
 8113dd0:	d106      	bne.n	8113de0 <tcp_enqueue_flags+0x2c>
 8113dd2:	4b67      	ldr	r3, [pc, #412]	@ (8113f70 <tcp_enqueue_flags+0x1bc>)
 8113dd4:	f240 4211 	movw	r2, #1041	@ 0x411
 8113dd8:	4966      	ldr	r1, [pc, #408]	@ (8113f74 <tcp_enqueue_flags+0x1c0>)
 8113dda:	4867      	ldr	r0, [pc, #412]	@ (8113f78 <tcp_enqueue_flags+0x1c4>)
 8113ddc:	f001 ffd0 	bl	8115d80 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8113de0:	687b      	ldr	r3, [r7, #4]
 8113de2:	2b00      	cmp	r3, #0
 8113de4:	d106      	bne.n	8113df4 <tcp_enqueue_flags+0x40>
 8113de6:	4b62      	ldr	r3, [pc, #392]	@ (8113f70 <tcp_enqueue_flags+0x1bc>)
 8113de8:	f240 4213 	movw	r2, #1043	@ 0x413
 8113dec:	4963      	ldr	r1, [pc, #396]	@ (8113f7c <tcp_enqueue_flags+0x1c8>)
 8113dee:	4862      	ldr	r0, [pc, #392]	@ (8113f78 <tcp_enqueue_flags+0x1c4>)
 8113df0:	f001 ffc6 	bl	8115d80 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8113df4:	78fb      	ldrb	r3, [r7, #3]
 8113df6:	f003 0302 	and.w	r3, r3, #2
 8113dfa:	2b00      	cmp	r3, #0
 8113dfc:	d001      	beq.n	8113e02 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8113dfe:	2301      	movs	r3, #1
 8113e00:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8113e02:	7ffb      	ldrb	r3, [r7, #31]
 8113e04:	009b      	lsls	r3, r3, #2
 8113e06:	b2db      	uxtb	r3, r3
 8113e08:	f003 0304 	and.w	r3, r3, #4
 8113e0c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8113e0e:	7dfb      	ldrb	r3, [r7, #23]
 8113e10:	b29b      	uxth	r3, r3
 8113e12:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8113e16:	4619      	mov	r1, r3
 8113e18:	2036      	movs	r0, #54	@ 0x36
 8113e1a:	f7fb f861 	bl	810eee0 <pbuf_alloc>
 8113e1e:	6138      	str	r0, [r7, #16]
 8113e20:	693b      	ldr	r3, [r7, #16]
 8113e22:	2b00      	cmp	r3, #0
 8113e24:	d109      	bne.n	8113e3a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8113e26:	687b      	ldr	r3, [r7, #4]
 8113e28:	8b5b      	ldrh	r3, [r3, #26]
 8113e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8113e2e:	b29a      	uxth	r2, r3
 8113e30:	687b      	ldr	r3, [r7, #4]
 8113e32:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8113e34:	f04f 33ff 	mov.w	r3, #4294967295
 8113e38:	e095      	b.n	8113f66 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8113e3a:	693b      	ldr	r3, [r7, #16]
 8113e3c:	895a      	ldrh	r2, [r3, #10]
 8113e3e:	7dfb      	ldrb	r3, [r7, #23]
 8113e40:	b29b      	uxth	r3, r3
 8113e42:	429a      	cmp	r2, r3
 8113e44:	d206      	bcs.n	8113e54 <tcp_enqueue_flags+0xa0>
 8113e46:	4b4a      	ldr	r3, [pc, #296]	@ (8113f70 <tcp_enqueue_flags+0x1bc>)
 8113e48:	f240 4239 	movw	r2, #1081	@ 0x439
 8113e4c:	494c      	ldr	r1, [pc, #304]	@ (8113f80 <tcp_enqueue_flags+0x1cc>)
 8113e4e:	484a      	ldr	r0, [pc, #296]	@ (8113f78 <tcp_enqueue_flags+0x1c4>)
 8113e50:	f001 ff96 	bl	8115d80 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8113e54:	687b      	ldr	r3, [r7, #4]
 8113e56:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8113e58:	78fa      	ldrb	r2, [r7, #3]
 8113e5a:	7ffb      	ldrb	r3, [r7, #31]
 8113e5c:	9300      	str	r3, [sp, #0]
 8113e5e:	460b      	mov	r3, r1
 8113e60:	6939      	ldr	r1, [r7, #16]
 8113e62:	6878      	ldr	r0, [r7, #4]
 8113e64:	f7ff fd72 	bl	811394c <tcp_create_segment>
 8113e68:	60f8      	str	r0, [r7, #12]
 8113e6a:	68fb      	ldr	r3, [r7, #12]
 8113e6c:	2b00      	cmp	r3, #0
 8113e6e:	d109      	bne.n	8113e84 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8113e70:	687b      	ldr	r3, [r7, #4]
 8113e72:	8b5b      	ldrh	r3, [r3, #26]
 8113e74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8113e78:	b29a      	uxth	r2, r3
 8113e7a:	687b      	ldr	r3, [r7, #4]
 8113e7c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8113e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8113e82:	e070      	b.n	8113f66 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8113e84:	68fb      	ldr	r3, [r7, #12]
 8113e86:	68db      	ldr	r3, [r3, #12]
 8113e88:	f003 0303 	and.w	r3, r3, #3
 8113e8c:	2b00      	cmp	r3, #0
 8113e8e:	d006      	beq.n	8113e9e <tcp_enqueue_flags+0xea>
 8113e90:	4b37      	ldr	r3, [pc, #220]	@ (8113f70 <tcp_enqueue_flags+0x1bc>)
 8113e92:	f240 4242 	movw	r2, #1090	@ 0x442
 8113e96:	493b      	ldr	r1, [pc, #236]	@ (8113f84 <tcp_enqueue_flags+0x1d0>)
 8113e98:	4837      	ldr	r0, [pc, #220]	@ (8113f78 <tcp_enqueue_flags+0x1c4>)
 8113e9a:	f001 ff71 	bl	8115d80 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8113e9e:	68fb      	ldr	r3, [r7, #12]
 8113ea0:	891b      	ldrh	r3, [r3, #8]
 8113ea2:	2b00      	cmp	r3, #0
 8113ea4:	d006      	beq.n	8113eb4 <tcp_enqueue_flags+0x100>
 8113ea6:	4b32      	ldr	r3, [pc, #200]	@ (8113f70 <tcp_enqueue_flags+0x1bc>)
 8113ea8:	f240 4243 	movw	r2, #1091	@ 0x443
 8113eac:	4936      	ldr	r1, [pc, #216]	@ (8113f88 <tcp_enqueue_flags+0x1d4>)
 8113eae:	4832      	ldr	r0, [pc, #200]	@ (8113f78 <tcp_enqueue_flags+0x1c4>)
 8113eb0:	f001 ff66 	bl	8115d80 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8113eb4:	687b      	ldr	r3, [r7, #4]
 8113eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113eb8:	2b00      	cmp	r3, #0
 8113eba:	d103      	bne.n	8113ec4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8113ebc:	687b      	ldr	r3, [r7, #4]
 8113ebe:	68fa      	ldr	r2, [r7, #12]
 8113ec0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8113ec2:	e00d      	b.n	8113ee0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8113ec4:	687b      	ldr	r3, [r7, #4]
 8113ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113ec8:	61bb      	str	r3, [r7, #24]
 8113eca:	e002      	b.n	8113ed2 <tcp_enqueue_flags+0x11e>
 8113ecc:	69bb      	ldr	r3, [r7, #24]
 8113ece:	681b      	ldr	r3, [r3, #0]
 8113ed0:	61bb      	str	r3, [r7, #24]
 8113ed2:	69bb      	ldr	r3, [r7, #24]
 8113ed4:	681b      	ldr	r3, [r3, #0]
 8113ed6:	2b00      	cmp	r3, #0
 8113ed8:	d1f8      	bne.n	8113ecc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8113eda:	69bb      	ldr	r3, [r7, #24]
 8113edc:	68fa      	ldr	r2, [r7, #12]
 8113ede:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8113ee0:	687b      	ldr	r3, [r7, #4]
 8113ee2:	2200      	movs	r2, #0
 8113ee4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8113ee8:	78fb      	ldrb	r3, [r7, #3]
 8113eea:	f003 0302 	and.w	r3, r3, #2
 8113eee:	2b00      	cmp	r3, #0
 8113ef0:	d104      	bne.n	8113efc <tcp_enqueue_flags+0x148>
 8113ef2:	78fb      	ldrb	r3, [r7, #3]
 8113ef4:	f003 0301 	and.w	r3, r3, #1
 8113ef8:	2b00      	cmp	r3, #0
 8113efa:	d004      	beq.n	8113f06 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8113efc:	687b      	ldr	r3, [r7, #4]
 8113efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8113f00:	1c5a      	adds	r2, r3, #1
 8113f02:	687b      	ldr	r3, [r7, #4]
 8113f04:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8113f06:	78fb      	ldrb	r3, [r7, #3]
 8113f08:	f003 0301 	and.w	r3, r3, #1
 8113f0c:	2b00      	cmp	r3, #0
 8113f0e:	d006      	beq.n	8113f1e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8113f10:	687b      	ldr	r3, [r7, #4]
 8113f12:	8b5b      	ldrh	r3, [r3, #26]
 8113f14:	f043 0320 	orr.w	r3, r3, #32
 8113f18:	b29a      	uxth	r2, r3
 8113f1a:	687b      	ldr	r3, [r7, #4]
 8113f1c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8113f1e:	68fb      	ldr	r3, [r7, #12]
 8113f20:	685b      	ldr	r3, [r3, #4]
 8113f22:	4618      	mov	r0, r3
 8113f24:	f7fb fb4e 	bl	810f5c4 <pbuf_clen>
 8113f28:	4603      	mov	r3, r0
 8113f2a:	461a      	mov	r2, r3
 8113f2c:	687b      	ldr	r3, [r7, #4]
 8113f2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8113f32:	4413      	add	r3, r2
 8113f34:	b29a      	uxth	r2, r3
 8113f36:	687b      	ldr	r3, [r7, #4]
 8113f38:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8113f3c:	687b      	ldr	r3, [r7, #4]
 8113f3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8113f42:	2b00      	cmp	r3, #0
 8113f44:	d00e      	beq.n	8113f64 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8113f46:	687b      	ldr	r3, [r7, #4]
 8113f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8113f4a:	2b00      	cmp	r3, #0
 8113f4c:	d10a      	bne.n	8113f64 <tcp_enqueue_flags+0x1b0>
 8113f4e:	687b      	ldr	r3, [r7, #4]
 8113f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113f52:	2b00      	cmp	r3, #0
 8113f54:	d106      	bne.n	8113f64 <tcp_enqueue_flags+0x1b0>
 8113f56:	4b06      	ldr	r3, [pc, #24]	@ (8113f70 <tcp_enqueue_flags+0x1bc>)
 8113f58:	f240 4265 	movw	r2, #1125	@ 0x465
 8113f5c:	490b      	ldr	r1, [pc, #44]	@ (8113f8c <tcp_enqueue_flags+0x1d8>)
 8113f5e:	4806      	ldr	r0, [pc, #24]	@ (8113f78 <tcp_enqueue_flags+0x1c4>)
 8113f60:	f001 ff0e 	bl	8115d80 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8113f64:	2300      	movs	r3, #0
}
 8113f66:	4618      	mov	r0, r3
 8113f68:	3720      	adds	r7, #32
 8113f6a:	46bd      	mov	sp, r7
 8113f6c:	bd80      	pop	{r7, pc}
 8113f6e:	bf00      	nop
 8113f70:	08118c58 	.word	0x08118c58
 8113f74:	081190bc 	.word	0x081190bc
 8113f78:	08118cec 	.word	0x08118cec
 8113f7c:	08119114 	.word	0x08119114
 8113f80:	08119134 	.word	0x08119134
 8113f84:	08119170 	.word	0x08119170
 8113f88:	08119188 	.word	0x08119188
 8113f8c:	081191b4 	.word	0x081191b4

08113f90 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8113f90:	b5b0      	push	{r4, r5, r7, lr}
 8113f92:	b08a      	sub	sp, #40	@ 0x28
 8113f94:	af00      	add	r7, sp, #0
 8113f96:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8113f98:	687b      	ldr	r3, [r7, #4]
 8113f9a:	2b00      	cmp	r3, #0
 8113f9c:	d106      	bne.n	8113fac <tcp_output+0x1c>
 8113f9e:	4b8a      	ldr	r3, [pc, #552]	@ (81141c8 <tcp_output+0x238>)
 8113fa0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8113fa4:	4989      	ldr	r1, [pc, #548]	@ (81141cc <tcp_output+0x23c>)
 8113fa6:	488a      	ldr	r0, [pc, #552]	@ (81141d0 <tcp_output+0x240>)
 8113fa8:	f001 feea 	bl	8115d80 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8113fac:	687b      	ldr	r3, [r7, #4]
 8113fae:	7d1b      	ldrb	r3, [r3, #20]
 8113fb0:	2b01      	cmp	r3, #1
 8113fb2:	d106      	bne.n	8113fc2 <tcp_output+0x32>
 8113fb4:	4b84      	ldr	r3, [pc, #528]	@ (81141c8 <tcp_output+0x238>)
 8113fb6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8113fba:	4986      	ldr	r1, [pc, #536]	@ (81141d4 <tcp_output+0x244>)
 8113fbc:	4884      	ldr	r0, [pc, #528]	@ (81141d0 <tcp_output+0x240>)
 8113fbe:	f001 fedf 	bl	8115d80 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8113fc2:	4b85      	ldr	r3, [pc, #532]	@ (81141d8 <tcp_output+0x248>)
 8113fc4:	681b      	ldr	r3, [r3, #0]
 8113fc6:	687a      	ldr	r2, [r7, #4]
 8113fc8:	429a      	cmp	r2, r3
 8113fca:	d101      	bne.n	8113fd0 <tcp_output+0x40>
    return ERR_OK;
 8113fcc:	2300      	movs	r3, #0
 8113fce:	e1ce      	b.n	811436e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8113fd0:	687b      	ldr	r3, [r7, #4]
 8113fd2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8113fd6:	687b      	ldr	r3, [r7, #4]
 8113fd8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8113fdc:	4293      	cmp	r3, r2
 8113fde:	bf28      	it	cs
 8113fe0:	4613      	movcs	r3, r2
 8113fe2:	b29b      	uxth	r3, r3
 8113fe4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8113fe6:	687b      	ldr	r3, [r7, #4]
 8113fe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8113fea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8113fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113fee:	2b00      	cmp	r3, #0
 8113ff0:	d10b      	bne.n	811400a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8113ff2:	687b      	ldr	r3, [r7, #4]
 8113ff4:	8b5b      	ldrh	r3, [r3, #26]
 8113ff6:	f003 0302 	and.w	r3, r3, #2
 8113ffa:	2b00      	cmp	r3, #0
 8113ffc:	f000 81aa 	beq.w	8114354 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8114000:	6878      	ldr	r0, [r7, #4]
 8114002:	f000 fdcb 	bl	8114b9c <tcp_send_empty_ack>
 8114006:	4603      	mov	r3, r0
 8114008:	e1b1      	b.n	811436e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 811400a:	6879      	ldr	r1, [r7, #4]
 811400c:	687b      	ldr	r3, [r7, #4]
 811400e:	3304      	adds	r3, #4
 8114010:	461a      	mov	r2, r3
 8114012:	6878      	ldr	r0, [r7, #4]
 8114014:	f7ff fc7e 	bl	8113914 <tcp_route>
 8114018:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 811401a:	697b      	ldr	r3, [r7, #20]
 811401c:	2b00      	cmp	r3, #0
 811401e:	d102      	bne.n	8114026 <tcp_output+0x96>
    return ERR_RTE;
 8114020:	f06f 0303 	mvn.w	r3, #3
 8114024:	e1a3      	b.n	811436e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8114026:	687b      	ldr	r3, [r7, #4]
 8114028:	2b00      	cmp	r3, #0
 811402a:	d003      	beq.n	8114034 <tcp_output+0xa4>
 811402c:	687b      	ldr	r3, [r7, #4]
 811402e:	681b      	ldr	r3, [r3, #0]
 8114030:	2b00      	cmp	r3, #0
 8114032:	d111      	bne.n	8114058 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8114034:	697b      	ldr	r3, [r7, #20]
 8114036:	2b00      	cmp	r3, #0
 8114038:	d002      	beq.n	8114040 <tcp_output+0xb0>
 811403a:	697b      	ldr	r3, [r7, #20]
 811403c:	3304      	adds	r3, #4
 811403e:	e000      	b.n	8114042 <tcp_output+0xb2>
 8114040:	2300      	movs	r3, #0
 8114042:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8114044:	693b      	ldr	r3, [r7, #16]
 8114046:	2b00      	cmp	r3, #0
 8114048:	d102      	bne.n	8114050 <tcp_output+0xc0>
      return ERR_RTE;
 811404a:	f06f 0303 	mvn.w	r3, #3
 811404e:	e18e      	b.n	811436e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8114050:	693b      	ldr	r3, [r7, #16]
 8114052:	681a      	ldr	r2, [r3, #0]
 8114054:	687b      	ldr	r3, [r7, #4]
 8114056:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8114058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811405a:	68db      	ldr	r3, [r3, #12]
 811405c:	685b      	ldr	r3, [r3, #4]
 811405e:	4618      	mov	r0, r3
 8114060:	f7f7 fab1 	bl	810b5c6 <lwip_htonl>
 8114064:	4602      	mov	r2, r0
 8114066:	687b      	ldr	r3, [r7, #4]
 8114068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811406a:	1ad3      	subs	r3, r2, r3
 811406c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811406e:	8912      	ldrh	r2, [r2, #8]
 8114070:	4413      	add	r3, r2
 8114072:	69ba      	ldr	r2, [r7, #24]
 8114074:	429a      	cmp	r2, r3
 8114076:	d227      	bcs.n	81140c8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8114078:	687b      	ldr	r3, [r7, #4]
 811407a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811407e:	461a      	mov	r2, r3
 8114080:	69bb      	ldr	r3, [r7, #24]
 8114082:	4293      	cmp	r3, r2
 8114084:	d114      	bne.n	81140b0 <tcp_output+0x120>
 8114086:	687b      	ldr	r3, [r7, #4]
 8114088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811408a:	2b00      	cmp	r3, #0
 811408c:	d110      	bne.n	81140b0 <tcp_output+0x120>
 811408e:	687b      	ldr	r3, [r7, #4]
 8114090:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8114094:	2b00      	cmp	r3, #0
 8114096:	d10b      	bne.n	81140b0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8114098:	687b      	ldr	r3, [r7, #4]
 811409a:	2200      	movs	r2, #0
 811409c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 81140a0:	687b      	ldr	r3, [r7, #4]
 81140a2:	2201      	movs	r2, #1
 81140a4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 81140a8:	687b      	ldr	r3, [r7, #4]
 81140aa:	2200      	movs	r2, #0
 81140ac:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 81140b0:	687b      	ldr	r3, [r7, #4]
 81140b2:	8b5b      	ldrh	r3, [r3, #26]
 81140b4:	f003 0302 	and.w	r3, r3, #2
 81140b8:	2b00      	cmp	r3, #0
 81140ba:	f000 814d 	beq.w	8114358 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 81140be:	6878      	ldr	r0, [r7, #4]
 81140c0:	f000 fd6c 	bl	8114b9c <tcp_send_empty_ack>
 81140c4:	4603      	mov	r3, r0
 81140c6:	e152      	b.n	811436e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 81140c8:	687b      	ldr	r3, [r7, #4]
 81140ca:	2200      	movs	r2, #0
 81140cc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 81140d0:	687b      	ldr	r3, [r7, #4]
 81140d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81140d4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 81140d6:	6a3b      	ldr	r3, [r7, #32]
 81140d8:	2b00      	cmp	r3, #0
 81140da:	f000 811c 	beq.w	8114316 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 81140de:	e002      	b.n	81140e6 <tcp_output+0x156>
 81140e0:	6a3b      	ldr	r3, [r7, #32]
 81140e2:	681b      	ldr	r3, [r3, #0]
 81140e4:	623b      	str	r3, [r7, #32]
 81140e6:	6a3b      	ldr	r3, [r7, #32]
 81140e8:	681b      	ldr	r3, [r3, #0]
 81140ea:	2b00      	cmp	r3, #0
 81140ec:	d1f8      	bne.n	81140e0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 81140ee:	e112      	b.n	8114316 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 81140f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81140f2:	68db      	ldr	r3, [r3, #12]
 81140f4:	899b      	ldrh	r3, [r3, #12]
 81140f6:	b29b      	uxth	r3, r3
 81140f8:	4618      	mov	r0, r3
 81140fa:	f7f7 fa4f 	bl	810b59c <lwip_htons>
 81140fe:	4603      	mov	r3, r0
 8114100:	b2db      	uxtb	r3, r3
 8114102:	f003 0304 	and.w	r3, r3, #4
 8114106:	2b00      	cmp	r3, #0
 8114108:	d006      	beq.n	8114118 <tcp_output+0x188>
 811410a:	4b2f      	ldr	r3, [pc, #188]	@ (81141c8 <tcp_output+0x238>)
 811410c:	f240 5236 	movw	r2, #1334	@ 0x536
 8114110:	4932      	ldr	r1, [pc, #200]	@ (81141dc <tcp_output+0x24c>)
 8114112:	482f      	ldr	r0, [pc, #188]	@ (81141d0 <tcp_output+0x240>)
 8114114:	f001 fe34 	bl	8115d80 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8114118:	687b      	ldr	r3, [r7, #4]
 811411a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811411c:	2b00      	cmp	r3, #0
 811411e:	d01f      	beq.n	8114160 <tcp_output+0x1d0>
 8114120:	687b      	ldr	r3, [r7, #4]
 8114122:	8b5b      	ldrh	r3, [r3, #26]
 8114124:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8114128:	2b00      	cmp	r3, #0
 811412a:	d119      	bne.n	8114160 <tcp_output+0x1d0>
 811412c:	687b      	ldr	r3, [r7, #4]
 811412e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8114130:	2b00      	cmp	r3, #0
 8114132:	d00b      	beq.n	811414c <tcp_output+0x1bc>
 8114134:	687b      	ldr	r3, [r7, #4]
 8114136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8114138:	681b      	ldr	r3, [r3, #0]
 811413a:	2b00      	cmp	r3, #0
 811413c:	d110      	bne.n	8114160 <tcp_output+0x1d0>
 811413e:	687b      	ldr	r3, [r7, #4]
 8114140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8114142:	891a      	ldrh	r2, [r3, #8]
 8114144:	687b      	ldr	r3, [r7, #4]
 8114146:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8114148:	429a      	cmp	r2, r3
 811414a:	d209      	bcs.n	8114160 <tcp_output+0x1d0>
 811414c:	687b      	ldr	r3, [r7, #4]
 811414e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8114152:	2b00      	cmp	r3, #0
 8114154:	d004      	beq.n	8114160 <tcp_output+0x1d0>
 8114156:	687b      	ldr	r3, [r7, #4]
 8114158:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811415c:	2b0f      	cmp	r3, #15
 811415e:	d901      	bls.n	8114164 <tcp_output+0x1d4>
 8114160:	2301      	movs	r3, #1
 8114162:	e000      	b.n	8114166 <tcp_output+0x1d6>
 8114164:	2300      	movs	r3, #0
 8114166:	2b00      	cmp	r3, #0
 8114168:	d106      	bne.n	8114178 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 811416a:	687b      	ldr	r3, [r7, #4]
 811416c:	8b5b      	ldrh	r3, [r3, #26]
 811416e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8114172:	2b00      	cmp	r3, #0
 8114174:	f000 80e4 	beq.w	8114340 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8114178:	687b      	ldr	r3, [r7, #4]
 811417a:	7d1b      	ldrb	r3, [r3, #20]
 811417c:	2b02      	cmp	r3, #2
 811417e:	d00d      	beq.n	811419c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8114180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114182:	68db      	ldr	r3, [r3, #12]
 8114184:	899b      	ldrh	r3, [r3, #12]
 8114186:	b29c      	uxth	r4, r3
 8114188:	2010      	movs	r0, #16
 811418a:	f7f7 fa07 	bl	810b59c <lwip_htons>
 811418e:	4603      	mov	r3, r0
 8114190:	461a      	mov	r2, r3
 8114192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114194:	68db      	ldr	r3, [r3, #12]
 8114196:	4322      	orrs	r2, r4
 8114198:	b292      	uxth	r2, r2
 811419a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 811419c:	697a      	ldr	r2, [r7, #20]
 811419e:	6879      	ldr	r1, [r7, #4]
 81141a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81141a2:	f000 f909 	bl	81143b8 <tcp_output_segment>
 81141a6:	4603      	mov	r3, r0
 81141a8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 81141aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81141ae:	2b00      	cmp	r3, #0
 81141b0:	d016      	beq.n	81141e0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 81141b2:	687b      	ldr	r3, [r7, #4]
 81141b4:	8b5b      	ldrh	r3, [r3, #26]
 81141b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81141ba:	b29a      	uxth	r2, r3
 81141bc:	687b      	ldr	r3, [r7, #4]
 81141be:	835a      	strh	r2, [r3, #26]
      return err;
 81141c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81141c4:	e0d3      	b.n	811436e <tcp_output+0x3de>
 81141c6:	bf00      	nop
 81141c8:	08118c58 	.word	0x08118c58
 81141cc:	081191dc 	.word	0x081191dc
 81141d0:	08118cec 	.word	0x08118cec
 81141d4:	081191f4 	.word	0x081191f4
 81141d8:	10011c98 	.word	0x10011c98
 81141dc:	0811921c 	.word	0x0811921c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 81141e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81141e2:	681a      	ldr	r2, [r3, #0]
 81141e4:	687b      	ldr	r3, [r7, #4]
 81141e6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 81141e8:	687b      	ldr	r3, [r7, #4]
 81141ea:	7d1b      	ldrb	r3, [r3, #20]
 81141ec:	2b02      	cmp	r3, #2
 81141ee:	d006      	beq.n	81141fe <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 81141f0:	687b      	ldr	r3, [r7, #4]
 81141f2:	8b5b      	ldrh	r3, [r3, #26]
 81141f4:	f023 0303 	bic.w	r3, r3, #3
 81141f8:	b29a      	uxth	r2, r3
 81141fa:	687b      	ldr	r3, [r7, #4]
 81141fc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 81141fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114200:	68db      	ldr	r3, [r3, #12]
 8114202:	685b      	ldr	r3, [r3, #4]
 8114204:	4618      	mov	r0, r3
 8114206:	f7f7 f9de 	bl	810b5c6 <lwip_htonl>
 811420a:	4604      	mov	r4, r0
 811420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811420e:	891b      	ldrh	r3, [r3, #8]
 8114210:	461d      	mov	r5, r3
 8114212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114214:	68db      	ldr	r3, [r3, #12]
 8114216:	899b      	ldrh	r3, [r3, #12]
 8114218:	b29b      	uxth	r3, r3
 811421a:	4618      	mov	r0, r3
 811421c:	f7f7 f9be 	bl	810b59c <lwip_htons>
 8114220:	4603      	mov	r3, r0
 8114222:	b2db      	uxtb	r3, r3
 8114224:	f003 0303 	and.w	r3, r3, #3
 8114228:	2b00      	cmp	r3, #0
 811422a:	d001      	beq.n	8114230 <tcp_output+0x2a0>
 811422c:	2301      	movs	r3, #1
 811422e:	e000      	b.n	8114232 <tcp_output+0x2a2>
 8114230:	2300      	movs	r3, #0
 8114232:	442b      	add	r3, r5
 8114234:	4423      	add	r3, r4
 8114236:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8114238:	687b      	ldr	r3, [r7, #4]
 811423a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811423c:	68bb      	ldr	r3, [r7, #8]
 811423e:	1ad3      	subs	r3, r2, r3
 8114240:	2b00      	cmp	r3, #0
 8114242:	da02      	bge.n	811424a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8114244:	687b      	ldr	r3, [r7, #4]
 8114246:	68ba      	ldr	r2, [r7, #8]
 8114248:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 811424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811424c:	891b      	ldrh	r3, [r3, #8]
 811424e:	461c      	mov	r4, r3
 8114250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114252:	68db      	ldr	r3, [r3, #12]
 8114254:	899b      	ldrh	r3, [r3, #12]
 8114256:	b29b      	uxth	r3, r3
 8114258:	4618      	mov	r0, r3
 811425a:	f7f7 f99f 	bl	810b59c <lwip_htons>
 811425e:	4603      	mov	r3, r0
 8114260:	b2db      	uxtb	r3, r3
 8114262:	f003 0303 	and.w	r3, r3, #3
 8114266:	2b00      	cmp	r3, #0
 8114268:	d001      	beq.n	811426e <tcp_output+0x2de>
 811426a:	2301      	movs	r3, #1
 811426c:	e000      	b.n	8114270 <tcp_output+0x2e0>
 811426e:	2300      	movs	r3, #0
 8114270:	4423      	add	r3, r4
 8114272:	2b00      	cmp	r3, #0
 8114274:	d049      	beq.n	811430a <tcp_output+0x37a>
      seg->next = NULL;
 8114276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114278:	2200      	movs	r2, #0
 811427a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 811427c:	687b      	ldr	r3, [r7, #4]
 811427e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114280:	2b00      	cmp	r3, #0
 8114282:	d105      	bne.n	8114290 <tcp_output+0x300>
        pcb->unacked = seg;
 8114284:	687b      	ldr	r3, [r7, #4]
 8114286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8114288:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 811428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811428c:	623b      	str	r3, [r7, #32]
 811428e:	e03f      	b.n	8114310 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8114290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114292:	68db      	ldr	r3, [r3, #12]
 8114294:	685b      	ldr	r3, [r3, #4]
 8114296:	4618      	mov	r0, r3
 8114298:	f7f7 f995 	bl	810b5c6 <lwip_htonl>
 811429c:	4604      	mov	r4, r0
 811429e:	6a3b      	ldr	r3, [r7, #32]
 81142a0:	68db      	ldr	r3, [r3, #12]
 81142a2:	685b      	ldr	r3, [r3, #4]
 81142a4:	4618      	mov	r0, r3
 81142a6:	f7f7 f98e 	bl	810b5c6 <lwip_htonl>
 81142aa:	4603      	mov	r3, r0
 81142ac:	1ae3      	subs	r3, r4, r3
 81142ae:	2b00      	cmp	r3, #0
 81142b0:	da24      	bge.n	81142fc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 81142b2:	687b      	ldr	r3, [r7, #4]
 81142b4:	3370      	adds	r3, #112	@ 0x70
 81142b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 81142b8:	e002      	b.n	81142c0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 81142ba:	69fb      	ldr	r3, [r7, #28]
 81142bc:	681b      	ldr	r3, [r3, #0]
 81142be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 81142c0:	69fb      	ldr	r3, [r7, #28]
 81142c2:	681b      	ldr	r3, [r3, #0]
 81142c4:	2b00      	cmp	r3, #0
 81142c6:	d011      	beq.n	81142ec <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 81142c8:	69fb      	ldr	r3, [r7, #28]
 81142ca:	681b      	ldr	r3, [r3, #0]
 81142cc:	68db      	ldr	r3, [r3, #12]
 81142ce:	685b      	ldr	r3, [r3, #4]
 81142d0:	4618      	mov	r0, r3
 81142d2:	f7f7 f978 	bl	810b5c6 <lwip_htonl>
 81142d6:	4604      	mov	r4, r0
 81142d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81142da:	68db      	ldr	r3, [r3, #12]
 81142dc:	685b      	ldr	r3, [r3, #4]
 81142de:	4618      	mov	r0, r3
 81142e0:	f7f7 f971 	bl	810b5c6 <lwip_htonl>
 81142e4:	4603      	mov	r3, r0
 81142e6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 81142e8:	2b00      	cmp	r3, #0
 81142ea:	dbe6      	blt.n	81142ba <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 81142ec:	69fb      	ldr	r3, [r7, #28]
 81142ee:	681a      	ldr	r2, [r3, #0]
 81142f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81142f2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 81142f4:	69fb      	ldr	r3, [r7, #28]
 81142f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81142f8:	601a      	str	r2, [r3, #0]
 81142fa:	e009      	b.n	8114310 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 81142fc:	6a3b      	ldr	r3, [r7, #32]
 81142fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8114300:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8114302:	6a3b      	ldr	r3, [r7, #32]
 8114304:	681b      	ldr	r3, [r3, #0]
 8114306:	623b      	str	r3, [r7, #32]
 8114308:	e002      	b.n	8114310 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 811430a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811430c:	f7fc fc43 	bl	8110b96 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8114310:	687b      	ldr	r3, [r7, #4]
 8114312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8114314:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8114316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114318:	2b00      	cmp	r3, #0
 811431a:	d012      	beq.n	8114342 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 811431c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811431e:	68db      	ldr	r3, [r3, #12]
 8114320:	685b      	ldr	r3, [r3, #4]
 8114322:	4618      	mov	r0, r3
 8114324:	f7f7 f94f 	bl	810b5c6 <lwip_htonl>
 8114328:	4602      	mov	r2, r0
 811432a:	687b      	ldr	r3, [r7, #4]
 811432c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811432e:	1ad3      	subs	r3, r2, r3
 8114330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8114332:	8912      	ldrh	r2, [r2, #8]
 8114334:	4413      	add	r3, r2
  while (seg != NULL &&
 8114336:	69ba      	ldr	r2, [r7, #24]
 8114338:	429a      	cmp	r2, r3
 811433a:	f4bf aed9 	bcs.w	81140f0 <tcp_output+0x160>
 811433e:	e000      	b.n	8114342 <tcp_output+0x3b2>
      break;
 8114340:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8114342:	687b      	ldr	r3, [r7, #4]
 8114344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8114346:	2b00      	cmp	r3, #0
 8114348:	d108      	bne.n	811435c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 811434a:	687b      	ldr	r3, [r7, #4]
 811434c:	2200      	movs	r2, #0
 811434e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8114352:	e004      	b.n	811435e <tcp_output+0x3ce>
    goto output_done;
 8114354:	bf00      	nop
 8114356:	e002      	b.n	811435e <tcp_output+0x3ce>
    goto output_done;
 8114358:	bf00      	nop
 811435a:	e000      	b.n	811435e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 811435c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 811435e:	687b      	ldr	r3, [r7, #4]
 8114360:	8b5b      	ldrh	r3, [r3, #26]
 8114362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8114366:	b29a      	uxth	r2, r3
 8114368:	687b      	ldr	r3, [r7, #4]
 811436a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 811436c:	2300      	movs	r3, #0
}
 811436e:	4618      	mov	r0, r3
 8114370:	3728      	adds	r7, #40	@ 0x28
 8114372:	46bd      	mov	sp, r7
 8114374:	bdb0      	pop	{r4, r5, r7, pc}
 8114376:	bf00      	nop

08114378 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8114378:	b580      	push	{r7, lr}
 811437a:	b082      	sub	sp, #8
 811437c:	af00      	add	r7, sp, #0
 811437e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8114380:	687b      	ldr	r3, [r7, #4]
 8114382:	2b00      	cmp	r3, #0
 8114384:	d106      	bne.n	8114394 <tcp_output_segment_busy+0x1c>
 8114386:	4b09      	ldr	r3, [pc, #36]	@ (81143ac <tcp_output_segment_busy+0x34>)
 8114388:	f240 529a 	movw	r2, #1434	@ 0x59a
 811438c:	4908      	ldr	r1, [pc, #32]	@ (81143b0 <tcp_output_segment_busy+0x38>)
 811438e:	4809      	ldr	r0, [pc, #36]	@ (81143b4 <tcp_output_segment_busy+0x3c>)
 8114390:	f001 fcf6 	bl	8115d80 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8114394:	687b      	ldr	r3, [r7, #4]
 8114396:	685b      	ldr	r3, [r3, #4]
 8114398:	7b9b      	ldrb	r3, [r3, #14]
 811439a:	2b01      	cmp	r3, #1
 811439c:	d001      	beq.n	81143a2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 811439e:	2301      	movs	r3, #1
 81143a0:	e000      	b.n	81143a4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 81143a2:	2300      	movs	r3, #0
}
 81143a4:	4618      	mov	r0, r3
 81143a6:	3708      	adds	r7, #8
 81143a8:	46bd      	mov	sp, r7
 81143aa:	bd80      	pop	{r7, pc}
 81143ac:	08118c58 	.word	0x08118c58
 81143b0:	08119234 	.word	0x08119234
 81143b4:	08118cec 	.word	0x08118cec

081143b8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 81143b8:	b5b0      	push	{r4, r5, r7, lr}
 81143ba:	b08c      	sub	sp, #48	@ 0x30
 81143bc:	af04      	add	r7, sp, #16
 81143be:	60f8      	str	r0, [r7, #12]
 81143c0:	60b9      	str	r1, [r7, #8]
 81143c2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 81143c4:	68fb      	ldr	r3, [r7, #12]
 81143c6:	2b00      	cmp	r3, #0
 81143c8:	d106      	bne.n	81143d8 <tcp_output_segment+0x20>
 81143ca:	4b64      	ldr	r3, [pc, #400]	@ (811455c <tcp_output_segment+0x1a4>)
 81143cc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 81143d0:	4963      	ldr	r1, [pc, #396]	@ (8114560 <tcp_output_segment+0x1a8>)
 81143d2:	4864      	ldr	r0, [pc, #400]	@ (8114564 <tcp_output_segment+0x1ac>)
 81143d4:	f001 fcd4 	bl	8115d80 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 81143d8:	68bb      	ldr	r3, [r7, #8]
 81143da:	2b00      	cmp	r3, #0
 81143dc:	d106      	bne.n	81143ec <tcp_output_segment+0x34>
 81143de:	4b5f      	ldr	r3, [pc, #380]	@ (811455c <tcp_output_segment+0x1a4>)
 81143e0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 81143e4:	4960      	ldr	r1, [pc, #384]	@ (8114568 <tcp_output_segment+0x1b0>)
 81143e6:	485f      	ldr	r0, [pc, #380]	@ (8114564 <tcp_output_segment+0x1ac>)
 81143e8:	f001 fcca 	bl	8115d80 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 81143ec:	687b      	ldr	r3, [r7, #4]
 81143ee:	2b00      	cmp	r3, #0
 81143f0:	d106      	bne.n	8114400 <tcp_output_segment+0x48>
 81143f2:	4b5a      	ldr	r3, [pc, #360]	@ (811455c <tcp_output_segment+0x1a4>)
 81143f4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 81143f8:	495c      	ldr	r1, [pc, #368]	@ (811456c <tcp_output_segment+0x1b4>)
 81143fa:	485a      	ldr	r0, [pc, #360]	@ (8114564 <tcp_output_segment+0x1ac>)
 81143fc:	f001 fcc0 	bl	8115d80 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8114400:	68f8      	ldr	r0, [r7, #12]
 8114402:	f7ff ffb9 	bl	8114378 <tcp_output_segment_busy>
 8114406:	4603      	mov	r3, r0
 8114408:	2b00      	cmp	r3, #0
 811440a:	d001      	beq.n	8114410 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 811440c:	2300      	movs	r3, #0
 811440e:	e0a1      	b.n	8114554 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8114410:	68bb      	ldr	r3, [r7, #8]
 8114412:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8114414:	68fb      	ldr	r3, [r7, #12]
 8114416:	68dc      	ldr	r4, [r3, #12]
 8114418:	4610      	mov	r0, r2
 811441a:	f7f7 f8d4 	bl	810b5c6 <lwip_htonl>
 811441e:	4603      	mov	r3, r0
 8114420:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8114422:	68bb      	ldr	r3, [r7, #8]
 8114424:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8114426:	68fb      	ldr	r3, [r7, #12]
 8114428:	68dc      	ldr	r4, [r3, #12]
 811442a:	4610      	mov	r0, r2
 811442c:	f7f7 f8b6 	bl	810b59c <lwip_htons>
 8114430:	4603      	mov	r3, r0
 8114432:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8114434:	68bb      	ldr	r3, [r7, #8]
 8114436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8114438:	68ba      	ldr	r2, [r7, #8]
 811443a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 811443c:	441a      	add	r2, r3
 811443e:	68bb      	ldr	r3, [r7, #8]
 8114440:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8114442:	68fb      	ldr	r3, [r7, #12]
 8114444:	68db      	ldr	r3, [r3, #12]
 8114446:	3314      	adds	r3, #20
 8114448:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 811444a:	68fb      	ldr	r3, [r7, #12]
 811444c:	7a9b      	ldrb	r3, [r3, #10]
 811444e:	f003 0301 	and.w	r3, r3, #1
 8114452:	2b00      	cmp	r3, #0
 8114454:	d015      	beq.n	8114482 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8114456:	68bb      	ldr	r3, [r7, #8]
 8114458:	3304      	adds	r3, #4
 811445a:	461a      	mov	r2, r3
 811445c:	6879      	ldr	r1, [r7, #4]
 811445e:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8114462:	f7fc fe8f 	bl	8111184 <tcp_eff_send_mss_netif>
 8114466:	4603      	mov	r3, r0
 8114468:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 811446a:	8b7b      	ldrh	r3, [r7, #26]
 811446c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8114470:	4618      	mov	r0, r3
 8114472:	f7f7 f8a8 	bl	810b5c6 <lwip_htonl>
 8114476:	4602      	mov	r2, r0
 8114478:	69fb      	ldr	r3, [r7, #28]
 811447a:	601a      	str	r2, [r3, #0]
    opts += 1;
 811447c:	69fb      	ldr	r3, [r7, #28]
 811447e:	3304      	adds	r3, #4
 8114480:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8114482:	68bb      	ldr	r3, [r7, #8]
 8114484:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8114488:	2b00      	cmp	r3, #0
 811448a:	da02      	bge.n	8114492 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 811448c:	68bb      	ldr	r3, [r7, #8]
 811448e:	2200      	movs	r2, #0
 8114490:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8114492:	68bb      	ldr	r3, [r7, #8]
 8114494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8114496:	2b00      	cmp	r3, #0
 8114498:	d10c      	bne.n	81144b4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 811449a:	4b35      	ldr	r3, [pc, #212]	@ (8114570 <tcp_output_segment+0x1b8>)
 811449c:	681a      	ldr	r2, [r3, #0]
 811449e:	68bb      	ldr	r3, [r7, #8]
 81144a0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 81144a2:	68fb      	ldr	r3, [r7, #12]
 81144a4:	68db      	ldr	r3, [r3, #12]
 81144a6:	685b      	ldr	r3, [r3, #4]
 81144a8:	4618      	mov	r0, r3
 81144aa:	f7f7 f88c 	bl	810b5c6 <lwip_htonl>
 81144ae:	4602      	mov	r2, r0
 81144b0:	68bb      	ldr	r3, [r7, #8]
 81144b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 81144b4:	68fb      	ldr	r3, [r7, #12]
 81144b6:	68da      	ldr	r2, [r3, #12]
 81144b8:	68fb      	ldr	r3, [r7, #12]
 81144ba:	685b      	ldr	r3, [r3, #4]
 81144bc:	685b      	ldr	r3, [r3, #4]
 81144be:	1ad3      	subs	r3, r2, r3
 81144c0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 81144c2:	68fb      	ldr	r3, [r7, #12]
 81144c4:	685b      	ldr	r3, [r3, #4]
 81144c6:	8959      	ldrh	r1, [r3, #10]
 81144c8:	68fb      	ldr	r3, [r7, #12]
 81144ca:	685b      	ldr	r3, [r3, #4]
 81144cc:	8b3a      	ldrh	r2, [r7, #24]
 81144ce:	1a8a      	subs	r2, r1, r2
 81144d0:	b292      	uxth	r2, r2
 81144d2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 81144d4:	68fb      	ldr	r3, [r7, #12]
 81144d6:	685b      	ldr	r3, [r3, #4]
 81144d8:	8919      	ldrh	r1, [r3, #8]
 81144da:	68fb      	ldr	r3, [r7, #12]
 81144dc:	685b      	ldr	r3, [r3, #4]
 81144de:	8b3a      	ldrh	r2, [r7, #24]
 81144e0:	1a8a      	subs	r2, r1, r2
 81144e2:	b292      	uxth	r2, r2
 81144e4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 81144e6:	68fb      	ldr	r3, [r7, #12]
 81144e8:	685b      	ldr	r3, [r3, #4]
 81144ea:	68fa      	ldr	r2, [r7, #12]
 81144ec:	68d2      	ldr	r2, [r2, #12]
 81144ee:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 81144f0:	68fb      	ldr	r3, [r7, #12]
 81144f2:	68db      	ldr	r3, [r3, #12]
 81144f4:	2200      	movs	r2, #0
 81144f6:	741a      	strb	r2, [r3, #16]
 81144f8:	2200      	movs	r2, #0
 81144fa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 81144fc:	68fb      	ldr	r3, [r7, #12]
 81144fe:	68da      	ldr	r2, [r3, #12]
 8114500:	68fb      	ldr	r3, [r7, #12]
 8114502:	7a9b      	ldrb	r3, [r3, #10]
 8114504:	f003 0301 	and.w	r3, r3, #1
 8114508:	2b00      	cmp	r3, #0
 811450a:	d001      	beq.n	8114510 <tcp_output_segment+0x158>
 811450c:	2318      	movs	r3, #24
 811450e:	e000      	b.n	8114512 <tcp_output_segment+0x15a>
 8114510:	2314      	movs	r3, #20
 8114512:	4413      	add	r3, r2
 8114514:	69fa      	ldr	r2, [r7, #28]
 8114516:	429a      	cmp	r2, r3
 8114518:	d006      	beq.n	8114528 <tcp_output_segment+0x170>
 811451a:	4b10      	ldr	r3, [pc, #64]	@ (811455c <tcp_output_segment+0x1a4>)
 811451c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8114520:	4914      	ldr	r1, [pc, #80]	@ (8114574 <tcp_output_segment+0x1bc>)
 8114522:	4810      	ldr	r0, [pc, #64]	@ (8114564 <tcp_output_segment+0x1ac>)
 8114524:	f001 fc2c 	bl	8115d80 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8114528:	68fb      	ldr	r3, [r7, #12]
 811452a:	6858      	ldr	r0, [r3, #4]
 811452c:	68b9      	ldr	r1, [r7, #8]
 811452e:	68bb      	ldr	r3, [r7, #8]
 8114530:	1d1c      	adds	r4, r3, #4
 8114532:	68bb      	ldr	r3, [r7, #8]
 8114534:	7add      	ldrb	r5, [r3, #11]
 8114536:	68bb      	ldr	r3, [r7, #8]
 8114538:	7a9b      	ldrb	r3, [r3, #10]
 811453a:	687a      	ldr	r2, [r7, #4]
 811453c:	9202      	str	r2, [sp, #8]
 811453e:	2206      	movs	r2, #6
 8114540:	9201      	str	r2, [sp, #4]
 8114542:	9300      	str	r3, [sp, #0]
 8114544:	462b      	mov	r3, r5
 8114546:	4622      	mov	r2, r4
 8114548:	f7f8 fcbe 	bl	810cec8 <ip4_output_if>
 811454c:	4603      	mov	r3, r0
 811454e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8114550:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8114554:	4618      	mov	r0, r3
 8114556:	3720      	adds	r7, #32
 8114558:	46bd      	mov	sp, r7
 811455a:	bdb0      	pop	{r4, r5, r7, pc}
 811455c:	08118c58 	.word	0x08118c58
 8114560:	0811925c 	.word	0x0811925c
 8114564:	08118cec 	.word	0x08118cec
 8114568:	0811927c 	.word	0x0811927c
 811456c:	0811929c 	.word	0x0811929c
 8114570:	10011c4c 	.word	0x10011c4c
 8114574:	081192c0 	.word	0x081192c0

08114578 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8114578:	b5b0      	push	{r4, r5, r7, lr}
 811457a:	b084      	sub	sp, #16
 811457c:	af00      	add	r7, sp, #0
 811457e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8114580:	687b      	ldr	r3, [r7, #4]
 8114582:	2b00      	cmp	r3, #0
 8114584:	d106      	bne.n	8114594 <tcp_rexmit_rto_prepare+0x1c>
 8114586:	4b31      	ldr	r3, [pc, #196]	@ (811464c <tcp_rexmit_rto_prepare+0xd4>)
 8114588:	f240 6263 	movw	r2, #1635	@ 0x663
 811458c:	4930      	ldr	r1, [pc, #192]	@ (8114650 <tcp_rexmit_rto_prepare+0xd8>)
 811458e:	4831      	ldr	r0, [pc, #196]	@ (8114654 <tcp_rexmit_rto_prepare+0xdc>)
 8114590:	f001 fbf6 	bl	8115d80 <iprintf>

  if (pcb->unacked == NULL) {
 8114594:	687b      	ldr	r3, [r7, #4]
 8114596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8114598:	2b00      	cmp	r3, #0
 811459a:	d102      	bne.n	81145a2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 811459c:	f06f 0305 	mvn.w	r3, #5
 81145a0:	e050      	b.n	8114644 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 81145a2:	687b      	ldr	r3, [r7, #4]
 81145a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81145a6:	60fb      	str	r3, [r7, #12]
 81145a8:	e00b      	b.n	81145c2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 81145aa:	68f8      	ldr	r0, [r7, #12]
 81145ac:	f7ff fee4 	bl	8114378 <tcp_output_segment_busy>
 81145b0:	4603      	mov	r3, r0
 81145b2:	2b00      	cmp	r3, #0
 81145b4:	d002      	beq.n	81145bc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 81145b6:	f06f 0305 	mvn.w	r3, #5
 81145ba:	e043      	b.n	8114644 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 81145bc:	68fb      	ldr	r3, [r7, #12]
 81145be:	681b      	ldr	r3, [r3, #0]
 81145c0:	60fb      	str	r3, [r7, #12]
 81145c2:	68fb      	ldr	r3, [r7, #12]
 81145c4:	681b      	ldr	r3, [r3, #0]
 81145c6:	2b00      	cmp	r3, #0
 81145c8:	d1ef      	bne.n	81145aa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 81145ca:	68f8      	ldr	r0, [r7, #12]
 81145cc:	f7ff fed4 	bl	8114378 <tcp_output_segment_busy>
 81145d0:	4603      	mov	r3, r0
 81145d2:	2b00      	cmp	r3, #0
 81145d4:	d002      	beq.n	81145dc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 81145d6:	f06f 0305 	mvn.w	r3, #5
 81145da:	e033      	b.n	8114644 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 81145dc:	687b      	ldr	r3, [r7, #4]
 81145de:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81145e0:	68fb      	ldr	r3, [r7, #12]
 81145e2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 81145e4:	687b      	ldr	r3, [r7, #4]
 81145e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81145e8:	687b      	ldr	r3, [r7, #4]
 81145ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 81145ec:	687b      	ldr	r3, [r7, #4]
 81145ee:	2200      	movs	r2, #0
 81145f0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 81145f2:	687b      	ldr	r3, [r7, #4]
 81145f4:	8b5b      	ldrh	r3, [r3, #26]
 81145f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 81145fa:	b29a      	uxth	r2, r3
 81145fc:	687b      	ldr	r3, [r7, #4]
 81145fe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8114600:	68fb      	ldr	r3, [r7, #12]
 8114602:	68db      	ldr	r3, [r3, #12]
 8114604:	685b      	ldr	r3, [r3, #4]
 8114606:	4618      	mov	r0, r3
 8114608:	f7f6 ffdd 	bl	810b5c6 <lwip_htonl>
 811460c:	4604      	mov	r4, r0
 811460e:	68fb      	ldr	r3, [r7, #12]
 8114610:	891b      	ldrh	r3, [r3, #8]
 8114612:	461d      	mov	r5, r3
 8114614:	68fb      	ldr	r3, [r7, #12]
 8114616:	68db      	ldr	r3, [r3, #12]
 8114618:	899b      	ldrh	r3, [r3, #12]
 811461a:	b29b      	uxth	r3, r3
 811461c:	4618      	mov	r0, r3
 811461e:	f7f6 ffbd 	bl	810b59c <lwip_htons>
 8114622:	4603      	mov	r3, r0
 8114624:	b2db      	uxtb	r3, r3
 8114626:	f003 0303 	and.w	r3, r3, #3
 811462a:	2b00      	cmp	r3, #0
 811462c:	d001      	beq.n	8114632 <tcp_rexmit_rto_prepare+0xba>
 811462e:	2301      	movs	r3, #1
 8114630:	e000      	b.n	8114634 <tcp_rexmit_rto_prepare+0xbc>
 8114632:	2300      	movs	r3, #0
 8114634:	442b      	add	r3, r5
 8114636:	18e2      	adds	r2, r4, r3
 8114638:	687b      	ldr	r3, [r7, #4]
 811463a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 811463c:	687b      	ldr	r3, [r7, #4]
 811463e:	2200      	movs	r2, #0
 8114640:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8114642:	2300      	movs	r3, #0
}
 8114644:	4618      	mov	r0, r3
 8114646:	3710      	adds	r7, #16
 8114648:	46bd      	mov	sp, r7
 811464a:	bdb0      	pop	{r4, r5, r7, pc}
 811464c:	08118c58 	.word	0x08118c58
 8114650:	081192d4 	.word	0x081192d4
 8114654:	08118cec 	.word	0x08118cec

08114658 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8114658:	b580      	push	{r7, lr}
 811465a:	b082      	sub	sp, #8
 811465c:	af00      	add	r7, sp, #0
 811465e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8114660:	687b      	ldr	r3, [r7, #4]
 8114662:	2b00      	cmp	r3, #0
 8114664:	d106      	bne.n	8114674 <tcp_rexmit_rto_commit+0x1c>
 8114666:	4b0d      	ldr	r3, [pc, #52]	@ (811469c <tcp_rexmit_rto_commit+0x44>)
 8114668:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 811466c:	490c      	ldr	r1, [pc, #48]	@ (81146a0 <tcp_rexmit_rto_commit+0x48>)
 811466e:	480d      	ldr	r0, [pc, #52]	@ (81146a4 <tcp_rexmit_rto_commit+0x4c>)
 8114670:	f001 fb86 	bl	8115d80 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8114674:	687b      	ldr	r3, [r7, #4]
 8114676:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811467a:	2bff      	cmp	r3, #255	@ 0xff
 811467c:	d007      	beq.n	811468e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 811467e:	687b      	ldr	r3, [r7, #4]
 8114680:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8114684:	3301      	adds	r3, #1
 8114686:	b2da      	uxtb	r2, r3
 8114688:	687b      	ldr	r3, [r7, #4]
 811468a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 811468e:	6878      	ldr	r0, [r7, #4]
 8114690:	f7ff fc7e 	bl	8113f90 <tcp_output>
}
 8114694:	bf00      	nop
 8114696:	3708      	adds	r7, #8
 8114698:	46bd      	mov	sp, r7
 811469a:	bd80      	pop	{r7, pc}
 811469c:	08118c58 	.word	0x08118c58
 81146a0:	081192f8 	.word	0x081192f8
 81146a4:	08118cec 	.word	0x08118cec

081146a8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 81146a8:	b580      	push	{r7, lr}
 81146aa:	b082      	sub	sp, #8
 81146ac:	af00      	add	r7, sp, #0
 81146ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 81146b0:	687b      	ldr	r3, [r7, #4]
 81146b2:	2b00      	cmp	r3, #0
 81146b4:	d106      	bne.n	81146c4 <tcp_rexmit_rto+0x1c>
 81146b6:	4b0a      	ldr	r3, [pc, #40]	@ (81146e0 <tcp_rexmit_rto+0x38>)
 81146b8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 81146bc:	4909      	ldr	r1, [pc, #36]	@ (81146e4 <tcp_rexmit_rto+0x3c>)
 81146be:	480a      	ldr	r0, [pc, #40]	@ (81146e8 <tcp_rexmit_rto+0x40>)
 81146c0:	f001 fb5e 	bl	8115d80 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 81146c4:	6878      	ldr	r0, [r7, #4]
 81146c6:	f7ff ff57 	bl	8114578 <tcp_rexmit_rto_prepare>
 81146ca:	4603      	mov	r3, r0
 81146cc:	2b00      	cmp	r3, #0
 81146ce:	d102      	bne.n	81146d6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 81146d0:	6878      	ldr	r0, [r7, #4]
 81146d2:	f7ff ffc1 	bl	8114658 <tcp_rexmit_rto_commit>
  }
}
 81146d6:	bf00      	nop
 81146d8:	3708      	adds	r7, #8
 81146da:	46bd      	mov	sp, r7
 81146dc:	bd80      	pop	{r7, pc}
 81146de:	bf00      	nop
 81146e0:	08118c58 	.word	0x08118c58
 81146e4:	0811931c 	.word	0x0811931c
 81146e8:	08118cec 	.word	0x08118cec

081146ec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 81146ec:	b590      	push	{r4, r7, lr}
 81146ee:	b085      	sub	sp, #20
 81146f0:	af00      	add	r7, sp, #0
 81146f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 81146f4:	687b      	ldr	r3, [r7, #4]
 81146f6:	2b00      	cmp	r3, #0
 81146f8:	d106      	bne.n	8114708 <tcp_rexmit+0x1c>
 81146fa:	4b2f      	ldr	r3, [pc, #188]	@ (81147b8 <tcp_rexmit+0xcc>)
 81146fc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8114700:	492e      	ldr	r1, [pc, #184]	@ (81147bc <tcp_rexmit+0xd0>)
 8114702:	482f      	ldr	r0, [pc, #188]	@ (81147c0 <tcp_rexmit+0xd4>)
 8114704:	f001 fb3c 	bl	8115d80 <iprintf>

  if (pcb->unacked == NULL) {
 8114708:	687b      	ldr	r3, [r7, #4]
 811470a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811470c:	2b00      	cmp	r3, #0
 811470e:	d102      	bne.n	8114716 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8114710:	f06f 0305 	mvn.w	r3, #5
 8114714:	e04c      	b.n	81147b0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8114716:	687b      	ldr	r3, [r7, #4]
 8114718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811471a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 811471c:	68b8      	ldr	r0, [r7, #8]
 811471e:	f7ff fe2b 	bl	8114378 <tcp_output_segment_busy>
 8114722:	4603      	mov	r3, r0
 8114724:	2b00      	cmp	r3, #0
 8114726:	d002      	beq.n	811472e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8114728:	f06f 0305 	mvn.w	r3, #5
 811472c:	e040      	b.n	81147b0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 811472e:	68bb      	ldr	r3, [r7, #8]
 8114730:	681a      	ldr	r2, [r3, #0]
 8114732:	687b      	ldr	r3, [r7, #4]
 8114734:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8114736:	687b      	ldr	r3, [r7, #4]
 8114738:	336c      	adds	r3, #108	@ 0x6c
 811473a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 811473c:	e002      	b.n	8114744 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 811473e:	68fb      	ldr	r3, [r7, #12]
 8114740:	681b      	ldr	r3, [r3, #0]
 8114742:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8114744:	68fb      	ldr	r3, [r7, #12]
 8114746:	681b      	ldr	r3, [r3, #0]
 8114748:	2b00      	cmp	r3, #0
 811474a:	d011      	beq.n	8114770 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 811474c:	68fb      	ldr	r3, [r7, #12]
 811474e:	681b      	ldr	r3, [r3, #0]
 8114750:	68db      	ldr	r3, [r3, #12]
 8114752:	685b      	ldr	r3, [r3, #4]
 8114754:	4618      	mov	r0, r3
 8114756:	f7f6 ff36 	bl	810b5c6 <lwip_htonl>
 811475a:	4604      	mov	r4, r0
 811475c:	68bb      	ldr	r3, [r7, #8]
 811475e:	68db      	ldr	r3, [r3, #12]
 8114760:	685b      	ldr	r3, [r3, #4]
 8114762:	4618      	mov	r0, r3
 8114764:	f7f6 ff2f 	bl	810b5c6 <lwip_htonl>
 8114768:	4603      	mov	r3, r0
 811476a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 811476c:	2b00      	cmp	r3, #0
 811476e:	dbe6      	blt.n	811473e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8114770:	68fb      	ldr	r3, [r7, #12]
 8114772:	681a      	ldr	r2, [r3, #0]
 8114774:	68bb      	ldr	r3, [r7, #8]
 8114776:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8114778:	68fb      	ldr	r3, [r7, #12]
 811477a:	68ba      	ldr	r2, [r7, #8]
 811477c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 811477e:	68bb      	ldr	r3, [r7, #8]
 8114780:	681b      	ldr	r3, [r3, #0]
 8114782:	2b00      	cmp	r3, #0
 8114784:	d103      	bne.n	811478e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8114786:	687b      	ldr	r3, [r7, #4]
 8114788:	2200      	movs	r2, #0
 811478a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 811478e:	687b      	ldr	r3, [r7, #4]
 8114790:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8114794:	2bff      	cmp	r3, #255	@ 0xff
 8114796:	d007      	beq.n	81147a8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8114798:	687b      	ldr	r3, [r7, #4]
 811479a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811479e:	3301      	adds	r3, #1
 81147a0:	b2da      	uxtb	r2, r3
 81147a2:	687b      	ldr	r3, [r7, #4]
 81147a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 81147a8:	687b      	ldr	r3, [r7, #4]
 81147aa:	2200      	movs	r2, #0
 81147ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 81147ae:	2300      	movs	r3, #0
}
 81147b0:	4618      	mov	r0, r3
 81147b2:	3714      	adds	r7, #20
 81147b4:	46bd      	mov	sp, r7
 81147b6:	bd90      	pop	{r4, r7, pc}
 81147b8:	08118c58 	.word	0x08118c58
 81147bc:	08119338 	.word	0x08119338
 81147c0:	08118cec 	.word	0x08118cec

081147c4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 81147c4:	b580      	push	{r7, lr}
 81147c6:	b082      	sub	sp, #8
 81147c8:	af00      	add	r7, sp, #0
 81147ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 81147cc:	687b      	ldr	r3, [r7, #4]
 81147ce:	2b00      	cmp	r3, #0
 81147d0:	d106      	bne.n	81147e0 <tcp_rexmit_fast+0x1c>
 81147d2:	4b2a      	ldr	r3, [pc, #168]	@ (811487c <tcp_rexmit_fast+0xb8>)
 81147d4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 81147d8:	4929      	ldr	r1, [pc, #164]	@ (8114880 <tcp_rexmit_fast+0xbc>)
 81147da:	482a      	ldr	r0, [pc, #168]	@ (8114884 <tcp_rexmit_fast+0xc0>)
 81147dc:	f001 fad0 	bl	8115d80 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 81147e0:	687b      	ldr	r3, [r7, #4]
 81147e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81147e4:	2b00      	cmp	r3, #0
 81147e6:	d044      	beq.n	8114872 <tcp_rexmit_fast+0xae>
 81147e8:	687b      	ldr	r3, [r7, #4]
 81147ea:	8b5b      	ldrh	r3, [r3, #26]
 81147ec:	f003 0304 	and.w	r3, r3, #4
 81147f0:	2b00      	cmp	r3, #0
 81147f2:	d13e      	bne.n	8114872 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 81147f4:	6878      	ldr	r0, [r7, #4]
 81147f6:	f7ff ff79 	bl	81146ec <tcp_rexmit>
 81147fa:	4603      	mov	r3, r0
 81147fc:	2b00      	cmp	r3, #0
 81147fe:	d138      	bne.n	8114872 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8114800:	687b      	ldr	r3, [r7, #4]
 8114802:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8114806:	687b      	ldr	r3, [r7, #4]
 8114808:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811480c:	4293      	cmp	r3, r2
 811480e:	bf28      	it	cs
 8114810:	4613      	movcs	r3, r2
 8114812:	b29b      	uxth	r3, r3
 8114814:	0fda      	lsrs	r2, r3, #31
 8114816:	4413      	add	r3, r2
 8114818:	105b      	asrs	r3, r3, #1
 811481a:	b29a      	uxth	r2, r3
 811481c:	687b      	ldr	r3, [r7, #4]
 811481e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8114822:	687b      	ldr	r3, [r7, #4]
 8114824:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8114828:	461a      	mov	r2, r3
 811482a:	687b      	ldr	r3, [r7, #4]
 811482c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811482e:	005b      	lsls	r3, r3, #1
 8114830:	429a      	cmp	r2, r3
 8114832:	d206      	bcs.n	8114842 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8114834:	687b      	ldr	r3, [r7, #4]
 8114836:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8114838:	005b      	lsls	r3, r3, #1
 811483a:	b29a      	uxth	r2, r3
 811483c:	687b      	ldr	r3, [r7, #4]
 811483e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8114842:	687b      	ldr	r3, [r7, #4]
 8114844:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8114848:	687b      	ldr	r3, [r7, #4]
 811484a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811484c:	4619      	mov	r1, r3
 811484e:	0049      	lsls	r1, r1, #1
 8114850:	440b      	add	r3, r1
 8114852:	b29b      	uxth	r3, r3
 8114854:	4413      	add	r3, r2
 8114856:	b29a      	uxth	r2, r3
 8114858:	687b      	ldr	r3, [r7, #4]
 811485a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 811485e:	687b      	ldr	r3, [r7, #4]
 8114860:	8b5b      	ldrh	r3, [r3, #26]
 8114862:	f043 0304 	orr.w	r3, r3, #4
 8114866:	b29a      	uxth	r2, r3
 8114868:	687b      	ldr	r3, [r7, #4]
 811486a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 811486c:	687b      	ldr	r3, [r7, #4]
 811486e:	2200      	movs	r2, #0
 8114870:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8114872:	bf00      	nop
 8114874:	3708      	adds	r7, #8
 8114876:	46bd      	mov	sp, r7
 8114878:	bd80      	pop	{r7, pc}
 811487a:	bf00      	nop
 811487c:	08118c58 	.word	0x08118c58
 8114880:	08119350 	.word	0x08119350
 8114884:	08118cec 	.word	0x08118cec

08114888 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8114888:	b580      	push	{r7, lr}
 811488a:	b086      	sub	sp, #24
 811488c:	af00      	add	r7, sp, #0
 811488e:	60f8      	str	r0, [r7, #12]
 8114890:	607b      	str	r3, [r7, #4]
 8114892:	460b      	mov	r3, r1
 8114894:	817b      	strh	r3, [r7, #10]
 8114896:	4613      	mov	r3, r2
 8114898:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 811489a:	897a      	ldrh	r2, [r7, #10]
 811489c:	893b      	ldrh	r3, [r7, #8]
 811489e:	4413      	add	r3, r2
 81148a0:	b29b      	uxth	r3, r3
 81148a2:	3314      	adds	r3, #20
 81148a4:	b29b      	uxth	r3, r3
 81148a6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 81148aa:	4619      	mov	r1, r3
 81148ac:	2022      	movs	r0, #34	@ 0x22
 81148ae:	f7fa fb17 	bl	810eee0 <pbuf_alloc>
 81148b2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 81148b4:	697b      	ldr	r3, [r7, #20]
 81148b6:	2b00      	cmp	r3, #0
 81148b8:	d04d      	beq.n	8114956 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 81148ba:	897b      	ldrh	r3, [r7, #10]
 81148bc:	3313      	adds	r3, #19
 81148be:	697a      	ldr	r2, [r7, #20]
 81148c0:	8952      	ldrh	r2, [r2, #10]
 81148c2:	4293      	cmp	r3, r2
 81148c4:	db06      	blt.n	81148d4 <tcp_output_alloc_header_common+0x4c>
 81148c6:	4b26      	ldr	r3, [pc, #152]	@ (8114960 <tcp_output_alloc_header_common+0xd8>)
 81148c8:	f240 7223 	movw	r2, #1827	@ 0x723
 81148cc:	4925      	ldr	r1, [pc, #148]	@ (8114964 <tcp_output_alloc_header_common+0xdc>)
 81148ce:	4826      	ldr	r0, [pc, #152]	@ (8114968 <tcp_output_alloc_header_common+0xe0>)
 81148d0:	f001 fa56 	bl	8115d80 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 81148d4:	697b      	ldr	r3, [r7, #20]
 81148d6:	685b      	ldr	r3, [r3, #4]
 81148d8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 81148da:	8c3b      	ldrh	r3, [r7, #32]
 81148dc:	4618      	mov	r0, r3
 81148de:	f7f6 fe5d 	bl	810b59c <lwip_htons>
 81148e2:	4603      	mov	r3, r0
 81148e4:	461a      	mov	r2, r3
 81148e6:	693b      	ldr	r3, [r7, #16]
 81148e8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 81148ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81148ec:	4618      	mov	r0, r3
 81148ee:	f7f6 fe55 	bl	810b59c <lwip_htons>
 81148f2:	4603      	mov	r3, r0
 81148f4:	461a      	mov	r2, r3
 81148f6:	693b      	ldr	r3, [r7, #16]
 81148f8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 81148fa:	693b      	ldr	r3, [r7, #16]
 81148fc:	687a      	ldr	r2, [r7, #4]
 81148fe:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8114900:	68f8      	ldr	r0, [r7, #12]
 8114902:	f7f6 fe60 	bl	810b5c6 <lwip_htonl>
 8114906:	4602      	mov	r2, r0
 8114908:	693b      	ldr	r3, [r7, #16]
 811490a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 811490c:	897b      	ldrh	r3, [r7, #10]
 811490e:	089b      	lsrs	r3, r3, #2
 8114910:	b29b      	uxth	r3, r3
 8114912:	3305      	adds	r3, #5
 8114914:	b29b      	uxth	r3, r3
 8114916:	031b      	lsls	r3, r3, #12
 8114918:	b29a      	uxth	r2, r3
 811491a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 811491e:	b29b      	uxth	r3, r3
 8114920:	4313      	orrs	r3, r2
 8114922:	b29b      	uxth	r3, r3
 8114924:	4618      	mov	r0, r3
 8114926:	f7f6 fe39 	bl	810b59c <lwip_htons>
 811492a:	4603      	mov	r3, r0
 811492c:	461a      	mov	r2, r3
 811492e:	693b      	ldr	r3, [r7, #16]
 8114930:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8114932:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8114934:	4618      	mov	r0, r3
 8114936:	f7f6 fe31 	bl	810b59c <lwip_htons>
 811493a:	4603      	mov	r3, r0
 811493c:	461a      	mov	r2, r3
 811493e:	693b      	ldr	r3, [r7, #16]
 8114940:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8114942:	693b      	ldr	r3, [r7, #16]
 8114944:	2200      	movs	r2, #0
 8114946:	741a      	strb	r2, [r3, #16]
 8114948:	2200      	movs	r2, #0
 811494a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 811494c:	693b      	ldr	r3, [r7, #16]
 811494e:	2200      	movs	r2, #0
 8114950:	749a      	strb	r2, [r3, #18]
 8114952:	2200      	movs	r2, #0
 8114954:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8114956:	697b      	ldr	r3, [r7, #20]
}
 8114958:	4618      	mov	r0, r3
 811495a:	3718      	adds	r7, #24
 811495c:	46bd      	mov	sp, r7
 811495e:	bd80      	pop	{r7, pc}
 8114960:	08118c58 	.word	0x08118c58
 8114964:	08119370 	.word	0x08119370
 8114968:	08118cec 	.word	0x08118cec

0811496c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 811496c:	b5b0      	push	{r4, r5, r7, lr}
 811496e:	b08a      	sub	sp, #40	@ 0x28
 8114970:	af04      	add	r7, sp, #16
 8114972:	60f8      	str	r0, [r7, #12]
 8114974:	607b      	str	r3, [r7, #4]
 8114976:	460b      	mov	r3, r1
 8114978:	817b      	strh	r3, [r7, #10]
 811497a:	4613      	mov	r3, r2
 811497c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 811497e:	68fb      	ldr	r3, [r7, #12]
 8114980:	2b00      	cmp	r3, #0
 8114982:	d106      	bne.n	8114992 <tcp_output_alloc_header+0x26>
 8114984:	4b15      	ldr	r3, [pc, #84]	@ (81149dc <tcp_output_alloc_header+0x70>)
 8114986:	f240 7242 	movw	r2, #1858	@ 0x742
 811498a:	4915      	ldr	r1, [pc, #84]	@ (81149e0 <tcp_output_alloc_header+0x74>)
 811498c:	4815      	ldr	r0, [pc, #84]	@ (81149e4 <tcp_output_alloc_header+0x78>)
 811498e:	f001 f9f7 	bl	8115d80 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8114992:	68fb      	ldr	r3, [r7, #12]
 8114994:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8114996:	68fb      	ldr	r3, [r7, #12]
 8114998:	8adb      	ldrh	r3, [r3, #22]
 811499a:	68fa      	ldr	r2, [r7, #12]
 811499c:	8b12      	ldrh	r2, [r2, #24]
 811499e:	68f9      	ldr	r1, [r7, #12]
 81149a0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 81149a2:	893d      	ldrh	r5, [r7, #8]
 81149a4:	897c      	ldrh	r4, [r7, #10]
 81149a6:	9103      	str	r1, [sp, #12]
 81149a8:	2110      	movs	r1, #16
 81149aa:	9102      	str	r1, [sp, #8]
 81149ac:	9201      	str	r2, [sp, #4]
 81149ae:	9300      	str	r3, [sp, #0]
 81149b0:	687b      	ldr	r3, [r7, #4]
 81149b2:	462a      	mov	r2, r5
 81149b4:	4621      	mov	r1, r4
 81149b6:	f7ff ff67 	bl	8114888 <tcp_output_alloc_header_common>
 81149ba:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 81149bc:	697b      	ldr	r3, [r7, #20]
 81149be:	2b00      	cmp	r3, #0
 81149c0:	d006      	beq.n	81149d0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 81149c2:	68fb      	ldr	r3, [r7, #12]
 81149c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81149c6:	68fa      	ldr	r2, [r7, #12]
 81149c8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 81149ca:	441a      	add	r2, r3
 81149cc:	68fb      	ldr	r3, [r7, #12]
 81149ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 81149d0:	697b      	ldr	r3, [r7, #20]
}
 81149d2:	4618      	mov	r0, r3
 81149d4:	3718      	adds	r7, #24
 81149d6:	46bd      	mov	sp, r7
 81149d8:	bdb0      	pop	{r4, r5, r7, pc}
 81149da:	bf00      	nop
 81149dc:	08118c58 	.word	0x08118c58
 81149e0:	081193a0 	.word	0x081193a0
 81149e4:	08118cec 	.word	0x08118cec

081149e8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 81149e8:	b580      	push	{r7, lr}
 81149ea:	b088      	sub	sp, #32
 81149ec:	af00      	add	r7, sp, #0
 81149ee:	60f8      	str	r0, [r7, #12]
 81149f0:	60b9      	str	r1, [r7, #8]
 81149f2:	4611      	mov	r1, r2
 81149f4:	461a      	mov	r2, r3
 81149f6:	460b      	mov	r3, r1
 81149f8:	71fb      	strb	r3, [r7, #7]
 81149fa:	4613      	mov	r3, r2
 81149fc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 81149fe:	2300      	movs	r3, #0
 8114a00:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8114a02:	68bb      	ldr	r3, [r7, #8]
 8114a04:	2b00      	cmp	r3, #0
 8114a06:	d106      	bne.n	8114a16 <tcp_output_fill_options+0x2e>
 8114a08:	4b12      	ldr	r3, [pc, #72]	@ (8114a54 <tcp_output_fill_options+0x6c>)
 8114a0a:	f240 7256 	movw	r2, #1878	@ 0x756
 8114a0e:	4912      	ldr	r1, [pc, #72]	@ (8114a58 <tcp_output_fill_options+0x70>)
 8114a10:	4812      	ldr	r0, [pc, #72]	@ (8114a5c <tcp_output_fill_options+0x74>)
 8114a12:	f001 f9b5 	bl	8115d80 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8114a16:	68bb      	ldr	r3, [r7, #8]
 8114a18:	685b      	ldr	r3, [r3, #4]
 8114a1a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8114a1c:	69bb      	ldr	r3, [r7, #24]
 8114a1e:	3314      	adds	r3, #20
 8114a20:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8114a22:	8bfb      	ldrh	r3, [r7, #30]
 8114a24:	009b      	lsls	r3, r3, #2
 8114a26:	461a      	mov	r2, r3
 8114a28:	79fb      	ldrb	r3, [r7, #7]
 8114a2a:	009b      	lsls	r3, r3, #2
 8114a2c:	f003 0304 	and.w	r3, r3, #4
 8114a30:	4413      	add	r3, r2
 8114a32:	3314      	adds	r3, #20
 8114a34:	69ba      	ldr	r2, [r7, #24]
 8114a36:	4413      	add	r3, r2
 8114a38:	697a      	ldr	r2, [r7, #20]
 8114a3a:	429a      	cmp	r2, r3
 8114a3c:	d006      	beq.n	8114a4c <tcp_output_fill_options+0x64>
 8114a3e:	4b05      	ldr	r3, [pc, #20]	@ (8114a54 <tcp_output_fill_options+0x6c>)
 8114a40:	f240 7275 	movw	r2, #1909	@ 0x775
 8114a44:	4906      	ldr	r1, [pc, #24]	@ (8114a60 <tcp_output_fill_options+0x78>)
 8114a46:	4805      	ldr	r0, [pc, #20]	@ (8114a5c <tcp_output_fill_options+0x74>)
 8114a48:	f001 f99a 	bl	8115d80 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8114a4c:	bf00      	nop
 8114a4e:	3720      	adds	r7, #32
 8114a50:	46bd      	mov	sp, r7
 8114a52:	bd80      	pop	{r7, pc}
 8114a54:	08118c58 	.word	0x08118c58
 8114a58:	081193c8 	.word	0x081193c8
 8114a5c:	08118cec 	.word	0x08118cec
 8114a60:	081192c0 	.word	0x081192c0

08114a64 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8114a64:	b580      	push	{r7, lr}
 8114a66:	b08a      	sub	sp, #40	@ 0x28
 8114a68:	af04      	add	r7, sp, #16
 8114a6a:	60f8      	str	r0, [r7, #12]
 8114a6c:	60b9      	str	r1, [r7, #8]
 8114a6e:	607a      	str	r2, [r7, #4]
 8114a70:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8114a72:	68bb      	ldr	r3, [r7, #8]
 8114a74:	2b00      	cmp	r3, #0
 8114a76:	d106      	bne.n	8114a86 <tcp_output_control_segment+0x22>
 8114a78:	4b1c      	ldr	r3, [pc, #112]	@ (8114aec <tcp_output_control_segment+0x88>)
 8114a7a:	f240 7287 	movw	r2, #1927	@ 0x787
 8114a7e:	491c      	ldr	r1, [pc, #112]	@ (8114af0 <tcp_output_control_segment+0x8c>)
 8114a80:	481c      	ldr	r0, [pc, #112]	@ (8114af4 <tcp_output_control_segment+0x90>)
 8114a82:	f001 f97d 	bl	8115d80 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8114a86:	683a      	ldr	r2, [r7, #0]
 8114a88:	6879      	ldr	r1, [r7, #4]
 8114a8a:	68f8      	ldr	r0, [r7, #12]
 8114a8c:	f7fe ff42 	bl	8113914 <tcp_route>
 8114a90:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8114a92:	693b      	ldr	r3, [r7, #16]
 8114a94:	2b00      	cmp	r3, #0
 8114a96:	d102      	bne.n	8114a9e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8114a98:	23fc      	movs	r3, #252	@ 0xfc
 8114a9a:	75fb      	strb	r3, [r7, #23]
 8114a9c:	e01c      	b.n	8114ad8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8114a9e:	68fb      	ldr	r3, [r7, #12]
 8114aa0:	2b00      	cmp	r3, #0
 8114aa2:	d006      	beq.n	8114ab2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8114aa4:	68fb      	ldr	r3, [r7, #12]
 8114aa6:	7adb      	ldrb	r3, [r3, #11]
 8114aa8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8114aaa:	68fb      	ldr	r3, [r7, #12]
 8114aac:	7a9b      	ldrb	r3, [r3, #10]
 8114aae:	757b      	strb	r3, [r7, #21]
 8114ab0:	e003      	b.n	8114aba <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8114ab2:	23ff      	movs	r3, #255	@ 0xff
 8114ab4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8114ab6:	2300      	movs	r3, #0
 8114ab8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8114aba:	7dba      	ldrb	r2, [r7, #22]
 8114abc:	693b      	ldr	r3, [r7, #16]
 8114abe:	9302      	str	r3, [sp, #8]
 8114ac0:	2306      	movs	r3, #6
 8114ac2:	9301      	str	r3, [sp, #4]
 8114ac4:	7d7b      	ldrb	r3, [r7, #21]
 8114ac6:	9300      	str	r3, [sp, #0]
 8114ac8:	4613      	mov	r3, r2
 8114aca:	683a      	ldr	r2, [r7, #0]
 8114acc:	6879      	ldr	r1, [r7, #4]
 8114ace:	68b8      	ldr	r0, [r7, #8]
 8114ad0:	f7f8 f9fa 	bl	810cec8 <ip4_output_if>
 8114ad4:	4603      	mov	r3, r0
 8114ad6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8114ad8:	68b8      	ldr	r0, [r7, #8]
 8114ada:	f7fa fce5 	bl	810f4a8 <pbuf_free>
  return err;
 8114ade:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8114ae2:	4618      	mov	r0, r3
 8114ae4:	3718      	adds	r7, #24
 8114ae6:	46bd      	mov	sp, r7
 8114ae8:	bd80      	pop	{r7, pc}
 8114aea:	bf00      	nop
 8114aec:	08118c58 	.word	0x08118c58
 8114af0:	081193f0 	.word	0x081193f0
 8114af4:	08118cec 	.word	0x08118cec

08114af8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8114af8:	b590      	push	{r4, r7, lr}
 8114afa:	b08b      	sub	sp, #44	@ 0x2c
 8114afc:	af04      	add	r7, sp, #16
 8114afe:	60f8      	str	r0, [r7, #12]
 8114b00:	60b9      	str	r1, [r7, #8]
 8114b02:	607a      	str	r2, [r7, #4]
 8114b04:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8114b06:	683b      	ldr	r3, [r7, #0]
 8114b08:	2b00      	cmp	r3, #0
 8114b0a:	d106      	bne.n	8114b1a <tcp_rst+0x22>
 8114b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8114b8c <tcp_rst+0x94>)
 8114b0e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8114b12:	491f      	ldr	r1, [pc, #124]	@ (8114b90 <tcp_rst+0x98>)
 8114b14:	481f      	ldr	r0, [pc, #124]	@ (8114b94 <tcp_rst+0x9c>)
 8114b16:	f001 f933 	bl	8115d80 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8114b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114b1c:	2b00      	cmp	r3, #0
 8114b1e:	d106      	bne.n	8114b2e <tcp_rst+0x36>
 8114b20:	4b1a      	ldr	r3, [pc, #104]	@ (8114b8c <tcp_rst+0x94>)
 8114b22:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8114b26:	491c      	ldr	r1, [pc, #112]	@ (8114b98 <tcp_rst+0xa0>)
 8114b28:	481a      	ldr	r0, [pc, #104]	@ (8114b94 <tcp_rst+0x9c>)
 8114b2a:	f001 f929 	bl	8115d80 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8114b2e:	2300      	movs	r3, #0
 8114b30:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8114b32:	f24d 0316 	movw	r3, #53270	@ 0xd016
 8114b36:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8114b38:	7dfb      	ldrb	r3, [r7, #23]
 8114b3a:	b29c      	uxth	r4, r3
 8114b3c:	68b8      	ldr	r0, [r7, #8]
 8114b3e:	f7f6 fd42 	bl	810b5c6 <lwip_htonl>
 8114b42:	4602      	mov	r2, r0
 8114b44:	8abb      	ldrh	r3, [r7, #20]
 8114b46:	9303      	str	r3, [sp, #12]
 8114b48:	2314      	movs	r3, #20
 8114b4a:	9302      	str	r3, [sp, #8]
 8114b4c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8114b4e:	9301      	str	r3, [sp, #4]
 8114b50:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8114b52:	9300      	str	r3, [sp, #0]
 8114b54:	4613      	mov	r3, r2
 8114b56:	2200      	movs	r2, #0
 8114b58:	4621      	mov	r1, r4
 8114b5a:	6878      	ldr	r0, [r7, #4]
 8114b5c:	f7ff fe94 	bl	8114888 <tcp_output_alloc_header_common>
 8114b60:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8114b62:	693b      	ldr	r3, [r7, #16]
 8114b64:	2b00      	cmp	r3, #0
 8114b66:	d00c      	beq.n	8114b82 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8114b68:	7dfb      	ldrb	r3, [r7, #23]
 8114b6a:	2200      	movs	r2, #0
 8114b6c:	6939      	ldr	r1, [r7, #16]
 8114b6e:	68f8      	ldr	r0, [r7, #12]
 8114b70:	f7ff ff3a 	bl	81149e8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8114b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114b76:	683a      	ldr	r2, [r7, #0]
 8114b78:	6939      	ldr	r1, [r7, #16]
 8114b7a:	68f8      	ldr	r0, [r7, #12]
 8114b7c:	f7ff ff72 	bl	8114a64 <tcp_output_control_segment>
 8114b80:	e000      	b.n	8114b84 <tcp_rst+0x8c>
    return;
 8114b82:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8114b84:	371c      	adds	r7, #28
 8114b86:	46bd      	mov	sp, r7
 8114b88:	bd90      	pop	{r4, r7, pc}
 8114b8a:	bf00      	nop
 8114b8c:	08118c58 	.word	0x08118c58
 8114b90:	0811941c 	.word	0x0811941c
 8114b94:	08118cec 	.word	0x08118cec
 8114b98:	08119438 	.word	0x08119438

08114b9c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8114b9c:	b590      	push	{r4, r7, lr}
 8114b9e:	b087      	sub	sp, #28
 8114ba0:	af00      	add	r7, sp, #0
 8114ba2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8114ba4:	2300      	movs	r3, #0
 8114ba6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8114ba8:	2300      	movs	r3, #0
 8114baa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8114bac:	687b      	ldr	r3, [r7, #4]
 8114bae:	2b00      	cmp	r3, #0
 8114bb0:	d106      	bne.n	8114bc0 <tcp_send_empty_ack+0x24>
 8114bb2:	4b28      	ldr	r3, [pc, #160]	@ (8114c54 <tcp_send_empty_ack+0xb8>)
 8114bb4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8114bb8:	4927      	ldr	r1, [pc, #156]	@ (8114c58 <tcp_send_empty_ack+0xbc>)
 8114bba:	4828      	ldr	r0, [pc, #160]	@ (8114c5c <tcp_send_empty_ack+0xc0>)
 8114bbc:	f001 f8e0 	bl	8115d80 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8114bc0:	7dfb      	ldrb	r3, [r7, #23]
 8114bc2:	009b      	lsls	r3, r3, #2
 8114bc4:	b2db      	uxtb	r3, r3
 8114bc6:	f003 0304 	and.w	r3, r3, #4
 8114bca:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8114bcc:	7d7b      	ldrb	r3, [r7, #21]
 8114bce:	b29c      	uxth	r4, r3
 8114bd0:	687b      	ldr	r3, [r7, #4]
 8114bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8114bd4:	4618      	mov	r0, r3
 8114bd6:	f7f6 fcf6 	bl	810b5c6 <lwip_htonl>
 8114bda:	4603      	mov	r3, r0
 8114bdc:	2200      	movs	r2, #0
 8114bde:	4621      	mov	r1, r4
 8114be0:	6878      	ldr	r0, [r7, #4]
 8114be2:	f7ff fec3 	bl	811496c <tcp_output_alloc_header>
 8114be6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8114be8:	693b      	ldr	r3, [r7, #16]
 8114bea:	2b00      	cmp	r3, #0
 8114bec:	d109      	bne.n	8114c02 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8114bee:	687b      	ldr	r3, [r7, #4]
 8114bf0:	8b5b      	ldrh	r3, [r3, #26]
 8114bf2:	f043 0303 	orr.w	r3, r3, #3
 8114bf6:	b29a      	uxth	r2, r3
 8114bf8:	687b      	ldr	r3, [r7, #4]
 8114bfa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8114bfc:	f06f 0301 	mvn.w	r3, #1
 8114c00:	e023      	b.n	8114c4a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8114c02:	7dbb      	ldrb	r3, [r7, #22]
 8114c04:	7dfa      	ldrb	r2, [r7, #23]
 8114c06:	6939      	ldr	r1, [r7, #16]
 8114c08:	6878      	ldr	r0, [r7, #4]
 8114c0a:	f7ff feed 	bl	81149e8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8114c0e:	687a      	ldr	r2, [r7, #4]
 8114c10:	687b      	ldr	r3, [r7, #4]
 8114c12:	3304      	adds	r3, #4
 8114c14:	6939      	ldr	r1, [r7, #16]
 8114c16:	6878      	ldr	r0, [r7, #4]
 8114c18:	f7ff ff24 	bl	8114a64 <tcp_output_control_segment>
 8114c1c:	4603      	mov	r3, r0
 8114c1e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8114c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8114c24:	2b00      	cmp	r3, #0
 8114c26:	d007      	beq.n	8114c38 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8114c28:	687b      	ldr	r3, [r7, #4]
 8114c2a:	8b5b      	ldrh	r3, [r3, #26]
 8114c2c:	f043 0303 	orr.w	r3, r3, #3
 8114c30:	b29a      	uxth	r2, r3
 8114c32:	687b      	ldr	r3, [r7, #4]
 8114c34:	835a      	strh	r2, [r3, #26]
 8114c36:	e006      	b.n	8114c46 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8114c38:	687b      	ldr	r3, [r7, #4]
 8114c3a:	8b5b      	ldrh	r3, [r3, #26]
 8114c3c:	f023 0303 	bic.w	r3, r3, #3
 8114c40:	b29a      	uxth	r2, r3
 8114c42:	687b      	ldr	r3, [r7, #4]
 8114c44:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8114c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8114c4a:	4618      	mov	r0, r3
 8114c4c:	371c      	adds	r7, #28
 8114c4e:	46bd      	mov	sp, r7
 8114c50:	bd90      	pop	{r4, r7, pc}
 8114c52:	bf00      	nop
 8114c54:	08118c58 	.word	0x08118c58
 8114c58:	08119454 	.word	0x08119454
 8114c5c:	08118cec 	.word	0x08118cec

08114c60 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8114c60:	b590      	push	{r4, r7, lr}
 8114c62:	b087      	sub	sp, #28
 8114c64:	af00      	add	r7, sp, #0
 8114c66:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8114c68:	2300      	movs	r3, #0
 8114c6a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8114c6c:	687b      	ldr	r3, [r7, #4]
 8114c6e:	2b00      	cmp	r3, #0
 8114c70:	d106      	bne.n	8114c80 <tcp_keepalive+0x20>
 8114c72:	4b18      	ldr	r3, [pc, #96]	@ (8114cd4 <tcp_keepalive+0x74>)
 8114c74:	f640 0224 	movw	r2, #2084	@ 0x824
 8114c78:	4917      	ldr	r1, [pc, #92]	@ (8114cd8 <tcp_keepalive+0x78>)
 8114c7a:	4818      	ldr	r0, [pc, #96]	@ (8114cdc <tcp_keepalive+0x7c>)
 8114c7c:	f001 f880 	bl	8115d80 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8114c80:	7dfb      	ldrb	r3, [r7, #23]
 8114c82:	b29c      	uxth	r4, r3
 8114c84:	687b      	ldr	r3, [r7, #4]
 8114c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8114c88:	3b01      	subs	r3, #1
 8114c8a:	4618      	mov	r0, r3
 8114c8c:	f7f6 fc9b 	bl	810b5c6 <lwip_htonl>
 8114c90:	4603      	mov	r3, r0
 8114c92:	2200      	movs	r2, #0
 8114c94:	4621      	mov	r1, r4
 8114c96:	6878      	ldr	r0, [r7, #4]
 8114c98:	f7ff fe68 	bl	811496c <tcp_output_alloc_header>
 8114c9c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8114c9e:	693b      	ldr	r3, [r7, #16]
 8114ca0:	2b00      	cmp	r3, #0
 8114ca2:	d102      	bne.n	8114caa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8114ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8114ca8:	e010      	b.n	8114ccc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8114caa:	7dfb      	ldrb	r3, [r7, #23]
 8114cac:	2200      	movs	r2, #0
 8114cae:	6939      	ldr	r1, [r7, #16]
 8114cb0:	6878      	ldr	r0, [r7, #4]
 8114cb2:	f7ff fe99 	bl	81149e8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8114cb6:	687a      	ldr	r2, [r7, #4]
 8114cb8:	687b      	ldr	r3, [r7, #4]
 8114cba:	3304      	adds	r3, #4
 8114cbc:	6939      	ldr	r1, [r7, #16]
 8114cbe:	6878      	ldr	r0, [r7, #4]
 8114cc0:	f7ff fed0 	bl	8114a64 <tcp_output_control_segment>
 8114cc4:	4603      	mov	r3, r0
 8114cc6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8114cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8114ccc:	4618      	mov	r0, r3
 8114cce:	371c      	adds	r7, #28
 8114cd0:	46bd      	mov	sp, r7
 8114cd2:	bd90      	pop	{r4, r7, pc}
 8114cd4:	08118c58 	.word	0x08118c58
 8114cd8:	08119474 	.word	0x08119474
 8114cdc:	08118cec 	.word	0x08118cec

08114ce0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8114ce0:	b590      	push	{r4, r7, lr}
 8114ce2:	b08b      	sub	sp, #44	@ 0x2c
 8114ce4:	af00      	add	r7, sp, #0
 8114ce6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8114ce8:	2300      	movs	r3, #0
 8114cea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8114cee:	687b      	ldr	r3, [r7, #4]
 8114cf0:	2b00      	cmp	r3, #0
 8114cf2:	d106      	bne.n	8114d02 <tcp_zero_window_probe+0x22>
 8114cf4:	4b4c      	ldr	r3, [pc, #304]	@ (8114e28 <tcp_zero_window_probe+0x148>)
 8114cf6:	f640 024f 	movw	r2, #2127	@ 0x84f
 8114cfa:	494c      	ldr	r1, [pc, #304]	@ (8114e2c <tcp_zero_window_probe+0x14c>)
 8114cfc:	484c      	ldr	r0, [pc, #304]	@ (8114e30 <tcp_zero_window_probe+0x150>)
 8114cfe:	f001 f83f 	bl	8115d80 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8114d02:	687b      	ldr	r3, [r7, #4]
 8114d04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8114d06:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8114d08:	6a3b      	ldr	r3, [r7, #32]
 8114d0a:	2b00      	cmp	r3, #0
 8114d0c:	d101      	bne.n	8114d12 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8114d0e:	2300      	movs	r3, #0
 8114d10:	e086      	b.n	8114e20 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8114d12:	687b      	ldr	r3, [r7, #4]
 8114d14:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8114d18:	2bff      	cmp	r3, #255	@ 0xff
 8114d1a:	d007      	beq.n	8114d2c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8114d1c:	687b      	ldr	r3, [r7, #4]
 8114d1e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8114d22:	3301      	adds	r3, #1
 8114d24:	b2da      	uxtb	r2, r3
 8114d26:	687b      	ldr	r3, [r7, #4]
 8114d28:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8114d2c:	6a3b      	ldr	r3, [r7, #32]
 8114d2e:	68db      	ldr	r3, [r3, #12]
 8114d30:	899b      	ldrh	r3, [r3, #12]
 8114d32:	b29b      	uxth	r3, r3
 8114d34:	4618      	mov	r0, r3
 8114d36:	f7f6 fc31 	bl	810b59c <lwip_htons>
 8114d3a:	4603      	mov	r3, r0
 8114d3c:	b2db      	uxtb	r3, r3
 8114d3e:	f003 0301 	and.w	r3, r3, #1
 8114d42:	2b00      	cmp	r3, #0
 8114d44:	d005      	beq.n	8114d52 <tcp_zero_window_probe+0x72>
 8114d46:	6a3b      	ldr	r3, [r7, #32]
 8114d48:	891b      	ldrh	r3, [r3, #8]
 8114d4a:	2b00      	cmp	r3, #0
 8114d4c:	d101      	bne.n	8114d52 <tcp_zero_window_probe+0x72>
 8114d4e:	2301      	movs	r3, #1
 8114d50:	e000      	b.n	8114d54 <tcp_zero_window_probe+0x74>
 8114d52:	2300      	movs	r3, #0
 8114d54:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8114d56:	7ffb      	ldrb	r3, [r7, #31]
 8114d58:	2b00      	cmp	r3, #0
 8114d5a:	bf0c      	ite	eq
 8114d5c:	2301      	moveq	r3, #1
 8114d5e:	2300      	movne	r3, #0
 8114d60:	b2db      	uxtb	r3, r3
 8114d62:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8114d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8114d68:	b299      	uxth	r1, r3
 8114d6a:	6a3b      	ldr	r3, [r7, #32]
 8114d6c:	68db      	ldr	r3, [r3, #12]
 8114d6e:	685b      	ldr	r3, [r3, #4]
 8114d70:	8bba      	ldrh	r2, [r7, #28]
 8114d72:	6878      	ldr	r0, [r7, #4]
 8114d74:	f7ff fdfa 	bl	811496c <tcp_output_alloc_header>
 8114d78:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8114d7a:	69bb      	ldr	r3, [r7, #24]
 8114d7c:	2b00      	cmp	r3, #0
 8114d7e:	d102      	bne.n	8114d86 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8114d80:	f04f 33ff 	mov.w	r3, #4294967295
 8114d84:	e04c      	b.n	8114e20 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8114d86:	69bb      	ldr	r3, [r7, #24]
 8114d88:	685b      	ldr	r3, [r3, #4]
 8114d8a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8114d8c:	7ffb      	ldrb	r3, [r7, #31]
 8114d8e:	2b00      	cmp	r3, #0
 8114d90:	d011      	beq.n	8114db6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8114d92:	697b      	ldr	r3, [r7, #20]
 8114d94:	899b      	ldrh	r3, [r3, #12]
 8114d96:	b29b      	uxth	r3, r3
 8114d98:	b21b      	sxth	r3, r3
 8114d9a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8114d9e:	b21c      	sxth	r4, r3
 8114da0:	2011      	movs	r0, #17
 8114da2:	f7f6 fbfb 	bl	810b59c <lwip_htons>
 8114da6:	4603      	mov	r3, r0
 8114da8:	b21b      	sxth	r3, r3
 8114daa:	4323      	orrs	r3, r4
 8114dac:	b21b      	sxth	r3, r3
 8114dae:	b29a      	uxth	r2, r3
 8114db0:	697b      	ldr	r3, [r7, #20]
 8114db2:	819a      	strh	r2, [r3, #12]
 8114db4:	e010      	b.n	8114dd8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8114db6:	69bb      	ldr	r3, [r7, #24]
 8114db8:	685b      	ldr	r3, [r3, #4]
 8114dba:	3314      	adds	r3, #20
 8114dbc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8114dbe:	6a3b      	ldr	r3, [r7, #32]
 8114dc0:	6858      	ldr	r0, [r3, #4]
 8114dc2:	6a3b      	ldr	r3, [r7, #32]
 8114dc4:	685b      	ldr	r3, [r3, #4]
 8114dc6:	891a      	ldrh	r2, [r3, #8]
 8114dc8:	6a3b      	ldr	r3, [r7, #32]
 8114dca:	891b      	ldrh	r3, [r3, #8]
 8114dcc:	1ad3      	subs	r3, r2, r3
 8114dce:	b29b      	uxth	r3, r3
 8114dd0:	2201      	movs	r2, #1
 8114dd2:	6939      	ldr	r1, [r7, #16]
 8114dd4:	f7fa fd5e 	bl	810f894 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8114dd8:	6a3b      	ldr	r3, [r7, #32]
 8114dda:	68db      	ldr	r3, [r3, #12]
 8114ddc:	685b      	ldr	r3, [r3, #4]
 8114dde:	4618      	mov	r0, r3
 8114de0:	f7f6 fbf1 	bl	810b5c6 <lwip_htonl>
 8114de4:	4603      	mov	r3, r0
 8114de6:	3301      	adds	r3, #1
 8114de8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8114dea:	687b      	ldr	r3, [r7, #4]
 8114dec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8114dee:	68fb      	ldr	r3, [r7, #12]
 8114df0:	1ad3      	subs	r3, r2, r3
 8114df2:	2b00      	cmp	r3, #0
 8114df4:	da02      	bge.n	8114dfc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8114df6:	687b      	ldr	r3, [r7, #4]
 8114df8:	68fa      	ldr	r2, [r7, #12]
 8114dfa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8114dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8114e00:	2200      	movs	r2, #0
 8114e02:	69b9      	ldr	r1, [r7, #24]
 8114e04:	6878      	ldr	r0, [r7, #4]
 8114e06:	f7ff fdef 	bl	81149e8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8114e0a:	687a      	ldr	r2, [r7, #4]
 8114e0c:	687b      	ldr	r3, [r7, #4]
 8114e0e:	3304      	adds	r3, #4
 8114e10:	69b9      	ldr	r1, [r7, #24]
 8114e12:	6878      	ldr	r0, [r7, #4]
 8114e14:	f7ff fe26 	bl	8114a64 <tcp_output_control_segment>
 8114e18:	4603      	mov	r3, r0
 8114e1a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8114e1c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8114e20:	4618      	mov	r0, r3
 8114e22:	372c      	adds	r7, #44	@ 0x2c
 8114e24:	46bd      	mov	sp, r7
 8114e26:	bd90      	pop	{r4, r7, pc}
 8114e28:	08118c58 	.word	0x08118c58
 8114e2c:	08119490 	.word	0x08119490
 8114e30:	08118cec 	.word	0x08118cec

08114e34 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8114e34:	b580      	push	{r7, lr}
 8114e36:	b084      	sub	sp, #16
 8114e38:	af00      	add	r7, sp, #0
 8114e3a:	6078      	str	r0, [r7, #4]
 8114e3c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8114e3e:	f000 fb01 	bl	8115444 <sys_timeouts_sleeptime>
 8114e42:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8114e44:	68fb      	ldr	r3, [r7, #12]
 8114e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114e4a:	d10b      	bne.n	8114e64 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8114e4c:	4813      	ldr	r0, [pc, #76]	@ (8114e9c <tcpip_timeouts_mbox_fetch+0x68>)
 8114e4e:	f7fa fe6c 	bl	810fb2a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8114e52:	2200      	movs	r2, #0
 8114e54:	6839      	ldr	r1, [r7, #0]
 8114e56:	6878      	ldr	r0, [r7, #4]
 8114e58:	f7fa fdf4 	bl	810fa44 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8114e5c:	480f      	ldr	r0, [pc, #60]	@ (8114e9c <tcpip_timeouts_mbox_fetch+0x68>)
 8114e5e:	f7fa fe55 	bl	810fb0c <sys_mutex_lock>
    return;
 8114e62:	e018      	b.n	8114e96 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8114e64:	68fb      	ldr	r3, [r7, #12]
 8114e66:	2b00      	cmp	r3, #0
 8114e68:	d102      	bne.n	8114e70 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8114e6a:	f000 fab1 	bl	81153d0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8114e6e:	e7e6      	b.n	8114e3e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8114e70:	480a      	ldr	r0, [pc, #40]	@ (8114e9c <tcpip_timeouts_mbox_fetch+0x68>)
 8114e72:	f7fa fe5a 	bl	810fb2a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8114e76:	68fa      	ldr	r2, [r7, #12]
 8114e78:	6839      	ldr	r1, [r7, #0]
 8114e7a:	6878      	ldr	r0, [r7, #4]
 8114e7c:	f7fa fde2 	bl	810fa44 <sys_arch_mbox_fetch>
 8114e80:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8114e82:	4806      	ldr	r0, [pc, #24]	@ (8114e9c <tcpip_timeouts_mbox_fetch+0x68>)
 8114e84:	f7fa fe42 	bl	810fb0c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8114e88:	68bb      	ldr	r3, [r7, #8]
 8114e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114e8e:	d102      	bne.n	8114e96 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8114e90:	f000 fa9e 	bl	81153d0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8114e94:	e7d3      	b.n	8114e3e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8114e96:	3710      	adds	r7, #16
 8114e98:	46bd      	mov	sp, r7
 8114e9a:	bd80      	pop	{r7, pc}
 8114e9c:	10011ca8 	.word	0x10011ca8

08114ea0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8114ea0:	b580      	push	{r7, lr}
 8114ea2:	b084      	sub	sp, #16
 8114ea4:	af00      	add	r7, sp, #0
 8114ea6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8114ea8:	4810      	ldr	r0, [pc, #64]	@ (8114eec <tcpip_thread+0x4c>)
 8114eaa:	f7fa fe2f 	bl	810fb0c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8114eae:	4b10      	ldr	r3, [pc, #64]	@ (8114ef0 <tcpip_thread+0x50>)
 8114eb0:	681b      	ldr	r3, [r3, #0]
 8114eb2:	2b00      	cmp	r3, #0
 8114eb4:	d005      	beq.n	8114ec2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8114eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8114ef0 <tcpip_thread+0x50>)
 8114eb8:	681b      	ldr	r3, [r3, #0]
 8114eba:	4a0e      	ldr	r2, [pc, #56]	@ (8114ef4 <tcpip_thread+0x54>)
 8114ebc:	6812      	ldr	r2, [r2, #0]
 8114ebe:	4610      	mov	r0, r2
 8114ec0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8114ec2:	f107 030c 	add.w	r3, r7, #12
 8114ec6:	4619      	mov	r1, r3
 8114ec8:	480b      	ldr	r0, [pc, #44]	@ (8114ef8 <tcpip_thread+0x58>)
 8114eca:	f7ff ffb3 	bl	8114e34 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8114ece:	68fb      	ldr	r3, [r7, #12]
 8114ed0:	2b00      	cmp	r3, #0
 8114ed2:	d106      	bne.n	8114ee2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8114ed4:	4b09      	ldr	r3, [pc, #36]	@ (8114efc <tcpip_thread+0x5c>)
 8114ed6:	2291      	movs	r2, #145	@ 0x91
 8114ed8:	4909      	ldr	r1, [pc, #36]	@ (8114f00 <tcpip_thread+0x60>)
 8114eda:	480a      	ldr	r0, [pc, #40]	@ (8114f04 <tcpip_thread+0x64>)
 8114edc:	f000 ff50 	bl	8115d80 <iprintf>
      continue;
 8114ee0:	e003      	b.n	8114eea <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8114ee2:	68fb      	ldr	r3, [r7, #12]
 8114ee4:	4618      	mov	r0, r3
 8114ee6:	f000 f80f 	bl	8114f08 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8114eea:	e7ea      	b.n	8114ec2 <tcpip_thread+0x22>
 8114eec:	10011ca8 	.word	0x10011ca8
 8114ef0:	10011c9c 	.word	0x10011c9c
 8114ef4:	10011ca0 	.word	0x10011ca0
 8114ef8:	10011ca4 	.word	0x10011ca4
 8114efc:	081194b4 	.word	0x081194b4
 8114f00:	08119524 	.word	0x08119524
 8114f04:	08119544 	.word	0x08119544

08114f08 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8114f08:	b580      	push	{r7, lr}
 8114f0a:	b082      	sub	sp, #8
 8114f0c:	af00      	add	r7, sp, #0
 8114f0e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8114f10:	687b      	ldr	r3, [r7, #4]
 8114f12:	781b      	ldrb	r3, [r3, #0]
 8114f14:	2b02      	cmp	r3, #2
 8114f16:	d026      	beq.n	8114f66 <tcpip_thread_handle_msg+0x5e>
 8114f18:	2b02      	cmp	r3, #2
 8114f1a:	dc2b      	bgt.n	8114f74 <tcpip_thread_handle_msg+0x6c>
 8114f1c:	2b00      	cmp	r3, #0
 8114f1e:	d002      	beq.n	8114f26 <tcpip_thread_handle_msg+0x1e>
 8114f20:	2b01      	cmp	r3, #1
 8114f22:	d015      	beq.n	8114f50 <tcpip_thread_handle_msg+0x48>
 8114f24:	e026      	b.n	8114f74 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8114f26:	687b      	ldr	r3, [r7, #4]
 8114f28:	68db      	ldr	r3, [r3, #12]
 8114f2a:	687a      	ldr	r2, [r7, #4]
 8114f2c:	6850      	ldr	r0, [r2, #4]
 8114f2e:	687a      	ldr	r2, [r7, #4]
 8114f30:	6892      	ldr	r2, [r2, #8]
 8114f32:	4611      	mov	r1, r2
 8114f34:	4798      	blx	r3
 8114f36:	4603      	mov	r3, r0
 8114f38:	2b00      	cmp	r3, #0
 8114f3a:	d004      	beq.n	8114f46 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8114f3c:	687b      	ldr	r3, [r7, #4]
 8114f3e:	685b      	ldr	r3, [r3, #4]
 8114f40:	4618      	mov	r0, r3
 8114f42:	f7fa fab1 	bl	810f4a8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8114f46:	6879      	ldr	r1, [r7, #4]
 8114f48:	2009      	movs	r0, #9
 8114f4a:	f7f9 fc09 	bl	810e760 <memp_free>
      break;
 8114f4e:	e018      	b.n	8114f82 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8114f50:	687b      	ldr	r3, [r7, #4]
 8114f52:	685b      	ldr	r3, [r3, #4]
 8114f54:	687a      	ldr	r2, [r7, #4]
 8114f56:	6892      	ldr	r2, [r2, #8]
 8114f58:	4610      	mov	r0, r2
 8114f5a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8114f5c:	6879      	ldr	r1, [r7, #4]
 8114f5e:	2008      	movs	r0, #8
 8114f60:	f7f9 fbfe 	bl	810e760 <memp_free>
      break;
 8114f64:	e00d      	b.n	8114f82 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8114f66:	687b      	ldr	r3, [r7, #4]
 8114f68:	685b      	ldr	r3, [r3, #4]
 8114f6a:	687a      	ldr	r2, [r7, #4]
 8114f6c:	6892      	ldr	r2, [r2, #8]
 8114f6e:	4610      	mov	r0, r2
 8114f70:	4798      	blx	r3
      break;
 8114f72:	e006      	b.n	8114f82 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8114f74:	4b05      	ldr	r3, [pc, #20]	@ (8114f8c <tcpip_thread_handle_msg+0x84>)
 8114f76:	22cf      	movs	r2, #207	@ 0xcf
 8114f78:	4905      	ldr	r1, [pc, #20]	@ (8114f90 <tcpip_thread_handle_msg+0x88>)
 8114f7a:	4806      	ldr	r0, [pc, #24]	@ (8114f94 <tcpip_thread_handle_msg+0x8c>)
 8114f7c:	f000 ff00 	bl	8115d80 <iprintf>
      break;
 8114f80:	bf00      	nop
  }
}
 8114f82:	bf00      	nop
 8114f84:	3708      	adds	r7, #8
 8114f86:	46bd      	mov	sp, r7
 8114f88:	bd80      	pop	{r7, pc}
 8114f8a:	bf00      	nop
 8114f8c:	081194b4 	.word	0x081194b4
 8114f90:	08119524 	.word	0x08119524
 8114f94:	08119544 	.word	0x08119544

08114f98 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8114f98:	b580      	push	{r7, lr}
 8114f9a:	b086      	sub	sp, #24
 8114f9c:	af00      	add	r7, sp, #0
 8114f9e:	60f8      	str	r0, [r7, #12]
 8114fa0:	60b9      	str	r1, [r7, #8]
 8114fa2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8114fa4:	481a      	ldr	r0, [pc, #104]	@ (8115010 <tcpip_inpkt+0x78>)
 8114fa6:	f7fa fd7e 	bl	810faa6 <sys_mbox_valid>
 8114faa:	4603      	mov	r3, r0
 8114fac:	2b00      	cmp	r3, #0
 8114fae:	d105      	bne.n	8114fbc <tcpip_inpkt+0x24>
 8114fb0:	4b18      	ldr	r3, [pc, #96]	@ (8115014 <tcpip_inpkt+0x7c>)
 8114fb2:	22fc      	movs	r2, #252	@ 0xfc
 8114fb4:	4918      	ldr	r1, [pc, #96]	@ (8115018 <tcpip_inpkt+0x80>)
 8114fb6:	4819      	ldr	r0, [pc, #100]	@ (811501c <tcpip_inpkt+0x84>)
 8114fb8:	f000 fee2 	bl	8115d80 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8114fbc:	2009      	movs	r0, #9
 8114fbe:	f7f9 fb59 	bl	810e674 <memp_malloc>
 8114fc2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8114fc4:	697b      	ldr	r3, [r7, #20]
 8114fc6:	2b00      	cmp	r3, #0
 8114fc8:	d102      	bne.n	8114fd0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8114fca:	f04f 33ff 	mov.w	r3, #4294967295
 8114fce:	e01a      	b.n	8115006 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8114fd0:	697b      	ldr	r3, [r7, #20]
 8114fd2:	2200      	movs	r2, #0
 8114fd4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8114fd6:	697b      	ldr	r3, [r7, #20]
 8114fd8:	68fa      	ldr	r2, [r7, #12]
 8114fda:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8114fdc:	697b      	ldr	r3, [r7, #20]
 8114fde:	68ba      	ldr	r2, [r7, #8]
 8114fe0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8114fe2:	697b      	ldr	r3, [r7, #20]
 8114fe4:	687a      	ldr	r2, [r7, #4]
 8114fe6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8114fe8:	6979      	ldr	r1, [r7, #20]
 8114fea:	4809      	ldr	r0, [pc, #36]	@ (8115010 <tcpip_inpkt+0x78>)
 8114fec:	f7fa fd10 	bl	810fa10 <sys_mbox_trypost>
 8114ff0:	4603      	mov	r3, r0
 8114ff2:	2b00      	cmp	r3, #0
 8114ff4:	d006      	beq.n	8115004 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8114ff6:	6979      	ldr	r1, [r7, #20]
 8114ff8:	2009      	movs	r0, #9
 8114ffa:	f7f9 fbb1 	bl	810e760 <memp_free>
    return ERR_MEM;
 8114ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8115002:	e000      	b.n	8115006 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8115004:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8115006:	4618      	mov	r0, r3
 8115008:	3718      	adds	r7, #24
 811500a:	46bd      	mov	sp, r7
 811500c:	bd80      	pop	{r7, pc}
 811500e:	bf00      	nop
 8115010:	10011ca4 	.word	0x10011ca4
 8115014:	081194b4 	.word	0x081194b4
 8115018:	0811956c 	.word	0x0811956c
 811501c:	08119544 	.word	0x08119544

08115020 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8115020:	b580      	push	{r7, lr}
 8115022:	b082      	sub	sp, #8
 8115024:	af00      	add	r7, sp, #0
 8115026:	6078      	str	r0, [r7, #4]
 8115028:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 811502a:	683b      	ldr	r3, [r7, #0]
 811502c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115030:	f003 0318 	and.w	r3, r3, #24
 8115034:	2b00      	cmp	r3, #0
 8115036:	d006      	beq.n	8115046 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8115038:	4a08      	ldr	r2, [pc, #32]	@ (811505c <tcpip_input+0x3c>)
 811503a:	6839      	ldr	r1, [r7, #0]
 811503c:	6878      	ldr	r0, [r7, #4]
 811503e:	f7ff ffab 	bl	8114f98 <tcpip_inpkt>
 8115042:	4603      	mov	r3, r0
 8115044:	e005      	b.n	8115052 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8115046:	4a06      	ldr	r2, [pc, #24]	@ (8115060 <tcpip_input+0x40>)
 8115048:	6839      	ldr	r1, [r7, #0]
 811504a:	6878      	ldr	r0, [r7, #4]
 811504c:	f7ff ffa4 	bl	8114f98 <tcpip_inpkt>
 8115050:	4603      	mov	r3, r0
}
 8115052:	4618      	mov	r0, r3
 8115054:	3708      	adds	r7, #8
 8115056:	46bd      	mov	sp, r7
 8115058:	bd80      	pop	{r7, pc}
 811505a:	bf00      	nop
 811505c:	0810c491 	.word	0x0810c491
 8115060:	0810cc81 	.word	0x0810cc81

08115064 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8115064:	b580      	push	{r7, lr}
 8115066:	b084      	sub	sp, #16
 8115068:	af00      	add	r7, sp, #0
 811506a:	6078      	str	r0, [r7, #4]
 811506c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 811506e:	4819      	ldr	r0, [pc, #100]	@ (81150d4 <tcpip_try_callback+0x70>)
 8115070:	f7fa fd19 	bl	810faa6 <sys_mbox_valid>
 8115074:	4603      	mov	r3, r0
 8115076:	2b00      	cmp	r3, #0
 8115078:	d106      	bne.n	8115088 <tcpip_try_callback+0x24>
 811507a:	4b17      	ldr	r3, [pc, #92]	@ (81150d8 <tcpip_try_callback+0x74>)
 811507c:	f240 125d 	movw	r2, #349	@ 0x15d
 8115080:	4916      	ldr	r1, [pc, #88]	@ (81150dc <tcpip_try_callback+0x78>)
 8115082:	4817      	ldr	r0, [pc, #92]	@ (81150e0 <tcpip_try_callback+0x7c>)
 8115084:	f000 fe7c 	bl	8115d80 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8115088:	2008      	movs	r0, #8
 811508a:	f7f9 faf3 	bl	810e674 <memp_malloc>
 811508e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8115090:	68fb      	ldr	r3, [r7, #12]
 8115092:	2b00      	cmp	r3, #0
 8115094:	d102      	bne.n	811509c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8115096:	f04f 33ff 	mov.w	r3, #4294967295
 811509a:	e017      	b.n	81150cc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 811509c:	68fb      	ldr	r3, [r7, #12]
 811509e:	2201      	movs	r2, #1
 81150a0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 81150a2:	68fb      	ldr	r3, [r7, #12]
 81150a4:	687a      	ldr	r2, [r7, #4]
 81150a6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 81150a8:	68fb      	ldr	r3, [r7, #12]
 81150aa:	683a      	ldr	r2, [r7, #0]
 81150ac:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 81150ae:	68f9      	ldr	r1, [r7, #12]
 81150b0:	4808      	ldr	r0, [pc, #32]	@ (81150d4 <tcpip_try_callback+0x70>)
 81150b2:	f7fa fcad 	bl	810fa10 <sys_mbox_trypost>
 81150b6:	4603      	mov	r3, r0
 81150b8:	2b00      	cmp	r3, #0
 81150ba:	d006      	beq.n	81150ca <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 81150bc:	68f9      	ldr	r1, [r7, #12]
 81150be:	2008      	movs	r0, #8
 81150c0:	f7f9 fb4e 	bl	810e760 <memp_free>
    return ERR_MEM;
 81150c4:	f04f 33ff 	mov.w	r3, #4294967295
 81150c8:	e000      	b.n	81150cc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 81150ca:	2300      	movs	r3, #0
}
 81150cc:	4618      	mov	r0, r3
 81150ce:	3710      	adds	r7, #16
 81150d0:	46bd      	mov	sp, r7
 81150d2:	bd80      	pop	{r7, pc}
 81150d4:	10011ca4 	.word	0x10011ca4
 81150d8:	081194b4 	.word	0x081194b4
 81150dc:	0811956c 	.word	0x0811956c
 81150e0:	08119544 	.word	0x08119544

081150e4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 81150e4:	b580      	push	{r7, lr}
 81150e6:	b084      	sub	sp, #16
 81150e8:	af02      	add	r7, sp, #8
 81150ea:	6078      	str	r0, [r7, #4]
 81150ec:	6039      	str	r1, [r7, #0]
  lwip_init();
 81150ee:	f7f7 fd15 	bl	810cb1c <lwip_init>

  tcpip_init_done = initfunc;
 81150f2:	4a17      	ldr	r2, [pc, #92]	@ (8115150 <tcpip_init+0x6c>)
 81150f4:	687b      	ldr	r3, [r7, #4]
 81150f6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 81150f8:	4a16      	ldr	r2, [pc, #88]	@ (8115154 <tcpip_init+0x70>)
 81150fa:	683b      	ldr	r3, [r7, #0]
 81150fc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 81150fe:	2106      	movs	r1, #6
 8115100:	4815      	ldr	r0, [pc, #84]	@ (8115158 <tcpip_init+0x74>)
 8115102:	f7fa fc6b 	bl	810f9dc <sys_mbox_new>
 8115106:	4603      	mov	r3, r0
 8115108:	2b00      	cmp	r3, #0
 811510a:	d006      	beq.n	811511a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 811510c:	4b13      	ldr	r3, [pc, #76]	@ (811515c <tcpip_init+0x78>)
 811510e:	f240 2261 	movw	r2, #609	@ 0x261
 8115112:	4913      	ldr	r1, [pc, #76]	@ (8115160 <tcpip_init+0x7c>)
 8115114:	4813      	ldr	r0, [pc, #76]	@ (8115164 <tcpip_init+0x80>)
 8115116:	f000 fe33 	bl	8115d80 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 811511a:	4813      	ldr	r0, [pc, #76]	@ (8115168 <tcpip_init+0x84>)
 811511c:	f7fa fce0 	bl	810fae0 <sys_mutex_new>
 8115120:	4603      	mov	r3, r0
 8115122:	2b00      	cmp	r3, #0
 8115124:	d006      	beq.n	8115134 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8115126:	4b0d      	ldr	r3, [pc, #52]	@ (811515c <tcpip_init+0x78>)
 8115128:	f240 2265 	movw	r2, #613	@ 0x265
 811512c:	490f      	ldr	r1, [pc, #60]	@ (811516c <tcpip_init+0x88>)
 811512e:	480d      	ldr	r0, [pc, #52]	@ (8115164 <tcpip_init+0x80>)
 8115130:	f000 fe26 	bl	8115d80 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8115134:	2318      	movs	r3, #24
 8115136:	9300      	str	r3, [sp, #0]
 8115138:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 811513c:	2200      	movs	r2, #0
 811513e:	490c      	ldr	r1, [pc, #48]	@ (8115170 <tcpip_init+0x8c>)
 8115140:	480c      	ldr	r0, [pc, #48]	@ (8115174 <tcpip_init+0x90>)
 8115142:	f7fa fcff 	bl	810fb44 <sys_thread_new>
}
 8115146:	bf00      	nop
 8115148:	3708      	adds	r7, #8
 811514a:	46bd      	mov	sp, r7
 811514c:	bd80      	pop	{r7, pc}
 811514e:	bf00      	nop
 8115150:	10011c9c 	.word	0x10011c9c
 8115154:	10011ca0 	.word	0x10011ca0
 8115158:	10011ca4 	.word	0x10011ca4
 811515c:	081194b4 	.word	0x081194b4
 8115160:	0811957c 	.word	0x0811957c
 8115164:	08119544 	.word	0x08119544
 8115168:	10011ca8 	.word	0x10011ca8
 811516c:	081195a0 	.word	0x081195a0
 8115170:	08114ea1 	.word	0x08114ea1
 8115174:	081195c4 	.word	0x081195c4

08115178 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8115178:	b580      	push	{r7, lr}
 811517a:	b082      	sub	sp, #8
 811517c:	af00      	add	r7, sp, #0
 811517e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8115180:	f7fa fd68 	bl	810fc54 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8115184:	4b0a      	ldr	r3, [pc, #40]	@ (81151b0 <tcpip_tcp_timer+0x38>)
 8115186:	681b      	ldr	r3, [r3, #0]
 8115188:	2b00      	cmp	r3, #0
 811518a:	d103      	bne.n	8115194 <tcpip_tcp_timer+0x1c>
 811518c:	4b09      	ldr	r3, [pc, #36]	@ (81151b4 <tcpip_tcp_timer+0x3c>)
 811518e:	681b      	ldr	r3, [r3, #0]
 8115190:	2b00      	cmp	r3, #0
 8115192:	d005      	beq.n	81151a0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8115194:	2200      	movs	r2, #0
 8115196:	4908      	ldr	r1, [pc, #32]	@ (81151b8 <tcpip_tcp_timer+0x40>)
 8115198:	20fa      	movs	r0, #250	@ 0xfa
 811519a:	f000 f8f3 	bl	8115384 <sys_timeout>
 811519e:	e003      	b.n	81151a8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 81151a0:	4b06      	ldr	r3, [pc, #24]	@ (81151bc <tcpip_tcp_timer+0x44>)
 81151a2:	2200      	movs	r2, #0
 81151a4:	601a      	str	r2, [r3, #0]
  }
}
 81151a6:	bf00      	nop
 81151a8:	bf00      	nop
 81151aa:	3708      	adds	r7, #8
 81151ac:	46bd      	mov	sp, r7
 81151ae:	bd80      	pop	{r7, pc}
 81151b0:	10011c58 	.word	0x10011c58
 81151b4:	10011c5c 	.word	0x10011c5c
 81151b8:	08115179 	.word	0x08115179
 81151bc:	10011cb4 	.word	0x10011cb4

081151c0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 81151c0:	b580      	push	{r7, lr}
 81151c2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 81151c4:	4b0a      	ldr	r3, [pc, #40]	@ (81151f0 <tcp_timer_needed+0x30>)
 81151c6:	681b      	ldr	r3, [r3, #0]
 81151c8:	2b00      	cmp	r3, #0
 81151ca:	d10f      	bne.n	81151ec <tcp_timer_needed+0x2c>
 81151cc:	4b09      	ldr	r3, [pc, #36]	@ (81151f4 <tcp_timer_needed+0x34>)
 81151ce:	681b      	ldr	r3, [r3, #0]
 81151d0:	2b00      	cmp	r3, #0
 81151d2:	d103      	bne.n	81151dc <tcp_timer_needed+0x1c>
 81151d4:	4b08      	ldr	r3, [pc, #32]	@ (81151f8 <tcp_timer_needed+0x38>)
 81151d6:	681b      	ldr	r3, [r3, #0]
 81151d8:	2b00      	cmp	r3, #0
 81151da:	d007      	beq.n	81151ec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 81151dc:	4b04      	ldr	r3, [pc, #16]	@ (81151f0 <tcp_timer_needed+0x30>)
 81151de:	2201      	movs	r2, #1
 81151e0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 81151e2:	2200      	movs	r2, #0
 81151e4:	4905      	ldr	r1, [pc, #20]	@ (81151fc <tcp_timer_needed+0x3c>)
 81151e6:	20fa      	movs	r0, #250	@ 0xfa
 81151e8:	f000 f8cc 	bl	8115384 <sys_timeout>
  }
}
 81151ec:	bf00      	nop
 81151ee:	bd80      	pop	{r7, pc}
 81151f0:	10011cb4 	.word	0x10011cb4
 81151f4:	10011c58 	.word	0x10011c58
 81151f8:	10011c5c 	.word	0x10011c5c
 81151fc:	08115179 	.word	0x08115179

08115200 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8115200:	b580      	push	{r7, lr}
 8115202:	b086      	sub	sp, #24
 8115204:	af00      	add	r7, sp, #0
 8115206:	60f8      	str	r0, [r7, #12]
 8115208:	60b9      	str	r1, [r7, #8]
 811520a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 811520c:	200a      	movs	r0, #10
 811520e:	f7f9 fa31 	bl	810e674 <memp_malloc>
 8115212:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8115214:	693b      	ldr	r3, [r7, #16]
 8115216:	2b00      	cmp	r3, #0
 8115218:	d109      	bne.n	811522e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 811521a:	693b      	ldr	r3, [r7, #16]
 811521c:	2b00      	cmp	r3, #0
 811521e:	d151      	bne.n	81152c4 <sys_timeout_abs+0xc4>
 8115220:	4b2a      	ldr	r3, [pc, #168]	@ (81152cc <sys_timeout_abs+0xcc>)
 8115222:	22be      	movs	r2, #190	@ 0xbe
 8115224:	492a      	ldr	r1, [pc, #168]	@ (81152d0 <sys_timeout_abs+0xd0>)
 8115226:	482b      	ldr	r0, [pc, #172]	@ (81152d4 <sys_timeout_abs+0xd4>)
 8115228:	f000 fdaa 	bl	8115d80 <iprintf>
    return;
 811522c:	e04a      	b.n	81152c4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 811522e:	693b      	ldr	r3, [r7, #16]
 8115230:	2200      	movs	r2, #0
 8115232:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8115234:	693b      	ldr	r3, [r7, #16]
 8115236:	68ba      	ldr	r2, [r7, #8]
 8115238:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 811523a:	693b      	ldr	r3, [r7, #16]
 811523c:	687a      	ldr	r2, [r7, #4]
 811523e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8115240:	693b      	ldr	r3, [r7, #16]
 8115242:	68fa      	ldr	r2, [r7, #12]
 8115244:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8115246:	4b24      	ldr	r3, [pc, #144]	@ (81152d8 <sys_timeout_abs+0xd8>)
 8115248:	681b      	ldr	r3, [r3, #0]
 811524a:	2b00      	cmp	r3, #0
 811524c:	d103      	bne.n	8115256 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 811524e:	4a22      	ldr	r2, [pc, #136]	@ (81152d8 <sys_timeout_abs+0xd8>)
 8115250:	693b      	ldr	r3, [r7, #16]
 8115252:	6013      	str	r3, [r2, #0]
    return;
 8115254:	e037      	b.n	81152c6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8115256:	693b      	ldr	r3, [r7, #16]
 8115258:	685a      	ldr	r2, [r3, #4]
 811525a:	4b1f      	ldr	r3, [pc, #124]	@ (81152d8 <sys_timeout_abs+0xd8>)
 811525c:	681b      	ldr	r3, [r3, #0]
 811525e:	685b      	ldr	r3, [r3, #4]
 8115260:	1ad3      	subs	r3, r2, r3
 8115262:	0fdb      	lsrs	r3, r3, #31
 8115264:	f003 0301 	and.w	r3, r3, #1
 8115268:	b2db      	uxtb	r3, r3
 811526a:	2b00      	cmp	r3, #0
 811526c:	d007      	beq.n	811527e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 811526e:	4b1a      	ldr	r3, [pc, #104]	@ (81152d8 <sys_timeout_abs+0xd8>)
 8115270:	681a      	ldr	r2, [r3, #0]
 8115272:	693b      	ldr	r3, [r7, #16]
 8115274:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8115276:	4a18      	ldr	r2, [pc, #96]	@ (81152d8 <sys_timeout_abs+0xd8>)
 8115278:	693b      	ldr	r3, [r7, #16]
 811527a:	6013      	str	r3, [r2, #0]
 811527c:	e023      	b.n	81152c6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 811527e:	4b16      	ldr	r3, [pc, #88]	@ (81152d8 <sys_timeout_abs+0xd8>)
 8115280:	681b      	ldr	r3, [r3, #0]
 8115282:	617b      	str	r3, [r7, #20]
 8115284:	e01a      	b.n	81152bc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8115286:	697b      	ldr	r3, [r7, #20]
 8115288:	681b      	ldr	r3, [r3, #0]
 811528a:	2b00      	cmp	r3, #0
 811528c:	d00b      	beq.n	81152a6 <sys_timeout_abs+0xa6>
 811528e:	693b      	ldr	r3, [r7, #16]
 8115290:	685a      	ldr	r2, [r3, #4]
 8115292:	697b      	ldr	r3, [r7, #20]
 8115294:	681b      	ldr	r3, [r3, #0]
 8115296:	685b      	ldr	r3, [r3, #4]
 8115298:	1ad3      	subs	r3, r2, r3
 811529a:	0fdb      	lsrs	r3, r3, #31
 811529c:	f003 0301 	and.w	r3, r3, #1
 81152a0:	b2db      	uxtb	r3, r3
 81152a2:	2b00      	cmp	r3, #0
 81152a4:	d007      	beq.n	81152b6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 81152a6:	697b      	ldr	r3, [r7, #20]
 81152a8:	681a      	ldr	r2, [r3, #0]
 81152aa:	693b      	ldr	r3, [r7, #16]
 81152ac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 81152ae:	697b      	ldr	r3, [r7, #20]
 81152b0:	693a      	ldr	r2, [r7, #16]
 81152b2:	601a      	str	r2, [r3, #0]
        break;
 81152b4:	e007      	b.n	81152c6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 81152b6:	697b      	ldr	r3, [r7, #20]
 81152b8:	681b      	ldr	r3, [r3, #0]
 81152ba:	617b      	str	r3, [r7, #20]
 81152bc:	697b      	ldr	r3, [r7, #20]
 81152be:	2b00      	cmp	r3, #0
 81152c0:	d1e1      	bne.n	8115286 <sys_timeout_abs+0x86>
 81152c2:	e000      	b.n	81152c6 <sys_timeout_abs+0xc6>
    return;
 81152c4:	bf00      	nop
      }
    }
  }
}
 81152c6:	3718      	adds	r7, #24
 81152c8:	46bd      	mov	sp, r7
 81152ca:	bd80      	pop	{r7, pc}
 81152cc:	081195d4 	.word	0x081195d4
 81152d0:	08119648 	.word	0x08119648
 81152d4:	08119688 	.word	0x08119688
 81152d8:	10011cac 	.word	0x10011cac

081152dc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 81152dc:	b580      	push	{r7, lr}
 81152de:	b086      	sub	sp, #24
 81152e0:	af00      	add	r7, sp, #0
 81152e2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 81152e4:	687b      	ldr	r3, [r7, #4]
 81152e6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 81152e8:	697b      	ldr	r3, [r7, #20]
 81152ea:	685b      	ldr	r3, [r3, #4]
 81152ec:	4798      	blx	r3

  now = sys_now();
 81152ee:	f7ee fccb 	bl	8103c88 <sys_now>
 81152f2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 81152f4:	697b      	ldr	r3, [r7, #20]
 81152f6:	681a      	ldr	r2, [r3, #0]
 81152f8:	4b0f      	ldr	r3, [pc, #60]	@ (8115338 <lwip_cyclic_timer+0x5c>)
 81152fa:	681b      	ldr	r3, [r3, #0]
 81152fc:	4413      	add	r3, r2
 81152fe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8115300:	68fa      	ldr	r2, [r7, #12]
 8115302:	693b      	ldr	r3, [r7, #16]
 8115304:	1ad3      	subs	r3, r2, r3
 8115306:	0fdb      	lsrs	r3, r3, #31
 8115308:	f003 0301 	and.w	r3, r3, #1
 811530c:	b2db      	uxtb	r3, r3
 811530e:	2b00      	cmp	r3, #0
 8115310:	d009      	beq.n	8115326 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8115312:	697b      	ldr	r3, [r7, #20]
 8115314:	681a      	ldr	r2, [r3, #0]
 8115316:	693b      	ldr	r3, [r7, #16]
 8115318:	4413      	add	r3, r2
 811531a:	687a      	ldr	r2, [r7, #4]
 811531c:	4907      	ldr	r1, [pc, #28]	@ (811533c <lwip_cyclic_timer+0x60>)
 811531e:	4618      	mov	r0, r3
 8115320:	f7ff ff6e 	bl	8115200 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8115324:	e004      	b.n	8115330 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8115326:	687a      	ldr	r2, [r7, #4]
 8115328:	4904      	ldr	r1, [pc, #16]	@ (811533c <lwip_cyclic_timer+0x60>)
 811532a:	68f8      	ldr	r0, [r7, #12]
 811532c:	f7ff ff68 	bl	8115200 <sys_timeout_abs>
}
 8115330:	bf00      	nop
 8115332:	3718      	adds	r7, #24
 8115334:	46bd      	mov	sp, r7
 8115336:	bd80      	pop	{r7, pc}
 8115338:	10011cb0 	.word	0x10011cb0
 811533c:	081152dd 	.word	0x081152dd

08115340 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8115340:	b580      	push	{r7, lr}
 8115342:	b082      	sub	sp, #8
 8115344:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8115346:	2301      	movs	r3, #1
 8115348:	607b      	str	r3, [r7, #4]
 811534a:	e00e      	b.n	811536a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 811534c:	4a0b      	ldr	r2, [pc, #44]	@ (811537c <sys_timeouts_init+0x3c>)
 811534e:	687b      	ldr	r3, [r7, #4]
 8115350:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8115354:	687b      	ldr	r3, [r7, #4]
 8115356:	00db      	lsls	r3, r3, #3
 8115358:	4a08      	ldr	r2, [pc, #32]	@ (811537c <sys_timeouts_init+0x3c>)
 811535a:	4413      	add	r3, r2
 811535c:	461a      	mov	r2, r3
 811535e:	4908      	ldr	r1, [pc, #32]	@ (8115380 <sys_timeouts_init+0x40>)
 8115360:	f000 f810 	bl	8115384 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8115364:	687b      	ldr	r3, [r7, #4]
 8115366:	3301      	adds	r3, #1
 8115368:	607b      	str	r3, [r7, #4]
 811536a:	687b      	ldr	r3, [r7, #4]
 811536c:	2b02      	cmp	r3, #2
 811536e:	d9ed      	bls.n	811534c <sys_timeouts_init+0xc>
  }
}
 8115370:	bf00      	nop
 8115372:	bf00      	nop
 8115374:	3708      	adds	r7, #8
 8115376:	46bd      	mov	sp, r7
 8115378:	bd80      	pop	{r7, pc}
 811537a:	bf00      	nop
 811537c:	08119c38 	.word	0x08119c38
 8115380:	081152dd 	.word	0x081152dd

08115384 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8115384:	b580      	push	{r7, lr}
 8115386:	b086      	sub	sp, #24
 8115388:	af00      	add	r7, sp, #0
 811538a:	60f8      	str	r0, [r7, #12]
 811538c:	60b9      	str	r1, [r7, #8]
 811538e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8115390:	68fb      	ldr	r3, [r7, #12]
 8115392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8115396:	d306      	bcc.n	81153a6 <sys_timeout+0x22>
 8115398:	4b0a      	ldr	r3, [pc, #40]	@ (81153c4 <sys_timeout+0x40>)
 811539a:	f240 1229 	movw	r2, #297	@ 0x129
 811539e:	490a      	ldr	r1, [pc, #40]	@ (81153c8 <sys_timeout+0x44>)
 81153a0:	480a      	ldr	r0, [pc, #40]	@ (81153cc <sys_timeout+0x48>)
 81153a2:	f000 fced 	bl	8115d80 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 81153a6:	f7ee fc6f 	bl	8103c88 <sys_now>
 81153aa:	4602      	mov	r2, r0
 81153ac:	68fb      	ldr	r3, [r7, #12]
 81153ae:	4413      	add	r3, r2
 81153b0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 81153b2:	687a      	ldr	r2, [r7, #4]
 81153b4:	68b9      	ldr	r1, [r7, #8]
 81153b6:	6978      	ldr	r0, [r7, #20]
 81153b8:	f7ff ff22 	bl	8115200 <sys_timeout_abs>
#endif
}
 81153bc:	bf00      	nop
 81153be:	3718      	adds	r7, #24
 81153c0:	46bd      	mov	sp, r7
 81153c2:	bd80      	pop	{r7, pc}
 81153c4:	081195d4 	.word	0x081195d4
 81153c8:	081196b0 	.word	0x081196b0
 81153cc:	08119688 	.word	0x08119688

081153d0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 81153d0:	b580      	push	{r7, lr}
 81153d2:	b084      	sub	sp, #16
 81153d4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 81153d6:	f7ee fc57 	bl	8103c88 <sys_now>
 81153da:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 81153dc:	4b17      	ldr	r3, [pc, #92]	@ (811543c <sys_check_timeouts+0x6c>)
 81153de:	681b      	ldr	r3, [r3, #0]
 81153e0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 81153e2:	68bb      	ldr	r3, [r7, #8]
 81153e4:	2b00      	cmp	r3, #0
 81153e6:	d022      	beq.n	811542e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 81153e8:	68bb      	ldr	r3, [r7, #8]
 81153ea:	685b      	ldr	r3, [r3, #4]
 81153ec:	68fa      	ldr	r2, [r7, #12]
 81153ee:	1ad3      	subs	r3, r2, r3
 81153f0:	0fdb      	lsrs	r3, r3, #31
 81153f2:	f003 0301 	and.w	r3, r3, #1
 81153f6:	b2db      	uxtb	r3, r3
 81153f8:	2b00      	cmp	r3, #0
 81153fa:	d11a      	bne.n	8115432 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 81153fc:	68bb      	ldr	r3, [r7, #8]
 81153fe:	681b      	ldr	r3, [r3, #0]
 8115400:	4a0e      	ldr	r2, [pc, #56]	@ (811543c <sys_check_timeouts+0x6c>)
 8115402:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8115404:	68bb      	ldr	r3, [r7, #8]
 8115406:	689b      	ldr	r3, [r3, #8]
 8115408:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 811540a:	68bb      	ldr	r3, [r7, #8]
 811540c:	68db      	ldr	r3, [r3, #12]
 811540e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8115410:	68bb      	ldr	r3, [r7, #8]
 8115412:	685b      	ldr	r3, [r3, #4]
 8115414:	4a0a      	ldr	r2, [pc, #40]	@ (8115440 <sys_check_timeouts+0x70>)
 8115416:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8115418:	68b9      	ldr	r1, [r7, #8]
 811541a:	200a      	movs	r0, #10
 811541c:	f7f9 f9a0 	bl	810e760 <memp_free>
    if (handler != NULL) {
 8115420:	687b      	ldr	r3, [r7, #4]
 8115422:	2b00      	cmp	r3, #0
 8115424:	d0da      	beq.n	81153dc <sys_check_timeouts+0xc>
      handler(arg);
 8115426:	687b      	ldr	r3, [r7, #4]
 8115428:	6838      	ldr	r0, [r7, #0]
 811542a:	4798      	blx	r3
  do {
 811542c:	e7d6      	b.n	81153dc <sys_check_timeouts+0xc>
      return;
 811542e:	bf00      	nop
 8115430:	e000      	b.n	8115434 <sys_check_timeouts+0x64>
      return;
 8115432:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8115434:	3710      	adds	r7, #16
 8115436:	46bd      	mov	sp, r7
 8115438:	bd80      	pop	{r7, pc}
 811543a:	bf00      	nop
 811543c:	10011cac 	.word	0x10011cac
 8115440:	10011cb0 	.word	0x10011cb0

08115444 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8115444:	b580      	push	{r7, lr}
 8115446:	b082      	sub	sp, #8
 8115448:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 811544a:	4b16      	ldr	r3, [pc, #88]	@ (81154a4 <sys_timeouts_sleeptime+0x60>)
 811544c:	681b      	ldr	r3, [r3, #0]
 811544e:	2b00      	cmp	r3, #0
 8115450:	d102      	bne.n	8115458 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8115452:	f04f 33ff 	mov.w	r3, #4294967295
 8115456:	e020      	b.n	811549a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8115458:	f7ee fc16 	bl	8103c88 <sys_now>
 811545c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 811545e:	4b11      	ldr	r3, [pc, #68]	@ (81154a4 <sys_timeouts_sleeptime+0x60>)
 8115460:	681b      	ldr	r3, [r3, #0]
 8115462:	685a      	ldr	r2, [r3, #4]
 8115464:	687b      	ldr	r3, [r7, #4]
 8115466:	1ad3      	subs	r3, r2, r3
 8115468:	0fdb      	lsrs	r3, r3, #31
 811546a:	f003 0301 	and.w	r3, r3, #1
 811546e:	b2db      	uxtb	r3, r3
 8115470:	2b00      	cmp	r3, #0
 8115472:	d001      	beq.n	8115478 <sys_timeouts_sleeptime+0x34>
    return 0;
 8115474:	2300      	movs	r3, #0
 8115476:	e010      	b.n	811549a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8115478:	4b0a      	ldr	r3, [pc, #40]	@ (81154a4 <sys_timeouts_sleeptime+0x60>)
 811547a:	681b      	ldr	r3, [r3, #0]
 811547c:	685a      	ldr	r2, [r3, #4]
 811547e:	687b      	ldr	r3, [r7, #4]
 8115480:	1ad3      	subs	r3, r2, r3
 8115482:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8115484:	683b      	ldr	r3, [r7, #0]
 8115486:	2b00      	cmp	r3, #0
 8115488:	da06      	bge.n	8115498 <sys_timeouts_sleeptime+0x54>
 811548a:	4b07      	ldr	r3, [pc, #28]	@ (81154a8 <sys_timeouts_sleeptime+0x64>)
 811548c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8115490:	4906      	ldr	r1, [pc, #24]	@ (81154ac <sys_timeouts_sleeptime+0x68>)
 8115492:	4807      	ldr	r0, [pc, #28]	@ (81154b0 <sys_timeouts_sleeptime+0x6c>)
 8115494:	f000 fc74 	bl	8115d80 <iprintf>
    return ret;
 8115498:	683b      	ldr	r3, [r7, #0]
  }
}
 811549a:	4618      	mov	r0, r3
 811549c:	3708      	adds	r7, #8
 811549e:	46bd      	mov	sp, r7
 81154a0:	bd80      	pop	{r7, pc}
 81154a2:	bf00      	nop
 81154a4:	10011cac 	.word	0x10011cac
 81154a8:	081195d4 	.word	0x081195d4
 81154ac:	081196e8 	.word	0x081196e8
 81154b0:	08119688 	.word	0x08119688

081154b4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 81154b4:	b580      	push	{r7, lr}
 81154b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 81154b8:	f000 fb62 	bl	8115b80 <rand>
 81154bc:	4603      	mov	r3, r0
 81154be:	b29b      	uxth	r3, r3
 81154c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 81154c4:	b29b      	uxth	r3, r3
 81154c6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 81154ca:	b29a      	uxth	r2, r3
 81154cc:	4b01      	ldr	r3, [pc, #4]	@ (81154d4 <udp_init+0x20>)
 81154ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 81154d0:	bf00      	nop
 81154d2:	bd80      	pop	{r7, pc}
 81154d4:	10000030 	.word	0x10000030

081154d8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 81154d8:	b580      	push	{r7, lr}
 81154da:	b084      	sub	sp, #16
 81154dc:	af00      	add	r7, sp, #0
 81154de:	60f8      	str	r0, [r7, #12]
 81154e0:	60b9      	str	r1, [r7, #8]
 81154e2:	4613      	mov	r3, r2
 81154e4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 81154e6:	68fb      	ldr	r3, [r7, #12]
 81154e8:	2b00      	cmp	r3, #0
 81154ea:	d105      	bne.n	81154f8 <udp_input_local_match+0x20>
 81154ec:	4b27      	ldr	r3, [pc, #156]	@ (811558c <udp_input_local_match+0xb4>)
 81154ee:	2287      	movs	r2, #135	@ 0x87
 81154f0:	4927      	ldr	r1, [pc, #156]	@ (8115590 <udp_input_local_match+0xb8>)
 81154f2:	4828      	ldr	r0, [pc, #160]	@ (8115594 <udp_input_local_match+0xbc>)
 81154f4:	f000 fc44 	bl	8115d80 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 81154f8:	68bb      	ldr	r3, [r7, #8]
 81154fa:	2b00      	cmp	r3, #0
 81154fc:	d105      	bne.n	811550a <udp_input_local_match+0x32>
 81154fe:	4b23      	ldr	r3, [pc, #140]	@ (811558c <udp_input_local_match+0xb4>)
 8115500:	2288      	movs	r2, #136	@ 0x88
 8115502:	4925      	ldr	r1, [pc, #148]	@ (8115598 <udp_input_local_match+0xc0>)
 8115504:	4823      	ldr	r0, [pc, #140]	@ (8115594 <udp_input_local_match+0xbc>)
 8115506:	f000 fc3b 	bl	8115d80 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811550a:	68fb      	ldr	r3, [r7, #12]
 811550c:	7a1b      	ldrb	r3, [r3, #8]
 811550e:	2b00      	cmp	r3, #0
 8115510:	d00b      	beq.n	811552a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8115512:	68fb      	ldr	r3, [r7, #12]
 8115514:	7a1a      	ldrb	r2, [r3, #8]
 8115516:	4b21      	ldr	r3, [pc, #132]	@ (811559c <udp_input_local_match+0xc4>)
 8115518:	685b      	ldr	r3, [r3, #4]
 811551a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811551e:	3301      	adds	r3, #1
 8115520:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8115522:	429a      	cmp	r2, r3
 8115524:	d001      	beq.n	811552a <udp_input_local_match+0x52>
    return 0;
 8115526:	2300      	movs	r3, #0
 8115528:	e02b      	b.n	8115582 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 811552a:	79fb      	ldrb	r3, [r7, #7]
 811552c:	2b00      	cmp	r3, #0
 811552e:	d018      	beq.n	8115562 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8115530:	68fb      	ldr	r3, [r7, #12]
 8115532:	2b00      	cmp	r3, #0
 8115534:	d013      	beq.n	811555e <udp_input_local_match+0x86>
 8115536:	68fb      	ldr	r3, [r7, #12]
 8115538:	681b      	ldr	r3, [r3, #0]
 811553a:	2b00      	cmp	r3, #0
 811553c:	d00f      	beq.n	811555e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 811553e:	4b17      	ldr	r3, [pc, #92]	@ (811559c <udp_input_local_match+0xc4>)
 8115540:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8115542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115546:	d00a      	beq.n	811555e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8115548:	68fb      	ldr	r3, [r7, #12]
 811554a:	681a      	ldr	r2, [r3, #0]
 811554c:	4b13      	ldr	r3, [pc, #76]	@ (811559c <udp_input_local_match+0xc4>)
 811554e:	695b      	ldr	r3, [r3, #20]
 8115550:	405a      	eors	r2, r3
 8115552:	68bb      	ldr	r3, [r7, #8]
 8115554:	3308      	adds	r3, #8
 8115556:	681b      	ldr	r3, [r3, #0]
 8115558:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 811555a:	2b00      	cmp	r3, #0
 811555c:	d110      	bne.n	8115580 <udp_input_local_match+0xa8>
          return 1;
 811555e:	2301      	movs	r3, #1
 8115560:	e00f      	b.n	8115582 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8115562:	68fb      	ldr	r3, [r7, #12]
 8115564:	2b00      	cmp	r3, #0
 8115566:	d009      	beq.n	811557c <udp_input_local_match+0xa4>
 8115568:	68fb      	ldr	r3, [r7, #12]
 811556a:	681b      	ldr	r3, [r3, #0]
 811556c:	2b00      	cmp	r3, #0
 811556e:	d005      	beq.n	811557c <udp_input_local_match+0xa4>
 8115570:	68fb      	ldr	r3, [r7, #12]
 8115572:	681a      	ldr	r2, [r3, #0]
 8115574:	4b09      	ldr	r3, [pc, #36]	@ (811559c <udp_input_local_match+0xc4>)
 8115576:	695b      	ldr	r3, [r3, #20]
 8115578:	429a      	cmp	r2, r3
 811557a:	d101      	bne.n	8115580 <udp_input_local_match+0xa8>
        return 1;
 811557c:	2301      	movs	r3, #1
 811557e:	e000      	b.n	8115582 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8115580:	2300      	movs	r3, #0
}
 8115582:	4618      	mov	r0, r3
 8115584:	3710      	adds	r7, #16
 8115586:	46bd      	mov	sp, r7
 8115588:	bd80      	pop	{r7, pc}
 811558a:	bf00      	nop
 811558c:	081196fc 	.word	0x081196fc
 8115590:	0811976c 	.word	0x0811976c
 8115594:	08119790 	.word	0x08119790
 8115598:	081197b8 	.word	0x081197b8
 811559c:	1000b17c 	.word	0x1000b17c

081155a0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 81155a0:	b590      	push	{r4, r7, lr}
 81155a2:	b08d      	sub	sp, #52	@ 0x34
 81155a4:	af02      	add	r7, sp, #8
 81155a6:	6078      	str	r0, [r7, #4]
 81155a8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 81155aa:	2300      	movs	r3, #0
 81155ac:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 81155ae:	687b      	ldr	r3, [r7, #4]
 81155b0:	2b00      	cmp	r3, #0
 81155b2:	d105      	bne.n	81155c0 <udp_input+0x20>
 81155b4:	4b7c      	ldr	r3, [pc, #496]	@ (81157a8 <udp_input+0x208>)
 81155b6:	22cf      	movs	r2, #207	@ 0xcf
 81155b8:	497c      	ldr	r1, [pc, #496]	@ (81157ac <udp_input+0x20c>)
 81155ba:	487d      	ldr	r0, [pc, #500]	@ (81157b0 <udp_input+0x210>)
 81155bc:	f000 fbe0 	bl	8115d80 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 81155c0:	683b      	ldr	r3, [r7, #0]
 81155c2:	2b00      	cmp	r3, #0
 81155c4:	d105      	bne.n	81155d2 <udp_input+0x32>
 81155c6:	4b78      	ldr	r3, [pc, #480]	@ (81157a8 <udp_input+0x208>)
 81155c8:	22d0      	movs	r2, #208	@ 0xd0
 81155ca:	497a      	ldr	r1, [pc, #488]	@ (81157b4 <udp_input+0x214>)
 81155cc:	4878      	ldr	r0, [pc, #480]	@ (81157b0 <udp_input+0x210>)
 81155ce:	f000 fbd7 	bl	8115d80 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 81155d2:	687b      	ldr	r3, [r7, #4]
 81155d4:	895b      	ldrh	r3, [r3, #10]
 81155d6:	2b07      	cmp	r3, #7
 81155d8:	d803      	bhi.n	81155e2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 81155da:	6878      	ldr	r0, [r7, #4]
 81155dc:	f7f9 ff64 	bl	810f4a8 <pbuf_free>
    goto end;
 81155e0:	e0de      	b.n	81157a0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 81155e2:	687b      	ldr	r3, [r7, #4]
 81155e4:	685b      	ldr	r3, [r3, #4]
 81155e6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 81155e8:	4b73      	ldr	r3, [pc, #460]	@ (81157b8 <udp_input+0x218>)
 81155ea:	695b      	ldr	r3, [r3, #20]
 81155ec:	4a72      	ldr	r2, [pc, #456]	@ (81157b8 <udp_input+0x218>)
 81155ee:	6812      	ldr	r2, [r2, #0]
 81155f0:	4611      	mov	r1, r2
 81155f2:	4618      	mov	r0, r3
 81155f4:	f7f7 fd40 	bl	810d078 <ip4_addr_isbroadcast_u32>
 81155f8:	4603      	mov	r3, r0
 81155fa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 81155fc:	697b      	ldr	r3, [r7, #20]
 81155fe:	881b      	ldrh	r3, [r3, #0]
 8115600:	b29b      	uxth	r3, r3
 8115602:	4618      	mov	r0, r3
 8115604:	f7f5 ffca 	bl	810b59c <lwip_htons>
 8115608:	4603      	mov	r3, r0
 811560a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 811560c:	697b      	ldr	r3, [r7, #20]
 811560e:	885b      	ldrh	r3, [r3, #2]
 8115610:	b29b      	uxth	r3, r3
 8115612:	4618      	mov	r0, r3
 8115614:	f7f5 ffc2 	bl	810b59c <lwip_htons>
 8115618:	4603      	mov	r3, r0
 811561a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 811561c:	2300      	movs	r3, #0
 811561e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8115620:	2300      	movs	r3, #0
 8115622:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8115624:	2300      	movs	r3, #0
 8115626:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8115628:	4b64      	ldr	r3, [pc, #400]	@ (81157bc <udp_input+0x21c>)
 811562a:	681b      	ldr	r3, [r3, #0]
 811562c:	627b      	str	r3, [r7, #36]	@ 0x24
 811562e:	e054      	b.n	81156da <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8115630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115632:	8a5b      	ldrh	r3, [r3, #18]
 8115634:	89fa      	ldrh	r2, [r7, #14]
 8115636:	429a      	cmp	r2, r3
 8115638:	d14a      	bne.n	81156d0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 811563a:	7cfb      	ldrb	r3, [r7, #19]
 811563c:	461a      	mov	r2, r3
 811563e:	6839      	ldr	r1, [r7, #0]
 8115640:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8115642:	f7ff ff49 	bl	81154d8 <udp_input_local_match>
 8115646:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8115648:	2b00      	cmp	r3, #0
 811564a:	d041      	beq.n	81156d0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 811564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811564e:	7c1b      	ldrb	r3, [r3, #16]
 8115650:	f003 0304 	and.w	r3, r3, #4
 8115654:	2b00      	cmp	r3, #0
 8115656:	d11d      	bne.n	8115694 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8115658:	69fb      	ldr	r3, [r7, #28]
 811565a:	2b00      	cmp	r3, #0
 811565c:	d102      	bne.n	8115664 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 811565e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115660:	61fb      	str	r3, [r7, #28]
 8115662:	e017      	b.n	8115694 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8115664:	7cfb      	ldrb	r3, [r7, #19]
 8115666:	2b00      	cmp	r3, #0
 8115668:	d014      	beq.n	8115694 <udp_input+0xf4>
 811566a:	4b53      	ldr	r3, [pc, #332]	@ (81157b8 <udp_input+0x218>)
 811566c:	695b      	ldr	r3, [r3, #20]
 811566e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8115672:	d10f      	bne.n	8115694 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8115674:	69fb      	ldr	r3, [r7, #28]
 8115676:	681a      	ldr	r2, [r3, #0]
 8115678:	683b      	ldr	r3, [r7, #0]
 811567a:	3304      	adds	r3, #4
 811567c:	681b      	ldr	r3, [r3, #0]
 811567e:	429a      	cmp	r2, r3
 8115680:	d008      	beq.n	8115694 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8115682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115684:	681a      	ldr	r2, [r3, #0]
 8115686:	683b      	ldr	r3, [r7, #0]
 8115688:	3304      	adds	r3, #4
 811568a:	681b      	ldr	r3, [r3, #0]
 811568c:	429a      	cmp	r2, r3
 811568e:	d101      	bne.n	8115694 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8115690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115692:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8115694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115696:	8a9b      	ldrh	r3, [r3, #20]
 8115698:	8a3a      	ldrh	r2, [r7, #16]
 811569a:	429a      	cmp	r2, r3
 811569c:	d118      	bne.n	81156d0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 811569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81156a0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 81156a2:	2b00      	cmp	r3, #0
 81156a4:	d005      	beq.n	81156b2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 81156a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81156a8:	685a      	ldr	r2, [r3, #4]
 81156aa:	4b43      	ldr	r3, [pc, #268]	@ (81157b8 <udp_input+0x218>)
 81156ac:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 81156ae:	429a      	cmp	r2, r3
 81156b0:	d10e      	bne.n	81156d0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 81156b2:	6a3b      	ldr	r3, [r7, #32]
 81156b4:	2b00      	cmp	r3, #0
 81156b6:	d014      	beq.n	81156e2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 81156b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81156ba:	68da      	ldr	r2, [r3, #12]
 81156bc:	6a3b      	ldr	r3, [r7, #32]
 81156be:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 81156c0:	4b3e      	ldr	r3, [pc, #248]	@ (81157bc <udp_input+0x21c>)
 81156c2:	681a      	ldr	r2, [r3, #0]
 81156c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81156c6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 81156c8:	4a3c      	ldr	r2, [pc, #240]	@ (81157bc <udp_input+0x21c>)
 81156ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81156cc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 81156ce:	e008      	b.n	81156e2 <udp_input+0x142>
      }
    }

    prev = pcb;
 81156d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81156d2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 81156d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81156d6:	68db      	ldr	r3, [r3, #12]
 81156d8:	627b      	str	r3, [r7, #36]	@ 0x24
 81156da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81156dc:	2b00      	cmp	r3, #0
 81156de:	d1a7      	bne.n	8115630 <udp_input+0x90>
 81156e0:	e000      	b.n	81156e4 <udp_input+0x144>
        break;
 81156e2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 81156e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81156e6:	2b00      	cmp	r3, #0
 81156e8:	d101      	bne.n	81156ee <udp_input+0x14e>
    pcb = uncon_pcb;
 81156ea:	69fb      	ldr	r3, [r7, #28]
 81156ec:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 81156ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81156f0:	2b00      	cmp	r3, #0
 81156f2:	d002      	beq.n	81156fa <udp_input+0x15a>
    for_us = 1;
 81156f4:	2301      	movs	r3, #1
 81156f6:	76fb      	strb	r3, [r7, #27]
 81156f8:	e00a      	b.n	8115710 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 81156fa:	683b      	ldr	r3, [r7, #0]
 81156fc:	3304      	adds	r3, #4
 81156fe:	681a      	ldr	r2, [r3, #0]
 8115700:	4b2d      	ldr	r3, [pc, #180]	@ (81157b8 <udp_input+0x218>)
 8115702:	695b      	ldr	r3, [r3, #20]
 8115704:	429a      	cmp	r2, r3
 8115706:	bf0c      	ite	eq
 8115708:	2301      	moveq	r3, #1
 811570a:	2300      	movne	r3, #0
 811570c:	b2db      	uxtb	r3, r3
 811570e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8115710:	7efb      	ldrb	r3, [r7, #27]
 8115712:	2b00      	cmp	r3, #0
 8115714:	d041      	beq.n	811579a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8115716:	2108      	movs	r1, #8
 8115718:	6878      	ldr	r0, [r7, #4]
 811571a:	f7f9 fe3f 	bl	810f39c <pbuf_remove_header>
 811571e:	4603      	mov	r3, r0
 8115720:	2b00      	cmp	r3, #0
 8115722:	d00a      	beq.n	811573a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8115724:	4b20      	ldr	r3, [pc, #128]	@ (81157a8 <udp_input+0x208>)
 8115726:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 811572a:	4925      	ldr	r1, [pc, #148]	@ (81157c0 <udp_input+0x220>)
 811572c:	4820      	ldr	r0, [pc, #128]	@ (81157b0 <udp_input+0x210>)
 811572e:	f000 fb27 	bl	8115d80 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8115732:	6878      	ldr	r0, [r7, #4]
 8115734:	f7f9 feb8 	bl	810f4a8 <pbuf_free>
      goto end;
 8115738:	e032      	b.n	81157a0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 811573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811573c:	2b00      	cmp	r3, #0
 811573e:	d012      	beq.n	8115766 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8115740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115742:	699b      	ldr	r3, [r3, #24]
 8115744:	2b00      	cmp	r3, #0
 8115746:	d00a      	beq.n	811575e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8115748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811574a:	699c      	ldr	r4, [r3, #24]
 811574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811574e:	69d8      	ldr	r0, [r3, #28]
 8115750:	8a3b      	ldrh	r3, [r7, #16]
 8115752:	9300      	str	r3, [sp, #0]
 8115754:	4b1b      	ldr	r3, [pc, #108]	@ (81157c4 <udp_input+0x224>)
 8115756:	687a      	ldr	r2, [r7, #4]
 8115758:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811575a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 811575c:	e021      	b.n	81157a2 <udp_input+0x202>
        pbuf_free(p);
 811575e:	6878      	ldr	r0, [r7, #4]
 8115760:	f7f9 fea2 	bl	810f4a8 <pbuf_free>
        goto end;
 8115764:	e01c      	b.n	81157a0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8115766:	7cfb      	ldrb	r3, [r7, #19]
 8115768:	2b00      	cmp	r3, #0
 811576a:	d112      	bne.n	8115792 <udp_input+0x1f2>
 811576c:	4b12      	ldr	r3, [pc, #72]	@ (81157b8 <udp_input+0x218>)
 811576e:	695b      	ldr	r3, [r3, #20]
 8115770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8115774:	2be0      	cmp	r3, #224	@ 0xe0
 8115776:	d00c      	beq.n	8115792 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8115778:	4b0f      	ldr	r3, [pc, #60]	@ (81157b8 <udp_input+0x218>)
 811577a:	899b      	ldrh	r3, [r3, #12]
 811577c:	3308      	adds	r3, #8
 811577e:	b29b      	uxth	r3, r3
 8115780:	b21b      	sxth	r3, r3
 8115782:	4619      	mov	r1, r3
 8115784:	6878      	ldr	r0, [r7, #4]
 8115786:	f7f9 fe7c 	bl	810f482 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 811578a:	2103      	movs	r1, #3
 811578c:	6878      	ldr	r0, [r7, #4]
 811578e:	f7f7 f875 	bl	810c87c <icmp_dest_unreach>
      pbuf_free(p);
 8115792:	6878      	ldr	r0, [r7, #4]
 8115794:	f7f9 fe88 	bl	810f4a8 <pbuf_free>
  return;
 8115798:	e003      	b.n	81157a2 <udp_input+0x202>
    pbuf_free(p);
 811579a:	6878      	ldr	r0, [r7, #4]
 811579c:	f7f9 fe84 	bl	810f4a8 <pbuf_free>
  return;
 81157a0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 81157a2:	372c      	adds	r7, #44	@ 0x2c
 81157a4:	46bd      	mov	sp, r7
 81157a6:	bd90      	pop	{r4, r7, pc}
 81157a8:	081196fc 	.word	0x081196fc
 81157ac:	081197e0 	.word	0x081197e0
 81157b0:	08119790 	.word	0x08119790
 81157b4:	081197f8 	.word	0x081197f8
 81157b8:	1000b17c 	.word	0x1000b17c
 81157bc:	10011cb8 	.word	0x10011cb8
 81157c0:	08119814 	.word	0x08119814
 81157c4:	1000b18c 	.word	0x1000b18c

081157c8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 81157c8:	b480      	push	{r7}
 81157ca:	b085      	sub	sp, #20
 81157cc:	af00      	add	r7, sp, #0
 81157ce:	6078      	str	r0, [r7, #4]
 81157d0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 81157d2:	687b      	ldr	r3, [r7, #4]
 81157d4:	2b00      	cmp	r3, #0
 81157d6:	d01e      	beq.n	8115816 <udp_netif_ip_addr_changed+0x4e>
 81157d8:	687b      	ldr	r3, [r7, #4]
 81157da:	681b      	ldr	r3, [r3, #0]
 81157dc:	2b00      	cmp	r3, #0
 81157de:	d01a      	beq.n	8115816 <udp_netif_ip_addr_changed+0x4e>
 81157e0:	683b      	ldr	r3, [r7, #0]
 81157e2:	2b00      	cmp	r3, #0
 81157e4:	d017      	beq.n	8115816 <udp_netif_ip_addr_changed+0x4e>
 81157e6:	683b      	ldr	r3, [r7, #0]
 81157e8:	681b      	ldr	r3, [r3, #0]
 81157ea:	2b00      	cmp	r3, #0
 81157ec:	d013      	beq.n	8115816 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 81157ee:	4b0d      	ldr	r3, [pc, #52]	@ (8115824 <udp_netif_ip_addr_changed+0x5c>)
 81157f0:	681b      	ldr	r3, [r3, #0]
 81157f2:	60fb      	str	r3, [r7, #12]
 81157f4:	e00c      	b.n	8115810 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 81157f6:	68fb      	ldr	r3, [r7, #12]
 81157f8:	681a      	ldr	r2, [r3, #0]
 81157fa:	687b      	ldr	r3, [r7, #4]
 81157fc:	681b      	ldr	r3, [r3, #0]
 81157fe:	429a      	cmp	r2, r3
 8115800:	d103      	bne.n	811580a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8115802:	683b      	ldr	r3, [r7, #0]
 8115804:	681a      	ldr	r2, [r3, #0]
 8115806:	68fb      	ldr	r3, [r7, #12]
 8115808:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 811580a:	68fb      	ldr	r3, [r7, #12]
 811580c:	68db      	ldr	r3, [r3, #12]
 811580e:	60fb      	str	r3, [r7, #12]
 8115810:	68fb      	ldr	r3, [r7, #12]
 8115812:	2b00      	cmp	r3, #0
 8115814:	d1ef      	bne.n	81157f6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8115816:	bf00      	nop
 8115818:	3714      	adds	r7, #20
 811581a:	46bd      	mov	sp, r7
 811581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115820:	4770      	bx	lr
 8115822:	bf00      	nop
 8115824:	10011cb8 	.word	0x10011cb8

08115828 <_ZdlPvj>:
 8115828:	f000 b8da 	b.w	81159e0 <_ZdlPv>

0811582c <_Znwj>:
 811582c:	2801      	cmp	r0, #1
 811582e:	bf38      	it	cc
 8115830:	2001      	movcc	r0, #1
 8115832:	b510      	push	{r4, lr}
 8115834:	4604      	mov	r4, r0
 8115836:	4620      	mov	r0, r4
 8115838:	f000 f8e4 	bl	8115a04 <malloc>
 811583c:	b100      	cbz	r0, 8115840 <_Znwj+0x14>
 811583e:	bd10      	pop	{r4, pc}
 8115840:	f000 f8d0 	bl	81159e4 <_ZSt15get_new_handlerv>
 8115844:	b908      	cbnz	r0, 811584a <_Znwj+0x1e>
 8115846:	f000 f8d5 	bl	81159f4 <abort>
 811584a:	4780      	blx	r0
 811584c:	e7f3      	b.n	8115836 <_Znwj+0xa>

0811584e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 811584e:	68c3      	ldr	r3, [r0, #12]
 8115850:	689a      	ldr	r2, [r3, #8]
 8115852:	60c2      	str	r2, [r0, #12]
 8115854:	b510      	push	{r4, lr}
 8115856:	b102      	cbz	r2, 811585a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8115858:	6050      	str	r0, [r2, #4]
 811585a:	6842      	ldr	r2, [r0, #4]
 811585c:	605a      	str	r2, [r3, #4]
 811585e:	680c      	ldr	r4, [r1, #0]
 8115860:	4284      	cmp	r4, r0
 8115862:	d103      	bne.n	811586c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8115864:	600b      	str	r3, [r1, #0]
 8115866:	6098      	str	r0, [r3, #8]
 8115868:	6043      	str	r3, [r0, #4]
 811586a:	bd10      	pop	{r4, pc}
 811586c:	6891      	ldr	r1, [r2, #8]
 811586e:	4281      	cmp	r1, r0
 8115870:	bf0c      	ite	eq
 8115872:	6093      	streq	r3, [r2, #8]
 8115874:	60d3      	strne	r3, [r2, #12]
 8115876:	e7f6      	b.n	8115866 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08115878 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8115878:	6883      	ldr	r3, [r0, #8]
 811587a:	68da      	ldr	r2, [r3, #12]
 811587c:	6082      	str	r2, [r0, #8]
 811587e:	b510      	push	{r4, lr}
 8115880:	b102      	cbz	r2, 8115884 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8115882:	6050      	str	r0, [r2, #4]
 8115884:	6842      	ldr	r2, [r0, #4]
 8115886:	605a      	str	r2, [r3, #4]
 8115888:	680c      	ldr	r4, [r1, #0]
 811588a:	4284      	cmp	r4, r0
 811588c:	d103      	bne.n	8115896 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 811588e:	600b      	str	r3, [r1, #0]
 8115890:	60d8      	str	r0, [r3, #12]
 8115892:	6043      	str	r3, [r0, #4]
 8115894:	bd10      	pop	{r4, pc}
 8115896:	68d1      	ldr	r1, [r2, #12]
 8115898:	4281      	cmp	r1, r0
 811589a:	bf0c      	ite	eq
 811589c:	60d3      	streq	r3, [r2, #12]
 811589e:	6093      	strne	r3, [r2, #8]
 81158a0:	e7f6      	b.n	8115890 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

081158a2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 81158a2:	68c3      	ldr	r3, [r0, #12]
 81158a4:	b123      	cbz	r3, 81158b0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 81158a6:	4618      	mov	r0, r3
 81158a8:	689b      	ldr	r3, [r3, #8]
 81158aa:	2b00      	cmp	r3, #0
 81158ac:	d1fb      	bne.n	81158a6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 81158ae:	4770      	bx	lr
 81158b0:	6843      	ldr	r3, [r0, #4]
 81158b2:	68da      	ldr	r2, [r3, #12]
 81158b4:	4282      	cmp	r2, r0
 81158b6:	d004      	beq.n	81158c2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 81158b8:	68c2      	ldr	r2, [r0, #12]
 81158ba:	4293      	cmp	r3, r2
 81158bc:	bf18      	it	ne
 81158be:	4618      	movne	r0, r3
 81158c0:	4770      	bx	lr
 81158c2:	4618      	mov	r0, r3
 81158c4:	685b      	ldr	r3, [r3, #4]
 81158c6:	e7f4      	b.n	81158b2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

081158c8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 81158c8:	7802      	ldrb	r2, [r0, #0]
 81158ca:	4603      	mov	r3, r0
 81158cc:	b92a      	cbnz	r2, 81158da <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 81158ce:	6842      	ldr	r2, [r0, #4]
 81158d0:	6852      	ldr	r2, [r2, #4]
 81158d2:	4282      	cmp	r2, r0
 81158d4:	d101      	bne.n	81158da <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 81158d6:	68d0      	ldr	r0, [r2, #12]
 81158d8:	4770      	bx	lr
 81158da:	689a      	ldr	r2, [r3, #8]
 81158dc:	b122      	cbz	r2, 81158e8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 81158de:	4610      	mov	r0, r2
 81158e0:	68d2      	ldr	r2, [r2, #12]
 81158e2:	2a00      	cmp	r2, #0
 81158e4:	d1fb      	bne.n	81158de <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 81158e6:	4770      	bx	lr
 81158e8:	6858      	ldr	r0, [r3, #4]
 81158ea:	6882      	ldr	r2, [r0, #8]
 81158ec:	429a      	cmp	r2, r3
 81158ee:	d000      	beq.n	81158f2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 81158f0:	4770      	bx	lr
 81158f2:	4603      	mov	r3, r0
 81158f4:	6840      	ldr	r0, [r0, #4]
 81158f6:	e7f8      	b.n	81158ea <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

081158f8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 81158f8:	f7ff bfd3 	b.w	81158a2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

081158fc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 81158fc:	f7ff bfe4 	b.w	81158c8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08115900 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8115900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8115904:	461d      	mov	r5, r3
 8115906:	1d1f      	adds	r7, r3, #4
 8115908:	2300      	movs	r3, #0
 811590a:	e9c1 3302 	strd	r3, r3, [r1, #8]
 811590e:	460c      	mov	r4, r1
 8115910:	604a      	str	r2, [r1, #4]
 8115912:	700b      	strb	r3, [r1, #0]
 8115914:	b1a0      	cbz	r0, 8115940 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8115916:	4295      	cmp	r5, r2
 8115918:	6091      	str	r1, [r2, #8]
 811591a:	d102      	bne.n	8115922 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 811591c:	6069      	str	r1, [r5, #4]
 811591e:	60ec      	str	r4, [r5, #12]
 8115920:	e003      	b.n	811592a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8115922:	68ab      	ldr	r3, [r5, #8]
 8115924:	4293      	cmp	r3, r2
 8115926:	bf08      	it	eq
 8115928:	60a9      	streq	r1, [r5, #8]
 811592a:	f04f 0900 	mov.w	r9, #0
 811592e:	f04f 0801 	mov.w	r8, #1
 8115932:	686b      	ldr	r3, [r5, #4]
 8115934:	42a3      	cmp	r3, r4
 8115936:	d132      	bne.n	811599e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 8115938:	2201      	movs	r2, #1
 811593a:	701a      	strb	r2, [r3, #0]
 811593c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8115940:	60d1      	str	r1, [r2, #12]
 8115942:	68eb      	ldr	r3, [r5, #12]
 8115944:	4293      	cmp	r3, r2
 8115946:	d1f0      	bne.n	811592a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8115948:	e7e9      	b.n	811591e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 811594a:	68c3      	ldr	r3, [r0, #12]
 811594c:	42a3      	cmp	r3, r4
 811594e:	d103      	bne.n	8115958 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8115950:	4639      	mov	r1, r7
 8115952:	f7ff ff7c 	bl	811584e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8115956:	4604      	mov	r4, r0
 8115958:	6863      	ldr	r3, [r4, #4]
 811595a:	4639      	mov	r1, r7
 811595c:	f883 8000 	strb.w	r8, [r3]
 8115960:	4630      	mov	r0, r6
 8115962:	f886 9000 	strb.w	r9, [r6]
 8115966:	f7ff ff87 	bl	8115878 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 811596a:	e7e2      	b.n	8115932 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 811596c:	b133      	cbz	r3, 811597c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 811596e:	781a      	ldrb	r2, [r3, #0]
 8115970:	b922      	cbnz	r2, 811597c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8115972:	f880 8000 	strb.w	r8, [r0]
 8115976:	f883 8000 	strb.w	r8, [r3]
 811597a:	e021      	b.n	81159c0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 811597c:	6883      	ldr	r3, [r0, #8]
 811597e:	42a3      	cmp	r3, r4
 8115980:	d103      	bne.n	811598a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 8115982:	4639      	mov	r1, r7
 8115984:	f7ff ff78 	bl	8115878 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8115988:	4604      	mov	r4, r0
 811598a:	6863      	ldr	r3, [r4, #4]
 811598c:	4639      	mov	r1, r7
 811598e:	f883 8000 	strb.w	r8, [r3]
 8115992:	4630      	mov	r0, r6
 8115994:	f886 9000 	strb.w	r9, [r6]
 8115998:	f7ff ff59 	bl	811584e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 811599c:	e7c9      	b.n	8115932 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 811599e:	6860      	ldr	r0, [r4, #4]
 81159a0:	7802      	ldrb	r2, [r0, #0]
 81159a2:	2a00      	cmp	r2, #0
 81159a4:	d1c8      	bne.n	8115938 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 81159a6:	6846      	ldr	r6, [r0, #4]
 81159a8:	68b3      	ldr	r3, [r6, #8]
 81159aa:	4283      	cmp	r3, r0
 81159ac:	d1de      	bne.n	811596c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 81159ae:	68f2      	ldr	r2, [r6, #12]
 81159b0:	2a00      	cmp	r2, #0
 81159b2:	d0ca      	beq.n	811594a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 81159b4:	7811      	ldrb	r1, [r2, #0]
 81159b6:	2900      	cmp	r1, #0
 81159b8:	d1c7      	bne.n	811594a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 81159ba:	2101      	movs	r1, #1
 81159bc:	7019      	strb	r1, [r3, #0]
 81159be:	7011      	strb	r1, [r2, #0]
 81159c0:	f886 9000 	strb.w	r9, [r6]
 81159c4:	4634      	mov	r4, r6
 81159c6:	e7b4      	b.n	8115932 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

081159c8 <_ZSt17__throw_bad_allocv>:
 81159c8:	b508      	push	{r3, lr}
 81159ca:	f000 f813 	bl	81159f4 <abort>

081159ce <_ZSt28__throw_bad_array_new_lengthv>:
 81159ce:	b508      	push	{r3, lr}
 81159d0:	f000 f810 	bl	81159f4 <abort>

081159d4 <_ZSt20__throw_length_errorPKc>:
 81159d4:	b508      	push	{r3, lr}
 81159d6:	f000 f80d 	bl	81159f4 <abort>

081159da <_ZSt25__throw_bad_function_callv>:
 81159da:	b508      	push	{r3, lr}
 81159dc:	f000 f80a 	bl	81159f4 <abort>

081159e0 <_ZdlPv>:
 81159e0:	f000 b818 	b.w	8115a14 <free>

081159e4 <_ZSt15get_new_handlerv>:
 81159e4:	4b02      	ldr	r3, [pc, #8]	@ (81159f0 <_ZSt15get_new_handlerv+0xc>)
 81159e6:	6818      	ldr	r0, [r3, #0]
 81159e8:	f3bf 8f5b 	dmb	ish
 81159ec:	4770      	bx	lr
 81159ee:	bf00      	nop
 81159f0:	10011cbc 	.word	0x10011cbc

081159f4 <abort>:
 81159f4:	b508      	push	{r3, lr}
 81159f6:	2006      	movs	r0, #6
 81159f8:	f000 fa72 	bl	8115ee0 <raise>
 81159fc:	2001      	movs	r0, #1
 81159fe:	f7eb f801 	bl	8100a04 <_exit>
	...

08115a04 <malloc>:
 8115a04:	4b02      	ldr	r3, [pc, #8]	@ (8115a10 <malloc+0xc>)
 8115a06:	4601      	mov	r1, r0
 8115a08:	6818      	ldr	r0, [r3, #0]
 8115a0a:	f000 b82d 	b.w	8115a68 <_malloc_r>
 8115a0e:	bf00      	nop
 8115a10:	10000040 	.word	0x10000040

08115a14 <free>:
 8115a14:	4b02      	ldr	r3, [pc, #8]	@ (8115a20 <free+0xc>)
 8115a16:	4601      	mov	r1, r0
 8115a18:	6818      	ldr	r0, [r3, #0]
 8115a1a:	f000 bb7d 	b.w	8116118 <_free_r>
 8115a1e:	bf00      	nop
 8115a20:	10000040 	.word	0x10000040

08115a24 <sbrk_aligned>:
 8115a24:	b570      	push	{r4, r5, r6, lr}
 8115a26:	4e0f      	ldr	r6, [pc, #60]	@ (8115a64 <sbrk_aligned+0x40>)
 8115a28:	460c      	mov	r4, r1
 8115a2a:	6831      	ldr	r1, [r6, #0]
 8115a2c:	4605      	mov	r5, r0
 8115a2e:	b911      	cbnz	r1, 8115a36 <sbrk_aligned+0x12>
 8115a30:	f000 fafc 	bl	811602c <_sbrk_r>
 8115a34:	6030      	str	r0, [r6, #0]
 8115a36:	4621      	mov	r1, r4
 8115a38:	4628      	mov	r0, r5
 8115a3a:	f000 faf7 	bl	811602c <_sbrk_r>
 8115a3e:	1c43      	adds	r3, r0, #1
 8115a40:	d103      	bne.n	8115a4a <sbrk_aligned+0x26>
 8115a42:	f04f 34ff 	mov.w	r4, #4294967295
 8115a46:	4620      	mov	r0, r4
 8115a48:	bd70      	pop	{r4, r5, r6, pc}
 8115a4a:	1cc4      	adds	r4, r0, #3
 8115a4c:	f024 0403 	bic.w	r4, r4, #3
 8115a50:	42a0      	cmp	r0, r4
 8115a52:	d0f8      	beq.n	8115a46 <sbrk_aligned+0x22>
 8115a54:	1a21      	subs	r1, r4, r0
 8115a56:	4628      	mov	r0, r5
 8115a58:	f000 fae8 	bl	811602c <_sbrk_r>
 8115a5c:	3001      	adds	r0, #1
 8115a5e:	d1f2      	bne.n	8115a46 <sbrk_aligned+0x22>
 8115a60:	e7ef      	b.n	8115a42 <sbrk_aligned+0x1e>
 8115a62:	bf00      	nop
 8115a64:	10011cc0 	.word	0x10011cc0

08115a68 <_malloc_r>:
 8115a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8115a6c:	1ccd      	adds	r5, r1, #3
 8115a6e:	f025 0503 	bic.w	r5, r5, #3
 8115a72:	3508      	adds	r5, #8
 8115a74:	2d0c      	cmp	r5, #12
 8115a76:	bf38      	it	cc
 8115a78:	250c      	movcc	r5, #12
 8115a7a:	2d00      	cmp	r5, #0
 8115a7c:	4606      	mov	r6, r0
 8115a7e:	db01      	blt.n	8115a84 <_malloc_r+0x1c>
 8115a80:	42a9      	cmp	r1, r5
 8115a82:	d904      	bls.n	8115a8e <_malloc_r+0x26>
 8115a84:	230c      	movs	r3, #12
 8115a86:	6033      	str	r3, [r6, #0]
 8115a88:	2000      	movs	r0, #0
 8115a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8115a8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8115b64 <_malloc_r+0xfc>
 8115a92:	f000 f869 	bl	8115b68 <__malloc_lock>
 8115a96:	f8d8 3000 	ldr.w	r3, [r8]
 8115a9a:	461c      	mov	r4, r3
 8115a9c:	bb44      	cbnz	r4, 8115af0 <_malloc_r+0x88>
 8115a9e:	4629      	mov	r1, r5
 8115aa0:	4630      	mov	r0, r6
 8115aa2:	f7ff ffbf 	bl	8115a24 <sbrk_aligned>
 8115aa6:	1c43      	adds	r3, r0, #1
 8115aa8:	4604      	mov	r4, r0
 8115aaa:	d158      	bne.n	8115b5e <_malloc_r+0xf6>
 8115aac:	f8d8 4000 	ldr.w	r4, [r8]
 8115ab0:	4627      	mov	r7, r4
 8115ab2:	2f00      	cmp	r7, #0
 8115ab4:	d143      	bne.n	8115b3e <_malloc_r+0xd6>
 8115ab6:	2c00      	cmp	r4, #0
 8115ab8:	d04b      	beq.n	8115b52 <_malloc_r+0xea>
 8115aba:	6823      	ldr	r3, [r4, #0]
 8115abc:	4639      	mov	r1, r7
 8115abe:	4630      	mov	r0, r6
 8115ac0:	eb04 0903 	add.w	r9, r4, r3
 8115ac4:	f000 fab2 	bl	811602c <_sbrk_r>
 8115ac8:	4581      	cmp	r9, r0
 8115aca:	d142      	bne.n	8115b52 <_malloc_r+0xea>
 8115acc:	6821      	ldr	r1, [r4, #0]
 8115ace:	1a6d      	subs	r5, r5, r1
 8115ad0:	4629      	mov	r1, r5
 8115ad2:	4630      	mov	r0, r6
 8115ad4:	f7ff ffa6 	bl	8115a24 <sbrk_aligned>
 8115ad8:	3001      	adds	r0, #1
 8115ada:	d03a      	beq.n	8115b52 <_malloc_r+0xea>
 8115adc:	6823      	ldr	r3, [r4, #0]
 8115ade:	442b      	add	r3, r5
 8115ae0:	6023      	str	r3, [r4, #0]
 8115ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8115ae6:	685a      	ldr	r2, [r3, #4]
 8115ae8:	bb62      	cbnz	r2, 8115b44 <_malloc_r+0xdc>
 8115aea:	f8c8 7000 	str.w	r7, [r8]
 8115aee:	e00f      	b.n	8115b10 <_malloc_r+0xa8>
 8115af0:	6822      	ldr	r2, [r4, #0]
 8115af2:	1b52      	subs	r2, r2, r5
 8115af4:	d420      	bmi.n	8115b38 <_malloc_r+0xd0>
 8115af6:	2a0b      	cmp	r2, #11
 8115af8:	d917      	bls.n	8115b2a <_malloc_r+0xc2>
 8115afa:	1961      	adds	r1, r4, r5
 8115afc:	42a3      	cmp	r3, r4
 8115afe:	6025      	str	r5, [r4, #0]
 8115b00:	bf18      	it	ne
 8115b02:	6059      	strne	r1, [r3, #4]
 8115b04:	6863      	ldr	r3, [r4, #4]
 8115b06:	bf08      	it	eq
 8115b08:	f8c8 1000 	streq.w	r1, [r8]
 8115b0c:	5162      	str	r2, [r4, r5]
 8115b0e:	604b      	str	r3, [r1, #4]
 8115b10:	4630      	mov	r0, r6
 8115b12:	f000 f82f 	bl	8115b74 <__malloc_unlock>
 8115b16:	f104 000b 	add.w	r0, r4, #11
 8115b1a:	1d23      	adds	r3, r4, #4
 8115b1c:	f020 0007 	bic.w	r0, r0, #7
 8115b20:	1ac2      	subs	r2, r0, r3
 8115b22:	bf1c      	itt	ne
 8115b24:	1a1b      	subne	r3, r3, r0
 8115b26:	50a3      	strne	r3, [r4, r2]
 8115b28:	e7af      	b.n	8115a8a <_malloc_r+0x22>
 8115b2a:	6862      	ldr	r2, [r4, #4]
 8115b2c:	42a3      	cmp	r3, r4
 8115b2e:	bf0c      	ite	eq
 8115b30:	f8c8 2000 	streq.w	r2, [r8]
 8115b34:	605a      	strne	r2, [r3, #4]
 8115b36:	e7eb      	b.n	8115b10 <_malloc_r+0xa8>
 8115b38:	4623      	mov	r3, r4
 8115b3a:	6864      	ldr	r4, [r4, #4]
 8115b3c:	e7ae      	b.n	8115a9c <_malloc_r+0x34>
 8115b3e:	463c      	mov	r4, r7
 8115b40:	687f      	ldr	r7, [r7, #4]
 8115b42:	e7b6      	b.n	8115ab2 <_malloc_r+0x4a>
 8115b44:	461a      	mov	r2, r3
 8115b46:	685b      	ldr	r3, [r3, #4]
 8115b48:	42a3      	cmp	r3, r4
 8115b4a:	d1fb      	bne.n	8115b44 <_malloc_r+0xdc>
 8115b4c:	2300      	movs	r3, #0
 8115b4e:	6053      	str	r3, [r2, #4]
 8115b50:	e7de      	b.n	8115b10 <_malloc_r+0xa8>
 8115b52:	230c      	movs	r3, #12
 8115b54:	6033      	str	r3, [r6, #0]
 8115b56:	4630      	mov	r0, r6
 8115b58:	f000 f80c 	bl	8115b74 <__malloc_unlock>
 8115b5c:	e794      	b.n	8115a88 <_malloc_r+0x20>
 8115b5e:	6005      	str	r5, [r0, #0]
 8115b60:	e7d6      	b.n	8115b10 <_malloc_r+0xa8>
 8115b62:	bf00      	nop
 8115b64:	10011cc4 	.word	0x10011cc4

08115b68 <__malloc_lock>:
 8115b68:	4801      	ldr	r0, [pc, #4]	@ (8115b70 <__malloc_lock+0x8>)
 8115b6a:	f000 baa6 	b.w	81160ba <__retarget_lock_acquire_recursive>
 8115b6e:	bf00      	nop
 8115b70:	10011e08 	.word	0x10011e08

08115b74 <__malloc_unlock>:
 8115b74:	4801      	ldr	r0, [pc, #4]	@ (8115b7c <__malloc_unlock+0x8>)
 8115b76:	f000 baa1 	b.w	81160bc <__retarget_lock_release_recursive>
 8115b7a:	bf00      	nop
 8115b7c:	10011e08 	.word	0x10011e08

08115b80 <rand>:
 8115b80:	4b16      	ldr	r3, [pc, #88]	@ (8115bdc <rand+0x5c>)
 8115b82:	b510      	push	{r4, lr}
 8115b84:	681c      	ldr	r4, [r3, #0]
 8115b86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8115b88:	b9b3      	cbnz	r3, 8115bb8 <rand+0x38>
 8115b8a:	2018      	movs	r0, #24
 8115b8c:	f7ff ff3a 	bl	8115a04 <malloc>
 8115b90:	4602      	mov	r2, r0
 8115b92:	6320      	str	r0, [r4, #48]	@ 0x30
 8115b94:	b920      	cbnz	r0, 8115ba0 <rand+0x20>
 8115b96:	4b12      	ldr	r3, [pc, #72]	@ (8115be0 <rand+0x60>)
 8115b98:	4812      	ldr	r0, [pc, #72]	@ (8115be4 <rand+0x64>)
 8115b9a:	2152      	movs	r1, #82	@ 0x52
 8115b9c:	f000 fa9e 	bl	81160dc <__assert_func>
 8115ba0:	4911      	ldr	r1, [pc, #68]	@ (8115be8 <rand+0x68>)
 8115ba2:	4b12      	ldr	r3, [pc, #72]	@ (8115bec <rand+0x6c>)
 8115ba4:	e9c0 1300 	strd	r1, r3, [r0]
 8115ba8:	4b11      	ldr	r3, [pc, #68]	@ (8115bf0 <rand+0x70>)
 8115baa:	6083      	str	r3, [r0, #8]
 8115bac:	230b      	movs	r3, #11
 8115bae:	8183      	strh	r3, [r0, #12]
 8115bb0:	2100      	movs	r1, #0
 8115bb2:	2001      	movs	r0, #1
 8115bb4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8115bb8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8115bba:	480e      	ldr	r0, [pc, #56]	@ (8115bf4 <rand+0x74>)
 8115bbc:	690b      	ldr	r3, [r1, #16]
 8115bbe:	694c      	ldr	r4, [r1, #20]
 8115bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8115bf8 <rand+0x78>)
 8115bc2:	4358      	muls	r0, r3
 8115bc4:	fb02 0004 	mla	r0, r2, r4, r0
 8115bc8:	fba3 3202 	umull	r3, r2, r3, r2
 8115bcc:	3301      	adds	r3, #1
 8115bce:	eb40 0002 	adc.w	r0, r0, r2
 8115bd2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8115bd6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8115bda:	bd10      	pop	{r4, pc}
 8115bdc:	10000040 	.word	0x10000040
 8115be0:	08119c50 	.word	0x08119c50
 8115be4:	08119c67 	.word	0x08119c67
 8115be8:	abcd330e 	.word	0xabcd330e
 8115bec:	e66d1234 	.word	0xe66d1234
 8115bf0:	0005deec 	.word	0x0005deec
 8115bf4:	5851f42d 	.word	0x5851f42d
 8115bf8:	4c957f2d 	.word	0x4c957f2d

08115bfc <std>:
 8115bfc:	2300      	movs	r3, #0
 8115bfe:	b510      	push	{r4, lr}
 8115c00:	4604      	mov	r4, r0
 8115c02:	e9c0 3300 	strd	r3, r3, [r0]
 8115c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8115c0a:	6083      	str	r3, [r0, #8]
 8115c0c:	8181      	strh	r1, [r0, #12]
 8115c0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8115c10:	81c2      	strh	r2, [r0, #14]
 8115c12:	6183      	str	r3, [r0, #24]
 8115c14:	4619      	mov	r1, r3
 8115c16:	2208      	movs	r2, #8
 8115c18:	305c      	adds	r0, #92	@ 0x5c
 8115c1a:	f000 f930 	bl	8115e7e <memset>
 8115c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8115c54 <std+0x58>)
 8115c20:	6263      	str	r3, [r4, #36]	@ 0x24
 8115c22:	4b0d      	ldr	r3, [pc, #52]	@ (8115c58 <std+0x5c>)
 8115c24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8115c26:	4b0d      	ldr	r3, [pc, #52]	@ (8115c5c <std+0x60>)
 8115c28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8115c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8115c60 <std+0x64>)
 8115c2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8115c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8115c64 <std+0x68>)
 8115c30:	6224      	str	r4, [r4, #32]
 8115c32:	429c      	cmp	r4, r3
 8115c34:	d006      	beq.n	8115c44 <std+0x48>
 8115c36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8115c3a:	4294      	cmp	r4, r2
 8115c3c:	d002      	beq.n	8115c44 <std+0x48>
 8115c3e:	33d0      	adds	r3, #208	@ 0xd0
 8115c40:	429c      	cmp	r4, r3
 8115c42:	d105      	bne.n	8115c50 <std+0x54>
 8115c44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8115c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8115c4c:	f000 ba34 	b.w	81160b8 <__retarget_lock_init_recursive>
 8115c50:	bd10      	pop	{r4, pc}
 8115c52:	bf00      	nop
 8115c54:	08115da5 	.word	0x08115da5
 8115c58:	08115dc7 	.word	0x08115dc7
 8115c5c:	08115dff 	.word	0x08115dff
 8115c60:	08115e23 	.word	0x08115e23
 8115c64:	10011cc8 	.word	0x10011cc8

08115c68 <stdio_exit_handler>:
 8115c68:	4a02      	ldr	r2, [pc, #8]	@ (8115c74 <stdio_exit_handler+0xc>)
 8115c6a:	4903      	ldr	r1, [pc, #12]	@ (8115c78 <stdio_exit_handler+0x10>)
 8115c6c:	4803      	ldr	r0, [pc, #12]	@ (8115c7c <stdio_exit_handler+0x14>)
 8115c6e:	f000 b869 	b.w	8115d44 <_fwalk_sglue>
 8115c72:	bf00      	nop
 8115c74:	10000034 	.word	0x10000034
 8115c78:	08116855 	.word	0x08116855
 8115c7c:	10000044 	.word	0x10000044

08115c80 <cleanup_stdio>:
 8115c80:	6841      	ldr	r1, [r0, #4]
 8115c82:	4b0c      	ldr	r3, [pc, #48]	@ (8115cb4 <cleanup_stdio+0x34>)
 8115c84:	4299      	cmp	r1, r3
 8115c86:	b510      	push	{r4, lr}
 8115c88:	4604      	mov	r4, r0
 8115c8a:	d001      	beq.n	8115c90 <cleanup_stdio+0x10>
 8115c8c:	f000 fde2 	bl	8116854 <_fflush_r>
 8115c90:	68a1      	ldr	r1, [r4, #8]
 8115c92:	4b09      	ldr	r3, [pc, #36]	@ (8115cb8 <cleanup_stdio+0x38>)
 8115c94:	4299      	cmp	r1, r3
 8115c96:	d002      	beq.n	8115c9e <cleanup_stdio+0x1e>
 8115c98:	4620      	mov	r0, r4
 8115c9a:	f000 fddb 	bl	8116854 <_fflush_r>
 8115c9e:	68e1      	ldr	r1, [r4, #12]
 8115ca0:	4b06      	ldr	r3, [pc, #24]	@ (8115cbc <cleanup_stdio+0x3c>)
 8115ca2:	4299      	cmp	r1, r3
 8115ca4:	d004      	beq.n	8115cb0 <cleanup_stdio+0x30>
 8115ca6:	4620      	mov	r0, r4
 8115ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8115cac:	f000 bdd2 	b.w	8116854 <_fflush_r>
 8115cb0:	bd10      	pop	{r4, pc}
 8115cb2:	bf00      	nop
 8115cb4:	10011cc8 	.word	0x10011cc8
 8115cb8:	10011d30 	.word	0x10011d30
 8115cbc:	10011d98 	.word	0x10011d98

08115cc0 <global_stdio_init.part.0>:
 8115cc0:	b510      	push	{r4, lr}
 8115cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8115cf0 <global_stdio_init.part.0+0x30>)
 8115cc4:	4c0b      	ldr	r4, [pc, #44]	@ (8115cf4 <global_stdio_init.part.0+0x34>)
 8115cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8115cf8 <global_stdio_init.part.0+0x38>)
 8115cc8:	601a      	str	r2, [r3, #0]
 8115cca:	4620      	mov	r0, r4
 8115ccc:	2200      	movs	r2, #0
 8115cce:	2104      	movs	r1, #4
 8115cd0:	f7ff ff94 	bl	8115bfc <std>
 8115cd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8115cd8:	2201      	movs	r2, #1
 8115cda:	2109      	movs	r1, #9
 8115cdc:	f7ff ff8e 	bl	8115bfc <std>
 8115ce0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8115ce4:	2202      	movs	r2, #2
 8115ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8115cea:	2112      	movs	r1, #18
 8115cec:	f7ff bf86 	b.w	8115bfc <std>
 8115cf0:	10011e00 	.word	0x10011e00
 8115cf4:	10011cc8 	.word	0x10011cc8
 8115cf8:	08115c69 	.word	0x08115c69

08115cfc <__sfp_lock_acquire>:
 8115cfc:	4801      	ldr	r0, [pc, #4]	@ (8115d04 <__sfp_lock_acquire+0x8>)
 8115cfe:	f000 b9dc 	b.w	81160ba <__retarget_lock_acquire_recursive>
 8115d02:	bf00      	nop
 8115d04:	10011e09 	.word	0x10011e09

08115d08 <__sfp_lock_release>:
 8115d08:	4801      	ldr	r0, [pc, #4]	@ (8115d10 <__sfp_lock_release+0x8>)
 8115d0a:	f000 b9d7 	b.w	81160bc <__retarget_lock_release_recursive>
 8115d0e:	bf00      	nop
 8115d10:	10011e09 	.word	0x10011e09

08115d14 <__sinit>:
 8115d14:	b510      	push	{r4, lr}
 8115d16:	4604      	mov	r4, r0
 8115d18:	f7ff fff0 	bl	8115cfc <__sfp_lock_acquire>
 8115d1c:	6a23      	ldr	r3, [r4, #32]
 8115d1e:	b11b      	cbz	r3, 8115d28 <__sinit+0x14>
 8115d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8115d24:	f7ff bff0 	b.w	8115d08 <__sfp_lock_release>
 8115d28:	4b04      	ldr	r3, [pc, #16]	@ (8115d3c <__sinit+0x28>)
 8115d2a:	6223      	str	r3, [r4, #32]
 8115d2c:	4b04      	ldr	r3, [pc, #16]	@ (8115d40 <__sinit+0x2c>)
 8115d2e:	681b      	ldr	r3, [r3, #0]
 8115d30:	2b00      	cmp	r3, #0
 8115d32:	d1f5      	bne.n	8115d20 <__sinit+0xc>
 8115d34:	f7ff ffc4 	bl	8115cc0 <global_stdio_init.part.0>
 8115d38:	e7f2      	b.n	8115d20 <__sinit+0xc>
 8115d3a:	bf00      	nop
 8115d3c:	08115c81 	.word	0x08115c81
 8115d40:	10011e00 	.word	0x10011e00

08115d44 <_fwalk_sglue>:
 8115d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8115d48:	4607      	mov	r7, r0
 8115d4a:	4688      	mov	r8, r1
 8115d4c:	4614      	mov	r4, r2
 8115d4e:	2600      	movs	r6, #0
 8115d50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8115d54:	f1b9 0901 	subs.w	r9, r9, #1
 8115d58:	d505      	bpl.n	8115d66 <_fwalk_sglue+0x22>
 8115d5a:	6824      	ldr	r4, [r4, #0]
 8115d5c:	2c00      	cmp	r4, #0
 8115d5e:	d1f7      	bne.n	8115d50 <_fwalk_sglue+0xc>
 8115d60:	4630      	mov	r0, r6
 8115d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8115d66:	89ab      	ldrh	r3, [r5, #12]
 8115d68:	2b01      	cmp	r3, #1
 8115d6a:	d907      	bls.n	8115d7c <_fwalk_sglue+0x38>
 8115d6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8115d70:	3301      	adds	r3, #1
 8115d72:	d003      	beq.n	8115d7c <_fwalk_sglue+0x38>
 8115d74:	4629      	mov	r1, r5
 8115d76:	4638      	mov	r0, r7
 8115d78:	47c0      	blx	r8
 8115d7a:	4306      	orrs	r6, r0
 8115d7c:	3568      	adds	r5, #104	@ 0x68
 8115d7e:	e7e9      	b.n	8115d54 <_fwalk_sglue+0x10>

08115d80 <iprintf>:
 8115d80:	b40f      	push	{r0, r1, r2, r3}
 8115d82:	b507      	push	{r0, r1, r2, lr}
 8115d84:	4906      	ldr	r1, [pc, #24]	@ (8115da0 <iprintf+0x20>)
 8115d86:	ab04      	add	r3, sp, #16
 8115d88:	6808      	ldr	r0, [r1, #0]
 8115d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8115d8e:	6881      	ldr	r1, [r0, #8]
 8115d90:	9301      	str	r3, [sp, #4]
 8115d92:	f000 fa35 	bl	8116200 <_vfiprintf_r>
 8115d96:	b003      	add	sp, #12
 8115d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8115d9c:	b004      	add	sp, #16
 8115d9e:	4770      	bx	lr
 8115da0:	10000040 	.word	0x10000040

08115da4 <__sread>:
 8115da4:	b510      	push	{r4, lr}
 8115da6:	460c      	mov	r4, r1
 8115da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8115dac:	f000 f918 	bl	8115fe0 <_read_r>
 8115db0:	2800      	cmp	r0, #0
 8115db2:	bfab      	itete	ge
 8115db4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8115db6:	89a3      	ldrhlt	r3, [r4, #12]
 8115db8:	181b      	addge	r3, r3, r0
 8115dba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8115dbe:	bfac      	ite	ge
 8115dc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8115dc2:	81a3      	strhlt	r3, [r4, #12]
 8115dc4:	bd10      	pop	{r4, pc}

08115dc6 <__swrite>:
 8115dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8115dca:	461f      	mov	r7, r3
 8115dcc:	898b      	ldrh	r3, [r1, #12]
 8115dce:	05db      	lsls	r3, r3, #23
 8115dd0:	4605      	mov	r5, r0
 8115dd2:	460c      	mov	r4, r1
 8115dd4:	4616      	mov	r6, r2
 8115dd6:	d505      	bpl.n	8115de4 <__swrite+0x1e>
 8115dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8115ddc:	2302      	movs	r3, #2
 8115dde:	2200      	movs	r2, #0
 8115de0:	f000 f8ec 	bl	8115fbc <_lseek_r>
 8115de4:	89a3      	ldrh	r3, [r4, #12]
 8115de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8115dea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8115dee:	81a3      	strh	r3, [r4, #12]
 8115df0:	4632      	mov	r2, r6
 8115df2:	463b      	mov	r3, r7
 8115df4:	4628      	mov	r0, r5
 8115df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8115dfa:	f000 b927 	b.w	811604c <_write_r>

08115dfe <__sseek>:
 8115dfe:	b510      	push	{r4, lr}
 8115e00:	460c      	mov	r4, r1
 8115e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8115e06:	f000 f8d9 	bl	8115fbc <_lseek_r>
 8115e0a:	1c43      	adds	r3, r0, #1
 8115e0c:	89a3      	ldrh	r3, [r4, #12]
 8115e0e:	bf15      	itete	ne
 8115e10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8115e12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8115e16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8115e1a:	81a3      	strheq	r3, [r4, #12]
 8115e1c:	bf18      	it	ne
 8115e1e:	81a3      	strhne	r3, [r4, #12]
 8115e20:	bd10      	pop	{r4, pc}

08115e22 <__sclose>:
 8115e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8115e26:	f000 b863 	b.w	8115ef0 <_close_r>

08115e2a <memcmp>:
 8115e2a:	b510      	push	{r4, lr}
 8115e2c:	3901      	subs	r1, #1
 8115e2e:	4402      	add	r2, r0
 8115e30:	4290      	cmp	r0, r2
 8115e32:	d101      	bne.n	8115e38 <memcmp+0xe>
 8115e34:	2000      	movs	r0, #0
 8115e36:	e005      	b.n	8115e44 <memcmp+0x1a>
 8115e38:	7803      	ldrb	r3, [r0, #0]
 8115e3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8115e3e:	42a3      	cmp	r3, r4
 8115e40:	d001      	beq.n	8115e46 <memcmp+0x1c>
 8115e42:	1b18      	subs	r0, r3, r4
 8115e44:	bd10      	pop	{r4, pc}
 8115e46:	3001      	adds	r0, #1
 8115e48:	e7f2      	b.n	8115e30 <memcmp+0x6>

08115e4a <memmove>:
 8115e4a:	4288      	cmp	r0, r1
 8115e4c:	b510      	push	{r4, lr}
 8115e4e:	eb01 0402 	add.w	r4, r1, r2
 8115e52:	d902      	bls.n	8115e5a <memmove+0x10>
 8115e54:	4284      	cmp	r4, r0
 8115e56:	4623      	mov	r3, r4
 8115e58:	d807      	bhi.n	8115e6a <memmove+0x20>
 8115e5a:	1e43      	subs	r3, r0, #1
 8115e5c:	42a1      	cmp	r1, r4
 8115e5e:	d008      	beq.n	8115e72 <memmove+0x28>
 8115e60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8115e64:	f803 2f01 	strb.w	r2, [r3, #1]!
 8115e68:	e7f8      	b.n	8115e5c <memmove+0x12>
 8115e6a:	4402      	add	r2, r0
 8115e6c:	4601      	mov	r1, r0
 8115e6e:	428a      	cmp	r2, r1
 8115e70:	d100      	bne.n	8115e74 <memmove+0x2a>
 8115e72:	bd10      	pop	{r4, pc}
 8115e74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8115e78:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8115e7c:	e7f7      	b.n	8115e6e <memmove+0x24>

08115e7e <memset>:
 8115e7e:	4402      	add	r2, r0
 8115e80:	4603      	mov	r3, r0
 8115e82:	4293      	cmp	r3, r2
 8115e84:	d100      	bne.n	8115e88 <memset+0xa>
 8115e86:	4770      	bx	lr
 8115e88:	f803 1b01 	strb.w	r1, [r3], #1
 8115e8c:	e7f9      	b.n	8115e82 <memset+0x4>

08115e8e <_raise_r>:
 8115e8e:	291f      	cmp	r1, #31
 8115e90:	b538      	push	{r3, r4, r5, lr}
 8115e92:	4605      	mov	r5, r0
 8115e94:	460c      	mov	r4, r1
 8115e96:	d904      	bls.n	8115ea2 <_raise_r+0x14>
 8115e98:	2316      	movs	r3, #22
 8115e9a:	6003      	str	r3, [r0, #0]
 8115e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8115ea0:	bd38      	pop	{r3, r4, r5, pc}
 8115ea2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8115ea4:	b112      	cbz	r2, 8115eac <_raise_r+0x1e>
 8115ea6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8115eaa:	b94b      	cbnz	r3, 8115ec0 <_raise_r+0x32>
 8115eac:	4628      	mov	r0, r5
 8115eae:	f000 f8bb 	bl	8116028 <_getpid_r>
 8115eb2:	4622      	mov	r2, r4
 8115eb4:	4601      	mov	r1, r0
 8115eb6:	4628      	mov	r0, r5
 8115eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8115ebc:	f000 b8a2 	b.w	8116004 <_kill_r>
 8115ec0:	2b01      	cmp	r3, #1
 8115ec2:	d00a      	beq.n	8115eda <_raise_r+0x4c>
 8115ec4:	1c59      	adds	r1, r3, #1
 8115ec6:	d103      	bne.n	8115ed0 <_raise_r+0x42>
 8115ec8:	2316      	movs	r3, #22
 8115eca:	6003      	str	r3, [r0, #0]
 8115ecc:	2001      	movs	r0, #1
 8115ece:	e7e7      	b.n	8115ea0 <_raise_r+0x12>
 8115ed0:	2100      	movs	r1, #0
 8115ed2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8115ed6:	4620      	mov	r0, r4
 8115ed8:	4798      	blx	r3
 8115eda:	2000      	movs	r0, #0
 8115edc:	e7e0      	b.n	8115ea0 <_raise_r+0x12>
	...

08115ee0 <raise>:
 8115ee0:	4b02      	ldr	r3, [pc, #8]	@ (8115eec <raise+0xc>)
 8115ee2:	4601      	mov	r1, r0
 8115ee4:	6818      	ldr	r0, [r3, #0]
 8115ee6:	f7ff bfd2 	b.w	8115e8e <_raise_r>
 8115eea:	bf00      	nop
 8115eec:	10000040 	.word	0x10000040

08115ef0 <_close_r>:
 8115ef0:	b538      	push	{r3, r4, r5, lr}
 8115ef2:	4d06      	ldr	r5, [pc, #24]	@ (8115f0c <_close_r+0x1c>)
 8115ef4:	2300      	movs	r3, #0
 8115ef6:	4604      	mov	r4, r0
 8115ef8:	4608      	mov	r0, r1
 8115efa:	602b      	str	r3, [r5, #0]
 8115efc:	f7ea fdc6 	bl	8100a8c <_close>
 8115f00:	1c43      	adds	r3, r0, #1
 8115f02:	d102      	bne.n	8115f0a <_close_r+0x1a>
 8115f04:	682b      	ldr	r3, [r5, #0]
 8115f06:	b103      	cbz	r3, 8115f0a <_close_r+0x1a>
 8115f08:	6023      	str	r3, [r4, #0]
 8115f0a:	bd38      	pop	{r3, r4, r5, pc}
 8115f0c:	10011e04 	.word	0x10011e04

08115f10 <_reclaim_reent>:
 8115f10:	4b29      	ldr	r3, [pc, #164]	@ (8115fb8 <_reclaim_reent+0xa8>)
 8115f12:	681b      	ldr	r3, [r3, #0]
 8115f14:	4283      	cmp	r3, r0
 8115f16:	b570      	push	{r4, r5, r6, lr}
 8115f18:	4604      	mov	r4, r0
 8115f1a:	d04b      	beq.n	8115fb4 <_reclaim_reent+0xa4>
 8115f1c:	69c3      	ldr	r3, [r0, #28]
 8115f1e:	b1ab      	cbz	r3, 8115f4c <_reclaim_reent+0x3c>
 8115f20:	68db      	ldr	r3, [r3, #12]
 8115f22:	b16b      	cbz	r3, 8115f40 <_reclaim_reent+0x30>
 8115f24:	2500      	movs	r5, #0
 8115f26:	69e3      	ldr	r3, [r4, #28]
 8115f28:	68db      	ldr	r3, [r3, #12]
 8115f2a:	5959      	ldr	r1, [r3, r5]
 8115f2c:	2900      	cmp	r1, #0
 8115f2e:	d13b      	bne.n	8115fa8 <_reclaim_reent+0x98>
 8115f30:	3504      	adds	r5, #4
 8115f32:	2d80      	cmp	r5, #128	@ 0x80
 8115f34:	d1f7      	bne.n	8115f26 <_reclaim_reent+0x16>
 8115f36:	69e3      	ldr	r3, [r4, #28]
 8115f38:	4620      	mov	r0, r4
 8115f3a:	68d9      	ldr	r1, [r3, #12]
 8115f3c:	f000 f8ec 	bl	8116118 <_free_r>
 8115f40:	69e3      	ldr	r3, [r4, #28]
 8115f42:	6819      	ldr	r1, [r3, #0]
 8115f44:	b111      	cbz	r1, 8115f4c <_reclaim_reent+0x3c>
 8115f46:	4620      	mov	r0, r4
 8115f48:	f000 f8e6 	bl	8116118 <_free_r>
 8115f4c:	6961      	ldr	r1, [r4, #20]
 8115f4e:	b111      	cbz	r1, 8115f56 <_reclaim_reent+0x46>
 8115f50:	4620      	mov	r0, r4
 8115f52:	f000 f8e1 	bl	8116118 <_free_r>
 8115f56:	69e1      	ldr	r1, [r4, #28]
 8115f58:	b111      	cbz	r1, 8115f60 <_reclaim_reent+0x50>
 8115f5a:	4620      	mov	r0, r4
 8115f5c:	f000 f8dc 	bl	8116118 <_free_r>
 8115f60:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8115f62:	b111      	cbz	r1, 8115f6a <_reclaim_reent+0x5a>
 8115f64:	4620      	mov	r0, r4
 8115f66:	f000 f8d7 	bl	8116118 <_free_r>
 8115f6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8115f6c:	b111      	cbz	r1, 8115f74 <_reclaim_reent+0x64>
 8115f6e:	4620      	mov	r0, r4
 8115f70:	f000 f8d2 	bl	8116118 <_free_r>
 8115f74:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8115f76:	b111      	cbz	r1, 8115f7e <_reclaim_reent+0x6e>
 8115f78:	4620      	mov	r0, r4
 8115f7a:	f000 f8cd 	bl	8116118 <_free_r>
 8115f7e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8115f80:	b111      	cbz	r1, 8115f88 <_reclaim_reent+0x78>
 8115f82:	4620      	mov	r0, r4
 8115f84:	f000 f8c8 	bl	8116118 <_free_r>
 8115f88:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8115f8a:	b111      	cbz	r1, 8115f92 <_reclaim_reent+0x82>
 8115f8c:	4620      	mov	r0, r4
 8115f8e:	f000 f8c3 	bl	8116118 <_free_r>
 8115f92:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8115f94:	b111      	cbz	r1, 8115f9c <_reclaim_reent+0x8c>
 8115f96:	4620      	mov	r0, r4
 8115f98:	f000 f8be 	bl	8116118 <_free_r>
 8115f9c:	6a23      	ldr	r3, [r4, #32]
 8115f9e:	b14b      	cbz	r3, 8115fb4 <_reclaim_reent+0xa4>
 8115fa0:	4620      	mov	r0, r4
 8115fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8115fa6:	4718      	bx	r3
 8115fa8:	680e      	ldr	r6, [r1, #0]
 8115faa:	4620      	mov	r0, r4
 8115fac:	f000 f8b4 	bl	8116118 <_free_r>
 8115fb0:	4631      	mov	r1, r6
 8115fb2:	e7bb      	b.n	8115f2c <_reclaim_reent+0x1c>
 8115fb4:	bd70      	pop	{r4, r5, r6, pc}
 8115fb6:	bf00      	nop
 8115fb8:	10000040 	.word	0x10000040

08115fbc <_lseek_r>:
 8115fbc:	b538      	push	{r3, r4, r5, lr}
 8115fbe:	4d07      	ldr	r5, [pc, #28]	@ (8115fdc <_lseek_r+0x20>)
 8115fc0:	4604      	mov	r4, r0
 8115fc2:	4608      	mov	r0, r1
 8115fc4:	4611      	mov	r1, r2
 8115fc6:	2200      	movs	r2, #0
 8115fc8:	602a      	str	r2, [r5, #0]
 8115fca:	461a      	mov	r2, r3
 8115fcc:	f7ea fd85 	bl	8100ada <_lseek>
 8115fd0:	1c43      	adds	r3, r0, #1
 8115fd2:	d102      	bne.n	8115fda <_lseek_r+0x1e>
 8115fd4:	682b      	ldr	r3, [r5, #0]
 8115fd6:	b103      	cbz	r3, 8115fda <_lseek_r+0x1e>
 8115fd8:	6023      	str	r3, [r4, #0]
 8115fda:	bd38      	pop	{r3, r4, r5, pc}
 8115fdc:	10011e04 	.word	0x10011e04

08115fe0 <_read_r>:
 8115fe0:	b538      	push	{r3, r4, r5, lr}
 8115fe2:	4d07      	ldr	r5, [pc, #28]	@ (8116000 <_read_r+0x20>)
 8115fe4:	4604      	mov	r4, r0
 8115fe6:	4608      	mov	r0, r1
 8115fe8:	4611      	mov	r1, r2
 8115fea:	2200      	movs	r2, #0
 8115fec:	602a      	str	r2, [r5, #0]
 8115fee:	461a      	mov	r2, r3
 8115ff0:	f7ea fd13 	bl	8100a1a <_read>
 8115ff4:	1c43      	adds	r3, r0, #1
 8115ff6:	d102      	bne.n	8115ffe <_read_r+0x1e>
 8115ff8:	682b      	ldr	r3, [r5, #0]
 8115ffa:	b103      	cbz	r3, 8115ffe <_read_r+0x1e>
 8115ffc:	6023      	str	r3, [r4, #0]
 8115ffe:	bd38      	pop	{r3, r4, r5, pc}
 8116000:	10011e04 	.word	0x10011e04

08116004 <_kill_r>:
 8116004:	b538      	push	{r3, r4, r5, lr}
 8116006:	4d07      	ldr	r5, [pc, #28]	@ (8116024 <_kill_r+0x20>)
 8116008:	2300      	movs	r3, #0
 811600a:	4604      	mov	r4, r0
 811600c:	4608      	mov	r0, r1
 811600e:	4611      	mov	r1, r2
 8116010:	602b      	str	r3, [r5, #0]
 8116012:	f7ea fce5 	bl	81009e0 <_kill>
 8116016:	1c43      	adds	r3, r0, #1
 8116018:	d102      	bne.n	8116020 <_kill_r+0x1c>
 811601a:	682b      	ldr	r3, [r5, #0]
 811601c:	b103      	cbz	r3, 8116020 <_kill_r+0x1c>
 811601e:	6023      	str	r3, [r4, #0]
 8116020:	bd38      	pop	{r3, r4, r5, pc}
 8116022:	bf00      	nop
 8116024:	10011e04 	.word	0x10011e04

08116028 <_getpid_r>:
 8116028:	f7ea bcd2 	b.w	81009d0 <_getpid>

0811602c <_sbrk_r>:
 811602c:	b538      	push	{r3, r4, r5, lr}
 811602e:	4d06      	ldr	r5, [pc, #24]	@ (8116048 <_sbrk_r+0x1c>)
 8116030:	2300      	movs	r3, #0
 8116032:	4604      	mov	r4, r0
 8116034:	4608      	mov	r0, r1
 8116036:	602b      	str	r3, [r5, #0]
 8116038:	f7ea fd5c 	bl	8100af4 <_sbrk>
 811603c:	1c43      	adds	r3, r0, #1
 811603e:	d102      	bne.n	8116046 <_sbrk_r+0x1a>
 8116040:	682b      	ldr	r3, [r5, #0]
 8116042:	b103      	cbz	r3, 8116046 <_sbrk_r+0x1a>
 8116044:	6023      	str	r3, [r4, #0]
 8116046:	bd38      	pop	{r3, r4, r5, pc}
 8116048:	10011e04 	.word	0x10011e04

0811604c <_write_r>:
 811604c:	b538      	push	{r3, r4, r5, lr}
 811604e:	4d07      	ldr	r5, [pc, #28]	@ (811606c <_write_r+0x20>)
 8116050:	4604      	mov	r4, r0
 8116052:	4608      	mov	r0, r1
 8116054:	4611      	mov	r1, r2
 8116056:	2200      	movs	r2, #0
 8116058:	602a      	str	r2, [r5, #0]
 811605a:	461a      	mov	r2, r3
 811605c:	f7ea fcfa 	bl	8100a54 <_write>
 8116060:	1c43      	adds	r3, r0, #1
 8116062:	d102      	bne.n	811606a <_write_r+0x1e>
 8116064:	682b      	ldr	r3, [r5, #0]
 8116066:	b103      	cbz	r3, 811606a <_write_r+0x1e>
 8116068:	6023      	str	r3, [r4, #0]
 811606a:	bd38      	pop	{r3, r4, r5, pc}
 811606c:	10011e04 	.word	0x10011e04

08116070 <__libc_init_array>:
 8116070:	b570      	push	{r4, r5, r6, lr}
 8116072:	4d0d      	ldr	r5, [pc, #52]	@ (81160a8 <__libc_init_array+0x38>)
 8116074:	4c0d      	ldr	r4, [pc, #52]	@ (81160ac <__libc_init_array+0x3c>)
 8116076:	1b64      	subs	r4, r4, r5
 8116078:	10a4      	asrs	r4, r4, #2
 811607a:	2600      	movs	r6, #0
 811607c:	42a6      	cmp	r6, r4
 811607e:	d109      	bne.n	8116094 <__libc_init_array+0x24>
 8116080:	4d0b      	ldr	r5, [pc, #44]	@ (81160b0 <__libc_init_array+0x40>)
 8116082:	4c0c      	ldr	r4, [pc, #48]	@ (81160b4 <__libc_init_array+0x44>)
 8116084:	f000 fd38 	bl	8116af8 <_init>
 8116088:	1b64      	subs	r4, r4, r5
 811608a:	10a4      	asrs	r4, r4, #2
 811608c:	2600      	movs	r6, #0
 811608e:	42a6      	cmp	r6, r4
 8116090:	d105      	bne.n	811609e <__libc_init_array+0x2e>
 8116092:	bd70      	pop	{r4, r5, r6, pc}
 8116094:	f855 3b04 	ldr.w	r3, [r5], #4
 8116098:	4798      	blx	r3
 811609a:	3601      	adds	r6, #1
 811609c:	e7ee      	b.n	811607c <__libc_init_array+0xc>
 811609e:	f855 3b04 	ldr.w	r3, [r5], #4
 81160a2:	4798      	blx	r3
 81160a4:	3601      	adds	r6, #1
 81160a6:	e7f2      	b.n	811608e <__libc_init_array+0x1e>
 81160a8:	08119d38 	.word	0x08119d38
 81160ac:	08119d38 	.word	0x08119d38
 81160b0:	08119d38 	.word	0x08119d38
 81160b4:	08119d40 	.word	0x08119d40

081160b8 <__retarget_lock_init_recursive>:
 81160b8:	4770      	bx	lr

081160ba <__retarget_lock_acquire_recursive>:
 81160ba:	4770      	bx	lr

081160bc <__retarget_lock_release_recursive>:
 81160bc:	4770      	bx	lr

081160be <memcpy>:
 81160be:	440a      	add	r2, r1
 81160c0:	4291      	cmp	r1, r2
 81160c2:	f100 33ff 	add.w	r3, r0, #4294967295
 81160c6:	d100      	bne.n	81160ca <memcpy+0xc>
 81160c8:	4770      	bx	lr
 81160ca:	b510      	push	{r4, lr}
 81160cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 81160d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 81160d4:	4291      	cmp	r1, r2
 81160d6:	d1f9      	bne.n	81160cc <memcpy+0xe>
 81160d8:	bd10      	pop	{r4, pc}
	...

081160dc <__assert_func>:
 81160dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 81160de:	4614      	mov	r4, r2
 81160e0:	461a      	mov	r2, r3
 81160e2:	4b09      	ldr	r3, [pc, #36]	@ (8116108 <__assert_func+0x2c>)
 81160e4:	681b      	ldr	r3, [r3, #0]
 81160e6:	4605      	mov	r5, r0
 81160e8:	68d8      	ldr	r0, [r3, #12]
 81160ea:	b954      	cbnz	r4, 8116102 <__assert_func+0x26>
 81160ec:	4b07      	ldr	r3, [pc, #28]	@ (811610c <__assert_func+0x30>)
 81160ee:	461c      	mov	r4, r3
 81160f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 81160f4:	9100      	str	r1, [sp, #0]
 81160f6:	462b      	mov	r3, r5
 81160f8:	4905      	ldr	r1, [pc, #20]	@ (8116110 <__assert_func+0x34>)
 81160fa:	f000 fbd3 	bl	81168a4 <fiprintf>
 81160fe:	f7ff fc79 	bl	81159f4 <abort>
 8116102:	4b04      	ldr	r3, [pc, #16]	@ (8116114 <__assert_func+0x38>)
 8116104:	e7f4      	b.n	81160f0 <__assert_func+0x14>
 8116106:	bf00      	nop
 8116108:	10000040 	.word	0x10000040
 811610c:	08119cfa 	.word	0x08119cfa
 8116110:	08119ccc 	.word	0x08119ccc
 8116114:	08119cbf 	.word	0x08119cbf

08116118 <_free_r>:
 8116118:	b538      	push	{r3, r4, r5, lr}
 811611a:	4605      	mov	r5, r0
 811611c:	2900      	cmp	r1, #0
 811611e:	d041      	beq.n	81161a4 <_free_r+0x8c>
 8116120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8116124:	1f0c      	subs	r4, r1, #4
 8116126:	2b00      	cmp	r3, #0
 8116128:	bfb8      	it	lt
 811612a:	18e4      	addlt	r4, r4, r3
 811612c:	f7ff fd1c 	bl	8115b68 <__malloc_lock>
 8116130:	4a1d      	ldr	r2, [pc, #116]	@ (81161a8 <_free_r+0x90>)
 8116132:	6813      	ldr	r3, [r2, #0]
 8116134:	b933      	cbnz	r3, 8116144 <_free_r+0x2c>
 8116136:	6063      	str	r3, [r4, #4]
 8116138:	6014      	str	r4, [r2, #0]
 811613a:	4628      	mov	r0, r5
 811613c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8116140:	f7ff bd18 	b.w	8115b74 <__malloc_unlock>
 8116144:	42a3      	cmp	r3, r4
 8116146:	d908      	bls.n	811615a <_free_r+0x42>
 8116148:	6820      	ldr	r0, [r4, #0]
 811614a:	1821      	adds	r1, r4, r0
 811614c:	428b      	cmp	r3, r1
 811614e:	bf01      	itttt	eq
 8116150:	6819      	ldreq	r1, [r3, #0]
 8116152:	685b      	ldreq	r3, [r3, #4]
 8116154:	1809      	addeq	r1, r1, r0
 8116156:	6021      	streq	r1, [r4, #0]
 8116158:	e7ed      	b.n	8116136 <_free_r+0x1e>
 811615a:	461a      	mov	r2, r3
 811615c:	685b      	ldr	r3, [r3, #4]
 811615e:	b10b      	cbz	r3, 8116164 <_free_r+0x4c>
 8116160:	42a3      	cmp	r3, r4
 8116162:	d9fa      	bls.n	811615a <_free_r+0x42>
 8116164:	6811      	ldr	r1, [r2, #0]
 8116166:	1850      	adds	r0, r2, r1
 8116168:	42a0      	cmp	r0, r4
 811616a:	d10b      	bne.n	8116184 <_free_r+0x6c>
 811616c:	6820      	ldr	r0, [r4, #0]
 811616e:	4401      	add	r1, r0
 8116170:	1850      	adds	r0, r2, r1
 8116172:	4283      	cmp	r3, r0
 8116174:	6011      	str	r1, [r2, #0]
 8116176:	d1e0      	bne.n	811613a <_free_r+0x22>
 8116178:	6818      	ldr	r0, [r3, #0]
 811617a:	685b      	ldr	r3, [r3, #4]
 811617c:	6053      	str	r3, [r2, #4]
 811617e:	4408      	add	r0, r1
 8116180:	6010      	str	r0, [r2, #0]
 8116182:	e7da      	b.n	811613a <_free_r+0x22>
 8116184:	d902      	bls.n	811618c <_free_r+0x74>
 8116186:	230c      	movs	r3, #12
 8116188:	602b      	str	r3, [r5, #0]
 811618a:	e7d6      	b.n	811613a <_free_r+0x22>
 811618c:	6820      	ldr	r0, [r4, #0]
 811618e:	1821      	adds	r1, r4, r0
 8116190:	428b      	cmp	r3, r1
 8116192:	bf04      	itt	eq
 8116194:	6819      	ldreq	r1, [r3, #0]
 8116196:	685b      	ldreq	r3, [r3, #4]
 8116198:	6063      	str	r3, [r4, #4]
 811619a:	bf04      	itt	eq
 811619c:	1809      	addeq	r1, r1, r0
 811619e:	6021      	streq	r1, [r4, #0]
 81161a0:	6054      	str	r4, [r2, #4]
 81161a2:	e7ca      	b.n	811613a <_free_r+0x22>
 81161a4:	bd38      	pop	{r3, r4, r5, pc}
 81161a6:	bf00      	nop
 81161a8:	10011cc4 	.word	0x10011cc4

081161ac <__sfputc_r>:
 81161ac:	6893      	ldr	r3, [r2, #8]
 81161ae:	3b01      	subs	r3, #1
 81161b0:	2b00      	cmp	r3, #0
 81161b2:	b410      	push	{r4}
 81161b4:	6093      	str	r3, [r2, #8]
 81161b6:	da08      	bge.n	81161ca <__sfputc_r+0x1e>
 81161b8:	6994      	ldr	r4, [r2, #24]
 81161ba:	42a3      	cmp	r3, r4
 81161bc:	db01      	blt.n	81161c2 <__sfputc_r+0x16>
 81161be:	290a      	cmp	r1, #10
 81161c0:	d103      	bne.n	81161ca <__sfputc_r+0x1e>
 81161c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 81161c6:	f000 bb7f 	b.w	81168c8 <__swbuf_r>
 81161ca:	6813      	ldr	r3, [r2, #0]
 81161cc:	1c58      	adds	r0, r3, #1
 81161ce:	6010      	str	r0, [r2, #0]
 81161d0:	7019      	strb	r1, [r3, #0]
 81161d2:	4608      	mov	r0, r1
 81161d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 81161d8:	4770      	bx	lr

081161da <__sfputs_r>:
 81161da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81161dc:	4606      	mov	r6, r0
 81161de:	460f      	mov	r7, r1
 81161e0:	4614      	mov	r4, r2
 81161e2:	18d5      	adds	r5, r2, r3
 81161e4:	42ac      	cmp	r4, r5
 81161e6:	d101      	bne.n	81161ec <__sfputs_r+0x12>
 81161e8:	2000      	movs	r0, #0
 81161ea:	e007      	b.n	81161fc <__sfputs_r+0x22>
 81161ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 81161f0:	463a      	mov	r2, r7
 81161f2:	4630      	mov	r0, r6
 81161f4:	f7ff ffda 	bl	81161ac <__sfputc_r>
 81161f8:	1c43      	adds	r3, r0, #1
 81161fa:	d1f3      	bne.n	81161e4 <__sfputs_r+0xa>
 81161fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08116200 <_vfiprintf_r>:
 8116200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8116204:	460d      	mov	r5, r1
 8116206:	b09d      	sub	sp, #116	@ 0x74
 8116208:	4614      	mov	r4, r2
 811620a:	4698      	mov	r8, r3
 811620c:	4606      	mov	r6, r0
 811620e:	b118      	cbz	r0, 8116218 <_vfiprintf_r+0x18>
 8116210:	6a03      	ldr	r3, [r0, #32]
 8116212:	b90b      	cbnz	r3, 8116218 <_vfiprintf_r+0x18>
 8116214:	f7ff fd7e 	bl	8115d14 <__sinit>
 8116218:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811621a:	07d9      	lsls	r1, r3, #31
 811621c:	d405      	bmi.n	811622a <_vfiprintf_r+0x2a>
 811621e:	89ab      	ldrh	r3, [r5, #12]
 8116220:	059a      	lsls	r2, r3, #22
 8116222:	d402      	bmi.n	811622a <_vfiprintf_r+0x2a>
 8116224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8116226:	f7ff ff48 	bl	81160ba <__retarget_lock_acquire_recursive>
 811622a:	89ab      	ldrh	r3, [r5, #12]
 811622c:	071b      	lsls	r3, r3, #28
 811622e:	d501      	bpl.n	8116234 <_vfiprintf_r+0x34>
 8116230:	692b      	ldr	r3, [r5, #16]
 8116232:	b99b      	cbnz	r3, 811625c <_vfiprintf_r+0x5c>
 8116234:	4629      	mov	r1, r5
 8116236:	4630      	mov	r0, r6
 8116238:	f000 fb84 	bl	8116944 <__swsetup_r>
 811623c:	b170      	cbz	r0, 811625c <_vfiprintf_r+0x5c>
 811623e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8116240:	07dc      	lsls	r4, r3, #31
 8116242:	d504      	bpl.n	811624e <_vfiprintf_r+0x4e>
 8116244:	f04f 30ff 	mov.w	r0, #4294967295
 8116248:	b01d      	add	sp, #116	@ 0x74
 811624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811624e:	89ab      	ldrh	r3, [r5, #12]
 8116250:	0598      	lsls	r0, r3, #22
 8116252:	d4f7      	bmi.n	8116244 <_vfiprintf_r+0x44>
 8116254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8116256:	f7ff ff31 	bl	81160bc <__retarget_lock_release_recursive>
 811625a:	e7f3      	b.n	8116244 <_vfiprintf_r+0x44>
 811625c:	2300      	movs	r3, #0
 811625e:	9309      	str	r3, [sp, #36]	@ 0x24
 8116260:	2320      	movs	r3, #32
 8116262:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8116266:	f8cd 800c 	str.w	r8, [sp, #12]
 811626a:	2330      	movs	r3, #48	@ 0x30
 811626c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 811641c <_vfiprintf_r+0x21c>
 8116270:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8116274:	f04f 0901 	mov.w	r9, #1
 8116278:	4623      	mov	r3, r4
 811627a:	469a      	mov	sl, r3
 811627c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8116280:	b10a      	cbz	r2, 8116286 <_vfiprintf_r+0x86>
 8116282:	2a25      	cmp	r2, #37	@ 0x25
 8116284:	d1f9      	bne.n	811627a <_vfiprintf_r+0x7a>
 8116286:	ebba 0b04 	subs.w	fp, sl, r4
 811628a:	d00b      	beq.n	81162a4 <_vfiprintf_r+0xa4>
 811628c:	465b      	mov	r3, fp
 811628e:	4622      	mov	r2, r4
 8116290:	4629      	mov	r1, r5
 8116292:	4630      	mov	r0, r6
 8116294:	f7ff ffa1 	bl	81161da <__sfputs_r>
 8116298:	3001      	adds	r0, #1
 811629a:	f000 80a7 	beq.w	81163ec <_vfiprintf_r+0x1ec>
 811629e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81162a0:	445a      	add	r2, fp
 81162a2:	9209      	str	r2, [sp, #36]	@ 0x24
 81162a4:	f89a 3000 	ldrb.w	r3, [sl]
 81162a8:	2b00      	cmp	r3, #0
 81162aa:	f000 809f 	beq.w	81163ec <_vfiprintf_r+0x1ec>
 81162ae:	2300      	movs	r3, #0
 81162b0:	f04f 32ff 	mov.w	r2, #4294967295
 81162b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81162b8:	f10a 0a01 	add.w	sl, sl, #1
 81162bc:	9304      	str	r3, [sp, #16]
 81162be:	9307      	str	r3, [sp, #28]
 81162c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 81162c4:	931a      	str	r3, [sp, #104]	@ 0x68
 81162c6:	4654      	mov	r4, sl
 81162c8:	2205      	movs	r2, #5
 81162ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 81162ce:	4853      	ldr	r0, [pc, #332]	@ (811641c <_vfiprintf_r+0x21c>)
 81162d0:	f7ea f806 	bl	81002e0 <memchr>
 81162d4:	9a04      	ldr	r2, [sp, #16]
 81162d6:	b9d8      	cbnz	r0, 8116310 <_vfiprintf_r+0x110>
 81162d8:	06d1      	lsls	r1, r2, #27
 81162da:	bf44      	itt	mi
 81162dc:	2320      	movmi	r3, #32
 81162de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81162e2:	0713      	lsls	r3, r2, #28
 81162e4:	bf44      	itt	mi
 81162e6:	232b      	movmi	r3, #43	@ 0x2b
 81162e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81162ec:	f89a 3000 	ldrb.w	r3, [sl]
 81162f0:	2b2a      	cmp	r3, #42	@ 0x2a
 81162f2:	d015      	beq.n	8116320 <_vfiprintf_r+0x120>
 81162f4:	9a07      	ldr	r2, [sp, #28]
 81162f6:	4654      	mov	r4, sl
 81162f8:	2000      	movs	r0, #0
 81162fa:	f04f 0c0a 	mov.w	ip, #10
 81162fe:	4621      	mov	r1, r4
 8116300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8116304:	3b30      	subs	r3, #48	@ 0x30
 8116306:	2b09      	cmp	r3, #9
 8116308:	d94b      	bls.n	81163a2 <_vfiprintf_r+0x1a2>
 811630a:	b1b0      	cbz	r0, 811633a <_vfiprintf_r+0x13a>
 811630c:	9207      	str	r2, [sp, #28]
 811630e:	e014      	b.n	811633a <_vfiprintf_r+0x13a>
 8116310:	eba0 0308 	sub.w	r3, r0, r8
 8116314:	fa09 f303 	lsl.w	r3, r9, r3
 8116318:	4313      	orrs	r3, r2
 811631a:	9304      	str	r3, [sp, #16]
 811631c:	46a2      	mov	sl, r4
 811631e:	e7d2      	b.n	81162c6 <_vfiprintf_r+0xc6>
 8116320:	9b03      	ldr	r3, [sp, #12]
 8116322:	1d19      	adds	r1, r3, #4
 8116324:	681b      	ldr	r3, [r3, #0]
 8116326:	9103      	str	r1, [sp, #12]
 8116328:	2b00      	cmp	r3, #0
 811632a:	bfbb      	ittet	lt
 811632c:	425b      	neglt	r3, r3
 811632e:	f042 0202 	orrlt.w	r2, r2, #2
 8116332:	9307      	strge	r3, [sp, #28]
 8116334:	9307      	strlt	r3, [sp, #28]
 8116336:	bfb8      	it	lt
 8116338:	9204      	strlt	r2, [sp, #16]
 811633a:	7823      	ldrb	r3, [r4, #0]
 811633c:	2b2e      	cmp	r3, #46	@ 0x2e
 811633e:	d10a      	bne.n	8116356 <_vfiprintf_r+0x156>
 8116340:	7863      	ldrb	r3, [r4, #1]
 8116342:	2b2a      	cmp	r3, #42	@ 0x2a
 8116344:	d132      	bne.n	81163ac <_vfiprintf_r+0x1ac>
 8116346:	9b03      	ldr	r3, [sp, #12]
 8116348:	1d1a      	adds	r2, r3, #4
 811634a:	681b      	ldr	r3, [r3, #0]
 811634c:	9203      	str	r2, [sp, #12]
 811634e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8116352:	3402      	adds	r4, #2
 8116354:	9305      	str	r3, [sp, #20]
 8116356:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 811642c <_vfiprintf_r+0x22c>
 811635a:	7821      	ldrb	r1, [r4, #0]
 811635c:	2203      	movs	r2, #3
 811635e:	4650      	mov	r0, sl
 8116360:	f7e9 ffbe 	bl	81002e0 <memchr>
 8116364:	b138      	cbz	r0, 8116376 <_vfiprintf_r+0x176>
 8116366:	9b04      	ldr	r3, [sp, #16]
 8116368:	eba0 000a 	sub.w	r0, r0, sl
 811636c:	2240      	movs	r2, #64	@ 0x40
 811636e:	4082      	lsls	r2, r0
 8116370:	4313      	orrs	r3, r2
 8116372:	3401      	adds	r4, #1
 8116374:	9304      	str	r3, [sp, #16]
 8116376:	f814 1b01 	ldrb.w	r1, [r4], #1
 811637a:	4829      	ldr	r0, [pc, #164]	@ (8116420 <_vfiprintf_r+0x220>)
 811637c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8116380:	2206      	movs	r2, #6
 8116382:	f7e9 ffad 	bl	81002e0 <memchr>
 8116386:	2800      	cmp	r0, #0
 8116388:	d03f      	beq.n	811640a <_vfiprintf_r+0x20a>
 811638a:	4b26      	ldr	r3, [pc, #152]	@ (8116424 <_vfiprintf_r+0x224>)
 811638c:	bb1b      	cbnz	r3, 81163d6 <_vfiprintf_r+0x1d6>
 811638e:	9b03      	ldr	r3, [sp, #12]
 8116390:	3307      	adds	r3, #7
 8116392:	f023 0307 	bic.w	r3, r3, #7
 8116396:	3308      	adds	r3, #8
 8116398:	9303      	str	r3, [sp, #12]
 811639a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811639c:	443b      	add	r3, r7
 811639e:	9309      	str	r3, [sp, #36]	@ 0x24
 81163a0:	e76a      	b.n	8116278 <_vfiprintf_r+0x78>
 81163a2:	fb0c 3202 	mla	r2, ip, r2, r3
 81163a6:	460c      	mov	r4, r1
 81163a8:	2001      	movs	r0, #1
 81163aa:	e7a8      	b.n	81162fe <_vfiprintf_r+0xfe>
 81163ac:	2300      	movs	r3, #0
 81163ae:	3401      	adds	r4, #1
 81163b0:	9305      	str	r3, [sp, #20]
 81163b2:	4619      	mov	r1, r3
 81163b4:	f04f 0c0a 	mov.w	ip, #10
 81163b8:	4620      	mov	r0, r4
 81163ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 81163be:	3a30      	subs	r2, #48	@ 0x30
 81163c0:	2a09      	cmp	r2, #9
 81163c2:	d903      	bls.n	81163cc <_vfiprintf_r+0x1cc>
 81163c4:	2b00      	cmp	r3, #0
 81163c6:	d0c6      	beq.n	8116356 <_vfiprintf_r+0x156>
 81163c8:	9105      	str	r1, [sp, #20]
 81163ca:	e7c4      	b.n	8116356 <_vfiprintf_r+0x156>
 81163cc:	fb0c 2101 	mla	r1, ip, r1, r2
 81163d0:	4604      	mov	r4, r0
 81163d2:	2301      	movs	r3, #1
 81163d4:	e7f0      	b.n	81163b8 <_vfiprintf_r+0x1b8>
 81163d6:	ab03      	add	r3, sp, #12
 81163d8:	9300      	str	r3, [sp, #0]
 81163da:	462a      	mov	r2, r5
 81163dc:	4b12      	ldr	r3, [pc, #72]	@ (8116428 <_vfiprintf_r+0x228>)
 81163de:	a904      	add	r1, sp, #16
 81163e0:	4630      	mov	r0, r6
 81163e2:	f3af 8000 	nop.w
 81163e6:	4607      	mov	r7, r0
 81163e8:	1c78      	adds	r0, r7, #1
 81163ea:	d1d6      	bne.n	811639a <_vfiprintf_r+0x19a>
 81163ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 81163ee:	07d9      	lsls	r1, r3, #31
 81163f0:	d405      	bmi.n	81163fe <_vfiprintf_r+0x1fe>
 81163f2:	89ab      	ldrh	r3, [r5, #12]
 81163f4:	059a      	lsls	r2, r3, #22
 81163f6:	d402      	bmi.n	81163fe <_vfiprintf_r+0x1fe>
 81163f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 81163fa:	f7ff fe5f 	bl	81160bc <__retarget_lock_release_recursive>
 81163fe:	89ab      	ldrh	r3, [r5, #12]
 8116400:	065b      	lsls	r3, r3, #25
 8116402:	f53f af1f 	bmi.w	8116244 <_vfiprintf_r+0x44>
 8116406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8116408:	e71e      	b.n	8116248 <_vfiprintf_r+0x48>
 811640a:	ab03      	add	r3, sp, #12
 811640c:	9300      	str	r3, [sp, #0]
 811640e:	462a      	mov	r2, r5
 8116410:	4b05      	ldr	r3, [pc, #20]	@ (8116428 <_vfiprintf_r+0x228>)
 8116412:	a904      	add	r1, sp, #16
 8116414:	4630      	mov	r0, r6
 8116416:	f000 f879 	bl	811650c <_printf_i>
 811641a:	e7e4      	b.n	81163e6 <_vfiprintf_r+0x1e6>
 811641c:	08119cfb 	.word	0x08119cfb
 8116420:	08119d05 	.word	0x08119d05
 8116424:	00000000 	.word	0x00000000
 8116428:	081161db 	.word	0x081161db
 811642c:	08119d01 	.word	0x08119d01

08116430 <_printf_common>:
 8116430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8116434:	4616      	mov	r6, r2
 8116436:	4698      	mov	r8, r3
 8116438:	688a      	ldr	r2, [r1, #8]
 811643a:	690b      	ldr	r3, [r1, #16]
 811643c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8116440:	4293      	cmp	r3, r2
 8116442:	bfb8      	it	lt
 8116444:	4613      	movlt	r3, r2
 8116446:	6033      	str	r3, [r6, #0]
 8116448:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 811644c:	4607      	mov	r7, r0
 811644e:	460c      	mov	r4, r1
 8116450:	b10a      	cbz	r2, 8116456 <_printf_common+0x26>
 8116452:	3301      	adds	r3, #1
 8116454:	6033      	str	r3, [r6, #0]
 8116456:	6823      	ldr	r3, [r4, #0]
 8116458:	0699      	lsls	r1, r3, #26
 811645a:	bf42      	ittt	mi
 811645c:	6833      	ldrmi	r3, [r6, #0]
 811645e:	3302      	addmi	r3, #2
 8116460:	6033      	strmi	r3, [r6, #0]
 8116462:	6825      	ldr	r5, [r4, #0]
 8116464:	f015 0506 	ands.w	r5, r5, #6
 8116468:	d106      	bne.n	8116478 <_printf_common+0x48>
 811646a:	f104 0a19 	add.w	sl, r4, #25
 811646e:	68e3      	ldr	r3, [r4, #12]
 8116470:	6832      	ldr	r2, [r6, #0]
 8116472:	1a9b      	subs	r3, r3, r2
 8116474:	42ab      	cmp	r3, r5
 8116476:	dc26      	bgt.n	81164c6 <_printf_common+0x96>
 8116478:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 811647c:	6822      	ldr	r2, [r4, #0]
 811647e:	3b00      	subs	r3, #0
 8116480:	bf18      	it	ne
 8116482:	2301      	movne	r3, #1
 8116484:	0692      	lsls	r2, r2, #26
 8116486:	d42b      	bmi.n	81164e0 <_printf_common+0xb0>
 8116488:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 811648c:	4641      	mov	r1, r8
 811648e:	4638      	mov	r0, r7
 8116490:	47c8      	blx	r9
 8116492:	3001      	adds	r0, #1
 8116494:	d01e      	beq.n	81164d4 <_printf_common+0xa4>
 8116496:	6823      	ldr	r3, [r4, #0]
 8116498:	6922      	ldr	r2, [r4, #16]
 811649a:	f003 0306 	and.w	r3, r3, #6
 811649e:	2b04      	cmp	r3, #4
 81164a0:	bf02      	ittt	eq
 81164a2:	68e5      	ldreq	r5, [r4, #12]
 81164a4:	6833      	ldreq	r3, [r6, #0]
 81164a6:	1aed      	subeq	r5, r5, r3
 81164a8:	68a3      	ldr	r3, [r4, #8]
 81164aa:	bf0c      	ite	eq
 81164ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81164b0:	2500      	movne	r5, #0
 81164b2:	4293      	cmp	r3, r2
 81164b4:	bfc4      	itt	gt
 81164b6:	1a9b      	subgt	r3, r3, r2
 81164b8:	18ed      	addgt	r5, r5, r3
 81164ba:	2600      	movs	r6, #0
 81164bc:	341a      	adds	r4, #26
 81164be:	42b5      	cmp	r5, r6
 81164c0:	d11a      	bne.n	81164f8 <_printf_common+0xc8>
 81164c2:	2000      	movs	r0, #0
 81164c4:	e008      	b.n	81164d8 <_printf_common+0xa8>
 81164c6:	2301      	movs	r3, #1
 81164c8:	4652      	mov	r2, sl
 81164ca:	4641      	mov	r1, r8
 81164cc:	4638      	mov	r0, r7
 81164ce:	47c8      	blx	r9
 81164d0:	3001      	adds	r0, #1
 81164d2:	d103      	bne.n	81164dc <_printf_common+0xac>
 81164d4:	f04f 30ff 	mov.w	r0, #4294967295
 81164d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81164dc:	3501      	adds	r5, #1
 81164de:	e7c6      	b.n	811646e <_printf_common+0x3e>
 81164e0:	18e1      	adds	r1, r4, r3
 81164e2:	1c5a      	adds	r2, r3, #1
 81164e4:	2030      	movs	r0, #48	@ 0x30
 81164e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 81164ea:	4422      	add	r2, r4
 81164ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 81164f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 81164f4:	3302      	adds	r3, #2
 81164f6:	e7c7      	b.n	8116488 <_printf_common+0x58>
 81164f8:	2301      	movs	r3, #1
 81164fa:	4622      	mov	r2, r4
 81164fc:	4641      	mov	r1, r8
 81164fe:	4638      	mov	r0, r7
 8116500:	47c8      	blx	r9
 8116502:	3001      	adds	r0, #1
 8116504:	d0e6      	beq.n	81164d4 <_printf_common+0xa4>
 8116506:	3601      	adds	r6, #1
 8116508:	e7d9      	b.n	81164be <_printf_common+0x8e>
	...

0811650c <_printf_i>:
 811650c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8116510:	7e0f      	ldrb	r7, [r1, #24]
 8116512:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8116514:	2f78      	cmp	r7, #120	@ 0x78
 8116516:	4691      	mov	r9, r2
 8116518:	4680      	mov	r8, r0
 811651a:	460c      	mov	r4, r1
 811651c:	469a      	mov	sl, r3
 811651e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8116522:	d807      	bhi.n	8116534 <_printf_i+0x28>
 8116524:	2f62      	cmp	r7, #98	@ 0x62
 8116526:	d80a      	bhi.n	811653e <_printf_i+0x32>
 8116528:	2f00      	cmp	r7, #0
 811652a:	f000 80d2 	beq.w	81166d2 <_printf_i+0x1c6>
 811652e:	2f58      	cmp	r7, #88	@ 0x58
 8116530:	f000 80b9 	beq.w	81166a6 <_printf_i+0x19a>
 8116534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8116538:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 811653c:	e03a      	b.n	81165b4 <_printf_i+0xa8>
 811653e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8116542:	2b15      	cmp	r3, #21
 8116544:	d8f6      	bhi.n	8116534 <_printf_i+0x28>
 8116546:	a101      	add	r1, pc, #4	@ (adr r1, 811654c <_printf_i+0x40>)
 8116548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 811654c:	081165a5 	.word	0x081165a5
 8116550:	081165b9 	.word	0x081165b9
 8116554:	08116535 	.word	0x08116535
 8116558:	08116535 	.word	0x08116535
 811655c:	08116535 	.word	0x08116535
 8116560:	08116535 	.word	0x08116535
 8116564:	081165b9 	.word	0x081165b9
 8116568:	08116535 	.word	0x08116535
 811656c:	08116535 	.word	0x08116535
 8116570:	08116535 	.word	0x08116535
 8116574:	08116535 	.word	0x08116535
 8116578:	081166b9 	.word	0x081166b9
 811657c:	081165e3 	.word	0x081165e3
 8116580:	08116673 	.word	0x08116673
 8116584:	08116535 	.word	0x08116535
 8116588:	08116535 	.word	0x08116535
 811658c:	081166db 	.word	0x081166db
 8116590:	08116535 	.word	0x08116535
 8116594:	081165e3 	.word	0x081165e3
 8116598:	08116535 	.word	0x08116535
 811659c:	08116535 	.word	0x08116535
 81165a0:	0811667b 	.word	0x0811667b
 81165a4:	6833      	ldr	r3, [r6, #0]
 81165a6:	1d1a      	adds	r2, r3, #4
 81165a8:	681b      	ldr	r3, [r3, #0]
 81165aa:	6032      	str	r2, [r6, #0]
 81165ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 81165b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 81165b4:	2301      	movs	r3, #1
 81165b6:	e09d      	b.n	81166f4 <_printf_i+0x1e8>
 81165b8:	6833      	ldr	r3, [r6, #0]
 81165ba:	6820      	ldr	r0, [r4, #0]
 81165bc:	1d19      	adds	r1, r3, #4
 81165be:	6031      	str	r1, [r6, #0]
 81165c0:	0606      	lsls	r6, r0, #24
 81165c2:	d501      	bpl.n	81165c8 <_printf_i+0xbc>
 81165c4:	681d      	ldr	r5, [r3, #0]
 81165c6:	e003      	b.n	81165d0 <_printf_i+0xc4>
 81165c8:	0645      	lsls	r5, r0, #25
 81165ca:	d5fb      	bpl.n	81165c4 <_printf_i+0xb8>
 81165cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 81165d0:	2d00      	cmp	r5, #0
 81165d2:	da03      	bge.n	81165dc <_printf_i+0xd0>
 81165d4:	232d      	movs	r3, #45	@ 0x2d
 81165d6:	426d      	negs	r5, r5
 81165d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81165dc:	4859      	ldr	r0, [pc, #356]	@ (8116744 <_printf_i+0x238>)
 81165de:	230a      	movs	r3, #10
 81165e0:	e011      	b.n	8116606 <_printf_i+0xfa>
 81165e2:	6821      	ldr	r1, [r4, #0]
 81165e4:	6833      	ldr	r3, [r6, #0]
 81165e6:	0608      	lsls	r0, r1, #24
 81165e8:	f853 5b04 	ldr.w	r5, [r3], #4
 81165ec:	d402      	bmi.n	81165f4 <_printf_i+0xe8>
 81165ee:	0649      	lsls	r1, r1, #25
 81165f0:	bf48      	it	mi
 81165f2:	b2ad      	uxthmi	r5, r5
 81165f4:	2f6f      	cmp	r7, #111	@ 0x6f
 81165f6:	4853      	ldr	r0, [pc, #332]	@ (8116744 <_printf_i+0x238>)
 81165f8:	6033      	str	r3, [r6, #0]
 81165fa:	bf14      	ite	ne
 81165fc:	230a      	movne	r3, #10
 81165fe:	2308      	moveq	r3, #8
 8116600:	2100      	movs	r1, #0
 8116602:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8116606:	6866      	ldr	r6, [r4, #4]
 8116608:	60a6      	str	r6, [r4, #8]
 811660a:	2e00      	cmp	r6, #0
 811660c:	bfa2      	ittt	ge
 811660e:	6821      	ldrge	r1, [r4, #0]
 8116610:	f021 0104 	bicge.w	r1, r1, #4
 8116614:	6021      	strge	r1, [r4, #0]
 8116616:	b90d      	cbnz	r5, 811661c <_printf_i+0x110>
 8116618:	2e00      	cmp	r6, #0
 811661a:	d04b      	beq.n	81166b4 <_printf_i+0x1a8>
 811661c:	4616      	mov	r6, r2
 811661e:	fbb5 f1f3 	udiv	r1, r5, r3
 8116622:	fb03 5711 	mls	r7, r3, r1, r5
 8116626:	5dc7      	ldrb	r7, [r0, r7]
 8116628:	f806 7d01 	strb.w	r7, [r6, #-1]!
 811662c:	462f      	mov	r7, r5
 811662e:	42bb      	cmp	r3, r7
 8116630:	460d      	mov	r5, r1
 8116632:	d9f4      	bls.n	811661e <_printf_i+0x112>
 8116634:	2b08      	cmp	r3, #8
 8116636:	d10b      	bne.n	8116650 <_printf_i+0x144>
 8116638:	6823      	ldr	r3, [r4, #0]
 811663a:	07df      	lsls	r7, r3, #31
 811663c:	d508      	bpl.n	8116650 <_printf_i+0x144>
 811663e:	6923      	ldr	r3, [r4, #16]
 8116640:	6861      	ldr	r1, [r4, #4]
 8116642:	4299      	cmp	r1, r3
 8116644:	bfde      	ittt	le
 8116646:	2330      	movle	r3, #48	@ 0x30
 8116648:	f806 3c01 	strble.w	r3, [r6, #-1]
 811664c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8116650:	1b92      	subs	r2, r2, r6
 8116652:	6122      	str	r2, [r4, #16]
 8116654:	f8cd a000 	str.w	sl, [sp]
 8116658:	464b      	mov	r3, r9
 811665a:	aa03      	add	r2, sp, #12
 811665c:	4621      	mov	r1, r4
 811665e:	4640      	mov	r0, r8
 8116660:	f7ff fee6 	bl	8116430 <_printf_common>
 8116664:	3001      	adds	r0, #1
 8116666:	d14a      	bne.n	81166fe <_printf_i+0x1f2>
 8116668:	f04f 30ff 	mov.w	r0, #4294967295
 811666c:	b004      	add	sp, #16
 811666e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8116672:	6823      	ldr	r3, [r4, #0]
 8116674:	f043 0320 	orr.w	r3, r3, #32
 8116678:	6023      	str	r3, [r4, #0]
 811667a:	4833      	ldr	r0, [pc, #204]	@ (8116748 <_printf_i+0x23c>)
 811667c:	2778      	movs	r7, #120	@ 0x78
 811667e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8116682:	6823      	ldr	r3, [r4, #0]
 8116684:	6831      	ldr	r1, [r6, #0]
 8116686:	061f      	lsls	r7, r3, #24
 8116688:	f851 5b04 	ldr.w	r5, [r1], #4
 811668c:	d402      	bmi.n	8116694 <_printf_i+0x188>
 811668e:	065f      	lsls	r7, r3, #25
 8116690:	bf48      	it	mi
 8116692:	b2ad      	uxthmi	r5, r5
 8116694:	6031      	str	r1, [r6, #0]
 8116696:	07d9      	lsls	r1, r3, #31
 8116698:	bf44      	itt	mi
 811669a:	f043 0320 	orrmi.w	r3, r3, #32
 811669e:	6023      	strmi	r3, [r4, #0]
 81166a0:	b11d      	cbz	r5, 81166aa <_printf_i+0x19e>
 81166a2:	2310      	movs	r3, #16
 81166a4:	e7ac      	b.n	8116600 <_printf_i+0xf4>
 81166a6:	4827      	ldr	r0, [pc, #156]	@ (8116744 <_printf_i+0x238>)
 81166a8:	e7e9      	b.n	811667e <_printf_i+0x172>
 81166aa:	6823      	ldr	r3, [r4, #0]
 81166ac:	f023 0320 	bic.w	r3, r3, #32
 81166b0:	6023      	str	r3, [r4, #0]
 81166b2:	e7f6      	b.n	81166a2 <_printf_i+0x196>
 81166b4:	4616      	mov	r6, r2
 81166b6:	e7bd      	b.n	8116634 <_printf_i+0x128>
 81166b8:	6833      	ldr	r3, [r6, #0]
 81166ba:	6825      	ldr	r5, [r4, #0]
 81166bc:	6961      	ldr	r1, [r4, #20]
 81166be:	1d18      	adds	r0, r3, #4
 81166c0:	6030      	str	r0, [r6, #0]
 81166c2:	062e      	lsls	r6, r5, #24
 81166c4:	681b      	ldr	r3, [r3, #0]
 81166c6:	d501      	bpl.n	81166cc <_printf_i+0x1c0>
 81166c8:	6019      	str	r1, [r3, #0]
 81166ca:	e002      	b.n	81166d2 <_printf_i+0x1c6>
 81166cc:	0668      	lsls	r0, r5, #25
 81166ce:	d5fb      	bpl.n	81166c8 <_printf_i+0x1bc>
 81166d0:	8019      	strh	r1, [r3, #0]
 81166d2:	2300      	movs	r3, #0
 81166d4:	6123      	str	r3, [r4, #16]
 81166d6:	4616      	mov	r6, r2
 81166d8:	e7bc      	b.n	8116654 <_printf_i+0x148>
 81166da:	6833      	ldr	r3, [r6, #0]
 81166dc:	1d1a      	adds	r2, r3, #4
 81166de:	6032      	str	r2, [r6, #0]
 81166e0:	681e      	ldr	r6, [r3, #0]
 81166e2:	6862      	ldr	r2, [r4, #4]
 81166e4:	2100      	movs	r1, #0
 81166e6:	4630      	mov	r0, r6
 81166e8:	f7e9 fdfa 	bl	81002e0 <memchr>
 81166ec:	b108      	cbz	r0, 81166f2 <_printf_i+0x1e6>
 81166ee:	1b80      	subs	r0, r0, r6
 81166f0:	6060      	str	r0, [r4, #4]
 81166f2:	6863      	ldr	r3, [r4, #4]
 81166f4:	6123      	str	r3, [r4, #16]
 81166f6:	2300      	movs	r3, #0
 81166f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81166fc:	e7aa      	b.n	8116654 <_printf_i+0x148>
 81166fe:	6923      	ldr	r3, [r4, #16]
 8116700:	4632      	mov	r2, r6
 8116702:	4649      	mov	r1, r9
 8116704:	4640      	mov	r0, r8
 8116706:	47d0      	blx	sl
 8116708:	3001      	adds	r0, #1
 811670a:	d0ad      	beq.n	8116668 <_printf_i+0x15c>
 811670c:	6823      	ldr	r3, [r4, #0]
 811670e:	079b      	lsls	r3, r3, #30
 8116710:	d413      	bmi.n	811673a <_printf_i+0x22e>
 8116712:	68e0      	ldr	r0, [r4, #12]
 8116714:	9b03      	ldr	r3, [sp, #12]
 8116716:	4298      	cmp	r0, r3
 8116718:	bfb8      	it	lt
 811671a:	4618      	movlt	r0, r3
 811671c:	e7a6      	b.n	811666c <_printf_i+0x160>
 811671e:	2301      	movs	r3, #1
 8116720:	4632      	mov	r2, r6
 8116722:	4649      	mov	r1, r9
 8116724:	4640      	mov	r0, r8
 8116726:	47d0      	blx	sl
 8116728:	3001      	adds	r0, #1
 811672a:	d09d      	beq.n	8116668 <_printf_i+0x15c>
 811672c:	3501      	adds	r5, #1
 811672e:	68e3      	ldr	r3, [r4, #12]
 8116730:	9903      	ldr	r1, [sp, #12]
 8116732:	1a5b      	subs	r3, r3, r1
 8116734:	42ab      	cmp	r3, r5
 8116736:	dcf2      	bgt.n	811671e <_printf_i+0x212>
 8116738:	e7eb      	b.n	8116712 <_printf_i+0x206>
 811673a:	2500      	movs	r5, #0
 811673c:	f104 0619 	add.w	r6, r4, #25
 8116740:	e7f5      	b.n	811672e <_printf_i+0x222>
 8116742:	bf00      	nop
 8116744:	08119d0c 	.word	0x08119d0c
 8116748:	08119d1d 	.word	0x08119d1d

0811674c <__sflush_r>:
 811674c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8116750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8116754:	0716      	lsls	r6, r2, #28
 8116756:	4605      	mov	r5, r0
 8116758:	460c      	mov	r4, r1
 811675a:	d454      	bmi.n	8116806 <__sflush_r+0xba>
 811675c:	684b      	ldr	r3, [r1, #4]
 811675e:	2b00      	cmp	r3, #0
 8116760:	dc02      	bgt.n	8116768 <__sflush_r+0x1c>
 8116762:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8116764:	2b00      	cmp	r3, #0
 8116766:	dd48      	ble.n	81167fa <__sflush_r+0xae>
 8116768:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 811676a:	2e00      	cmp	r6, #0
 811676c:	d045      	beq.n	81167fa <__sflush_r+0xae>
 811676e:	2300      	movs	r3, #0
 8116770:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8116774:	682f      	ldr	r7, [r5, #0]
 8116776:	6a21      	ldr	r1, [r4, #32]
 8116778:	602b      	str	r3, [r5, #0]
 811677a:	d030      	beq.n	81167de <__sflush_r+0x92>
 811677c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 811677e:	89a3      	ldrh	r3, [r4, #12]
 8116780:	0759      	lsls	r1, r3, #29
 8116782:	d505      	bpl.n	8116790 <__sflush_r+0x44>
 8116784:	6863      	ldr	r3, [r4, #4]
 8116786:	1ad2      	subs	r2, r2, r3
 8116788:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 811678a:	b10b      	cbz	r3, 8116790 <__sflush_r+0x44>
 811678c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 811678e:	1ad2      	subs	r2, r2, r3
 8116790:	2300      	movs	r3, #0
 8116792:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8116794:	6a21      	ldr	r1, [r4, #32]
 8116796:	4628      	mov	r0, r5
 8116798:	47b0      	blx	r6
 811679a:	1c43      	adds	r3, r0, #1
 811679c:	89a3      	ldrh	r3, [r4, #12]
 811679e:	d106      	bne.n	81167ae <__sflush_r+0x62>
 81167a0:	6829      	ldr	r1, [r5, #0]
 81167a2:	291d      	cmp	r1, #29
 81167a4:	d82b      	bhi.n	81167fe <__sflush_r+0xb2>
 81167a6:	4a2a      	ldr	r2, [pc, #168]	@ (8116850 <__sflush_r+0x104>)
 81167a8:	410a      	asrs	r2, r1
 81167aa:	07d6      	lsls	r6, r2, #31
 81167ac:	d427      	bmi.n	81167fe <__sflush_r+0xb2>
 81167ae:	2200      	movs	r2, #0
 81167b0:	6062      	str	r2, [r4, #4]
 81167b2:	04d9      	lsls	r1, r3, #19
 81167b4:	6922      	ldr	r2, [r4, #16]
 81167b6:	6022      	str	r2, [r4, #0]
 81167b8:	d504      	bpl.n	81167c4 <__sflush_r+0x78>
 81167ba:	1c42      	adds	r2, r0, #1
 81167bc:	d101      	bne.n	81167c2 <__sflush_r+0x76>
 81167be:	682b      	ldr	r3, [r5, #0]
 81167c0:	b903      	cbnz	r3, 81167c4 <__sflush_r+0x78>
 81167c2:	6560      	str	r0, [r4, #84]	@ 0x54
 81167c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81167c6:	602f      	str	r7, [r5, #0]
 81167c8:	b1b9      	cbz	r1, 81167fa <__sflush_r+0xae>
 81167ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81167ce:	4299      	cmp	r1, r3
 81167d0:	d002      	beq.n	81167d8 <__sflush_r+0x8c>
 81167d2:	4628      	mov	r0, r5
 81167d4:	f7ff fca0 	bl	8116118 <_free_r>
 81167d8:	2300      	movs	r3, #0
 81167da:	6363      	str	r3, [r4, #52]	@ 0x34
 81167dc:	e00d      	b.n	81167fa <__sflush_r+0xae>
 81167de:	2301      	movs	r3, #1
 81167e0:	4628      	mov	r0, r5
 81167e2:	47b0      	blx	r6
 81167e4:	4602      	mov	r2, r0
 81167e6:	1c50      	adds	r0, r2, #1
 81167e8:	d1c9      	bne.n	811677e <__sflush_r+0x32>
 81167ea:	682b      	ldr	r3, [r5, #0]
 81167ec:	2b00      	cmp	r3, #0
 81167ee:	d0c6      	beq.n	811677e <__sflush_r+0x32>
 81167f0:	2b1d      	cmp	r3, #29
 81167f2:	d001      	beq.n	81167f8 <__sflush_r+0xac>
 81167f4:	2b16      	cmp	r3, #22
 81167f6:	d11e      	bne.n	8116836 <__sflush_r+0xea>
 81167f8:	602f      	str	r7, [r5, #0]
 81167fa:	2000      	movs	r0, #0
 81167fc:	e022      	b.n	8116844 <__sflush_r+0xf8>
 81167fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8116802:	b21b      	sxth	r3, r3
 8116804:	e01b      	b.n	811683e <__sflush_r+0xf2>
 8116806:	690f      	ldr	r7, [r1, #16]
 8116808:	2f00      	cmp	r7, #0
 811680a:	d0f6      	beq.n	81167fa <__sflush_r+0xae>
 811680c:	0793      	lsls	r3, r2, #30
 811680e:	680e      	ldr	r6, [r1, #0]
 8116810:	bf08      	it	eq
 8116812:	694b      	ldreq	r3, [r1, #20]
 8116814:	600f      	str	r7, [r1, #0]
 8116816:	bf18      	it	ne
 8116818:	2300      	movne	r3, #0
 811681a:	eba6 0807 	sub.w	r8, r6, r7
 811681e:	608b      	str	r3, [r1, #8]
 8116820:	f1b8 0f00 	cmp.w	r8, #0
 8116824:	dde9      	ble.n	81167fa <__sflush_r+0xae>
 8116826:	6a21      	ldr	r1, [r4, #32]
 8116828:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 811682a:	4643      	mov	r3, r8
 811682c:	463a      	mov	r2, r7
 811682e:	4628      	mov	r0, r5
 8116830:	47b0      	blx	r6
 8116832:	2800      	cmp	r0, #0
 8116834:	dc08      	bgt.n	8116848 <__sflush_r+0xfc>
 8116836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811683a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811683e:	81a3      	strh	r3, [r4, #12]
 8116840:	f04f 30ff 	mov.w	r0, #4294967295
 8116844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8116848:	4407      	add	r7, r0
 811684a:	eba8 0800 	sub.w	r8, r8, r0
 811684e:	e7e7      	b.n	8116820 <__sflush_r+0xd4>
 8116850:	dfbffffe 	.word	0xdfbffffe

08116854 <_fflush_r>:
 8116854:	b538      	push	{r3, r4, r5, lr}
 8116856:	690b      	ldr	r3, [r1, #16]
 8116858:	4605      	mov	r5, r0
 811685a:	460c      	mov	r4, r1
 811685c:	b913      	cbnz	r3, 8116864 <_fflush_r+0x10>
 811685e:	2500      	movs	r5, #0
 8116860:	4628      	mov	r0, r5
 8116862:	bd38      	pop	{r3, r4, r5, pc}
 8116864:	b118      	cbz	r0, 811686e <_fflush_r+0x1a>
 8116866:	6a03      	ldr	r3, [r0, #32]
 8116868:	b90b      	cbnz	r3, 811686e <_fflush_r+0x1a>
 811686a:	f7ff fa53 	bl	8115d14 <__sinit>
 811686e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8116872:	2b00      	cmp	r3, #0
 8116874:	d0f3      	beq.n	811685e <_fflush_r+0xa>
 8116876:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8116878:	07d0      	lsls	r0, r2, #31
 811687a:	d404      	bmi.n	8116886 <_fflush_r+0x32>
 811687c:	0599      	lsls	r1, r3, #22
 811687e:	d402      	bmi.n	8116886 <_fflush_r+0x32>
 8116880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8116882:	f7ff fc1a 	bl	81160ba <__retarget_lock_acquire_recursive>
 8116886:	4628      	mov	r0, r5
 8116888:	4621      	mov	r1, r4
 811688a:	f7ff ff5f 	bl	811674c <__sflush_r>
 811688e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8116890:	07da      	lsls	r2, r3, #31
 8116892:	4605      	mov	r5, r0
 8116894:	d4e4      	bmi.n	8116860 <_fflush_r+0xc>
 8116896:	89a3      	ldrh	r3, [r4, #12]
 8116898:	059b      	lsls	r3, r3, #22
 811689a:	d4e1      	bmi.n	8116860 <_fflush_r+0xc>
 811689c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811689e:	f7ff fc0d 	bl	81160bc <__retarget_lock_release_recursive>
 81168a2:	e7dd      	b.n	8116860 <_fflush_r+0xc>

081168a4 <fiprintf>:
 81168a4:	b40e      	push	{r1, r2, r3}
 81168a6:	b503      	push	{r0, r1, lr}
 81168a8:	4601      	mov	r1, r0
 81168aa:	ab03      	add	r3, sp, #12
 81168ac:	4805      	ldr	r0, [pc, #20]	@ (81168c4 <fiprintf+0x20>)
 81168ae:	f853 2b04 	ldr.w	r2, [r3], #4
 81168b2:	6800      	ldr	r0, [r0, #0]
 81168b4:	9301      	str	r3, [sp, #4]
 81168b6:	f7ff fca3 	bl	8116200 <_vfiprintf_r>
 81168ba:	b002      	add	sp, #8
 81168bc:	f85d eb04 	ldr.w	lr, [sp], #4
 81168c0:	b003      	add	sp, #12
 81168c2:	4770      	bx	lr
 81168c4:	10000040 	.word	0x10000040

081168c8 <__swbuf_r>:
 81168c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81168ca:	460e      	mov	r6, r1
 81168cc:	4614      	mov	r4, r2
 81168ce:	4605      	mov	r5, r0
 81168d0:	b118      	cbz	r0, 81168da <__swbuf_r+0x12>
 81168d2:	6a03      	ldr	r3, [r0, #32]
 81168d4:	b90b      	cbnz	r3, 81168da <__swbuf_r+0x12>
 81168d6:	f7ff fa1d 	bl	8115d14 <__sinit>
 81168da:	69a3      	ldr	r3, [r4, #24]
 81168dc:	60a3      	str	r3, [r4, #8]
 81168de:	89a3      	ldrh	r3, [r4, #12]
 81168e0:	071a      	lsls	r2, r3, #28
 81168e2:	d501      	bpl.n	81168e8 <__swbuf_r+0x20>
 81168e4:	6923      	ldr	r3, [r4, #16]
 81168e6:	b943      	cbnz	r3, 81168fa <__swbuf_r+0x32>
 81168e8:	4621      	mov	r1, r4
 81168ea:	4628      	mov	r0, r5
 81168ec:	f000 f82a 	bl	8116944 <__swsetup_r>
 81168f0:	b118      	cbz	r0, 81168fa <__swbuf_r+0x32>
 81168f2:	f04f 37ff 	mov.w	r7, #4294967295
 81168f6:	4638      	mov	r0, r7
 81168f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81168fa:	6823      	ldr	r3, [r4, #0]
 81168fc:	6922      	ldr	r2, [r4, #16]
 81168fe:	1a98      	subs	r0, r3, r2
 8116900:	6963      	ldr	r3, [r4, #20]
 8116902:	b2f6      	uxtb	r6, r6
 8116904:	4283      	cmp	r3, r0
 8116906:	4637      	mov	r7, r6
 8116908:	dc05      	bgt.n	8116916 <__swbuf_r+0x4e>
 811690a:	4621      	mov	r1, r4
 811690c:	4628      	mov	r0, r5
 811690e:	f7ff ffa1 	bl	8116854 <_fflush_r>
 8116912:	2800      	cmp	r0, #0
 8116914:	d1ed      	bne.n	81168f2 <__swbuf_r+0x2a>
 8116916:	68a3      	ldr	r3, [r4, #8]
 8116918:	3b01      	subs	r3, #1
 811691a:	60a3      	str	r3, [r4, #8]
 811691c:	6823      	ldr	r3, [r4, #0]
 811691e:	1c5a      	adds	r2, r3, #1
 8116920:	6022      	str	r2, [r4, #0]
 8116922:	701e      	strb	r6, [r3, #0]
 8116924:	6962      	ldr	r2, [r4, #20]
 8116926:	1c43      	adds	r3, r0, #1
 8116928:	429a      	cmp	r2, r3
 811692a:	d004      	beq.n	8116936 <__swbuf_r+0x6e>
 811692c:	89a3      	ldrh	r3, [r4, #12]
 811692e:	07db      	lsls	r3, r3, #31
 8116930:	d5e1      	bpl.n	81168f6 <__swbuf_r+0x2e>
 8116932:	2e0a      	cmp	r6, #10
 8116934:	d1df      	bne.n	81168f6 <__swbuf_r+0x2e>
 8116936:	4621      	mov	r1, r4
 8116938:	4628      	mov	r0, r5
 811693a:	f7ff ff8b 	bl	8116854 <_fflush_r>
 811693e:	2800      	cmp	r0, #0
 8116940:	d0d9      	beq.n	81168f6 <__swbuf_r+0x2e>
 8116942:	e7d6      	b.n	81168f2 <__swbuf_r+0x2a>

08116944 <__swsetup_r>:
 8116944:	b538      	push	{r3, r4, r5, lr}
 8116946:	4b29      	ldr	r3, [pc, #164]	@ (81169ec <__swsetup_r+0xa8>)
 8116948:	4605      	mov	r5, r0
 811694a:	6818      	ldr	r0, [r3, #0]
 811694c:	460c      	mov	r4, r1
 811694e:	b118      	cbz	r0, 8116958 <__swsetup_r+0x14>
 8116950:	6a03      	ldr	r3, [r0, #32]
 8116952:	b90b      	cbnz	r3, 8116958 <__swsetup_r+0x14>
 8116954:	f7ff f9de 	bl	8115d14 <__sinit>
 8116958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811695c:	0719      	lsls	r1, r3, #28
 811695e:	d422      	bmi.n	81169a6 <__swsetup_r+0x62>
 8116960:	06da      	lsls	r2, r3, #27
 8116962:	d407      	bmi.n	8116974 <__swsetup_r+0x30>
 8116964:	2209      	movs	r2, #9
 8116966:	602a      	str	r2, [r5, #0]
 8116968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811696c:	81a3      	strh	r3, [r4, #12]
 811696e:	f04f 30ff 	mov.w	r0, #4294967295
 8116972:	e033      	b.n	81169dc <__swsetup_r+0x98>
 8116974:	0758      	lsls	r0, r3, #29
 8116976:	d512      	bpl.n	811699e <__swsetup_r+0x5a>
 8116978:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811697a:	b141      	cbz	r1, 811698e <__swsetup_r+0x4a>
 811697c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8116980:	4299      	cmp	r1, r3
 8116982:	d002      	beq.n	811698a <__swsetup_r+0x46>
 8116984:	4628      	mov	r0, r5
 8116986:	f7ff fbc7 	bl	8116118 <_free_r>
 811698a:	2300      	movs	r3, #0
 811698c:	6363      	str	r3, [r4, #52]	@ 0x34
 811698e:	89a3      	ldrh	r3, [r4, #12]
 8116990:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8116994:	81a3      	strh	r3, [r4, #12]
 8116996:	2300      	movs	r3, #0
 8116998:	6063      	str	r3, [r4, #4]
 811699a:	6923      	ldr	r3, [r4, #16]
 811699c:	6023      	str	r3, [r4, #0]
 811699e:	89a3      	ldrh	r3, [r4, #12]
 81169a0:	f043 0308 	orr.w	r3, r3, #8
 81169a4:	81a3      	strh	r3, [r4, #12]
 81169a6:	6923      	ldr	r3, [r4, #16]
 81169a8:	b94b      	cbnz	r3, 81169be <__swsetup_r+0x7a>
 81169aa:	89a3      	ldrh	r3, [r4, #12]
 81169ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 81169b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81169b4:	d003      	beq.n	81169be <__swsetup_r+0x7a>
 81169b6:	4621      	mov	r1, r4
 81169b8:	4628      	mov	r0, r5
 81169ba:	f000 f83f 	bl	8116a3c <__smakebuf_r>
 81169be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81169c2:	f013 0201 	ands.w	r2, r3, #1
 81169c6:	d00a      	beq.n	81169de <__swsetup_r+0x9a>
 81169c8:	2200      	movs	r2, #0
 81169ca:	60a2      	str	r2, [r4, #8]
 81169cc:	6962      	ldr	r2, [r4, #20]
 81169ce:	4252      	negs	r2, r2
 81169d0:	61a2      	str	r2, [r4, #24]
 81169d2:	6922      	ldr	r2, [r4, #16]
 81169d4:	b942      	cbnz	r2, 81169e8 <__swsetup_r+0xa4>
 81169d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 81169da:	d1c5      	bne.n	8116968 <__swsetup_r+0x24>
 81169dc:	bd38      	pop	{r3, r4, r5, pc}
 81169de:	0799      	lsls	r1, r3, #30
 81169e0:	bf58      	it	pl
 81169e2:	6962      	ldrpl	r2, [r4, #20]
 81169e4:	60a2      	str	r2, [r4, #8]
 81169e6:	e7f4      	b.n	81169d2 <__swsetup_r+0x8e>
 81169e8:	2000      	movs	r0, #0
 81169ea:	e7f7      	b.n	81169dc <__swsetup_r+0x98>
 81169ec:	10000040 	.word	0x10000040

081169f0 <__swhatbuf_r>:
 81169f0:	b570      	push	{r4, r5, r6, lr}
 81169f2:	460c      	mov	r4, r1
 81169f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81169f8:	2900      	cmp	r1, #0
 81169fa:	b096      	sub	sp, #88	@ 0x58
 81169fc:	4615      	mov	r5, r2
 81169fe:	461e      	mov	r6, r3
 8116a00:	da0d      	bge.n	8116a1e <__swhatbuf_r+0x2e>
 8116a02:	89a3      	ldrh	r3, [r4, #12]
 8116a04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8116a08:	f04f 0100 	mov.w	r1, #0
 8116a0c:	bf14      	ite	ne
 8116a0e:	2340      	movne	r3, #64	@ 0x40
 8116a10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8116a14:	2000      	movs	r0, #0
 8116a16:	6031      	str	r1, [r6, #0]
 8116a18:	602b      	str	r3, [r5, #0]
 8116a1a:	b016      	add	sp, #88	@ 0x58
 8116a1c:	bd70      	pop	{r4, r5, r6, pc}
 8116a1e:	466a      	mov	r2, sp
 8116a20:	f000 f848 	bl	8116ab4 <_fstat_r>
 8116a24:	2800      	cmp	r0, #0
 8116a26:	dbec      	blt.n	8116a02 <__swhatbuf_r+0x12>
 8116a28:	9901      	ldr	r1, [sp, #4]
 8116a2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8116a2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8116a32:	4259      	negs	r1, r3
 8116a34:	4159      	adcs	r1, r3
 8116a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8116a3a:	e7eb      	b.n	8116a14 <__swhatbuf_r+0x24>

08116a3c <__smakebuf_r>:
 8116a3c:	898b      	ldrh	r3, [r1, #12]
 8116a3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8116a40:	079d      	lsls	r5, r3, #30
 8116a42:	4606      	mov	r6, r0
 8116a44:	460c      	mov	r4, r1
 8116a46:	d507      	bpl.n	8116a58 <__smakebuf_r+0x1c>
 8116a48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8116a4c:	6023      	str	r3, [r4, #0]
 8116a4e:	6123      	str	r3, [r4, #16]
 8116a50:	2301      	movs	r3, #1
 8116a52:	6163      	str	r3, [r4, #20]
 8116a54:	b003      	add	sp, #12
 8116a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8116a58:	ab01      	add	r3, sp, #4
 8116a5a:	466a      	mov	r2, sp
 8116a5c:	f7ff ffc8 	bl	81169f0 <__swhatbuf_r>
 8116a60:	9f00      	ldr	r7, [sp, #0]
 8116a62:	4605      	mov	r5, r0
 8116a64:	4639      	mov	r1, r7
 8116a66:	4630      	mov	r0, r6
 8116a68:	f7fe fffe 	bl	8115a68 <_malloc_r>
 8116a6c:	b948      	cbnz	r0, 8116a82 <__smakebuf_r+0x46>
 8116a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8116a72:	059a      	lsls	r2, r3, #22
 8116a74:	d4ee      	bmi.n	8116a54 <__smakebuf_r+0x18>
 8116a76:	f023 0303 	bic.w	r3, r3, #3
 8116a7a:	f043 0302 	orr.w	r3, r3, #2
 8116a7e:	81a3      	strh	r3, [r4, #12]
 8116a80:	e7e2      	b.n	8116a48 <__smakebuf_r+0xc>
 8116a82:	89a3      	ldrh	r3, [r4, #12]
 8116a84:	6020      	str	r0, [r4, #0]
 8116a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8116a8a:	81a3      	strh	r3, [r4, #12]
 8116a8c:	9b01      	ldr	r3, [sp, #4]
 8116a8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8116a92:	b15b      	cbz	r3, 8116aac <__smakebuf_r+0x70>
 8116a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8116a98:	4630      	mov	r0, r6
 8116a9a:	f000 f81d 	bl	8116ad8 <_isatty_r>
 8116a9e:	b128      	cbz	r0, 8116aac <__smakebuf_r+0x70>
 8116aa0:	89a3      	ldrh	r3, [r4, #12]
 8116aa2:	f023 0303 	bic.w	r3, r3, #3
 8116aa6:	f043 0301 	orr.w	r3, r3, #1
 8116aaa:	81a3      	strh	r3, [r4, #12]
 8116aac:	89a3      	ldrh	r3, [r4, #12]
 8116aae:	431d      	orrs	r5, r3
 8116ab0:	81a5      	strh	r5, [r4, #12]
 8116ab2:	e7cf      	b.n	8116a54 <__smakebuf_r+0x18>

08116ab4 <_fstat_r>:
 8116ab4:	b538      	push	{r3, r4, r5, lr}
 8116ab6:	4d07      	ldr	r5, [pc, #28]	@ (8116ad4 <_fstat_r+0x20>)
 8116ab8:	2300      	movs	r3, #0
 8116aba:	4604      	mov	r4, r0
 8116abc:	4608      	mov	r0, r1
 8116abe:	4611      	mov	r1, r2
 8116ac0:	602b      	str	r3, [r5, #0]
 8116ac2:	f7e9 ffef 	bl	8100aa4 <_fstat>
 8116ac6:	1c43      	adds	r3, r0, #1
 8116ac8:	d102      	bne.n	8116ad0 <_fstat_r+0x1c>
 8116aca:	682b      	ldr	r3, [r5, #0]
 8116acc:	b103      	cbz	r3, 8116ad0 <_fstat_r+0x1c>
 8116ace:	6023      	str	r3, [r4, #0]
 8116ad0:	bd38      	pop	{r3, r4, r5, pc}
 8116ad2:	bf00      	nop
 8116ad4:	10011e04 	.word	0x10011e04

08116ad8 <_isatty_r>:
 8116ad8:	b538      	push	{r3, r4, r5, lr}
 8116ada:	4d06      	ldr	r5, [pc, #24]	@ (8116af4 <_isatty_r+0x1c>)
 8116adc:	2300      	movs	r3, #0
 8116ade:	4604      	mov	r4, r0
 8116ae0:	4608      	mov	r0, r1
 8116ae2:	602b      	str	r3, [r5, #0]
 8116ae4:	f7e9 ffee 	bl	8100ac4 <_isatty>
 8116ae8:	1c43      	adds	r3, r0, #1
 8116aea:	d102      	bne.n	8116af2 <_isatty_r+0x1a>
 8116aec:	682b      	ldr	r3, [r5, #0]
 8116aee:	b103      	cbz	r3, 8116af2 <_isatty_r+0x1a>
 8116af0:	6023      	str	r3, [r4, #0]
 8116af2:	bd38      	pop	{r3, r4, r5, pc}
 8116af4:	10011e04 	.word	0x10011e04

08116af8 <_init>:
 8116af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8116afa:	bf00      	nop
 8116afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8116afe:	bc08      	pop	{r3}
 8116b00:	469e      	mov	lr, r3
 8116b02:	4770      	bx	lr

08116b04 <_fini>:
 8116b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8116b06:	bf00      	nop
 8116b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8116b0a:	bc08      	pop	{r3}
 8116b0c:	469e      	mov	lr, r3
 8116b0e:	4770      	bx	lr
