
STM32H747I-DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .shared_ram   000016f8  38000000  38000000  00025000  2**2
                  ALLOC
  2 .text         0001eaf4  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003a54  0811ed94  0811ed94  0001fd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  081227e8  081227e8  000237e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  081227f0  081227f0  000237f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  081227f8  081227f8  000237f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000090  10000000  081227fc  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00012258  10000090  0812288c  00024090  2**2
                  ALLOC
  9 ._user_heap_stack 00002000  100122e8  0812288c  000242e8  2**0
                  ALLOC
 10 .lwip_sec     00024b83  10020000  10020000  00025000  2**2
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005a842  00000000  00000000  000240c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b8ba  00000000  00000000  0007e902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003b20  00000000  00000000  0008a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002e55  00000000  00000000  0008dce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00056897  00000000  00000000  00090b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00050941  00000000  00000000  000e73cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001eb034  00000000  00000000  00137d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00322d41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010fd8  00000000  00000000  00322d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00333d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000090 	.word	0x10000090
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0811ed7c 	.word	0x0811ed7c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000094 	.word	0x10000094
 81002dc:	0811ed7c 	.word	0x0811ed7c

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <_ZN10LogPrinterC1Ev>:

#include <stdarg.h> // Include this for va_list and related functions

extern osMutexId_t printMutexHandle;

LogPrinter::LogPrinter() : mutexHandle(printMutexHandle) {}
 8100390:	b480      	push	{r7}
 8100392:	b083      	sub	sp, #12
 8100394:	af00      	add	r7, sp, #0
 8100396:	6078      	str	r0, [r7, #4]
 8100398:	4b05      	ldr	r3, [pc, #20]	@ (81003b0 <_ZN10LogPrinterC1Ev+0x20>)
 810039a:	681a      	ldr	r2, [r3, #0]
 810039c:	687b      	ldr	r3, [r7, #4]
 810039e:	601a      	str	r2, [r3, #0]
 81003a0:	687b      	ldr	r3, [r7, #4]
 81003a2:	4618      	mov	r0, r3
 81003a4:	370c      	adds	r7, #12
 81003a6:	46bd      	mov	sp, r7
 81003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop
 81003b0:	100001ac 	.word	0x100001ac

081003b4 <_ZN10LogPrinter8instanceEv>:

LogPrinter& LogPrinter::instance()
{
 81003b4:	b580      	push	{r7, lr}
 81003b6:	af00      	add	r7, sp, #0
    static LogPrinter inst;
 81003b8:	4b10      	ldr	r3, [pc, #64]	@ (81003fc <_ZN10LogPrinter8instanceEv+0x48>)
 81003ba:	681b      	ldr	r3, [r3, #0]
 81003bc:	f3bf 8f5b 	dmb	ish
 81003c0:	f003 0301 	and.w	r3, r3, #1
 81003c4:	2b00      	cmp	r3, #0
 81003c6:	bf0c      	ite	eq
 81003c8:	2301      	moveq	r3, #1
 81003ca:	2300      	movne	r3, #0
 81003cc:	b2db      	uxtb	r3, r3
 81003ce:	2b00      	cmp	r3, #0
 81003d0:	d010      	beq.n	81003f4 <_ZN10LogPrinter8instanceEv+0x40>
 81003d2:	480a      	ldr	r0, [pc, #40]	@ (81003fc <_ZN10LogPrinter8instanceEv+0x48>)
 81003d4:	f01c fdb4 	bl	811cf40 <__cxa_guard_acquire>
 81003d8:	4603      	mov	r3, r0
 81003da:	2b00      	cmp	r3, #0
 81003dc:	bf14      	ite	ne
 81003de:	2301      	movne	r3, #1
 81003e0:	2300      	moveq	r3, #0
 81003e2:	b2db      	uxtb	r3, r3
 81003e4:	2b00      	cmp	r3, #0
 81003e6:	d005      	beq.n	81003f4 <_ZN10LogPrinter8instanceEv+0x40>
 81003e8:	4805      	ldr	r0, [pc, #20]	@ (8100400 <_ZN10LogPrinter8instanceEv+0x4c>)
 81003ea:	f7ff ffd1 	bl	8100390 <_ZN10LogPrinterC1Ev>
 81003ee:	4803      	ldr	r0, [pc, #12]	@ (81003fc <_ZN10LogPrinter8instanceEv+0x48>)
 81003f0:	f01c fdb2 	bl	811cf58 <__cxa_guard_release>
    return inst;
 81003f4:	4b02      	ldr	r3, [pc, #8]	@ (8100400 <_ZN10LogPrinter8instanceEv+0x4c>)
}
 81003f6:	4618      	mov	r0, r3
 81003f8:	bd80      	pop	{r7, pc}
 81003fa:	bf00      	nop
 81003fc:	100000b0 	.word	0x100000b0
 8100400:	100000ac 	.word	0x100000ac

08100404 <_ZN10LogPrinter10printDebugEPKcz>:

void LogPrinter::printDebug(const char* format, ...)
{
 8100404:	b40e      	push	{r1, r2, r3}
 8100406:	b580      	push	{r7, lr}
 8100408:	b085      	sub	sp, #20
 810040a:	af00      	add	r7, sp, #0
 810040c:	6078      	str	r0, [r7, #4]
    osMutexAcquire(mutexHandle, portMAX_DELAY);
 810040e:	687b      	ldr	r3, [r7, #4]
 8100410:	681b      	ldr	r3, [r3, #0]
 8100412:	f04f 31ff 	mov.w	r1, #4294967295
 8100416:	4618      	mov	r0, r3
 8100418:	f00d fae4 	bl	810d9e4 <osMutexAcquire>
    va_list args;
    va_start(args, format); // Initialize args
 810041c:	f107 0320 	add.w	r3, r7, #32
 8100420:	60fb      	str	r3, [r7, #12]
    vfprintf(stdout, format, args); // Use vfprintf to handle variable arguments
 8100422:	4b11      	ldr	r3, [pc, #68]	@ (8100468 <_ZN10LogPrinter10printDebugEPKcz+0x64>)
 8100424:	681b      	ldr	r3, [r3, #0]
 8100426:	689b      	ldr	r3, [r3, #8]
 8100428:	68fa      	ldr	r2, [r7, #12]
 810042a:	69f9      	ldr	r1, [r7, #28]
 810042c:	4618      	mov	r0, r3
 810042e:	f01d f961 	bl	811d6f4 <vfiprintf>
    fprintf(stdout, "\r\n");
 8100432:	4b0d      	ldr	r3, [pc, #52]	@ (8100468 <_ZN10LogPrinter10printDebugEPKcz+0x64>)
 8100434:	681b      	ldr	r3, [r3, #0]
 8100436:	689b      	ldr	r3, [r3, #8]
 8100438:	2202      	movs	r2, #2
 810043a:	2101      	movs	r1, #1
 810043c:	480b      	ldr	r0, [pc, #44]	@ (810046c <_ZN10LogPrinter10printDebugEPKcz+0x68>)
 810043e:	f01d fcbf 	bl	811ddc0 <fwrite>
    fflush(stdout);
 8100442:	4b09      	ldr	r3, [pc, #36]	@ (8100468 <_ZN10LogPrinter10printDebugEPKcz+0x64>)
 8100444:	681b      	ldr	r3, [r3, #0]
 8100446:	689b      	ldr	r3, [r3, #8]
 8100448:	4618      	mov	r0, r3
 810044a:	f01d fb97 	bl	811db7c <fflush>
    va_end(args); // Clean up the va_list
    osMutexRelease(mutexHandle);
 810044e:	687b      	ldr	r3, [r7, #4]
 8100450:	681b      	ldr	r3, [r3, #0]
 8100452:	4618      	mov	r0, r3
 8100454:	f00d fb11 	bl	810da7a <osMutexRelease>
}
 8100458:	bf00      	nop
 810045a:	3714      	adds	r7, #20
 810045c:	46bd      	mov	sp, r7
 810045e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8100462:	b003      	add	sp, #12
 8100464:	4770      	bx	lr
 8100466:	bf00      	nop
 8100468:	10000040 	.word	0x10000040
 810046c:	0811ed94 	.word	0x0811ed94

08100470 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8100470:	b580      	push	{r7, lr}
 8100472:	b082      	sub	sp, #8
 8100474:	af00      	add	r7, sp, #0
 8100476:	6078      	str	r0, [r7, #4]
    if((SemMask &  __HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID))!= 0)
 8100478:	687b      	ldr	r3, [r7, #4]
 810047a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810047e:	2b00      	cmp	r3, #0
 8100480:	d005      	beq.n	810048e <HAL_HSEM_FreeCallback+0x1e>
    {
        /* Re-Activate HSEM notification */
        HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 8100482:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8100486:	f00a f94b 	bl	810a720 <HAL_HSEM_ActivateNotification>
        /* New message received */
        prvCoreInterruptHandler();
 810048a:	f000 f845 	bl	8100518 <prvCoreInterruptHandler>
    }

    if((SemMask & __HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP)) !=0)
 810048e:	687b      	ldr	r3, [r7, #4]
 8100490:	2b00      	cmp	r3, #0
 8100492:	da05      	bge.n	81004a0 <HAL_HSEM_FreeCallback+0x30>
    {
        /* Re-Activate HSEM notification */
        HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 8100494:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8100498:	f00a f942 	bl	810a720 <HAL_HSEM_ActivateNotification>
        /* TX queue is empty => wake-up task trying to send a message */
        prvCoreWakeupInterruptHandler();
 810049c:	f000 f860 	bl	8100560 <prvCoreWakeupInterruptHandler>
    }
}
 81004a0:	bf00      	nop
 81004a2:	3708      	adds	r7, #8
 81004a4:	46bd      	mov	sp, r7
 81004a6:	bd80      	pop	{r7, pc}

081004a8 <ipc_init>:

int ipc_init(void)
{
 81004a8:	b580      	push	{r7, lr}
 81004aa:	b082      	sub	sp, #8
 81004ac:	af02      	add	r7, sp, #8
#ifdef CORE_CM7
	memset((void*)(&shared_ram.cm7_to_cm4_buffer), 0, CM7_TO_CM4_BUFFER_SIZE);
	memset((void*)(&shared_ram.cm4_to_cm7_buffer), 0, CM4_TO_CM7_BUFFER_SIZE);
#endif
    shared_ram.cm7_to_cm4_handle = xMessageBufferCreateStatic(CM7_TO_CM4_BUFFER_SIZE, (uint8_t*)shared_ram.cm7_to_cm4_buffer,(StaticMessageBuffer_t*) &shared_ram.cm7_to_cm4_xmsg);
 81004ae:	4b0e      	ldr	r3, [pc, #56]	@ (81004e8 <ipc_init+0x40>)
 81004b0:	9300      	str	r3, [sp, #0]
 81004b2:	4b0e      	ldr	r3, [pc, #56]	@ (81004ec <ipc_init+0x44>)
 81004b4:	2201      	movs	r2, #1
 81004b6:	2100      	movs	r1, #0
 81004b8:	f640 3054 	movw	r0, #2900	@ 0xb54
 81004bc:	f00f fb7a 	bl	810fbb4 <xStreamBufferGenericCreateStatic>
 81004c0:	4603      	mov	r3, r0
 81004c2:	4a0b      	ldr	r2, [pc, #44]	@ (81004f0 <ipc_init+0x48>)
 81004c4:	6013      	str	r3, [r2, #0]
    shared_ram.cm4_to_cm7_handle = xMessageBufferCreateStatic(CM4_TO_CM7_BUFFER_SIZE, (uint8_t*)shared_ram.cm4_to_cm7_buffer,(StaticMessageBuffer_t*) &shared_ram.cm4_to_cm7_xmsg);
 81004c6:	4b0b      	ldr	r3, [pc, #44]	@ (81004f4 <ipc_init+0x4c>)
 81004c8:	9300      	str	r3, [sp, #0]
 81004ca:	4b0b      	ldr	r3, [pc, #44]	@ (81004f8 <ipc_init+0x50>)
 81004cc:	2201      	movs	r2, #1
 81004ce:	2100      	movs	r1, #0
 81004d0:	f640 3054 	movw	r0, #2900	@ 0xb54
 81004d4:	f00f fb6e 	bl	810fbb4 <xStreamBufferGenericCreateStatic>
 81004d8:	4603      	mov	r3, r0
 81004da:	4a05      	ldr	r2, [pc, #20]	@ (81004f0 <ipc_init+0x48>)
 81004dc:	6053      	str	r3, [r2, #4]

    return 0;
 81004de:	2300      	movs	r3, #0
}
 81004e0:	4618      	mov	r0, r3
 81004e2:	46bd      	mov	sp, r7
 81004e4:	bd80      	pop	{r7, pc}
 81004e6:	bf00      	nop
 81004e8:	38000008 	.word	0x38000008
 81004ec:	38000050 	.word	0x38000050
 81004f0:	38000000 	.word	0x38000000
 81004f4:	3800002c 	.word	0x3800002c
 81004f8:	38000ba4 	.word	0x38000ba4

081004fc <ipc_start>:

int ipc_start(void){
 81004fc:	b580      	push	{r7, lr}
 81004fe:	af00      	add	r7, sp, #0
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 8100500:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8100504:	f00a f90c 	bl	810a720 <HAL_HSEM_ActivateNotification>
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 8100508:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 810050c:	f00a f908 	bl	810a720 <HAL_HSEM_ActivateNotification>
    return 0;
 8100510:	2300      	movs	r3, #0
}
 8100512:	4618      	mov	r0, r3
 8100514:	bd80      	pop	{r7, pc}
	...

08100518 <prvCoreInterruptHandler>:

static void prvCoreInterruptHandler(void)
{
 8100518:	b580      	push	{r7, lr}
 810051a:	b082      	sub	sp, #8
 810051c:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 810051e:	2300      	movs	r3, #0
 8100520:	607b      	str	r3, [r7, #4]

    if (!xrx_data_buf)
 8100522:	4b0d      	ldr	r3, [pc, #52]	@ (8100558 <prvCoreInterruptHandler+0x40>)
 8100524:	681b      	ldr	r3, [r3, #0]
 8100526:	2b00      	cmp	r3, #0
 8100528:	d012      	beq.n	8100550 <prvCoreInterruptHandler+0x38>
    {
    	return;
    }

	xMessageBufferSendCompletedFromISR(xrx_data_buf, &xHigherPriorityTaskWoken);
 810052a:	4b0b      	ldr	r3, [pc, #44]	@ (8100558 <prvCoreInterruptHandler+0x40>)
 810052c:	681b      	ldr	r3, [r3, #0]
 810052e:	1d3a      	adds	r2, r7, #4
 8100530:	4611      	mov	r1, r2
 8100532:	4618      	mov	r0, r3
 8100534:	f00f fd9a 	bl	811006c <xStreamBufferSendCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8100538:	687b      	ldr	r3, [r7, #4]
 810053a:	2b00      	cmp	r3, #0
 810053c:	d009      	beq.n	8100552 <prvCoreInterruptHandler+0x3a>
 810053e:	4b07      	ldr	r3, [pc, #28]	@ (810055c <prvCoreInterruptHandler+0x44>)
 8100540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8100544:	601a      	str	r2, [r3, #0]
 8100546:	f3bf 8f4f 	dsb	sy
 810054a:	f3bf 8f6f 	isb	sy
 810054e:	e000      	b.n	8100552 <prvCoreInterruptHandler+0x3a>
    	return;
 8100550:	bf00      	nop
}
 8100552:	3708      	adds	r7, #8
 8100554:	46bd      	mov	sp, r7
 8100556:	bd80      	pop	{r7, pc}
 8100558:	38000000 	.word	0x38000000
 810055c:	e000ed04 	.word	0xe000ed04

08100560 <prvCoreWakeupInterruptHandler>:

static void prvCoreWakeupInterruptHandler(void)
{
 8100560:	b580      	push	{r7, lr}
 8100562:	b082      	sub	sp, #8
 8100564:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8100566:	2300      	movs	r3, #0
 8100568:	607b      	str	r3, [r7, #4]

    if (!xtx_data_buf)
 810056a:	4b0d      	ldr	r3, [pc, #52]	@ (81005a0 <prvCoreWakeupInterruptHandler+0x40>)
 810056c:	685b      	ldr	r3, [r3, #4]
 810056e:	2b00      	cmp	r3, #0
 8100570:	d012      	beq.n	8100598 <prvCoreWakeupInterruptHandler+0x38>
    {
    	return;
    }

	xMessageBufferReceiveCompletedFromISR(xtx_data_buf, &xHigherPriorityTaskWoken);
 8100572:	4b0b      	ldr	r3, [pc, #44]	@ (81005a0 <prvCoreWakeupInterruptHandler+0x40>)
 8100574:	685b      	ldr	r3, [r3, #4]
 8100576:	1d3a      	adds	r2, r7, #4
 8100578:	4611      	mov	r1, r2
 810057a:	4618      	mov	r0, r3
 810057c:	f00f fdba 	bl	81100f4 <xStreamBufferReceiveCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8100580:	687b      	ldr	r3, [r7, #4]
 8100582:	2b00      	cmp	r3, #0
 8100584:	d009      	beq.n	810059a <prvCoreWakeupInterruptHandler+0x3a>
 8100586:	4b07      	ldr	r3, [pc, #28]	@ (81005a4 <prvCoreWakeupInterruptHandler+0x44>)
 8100588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810058c:	601a      	str	r2, [r3, #0]
 810058e:	f3bf 8f4f 	dsb	sy
 8100592:	f3bf 8f6f 	isb	sy
 8100596:	e000      	b.n	810059a <prvCoreWakeupInterruptHandler+0x3a>
    	return;
 8100598:	bf00      	nop
}
 810059a:	3708      	adds	r7, #8
 810059c:	46bd      	mov	sp, r7
 810059e:	bd80      	pop	{r7, pc}
 81005a0:	38000000 	.word	0x38000000
 81005a4:	e000ed04 	.word	0xe000ed04

081005a8 <vGenerateRemoteInterrupt>:

void vGenerateRemoteInterrupt(void * xUpdatedMessageBuffer)
{
 81005a8:	b580      	push	{r7, lr}
 81005aa:	b084      	sub	sp, #16
 81005ac:	af00      	add	r7, sp, #0
 81005ae:	6078      	str	r0, [r7, #4]
    MessageBufferHandle_t xUpdatedBuffer =
 81005b0:	687b      	ldr	r3, [r7, #4]
 81005b2:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81005b4:	f3bf 8f4f 	dsb	sy
}
 81005b8:	bf00      	nop
        (MessageBufferHandle_t)xUpdatedMessageBuffer;

	__DSB();
    if (xUpdatedBuffer == xtx_data_buf)
 81005ba:	4b12      	ldr	r3, [pc, #72]	@ (8100604 <vGenerateRemoteInterrupt+0x5c>)
 81005bc:	685b      	ldr	r3, [r3, #4]
 81005be:	68fa      	ldr	r2, [r7, #12]
 81005c0:	429a      	cmp	r2, r3
 81005c2:	d10b      	bne.n	81005dc <vGenerateRemoteInterrupt+0x34>
    {

        /* Take the HW Semaphore with Process1 ID  */
        if(HAL_HSEM_Take(HSEM_TX_ID, HSEM_PROCESS) == HAL_OK)
 81005c4:	211b      	movs	r1, #27
 81005c6:	201d      	movs	r0, #29
 81005c8:	f00a f872 	bl	810a6b0 <HAL_HSEM_Take>
 81005cc:	4603      	mov	r3, r0
 81005ce:	2b00      	cmp	r3, #0
 81005d0:	d114      	bne.n	81005fc <vGenerateRemoteInterrupt+0x54>
        {
            /* Release the HW Semaphore */
            HAL_HSEM_Release(HSEM_TX_ID, HSEM_PROCESS);
 81005d2:	211b      	movs	r1, #27
 81005d4:	201d      	movs	r0, #29
 81005d6:	f00a f88f 	bl	810a6f8 <HAL_HSEM_Release>
		{
			/* Release the HW Semaphore */
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
		}
    }
}
 81005da:	e00f      	b.n	81005fc <vGenerateRemoteInterrupt+0x54>
    else if(xUpdatedBuffer == xrx_data_buf){
 81005dc:	4b09      	ldr	r3, [pc, #36]	@ (8100604 <vGenerateRemoteInterrupt+0x5c>)
 81005de:	681b      	ldr	r3, [r3, #0]
 81005e0:	68fa      	ldr	r2, [r7, #12]
 81005e2:	429a      	cmp	r2, r3
 81005e4:	d10a      	bne.n	81005fc <vGenerateRemoteInterrupt+0x54>
		if(HAL_HSEM_Take(HSEM_RX_WAKEUP, HSEM_PROCESS) == HAL_OK)
 81005e6:	211b      	movs	r1, #27
 81005e8:	201e      	movs	r0, #30
 81005ea:	f00a f861 	bl	810a6b0 <HAL_HSEM_Take>
 81005ee:	4603      	mov	r3, r0
 81005f0:	2b00      	cmp	r3, #0
 81005f2:	d103      	bne.n	81005fc <vGenerateRemoteInterrupt+0x54>
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
 81005f4:	211b      	movs	r1, #27
 81005f6:	201e      	movs	r0, #30
 81005f8:	f00a f87e 	bl	810a6f8 <HAL_HSEM_Release>
}
 81005fc:	bf00      	nop
 81005fe:	3710      	adds	r7, #16
 8100600:	46bd      	mov	sp, r7
 8100602:	bd80      	pop	{r7, pc}
 8100604:	38000000 	.word	0x38000000

08100608 <ipc_sendmsg>:

size_t ipc_sendmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 8100608:	b580      	push	{r7, lr}
 810060a:	b086      	sub	sp, #24
 810060c:	af00      	add	r7, sp, #0
 810060e:	60f8      	str	r0, [r7, #12]
 8100610:	60b9      	str	r1, [r7, #8]
 8100612:	607a      	str	r2, [r7, #4]
	size_t len;

    if(xtx_data_buf == 0)
 8100614:	4b0f      	ldr	r3, [pc, #60]	@ (8100654 <ipc_sendmsg+0x4c>)
 8100616:	685b      	ldr	r3, [r3, #4]
 8100618:	2b00      	cmp	r3, #0
 810061a:	d101      	bne.n	8100620 <ipc_sendmsg+0x18>
      return 0;
 810061c:	2300      	movs	r3, #0
 810061e:	e015      	b.n	810064c <ipc_sendmsg+0x44>

    if(timeout < 0)
 8100620:	687b      	ldr	r3, [r7, #4]
 8100622:	2b00      	cmp	r3, #0
 8100624:	da09      	bge.n	810063a <ipc_sendmsg+0x32>
    	len = xMessageBufferSend(xtx_data_buf, msg, size, portMAX_DELAY);
 8100626:	4b0b      	ldr	r3, [pc, #44]	@ (8100654 <ipc_sendmsg+0x4c>)
 8100628:	6858      	ldr	r0, [r3, #4]
 810062a:	f04f 33ff 	mov.w	r3, #4294967295
 810062e:	68ba      	ldr	r2, [r7, #8]
 8100630:	68f9      	ldr	r1, [r7, #12]
 8100632:	f00f fb79 	bl	810fd28 <xStreamBufferSend>
 8100636:	6178      	str	r0, [r7, #20]
 8100638:	e007      	b.n	810064a <ipc_sendmsg+0x42>
    else
    	len = xMessageBufferSend(xtx_data_buf, msg, size, (TickType_t)timeout);
 810063a:	4b06      	ldr	r3, [pc, #24]	@ (8100654 <ipc_sendmsg+0x4c>)
 810063c:	6858      	ldr	r0, [r3, #4]
 810063e:	687b      	ldr	r3, [r7, #4]
 8100640:	68ba      	ldr	r2, [r7, #8]
 8100642:	68f9      	ldr	r1, [r7, #12]
 8100644:	f00f fb70 	bl	810fd28 <xStreamBufferSend>
 8100648:	6178      	str	r0, [r7, #20]

    return len;
 810064a:	697b      	ldr	r3, [r7, #20]
}
 810064c:	4618      	mov	r0, r3
 810064e:	3718      	adds	r7, #24
 8100650:	46bd      	mov	sp, r7
 8100652:	bd80      	pop	{r7, pc}
 8100654:	38000000 	.word	0x38000000

08100658 <ipc_recvmsg>:

size_t ipc_recvmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 8100658:	b580      	push	{r7, lr}
 810065a:	b086      	sub	sp, #24
 810065c:	af00      	add	r7, sp, #0
 810065e:	60f8      	str	r0, [r7, #12]
 8100660:	60b9      	str	r1, [r7, #8]
 8100662:	607a      	str	r2, [r7, #4]
    size_t len;

    if (timeout < 0)
 8100664:	687b      	ldr	r3, [r7, #4]
 8100666:	2b00      	cmp	r3, #0
 8100668:	da09      	bge.n	810067e <ipc_recvmsg+0x26>
        len = xMessageBufferReceive(xrx_data_buf, msg, size, portMAX_DELAY);
 810066a:	4b0b      	ldr	r3, [pc, #44]	@ (8100698 <ipc_recvmsg+0x40>)
 810066c:	6818      	ldr	r0, [r3, #0]
 810066e:	f04f 33ff 	mov.w	r3, #4294967295
 8100672:	68ba      	ldr	r2, [r7, #8]
 8100674:	68f9      	ldr	r1, [r7, #12]
 8100676:	f00f fc3e 	bl	810fef6 <xStreamBufferReceive>
 810067a:	6178      	str	r0, [r7, #20]
 810067c:	e007      	b.n	810068e <ipc_recvmsg+0x36>
    else
        len = xMessageBufferReceive(xrx_data_buf, msg, size, (TickType_t)timeout);
 810067e:	4b06      	ldr	r3, [pc, #24]	@ (8100698 <ipc_recvmsg+0x40>)
 8100680:	6818      	ldr	r0, [r3, #0]
 8100682:	687b      	ldr	r3, [r7, #4]
 8100684:	68ba      	ldr	r2, [r7, #8]
 8100686:	68f9      	ldr	r1, [r7, #12]
 8100688:	f00f fc35 	bl	810fef6 <xStreamBufferReceive>
 810068c:	6178      	str	r0, [r7, #20]

    return len;
 810068e:	697b      	ldr	r3, [r7, #20]
}
 8100690:	4618      	mov	r0, r3
 8100692:	3718      	adds	r7, #24
 8100694:	46bd      	mov	sp, r7
 8100696:	bd80      	pop	{r7, pc}
 8100698:	38000000 	.word	0x38000000

0810069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810069c:	b580      	push	{r7, lr}
 810069e:	b082      	sub	sp, #8
 81006a0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 81006a2:	4b33      	ldr	r3, [pc, #204]	@ (8100770 <main+0xd4>)
 81006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006a8:	4a31      	ldr	r2, [pc, #196]	@ (8100770 <main+0xd4>)
 81006aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81006ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006b2:	4b2f      	ldr	r3, [pc, #188]	@ (8100770 <main+0xd4>)
 81006b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81006bc:	607b      	str	r3, [r7, #4]
 81006be:	687b      	ldr	r3, [r7, #4]
    /* Activate HSEM notification for Cortex-M4*/
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006c0:	2001      	movs	r0, #1
 81006c2:	f00a f82d 	bl	810a720 <HAL_HSEM_ActivateNotification>
    /*
    Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
    perform system initialization (system clock config, external memory configuration.. )
    */
    HAL_PWREx_ClearPendingEvent();
 81006c6:	f00a fdc7 	bl	810b258 <HAL_PWREx_ClearPendingEvent>
    HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81006ca:	2201      	movs	r2, #1
 81006cc:	2102      	movs	r1, #2
 81006ce:	2000      	movs	r0, #0
 81006d0:	f00a fd48 	bl	810b164 <HAL_PWREx_EnterSTOPMode>
    /* Clear HSEM flag */
    __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006d4:	4b27      	ldr	r3, [pc, #156]	@ (8100774 <main+0xd8>)
 81006d6:	681b      	ldr	r3, [r3, #0]
 81006d8:	091b      	lsrs	r3, r3, #4
 81006da:	f003 030f 	and.w	r3, r3, #15
 81006de:	2b07      	cmp	r3, #7
 81006e0:	d108      	bne.n	81006f4 <main+0x58>
 81006e2:	4b25      	ldr	r3, [pc, #148]	@ (8100778 <main+0xdc>)
 81006e4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81006e8:	4a23      	ldr	r2, [pc, #140]	@ (8100778 <main+0xdc>)
 81006ea:	f043 0301 	orr.w	r3, r3, #1
 81006ee:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81006f2:	e007      	b.n	8100704 <main+0x68>
 81006f4:	4b20      	ldr	r3, [pc, #128]	@ (8100778 <main+0xdc>)
 81006f6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81006fa:	4a1f      	ldr	r2, [pc, #124]	@ (8100778 <main+0xdc>)
 81006fc:	f043 0301 	orr.w	r3, r3, #1
 8100700:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8100704:	f007 fe16 	bl	8108334 <HAL_Init>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_MDMA_Init();
 8100708:	f000 f8a2 	bl	8100850 <_ZL12MX_MDMA_Initv>
    MX_GPIO_Init();
 810070c:	f000 f8ba 	bl	8100884 <_ZL12MX_GPIO_Initv>
    MX_I2C4_Init();
 8100710:	f000 f850 	bl	81007b4 <_ZL12MX_I2C4_Initv>
    /* USER CODE BEGIN 2 */
    ipc_init();
 8100714:	f7ff fec8 	bl	81004a8 <ipc_init>
    /* USER CODE END 2 */

    /* Init scheduler */
    osKernelInitialize();
 8100718:	f00c ffd2 	bl	810d6c0 <osKernelInitialize>

    /* USER CODE BEGIN RTOS_MUTEX */
    /* add mutexes, ... */\
	printMutexHandle = osMutexNew(&printMutex_attributes);
 810071c:	4817      	ldr	r0, [pc, #92]	@ (810077c <main+0xe0>)
 810071e:	f00d f8db 	bl	810d8d8 <osMutexNew>
 8100722:	4603      	mov	r3, r0
 8100724:	4a16      	ldr	r2, [pc, #88]	@ (8100780 <main+0xe4>)
 8100726:	6013      	str	r3, [r2, #0]
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of Task_EDaemonN */
    Task_EDaemonNHandle = osThreadNew(StartTask_EDaemonN, NULL, &Task_EDaemonN_attributes);
 8100728:	4a16      	ldr	r2, [pc, #88]	@ (8100784 <main+0xe8>)
 810072a:	2100      	movs	r1, #0
 810072c:	4816      	ldr	r0, [pc, #88]	@ (8100788 <main+0xec>)
 810072e:	f00d f826 	bl	810d77e <osThreadNew>
 8100732:	4603      	mov	r3, r0
 8100734:	4a15      	ldr	r2, [pc, #84]	@ (810078c <main+0xf0>)
 8100736:	6013      	str	r3, [r2, #0]

    /* creation of Task_EventMgrM4 */
    Task_EventMgrM4Handle = osThreadNew(StartTask_EventMgrM4, NULL, &Task_EventMgrM4_attributes);
 8100738:	4a15      	ldr	r2, [pc, #84]	@ (8100790 <main+0xf4>)
 810073a:	2100      	movs	r1, #0
 810073c:	4815      	ldr	r0, [pc, #84]	@ (8100794 <main+0xf8>)
 810073e:	f00d f81e 	bl	810d77e <osThreadNew>
 8100742:	4603      	mov	r3, r0
 8100744:	4a14      	ldr	r2, [pc, #80]	@ (8100798 <main+0xfc>)
 8100746:	6013      	str	r3, [r2, #0]

    /* creation of Task_EConnMgr */
    Task_EConnMgrHandle = osThreadNew(StartTask_EthernetConnMgr, NULL, &Task_EConnMgr_attributes);
 8100748:	4a14      	ldr	r2, [pc, #80]	@ (810079c <main+0x100>)
 810074a:	2100      	movs	r1, #0
 810074c:	4814      	ldr	r0, [pc, #80]	@ (81007a0 <main+0x104>)
 810074e:	f00d f816 	bl	810d77e <osThreadNew>
 8100752:	4603      	mov	r3, r0
 8100754:	4a13      	ldr	r2, [pc, #76]	@ (81007a4 <main+0x108>)
 8100756:	6013      	str	r3, [r2, #0]

    /* creation of Task_CTemp */
    Task_CTempHandle = osThreadNew(StartTask_CTemp, NULL, &Task_CTemp_attributes);
 8100758:	4a13      	ldr	r2, [pc, #76]	@ (81007a8 <main+0x10c>)
 810075a:	2100      	movs	r1, #0
 810075c:	4813      	ldr	r0, [pc, #76]	@ (81007ac <main+0x110>)
 810075e:	f00d f80e 	bl	810d77e <osThreadNew>
 8100762:	4603      	mov	r3, r0
 8100764:	4a12      	ldr	r2, [pc, #72]	@ (81007b0 <main+0x114>)
 8100766:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */

    /* Start scheduler */
    osKernelStart();
 8100768:	f00c ffce 	bl	810d708 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 810076c:	bf00      	nop
 810076e:	e7fd      	b.n	810076c <main+0xd0>
 8100770:	58024400 	.word	0x58024400
 8100774:	e000ed00 	.word	0xe000ed00
 8100778:	58026400 	.word	0x58026400
 810077c:	08122498 	.word	0x08122498
 8100780:	100001ac 	.word	0x100001ac
 8100784:	08122408 	.word	0x08122408
 8100788:	08104a19 	.word	0x08104a19
 810078c:	1000019c 	.word	0x1000019c
 8100790:	0812242c 	.word	0x0812242c
 8100794:	08102491 	.word	0x08102491
 8100798:	100001a0 	.word	0x100001a0
 810079c:	08122450 	.word	0x08122450
 81007a0:	08100f59 	.word	0x08100f59
 81007a4:	100001a4 	.word	0x100001a4
 81007a8:	08122474 	.word	0x08122474
 81007ac:	08105d31 	.word	0x08105d31
 81007b0:	100001a8 	.word	0x100001a8

081007b4 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 81007b4:	b580      	push	{r7, lr}
 81007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 81007b8:	4b22      	ldr	r3, [pc, #136]	@ (8100844 <_ZL12MX_I2C4_Initv+0x90>)
 81007ba:	4a23      	ldr	r2, [pc, #140]	@ (8100848 <_ZL12MX_I2C4_Initv+0x94>)
 81007bc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 81007be:	4b21      	ldr	r3, [pc, #132]	@ (8100844 <_ZL12MX_I2C4_Initv+0x90>)
 81007c0:	4a22      	ldr	r2, [pc, #136]	@ (810084c <_ZL12MX_I2C4_Initv+0x98>)
 81007c2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 81007c4:	4b1f      	ldr	r3, [pc, #124]	@ (8100844 <_ZL12MX_I2C4_Initv+0x90>)
 81007c6:	2200      	movs	r2, #0
 81007c8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81007ca:	4b1e      	ldr	r3, [pc, #120]	@ (8100844 <_ZL12MX_I2C4_Initv+0x90>)
 81007cc:	2201      	movs	r2, #1
 81007ce:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81007d0:	4b1c      	ldr	r3, [pc, #112]	@ (8100844 <_ZL12MX_I2C4_Initv+0x90>)
 81007d2:	2200      	movs	r2, #0
 81007d4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 81007d6:	4b1b      	ldr	r3, [pc, #108]	@ (8100844 <_ZL12MX_I2C4_Initv+0x90>)
 81007d8:	2200      	movs	r2, #0
 81007da:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81007dc:	4b19      	ldr	r3, [pc, #100]	@ (8100844 <_ZL12MX_I2C4_Initv+0x90>)
 81007de:	2200      	movs	r2, #0
 81007e0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81007e2:	4b18      	ldr	r3, [pc, #96]	@ (8100844 <_ZL12MX_I2C4_Initv+0x90>)
 81007e4:	2200      	movs	r2, #0
 81007e6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81007e8:	4b16      	ldr	r3, [pc, #88]	@ (8100844 <_ZL12MX_I2C4_Initv+0x90>)
 81007ea:	2200      	movs	r2, #0
 81007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 81007ee:	4815      	ldr	r0, [pc, #84]	@ (8100844 <_ZL12MX_I2C4_Initv+0x90>)
 81007f0:	f009 ffc2 	bl	810a778 <HAL_I2C_Init>
 81007f4:	4603      	mov	r3, r0
 81007f6:	2b00      	cmp	r3, #0
 81007f8:	bf14      	ite	ne
 81007fa:	2301      	movne	r3, #1
 81007fc:	2300      	moveq	r3, #0
 81007fe:	b2db      	uxtb	r3, r3
 8100800:	2b00      	cmp	r3, #0
 8100802:	d001      	beq.n	8100808 <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8100804:	f000 f8d6 	bl	81009b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100808:	2100      	movs	r1, #0
 810080a:	480e      	ldr	r0, [pc, #56]	@ (8100844 <_ZL12MX_I2C4_Initv+0x90>)
 810080c:	f00a fc12 	bl	810b034 <HAL_I2CEx_ConfigAnalogFilter>
 8100810:	4603      	mov	r3, r0
 8100812:	2b00      	cmp	r3, #0
 8100814:	bf14      	ite	ne
 8100816:	2301      	movne	r3, #1
 8100818:	2300      	moveq	r3, #0
 810081a:	b2db      	uxtb	r3, r3
 810081c:	2b00      	cmp	r3, #0
 810081e:	d001      	beq.n	8100824 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8100820:	f000 f8c8 	bl	81009b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 2) != HAL_OK)
 8100824:	2102      	movs	r1, #2
 8100826:	4807      	ldr	r0, [pc, #28]	@ (8100844 <_ZL12MX_I2C4_Initv+0x90>)
 8100828:	f00a fc4f 	bl	810b0ca <HAL_I2CEx_ConfigDigitalFilter>
 810082c:	4603      	mov	r3, r0
 810082e:	2b00      	cmp	r3, #0
 8100830:	bf14      	ite	ne
 8100832:	2301      	movne	r3, #1
 8100834:	2300      	moveq	r3, #0
 8100836:	b2db      	uxtb	r3, r3
 8100838:	2b00      	cmp	r3, #0
 810083a:	d001      	beq.n	8100840 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 810083c:	f000 f8ba 	bl	81009b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8100840:	bf00      	nop
 8100842:	bd80      	pop	{r7, pc}
 8100844:	100000b4 	.word	0x100000b4
 8100848:	58001c00 	.word	0x58001c00
 810084c:	10c0ecff 	.word	0x10c0ecff

08100850 <_ZL12MX_MDMA_Initv>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8100850:	b480      	push	{r7}
 8100852:	b083      	sub	sp, #12
 8100854:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8100856:	4b0a      	ldr	r3, [pc, #40]	@ (8100880 <_ZL12MX_MDMA_Initv+0x30>)
 8100858:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 810085c:	4a08      	ldr	r2, [pc, #32]	@ (8100880 <_ZL12MX_MDMA_Initv+0x30>)
 810085e:	f043 0301 	orr.w	r3, r3, #1
 8100862:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8100866:	4b06      	ldr	r3, [pc, #24]	@ (8100880 <_ZL12MX_MDMA_Initv+0x30>)
 8100868:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 810086c:	f003 0301 	and.w	r3, r3, #1
 8100870:	607b      	str	r3, [r7, #4]
 8100872:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 8100874:	bf00      	nop
 8100876:	370c      	adds	r7, #12
 8100878:	46bd      	mov	sp, r7
 810087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810087e:	4770      	bx	lr
 8100880:	58024400 	.word	0x58024400

08100884 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100884:	b480      	push	{r7}
 8100886:	b089      	sub	sp, #36	@ 0x24
 8100888:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 810088a:	4b37      	ldr	r3, [pc, #220]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 810088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100890:	4a35      	ldr	r2, [pc, #212]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 8100892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810089a:	4b33      	ldr	r3, [pc, #204]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 810089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81008a4:	61fb      	str	r3, [r7, #28]
 81008a6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81008a8:	4b2f      	ldr	r3, [pc, #188]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 81008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008ae:	4a2e      	ldr	r2, [pc, #184]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 81008b0:	f043 0310 	orr.w	r3, r3, #16
 81008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81008b8:	4b2b      	ldr	r3, [pc, #172]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 81008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008be:	f003 0310 	and.w	r3, r3, #16
 81008c2:	61bb      	str	r3, [r7, #24]
 81008c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81008c6:	4b28      	ldr	r3, [pc, #160]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 81008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008cc:	4a26      	ldr	r2, [pc, #152]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 81008ce:	f043 0304 	orr.w	r3, r3, #4
 81008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81008d6:	4b24      	ldr	r3, [pc, #144]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 81008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008dc:	f003 0304 	and.w	r3, r3, #4
 81008e0:	617b      	str	r3, [r7, #20]
 81008e2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81008e4:	4b20      	ldr	r3, [pc, #128]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 81008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008ea:	4a1f      	ldr	r2, [pc, #124]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 81008ec:	f043 0301 	orr.w	r3, r3, #1
 81008f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81008f4:	4b1c      	ldr	r3, [pc, #112]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 81008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008fa:	f003 0301 	and.w	r3, r3, #1
 81008fe:	613b      	str	r3, [r7, #16]
 8100900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100902:	4b19      	ldr	r3, [pc, #100]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 8100904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100908:	4a17      	ldr	r2, [pc, #92]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 810090a:	f043 0302 	orr.w	r3, r3, #2
 810090e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100912:	4b15      	ldr	r3, [pc, #84]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 8100914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100918:	f003 0302 	and.w	r3, r3, #2
 810091c:	60fb      	str	r3, [r7, #12]
 810091e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8100920:	4b11      	ldr	r3, [pc, #68]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 8100922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100926:	4a10      	ldr	r2, [pc, #64]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 8100928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810092c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100930:	4b0d      	ldr	r3, [pc, #52]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 8100932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810093a:	60bb      	str	r3, [r7, #8]
 810093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810093e:	4b0a      	ldr	r3, [pc, #40]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 8100940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100944:	4a08      	ldr	r2, [pc, #32]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 8100946:	f043 0308 	orr.w	r3, r3, #8
 810094a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810094e:	4b06      	ldr	r3, [pc, #24]	@ (8100968 <_ZL12MX_GPIO_Initv+0xe4>)
 8100950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100954:	f003 0308 	and.w	r3, r3, #8
 8100958:	607b      	str	r3, [r7, #4]
 810095a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 810095c:	bf00      	nop
 810095e:	3724      	adds	r7, #36	@ 0x24
 8100960:	46bd      	mov	sp, r7
 8100962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100966:	4770      	bx	lr
 8100968:	58024400 	.word	0x58024400

0810096c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
extern "C" int __io_putchar(int ch)
{
 810096c:	b580      	push	{r7, lr}
 810096e:	b082      	sub	sp, #8
 8100970:	af00      	add	r7, sp, #0
 8100972:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8100974:	1d39      	adds	r1, r7, #4
 8100976:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 810097a:	2201      	movs	r2, #1
 810097c:	4803      	ldr	r0, [pc, #12]	@ (810098c <__io_putchar+0x20>)
 810097e:	f00c fcf9 	bl	810d374 <HAL_UART_Transmit>

    return ch;
 8100982:	687b      	ldr	r3, [r7, #4]
}
 8100984:	4618      	mov	r0, r3
 8100986:	3708      	adds	r7, #8
 8100988:	46bd      	mov	sp, r7
 810098a:	bd80      	pop	{r7, pc}
 810098c:	10000108 	.word	0x10000108

08100990 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100990:	b580      	push	{r7, lr}
 8100992:	b082      	sub	sp, #8
 8100994:	af00      	add	r7, sp, #0
 8100996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8100998:	687b      	ldr	r3, [r7, #4]
 810099a:	681b      	ldr	r3, [r3, #0]
 810099c:	4a04      	ldr	r2, [pc, #16]	@ (81009b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 810099e:	4293      	cmp	r3, r2
 81009a0:	d101      	bne.n	81009a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 81009a2:	f007 fd25 	bl	81083f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81009a6:	bf00      	nop
 81009a8:	3708      	adds	r7, #8
 81009aa:	46bd      	mov	sp, r7
 81009ac:	bd80      	pop	{r7, pc}
 81009ae:	bf00      	nop
 81009b0:	40001000 	.word	0x40001000

081009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81009b4:	b480      	push	{r7}
 81009b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 81009b8:	b672      	cpsid	i
}
 81009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81009bc:	bf00      	nop
 81009be:	e7fd      	b.n	81009bc <Error_Handler+0x8>

081009c0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 81009c0:	b580      	push	{r7, lr}
 81009c2:	b082      	sub	sp, #8
 81009c4:	af00      	add	r7, sp, #0
 81009c6:	6078      	str	r0, [r7, #4]
 81009c8:	6039      	str	r1, [r7, #0]
 81009ca:	687b      	ldr	r3, [r7, #4]
 81009cc:	2b01      	cmp	r3, #1
 81009ce:	d124      	bne.n	8100a1a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 81009d0:	683b      	ldr	r3, [r7, #0]
 81009d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81009d6:	4293      	cmp	r3, r2
 81009d8:	d11f      	bne.n	8100a1a <_Z41__static_initialization_and_destruction_0ii+0x5a>
QueueHandle_t queueToEventManagerCM4 = xQueueCreate(64, sizeof(SMessage));
 81009da:	2200      	movs	r2, #0
 81009dc:	211c      	movs	r1, #28
 81009de:	2040      	movs	r0, #64	@ 0x40
 81009e0:	f00e f8eb 	bl	810ebba <xQueueGenericCreate>
 81009e4:	4603      	mov	r3, r0
 81009e6:	4a0f      	ldr	r2, [pc, #60]	@ (8100a24 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 81009e8:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToNativeDaemon = xQueueCreate(16, sizeof(SMessage));
 81009ea:	2200      	movs	r2, #0
 81009ec:	211c      	movs	r1, #28
 81009ee:	2010      	movs	r0, #16
 81009f0:	f00e f8e3 	bl	810ebba <xQueueGenericCreate>
 81009f4:	4603      	mov	r3, r0
 81009f6:	4a0c      	ldr	r2, [pc, #48]	@ (8100a28 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 81009f8:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToEthernetConnMgr = xQueueCreate(16, sizeof(SMessage));
 81009fa:	2200      	movs	r2, #0
 81009fc:	211c      	movs	r1, #28
 81009fe:	2010      	movs	r0, #16
 8100a00:	f00e f8db 	bl	810ebba <xQueueGenericCreate>
 8100a04:	4603      	mov	r3, r0
 8100a06:	4a09      	ldr	r2, [pc, #36]	@ (8100a2c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8100a08:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToTemperature = xQueueCreate(4, sizeof(SMessage));
 8100a0a:	2200      	movs	r2, #0
 8100a0c:	211c      	movs	r1, #28
 8100a0e:	2004      	movs	r0, #4
 8100a10:	f00e f8d3 	bl	810ebba <xQueueGenericCreate>
 8100a14:	4603      	mov	r3, r0
 8100a16:	4a06      	ldr	r2, [pc, #24]	@ (8100a30 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8100a18:	6013      	str	r3, [r2, #0]
}
 8100a1a:	bf00      	nop
 8100a1c:	3708      	adds	r7, #8
 8100a1e:	46bd      	mov	sp, r7
 8100a20:	bd80      	pop	{r7, pc}
 8100a22:	bf00      	nop
 8100a24:	100001b0 	.word	0x100001b0
 8100a28:	100001b4 	.word	0x100001b4
 8100a2c:	100001b8 	.word	0x100001b8
 8100a30:	100001bc 	.word	0x100001bc

08100a34 <_GLOBAL__sub_I_hi2c4>:
 8100a34:	b580      	push	{r7, lr}
 8100a36:	af00      	add	r7, sp, #0
 8100a38:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8100a3c:	2001      	movs	r0, #1
 8100a3e:	f7ff ffbf 	bl	81009c0 <_Z41__static_initialization_and_destruction_0ii>
 8100a42:	bd80      	pop	{r7, pc}

08100a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100a44:	b580      	push	{r7, lr}
 8100a46:	b082      	sub	sp, #8
 8100a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100a4a:	4b10      	ldr	r3, [pc, #64]	@ (8100a8c <HAL_MspInit+0x48>)
 8100a4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a50:	4a0e      	ldr	r2, [pc, #56]	@ (8100a8c <HAL_MspInit+0x48>)
 8100a52:	f043 0302 	orr.w	r3, r3, #2
 8100a56:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8100a8c <HAL_MspInit+0x48>)
 8100a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a60:	f003 0302 	and.w	r3, r3, #2
 8100a64:	607b      	str	r3, [r7, #4]
 8100a66:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100a68:	2200      	movs	r2, #0
 8100a6a:	210f      	movs	r1, #15
 8100a6c:	f06f 0001 	mvn.w	r0, #1
 8100a70:	f007 fdaa 	bl	81085c8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 7, 0);
 8100a74:	2200      	movs	r2, #0
 8100a76:	2107      	movs	r1, #7
 8100a78:	207e      	movs	r0, #126	@ 0x7e
 8100a7a:	f007 fda5 	bl	81085c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100a7e:	207e      	movs	r0, #126	@ 0x7e
 8100a80:	f007 fdbc 	bl	81085fc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100a84:	bf00      	nop
 8100a86:	3708      	adds	r7, #8
 8100a88:	46bd      	mov	sp, r7
 8100a8a:	bd80      	pop	{r7, pc}
 8100a8c:	58024400 	.word	0x58024400

08100a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8100a90:	b580      	push	{r7, lr}
 8100a92:	b0bc      	sub	sp, #240	@ 0xf0
 8100a94:	af00      	add	r7, sp, #0
 8100a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100a98:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100a9c:	2200      	movs	r2, #0
 8100a9e:	601a      	str	r2, [r3, #0]
 8100aa0:	605a      	str	r2, [r3, #4]
 8100aa2:	609a      	str	r2, [r3, #8]
 8100aa4:	60da      	str	r2, [r3, #12]
 8100aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100aa8:	f107 0310 	add.w	r3, r7, #16
 8100aac:	22c8      	movs	r2, #200	@ 0xc8
 8100aae:	2100      	movs	r1, #0
 8100ab0:	4618      	mov	r0, r3
 8100ab2:	f01d fad3 	bl	811e05c <memset>
  if(hi2c->Instance==I2C4)
 8100ab6:	687b      	ldr	r3, [r7, #4]
 8100ab8:	681b      	ldr	r3, [r3, #0]
 8100aba:	4a27      	ldr	r2, [pc, #156]	@ (8100b58 <HAL_I2C_MspInit+0xc8>)
 8100abc:	4293      	cmp	r3, r2
 8100abe:	d146      	bne.n	8100b4e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8100ac0:	f04f 0210 	mov.w	r2, #16
 8100ac4:	f04f 0300 	mov.w	r3, #0
 8100ac8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8100acc:	2300      	movs	r3, #0
 8100ace:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100ad2:	f107 0310 	add.w	r3, r7, #16
 8100ad6:	4618      	mov	r0, r3
 8100ad8:	f00a fdd0 	bl	810b67c <HAL_RCCEx_PeriphCLKConfig>
 8100adc:	4603      	mov	r3, r0
 8100ade:	2b00      	cmp	r3, #0
 8100ae0:	d001      	beq.n	8100ae6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8100ae2:	f7ff ff67 	bl	81009b4 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8100b5c <HAL_I2C_MspInit+0xcc>)
 8100ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100aec:	4a1b      	ldr	r2, [pc, #108]	@ (8100b5c <HAL_I2C_MspInit+0xcc>)
 8100aee:	f043 0308 	orr.w	r3, r3, #8
 8100af2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100af6:	4b19      	ldr	r3, [pc, #100]	@ (8100b5c <HAL_I2C_MspInit+0xcc>)
 8100af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100afc:	f003 0308 	and.w	r3, r3, #8
 8100b00:	60fb      	str	r3, [r7, #12]
 8100b02:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8100b04:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8100b08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100b0c:	2312      	movs	r3, #18
 8100b0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100b12:	2300      	movs	r3, #0
 8100b14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100b18:	2300      	movs	r3, #0
 8100b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8100b1e:	2304      	movs	r3, #4
 8100b20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100b24:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100b28:	4619      	mov	r1, r3
 8100b2a:	480d      	ldr	r0, [pc, #52]	@ (8100b60 <HAL_I2C_MspInit+0xd0>)
 8100b2c:	f009 fb06 	bl	810a13c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8100b30:	4b0a      	ldr	r3, [pc, #40]	@ (8100b5c <HAL_I2C_MspInit+0xcc>)
 8100b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100b36:	4a09      	ldr	r2, [pc, #36]	@ (8100b5c <HAL_I2C_MspInit+0xcc>)
 8100b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100b3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100b40:	4b06      	ldr	r3, [pc, #24]	@ (8100b5c <HAL_I2C_MspInit+0xcc>)
 8100b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100b4a:	60bb      	str	r3, [r7, #8]
 8100b4c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8100b4e:	bf00      	nop
 8100b50:	37f0      	adds	r7, #240	@ 0xf0
 8100b52:	46bd      	mov	sp, r7
 8100b54:	bd80      	pop	{r7, pc}
 8100b56:	bf00      	nop
 8100b58:	58001c00 	.word	0x58001c00
 8100b5c:	58024400 	.word	0x58024400
 8100b60:	58020c00 	.word	0x58020c00

08100b64 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8100b64:	b580      	push	{r7, lr}
 8100b66:	b082      	sub	sp, #8
 8100b68:	af00      	add	r7, sp, #0
 8100b6a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8100b6c:	687b      	ldr	r3, [r7, #4]
 8100b6e:	681b      	ldr	r3, [r3, #0]
 8100b70:	4a0c      	ldr	r2, [pc, #48]	@ (8100ba4 <HAL_I2C_MspDeInit+0x40>)
 8100b72:	4293      	cmp	r3, r2
 8100b74:	d111      	bne.n	8100b9a <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8100b76:	4b0c      	ldr	r3, [pc, #48]	@ (8100ba8 <HAL_I2C_MspDeInit+0x44>)
 8100b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8100ba8 <HAL_I2C_MspDeInit+0x44>)
 8100b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8100b82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4

    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8100b86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8100b8a:	4808      	ldr	r0, [pc, #32]	@ (8100bac <HAL_I2C_MspDeInit+0x48>)
 8100b8c:	f009 fc86 	bl	810a49c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8100b90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8100b94:	4805      	ldr	r0, [pc, #20]	@ (8100bac <HAL_I2C_MspDeInit+0x48>)
 8100b96:	f009 fc81 	bl	810a49c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8100b9a:	bf00      	nop
 8100b9c:	3708      	adds	r7, #8
 8100b9e:	46bd      	mov	sp, r7
 8100ba0:	bd80      	pop	{r7, pc}
 8100ba2:	bf00      	nop
 8100ba4:	58001c00 	.word	0x58001c00
 8100ba8:	58024400 	.word	0x58024400
 8100bac:	58020c00 	.word	0x58020c00

08100bb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100bb0:	b580      	push	{r7, lr}
 8100bb2:	b090      	sub	sp, #64	@ 0x40
 8100bb4:	af00      	add	r7, sp, #0
 8100bb6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100bb8:	687b      	ldr	r3, [r7, #4]
 8100bba:	2b0f      	cmp	r3, #15
 8100bbc:	d827      	bhi.n	8100c0e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8100bbe:	2200      	movs	r2, #0
 8100bc0:	6879      	ldr	r1, [r7, #4]
 8100bc2:	2036      	movs	r0, #54	@ 0x36
 8100bc4:	f007 fd00 	bl	81085c8 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8100bc8:	2036      	movs	r0, #54	@ 0x36
 8100bca:	f007 fd17 	bl	81085fc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8100bce:	4a29      	ldr	r2, [pc, #164]	@ (8100c74 <HAL_InitTick+0xc4>)
 8100bd0:	687b      	ldr	r3, [r7, #4]
 8100bd2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8100bd4:	4b28      	ldr	r3, [pc, #160]	@ (8100c78 <HAL_InitTick+0xc8>)
 8100bd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100bda:	4a27      	ldr	r2, [pc, #156]	@ (8100c78 <HAL_InitTick+0xc8>)
 8100bdc:	f043 0310 	orr.w	r3, r3, #16
 8100be0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100be4:	4b24      	ldr	r3, [pc, #144]	@ (8100c78 <HAL_InitTick+0xc8>)
 8100be6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100bea:	f003 0310 	and.w	r3, r3, #16
 8100bee:	60fb      	str	r3, [r7, #12]
 8100bf0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8100bf2:	f107 0210 	add.w	r2, r7, #16
 8100bf6:	f107 0314 	add.w	r3, r7, #20
 8100bfa:	4611      	mov	r1, r2
 8100bfc:	4618      	mov	r0, r3
 8100bfe:	f00a fcfb 	bl	810b5f8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8100c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100c04:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8100c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8100c08:	2b00      	cmp	r3, #0
 8100c0a:	d106      	bne.n	8100c1a <HAL_InitTick+0x6a>
 8100c0c:	e001      	b.n	8100c12 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8100c0e:	2301      	movs	r3, #1
 8100c10:	e02b      	b.n	8100c6a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8100c12:	f00a fcdb 	bl	810b5cc <HAL_RCC_GetPCLK1Freq>
 8100c16:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8100c18:	e004      	b.n	8100c24 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100c1a:	f00a fcd7 	bl	810b5cc <HAL_RCC_GetPCLK1Freq>
 8100c1e:	4603      	mov	r3, r0
 8100c20:	005b      	lsls	r3, r3, #1
 8100c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8100c26:	4a15      	ldr	r2, [pc, #84]	@ (8100c7c <HAL_InitTick+0xcc>)
 8100c28:	fba2 2303 	umull	r2, r3, r2, r3
 8100c2c:	0c9b      	lsrs	r3, r3, #18
 8100c2e:	3b01      	subs	r3, #1
 8100c30:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8100c32:	4b13      	ldr	r3, [pc, #76]	@ (8100c80 <HAL_InitTick+0xd0>)
 8100c34:	4a13      	ldr	r2, [pc, #76]	@ (8100c84 <HAL_InitTick+0xd4>)
 8100c36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8100c38:	4b11      	ldr	r3, [pc, #68]	@ (8100c80 <HAL_InitTick+0xd0>)
 8100c3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8100c3e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8100c40:	4a0f      	ldr	r2, [pc, #60]	@ (8100c80 <HAL_InitTick+0xd0>)
 8100c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8100c44:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8100c46:	4b0e      	ldr	r3, [pc, #56]	@ (8100c80 <HAL_InitTick+0xd0>)
 8100c48:	2200      	movs	r2, #0
 8100c4a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8100c80 <HAL_InitTick+0xd0>)
 8100c4e:	2200      	movs	r2, #0
 8100c50:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8100c52:	480b      	ldr	r0, [pc, #44]	@ (8100c80 <HAL_InitTick+0xd0>)
 8100c54:	f00c f8c0 	bl	810cdd8 <HAL_TIM_Base_Init>
 8100c58:	4603      	mov	r3, r0
 8100c5a:	2b00      	cmp	r3, #0
 8100c5c:	d104      	bne.n	8100c68 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8100c5e:	4808      	ldr	r0, [pc, #32]	@ (8100c80 <HAL_InitTick+0xd0>)
 8100c60:	f00c f91c 	bl	810ce9c <HAL_TIM_Base_Start_IT>
 8100c64:	4603      	mov	r3, r0
 8100c66:	e000      	b.n	8100c6a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8100c68:	2301      	movs	r3, #1
}
 8100c6a:	4618      	mov	r0, r3
 8100c6c:	3740      	adds	r7, #64	@ 0x40
 8100c6e:	46bd      	mov	sp, r7
 8100c70:	bd80      	pop	{r7, pc}
 8100c72:	bf00      	nop
 8100c74:	1000001c 	.word	0x1000001c
 8100c78:	58024400 	.word	0x58024400
 8100c7c:	431bde83 	.word	0x431bde83
 8100c80:	100001c0 	.word	0x100001c0
 8100c84:	40001000 	.word	0x40001000

08100c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100c88:	b480      	push	{r7}
 8100c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100c8c:	bf00      	nop
 8100c8e:	e7fd      	b.n	8100c8c <NMI_Handler+0x4>

08100c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100c90:	b480      	push	{r7}
 8100c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100c94:	bf00      	nop
 8100c96:	e7fd      	b.n	8100c94 <HardFault_Handler+0x4>

08100c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100c98:	b480      	push	{r7}
 8100c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100c9c:	bf00      	nop
 8100c9e:	e7fd      	b.n	8100c9c <MemManage_Handler+0x4>

08100ca0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100ca0:	b480      	push	{r7}
 8100ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100ca4:	bf00      	nop
 8100ca6:	e7fd      	b.n	8100ca4 <BusFault_Handler+0x4>

08100ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100ca8:	b480      	push	{r7}
 8100caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100cac:	bf00      	nop
 8100cae:	e7fd      	b.n	8100cac <UsageFault_Handler+0x4>

08100cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100cb0:	b480      	push	{r7}
 8100cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100cb4:	bf00      	nop
 8100cb6:	46bd      	mov	sp, r7
 8100cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cbc:	4770      	bx	lr
	...

08100cc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8100cc0:	b580      	push	{r7, lr}
 8100cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8100cc4:	4802      	ldr	r0, [pc, #8]	@ (8100cd0 <TIM6_DAC_IRQHandler+0x10>)
 8100cc6:	f00c f961 	bl	810cf8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8100cca:	bf00      	nop
 8100ccc:	bd80      	pop	{r7, pc}
 8100cce:	bf00      	nop
 8100cd0:	100001c0 	.word	0x100001c0

08100cd4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8100cd4:	b580      	push	{r7, lr}
 8100cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8100cd8:	4802      	ldr	r0, [pc, #8]	@ (8100ce4 <ETH_IRQHandler+0x10>)
 8100cda:	f008 f887 	bl	8108dec <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8100cde:	bf00      	nop
 8100ce0:	bd80      	pop	{r7, pc}
 8100ce2:	bf00      	nop
 8100ce4:	100002b4 	.word	0x100002b4

08100ce8 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8100ce8:	b580      	push	{r7, lr}
 8100cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8100cec:	4802      	ldr	r0, [pc, #8]	@ (8100cf8 <ETH_WKUP_IRQHandler+0x10>)
 8100cee:	f008 f87d 	bl	8108dec <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8100cf2:	bf00      	nop
 8100cf4:	bd80      	pop	{r7, pc}
 8100cf6:	bf00      	nop
 8100cf8:	100002b4 	.word	0x100002b4

08100cfc <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8100cfc:	b580      	push	{r7, lr}
 8100cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8100d00:	f009 fd20 	bl	810a744 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100d04:	bf00      	nop
 8100d06:	bd80      	pop	{r7, pc}

08100d08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8100d08:	b480      	push	{r7}
 8100d0a:	af00      	add	r7, sp, #0
	return 1;
 8100d0c:	2301      	movs	r3, #1
}
 8100d0e:	4618      	mov	r0, r3
 8100d10:	46bd      	mov	sp, r7
 8100d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d16:	4770      	bx	lr

08100d18 <_kill>:

int _kill(int pid, int sig)
{
 8100d18:	b480      	push	{r7}
 8100d1a:	b083      	sub	sp, #12
 8100d1c:	af00      	add	r7, sp, #0
 8100d1e:	6078      	str	r0, [r7, #4]
 8100d20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8100d22:	4b05      	ldr	r3, [pc, #20]	@ (8100d38 <_kill+0x20>)
 8100d24:	2216      	movs	r2, #22
 8100d26:	601a      	str	r2, [r3, #0]
	return -1;
 8100d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100d2c:	4618      	mov	r0, r3
 8100d2e:	370c      	adds	r7, #12
 8100d30:	46bd      	mov	sp, r7
 8100d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d36:	4770      	bx	lr
 8100d38:	100122e0 	.word	0x100122e0

08100d3c <_exit>:

void _exit (int status)
{
 8100d3c:	b580      	push	{r7, lr}
 8100d3e:	b082      	sub	sp, #8
 8100d40:	af00      	add	r7, sp, #0
 8100d42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8100d44:	f04f 31ff 	mov.w	r1, #4294967295
 8100d48:	6878      	ldr	r0, [r7, #4]
 8100d4a:	f7ff ffe5 	bl	8100d18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8100d4e:	bf00      	nop
 8100d50:	e7fd      	b.n	8100d4e <_exit+0x12>

08100d52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8100d52:	b580      	push	{r7, lr}
 8100d54:	b086      	sub	sp, #24
 8100d56:	af00      	add	r7, sp, #0
 8100d58:	60f8      	str	r0, [r7, #12]
 8100d5a:	60b9      	str	r1, [r7, #8]
 8100d5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100d5e:	2300      	movs	r3, #0
 8100d60:	617b      	str	r3, [r7, #20]
 8100d62:	e00a      	b.n	8100d7a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8100d64:	f3af 8000 	nop.w
 8100d68:	4601      	mov	r1, r0
 8100d6a:	68bb      	ldr	r3, [r7, #8]
 8100d6c:	1c5a      	adds	r2, r3, #1
 8100d6e:	60ba      	str	r2, [r7, #8]
 8100d70:	b2ca      	uxtb	r2, r1
 8100d72:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100d74:	697b      	ldr	r3, [r7, #20]
 8100d76:	3301      	adds	r3, #1
 8100d78:	617b      	str	r3, [r7, #20]
 8100d7a:	697a      	ldr	r2, [r7, #20]
 8100d7c:	687b      	ldr	r3, [r7, #4]
 8100d7e:	429a      	cmp	r2, r3
 8100d80:	dbf0      	blt.n	8100d64 <_read+0x12>
	}

return len;
 8100d82:	687b      	ldr	r3, [r7, #4]
}
 8100d84:	4618      	mov	r0, r3
 8100d86:	3718      	adds	r7, #24
 8100d88:	46bd      	mov	sp, r7
 8100d8a:	bd80      	pop	{r7, pc}

08100d8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8100d8c:	b580      	push	{r7, lr}
 8100d8e:	b086      	sub	sp, #24
 8100d90:	af00      	add	r7, sp, #0
 8100d92:	60f8      	str	r0, [r7, #12]
 8100d94:	60b9      	str	r1, [r7, #8]
 8100d96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100d98:	2300      	movs	r3, #0
 8100d9a:	617b      	str	r3, [r7, #20]
 8100d9c:	e009      	b.n	8100db2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8100d9e:	68bb      	ldr	r3, [r7, #8]
 8100da0:	1c5a      	adds	r2, r3, #1
 8100da2:	60ba      	str	r2, [r7, #8]
 8100da4:	781b      	ldrb	r3, [r3, #0]
 8100da6:	4618      	mov	r0, r3
 8100da8:	f7ff fde0 	bl	810096c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100dac:	697b      	ldr	r3, [r7, #20]
 8100dae:	3301      	adds	r3, #1
 8100db0:	617b      	str	r3, [r7, #20]
 8100db2:	697a      	ldr	r2, [r7, #20]
 8100db4:	687b      	ldr	r3, [r7, #4]
 8100db6:	429a      	cmp	r2, r3
 8100db8:	dbf1      	blt.n	8100d9e <_write+0x12>
	}
	return len;
 8100dba:	687b      	ldr	r3, [r7, #4]
}
 8100dbc:	4618      	mov	r0, r3
 8100dbe:	3718      	adds	r7, #24
 8100dc0:	46bd      	mov	sp, r7
 8100dc2:	bd80      	pop	{r7, pc}

08100dc4 <_close>:

int _close(int file)
{
 8100dc4:	b480      	push	{r7}
 8100dc6:	b083      	sub	sp, #12
 8100dc8:	af00      	add	r7, sp, #0
 8100dca:	6078      	str	r0, [r7, #4]
	return -1;
 8100dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100dd0:	4618      	mov	r0, r3
 8100dd2:	370c      	adds	r7, #12
 8100dd4:	46bd      	mov	sp, r7
 8100dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dda:	4770      	bx	lr

08100ddc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8100ddc:	b480      	push	{r7}
 8100dde:	b083      	sub	sp, #12
 8100de0:	af00      	add	r7, sp, #0
 8100de2:	6078      	str	r0, [r7, #4]
 8100de4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8100de6:	683b      	ldr	r3, [r7, #0]
 8100de8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8100dec:	605a      	str	r2, [r3, #4]
	return 0;
 8100dee:	2300      	movs	r3, #0
}
 8100df0:	4618      	mov	r0, r3
 8100df2:	370c      	adds	r7, #12
 8100df4:	46bd      	mov	sp, r7
 8100df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dfa:	4770      	bx	lr

08100dfc <_isatty>:

int _isatty(int file)
{
 8100dfc:	b480      	push	{r7}
 8100dfe:	b083      	sub	sp, #12
 8100e00:	af00      	add	r7, sp, #0
 8100e02:	6078      	str	r0, [r7, #4]
	return 1;
 8100e04:	2301      	movs	r3, #1
}
 8100e06:	4618      	mov	r0, r3
 8100e08:	370c      	adds	r7, #12
 8100e0a:	46bd      	mov	sp, r7
 8100e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e10:	4770      	bx	lr

08100e12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8100e12:	b480      	push	{r7}
 8100e14:	b085      	sub	sp, #20
 8100e16:	af00      	add	r7, sp, #0
 8100e18:	60f8      	str	r0, [r7, #12]
 8100e1a:	60b9      	str	r1, [r7, #8]
 8100e1c:	607a      	str	r2, [r7, #4]
	return 0;
 8100e1e:	2300      	movs	r3, #0
}
 8100e20:	4618      	mov	r0, r3
 8100e22:	3714      	adds	r7, #20
 8100e24:	46bd      	mov	sp, r7
 8100e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e2a:	4770      	bx	lr

08100e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100e2c:	b480      	push	{r7}
 8100e2e:	b087      	sub	sp, #28
 8100e30:	af00      	add	r7, sp, #0
 8100e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100e34:	4a14      	ldr	r2, [pc, #80]	@ (8100e88 <_sbrk+0x5c>)
 8100e36:	4b15      	ldr	r3, [pc, #84]	@ (8100e8c <_sbrk+0x60>)
 8100e38:	1ad3      	subs	r3, r2, r3
 8100e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100e3c:	697b      	ldr	r3, [r7, #20]
 8100e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100e40:	4b13      	ldr	r3, [pc, #76]	@ (8100e90 <_sbrk+0x64>)
 8100e42:	681b      	ldr	r3, [r3, #0]
 8100e44:	2b00      	cmp	r3, #0
 8100e46:	d102      	bne.n	8100e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100e48:	4b11      	ldr	r3, [pc, #68]	@ (8100e90 <_sbrk+0x64>)
 8100e4a:	4a12      	ldr	r2, [pc, #72]	@ (8100e94 <_sbrk+0x68>)
 8100e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100e4e:	4b10      	ldr	r3, [pc, #64]	@ (8100e90 <_sbrk+0x64>)
 8100e50:	681a      	ldr	r2, [r3, #0]
 8100e52:	687b      	ldr	r3, [r7, #4]
 8100e54:	4413      	add	r3, r2
 8100e56:	693a      	ldr	r2, [r7, #16]
 8100e58:	429a      	cmp	r2, r3
 8100e5a:	d205      	bcs.n	8100e68 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8100e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8100e98 <_sbrk+0x6c>)
 8100e5e:	220c      	movs	r2, #12
 8100e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100e62:	f04f 33ff 	mov.w	r3, #4294967295
 8100e66:	e009      	b.n	8100e7c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8100e68:	4b09      	ldr	r3, [pc, #36]	@ (8100e90 <_sbrk+0x64>)
 8100e6a:	681b      	ldr	r3, [r3, #0]
 8100e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100e6e:	4b08      	ldr	r3, [pc, #32]	@ (8100e90 <_sbrk+0x64>)
 8100e70:	681a      	ldr	r2, [r3, #0]
 8100e72:	687b      	ldr	r3, [r7, #4]
 8100e74:	4413      	add	r3, r2
 8100e76:	4a06      	ldr	r2, [pc, #24]	@ (8100e90 <_sbrk+0x64>)
 8100e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100e7a:	68fb      	ldr	r3, [r7, #12]
}
 8100e7c:	4618      	mov	r0, r3
 8100e7e:	371c      	adds	r7, #28
 8100e80:	46bd      	mov	sp, r7
 8100e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e86:	4770      	bx	lr
 8100e88:	10048000 	.word	0x10048000
 8100e8c:	00001000 	.word	0x00001000
 8100e90:	1000020c 	.word	0x1000020c
 8100e94:	100122e8 	.word	0x100122e8
 8100e98:	100122e0 	.word	0x100122e0

08100e9c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8100e9c:	b480      	push	{r7}
 8100e9e:	b083      	sub	sp, #12
 8100ea0:	af00      	add	r7, sp, #0
 8100ea2:	6078      	str	r0, [r7, #4]
 8100ea4:	6039      	str	r1, [r7, #0]
 8100ea6:	683b      	ldr	r3, [r7, #0]
 8100ea8:	4618      	mov	r0, r3
 8100eaa:	370c      	adds	r7, #12
 8100eac:	46bd      	mov	sp, r7
 8100eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100eb2:	4770      	bx	lr

08100eb4 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8100eb4:	b480      	push	{r7}
 8100eb6:	b083      	sub	sp, #12
 8100eb8:	af00      	add	r7, sp, #0
 8100eba:	6078      	str	r0, [r7, #4]
 8100ebc:	687b      	ldr	r3, [r7, #4]
 8100ebe:	4618      	mov	r0, r3
 8100ec0:	370c      	adds	r7, #12
 8100ec2:	46bd      	mov	sp, r7
 8100ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ec8:	4770      	bx	lr

08100eca <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8100eca:	b480      	push	{r7}
 8100ecc:	b083      	sub	sp, #12
 8100ece:	af00      	add	r7, sp, #0
 8100ed0:	6078      	str	r0, [r7, #4]
 8100ed2:	687b      	ldr	r3, [r7, #4]
 8100ed4:	4618      	mov	r0, r3
 8100ed6:	370c      	adds	r7, #12
 8100ed8:	46bd      	mov	sp, r7
 8100eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ede:	4770      	bx	lr

08100ee0 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8100ee0:	b580      	push	{r7, lr}
 8100ee2:	b082      	sub	sp, #8
 8100ee4:	af00      	add	r7, sp, #0
 8100ee6:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8100ee8:	687b      	ldr	r3, [r7, #4]
 8100eea:	689b      	ldr	r3, [r3, #8]
 8100eec:	2b00      	cmp	r3, #0
 8100eee:	d005      	beq.n	8100efc <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8100ef0:	687b      	ldr	r3, [r7, #4]
 8100ef2:	689b      	ldr	r3, [r3, #8]
 8100ef4:	6878      	ldr	r0, [r7, #4]
 8100ef6:	6879      	ldr	r1, [r7, #4]
 8100ef8:	2203      	movs	r2, #3
 8100efa:	4798      	blx	r3
    }
 8100efc:	687b      	ldr	r3, [r7, #4]
 8100efe:	4618      	mov	r0, r3
 8100f00:	3708      	adds	r7, #8
 8100f02:	46bd      	mov	sp, r7
 8100f04:	bd80      	pop	{r7, pc}
	...

08100f08 <_ZN29EthernetConnectionManagerTask8instanceEv>:
        EVENT_TCP_CONNECTION_FAILED,
		EVENT_REQUESTED_DEFAULT_ECU,
		EVENT_REQUESTED_MOTOR_ECU
	};

    static EthernetConnectionManagerTask& instance()
 8100f08:	b580      	push	{r7, lr}
 8100f0a:	af00      	add	r7, sp, #0
    {
        static EthernetConnectionManagerTask ecmt;
 8100f0c:	4b10      	ldr	r3, [pc, #64]	@ (8100f50 <_ZN29EthernetConnectionManagerTask8instanceEv+0x48>)
 8100f0e:	681b      	ldr	r3, [r3, #0]
 8100f10:	f3bf 8f5b 	dmb	ish
 8100f14:	f003 0301 	and.w	r3, r3, #1
 8100f18:	2b00      	cmp	r3, #0
 8100f1a:	bf0c      	ite	eq
 8100f1c:	2301      	moveq	r3, #1
 8100f1e:	2300      	movne	r3, #0
 8100f20:	b2db      	uxtb	r3, r3
 8100f22:	2b00      	cmp	r3, #0
 8100f24:	d010      	beq.n	8100f48 <_ZN29EthernetConnectionManagerTask8instanceEv+0x40>
 8100f26:	480a      	ldr	r0, [pc, #40]	@ (8100f50 <_ZN29EthernetConnectionManagerTask8instanceEv+0x48>)
 8100f28:	f01c f80a 	bl	811cf40 <__cxa_guard_acquire>
 8100f2c:	4603      	mov	r3, r0
 8100f2e:	2b00      	cmp	r3, #0
 8100f30:	bf14      	ite	ne
 8100f32:	2301      	movne	r3, #1
 8100f34:	2300      	moveq	r3, #0
 8100f36:	b2db      	uxtb	r3, r3
 8100f38:	2b00      	cmp	r3, #0
 8100f3a:	d005      	beq.n	8100f48 <_ZN29EthernetConnectionManagerTask8instanceEv+0x40>
 8100f3c:	4805      	ldr	r0, [pc, #20]	@ (8100f54 <_ZN29EthernetConnectionManagerTask8instanceEv+0x4c>)
 8100f3e:	f000 f875 	bl	810102c <_ZN29EthernetConnectionManagerTaskC1Ev>
 8100f42:	4803      	ldr	r0, [pc, #12]	@ (8100f50 <_ZN29EthernetConnectionManagerTask8instanceEv+0x48>)
 8100f44:	f01c f808 	bl	811cf58 <__cxa_guard_release>
        return ecmt;
 8100f48:	4b02      	ldr	r3, [pc, #8]	@ (8100f54 <_ZN29EthernetConnectionManagerTask8instanceEv+0x4c>)
    }
 8100f4a:	4618      	mov	r0, r3
 8100f4c:	bd80      	pop	{r7, pc}
 8100f4e:	bf00      	nop
 8100f50:	10000230 	.word	0x10000230
 8100f54:	10000210 	.word	0x10000210

08100f58 <_Z25StartTask_EthernetConnMgrPv>:
#include <cstring>

extern QueueHandle_t queueToEthernetConnMgr;

void StartTask_EthernetConnMgr(void *argument)
{
 8100f58:	b580      	push	{r7, lr}
 8100f5a:	b084      	sub	sp, #16
 8100f5c:	af00      	add	r7, sp, #0
 8100f5e:	6078      	str	r0, [r7, #4]
    EthernetConnectionManagerTask& connMgrInstance = EthernetConnectionManagerTask::instance();
 8100f60:	f7ff ffd2 	bl	8100f08 <_ZN29EthernetConnectionManagerTask8instanceEv>
 8100f64:	60f8      	str	r0, [r7, #12]
    /* Infinite loop */
    for (;;) {
        connMgrInstance.process();
 8100f66:	68f8      	ldr	r0, [r7, #12]
 8100f68:	f000 f916 	bl	8101198 <_ZN29EthernetConnectionManagerTask7processEv>
        osDelay(1);
 8100f6c:	2001      	movs	r0, #1
 8100f6e:	f00c fc98 	bl	810d8a2 <osDelay>
        connMgrInstance.process();
 8100f72:	bf00      	nop
 8100f74:	e7f7      	b.n	8100f66 <_Z25StartTask_EthernetConnMgrPv+0xe>

08100f76 <tcpRecvCb>:
    }
}

extern "C" err_t tcpRecvCb(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8100f76:	b580      	push	{r7, lr}
 8100f78:	b088      	sub	sp, #32
 8100f7a:	af02      	add	r7, sp, #8
 8100f7c:	60f8      	str	r0, [r7, #12]
 8100f7e:	60b9      	str	r1, [r7, #8]
 8100f80:	607a      	str	r2, [r7, #4]
 8100f82:	70fb      	strb	r3, [r7, #3]
    EthernetConnectionManagerTask& connMgrInstance = EthernetConnectionManagerTask::instance();
 8100f84:	f7ff ffc0 	bl	8100f08 <_ZN29EthernetConnectionManagerTask8instanceEv>
 8100f88:	6178      	str	r0, [r7, #20]
    connMgrInstance.HandleTcpRecvCb(arg, tpcb, p, err);
 8100f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8100f8e:	9300      	str	r3, [sp, #0]
 8100f90:	687b      	ldr	r3, [r7, #4]
 8100f92:	68ba      	ldr	r2, [r7, #8]
 8100f94:	68f9      	ldr	r1, [r7, #12]
 8100f96:	6978      	ldr	r0, [r7, #20]
 8100f98:	f000 fe6e 	bl	8101c78 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa>
    return ERR_OK;
 8100f9c:	2300      	movs	r3, #0
}
 8100f9e:	4618      	mov	r0, r3
 8100fa0:	3718      	adds	r7, #24
 8100fa2:	46bd      	mov	sp, r7
 8100fa4:	bd80      	pop	{r7, pc}

08100fa6 <tcpConnectCb>:

extern "C" err_t tcpConnectCb(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8100fa6:	b580      	push	{r7, lr}
 8100fa8:	b086      	sub	sp, #24
 8100faa:	af00      	add	r7, sp, #0
 8100fac:	60f8      	str	r0, [r7, #12]
 8100fae:	60b9      	str	r1, [r7, #8]
 8100fb0:	4613      	mov	r3, r2
 8100fb2:	71fb      	strb	r3, [r7, #7]
    EthernetConnectionManagerTask& connMgrInstance = EthernetConnectionManagerTask::instance();
 8100fb4:	f7ff ffa8 	bl	8100f08 <_ZN29EthernetConnectionManagerTask8instanceEv>
 8100fb8:	6178      	str	r0, [r7, #20]
    connMgrInstance.HandleTcpConnectCb(arg, tpcb, err);
 8100fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8100fbe:	68ba      	ldr	r2, [r7, #8]
 8100fc0:	68f9      	ldr	r1, [r7, #12]
 8100fc2:	6978      	ldr	r0, [r7, #20]
 8100fc4:	f000 fe9e 	bl	8101d04 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba>
    return ERR_OK;
 8100fc8:	2300      	movs	r3, #0
}
 8100fca:	4618      	mov	r0, r3
 8100fcc:	3718      	adds	r7, #24
 8100fce:	46bd      	mov	sp, r7
 8100fd0:	bd80      	pop	{r7, pc}

08100fd2 <tcpErrCb>:

extern "C" void tcpErrCb(void *arg, err_t err)
{
 8100fd2:	b580      	push	{r7, lr}
 8100fd4:	b084      	sub	sp, #16
 8100fd6:	af00      	add	r7, sp, #0
 8100fd8:	6078      	str	r0, [r7, #4]
 8100fda:	460b      	mov	r3, r1
 8100fdc:	70fb      	strb	r3, [r7, #3]
    EthernetConnectionManagerTask& connMgrInstance = EthernetConnectionManagerTask::instance();
 8100fde:	f7ff ff93 	bl	8100f08 <_ZN29EthernetConnectionManagerTask8instanceEv>
 8100fe2:	60f8      	str	r0, [r7, #12]
    connMgrInstance.HandleTcpErrCb(arg, err);
 8100fe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8100fe8:	461a      	mov	r2, r3
 8100fea:	6879      	ldr	r1, [r7, #4]
 8100fec:	68f8      	ldr	r0, [r7, #12]
 8100fee:	f000 fefb 	bl	8101de8 <_ZN29EthernetConnectionManagerTask14HandleTcpErrCbEPva>
}
 8100ff2:	bf00      	nop
 8100ff4:	3710      	adds	r7, #16
 8100ff6:	46bd      	mov	sp, r7
 8100ff8:	bd80      	pop	{r7, pc}

08100ffa <udpRecvCb>:

extern "C" void udpRecvCb(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8100ffa:	b580      	push	{r7, lr}
 8100ffc:	b088      	sub	sp, #32
 8100ffe:	af02      	add	r7, sp, #8
 8101000:	60f8      	str	r0, [r7, #12]
 8101002:	60b9      	str	r1, [r7, #8]
 8101004:	607a      	str	r2, [r7, #4]
 8101006:	603b      	str	r3, [r7, #0]
    EthernetConnectionManagerTask& connMgrInstance = EthernetConnectionManagerTask::instance();
 8101008:	f7ff ff7e 	bl	8100f08 <_ZN29EthernetConnectionManagerTask8instanceEv>
 810100c:	6178      	str	r0, [r7, #20]
    connMgrInstance.HandleUdpRecvCb(arg, pcb, p, addr, port);
 810100e:	8c3b      	ldrh	r3, [r7, #32]
 8101010:	9301      	str	r3, [sp, #4]
 8101012:	683b      	ldr	r3, [r7, #0]
 8101014:	9300      	str	r3, [sp, #0]
 8101016:	687b      	ldr	r3, [r7, #4]
 8101018:	68ba      	ldr	r2, [r7, #8]
 810101a:	68f9      	ldr	r1, [r7, #12]
 810101c:	6978      	ldr	r0, [r7, #20]
 810101e:	f000 fb49 	bl	81016b4 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt>
}
 8101022:	bf00      	nop
 8101024:	3718      	adds	r7, #24
 8101026:	46bd      	mov	sp, r7
 8101028:	bd80      	pop	{r7, pc}
	...

0810102c <_ZN29EthernetConnectionManagerTaskC1Ev>:


EthernetConnectionManagerTask::EthernetConnectionManagerTask() : event_bus(EventBus(queueToEthernetConnMgr, EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER))
 810102c:	b580      	push	{r7, lr}
 810102e:	b082      	sub	sp, #8
 8101030:	af00      	add	r7, sp, #0
 8101032:	6078      	str	r0, [r7, #4]
 8101034:	687b      	ldr	r3, [r7, #4]
 8101036:	4a0c      	ldr	r2, [pc, #48]	@ (8101068 <_ZN29EthernetConnectionManagerTaskC1Ev+0x3c>)
 8101038:	6811      	ldr	r1, [r2, #0]
 810103a:	2203      	movs	r2, #3
 810103c:	4618      	mov	r0, r3
 810103e:	f001 f917 	bl	8102270 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
{
	MX_LWIP_Init();
 8101042:	f003 ffb1 	bl	8104fa8 <MX_LWIP_Init>
	current_connection_state = STATE_ETHERNET_DISCONNECTED;
 8101046:	687b      	ldr	r3, [r7, #4]
 8101048:	2200      	movs	r2, #0
 810104a:	741a      	strb	r2, [r3, #16]
    connection_events_internal_queue = xQueueCreate(16, sizeof(EConnectionEvent));
 810104c:	2200      	movs	r2, #0
 810104e:	2101      	movs	r1, #1
 8101050:	2010      	movs	r0, #16
 8101052:	f00d fdb2 	bl	810ebba <xQueueGenericCreate>
 8101056:	4602      	mov	r2, r0
 8101058:	687b      	ldr	r3, [r7, #4]
 810105a:	60da      	str	r2, [r3, #12]
}
 810105c:	687b      	ldr	r3, [r7, #4]
 810105e:	4618      	mov	r0, r3
 8101060:	3708      	adds	r7, #8
 8101062:	46bd      	mov	sp, r7
 8101064:	bd80      	pop	{r7, pc}
 8101066:	bf00      	nop
 8101068:	100001b8 	.word	0x100001b8

0810106c <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_>:

void EthernetConnectionManagerTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender, [[maybe_unused]] EEventClient eventReceiver)
{
 810106c:	b082      	sub	sp, #8
 810106e:	b580      	push	{r7, lr}
 8101070:	b084      	sub	sp, #16
 8101072:	af00      	add	r7, sp, #0
 8101074:	6078      	str	r0, [r7, #4]
 8101076:	f107 0018 	add.w	r0, r7, #24
 810107a:	e880 000c 	stmia.w	r0, {r2, r3}
 810107e:	460b      	mov	r3, r1
 8101080:	807b      	strh	r3, [r7, #2]
	switch(event)
 8101082:	887b      	ldrh	r3, [r7, #2]
 8101084:	f240 1203 	movw	r2, #259	@ 0x103
 8101088:	4293      	cmp	r3, r2
 810108a:	d00a      	beq.n	81010a2 <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x36>
 810108c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8101090:	da18      	bge.n	81010c4 <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x58>
 8101092:	f240 1201 	movw	r2, #257	@ 0x101
 8101096:	4293      	cmp	r3, r2
 8101098:	d016      	beq.n	81010c8 <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x5c>
 810109a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 810109e:	d015      	beq.n	81010cc <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x60>
	    case EVENT_DATA_UNSUBSCRIBE:
        {
            break;
        }
		default:
			break;
 81010a0:	e010      	b.n	81010c4 <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x58>
            EConnectionEvent connEvent = msg.ethernet_plugged ? EVENT_ETHERNET_CONNECTED : EVENT_ETHERNET_DISCONNECTED;
 81010a2:	7e3b      	ldrb	r3, [r7, #24]
 81010a4:	2b00      	cmp	r3, #0
 81010a6:	d001      	beq.n	81010ac <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x40>
 81010a8:	2300      	movs	r3, #0
 81010aa:	e000      	b.n	81010ae <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x42>
 81010ac:	2301      	movs	r3, #1
 81010ae:	73fb      	strb	r3, [r7, #15]
            xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(10000));
 81010b0:	687b      	ldr	r3, [r7, #4]
 81010b2:	68d8      	ldr	r0, [r3, #12]
 81010b4:	f107 010f 	add.w	r1, r7, #15
 81010b8:	2300      	movs	r3, #0
 81010ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 81010be:	f00d ff01 	bl	810eec4 <xQueueGenericSend>
            break;
 81010c2:	e004      	b.n	81010ce <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x62>
			break;
 81010c4:	bf00      	nop
 81010c6:	e002      	b.n	81010ce <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x62>
            break;
 81010c8:	bf00      	nop
 81010ca:	e000      	b.n	81010ce <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x62>
            break;
 81010cc:	bf00      	nop
	}
}
 81010ce:	bf00      	nop
 81010d0:	3710      	adds	r7, #16
 81010d2:	46bd      	mov	sp, r7
 81010d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 81010d8:	b002      	add	sp, #8
 81010da:	4770      	bx	lr

081010dc <_ZN29EthernetConnectionManagerTask17processConnectionEv>:

void EthernetConnectionManagerTask::processConnection()
{
 81010dc:	b580      	push	{r7, lr}
 81010de:	b082      	sub	sp, #8
 81010e0:	af00      	add	r7, sp, #0
 81010e2:	6078      	str	r0, [r7, #4]
    switch(current_connection_state)
 81010e4:	687b      	ldr	r3, [r7, #4]
 81010e6:	7c1b      	ldrb	r3, [r3, #16]
 81010e8:	2b04      	cmp	r3, #4
 81010ea:	d81a      	bhi.n	8101122 <_ZN29EthernetConnectionManagerTask17processConnectionEv+0x46>
 81010ec:	a201      	add	r2, pc, #4	@ (adr r2, 81010f4 <_ZN29EthernetConnectionManagerTask17processConnectionEv+0x18>)
 81010ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81010f2:	bf00      	nop
 81010f4:	08101121 	.word	0x08101121
 81010f8:	08101109 	.word	0x08101109
 81010fc:	08101121 	.word	0x08101121
 8101100:	08101111 	.word	0x08101111
 8101104:	08101119 	.word	0x08101119
            //wait for connection event, do nothing until that happens
            break;
        }
        case STATE_SERVICE_DISCOVERY:
        {
            processStateDiscovery();
 8101108:	6878      	ldr	r0, [r7, #4]
 810110a:	f000 f88d 	bl	8101228 <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv>
            break;
 810110e:	e008      	b.n	8101122 <_ZN29EthernetConnectionManagerTask17processConnectionEv+0x46>
            // do not do anything, wait for events and info if connection is successfull (it is handled in transition code)
            break;
        }
        case STATE_CONNECTED_ECU_DEFAULT:
        {
            processStateConnectedECUDefault();
 8101110:	6878      	ldr	r0, [r7, #4]
 8101112:	f000 f8cf 	bl	81012b4 <_ZN29EthernetConnectionManagerTask31processStateConnectedECUDefaultEv>
            break;
 8101116:	e004      	b.n	8101122 <_ZN29EthernetConnectionManagerTask17processConnectionEv+0x46>
        }
        case STATE_CONNECTED_ECU_MOTOR:
        {
            processStateConnectedECUMotor();
 8101118:	6878      	ldr	r0, [r7, #4]
 810111a:	f000 f8d5 	bl	81012c8 <_ZN29EthernetConnectionManagerTask29processStateConnectedECUMotorEv>
            break;
 810111e:	e000      	b.n	8101122 <_ZN29EthernetConnectionManagerTask17processConnectionEv+0x46>
            break;
 8101120:	bf00      	nop
        }
    }
}
 8101122:	bf00      	nop
 8101124:	3708      	adds	r7, #8
 8101126:	46bd      	mov	sp, r7
 8101128:	bd80      	pop	{r7, pc}
 810112a:	bf00      	nop

0810112c <_ZZN29EthernetConnectionManagerTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>:

void EthernetConnectionManagerTask::process()
{
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver){this->OnEvent(event, msg, eventSender, eventReceiver);});
 810112c:	b082      	sub	sp, #8
 810112e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8101130:	b089      	sub	sp, #36	@ 0x24
 8101132:	af06      	add	r7, sp, #24
 8101134:	6078      	str	r0, [r7, #4]
 8101136:	f107 0020 	add.w	r0, r7, #32
 810113a:	e880 000c 	stmia.w	r0, {r2, r3}
 810113e:	460b      	mov	r3, r1
 8101140:	807b      	strh	r3, [r7, #2]
 8101142:	687b      	ldr	r3, [r7, #4]
 8101144:	681d      	ldr	r5, [r3, #0]
 8101146:	887e      	ldrh	r6, [r7, #2]
 8101148:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 810114c:	9304      	str	r3, [sp, #16]
 810114e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8101152:	9303      	str	r3, [sp, #12]
 8101154:	466c      	mov	r4, sp
 8101156:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810115a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810115e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8101162:	f107 0320 	add.w	r3, r7, #32
 8101166:	cb0c      	ldmia	r3, {r2, r3}
 8101168:	4631      	mov	r1, r6
 810116a:	4628      	mov	r0, r5
 810116c:	f7ff ff7e 	bl	810106c <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
 8101170:	bf00      	nop
 8101172:	370c      	adds	r7, #12
 8101174:	46bd      	mov	sp, r7
 8101176:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 810117a:	b002      	add	sp, #8
 810117c:	4770      	bx	lr

0810117e <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 810117e:	b580      	push	{r7, lr}
 8101180:	b082      	sub	sp, #8
 8101182:	af00      	add	r7, sp, #0
 8101184:	6078      	str	r0, [r7, #4]
 8101186:	687b      	ldr	r3, [r7, #4]
 8101188:	4618      	mov	r0, r3
 810118a:	f7ff fea9 	bl	8100ee0 <_ZNSt14_Function_baseD1Ev>
 810118e:	687b      	ldr	r3, [r7, #4]
 8101190:	4618      	mov	r0, r3
 8101192:	3708      	adds	r7, #8
 8101194:	46bd      	mov	sp, r7
 8101196:	bd80      	pop	{r7, pc}

08101198 <_ZN29EthernetConnectionManagerTask7processEv>:
{
 8101198:	b590      	push	{r4, r7, lr}
 810119a:	b08b      	sub	sp, #44	@ 0x2c
 810119c:	af00      	add	r7, sp, #0
 810119e:	6078      	str	r0, [r7, #4]
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver){this->OnEvent(event, msg, eventSender, eventReceiver);});
 81011a0:	687c      	ldr	r4, [r7, #4]
 81011a2:	687b      	ldr	r3, [r7, #4]
 81011a4:	61fb      	str	r3, [r7, #28]
 81011a6:	f107 021c 	add.w	r2, r7, #28
 81011aa:	f107 030c 	add.w	r3, r7, #12
 81011ae:	4611      	mov	r1, r2
 81011b0:	4618      	mov	r0, r3
 81011b2:	f000 fe43 	bl	8101e3c <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>
 81011b6:	f107 030c 	add.w	r3, r7, #12
 81011ba:	4619      	mov	r1, r3
 81011bc:	4620      	mov	r0, r4
 81011be:	f001 f8aa 	bl	8102316 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>
 81011c2:	f107 030c 	add.w	r3, r7, #12
 81011c6:	4618      	mov	r0, r3
 81011c8:	f7ff ffd9 	bl	810117e <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>
    processConnection();
 81011cc:	6878      	ldr	r0, [r7, #4]
 81011ce:	f7ff ff85 	bl	81010dc <_ZN29EthernetConnectionManagerTask17processConnectionEv>
    
    EConnectionState newState;
    EConnectionEvent connEvent;
    BaseType_t received = pdTRUE;
 81011d2:	2301      	movs	r3, #1
 81011d4:	627b      	str	r3, [r7, #36]	@ 0x24

	do
	{
		received = xQueueReceive(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(0));
 81011d6:	687b      	ldr	r3, [r7, #4]
 81011d8:	68db      	ldr	r3, [r3, #12]
 81011da:	f107 010b 	add.w	r1, r7, #11
 81011de:	2200      	movs	r2, #0
 81011e0:	4618      	mov	r0, r3
 81011e2:	f00e f89f 	bl	810f324 <xQueueReceive>
 81011e6:	6278      	str	r0, [r7, #36]	@ 0x24
		if(received == pdTRUE)
 81011e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81011ea:	2b01      	cmp	r3, #1
 81011ec:	d114      	bne.n	8101218 <_ZN29EthernetConnectionManagerTask7processEv+0x80>
		{
			newState = onConnectionEvent(connEvent);
 81011ee:	7afb      	ldrb	r3, [r7, #11]
 81011f0:	4619      	mov	r1, r3
 81011f2:	6878      	ldr	r0, [r7, #4]
 81011f4:	f000 f872 	bl	81012dc <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE>
 81011f8:	4603      	mov	r3, r0
 81011fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            if(newState != current_connection_state)
 81011fe:	687b      	ldr	r3, [r7, #4]
 8101200:	7c1b      	ldrb	r3, [r3, #16]
 8101202:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8101206:	429a      	cmp	r2, r3
 8101208:	d006      	beq.n	8101218 <_ZN29EthernetConnectionManagerTask7processEv+0x80>
            {
                // transtition happened
                current_connection_state = newState;
 810120a:	687b      	ldr	r3, [r7, #4]
 810120c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8101210:	741a      	strb	r2, [r3, #16]
                // Process again so that after every transition the processing state code is called at least once.
                // The chance of this happening is minimal, but not zero. 
                processConnection();
 8101212:	6878      	ldr	r0, [r7, #4]
 8101214:	f7ff ff62 	bl	81010dc <_ZN29EthernetConnectionManagerTask17processConnectionEv>
            }
		}
	} while(received == pdTRUE);
 8101218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810121a:	2b01      	cmp	r3, #1
 810121c:	d0db      	beq.n	81011d6 <_ZN29EthernetConnectionManagerTask7processEv+0x3e>
}
 810121e:	bf00      	nop
 8101220:	bf00      	nop
 8101222:	372c      	adds	r7, #44	@ 0x2c
 8101224:	46bd      	mov	sp, r7
 8101226:	bd90      	pop	{r4, r7, pc}

08101228 <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv>:

void EthernetConnectionManagerTask::processStateDiscovery()
{
 8101228:	b580      	push	{r7, lr}
 810122a:	b084      	sub	sp, #16
 810122c:	af00      	add	r7, sp, #0
 810122e:	6078      	str	r0, [r7, #4]
    bool ret = false;
 8101230:	2300      	movs	r3, #0
 8101232:	73bb      	strb	r3, [r7, #14]

    uint8_t tryCnt = 0;
 8101234:	2300      	movs	r3, #0
 8101236:	73fb      	strb	r3, [r7, #15]
    do
    {
        ret = sendSSDP();
 8101238:	6878      	ldr	r0, [r7, #4]
 810123a:	f000 f91b 	bl	8101474 <_ZN29EthernetConnectionManagerTask8sendSSDPEv>
 810123e:	4603      	mov	r3, r0
 8101240:	73bb      	strb	r3, [r7, #14]
        tryCnt++;
 8101242:	7bfb      	ldrb	r3, [r7, #15]
 8101244:	3301      	adds	r3, #1
 8101246:	73fb      	strb	r3, [r7, #15]
        osDelay(10);
 8101248:	200a      	movs	r0, #10
 810124a:	f00c fb2a 	bl	810d8a2 <osDelay>
    } while (ret == false && tryCnt < 4); // try 3 times
 810124e:	7bbb      	ldrb	r3, [r7, #14]
 8101250:	2b00      	cmp	r3, #0
 8101252:	d102      	bne.n	810125a <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv+0x32>
 8101254:	7bfb      	ldrb	r3, [r7, #15]
 8101256:	2b03      	cmp	r3, #3
 8101258:	d9ee      	bls.n	8101238 <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv+0x10>

    tryCnt = 0;
 810125a:	2300      	movs	r3, #0
 810125c:	73fb      	strb	r3, [r7, #15]
    do
    {
        ret = sendSLP();
 810125e:	6878      	ldr	r0, [r7, #4]
 8101260:	f000 f95c 	bl	810151c <_ZN29EthernetConnectionManagerTask7sendSLPEv>
 8101264:	4603      	mov	r3, r0
 8101266:	73bb      	strb	r3, [r7, #14]
        tryCnt++;
 8101268:	7bfb      	ldrb	r3, [r7, #15]
 810126a:	3301      	adds	r3, #1
 810126c:	73fb      	strb	r3, [r7, #15]
        osDelay(10);
 810126e:	200a      	movs	r0, #10
 8101270:	f00c fb17 	bl	810d8a2 <osDelay>
    } while (ret == false && tryCnt < 4); // try 3 times
 8101274:	7bbb      	ldrb	r3, [r7, #14]
 8101276:	2b00      	cmp	r3, #0
 8101278:	d102      	bne.n	8101280 <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv+0x58>
 810127a:	7bfb      	ldrb	r3, [r7, #15]
 810127c:	2b03      	cmp	r3, #3
 810127e:	d9ee      	bls.n	810125e <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv+0x36>

    tryCnt = 0;
 8101280:	2300      	movs	r3, #0
 8101282:	73fb      	strb	r3, [r7, #15]
    do
    {
        ret = sendDoIPInit();
 8101284:	6878      	ldr	r0, [r7, #4]
 8101286:	f000 f9b7 	bl	81015f8 <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv>
 810128a:	4603      	mov	r3, r0
 810128c:	73bb      	strb	r3, [r7, #14]
        tryCnt++;
 810128e:	7bfb      	ldrb	r3, [r7, #15]
 8101290:	3301      	adds	r3, #1
 8101292:	73fb      	strb	r3, [r7, #15]
        osDelay(10);
 8101294:	200a      	movs	r0, #10
 8101296:	f00c fb04 	bl	810d8a2 <osDelay>
    } while (ret == false && tryCnt < 4); // try 3 times
 810129a:	7bbb      	ldrb	r3, [r7, #14]
 810129c:	2b00      	cmp	r3, #0
 810129e:	d102      	bne.n	81012a6 <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv+0x7e>
 81012a0:	7bfb      	ldrb	r3, [r7, #15]
 81012a2:	2b03      	cmp	r3, #3
 81012a4:	d9ee      	bls.n	8101284 <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv+0x5c>
    osDelay(100);
 81012a6:	2064      	movs	r0, #100	@ 0x64
 81012a8:	f00c fafb 	bl	810d8a2 <osDelay>

}
 81012ac:	bf00      	nop
 81012ae:	3710      	adds	r7, #16
 81012b0:	46bd      	mov	sp, r7
 81012b2:	bd80      	pop	{r7, pc}

081012b4 <_ZN29EthernetConnectionManagerTask31processStateConnectedECUDefaultEv>:

void EthernetConnectionManagerTask::processStateConnectedECUDefault()
{
 81012b4:	b480      	push	{r7}
 81012b6:	b083      	sub	sp, #12
 81012b8:	af00      	add	r7, sp, #0
 81012ba:	6078      	str	r0, [r7, #4]
    // TODO
}
 81012bc:	bf00      	nop
 81012be:	370c      	adds	r7, #12
 81012c0:	46bd      	mov	sp, r7
 81012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012c6:	4770      	bx	lr

081012c8 <_ZN29EthernetConnectionManagerTask29processStateConnectedECUMotorEv>:

void EthernetConnectionManagerTask::processStateConnectedECUMotor()
{
 81012c8:	b480      	push	{r7}
 81012ca:	b083      	sub	sp, #12
 81012cc:	af00      	add	r7, sp, #0
 81012ce:	6078      	str	r0, [r7, #4]
    // TODO (if needed?????)
}
 81012d0:	bf00      	nop
 81012d2:	370c      	adds	r7, #12
 81012d4:	46bd      	mov	sp, r7
 81012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012da:	4770      	bx	lr

081012dc <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE>:

EthernetConnectionManagerTask::EConnectionState EthernetConnectionManagerTask::onConnectionEvent(EConnectionEvent event)
{
 81012dc:	b580      	push	{r7, lr}
 81012de:	b082      	sub	sp, #8
 81012e0:	af00      	add	r7, sp, #0
 81012e2:	6078      	str	r0, [r7, #4]
 81012e4:	460b      	mov	r3, r1
 81012e6:	70fb      	strb	r3, [r7, #3]
    switch(current_connection_state)
 81012e8:	687b      	ldr	r3, [r7, #4]
 81012ea:	7c1b      	ldrb	r3, [r3, #16]
 81012ec:	2b04      	cmp	r3, #4
 81012ee:	d830      	bhi.n	8101352 <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE+0x76>
 81012f0:	a201      	add	r2, pc, #4	@ (adr r2, 81012f8 <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE+0x1c>)
 81012f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81012f6:	bf00      	nop
 81012f8:	0810130d 	.word	0x0810130d
 81012fc:	0810131b 	.word	0x0810131b
 8101300:	08101329 	.word	0x08101329
 8101304:	08101337 	.word	0x08101337
 8101308:	08101345 	.word	0x08101345
    {
        case STATE_ETHERNET_DISCONNECTED:
        {
            return transitionEthDisconnected(event);
 810130c:	78fb      	ldrb	r3, [r7, #3]
 810130e:	4619      	mov	r1, r3
 8101310:	6878      	ldr	r0, [r7, #4]
 8101312:	f000 f823 	bl	810135c <_ZN29EthernetConnectionManagerTask25transitionEthDisconnectedENS_16EConnectionEventE>
 8101316:	4603      	mov	r3, r0
 8101318:	e01c      	b.n	8101354 <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE+0x78>
            break;
        }
        case STATE_SERVICE_DISCOVERY:
        {
            return transitionDiscovery(event);
 810131a:	78fb      	ldrb	r3, [r7, #3]
 810131c:	4619      	mov	r1, r3
 810131e:	6878      	ldr	r0, [r7, #4]
 8101320:	f000 f830 	bl	8101384 <_ZN29EthernetConnectionManagerTask19transitionDiscoveryENS_16EConnectionEventE>
 8101324:	4603      	mov	r3, r0
 8101326:	e015      	b.n	8101354 <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE+0x78>
            break;
        }
        case STATE_CONNECTING_TCP:
        {
            return transitionConnectingTCP(event);
 8101328:	78fb      	ldrb	r3, [r7, #3]
 810132a:	4619      	mov	r1, r3
 810132c:	6878      	ldr	r0, [r7, #4]
 810132e:	f000 f850 	bl	81013d2 <_ZN29EthernetConnectionManagerTask23transitionConnectingTCPENS_16EConnectionEventE>
 8101332:	4603      	mov	r3, r0
 8101334:	e00e      	b.n	8101354 <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE+0x78>
            break;
        }
        case STATE_CONNECTED_ECU_DEFAULT:
        {
            return transitionConnectedECUDefault(event);
 8101336:	78fb      	ldrb	r3, [r7, #3]
 8101338:	4619      	mov	r1, r3
 810133a:	6878      	ldr	r0, [r7, #4]
 810133c:	f000 f873 	bl	8101426 <_ZN29EthernetConnectionManagerTask29transitionConnectedECUDefaultENS_16EConnectionEventE>
 8101340:	4603      	mov	r3, r0
 8101342:	e007      	b.n	8101354 <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE+0x78>
            break;
        }
        case STATE_CONNECTED_ECU_MOTOR:
        {
            return transitionConnectedECUMotor(event);
 8101344:	78fb      	ldrb	r3, [r7, #3]
 8101346:	4619      	mov	r1, r3
 8101348:	6878      	ldr	r0, [r7, #4]
 810134a:	f000 f87f 	bl	810144c <_ZN29EthernetConnectionManagerTask27transitionConnectedECUMotorENS_16EConnectionEventE>
 810134e:	4603      	mov	r3, r0
 8101350:	e000      	b.n	8101354 <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE+0x78>
            break;
        }
        default:
            return STATE_ETHERNET_DISCONNECTED;
 8101352:	2300      	movs	r3, #0
    }
}
 8101354:	4618      	mov	r0, r3
 8101356:	3708      	adds	r7, #8
 8101358:	46bd      	mov	sp, r7
 810135a:	bd80      	pop	{r7, pc}

0810135c <_ZN29EthernetConnectionManagerTask25transitionEthDisconnectedENS_16EConnectionEventE>:

EthernetConnectionManagerTask::EConnectionState EthernetConnectionManagerTask::transitionEthDisconnected(EConnectionEvent event)
{
 810135c:	b580      	push	{r7, lr}
 810135e:	b082      	sub	sp, #8
 8101360:	af00      	add	r7, sp, #0
 8101362:	6078      	str	r0, [r7, #4]
 8101364:	460b      	mov	r3, r1
 8101366:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8101368:	78fb      	ldrb	r3, [r7, #3]
 810136a:	2b00      	cmp	r3, #0
 810136c:	d104      	bne.n	8101378 <_ZN29EthernetConnectionManagerTask25transitionEthDisconnectedENS_16EConnectionEventE+0x1c>
    {
        case EVENT_ETHERNET_CONNECTED:
        {
            udpConnect();
 810136e:	6878      	ldr	r0, [r7, #4]
 8101370:	f000 fb78 	bl	8101a64 <_ZN29EthernetConnectionManagerTask10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 8101374:	2301      	movs	r3, #1
 8101376:	e001      	b.n	810137c <_ZN29EthernetConnectionManagerTask25transitionEthDisconnectedENS_16EConnectionEventE+0x20>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8101378:	687b      	ldr	r3, [r7, #4]
 810137a:	7c1b      	ldrb	r3, [r3, #16]
            break;
        }
    }
}
 810137c:	4618      	mov	r0, r3
 810137e:	3708      	adds	r7, #8
 8101380:	46bd      	mov	sp, r7
 8101382:	bd80      	pop	{r7, pc}

08101384 <_ZN29EthernetConnectionManagerTask19transitionDiscoveryENS_16EConnectionEventE>:

EthernetConnectionManagerTask::EConnectionState EthernetConnectionManagerTask::transitionDiscovery(EConnectionEvent event)
{
 8101384:	b580      	push	{r7, lr}
 8101386:	b082      	sub	sp, #8
 8101388:	af00      	add	r7, sp, #0
 810138a:	6078      	str	r0, [r7, #4]
 810138c:	460b      	mov	r3, r1
 810138e:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8101390:	78fb      	ldrb	r3, [r7, #3]
 8101392:	2b01      	cmp	r3, #1
 8101394:	d002      	beq.n	810139c <_ZN29EthernetConnectionManagerTask19transitionDiscoveryENS_16EConnectionEventE+0x18>
 8101396:	2b02      	cmp	r3, #2
 8101398:	d005      	beq.n	81013a6 <_ZN29EthernetConnectionManagerTask19transitionDiscoveryENS_16EConnectionEventE+0x22>
 810139a:	e014      	b.n	81013c6 <_ZN29EthernetConnectionManagerTask19transitionDiscoveryENS_16EConnectionEventE+0x42>
    {
        case EVENT_ETHERNET_DISCONNECTED:
        {
            udpDisconnect();
 810139c:	6878      	ldr	r0, [r7, #4]
 810139e:	f000 fb8f 	bl	8101ac0 <_ZN29EthernetConnectionManagerTask13udpDisconnectEv>
            return STATE_ETHERNET_DISCONNECTED;
 81013a2:	2300      	movs	r3, #0
 81013a4:	e011      	b.n	81013ca <_ZN29EthernetConnectionManagerTask19transitionDiscoveryENS_16EConnectionEventE+0x46>
        }
        case EVENT_DISCOVERY_COMPLETED:
        {
            udpDisconnect();
 81013a6:	6878      	ldr	r0, [r7, #4]
 81013a8:	f000 fb8a 	bl	8101ac0 <_ZN29EthernetConnectionManagerTask13udpDisconnectEv>

            if(!tcpConnect())
 81013ac:	6878      	ldr	r0, [r7, #4]
 81013ae:	f000 fbb5 	bl	8101b1c <_ZN29EthernetConnectionManagerTask10tcpConnectEv>
 81013b2:	4603      	mov	r3, r0
 81013b4:	f083 0301 	eor.w	r3, r3, #1
 81013b8:	b2db      	uxtb	r3, r3
 81013ba:	2b00      	cmp	r3, #0
 81013bc:	d001      	beq.n	81013c2 <_ZN29EthernetConnectionManagerTask19transitionDiscoveryENS_16EConnectionEventE+0x3e>
            {
                // if connection not successfull, go back to discovery
                return STATE_SERVICE_DISCOVERY;
 81013be:	2301      	movs	r3, #1
 81013c0:	e003      	b.n	81013ca <_ZN29EthernetConnectionManagerTask19transitionDiscoveryENS_16EConnectionEventE+0x46>
            }

            return STATE_CONNECTING_TCP;
 81013c2:	2302      	movs	r3, #2
 81013c4:	e001      	b.n	81013ca <_ZN29EthernetConnectionManagerTask19transitionDiscoveryENS_16EConnectionEventE+0x46>
        }
        default:
        {
            //no transition
            return current_connection_state;
 81013c6:	687b      	ldr	r3, [r7, #4]
 81013c8:	7c1b      	ldrb	r3, [r3, #16]
            break;
        }
    }
}
 81013ca:	4618      	mov	r0, r3
 81013cc:	3708      	adds	r7, #8
 81013ce:	46bd      	mov	sp, r7
 81013d0:	bd80      	pop	{r7, pc}

081013d2 <_ZN29EthernetConnectionManagerTask23transitionConnectingTCPENS_16EConnectionEventE>:

EthernetConnectionManagerTask::EConnectionState EthernetConnectionManagerTask::transitionConnectingTCP(EConnectionEvent event)
{
 81013d2:	b580      	push	{r7, lr}
 81013d4:	b082      	sub	sp, #8
 81013d6:	af00      	add	r7, sp, #0
 81013d8:	6078      	str	r0, [r7, #4]
 81013da:	460b      	mov	r3, r1
 81013dc:	70fb      	strb	r3, [r7, #3]
    switch(event)
 81013de:	78fb      	ldrb	r3, [r7, #3]
 81013e0:	2b04      	cmp	r3, #4
 81013e2:	d00b      	beq.n	81013fc <_ZN29EthernetConnectionManagerTask23transitionConnectingTCPENS_16EConnectionEventE+0x2a>
 81013e4:	2b04      	cmp	r3, #4
 81013e6:	dc18      	bgt.n	810141a <_ZN29EthernetConnectionManagerTask23transitionConnectingTCPENS_16EConnectionEventE+0x48>
 81013e8:	2b01      	cmp	r3, #1
 81013ea:	d002      	beq.n	81013f2 <_ZN29EthernetConnectionManagerTask23transitionConnectingTCPENS_16EConnectionEventE+0x20>
 81013ec:	2b03      	cmp	r3, #3
 81013ee:	d012      	beq.n	8101416 <_ZN29EthernetConnectionManagerTask23transitionConnectingTCPENS_16EConnectionEventE+0x44>
 81013f0:	e013      	b.n	810141a <_ZN29EthernetConnectionManagerTask23transitionConnectingTCPENS_16EConnectionEventE+0x48>
    {
        case EVENT_ETHERNET_DISCONNECTED:
        {
            tcpDisconnect();
 81013f2:	6878      	ldr	r0, [r7, #4]
 81013f4:	f000 fbfe 	bl	8101bf4 <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv>
            return STATE_ETHERNET_DISCONNECTED;
 81013f8:	2300      	movs	r3, #0
 81013fa:	e010      	b.n	810141e <_ZN29EthernetConnectionManagerTask23transitionConnectingTCPENS_16EConnectionEventE+0x4c>
        }
        case EVENT_TCP_CONNECTION_FAILED:
        {
            if(!tcpConnect())
 81013fc:	6878      	ldr	r0, [r7, #4]
 81013fe:	f000 fb8d 	bl	8101b1c <_ZN29EthernetConnectionManagerTask10tcpConnectEv>
 8101402:	4603      	mov	r3, r0
 8101404:	f083 0301 	eor.w	r3, r3, #1
 8101408:	b2db      	uxtb	r3, r3
 810140a:	2b00      	cmp	r3, #0
 810140c:	d001      	beq.n	8101412 <_ZN29EthernetConnectionManagerTask23transitionConnectingTCPENS_16EConnectionEventE+0x40>
            {
                // if connection not successfull, go back to discovery
                return STATE_SERVICE_DISCOVERY;
 810140e:	2301      	movs	r3, #1
 8101410:	e005      	b.n	810141e <_ZN29EthernetConnectionManagerTask23transitionConnectingTCPENS_16EConnectionEventE+0x4c>
            }
            return STATE_CONNECTING_TCP;
 8101412:	2302      	movs	r3, #2
 8101414:	e003      	b.n	810141e <_ZN29EthernetConnectionManagerTask23transitionConnectingTCPENS_16EConnectionEventE+0x4c>
        }
        case EVENT_TCP_CONNECTED:
        {
            return STATE_CONNECTED_ECU_DEFAULT;
 8101416:	2303      	movs	r3, #3
 8101418:	e001      	b.n	810141e <_ZN29EthernetConnectionManagerTask23transitionConnectingTCPENS_16EConnectionEventE+0x4c>
        }
        default:
        {
            //no transition
            return current_connection_state;
 810141a:	687b      	ldr	r3, [r7, #4]
 810141c:	7c1b      	ldrb	r3, [r3, #16]
            break;
        }
    }
}
 810141e:	4618      	mov	r0, r3
 8101420:	3708      	adds	r7, #8
 8101422:	46bd      	mov	sp, r7
 8101424:	bd80      	pop	{r7, pc}

08101426 <_ZN29EthernetConnectionManagerTask29transitionConnectedECUDefaultENS_16EConnectionEventE>:

EthernetConnectionManagerTask::EConnectionState EthernetConnectionManagerTask::transitionConnectedECUDefault(EConnectionEvent event)
{
 8101426:	b480      	push	{r7}
 8101428:	b083      	sub	sp, #12
 810142a:	af00      	add	r7, sp, #0
 810142c:	6078      	str	r0, [r7, #4]
 810142e:	460b      	mov	r3, r1
 8101430:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8101432:	78fb      	ldrb	r3, [r7, #3]
 8101434:	2b01      	cmp	r3, #1
 8101436:	d101      	bne.n	810143c <_ZN29EthernetConnectionManagerTask29transitionConnectedECUDefaultENS_16EConnectionEventE+0x16>
    {
        case EVENT_ETHERNET_DISCONNECTED:
        {
            return STATE_ETHERNET_DISCONNECTED;
 8101438:	2300      	movs	r3, #0
 810143a:	e001      	b.n	8101440 <_ZN29EthernetConnectionManagerTask29transitionConnectedECUDefaultENS_16EConnectionEventE+0x1a>
        }
        default:
        {
            //no transition
            return current_connection_state;
 810143c:	687b      	ldr	r3, [r7, #4]
 810143e:	7c1b      	ldrb	r3, [r3, #16]
            break;
        }
    }
}
 8101440:	4618      	mov	r0, r3
 8101442:	370c      	adds	r7, #12
 8101444:	46bd      	mov	sp, r7
 8101446:	f85d 7b04 	ldr.w	r7, [sp], #4
 810144a:	4770      	bx	lr

0810144c <_ZN29EthernetConnectionManagerTask27transitionConnectedECUMotorENS_16EConnectionEventE>:

EthernetConnectionManagerTask::EConnectionState EthernetConnectionManagerTask::transitionConnectedECUMotor(EConnectionEvent event)
{
 810144c:	b480      	push	{r7}
 810144e:	b083      	sub	sp, #12
 8101450:	af00      	add	r7, sp, #0
 8101452:	6078      	str	r0, [r7, #4]
 8101454:	460b      	mov	r3, r1
 8101456:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8101458:	78fb      	ldrb	r3, [r7, #3]
 810145a:	2b01      	cmp	r3, #1
 810145c:	d101      	bne.n	8101462 <_ZN29EthernetConnectionManagerTask27transitionConnectedECUMotorENS_16EConnectionEventE+0x16>
    {
        case EVENT_ETHERNET_DISCONNECTED:
        {
            return STATE_ETHERNET_DISCONNECTED;
 810145e:	2300      	movs	r3, #0
 8101460:	e001      	b.n	8101466 <_ZN29EthernetConnectionManagerTask27transitionConnectedECUMotorENS_16EConnectionEventE+0x1a>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8101462:	687b      	ldr	r3, [r7, #4]
 8101464:	7c1b      	ldrb	r3, [r3, #16]
            break;
        }
    }
    
}
 8101466:	4618      	mov	r0, r3
 8101468:	370c      	adds	r7, #12
 810146a:	46bd      	mov	sp, r7
 810146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101470:	4770      	bx	lr
	...

08101474 <_ZN29EthernetConnectionManagerTask8sendSSDPEv>:

bool EthernetConnectionManagerTask::sendSSDP()
{
 8101474:	b580      	push	{r7, lr}
 8101476:	b086      	sub	sp, #24
 8101478:	af00      	add	r7, sp, #0
 810147a:	6078      	str	r0, [r7, #4]
    constexpr const char *ssdp_request =
 810147c:	4b23      	ldr	r3, [pc, #140]	@ (810150c <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0x98>)
 810147e:	617b      	str	r3, [r7, #20]

    ip_addr_t multicast_ip;
    struct pbuf *p;
    
    // Set the multicast address for SSDP
    ipaddr_aton(SSDP_MULTICAST_IP, &multicast_ip);
 8101480:	f107 030c 	add.w	r3, r7, #12
 8101484:	4619      	mov	r1, r3
 8101486:	4822      	ldr	r0, [pc, #136]	@ (8101510 <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0x9c>)
 8101488:	f012 fb82 	bl	8113b90 <ip4addr_aton>

    // Allocate buffer for SSDP data
    p = pbuf_alloc(PBUF_TRANSPORT, strlen(ssdp_request), PBUF_RAM);
 810148c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8101490:	215e      	movs	r1, #94	@ 0x5e
 8101492:	2036      	movs	r0, #54	@ 0x36
 8101494:	f014 fc28 	bl	8115ce8 <pbuf_alloc>
 8101498:	6138      	str	r0, [r7, #16]
    if (!p)
 810149a:	693b      	ldr	r3, [r7, #16]
 810149c:	2b00      	cmp	r3, #0
 810149e:	d108      	bne.n	81014b2 <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0x3e>
    {
        LOG_DEBUG("Failed to allocate pbuf for SSDP.");
 81014a0:	f7fe ff88 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 81014a4:	4603      	mov	r3, r0
 81014a6:	491b      	ldr	r1, [pc, #108]	@ (8101514 <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0xa0>)
 81014a8:	4618      	mov	r0, r3
 81014aa:	f7fe ffab 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        return false;
 81014ae:	2300      	movs	r3, #0
 81014b0:	e027      	b.n	8101502 <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0x8e>
    }

    // Copy data to the buffer
    memcpy(p->payload, ssdp_request, strlen(ssdp_request));
 81014b2:	693b      	ldr	r3, [r7, #16]
 81014b4:	685b      	ldr	r3, [r3, #4]
 81014b6:	225e      	movs	r2, #94	@ 0x5e
 81014b8:	4914      	ldr	r1, [pc, #80]	@ (810150c <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0x98>)
 81014ba:	4618      	mov	r0, r3
 81014bc:	f01c ff1d 	bl	811e2fa <memcpy>

    // Send SSDP
    if (udp_sendto(udp_pcb, p, &multicast_ip, 1900) != ERR_OK)
 81014c0:	687b      	ldr	r3, [r7, #4]
 81014c2:	6998      	ldr	r0, [r3, #24]
 81014c4:	f107 020c 	add.w	r2, r7, #12
 81014c8:	f240 736c 	movw	r3, #1900	@ 0x76c
 81014cc:	6939      	ldr	r1, [r7, #16]
 81014ce:	f01b fa4d 	bl	811c96c <udp_sendto>
 81014d2:	4603      	mov	r3, r0
 81014d4:	2b00      	cmp	r3, #0
 81014d6:	bf14      	ite	ne
 81014d8:	2301      	movne	r3, #1
 81014da:	2300      	moveq	r3, #0
 81014dc:	b2db      	uxtb	r3, r3
 81014de:	2b00      	cmp	r3, #0
 81014e0:	d00b      	beq.n	81014fa <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0x86>
    {
        LOG_DEBUG("Failed to send SSDP request.");
 81014e2:	f7fe ff67 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 81014e6:	4603      	mov	r3, r0
 81014e8:	490b      	ldr	r1, [pc, #44]	@ (8101518 <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0xa4>)
 81014ea:	4618      	mov	r0, r3
 81014ec:	f7fe ff8a 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 81014f0:	6938      	ldr	r0, [r7, #16]
 81014f2:	f014 fedd 	bl	81162b0 <pbuf_free>
        return false;
 81014f6:	2300      	movs	r3, #0
 81014f8:	e003      	b.n	8101502 <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0x8e>
    }

    // Release the buffer
    pbuf_free(p);
 81014fa:	6938      	ldr	r0, [r7, #16]
 81014fc:	f014 fed8 	bl	81162b0 <pbuf_free>
    return true;
 8101500:	2301      	movs	r3, #1
}
 8101502:	4618      	mov	r0, r3
 8101504:	3718      	adds	r7, #24
 8101506:	46bd      	mov	sp, r7
 8101508:	bd80      	pop	{r7, pc}
 810150a:	bf00      	nop
 810150c:	0811ede0 	.word	0x0811ede0
 8101510:	0811ee40 	.word	0x0811ee40
 8101514:	0811ee50 	.word	0x0811ee50
 8101518:	0811ee74 	.word	0x0811ee74

0810151c <_ZN29EthernetConnectionManagerTask7sendSLPEv>:

bool EthernetConnectionManagerTask::sendSLP()
{
 810151c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810151e:	b08f      	sub	sp, #60	@ 0x3c
 8101520:	af00      	add	r7, sp, #0
 8101522:	6078      	str	r0, [r7, #4]
    uint8_t slp_request[36] =
 8101524:	4b30      	ldr	r3, [pc, #192]	@ (81015e8 <_ZN29EthernetConnectionManagerTask7sendSLPEv+0xcc>)
 8101526:	f107 0410 	add.w	r4, r7, #16
 810152a:	461d      	mov	r5, r3
 810152c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810152e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101534:	682b      	ldr	r3, [r5, #0]
 8101536:	8023      	strh	r3, [r4, #0]
 8101538:	2300      	movs	r3, #0
 810153a:	867b      	strh	r3, [r7, #50]	@ 0x32
    };
    ip_addr_t broadcast_ip;
    struct pbuf *p;

    // Set the broadcast address
    ipaddr_aton(BROADCAST_IP, &broadcast_ip);
 810153c:	f107 030c 	add.w	r3, r7, #12
 8101540:	4619      	mov	r1, r3
 8101542:	482a      	ldr	r0, [pc, #168]	@ (81015ec <_ZN29EthernetConnectionManagerTask7sendSLPEv+0xd0>)
 8101544:	f012 fb24 	bl	8113b90 <ip4addr_aton>

    // Allocate buffer for SLP data
    p = pbuf_alloc(PBUF_TRANSPORT, sizeof(slp_request), PBUF_RAM);
 8101548:	f44f 7220 	mov.w	r2, #640	@ 0x280
 810154c:	2124      	movs	r1, #36	@ 0x24
 810154e:	2036      	movs	r0, #54	@ 0x36
 8101550:	f014 fbca 	bl	8115ce8 <pbuf_alloc>
 8101554:	6378      	str	r0, [r7, #52]	@ 0x34
    if (!p)
 8101556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101558:	2b00      	cmp	r3, #0
 810155a:	d108      	bne.n	810156e <_ZN29EthernetConnectionManagerTask7sendSLPEv+0x52>
    {
        LOG_DEBUG("Failed to allocate pbuf for SLP.");
 810155c:	f7fe ff2a 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101560:	4603      	mov	r3, r0
 8101562:	4923      	ldr	r1, [pc, #140]	@ (81015f0 <_ZN29EthernetConnectionManagerTask7sendSLPEv+0xd4>)
 8101564:	4618      	mov	r0, r3
 8101566:	f7fe ff4d 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        return false;
 810156a:	2300      	movs	r3, #0
 810156c:	e037      	b.n	81015de <_ZN29EthernetConnectionManagerTask7sendSLPEv+0xc2>
    }

    // Copy data to the buffer
    memcpy(p->payload, slp_request, sizeof(slp_request));
 810156e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101570:	685b      	ldr	r3, [r3, #4]
 8101572:	f107 0410 	add.w	r4, r7, #16
 8101576:	469c      	mov	ip, r3
 8101578:	f104 0e20 	add.w	lr, r4, #32
 810157c:	4665      	mov	r5, ip
 810157e:	4626      	mov	r6, r4
 8101580:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8101582:	6028      	str	r0, [r5, #0]
 8101584:	6069      	str	r1, [r5, #4]
 8101586:	60aa      	str	r2, [r5, #8]
 8101588:	60eb      	str	r3, [r5, #12]
 810158a:	3410      	adds	r4, #16
 810158c:	f10c 0c10 	add.w	ip, ip, #16
 8101590:	4574      	cmp	r4, lr
 8101592:	d1f3      	bne.n	810157c <_ZN29EthernetConnectionManagerTask7sendSLPEv+0x60>
 8101594:	4663      	mov	r3, ip
 8101596:	4622      	mov	r2, r4
 8101598:	6810      	ldr	r0, [r2, #0]
 810159a:	6018      	str	r0, [r3, #0]

    // Send SLP
    if (udp_sendto(udp_pcb, p, &broadcast_ip, SLP_PORT) != ERR_OK)
 810159c:	687b      	ldr	r3, [r7, #4]
 810159e:	6998      	ldr	r0, [r3, #24]
 81015a0:	f107 020c 	add.w	r2, r7, #12
 81015a4:	f240 13ab 	movw	r3, #427	@ 0x1ab
 81015a8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 81015aa:	f01b f9df 	bl	811c96c <udp_sendto>
 81015ae:	4603      	mov	r3, r0
 81015b0:	2b00      	cmp	r3, #0
 81015b2:	bf14      	ite	ne
 81015b4:	2301      	movne	r3, #1
 81015b6:	2300      	moveq	r3, #0
 81015b8:	b2db      	uxtb	r3, r3
 81015ba:	2b00      	cmp	r3, #0
 81015bc:	d00b      	beq.n	81015d6 <_ZN29EthernetConnectionManagerTask7sendSLPEv+0xba>
    {
        LOG_DEBUG("Failed to send SLP request.");
 81015be:	f7fe fef9 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 81015c2:	4603      	mov	r3, r0
 81015c4:	490b      	ldr	r1, [pc, #44]	@ (81015f4 <_ZN29EthernetConnectionManagerTask7sendSLPEv+0xd8>)
 81015c6:	4618      	mov	r0, r3
 81015c8:	f7fe ff1c 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 81015cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 81015ce:	f014 fe6f 	bl	81162b0 <pbuf_free>
        return false;
 81015d2:	2300      	movs	r3, #0
 81015d4:	e003      	b.n	81015de <_ZN29EthernetConnectionManagerTask7sendSLPEv+0xc2>
    }

    // Release the buffer
    pbuf_free(p);
 81015d6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 81015d8:	f014 fe6a 	bl	81162b0 <pbuf_free>
    return true;
 81015dc:	2301      	movs	r3, #1
}
 81015de:	4618      	mov	r0, r3
 81015e0:	373c      	adds	r7, #60	@ 0x3c
 81015e2:	46bd      	mov	sp, r7
 81015e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81015e6:	bf00      	nop
 81015e8:	0811eee4 	.word	0x0811eee4
 81015ec:	0811ee94 	.word	0x0811ee94
 81015f0:	0811eea4 	.word	0x0811eea4
 81015f4:	0811eec8 	.word	0x0811eec8

081015f8 <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv>:


bool EthernetConnectionManagerTask::sendDoIPInit()
{
 81015f8:	b580      	push	{r7, lr}
 81015fa:	b086      	sub	sp, #24
 81015fc:	af00      	add	r7, sp, #0
 81015fe:	6078      	str	r0, [r7, #4]
const char doip_request[] = "\x00\x00\x00\x00\x00\x11";
 8101600:	4a28      	ldr	r2, [pc, #160]	@ (81016a4 <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0xac>)
 8101602:	f107 030c 	add.w	r3, r7, #12
 8101606:	e892 0003 	ldmia.w	r2, {r0, r1}
 810160a:	6018      	str	r0, [r3, #0]
 810160c:	3304      	adds	r3, #4
 810160e:	8019      	strh	r1, [r3, #0]
 8101610:	3302      	adds	r3, #2
 8101612:	0c0a      	lsrs	r2, r1, #16
 8101614:	701a      	strb	r2, [r3, #0]
    ip_addr_t broadcast_ip;
    struct pbuf *p;

    // Set the broadcast address for DoIP
    ipaddr_aton(BROADCAST_IP, &broadcast_ip);
 8101616:	f107 0308 	add.w	r3, r7, #8
 810161a:	4619      	mov	r1, r3
 810161c:	4822      	ldr	r0, [pc, #136]	@ (81016a8 <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0xb0>)
 810161e:	f012 fab7 	bl	8113b90 <ip4addr_aton>

    // Allocate buffer for DoIP data
    p = pbuf_alloc(PBUF_TRANSPORT, sizeof(doip_request) - 1, PBUF_RAM);
 8101622:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8101626:	2106      	movs	r1, #6
 8101628:	2036      	movs	r0, #54	@ 0x36
 810162a:	f014 fb5d 	bl	8115ce8 <pbuf_alloc>
 810162e:	6178      	str	r0, [r7, #20]
    if (!p)
 8101630:	697b      	ldr	r3, [r7, #20]
 8101632:	2b00      	cmp	r3, #0
 8101634:	d108      	bne.n	8101648 <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0x50>
    {
        LOG_DEBUG("Failed to allocate pbuf for DoIP init.");
 8101636:	f7fe febd 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 810163a:	4603      	mov	r3, r0
 810163c:	491b      	ldr	r1, [pc, #108]	@ (81016ac <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0xb4>)
 810163e:	4618      	mov	r0, r3
 8101640:	f7fe fee0 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        return false;
 8101644:	2300      	movs	r3, #0
 8101646:	e028      	b.n	810169a <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0xa2>
    }

    // Copy data to the buffer
    memcpy(p->payload, doip_request, sizeof(doip_request) - 1);
 8101648:	697b      	ldr	r3, [r7, #20]
 810164a:	685b      	ldr	r3, [r3, #4]
 810164c:	f107 010c 	add.w	r1, r7, #12
 8101650:	2206      	movs	r2, #6
 8101652:	4618      	mov	r0, r3
 8101654:	f01c fe51 	bl	811e2fa <memcpy>

    // Send DoIP
    if (udp_sendto(udp_pcb, p, &broadcast_ip, UDP_PORT) != ERR_OK)
 8101658:	687b      	ldr	r3, [r7, #4]
 810165a:	6998      	ldr	r0, [r3, #24]
 810165c:	f107 0208 	add.w	r2, r7, #8
 8101660:	f641 239b 	movw	r3, #6811	@ 0x1a9b
 8101664:	6979      	ldr	r1, [r7, #20]
 8101666:	f01b f981 	bl	811c96c <udp_sendto>
 810166a:	4603      	mov	r3, r0
 810166c:	2b00      	cmp	r3, #0
 810166e:	bf14      	ite	ne
 8101670:	2301      	movne	r3, #1
 8101672:	2300      	moveq	r3, #0
 8101674:	b2db      	uxtb	r3, r3
 8101676:	2b00      	cmp	r3, #0
 8101678:	d00b      	beq.n	8101692 <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0x9a>
    {
        LOG_DEBUG("Failed to send DoIP init request.");
 810167a:	f7fe fe9b 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 810167e:	4603      	mov	r3, r0
 8101680:	490b      	ldr	r1, [pc, #44]	@ (81016b0 <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0xb8>)
 8101682:	4618      	mov	r0, r3
 8101684:	f7fe febe 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8101688:	6978      	ldr	r0, [r7, #20]
 810168a:	f014 fe11 	bl	81162b0 <pbuf_free>
        return false;
 810168e:	2300      	movs	r3, #0
 8101690:	e003      	b.n	810169a <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0xa2>
    }

    // Release the buffer
    pbuf_free(p);
 8101692:	6978      	ldr	r0, [r7, #20]
 8101694:	f014 fe0c 	bl	81162b0 <pbuf_free>
    return true;
 8101698:	2301      	movs	r3, #1
}
 810169a:	4618      	mov	r0, r3
 810169c:	3718      	adds	r7, #24
 810169e:	46bd      	mov	sp, r7
 81016a0:	bd80      	pop	{r7, pc}
 81016a2:	bf00      	nop
 81016a4:	0811ef54 	.word	0x0811ef54
 81016a8:	0811ee94 	.word	0x0811ee94
 81016ac:	0811ef08 	.word	0x0811ef08
 81016b0:	0811ef30 	.word	0x0811ef30

081016b4 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt>:

void EthernetConnectionManagerTask::HandleUdpRecvCb(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 81016b4:	b5b0      	push	{r4, r5, r7, lr}
 81016b6:	b0a4      	sub	sp, #144	@ 0x90
 81016b8:	af04      	add	r7, sp, #16
 81016ba:	60f8      	str	r0, [r7, #12]
 81016bc:	60b9      	str	r1, [r7, #8]
 81016be:	607a      	str	r2, [r7, #4]
 81016c0:	603b      	str	r3, [r7, #0]
    if (!p)
 81016c2:	683b      	ldr	r3, [r7, #0]
 81016c4:	2b00      	cmp	r3, #0
 81016c6:	d107      	bne.n	81016d8 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x24>
    {
        LOG_DEBUG("No data received, connection might be closed.");
 81016c8:	f7fe fe74 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 81016cc:	4603      	mov	r3, r0
 81016ce:	4992      	ldr	r1, [pc, #584]	@ (8101918 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x264>)
 81016d0:	4618      	mov	r0, r3
 81016d2:	f7fe fe97 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        return;
 81016d6:	e1b5      	b.n	8101a44 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x390>
    }

    LOG_DEBUG("Received UDP message from %s:%d", ipaddr_ntoa(addr), port);
 81016d8:	f7fe fe6c 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 81016dc:	4604      	mov	r4, r0
 81016de:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 81016e2:	f012 fb7f 	bl	8113de4 <ip4addr_ntoa>
 81016e6:	4602      	mov	r2, r0
 81016e8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 81016ec:	498b      	ldr	r1, [pc, #556]	@ (810191c <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x268>)
 81016ee:	4620      	mov	r0, r4
 81016f0:	f7fe fe88 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>

    // Validate payload length
    if (p->len < 6)
 81016f4:	683b      	ldr	r3, [r7, #0]
 81016f6:	895b      	ldrh	r3, [r3, #10]
 81016f8:	2b05      	cmp	r3, #5
 81016fa:	d80b      	bhi.n	8101714 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x60>
    {
        LOG_DEBUG("Payload too short to process (length: %d bytes).", p->len);
 81016fc:	f7fe fe5a 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101700:	683b      	ldr	r3, [r7, #0]
 8101702:	895b      	ldrh	r3, [r3, #10]
 8101704:	461a      	mov	r2, r3
 8101706:	4986      	ldr	r1, [pc, #536]	@ (8101920 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x26c>)
 8101708:	f7fe fe7c 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 810170c:	6838      	ldr	r0, [r7, #0]
 810170e:	f014 fdcf 	bl	81162b0 <pbuf_free>
        return;
 8101712:	e197      	b.n	8101a44 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x390>
    }

    // Cast payload to a uint8_t array for easier processing
    uint8_t *payload = (uint8_t *)p->payload;
 8101714:	683b      	ldr	r3, [r7, #0]
 8101716:	685b      	ldr	r3, [r3, #4]
 8101718:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Validate frame type based on first 4 bytes (we expected a specific DoIP identification frame)
    if (!(payload[0] == 0x00 && payload[1] == 0x00 && payload[2] == 0x00 && payload[3] == 0x32))
 810171a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810171c:	781b      	ldrb	r3, [r3, #0]
 810171e:	2b00      	cmp	r3, #0
 8101720:	d10e      	bne.n	8101740 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x8c>
 8101722:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8101724:	3301      	adds	r3, #1
 8101726:	781b      	ldrb	r3, [r3, #0]
 8101728:	2b00      	cmp	r3, #0
 810172a:	d109      	bne.n	8101740 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x8c>
 810172c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810172e:	3302      	adds	r3, #2
 8101730:	781b      	ldrb	r3, [r3, #0]
 8101732:	2b00      	cmp	r3, #0
 8101734:	d104      	bne.n	8101740 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x8c>
 8101736:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8101738:	3303      	adds	r3, #3
 810173a:	781b      	ldrb	r3, [r3, #0]
 810173c:	2b32      	cmp	r3, #50	@ 0x32
 810173e:	d00a      	beq.n	8101756 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0xa2>
    {
        LOG_DEBUG("Unexpected frame type received, ignoring.");
 8101740:	f7fe fe38 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101744:	4603      	mov	r3, r0
 8101746:	4977      	ldr	r1, [pc, #476]	@ (8101924 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x270>)
 8101748:	4618      	mov	r0, r3
 810174a:	f7fe fe5b 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 810174e:	6838      	ldr	r0, [r7, #0]
 8101750:	f014 fdae 	bl	81162b0 <pbuf_free>
        return;
 8101754:	e176      	b.n	8101a44 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x390>
    }

    // Extract length (first 4 bytes) and validate against p->len
    uint32_t data_length = (payload[0] << 24) | (payload[1] << 16) | (payload[2] << 8) | payload[3];
 8101756:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8101758:	781b      	ldrb	r3, [r3, #0]
 810175a:	061a      	lsls	r2, r3, #24
 810175c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810175e:	3301      	adds	r3, #1
 8101760:	781b      	ldrb	r3, [r3, #0]
 8101762:	041b      	lsls	r3, r3, #16
 8101764:	431a      	orrs	r2, r3
 8101766:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8101768:	3302      	adds	r3, #2
 810176a:	781b      	ldrb	r3, [r3, #0]
 810176c:	021b      	lsls	r3, r3, #8
 810176e:	4313      	orrs	r3, r2
 8101770:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8101772:	3203      	adds	r2, #3
 8101774:	7812      	ldrb	r2, [r2, #0]
 8101776:	4313      	orrs	r3, r2
 8101778:	677b      	str	r3, [r7, #116]	@ 0x74
    // 6 bytes for header (length + type)
    if (data_length + 6 > p->len)
 810177a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810177c:	3306      	adds	r3, #6
 810177e:	683a      	ldr	r2, [r7, #0]
 8101780:	8952      	ldrh	r2, [r2, #10]
 8101782:	4293      	cmp	r3, r2
 8101784:	d90b      	bls.n	810179e <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0xea>
    {
        LOG_DEBUG("Data length mismatch: declared %u, received %u.", data_length, p->len);
 8101786:	f7fe fe15 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 810178a:	683b      	ldr	r3, [r7, #0]
 810178c:	895b      	ldrh	r3, [r3, #10]
 810178e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8101790:	4965      	ldr	r1, [pc, #404]	@ (8101928 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x274>)
 8101792:	f7fe fe37 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8101796:	6838      	ldr	r0, [r7, #0]
 8101798:	f014 fd8a 	bl	81162b0 <pbuf_free>
        return;
 810179c:	e152      	b.n	8101a44 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x390>
    }
    LOG_DEBUG("Data Length: %u", data_length);
 810179e:	f7fe fe09 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 81017a2:	4603      	mov	r3, r0
 81017a4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 81017a6:	4961      	ldr	r1, [pc, #388]	@ (810192c <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x278>)
 81017a8:	4618      	mov	r0, r3
 81017aa:	f7fe fe2b 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>

    // Extract message type (next 2 bytes)
    uint16_t message_type = (payload[4] << 8) | payload[5];
 81017ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 81017b0:	3304      	adds	r3, #4
 81017b2:	781b      	ldrb	r3, [r3, #0]
 81017b4:	021b      	lsls	r3, r3, #8
 81017b6:	b21a      	sxth	r2, r3
 81017b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 81017ba:	3305      	adds	r3, #5
 81017bc:	781b      	ldrb	r3, [r3, #0]
 81017be:	b21b      	sxth	r3, r3
 81017c0:	4313      	orrs	r3, r2
 81017c2:	b21b      	sxth	r3, r3
 81017c4:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    LOG_DEBUG("Message Type: 0x%04X", message_type);
 81017c8:	f7fe fdf4 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 81017cc:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 81017d0:	461a      	mov	r2, r3
 81017d2:	4957      	ldr	r1, [pc, #348]	@ (8101930 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x27c>)
 81017d4:	f7fe fe16 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>

    // Process diagnostic data if available
    if (p->len > 14)
 81017d8:	683b      	ldr	r3, [r7, #0]
 81017da:	895b      	ldrh	r3, [r3, #10]
 81017dc:	2b0e      	cmp	r3, #14
 81017de:	f240 8126 	bls.w	8101a2e <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x37a>
    {
        uint8_t *diagnostic_data = &payload[14];
 81017e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 81017e4:	330e      	adds	r3, #14
 81017e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        size_t diagnostic_data_len = p->len - 14;
 81017e8:	683b      	ldr	r3, [r7, #0]
 81017ea:	895b      	ldrh	r3, [r3, #10]
 81017ec:	3b0e      	subs	r3, #14
 81017ee:	66bb      	str	r3, [r7, #104]	@ 0x68

        // Search for MAC and VIN keywords
        char *mac_start = (char *)strstr((char *)diagnostic_data, "MAC");
 81017f0:	4950      	ldr	r1, [pc, #320]	@ (8101934 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x280>)
 81017f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 81017f4:	f01c fc4d 	bl	811e092 <strstr>
 81017f8:	6678      	str	r0, [r7, #100]	@ 0x64
        char *vin_start = (char *)strstr((char *)diagnostic_data, "VIN");
 81017fa:	494f      	ldr	r1, [pc, #316]	@ (8101938 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x284>)
 81017fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 81017fe:	f01c fc48 	bl	811e092 <strstr>
 8101802:	6638      	str	r0, [r7, #96]	@ 0x60

        if (mac_start && vin_start)
 8101804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8101806:	2b00      	cmp	r3, #0
 8101808:	f000 8109 	beq.w	8101a1e <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x36a>
 810180c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810180e:	2b00      	cmp	r3, #0
 8101810:	f000 8105 	beq.w	8101a1e <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x36a>
        {
            mac_start += strlen("MAC");
 8101814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8101816:	3303      	adds	r3, #3
 8101818:	667b      	str	r3, [r7, #100]	@ 0x64
            vin_start += strlen("VIN");
 810181a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810181c:	3303      	adds	r3, #3
 810181e:	663b      	str	r3, [r7, #96]	@ 0x60

            // Safely extract MAC Address (12 characters)
            if (mac_start + 12 <= (char *)diagnostic_data + diagnostic_data_len)
 8101820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8101822:	f103 020c 	add.w	r2, r3, #12
 8101826:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8101828:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810182a:	440b      	add	r3, r1
 810182c:	429a      	cmp	r2, r3
 810182e:	f200 808f 	bhi.w	8101950 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x29c>
            {
                char mac_address_str[13] = {0};
 8101832:	2300      	movs	r3, #0
 8101834:	653b      	str	r3, [r7, #80]	@ 0x50
 8101836:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 810183a:	2200      	movs	r2, #0
 810183c:	601a      	str	r2, [r3, #0]
 810183e:	605a      	str	r2, [r3, #4]
 8101840:	721a      	strb	r2, [r3, #8]
                strncpy(mac_address_str, mac_start, 12);
 8101842:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101846:	220c      	movs	r2, #12
 8101848:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 810184a:	4618      	mov	r0, r3
 810184c:	f01c fc0e 	bl	811e06c <strncpy>

                //convert to format accepted by lwip arp
                uint8_t ecu_mac[6] = {0};
 8101850:	2300      	movs	r3, #0
 8101852:	64bb      	str	r3, [r7, #72]	@ 0x48
 8101854:	2300      	movs	r3, #0
 8101856:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
                for (int i = 0; i < 6; i++)
 810185a:	2300      	movs	r3, #0
 810185c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810185e:	e022      	b.n	81018a6 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x1f2>
                {
                    if (sscanf(&mac_address_str[i * 2], "%2hhx", &ecu_mac[i]) != 1)
 8101860:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8101862:	005b      	lsls	r3, r3, #1
 8101864:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8101868:	18d0      	adds	r0, r2, r3
 810186a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 810186e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8101870:	4413      	add	r3, r2
 8101872:	461a      	mov	r2, r3
 8101874:	4931      	ldr	r1, [pc, #196]	@ (810193c <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x288>)
 8101876:	f01c fac3 	bl	811de00 <siscanf>
 810187a:	4603      	mov	r3, r0
 810187c:	2b01      	cmp	r3, #1
 810187e:	bf14      	ite	ne
 8101880:	2301      	movne	r3, #1
 8101882:	2300      	moveq	r3, #0
 8101884:	b2db      	uxtb	r3, r3
 8101886:	2b00      	cmp	r3, #0
 8101888:	d00a      	beq.n	81018a0 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x1ec>
                    {
                        LOG_DEBUG("Failed to parse MAC address.");
 810188a:	f7fe fd93 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 810188e:	4603      	mov	r3, r0
 8101890:	492b      	ldr	r1, [pc, #172]	@ (8101940 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x28c>)
 8101892:	4618      	mov	r0, r3
 8101894:	f7fe fdb6 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
                        pbuf_free(p);
 8101898:	6838      	ldr	r0, [r7, #0]
 810189a:	f014 fd09 	bl	81162b0 <pbuf_free>
 810189e:	e0d1      	b.n	8101a44 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x390>
                for (int i = 0; i < 6; i++)
 81018a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 81018a2:	3301      	adds	r3, #1
 81018a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81018a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 81018a8:	2b05      	cmp	r3, #5
 81018aa:	ddd9      	ble.n	8101860 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x1ac>
                        return;
                    }
                }
                LOG_DEBUG("Extracted MAC Address: %s", mac_address_str);
 81018ac:	f7fe fd82 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 81018b0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 81018b4:	461a      	mov	r2, r3
 81018b6:	4923      	ldr	r1, [pc, #140]	@ (8101944 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x290>)
 81018b8:	f7fe fda4 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>

                // Add a static ARP entry for ECU
                struct eth_addr eth_mac;
                memcpy(eth_mac.addr, ecu_mac, 6);
 81018bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 81018c0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 81018c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 81018c8:	6018      	str	r0, [r3, #0]
 81018ca:	3304      	adds	r3, #4
 81018cc:	8019      	strh	r1, [r3, #0]
                if (etharp_add_static_entry(addr, &eth_mac) == ERR_OK)
 81018ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 81018d2:	4619      	mov	r1, r3
 81018d4:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 81018d8:	f010 fe6a 	bl	81125b0 <etharp_add_static_entry>
 81018dc:	4603      	mov	r3, r0
 81018de:	2b00      	cmp	r3, #0
 81018e0:	bf0c      	ite	eq
 81018e2:	2301      	moveq	r3, #1
 81018e4:	2300      	movne	r3, #0
 81018e6:	b2db      	uxtb	r3, r3
 81018e8:	2b00      	cmp	r3, #0
 81018ea:	d00c      	beq.n	8101906 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x252>
                {
                    LOG_DEBUG("ARP entry for ECU added successfully.");
 81018ec:	f7fe fd62 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 81018f0:	4603      	mov	r3, r0
 81018f2:	4915      	ldr	r1, [pc, #84]	@ (8101948 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x294>)
 81018f4:	4618      	mov	r0, r3
 81018f6:	f7fe fd85 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
                    ecu_ip_addr = *addr;
 81018fa:	68fb      	ldr	r3, [r7, #12]
 81018fc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8101900:	6812      	ldr	r2, [r2, #0]
 8101902:	615a      	str	r2, [r3, #20]
 8101904:	e02b      	b.n	810195e <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2aa>
                }
                else
                {
                    LOG_DEBUG("Failed to add ARP entry for ECU.");
 8101906:	f7fe fd55 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 810190a:	4603      	mov	r3, r0
 810190c:	490f      	ldr	r1, [pc, #60]	@ (810194c <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x298>)
 810190e:	4618      	mov	r0, r3
 8101910:	f7fe fd78 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
 8101914:	e023      	b.n	810195e <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2aa>
 8101916:	bf00      	nop
 8101918:	0811ef5c 	.word	0x0811ef5c
 810191c:	0811ef8c 	.word	0x0811ef8c
 8101920:	0811efac 	.word	0x0811efac
 8101924:	0811efe0 	.word	0x0811efe0
 8101928:	0811f00c 	.word	0x0811f00c
 810192c:	0811f03c 	.word	0x0811f03c
 8101930:	0811f04c 	.word	0x0811f04c
 8101934:	0811f064 	.word	0x0811f064
 8101938:	0811f068 	.word	0x0811f068
 810193c:	0811f06c 	.word	0x0811f06c
 8101940:	0811f074 	.word	0x0811f074
 8101944:	0811f094 	.word	0x0811f094
 8101948:	0811f0b0 	.word	0x0811f0b0
 810194c:	0811f0d8 	.word	0x0811f0d8
                }
            }
            else
            {
                LOG_DEBUG("MAC address extraction exceeds data boundaries.");
 8101950:	f7fe fd30 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101954:	4603      	mov	r3, r0
 8101956:	493d      	ldr	r1, [pc, #244]	@ (8101a4c <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x398>)
 8101958:	4618      	mov	r0, r3
 810195a:	f7fe fd53 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
            }

            // Safely extract VIN (17 characters)
            if (vin_start + 17 <= (char *)diagnostic_data + diagnostic_data_len)
 810195e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8101960:	f103 0211 	add.w	r2, r3, #17
 8101964:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8101966:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8101968:	440b      	add	r3, r1
 810196a:	429a      	cmp	r2, r3
 810196c:	d84f      	bhi.n	8101a0e <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x35a>
            {
                char vin[18] = {0};
 810196e:	2300      	movs	r3, #0
 8101970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8101972:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101976:	2200      	movs	r2, #0
 8101978:	601a      	str	r2, [r3, #0]
 810197a:	605a      	str	r2, [r3, #4]
 810197c:	609a      	str	r2, [r3, #8]
 810197e:	819a      	strh	r2, [r3, #12]
                strncpy(vin, vin_start, 17);
 8101980:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101984:	2211      	movs	r2, #17
 8101986:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8101988:	4618      	mov	r0, r3
 810198a:	f01c fb6f 	bl	811e06c <strncpy>
                LOG_DEBUG("Extracted VIN: %s", vin);
 810198e:	f7fe fd11 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101992:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8101996:	461a      	mov	r2, r3
 8101998:	492d      	ldr	r1, [pc, #180]	@ (8101a50 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x39c>)
 810199a:	f7fe fd33 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>

                EConnectionEvent connEvent = EVENT_DISCOVERY_COMPLETED;
 810199e:	2302      	movs	r3, #2
 81019a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                if(xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(10000)) != pdPASS)
 81019a4:	68fb      	ldr	r3, [r7, #12]
 81019a6:	68d8      	ldr	r0, [r3, #12]
 81019a8:	f107 012b 	add.w	r1, r7, #43	@ 0x2b
 81019ac:	2300      	movs	r3, #0
 81019ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 81019b2:	f00d fa87 	bl	810eec4 <xQueueGenericSend>
 81019b6:	4603      	mov	r3, r0
 81019b8:	2b01      	cmp	r3, #1
 81019ba:	bf14      	ite	ne
 81019bc:	2301      	movne	r3, #1
 81019be:	2300      	moveq	r3, #0
 81019c0:	b2db      	uxtb	r3, r3
 81019c2:	2b00      	cmp	r3, #0
 81019c4:	d009      	beq.n	81019da <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x326>
                {
                    //In this case do not notify app and just wait for another message from ecu to try on the next call
                    LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 81019c6:	f7fe fcf5 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 81019ca:	4603      	mov	r3, r0
 81019cc:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 81019d0:	4920      	ldr	r1, [pc, #128]	@ (8101a54 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3a0>)
 81019d2:	4618      	mov	r0, r3
 81019d4:	f7fe fd16 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
 81019d8:	e034      	b.n	8101a44 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x390>
                    return;
                }
                
                UMessageData msgData;
                strncpy(msgData.ecu_connected_vin, vin_start, 17);
 81019da:	f107 0314 	add.w	r3, r7, #20
 81019de:	2211      	movs	r2, #17
 81019e0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 81019e2:	4618      	mov	r0, r3
 81019e4:	f01c fb42 	bl	811e06c <strncpy>
                event_bus.send(EVENT_ECU_CONNECTION_INITIALISED, msgData, EVENT_CLIENT_FRONTEND);
 81019e8:	68fd      	ldr	r5, [r7, #12]
 81019ea:	2300      	movs	r3, #0
 81019ec:	9303      	str	r3, [sp, #12]
 81019ee:	466c      	mov	r4, sp
 81019f0:	f107 031c 	add.w	r3, r7, #28
 81019f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81019f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81019fc:	f107 0314 	add.w	r3, r7, #20
 8101a00:	cb0c      	ldmia	r3, {r2, r3}
 8101a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8101a06:	4628      	mov	r0, r5
 8101a08:	f000 fc4c 	bl	81022a4 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
            }
            else
            {
                LOG_DEBUG("VIN extraction exceeds data boundaries.");
            }
        }
 8101a0c:	e017      	b.n	8101a3e <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x38a>
                LOG_DEBUG("VIN extraction exceeds data boundaries.");
 8101a0e:	f7fe fcd1 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101a12:	4603      	mov	r3, r0
 8101a14:	4910      	ldr	r1, [pc, #64]	@ (8101a58 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3a4>)
 8101a16:	4618      	mov	r0, r3
 8101a18:	f7fe fcf4 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        }
 8101a1c:	e00f      	b.n	8101a3e <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x38a>
        else
        {
            LOG_DEBUG("MAC or VIN markers not found in diagnostic data.");
 8101a1e:	f7fe fcc9 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101a22:	4603      	mov	r3, r0
 8101a24:	490d      	ldr	r1, [pc, #52]	@ (8101a5c <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3a8>)
 8101a26:	4618      	mov	r0, r3
 8101a28:	f7fe fcec 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
 8101a2c:	e007      	b.n	8101a3e <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x38a>
        }
    }
    else
    {
        LOG_DEBUG("Payload too short to contain diagnostic data (length: %d bytes).", p->len);
 8101a2e:	f7fe fcc1 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101a32:	683b      	ldr	r3, [r7, #0]
 8101a34:	895b      	ldrh	r3, [r3, #10]
 8101a36:	461a      	mov	r2, r3
 8101a38:	4909      	ldr	r1, [pc, #36]	@ (8101a60 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3ac>)
 8101a3a:	f7fe fce3 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
    }

    // Free the received buffer
    pbuf_free(p);
 8101a3e:	6838      	ldr	r0, [r7, #0]
 8101a40:	f014 fc36 	bl	81162b0 <pbuf_free>
}
 8101a44:	3780      	adds	r7, #128	@ 0x80
 8101a46:	46bd      	mov	sp, r7
 8101a48:	bdb0      	pop	{r4, r5, r7, pc}
 8101a4a:	bf00      	nop
 8101a4c:	0811f0fc 	.word	0x0811f0fc
 8101a50:	0811f12c 	.word	0x0811f12c
 8101a54:	0811f140 	.word	0x0811f140
 8101a58:	0811f17c 	.word	0x0811f17c
 8101a5c:	0811f1a4 	.word	0x0811f1a4
 8101a60:	0811f1d8 	.word	0x0811f1d8

08101a64 <_ZN29EthernetConnectionManagerTask10udpConnectEv>:

void EthernetConnectionManagerTask::udpConnect()
{
 8101a64:	b580      	push	{r7, lr}
 8101a66:	b082      	sub	sp, #8
 8101a68:	af00      	add	r7, sp, #0
 8101a6a:	6078      	str	r0, [r7, #4]
    udp_pcb = udp_new();
 8101a6c:	f01b fa1e 	bl	811ceac <udp_new>
 8101a70:	4602      	mov	r2, r0
 8101a72:	687b      	ldr	r3, [r7, #4]
 8101a74:	619a      	str	r2, [r3, #24]
    if (udp_pcb)
 8101a76:	687b      	ldr	r3, [r7, #4]
 8101a78:	699b      	ldr	r3, [r3, #24]
 8101a7a:	2b00      	cmp	r3, #0
 8101a7c:	d00e      	beq.n	8101a9c <_ZN29EthernetConnectionManagerTask10udpConnectEv+0x38>
    {
        udp_bind(udp_pcb, IP_ADDR_ANY, 0);  // Bind PCB with any port
 8101a7e:	687b      	ldr	r3, [r7, #4]
 8101a80:	699b      	ldr	r3, [r3, #24]
 8101a82:	2200      	movs	r2, #0
 8101a84:	490b      	ldr	r1, [pc, #44]	@ (8101ab4 <_ZN29EthernetConnectionManagerTask10udpConnectEv+0x50>)
 8101a86:	4618      	mov	r0, r3
 8101a88:	f01b f926 	bl	811ccd8 <udp_bind>
        udp_recv(udp_pcb, udpRecvCb, NULL);  // Register the UDP receiver callback (listen for car info)
 8101a8c:	687b      	ldr	r3, [r7, #4]
 8101a8e:	699b      	ldr	r3, [r3, #24]
 8101a90:	2200      	movs	r2, #0
 8101a92:	4909      	ldr	r1, [pc, #36]	@ (8101ab8 <_ZN29EthernetConnectionManagerTask10udpConnectEv+0x54>)
 8101a94:	4618      	mov	r0, r3
 8101a96:	f01b f9a7 	bl	811cde8 <udp_recv>
    }
    else
    {
        LOG_DEBUG("Failed to create UDP PCB.");
    }
}
 8101a9a:	e006      	b.n	8101aaa <_ZN29EthernetConnectionManagerTask10udpConnectEv+0x46>
        LOG_DEBUG("Failed to create UDP PCB.");
 8101a9c:	f7fe fc8a 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101aa0:	4603      	mov	r3, r0
 8101aa2:	4906      	ldr	r1, [pc, #24]	@ (8101abc <_ZN29EthernetConnectionManagerTask10udpConnectEv+0x58>)
 8101aa4:	4618      	mov	r0, r3
 8101aa6:	f7fe fcad 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
}
 8101aaa:	bf00      	nop
 8101aac:	3708      	adds	r7, #8
 8101aae:	46bd      	mov	sp, r7
 8101ab0:	bd80      	pop	{r7, pc}
 8101ab2:	bf00      	nop
 8101ab4:	081224d8 	.word	0x081224d8
 8101ab8:	08100ffb 	.word	0x08100ffb
 8101abc:	0811f21c 	.word	0x0811f21c

08101ac0 <_ZN29EthernetConnectionManagerTask13udpDisconnectEv>:


void EthernetConnectionManagerTask::udpDisconnect()
{
 8101ac0:	b580      	push	{r7, lr}
 8101ac2:	b082      	sub	sp, #8
 8101ac4:	af00      	add	r7, sp, #0
 8101ac6:	6078      	str	r0, [r7, #4]
    if (udp_pcb != nullptr)
 8101ac8:	687b      	ldr	r3, [r7, #4]
 8101aca:	699b      	ldr	r3, [r3, #24]
 8101acc:	2b00      	cmp	r3, #0
 8101ace:	d016      	beq.n	8101afe <_ZN29EthernetConnectionManagerTask13udpDisconnectEv+0x3e>
    {
        // Unregister callbacks
        udp_recv(udp_pcb, nullptr, nullptr); // Wyrejestrowanie callbacka
 8101ad0:	687b      	ldr	r3, [r7, #4]
 8101ad2:	699b      	ldr	r3, [r3, #24]
 8101ad4:	2200      	movs	r2, #0
 8101ad6:	2100      	movs	r1, #0
 8101ad8:	4618      	mov	r0, r3
 8101ada:	f01b f985 	bl	811cde8 <udp_recv>
        // Close connection
        udp_remove(udp_pcb);
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	699b      	ldr	r3, [r3, #24]
 8101ae2:	4618      	mov	r0, r3
 8101ae4:	f01b f9a0 	bl	811ce28 <udp_remove>
        udp_pcb = nullptr;
 8101ae8:	687b      	ldr	r3, [r7, #4]
 8101aea:	2200      	movs	r2, #0
 8101aec:	619a      	str	r2, [r3, #24]
        LOG_DEBUG("UDP PCB removed and callback unregistered.");
 8101aee:	f7fe fc61 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101af2:	4603      	mov	r3, r0
 8101af4:	4907      	ldr	r1, [pc, #28]	@ (8101b14 <_ZN29EthernetConnectionManagerTask13udpDisconnectEv+0x54>)
 8101af6:	4618      	mov	r0, r3
 8101af8:	f7fe fc84 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
    }
    else
    {
        LOG_DEBUG("udp_pcb is already null, skipping removal.");
    }
}
 8101afc:	e006      	b.n	8101b0c <_ZN29EthernetConnectionManagerTask13udpDisconnectEv+0x4c>
        LOG_DEBUG("udp_pcb is already null, skipping removal.");
 8101afe:	f7fe fc59 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101b02:	4603      	mov	r3, r0
 8101b04:	4904      	ldr	r1, [pc, #16]	@ (8101b18 <_ZN29EthernetConnectionManagerTask13udpDisconnectEv+0x58>)
 8101b06:	4618      	mov	r0, r3
 8101b08:	f7fe fc7c 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
}
 8101b0c:	bf00      	nop
 8101b0e:	3708      	adds	r7, #8
 8101b10:	46bd      	mov	sp, r7
 8101b12:	bd80      	pop	{r7, pc}
 8101b14:	0811f238 	.word	0x0811f238
 8101b18:	0811f264 	.word	0x0811f264

08101b1c <_ZN29EthernetConnectionManagerTask10tcpConnectEv>:

bool EthernetConnectionManagerTask::tcpConnect()
{
 8101b1c:	b580      	push	{r7, lr}
 8101b1e:	b084      	sub	sp, #16
 8101b20:	af00      	add	r7, sp, #0
 8101b22:	6078      	str	r0, [r7, #4]
	tcp_pcb = tcp_new();
 8101b24:	f016 faa4 	bl	8118070 <tcp_new>
 8101b28:	4602      	mov	r2, r0
 8101b2a:	687b      	ldr	r3, [r7, #4]
 8101b2c:	61da      	str	r2, [r3, #28]
    LOCK_TCPIP_CORE();
 8101b2e:	482a      	ldr	r0, [pc, #168]	@ (8101bd8 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xbc>)
 8101b30:	f014 ff00 	bl	8116934 <sys_mutex_lock>
    if (!tcp_pcb)
 8101b34:	687b      	ldr	r3, [r7, #4]
 8101b36:	69db      	ldr	r3, [r3, #28]
 8101b38:	2b00      	cmp	r3, #0
 8101b3a:	d10b      	bne.n	8101b54 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x38>
    {
        LOG_DEBUG("Failed to create TCP PCB.");
 8101b3c:	f7fe fc3a 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101b40:	4603      	mov	r3, r0
 8101b42:	4926      	ldr	r1, [pc, #152]	@ (8101bdc <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xc0>)
 8101b44:	4618      	mov	r0, r3
 8101b46:	f7fe fc5d 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        UNLOCK_TCPIP_CORE();
 8101b4a:	4823      	ldr	r0, [pc, #140]	@ (8101bd8 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xbc>)
 8101b4c:	f014 ff01 	bl	8116952 <sys_mutex_unlock>
        return false;
 8101b50:	2300      	movs	r3, #0
 8101b52:	e03c      	b.n	8101bce <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xb2>
    }

    // callback registration
    tcp_arg(tcp_pcb, NULL);
 8101b54:	687b      	ldr	r3, [r7, #4]
 8101b56:	69db      	ldr	r3, [r3, #28]
 8101b58:	2100      	movs	r1, #0
 8101b5a:	4618      	mov	r0, r3
 8101b5c:	f016 fa90 	bl	8118080 <tcp_arg>
    tcp_recv(tcp_pcb, tcpRecvCb);
 8101b60:	687b      	ldr	r3, [r7, #4]
 8101b62:	69db      	ldr	r3, [r3, #28]
 8101b64:	491e      	ldr	r1, [pc, #120]	@ (8101be0 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xc4>)
 8101b66:	4618      	mov	r0, r3
 8101b68:	f016 fa9c 	bl	81180a4 <tcp_recv>
    tcp_err(tcp_pcb, tcpErrCb);
 8101b6c:	687b      	ldr	r3, [r7, #4]
 8101b6e:	69db      	ldr	r3, [r3, #28]
 8101b70:	491c      	ldr	r1, [pc, #112]	@ (8101be4 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xc8>)
 8101b72:	4618      	mov	r0, r3
 8101b74:	f016 fab8 	bl	81180e8 <tcp_err>

    // establishing connection
    err_t err = tcp_connect(tcp_pcb, &ecu_ip_addr, TCP_PORT_ECU, tcpConnectCb);
 8101b78:	687b      	ldr	r3, [r7, #4]
 8101b7a:	69d8      	ldr	r0, [r3, #28]
 8101b7c:	687b      	ldr	r3, [r7, #4]
 8101b7e:	f103 0114 	add.w	r1, r3, #20
 8101b82:	4b19      	ldr	r3, [pc, #100]	@ (8101be8 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xcc>)
 8101b84:	f641 2291 	movw	r2, #6801	@ 0x1a91
 8101b88:	f015 fb26 	bl	81171d8 <tcp_connect>
 8101b8c:	4603      	mov	r3, r0
 8101b8e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK)
 8101b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8101b94:	2b00      	cmp	r3, #0
 8101b96:	d00f      	beq.n	8101bb8 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x9c>
    {
        LOG_DEBUG("Failed to connect to ECU: %d", err);
 8101b98:	f7fe fc0c 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8101ba0:	461a      	mov	r2, r3
 8101ba2:	4912      	ldr	r1, [pc, #72]	@ (8101bec <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xd0>)
 8101ba4:	f7fe fc2e 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        tcpDisconnect();
 8101ba8:	6878      	ldr	r0, [r7, #4]
 8101baa:	f000 f823 	bl	8101bf4 <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv>
        UNLOCK_TCPIP_CORE();
 8101bae:	480a      	ldr	r0, [pc, #40]	@ (8101bd8 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xbc>)
 8101bb0:	f014 fecf 	bl	8116952 <sys_mutex_unlock>
        return false;
 8101bb4:	2300      	movs	r3, #0
 8101bb6:	e00a      	b.n	8101bce <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xb2>
    }
    else
    {
        LOG_DEBUG("Connecting to ECU.");
 8101bb8:	f7fe fbfc 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101bbc:	4603      	mov	r3, r0
 8101bbe:	490c      	ldr	r1, [pc, #48]	@ (8101bf0 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xd4>)
 8101bc0:	4618      	mov	r0, r3
 8101bc2:	f7fe fc1f 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
    }
    UNLOCK_TCPIP_CORE();
 8101bc6:	4804      	ldr	r0, [pc, #16]	@ (8101bd8 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xbc>)
 8101bc8:	f014 fec3 	bl	8116952 <sys_mutex_unlock>
    return true;
 8101bcc:	2301      	movs	r3, #1
}
 8101bce:	4618      	mov	r0, r3
 8101bd0:	3710      	adds	r7, #16
 8101bd2:	46bd      	mov	sp, r7
 8101bd4:	bd80      	pop	{r7, pc}
 8101bd6:	bf00      	nop
 8101bd8:	10012184 	.word	0x10012184
 8101bdc:	0811f290 	.word	0x0811f290
 8101be0:	08100f77 	.word	0x08100f77
 8101be4:	08100fd3 	.word	0x08100fd3
 8101be8:	08100fa7 	.word	0x08100fa7
 8101bec:	0811f2ac 	.word	0x0811f2ac
 8101bf0:	0811f2cc 	.word	0x0811f2cc

08101bf4 <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv>:


void EthernetConnectionManagerTask::tcpDisconnect()
{
 8101bf4:	b580      	push	{r7, lr}
 8101bf6:	b082      	sub	sp, #8
 8101bf8:	af00      	add	r7, sp, #0
 8101bfa:	6078      	str	r0, [r7, #4]
    LOCK_TCPIP_CORE();
 8101bfc:	481b      	ldr	r0, [pc, #108]	@ (8101c6c <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv+0x78>)
 8101bfe:	f014 fe99 	bl	8116934 <sys_mutex_lock>
    if (tcp_pcb != nullptr)
 8101c02:	687b      	ldr	r3, [r7, #4]
 8101c04:	69db      	ldr	r3, [r3, #28]
 8101c06:	2b00      	cmp	r3, #0
 8101c08:	d021      	beq.n	8101c4e <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv+0x5a>
    {
        // Unregister callbacks
        tcp_arg(tcp_pcb, nullptr);
 8101c0a:	687b      	ldr	r3, [r7, #4]
 8101c0c:	69db      	ldr	r3, [r3, #28]
 8101c0e:	2100      	movs	r1, #0
 8101c10:	4618      	mov	r0, r3
 8101c12:	f016 fa35 	bl	8118080 <tcp_arg>
        tcp_recv(tcp_pcb, nullptr);
 8101c16:	687b      	ldr	r3, [r7, #4]
 8101c18:	69db      	ldr	r3, [r3, #28]
 8101c1a:	2100      	movs	r1, #0
 8101c1c:	4618      	mov	r0, r3
 8101c1e:	f016 fa41 	bl	81180a4 <tcp_recv>
        tcp_err(tcp_pcb, nullptr);
 8101c22:	687b      	ldr	r3, [r7, #4]
 8101c24:	69db      	ldr	r3, [r3, #28]
 8101c26:	2100      	movs	r1, #0
 8101c28:	4618      	mov	r0, r3
 8101c2a:	f016 fa5d 	bl	81180e8 <tcp_err>
        // Close connection
        tcp_close(tcp_pcb);
 8101c2e:	687b      	ldr	r3, [r7, #4]
 8101c30:	69db      	ldr	r3, [r3, #28]
 8101c32:	4618      	mov	r0, r3
 8101c34:	f015 f8e8 	bl	8116e08 <tcp_close>
        tcp_pcb = nullptr;
 8101c38:	687b      	ldr	r3, [r7, #4]
 8101c3a:	2200      	movs	r2, #0
 8101c3c:	61da      	str	r2, [r3, #28]
        LOG_DEBUG("TCP PCB closed and callbacks unregistered.");
 8101c3e:	f7fe fbb9 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101c42:	4603      	mov	r3, r0
 8101c44:	490a      	ldr	r1, [pc, #40]	@ (8101c70 <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv+0x7c>)
 8101c46:	4618      	mov	r0, r3
 8101c48:	f7fe fbdc 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
 8101c4c:	e006      	b.n	8101c5c <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv+0x68>
    }
    else
    {
        LOG_DEBUG("tcp_pcb is already null, skipping disconnection.");
 8101c4e:	f7fe fbb1 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101c52:	4603      	mov	r3, r0
 8101c54:	4907      	ldr	r1, [pc, #28]	@ (8101c74 <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv+0x80>)
 8101c56:	4618      	mov	r0, r3
 8101c58:	f7fe fbd4 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
    }
    UNLOCK_TCPIP_CORE();
 8101c5c:	4803      	ldr	r0, [pc, #12]	@ (8101c6c <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv+0x78>)
 8101c5e:	f014 fe78 	bl	8116952 <sys_mutex_unlock>
}
 8101c62:	bf00      	nop
 8101c64:	3708      	adds	r7, #8
 8101c66:	46bd      	mov	sp, r7
 8101c68:	bd80      	pop	{r7, pc}
 8101c6a:	bf00      	nop
 8101c6c:	10012184 	.word	0x10012184
 8101c70:	0811f2e0 	.word	0x0811f2e0
 8101c74:	0811f30c 	.word	0x0811f30c

08101c78 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa>:

void EthernetConnectionManagerTask::HandleTcpRecvCb(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8101c78:	b580      	push	{r7, lr}
 8101c7a:	b086      	sub	sp, #24
 8101c7c:	af00      	add	r7, sp, #0
 8101c7e:	60f8      	str	r0, [r7, #12]
 8101c80:	60b9      	str	r1, [r7, #8]
 8101c82:	607a      	str	r2, [r7, #4]
 8101c84:	603b      	str	r3, [r7, #0]
    if (!p || err != ERR_OK)
 8101c86:	683b      	ldr	r3, [r7, #0]
 8101c88:	2b00      	cmp	r3, #0
 8101c8a:	d003      	beq.n	8101c94 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1c>
 8101c8c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8101c90:	2b00      	cmp	r3, #0
 8101c92:	d00a      	beq.n	8101caa <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x32>
    {
        tcp_close(tpcb);
 8101c94:	6878      	ldr	r0, [r7, #4]
 8101c96:	f015 f8b7 	bl	8116e08 <tcp_close>
        LOG_DEBUG("Connection closed or error occurred.");
 8101c9a:	f7fe fb8b 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101c9e:	4603      	mov	r3, r0
 8101ca0:	4915      	ldr	r1, [pc, #84]	@ (8101cf8 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x80>)
 8101ca2:	4618      	mov	r0, r3
 8101ca4:	f7fe fbae 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        return;
 8101ca8:	e023      	b.n	8101cf2 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x7a>
    }

    // TODO process data
    LOG_DEBUG("Received %d bytes of data:", p->len);
 8101caa:	f7fe fb83 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101cae:	683b      	ldr	r3, [r7, #0]
 8101cb0:	895b      	ldrh	r3, [r3, #10]
 8101cb2:	461a      	mov	r2, r3
 8101cb4:	4911      	ldr	r1, [pc, #68]	@ (8101cfc <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x84>)
 8101cb6:	f7fe fba5 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
    uint8_t *data = (uint8_t *)p->payload;
 8101cba:	683b      	ldr	r3, [r7, #0]
 8101cbc:	685b      	ldr	r3, [r3, #4]
 8101cbe:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < p->len; i++)
 8101cc0:	2300      	movs	r3, #0
 8101cc2:	617b      	str	r3, [r7, #20]
 8101cc4:	e00c      	b.n	8101ce0 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x68>
    {
        LOG_DEBUG("%02X ", data[i]);
 8101cc6:	f7fe fb75 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101cca:	697b      	ldr	r3, [r7, #20]
 8101ccc:	693a      	ldr	r2, [r7, #16]
 8101cce:	4413      	add	r3, r2
 8101cd0:	781b      	ldrb	r3, [r3, #0]
 8101cd2:	461a      	mov	r2, r3
 8101cd4:	490a      	ldr	r1, [pc, #40]	@ (8101d00 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x88>)
 8101cd6:	f7fe fb95 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
    for (int i = 0; i < p->len; i++)
 8101cda:	697b      	ldr	r3, [r7, #20]
 8101cdc:	3301      	adds	r3, #1
 8101cde:	617b      	str	r3, [r7, #20]
 8101ce0:	683b      	ldr	r3, [r7, #0]
 8101ce2:	895b      	ldrh	r3, [r3, #10]
 8101ce4:	461a      	mov	r2, r3
 8101ce6:	697b      	ldr	r3, [r7, #20]
 8101ce8:	4293      	cmp	r3, r2
 8101cea:	dbec      	blt.n	8101cc6 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x4e>
    }

    pbuf_free(p);
 8101cec:	6838      	ldr	r0, [r7, #0]
 8101cee:	f014 fadf 	bl	81162b0 <pbuf_free>
}
 8101cf2:	3718      	adds	r7, #24
 8101cf4:	46bd      	mov	sp, r7
 8101cf6:	bd80      	pop	{r7, pc}
 8101cf8:	0811f340 	.word	0x0811f340
 8101cfc:	0811f368 	.word	0x0811f368
 8101d00:	0811f384 	.word	0x0811f384

08101d04 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba>:

void EthernetConnectionManagerTask::HandleTcpConnectCb(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8101d04:	b580      	push	{r7, lr}
 8101d06:	b088      	sub	sp, #32
 8101d08:	af00      	add	r7, sp, #0
 8101d0a:	60f8      	str	r0, [r7, #12]
 8101d0c:	60b9      	str	r1, [r7, #8]
 8101d0e:	607a      	str	r2, [r7, #4]
 8101d10:	70fb      	strb	r3, [r7, #3]
    // accoring to documentation this always call with err == ERR_OK, so this impl is in case of LWiP updates
    if (err != ERR_OK)
 8101d12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8101d16:	2b00      	cmp	r3, #0
 8101d18:	d02d      	beq.n	8101d76 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0x72>
    {
        LOG_DEBUG("Connection failed with error: %d", err);
 8101d1a:	f7fe fb4b 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101d1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8101d22:	461a      	mov	r2, r3
 8101d24:	492c      	ldr	r1, [pc, #176]	@ (8101dd8 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0xd4>)
 8101d26:	f7fe fb6d 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 8101d2a:	2304      	movs	r3, #4
 8101d2c:	75fb      	strb	r3, [r7, #23]
        if(xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 8101d2e:	68fb      	ldr	r3, [r7, #12]
 8101d30:	68d8      	ldr	r0, [r3, #12]
 8101d32:	f107 0117 	add.w	r1, r7, #23
 8101d36:	2300      	movs	r3, #0
 8101d38:	4a28      	ldr	r2, [pc, #160]	@ (8101ddc <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0xd8>)
 8101d3a:	f00d f8c3 	bl	810eec4 <xQueueGenericSend>
 8101d3e:	4603      	mov	r3, r0
 8101d40:	2b01      	cmp	r3, #1
 8101d42:	bf14      	ite	ne
 8101d44:	2301      	movne	r3, #1
 8101d46:	2300      	moveq	r3, #0
 8101d48:	b2db      	uxtb	r3, r3
 8101d4a:	2b00      	cmp	r3, #0
 8101d4c:	d040      	beq.n	8101dd0 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0xcc>
        {
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 8101d4e:	f7fe fb31 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101d52:	4603      	mov	r3, r0
 8101d54:	7dfa      	ldrb	r2, [r7, #23]
 8101d56:	4922      	ldr	r1, [pc, #136]	@ (8101de0 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0xdc>)
 8101d58:	4618      	mov	r0, r3
 8101d5a:	f7fe fb53 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8101d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101d62:	f383 8811 	msr	BASEPRI, r3
 8101d66:	f3bf 8f6f 	isb	sy
 8101d6a:	f3bf 8f4f 	dsb	sy
 8101d6e:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8101d70:	bf00      	nop
            configASSERT(0);
 8101d72:	bf00      	nop
 8101d74:	e7fd      	b.n	8101d72 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0x6e>
        }
    }
    else
    {
        LOG_DEBUG("Connected to ECU.");
 8101d76:	f7fe fb1d 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101d7a:	4603      	mov	r3, r0
 8101d7c:	4919      	ldr	r1, [pc, #100]	@ (8101de4 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0xe0>)
 8101d7e:	4618      	mov	r0, r3
 8101d80:	f7fe fb40 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
        EConnectionEvent connEvent = EVENT_TCP_CONNECTED;
 8101d84:	2303      	movs	r3, #3
 8101d86:	75bb      	strb	r3, [r7, #22]
        if(xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 8101d88:	68fb      	ldr	r3, [r7, #12]
 8101d8a:	68d8      	ldr	r0, [r3, #12]
 8101d8c:	f107 0116 	add.w	r1, r7, #22
 8101d90:	2300      	movs	r3, #0
 8101d92:	4a12      	ldr	r2, [pc, #72]	@ (8101ddc <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0xd8>)
 8101d94:	f00d f896 	bl	810eec4 <xQueueGenericSend>
 8101d98:	4603      	mov	r3, r0
 8101d9a:	2b01      	cmp	r3, #1
 8101d9c:	bf14      	ite	ne
 8101d9e:	2301      	movne	r3, #1
 8101da0:	2300      	moveq	r3, #0
 8101da2:	b2db      	uxtb	r3, r3
 8101da4:	2b00      	cmp	r3, #0
 8101da6:	d013      	beq.n	8101dd0 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0xcc>
        {
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 8101da8:	f7fe fb04 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101dac:	4603      	mov	r3, r0
 8101dae:	7dba      	ldrb	r2, [r7, #22]
 8101db0:	490b      	ldr	r1, [pc, #44]	@ (8101de0 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0xdc>)
 8101db2:	4618      	mov	r0, r3
 8101db4:	f7fe fb26 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
	__asm volatile
 8101db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101dbc:	f383 8811 	msr	BASEPRI, r3
 8101dc0:	f3bf 8f6f 	isb	sy
 8101dc4:	f3bf 8f4f 	dsb	sy
 8101dc8:	61bb      	str	r3, [r7, #24]
}
 8101dca:	bf00      	nop
            configASSERT(0);
 8101dcc:	bf00      	nop
 8101dce:	e7fd      	b.n	8101dcc <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0xc8>
        }
    }
}
 8101dd0:	bf00      	nop
 8101dd2:	3720      	adds	r7, #32
 8101dd4:	46bd      	mov	sp, r7
 8101dd6:	bd80      	pop	{r7, pc}
 8101dd8:	0811f38c 	.word	0x0811f38c
 8101ddc:	000186a0 	.word	0x000186a0
 8101de0:	0811f140 	.word	0x0811f140
 8101de4:	0811f3b0 	.word	0x0811f3b0

08101de8 <_ZN29EthernetConnectionManagerTask14HandleTcpErrCbEPva>:

void EthernetConnectionManagerTask::HandleTcpErrCb(void *arg, err_t err)
{
 8101de8:	b580      	push	{r7, lr}
 8101dea:	b084      	sub	sp, #16
 8101dec:	af00      	add	r7, sp, #0
 8101dee:	60f8      	str	r0, [r7, #12]
 8101df0:	60b9      	str	r1, [r7, #8]
 8101df2:	4613      	mov	r3, r2
 8101df4:	71fb      	strb	r3, [r7, #7]
    LOG_DEBUG("TCP connection error: %d", err);
 8101df6:	f7fe fadd 	bl	81003b4 <_ZN10LogPrinter8instanceEv>
 8101dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8101dfe:	461a      	mov	r2, r3
 8101e00:	4903      	ldr	r1, [pc, #12]	@ (8101e10 <_ZN29EthernetConnectionManagerTask14HandleTcpErrCbEPva+0x28>)
 8101e02:	f7fe faff 	bl	8100404 <_ZN10LogPrinter10printDebugEPKcz>
}
 8101e06:	bf00      	nop
 8101e08:	3710      	adds	r7, #16
 8101e0a:	46bd      	mov	sp, r7
 8101e0c:	bd80      	pop	{r7, pc}
 8101e0e:	bf00      	nop
 8101e10:	0811f3c4 	.word	0x0811f3c4

08101e14 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8101e14:	b480      	push	{r7}
 8101e16:	b083      	sub	sp, #12
 8101e18:	af00      	add	r7, sp, #0
 8101e1a:	6078      	str	r0, [r7, #4]
 8101e1c:	687b      	ldr	r3, [r7, #4]
 8101e1e:	461a      	mov	r2, r3
 8101e20:	2300      	movs	r3, #0
 8101e22:	6013      	str	r3, [r2, #0]
 8101e24:	6053      	str	r3, [r2, #4]
 8101e26:	687b      	ldr	r3, [r7, #4]
 8101e28:	2200      	movs	r2, #0
 8101e2a:	609a      	str	r2, [r3, #8]
 8101e2c:	687b      	ldr	r3, [r7, #4]
 8101e2e:	4618      	mov	r0, r3
 8101e30:	370c      	adds	r7, #12
 8101e32:	46bd      	mov	sp, r7
 8101e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e38:	4770      	bx	lr
	...

08101e3c <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8101e3c:	b590      	push	{r4, r7, lr}
 8101e3e:	b083      	sub	sp, #12
 8101e40:	af00      	add	r7, sp, #0
 8101e42:	6078      	str	r0, [r7, #4]
 8101e44:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8101e46:	687b      	ldr	r3, [r7, #4]
 8101e48:	461a      	mov	r2, r3
 8101e4a:	2300      	movs	r3, #0
 8101e4c:	6013      	str	r3, [r2, #0]
 8101e4e:	6053      	str	r3, [r2, #4]
 8101e50:	6093      	str	r3, [r2, #8]
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	4618      	mov	r0, r3
 8101e56:	f7ff ffdd 	bl	8101e14 <_ZNSt14_Function_baseC1Ev>
 8101e5a:	687b      	ldr	r3, [r7, #4]
 8101e5c:	2200      	movs	r2, #0
 8101e5e:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8101e60:	6838      	ldr	r0, [r7, #0]
 8101e62:	f000 f81b 	bl	8101e9c <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>
 8101e66:	4603      	mov	r3, r0
 8101e68:	2b00      	cmp	r3, #0
 8101e6a:	d00e      	beq.n	8101e8a <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8101e6c:	687c      	ldr	r4, [r7, #4]
 8101e6e:	6838      	ldr	r0, [r7, #0]
 8101e70:	f000 f81f 	bl	8101eb2 <_ZSt7forwardIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8101e74:	4603      	mov	r3, r0
 8101e76:	4619      	mov	r1, r3
 8101e78:	4620      	mov	r0, r4
 8101e7a:	f000 f825 	bl	8101ec8 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8101e7e:	687b      	ldr	r3, [r7, #4]
 8101e80:	4a04      	ldr	r2, [pc, #16]	@ (8101e94 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x58>)
 8101e82:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	4a04      	ldr	r2, [pc, #16]	@ (8101e98 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x5c>)
 8101e88:	609a      	str	r2, [r3, #8]
	    }
	}
 8101e8a:	687b      	ldr	r3, [r7, #4]
 8101e8c:	4618      	mov	r0, r3
 8101e8e:	370c      	adds	r7, #12
 8101e90:	46bd      	mov	sp, r7
 8101e92:	bd90      	pop	{r4, r7, pc}
 8101e94:	08101eed 	.word	0x08101eed
 8101e98:	08101f3d 	.word	0x08101f3d

08101e9c <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8101e9c:	b480      	push	{r7}
 8101e9e:	b083      	sub	sp, #12
 8101ea0:	af00      	add	r7, sp, #0
 8101ea2:	6078      	str	r0, [r7, #4]
	  { return true; }
 8101ea4:	2301      	movs	r3, #1
 8101ea6:	4618      	mov	r0, r3
 8101ea8:	370c      	adds	r7, #12
 8101eaa:	46bd      	mov	sp, r7
 8101eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eb0:	4770      	bx	lr

08101eb2 <_ZSt7forwardIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101eb2:	b480      	push	{r7}
 8101eb4:	b083      	sub	sp, #12
 8101eb6:	af00      	add	r7, sp, #0
 8101eb8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101eba:	687b      	ldr	r3, [r7, #4]
 8101ebc:	4618      	mov	r0, r3
 8101ebe:	370c      	adds	r7, #12
 8101ec0:	46bd      	mov	sp, r7
 8101ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ec6:	4770      	bx	lr

08101ec8 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8101ec8:	b590      	push	{r4, r7, lr}
 8101eca:	b083      	sub	sp, #12
 8101ecc:	af00      	add	r7, sp, #0
 8101ece:	6078      	str	r0, [r7, #4]
 8101ed0:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8101ed2:	6838      	ldr	r0, [r7, #0]
 8101ed4:	f7ff ffed 	bl	8101eb2 <_ZSt7forwardIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8101ed8:	4603      	mov	r3, r0
 8101eda:	4622      	mov	r2, r4
 8101edc:	4619      	mov	r1, r3
 8101ede:	6878      	ldr	r0, [r7, #4]
 8101ee0:	f000 f84b 	bl	8101f7a <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8101ee4:	bf00      	nop
 8101ee6:	370c      	adds	r7, #12
 8101ee8:	46bd      	mov	sp, r7
 8101eea:	bd90      	pop	{r4, r7, pc}

08101eec <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_SC_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8101eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8101ef0:	b086      	sub	sp, #24
 8101ef2:	af02      	add	r7, sp, #8
 8101ef4:	60f8      	str	r0, [r7, #12]
 8101ef6:	60b9      	str	r1, [r7, #8]
 8101ef8:	607a      	str	r2, [r7, #4]
 8101efa:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8101efc:	68f8      	ldr	r0, [r7, #12]
 8101efe:	f000 f855 	bl	8101fac <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8101f02:	4604      	mov	r4, r0
 8101f04:	68b8      	ldr	r0, [r7, #8]
 8101f06:	f000 f862 	bl	8101fce <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8101f0a:	4605      	mov	r5, r0
 8101f0c:	6878      	ldr	r0, [r7, #4]
 8101f0e:	f000 f869 	bl	8101fe4 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8101f12:	4606      	mov	r6, r0
 8101f14:	6838      	ldr	r0, [r7, #0]
 8101f16:	f000 f870 	bl	8101ffa <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8101f1a:	4680      	mov	r8, r0
 8101f1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8101f1e:	f000 f86c 	bl	8101ffa <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8101f22:	4603      	mov	r3, r0
 8101f24:	9300      	str	r3, [sp, #0]
 8101f26:	4643      	mov	r3, r8
 8101f28:	4632      	mov	r2, r6
 8101f2a:	4629      	mov	r1, r5
 8101f2c:	4620      	mov	r0, r4
 8101f2e:	f000 f86f 	bl	8102010 <_ZSt10__invoke_rIvRZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8101f32:	bf00      	nop
      }
 8101f34:	3710      	adds	r7, #16
 8101f36:	46bd      	mov	sp, r7
 8101f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08101f3c <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8101f3c:	b590      	push	{r4, r7, lr}
 8101f3e:	b085      	sub	sp, #20
 8101f40:	af00      	add	r7, sp, #0
 8101f42:	60f8      	str	r0, [r7, #12]
 8101f44:	60b9      	str	r1, [r7, #8]
 8101f46:	4613      	mov	r3, r2
 8101f48:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8101f4a:	79fb      	ldrb	r3, [r7, #7]
 8101f4c:	2b01      	cmp	r3, #1
 8101f4e:	d109      	bne.n	8101f64 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8101f50:	68f8      	ldr	r0, [r7, #12]
 8101f52:	f000 f886 	bl	8102062 <_ZNSt9_Any_data9_M_accessIPZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 8101f56:	4604      	mov	r4, r0
 8101f58:	68b8      	ldr	r0, [r7, #8]
 8101f5a:	f000 f827 	bl	8101fac <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8101f5e:	4603      	mov	r3, r0
 8101f60:	6023      	str	r3, [r4, #0]
	    break;
 8101f62:	e005      	b.n	8101f70 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8101f64:	79fb      	ldrb	r3, [r7, #7]
 8101f66:	461a      	mov	r2, r3
 8101f68:	68b9      	ldr	r1, [r7, #8]
 8101f6a:	68f8      	ldr	r0, [r7, #12]
 8101f6c:	f000 f886 	bl	810207c <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8101f70:	2300      	movs	r3, #0
      }
 8101f72:	4618      	mov	r0, r3
 8101f74:	3714      	adds	r7, #20
 8101f76:	46bd      	mov	sp, r7
 8101f78:	bd90      	pop	{r4, r7, pc}

08101f7a <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8101f7a:	b590      	push	{r4, r7, lr}
 8101f7c:	b085      	sub	sp, #20
 8101f7e:	af00      	add	r7, sp, #0
 8101f80:	60f8      	str	r0, [r7, #12]
 8101f82:	60b9      	str	r1, [r7, #8]
 8101f84:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8101f86:	68f8      	ldr	r0, [r7, #12]
 8101f88:	f7fe ff94 	bl	8100eb4 <_ZNSt9_Any_data9_M_accessEv>
 8101f8c:	4603      	mov	r3, r0
 8101f8e:	4619      	mov	r1, r3
 8101f90:	2004      	movs	r0, #4
 8101f92:	f7fe ff83 	bl	8100e9c <_ZnwjPv>
 8101f96:	4604      	mov	r4, r0
 8101f98:	68b8      	ldr	r0, [r7, #8]
 8101f9a:	f7ff ff8a 	bl	8101eb2 <_ZSt7forwardIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8101f9e:	4603      	mov	r3, r0
 8101fa0:	681b      	ldr	r3, [r3, #0]
 8101fa2:	6023      	str	r3, [r4, #0]
	  }
 8101fa4:	bf00      	nop
 8101fa6:	3714      	adds	r7, #20
 8101fa8:	46bd      	mov	sp, r7
 8101faa:	bd90      	pop	{r4, r7, pc}

08101fac <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8101fac:	b580      	push	{r7, lr}
 8101fae:	b084      	sub	sp, #16
 8101fb0:	af00      	add	r7, sp, #0
 8101fb2:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8101fb4:	6878      	ldr	r0, [r7, #4]
 8101fb6:	f000 f89b 	bl	81020f0 <_ZNKSt9_Any_data9_M_accessIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>
 8101fba:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8101fbc:	68f8      	ldr	r0, [r7, #12]
 8101fbe:	f000 f8a3 	bl	8102108 <_ZSt11__addressofIKZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>
 8101fc2:	4603      	mov	r3, r0
 8101fc4:	bf00      	nop
	}
 8101fc6:	4618      	mov	r0, r3
 8101fc8:	3710      	adds	r7, #16
 8101fca:	46bd      	mov	sp, r7
 8101fcc:	bd80      	pop	{r7, pc}

08101fce <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101fce:	b480      	push	{r7}
 8101fd0:	b083      	sub	sp, #12
 8101fd2:	af00      	add	r7, sp, #0
 8101fd4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101fd6:	687b      	ldr	r3, [r7, #4]
 8101fd8:	4618      	mov	r0, r3
 8101fda:	370c      	adds	r7, #12
 8101fdc:	46bd      	mov	sp, r7
 8101fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fe2:	4770      	bx	lr

08101fe4 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101fe4:	b480      	push	{r7}
 8101fe6:	b083      	sub	sp, #12
 8101fe8:	af00      	add	r7, sp, #0
 8101fea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101fec:	687b      	ldr	r3, [r7, #4]
 8101fee:	4618      	mov	r0, r3
 8101ff0:	370c      	adds	r7, #12
 8101ff2:	46bd      	mov	sp, r7
 8101ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ff8:	4770      	bx	lr

08101ffa <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101ffa:	b480      	push	{r7}
 8101ffc:	b083      	sub	sp, #12
 8101ffe:	af00      	add	r7, sp, #0
 8102000:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102002:	687b      	ldr	r3, [r7, #4]
 8102004:	4618      	mov	r0, r3
 8102006:	370c      	adds	r7, #12
 8102008:	46bd      	mov	sp, r7
 810200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810200e:	4770      	bx	lr

08102010 <_ZSt10__invoke_rIvRZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8102010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8102014:	b087      	sub	sp, #28
 8102016:	af02      	add	r7, sp, #8
 8102018:	60f8      	str	r0, [r7, #12]
 810201a:	60b9      	str	r1, [r7, #8]
 810201c:	607a      	str	r2, [r7, #4]
 810201e:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8102020:	68f8      	ldr	r0, [r7, #12]
 8102022:	f000 f87c 	bl	810211e <_ZSt7forwardIRZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8102026:	4605      	mov	r5, r0
 8102028:	68b8      	ldr	r0, [r7, #8]
 810202a:	f7ff ffd0 	bl	8101fce <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 810202e:	4606      	mov	r6, r0
 8102030:	6878      	ldr	r0, [r7, #4]
 8102032:	f7ff ffd7 	bl	8101fe4 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8102036:	4680      	mov	r8, r0
 8102038:	6838      	ldr	r0, [r7, #0]
 810203a:	f7ff ffde 	bl	8101ffa <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810203e:	4604      	mov	r4, r0
 8102040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8102042:	f7ff ffda 	bl	8101ffa <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8102046:	4603      	mov	r3, r0
 8102048:	9301      	str	r3, [sp, #4]
 810204a:	9400      	str	r4, [sp, #0]
 810204c:	4643      	mov	r3, r8
 810204e:	4632      	mov	r2, r6
 8102050:	4629      	mov	r1, r5
 8102052:	4648      	mov	r0, r9
 8102054:	f000 f86e 	bl	8102134 <_ZSt13__invoke_implIvRZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8102058:	bf00      	nop
 810205a:	3714      	adds	r7, #20
 810205c:	46bd      	mov	sp, r7
 810205e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08102062 <_ZNSt9_Any_data9_M_accessIPZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 8102062:	b580      	push	{r7, lr}
 8102064:	b082      	sub	sp, #8
 8102066:	af00      	add	r7, sp, #0
 8102068:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810206a:	6878      	ldr	r0, [r7, #4]
 810206c:	f7fe ff22 	bl	8100eb4 <_ZNSt9_Any_data9_M_accessEv>
 8102070:	4603      	mov	r3, r0
 8102072:	4618      	mov	r0, r3
 8102074:	3708      	adds	r7, #8
 8102076:	46bd      	mov	sp, r7
 8102078:	bd80      	pop	{r7, pc}
	...

0810207c <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 810207c:	b590      	push	{r4, r7, lr}
 810207e:	b085      	sub	sp, #20
 8102080:	af00      	add	r7, sp, #0
 8102082:	60f8      	str	r0, [r7, #12]
 8102084:	60b9      	str	r1, [r7, #8]
 8102086:	4613      	mov	r3, r2
 8102088:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 810208a:	79fb      	ldrb	r3, [r7, #7]
 810208c:	2b03      	cmp	r3, #3
 810208e:	d82a      	bhi.n	81020e6 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8102090:	a201      	add	r2, pc, #4	@ (adr r2, 8102098 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 8102092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102096:	bf00      	nop
 8102098:	081020a9 	.word	0x081020a9
 810209c:	081020b7 	.word	0x081020b7
 81020a0:	081020cb 	.word	0x081020cb
 81020a4:	081020dd 	.word	0x081020dd
	      __dest._M_access<const type_info*>() = nullptr;
 81020a8:	68f8      	ldr	r0, [r7, #12]
 81020aa:	f000 f876 	bl	810219a <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 81020ae:	4603      	mov	r3, r0
 81020b0:	2200      	movs	r2, #0
 81020b2:	601a      	str	r2, [r3, #0]
	      break;
 81020b4:	e017      	b.n	81020e6 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 81020b6:	68f8      	ldr	r0, [r7, #12]
 81020b8:	f7ff ffd3 	bl	8102062 <_ZNSt9_Any_data9_M_accessIPZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 81020bc:	4604      	mov	r4, r0
 81020be:	68b8      	ldr	r0, [r7, #8]
 81020c0:	f7ff ff74 	bl	8101fac <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 81020c4:	4603      	mov	r3, r0
 81020c6:	6023      	str	r3, [r4, #0]
	      break;
 81020c8:	e00d      	b.n	81020e6 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 81020ca:	68b8      	ldr	r0, [r7, #8]
 81020cc:	f7ff ff6e 	bl	8101fac <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 81020d0:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 81020d2:	4619      	mov	r1, r3
 81020d4:	68f8      	ldr	r0, [r7, #12]
 81020d6:	f000 f86c 	bl	81021b2 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 81020da:	e004      	b.n	81020e6 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 81020dc:	4621      	mov	r1, r4
 81020de:	68f8      	ldr	r0, [r7, #12]
 81020e0:	f000 f879 	bl	81021d6 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 81020e4:	bf00      	nop
	  return false;
 81020e6:	2300      	movs	r3, #0
	}
 81020e8:	4618      	mov	r0, r3
 81020ea:	3714      	adds	r7, #20
 81020ec:	46bd      	mov	sp, r7
 81020ee:	bd90      	pop	{r4, r7, pc}

081020f0 <_ZNKSt9_Any_data9_M_accessIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>:
      _M_access() const noexcept
 81020f0:	b580      	push	{r7, lr}
 81020f2:	b082      	sub	sp, #8
 81020f4:	af00      	add	r7, sp, #0
 81020f6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 81020f8:	6878      	ldr	r0, [r7, #4]
 81020fa:	f7fe fee6 	bl	8100eca <_ZNKSt9_Any_data9_M_accessEv>
 81020fe:	4603      	mov	r3, r0
 8102100:	4618      	mov	r0, r3
 8102102:	3708      	adds	r7, #8
 8102104:	46bd      	mov	sp, r7
 8102106:	bd80      	pop	{r7, pc}

08102108 <_ZSt11__addressofIKZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8102108:	b480      	push	{r7}
 810210a:	b083      	sub	sp, #12
 810210c:	af00      	add	r7, sp, #0
 810210e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	4618      	mov	r0, r3
 8102114:	370c      	adds	r7, #12
 8102116:	46bd      	mov	sp, r7
 8102118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810211c:	4770      	bx	lr

0810211e <_ZSt7forwardIRZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810211e:	b480      	push	{r7}
 8102120:	b083      	sub	sp, #12
 8102122:	af00      	add	r7, sp, #0
 8102124:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102126:	687b      	ldr	r3, [r7, #4]
 8102128:	4618      	mov	r0, r3
 810212a:	370c      	adds	r7, #12
 810212c:	46bd      	mov	sp, r7
 810212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102132:	4770      	bx	lr

08102134 <_ZSt13__invoke_implIvRZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8102134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8102138:	b08a      	sub	sp, #40	@ 0x28
 810213a:	af06      	add	r7, sp, #24
 810213c:	7338      	strb	r0, [r7, #12]
 810213e:	60b9      	str	r1, [r7, #8]
 8102140:	607a      	str	r2, [r7, #4]
 8102142:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8102144:	68b8      	ldr	r0, [r7, #8]
 8102146:	f7ff ffea 	bl	810211e <_ZSt7forwardIRZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 810214a:	4680      	mov	r8, r0
 810214c:	6878      	ldr	r0, [r7, #4]
 810214e:	f7ff ff3e 	bl	8101fce <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8102152:	4603      	mov	r3, r0
 8102154:	881e      	ldrh	r6, [r3, #0]
 8102156:	6838      	ldr	r0, [r7, #0]
 8102158:	f7ff ff44 	bl	8101fe4 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 810215c:	4604      	mov	r4, r0
 810215e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102160:	f7ff ff4b 	bl	8101ffa <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8102164:	4603      	mov	r3, r0
 8102166:	781d      	ldrb	r5, [r3, #0]
 8102168:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810216a:	f7ff ff46 	bl	8101ffa <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810216e:	4603      	mov	r3, r0
 8102170:	781b      	ldrb	r3, [r3, #0]
 8102172:	9304      	str	r3, [sp, #16]
 8102174:	9503      	str	r5, [sp, #12]
 8102176:	466d      	mov	r5, sp
 8102178:	f104 0308 	add.w	r3, r4, #8
 810217c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8102180:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8102184:	e894 000c 	ldmia.w	r4, {r2, r3}
 8102188:	4631      	mov	r1, r6
 810218a:	4640      	mov	r0, r8
 810218c:	f7fe ffce 	bl	810112c <_ZZN29EthernetConnectionManagerTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>
 8102190:	bf00      	nop
 8102192:	3710      	adds	r7, #16
 8102194:	46bd      	mov	sp, r7
 8102196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810219a <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 810219a:	b580      	push	{r7, lr}
 810219c:	b082      	sub	sp, #8
 810219e:	af00      	add	r7, sp, #0
 81021a0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 81021a2:	6878      	ldr	r0, [r7, #4]
 81021a4:	f7fe fe86 	bl	8100eb4 <_ZNSt9_Any_data9_M_accessEv>
 81021a8:	4603      	mov	r3, r0
 81021aa:	4618      	mov	r0, r3
 81021ac:	3708      	adds	r7, #8
 81021ae:	46bd      	mov	sp, r7
 81021b0:	bd80      	pop	{r7, pc}

081021b2 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 81021b2:	b590      	push	{r4, r7, lr}
 81021b4:	b083      	sub	sp, #12
 81021b6:	af00      	add	r7, sp, #0
 81021b8:	6078      	str	r0, [r7, #4]
 81021ba:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 81021bc:	6838      	ldr	r0, [r7, #0]
 81021be:	f000 f816 	bl	81021ee <_ZSt7forwardIRKZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 81021c2:	4603      	mov	r3, r0
 81021c4:	4622      	mov	r2, r4
 81021c6:	4619      	mov	r1, r3
 81021c8:	6878      	ldr	r0, [r7, #4]
 81021ca:	f000 f81b 	bl	8102204 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 81021ce:	bf00      	nop
 81021d0:	370c      	adds	r7, #12
 81021d2:	46bd      	mov	sp, r7
 81021d4:	bd90      	pop	{r4, r7, pc}

081021d6 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 81021d6:	b580      	push	{r7, lr}
 81021d8:	b082      	sub	sp, #8
 81021da:	af00      	add	r7, sp, #0
 81021dc:	6078      	str	r0, [r7, #4]
 81021de:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 81021e0:	6878      	ldr	r0, [r7, #4]
 81021e2:	f000 f828 	bl	8102236 <_ZNSt9_Any_data9_M_accessIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
	}
 81021e6:	bf00      	nop
 81021e8:	3708      	adds	r7, #8
 81021ea:	46bd      	mov	sp, r7
 81021ec:	bd80      	pop	{r7, pc}

081021ee <_ZSt7forwardIRKZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81021ee:	b480      	push	{r7}
 81021f0:	b083      	sub	sp, #12
 81021f2:	af00      	add	r7, sp, #0
 81021f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81021f6:	687b      	ldr	r3, [r7, #4]
 81021f8:	4618      	mov	r0, r3
 81021fa:	370c      	adds	r7, #12
 81021fc:	46bd      	mov	sp, r7
 81021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102202:	4770      	bx	lr

08102204 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8102204:	b590      	push	{r4, r7, lr}
 8102206:	b085      	sub	sp, #20
 8102208:	af00      	add	r7, sp, #0
 810220a:	60f8      	str	r0, [r7, #12]
 810220c:	60b9      	str	r1, [r7, #8]
 810220e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8102210:	68f8      	ldr	r0, [r7, #12]
 8102212:	f7fe fe4f 	bl	8100eb4 <_ZNSt9_Any_data9_M_accessEv>
 8102216:	4603      	mov	r3, r0
 8102218:	4619      	mov	r1, r3
 810221a:	2004      	movs	r0, #4
 810221c:	f7fe fe3e 	bl	8100e9c <_ZnwjPv>
 8102220:	4604      	mov	r4, r0
 8102222:	68b8      	ldr	r0, [r7, #8]
 8102224:	f7ff ffe3 	bl	81021ee <_ZSt7forwardIRKZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 8102228:	4603      	mov	r3, r0
 810222a:	681b      	ldr	r3, [r3, #0]
 810222c:	6023      	str	r3, [r4, #0]
	  }
 810222e:	bf00      	nop
 8102230:	3714      	adds	r7, #20
 8102232:	46bd      	mov	sp, r7
 8102234:	bd90      	pop	{r4, r7, pc}

08102236 <_ZNSt9_Any_data9_M_accessIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 8102236:	b580      	push	{r7, lr}
 8102238:	b082      	sub	sp, #8
 810223a:	af00      	add	r7, sp, #0
 810223c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810223e:	6878      	ldr	r0, [r7, #4]
 8102240:	f7fe fe38 	bl	8100eb4 <_ZNSt9_Any_data9_M_accessEv>
 8102244:	4603      	mov	r3, r0
 8102246:	4618      	mov	r0, r3
 8102248:	3708      	adds	r7, #8
 810224a:	46bd      	mov	sp, r7
 810224c:	bd80      	pop	{r7, pc}

0810224e <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 810224e:	b480      	push	{r7}
 8102250:	b083      	sub	sp, #12
 8102252:	af00      	add	r7, sp, #0
 8102254:	6078      	str	r0, [r7, #4]
 8102256:	687b      	ldr	r3, [r7, #4]
 8102258:	689b      	ldr	r3, [r3, #8]
 810225a:	2b00      	cmp	r3, #0
 810225c:	bf0c      	ite	eq
 810225e:	2301      	moveq	r3, #1
 8102260:	2300      	movne	r3, #0
 8102262:	b2db      	uxtb	r3, r3
 8102264:	4618      	mov	r0, r3
 8102266:	370c      	adds	r7, #12
 8102268:	46bd      	mov	sp, r7
 810226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810226e:	4770      	bx	lr

08102270 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>:
#include "EventBus.h"

extern QueueHandle_t queueToEventManagerCM4;

EventBus::EventBus(QueueHandle_t queueSelf, EEventClient senderSelf)
 8102270:	b480      	push	{r7}
 8102272:	b085      	sub	sp, #20
 8102274:	af00      	add	r7, sp, #0
 8102276:	60f8      	str	r0, [r7, #12]
 8102278:	60b9      	str	r1, [r7, #8]
 810227a:	4613      	mov	r3, r2
 810227c:	71fb      	strb	r3, [r7, #7]
					 : queue_self(queueSelf),
 810227e:	68fb      	ldr	r3, [r7, #12]
 8102280:	68ba      	ldr	r2, [r7, #8]
 8102282:	601a      	str	r2, [r3, #0]
					   sender_self(senderSelf),
 8102284:	68fb      	ldr	r3, [r7, #12]
 8102286:	79fa      	ldrb	r2, [r7, #7]
 8102288:	711a      	strb	r2, [r3, #4]
					   queue_event_manager(queueToEventManagerCM4){}
 810228a:	4b05      	ldr	r3, [pc, #20]	@ (81022a0 <_ZN8EventBusC1EP15QueueDefinition12EEventClient+0x30>)
 810228c:	681a      	ldr	r2, [r3, #0]
 810228e:	68fb      	ldr	r3, [r7, #12]
 8102290:	609a      	str	r2, [r3, #8]
 8102292:	68fb      	ldr	r3, [r7, #12]
 8102294:	4618      	mov	r0, r3
 8102296:	3714      	adds	r7, #20
 8102298:	46bd      	mov	sp, r7
 810229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810229e:	4770      	bx	lr
 81022a0:	100001b0 	.word	0x100001b0

081022a4 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>:

bool EventBus::send(EEventType event, UMessageData message, EEventClient eventReceiver)
{
 81022a4:	b082      	sub	sp, #8
 81022a6:	b5b0      	push	{r4, r5, r7, lr}
 81022a8:	b08a      	sub	sp, #40	@ 0x28
 81022aa:	af00      	add	r7, sp, #0
 81022ac:	6078      	str	r0, [r7, #4]
 81022ae:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 81022b2:	e880 000c 	stmia.w	r0, {r2, r3}
 81022b6:	460b      	mov	r3, r1
 81022b8:	807b      	strh	r3, [r7, #2]
	if(queue_event_manager)
 81022ba:	687b      	ldr	r3, [r7, #4]
 81022bc:	689b      	ldr	r3, [r3, #8]
 81022be:	2b00      	cmp	r3, #0
 81022c0:	d021      	beq.n	8102306 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x62>
	{
		SMessage msg = {event, message, sender_self, eventReceiver};
 81022c2:	887b      	ldrh	r3, [r7, #2]
 81022c4:	813b      	strh	r3, [r7, #8]
 81022c6:	f107 040c 	add.w	r4, r7, #12
 81022ca:	f107 0538 	add.w	r5, r7, #56	@ 0x38
 81022ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81022d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81022d2:	682b      	ldr	r3, [r5, #0]
 81022d4:	6023      	str	r3, [r4, #0]
 81022d6:	687b      	ldr	r3, [r7, #4]
 81022d8:	791b      	ldrb	r3, [r3, #4]
 81022da:	f887 3020 	strb.w	r3, [r7, #32]
 81022de:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 81022e2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		BaseType_t ret = xQueueSend(queue_event_manager, static_cast<void*>(&msg), static_cast<TickType_t>(10));
 81022e6:	687b      	ldr	r3, [r7, #4]
 81022e8:	6898      	ldr	r0, [r3, #8]
 81022ea:	f107 0108 	add.w	r1, r7, #8
 81022ee:	2300      	movs	r3, #0
 81022f0:	220a      	movs	r2, #10
 81022f2:	f00c fde7 	bl	810eec4 <xQueueGenericSend>
 81022f6:	6278      	str	r0, [r7, #36]	@ 0x24
		if( ret != pdPASS)
 81022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81022fa:	2b01      	cmp	r3, #1
 81022fc:	d001      	beq.n	8102302 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x5e>
		{
			return false;
 81022fe:	2300      	movs	r3, #0
 8102300:	e002      	b.n	8102308 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x64>
		}
		return true;
 8102302:	2301      	movs	r3, #1
 8102304:	e000      	b.n	8102308 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x64>
	}
	return false;
 8102306:	2300      	movs	r3, #0
}
 8102308:	4618      	mov	r0, r3
 810230a:	3728      	adds	r7, #40	@ 0x28
 810230c:	46bd      	mov	sp, r7
 810230e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8102312:	b002      	add	sp, #8
 8102314:	4770      	bx	lr

08102316 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>:

void EventBus::receive(OnEventFunction on_event_function)
{
 8102316:	b5b0      	push	{r4, r5, r7, lr}
 8102318:	b090      	sub	sp, #64	@ 0x40
 810231a:	af06      	add	r7, sp, #24
 810231c:	6078      	str	r0, [r7, #4]
 810231e:	6039      	str	r1, [r7, #0]
	if(queue_self)
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	681b      	ldr	r3, [r3, #0]
 8102324:	2b00      	cmp	r3, #0
 8102326:	d027      	beq.n	8102378 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x62>
	{
		SMessage msg;
		BaseType_t ret = pdTRUE;
 8102328:	2301      	movs	r3, #1
 810232a:	627b      	str	r3, [r7, #36]	@ 0x24

		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 810232c:	e014      	b.n	8102358 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x42>
		{
			on_event_function(msg.event_type, msg.message_data, msg.event_sender, msg.event_receiver);
 810232e:	893d      	ldrh	r5, [r7, #8]
 8102330:	f897 3020 	ldrb.w	r3, [r7, #32]
 8102334:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8102338:	9204      	str	r2, [sp, #16]
 810233a:	9303      	str	r3, [sp, #12]
 810233c:	466c      	mov	r4, sp
 810233e:	f107 0314 	add.w	r3, r7, #20
 8102342:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8102346:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810234a:	f107 030c 	add.w	r3, r7, #12
 810234e:	cb0c      	ldmia	r3, {r2, r3}
 8102350:	4629      	mov	r1, r5
 8102352:	6838      	ldr	r0, [r7, #0]
 8102354:	f000 f814 	bl	8102380 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_>
		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 8102358:	687b      	ldr	r3, [r7, #4]
 810235a:	681b      	ldr	r3, [r3, #0]
 810235c:	f107 0108 	add.w	r1, r7, #8
 8102360:	2200      	movs	r2, #0
 8102362:	4618      	mov	r0, r3
 8102364:	f00c ffde 	bl	810f324 <xQueueReceive>
 8102368:	4603      	mov	r3, r0
 810236a:	2b01      	cmp	r3, #1
 810236c:	bf0c      	ite	eq
 810236e:	2301      	moveq	r3, #1
 8102370:	2300      	movne	r3, #0
 8102372:	b2db      	uxtb	r3, r3
 8102374:	2b00      	cmp	r3, #0
 8102376:	d1da      	bne.n	810232e <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x18>
		}
	}
}
 8102378:	bf00      	nop
 810237a:	3728      	adds	r7, #40	@ 0x28
 810237c:	46bd      	mov	sp, r7
 810237e:	bdb0      	pop	{r4, r5, r7, pc}

08102380 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8102380:	b082      	sub	sp, #8
 8102382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8102386:	b085      	sub	sp, #20
 8102388:	af02      	add	r7, sp, #8
 810238a:	6078      	str	r0, [r7, #4]
 810238c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8102390:	e880 000c 	stmia.w	r0, {r2, r3}
 8102394:	460b      	mov	r3, r1
 8102396:	807b      	strh	r3, [r7, #2]
      {
	if (_M_empty())
 8102398:	687b      	ldr	r3, [r7, #4]
 810239a:	4618      	mov	r0, r3
 810239c:	f7ff ff57 	bl	810224e <_ZNKSt14_Function_base8_M_emptyEv>
 81023a0:	4603      	mov	r3, r0
 81023a2:	2b00      	cmp	r3, #0
 81023a4:	d001      	beq.n	81023aa <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_+0x2a>
	  __throw_bad_function_call();
 81023a6:	f01a feb1 	bl	811d10c <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 81023aa:	687b      	ldr	r3, [r7, #4]
 81023ac:	68dc      	ldr	r4, [r3, #12]
 81023ae:	687d      	ldr	r5, [r7, #4]
 81023b0:	1cbb      	adds	r3, r7, #2
 81023b2:	4618      	mov	r0, r3
 81023b4:	f7ff fe0b 	bl	8101fce <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 81023b8:	4606      	mov	r6, r0
 81023ba:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 81023be:	f7ff fe11 	bl	8101fe4 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 81023c2:	4680      	mov	r8, r0
 81023c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 81023c8:	4618      	mov	r0, r3
 81023ca:	f7ff fe16 	bl	8101ffa <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81023ce:	4681      	mov	r9, r0
 81023d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 81023d4:	4618      	mov	r0, r3
 81023d6:	f7ff fe10 	bl	8101ffa <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81023da:	4603      	mov	r3, r0
 81023dc:	9300      	str	r3, [sp, #0]
 81023de:	464b      	mov	r3, r9
 81023e0:	4642      	mov	r2, r8
 81023e2:	4631      	mov	r1, r6
 81023e4:	4628      	mov	r0, r5
 81023e6:	47a0      	blx	r4
 81023e8:	bf00      	nop
      }
 81023ea:	370c      	adds	r7, #12
 81023ec:	46bd      	mov	sp, r7
 81023ee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81023f2:	b002      	add	sp, #8
 81023f4:	4770      	bx	lr

081023f6 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 81023f6:	b580      	push	{r7, lr}
 81023f8:	b082      	sub	sp, #8
 81023fa:	af00      	add	r7, sp, #0
 81023fc:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	2200      	movs	r2, #0
 8102402:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8102404:	6878      	ldr	r0, [r7, #4]
 8102406:	f000 f805 	bl	8102414 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	4618      	mov	r0, r3
 810240e:	3708      	adds	r7, #8
 8102410:	46bd      	mov	sp, r7
 8102412:	bd80      	pop	{r7, pc}

08102414 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8102414:	b480      	push	{r7}
 8102416:	b083      	sub	sp, #12
 8102418:	af00      	add	r7, sp, #0
 810241a:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	2200      	movs	r2, #0
 8102420:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8102422:	687a      	ldr	r2, [r7, #4]
 8102424:	687b      	ldr	r3, [r7, #4]
 8102426:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8102428:	687a      	ldr	r2, [r7, #4]
 810242a:	687b      	ldr	r3, [r7, #4]
 810242c:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	2200      	movs	r2, #0
 8102432:	611a      	str	r2, [r3, #16]
    }
 8102434:	bf00      	nop
 8102436:	370c      	adds	r7, #12
 8102438:	46bd      	mov	sp, r7
 810243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810243e:	4770      	bx	lr

08102440 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8102440:	b580      	push	{r7, lr}
 8102442:	b082      	sub	sp, #8
 8102444:	af00      	add	r7, sp, #0
 8102446:	6078      	str	r0, [r7, #4]
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	4618      	mov	r0, r3
 810244c:	f000 f936 	bl	81026bc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8102450:	687b      	ldr	r3, [r7, #4]
 8102452:	4618      	mov	r0, r3
 8102454:	3708      	adds	r7, #8
 8102456:	46bd      	mov	sp, r7
 8102458:	bd80      	pop	{r7, pc}

0810245a <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 810245a:	b580      	push	{r7, lr}
 810245c:	b082      	sub	sp, #8
 810245e:	af00      	add	r7, sp, #0
 8102460:	6078      	str	r0, [r7, #4]
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	4618      	mov	r0, r3
 8102466:	f7ff ffeb 	bl	8102440 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 810246a:	687b      	ldr	r3, [r7, #4]
 810246c:	4618      	mov	r0, r3
 810246e:	3708      	adds	r7, #8
 8102470:	46bd      	mov	sp, r7
 8102472:	bd80      	pop	{r7, pc}

08102474 <_ZN19EventManagerCM4TaskC1Ev>:
		/* event queues of clients */
		EVENT_QUEUE_DAEMON_NATIVE = EVENT_CLIENT_DAEMON_NATIVE,
		EVENT_QUEUE_ETHERNET_CONNECTION_MANAGER = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER
	};

	EventManagerCM4Task() {};
 8102474:	b580      	push	{r7, lr}
 8102476:	b082      	sub	sp, #8
 8102478:	af00      	add	r7, sp, #0
 810247a:	6078      	str	r0, [r7, #4]
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	4618      	mov	r0, r3
 8102480:	f7ff ffeb 	bl	810245a <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8102484:	687b      	ldr	r3, [r7, #4]
 8102486:	4618      	mov	r0, r3
 8102488:	3708      	adds	r7, #8
 810248a:	46bd      	mov	sp, r7
 810248c:	bd80      	pop	{r7, pc}
	...

08102490 <_Z20StartTask_EventMgrM4Pv>:
extern QueueHandle_t queueToEventManagerCM4;
extern QueueHandle_t queueToNativeDaemon;
extern QueueHandle_t queueToEthernetConnMgr;

void StartTask_EventMgrM4(void *argument)
{
 8102490:	b580      	push	{r7, lr}
 8102492:	b088      	sub	sp, #32
 8102494:	af00      	add	r7, sp, #0
 8102496:	6078      	str	r0, [r7, #4]
	EventManagerCM4Task eventManagerInstance;
 8102498:	f107 0308 	add.w	r3, r7, #8
 810249c:	4618      	mov	r0, r3
 810249e:	f7ff ffe9 	bl	8102474 <_ZN19EventManagerCM4TaskC1Ev>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_DAEMON_NATIVE, queueToNativeDaemon);
 81024a2:	4b0d      	ldr	r3, [pc, #52]	@ (81024d8 <_Z20StartTask_EventMgrM4Pv+0x48>)
 81024a4:	681a      	ldr	r2, [r3, #0]
 81024a6:	f107 0308 	add.w	r3, r7, #8
 81024aa:	2107      	movs	r1, #7
 81024ac:	4618      	mov	r0, r3
 81024ae:	f000 f817 	bl	81024e0 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_ETHERNET_CONNECTION_MANAGER, queueToEthernetConnMgr);
 81024b2:	4b0a      	ldr	r3, [pc, #40]	@ (81024dc <_Z20StartTask_EventMgrM4Pv+0x4c>)
 81024b4:	681a      	ldr	r2, [r3, #0]
 81024b6:	f107 0308 	add.w	r3, r7, #8
 81024ba:	2103      	movs	r1, #3
 81024bc:	4618      	mov	r0, r3
 81024be:	f000 f80f 	bl	81024e0 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>

	for(;;)
	{
		eventManagerInstance.process();
 81024c2:	f107 0308 	add.w	r3, r7, #8
 81024c6:	4618      	mov	r0, r3
 81024c8:	f000 f81d 	bl	8102506 <_ZN19EventManagerCM4Task7processEv>
		osDelay(1);
 81024cc:	2001      	movs	r0, #1
 81024ce:	f00b f9e8 	bl	810d8a2 <osDelay>
		eventManagerInstance.process();
 81024d2:	bf00      	nop
 81024d4:	e7f5      	b.n	81024c2 <_Z20StartTask_EventMgrM4Pv+0x32>
 81024d6:	bf00      	nop
 81024d8:	100001b4 	.word	0x100001b4
 81024dc:	100001b8 	.word	0x100001b8

081024e0 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>:
	}
}


void EventManagerCM4Task::addQueue(EEventQueue eventClient, QueueHandle_t queueHandle)
{
 81024e0:	b580      	push	{r7, lr}
 81024e2:	b086      	sub	sp, #24
 81024e4:	af00      	add	r7, sp, #0
 81024e6:	60f8      	str	r0, [r7, #12]
 81024e8:	460b      	mov	r3, r1
 81024ea:	607a      	str	r2, [r7, #4]
 81024ec:	72fb      	strb	r3, [r7, #11]
	queue_handles.emplace(eventClient, queueHandle);
 81024ee:	68f9      	ldr	r1, [r7, #12]
 81024f0:	f107 0010 	add.w	r0, r7, #16
 81024f4:	1d3b      	adds	r3, r7, #4
 81024f6:	f107 020b 	add.w	r2, r7, #11
 81024fa:	f000 f8f4 	bl	81026e6 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>
}
 81024fe:	bf00      	nop
 8102500:	3718      	adds	r7, #24
 8102502:	46bd      	mov	sp, r7
 8102504:	bd80      	pop	{r7, pc}

08102506 <_ZN19EventManagerCM4Task7processEv>:
	queue_handles.erase(eventClient);
}


void EventManagerCM4Task::process()
{
 8102506:	b580      	push	{r7, lr}
 8102508:	b086      	sub	sp, #24
 810250a:	af00      	add	r7, sp, #0
 810250c:	6078      	str	r0, [r7, #4]
	send(receive());
 810250e:	f107 030c 	add.w	r3, r7, #12
 8102512:	6879      	ldr	r1, [r7, #4]
 8102514:	4618      	mov	r0, r3
 8102516:	f000 f835 	bl	8102584 <_ZN19EventManagerCM4Task7receiveEv>
 810251a:	f107 030c 	add.w	r3, r7, #12
 810251e:	4619      	mov	r1, r3
 8102520:	6878      	ldr	r0, [r7, #4]
 8102522:	f000 f855 	bl	81025d0 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>
 8102526:	f107 030c 	add.w	r3, r7, #12
 810252a:	4618      	mov	r0, r3
 810252c:	f000 f8f5 	bl	810271a <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>
}
 8102530:	bf00      	nop
 8102532:	3718      	adds	r7, #24
 8102534:	46bd      	mov	sp, r7
 8102536:	bd80      	pop	{r7, pc}

08102538 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8102538:	b580      	push	{r7, lr}
 810253a:	b082      	sub	sp, #8
 810253c:	af00      	add	r7, sp, #0
 810253e:	6078      	str	r0, [r7, #4]
 8102540:	6878      	ldr	r0, [r7, #4]
 8102542:	f000 f915 	bl	8102770 <_ZNSaI8SMessageED1Ev>
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	4618      	mov	r0, r3
 810254a:	3708      	adds	r7, #8
 810254c:	46bd      	mov	sp, r7
 810254e:	bd80      	pop	{r7, pc}

08102550 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8102550:	b580      	push	{r7, lr}
 8102552:	b082      	sub	sp, #8
 8102554:	af00      	add	r7, sp, #0
 8102556:	6078      	str	r0, [r7, #4]
 8102558:	687b      	ldr	r3, [r7, #4]
 810255a:	4618      	mov	r0, r3
 810255c:	f000 f8f8 	bl	8102750 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>
 8102560:	687b      	ldr	r3, [r7, #4]
 8102562:	4618      	mov	r0, r3
 8102564:	3708      	adds	r7, #8
 8102566:	46bd      	mov	sp, r7
 8102568:	bd80      	pop	{r7, pc}

0810256a <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 810256a:	b580      	push	{r7, lr}
 810256c:	b082      	sub	sp, #8
 810256e:	af00      	add	r7, sp, #0
 8102570:	6078      	str	r0, [r7, #4]
 8102572:	687b      	ldr	r3, [r7, #4]
 8102574:	4618      	mov	r0, r3
 8102576:	f7ff ffeb 	bl	8102550 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	4618      	mov	r0, r3
 810257e:	3708      	adds	r7, #8
 8102580:	46bd      	mov	sp, r7
 8102582:	bd80      	pop	{r7, pc}

08102584 <_ZN19EventManagerCM4Task7receiveEv>:

std::vector<SMessage> EventManagerCM4Task::receive()
{
 8102584:	b580      	push	{r7, lr}
 8102586:	b08a      	sub	sp, #40	@ 0x28
 8102588:	af00      	add	r7, sp, #0
 810258a:	6078      	str	r0, [r7, #4]
 810258c:	6039      	str	r1, [r7, #0]
	std::vector<SMessage> receivedMessages;
 810258e:	6878      	ldr	r0, [r7, #4]
 8102590:	f7ff ffeb 	bl	810256a <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>
	SMessage msg;

	BaseType_t ret = pdTRUE;
 8102594:	2301      	movs	r3, #1
 8102596:	627b      	str	r3, [r7, #36]	@ 0x24
	do
	{
		ret = xQueueReceive(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(0));
 8102598:	4b0c      	ldr	r3, [pc, #48]	@ (81025cc <_ZN19EventManagerCM4Task7receiveEv+0x48>)
 810259a:	681b      	ldr	r3, [r3, #0]
 810259c:	f107 0108 	add.w	r1, r7, #8
 81025a0:	2200      	movs	r2, #0
 81025a2:	4618      	mov	r0, r3
 81025a4:	f00c febe 	bl	810f324 <xQueueReceive>
 81025a8:	6278      	str	r0, [r7, #36]	@ 0x24
		if(ret == pdTRUE)
 81025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81025ac:	2b01      	cmp	r3, #1
 81025ae:	d105      	bne.n	81025bc <_ZN19EventManagerCM4Task7receiveEv+0x38>
		{
			receivedMessages.push_back(msg);
 81025b0:	f107 0308 	add.w	r3, r7, #8
 81025b4:	4619      	mov	r1, r3
 81025b6:	6878      	ldr	r0, [r7, #4]
 81025b8:	f000 f904 	bl	81027c4 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>
		}
	} while(ret == pdTRUE);
 81025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81025be:	2b01      	cmp	r3, #1
 81025c0:	d0ea      	beq.n	8102598 <_ZN19EventManagerCM4Task7receiveEv+0x14>

	return receivedMessages;
 81025c2:	bf00      	nop
}
 81025c4:	6878      	ldr	r0, [r7, #4]
 81025c6:	3728      	adds	r7, #40	@ 0x28
 81025c8:	46bd      	mov	sp, r7
 81025ca:	bd80      	pop	{r7, pc}
 81025cc:	100001b0 	.word	0x100001b0

081025d0 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>:

void EventManagerCM4Task::send(const std::vector<SMessage>& messages)
{
 81025d0:	b5b0      	push	{r4, r5, r7, lr}
 81025d2:	b092      	sub	sp, #72	@ 0x48
 81025d4:	af00      	add	r7, sp, #0
 81025d6:	6078      	str	r0, [r7, #4]
 81025d8:	6039      	str	r1, [r7, #0]
	for(auto msg : messages)
 81025da:	683b      	ldr	r3, [r7, #0]
 81025dc:	643b      	str	r3, [r7, #64]	@ 0x40
 81025de:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 81025e0:	f000 f916 	bl	8102810 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>
 81025e4:	4603      	mov	r3, r0
 81025e6:	61bb      	str	r3, [r7, #24]
 81025e8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 81025ea:	f000 f921 	bl	8102830 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>
 81025ee:	4603      	mov	r3, r0
 81025f0:	617b      	str	r3, [r7, #20]
 81025f2:	e053      	b.n	810269c <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xcc>
 81025f4:	f107 0318 	add.w	r3, r7, #24
 81025f8:	4618      	mov	r0, r3
 81025fa:	f000 f953 	bl	81028a4 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 81025fe:	4603      	mov	r3, r0
 8102600:	f107 041c 	add.w	r4, r7, #28
 8102604:	461d      	mov	r5, r3
 8102606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810260a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 810260e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	{
		auto eventReceiver = static_cast<EEventQueue>(msg.event_receiver);
 8102612:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8102616:	74fb      	strb	r3, [r7, #19]
		auto it = queue_handles.find(eventReceiver);
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	f107 0213 	add.w	r2, r7, #19
 810261e:	4611      	mov	r1, r2
 8102620:	4618      	mov	r0, r3
 8102622:	f000 f94b 	bl	81028bc <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 8102626:	4603      	mov	r3, r0
 8102628:	60fb      	str	r3, [r7, #12]

		QueueHandle_t targetQueue;

		if(it != queue_handles.end())
 810262a:	687b      	ldr	r3, [r7, #4]
 810262c:	4618      	mov	r0, r3
 810262e:	f000 f954 	bl	81028da <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8102632:	4603      	mov	r3, r0
 8102634:	63bb      	str	r3, [r7, #56]	@ 0x38
 8102636:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 810263a:	f107 030c 	add.w	r3, r7, #12
 810263e:	4611      	mov	r1, r2
 8102640:	4618      	mov	r0, r3
 8102642:	f000 f957 	bl	81028f4 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8102646:	4603      	mov	r3, r0
 8102648:	2b00      	cmp	r3, #0
 810264a:	d00a      	beq.n	8102662 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x92>
		{
			targetQueue = queue_handles[eventReceiver];
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	f107 0213 	add.w	r2, r7, #19
 8102652:	4611      	mov	r1, r2
 8102654:	4618      	mov	r0, r3
 8102656:	f000 f961 	bl	810291c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 810265a:	4603      	mov	r3, r0
 810265c:	681b      	ldr	r3, [r3, #0]
 810265e:	647b      	str	r3, [r7, #68]	@ 0x44
 8102660:	e00c      	b.n	810267c <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xac>
		}
		else
		{
			// if receiver not found, then it means i has to be on CM7 side, so send to IPC connection damon.
			targetQueue = queue_handles[EVENT_QUEUE_DAEMON_NATIVE];
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	2207      	movs	r2, #7
 8102666:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 810266a:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 810266e:	4611      	mov	r1, r2
 8102670:	4618      	mov	r0, r3
 8102672:	f000 f9af 	bl	81029d4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_>
 8102676:	4603      	mov	r3, r0
 8102678:	681b      	ldr	r3, [r3, #0]
 810267a:	647b      	str	r3, [r7, #68]	@ 0x44
		}

		if(targetQueue)
 810267c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810267e:	2b00      	cmp	r3, #0
 8102680:	d007      	beq.n	8102692 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xc2>
		{
			xQueueSend(targetQueue, static_cast<void*>(&msg), portMAX_DELAY);
 8102682:	f107 011c 	add.w	r1, r7, #28
 8102686:	2300      	movs	r3, #0
 8102688:	f04f 32ff 	mov.w	r2, #4294967295
 810268c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810268e:	f00c fc19 	bl	810eec4 <xQueueGenericSend>
	for(auto msg : messages)
 8102692:	f107 0318 	add.w	r3, r7, #24
 8102696:	4618      	mov	r0, r3
 8102698:	f000 f8f3 	bl	8102882 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 810269c:	f107 0214 	add.w	r2, r7, #20
 81026a0:	f107 0318 	add.w	r3, r7, #24
 81026a4:	4611      	mov	r1, r2
 81026a6:	4618      	mov	r0, r3
 81026a8:	f000 f8d3 	bl	8102852 <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 81026ac:	4603      	mov	r3, r0
 81026ae:	2b00      	cmp	r3, #0
 81026b0:	d1a0      	bne.n	81025f4 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x24>
		}
	}
}
 81026b2:	bf00      	nop
 81026b4:	bf00      	nop
 81026b6:	3748      	adds	r7, #72	@ 0x48
 81026b8:	46bd      	mov	sp, r7
 81026ba:	bdb0      	pop	{r4, r5, r7, pc}

081026bc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 81026bc:	b580      	push	{r7, lr}
 81026be:	b082      	sub	sp, #8
 81026c0:	af00      	add	r7, sp, #0
 81026c2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 81026c4:	6878      	ldr	r0, [r7, #4]
 81026c6:	f000 f9e5 	bl	8102a94 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 81026ca:	687b      	ldr	r3, [r7, #4]
 81026cc:	4618      	mov	r0, r3
 81026ce:	f000 f9ed 	bl	8102aac <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>
 81026d2:	687b      	ldr	r3, [r7, #4]
 81026d4:	3304      	adds	r3, #4
 81026d6:	4618      	mov	r0, r3
 81026d8:	f7ff fe8d 	bl	81023f6 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 81026dc:	687b      	ldr	r3, [r7, #4]
 81026de:	4618      	mov	r0, r3
 81026e0:	3708      	adds	r7, #8
 81026e2:	46bd      	mov	sp, r7
 81026e4:	bd80      	pop	{r7, pc}

081026e6 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>:
       *
       *  Insertion requires logarithmic time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 81026e6:	b5b0      	push	{r4, r5, r7, lr}
 81026e8:	b084      	sub	sp, #16
 81026ea:	af00      	add	r7, sp, #0
 81026ec:	60f8      	str	r0, [r7, #12]
 81026ee:	60b9      	str	r1, [r7, #8]
 81026f0:	607a      	str	r2, [r7, #4]
 81026f2:	603b      	str	r3, [r7, #0]
		      }
		    return {__i, false};
		  }
	      }
#endif
	  return _M_t._M_emplace_unique(std::forward<_Args>(__args)...);
 81026f4:	68bc      	ldr	r4, [r7, #8]
 81026f6:	6878      	ldr	r0, [r7, #4]
 81026f8:	f000 f9ef 	bl	8102ada <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81026fc:	4605      	mov	r5, r0
 81026fe:	6838      	ldr	r0, [r7, #0]
 8102700:	f000 f9f6 	bl	8102af0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102704:	4603      	mov	r3, r0
 8102706:	68f8      	ldr	r0, [r7, #12]
 8102708:	462a      	mov	r2, r5
 810270a:	4621      	mov	r1, r4
 810270c:	f000 f9fb 	bl	8102b06 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>
 8102710:	bf00      	nop
	}
 8102712:	68f8      	ldr	r0, [r7, #12]
 8102714:	3710      	adds	r7, #16
 8102716:	46bd      	mov	sp, r7
 8102718:	bdb0      	pop	{r4, r5, r7, pc}

0810271a <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 810271a:	b5b0      	push	{r4, r5, r7, lr}
 810271c:	b082      	sub	sp, #8
 810271e:	af00      	add	r7, sp, #0
 8102720:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	681c      	ldr	r4, [r3, #0]
 8102726:	687b      	ldr	r3, [r7, #4]
 8102728:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 810272a:	687b      	ldr	r3, [r7, #4]
 810272c:	4618      	mov	r0, r3
 810272e:	f000 fa3f 	bl	8102bb0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8102732:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8102734:	461a      	mov	r2, r3
 8102736:	4629      	mov	r1, r5
 8102738:	4620      	mov	r0, r4
 810273a:	f000 fa44 	bl	8102bc6 <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	4618      	mov	r0, r3
 8102742:	f000 f821 	bl	8102788 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>
 8102746:	687b      	ldr	r3, [r7, #4]
 8102748:	4618      	mov	r0, r3
 810274a:	3708      	adds	r7, #8
 810274c:	46bd      	mov	sp, r7
 810274e:	bdb0      	pop	{r4, r5, r7, pc}

08102750 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8102750:	b580      	push	{r7, lr}
 8102752:	b082      	sub	sp, #8
 8102754:	af00      	add	r7, sp, #0
 8102756:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8102758:	6878      	ldr	r0, [r7, #4]
 810275a:	f000 fa42 	bl	8102be2 <_ZNSaI8SMessageEC1Ev>
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	4618      	mov	r0, r3
 8102762:	f000 fa4a 	bl	8102bfa <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8102766:	687b      	ldr	r3, [r7, #4]
 8102768:	4618      	mov	r0, r3
 810276a:	3708      	adds	r7, #8
 810276c:	46bd      	mov	sp, r7
 810276e:	bd80      	pop	{r7, pc}

08102770 <_ZNSaI8SMessageED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8102770:	b580      	push	{r7, lr}
 8102772:	b082      	sub	sp, #8
 8102774:	af00      	add	r7, sp, #0
 8102776:	6078      	str	r0, [r7, #4]
 8102778:	6878      	ldr	r0, [r7, #4]
 810277a:	f000 fa52 	bl	8102c22 <_ZNSt15__new_allocatorI8SMessageED1Ev>
 810277e:	687b      	ldr	r3, [r7, #4]
 8102780:	4618      	mov	r0, r3
 8102782:	3708      	adds	r7, #8
 8102784:	46bd      	mov	sp, r7
 8102786:	bd80      	pop	{r7, pc}

08102788 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8102788:	b580      	push	{r7, lr}
 810278a:	b082      	sub	sp, #8
 810278c:	af00      	add	r7, sp, #0
 810278e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8102794:	687b      	ldr	r3, [r7, #4]
 8102796:	689a      	ldr	r2, [r3, #8]
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	681b      	ldr	r3, [r3, #0]
 810279c:	1ad3      	subs	r3, r2, r3
 810279e:	109b      	asrs	r3, r3, #2
 81027a0:	4a07      	ldr	r2, [pc, #28]	@ (81027c0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev+0x38>)
 81027a2:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 81027a6:	461a      	mov	r2, r3
 81027a8:	6878      	ldr	r0, [r7, #4]
 81027aa:	f000 fa45 	bl	8102c38 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      }
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	4618      	mov	r0, r3
 81027b2:	f7ff fec1 	bl	8102538 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	4618      	mov	r0, r3
 81027ba:	3708      	adds	r7, #8
 81027bc:	46bd      	mov	sp, r7
 81027be:	bd80      	pop	{r7, pc}
 81027c0:	b6db6db7 	.word	0xb6db6db7

081027c4 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 81027c4:	b580      	push	{r7, lr}
 81027c6:	b082      	sub	sp, #8
 81027c8:	af00      	add	r7, sp, #0
 81027ca:	6078      	str	r0, [r7, #4]
 81027cc:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 81027ce:	687b      	ldr	r3, [r7, #4]
 81027d0:	685a      	ldr	r2, [r3, #4]
 81027d2:	687b      	ldr	r3, [r7, #4]
 81027d4:	689b      	ldr	r3, [r3, #8]
 81027d6:	429a      	cmp	r2, r3
 81027d8:	d00d      	beq.n	81027f6 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 81027da:	6878      	ldr	r0, [r7, #4]
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	685b      	ldr	r3, [r3, #4]
 81027e0:	683a      	ldr	r2, [r7, #0]
 81027e2:	4619      	mov	r1, r3
 81027e4:	f000 fa3b 	bl	8102c5e <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 81027e8:	687b      	ldr	r3, [r7, #4]
 81027ea:	685b      	ldr	r3, [r3, #4]
 81027ec:	f103 021c 	add.w	r2, r3, #28
 81027f0:	687b      	ldr	r3, [r7, #4]
 81027f2:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 81027f4:	e008      	b.n	8102808 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 81027f6:	6878      	ldr	r0, [r7, #4]
 81027f8:	f000 fa44 	bl	8102c84 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 81027fc:	4603      	mov	r3, r0
 81027fe:	683a      	ldr	r2, [r7, #0]
 8102800:	4619      	mov	r1, r3
 8102802:	6878      	ldr	r0, [r7, #4]
 8102804:	f000 fa66 	bl	8102cd4 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8102808:	bf00      	nop
 810280a:	3708      	adds	r7, #8
 810280c:	46bd      	mov	sp, r7
 810280e:	bd80      	pop	{r7, pc}

08102810 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8102810:	b580      	push	{r7, lr}
 8102812:	b084      	sub	sp, #16
 8102814:	af00      	add	r7, sp, #0
 8102816:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8102818:	687a      	ldr	r2, [r7, #4]
 810281a:	f107 030c 	add.w	r3, r7, #12
 810281e:	4611      	mov	r1, r2
 8102820:	4618      	mov	r0, r3
 8102822:	f000 fb1f 	bl	8102e64 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8102826:	68fb      	ldr	r3, [r7, #12]
 8102828:	4618      	mov	r0, r3
 810282a:	3710      	adds	r7, #16
 810282c:	46bd      	mov	sp, r7
 810282e:	bd80      	pop	{r7, pc}

08102830 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8102830:	b580      	push	{r7, lr}
 8102832:	b084      	sub	sp, #16
 8102834:	af00      	add	r7, sp, #0
 8102836:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	1d1a      	adds	r2, r3, #4
 810283c:	f107 030c 	add.w	r3, r7, #12
 8102840:	4611      	mov	r1, r2
 8102842:	4618      	mov	r0, r3
 8102844:	f000 fb0e 	bl	8102e64 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8102848:	68fb      	ldr	r3, [r7, #12]
 810284a:	4618      	mov	r0, r3
 810284c:	3710      	adds	r7, #16
 810284e:	46bd      	mov	sp, r7
 8102850:	bd80      	pop	{r7, pc}

08102852 <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8102852:	b590      	push	{r4, r7, lr}
 8102854:	b083      	sub	sp, #12
 8102856:	af00      	add	r7, sp, #0
 8102858:	6078      	str	r0, [r7, #4]
 810285a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 810285c:	6878      	ldr	r0, [r7, #4]
 810285e:	f000 fb11 	bl	8102e84 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8102862:	4603      	mov	r3, r0
 8102864:	681c      	ldr	r4, [r3, #0]
 8102866:	6838      	ldr	r0, [r7, #0]
 8102868:	f000 fb0c 	bl	8102e84 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 810286c:	4603      	mov	r3, r0
 810286e:	681b      	ldr	r3, [r3, #0]
 8102870:	429c      	cmp	r4, r3
 8102872:	bf14      	ite	ne
 8102874:	2301      	movne	r3, #1
 8102876:	2300      	moveq	r3, #0
 8102878:	b2db      	uxtb	r3, r3
 810287a:	4618      	mov	r0, r3
 810287c:	370c      	adds	r7, #12
 810287e:	46bd      	mov	sp, r7
 8102880:	bd90      	pop	{r4, r7, pc}

08102882 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8102882:	b480      	push	{r7}
 8102884:	b083      	sub	sp, #12
 8102886:	af00      	add	r7, sp, #0
 8102888:	6078      	str	r0, [r7, #4]
	++_M_current;
 810288a:	687b      	ldr	r3, [r7, #4]
 810288c:	681b      	ldr	r3, [r3, #0]
 810288e:	f103 021c 	add.w	r2, r3, #28
 8102892:	687b      	ldr	r3, [r7, #4]
 8102894:	601a      	str	r2, [r3, #0]
	return *this;
 8102896:	687b      	ldr	r3, [r7, #4]
      }
 8102898:	4618      	mov	r0, r3
 810289a:	370c      	adds	r7, #12
 810289c:	46bd      	mov	sp, r7
 810289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028a2:	4770      	bx	lr

081028a4 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 81028a4:	b480      	push	{r7}
 81028a6:	b083      	sub	sp, #12
 81028a8:	af00      	add	r7, sp, #0
 81028aa:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 81028ac:	687b      	ldr	r3, [r7, #4]
 81028ae:	681b      	ldr	r3, [r3, #0]
 81028b0:	4618      	mov	r0, r3
 81028b2:	370c      	adds	r7, #12
 81028b4:	46bd      	mov	sp, r7
 81028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028ba:	4770      	bx	lr

081028bc <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 81028bc:	b580      	push	{r7, lr}
 81028be:	b082      	sub	sp, #8
 81028c0:	af00      	add	r7, sp, #0
 81028c2:	6078      	str	r0, [r7, #4]
 81028c4:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 81028c6:	687b      	ldr	r3, [r7, #4]
 81028c8:	6839      	ldr	r1, [r7, #0]
 81028ca:	4618      	mov	r0, r3
 81028cc:	f000 fae5 	bl	8102e9a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 81028d0:	4603      	mov	r3, r0
 81028d2:	4618      	mov	r0, r3
 81028d4:	3708      	adds	r7, #8
 81028d6:	46bd      	mov	sp, r7
 81028d8:	bd80      	pop	{r7, pc}

081028da <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 81028da:	b580      	push	{r7, lr}
 81028dc:	b082      	sub	sp, #8
 81028de:	af00      	add	r7, sp, #0
 81028e0:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 81028e2:	687b      	ldr	r3, [r7, #4]
 81028e4:	4618      	mov	r0, r3
 81028e6:	f000 fb14 	bl	8102f12 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 81028ea:	4603      	mov	r3, r0
 81028ec:	4618      	mov	r0, r3
 81028ee:	3708      	adds	r7, #8
 81028f0:	46bd      	mov	sp, r7
 81028f2:	bd80      	pop	{r7, pc}

081028f4 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 81028f4:	b480      	push	{r7}
 81028f6:	b083      	sub	sp, #12
 81028f8:	af00      	add	r7, sp, #0
 81028fa:	6078      	str	r0, [r7, #4]
 81028fc:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 81028fe:	687b      	ldr	r3, [r7, #4]
 8102900:	681a      	ldr	r2, [r3, #0]
 8102902:	683b      	ldr	r3, [r7, #0]
 8102904:	681b      	ldr	r3, [r3, #0]
 8102906:	429a      	cmp	r2, r3
 8102908:	bf14      	ite	ne
 810290a:	2301      	movne	r3, #1
 810290c:	2300      	moveq	r3, #0
 810290e:	b2db      	uxtb	r3, r3
 8102910:	4618      	mov	r0, r3
 8102912:	370c      	adds	r7, #12
 8102914:	46bd      	mov	sp, r7
 8102916:	f85d 7b04 	ldr.w	r7, [sp], #4
 810291a:	4770      	bx	lr

0810291c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 810291c:	b590      	push	{r4, r7, lr}
 810291e:	b08b      	sub	sp, #44	@ 0x2c
 8102920:	af02      	add	r7, sp, #8
 8102922:	6078      	str	r0, [r7, #4]
 8102924:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8102926:	6839      	ldr	r1, [r7, #0]
 8102928:	6878      	ldr	r0, [r7, #4]
 810292a:	f000 fb03 	bl	8102f34 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 810292e:	4603      	mov	r3, r0
 8102930:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8102932:	6878      	ldr	r0, [r7, #4]
 8102934:	f7ff ffd1 	bl	81028da <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8102938:	4603      	mov	r3, r0
 810293a:	60fb      	str	r3, [r7, #12]
 810293c:	f107 020c 	add.w	r2, r7, #12
 8102940:	f107 0308 	add.w	r3, r7, #8
 8102944:	4611      	mov	r1, r2
 8102946:	4618      	mov	r0, r3
 8102948:	f000 fb03 	bl	8102f52 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 810294c:	4603      	mov	r3, r0
 810294e:	2b00      	cmp	r3, #0
 8102950:	d112      	bne.n	8102978 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x5c>
 8102952:	6878      	ldr	r0, [r7, #4]
 8102954:	f000 fb11 	bl	8102f7a <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8102958:	f107 0308 	add.w	r3, r7, #8
 810295c:	4618      	mov	r0, r3
 810295e:	f000 fb19 	bl	8102f94 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8102962:	4603      	mov	r3, r0
 8102964:	461a      	mov	r2, r3
 8102966:	f107 0310 	add.w	r3, r7, #16
 810296a:	6839      	ldr	r1, [r7, #0]
 810296c:	4618      	mov	r0, r3
 810296e:	f000 fb1f 	bl	8102fb0 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102972:	4603      	mov	r3, r0
 8102974:	2b00      	cmp	r3, #0
 8102976:	d001      	beq.n	810297c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8102978:	2301      	movs	r3, #1
 810297a:	e000      	b.n	810297e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x62>
 810297c:	2300      	movs	r3, #0
 810297e:	2b00      	cmp	r3, #0
 8102980:	d01b      	beq.n	81029ba <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8102982:	687c      	ldr	r4, [r7, #4]
 8102984:	f107 0208 	add.w	r2, r7, #8
 8102988:	f107 0314 	add.w	r3, r7, #20
 810298c:	4611      	mov	r1, r2
 810298e:	4618      	mov	r0, r3
 8102990:	f000 fb32 	bl	8102ff8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8102994:	f107 0318 	add.w	r3, r7, #24
 8102998:	6839      	ldr	r1, [r7, #0]
 810299a:	4618      	mov	r0, r3
 810299c:	f000 fb1d 	bl	8102fda <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 81029a0:	f107 0218 	add.w	r2, r7, #24
 81029a4:	f107 031c 	add.w	r3, r7, #28
 81029a8:	9300      	str	r3, [sp, #0]
 81029aa:	4613      	mov	r3, r2
 81029ac:	4a08      	ldr	r2, [pc, #32]	@ (81029d0 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb4>)
 81029ae:	6979      	ldr	r1, [r7, #20]
 81029b0:	4620      	mov	r0, r4
 81029b2:	f000 fb31 	bl	8103018 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 81029b6:	4603      	mov	r3, r0
 81029b8:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 81029ba:	f107 0308 	add.w	r3, r7, #8
 81029be:	4618      	mov	r0, r3
 81029c0:	f000 fae8 	bl	8102f94 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 81029c4:	4603      	mov	r3, r0
 81029c6:	3304      	adds	r3, #4
      }
 81029c8:	4618      	mov	r0, r3
 81029ca:	3724      	adds	r7, #36	@ 0x24
 81029cc:	46bd      	mov	sp, r7
 81029ce:	bd90      	pop	{r4, r7, pc}
 81029d0:	081224a8 	.word	0x081224a8

081029d4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_>:
      operator[](key_type&& __k)
 81029d4:	b590      	push	{r4, r7, lr}
 81029d6:	b08b      	sub	sp, #44	@ 0x2c
 81029d8:	af02      	add	r7, sp, #8
 81029da:	6078      	str	r0, [r7, #4]
 81029dc:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 81029de:	6839      	ldr	r1, [r7, #0]
 81029e0:	6878      	ldr	r0, [r7, #4]
 81029e2:	f000 faa7 	bl	8102f34 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 81029e6:	4603      	mov	r3, r0
 81029e8:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 81029ea:	6878      	ldr	r0, [r7, #4]
 81029ec:	f7ff ff75 	bl	81028da <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 81029f0:	4603      	mov	r3, r0
 81029f2:	60fb      	str	r3, [r7, #12]
 81029f4:	f107 020c 	add.w	r2, r7, #12
 81029f8:	f107 0308 	add.w	r3, r7, #8
 81029fc:	4611      	mov	r1, r2
 81029fe:	4618      	mov	r0, r3
 8102a00:	f000 faa7 	bl	8102f52 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8102a04:	4603      	mov	r3, r0
 8102a06:	2b00      	cmp	r3, #0
 8102a08:	d112      	bne.n	8102a30 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x5c>
 8102a0a:	6878      	ldr	r0, [r7, #4]
 8102a0c:	f000 fab5 	bl	8102f7a <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8102a10:	f107 0308 	add.w	r3, r7, #8
 8102a14:	4618      	mov	r0, r3
 8102a16:	f000 fabd 	bl	8102f94 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8102a1a:	4603      	mov	r3, r0
 8102a1c:	461a      	mov	r2, r3
 8102a1e:	f107 0310 	add.w	r3, r7, #16
 8102a22:	6839      	ldr	r1, [r7, #0]
 8102a24:	4618      	mov	r0, r3
 8102a26:	f000 fac3 	bl	8102fb0 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102a2a:	4603      	mov	r3, r0
 8102a2c:	2b00      	cmp	r3, #0
 8102a2e:	d001      	beq.n	8102a34 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x60>
 8102a30:	2301      	movs	r3, #1
 8102a32:	e000      	b.n	8102a36 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x62>
 8102a34:	2300      	movs	r3, #0
 8102a36:	2b00      	cmp	r3, #0
 8102a38:	d01f      	beq.n	8102a7a <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8102a3a:	687c      	ldr	r4, [r7, #4]
 8102a3c:	f107 0208 	add.w	r2, r7, #8
 8102a40:	f107 0314 	add.w	r3, r7, #20
 8102a44:	4611      	mov	r1, r2
 8102a46:	4618      	mov	r0, r3
 8102a48:	f000 fad6 	bl	8102ff8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					std::forward_as_tuple(std::move(__k)),
 8102a4c:	6838      	ldr	r0, [r7, #0]
 8102a4e:	f000 fb29 	bl	81030a4 <_ZSt4moveIRN19EventManagerCM4Task11EEventQueueEEONSt16remove_referenceIT_E4typeEOS4_>
 8102a52:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8102a54:	f107 0318 	add.w	r3, r7, #24
 8102a58:	4611      	mov	r1, r2
 8102a5a:	4618      	mov	r0, r3
 8102a5c:	f000 fb3d 	bl	81030da <_ZSt16forward_as_tupleIJN19EventManagerCM4Task11EEventQueueEEESt5tupleIJDpOT_EES5_>
 8102a60:	f107 0218 	add.w	r2, r7, #24
 8102a64:	f107 031c 	add.w	r3, r7, #28
 8102a68:	9300      	str	r3, [sp, #0]
 8102a6a:	4613      	mov	r3, r2
 8102a6c:	4a08      	ldr	r2, [pc, #32]	@ (8102a90 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0xbc>)
 8102a6e:	6979      	ldr	r1, [r7, #20]
 8102a70:	4620      	mov	r0, r4
 8102a72:	f000 fb43 	bl	81030fc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8102a76:	4603      	mov	r3, r0
 8102a78:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8102a7a:	f107 0308 	add.w	r3, r7, #8
 8102a7e:	4618      	mov	r0, r3
 8102a80:	f000 fa88 	bl	8102f94 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8102a84:	4603      	mov	r3, r0
 8102a86:	3304      	adds	r3, #4
      }
 8102a88:	4618      	mov	r0, r3
 8102a8a:	3724      	adds	r7, #36	@ 0x24
 8102a8c:	46bd      	mov	sp, r7
 8102a8e:	bd90      	pop	{r4, r7, pc}
 8102a90:	081224a8 	.word	0x081224a8

08102a94 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8102a94:	b580      	push	{r7, lr}
 8102a96:	b082      	sub	sp, #8
 8102a98:	af00      	add	r7, sp, #0
 8102a9a:	6078      	str	r0, [r7, #4]
 8102a9c:	6878      	ldr	r0, [r7, #4]
 8102a9e:	f000 fb73 	bl	8103188 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 8102aa2:	687b      	ldr	r3, [r7, #4]
 8102aa4:	4618      	mov	r0, r3
 8102aa6:	3708      	adds	r7, #8
 8102aa8:	46bd      	mov	sp, r7
 8102aaa:	bd80      	pop	{r7, pc}

08102aac <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>:
      _Rb_tree_key_compare()
 8102aac:	b480      	push	{r7}
 8102aae:	b083      	sub	sp, #12
 8102ab0:	af00      	add	r7, sp, #0
 8102ab2:	6078      	str	r0, [r7, #4]
      { }
 8102ab4:	687b      	ldr	r3, [r7, #4]
 8102ab6:	4618      	mov	r0, r3
 8102ab8:	370c      	adds	r7, #12
 8102aba:	46bd      	mov	sp, r7
 8102abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ac0:	4770      	bx	lr

08102ac2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8102ac2:	b580      	push	{r7, lr}
 8102ac4:	b082      	sub	sp, #8
 8102ac6:	af00      	add	r7, sp, #0
 8102ac8:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 8102aca:	6878      	ldr	r0, [r7, #4]
 8102acc:	f000 fb90 	bl	81031f0 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>
 8102ad0:	4603      	mov	r3, r0
 8102ad2:	4618      	mov	r0, r3
 8102ad4:	3708      	adds	r7, #8
 8102ad6:	46bd      	mov	sp, r7
 8102ad8:	bd80      	pop	{r7, pc}

08102ada <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102ada:	b480      	push	{r7}
 8102adc:	b083      	sub	sp, #12
 8102ade:	af00      	add	r7, sp, #0
 8102ae0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	4618      	mov	r0, r3
 8102ae6:	370c      	adds	r7, #12
 8102ae8:	46bd      	mov	sp, r7
 8102aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aee:	4770      	bx	lr

08102af0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102af0:	b480      	push	{r7}
 8102af2:	b083      	sub	sp, #12
 8102af4:	af00      	add	r7, sp, #0
 8102af6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	4618      	mov	r0, r3
 8102afc:	370c      	adds	r7, #12
 8102afe:	46bd      	mov	sp, r7
 8102b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b04:	4770      	bx	lr

08102b06 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102b06:	b590      	push	{r4, r7, lr}
 8102b08:	b08d      	sub	sp, #52	@ 0x34
 8102b0a:	af00      	add	r7, sp, #0
 8102b0c:	60f8      	str	r0, [r7, #12]
 8102b0e:	60b9      	str	r1, [r7, #8]
 8102b10:	607a      	str	r2, [r7, #4]
 8102b12:	603b      	str	r3, [r7, #0]
      _M_emplace_unique(_Args&&... __args)
      -> pair<iterator, bool>
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8102b14:	6878      	ldr	r0, [r7, #4]
 8102b16:	f7ff ffe0 	bl	8102ada <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102b1a:	4604      	mov	r4, r0
 8102b1c:	6838      	ldr	r0, [r7, #0]
 8102b1e:	f7ff ffe7 	bl	8102af0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102b22:	4603      	mov	r3, r0
 8102b24:	f107 0018 	add.w	r0, r7, #24
 8102b28:	4622      	mov	r2, r4
 8102b2a:	68b9      	ldr	r1, [r7, #8]
 8102b2c:	f000 fb6c 	bl	8103208 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>
	auto __res = _M_get_insert_unique_pos(__z._M_key());
 8102b30:	f107 0318 	add.w	r3, r7, #24
 8102b34:	4618      	mov	r0, r3
 8102b36:	f000 fc20 	bl	810337a <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8102b3a:	4602      	mov	r2, r0
 8102b3c:	f107 0310 	add.w	r3, r7, #16
 8102b40:	68b9      	ldr	r1, [r7, #8]
 8102b42:	4618      	mov	r0, r3
 8102b44:	f000 fb94 	bl	8103270 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
	if (__res.second)
 8102b48:	697b      	ldr	r3, [r7, #20]
 8102b4a:	2b00      	cmp	r3, #0
 8102b4c:	d015      	beq.n	8102b7a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x74>
	  return {__z._M_insert(__res), true};
 8102b4e:	f107 0018 	add.w	r0, r7, #24
 8102b52:	f107 0310 	add.w	r3, r7, #16
 8102b56:	e893 0006 	ldmia.w	r3, {r1, r2}
 8102b5a:	f000 fc1c 	bl	8103396 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8102b5e:	4603      	mov	r3, r0
 8102b60:	623b      	str	r3, [r7, #32]
 8102b62:	2301      	movs	r3, #1
 8102b64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8102b68:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 8102b6c:	f107 0320 	add.w	r3, r7, #32
 8102b70:	4619      	mov	r1, r3
 8102b72:	68f8      	ldr	r0, [r7, #12]
 8102b74:	f000 fc28 	bl	81033c8 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
 8102b78:	e011      	b.n	8102b9e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x98>
	return {iterator(__res.first), false};
 8102b7a:	693a      	ldr	r2, [r7, #16]
 8102b7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102b80:	4611      	mov	r1, r2
 8102b82:	4618      	mov	r0, r3
 8102b84:	f000 fc39 	bl	81033fa <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102b88:	2300      	movs	r3, #0
 8102b8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8102b8e:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 8102b92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102b96:	4619      	mov	r1, r3
 8102b98:	68f8      	ldr	r0, [r7, #12]
 8102b9a:	f000 fc15 	bl	81033c8 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
      }
 8102b9e:	f107 0318 	add.w	r3, r7, #24
 8102ba2:	4618      	mov	r0, r3
 8102ba4:	f000 fb4f 	bl	8103246 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8102ba8:	68f8      	ldr	r0, [r7, #12]
 8102baa:	3734      	adds	r7, #52	@ 0x34
 8102bac:	46bd      	mov	sp, r7
 8102bae:	bd90      	pop	{r4, r7, pc}

08102bb0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8102bb0:	b480      	push	{r7}
 8102bb2:	b083      	sub	sp, #12
 8102bb4:	af00      	add	r7, sp, #0
 8102bb6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8102bb8:	687b      	ldr	r3, [r7, #4]
 8102bba:	4618      	mov	r0, r3
 8102bbc:	370c      	adds	r7, #12
 8102bbe:	46bd      	mov	sp, r7
 8102bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bc4:	4770      	bx	lr

08102bc6 <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8102bc6:	b580      	push	{r7, lr}
 8102bc8:	b084      	sub	sp, #16
 8102bca:	af00      	add	r7, sp, #0
 8102bcc:	60f8      	str	r0, [r7, #12]
 8102bce:	60b9      	str	r1, [r7, #8]
 8102bd0:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8102bd2:	68b9      	ldr	r1, [r7, #8]
 8102bd4:	68f8      	ldr	r0, [r7, #12]
 8102bd6:	f000 fc2b 	bl	8103430 <_ZSt8_DestroyIP8SMessageEvT_S2_>
    }
 8102bda:	bf00      	nop
 8102bdc:	3710      	adds	r7, #16
 8102bde:	46bd      	mov	sp, r7
 8102be0:	bd80      	pop	{r7, pc}

08102be2 <_ZNSaI8SMessageEC1Ev>:
 8102be2:	b580      	push	{r7, lr}
 8102be4:	b082      	sub	sp, #8
 8102be6:	af00      	add	r7, sp, #0
 8102be8:	6078      	str	r0, [r7, #4]
 8102bea:	6878      	ldr	r0, [r7, #4]
 8102bec:	f000 fc2d 	bl	810344a <_ZNSt15__new_allocatorI8SMessageEC1Ev>
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	4618      	mov	r0, r3
 8102bf4:	3708      	adds	r7, #8
 8102bf6:	46bd      	mov	sp, r7
 8102bf8:	bd80      	pop	{r7, pc}

08102bfa <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8102bfa:	b480      	push	{r7}
 8102bfc:	b083      	sub	sp, #12
 8102bfe:	af00      	add	r7, sp, #0
 8102c00:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8102c02:	687b      	ldr	r3, [r7, #4]
 8102c04:	2200      	movs	r2, #0
 8102c06:	601a      	str	r2, [r3, #0]
 8102c08:	687b      	ldr	r3, [r7, #4]
 8102c0a:	2200      	movs	r2, #0
 8102c0c:	605a      	str	r2, [r3, #4]
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	2200      	movs	r2, #0
 8102c12:	609a      	str	r2, [r3, #8]
	{ }
 8102c14:	687b      	ldr	r3, [r7, #4]
 8102c16:	4618      	mov	r0, r3
 8102c18:	370c      	adds	r7, #12
 8102c1a:	46bd      	mov	sp, r7
 8102c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c20:	4770      	bx	lr

08102c22 <_ZNSt15__new_allocatorI8SMessageED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8102c22:	b480      	push	{r7}
 8102c24:	b083      	sub	sp, #12
 8102c26:	af00      	add	r7, sp, #0
 8102c28:	6078      	str	r0, [r7, #4]
 8102c2a:	687b      	ldr	r3, [r7, #4]
 8102c2c:	4618      	mov	r0, r3
 8102c2e:	370c      	adds	r7, #12
 8102c30:	46bd      	mov	sp, r7
 8102c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c36:	4770      	bx	lr

08102c38 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8102c38:	b580      	push	{r7, lr}
 8102c3a:	b084      	sub	sp, #16
 8102c3c:	af00      	add	r7, sp, #0
 8102c3e:	60f8      	str	r0, [r7, #12]
 8102c40:	60b9      	str	r1, [r7, #8]
 8102c42:	607a      	str	r2, [r7, #4]
	if (__p)
 8102c44:	68bb      	ldr	r3, [r7, #8]
 8102c46:	2b00      	cmp	r3, #0
 8102c48:	d005      	beq.n	8102c56 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8102c4a:	68fb      	ldr	r3, [r7, #12]
 8102c4c:	687a      	ldr	r2, [r7, #4]
 8102c4e:	68b9      	ldr	r1, [r7, #8]
 8102c50:	4618      	mov	r0, r3
 8102c52:	f000 fc05 	bl	8103460 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>
      }
 8102c56:	bf00      	nop
 8102c58:	3710      	adds	r7, #16
 8102c5a:	46bd      	mov	sp, r7
 8102c5c:	bd80      	pop	{r7, pc}

08102c5e <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8102c5e:	b580      	push	{r7, lr}
 8102c60:	b084      	sub	sp, #16
 8102c62:	af00      	add	r7, sp, #0
 8102c64:	60f8      	str	r0, [r7, #12]
 8102c66:	60b9      	str	r1, [r7, #8]
 8102c68:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8102c6a:	6878      	ldr	r0, [r7, #4]
 8102c6c:	f000 fc07 	bl	810347e <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8102c70:	4603      	mov	r3, r0
 8102c72:	461a      	mov	r2, r3
 8102c74:	68b9      	ldr	r1, [r7, #8]
 8102c76:	68f8      	ldr	r0, [r7, #12]
 8102c78:	f000 fc0c 	bl	8103494 <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>
	}
 8102c7c:	bf00      	nop
 8102c7e:	3710      	adds	r7, #16
 8102c80:	46bd      	mov	sp, r7
 8102c82:	bd80      	pop	{r7, pc}

08102c84 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8102c84:	b580      	push	{r7, lr}
 8102c86:	b084      	sub	sp, #16
 8102c88:	af00      	add	r7, sp, #0
 8102c8a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8102c8c:	687b      	ldr	r3, [r7, #4]
 8102c8e:	1d1a      	adds	r2, r3, #4
 8102c90:	f107 030c 	add.w	r3, r7, #12
 8102c94:	4611      	mov	r1, r2
 8102c96:	4618      	mov	r0, r3
 8102c98:	f000 fc17 	bl	81034ca <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8102c9c:	68fb      	ldr	r3, [r7, #12]
 8102c9e:	4618      	mov	r0, r3
 8102ca0:	3710      	adds	r7, #16
 8102ca2:	46bd      	mov	sp, r7
 8102ca4:	bd80      	pop	{r7, pc}

08102ca6 <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8102ca6:	b580      	push	{r7, lr}
 8102ca8:	b082      	sub	sp, #8
 8102caa:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8102cac:	4618      	mov	r0, r3
 8102cae:	f000 f805 	bl	8102cbc <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8102cb2:	4603      	mov	r3, r0
      }
 8102cb4:	4618      	mov	r0, r3
 8102cb6:	3708      	adds	r7, #8
 8102cb8:	46bd      	mov	sp, r7
 8102cba:	bd80      	pop	{r7, pc}

08102cbc <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8102cbc:	b480      	push	{r7}
 8102cbe:	b083      	sub	sp, #12
 8102cc0:	af00      	add	r7, sp, #0
 8102cc2:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8102cc4:	2301      	movs	r3, #1
      }
 8102cc6:	4618      	mov	r0, r3
 8102cc8:	370c      	adds	r7, #12
 8102cca:	46bd      	mov	sp, r7
 8102ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cd0:	4770      	bx	lr
	...

08102cd4 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8102cd4:	b5b0      	push	{r4, r5, r7, lr}
 8102cd6:	b08c      	sub	sp, #48	@ 0x30
 8102cd8:	af00      	add	r7, sp, #0
 8102cda:	60f8      	str	r0, [r7, #12]
 8102cdc:	60b9      	str	r1, [r7, #8]
 8102cde:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8102ce0:	4a5e      	ldr	r2, [pc, #376]	@ (8102e5c <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 8102ce2:	2101      	movs	r1, #1
 8102ce4:	68f8      	ldr	r0, [r7, #12]
 8102ce6:	f000 fc00 	bl	81034ea <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>
 8102cea:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8102cec:	68fb      	ldr	r3, [r7, #12]
 8102cee:	681b      	ldr	r3, [r3, #0]
 8102cf0:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8102cf2:	68fb      	ldr	r3, [r7, #12]
 8102cf4:	685b      	ldr	r3, [r3, #4]
 8102cf6:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8102cf8:	68f8      	ldr	r0, [r7, #12]
 8102cfa:	f000 fc3d 	bl	8103578 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 8102cfe:	4603      	mov	r3, r0
 8102d00:	617b      	str	r3, [r7, #20]
 8102d02:	f107 0214 	add.w	r2, r7, #20
 8102d06:	f107 0308 	add.w	r3, r7, #8
 8102d0a:	4611      	mov	r1, r2
 8102d0c:	4618      	mov	r0, r3
 8102d0e:	f000 fc43 	bl	8103598 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8102d12:	4603      	mov	r3, r0
 8102d14:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8102d16:	68fb      	ldr	r3, [r7, #12]
 8102d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8102d1a:	4618      	mov	r0, r3
 8102d1c:	f000 fc56 	bl	81035cc <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>
 8102d20:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8102d22:	69bb      	ldr	r3, [r7, #24]
 8102d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8102d26:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8102d28:	69fa      	ldr	r2, [r7, #28]
 8102d2a:	4613      	mov	r3, r2
 8102d2c:	00db      	lsls	r3, r3, #3
 8102d2e:	1a9b      	subs	r3, r3, r2
 8102d30:	009b      	lsls	r3, r3, #2
 8102d32:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8102d34:	69bb      	ldr	r3, [r7, #24]
 8102d36:	189d      	adds	r5, r3, r2
 8102d38:	6878      	ldr	r0, [r7, #4]
 8102d3a:	f000 fba0 	bl	810347e <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8102d3e:	4603      	mov	r3, r0
 8102d40:	461a      	mov	r2, r3
 8102d42:	4629      	mov	r1, r5
 8102d44:	4620      	mov	r0, r4
 8102d46:	f7ff ff8a 	bl	8102c5e <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8102d4a:	2300      	movs	r3, #0
 8102d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8102d4e:	f7ff ffaa 	bl	8102ca6 <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8102d52:	4603      	mov	r3, r0
 8102d54:	2b00      	cmp	r3, #0
 8102d56:	d027      	beq.n	8102da8 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8102d58:	f107 0308 	add.w	r3, r7, #8
 8102d5c:	4618      	mov	r0, r3
 8102d5e:	f000 fc5d 	bl	810361c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8102d62:	4603      	mov	r3, r0
 8102d64:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8102d66:	68fb      	ldr	r3, [r7, #12]
 8102d68:	4618      	mov	r0, r3
 8102d6a:	f7ff ff21 	bl	8102bb0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8102d6e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8102d70:	69ba      	ldr	r2, [r7, #24]
 8102d72:	4621      	mov	r1, r4
 8102d74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8102d76:	f000 fc3d 	bl	81035f4 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8102d7a:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8102d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102d7e:	331c      	adds	r3, #28
 8102d80:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8102d82:	f107 0308 	add.w	r3, r7, #8
 8102d86:	4618      	mov	r0, r3
 8102d88:	f000 fc48 	bl	810361c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8102d8c:	4603      	mov	r3, r0
 8102d8e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8102d90:	68fb      	ldr	r3, [r7, #12]
 8102d92:	4618      	mov	r0, r3
 8102d94:	f7ff ff0c 	bl	8102bb0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8102d98:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8102d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102d9c:	6a39      	ldr	r1, [r7, #32]
 8102d9e:	4620      	mov	r0, r4
 8102da0:	f000 fc28 	bl	81035f4 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8102da4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8102da6:	e026      	b.n	8102df6 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8102da8:	f107 0308 	add.w	r3, r7, #8
 8102dac:	4618      	mov	r0, r3
 8102dae:	f000 fc35 	bl	810361c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8102db2:	4603      	mov	r3, r0
 8102db4:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8102db6:	68fb      	ldr	r3, [r7, #12]
 8102db8:	4618      	mov	r0, r3
 8102dba:	f7ff fef9 	bl	8102bb0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8102dbe:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8102dc0:	69ba      	ldr	r2, [r7, #24]
 8102dc2:	4621      	mov	r1, r4
 8102dc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8102dc6:	f000 fc34 	bl	8103632 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8102dca:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8102dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102dce:	331c      	adds	r3, #28
 8102dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8102dd2:	f107 0308 	add.w	r3, r7, #8
 8102dd6:	4618      	mov	r0, r3
 8102dd8:	f000 fc20 	bl	810361c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8102ddc:	4603      	mov	r3, r0
 8102dde:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8102de0:	68fb      	ldr	r3, [r7, #12]
 8102de2:	4618      	mov	r0, r3
 8102de4:	f7ff fee4 	bl	8102bb0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8102de8:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8102dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102dec:	6a39      	ldr	r1, [r7, #32]
 8102dee:	4620      	mov	r0, r4
 8102df0:	f000 fc1f 	bl	8103632 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8102df4:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8102df6:	f7ff ff56 	bl	8102ca6 <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8102dfa:	4603      	mov	r3, r0
 8102dfc:	f083 0301 	eor.w	r3, r3, #1
 8102e00:	b2db      	uxtb	r3, r3
 8102e02:	2b00      	cmp	r3, #0
 8102e04:	d009      	beq.n	8102e1a <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8102e06:	68fb      	ldr	r3, [r7, #12]
 8102e08:	4618      	mov	r0, r3
 8102e0a:	f7ff fed1 	bl	8102bb0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8102e0e:	4603      	mov	r3, r0
 8102e10:	461a      	mov	r2, r3
 8102e12:	6a39      	ldr	r1, [r7, #32]
 8102e14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8102e16:	f7ff fed6 	bl	8102bc6 <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8102e1a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8102e1c:	68fb      	ldr	r3, [r7, #12]
 8102e1e:	689a      	ldr	r2, [r3, #8]
 8102e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102e22:	1ad3      	subs	r3, r2, r3
 8102e24:	109b      	asrs	r3, r3, #2
 8102e26:	4a0e      	ldr	r2, [pc, #56]	@ (8102e60 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 8102e28:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8102e2c:	461a      	mov	r2, r3
 8102e2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8102e30:	f7ff ff02 	bl	8102c38 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8102e34:	68fb      	ldr	r3, [r7, #12]
 8102e36:	69ba      	ldr	r2, [r7, #24]
 8102e38:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8102e3a:	68fb      	ldr	r3, [r7, #12]
 8102e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102e3e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8102e40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8102e42:	4613      	mov	r3, r2
 8102e44:	00db      	lsls	r3, r3, #3
 8102e46:	1a9b      	subs	r3, r3, r2
 8102e48:	009b      	lsls	r3, r3, #2
 8102e4a:	461a      	mov	r2, r3
 8102e4c:	69bb      	ldr	r3, [r7, #24]
 8102e4e:	441a      	add	r2, r3
 8102e50:	68fb      	ldr	r3, [r7, #12]
 8102e52:	609a      	str	r2, [r3, #8]
    }
 8102e54:	bf00      	nop
 8102e56:	3730      	adds	r7, #48	@ 0x30
 8102e58:	46bd      	mov	sp, r7
 8102e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8102e5c:	0811f400 	.word	0x0811f400
 8102e60:	b6db6db7 	.word	0xb6db6db7

08102e64 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8102e64:	b480      	push	{r7}
 8102e66:	b083      	sub	sp, #12
 8102e68:	af00      	add	r7, sp, #0
 8102e6a:	6078      	str	r0, [r7, #4]
 8102e6c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8102e6e:	683b      	ldr	r3, [r7, #0]
 8102e70:	681a      	ldr	r2, [r3, #0]
 8102e72:	687b      	ldr	r3, [r7, #4]
 8102e74:	601a      	str	r2, [r3, #0]
 8102e76:	687b      	ldr	r3, [r7, #4]
 8102e78:	4618      	mov	r0, r3
 8102e7a:	370c      	adds	r7, #12
 8102e7c:	46bd      	mov	sp, r7
 8102e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e82:	4770      	bx	lr

08102e84 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8102e84:	b480      	push	{r7}
 8102e86:	b083      	sub	sp, #12
 8102e88:	af00      	add	r7, sp, #0
 8102e8a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8102e8c:	687b      	ldr	r3, [r7, #4]
 8102e8e:	4618      	mov	r0, r3
 8102e90:	370c      	adds	r7, #12
 8102e92:	46bd      	mov	sp, r7
 8102e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e98:	4770      	bx	lr

08102e9a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102e9a:	b590      	push	{r4, r7, lr}
 8102e9c:	b085      	sub	sp, #20
 8102e9e:	af00      	add	r7, sp, #0
 8102ea0:	6078      	str	r0, [r7, #4]
 8102ea2:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8102ea4:	6878      	ldr	r0, [r7, #4]
 8102ea6:	f7ff fe0c 	bl	8102ac2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8102eaa:	4604      	mov	r4, r0
 8102eac:	6878      	ldr	r0, [r7, #4]
 8102eae:	f000 fbd9 	bl	8103664 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102eb2:	4602      	mov	r2, r0
 8102eb4:	683b      	ldr	r3, [r7, #0]
 8102eb6:	4621      	mov	r1, r4
 8102eb8:	6878      	ldr	r0, [r7, #4]
 8102eba:	f000 fbdf 	bl	810367c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8102ebe:	4603      	mov	r3, r0
 8102ec0:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8102ec2:	6878      	ldr	r0, [r7, #4]
 8102ec4:	f000 f825 	bl	8102f12 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8102ec8:	4603      	mov	r3, r0
 8102eca:	60fb      	str	r3, [r7, #12]
 8102ecc:	f107 020c 	add.w	r2, r7, #12
 8102ed0:	f107 0308 	add.w	r3, r7, #8
 8102ed4:	4611      	mov	r1, r2
 8102ed6:	4618      	mov	r0, r3
 8102ed8:	f000 f83b 	bl	8102f52 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8102edc:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8102ede:	2b00      	cmp	r3, #0
 8102ee0:	d10d      	bne.n	8102efe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x64>
	      || _M_impl._M_key_compare(__k,
 8102ee2:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8102ee4:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8102ee6:	4618      	mov	r0, r3
 8102ee8:	f000 fbf9 	bl	81036de <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102eec:	4603      	mov	r3, r0
 8102eee:	461a      	mov	r2, r3
 8102ef0:	6839      	ldr	r1, [r7, #0]
 8102ef2:	4620      	mov	r0, r4
 8102ef4:	f000 f85c 	bl	8102fb0 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102ef8:	4603      	mov	r3, r0
 8102efa:	2b00      	cmp	r3, #0
 8102efc:	d004      	beq.n	8102f08 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8102efe:	6878      	ldr	r0, [r7, #4]
 8102f00:	f000 f807 	bl	8102f12 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8102f04:	4603      	mov	r3, r0
 8102f06:	e000      	b.n	8102f0a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x70>
 8102f08:	68bb      	ldr	r3, [r7, #8]
    }
 8102f0a:	4618      	mov	r0, r3
 8102f0c:	3714      	adds	r7, #20
 8102f0e:	46bd      	mov	sp, r7
 8102f10:	bd90      	pop	{r4, r7, pc}

08102f12 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8102f12:	b580      	push	{r7, lr}
 8102f14:	b084      	sub	sp, #16
 8102f16:	af00      	add	r7, sp, #0
 8102f18:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8102f1a:	687b      	ldr	r3, [r7, #4]
 8102f1c:	1d1a      	adds	r2, r3, #4
 8102f1e:	f107 030c 	add.w	r3, r7, #12
 8102f22:	4611      	mov	r1, r2
 8102f24:	4618      	mov	r0, r3
 8102f26:	f000 fa68 	bl	81033fa <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102f2a:	68fb      	ldr	r3, [r7, #12]
 8102f2c:	4618      	mov	r0, r3
 8102f2e:	3710      	adds	r7, #16
 8102f30:	46bd      	mov	sp, r7
 8102f32:	bd80      	pop	{r7, pc}

08102f34 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8102f34:	b580      	push	{r7, lr}
 8102f36:	b082      	sub	sp, #8
 8102f38:	af00      	add	r7, sp, #0
 8102f3a:	6078      	str	r0, [r7, #4]
 8102f3c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8102f3e:	687b      	ldr	r3, [r7, #4]
 8102f40:	6839      	ldr	r1, [r7, #0]
 8102f42:	4618      	mov	r0, r3
 8102f44:	f000 fbd7 	bl	81036f6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8102f48:	4603      	mov	r3, r0
 8102f4a:	4618      	mov	r0, r3
 8102f4c:	3708      	adds	r7, #8
 8102f4e:	46bd      	mov	sp, r7
 8102f50:	bd80      	pop	{r7, pc}

08102f52 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8102f52:	b480      	push	{r7}
 8102f54:	b083      	sub	sp, #12
 8102f56:	af00      	add	r7, sp, #0
 8102f58:	6078      	str	r0, [r7, #4]
 8102f5a:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8102f5c:	687b      	ldr	r3, [r7, #4]
 8102f5e:	681a      	ldr	r2, [r3, #0]
 8102f60:	683b      	ldr	r3, [r7, #0]
 8102f62:	681b      	ldr	r3, [r3, #0]
 8102f64:	429a      	cmp	r2, r3
 8102f66:	bf0c      	ite	eq
 8102f68:	2301      	moveq	r3, #1
 8102f6a:	2300      	movne	r3, #0
 8102f6c:	b2db      	uxtb	r3, r3
 8102f6e:	4618      	mov	r0, r3
 8102f70:	370c      	adds	r7, #12
 8102f72:	46bd      	mov	sp, r7
 8102f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f78:	4770      	bx	lr

08102f7a <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8102f7a:	b590      	push	{r4, r7, lr}
 8102f7c:	b083      	sub	sp, #12
 8102f7e:	af00      	add	r7, sp, #0
 8102f80:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8102f82:	687b      	ldr	r3, [r7, #4]
 8102f84:	4618      	mov	r0, r3
 8102f86:	f000 fbcd 	bl	8103724 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8102f8a:	bf00      	nop
 8102f8c:	4620      	mov	r0, r4
 8102f8e:	370c      	adds	r7, #12
 8102f90:	46bd      	mov	sp, r7
 8102f92:	bd90      	pop	{r4, r7, pc}

08102f94 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8102f94:	b580      	push	{r7, lr}
 8102f96:	b082      	sub	sp, #8
 8102f98:	af00      	add	r7, sp, #0
 8102f9a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	4618      	mov	r0, r3
 8102fa2:	f000 fbca 	bl	810373a <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102fa6:	4603      	mov	r3, r0
 8102fa8:	4618      	mov	r0, r3
 8102faa:	3708      	adds	r7, #8
 8102fac:	46bd      	mov	sp, r7
 8102fae:	bd80      	pop	{r7, pc}

08102fb0 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8102fb0:	b480      	push	{r7}
 8102fb2:	b085      	sub	sp, #20
 8102fb4:	af00      	add	r7, sp, #0
 8102fb6:	60f8      	str	r0, [r7, #12]
 8102fb8:	60b9      	str	r1, [r7, #8]
 8102fba:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8102fbc:	68bb      	ldr	r3, [r7, #8]
 8102fbe:	781a      	ldrb	r2, [r3, #0]
 8102fc0:	687b      	ldr	r3, [r7, #4]
 8102fc2:	781b      	ldrb	r3, [r3, #0]
 8102fc4:	429a      	cmp	r2, r3
 8102fc6:	bf34      	ite	cc
 8102fc8:	2301      	movcc	r3, #1
 8102fca:	2300      	movcs	r3, #0
 8102fcc:	b2db      	uxtb	r3, r3
 8102fce:	4618      	mov	r0, r3
 8102fd0:	3714      	adds	r7, #20
 8102fd2:	46bd      	mov	sp, r7
 8102fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fd8:	4770      	bx	lr

08102fda <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8102fda:	b580      	push	{r7, lr}
 8102fdc:	b082      	sub	sp, #8
 8102fde:	af00      	add	r7, sp, #0
 8102fe0:	6078      	str	r0, [r7, #4]
 8102fe2:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	6839      	ldr	r1, [r7, #0]
 8102fe8:	4618      	mov	r0, r3
 8102fea:	f000 fbb4 	bl	8103756 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	4618      	mov	r0, r3
 8102ff2:	3708      	adds	r7, #8
 8102ff4:	46bd      	mov	sp, r7
 8102ff6:	bd80      	pop	{r7, pc}

08102ff8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8102ff8:	b480      	push	{r7}
 8102ffa:	b083      	sub	sp, #12
 8102ffc:	af00      	add	r7, sp, #0
 8102ffe:	6078      	str	r0, [r7, #4]
 8103000:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8103002:	683b      	ldr	r3, [r7, #0]
 8103004:	681a      	ldr	r2, [r3, #0]
 8103006:	687b      	ldr	r3, [r7, #4]
 8103008:	601a      	str	r2, [r3, #0]
 810300a:	687b      	ldr	r3, [r7, #4]
 810300c:	4618      	mov	r0, r3
 810300e:	370c      	adds	r7, #12
 8103010:	46bd      	mov	sp, r7
 8103012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103016:	4770      	bx	lr

08103018 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8103018:	b5b0      	push	{r4, r5, r7, lr}
 810301a:	b08c      	sub	sp, #48	@ 0x30
 810301c:	af02      	add	r7, sp, #8
 810301e:	60f8      	str	r0, [r7, #12]
 8103020:	60b9      	str	r1, [r7, #8]
 8103022:	607a      	str	r2, [r7, #4]
 8103024:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8103026:	6878      	ldr	r0, [r7, #4]
 8103028:	f000 fba4 	bl	8103774 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810302c:	4604      	mov	r4, r0
 810302e:	6838      	ldr	r0, [r7, #0]
 8103030:	f000 fbab 	bl	810378a <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8103034:	4605      	mov	r5, r0
 8103036:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8103038:	f000 fbb2 	bl	81037a0 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810303c:	4603      	mov	r3, r0
 810303e:	f107 001c 	add.w	r0, r7, #28
 8103042:	9300      	str	r3, [sp, #0]
 8103044:	462b      	mov	r3, r5
 8103046:	4622      	mov	r2, r4
 8103048:	68f9      	ldr	r1, [r7, #12]
 810304a:	f000 fbb4 	bl	81037b6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 810304e:	f107 031c 	add.w	r3, r7, #28
 8103052:	4618      	mov	r0, r3
 8103054:	f000 f991 	bl	810337a <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8103058:	4603      	mov	r3, r0
 810305a:	f107 0014 	add.w	r0, r7, #20
 810305e:	68ba      	ldr	r2, [r7, #8]
 8103060:	68f9      	ldr	r1, [r7, #12]
 8103062:	f000 fbcb 	bl	81037fc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8103066:	69bb      	ldr	r3, [r7, #24]
 8103068:	2b00      	cmp	r3, #0
 810306a:	d009      	beq.n	8103080 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 810306c:	f107 001c 	add.w	r0, r7, #28
 8103070:	f107 0314 	add.w	r3, r7, #20
 8103074:	e893 0006 	ldmia.w	r3, {r1, r2}
 8103078:	f000 f98d 	bl	8103396 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 810307c:	4604      	mov	r4, r0
 810307e:	e007      	b.n	8103090 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8103080:	697a      	ldr	r2, [r7, #20]
 8103082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103086:	4611      	mov	r1, r2
 8103088:	4618      	mov	r0, r3
 810308a:	f000 f9b6 	bl	81033fa <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 810308e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8103090:	f107 031c 	add.w	r3, r7, #28
 8103094:	4618      	mov	r0, r3
 8103096:	f000 f8d6 	bl	8103246 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 810309a:	4623      	mov	r3, r4
 810309c:	4618      	mov	r0, r3
 810309e:	3728      	adds	r7, #40	@ 0x28
 81030a0:	46bd      	mov	sp, r7
 81030a2:	bdb0      	pop	{r4, r5, r7, pc}

081030a4 <_ZSt4moveIRN19EventManagerCM4Task11EEventQueueEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 81030a4:	b480      	push	{r7}
 81030a6:	b083      	sub	sp, #12
 81030a8:	af00      	add	r7, sp, #0
 81030aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 81030ac:	687b      	ldr	r3, [r7, #4]
 81030ae:	4618      	mov	r0, r3
 81030b0:	370c      	adds	r7, #12
 81030b2:	46bd      	mov	sp, r7
 81030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030b8:	4770      	bx	lr

081030ba <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 81030ba:	b580      	push	{r7, lr}
 81030bc:	b082      	sub	sp, #8
 81030be:	af00      	add	r7, sp, #0
 81030c0:	6078      	str	r0, [r7, #4]
 81030c2:	6039      	str	r1, [r7, #0]
 81030c4:	687b      	ldr	r3, [r7, #4]
 81030c6:	683a      	ldr	r2, [r7, #0]
 81030c8:	4611      	mov	r1, r2
 81030ca:	4618      	mov	r0, r3
 81030cc:	f000 fcd7 	bl	8103a7e <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>
 81030d0:	687b      	ldr	r3, [r7, #4]
 81030d2:	4618      	mov	r0, r3
 81030d4:	3708      	adds	r7, #8
 81030d6:	46bd      	mov	sp, r7
 81030d8:	bd80      	pop	{r7, pc}

081030da <_ZSt16forward_as_tupleIJN19EventManagerCM4Task11EEventQueueEEESt5tupleIJDpOT_EES5_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 81030da:	b580      	push	{r7, lr}
 81030dc:	b082      	sub	sp, #8
 81030de:	af00      	add	r7, sp, #0
 81030e0:	6078      	str	r0, [r7, #4]
 81030e2:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 81030e4:	6838      	ldr	r0, [r7, #0]
 81030e6:	f000 fcac 	bl	8103a42 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 81030ea:	4603      	mov	r3, r0
 81030ec:	4619      	mov	r1, r3
 81030ee:	6878      	ldr	r0, [r7, #4]
 81030f0:	f000 fcb2 	bl	8103a58 <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1IJS1_ELb1ELb1EEEDpOT_>
 81030f4:	6878      	ldr	r0, [r7, #4]
 81030f6:	3708      	adds	r7, #8
 81030f8:	46bd      	mov	sp, r7
 81030fa:	bd80      	pop	{r7, pc}

081030fc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81030fc:	b5b0      	push	{r4, r5, r7, lr}
 81030fe:	b08c      	sub	sp, #48	@ 0x30
 8103100:	af02      	add	r7, sp, #8
 8103102:	60f8      	str	r0, [r7, #12]
 8103104:	60b9      	str	r1, [r7, #8]
 8103106:	607a      	str	r2, [r7, #4]
 8103108:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 810310a:	6878      	ldr	r0, [r7, #4]
 810310c:	f000 fb32 	bl	8103774 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103110:	4604      	mov	r4, r0
 8103112:	6838      	ldr	r0, [r7, #0]
 8103114:	f000 fcc3 	bl	8103a9e <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8103118:	4605      	mov	r5, r0
 810311a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810311c:	f000 fb40 	bl	81037a0 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103120:	4603      	mov	r3, r0
 8103122:	f107 001c 	add.w	r0, r7, #28
 8103126:	9300      	str	r3, [sp, #0]
 8103128:	462b      	mov	r3, r5
 810312a:	4622      	mov	r2, r4
 810312c:	68f9      	ldr	r1, [r7, #12]
 810312e:	f000 fcc1 	bl	8103ab4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS1_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8103132:	f107 031c 	add.w	r3, r7, #28
 8103136:	4618      	mov	r0, r3
 8103138:	f000 f91f 	bl	810337a <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 810313c:	4603      	mov	r3, r0
 810313e:	f107 0014 	add.w	r0, r7, #20
 8103142:	68ba      	ldr	r2, [r7, #8]
 8103144:	68f9      	ldr	r1, [r7, #12]
 8103146:	f000 fb59 	bl	81037fc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 810314a:	69bb      	ldr	r3, [r7, #24]
 810314c:	2b00      	cmp	r3, #0
 810314e:	d009      	beq.n	8103164 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8103150:	f107 001c 	add.w	r0, r7, #28
 8103154:	f107 0314 	add.w	r3, r7, #20
 8103158:	e893 0006 	ldmia.w	r3, {r1, r2}
 810315c:	f000 f91b 	bl	8103396 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8103160:	4604      	mov	r4, r0
 8103162:	e007      	b.n	8103174 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8103164:	697a      	ldr	r2, [r7, #20]
 8103166:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810316a:	4611      	mov	r1, r2
 810316c:	4618      	mov	r0, r3
 810316e:	f000 f944 	bl	81033fa <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8103172:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8103174:	f107 031c 	add.w	r3, r7, #28
 8103178:	4618      	mov	r0, r3
 810317a:	f000 f864 	bl	8103246 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 810317e:	4623      	mov	r3, r4
 8103180:	4618      	mov	r0, r3
 8103182:	3728      	adds	r7, #40	@ 0x28
 8103184:	46bd      	mov	sp, r7
 8103186:	bdb0      	pop	{r4, r5, r7, pc}

08103188 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8103188:	b480      	push	{r7}
 810318a:	b083      	sub	sp, #12
 810318c:	af00      	add	r7, sp, #0
 810318e:	6078      	str	r0, [r7, #4]
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	4618      	mov	r0, r3
 8103194:	370c      	adds	r7, #12
 8103196:	46bd      	mov	sp, r7
 8103198:	f85d 7b04 	ldr.w	r7, [sp], #4
 810319c:	4770      	bx	lr

0810319e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 810319e:	b480      	push	{r7}
 81031a0:	b083      	sub	sp, #12
 81031a2:	af00      	add	r7, sp, #0
 81031a4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 81031a6:	687b      	ldr	r3, [r7, #4]
 81031a8:	68db      	ldr	r3, [r3, #12]
 81031aa:	4618      	mov	r0, r3
 81031ac:	370c      	adds	r7, #12
 81031ae:	46bd      	mov	sp, r7
 81031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031b4:	4770      	bx	lr

081031b6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 81031b6:	b480      	push	{r7}
 81031b8:	b083      	sub	sp, #12
 81031ba:	af00      	add	r7, sp, #0
 81031bc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 81031be:	687b      	ldr	r3, [r7, #4]
 81031c0:	689b      	ldr	r3, [r3, #8]
 81031c2:	4618      	mov	r0, r3
 81031c4:	370c      	adds	r7, #12
 81031c6:	46bd      	mov	sp, r7
 81031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031cc:	4770      	bx	lr

081031ce <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 81031ce:	b580      	push	{r7, lr}
 81031d0:	b082      	sub	sp, #8
 81031d2:	af00      	add	r7, sp, #0
 81031d4:	6078      	str	r0, [r7, #4]
 81031d6:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 81031d8:	6839      	ldr	r1, [r7, #0]
 81031da:	6878      	ldr	r0, [r7, #4]
 81031dc:	f000 fc8d 	bl	8103afa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 81031e0:	6839      	ldr	r1, [r7, #0]
 81031e2:	6878      	ldr	r0, [r7, #4]
 81031e4:	f000 fc9e 	bl	8103b24 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 81031e8:	bf00      	nop
 81031ea:	3708      	adds	r7, #8
 81031ec:	46bd      	mov	sp, r7
 81031ee:	bd80      	pop	{r7, pc}

081031f0 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 81031f0:	b480      	push	{r7}
 81031f2:	b083      	sub	sp, #12
 81031f4:	af00      	add	r7, sp, #0
 81031f6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 81031f8:	687b      	ldr	r3, [r7, #4]
 81031fa:	689b      	ldr	r3, [r3, #8]
 81031fc:	4618      	mov	r0, r3
 81031fe:	370c      	adds	r7, #12
 8103200:	46bd      	mov	sp, r7
 8103202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103206:	4770      	bx	lr

08103208 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8103208:	b590      	push	{r4, r7, lr}
 810320a:	b085      	sub	sp, #20
 810320c:	af00      	add	r7, sp, #0
 810320e:	60f8      	str	r0, [r7, #12]
 8103210:	60b9      	str	r1, [r7, #8]
 8103212:	607a      	str	r2, [r7, #4]
 8103214:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8103216:	68fb      	ldr	r3, [r7, #12]
 8103218:	68ba      	ldr	r2, [r7, #8]
 810321a:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 810321c:	6878      	ldr	r0, [r7, #4]
 810321e:	f7ff fc5c 	bl	8102ada <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8103222:	4604      	mov	r4, r0
 8103224:	6838      	ldr	r0, [r7, #0]
 8103226:	f7ff fc63 	bl	8102af0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810322a:	4603      	mov	r3, r0
 810322c:	461a      	mov	r2, r3
 810322e:	4621      	mov	r1, r4
 8103230:	68b8      	ldr	r0, [r7, #8]
 8103232:	f000 fc89 	bl	8103b48 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8103236:	4602      	mov	r2, r0
 8103238:	68fb      	ldr	r3, [r7, #12]
 810323a:	605a      	str	r2, [r3, #4]
	  { }
 810323c:	68fb      	ldr	r3, [r7, #12]
 810323e:	4618      	mov	r0, r3
 8103240:	3714      	adds	r7, #20
 8103242:	46bd      	mov	sp, r7
 8103244:	bd90      	pop	{r4, r7, pc}

08103246 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 8103246:	b580      	push	{r7, lr}
 8103248:	b082      	sub	sp, #8
 810324a:	af00      	add	r7, sp, #0
 810324c:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 810324e:	687b      	ldr	r3, [r7, #4]
 8103250:	685b      	ldr	r3, [r3, #4]
 8103252:	2b00      	cmp	r3, #0
 8103254:	d007      	beq.n	8103266 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 8103256:	687b      	ldr	r3, [r7, #4]
 8103258:	681a      	ldr	r2, [r3, #0]
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	685b      	ldr	r3, [r3, #4]
 810325e:	4619      	mov	r1, r3
 8103260:	4610      	mov	r0, r2
 8103262:	f7ff ffb4 	bl	81031ce <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	}
 8103266:	687b      	ldr	r3, [r7, #4]
 8103268:	4618      	mov	r0, r3
 810326a:	3708      	adds	r7, #8
 810326c:	46bd      	mov	sp, r7
 810326e:	bd80      	pop	{r7, pc}

08103270 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8103270:	b590      	push	{r4, r7, lr}
 8103272:	b08b      	sub	sp, #44	@ 0x2c
 8103274:	af00      	add	r7, sp, #0
 8103276:	60f8      	str	r0, [r7, #12]
 8103278:	60b9      	str	r1, [r7, #8]
 810327a:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 810327c:	68b8      	ldr	r0, [r7, #8]
 810327e:	f7ff fc20 	bl	8102ac2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8103282:	4603      	mov	r3, r0
 8103284:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8103286:	68b8      	ldr	r0, [r7, #8]
 8103288:	f000 f9ec 	bl	8103664 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 810328c:	4603      	mov	r3, r0
 810328e:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8103290:	2301      	movs	r3, #1
 8103292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 8103296:	e01f      	b.n	81032d8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x68>
	  __y = __x;
 8103298:	69bb      	ldr	r3, [r7, #24]
 810329a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 810329c:	68bc      	ldr	r4, [r7, #8]
 810329e:	69bb      	ldr	r3, [r7, #24]
 81032a0:	4618      	mov	r0, r3
 81032a2:	f000 fc6d 	bl	8103b80 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 81032a6:	4603      	mov	r3, r0
 81032a8:	461a      	mov	r2, r3
 81032aa:	6879      	ldr	r1, [r7, #4]
 81032ac:	4620      	mov	r0, r4
 81032ae:	f7ff fe7f 	bl	8102fb0 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81032b2:	4603      	mov	r3, r0
 81032b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 81032b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81032bc:	2b00      	cmp	r3, #0
 81032be:	d005      	beq.n	81032cc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x5c>
 81032c0:	69bb      	ldr	r3, [r7, #24]
 81032c2:	4618      	mov	r0, r3
 81032c4:	f7ff ff77 	bl	81031b6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 81032c8:	4603      	mov	r3, r0
 81032ca:	e004      	b.n	81032d6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 81032cc:	69bb      	ldr	r3, [r7, #24]
 81032ce:	4618      	mov	r0, r3
 81032d0:	f7ff ff65 	bl	810319e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81032d4:	4603      	mov	r3, r0
 81032d6:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 81032d8:	69bb      	ldr	r3, [r7, #24]
 81032da:	2b00      	cmp	r3, #0
 81032dc:	d1dc      	bne.n	8103298 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x28>
      iterator __j = iterator(__y);
 81032de:	697a      	ldr	r2, [r7, #20]
 81032e0:	f107 0310 	add.w	r3, r7, #16
 81032e4:	4611      	mov	r1, r2
 81032e6:	4618      	mov	r0, r3
 81032e8:	f000 f887 	bl	81033fa <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 81032ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81032f0:	2b00      	cmp	r3, #0
 81032f2:	d01d      	beq.n	8103330 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 81032f4:	68b8      	ldr	r0, [r7, #8]
 81032f6:	f000 fc56 	bl	8103ba6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 81032fa:	4603      	mov	r3, r0
 81032fc:	61fb      	str	r3, [r7, #28]
 81032fe:	f107 021c 	add.w	r2, r7, #28
 8103302:	f107 0310 	add.w	r3, r7, #16
 8103306:	4611      	mov	r1, r2
 8103308:	4618      	mov	r0, r3
 810330a:	f7ff fe22 	bl	8102f52 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 810330e:	4603      	mov	r3, r0
 8103310:	2b00      	cmp	r3, #0
 8103312:	d008      	beq.n	8103326 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 8103314:	f107 0214 	add.w	r2, r7, #20
 8103318:	f107 0318 	add.w	r3, r7, #24
 810331c:	4619      	mov	r1, r3
 810331e:	68f8      	ldr	r0, [r7, #12]
 8103320:	f000 fc52 	bl	8103bc8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 8103324:	e025      	b.n	8103372 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 8103326:	f107 0310 	add.w	r3, r7, #16
 810332a:	4618      	mov	r0, r3
 810332c:	f000 fc65 	bl	8103bfa <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8103330:	68bc      	ldr	r4, [r7, #8]
 8103332:	693b      	ldr	r3, [r7, #16]
 8103334:	4618      	mov	r0, r3
 8103336:	f000 f9d2 	bl	81036de <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810333a:	4603      	mov	r3, r0
 810333c:	687a      	ldr	r2, [r7, #4]
 810333e:	4619      	mov	r1, r3
 8103340:	4620      	mov	r0, r4
 8103342:	f7ff fe35 	bl	8102fb0 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8103346:	4603      	mov	r3, r0
 8103348:	2b00      	cmp	r3, #0
 810334a:	d008      	beq.n	810335e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 810334c:	f107 0214 	add.w	r2, r7, #20
 8103350:	f107 0318 	add.w	r3, r7, #24
 8103354:	4619      	mov	r1, r3
 8103356:	68f8      	ldr	r0, [r7, #12]
 8103358:	f000 fc36 	bl	8103bc8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 810335c:	e009      	b.n	8103372 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 810335e:	2300      	movs	r3, #0
 8103360:	623b      	str	r3, [r7, #32]
 8103362:	f107 0220 	add.w	r2, r7, #32
 8103366:	f107 0310 	add.w	r3, r7, #16
 810336a:	4619      	mov	r1, r3
 810336c:	68f8      	ldr	r0, [r7, #12]
 810336e:	f000 fc55 	bl	8103c1c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8103372:	68f8      	ldr	r0, [r7, #12]
 8103374:	372c      	adds	r7, #44	@ 0x2c
 8103376:	46bd      	mov	sp, r7
 8103378:	bd90      	pop	{r4, r7, pc}

0810337a <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 810337a:	b580      	push	{r7, lr}
 810337c:	b082      	sub	sp, #8
 810337e:	af00      	add	r7, sp, #0
 8103380:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 8103382:	687b      	ldr	r3, [r7, #4]
 8103384:	685b      	ldr	r3, [r3, #4]
 8103386:	4618      	mov	r0, r3
 8103388:	f000 fbfa 	bl	8103b80 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 810338c:	4603      	mov	r3, r0
 810338e:	4618      	mov	r0, r3
 8103390:	3708      	adds	r7, #8
 8103392:	46bd      	mov	sp, r7
 8103394:	bd80      	pop	{r7, pc}

08103396 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 8103396:	b580      	push	{r7, lr}
 8103398:	b086      	sub	sp, #24
 810339a:	af00      	add	r7, sp, #0
 810339c:	60f8      	str	r0, [r7, #12]
 810339e:	1d3b      	adds	r3, r7, #4
 81033a0:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 81033a4:	68fb      	ldr	r3, [r7, #12]
 81033a6:	6818      	ldr	r0, [r3, #0]
 81033a8:	6879      	ldr	r1, [r7, #4]
 81033aa:	68ba      	ldr	r2, [r7, #8]
 81033ac:	68fb      	ldr	r3, [r7, #12]
 81033ae:	685b      	ldr	r3, [r3, #4]
 81033b0:	f000 fc49 	bl	8103c46 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 81033b4:	4603      	mov	r3, r0
 81033b6:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 81033b8:	68fb      	ldr	r3, [r7, #12]
 81033ba:	2200      	movs	r2, #0
 81033bc:	605a      	str	r2, [r3, #4]
	  return __it;
 81033be:	697b      	ldr	r3, [r7, #20]
	}
 81033c0:	4618      	mov	r0, r3
 81033c2:	3718      	adds	r7, #24
 81033c4:	46bd      	mov	sp, r7
 81033c6:	bd80      	pop	{r7, pc}

081033c8 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 81033c8:	b580      	push	{r7, lr}
 81033ca:	b084      	sub	sp, #16
 81033cc:	af00      	add	r7, sp, #0
 81033ce:	60f8      	str	r0, [r7, #12]
 81033d0:	60b9      	str	r1, [r7, #8]
 81033d2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 81033d4:	68b8      	ldr	r0, [r7, #8]
 81033d6:	f000 fc73 	bl	8103cc0 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>
 81033da:	4602      	mov	r2, r0
 81033dc:	68fb      	ldr	r3, [r7, #12]
 81033de:	6812      	ldr	r2, [r2, #0]
 81033e0:	601a      	str	r2, [r3, #0]
 81033e2:	6878      	ldr	r0, [r7, #4]
 81033e4:	f000 fc77 	bl	8103cd6 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 81033e8:	4603      	mov	r3, r0
 81033ea:	781a      	ldrb	r2, [r3, #0]
 81033ec:	68fb      	ldr	r3, [r7, #12]
 81033ee:	711a      	strb	r2, [r3, #4]
 81033f0:	68fb      	ldr	r3, [r7, #12]
 81033f2:	4618      	mov	r0, r3
 81033f4:	3710      	adds	r7, #16
 81033f6:	46bd      	mov	sp, r7
 81033f8:	bd80      	pop	{r7, pc}

081033fa <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 81033fa:	b480      	push	{r7}
 81033fc:	b083      	sub	sp, #12
 81033fe:	af00      	add	r7, sp, #0
 8103400:	6078      	str	r0, [r7, #4]
 8103402:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	683a      	ldr	r2, [r7, #0]
 8103408:	601a      	str	r2, [r3, #0]
 810340a:	687b      	ldr	r3, [r7, #4]
 810340c:	4618      	mov	r0, r3
 810340e:	370c      	adds	r7, #12
 8103410:	46bd      	mov	sp, r7
 8103412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103416:	4770      	bx	lr

08103418 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8103418:	b480      	push	{r7}
 810341a:	b083      	sub	sp, #12
 810341c:	af00      	add	r7, sp, #0
 810341e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8103420:	687b      	ldr	r3, [r7, #4]
 8103422:	695b      	ldr	r3, [r3, #20]
 8103424:	4618      	mov	r0, r3
 8103426:	370c      	adds	r7, #12
 8103428:	46bd      	mov	sp, r7
 810342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810342e:	4770      	bx	lr

08103430 <_ZSt8_DestroyIP8SMessageEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8103430:	b580      	push	{r7, lr}
 8103432:	b082      	sub	sp, #8
 8103434:	af00      	add	r7, sp, #0
 8103436:	6078      	str	r0, [r7, #4]
 8103438:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 810343a:	6839      	ldr	r1, [r7, #0]
 810343c:	6878      	ldr	r0, [r7, #4]
 810343e:	f000 fc55 	bl	8103cec <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>
    }
 8103442:	bf00      	nop
 8103444:	3708      	adds	r7, #8
 8103446:	46bd      	mov	sp, r7
 8103448:	bd80      	pop	{r7, pc}

0810344a <_ZNSt15__new_allocatorI8SMessageEC1Ev>:
 810344a:	b480      	push	{r7}
 810344c:	b083      	sub	sp, #12
 810344e:	af00      	add	r7, sp, #0
 8103450:	6078      	str	r0, [r7, #4]
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	4618      	mov	r0, r3
 8103456:	370c      	adds	r7, #12
 8103458:	46bd      	mov	sp, r7
 810345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810345e:	4770      	bx	lr

08103460 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8103460:	b580      	push	{r7, lr}
 8103462:	b084      	sub	sp, #16
 8103464:	af00      	add	r7, sp, #0
 8103466:	60f8      	str	r0, [r7, #12]
 8103468:	60b9      	str	r1, [r7, #8]
 810346a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 810346c:	687a      	ldr	r2, [r7, #4]
 810346e:	68b9      	ldr	r1, [r7, #8]
 8103470:	68f8      	ldr	r0, [r7, #12]
 8103472:	f000 fc46 	bl	8103d02 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>
 8103476:	bf00      	nop
 8103478:	3710      	adds	r7, #16
 810347a:	46bd      	mov	sp, r7
 810347c:	bd80      	pop	{r7, pc}

0810347e <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810347e:	b480      	push	{r7}
 8103480:	b083      	sub	sp, #12
 8103482:	af00      	add	r7, sp, #0
 8103484:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103486:	687b      	ldr	r3, [r7, #4]
 8103488:	4618      	mov	r0, r3
 810348a:	370c      	adds	r7, #12
 810348c:	46bd      	mov	sp, r7
 810348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103492:	4770      	bx	lr

08103494 <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8103494:	b5b0      	push	{r4, r5, r7, lr}
 8103496:	b084      	sub	sp, #16
 8103498:	af00      	add	r7, sp, #0
 810349a:	60f8      	str	r0, [r7, #12]
 810349c:	60b9      	str	r1, [r7, #8]
 810349e:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 81034a0:	68bb      	ldr	r3, [r7, #8]
 81034a2:	4619      	mov	r1, r3
 81034a4:	201c      	movs	r0, #28
 81034a6:	f7fd fcf9 	bl	8100e9c <_ZnwjPv>
 81034aa:	4604      	mov	r4, r0
 81034ac:	6878      	ldr	r0, [r7, #4]
 81034ae:	f7ff ffe6 	bl	810347e <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 81034b2:	4603      	mov	r3, r0
 81034b4:	461d      	mov	r5, r3
 81034b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81034b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81034ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 81034be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81034c2:	bf00      	nop
 81034c4:	3710      	adds	r7, #16
 81034c6:	46bd      	mov	sp, r7
 81034c8:	bdb0      	pop	{r4, r5, r7, pc}

081034ca <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 81034ca:	b480      	push	{r7}
 81034cc:	b083      	sub	sp, #12
 81034ce:	af00      	add	r7, sp, #0
 81034d0:	6078      	str	r0, [r7, #4]
 81034d2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 81034d4:	683b      	ldr	r3, [r7, #0]
 81034d6:	681a      	ldr	r2, [r3, #0]
 81034d8:	687b      	ldr	r3, [r7, #4]
 81034da:	601a      	str	r2, [r3, #0]
 81034dc:	687b      	ldr	r3, [r7, #4]
 81034de:	4618      	mov	r0, r3
 81034e0:	370c      	adds	r7, #12
 81034e2:	46bd      	mov	sp, r7
 81034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034e8:	4770      	bx	lr

081034ea <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 81034ea:	b590      	push	{r4, r7, lr}
 81034ec:	b087      	sub	sp, #28
 81034ee:	af00      	add	r7, sp, #0
 81034f0:	60f8      	str	r0, [r7, #12]
 81034f2:	60b9      	str	r1, [r7, #8]
 81034f4:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 81034f6:	68f8      	ldr	r0, [r7, #12]
 81034f8:	f000 fc16 	bl	8103d28 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81034fc:	4604      	mov	r4, r0
 81034fe:	68f8      	ldr	r0, [r7, #12]
 8103500:	f000 fc24 	bl	8103d4c <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8103504:	4603      	mov	r3, r0
 8103506:	1ae2      	subs	r2, r4, r3
 8103508:	68bb      	ldr	r3, [r7, #8]
 810350a:	429a      	cmp	r2, r3
 810350c:	bf34      	ite	cc
 810350e:	2301      	movcc	r3, #1
 8103510:	2300      	movcs	r3, #0
 8103512:	b2db      	uxtb	r3, r3
 8103514:	2b00      	cmp	r3, #0
 8103516:	d002      	beq.n	810351e <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8103518:	6878      	ldr	r0, [r7, #4]
 810351a:	f019 fdf4 	bl	811d106 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 810351e:	68f8      	ldr	r0, [r7, #12]
 8103520:	f000 fc14 	bl	8103d4c <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8103524:	4604      	mov	r4, r0
 8103526:	68f8      	ldr	r0, [r7, #12]
 8103528:	f000 fc10 	bl	8103d4c <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 810352c:	4603      	mov	r3, r0
 810352e:	613b      	str	r3, [r7, #16]
 8103530:	f107 0208 	add.w	r2, r7, #8
 8103534:	f107 0310 	add.w	r3, r7, #16
 8103538:	4611      	mov	r1, r2
 810353a:	4618      	mov	r0, r3
 810353c:	f000 fc1c 	bl	8103d78 <_ZSt3maxIjERKT_S2_S2_>
 8103540:	4603      	mov	r3, r0
 8103542:	681b      	ldr	r3, [r3, #0]
 8103544:	4423      	add	r3, r4
 8103546:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8103548:	68f8      	ldr	r0, [r7, #12]
 810354a:	f000 fbff 	bl	8103d4c <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 810354e:	4602      	mov	r2, r0
 8103550:	697b      	ldr	r3, [r7, #20]
 8103552:	4293      	cmp	r3, r2
 8103554:	d306      	bcc.n	8103564 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8103556:	68f8      	ldr	r0, [r7, #12]
 8103558:	f000 fbe6 	bl	8103d28 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 810355c:	4602      	mov	r2, r0
 810355e:	697b      	ldr	r3, [r7, #20]
 8103560:	4293      	cmp	r3, r2
 8103562:	d904      	bls.n	810356e <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x84>
 8103564:	68f8      	ldr	r0, [r7, #12]
 8103566:	f000 fbdf 	bl	8103d28 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 810356a:	4603      	mov	r3, r0
 810356c:	e000      	b.n	8103570 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x86>
 810356e:	697b      	ldr	r3, [r7, #20]
      }
 8103570:	4618      	mov	r0, r3
 8103572:	371c      	adds	r7, #28
 8103574:	46bd      	mov	sp, r7
 8103576:	bd90      	pop	{r4, r7, pc}

08103578 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8103578:	b580      	push	{r7, lr}
 810357a:	b084      	sub	sp, #16
 810357c:	af00      	add	r7, sp, #0
 810357e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8103580:	687a      	ldr	r2, [r7, #4]
 8103582:	f107 030c 	add.w	r3, r7, #12
 8103586:	4611      	mov	r1, r2
 8103588:	4618      	mov	r0, r3
 810358a:	f7ff ff9e 	bl	81034ca <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 810358e:	68fb      	ldr	r3, [r7, #12]
 8103590:	4618      	mov	r0, r3
 8103592:	3710      	adds	r7, #16
 8103594:	46bd      	mov	sp, r7
 8103596:	bd80      	pop	{r7, pc}

08103598 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8103598:	b590      	push	{r4, r7, lr}
 810359a:	b083      	sub	sp, #12
 810359c:	af00      	add	r7, sp, #0
 810359e:	6078      	str	r0, [r7, #4]
 81035a0:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 81035a2:	6878      	ldr	r0, [r7, #4]
 81035a4:	f000 f83a 	bl	810361c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81035a8:	4603      	mov	r3, r0
 81035aa:	681c      	ldr	r4, [r3, #0]
 81035ac:	6838      	ldr	r0, [r7, #0]
 81035ae:	f000 f835 	bl	810361c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81035b2:	4603      	mov	r3, r0
 81035b4:	681b      	ldr	r3, [r3, #0]
 81035b6:	1ae3      	subs	r3, r4, r3
 81035b8:	109b      	asrs	r3, r3, #2
 81035ba:	4a03      	ldr	r2, [pc, #12]	@ (81035c8 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 81035bc:	fb02 f303 	mul.w	r3, r2, r3
 81035c0:	4618      	mov	r0, r3
 81035c2:	370c      	adds	r7, #12
 81035c4:	46bd      	mov	sp, r7
 81035c6:	bd90      	pop	{r4, r7, pc}
 81035c8:	b6db6db7 	.word	0xb6db6db7

081035cc <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 81035cc:	b580      	push	{r7, lr}
 81035ce:	b082      	sub	sp, #8
 81035d0:	af00      	add	r7, sp, #0
 81035d2:	6078      	str	r0, [r7, #4]
 81035d4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 81035d6:	683b      	ldr	r3, [r7, #0]
 81035d8:	2b00      	cmp	r3, #0
 81035da:	d006      	beq.n	81035ea <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x1e>
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	6839      	ldr	r1, [r7, #0]
 81035e0:	4618      	mov	r0, r3
 81035e2:	f000 fbdd 	bl	8103da0 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>
 81035e6:	4603      	mov	r3, r0
 81035e8:	e000      	b.n	81035ec <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x20>
 81035ea:	2300      	movs	r3, #0
      }
 81035ec:	4618      	mov	r0, r3
 81035ee:	3708      	adds	r7, #8
 81035f0:	46bd      	mov	sp, r7
 81035f2:	bd80      	pop	{r7, pc}

081035f4 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 81035f4:	b590      	push	{r4, r7, lr}
 81035f6:	b087      	sub	sp, #28
 81035f8:	af02      	add	r7, sp, #8
 81035fa:	60f8      	str	r0, [r7, #12]
 81035fc:	60b9      	str	r1, [r7, #8]
 81035fe:	607a      	str	r2, [r7, #4]
 8103600:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8103602:	f88d 4000 	strb.w	r4, [sp]
 8103606:	683b      	ldr	r3, [r7, #0]
 8103608:	687a      	ldr	r2, [r7, #4]
 810360a:	68b9      	ldr	r1, [r7, #8]
 810360c:	68f8      	ldr	r0, [r7, #12]
 810360e:	f000 fbd6 	bl	8103dbe <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8103612:	4603      	mov	r3, r0
      }
 8103614:	4618      	mov	r0, r3
 8103616:	3714      	adds	r7, #20
 8103618:	46bd      	mov	sp, r7
 810361a:	bd90      	pop	{r4, r7, pc}

0810361c <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 810361c:	b480      	push	{r7}
 810361e:	b083      	sub	sp, #12
 8103620:	af00      	add	r7, sp, #0
 8103622:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8103624:	687b      	ldr	r3, [r7, #4]
 8103626:	4618      	mov	r0, r3
 8103628:	370c      	adds	r7, #12
 810362a:	46bd      	mov	sp, r7
 810362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103630:	4770      	bx	lr

08103632 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8103632:	b590      	push	{r4, r7, lr}
 8103634:	b085      	sub	sp, #20
 8103636:	af00      	add	r7, sp, #0
 8103638:	60f8      	str	r0, [r7, #12]
 810363a:	60b9      	str	r1, [r7, #8]
 810363c:	607a      	str	r2, [r7, #4]
 810363e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8103640:	68f8      	ldr	r0, [r7, #12]
 8103642:	f000 fbce 	bl	8103de2 <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 8103646:	4604      	mov	r4, r0
 8103648:	68b8      	ldr	r0, [r7, #8]
 810364a:	f000 fbca 	bl	8103de2 <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 810364e:	4601      	mov	r1, r0
 8103650:	683b      	ldr	r3, [r7, #0]
 8103652:	687a      	ldr	r2, [r7, #4]
 8103654:	4620      	mov	r0, r4
 8103656:	f000 fbd3 	bl	8103e00 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>
 810365a:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 810365c:	4618      	mov	r0, r3
 810365e:	3714      	adds	r7, #20
 8103660:	46bd      	mov	sp, r7
 8103662:	bd90      	pop	{r4, r7, pc}

08103664 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8103664:	b480      	push	{r7}
 8103666:	b083      	sub	sp, #12
 8103668:	af00      	add	r7, sp, #0
 810366a:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 810366c:	687b      	ldr	r3, [r7, #4]
 810366e:	3304      	adds	r3, #4
 8103670:	4618      	mov	r0, r3
 8103672:	370c      	adds	r7, #12
 8103674:	46bd      	mov	sp, r7
 8103676:	f85d 7b04 	ldr.w	r7, [sp], #4
 810367a:	4770      	bx	lr

0810367c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 810367c:	b590      	push	{r4, r7, lr}
 810367e:	b087      	sub	sp, #28
 8103680:	af00      	add	r7, sp, #0
 8103682:	60f8      	str	r0, [r7, #12]
 8103684:	60b9      	str	r1, [r7, #8]
 8103686:	607a      	str	r2, [r7, #4]
 8103688:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 810368a:	e01a      	b.n	81036c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 810368c:	68fc      	ldr	r4, [r7, #12]
 810368e:	68b8      	ldr	r0, [r7, #8]
 8103690:	f000 fa76 	bl	8103b80 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8103694:	4603      	mov	r3, r0
 8103696:	683a      	ldr	r2, [r7, #0]
 8103698:	4619      	mov	r1, r3
 810369a:	4620      	mov	r0, r4
 810369c:	f7ff fc88 	bl	8102fb0 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81036a0:	4603      	mov	r3, r0
 81036a2:	f083 0301 	eor.w	r3, r3, #1
 81036a6:	b2db      	uxtb	r3, r3
 81036a8:	2b00      	cmp	r3, #0
 81036aa:	d006      	beq.n	81036ba <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x3e>
	  __y = __x, __x = _S_left(__x);
 81036ac:	68bb      	ldr	r3, [r7, #8]
 81036ae:	607b      	str	r3, [r7, #4]
 81036b0:	68b8      	ldr	r0, [r7, #8]
 81036b2:	f7ff fd80 	bl	81031b6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 81036b6:	60b8      	str	r0, [r7, #8]
 81036b8:	e003      	b.n	81036c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __x = _S_right(__x);
 81036ba:	68b8      	ldr	r0, [r7, #8]
 81036bc:	f7ff fd6f 	bl	810319e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81036c0:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 81036c2:	68bb      	ldr	r3, [r7, #8]
 81036c4:	2b00      	cmp	r3, #0
 81036c6:	d1e1      	bne.n	810368c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x10>
      return iterator(__y);
 81036c8:	f107 0314 	add.w	r3, r7, #20
 81036cc:	6879      	ldr	r1, [r7, #4]
 81036ce:	4618      	mov	r0, r3
 81036d0:	f7ff fe93 	bl	81033fa <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81036d4:	697b      	ldr	r3, [r7, #20]
    }
 81036d6:	4618      	mov	r0, r3
 81036d8:	371c      	adds	r7, #28
 81036da:	46bd      	mov	sp, r7
 81036dc:	bd90      	pop	{r4, r7, pc}

081036de <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 81036de:	b580      	push	{r7, lr}
 81036e0:	b082      	sub	sp, #8
 81036e2:	af00      	add	r7, sp, #0
 81036e4:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 81036e6:	6878      	ldr	r0, [r7, #4]
 81036e8:	f000 fa4a 	bl	8103b80 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 81036ec:	4603      	mov	r3, r0
 81036ee:	4618      	mov	r0, r3
 81036f0:	3708      	adds	r7, #8
 81036f2:	46bd      	mov	sp, r7
 81036f4:	bd80      	pop	{r7, pc}

081036f6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 81036f6:	b590      	push	{r4, r7, lr}
 81036f8:	b083      	sub	sp, #12
 81036fa:	af00      	add	r7, sp, #0
 81036fc:	6078      	str	r0, [r7, #4]
 81036fe:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8103700:	6878      	ldr	r0, [r7, #4]
 8103702:	f7ff f9de 	bl	8102ac2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8103706:	4604      	mov	r4, r0
 8103708:	6878      	ldr	r0, [r7, #4]
 810370a:	f7ff ffab 	bl	8103664 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 810370e:	4602      	mov	r2, r0
 8103710:	683b      	ldr	r3, [r7, #0]
 8103712:	4621      	mov	r1, r4
 8103714:	6878      	ldr	r0, [r7, #4]
 8103716:	f7ff ffb1 	bl	810367c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 810371a:	4603      	mov	r3, r0
 810371c:	4618      	mov	r0, r3
 810371e:	370c      	adds	r7, #12
 8103720:	46bd      	mov	sp, r7
 8103722:	bd90      	pop	{r4, r7, pc}

08103724 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8103724:	b480      	push	{r7}
 8103726:	b083      	sub	sp, #12
 8103728:	af00      	add	r7, sp, #0
 810372a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 810372c:	bf00      	nop
 810372e:	4618      	mov	r0, r3
 8103730:	370c      	adds	r7, #12
 8103732:	46bd      	mov	sp, r7
 8103734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103738:	4770      	bx	lr

0810373a <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr()
 810373a:	b580      	push	{r7, lr}
 810373c:	b082      	sub	sp, #8
 810373e:	af00      	add	r7, sp, #0
 8103740:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	3310      	adds	r3, #16
 8103746:	4618      	mov	r0, r3
 8103748:	f000 fb6b 	bl	8103e22 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 810374c:	4603      	mov	r3, r0
 810374e:	4618      	mov	r0, r3
 8103750:	3708      	adds	r7, #8
 8103752:	46bd      	mov	sp, r7
 8103754:	bd80      	pop	{r7, pc}

08103756 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>:
      _Tuple_impl(const _Head& __head)
 8103756:	b580      	push	{r7, lr}
 8103758:	b082      	sub	sp, #8
 810375a:	af00      	add	r7, sp, #0
 810375c:	6078      	str	r0, [r7, #4]
 810375e:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 8103760:	687b      	ldr	r3, [r7, #4]
 8103762:	6839      	ldr	r1, [r7, #0]
 8103764:	4618      	mov	r0, r3
 8103766:	f000 fb68 	bl	8103e3a <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>
      { }
 810376a:	687b      	ldr	r3, [r7, #4]
 810376c:	4618      	mov	r0, r3
 810376e:	3708      	adds	r7, #8
 8103770:	46bd      	mov	sp, r7
 8103772:	bd80      	pop	{r7, pc}

08103774 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103774:	b480      	push	{r7}
 8103776:	b083      	sub	sp, #12
 8103778:	af00      	add	r7, sp, #0
 810377a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810377c:	687b      	ldr	r3, [r7, #4]
 810377e:	4618      	mov	r0, r3
 8103780:	370c      	adds	r7, #12
 8103782:	46bd      	mov	sp, r7
 8103784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103788:	4770      	bx	lr

0810378a <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810378a:	b480      	push	{r7}
 810378c:	b083      	sub	sp, #12
 810378e:	af00      	add	r7, sp, #0
 8103790:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103792:	687b      	ldr	r3, [r7, #4]
 8103794:	4618      	mov	r0, r3
 8103796:	370c      	adds	r7, #12
 8103798:	46bd      	mov	sp, r7
 810379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810379e:	4770      	bx	lr

081037a0 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81037a0:	b480      	push	{r7}
 81037a2:	b083      	sub	sp, #12
 81037a4:	af00      	add	r7, sp, #0
 81037a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81037a8:	687b      	ldr	r3, [r7, #4]
 81037aa:	4618      	mov	r0, r3
 81037ac:	370c      	adds	r7, #12
 81037ae:	46bd      	mov	sp, r7
 81037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037b4:	4770      	bx	lr

081037b6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 81037b6:	b5b0      	push	{r4, r5, r7, lr}
 81037b8:	b084      	sub	sp, #16
 81037ba:	af00      	add	r7, sp, #0
 81037bc:	60f8      	str	r0, [r7, #12]
 81037be:	60b9      	str	r1, [r7, #8]
 81037c0:	607a      	str	r2, [r7, #4]
 81037c2:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 81037c4:	68fb      	ldr	r3, [r7, #12]
 81037c6:	68ba      	ldr	r2, [r7, #8]
 81037c8:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 81037ca:	6878      	ldr	r0, [r7, #4]
 81037cc:	f7ff ffd2 	bl	8103774 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81037d0:	4604      	mov	r4, r0
 81037d2:	6838      	ldr	r0, [r7, #0]
 81037d4:	f7ff ffd9 	bl	810378a <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81037d8:	4605      	mov	r5, r0
 81037da:	6a38      	ldr	r0, [r7, #32]
 81037dc:	f7ff ffe0 	bl	81037a0 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81037e0:	4603      	mov	r3, r0
 81037e2:	462a      	mov	r2, r5
 81037e4:	4621      	mov	r1, r4
 81037e6:	68b8      	ldr	r0, [r7, #8]
 81037e8:	f000 fb36 	bl	8103e58 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 81037ec:	4602      	mov	r2, r0
 81037ee:	68fb      	ldr	r3, [r7, #12]
 81037f0:	605a      	str	r2, [r3, #4]
	  { }
 81037f2:	68fb      	ldr	r3, [r7, #12]
 81037f4:	4618      	mov	r0, r3
 81037f6:	3710      	adds	r7, #16
 81037f8:	46bd      	mov	sp, r7
 81037fa:	bdb0      	pop	{r4, r5, r7, pc}

081037fc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81037fc:	b590      	push	{r4, r7, lr}
 81037fe:	b08d      	sub	sp, #52	@ 0x34
 8103800:	af00      	add	r7, sp, #0
 8103802:	60f8      	str	r0, [r7, #12]
 8103804:	60b9      	str	r1, [r7, #8]
 8103806:	607a      	str	r2, [r7, #4]
 8103808:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 810380a:	1d3b      	adds	r3, r7, #4
 810380c:	4618      	mov	r0, r3
 810380e:	f000 fb46 	bl	8103e9e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>
 8103812:	4603      	mov	r3, r0
 8103814:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8103816:	69bc      	ldr	r4, [r7, #24]
 8103818:	68b8      	ldr	r0, [r7, #8]
 810381a:	f7ff ff23 	bl	8103664 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 810381e:	4603      	mov	r3, r0
 8103820:	429c      	cmp	r4, r3
 8103822:	bf0c      	ite	eq
 8103824:	2301      	moveq	r3, #1
 8103826:	2300      	movne	r3, #0
 8103828:	b2db      	uxtb	r3, r3
 810382a:	2b00      	cmp	r3, #0
 810382c:	d030      	beq.n	8103890 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 810382e:	68b8      	ldr	r0, [r7, #8]
 8103830:	f7ff fdf2 	bl	8103418 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8103834:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8103836:	2b00      	cmp	r3, #0
 8103838:	d013      	beq.n	8103862 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 810383a:	68bc      	ldr	r4, [r7, #8]
 810383c:	68b8      	ldr	r0, [r7, #8]
 810383e:	f000 fb3f 	bl	8103ec0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8103842:	4603      	mov	r3, r0
 8103844:	681b      	ldr	r3, [r3, #0]
 8103846:	4618      	mov	r0, r3
 8103848:	f7ff ff49 	bl	81036de <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810384c:	4603      	mov	r3, r0
 810384e:	683a      	ldr	r2, [r7, #0]
 8103850:	4619      	mov	r1, r3
 8103852:	4620      	mov	r0, r4
 8103854:	f7ff fbac 	bl	8102fb0 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8103858:	4603      	mov	r3, r0
 810385a:	2b00      	cmp	r3, #0
 810385c:	d001      	beq.n	8103862 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 810385e:	2301      	movs	r3, #1
 8103860:	e000      	b.n	8103864 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 8103862:	2300      	movs	r3, #0
	  if (size() > 0
 8103864:	2b00      	cmp	r3, #0
 8103866:	d00c      	beq.n	8103882 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 8103868:	2300      	movs	r3, #0
 810386a:	61fb      	str	r3, [r7, #28]
 810386c:	68b8      	ldr	r0, [r7, #8]
 810386e:	f000 fb27 	bl	8103ec0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8103872:	4602      	mov	r2, r0
 8103874:	f107 031c 	add.w	r3, r7, #28
 8103878:	4619      	mov	r1, r3
 810387a:	68f8      	ldr	r0, [r7, #12]
 810387c:	f000 f9ce 	bl	8103c1c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8103880:	e0db      	b.n	8103a3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8103882:	68fb      	ldr	r3, [r7, #12]
 8103884:	683a      	ldr	r2, [r7, #0]
 8103886:	68b9      	ldr	r1, [r7, #8]
 8103888:	4618      	mov	r0, r3
 810388a:	f7ff fcf1 	bl	8103270 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 810388e:	e0d4      	b.n	8103a3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8103890:	68bc      	ldr	r4, [r7, #8]
 8103892:	69bb      	ldr	r3, [r7, #24]
 8103894:	4618      	mov	r0, r3
 8103896:	f7ff ff22 	bl	81036de <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810389a:	4603      	mov	r3, r0
 810389c:	461a      	mov	r2, r3
 810389e:	6839      	ldr	r1, [r7, #0]
 81038a0:	4620      	mov	r0, r4
 81038a2:	f7ff fb85 	bl	8102fb0 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81038a6:	4603      	mov	r3, r0
 81038a8:	2b00      	cmp	r3, #0
 81038aa:	d057      	beq.n	810395c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 81038ac:	69bb      	ldr	r3, [r7, #24]
 81038ae:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 81038b0:	69bc      	ldr	r4, [r7, #24]
 81038b2:	68b8      	ldr	r0, [r7, #8]
 81038b4:	f000 fb10 	bl	8103ed8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 81038b8:	4603      	mov	r3, r0
 81038ba:	681b      	ldr	r3, [r3, #0]
 81038bc:	429c      	cmp	r4, r3
 81038be:	bf0c      	ite	eq
 81038c0:	2301      	moveq	r3, #1
 81038c2:	2300      	movne	r3, #0
 81038c4:	b2db      	uxtb	r3, r3
 81038c6:	2b00      	cmp	r3, #0
 81038c8:	d00d      	beq.n	81038e6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 81038ca:	68b8      	ldr	r0, [r7, #8]
 81038cc:	f000 fb04 	bl	8103ed8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 81038d0:	4604      	mov	r4, r0
 81038d2:	68b8      	ldr	r0, [r7, #8]
 81038d4:	f000 fb00 	bl	8103ed8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 81038d8:	4603      	mov	r3, r0
 81038da:	461a      	mov	r2, r3
 81038dc:	4621      	mov	r1, r4
 81038de:	68f8      	ldr	r0, [r7, #12]
 81038e0:	f000 fb06 	bl	8103ef0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 81038e4:	e0a9      	b.n	8103a3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 81038e6:	68bc      	ldr	r4, [r7, #8]
 81038e8:	f107 0314 	add.w	r3, r7, #20
 81038ec:	4618      	mov	r0, r3
 81038ee:	f000 f984 	bl	8103bfa <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
 81038f2:	4603      	mov	r3, r0
 81038f4:	681b      	ldr	r3, [r3, #0]
 81038f6:	4618      	mov	r0, r3
 81038f8:	f7ff fef1 	bl	81036de <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81038fc:	4603      	mov	r3, r0
 81038fe:	683a      	ldr	r2, [r7, #0]
 8103900:	4619      	mov	r1, r3
 8103902:	4620      	mov	r0, r4
 8103904:	f7ff fb54 	bl	8102fb0 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8103908:	4603      	mov	r3, r0
 810390a:	2b00      	cmp	r3, #0
 810390c:	d01f      	beq.n	810394e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 810390e:	697b      	ldr	r3, [r7, #20]
 8103910:	4618      	mov	r0, r3
 8103912:	f7ff fc44 	bl	810319e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8103916:	4603      	mov	r3, r0
 8103918:	2b00      	cmp	r3, #0
 810391a:	bf0c      	ite	eq
 810391c:	2301      	moveq	r3, #1
 810391e:	2300      	movne	r3, #0
 8103920:	b2db      	uxtb	r3, r3
 8103922:	2b00      	cmp	r3, #0
 8103924:	d00a      	beq.n	810393c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8103926:	2300      	movs	r3, #0
 8103928:	623b      	str	r3, [r7, #32]
 810392a:	f107 0214 	add.w	r2, r7, #20
 810392e:	f107 0320 	add.w	r3, r7, #32
 8103932:	4619      	mov	r1, r3
 8103934:	68f8      	ldr	r0, [r7, #12]
 8103936:	f000 f971 	bl	8103c1c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 810393a:	e07e      	b.n	8103a3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 810393c:	f107 0218 	add.w	r2, r7, #24
 8103940:	f107 0318 	add.w	r3, r7, #24
 8103944:	4619      	mov	r1, r3
 8103946:	68f8      	ldr	r0, [r7, #12]
 8103948:	f000 fad2 	bl	8103ef0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 810394c:	e075      	b.n	8103a3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 810394e:	68fb      	ldr	r3, [r7, #12]
 8103950:	683a      	ldr	r2, [r7, #0]
 8103952:	68b9      	ldr	r1, [r7, #8]
 8103954:	4618      	mov	r0, r3
 8103956:	f7ff fc8b 	bl	8103270 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 810395a:	e06e      	b.n	8103a3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 810395c:	68bc      	ldr	r4, [r7, #8]
 810395e:	69bb      	ldr	r3, [r7, #24]
 8103960:	4618      	mov	r0, r3
 8103962:	f7ff febc 	bl	81036de <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8103966:	4603      	mov	r3, r0
 8103968:	683a      	ldr	r2, [r7, #0]
 810396a:	4619      	mov	r1, r3
 810396c:	4620      	mov	r0, r4
 810396e:	f7ff fb1f 	bl	8102fb0 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8103972:	4603      	mov	r3, r0
 8103974:	2b00      	cmp	r3, #0
 8103976:	d056      	beq.n	8103a26 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 8103978:	69bb      	ldr	r3, [r7, #24]
 810397a:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 810397c:	69bc      	ldr	r4, [r7, #24]
 810397e:	68b8      	ldr	r0, [r7, #8]
 8103980:	f000 fa9e 	bl	8103ec0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8103984:	4603      	mov	r3, r0
 8103986:	681b      	ldr	r3, [r3, #0]
 8103988:	429c      	cmp	r4, r3
 810398a:	bf0c      	ite	eq
 810398c:	2301      	moveq	r3, #1
 810398e:	2300      	movne	r3, #0
 8103990:	b2db      	uxtb	r3, r3
 8103992:	2b00      	cmp	r3, #0
 8103994:	d00c      	beq.n	81039b0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 8103996:	2300      	movs	r3, #0
 8103998:	627b      	str	r3, [r7, #36]	@ 0x24
 810399a:	68b8      	ldr	r0, [r7, #8]
 810399c:	f000 fa90 	bl	8103ec0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81039a0:	4602      	mov	r2, r0
 81039a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81039a6:	4619      	mov	r1, r3
 81039a8:	68f8      	ldr	r0, [r7, #12]
 81039aa:	f000 f937 	bl	8103c1c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81039ae:	e044      	b.n	8103a3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 81039b0:	68bc      	ldr	r4, [r7, #8]
 81039b2:	f107 0310 	add.w	r3, r7, #16
 81039b6:	4618      	mov	r0, r3
 81039b8:	f000 fab3 	bl	8103f22 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>
 81039bc:	4603      	mov	r3, r0
 81039be:	681b      	ldr	r3, [r3, #0]
 81039c0:	4618      	mov	r0, r3
 81039c2:	f7ff fe8c 	bl	81036de <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81039c6:	4603      	mov	r3, r0
 81039c8:	461a      	mov	r2, r3
 81039ca:	6839      	ldr	r1, [r7, #0]
 81039cc:	4620      	mov	r0, r4
 81039ce:	f7ff faef 	bl	8102fb0 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81039d2:	4603      	mov	r3, r0
 81039d4:	2b00      	cmp	r3, #0
 81039d6:	d01f      	beq.n	8103a18 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 81039d8:	69bb      	ldr	r3, [r7, #24]
 81039da:	4618      	mov	r0, r3
 81039dc:	f7ff fbdf 	bl	810319e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81039e0:	4603      	mov	r3, r0
 81039e2:	2b00      	cmp	r3, #0
 81039e4:	bf0c      	ite	eq
 81039e6:	2301      	moveq	r3, #1
 81039e8:	2300      	movne	r3, #0
 81039ea:	b2db      	uxtb	r3, r3
 81039ec:	2b00      	cmp	r3, #0
 81039ee:	d00a      	beq.n	8103a06 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 81039f0:	2300      	movs	r3, #0
 81039f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 81039f4:	f107 0218 	add.w	r2, r7, #24
 81039f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81039fc:	4619      	mov	r1, r3
 81039fe:	68f8      	ldr	r0, [r7, #12]
 8103a00:	f000 f90c 	bl	8103c1c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8103a04:	e019      	b.n	8103a3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8103a06:	f107 0210 	add.w	r2, r7, #16
 8103a0a:	f107 0310 	add.w	r3, r7, #16
 8103a0e:	4619      	mov	r1, r3
 8103a10:	68f8      	ldr	r0, [r7, #12]
 8103a12:	f000 fa6d 	bl	8103ef0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8103a16:	e010      	b.n	8103a3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8103a18:	68fb      	ldr	r3, [r7, #12]
 8103a1a:	683a      	ldr	r2, [r7, #0]
 8103a1c:	68b9      	ldr	r1, [r7, #8]
 8103a1e:	4618      	mov	r0, r3
 8103a20:	f7ff fc26 	bl	8103270 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8103a24:	e009      	b.n	8103a3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 8103a26:	2300      	movs	r3, #0
 8103a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8103a2a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8103a2e:	f107 0318 	add.w	r3, r7, #24
 8103a32:	4619      	mov	r1, r3
 8103a34:	68f8      	ldr	r0, [r7, #12]
 8103a36:	f000 f8f1 	bl	8103c1c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8103a3a:	68f8      	ldr	r0, [r7, #12]
 8103a3c:	3734      	adds	r7, #52	@ 0x34
 8103a3e:	46bd      	mov	sp, r7
 8103a40:	bd90      	pop	{r4, r7, pc}

08103a42 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103a42:	b480      	push	{r7}
 8103a44:	b083      	sub	sp, #12
 8103a46:	af00      	add	r7, sp, #0
 8103a48:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103a4a:	687b      	ldr	r3, [r7, #4]
 8103a4c:	4618      	mov	r0, r3
 8103a4e:	370c      	adds	r7, #12
 8103a50:	46bd      	mov	sp, r7
 8103a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a56:	4770      	bx	lr

08103a58 <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1IJS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8103a58:	b590      	push	{r4, r7, lr}
 8103a5a:	b083      	sub	sp, #12
 8103a5c:	af00      	add	r7, sp, #0
 8103a5e:	6078      	str	r0, [r7, #4]
 8103a60:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8103a62:	687c      	ldr	r4, [r7, #4]
 8103a64:	6838      	ldr	r0, [r7, #0]
 8103a66:	f7ff ffec 	bl	8103a42 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103a6a:	4603      	mov	r3, r0
 8103a6c:	4619      	mov	r1, r3
 8103a6e:	4620      	mov	r0, r4
 8103a70:	f000 fa68 	bl	8103f44 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1IS1_EEOT_>
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	4618      	mov	r0, r3
 8103a78:	370c      	adds	r7, #12
 8103a7a:	46bd      	mov	sp, r7
 8103a7c:	bd90      	pop	{r4, r7, pc}

08103a7e <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8103a7e:	b480      	push	{r7}
 8103a80:	b083      	sub	sp, #12
 8103a82:	af00      	add	r7, sp, #0
 8103a84:	6078      	str	r0, [r7, #4]
 8103a86:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	683a      	ldr	r2, [r7, #0]
 8103a8c:	6812      	ldr	r2, [r2, #0]
 8103a8e:	601a      	str	r2, [r3, #0]
      { }
 8103a90:	687b      	ldr	r3, [r7, #4]
 8103a92:	4618      	mov	r0, r3
 8103a94:	370c      	adds	r7, #12
 8103a96:	46bd      	mov	sp, r7
 8103a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a9c:	4770      	bx	lr

08103a9e <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103a9e:	b480      	push	{r7}
 8103aa0:	b083      	sub	sp, #12
 8103aa2:	af00      	add	r7, sp, #0
 8103aa4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103aa6:	687b      	ldr	r3, [r7, #4]
 8103aa8:	4618      	mov	r0, r3
 8103aaa:	370c      	adds	r7, #12
 8103aac:	46bd      	mov	sp, r7
 8103aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ab2:	4770      	bx	lr

08103ab4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS1_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8103ab4:	b5b0      	push	{r4, r5, r7, lr}
 8103ab6:	b084      	sub	sp, #16
 8103ab8:	af00      	add	r7, sp, #0
 8103aba:	60f8      	str	r0, [r7, #12]
 8103abc:	60b9      	str	r1, [r7, #8]
 8103abe:	607a      	str	r2, [r7, #4]
 8103ac0:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8103ac2:	68fb      	ldr	r3, [r7, #12]
 8103ac4:	68ba      	ldr	r2, [r7, #8]
 8103ac6:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8103ac8:	6878      	ldr	r0, [r7, #4]
 8103aca:	f7ff fe53 	bl	8103774 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103ace:	4604      	mov	r4, r0
 8103ad0:	6838      	ldr	r0, [r7, #0]
 8103ad2:	f7ff ffe4 	bl	8103a9e <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8103ad6:	4605      	mov	r5, r0
 8103ad8:	6a38      	ldr	r0, [r7, #32]
 8103ada:	f7ff fe61 	bl	81037a0 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103ade:	4603      	mov	r3, r0
 8103ae0:	462a      	mov	r2, r5
 8103ae2:	4621      	mov	r1, r4
 8103ae4:	68b8      	ldr	r0, [r7, #8]
 8103ae6:	f000 fa40 	bl	8103f6a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8103aea:	4602      	mov	r2, r0
 8103aec:	68fb      	ldr	r3, [r7, #12]
 8103aee:	605a      	str	r2, [r3, #4]
	  { }
 8103af0:	68fb      	ldr	r3, [r7, #12]
 8103af2:	4618      	mov	r0, r3
 8103af4:	3710      	adds	r7, #16
 8103af6:	46bd      	mov	sp, r7
 8103af8:	bdb0      	pop	{r4, r5, r7, pc}

08103afa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8103afa:	b590      	push	{r4, r7, lr}
 8103afc:	b083      	sub	sp, #12
 8103afe:	af00      	add	r7, sp, #0
 8103b00:	6078      	str	r0, [r7, #4]
 8103b02:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8103b04:	6878      	ldr	r0, [r7, #4]
 8103b06:	f000 fa53 	bl	8103fb0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8103b0a:	4604      	mov	r4, r0
 8103b0c:	6838      	ldr	r0, [r7, #0]
 8103b0e:	f7ff fe14 	bl	810373a <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8103b12:	4603      	mov	r3, r0
 8103b14:	4619      	mov	r1, r3
 8103b16:	4620      	mov	r0, r4
 8103b18:	f000 fa55 	bl	8103fc6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>
      }
 8103b1c:	bf00      	nop
 8103b1e:	370c      	adds	r7, #12
 8103b20:	46bd      	mov	sp, r7
 8103b22:	bd90      	pop	{r4, r7, pc}

08103b24 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8103b24:	b580      	push	{r7, lr}
 8103b26:	b082      	sub	sp, #8
 8103b28:	af00      	add	r7, sp, #0
 8103b2a:	6078      	str	r0, [r7, #4]
 8103b2c:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8103b2e:	6878      	ldr	r0, [r7, #4]
 8103b30:	f000 fa3e 	bl	8103fb0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8103b34:	4603      	mov	r3, r0
 8103b36:	2201      	movs	r2, #1
 8103b38:	6839      	ldr	r1, [r7, #0]
 8103b3a:	4618      	mov	r0, r3
 8103b3c:	f000 fa50 	bl	8103fe0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>
 8103b40:	bf00      	nop
 8103b42:	3708      	adds	r7, #8
 8103b44:	46bd      	mov	sp, r7
 8103b46:	bd80      	pop	{r7, pc}

08103b48 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8103b48:	b590      	push	{r4, r7, lr}
 8103b4a:	b087      	sub	sp, #28
 8103b4c:	af00      	add	r7, sp, #0
 8103b4e:	60f8      	str	r0, [r7, #12]
 8103b50:	60b9      	str	r1, [r7, #8]
 8103b52:	607a      	str	r2, [r7, #4]
	  _Link_type __tmp = _M_get_node();
 8103b54:	68f8      	ldr	r0, [r7, #12]
 8103b56:	f000 fa52 	bl	8103ffe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8103b5a:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8103b5c:	68b8      	ldr	r0, [r7, #8]
 8103b5e:	f7fe ffbc 	bl	8102ada <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8103b62:	4604      	mov	r4, r0
 8103b64:	6878      	ldr	r0, [r7, #4]
 8103b66:	f7fe ffc3 	bl	8102af0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8103b6a:	4603      	mov	r3, r0
 8103b6c:	4622      	mov	r2, r4
 8103b6e:	6979      	ldr	r1, [r7, #20]
 8103b70:	68f8      	ldr	r0, [r7, #12]
 8103b72:	f000 fa55 	bl	8104020 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8103b76:	697b      	ldr	r3, [r7, #20]
	}
 8103b78:	4618      	mov	r0, r3
 8103b7a:	371c      	adds	r7, #28
 8103b7c:	46bd      	mov	sp, r7
 8103b7e:	bd90      	pop	{r4, r7, pc}

08103b80 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8103b80:	b580      	push	{r7, lr}
 8103b82:	b084      	sub	sp, #16
 8103b84:	af00      	add	r7, sp, #0
 8103b86:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8103b88:	6878      	ldr	r0, [r7, #4]
 8103b8a:	f000 fa6e 	bl	810406a <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8103b8e:	4602      	mov	r2, r0
 8103b90:	f107 030c 	add.w	r3, r7, #12
 8103b94:	4611      	mov	r1, r2
 8103b96:	4618      	mov	r0, r3
 8103b98:	f000 fa75 	bl	8104086 <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>
 8103b9c:	4603      	mov	r3, r0
      }
 8103b9e:	4618      	mov	r0, r3
 8103ba0:	3710      	adds	r7, #16
 8103ba2:	46bd      	mov	sp, r7
 8103ba4:	bd80      	pop	{r7, pc}

08103ba6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8103ba6:	b580      	push	{r7, lr}
 8103ba8:	b084      	sub	sp, #16
 8103baa:	af00      	add	r7, sp, #0
 8103bac:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8103bae:	687b      	ldr	r3, [r7, #4]
 8103bb0:	68da      	ldr	r2, [r3, #12]
 8103bb2:	f107 030c 	add.w	r3, r7, #12
 8103bb6:	4611      	mov	r1, r2
 8103bb8:	4618      	mov	r0, r3
 8103bba:	f7ff fc1e 	bl	81033fa <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8103bbe:	68fb      	ldr	r3, [r7, #12]
 8103bc0:	4618      	mov	r0, r3
 8103bc2:	3710      	adds	r7, #16
 8103bc4:	46bd      	mov	sp, r7
 8103bc6:	bd80      	pop	{r7, pc}

08103bc8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8103bc8:	b580      	push	{r7, lr}
 8103bca:	b084      	sub	sp, #16
 8103bcc:	af00      	add	r7, sp, #0
 8103bce:	60f8      	str	r0, [r7, #12]
 8103bd0:	60b9      	str	r1, [r7, #8]
 8103bd2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8103bd4:	68b8      	ldr	r0, [r7, #8]
 8103bd6:	f000 fa62 	bl	810409e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>
 8103bda:	4603      	mov	r3, r0
 8103bdc:	681a      	ldr	r2, [r3, #0]
 8103bde:	68fb      	ldr	r3, [r7, #12]
 8103be0:	601a      	str	r2, [r3, #0]
 8103be2:	6878      	ldr	r0, [r7, #4]
 8103be4:	f000 fa66 	bl	81040b4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8103be8:	4603      	mov	r3, r0
 8103bea:	681a      	ldr	r2, [r3, #0]
 8103bec:	68fb      	ldr	r3, [r7, #12]
 8103bee:	605a      	str	r2, [r3, #4]
 8103bf0:	68fb      	ldr	r3, [r7, #12]
 8103bf2:	4618      	mov	r0, r3
 8103bf4:	3710      	adds	r7, #16
 8103bf6:	46bd      	mov	sp, r7
 8103bf8:	bd80      	pop	{r7, pc}

08103bfa <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8103bfa:	b580      	push	{r7, lr}
 8103bfc:	b082      	sub	sp, #8
 8103bfe:	af00      	add	r7, sp, #0
 8103c00:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	681b      	ldr	r3, [r3, #0]
 8103c06:	4618      	mov	r0, r3
 8103c08:	f019 fa11 	bl	811d02e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8103c0c:	4602      	mov	r2, r0
 8103c0e:	687b      	ldr	r3, [r7, #4]
 8103c10:	601a      	str	r2, [r3, #0]
	return *this;
 8103c12:	687b      	ldr	r3, [r7, #4]
      }
 8103c14:	4618      	mov	r0, r3
 8103c16:	3708      	adds	r7, #8
 8103c18:	46bd      	mov	sp, r7
 8103c1a:	bd80      	pop	{r7, pc}

08103c1c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 8103c1c:	b480      	push	{r7}
 8103c1e:	b085      	sub	sp, #20
 8103c20:	af00      	add	r7, sp, #0
 8103c22:	60f8      	str	r0, [r7, #12]
 8103c24:	60b9      	str	r1, [r7, #8]
 8103c26:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8103c28:	68bb      	ldr	r3, [r7, #8]
 8103c2a:	681a      	ldr	r2, [r3, #0]
 8103c2c:	68fb      	ldr	r3, [r7, #12]
 8103c2e:	601a      	str	r2, [r3, #0]
 8103c30:	687b      	ldr	r3, [r7, #4]
 8103c32:	681a      	ldr	r2, [r3, #0]
 8103c34:	68fb      	ldr	r3, [r7, #12]
 8103c36:	605a      	str	r2, [r3, #4]
 8103c38:	68fb      	ldr	r3, [r7, #12]
 8103c3a:	4618      	mov	r0, r3
 8103c3c:	3714      	adds	r7, #20
 8103c3e:	46bd      	mov	sp, r7
 8103c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c44:	4770      	bx	lr

08103c46 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8103c46:	b5b0      	push	{r4, r5, r7, lr}
 8103c48:	b086      	sub	sp, #24
 8103c4a:	af00      	add	r7, sp, #0
 8103c4c:	60f8      	str	r0, [r7, #12]
 8103c4e:	60b9      	str	r1, [r7, #8]
 8103c50:	607a      	str	r2, [r7, #4]
 8103c52:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8103c54:	68bb      	ldr	r3, [r7, #8]
 8103c56:	2b00      	cmp	r3, #0
 8103c58:	d117      	bne.n	8103c8a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8103c5a:	68f8      	ldr	r0, [r7, #12]
 8103c5c:	f7ff fd02 	bl	8103664 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8103c60:	4602      	mov	r2, r0
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	4293      	cmp	r3, r2
 8103c66:	d010      	beq.n	8103c8a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8103c68:	68fc      	ldr	r4, [r7, #12]
 8103c6a:	6838      	ldr	r0, [r7, #0]
 8103c6c:	f7ff ff88 	bl	8103b80 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8103c70:	4605      	mov	r5, r0
 8103c72:	6878      	ldr	r0, [r7, #4]
 8103c74:	f7ff fd33 	bl	81036de <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8103c78:	4603      	mov	r3, r0
 8103c7a:	461a      	mov	r2, r3
 8103c7c:	4629      	mov	r1, r5
 8103c7e:	4620      	mov	r0, r4
 8103c80:	f7ff f996 	bl	8102fb0 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8103c84:	4603      	mov	r3, r0
 8103c86:	2b00      	cmp	r3, #0
 8103c88:	d001      	beq.n	8103c8e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
 8103c8a:	2301      	movs	r3, #1
 8103c8c:	e000      	b.n	8103c90 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4a>
 8103c8e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8103c90:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8103c92:	68fb      	ldr	r3, [r7, #12]
 8103c94:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8103c96:	7df8      	ldrb	r0, [r7, #23]
 8103c98:	687a      	ldr	r2, [r7, #4]
 8103c9a:	6839      	ldr	r1, [r7, #0]
 8103c9c:	f019 f9c9 	bl	811d032 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8103ca0:	68fb      	ldr	r3, [r7, #12]
 8103ca2:	695b      	ldr	r3, [r3, #20]
 8103ca4:	1c5a      	adds	r2, r3, #1
 8103ca6:	68fb      	ldr	r3, [r7, #12]
 8103ca8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8103caa:	f107 0310 	add.w	r3, r7, #16
 8103cae:	6839      	ldr	r1, [r7, #0]
 8103cb0:	4618      	mov	r0, r3
 8103cb2:	f7ff fba2 	bl	81033fa <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8103cb6:	693b      	ldr	r3, [r7, #16]
    }
 8103cb8:	4618      	mov	r0, r3
 8103cba:	3718      	adds	r7, #24
 8103cbc:	46bd      	mov	sp, r7
 8103cbe:	bdb0      	pop	{r4, r5, r7, pc}

08103cc0 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103cc0:	b480      	push	{r7}
 8103cc2:	b083      	sub	sp, #12
 8103cc4:	af00      	add	r7, sp, #0
 8103cc6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	4618      	mov	r0, r3
 8103ccc:	370c      	adds	r7, #12
 8103cce:	46bd      	mov	sp, r7
 8103cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cd4:	4770      	bx	lr

08103cd6 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103cd6:	b480      	push	{r7}
 8103cd8:	b083      	sub	sp, #12
 8103cda:	af00      	add	r7, sp, #0
 8103cdc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	4618      	mov	r0, r3
 8103ce2:	370c      	adds	r7, #12
 8103ce4:	46bd      	mov	sp, r7
 8103ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cea:	4770      	bx	lr

08103cec <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8103cec:	b480      	push	{r7}
 8103cee:	b083      	sub	sp, #12
 8103cf0:	af00      	add	r7, sp, #0
 8103cf2:	6078      	str	r0, [r7, #4]
 8103cf4:	6039      	str	r1, [r7, #0]
 8103cf6:	bf00      	nop
 8103cf8:	370c      	adds	r7, #12
 8103cfa:	46bd      	mov	sp, r7
 8103cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d00:	4770      	bx	lr

08103d02 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8103d02:	b580      	push	{r7, lr}
 8103d04:	b084      	sub	sp, #16
 8103d06:	af00      	add	r7, sp, #0
 8103d08:	60f8      	str	r0, [r7, #12]
 8103d0a:	60b9      	str	r1, [r7, #8]
 8103d0c:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8103d0e:	687a      	ldr	r2, [r7, #4]
 8103d10:	4613      	mov	r3, r2
 8103d12:	00db      	lsls	r3, r3, #3
 8103d14:	1a9b      	subs	r3, r3, r2
 8103d16:	009b      	lsls	r3, r3, #2
 8103d18:	4619      	mov	r1, r3
 8103d1a:	68b8      	ldr	r0, [r7, #8]
 8103d1c:	f019 f90e 	bl	811cf3c <_ZdlPvj>
      }
 8103d20:	bf00      	nop
 8103d22:	3710      	adds	r7, #16
 8103d24:	46bd      	mov	sp, r7
 8103d26:	bd80      	pop	{r7, pc}

08103d28 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8103d28:	b580      	push	{r7, lr}
 8103d2a:	b082      	sub	sp, #8
 8103d2c:	af00      	add	r7, sp, #0
 8103d2e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8103d30:	687b      	ldr	r3, [r7, #4]
 8103d32:	4618      	mov	r0, r3
 8103d34:	f000 f9e6 	bl	8104104 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8103d38:	4603      	mov	r3, r0
 8103d3a:	4618      	mov	r0, r3
 8103d3c:	f000 f9c6 	bl	81040cc <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>
 8103d40:	4603      	mov	r3, r0
 8103d42:	4618      	mov	r0, r3
 8103d44:	3708      	adds	r7, #8
 8103d46:	46bd      	mov	sp, r7
 8103d48:	bd80      	pop	{r7, pc}
	...

08103d4c <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8103d4c:	b480      	push	{r7}
 8103d4e:	b083      	sub	sp, #12
 8103d50:	af00      	add	r7, sp, #0
 8103d52:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	685a      	ldr	r2, [r3, #4]
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	1ad3      	subs	r3, r2, r3
 8103d5e:	109b      	asrs	r3, r3, #2
 8103d60:	4a04      	ldr	r2, [pc, #16]	@ (8103d74 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv+0x28>)
 8103d62:	fb02 f303 	mul.w	r3, r2, r3
 8103d66:	4618      	mov	r0, r3
 8103d68:	370c      	adds	r7, #12
 8103d6a:	46bd      	mov	sp, r7
 8103d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d70:	4770      	bx	lr
 8103d72:	bf00      	nop
 8103d74:	b6db6db7 	.word	0xb6db6db7

08103d78 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8103d78:	b480      	push	{r7}
 8103d7a:	b083      	sub	sp, #12
 8103d7c:	af00      	add	r7, sp, #0
 8103d7e:	6078      	str	r0, [r7, #4]
 8103d80:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8103d82:	687b      	ldr	r3, [r7, #4]
 8103d84:	681a      	ldr	r2, [r3, #0]
 8103d86:	683b      	ldr	r3, [r7, #0]
 8103d88:	681b      	ldr	r3, [r3, #0]
 8103d8a:	429a      	cmp	r2, r3
 8103d8c:	d201      	bcs.n	8103d92 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8103d8e:	683b      	ldr	r3, [r7, #0]
 8103d90:	e000      	b.n	8103d94 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8103d92:	687b      	ldr	r3, [r7, #4]
    }
 8103d94:	4618      	mov	r0, r3
 8103d96:	370c      	adds	r7, #12
 8103d98:	46bd      	mov	sp, r7
 8103d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d9e:	4770      	bx	lr

08103da0 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8103da0:	b580      	push	{r7, lr}
 8103da2:	b082      	sub	sp, #8
 8103da4:	af00      	add	r7, sp, #0
 8103da6:	6078      	str	r0, [r7, #4]
 8103da8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8103daa:	2200      	movs	r2, #0
 8103dac:	6839      	ldr	r1, [r7, #0]
 8103dae:	6878      	ldr	r0, [r7, #4]
 8103db0:	f000 f9b4 	bl	810411c <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>
 8103db4:	4603      	mov	r3, r0
 8103db6:	4618      	mov	r0, r3
 8103db8:	3708      	adds	r7, #8
 8103dba:	46bd      	mov	sp, r7
 8103dbc:	bd80      	pop	{r7, pc}

08103dbe <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8103dbe:	b580      	push	{r7, lr}
 8103dc0:	b084      	sub	sp, #16
 8103dc2:	af00      	add	r7, sp, #0
 8103dc4:	60f8      	str	r0, [r7, #12]
 8103dc6:	60b9      	str	r1, [r7, #8]
 8103dc8:	607a      	str	r2, [r7, #4]
 8103dca:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8103dcc:	683b      	ldr	r3, [r7, #0]
 8103dce:	687a      	ldr	r2, [r7, #4]
 8103dd0:	68b9      	ldr	r1, [r7, #8]
 8103dd2:	68f8      	ldr	r0, [r7, #12]
 8103dd4:	f000 f9d0 	bl	8104178 <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8103dd8:	4603      	mov	r3, r0
      }
 8103dda:	4618      	mov	r0, r3
 8103ddc:	3710      	adds	r7, #16
 8103dde:	46bd      	mov	sp, r7
 8103de0:	bd80      	pop	{r7, pc}

08103de2 <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8103de2:	b580      	push	{r7, lr}
 8103de4:	b084      	sub	sp, #16
 8103de6:	af00      	add	r7, sp, #0
 8103de8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8103dea:	f107 030c 	add.w	r3, r7, #12
 8103dee:	6879      	ldr	r1, [r7, #4]
 8103df0:	4618      	mov	r0, r3
 8103df2:	f000 f9de 	bl	81041b2 <_ZNSt13move_iteratorIP8SMessageEC1ES1_>
 8103df6:	68fb      	ldr	r3, [r7, #12]
 8103df8:	4618      	mov	r0, r3
 8103dfa:	3710      	adds	r7, #16
 8103dfc:	46bd      	mov	sp, r7
 8103dfe:	bd80      	pop	{r7, pc}

08103e00 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8103e00:	b580      	push	{r7, lr}
 8103e02:	b084      	sub	sp, #16
 8103e04:	af00      	add	r7, sp, #0
 8103e06:	60f8      	str	r0, [r7, #12]
 8103e08:	60b9      	str	r1, [r7, #8]
 8103e0a:	607a      	str	r2, [r7, #4]
 8103e0c:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8103e0e:	687a      	ldr	r2, [r7, #4]
 8103e10:	68b9      	ldr	r1, [r7, #8]
 8103e12:	68f8      	ldr	r0, [r7, #12]
 8103e14:	f000 f9df 	bl	81041d6 <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8103e18:	4603      	mov	r3, r0
    }
 8103e1a:	4618      	mov	r0, r3
 8103e1c:	3710      	adds	r7, #16
 8103e1e:	46bd      	mov	sp, r7
 8103e20:	bd80      	pop	{r7, pc}

08103e22 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8103e22:	b580      	push	{r7, lr}
 8103e24:	b082      	sub	sp, #8
 8103e26:	af00      	add	r7, sp, #0
 8103e28:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8103e2a:	6878      	ldr	r0, [r7, #4]
 8103e2c:	f000 f9e7 	bl	81041fe <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8103e30:	4603      	mov	r3, r0
 8103e32:	4618      	mov	r0, r3
 8103e34:	3708      	adds	r7, #8
 8103e36:	46bd      	mov	sp, r7
 8103e38:	bd80      	pop	{r7, pc}

08103e3a <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8103e3a:	b480      	push	{r7}
 8103e3c:	b083      	sub	sp, #12
 8103e3e:	af00      	add	r7, sp, #0
 8103e40:	6078      	str	r0, [r7, #4]
 8103e42:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	683a      	ldr	r2, [r7, #0]
 8103e48:	601a      	str	r2, [r3, #0]
 8103e4a:	687b      	ldr	r3, [r7, #4]
 8103e4c:	4618      	mov	r0, r3
 8103e4e:	370c      	adds	r7, #12
 8103e50:	46bd      	mov	sp, r7
 8103e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e56:	4770      	bx	lr

08103e58 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8103e58:	b5b0      	push	{r4, r5, r7, lr}
 8103e5a:	b088      	sub	sp, #32
 8103e5c:	af02      	add	r7, sp, #8
 8103e5e:	60f8      	str	r0, [r7, #12]
 8103e60:	60b9      	str	r1, [r7, #8]
 8103e62:	607a      	str	r2, [r7, #4]
 8103e64:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8103e66:	68f8      	ldr	r0, [r7, #12]
 8103e68:	f000 f8c9 	bl	8103ffe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8103e6c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8103e6e:	68b8      	ldr	r0, [r7, #8]
 8103e70:	f7ff fc80 	bl	8103774 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103e74:	4604      	mov	r4, r0
 8103e76:	6878      	ldr	r0, [r7, #4]
 8103e78:	f7ff fc87 	bl	810378a <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8103e7c:	4605      	mov	r5, r0
 8103e7e:	6838      	ldr	r0, [r7, #0]
 8103e80:	f7ff fc8e 	bl	81037a0 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103e84:	4603      	mov	r3, r0
 8103e86:	9300      	str	r3, [sp, #0]
 8103e88:	462b      	mov	r3, r5
 8103e8a:	4622      	mov	r2, r4
 8103e8c:	6979      	ldr	r1, [r7, #20]
 8103e8e:	68f8      	ldr	r0, [r7, #12]
 8103e90:	f000 f9c0 	bl	8104214 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8103e94:	697b      	ldr	r3, [r7, #20]
	}
 8103e96:	4618      	mov	r0, r3
 8103e98:	3718      	adds	r7, #24
 8103e9a:	46bd      	mov	sp, r7
 8103e9c:	bdb0      	pop	{r4, r5, r7, pc}

08103e9e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8103e9e:	b580      	push	{r7, lr}
 8103ea0:	b084      	sub	sp, #16
 8103ea2:	af00      	add	r7, sp, #0
 8103ea4:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8103ea6:	687b      	ldr	r3, [r7, #4]
 8103ea8:	681a      	ldr	r2, [r3, #0]
 8103eaa:	f107 030c 	add.w	r3, r7, #12
 8103eae:	4611      	mov	r1, r2
 8103eb0:	4618      	mov	r0, r3
 8103eb2:	f7ff faa2 	bl	81033fa <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8103eb6:	68fb      	ldr	r3, [r7, #12]
 8103eb8:	4618      	mov	r0, r3
 8103eba:	3710      	adds	r7, #16
 8103ebc:	46bd      	mov	sp, r7
 8103ebe:	bd80      	pop	{r7, pc}

08103ec0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8103ec0:	b480      	push	{r7}
 8103ec2:	b083      	sub	sp, #12
 8103ec4:	af00      	add	r7, sp, #0
 8103ec6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	3310      	adds	r3, #16
 8103ecc:	4618      	mov	r0, r3
 8103ece:	370c      	adds	r7, #12
 8103ed0:	46bd      	mov	sp, r7
 8103ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ed6:	4770      	bx	lr

08103ed8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8103ed8:	b480      	push	{r7}
 8103eda:	b083      	sub	sp, #12
 8103edc:	af00      	add	r7, sp, #0
 8103ede:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8103ee0:	687b      	ldr	r3, [r7, #4]
 8103ee2:	330c      	adds	r3, #12
 8103ee4:	4618      	mov	r0, r3
 8103ee6:	370c      	adds	r7, #12
 8103ee8:	46bd      	mov	sp, r7
 8103eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103eee:	4770      	bx	lr

08103ef0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8103ef0:	b580      	push	{r7, lr}
 8103ef2:	b084      	sub	sp, #16
 8103ef4:	af00      	add	r7, sp, #0
 8103ef6:	60f8      	str	r0, [r7, #12]
 8103ef8:	60b9      	str	r1, [r7, #8]
 8103efa:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8103efc:	68b8      	ldr	r0, [r7, #8]
 8103efe:	f000 f8d9 	bl	81040b4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8103f02:	4603      	mov	r3, r0
 8103f04:	681a      	ldr	r2, [r3, #0]
 8103f06:	68fb      	ldr	r3, [r7, #12]
 8103f08:	601a      	str	r2, [r3, #0]
 8103f0a:	6878      	ldr	r0, [r7, #4]
 8103f0c:	f000 f8d2 	bl	81040b4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8103f10:	4603      	mov	r3, r0
 8103f12:	681a      	ldr	r2, [r3, #0]
 8103f14:	68fb      	ldr	r3, [r7, #12]
 8103f16:	605a      	str	r2, [r3, #4]
 8103f18:	68fb      	ldr	r3, [r7, #12]
 8103f1a:	4618      	mov	r0, r3
 8103f1c:	3710      	adds	r7, #16
 8103f1e:	46bd      	mov	sp, r7
 8103f20:	bd80      	pop	{r7, pc}

08103f22 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8103f22:	b580      	push	{r7, lr}
 8103f24:	b082      	sub	sp, #8
 8103f26:	af00      	add	r7, sp, #0
 8103f28:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8103f2a:	687b      	ldr	r3, [r7, #4]
 8103f2c:	681b      	ldr	r3, [r3, #0]
 8103f2e:	4618      	mov	r0, r3
 8103f30:	f019 f87b 	bl	811d02a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8103f34:	4602      	mov	r2, r0
 8103f36:	687b      	ldr	r3, [r7, #4]
 8103f38:	601a      	str	r2, [r3, #0]
	return *this;
 8103f3a:	687b      	ldr	r3, [r7, #4]
      }
 8103f3c:	4618      	mov	r0, r3
 8103f3e:	3708      	adds	r7, #8
 8103f40:	46bd      	mov	sp, r7
 8103f42:	bd80      	pop	{r7, pc}

08103f44 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1IS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8103f44:	b590      	push	{r4, r7, lr}
 8103f46:	b083      	sub	sp, #12
 8103f48:	af00      	add	r7, sp, #0
 8103f4a:	6078      	str	r0, [r7, #4]
 8103f4c:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8103f4e:	687c      	ldr	r4, [r7, #4]
 8103f50:	6838      	ldr	r0, [r7, #0]
 8103f52:	f7ff fd76 	bl	8103a42 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103f56:	4603      	mov	r3, r0
 8103f58:	4619      	mov	r1, r3
 8103f5a:	4620      	mov	r0, r4
 8103f5c:	f000 f987 	bl	810426e <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EEC1IS1_EEOT_>
	{ }
 8103f60:	687b      	ldr	r3, [r7, #4]
 8103f62:	4618      	mov	r0, r3
 8103f64:	370c      	adds	r7, #12
 8103f66:	46bd      	mov	sp, r7
 8103f68:	bd90      	pop	{r4, r7, pc}

08103f6a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8103f6a:	b5b0      	push	{r4, r5, r7, lr}
 8103f6c:	b088      	sub	sp, #32
 8103f6e:	af02      	add	r7, sp, #8
 8103f70:	60f8      	str	r0, [r7, #12]
 8103f72:	60b9      	str	r1, [r7, #8]
 8103f74:	607a      	str	r2, [r7, #4]
 8103f76:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8103f78:	68f8      	ldr	r0, [r7, #12]
 8103f7a:	f000 f840 	bl	8103ffe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8103f7e:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8103f80:	68b8      	ldr	r0, [r7, #8]
 8103f82:	f7ff fbf7 	bl	8103774 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103f86:	4604      	mov	r4, r0
 8103f88:	6878      	ldr	r0, [r7, #4]
 8103f8a:	f7ff fd88 	bl	8103a9e <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8103f8e:	4605      	mov	r5, r0
 8103f90:	6838      	ldr	r0, [r7, #0]
 8103f92:	f7ff fc05 	bl	81037a0 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103f96:	4603      	mov	r3, r0
 8103f98:	9300      	str	r3, [sp, #0]
 8103f9a:	462b      	mov	r3, r5
 8103f9c:	4622      	mov	r2, r4
 8103f9e:	6979      	ldr	r1, [r7, #20]
 8103fa0:	68f8      	ldr	r0, [r7, #12]
 8103fa2:	f000 f974 	bl	810428e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8103fa6:	697b      	ldr	r3, [r7, #20]
	}
 8103fa8:	4618      	mov	r0, r3
 8103faa:	3718      	adds	r7, #24
 8103fac:	46bd      	mov	sp, r7
 8103fae:	bdb0      	pop	{r4, r5, r7, pc}

08103fb0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8103fb0:	b480      	push	{r7}
 8103fb2:	b083      	sub	sp, #12
 8103fb4:	af00      	add	r7, sp, #0
 8103fb6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	4618      	mov	r0, r3
 8103fbc:	370c      	adds	r7, #12
 8103fbe:	46bd      	mov	sp, r7
 8103fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fc4:	4770      	bx	lr

08103fc6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8103fc6:	b580      	push	{r7, lr}
 8103fc8:	b082      	sub	sp, #8
 8103fca:	af00      	add	r7, sp, #0
 8103fcc:	6078      	str	r0, [r7, #4]
 8103fce:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8103fd0:	6839      	ldr	r1, [r7, #0]
 8103fd2:	6878      	ldr	r0, [r7, #4]
 8103fd4:	f000 f988 	bl	81042e8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>
	}
 8103fd8:	bf00      	nop
 8103fda:	3708      	adds	r7, #8
 8103fdc:	46bd      	mov	sp, r7
 8103fde:	bd80      	pop	{r7, pc}

08103fe0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8103fe0:	b580      	push	{r7, lr}
 8103fe2:	b084      	sub	sp, #16
 8103fe4:	af00      	add	r7, sp, #0
 8103fe6:	60f8      	str	r0, [r7, #12]
 8103fe8:	60b9      	str	r1, [r7, #8]
 8103fea:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8103fec:	687a      	ldr	r2, [r7, #4]
 8103fee:	68b9      	ldr	r1, [r7, #8]
 8103ff0:	68f8      	ldr	r0, [r7, #12]
 8103ff2:	f000 f984 	bl	81042fe <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>
 8103ff6:	bf00      	nop
 8103ff8:	3710      	adds	r7, #16
 8103ffa:	46bd      	mov	sp, r7
 8103ffc:	bd80      	pop	{r7, pc}

08103ffe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8103ffe:	b580      	push	{r7, lr}
 8104000:	b082      	sub	sp, #8
 8104002:	af00      	add	r7, sp, #0
 8104004:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8104006:	6878      	ldr	r0, [r7, #4]
 8104008:	f7ff ffd2 	bl	8103fb0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 810400c:	4603      	mov	r3, r0
 810400e:	2101      	movs	r1, #1
 8104010:	4618      	mov	r0, r3
 8104012:	f000 f987 	bl	8104324 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>
 8104016:	4603      	mov	r3, r0
 8104018:	4618      	mov	r0, r3
 810401a:	3708      	adds	r7, #8
 810401c:	46bd      	mov	sp, r7
 810401e:	bd80      	pop	{r7, pc}

08104020 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8104020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8104022:	b085      	sub	sp, #20
 8104024:	af00      	add	r7, sp, #0
 8104026:	60f8      	str	r0, [r7, #12]
 8104028:	60b9      	str	r1, [r7, #8]
 810402a:	607a      	str	r2, [r7, #4]
 810402c:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 810402e:	68bb      	ldr	r3, [r7, #8]
 8104030:	4619      	mov	r1, r3
 8104032:	2018      	movs	r0, #24
 8104034:	f7fc ff32 	bl	8100e9c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8104038:	68f8      	ldr	r0, [r7, #12]
 810403a:	f7ff ffb9 	bl	8103fb0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 810403e:	4604      	mov	r4, r0
 8104040:	68b8      	ldr	r0, [r7, #8]
 8104042:	f7ff fb7a 	bl	810373a <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8104046:	4605      	mov	r5, r0
 8104048:	6878      	ldr	r0, [r7, #4]
 810404a:	f7fe fd46 	bl	8102ada <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810404e:	4606      	mov	r6, r0
 8104050:	6838      	ldr	r0, [r7, #0]
 8104052:	f7fe fd4d 	bl	8102af0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8104056:	4603      	mov	r3, r0
 8104058:	4632      	mov	r2, r6
 810405a:	4629      	mov	r1, r5
 810405c:	4620      	mov	r0, r4
 810405e:	f000 f970 	bl	8104342 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>
	}
 8104062:	bf00      	nop
 8104064:	3714      	adds	r7, #20
 8104066:	46bd      	mov	sp, r7
 8104068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810406a <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr() const
 810406a:	b580      	push	{r7, lr}
 810406c:	b082      	sub	sp, #8
 810406e:	af00      	add	r7, sp, #0
 8104070:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	3310      	adds	r3, #16
 8104076:	4618      	mov	r0, r3
 8104078:	f000 f97b 	bl	8104372 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 810407c:	4603      	mov	r3, r0
 810407e:	4618      	mov	r0, r3
 8104080:	3708      	adds	r7, #8
 8104082:	46bd      	mov	sp, r7
 8104084:	bd80      	pop	{r7, pc}

08104086 <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8104086:	b480      	push	{r7}
 8104088:	b083      	sub	sp, #12
 810408a:	af00      	add	r7, sp, #0
 810408c:	6078      	str	r0, [r7, #4]
 810408e:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8104090:	683b      	ldr	r3, [r7, #0]
 8104092:	4618      	mov	r0, r3
 8104094:	370c      	adds	r7, #12
 8104096:	46bd      	mov	sp, r7
 8104098:	f85d 7b04 	ldr.w	r7, [sp], #4
 810409c:	4770      	bx	lr

0810409e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810409e:	b480      	push	{r7}
 81040a0:	b083      	sub	sp, #12
 81040a2:	af00      	add	r7, sp, #0
 81040a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	4618      	mov	r0, r3
 81040aa:	370c      	adds	r7, #12
 81040ac:	46bd      	mov	sp, r7
 81040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040b2:	4770      	bx	lr

081040b4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81040b4:	b480      	push	{r7}
 81040b6:	b083      	sub	sp, #12
 81040b8:	af00      	add	r7, sp, #0
 81040ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81040bc:	687b      	ldr	r3, [r7, #4]
 81040be:	4618      	mov	r0, r3
 81040c0:	370c      	adds	r7, #12
 81040c2:	46bd      	mov	sp, r7
 81040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040c8:	4770      	bx	lr
	...

081040cc <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 81040cc:	b580      	push	{r7, lr}
 81040ce:	b084      	sub	sp, #16
 81040d0:	af00      	add	r7, sp, #0
 81040d2:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 81040d4:	4b0a      	ldr	r3, [pc, #40]	@ (8104100 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 81040d6:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 81040d8:	6878      	ldr	r0, [r7, #4]
 81040da:	f000 f956 	bl	810438a <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>
 81040de:	4603      	mov	r3, r0
 81040e0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 81040e2:	f107 0208 	add.w	r2, r7, #8
 81040e6:	f107 030c 	add.w	r3, r7, #12
 81040ea:	4611      	mov	r1, r2
 81040ec:	4618      	mov	r0, r3
 81040ee:	f000 f958 	bl	81043a2 <_ZSt3minIjERKT_S2_S2_>
 81040f2:	4603      	mov	r3, r0
 81040f4:	681b      	ldr	r3, [r3, #0]
      }
 81040f6:	4618      	mov	r0, r3
 81040f8:	3710      	adds	r7, #16
 81040fa:	46bd      	mov	sp, r7
 81040fc:	bd80      	pop	{r7, pc}
 81040fe:	bf00      	nop
 8104100:	04924924 	.word	0x04924924

08104104 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8104104:	b480      	push	{r7}
 8104106:	b083      	sub	sp, #12
 8104108:	af00      	add	r7, sp, #0
 810410a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810410c:	687b      	ldr	r3, [r7, #4]
 810410e:	4618      	mov	r0, r3
 8104110:	370c      	adds	r7, #12
 8104112:	46bd      	mov	sp, r7
 8104114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104118:	4770      	bx	lr
	...

0810411c <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 810411c:	b580      	push	{r7, lr}
 810411e:	b084      	sub	sp, #16
 8104120:	af00      	add	r7, sp, #0
 8104122:	60f8      	str	r0, [r7, #12]
 8104124:	60b9      	str	r1, [r7, #8]
 8104126:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8104128:	68f8      	ldr	r0, [r7, #12]
 810412a:	f000 f94f 	bl	81043cc <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 810412e:	4602      	mov	r2, r0
 8104130:	68bb      	ldr	r3, [r7, #8]
 8104132:	4293      	cmp	r3, r2
 8104134:	bf8c      	ite	hi
 8104136:	2301      	movhi	r3, #1
 8104138:	2300      	movls	r3, #0
 810413a:	b2db      	uxtb	r3, r3
 810413c:	2b00      	cmp	r3, #0
 810413e:	bf14      	ite	ne
 8104140:	2301      	movne	r3, #1
 8104142:	2300      	moveq	r3, #0
 8104144:	b2db      	uxtb	r3, r3
 8104146:	2b00      	cmp	r3, #0
 8104148:	d007      	beq.n	810415a <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 810414a:	68bb      	ldr	r3, [r7, #8]
 810414c:	4a09      	ldr	r2, [pc, #36]	@ (8104174 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x58>)
 810414e:	4293      	cmp	r3, r2
 8104150:	d901      	bls.n	8104156 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8104152:	f018 ffd5 	bl	811d100 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8104156:	f018 ffd0 	bl	811d0fa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 810415a:	68ba      	ldr	r2, [r7, #8]
 810415c:	4613      	mov	r3, r2
 810415e:	00db      	lsls	r3, r3, #3
 8104160:	1a9b      	subs	r3, r3, r2
 8104162:	009b      	lsls	r3, r3, #2
 8104164:	4618      	mov	r0, r3
 8104166:	f018 fefa 	bl	811cf5e <_Znwj>
 810416a:	4603      	mov	r3, r0
      }
 810416c:	4618      	mov	r0, r3
 810416e:	3710      	adds	r7, #16
 8104170:	46bd      	mov	sp, r7
 8104172:	bd80      	pop	{r7, pc}
 8104174:	09249249 	.word	0x09249249

08104178 <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8104178:	b5b0      	push	{r4, r5, r7, lr}
 810417a:	b084      	sub	sp, #16
 810417c:	af00      	add	r7, sp, #0
 810417e:	60f8      	str	r0, [r7, #12]
 8104180:	60b9      	str	r1, [r7, #8]
 8104182:	607a      	str	r2, [r7, #4]
 8104184:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8104186:	68f8      	ldr	r0, [r7, #12]
 8104188:	f000 f92e 	bl	81043e8 <_ZSt12__niter_baseIP8SMessageET_S2_>
 810418c:	4604      	mov	r4, r0
 810418e:	68b8      	ldr	r0, [r7, #8]
 8104190:	f000 f92a 	bl	81043e8 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8104194:	4605      	mov	r5, r0
 8104196:	6878      	ldr	r0, [r7, #4]
 8104198:	f000 f926 	bl	81043e8 <_ZSt12__niter_baseIP8SMessageET_S2_>
 810419c:	4602      	mov	r2, r0
 810419e:	683b      	ldr	r3, [r7, #0]
 81041a0:	4629      	mov	r1, r5
 81041a2:	4620      	mov	r0, r4
 81041a4:	f000 f92c 	bl	8104400 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 81041a8:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 81041aa:	4618      	mov	r0, r3
 81041ac:	3710      	adds	r7, #16
 81041ae:	46bd      	mov	sp, r7
 81041b0:	bdb0      	pop	{r4, r5, r7, pc}

081041b2 <_ZNSt13move_iteratorIP8SMessageEC1ES1_>:
      move_iterator(iterator_type __i)
 81041b2:	b580      	push	{r7, lr}
 81041b4:	b082      	sub	sp, #8
 81041b6:	af00      	add	r7, sp, #0
 81041b8:	6078      	str	r0, [r7, #4]
 81041ba:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 81041bc:	463b      	mov	r3, r7
 81041be:	4618      	mov	r0, r3
 81041c0:	f000 f948 	bl	8104454 <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>
 81041c4:	4603      	mov	r3, r0
 81041c6:	681a      	ldr	r2, [r3, #0]
 81041c8:	687b      	ldr	r3, [r7, #4]
 81041ca:	601a      	str	r2, [r3, #0]
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	4618      	mov	r0, r3
 81041d0:	3708      	adds	r7, #8
 81041d2:	46bd      	mov	sp, r7
 81041d4:	bd80      	pop	{r7, pc}

081041d6 <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 81041d6:	b580      	push	{r7, lr}
 81041d8:	b086      	sub	sp, #24
 81041da:	af00      	add	r7, sp, #0
 81041dc:	60f8      	str	r0, [r7, #12]
 81041de:	60b9      	str	r1, [r7, #8]
 81041e0:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 81041e2:	2301      	movs	r3, #1
 81041e4:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 81041e6:	2301      	movs	r3, #1
 81041e8:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 81041ea:	687a      	ldr	r2, [r7, #4]
 81041ec:	68b9      	ldr	r1, [r7, #8]
 81041ee:	68f8      	ldr	r0, [r7, #12]
 81041f0:	f000 f93b 	bl	810446a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>
 81041f4:	4603      	mov	r3, r0
    }
 81041f6:	4618      	mov	r0, r3
 81041f8:	3718      	adds	r7, #24
 81041fa:	46bd      	mov	sp, r7
 81041fc:	bd80      	pop	{r7, pc}

081041fe <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() noexcept
 81041fe:	b480      	push	{r7}
 8104200:	b083      	sub	sp, #12
 8104202:	af00      	add	r7, sp, #0
 8104204:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8104206:	687b      	ldr	r3, [r7, #4]
 8104208:	4618      	mov	r0, r3
 810420a:	370c      	adds	r7, #12
 810420c:	46bd      	mov	sp, r7
 810420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104212:	4770      	bx	lr

08104214 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8104214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8104218:	b086      	sub	sp, #24
 810421a:	af02      	add	r7, sp, #8
 810421c:	60f8      	str	r0, [r7, #12]
 810421e:	60b9      	str	r1, [r7, #8]
 8104220:	607a      	str	r2, [r7, #4]
 8104222:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8104224:	68bb      	ldr	r3, [r7, #8]
 8104226:	4619      	mov	r1, r3
 8104228:	2018      	movs	r0, #24
 810422a:	f7fc fe37 	bl	8100e9c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 810422e:	68f8      	ldr	r0, [r7, #12]
 8104230:	f7ff febe 	bl	8103fb0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8104234:	4604      	mov	r4, r0
 8104236:	68b8      	ldr	r0, [r7, #8]
 8104238:	f7ff fa7f 	bl	810373a <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810423c:	4605      	mov	r5, r0
 810423e:	6878      	ldr	r0, [r7, #4]
 8104240:	f7ff fa98 	bl	8103774 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8104244:	4606      	mov	r6, r0
 8104246:	6838      	ldr	r0, [r7, #0]
 8104248:	f7ff fa9f 	bl	810378a <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810424c:	4680      	mov	r8, r0
 810424e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8104250:	f7ff faa6 	bl	81037a0 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8104254:	4603      	mov	r3, r0
 8104256:	9300      	str	r3, [sp, #0]
 8104258:	4643      	mov	r3, r8
 810425a:	4632      	mov	r2, r6
 810425c:	4629      	mov	r1, r5
 810425e:	4620      	mov	r0, r4
 8104260:	f000 f913 	bl	810448a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8104264:	bf00      	nop
 8104266:	3710      	adds	r7, #16
 8104268:	46bd      	mov	sp, r7
 810426a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810426e <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 810426e:	b580      	push	{r7, lr}
 8104270:	b082      	sub	sp, #8
 8104272:	af00      	add	r7, sp, #0
 8104274:	6078      	str	r0, [r7, #4]
 8104276:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8104278:	6838      	ldr	r0, [r7, #0]
 810427a:	f7ff fbe2 	bl	8103a42 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 810427e:	4602      	mov	r2, r0
 8104280:	687b      	ldr	r3, [r7, #4]
 8104282:	601a      	str	r2, [r3, #0]
 8104284:	687b      	ldr	r3, [r7, #4]
 8104286:	4618      	mov	r0, r3
 8104288:	3708      	adds	r7, #8
 810428a:	46bd      	mov	sp, r7
 810428c:	bd80      	pop	{r7, pc}

0810428e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 810428e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8104292:	b086      	sub	sp, #24
 8104294:	af02      	add	r7, sp, #8
 8104296:	60f8      	str	r0, [r7, #12]
 8104298:	60b9      	str	r1, [r7, #8]
 810429a:	607a      	str	r2, [r7, #4]
 810429c:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 810429e:	68bb      	ldr	r3, [r7, #8]
 81042a0:	4619      	mov	r1, r3
 81042a2:	2018      	movs	r0, #24
 81042a4:	f7fc fdfa 	bl	8100e9c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 81042a8:	68f8      	ldr	r0, [r7, #12]
 81042aa:	f7ff fe81 	bl	8103fb0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81042ae:	4604      	mov	r4, r0
 81042b0:	68b8      	ldr	r0, [r7, #8]
 81042b2:	f7ff fa42 	bl	810373a <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 81042b6:	4605      	mov	r5, r0
 81042b8:	6878      	ldr	r0, [r7, #4]
 81042ba:	f7ff fa5b 	bl	8103774 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81042be:	4606      	mov	r6, r0
 81042c0:	6838      	ldr	r0, [r7, #0]
 81042c2:	f7ff fbec 	bl	8103a9e <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 81042c6:	4680      	mov	r8, r0
 81042c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81042ca:	f7ff fa69 	bl	81037a0 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81042ce:	4603      	mov	r3, r0
 81042d0:	9300      	str	r3, [sp, #0]
 81042d2:	4643      	mov	r3, r8
 81042d4:	4632      	mov	r2, r6
 81042d6:	4629      	mov	r1, r5
 81042d8:	4620      	mov	r0, r4
 81042da:	f000 f8f4 	bl	81044c6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 81042de:	bf00      	nop
 81042e0:	3710      	adds	r7, #16
 81042e2:	46bd      	mov	sp, r7
 81042e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

081042e8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 81042e8:	b480      	push	{r7}
 81042ea:	b083      	sub	sp, #12
 81042ec:	af00      	add	r7, sp, #0
 81042ee:	6078      	str	r0, [r7, #4]
 81042f0:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 81042f2:	bf00      	nop
 81042f4:	370c      	adds	r7, #12
 81042f6:	46bd      	mov	sp, r7
 81042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042fc:	4770      	bx	lr

081042fe <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 81042fe:	b580      	push	{r7, lr}
 8104300:	b084      	sub	sp, #16
 8104302:	af00      	add	r7, sp, #0
 8104304:	60f8      	str	r0, [r7, #12]
 8104306:	60b9      	str	r1, [r7, #8]
 8104308:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 810430a:	687a      	ldr	r2, [r7, #4]
 810430c:	4613      	mov	r3, r2
 810430e:	005b      	lsls	r3, r3, #1
 8104310:	4413      	add	r3, r2
 8104312:	00db      	lsls	r3, r3, #3
 8104314:	4619      	mov	r1, r3
 8104316:	68b8      	ldr	r0, [r7, #8]
 8104318:	f018 fe10 	bl	811cf3c <_ZdlPvj>
      }
 810431c:	bf00      	nop
 810431e:	3710      	adds	r7, #16
 8104320:	46bd      	mov	sp, r7
 8104322:	bd80      	pop	{r7, pc}

08104324 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8104324:	b580      	push	{r7, lr}
 8104326:	b082      	sub	sp, #8
 8104328:	af00      	add	r7, sp, #0
 810432a:	6078      	str	r0, [r7, #4]
 810432c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 810432e:	2200      	movs	r2, #0
 8104330:	6839      	ldr	r1, [r7, #0]
 8104332:	6878      	ldr	r0, [r7, #4]
 8104334:	f000 f8e6 	bl	8104504 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>
 8104338:	4603      	mov	r3, r0
 810433a:	4618      	mov	r0, r3
 810433c:	3708      	adds	r7, #8
 810433e:	46bd      	mov	sp, r7
 8104340:	bd80      	pop	{r7, pc}

08104342 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8104342:	b590      	push	{r4, r7, lr}
 8104344:	b085      	sub	sp, #20
 8104346:	af00      	add	r7, sp, #0
 8104348:	60f8      	str	r0, [r7, #12]
 810434a:	60b9      	str	r1, [r7, #8]
 810434c:	607a      	str	r2, [r7, #4]
 810434e:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8104350:	6878      	ldr	r0, [r7, #4]
 8104352:	f7fe fbc2 	bl	8102ada <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8104356:	4604      	mov	r4, r0
 8104358:	6838      	ldr	r0, [r7, #0]
 810435a:	f7fe fbc9 	bl	8102af0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810435e:	4603      	mov	r3, r0
 8104360:	4622      	mov	r2, r4
 8104362:	68b9      	ldr	r1, [r7, #8]
 8104364:	68f8      	ldr	r0, [r7, #12]
 8104366:	f000 f8fb 	bl	8104560 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>
	}
 810436a:	bf00      	nop
 810436c:	3714      	adds	r7, #20
 810436e:	46bd      	mov	sp, r7
 8104370:	bd90      	pop	{r4, r7, pc}

08104372 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8104372:	b580      	push	{r7, lr}
 8104374:	b082      	sub	sp, #8
 8104376:	af00      	add	r7, sp, #0
 8104378:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 810437a:	6878      	ldr	r0, [r7, #4]
 810437c:	f000 f90e 	bl	810459c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8104380:	4603      	mov	r3, r0
 8104382:	4618      	mov	r0, r3
 8104384:	3708      	adds	r7, #8
 8104386:	46bd      	mov	sp, r7
 8104388:	bd80      	pop	{r7, pc}

0810438a <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 810438a:	b580      	push	{r7, lr}
 810438c:	b082      	sub	sp, #8
 810438e:	af00      	add	r7, sp, #0
 8104390:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8104392:	6878      	ldr	r0, [r7, #4]
 8104394:	f000 f90d 	bl	81045b2 <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>
 8104398:	4603      	mov	r3, r0
      }
 810439a:	4618      	mov	r0, r3
 810439c:	3708      	adds	r7, #8
 810439e:	46bd      	mov	sp, r7
 81043a0:	bd80      	pop	{r7, pc}

081043a2 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 81043a2:	b480      	push	{r7}
 81043a4:	b083      	sub	sp, #12
 81043a6:	af00      	add	r7, sp, #0
 81043a8:	6078      	str	r0, [r7, #4]
 81043aa:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 81043ac:	683b      	ldr	r3, [r7, #0]
 81043ae:	681a      	ldr	r2, [r3, #0]
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	681b      	ldr	r3, [r3, #0]
 81043b4:	429a      	cmp	r2, r3
 81043b6:	d201      	bcs.n	81043bc <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 81043b8:	683b      	ldr	r3, [r7, #0]
 81043ba:	e000      	b.n	81043be <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 81043bc:	687b      	ldr	r3, [r7, #4]
    }
 81043be:	4618      	mov	r0, r3
 81043c0:	370c      	adds	r7, #12
 81043c2:	46bd      	mov	sp, r7
 81043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043c8:	4770      	bx	lr
	...

081043cc <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 81043cc:	b480      	push	{r7}
 81043ce:	b083      	sub	sp, #12
 81043d0:	af00      	add	r7, sp, #0
 81043d2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 81043d4:	4b03      	ldr	r3, [pc, #12]	@ (81043e4 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 81043d6:	4618      	mov	r0, r3
 81043d8:	370c      	adds	r7, #12
 81043da:	46bd      	mov	sp, r7
 81043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043e0:	4770      	bx	lr
 81043e2:	bf00      	nop
 81043e4:	04924924 	.word	0x04924924

081043e8 <_ZSt12__niter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 81043e8:	b480      	push	{r7}
 81043ea:	b083      	sub	sp, #12
 81043ec:	af00      	add	r7, sp, #0
 81043ee:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 81043f0:	687b      	ldr	r3, [r7, #4]
 81043f2:	4618      	mov	r0, r3
 81043f4:	370c      	adds	r7, #12
 81043f6:	46bd      	mov	sp, r7
 81043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043fc:	4770      	bx	lr
	...

08104400 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8104400:	b580      	push	{r7, lr}
 8104402:	b086      	sub	sp, #24
 8104404:	af00      	add	r7, sp, #0
 8104406:	60f8      	str	r0, [r7, #12]
 8104408:	60b9      	str	r1, [r7, #8]
 810440a:	607a      	str	r2, [r7, #4]
 810440c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 810440e:	68ba      	ldr	r2, [r7, #8]
 8104410:	68fb      	ldr	r3, [r7, #12]
 8104412:	1ad3      	subs	r3, r2, r3
 8104414:	109b      	asrs	r3, r3, #2
 8104416:	4a0e      	ldr	r2, [pc, #56]	@ (8104450 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x50>)
 8104418:	fb02 f303 	mul.w	r3, r2, r3
 810441c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 810441e:	697b      	ldr	r3, [r7, #20]
 8104420:	2b00      	cmp	r3, #0
 8104422:	dd09      	ble.n	8104438 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x38>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8104424:	697a      	ldr	r2, [r7, #20]
 8104426:	4613      	mov	r3, r2
 8104428:	00db      	lsls	r3, r3, #3
 810442a:	1a9b      	subs	r3, r3, r2
 810442c:	009b      	lsls	r3, r3, #2
 810442e:	461a      	mov	r2, r3
 8104430:	68f9      	ldr	r1, [r7, #12]
 8104432:	6878      	ldr	r0, [r7, #4]
 8104434:	f019 fdf8 	bl	811e028 <memmove>
      return __result + __count;
 8104438:	697a      	ldr	r2, [r7, #20]
 810443a:	4613      	mov	r3, r2
 810443c:	00db      	lsls	r3, r3, #3
 810443e:	1a9b      	subs	r3, r3, r2
 8104440:	009b      	lsls	r3, r3, #2
 8104442:	461a      	mov	r2, r3
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	4413      	add	r3, r2
    }
 8104448:	4618      	mov	r0, r3
 810444a:	3718      	adds	r7, #24
 810444c:	46bd      	mov	sp, r7
 810444e:	bd80      	pop	{r7, pc}
 8104450:	b6db6db7 	.word	0xb6db6db7

08104454 <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8104454:	b480      	push	{r7}
 8104456:	b083      	sub	sp, #12
 8104458:	af00      	add	r7, sp, #0
 810445a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	4618      	mov	r0, r3
 8104460:	370c      	adds	r7, #12
 8104462:	46bd      	mov	sp, r7
 8104464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104468:	4770      	bx	lr

0810446a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 810446a:	b580      	push	{r7, lr}
 810446c:	b084      	sub	sp, #16
 810446e:	af00      	add	r7, sp, #0
 8104470:	60f8      	str	r0, [r7, #12]
 8104472:	60b9      	str	r1, [r7, #8]
 8104474:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8104476:	687a      	ldr	r2, [r7, #4]
 8104478:	68b9      	ldr	r1, [r7, #8]
 810447a:	68f8      	ldr	r0, [r7, #12]
 810447c:	f000 f8a5 	bl	81045ca <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8104480:	4603      	mov	r3, r0
 8104482:	4618      	mov	r0, r3
 8104484:	3710      	adds	r7, #16
 8104486:	46bd      	mov	sp, r7
 8104488:	bd80      	pop	{r7, pc}

0810448a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 810448a:	b5b0      	push	{r4, r5, r7, lr}
 810448c:	b086      	sub	sp, #24
 810448e:	af02      	add	r7, sp, #8
 8104490:	60f8      	str	r0, [r7, #12]
 8104492:	60b9      	str	r1, [r7, #8]
 8104494:	607a      	str	r2, [r7, #4]
 8104496:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8104498:	6878      	ldr	r0, [r7, #4]
 810449a:	f7ff f96b 	bl	8103774 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810449e:	4604      	mov	r4, r0
 81044a0:	6838      	ldr	r0, [r7, #0]
 81044a2:	f7ff f972 	bl	810378a <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81044a6:	4605      	mov	r5, r0
 81044a8:	6a38      	ldr	r0, [r7, #32]
 81044aa:	f7ff f979 	bl	81037a0 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81044ae:	4603      	mov	r3, r0
 81044b0:	9300      	str	r3, [sp, #0]
 81044b2:	462b      	mov	r3, r5
 81044b4:	4622      	mov	r2, r4
 81044b6:	68b9      	ldr	r1, [r7, #8]
 81044b8:	68f8      	ldr	r0, [r7, #12]
 81044ba:	f000 f8ae 	bl	810461a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>
	}
 81044be:	bf00      	nop
 81044c0:	3710      	adds	r7, #16
 81044c2:	46bd      	mov	sp, r7
 81044c4:	bdb0      	pop	{r4, r5, r7, pc}

081044c6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 81044c6:	b5b0      	push	{r4, r5, r7, lr}
 81044c8:	b086      	sub	sp, #24
 81044ca:	af02      	add	r7, sp, #8
 81044cc:	60f8      	str	r0, [r7, #12]
 81044ce:	60b9      	str	r1, [r7, #8]
 81044d0:	607a      	str	r2, [r7, #4]
 81044d2:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 81044d4:	6878      	ldr	r0, [r7, #4]
 81044d6:	f7ff f94d 	bl	8103774 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81044da:	4604      	mov	r4, r0
 81044dc:	6838      	ldr	r0, [r7, #0]
 81044de:	f7ff fade 	bl	8103a9e <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 81044e2:	4605      	mov	r5, r0
 81044e4:	6a38      	ldr	r0, [r7, #32]
 81044e6:	f7ff f95b 	bl	81037a0 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81044ea:	4603      	mov	r3, r0
 81044ec:	9300      	str	r3, [sp, #0]
 81044ee:	462b      	mov	r3, r5
 81044f0:	4622      	mov	r2, r4
 81044f2:	68b9      	ldr	r1, [r7, #8]
 81044f4:	68f8      	ldr	r0, [r7, #12]
 81044f6:	f000 f8b8 	bl	810466a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESE_IJEEEEEvPT_DpOT0_>
	}
 81044fa:	bf00      	nop
 81044fc:	3710      	adds	r7, #16
 81044fe:	46bd      	mov	sp, r7
 8104500:	bdb0      	pop	{r4, r5, r7, pc}
	...

08104504 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8104504:	b580      	push	{r7, lr}
 8104506:	b084      	sub	sp, #16
 8104508:	af00      	add	r7, sp, #0
 810450a:	60f8      	str	r0, [r7, #12]
 810450c:	60b9      	str	r1, [r7, #8]
 810450e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8104510:	68f8      	ldr	r0, [r7, #12]
 8104512:	f000 f8d3 	bl	81046bc <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>
 8104516:	4602      	mov	r2, r0
 8104518:	68bb      	ldr	r3, [r7, #8]
 810451a:	4293      	cmp	r3, r2
 810451c:	bf8c      	ite	hi
 810451e:	2301      	movhi	r3, #1
 8104520:	2300      	movls	r3, #0
 8104522:	b2db      	uxtb	r3, r3
 8104524:	2b00      	cmp	r3, #0
 8104526:	bf14      	ite	ne
 8104528:	2301      	movne	r3, #1
 810452a:	2300      	moveq	r3, #0
 810452c:	b2db      	uxtb	r3, r3
 810452e:	2b00      	cmp	r3, #0
 8104530:	d007      	beq.n	8104542 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8104532:	68bb      	ldr	r3, [r7, #8]
 8104534:	4a09      	ldr	r2, [pc, #36]	@ (810455c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x58>)
 8104536:	4293      	cmp	r3, r2
 8104538:	d901      	bls.n	810453e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 810453a:	f018 fde1 	bl	811d100 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 810453e:	f018 fddc 	bl	811d0fa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8104542:	68ba      	ldr	r2, [r7, #8]
 8104544:	4613      	mov	r3, r2
 8104546:	005b      	lsls	r3, r3, #1
 8104548:	4413      	add	r3, r2
 810454a:	00db      	lsls	r3, r3, #3
 810454c:	4618      	mov	r0, r3
 810454e:	f018 fd06 	bl	811cf5e <_Znwj>
 8104552:	4603      	mov	r3, r0
      }
 8104554:	4618      	mov	r0, r3
 8104556:	3710      	adds	r7, #16
 8104558:	46bd      	mov	sp, r7
 810455a:	bd80      	pop	{r7, pc}
 810455c:	0aaaaaaa 	.word	0x0aaaaaaa

08104560 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8104560:	b5b0      	push	{r4, r5, r7, lr}
 8104562:	b084      	sub	sp, #16
 8104564:	af00      	add	r7, sp, #0
 8104566:	60f8      	str	r0, [r7, #12]
 8104568:	60b9      	str	r1, [r7, #8]
 810456a:	607a      	str	r2, [r7, #4]
 810456c:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 810456e:	68bb      	ldr	r3, [r7, #8]
 8104570:	4619      	mov	r1, r3
 8104572:	2008      	movs	r0, #8
 8104574:	f7fc fc92 	bl	8100e9c <_ZnwjPv>
 8104578:	4604      	mov	r4, r0
 810457a:	6878      	ldr	r0, [r7, #4]
 810457c:	f7fe faad 	bl	8102ada <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8104580:	4605      	mov	r5, r0
 8104582:	6838      	ldr	r0, [r7, #0]
 8104584:	f7fe fab4 	bl	8102af0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8104588:	4603      	mov	r3, r0
 810458a:	461a      	mov	r2, r3
 810458c:	4629      	mov	r1, r5
 810458e:	4620      	mov	r0, r4
 8104590:	f000 f8a2 	bl	81046d8 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>
 8104594:	bf00      	nop
 8104596:	3710      	adds	r7, #16
 8104598:	46bd      	mov	sp, r7
 810459a:	bdb0      	pop	{r4, r5, r7, pc}

0810459c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() const noexcept
 810459c:	b480      	push	{r7}
 810459e:	b083      	sub	sp, #12
 81045a0:	af00      	add	r7, sp, #0
 81045a2:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	4618      	mov	r0, r3
 81045a8:	370c      	adds	r7, #12
 81045aa:	46bd      	mov	sp, r7
 81045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045b0:	4770      	bx	lr

081045b2 <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 81045b2:	b580      	push	{r7, lr}
 81045b4:	b082      	sub	sp, #8
 81045b6:	af00      	add	r7, sp, #0
 81045b8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 81045ba:	6878      	ldr	r0, [r7, #4]
 81045bc:	f7ff ff06 	bl	81043cc <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 81045c0:	4603      	mov	r3, r0
 81045c2:	4618      	mov	r0, r3
 81045c4:	3708      	adds	r7, #8
 81045c6:	46bd      	mov	sp, r7
 81045c8:	bd80      	pop	{r7, pc}

081045ca <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 81045ca:	b590      	push	{r4, r7, lr}
 81045cc:	b085      	sub	sp, #20
 81045ce:	af00      	add	r7, sp, #0
 81045d0:	60f8      	str	r0, [r7, #12]
 81045d2:	60b9      	str	r1, [r7, #8]
 81045d4:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 81045d6:	68f8      	ldr	r0, [r7, #12]
 81045d8:	f000 f897 	bl	810470a <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 81045dc:	4604      	mov	r4, r0
 81045de:	68b8      	ldr	r0, [r7, #8]
 81045e0:	f000 f893 	bl	810470a <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 81045e4:	4603      	mov	r3, r0
 81045e6:	687a      	ldr	r2, [r7, #4]
 81045e8:	4619      	mov	r1, r3
 81045ea:	4620      	mov	r0, r4
 81045ec:	f000 f89e 	bl	810472c <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>
 81045f0:	4603      	mov	r3, r0
    }
 81045f2:	4618      	mov	r0, r3
 81045f4:	3714      	adds	r7, #20
 81045f6:	46bd      	mov	sp, r7
 81045f8:	bd90      	pop	{r4, r7, pc}

081045fa <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      constexpr tuple(tuple&&) = default;
 81045fa:	b580      	push	{r7, lr}
 81045fc:	b082      	sub	sp, #8
 81045fe:	af00      	add	r7, sp, #0
 8104600:	6078      	str	r0, [r7, #4]
 8104602:	6039      	str	r1, [r7, #0]
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	683a      	ldr	r2, [r7, #0]
 8104608:	4611      	mov	r1, r2
 810460a:	4618      	mov	r0, r3
 810460c:	f000 f8b1 	bl	8104772 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 8104610:	687b      	ldr	r3, [r7, #4]
 8104612:	4618      	mov	r0, r3
 8104614:	3708      	adds	r7, #8
 8104616:	46bd      	mov	sp, r7
 8104618:	bd80      	pop	{r7, pc}

0810461a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 810461a:	b5f0      	push	{r4, r5, r6, r7, lr}
 810461c:	b087      	sub	sp, #28
 810461e:	af00      	add	r7, sp, #0
 8104620:	60f8      	str	r0, [r7, #12]
 8104622:	60b9      	str	r1, [r7, #8]
 8104624:	607a      	str	r2, [r7, #4]
 8104626:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8104628:	68bb      	ldr	r3, [r7, #8]
 810462a:	4619      	mov	r1, r3
 810462c:	2008      	movs	r0, #8
 810462e:	f7fc fc35 	bl	8100e9c <_ZnwjPv>
 8104632:	4604      	mov	r4, r0
 8104634:	6878      	ldr	r0, [r7, #4]
 8104636:	f7ff f89d 	bl	8103774 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810463a:	6838      	ldr	r0, [r7, #0]
 810463c:	f7ff f8a5 	bl	810378a <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8104640:	4602      	mov	r2, r0
 8104642:	f107 0314 	add.w	r3, r7, #20
 8104646:	4611      	mov	r1, r2
 8104648:	4618      	mov	r0, r3
 810464a:	f7ff ffd6 	bl	81045fa <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 810464e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8104650:	f7ff f8a6 	bl	81037a0 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8104654:	f107 0214 	add.w	r2, r7, #20
 8104658:	4633      	mov	r3, r6
 810465a:	4629      	mov	r1, r5
 810465c:	4620      	mov	r0, r4
 810465e:	f000 f898 	bl	8104792 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8104662:	bf00      	nop
 8104664:	371c      	adds	r7, #28
 8104666:	46bd      	mov	sp, r7
 8104668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810466a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 810466a:	b5f0      	push	{r4, r5, r6, r7, lr}
 810466c:	b087      	sub	sp, #28
 810466e:	af00      	add	r7, sp, #0
 8104670:	60f8      	str	r0, [r7, #12]
 8104672:	60b9      	str	r1, [r7, #8]
 8104674:	607a      	str	r2, [r7, #4]
 8104676:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8104678:	68bb      	ldr	r3, [r7, #8]
 810467a:	4619      	mov	r1, r3
 810467c:	2008      	movs	r0, #8
 810467e:	f7fc fc0d 	bl	8100e9c <_ZnwjPv>
 8104682:	4604      	mov	r4, r0
 8104684:	6878      	ldr	r0, [r7, #4]
 8104686:	f7ff f875 	bl	8103774 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810468a:	6838      	ldr	r0, [r7, #0]
 810468c:	f7ff fa07 	bl	8103a9e <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8104690:	4602      	mov	r2, r0
 8104692:	f107 0314 	add.w	r3, r7, #20
 8104696:	4611      	mov	r1, r2
 8104698:	4618      	mov	r0, r3
 810469a:	f7fe fd0e 	bl	81030ba <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>
 810469e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81046a0:	f7ff f87e 	bl	81037a0 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81046a4:	f107 0214 	add.w	r2, r7, #20
 81046a8:	4633      	mov	r3, r6
 81046aa:	4629      	mov	r1, r5
 81046ac:	4620      	mov	r0, r4
 81046ae:	f000 f884 	bl	81047ba <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 81046b2:	bf00      	nop
 81046b4:	371c      	adds	r7, #28
 81046b6:	46bd      	mov	sp, r7
 81046b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

081046bc <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 81046bc:	b480      	push	{r7}
 81046be:	b083      	sub	sp, #12
 81046c0:	af00      	add	r7, sp, #0
 81046c2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 81046c4:	4b03      	ldr	r3, [pc, #12]	@ (81046d4 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv+0x18>)
      }
 81046c6:	4618      	mov	r0, r3
 81046c8:	370c      	adds	r7, #12
 81046ca:	46bd      	mov	sp, r7
 81046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046d0:	4770      	bx	lr
 81046d2:	bf00      	nop
 81046d4:	05555555 	.word	0x05555555

081046d8 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 81046d8:	b580      	push	{r7, lr}
 81046da:	b084      	sub	sp, #16
 81046dc:	af00      	add	r7, sp, #0
 81046de:	60f8      	str	r0, [r7, #12]
 81046e0:	60b9      	str	r1, [r7, #8]
 81046e2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 81046e4:	68b8      	ldr	r0, [r7, #8]
 81046e6:	f7fe f9f8 	bl	8102ada <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81046ea:	4603      	mov	r3, r0
 81046ec:	781a      	ldrb	r2, [r3, #0]
 81046ee:	68fb      	ldr	r3, [r7, #12]
 81046f0:	701a      	strb	r2, [r3, #0]
 81046f2:	6878      	ldr	r0, [r7, #4]
 81046f4:	f7fe f9fc 	bl	8102af0 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81046f8:	4603      	mov	r3, r0
 81046fa:	681a      	ldr	r2, [r3, #0]
 81046fc:	68fb      	ldr	r3, [r7, #12]
 81046fe:	605a      	str	r2, [r3, #4]
 8104700:	68fb      	ldr	r3, [r7, #12]
 8104702:	4618      	mov	r0, r3
 8104704:	3710      	adds	r7, #16
 8104706:	46bd      	mov	sp, r7
 8104708:	bd80      	pop	{r7, pc}

0810470a <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 810470a:	b580      	push	{r7, lr}
 810470c:	b082      	sub	sp, #8
 810470e:	af00      	add	r7, sp, #0
 8104710:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8104712:	1d3b      	adds	r3, r7, #4
 8104714:	4618      	mov	r0, r3
 8104716:	f000 f864 	bl	81047e2 <_ZNKSt13move_iteratorIP8SMessageE4baseEv>
 810471a:	4603      	mov	r3, r0
 810471c:	4618      	mov	r0, r3
 810471e:	f000 f86c 	bl	81047fa <_ZSt12__miter_baseIP8SMessageET_S2_>
 8104722:	4603      	mov	r3, r0
 8104724:	4618      	mov	r0, r3
 8104726:	3708      	adds	r7, #8
 8104728:	46bd      	mov	sp, r7
 810472a:	bd80      	pop	{r7, pc}

0810472c <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 810472c:	b5b0      	push	{r4, r5, r7, lr}
 810472e:	b084      	sub	sp, #16
 8104730:	af00      	add	r7, sp, #0
 8104732:	60f8      	str	r0, [r7, #12]
 8104734:	60b9      	str	r1, [r7, #8]
 8104736:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8104738:	68f8      	ldr	r0, [r7, #12]
 810473a:	f7ff fe55 	bl	81043e8 <_ZSt12__niter_baseIP8SMessageET_S2_>
 810473e:	4604      	mov	r4, r0
 8104740:	68b8      	ldr	r0, [r7, #8]
 8104742:	f7ff fe51 	bl	81043e8 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8104746:	4605      	mov	r5, r0
 8104748:	687b      	ldr	r3, [r7, #4]
 810474a:	4618      	mov	r0, r3
 810474c:	f7ff fe4c 	bl	81043e8 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8104750:	4603      	mov	r3, r0
 8104752:	461a      	mov	r2, r3
 8104754:	4629      	mov	r1, r5
 8104756:	4620      	mov	r0, r4
 8104758:	f000 f85a 	bl	8104810 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 810475c:	4602      	mov	r2, r0
 810475e:	1d3b      	adds	r3, r7, #4
 8104760:	4611      	mov	r1, r2
 8104762:	4618      	mov	r0, r3
 8104764:	f000 f864 	bl	8104830 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>
 8104768:	4603      	mov	r3, r0
    }
 810476a:	4618      	mov	r0, r3
 810476c:	3710      	adds	r7, #16
 810476e:	46bd      	mov	sp, r7
 8104770:	bdb0      	pop	{r4, r5, r7, pc}

08104772 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8104772:	b480      	push	{r7}
 8104774:	b083      	sub	sp, #12
 8104776:	af00      	add	r7, sp, #0
 8104778:	6078      	str	r0, [r7, #4]
 810477a:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 810477c:	687b      	ldr	r3, [r7, #4]
 810477e:	683a      	ldr	r2, [r7, #0]
 8104780:	6812      	ldr	r2, [r2, #0]
 8104782:	601a      	str	r2, [r3, #0]
      { }
 8104784:	687b      	ldr	r3, [r7, #4]
 8104786:	4618      	mov	r0, r3
 8104788:	370c      	adds	r7, #12
 810478a:	46bd      	mov	sp, r7
 810478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104790:	4770      	bx	lr

08104792 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 8104792:	b5b0      	push	{r4, r5, r7, lr}
 8104794:	b086      	sub	sp, #24
 8104796:	af02      	add	r7, sp, #8
 8104798:	60f8      	str	r0, [r7, #12]
 810479a:	7239      	strb	r1, [r7, #8]
 810479c:	607a      	str	r2, [r7, #4]
 810479e:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 81047a0:	463a      	mov	r2, r7
 81047a2:	f88d 4000 	strb.w	r4, [sp]
 81047a6:	462b      	mov	r3, r5
 81047a8:	6879      	ldr	r1, [r7, #4]
 81047aa:	68f8      	ldr	r0, [r7, #12]
 81047ac:	f000 f84c 	bl	8104848 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 81047b0:	68fb      	ldr	r3, [r7, #12]
 81047b2:	4618      	mov	r0, r3
 81047b4:	3710      	adds	r7, #16
 81047b6:	46bd      	mov	sp, r7
 81047b8:	bdb0      	pop	{r4, r5, r7, pc}

081047ba <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 81047ba:	b5b0      	push	{r4, r5, r7, lr}
 81047bc:	b086      	sub	sp, #24
 81047be:	af02      	add	r7, sp, #8
 81047c0:	60f8      	str	r0, [r7, #12]
 81047c2:	7239      	strb	r1, [r7, #8]
 81047c4:	607a      	str	r2, [r7, #4]
 81047c6:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 81047c8:	463a      	mov	r2, r7
 81047ca:	f88d 4000 	strb.w	r4, [sp]
 81047ce:	462b      	mov	r3, r5
 81047d0:	6879      	ldr	r1, [r7, #4]
 81047d2:	68f8      	ldr	r0, [r7, #12]
 81047d4:	f000 f852 	bl	810487c <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 81047d8:	68fb      	ldr	r3, [r7, #12]
 81047da:	4618      	mov	r0, r3
 81047dc:	3710      	adds	r7, #16
 81047de:	46bd      	mov	sp, r7
 81047e0:	bdb0      	pop	{r4, r5, r7, pc}

081047e2 <_ZNKSt13move_iteratorIP8SMessageE4baseEv>:
      base() const
 81047e2:	b480      	push	{r7}
 81047e4:	b083      	sub	sp, #12
 81047e6:	af00      	add	r7, sp, #0
 81047e8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 81047ea:	687b      	ldr	r3, [r7, #4]
 81047ec:	681b      	ldr	r3, [r3, #0]
 81047ee:	4618      	mov	r0, r3
 81047f0:	370c      	adds	r7, #12
 81047f2:	46bd      	mov	sp, r7
 81047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047f8:	4770      	bx	lr

081047fa <_ZSt12__miter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 81047fa:	b480      	push	{r7}
 81047fc:	b083      	sub	sp, #12
 81047fe:	af00      	add	r7, sp, #0
 8104800:	6078      	str	r0, [r7, #4]
    { return __it; }
 8104802:	687b      	ldr	r3, [r7, #4]
 8104804:	4618      	mov	r0, r3
 8104806:	370c      	adds	r7, #12
 8104808:	46bd      	mov	sp, r7
 810480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810480e:	4770      	bx	lr

08104810 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8104810:	b580      	push	{r7, lr}
 8104812:	b084      	sub	sp, #16
 8104814:	af00      	add	r7, sp, #0
 8104816:	60f8      	str	r0, [r7, #12]
 8104818:	60b9      	str	r1, [r7, #8]
 810481a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 810481c:	687a      	ldr	r2, [r7, #4]
 810481e:	68b9      	ldr	r1, [r7, #8]
 8104820:	68f8      	ldr	r0, [r7, #12]
 8104822:	f000 f845 	bl	81048b0 <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 8104826:	4603      	mov	r3, r0
 8104828:	4618      	mov	r0, r3
 810482a:	3710      	adds	r7, #16
 810482c:	46bd      	mov	sp, r7
 810482e:	bd80      	pop	{r7, pc}

08104830 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8104830:	b480      	push	{r7}
 8104832:	b083      	sub	sp, #12
 8104834:	af00      	add	r7, sp, #0
 8104836:	6078      	str	r0, [r7, #4]
 8104838:	6039      	str	r1, [r7, #0]
    { return __res; }
 810483a:	683b      	ldr	r3, [r7, #0]
 810483c:	4618      	mov	r0, r3
 810483e:	370c      	adds	r7, #12
 8104840:	46bd      	mov	sp, r7
 8104842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104846:	4770      	bx	lr

08104848 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8104848:	b580      	push	{r7, lr}
 810484a:	b084      	sub	sp, #16
 810484c:	af00      	add	r7, sp, #0
 810484e:	60f8      	str	r0, [r7, #12]
 8104850:	60b9      	str	r1, [r7, #8]
 8104852:	607a      	str	r2, [r7, #4]
 8104854:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8104856:	68b8      	ldr	r0, [r7, #8]
 8104858:	f000 f83a 	bl	81048d0 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 810485c:	4603      	mov	r3, r0
 810485e:	4618      	mov	r0, r3
 8104860:	f000 f843 	bl	81048ea <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>
 8104864:	4603      	mov	r3, r0
 8104866:	781a      	ldrb	r2, [r3, #0]
 8104868:	68fb      	ldr	r3, [r7, #12]
 810486a:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 810486c:	68fb      	ldr	r3, [r7, #12]
 810486e:	2200      	movs	r2, #0
 8104870:	605a      	str	r2, [r3, #4]
      { }
 8104872:	68fb      	ldr	r3, [r7, #12]
 8104874:	4618      	mov	r0, r3
 8104876:	3710      	adds	r7, #16
 8104878:	46bd      	mov	sp, r7
 810487a:	bd80      	pop	{r7, pc}

0810487c <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 810487c:	b580      	push	{r7, lr}
 810487e:	b084      	sub	sp, #16
 8104880:	af00      	add	r7, sp, #0
 8104882:	60f8      	str	r0, [r7, #12]
 8104884:	60b9      	str	r1, [r7, #8]
 8104886:	607a      	str	r2, [r7, #4]
 8104888:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 810488a:	68b8      	ldr	r0, [r7, #8]
 810488c:	f000 f838 	bl	8104900 <_ZSt3getILj0EJON19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8104890:	4603      	mov	r3, r0
 8104892:	4618      	mov	r0, r3
 8104894:	f000 f841 	bl	810491a <_ZSt7forwardION19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8104898:	4603      	mov	r3, r0
 810489a:	781a      	ldrb	r2, [r3, #0]
 810489c:	68fb      	ldr	r3, [r7, #12]
 810489e:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 81048a0:	68fb      	ldr	r3, [r7, #12]
 81048a2:	2200      	movs	r2, #0
 81048a4:	605a      	str	r2, [r3, #4]
      { }
 81048a6:	68fb      	ldr	r3, [r7, #12]
 81048a8:	4618      	mov	r0, r3
 81048aa:	3710      	adds	r7, #16
 81048ac:	46bd      	mov	sp, r7
 81048ae:	bd80      	pop	{r7, pc}

081048b0 <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 81048b0:	b580      	push	{r7, lr}
 81048b2:	b084      	sub	sp, #16
 81048b4:	af00      	add	r7, sp, #0
 81048b6:	60f8      	str	r0, [r7, #12]
 81048b8:	60b9      	str	r1, [r7, #8]
 81048ba:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 81048bc:	687a      	ldr	r2, [r7, #4]
 81048be:	68b9      	ldr	r1, [r7, #8]
 81048c0:	68f8      	ldr	r0, [r7, #12]
 81048c2:	f000 f835 	bl	8104930 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>
 81048c6:	4603      	mov	r3, r0
    }
 81048c8:	4618      	mov	r0, r3
 81048ca:	3710      	adds	r7, #16
 81048cc:	46bd      	mov	sp, r7
 81048ce:	bd80      	pop	{r7, pc}

081048d0 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 81048d0:	b580      	push	{r7, lr}
 81048d2:	b082      	sub	sp, #8
 81048d4:	af00      	add	r7, sp, #0
 81048d6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	4618      	mov	r0, r3
 81048dc:	f000 f852 	bl	8104984 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 81048e0:	4603      	mov	r3, r0
 81048e2:	4618      	mov	r0, r3
 81048e4:	3708      	adds	r7, #8
 81048e6:	46bd      	mov	sp, r7
 81048e8:	bd80      	pop	{r7, pc}

081048ea <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81048ea:	b480      	push	{r7}
 81048ec:	b083      	sub	sp, #12
 81048ee:	af00      	add	r7, sp, #0
 81048f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81048f2:	687b      	ldr	r3, [r7, #4]
 81048f4:	4618      	mov	r0, r3
 81048f6:	370c      	adds	r7, #12
 81048f8:	46bd      	mov	sp, r7
 81048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048fe:	4770      	bx	lr

08104900 <_ZSt3getILj0EJON19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8104900:	b580      	push	{r7, lr}
 8104902:	b082      	sub	sp, #8
 8104904:	af00      	add	r7, sp, #0
 8104906:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8104908:	687b      	ldr	r3, [r7, #4]
 810490a:	4618      	mov	r0, r3
 810490c:	f000 f846 	bl	810499c <_ZSt12__get_helperILj0EON19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8104910:	4603      	mov	r3, r0
 8104912:	4618      	mov	r0, r3
 8104914:	3708      	adds	r7, #8
 8104916:	46bd      	mov	sp, r7
 8104918:	bd80      	pop	{r7, pc}

0810491a <_ZSt7forwardION19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810491a:	b480      	push	{r7}
 810491c:	b083      	sub	sp, #12
 810491e:	af00      	add	r7, sp, #0
 8104920:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8104922:	687b      	ldr	r3, [r7, #4]
 8104924:	4618      	mov	r0, r3
 8104926:	370c      	adds	r7, #12
 8104928:	46bd      	mov	sp, r7
 810492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810492e:	4770      	bx	lr

08104930 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8104930:	b580      	push	{r7, lr}
 8104932:	b086      	sub	sp, #24
 8104934:	af00      	add	r7, sp, #0
 8104936:	60f8      	str	r0, [r7, #12]
 8104938:	60b9      	str	r1, [r7, #8]
 810493a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 810493c:	68ba      	ldr	r2, [r7, #8]
 810493e:	68fb      	ldr	r3, [r7, #12]
 8104940:	1ad3      	subs	r3, r2, r3
 8104942:	109b      	asrs	r3, r3, #2
 8104944:	4a0e      	ldr	r2, [pc, #56]	@ (8104980 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x50>)
 8104946:	fb02 f303 	mul.w	r3, r2, r3
 810494a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 810494c:	697b      	ldr	r3, [r7, #20]
 810494e:	2b00      	cmp	r3, #0
 8104950:	d009      	beq.n	8104966 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8104952:	697a      	ldr	r2, [r7, #20]
 8104954:	4613      	mov	r3, r2
 8104956:	00db      	lsls	r3, r3, #3
 8104958:	1a9b      	subs	r3, r3, r2
 810495a:	009b      	lsls	r3, r3, #2
 810495c:	461a      	mov	r2, r3
 810495e:	68f9      	ldr	r1, [r7, #12]
 8104960:	6878      	ldr	r0, [r7, #4]
 8104962:	f019 fb61 	bl	811e028 <memmove>
	  return __result + _Num;
 8104966:	697a      	ldr	r2, [r7, #20]
 8104968:	4613      	mov	r3, r2
 810496a:	00db      	lsls	r3, r3, #3
 810496c:	1a9b      	subs	r3, r3, r2
 810496e:	009b      	lsls	r3, r3, #2
 8104970:	461a      	mov	r2, r3
 8104972:	687b      	ldr	r3, [r7, #4]
 8104974:	4413      	add	r3, r2
	}
 8104976:	4618      	mov	r0, r3
 8104978:	3718      	adds	r7, #24
 810497a:	46bd      	mov	sp, r7
 810497c:	bd80      	pop	{r7, pc}
 810497e:	bf00      	nop
 8104980:	b6db6db7 	.word	0xb6db6db7

08104984 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8104984:	b580      	push	{r7, lr}
 8104986:	b082      	sub	sp, #8
 8104988:	af00      	add	r7, sp, #0
 810498a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 810498c:	6878      	ldr	r0, [r7, #4]
 810498e:	f000 f811 	bl	81049b4 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>
 8104992:	4603      	mov	r3, r0
 8104994:	4618      	mov	r0, r3
 8104996:	3708      	adds	r7, #8
 8104998:	46bd      	mov	sp, r7
 810499a:	bd80      	pop	{r7, pc}

0810499c <_ZSt12__get_helperILj0EON19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 810499c:	b580      	push	{r7, lr}
 810499e:	b082      	sub	sp, #8
 81049a0:	af00      	add	r7, sp, #0
 81049a2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 81049a4:	6878      	ldr	r0, [r7, #4]
 81049a6:	f000 f812 	bl	81049ce <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEE7_M_headERS3_>
 81049aa:	4603      	mov	r3, r0
 81049ac:	4618      	mov	r0, r3
 81049ae:	3708      	adds	r7, #8
 81049b0:	46bd      	mov	sp, r7
 81049b2:	bd80      	pop	{r7, pc}

081049b4 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 81049b4:	b580      	push	{r7, lr}
 81049b6:	b082      	sub	sp, #8
 81049b8:	af00      	add	r7, sp, #0
 81049ba:	6078      	str	r0, [r7, #4]
 81049bc:	687b      	ldr	r3, [r7, #4]
 81049be:	4618      	mov	r0, r3
 81049c0:	f000 f812 	bl	81049e8 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>
 81049c4:	4603      	mov	r3, r0
 81049c6:	4618      	mov	r0, r3
 81049c8:	3708      	adds	r7, #8
 81049ca:	46bd      	mov	sp, r7
 81049cc:	bd80      	pop	{r7, pc}

081049ce <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEE7_M_headERS3_>:
 81049ce:	b580      	push	{r7, lr}
 81049d0:	b082      	sub	sp, #8
 81049d2:	af00      	add	r7, sp, #0
 81049d4:	6078      	str	r0, [r7, #4]
 81049d6:	687b      	ldr	r3, [r7, #4]
 81049d8:	4618      	mov	r0, r3
 81049da:	f000 f811 	bl	8104a00 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS3_>
 81049de:	4603      	mov	r3, r0
 81049e0:	4618      	mov	r0, r3
 81049e2:	3708      	adds	r7, #8
 81049e4:	46bd      	mov	sp, r7
 81049e6:	bd80      	pop	{r7, pc}

081049e8 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 81049e8:	b480      	push	{r7}
 81049ea:	b083      	sub	sp, #12
 81049ec:	af00      	add	r7, sp, #0
 81049ee:	6078      	str	r0, [r7, #4]
 81049f0:	687b      	ldr	r3, [r7, #4]
 81049f2:	681b      	ldr	r3, [r3, #0]
 81049f4:	4618      	mov	r0, r3
 81049f6:	370c      	adds	r7, #12
 81049f8:	46bd      	mov	sp, r7
 81049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049fe:	4770      	bx	lr

08104a00 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS3_>:
 8104a00:	b480      	push	{r7}
 8104a02:	b083      	sub	sp, #12
 8104a04:	af00      	add	r7, sp, #0
 8104a06:	6078      	str	r0, [r7, #4]
 8104a08:	687b      	ldr	r3, [r7, #4]
 8104a0a:	681b      	ldr	r3, [r3, #0]
 8104a0c:	4618      	mov	r0, r3
 8104a0e:	370c      	adds	r7, #12
 8104a10:	46bd      	mov	sp, r7
 8104a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a16:	4770      	bx	lr

08104a18 <_Z18StartTask_EDaemonNPv>:
#include "cm_ipc.h"

extern QueueHandle_t queueToNativeDaemon;

void StartTask_EDaemonN(void *argument)
{
 8104a18:	b580      	push	{r7, lr}
 8104a1a:	b086      	sub	sp, #24
 8104a1c:	af00      	add	r7, sp, #0
 8104a1e:	6078      	str	r0, [r7, #4]
	ipc_start();
 8104a20:	f7fb fd6c 	bl	81004fc <ipc_start>
	IPCDaemonNativeTask IPCDaemonNativeTaskInstance;
 8104a24:	f107 030c 	add.w	r3, r7, #12
 8104a28:	4618      	mov	r0, r3
 8104a2a:	f000 f80b 	bl	8104a44 <_ZN19IPCDaemonNativeTaskC1Ev>

	for(;;)
	{
		IPCDaemonNativeTaskInstance.process();
 8104a2e:	f107 030c 	add.w	r3, r7, #12
 8104a32:	4618      	mov	r0, r3
 8104a34:	f000 f8ba 	bl	8104bac <_ZN19IPCDaemonNativeTask7processEv>
		osDelay(1);
 8104a38:	2001      	movs	r0, #1
 8104a3a:	f008 ff32 	bl	810d8a2 <osDelay>
		IPCDaemonNativeTaskInstance.process();
 8104a3e:	bf00      	nop
 8104a40:	e7f5      	b.n	8104a2e <_Z18StartTask_EDaemonNPv+0x16>
	...

08104a44 <_ZN19IPCDaemonNativeTaskC1Ev>:
	}
}

IPCDaemonNativeTask::IPCDaemonNativeTask() : event_bus(EventBus(queueToNativeDaemon, EVENT_CLIENT_DAEMON_NATIVE)) {}
 8104a44:	b580      	push	{r7, lr}
 8104a46:	b082      	sub	sp, #8
 8104a48:	af00      	add	r7, sp, #0
 8104a4a:	6078      	str	r0, [r7, #4]
 8104a4c:	687b      	ldr	r3, [r7, #4]
 8104a4e:	4a05      	ldr	r2, [pc, #20]	@ (8104a64 <_ZN19IPCDaemonNativeTaskC1Ev+0x20>)
 8104a50:	6811      	ldr	r1, [r2, #0]
 8104a52:	2207      	movs	r2, #7
 8104a54:	4618      	mov	r0, r3
 8104a56:	f7fd fc0b 	bl	8102270 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
 8104a5a:	687b      	ldr	r3, [r7, #4]
 8104a5c:	4618      	mov	r0, r3
 8104a5e:	3708      	adds	r7, #8
 8104a60:	46bd      	mov	sp, r7
 8104a62:	bd80      	pop	{r7, pc}
 8104a64:	100001b4 	.word	0x100001b4

08104a68 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>:

void IPCDaemonNativeTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
{
 8104a68:	b082      	sub	sp, #8
 8104a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8104a6c:	b091      	sub	sp, #68	@ 0x44
 8104a6e:	af04      	add	r7, sp, #16
 8104a70:	6078      	str	r0, [r7, #4]
 8104a72:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8104a76:	e880 000c 	stmia.w	r0, {r2, r3}
 8104a7a:	460b      	mov	r3, r1
 8104a7c:	807b      	strh	r3, [r7, #2]
	switch(eventReceiver)
 8104a7e:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8104a82:	2b00      	cmp	r3, #0
 8104a84:	d005      	beq.n	8104a92 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x2a>
 8104a86:	2b00      	cmp	r3, #0
 8104a88:	db34      	blt.n	8104af4 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x8c>
 8104a8a:	3b03      	subs	r3, #3
 8104a8c:	2b01      	cmp	r3, #1
 8104a8e:	d831      	bhi.n	8104af4 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x8c>
 8104a90:	e01d      	b.n	8104ace <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x66>
	{
	// if recipient is on CM7 side, then send message through IPC.
	case EVENT_CLIENT_FRONTEND:
	{
		SMessage sMsg;
		sMsg.event_type = event;
 8104a92:	887b      	ldrh	r3, [r7, #2]
 8104a94:	81bb      	strh	r3, [r7, #12]
		sMsg.message_data = msg;
 8104a96:	f107 0410 	add.w	r4, r7, #16
 8104a9a:	f107 0548 	add.w	r5, r7, #72	@ 0x48
 8104a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104aa2:	682b      	ldr	r3, [r5, #0]
 8104aa4:	6023      	str	r3, [r4, #0]
		sMsg.event_sender = eventSender;
 8104aa6:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8104aaa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		sMsg.event_receiver = eventReceiver;
 8104aae:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8104ab2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		size_t len = sizeof(sMsg);
 8104ab6:	231c      	movs	r3, #28
 8104ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		size_t ret = ipc_sendmsg(&sMsg, len, 1000);
 8104aba:	f107 030c 	add.w	r3, r7, #12
 8104abe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8104ac2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8104ac4:	4618      	mov	r0, r3
 8104ac6:	f7fb fd9f 	bl	8100608 <ipc_sendmsg>
 8104aca:	62b8      	str	r0, [r7, #40]	@ 0x28
		break;
 8104acc:	e013      	b.n	8104af6 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x8e>
	}
	// if recipient is on CM4 side, then forward to event manager.
	case EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER:
	case EVENT_CLIENT_THERMOMETER:
		event_bus.send(event, msg, eventReceiver);
 8104ace:	687d      	ldr	r5, [r7, #4]
 8104ad0:	887e      	ldrh	r6, [r7, #2]
 8104ad2:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8104ad6:	9303      	str	r3, [sp, #12]
 8104ad8:	466c      	mov	r4, sp
 8104ada:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8104ade:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8104ae2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8104ae6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8104aea:	cb0c      	ldmia	r3, {r2, r3}
 8104aec:	4631      	mov	r1, r6
 8104aee:	4628      	mov	r0, r5
 8104af0:	f7fd fbd8 	bl	81022a4 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
	default:
		break;;
 8104af4:	bf00      	nop
	}
}
 8104af6:	bf00      	nop
 8104af8:	3734      	adds	r7, #52	@ 0x34
 8104afa:	46bd      	mov	sp, r7
 8104afc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8104b00:	b002      	add	sp, #8
 8104b02:	4770      	bx	lr

08104b04 <_ZN19IPCDaemonNativeTask17processIpcReceiveEv>:

void IPCDaemonNativeTask::processIpcReceive()
{
 8104b04:	b5b0      	push	{r4, r5, r7, lr}
 8104b06:	b092      	sub	sp, #72	@ 0x48
 8104b08:	af06      	add	r7, sp, #24
 8104b0a:	6078      	str	r0, [r7, #4]
	SMessage sMsg;
	size_t len = sizeof(sMsg);
 8104b0c:	231c      	movs	r3, #28
 8104b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	size_t ret = ipc_recvmsg(&sMsg, len, 0);
 8104b10:	f107 030c 	add.w	r3, r7, #12
 8104b14:	2200      	movs	r2, #0
 8104b16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8104b18:	4618      	mov	r0, r3
 8104b1a:	f7fb fd9d 	bl	8100658 <ipc_recvmsg>
 8104b1e:	62b8      	str	r0, [r7, #40]	@ 0x28
	if(ret == len)
 8104b20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8104b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104b24:	429a      	cmp	r2, r3
 8104b26:	d114      	bne.n	8104b52 <_ZN19IPCDaemonNativeTask17processIpcReceiveEv+0x4e>
	{
		OnEvent(sMsg.event_type, sMsg.message_data, sMsg.event_sender, sMsg.event_receiver);
 8104b28:	89bd      	ldrh	r5, [r7, #12]
 8104b2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8104b2e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8104b32:	9204      	str	r2, [sp, #16]
 8104b34:	9303      	str	r3, [sp, #12]
 8104b36:	466c      	mov	r4, sp
 8104b38:	f107 0318 	add.w	r3, r7, #24
 8104b3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8104b40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8104b44:	f107 0310 	add.w	r3, r7, #16
 8104b48:	cb0c      	ldmia	r3, {r2, r3}
 8104b4a:	4629      	mov	r1, r5
 8104b4c:	6878      	ldr	r0, [r7, #4]
 8104b4e:	f7ff ff8b 	bl	8104a68 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
	}
}
 8104b52:	bf00      	nop
 8104b54:	3730      	adds	r7, #48	@ 0x30
 8104b56:	46bd      	mov	sp, r7
 8104b58:	bdb0      	pop	{r4, r5, r7, pc}

08104b5a <_ZZN19IPCDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>:

void IPCDaemonNativeTask::process()
{
	processIpcReceive();
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
 8104b5a:	b082      	sub	sp, #8
 8104b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8104b5e:	b089      	sub	sp, #36	@ 0x24
 8104b60:	af06      	add	r7, sp, #24
 8104b62:	6078      	str	r0, [r7, #4]
 8104b64:	f107 0020 	add.w	r0, r7, #32
 8104b68:	e880 000c 	stmia.w	r0, {r2, r3}
 8104b6c:	460b      	mov	r3, r1
 8104b6e:	807b      	strh	r3, [r7, #2]
 8104b70:	687b      	ldr	r3, [r7, #4]
 8104b72:	681d      	ldr	r5, [r3, #0]
                      {this->OnEvent(event, msg, eventSender, eventReceiver);});
 8104b74:	887e      	ldrh	r6, [r7, #2]
 8104b76:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8104b7a:	9304      	str	r3, [sp, #16]
 8104b7c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8104b80:	9303      	str	r3, [sp, #12]
 8104b82:	466c      	mov	r4, sp
 8104b84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8104b88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8104b8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8104b90:	f107 0320 	add.w	r3, r7, #32
 8104b94:	cb0c      	ldmia	r3, {r2, r3}
 8104b96:	4631      	mov	r1, r6
 8104b98:	4628      	mov	r0, r5
 8104b9a:	f7ff ff65 	bl	8104a68 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
 8104b9e:	bf00      	nop
 8104ba0:	370c      	adds	r7, #12
 8104ba2:	46bd      	mov	sp, r7
 8104ba4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8104ba8:	b002      	add	sp, #8
 8104baa:	4770      	bx	lr

08104bac <_ZN19IPCDaemonNativeTask7processEv>:
{
 8104bac:	b590      	push	{r4, r7, lr}
 8104bae:	b089      	sub	sp, #36	@ 0x24
 8104bb0:	af00      	add	r7, sp, #0
 8104bb2:	6078      	str	r0, [r7, #4]
	processIpcReceive();
 8104bb4:	6878      	ldr	r0, [r7, #4]
 8104bb6:	f7ff ffa5 	bl	8104b04 <_ZN19IPCDaemonNativeTask17processIpcReceiveEv>
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
 8104bba:	687c      	ldr	r4, [r7, #4]
 8104bbc:	687b      	ldr	r3, [r7, #4]
 8104bbe:	61fb      	str	r3, [r7, #28]
 8104bc0:	f107 021c 	add.w	r2, r7, #28
 8104bc4:	f107 030c 	add.w	r3, r7, #12
 8104bc8:	4611      	mov	r1, r2
 8104bca:	4618      	mov	r0, r3
 8104bcc:	f000 f810 	bl	8104bf0 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>
 8104bd0:	f107 030c 	add.w	r3, r7, #12
 8104bd4:	4619      	mov	r1, r3
 8104bd6:	4620      	mov	r0, r4
 8104bd8:	f7fd fb9d 	bl	8102316 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>
 8104bdc:	f107 030c 	add.w	r3, r7, #12
 8104be0:	4618      	mov	r0, r3
 8104be2:	f7fc facc 	bl	810117e <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>
}
 8104be6:	bf00      	nop
 8104be8:	3724      	adds	r7, #36	@ 0x24
 8104bea:	46bd      	mov	sp, r7
 8104bec:	bd90      	pop	{r4, r7, pc}
	...

08104bf0 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>:
	function(_Functor&& __f)
 8104bf0:	b590      	push	{r4, r7, lr}
 8104bf2:	b083      	sub	sp, #12
 8104bf4:	af00      	add	r7, sp, #0
 8104bf6:	6078      	str	r0, [r7, #4]
 8104bf8:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8104bfa:	687b      	ldr	r3, [r7, #4]
 8104bfc:	461a      	mov	r2, r3
 8104bfe:	2300      	movs	r3, #0
 8104c00:	6013      	str	r3, [r2, #0]
 8104c02:	6053      	str	r3, [r2, #4]
 8104c04:	6093      	str	r3, [r2, #8]
 8104c06:	687b      	ldr	r3, [r7, #4]
 8104c08:	4618      	mov	r0, r3
 8104c0a:	f7fd f903 	bl	8101e14 <_ZNSt14_Function_baseC1Ev>
 8104c0e:	687b      	ldr	r3, [r7, #4]
 8104c10:	2200      	movs	r2, #0
 8104c12:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8104c14:	6838      	ldr	r0, [r7, #0]
 8104c16:	f000 f81b 	bl	8104c50 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>
 8104c1a:	4603      	mov	r3, r0
 8104c1c:	2b00      	cmp	r3, #0
 8104c1e:	d00e      	beq.n	8104c3e <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8104c20:	687c      	ldr	r4, [r7, #4]
 8104c22:	6838      	ldr	r0, [r7, #0]
 8104c24:	f000 f81f 	bl	8104c66 <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8104c28:	4603      	mov	r3, r0
 8104c2a:	4619      	mov	r1, r3
 8104c2c:	4620      	mov	r0, r4
 8104c2e:	f000 f825 	bl	8104c7c <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8104c32:	687b      	ldr	r3, [r7, #4]
 8104c34:	4a04      	ldr	r2, [pc, #16]	@ (8104c48 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x58>)
 8104c36:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8104c38:	687b      	ldr	r3, [r7, #4]
 8104c3a:	4a04      	ldr	r2, [pc, #16]	@ (8104c4c <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x5c>)
 8104c3c:	609a      	str	r2, [r3, #8]
	}
 8104c3e:	687b      	ldr	r3, [r7, #4]
 8104c40:	4618      	mov	r0, r3
 8104c42:	370c      	adds	r7, #12
 8104c44:	46bd      	mov	sp, r7
 8104c46:	bd90      	pop	{r4, r7, pc}
 8104c48:	08104ca1 	.word	0x08104ca1
 8104c4c:	08104cf1 	.word	0x08104cf1

08104c50 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8104c50:	b480      	push	{r7}
 8104c52:	b083      	sub	sp, #12
 8104c54:	af00      	add	r7, sp, #0
 8104c56:	6078      	str	r0, [r7, #4]
	  { return true; }
 8104c58:	2301      	movs	r3, #1
 8104c5a:	4618      	mov	r0, r3
 8104c5c:	370c      	adds	r7, #12
 8104c5e:	46bd      	mov	sp, r7
 8104c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c64:	4770      	bx	lr

08104c66 <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8104c66:	b480      	push	{r7}
 8104c68:	b083      	sub	sp, #12
 8104c6a:	af00      	add	r7, sp, #0
 8104c6c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8104c6e:	687b      	ldr	r3, [r7, #4]
 8104c70:	4618      	mov	r0, r3
 8104c72:	370c      	adds	r7, #12
 8104c74:	46bd      	mov	sp, r7
 8104c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c7a:	4770      	bx	lr

08104c7c <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8104c7c:	b590      	push	{r4, r7, lr}
 8104c7e:	b083      	sub	sp, #12
 8104c80:	af00      	add	r7, sp, #0
 8104c82:	6078      	str	r0, [r7, #4]
 8104c84:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8104c86:	6838      	ldr	r0, [r7, #0]
 8104c88:	f7ff ffed 	bl	8104c66 <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8104c8c:	4603      	mov	r3, r0
 8104c8e:	4622      	mov	r2, r4
 8104c90:	4619      	mov	r1, r3
 8104c92:	6878      	ldr	r0, [r7, #4]
 8104c94:	f000 f84b 	bl	8104d2e <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8104c98:	bf00      	nop
 8104c9a:	370c      	adds	r7, #12
 8104c9c:	46bd      	mov	sp, r7
 8104c9e:	bd90      	pop	{r4, r7, pc}

08104ca0 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_SC_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8104ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8104ca4:	b086      	sub	sp, #24
 8104ca6:	af02      	add	r7, sp, #8
 8104ca8:	60f8      	str	r0, [r7, #12]
 8104caa:	60b9      	str	r1, [r7, #8]
 8104cac:	607a      	str	r2, [r7, #4]
 8104cae:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8104cb0:	68f8      	ldr	r0, [r7, #12]
 8104cb2:	f000 f855 	bl	8104d60 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8104cb6:	4604      	mov	r4, r0
 8104cb8:	68b8      	ldr	r0, [r7, #8]
 8104cba:	f7fd f988 	bl	8101fce <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8104cbe:	4605      	mov	r5, r0
 8104cc0:	6878      	ldr	r0, [r7, #4]
 8104cc2:	f7fd f98f 	bl	8101fe4 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8104cc6:	4606      	mov	r6, r0
 8104cc8:	6838      	ldr	r0, [r7, #0]
 8104cca:	f7fd f996 	bl	8101ffa <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8104cce:	4680      	mov	r8, r0
 8104cd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8104cd2:	f7fd f992 	bl	8101ffa <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8104cd6:	4603      	mov	r3, r0
 8104cd8:	9300      	str	r3, [sp, #0]
 8104cda:	4643      	mov	r3, r8
 8104cdc:	4632      	mov	r2, r6
 8104cde:	4629      	mov	r1, r5
 8104ce0:	4620      	mov	r0, r4
 8104ce2:	f000 f84e 	bl	8104d82 <_ZSt10__invoke_rIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8104ce6:	bf00      	nop
      }
 8104ce8:	3710      	adds	r7, #16
 8104cea:	46bd      	mov	sp, r7
 8104cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08104cf0 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8104cf0:	b590      	push	{r4, r7, lr}
 8104cf2:	b085      	sub	sp, #20
 8104cf4:	af00      	add	r7, sp, #0
 8104cf6:	60f8      	str	r0, [r7, #12]
 8104cf8:	60b9      	str	r1, [r7, #8]
 8104cfa:	4613      	mov	r3, r2
 8104cfc:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8104cfe:	79fb      	ldrb	r3, [r7, #7]
 8104d00:	2b01      	cmp	r3, #1
 8104d02:	d109      	bne.n	8104d18 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8104d04:	68f8      	ldr	r0, [r7, #12]
 8104d06:	f000 f865 	bl	8104dd4 <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 8104d0a:	4604      	mov	r4, r0
 8104d0c:	68b8      	ldr	r0, [r7, #8]
 8104d0e:	f000 f827 	bl	8104d60 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8104d12:	4603      	mov	r3, r0
 8104d14:	6023      	str	r3, [r4, #0]
	    break;
 8104d16:	e005      	b.n	8104d24 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8104d18:	79fb      	ldrb	r3, [r7, #7]
 8104d1a:	461a      	mov	r2, r3
 8104d1c:	68b9      	ldr	r1, [r7, #8]
 8104d1e:	68f8      	ldr	r0, [r7, #12]
 8104d20:	f000 f864 	bl	8104dec <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8104d24:	2300      	movs	r3, #0
      }
 8104d26:	4618      	mov	r0, r3
 8104d28:	3714      	adds	r7, #20
 8104d2a:	46bd      	mov	sp, r7
 8104d2c:	bd90      	pop	{r4, r7, pc}

08104d2e <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8104d2e:	b590      	push	{r4, r7, lr}
 8104d30:	b085      	sub	sp, #20
 8104d32:	af00      	add	r7, sp, #0
 8104d34:	60f8      	str	r0, [r7, #12]
 8104d36:	60b9      	str	r1, [r7, #8]
 8104d38:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8104d3a:	68f8      	ldr	r0, [r7, #12]
 8104d3c:	f7fc f8ba 	bl	8100eb4 <_ZNSt9_Any_data9_M_accessEv>
 8104d40:	4603      	mov	r3, r0
 8104d42:	4619      	mov	r1, r3
 8104d44:	2004      	movs	r0, #4
 8104d46:	f7fc f8a9 	bl	8100e9c <_ZnwjPv>
 8104d4a:	4604      	mov	r4, r0
 8104d4c:	68b8      	ldr	r0, [r7, #8]
 8104d4e:	f7ff ff8a 	bl	8104c66 <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8104d52:	4603      	mov	r3, r0
 8104d54:	681b      	ldr	r3, [r3, #0]
 8104d56:	6023      	str	r3, [r4, #0]
	  }
 8104d58:	bf00      	nop
 8104d5a:	3714      	adds	r7, #20
 8104d5c:	46bd      	mov	sp, r7
 8104d5e:	bd90      	pop	{r4, r7, pc}

08104d60 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8104d60:	b580      	push	{r7, lr}
 8104d62:	b084      	sub	sp, #16
 8104d64:	af00      	add	r7, sp, #0
 8104d66:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8104d68:	6878      	ldr	r0, [r7, #4]
 8104d6a:	f000 f879 	bl	8104e60 <_ZNKSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>
 8104d6e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8104d70:	68f8      	ldr	r0, [r7, #12]
 8104d72:	f000 f881 	bl	8104e78 <_ZSt11__addressofIKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>
 8104d76:	4603      	mov	r3, r0
 8104d78:	bf00      	nop
	}
 8104d7a:	4618      	mov	r0, r3
 8104d7c:	3710      	adds	r7, #16
 8104d7e:	46bd      	mov	sp, r7
 8104d80:	bd80      	pop	{r7, pc}

08104d82 <_ZSt10__invoke_rIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8104d82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8104d86:	b087      	sub	sp, #28
 8104d88:	af02      	add	r7, sp, #8
 8104d8a:	60f8      	str	r0, [r7, #12]
 8104d8c:	60b9      	str	r1, [r7, #8]
 8104d8e:	607a      	str	r2, [r7, #4]
 8104d90:	603b      	str	r3, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8104d92:	68f8      	ldr	r0, [r7, #12]
 8104d94:	f000 f87b 	bl	8104e8e <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8104d98:	4605      	mov	r5, r0
 8104d9a:	68b8      	ldr	r0, [r7, #8]
 8104d9c:	f7fd f917 	bl	8101fce <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8104da0:	4606      	mov	r6, r0
 8104da2:	6878      	ldr	r0, [r7, #4]
 8104da4:	f7fd f91e 	bl	8101fe4 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8104da8:	4680      	mov	r8, r0
 8104daa:	6838      	ldr	r0, [r7, #0]
 8104dac:	f7fd f925 	bl	8101ffa <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8104db0:	4604      	mov	r4, r0
 8104db2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8104db4:	f7fd f921 	bl	8101ffa <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8104db8:	4603      	mov	r3, r0
 8104dba:	9301      	str	r3, [sp, #4]
 8104dbc:	9400      	str	r4, [sp, #0]
 8104dbe:	4643      	mov	r3, r8
 8104dc0:	4632      	mov	r2, r6
 8104dc2:	4629      	mov	r1, r5
 8104dc4:	4648      	mov	r0, r9
 8104dc6:	f000 f86d 	bl	8104ea4 <_ZSt13__invoke_implIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>
    }
 8104dca:	bf00      	nop
 8104dcc:	3714      	adds	r7, #20
 8104dce:	46bd      	mov	sp, r7
 8104dd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08104dd4 <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 8104dd4:	b580      	push	{r7, lr}
 8104dd6:	b082      	sub	sp, #8
 8104dd8:	af00      	add	r7, sp, #0
 8104dda:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8104ddc:	6878      	ldr	r0, [r7, #4]
 8104dde:	f7fc f869 	bl	8100eb4 <_ZNSt9_Any_data9_M_accessEv>
 8104de2:	4603      	mov	r3, r0
 8104de4:	4618      	mov	r0, r3
 8104de6:	3708      	adds	r7, #8
 8104de8:	46bd      	mov	sp, r7
 8104dea:	bd80      	pop	{r7, pc}

08104dec <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8104dec:	b590      	push	{r4, r7, lr}
 8104dee:	b085      	sub	sp, #20
 8104df0:	af00      	add	r7, sp, #0
 8104df2:	60f8      	str	r0, [r7, #12]
 8104df4:	60b9      	str	r1, [r7, #8]
 8104df6:	4613      	mov	r3, r2
 8104df8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8104dfa:	79fb      	ldrb	r3, [r7, #7]
 8104dfc:	2b03      	cmp	r3, #3
 8104dfe:	d82a      	bhi.n	8104e56 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8104e00:	a201      	add	r2, pc, #4	@ (adr r2, 8104e08 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 8104e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e06:	bf00      	nop
 8104e08:	08104e19 	.word	0x08104e19
 8104e0c:	08104e27 	.word	0x08104e27
 8104e10:	08104e3b 	.word	0x08104e3b
 8104e14:	08104e4d 	.word	0x08104e4d
	      __dest._M_access<const type_info*>() = nullptr;
 8104e18:	68f8      	ldr	r0, [r7, #12]
 8104e1a:	f7fd f9be 	bl	810219a <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8104e1e:	4603      	mov	r3, r0
 8104e20:	2200      	movs	r2, #0
 8104e22:	601a      	str	r2, [r3, #0]
	      break;
 8104e24:	e017      	b.n	8104e56 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8104e26:	68f8      	ldr	r0, [r7, #12]
 8104e28:	f7ff ffd4 	bl	8104dd4 <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 8104e2c:	4604      	mov	r4, r0
 8104e2e:	68b8      	ldr	r0, [r7, #8]
 8104e30:	f7ff ff96 	bl	8104d60 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8104e34:	4603      	mov	r3, r0
 8104e36:	6023      	str	r3, [r4, #0]
	      break;
 8104e38:	e00d      	b.n	8104e56 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8104e3a:	68b8      	ldr	r0, [r7, #8]
 8104e3c:	f7ff ff90 	bl	8104d60 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8104e40:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8104e42:	4619      	mov	r1, r3
 8104e44:	68f8      	ldr	r0, [r7, #12]
 8104e46:	f000 f860 	bl	8104f0a <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 8104e4a:	e004      	b.n	8104e56 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8104e4c:	4621      	mov	r1, r4
 8104e4e:	68f8      	ldr	r0, [r7, #12]
 8104e50:	f000 f86d 	bl	8104f2e <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8104e54:	bf00      	nop
	  return false;
 8104e56:	2300      	movs	r3, #0
	}
 8104e58:	4618      	mov	r0, r3
 8104e5a:	3714      	adds	r7, #20
 8104e5c:	46bd      	mov	sp, r7
 8104e5e:	bd90      	pop	{r4, r7, pc}

08104e60 <_ZNKSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>:
      _M_access() const noexcept
 8104e60:	b580      	push	{r7, lr}
 8104e62:	b082      	sub	sp, #8
 8104e64:	af00      	add	r7, sp, #0
 8104e66:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8104e68:	6878      	ldr	r0, [r7, #4]
 8104e6a:	f7fc f82e 	bl	8100eca <_ZNKSt9_Any_data9_M_accessEv>
 8104e6e:	4603      	mov	r3, r0
 8104e70:	4618      	mov	r0, r3
 8104e72:	3708      	adds	r7, #8
 8104e74:	46bd      	mov	sp, r7
 8104e76:	bd80      	pop	{r7, pc}

08104e78 <_ZSt11__addressofIKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8104e78:	b480      	push	{r7}
 8104e7a:	b083      	sub	sp, #12
 8104e7c:	af00      	add	r7, sp, #0
 8104e7e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8104e80:	687b      	ldr	r3, [r7, #4]
 8104e82:	4618      	mov	r0, r3
 8104e84:	370c      	adds	r7, #12
 8104e86:	46bd      	mov	sp, r7
 8104e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e8c:	4770      	bx	lr

08104e8e <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8104e8e:	b480      	push	{r7}
 8104e90:	b083      	sub	sp, #12
 8104e92:	af00      	add	r7, sp, #0
 8104e94:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8104e96:	687b      	ldr	r3, [r7, #4]
 8104e98:	4618      	mov	r0, r3
 8104e9a:	370c      	adds	r7, #12
 8104e9c:	46bd      	mov	sp, r7
 8104e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ea2:	4770      	bx	lr

08104ea4 <_ZSt13__invoke_implIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8104ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8104ea8:	b08a      	sub	sp, #40	@ 0x28
 8104eaa:	af06      	add	r7, sp, #24
 8104eac:	7338      	strb	r0, [r7, #12]
 8104eae:	60b9      	str	r1, [r7, #8]
 8104eb0:	607a      	str	r2, [r7, #4]
 8104eb2:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8104eb4:	68b8      	ldr	r0, [r7, #8]
 8104eb6:	f7ff ffea 	bl	8104e8e <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8104eba:	4680      	mov	r8, r0
 8104ebc:	6878      	ldr	r0, [r7, #4]
 8104ebe:	f7fd f886 	bl	8101fce <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8104ec2:	4603      	mov	r3, r0
 8104ec4:	881e      	ldrh	r6, [r3, #0]
 8104ec6:	6838      	ldr	r0, [r7, #0]
 8104ec8:	f7fd f88c 	bl	8101fe4 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8104ecc:	4604      	mov	r4, r0
 8104ece:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8104ed0:	f7fd f893 	bl	8101ffa <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8104ed4:	4603      	mov	r3, r0
 8104ed6:	781d      	ldrb	r5, [r3, #0]
 8104ed8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8104eda:	f7fd f88e 	bl	8101ffa <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8104ede:	4603      	mov	r3, r0
 8104ee0:	781b      	ldrb	r3, [r3, #0]
 8104ee2:	9304      	str	r3, [sp, #16]
 8104ee4:	9503      	str	r5, [sp, #12]
 8104ee6:	466d      	mov	r5, sp
 8104ee8:	f104 0308 	add.w	r3, r4, #8
 8104eec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8104ef0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8104ef4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8104ef8:	4631      	mov	r1, r6
 8104efa:	4640      	mov	r0, r8
 8104efc:	f7ff fe2d 	bl	8104b5a <_ZZN19IPCDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>
 8104f00:	bf00      	nop
 8104f02:	3710      	adds	r7, #16
 8104f04:	46bd      	mov	sp, r7
 8104f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08104f0a <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8104f0a:	b590      	push	{r4, r7, lr}
 8104f0c:	b083      	sub	sp, #12
 8104f0e:	af00      	add	r7, sp, #0
 8104f10:	6078      	str	r0, [r7, #4]
 8104f12:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8104f14:	6838      	ldr	r0, [r7, #0]
 8104f16:	f000 f816 	bl	8104f46 <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 8104f1a:	4603      	mov	r3, r0
 8104f1c:	4622      	mov	r2, r4
 8104f1e:	4619      	mov	r1, r3
 8104f20:	6878      	ldr	r0, [r7, #4]
 8104f22:	f000 f81b 	bl	8104f5c <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8104f26:	bf00      	nop
 8104f28:	370c      	adds	r7, #12
 8104f2a:	46bd      	mov	sp, r7
 8104f2c:	bd90      	pop	{r4, r7, pc}

08104f2e <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8104f2e:	b580      	push	{r7, lr}
 8104f30:	b082      	sub	sp, #8
 8104f32:	af00      	add	r7, sp, #0
 8104f34:	6078      	str	r0, [r7, #4]
 8104f36:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8104f38:	6878      	ldr	r0, [r7, #4]
 8104f3a:	f000 f828 	bl	8104f8e <_ZNSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
	}
 8104f3e:	bf00      	nop
 8104f40:	3708      	adds	r7, #8
 8104f42:	46bd      	mov	sp, r7
 8104f44:	bd80      	pop	{r7, pc}

08104f46 <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8104f46:	b480      	push	{r7}
 8104f48:	b083      	sub	sp, #12
 8104f4a:	af00      	add	r7, sp, #0
 8104f4c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8104f4e:	687b      	ldr	r3, [r7, #4]
 8104f50:	4618      	mov	r0, r3
 8104f52:	370c      	adds	r7, #12
 8104f54:	46bd      	mov	sp, r7
 8104f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f5a:	4770      	bx	lr

08104f5c <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8104f5c:	b590      	push	{r4, r7, lr}
 8104f5e:	b085      	sub	sp, #20
 8104f60:	af00      	add	r7, sp, #0
 8104f62:	60f8      	str	r0, [r7, #12]
 8104f64:	60b9      	str	r1, [r7, #8]
 8104f66:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8104f68:	68f8      	ldr	r0, [r7, #12]
 8104f6a:	f7fb ffa3 	bl	8100eb4 <_ZNSt9_Any_data9_M_accessEv>
 8104f6e:	4603      	mov	r3, r0
 8104f70:	4619      	mov	r1, r3
 8104f72:	2004      	movs	r0, #4
 8104f74:	f7fb ff92 	bl	8100e9c <_ZnwjPv>
 8104f78:	4604      	mov	r4, r0
 8104f7a:	68b8      	ldr	r0, [r7, #8]
 8104f7c:	f7ff ffe3 	bl	8104f46 <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 8104f80:	4603      	mov	r3, r0
 8104f82:	681b      	ldr	r3, [r3, #0]
 8104f84:	6023      	str	r3, [r4, #0]
	  }
 8104f86:	bf00      	nop
 8104f88:	3714      	adds	r7, #20
 8104f8a:	46bd      	mov	sp, r7
 8104f8c:	bd90      	pop	{r4, r7, pc}

08104f8e <_ZNSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 8104f8e:	b580      	push	{r7, lr}
 8104f90:	b082      	sub	sp, #8
 8104f92:	af00      	add	r7, sp, #0
 8104f94:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8104f96:	6878      	ldr	r0, [r7, #4]
 8104f98:	f7fb ff8c 	bl	8100eb4 <_ZNSt9_Any_data9_M_accessEv>
 8104f9c:	4603      	mov	r3, r0
 8104f9e:	4618      	mov	r0, r3
 8104fa0:	3708      	adds	r7, #8
 8104fa2:	46bd      	mov	sp, r7
 8104fa4:	bd80      	pop	{r7, pc}
	...

08104fa8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8104fa8:	b580      	push	{r7, lr}
 8104faa:	b084      	sub	sp, #16
 8104fac:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8104fae:	4b92      	ldr	r3, [pc, #584]	@ (81051f8 <MX_LWIP_Init+0x250>)
 8104fb0:	22a9      	movs	r2, #169	@ 0xa9
 8104fb2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8104fb4:	4b90      	ldr	r3, [pc, #576]	@ (81051f8 <MX_LWIP_Init+0x250>)
 8104fb6:	22fe      	movs	r2, #254	@ 0xfe
 8104fb8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8104fba:	4b8f      	ldr	r3, [pc, #572]	@ (81051f8 <MX_LWIP_Init+0x250>)
 8104fbc:	2201      	movs	r2, #1
 8104fbe:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 8104fc0:	4b8d      	ldr	r3, [pc, #564]	@ (81051f8 <MX_LWIP_Init+0x250>)
 8104fc2:	2201      	movs	r2, #1
 8104fc4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8104fc6:	4b8d      	ldr	r3, [pc, #564]	@ (81051fc <MX_LWIP_Init+0x254>)
 8104fc8:	22ff      	movs	r2, #255	@ 0xff
 8104fca:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8104fcc:	4b8b      	ldr	r3, [pc, #556]	@ (81051fc <MX_LWIP_Init+0x254>)
 8104fce:	22ff      	movs	r2, #255	@ 0xff
 8104fd0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8104fd2:	4b8a      	ldr	r3, [pc, #552]	@ (81051fc <MX_LWIP_Init+0x254>)
 8104fd4:	2200      	movs	r2, #0
 8104fd6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8104fd8:	4b88      	ldr	r3, [pc, #544]	@ (81051fc <MX_LWIP_Init+0x254>)
 8104fda:	2200      	movs	r2, #0
 8104fdc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8104fde:	4b88      	ldr	r3, [pc, #544]	@ (8105200 <MX_LWIP_Init+0x258>)
 8104fe0:	2200      	movs	r2, #0
 8104fe2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8104fe4:	4b86      	ldr	r3, [pc, #536]	@ (8105200 <MX_LWIP_Init+0x258>)
 8104fe6:	2200      	movs	r2, #0
 8104fe8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8104fea:	4b85      	ldr	r3, [pc, #532]	@ (8105200 <MX_LWIP_Init+0x258>)
 8104fec:	2200      	movs	r2, #0
 8104fee:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8104ff0:	4b83      	ldr	r3, [pc, #524]	@ (8105200 <MX_LWIP_Init+0x258>)
 8104ff2:	2200      	movs	r2, #0
 8104ff4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8104ff6:	2100      	movs	r1, #0
 8104ff8:	2000      	movs	r0, #0
 8104ffa:	f017 f90d 	bl	811c218 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8104ffe:	4b7e      	ldr	r3, [pc, #504]	@ (81051f8 <MX_LWIP_Init+0x250>)
 8105000:	781b      	ldrb	r3, [r3, #0]
 8105002:	061a      	lsls	r2, r3, #24
 8105004:	4b7c      	ldr	r3, [pc, #496]	@ (81051f8 <MX_LWIP_Init+0x250>)
 8105006:	785b      	ldrb	r3, [r3, #1]
 8105008:	041b      	lsls	r3, r3, #16
 810500a:	431a      	orrs	r2, r3
 810500c:	4b7a      	ldr	r3, [pc, #488]	@ (81051f8 <MX_LWIP_Init+0x250>)
 810500e:	789b      	ldrb	r3, [r3, #2]
 8105010:	021b      	lsls	r3, r3, #8
 8105012:	4313      	orrs	r3, r2
 8105014:	4a78      	ldr	r2, [pc, #480]	@ (81051f8 <MX_LWIP_Init+0x250>)
 8105016:	78d2      	ldrb	r2, [r2, #3]
 8105018:	4313      	orrs	r3, r2
 810501a:	061a      	lsls	r2, r3, #24
 810501c:	4b76      	ldr	r3, [pc, #472]	@ (81051f8 <MX_LWIP_Init+0x250>)
 810501e:	781b      	ldrb	r3, [r3, #0]
 8105020:	0619      	lsls	r1, r3, #24
 8105022:	4b75      	ldr	r3, [pc, #468]	@ (81051f8 <MX_LWIP_Init+0x250>)
 8105024:	785b      	ldrb	r3, [r3, #1]
 8105026:	041b      	lsls	r3, r3, #16
 8105028:	4319      	orrs	r1, r3
 810502a:	4b73      	ldr	r3, [pc, #460]	@ (81051f8 <MX_LWIP_Init+0x250>)
 810502c:	789b      	ldrb	r3, [r3, #2]
 810502e:	021b      	lsls	r3, r3, #8
 8105030:	430b      	orrs	r3, r1
 8105032:	4971      	ldr	r1, [pc, #452]	@ (81051f8 <MX_LWIP_Init+0x250>)
 8105034:	78c9      	ldrb	r1, [r1, #3]
 8105036:	430b      	orrs	r3, r1
 8105038:	021b      	lsls	r3, r3, #8
 810503a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810503e:	431a      	orrs	r2, r3
 8105040:	4b6d      	ldr	r3, [pc, #436]	@ (81051f8 <MX_LWIP_Init+0x250>)
 8105042:	781b      	ldrb	r3, [r3, #0]
 8105044:	0619      	lsls	r1, r3, #24
 8105046:	4b6c      	ldr	r3, [pc, #432]	@ (81051f8 <MX_LWIP_Init+0x250>)
 8105048:	785b      	ldrb	r3, [r3, #1]
 810504a:	041b      	lsls	r3, r3, #16
 810504c:	4319      	orrs	r1, r3
 810504e:	4b6a      	ldr	r3, [pc, #424]	@ (81051f8 <MX_LWIP_Init+0x250>)
 8105050:	789b      	ldrb	r3, [r3, #2]
 8105052:	021b      	lsls	r3, r3, #8
 8105054:	430b      	orrs	r3, r1
 8105056:	4968      	ldr	r1, [pc, #416]	@ (81051f8 <MX_LWIP_Init+0x250>)
 8105058:	78c9      	ldrb	r1, [r1, #3]
 810505a:	430b      	orrs	r3, r1
 810505c:	0a1b      	lsrs	r3, r3, #8
 810505e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8105062:	431a      	orrs	r2, r3
 8105064:	4b64      	ldr	r3, [pc, #400]	@ (81051f8 <MX_LWIP_Init+0x250>)
 8105066:	781b      	ldrb	r3, [r3, #0]
 8105068:	0619      	lsls	r1, r3, #24
 810506a:	4b63      	ldr	r3, [pc, #396]	@ (81051f8 <MX_LWIP_Init+0x250>)
 810506c:	785b      	ldrb	r3, [r3, #1]
 810506e:	041b      	lsls	r3, r3, #16
 8105070:	4319      	orrs	r1, r3
 8105072:	4b61      	ldr	r3, [pc, #388]	@ (81051f8 <MX_LWIP_Init+0x250>)
 8105074:	789b      	ldrb	r3, [r3, #2]
 8105076:	021b      	lsls	r3, r3, #8
 8105078:	430b      	orrs	r3, r1
 810507a:	495f      	ldr	r1, [pc, #380]	@ (81051f8 <MX_LWIP_Init+0x250>)
 810507c:	78c9      	ldrb	r1, [r1, #3]
 810507e:	430b      	orrs	r3, r1
 8105080:	0e1b      	lsrs	r3, r3, #24
 8105082:	4313      	orrs	r3, r2
 8105084:	4a5f      	ldr	r2, [pc, #380]	@ (8105204 <MX_LWIP_Init+0x25c>)
 8105086:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8105088:	4b5c      	ldr	r3, [pc, #368]	@ (81051fc <MX_LWIP_Init+0x254>)
 810508a:	781b      	ldrb	r3, [r3, #0]
 810508c:	061a      	lsls	r2, r3, #24
 810508e:	4b5b      	ldr	r3, [pc, #364]	@ (81051fc <MX_LWIP_Init+0x254>)
 8105090:	785b      	ldrb	r3, [r3, #1]
 8105092:	041b      	lsls	r3, r3, #16
 8105094:	431a      	orrs	r2, r3
 8105096:	4b59      	ldr	r3, [pc, #356]	@ (81051fc <MX_LWIP_Init+0x254>)
 8105098:	789b      	ldrb	r3, [r3, #2]
 810509a:	021b      	lsls	r3, r3, #8
 810509c:	4313      	orrs	r3, r2
 810509e:	4a57      	ldr	r2, [pc, #348]	@ (81051fc <MX_LWIP_Init+0x254>)
 81050a0:	78d2      	ldrb	r2, [r2, #3]
 81050a2:	4313      	orrs	r3, r2
 81050a4:	061a      	lsls	r2, r3, #24
 81050a6:	4b55      	ldr	r3, [pc, #340]	@ (81051fc <MX_LWIP_Init+0x254>)
 81050a8:	781b      	ldrb	r3, [r3, #0]
 81050aa:	0619      	lsls	r1, r3, #24
 81050ac:	4b53      	ldr	r3, [pc, #332]	@ (81051fc <MX_LWIP_Init+0x254>)
 81050ae:	785b      	ldrb	r3, [r3, #1]
 81050b0:	041b      	lsls	r3, r3, #16
 81050b2:	4319      	orrs	r1, r3
 81050b4:	4b51      	ldr	r3, [pc, #324]	@ (81051fc <MX_LWIP_Init+0x254>)
 81050b6:	789b      	ldrb	r3, [r3, #2]
 81050b8:	021b      	lsls	r3, r3, #8
 81050ba:	430b      	orrs	r3, r1
 81050bc:	494f      	ldr	r1, [pc, #316]	@ (81051fc <MX_LWIP_Init+0x254>)
 81050be:	78c9      	ldrb	r1, [r1, #3]
 81050c0:	430b      	orrs	r3, r1
 81050c2:	021b      	lsls	r3, r3, #8
 81050c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 81050c8:	431a      	orrs	r2, r3
 81050ca:	4b4c      	ldr	r3, [pc, #304]	@ (81051fc <MX_LWIP_Init+0x254>)
 81050cc:	781b      	ldrb	r3, [r3, #0]
 81050ce:	0619      	lsls	r1, r3, #24
 81050d0:	4b4a      	ldr	r3, [pc, #296]	@ (81051fc <MX_LWIP_Init+0x254>)
 81050d2:	785b      	ldrb	r3, [r3, #1]
 81050d4:	041b      	lsls	r3, r3, #16
 81050d6:	4319      	orrs	r1, r3
 81050d8:	4b48      	ldr	r3, [pc, #288]	@ (81051fc <MX_LWIP_Init+0x254>)
 81050da:	789b      	ldrb	r3, [r3, #2]
 81050dc:	021b      	lsls	r3, r3, #8
 81050de:	430b      	orrs	r3, r1
 81050e0:	4946      	ldr	r1, [pc, #280]	@ (81051fc <MX_LWIP_Init+0x254>)
 81050e2:	78c9      	ldrb	r1, [r1, #3]
 81050e4:	430b      	orrs	r3, r1
 81050e6:	0a1b      	lsrs	r3, r3, #8
 81050e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 81050ec:	431a      	orrs	r2, r3
 81050ee:	4b43      	ldr	r3, [pc, #268]	@ (81051fc <MX_LWIP_Init+0x254>)
 81050f0:	781b      	ldrb	r3, [r3, #0]
 81050f2:	0619      	lsls	r1, r3, #24
 81050f4:	4b41      	ldr	r3, [pc, #260]	@ (81051fc <MX_LWIP_Init+0x254>)
 81050f6:	785b      	ldrb	r3, [r3, #1]
 81050f8:	041b      	lsls	r3, r3, #16
 81050fa:	4319      	orrs	r1, r3
 81050fc:	4b3f      	ldr	r3, [pc, #252]	@ (81051fc <MX_LWIP_Init+0x254>)
 81050fe:	789b      	ldrb	r3, [r3, #2]
 8105100:	021b      	lsls	r3, r3, #8
 8105102:	430b      	orrs	r3, r1
 8105104:	493d      	ldr	r1, [pc, #244]	@ (81051fc <MX_LWIP_Init+0x254>)
 8105106:	78c9      	ldrb	r1, [r1, #3]
 8105108:	430b      	orrs	r3, r1
 810510a:	0e1b      	lsrs	r3, r3, #24
 810510c:	4313      	orrs	r3, r2
 810510e:	4a3e      	ldr	r2, [pc, #248]	@ (8105208 <MX_LWIP_Init+0x260>)
 8105110:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8105112:	4b3b      	ldr	r3, [pc, #236]	@ (8105200 <MX_LWIP_Init+0x258>)
 8105114:	781b      	ldrb	r3, [r3, #0]
 8105116:	061a      	lsls	r2, r3, #24
 8105118:	4b39      	ldr	r3, [pc, #228]	@ (8105200 <MX_LWIP_Init+0x258>)
 810511a:	785b      	ldrb	r3, [r3, #1]
 810511c:	041b      	lsls	r3, r3, #16
 810511e:	431a      	orrs	r2, r3
 8105120:	4b37      	ldr	r3, [pc, #220]	@ (8105200 <MX_LWIP_Init+0x258>)
 8105122:	789b      	ldrb	r3, [r3, #2]
 8105124:	021b      	lsls	r3, r3, #8
 8105126:	4313      	orrs	r3, r2
 8105128:	4a35      	ldr	r2, [pc, #212]	@ (8105200 <MX_LWIP_Init+0x258>)
 810512a:	78d2      	ldrb	r2, [r2, #3]
 810512c:	4313      	orrs	r3, r2
 810512e:	061a      	lsls	r2, r3, #24
 8105130:	4b33      	ldr	r3, [pc, #204]	@ (8105200 <MX_LWIP_Init+0x258>)
 8105132:	781b      	ldrb	r3, [r3, #0]
 8105134:	0619      	lsls	r1, r3, #24
 8105136:	4b32      	ldr	r3, [pc, #200]	@ (8105200 <MX_LWIP_Init+0x258>)
 8105138:	785b      	ldrb	r3, [r3, #1]
 810513a:	041b      	lsls	r3, r3, #16
 810513c:	4319      	orrs	r1, r3
 810513e:	4b30      	ldr	r3, [pc, #192]	@ (8105200 <MX_LWIP_Init+0x258>)
 8105140:	789b      	ldrb	r3, [r3, #2]
 8105142:	021b      	lsls	r3, r3, #8
 8105144:	430b      	orrs	r3, r1
 8105146:	492e      	ldr	r1, [pc, #184]	@ (8105200 <MX_LWIP_Init+0x258>)
 8105148:	78c9      	ldrb	r1, [r1, #3]
 810514a:	430b      	orrs	r3, r1
 810514c:	021b      	lsls	r3, r3, #8
 810514e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8105152:	431a      	orrs	r2, r3
 8105154:	4b2a      	ldr	r3, [pc, #168]	@ (8105200 <MX_LWIP_Init+0x258>)
 8105156:	781b      	ldrb	r3, [r3, #0]
 8105158:	0619      	lsls	r1, r3, #24
 810515a:	4b29      	ldr	r3, [pc, #164]	@ (8105200 <MX_LWIP_Init+0x258>)
 810515c:	785b      	ldrb	r3, [r3, #1]
 810515e:	041b      	lsls	r3, r3, #16
 8105160:	4319      	orrs	r1, r3
 8105162:	4b27      	ldr	r3, [pc, #156]	@ (8105200 <MX_LWIP_Init+0x258>)
 8105164:	789b      	ldrb	r3, [r3, #2]
 8105166:	021b      	lsls	r3, r3, #8
 8105168:	430b      	orrs	r3, r1
 810516a:	4925      	ldr	r1, [pc, #148]	@ (8105200 <MX_LWIP_Init+0x258>)
 810516c:	78c9      	ldrb	r1, [r1, #3]
 810516e:	430b      	orrs	r3, r1
 8105170:	0a1b      	lsrs	r3, r3, #8
 8105172:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8105176:	431a      	orrs	r2, r3
 8105178:	4b21      	ldr	r3, [pc, #132]	@ (8105200 <MX_LWIP_Init+0x258>)
 810517a:	781b      	ldrb	r3, [r3, #0]
 810517c:	0619      	lsls	r1, r3, #24
 810517e:	4b20      	ldr	r3, [pc, #128]	@ (8105200 <MX_LWIP_Init+0x258>)
 8105180:	785b      	ldrb	r3, [r3, #1]
 8105182:	041b      	lsls	r3, r3, #16
 8105184:	4319      	orrs	r1, r3
 8105186:	4b1e      	ldr	r3, [pc, #120]	@ (8105200 <MX_LWIP_Init+0x258>)
 8105188:	789b      	ldrb	r3, [r3, #2]
 810518a:	021b      	lsls	r3, r3, #8
 810518c:	430b      	orrs	r3, r1
 810518e:	491c      	ldr	r1, [pc, #112]	@ (8105200 <MX_LWIP_Init+0x258>)
 8105190:	78c9      	ldrb	r1, [r1, #3]
 8105192:	430b      	orrs	r3, r1
 8105194:	0e1b      	lsrs	r3, r3, #24
 8105196:	4313      	orrs	r3, r2
 8105198:	4a1c      	ldr	r2, [pc, #112]	@ (810520c <MX_LWIP_Init+0x264>)
 810519a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 810519c:	4b1c      	ldr	r3, [pc, #112]	@ (8105210 <MX_LWIP_Init+0x268>)
 810519e:	9302      	str	r3, [sp, #8]
 81051a0:	4b1c      	ldr	r3, [pc, #112]	@ (8105214 <MX_LWIP_Init+0x26c>)
 81051a2:	9301      	str	r3, [sp, #4]
 81051a4:	2300      	movs	r3, #0
 81051a6:	9300      	str	r3, [sp, #0]
 81051a8:	4b18      	ldr	r3, [pc, #96]	@ (810520c <MX_LWIP_Init+0x264>)
 81051aa:	4a17      	ldr	r2, [pc, #92]	@ (8105208 <MX_LWIP_Init+0x260>)
 81051ac:	4915      	ldr	r1, [pc, #84]	@ (8105204 <MX_LWIP_Init+0x25c>)
 81051ae:	481a      	ldr	r0, [pc, #104]	@ (8105218 <MX_LWIP_Init+0x270>)
 81051b0:	f010 fa0c 	bl	81155cc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 81051b4:	4818      	ldr	r0, [pc, #96]	@ (8105218 <MX_LWIP_Init+0x270>)
 81051b6:	f010 fbbb 	bl	8115930 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 81051ba:	4817      	ldr	r0, [pc, #92]	@ (8105218 <MX_LWIP_Init+0x270>)
 81051bc:	f010 fbc8 	bl	8115950 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 81051c0:	4916      	ldr	r1, [pc, #88]	@ (810521c <MX_LWIP_Init+0x274>)
 81051c2:	4815      	ldr	r0, [pc, #84]	@ (8105218 <MX_LWIP_Init+0x270>)
 81051c4:	f010 fcc6 	bl	8115b54 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 81051c8:	2224      	movs	r2, #36	@ 0x24
 81051ca:	2100      	movs	r1, #0
 81051cc:	4814      	ldr	r0, [pc, #80]	@ (8105220 <MX_LWIP_Init+0x278>)
 81051ce:	f018 ff45 	bl	811e05c <memset>
  attributes.name = "EthLink";
 81051d2:	4b13      	ldr	r3, [pc, #76]	@ (8105220 <MX_LWIP_Init+0x278>)
 81051d4:	4a13      	ldr	r2, [pc, #76]	@ (8105224 <MX_LWIP_Init+0x27c>)
 81051d6:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 81051d8:	4b11      	ldr	r3, [pc, #68]	@ (8105220 <MX_LWIP_Init+0x278>)
 81051da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81051de:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 81051e0:	4b0f      	ldr	r3, [pc, #60]	@ (8105220 <MX_LWIP_Init+0x278>)
 81051e2:	2210      	movs	r2, #16
 81051e4:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 81051e6:	4a0e      	ldr	r2, [pc, #56]	@ (8105220 <MX_LWIP_Init+0x278>)
 81051e8:	490b      	ldr	r1, [pc, #44]	@ (8105218 <MX_LWIP_Init+0x270>)
 81051ea:	480f      	ldr	r0, [pc, #60]	@ (8105228 <MX_LWIP_Init+0x280>)
 81051ec:	f008 fac7 	bl	810d77e <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 81051f0:	bf00      	nop
 81051f2:	46bd      	mov	sp, r7
 81051f4:	bd80      	pop	{r7, pc}
 81051f6:	bf00      	nop
 81051f8:	10000274 	.word	0x10000274
 81051fc:	10000278 	.word	0x10000278
 8105200:	1000027c 	.word	0x1000027c
 8105204:	10000268 	.word	0x10000268
 8105208:	1000026c 	.word	0x1000026c
 810520c:	10000270 	.word	0x10000270
 8105210:	0811c155 	.word	0x0811c155
 8105214:	08105779 	.word	0x08105779
 8105218:	10000234 	.word	0x10000234
 810521c:	0810522d 	.word	0x0810522d
 8105220:	10000280 	.word	0x10000280
 8105224:	0811f41c 	.word	0x0811f41c
 8105228:	08105a39 	.word	0x08105a39

0810522c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 810522c:	b580      	push	{r7, lr}
 810522e:	b090      	sub	sp, #64	@ 0x40
 8105230:	af00      	add	r7, sp, #0
 8105232:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8105234:	687b      	ldr	r3, [r7, #4]
 8105236:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810523a:	f003 0301 	and.w	r3, r3, #1
 810523e:	b2db      	uxtb	r3, r3
 8105240:	2b00      	cmp	r3, #0
 8105242:	d015      	beq.n	8105270 <ethernet_link_status_updated+0x44>
  {
/* USER CODE BEGIN 5 */
	SMessage msg;
	msg.event_type = EVENT_ETHERNET_PLUGGED;
 8105244:	f240 1303 	movw	r3, #259	@ 0x103
 8105248:	84bb      	strh	r3, [r7, #36]	@ 0x24
	msg.message_data.ethernet_plugged = true;
 810524a:	2301      	movs	r3, #1
 810524c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	msg.event_sender = EVENT_CLIENT_LWIP_LINK_STATE_MANAGER;
 8105250:	2305      	movs	r3, #5
 8105252:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	msg.event_receiver = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 8105256:	2303      	movs	r3, #3
 8105258:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	xQueueSend(queueToEventManagerCM4, (void*)&msg, portMAX_DELAY);
 810525c:	4b10      	ldr	r3, [pc, #64]	@ (81052a0 <ethernet_link_status_updated+0x74>)
 810525e:	6818      	ldr	r0, [r3, #0]
 8105260:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8105264:	2300      	movs	r3, #0
 8105266:	f04f 32ff 	mov.w	r2, #4294967295
 810526a:	f009 fe2b 	bl	810eec4 <xQueueGenericSend>
	msg.event_sender = EVENT_CLIENT_LWIP_LINK_STATE_MANAGER;
	msg.event_receiver = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
    xQueueSend(queueToEventManagerCM4, (void*)&msg, portMAX_DELAY);
/* USER CODE END 6 */
  }
}
 810526e:	e013      	b.n	8105298 <ethernet_link_status_updated+0x6c>
	msg.event_type = EVENT_ETHERNET_PLUGGED;
 8105270:	f240 1303 	movw	r3, #259	@ 0x103
 8105274:	813b      	strh	r3, [r7, #8]
	msg.message_data.ethernet_plugged = false;
 8105276:	2300      	movs	r3, #0
 8105278:	733b      	strb	r3, [r7, #12]
	msg.event_sender = EVENT_CLIENT_LWIP_LINK_STATE_MANAGER;
 810527a:	2305      	movs	r3, #5
 810527c:	f887 3020 	strb.w	r3, [r7, #32]
	msg.event_receiver = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 8105280:	2303      	movs	r3, #3
 8105282:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    xQueueSend(queueToEventManagerCM4, (void*)&msg, portMAX_DELAY);
 8105286:	4b06      	ldr	r3, [pc, #24]	@ (81052a0 <ethernet_link_status_updated+0x74>)
 8105288:	6818      	ldr	r0, [r3, #0]
 810528a:	f107 0108 	add.w	r1, r7, #8
 810528e:	2300      	movs	r3, #0
 8105290:	f04f 32ff 	mov.w	r2, #4294967295
 8105294:	f009 fe16 	bl	810eec4 <xQueueGenericSend>
}
 8105298:	bf00      	nop
 810529a:	3740      	adds	r7, #64	@ 0x40
 810529c:	46bd      	mov	sp, r7
 810529e:	bd80      	pop	{r7, pc}
 81052a0:	100001b0 	.word	0x100001b0

081052a4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 81052a4:	b580      	push	{r7, lr}
 81052a6:	b082      	sub	sp, #8
 81052a8:	af00      	add	r7, sp, #0
 81052aa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 81052ac:	4b04      	ldr	r3, [pc, #16]	@ (81052c0 <HAL_ETH_RxCpltCallback+0x1c>)
 81052ae:	681b      	ldr	r3, [r3, #0]
 81052b0:	4618      	mov	r0, r3
 81052b2:	f008 fcfb 	bl	810dcac <osSemaphoreRelease>
}
 81052b6:	bf00      	nop
 81052b8:	3708      	adds	r7, #8
 81052ba:	46bd      	mov	sp, r7
 81052bc:	bd80      	pop	{r7, pc}
 81052be:	bf00      	nop
 81052c0:	100002ac 	.word	0x100002ac

081052c4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 81052c4:	b580      	push	{r7, lr}
 81052c6:	b082      	sub	sp, #8
 81052c8:	af00      	add	r7, sp, #0
 81052ca:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 81052cc:	4b04      	ldr	r3, [pc, #16]	@ (81052e0 <HAL_ETH_TxCpltCallback+0x1c>)
 81052ce:	681b      	ldr	r3, [r3, #0]
 81052d0:	4618      	mov	r0, r3
 81052d2:	f008 fceb 	bl	810dcac <osSemaphoreRelease>
}
 81052d6:	bf00      	nop
 81052d8:	3708      	adds	r7, #8
 81052da:	46bd      	mov	sp, r7
 81052dc:	bd80      	pop	{r7, pc}
 81052de:	bf00      	nop
 81052e0:	100002b0 	.word	0x100002b0

081052e4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 81052e4:	b580      	push	{r7, lr}
 81052e6:	b082      	sub	sp, #8
 81052e8:	af00      	add	r7, sp, #0
 81052ea:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 81052ec:	6878      	ldr	r0, [r7, #4]
 81052ee:	f004 f998 	bl	8109622 <HAL_ETH_GetDMAError>
 81052f2:	4603      	mov	r3, r0
 81052f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81052f8:	2b80      	cmp	r3, #128	@ 0x80
 81052fa:	d104      	bne.n	8105306 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 81052fc:	4b04      	ldr	r3, [pc, #16]	@ (8105310 <HAL_ETH_ErrorCallback+0x2c>)
 81052fe:	681b      	ldr	r3, [r3, #0]
 8105300:	4618      	mov	r0, r3
 8105302:	f008 fcd3 	bl	810dcac <osSemaphoreRelease>
  }
}
 8105306:	bf00      	nop
 8105308:	3708      	adds	r7, #8
 810530a:	46bd      	mov	sp, r7
 810530c:	bd80      	pop	{r7, pc}
 810530e:	bf00      	nop
 8105310:	100002ac 	.word	0x100002ac

08105314 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8105314:	b580      	push	{r7, lr}
 8105316:	b0aa      	sub	sp, #168	@ 0xa8
 8105318:	af00      	add	r7, sp, #0
 810531a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 810531c:	2300      	movs	r3, #0
 810531e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8105322:	2300      	movs	r3, #0
 8105324:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8105328:	2300      	movs	r3, #0
 810532a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 810532e:	f107 0310 	add.w	r3, r7, #16
 8105332:	2264      	movs	r2, #100	@ 0x64
 8105334:	2100      	movs	r1, #0
 8105336:	4618      	mov	r0, r3
 8105338:	f018 fe90 	bl	811e05c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 810533c:	4b89      	ldr	r3, [pc, #548]	@ (8105564 <low_level_init+0x250>)
 810533e:	4a8a      	ldr	r2, [pc, #552]	@ (8105568 <low_level_init+0x254>)
 8105340:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8105342:	2300      	movs	r3, #0
 8105344:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8105346:	2380      	movs	r3, #128	@ 0x80
 8105348:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 810534a:	23e1      	movs	r3, #225	@ 0xe1
 810534c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 810534e:	2300      	movs	r3, #0
 8105350:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8105352:	2300      	movs	r3, #0
 8105354:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8105356:	2300      	movs	r3, #0
 8105358:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 810535a:	4a82      	ldr	r2, [pc, #520]	@ (8105564 <low_level_init+0x250>)
 810535c:	f107 0308 	add.w	r3, r7, #8
 8105360:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8105362:	4b80      	ldr	r3, [pc, #512]	@ (8105564 <low_level_init+0x250>)
 8105364:	2201      	movs	r2, #1
 8105366:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8105368:	4b7e      	ldr	r3, [pc, #504]	@ (8105564 <low_level_init+0x250>)
 810536a:	4a80      	ldr	r2, [pc, #512]	@ (810556c <low_level_init+0x258>)
 810536c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 810536e:	4b7d      	ldr	r3, [pc, #500]	@ (8105564 <low_level_init+0x250>)
 8105370:	4a7f      	ldr	r2, [pc, #508]	@ (8105570 <low_level_init+0x25c>)
 8105372:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8105374:	4b7b      	ldr	r3, [pc, #492]	@ (8105564 <low_level_init+0x250>)
 8105376:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 810537a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 810537c:	4879      	ldr	r0, [pc, #484]	@ (8105564 <low_level_init+0x250>)
 810537e:	f003 f95f 	bl	8108640 <HAL_ETH_Init>
 8105382:	4603      	mov	r3, r0
 8105384:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8105388:	2238      	movs	r2, #56	@ 0x38
 810538a:	2100      	movs	r1, #0
 810538c:	4879      	ldr	r0, [pc, #484]	@ (8105574 <low_level_init+0x260>)
 810538e:	f018 fe65 	bl	811e05c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8105392:	4b78      	ldr	r3, [pc, #480]	@ (8105574 <low_level_init+0x260>)
 8105394:	2221      	movs	r2, #33	@ 0x21
 8105396:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8105398:	4b76      	ldr	r3, [pc, #472]	@ (8105574 <low_level_init+0x260>)
 810539a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 810539e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 81053a0:	4b74      	ldr	r3, [pc, #464]	@ (8105574 <low_level_init+0x260>)
 81053a2:	2200      	movs	r2, #0
 81053a4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 81053a6:	4874      	ldr	r0, [pc, #464]	@ (8105578 <low_level_init+0x264>)
 81053a8:	f00f ffca 	bl	8115340 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 81053ac:	687b      	ldr	r3, [r7, #4]
 81053ae:	2206      	movs	r2, #6
 81053b0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 81053b4:	4b6b      	ldr	r3, [pc, #428]	@ (8105564 <low_level_init+0x250>)
 81053b6:	685b      	ldr	r3, [r3, #4]
 81053b8:	781a      	ldrb	r2, [r3, #0]
 81053ba:	687b      	ldr	r3, [r7, #4]
 81053bc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 81053c0:	4b68      	ldr	r3, [pc, #416]	@ (8105564 <low_level_init+0x250>)
 81053c2:	685b      	ldr	r3, [r3, #4]
 81053c4:	785a      	ldrb	r2, [r3, #1]
 81053c6:	687b      	ldr	r3, [r7, #4]
 81053c8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 81053cc:	4b65      	ldr	r3, [pc, #404]	@ (8105564 <low_level_init+0x250>)
 81053ce:	685b      	ldr	r3, [r3, #4]
 81053d0:	789a      	ldrb	r2, [r3, #2]
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 81053d8:	4b62      	ldr	r3, [pc, #392]	@ (8105564 <low_level_init+0x250>)
 81053da:	685b      	ldr	r3, [r3, #4]
 81053dc:	78da      	ldrb	r2, [r3, #3]
 81053de:	687b      	ldr	r3, [r7, #4]
 81053e0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 81053e4:	4b5f      	ldr	r3, [pc, #380]	@ (8105564 <low_level_init+0x250>)
 81053e6:	685b      	ldr	r3, [r3, #4]
 81053e8:	791a      	ldrb	r2, [r3, #4]
 81053ea:	687b      	ldr	r3, [r7, #4]
 81053ec:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 81053f0:	4b5c      	ldr	r3, [pc, #368]	@ (8105564 <low_level_init+0x250>)
 81053f2:	685b      	ldr	r3, [r3, #4]
 81053f4:	795a      	ldrb	r2, [r3, #5]
 81053f6:	687b      	ldr	r3, [r7, #4]
 81053f8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 81053fc:	687b      	ldr	r3, [r7, #4]
 81053fe:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8105402:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8105404:	687b      	ldr	r3, [r7, #4]
 8105406:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810540a:	f043 030a 	orr.w	r3, r3, #10
 810540e:	b2da      	uxtb	r2, r3
 8105410:	687b      	ldr	r3, [r7, #4]
 8105412:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8105416:	2200      	movs	r2, #0
 8105418:	2100      	movs	r1, #0
 810541a:	2001      	movs	r0, #1
 810541c:	f008 fb6a 	bl	810daf4 <osSemaphoreNew>
 8105420:	4603      	mov	r3, r0
 8105422:	4a56      	ldr	r2, [pc, #344]	@ (810557c <low_level_init+0x268>)
 8105424:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8105426:	2200      	movs	r2, #0
 8105428:	2100      	movs	r1, #0
 810542a:	2001      	movs	r0, #1
 810542c:	f008 fb62 	bl	810daf4 <osSemaphoreNew>
 8105430:	4603      	mov	r3, r0
 8105432:	4a53      	ldr	r2, [pc, #332]	@ (8105580 <low_level_init+0x26c>)
 8105434:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8105436:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 810543a:	2224      	movs	r2, #36	@ 0x24
 810543c:	2100      	movs	r1, #0
 810543e:	4618      	mov	r0, r3
 8105440:	f018 fe0c 	bl	811e05c <memset>
  attributes.name = "EthIf";
 8105444:	4b4f      	ldr	r3, [pc, #316]	@ (8105584 <low_level_init+0x270>)
 8105446:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8105448:	f240 4304 	movw	r3, #1028	@ 0x404
 810544c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8105450:	2330      	movs	r3, #48	@ 0x30
 8105452:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8105456:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 810545a:	461a      	mov	r2, r3
 810545c:	6879      	ldr	r1, [r7, #4]
 810545e:	484a      	ldr	r0, [pc, #296]	@ (8105588 <low_level_init+0x274>)
 8105460:	f008 f98d 	bl	810d77e <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8105464:	4949      	ldr	r1, [pc, #292]	@ (810558c <low_level_init+0x278>)
 8105466:	484a      	ldr	r0, [pc, #296]	@ (8105590 <low_level_init+0x27c>)
 8105468:	f002 fe41 	bl	81080ee <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 810546c:	4848      	ldr	r0, [pc, #288]	@ (8105590 <low_level_init+0x27c>)
 810546e:	f002 fe70 	bl	8108152 <LAN8742_Init>
 8105472:	4603      	mov	r3, r0
 8105474:	2b00      	cmp	r3, #0
 8105476:	d006      	beq.n	8105486 <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 8105478:	6878      	ldr	r0, [r7, #4]
 810547a:	f010 fb3b 	bl	8115af4 <netif_set_link_down>
    netif_set_down(netif);
 810547e:	6878      	ldr	r0, [r7, #4]
 8105480:	f010 fad2 	bl	8115a28 <netif_set_down>
 8105484:	e06b      	b.n	810555e <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8105486:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 810548a:	2b00      	cmp	r3, #0
 810548c:	d165      	bne.n	810555a <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 810548e:	4840      	ldr	r0, [pc, #256]	@ (8105590 <low_level_init+0x27c>)
 8105490:	f002 feac 	bl	81081ec <LAN8742_GetLinkState>
 8105494:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8105498:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810549c:	2b01      	cmp	r3, #1
 810549e:	dc06      	bgt.n	81054ae <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 81054a0:	6878      	ldr	r0, [r7, #4]
 81054a2:	f010 fb27 	bl	8115af4 <netif_set_link_down>
      netif_set_down(netif);
 81054a6:	6878      	ldr	r0, [r7, #4]
 81054a8:	f010 fabe 	bl	8115a28 <netif_set_down>
 81054ac:	e057      	b.n	810555e <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 81054ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 81054b2:	3b02      	subs	r3, #2
 81054b4:	2b03      	cmp	r3, #3
 81054b6:	d82b      	bhi.n	8105510 <low_level_init+0x1fc>
 81054b8:	a201      	add	r2, pc, #4	@ (adr r2, 81054c0 <low_level_init+0x1ac>)
 81054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81054be:	bf00      	nop
 81054c0:	081054d1 	.word	0x081054d1
 81054c4:	081054e3 	.word	0x081054e3
 81054c8:	081054f3 	.word	0x081054f3
 81054cc:	08105503 	.word	0x08105503
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 81054d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81054d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 81054d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81054dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 81054e0:	e01f      	b.n	8105522 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 81054e2:	2300      	movs	r3, #0
 81054e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 81054e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81054ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 81054f0:	e017      	b.n	8105522 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 81054f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81054f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 81054fa:	2300      	movs	r3, #0
 81054fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8105500:	e00f      	b.n	8105522 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8105502:	2300      	movs	r3, #0
 8105504:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8105508:	2300      	movs	r3, #0
 810550a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 810550e:	e008      	b.n	8105522 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8105510:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8105514:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8105518:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810551c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8105520:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8105522:	f107 0310 	add.w	r3, r7, #16
 8105526:	4619      	mov	r1, r3
 8105528:	480e      	ldr	r0, [pc, #56]	@ (8105564 <low_level_init+0x250>)
 810552a:	f003 fe2f 	bl	810918c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 810552e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8105532:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8105534:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8105538:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 810553a:	f107 0310 	add.w	r3, r7, #16
 810553e:	4619      	mov	r1, r3
 8105540:	4808      	ldr	r0, [pc, #32]	@ (8105564 <low_level_init+0x250>)
 8105542:	f003 fff7 	bl	8109534 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8105546:	4807      	ldr	r0, [pc, #28]	@ (8105564 <low_level_init+0x250>)
 8105548:	f003 f978 	bl	810883c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 810554c:	6878      	ldr	r0, [r7, #4]
 810554e:	f010 f9ff 	bl	8115950 <netif_set_up>
    netif_set_link_up(netif);
 8105552:	6878      	ldr	r0, [r7, #4]
 8105554:	f010 fa9a 	bl	8115a8c <netif_set_link_up>
 8105558:	e001      	b.n	810555e <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 810555a:	f7fb fa2b 	bl	81009b4 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 810555e:	37a8      	adds	r7, #168	@ 0xa8
 8105560:	46bd      	mov	sp, r7
 8105562:	bd80      	pop	{r7, pc}
 8105564:	100002b4 	.word	0x100002b4
 8105568:	40028000 	.word	0x40028000
 810556c:	10040100 	.word	0x10040100
 8105570:	10040000 	.word	0x10040000
 8105574:	10000364 	.word	0x10000364
 8105578:	081224ac 	.word	0x081224ac
 810557c:	100002ac 	.word	0x100002ac
 8105580:	100002b0 	.word	0x100002b0
 8105584:	0811f424 	.word	0x0811f424
 8105588:	08105725 	.word	0x08105725
 810558c:	10000000 	.word	0x10000000
 8105590:	1000039c 	.word	0x1000039c

08105594 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8105594:	b580      	push	{r7, lr}
 8105596:	b092      	sub	sp, #72	@ 0x48
 8105598:	af00      	add	r7, sp, #0
 810559a:	6078      	str	r0, [r7, #4]
 810559c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 810559e:	2300      	movs	r3, #0
 81055a0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 81055a2:	2300      	movs	r3, #0
 81055a4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 81055a6:	2300      	movs	r3, #0
 81055a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 81055ac:	f107 030c 	add.w	r3, r7, #12
 81055b0:	2230      	movs	r2, #48	@ 0x30
 81055b2:	2100      	movs	r1, #0
 81055b4:	4618      	mov	r0, r3
 81055b6:	f018 fd51 	bl	811e05c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 81055ba:	f107 030c 	add.w	r3, r7, #12
 81055be:	2230      	movs	r2, #48	@ 0x30
 81055c0:	2100      	movs	r1, #0
 81055c2:	4618      	mov	r0, r3
 81055c4:	f018 fd4a 	bl	811e05c <memset>

  for(q = p; q != NULL; q = q->next)
 81055c8:	683b      	ldr	r3, [r7, #0]
 81055ca:	643b      	str	r3, [r7, #64]	@ 0x40
 81055cc:	e045      	b.n	810565a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 81055ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81055d0:	2b03      	cmp	r3, #3
 81055d2:	d902      	bls.n	81055da <low_level_output+0x46>
      return ERR_IF;
 81055d4:	f06f 030b 	mvn.w	r3, #11
 81055d8:	e07f      	b.n	81056da <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 81055da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81055dc:	6859      	ldr	r1, [r3, #4]
 81055de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81055e0:	4613      	mov	r3, r2
 81055e2:	005b      	lsls	r3, r3, #1
 81055e4:	4413      	add	r3, r2
 81055e6:	009b      	lsls	r3, r3, #2
 81055e8:	3348      	adds	r3, #72	@ 0x48
 81055ea:	443b      	add	r3, r7
 81055ec:	3b3c      	subs	r3, #60	@ 0x3c
 81055ee:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 81055f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81055f2:	895b      	ldrh	r3, [r3, #10]
 81055f4:	4619      	mov	r1, r3
 81055f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81055f8:	4613      	mov	r3, r2
 81055fa:	005b      	lsls	r3, r3, #1
 81055fc:	4413      	add	r3, r2
 81055fe:	009b      	lsls	r3, r3, #2
 8105600:	3348      	adds	r3, #72	@ 0x48
 8105602:	443b      	add	r3, r7
 8105604:	3b38      	subs	r3, #56	@ 0x38
 8105606:	6019      	str	r1, [r3, #0]

    if(i>0)
 8105608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810560a:	2b00      	cmp	r3, #0
 810560c:	d011      	beq.n	8105632 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 810560e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8105610:	1e5a      	subs	r2, r3, #1
 8105612:	f107 000c 	add.w	r0, r7, #12
 8105616:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8105618:	460b      	mov	r3, r1
 810561a:	005b      	lsls	r3, r3, #1
 810561c:	440b      	add	r3, r1
 810561e:	009b      	lsls	r3, r3, #2
 8105620:	18c1      	adds	r1, r0, r3
 8105622:	4613      	mov	r3, r2
 8105624:	005b      	lsls	r3, r3, #1
 8105626:	4413      	add	r3, r2
 8105628:	009b      	lsls	r3, r3, #2
 810562a:	3348      	adds	r3, #72	@ 0x48
 810562c:	443b      	add	r3, r7
 810562e:	3b34      	subs	r3, #52	@ 0x34
 8105630:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8105632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8105634:	681b      	ldr	r3, [r3, #0]
 8105636:	2b00      	cmp	r3, #0
 8105638:	d109      	bne.n	810564e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 810563a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810563c:	4613      	mov	r3, r2
 810563e:	005b      	lsls	r3, r3, #1
 8105640:	4413      	add	r3, r2
 8105642:	009b      	lsls	r3, r3, #2
 8105644:	3348      	adds	r3, #72	@ 0x48
 8105646:	443b      	add	r3, r7
 8105648:	3b34      	subs	r3, #52	@ 0x34
 810564a:	2200      	movs	r2, #0
 810564c:	601a      	str	r2, [r3, #0]
    }

    i++;
 810564e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8105650:	3301      	adds	r3, #1
 8105652:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8105654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	643b      	str	r3, [r7, #64]	@ 0x40
 810565a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810565c:	2b00      	cmp	r3, #0
 810565e:	d1b6      	bne.n	81055ce <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8105660:	683b      	ldr	r3, [r7, #0]
 8105662:	891b      	ldrh	r3, [r3, #8]
 8105664:	461a      	mov	r2, r3
 8105666:	4b1f      	ldr	r3, [pc, #124]	@ (81056e4 <low_level_output+0x150>)
 8105668:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 810566a:	4a1e      	ldr	r2, [pc, #120]	@ (81056e4 <low_level_output+0x150>)
 810566c:	f107 030c 	add.w	r3, r7, #12
 8105670:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8105672:	4a1c      	ldr	r2, [pc, #112]	@ (81056e4 <low_level_output+0x150>)
 8105674:	683b      	ldr	r3, [r7, #0]
 8105676:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8105678:	6838      	ldr	r0, [r7, #0]
 810567a:	f010 febf 	bl	81163fc <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 810567e:	4919      	ldr	r1, [pc, #100]	@ (81056e4 <low_level_output+0x150>)
 8105680:	4819      	ldr	r0, [pc, #100]	@ (81056e8 <low_level_output+0x154>)
 8105682:	f003 f9c8 	bl	8108a16 <HAL_ETH_Transmit_IT>
 8105686:	4603      	mov	r3, r0
 8105688:	2b00      	cmp	r3, #0
 810568a:	d103      	bne.n	8105694 <low_level_output+0x100>
    {
      errval = ERR_OK;
 810568c:	2300      	movs	r3, #0
 810568e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8105692:	e01b      	b.n	81056cc <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8105694:	4814      	ldr	r0, [pc, #80]	@ (81056e8 <low_level_output+0x154>)
 8105696:	f003 ffb7 	bl	8109608 <HAL_ETH_GetError>
 810569a:	4603      	mov	r3, r0
 810569c:	f003 0302 	and.w	r3, r3, #2
 81056a0:	2b00      	cmp	r3, #0
 81056a2:	d00d      	beq.n	81056c0 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 81056a4:	4b11      	ldr	r3, [pc, #68]	@ (81056ec <low_level_output+0x158>)
 81056a6:	681b      	ldr	r3, [r3, #0]
 81056a8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 81056ac:	4618      	mov	r0, r3
 81056ae:	f008 faab 	bl	810dc08 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 81056b2:	480d      	ldr	r0, [pc, #52]	@ (81056e8 <low_level_output+0x154>)
 81056b4:	f003 fb36 	bl	8108d24 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 81056b8:	23fe      	movs	r3, #254	@ 0xfe
 81056ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 81056be:	e005      	b.n	81056cc <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 81056c0:	6838      	ldr	r0, [r7, #0]
 81056c2:	f010 fdf5 	bl	81162b0 <pbuf_free>
        errval =  ERR_IF;
 81056c6:	23f4      	movs	r3, #244	@ 0xf4
 81056c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 81056cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 81056d0:	f113 0f02 	cmn.w	r3, #2
 81056d4:	d0d3      	beq.n	810567e <low_level_output+0xea>

  return errval;
 81056d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 81056da:	4618      	mov	r0, r3
 81056dc:	3748      	adds	r7, #72	@ 0x48
 81056de:	46bd      	mov	sp, r7
 81056e0:	bd80      	pop	{r7, pc}
 81056e2:	bf00      	nop
 81056e4:	10000364 	.word	0x10000364
 81056e8:	100002b4 	.word	0x100002b4
 81056ec:	100002b0 	.word	0x100002b0

081056f0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 81056f0:	b580      	push	{r7, lr}
 81056f2:	b084      	sub	sp, #16
 81056f4:	af00      	add	r7, sp, #0
 81056f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 81056f8:	2300      	movs	r3, #0
 81056fa:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 81056fc:	4b07      	ldr	r3, [pc, #28]	@ (810571c <low_level_input+0x2c>)
 81056fe:	781b      	ldrb	r3, [r3, #0]
 8105700:	2b00      	cmp	r3, #0
 8105702:	d105      	bne.n	8105710 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8105704:	f107 030c 	add.w	r3, r7, #12
 8105708:	4619      	mov	r1, r3
 810570a:	4805      	ldr	r0, [pc, #20]	@ (8105720 <low_level_input+0x30>)
 810570c:	f003 f9d4 	bl	8108ab8 <HAL_ETH_ReadData>
  }

  return p;
 8105710:	68fb      	ldr	r3, [r7, #12]
}
 8105712:	4618      	mov	r0, r3
 8105714:	3710      	adds	r7, #16
 8105716:	46bd      	mov	sp, r7
 8105718:	bd80      	pop	{r7, pc}
 810571a:	bf00      	nop
 810571c:	100002a8 	.word	0x100002a8
 8105720:	100002b4 	.word	0x100002b4

08105724 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8105724:	b580      	push	{r7, lr}
 8105726:	b084      	sub	sp, #16
 8105728:	af00      	add	r7, sp, #0
 810572a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 810572c:	2300      	movs	r3, #0
 810572e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8105730:	687b      	ldr	r3, [r7, #4]
 8105732:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8105734:	4b0f      	ldr	r3, [pc, #60]	@ (8105774 <ethernetif_input+0x50>)
 8105736:	681b      	ldr	r3, [r3, #0]
 8105738:	f04f 31ff 	mov.w	r1, #4294967295
 810573c:	4618      	mov	r0, r3
 810573e:	f008 fa63 	bl	810dc08 <osSemaphoreAcquire>
 8105742:	4603      	mov	r3, r0
 8105744:	2b00      	cmp	r3, #0
 8105746:	d1f5      	bne.n	8105734 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8105748:	68b8      	ldr	r0, [r7, #8]
 810574a:	f7ff ffd1 	bl	81056f0 <low_level_input>
 810574e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8105750:	68fb      	ldr	r3, [r7, #12]
 8105752:	2b00      	cmp	r3, #0
 8105754:	d00a      	beq.n	810576c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8105756:	68bb      	ldr	r3, [r7, #8]
 8105758:	691b      	ldr	r3, [r3, #16]
 810575a:	68b9      	ldr	r1, [r7, #8]
 810575c:	68f8      	ldr	r0, [r7, #12]
 810575e:	4798      	blx	r3
 8105760:	4603      	mov	r3, r0
 8105762:	2b00      	cmp	r3, #0
 8105764:	d002      	beq.n	810576c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8105766:	68f8      	ldr	r0, [r7, #12]
 8105768:	f010 fda2 	bl	81162b0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 810576c:	68fb      	ldr	r3, [r7, #12]
 810576e:	2b00      	cmp	r3, #0
 8105770:	d1ea      	bne.n	8105748 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8105772:	e7df      	b.n	8105734 <ethernetif_input+0x10>
 8105774:	100002ac 	.word	0x100002ac

08105778 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8105778:	b580      	push	{r7, lr}
 810577a:	b082      	sub	sp, #8
 810577c:	af00      	add	r7, sp, #0
 810577e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8105780:	687b      	ldr	r3, [r7, #4]
 8105782:	2b00      	cmp	r3, #0
 8105784:	d106      	bne.n	8105794 <ethernetif_init+0x1c>
 8105786:	4b0e      	ldr	r3, [pc, #56]	@ (81057c0 <ethernetif_init+0x48>)
 8105788:	f44f 7206 	mov.w	r2, #536	@ 0x218
 810578c:	490d      	ldr	r1, [pc, #52]	@ (81057c4 <ethernetif_init+0x4c>)
 810578e:	480e      	ldr	r0, [pc, #56]	@ (81057c8 <ethernetif_init+0x50>)
 8105790:	f018 fb24 	bl	811dddc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8105794:	687b      	ldr	r3, [r7, #4]
 8105796:	2273      	movs	r2, #115	@ 0x73
 8105798:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 810579c:	687b      	ldr	r3, [r7, #4]
 810579e:	2274      	movs	r2, #116	@ 0x74
 81057a0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 81057a4:	687b      	ldr	r3, [r7, #4]
 81057a6:	4a09      	ldr	r2, [pc, #36]	@ (81057cc <ethernetif_init+0x54>)
 81057a8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 81057aa:	687b      	ldr	r3, [r7, #4]
 81057ac:	4a08      	ldr	r2, [pc, #32]	@ (81057d0 <ethernetif_init+0x58>)
 81057ae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 81057b0:	6878      	ldr	r0, [r7, #4]
 81057b2:	f7ff fdaf 	bl	8105314 <low_level_init>

  return ERR_OK;
 81057b6:	2300      	movs	r3, #0
}
 81057b8:	4618      	mov	r0, r3
 81057ba:	3708      	adds	r7, #8
 81057bc:	46bd      	mov	sp, r7
 81057be:	bd80      	pop	{r7, pc}
 81057c0:	0811f42c 	.word	0x0811f42c
 81057c4:	0811f48c 	.word	0x0811f48c
 81057c8:	0811f49c 	.word	0x0811f49c
 81057cc:	0811288d 	.word	0x0811288d
 81057d0:	08105595 	.word	0x08105595

081057d4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 81057d4:	b580      	push	{r7, lr}
 81057d6:	b084      	sub	sp, #16
 81057d8:	af00      	add	r7, sp, #0
 81057da:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 81057dc:	687b      	ldr	r3, [r7, #4]
 81057de:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 81057e0:	68f9      	ldr	r1, [r7, #12]
 81057e2:	4809      	ldr	r0, [pc, #36]	@ (8105808 <pbuf_free_custom+0x34>)
 81057e4:	f00f fe9c 	bl	8115520 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 81057e8:	4b08      	ldr	r3, [pc, #32]	@ (810580c <pbuf_free_custom+0x38>)
 81057ea:	781b      	ldrb	r3, [r3, #0]
 81057ec:	2b01      	cmp	r3, #1
 81057ee:	d107      	bne.n	8105800 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 81057f0:	4b06      	ldr	r3, [pc, #24]	@ (810580c <pbuf_free_custom+0x38>)
 81057f2:	2200      	movs	r2, #0
 81057f4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 81057f6:	4b06      	ldr	r3, [pc, #24]	@ (8105810 <pbuf_free_custom+0x3c>)
 81057f8:	681b      	ldr	r3, [r3, #0]
 81057fa:	4618      	mov	r0, r3
 81057fc:	f008 fa56 	bl	810dcac <osSemaphoreRelease>
  }
}
 8105800:	bf00      	nop
 8105802:	3710      	adds	r7, #16
 8105804:	46bd      	mov	sp, r7
 8105806:	bd80      	pop	{r7, pc}
 8105808:	081224ac 	.word	0x081224ac
 810580c:	100002a8 	.word	0x100002a8
 8105810:	100002ac 	.word	0x100002ac

08105814 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8105814:	b580      	push	{r7, lr}
 8105816:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8105818:	f002 fdfe 	bl	8108418 <HAL_GetTick>
 810581c:	4603      	mov	r3, r0
}
 810581e:	4618      	mov	r0, r3
 8105820:	bd80      	pop	{r7, pc}
	...

08105824 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8105824:	b580      	push	{r7, lr}
 8105826:	b08e      	sub	sp, #56	@ 0x38
 8105828:	af00      	add	r7, sp, #0
 810582a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810582c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105830:	2200      	movs	r2, #0
 8105832:	601a      	str	r2, [r3, #0]
 8105834:	605a      	str	r2, [r3, #4]
 8105836:	609a      	str	r2, [r3, #8]
 8105838:	60da      	str	r2, [r3, #12]
 810583a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 810583c:	687b      	ldr	r3, [r7, #4]
 810583e:	681b      	ldr	r3, [r3, #0]
 8105840:	4a51      	ldr	r2, [pc, #324]	@ (8105988 <HAL_ETH_MspInit+0x164>)
 8105842:	4293      	cmp	r3, r2
 8105844:	f040 809b 	bne.w	810597e <HAL_ETH_MspInit+0x15a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8105848:	4b50      	ldr	r3, [pc, #320]	@ (810598c <HAL_ETH_MspInit+0x168>)
 810584a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810584e:	4a4f      	ldr	r2, [pc, #316]	@ (810598c <HAL_ETH_MspInit+0x168>)
 8105850:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8105854:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8105858:	4b4c      	ldr	r3, [pc, #304]	@ (810598c <HAL_ETH_MspInit+0x168>)
 810585a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810585e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8105862:	623b      	str	r3, [r7, #32]
 8105864:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8105866:	4b49      	ldr	r3, [pc, #292]	@ (810598c <HAL_ETH_MspInit+0x168>)
 8105868:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810586c:	4a47      	ldr	r2, [pc, #284]	@ (810598c <HAL_ETH_MspInit+0x168>)
 810586e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8105872:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8105876:	4b45      	ldr	r3, [pc, #276]	@ (810598c <HAL_ETH_MspInit+0x168>)
 8105878:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810587c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105880:	61fb      	str	r3, [r7, #28]
 8105882:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8105884:	4b41      	ldr	r3, [pc, #260]	@ (810598c <HAL_ETH_MspInit+0x168>)
 8105886:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810588a:	4a40      	ldr	r2, [pc, #256]	@ (810598c <HAL_ETH_MspInit+0x168>)
 810588c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105890:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8105894:	4b3d      	ldr	r3, [pc, #244]	@ (810598c <HAL_ETH_MspInit+0x168>)
 8105896:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810589a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810589e:	61bb      	str	r3, [r7, #24]
 81058a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 81058a2:	4b3a      	ldr	r3, [pc, #232]	@ (810598c <HAL_ETH_MspInit+0x168>)
 81058a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81058a8:	4a38      	ldr	r2, [pc, #224]	@ (810598c <HAL_ETH_MspInit+0x168>)
 81058aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81058ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81058b2:	4b36      	ldr	r3, [pc, #216]	@ (810598c <HAL_ETH_MspInit+0x168>)
 81058b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81058b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81058bc:	617b      	str	r3, [r7, #20]
 81058be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81058c0:	4b32      	ldr	r3, [pc, #200]	@ (810598c <HAL_ETH_MspInit+0x168>)
 81058c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81058c6:	4a31      	ldr	r2, [pc, #196]	@ (810598c <HAL_ETH_MspInit+0x168>)
 81058c8:	f043 0304 	orr.w	r3, r3, #4
 81058cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81058d0:	4b2e      	ldr	r3, [pc, #184]	@ (810598c <HAL_ETH_MspInit+0x168>)
 81058d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81058d6:	f003 0304 	and.w	r3, r3, #4
 81058da:	613b      	str	r3, [r7, #16]
 81058dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81058de:	4b2b      	ldr	r3, [pc, #172]	@ (810598c <HAL_ETH_MspInit+0x168>)
 81058e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81058e4:	4a29      	ldr	r2, [pc, #164]	@ (810598c <HAL_ETH_MspInit+0x168>)
 81058e6:	f043 0301 	orr.w	r3, r3, #1
 81058ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81058ee:	4b27      	ldr	r3, [pc, #156]	@ (810598c <HAL_ETH_MspInit+0x168>)
 81058f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81058f4:	f003 0301 	and.w	r3, r3, #1
 81058f8:	60fb      	str	r3, [r7, #12]
 81058fa:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 81058fc:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8105900:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8105902:	2302      	movs	r3, #2
 8105904:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8105906:	2300      	movs	r3, #0
 8105908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810590a:	2303      	movs	r3, #3
 810590c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810590e:	230b      	movs	r3, #11
 8105910:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8105912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105916:	4619      	mov	r1, r3
 8105918:	481d      	ldr	r0, [pc, #116]	@ (8105990 <HAL_ETH_MspInit+0x16c>)
 810591a:	f004 fc0f 	bl	810a13c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 810591e:	2332      	movs	r3, #50	@ 0x32
 8105920:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8105922:	2302      	movs	r3, #2
 8105924:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8105926:	2300      	movs	r3, #0
 8105928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810592a:	2303      	movs	r3, #3
 810592c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810592e:	230b      	movs	r3, #11
 8105930:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8105932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105936:	4619      	mov	r1, r3
 8105938:	4816      	ldr	r0, [pc, #88]	@ (8105994 <HAL_ETH_MspInit+0x170>)
 810593a:	f004 fbff 	bl	810a13c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 810593e:	2386      	movs	r3, #134	@ 0x86
 8105940:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8105942:	2302      	movs	r3, #2
 8105944:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8105946:	2300      	movs	r3, #0
 8105948:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810594a:	2303      	movs	r3, #3
 810594c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810594e:	230b      	movs	r3, #11
 8105950:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8105952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105956:	4619      	mov	r1, r3
 8105958:	480f      	ldr	r0, [pc, #60]	@ (8105998 <HAL_ETH_MspInit+0x174>)
 810595a:	f004 fbef 	bl	810a13c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 810595e:	2200      	movs	r2, #0
 8105960:	2105      	movs	r1, #5
 8105962:	203d      	movs	r0, #61	@ 0x3d
 8105964:	f002 fe30 	bl	81085c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8105968:	203d      	movs	r0, #61	@ 0x3d
 810596a:	f002 fe47 	bl	81085fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 6, 0);
 810596e:	2200      	movs	r2, #0
 8105970:	2106      	movs	r1, #6
 8105972:	203e      	movs	r0, #62	@ 0x3e
 8105974:	f002 fe28 	bl	81085c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8105978:	203e      	movs	r0, #62	@ 0x3e
 810597a:	f002 fe3f 	bl	81085fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 810597e:	bf00      	nop
 8105980:	3738      	adds	r7, #56	@ 0x38
 8105982:	46bd      	mov	sp, r7
 8105984:	bd80      	pop	{r7, pc}
 8105986:	bf00      	nop
 8105988:	40028000 	.word	0x40028000
 810598c:	58024400 	.word	0x58024400
 8105990:	58021800 	.word	0x58021800
 8105994:	58020800 	.word	0x58020800
 8105998:	58020000 	.word	0x58020000

0810599c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 810599c:	b580      	push	{r7, lr}
 810599e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 81059a0:	4802      	ldr	r0, [pc, #8]	@ (81059ac <ETH_PHY_IO_Init+0x10>)
 81059a2:	f003 fde1 	bl	8109568 <HAL_ETH_SetMDIOClockRange>

  return 0;
 81059a6:	2300      	movs	r3, #0
}
 81059a8:	4618      	mov	r0, r3
 81059aa:	bd80      	pop	{r7, pc}
 81059ac:	100002b4 	.word	0x100002b4

081059b0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 81059b0:	b480      	push	{r7}
 81059b2:	af00      	add	r7, sp, #0
  return 0;
 81059b4:	2300      	movs	r3, #0
}
 81059b6:	4618      	mov	r0, r3
 81059b8:	46bd      	mov	sp, r7
 81059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059be:	4770      	bx	lr

081059c0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 81059c0:	b580      	push	{r7, lr}
 81059c2:	b084      	sub	sp, #16
 81059c4:	af00      	add	r7, sp, #0
 81059c6:	60f8      	str	r0, [r7, #12]
 81059c8:	60b9      	str	r1, [r7, #8]
 81059ca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 81059cc:	687b      	ldr	r3, [r7, #4]
 81059ce:	68ba      	ldr	r2, [r7, #8]
 81059d0:	68f9      	ldr	r1, [r7, #12]
 81059d2:	4807      	ldr	r0, [pc, #28]	@ (81059f0 <ETH_PHY_IO_ReadReg+0x30>)
 81059d4:	f003 fb32 	bl	810903c <HAL_ETH_ReadPHYRegister>
 81059d8:	4603      	mov	r3, r0
 81059da:	2b00      	cmp	r3, #0
 81059dc:	d002      	beq.n	81059e4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 81059de:	f04f 33ff 	mov.w	r3, #4294967295
 81059e2:	e000      	b.n	81059e6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 81059e4:	2300      	movs	r3, #0
}
 81059e6:	4618      	mov	r0, r3
 81059e8:	3710      	adds	r7, #16
 81059ea:	46bd      	mov	sp, r7
 81059ec:	bd80      	pop	{r7, pc}
 81059ee:	bf00      	nop
 81059f0:	100002b4 	.word	0x100002b4

081059f4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 81059f4:	b580      	push	{r7, lr}
 81059f6:	b084      	sub	sp, #16
 81059f8:	af00      	add	r7, sp, #0
 81059fa:	60f8      	str	r0, [r7, #12]
 81059fc:	60b9      	str	r1, [r7, #8]
 81059fe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8105a00:	687b      	ldr	r3, [r7, #4]
 8105a02:	68ba      	ldr	r2, [r7, #8]
 8105a04:	68f9      	ldr	r1, [r7, #12]
 8105a06:	4807      	ldr	r0, [pc, #28]	@ (8105a24 <ETH_PHY_IO_WriteReg+0x30>)
 8105a08:	f003 fb6c 	bl	81090e4 <HAL_ETH_WritePHYRegister>
 8105a0c:	4603      	mov	r3, r0
 8105a0e:	2b00      	cmp	r3, #0
 8105a10:	d002      	beq.n	8105a18 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8105a12:	f04f 33ff 	mov.w	r3, #4294967295
 8105a16:	e000      	b.n	8105a1a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8105a18:	2300      	movs	r3, #0
}
 8105a1a:	4618      	mov	r0, r3
 8105a1c:	3710      	adds	r7, #16
 8105a1e:	46bd      	mov	sp, r7
 8105a20:	bd80      	pop	{r7, pc}
 8105a22:	bf00      	nop
 8105a24:	100002b4 	.word	0x100002b4

08105a28 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8105a28:	b580      	push	{r7, lr}
 8105a2a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8105a2c:	f002 fcf4 	bl	8108418 <HAL_GetTick>
 8105a30:	4603      	mov	r3, r0
}
 8105a32:	4618      	mov	r0, r3
 8105a34:	bd80      	pop	{r7, pc}
	...

08105a38 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8105a38:	b580      	push	{r7, lr}
 8105a3a:	b0a0      	sub	sp, #128	@ 0x80
 8105a3c:	af00      	add	r7, sp, #0
 8105a3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8105a40:	f107 0308 	add.w	r3, r7, #8
 8105a44:	2264      	movs	r2, #100	@ 0x64
 8105a46:	2100      	movs	r1, #0
 8105a48:	4618      	mov	r0, r3
 8105a4a:	f018 fb07 	bl	811e05c <memset>
  int32_t PHYLinkState = 0;
 8105a4e:	2300      	movs	r3, #0
 8105a50:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8105a52:	2300      	movs	r3, #0
 8105a54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8105a56:	2300      	movs	r3, #0
 8105a58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8105a5a:	2300      	movs	r3, #0
 8105a5c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8105a5e:	687b      	ldr	r3, [r7, #4]
 8105a60:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8105a62:	483a      	ldr	r0, [pc, #232]	@ (8105b4c <ethernet_link_thread+0x114>)
 8105a64:	f002 fbc2 	bl	81081ec <LAN8742_GetLinkState>
 8105a68:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8105a6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105a6c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8105a70:	089b      	lsrs	r3, r3, #2
 8105a72:	f003 0301 	and.w	r3, r3, #1
 8105a76:	b2db      	uxtb	r3, r3
 8105a78:	2b00      	cmp	r3, #0
 8105a7a:	d00c      	beq.n	8105a96 <ethernet_link_thread+0x5e>
 8105a7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8105a7e:	2b01      	cmp	r3, #1
 8105a80:	dc09      	bgt.n	8105a96 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8105a82:	4833      	ldr	r0, [pc, #204]	@ (8105b50 <ethernet_link_thread+0x118>)
 8105a84:	f002 ff4f 	bl	8108926 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8105a88:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8105a8a:	f00f ffcd 	bl	8115a28 <netif_set_down>
    netif_set_link_down(netif);
 8105a8e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8105a90:	f010 f830 	bl	8115af4 <netif_set_link_down>
 8105a94:	e055      	b.n	8105b42 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8105a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8105a98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8105a9c:	f003 0304 	and.w	r3, r3, #4
 8105aa0:	2b00      	cmp	r3, #0
 8105aa2:	d14e      	bne.n	8105b42 <ethernet_link_thread+0x10a>
 8105aa4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8105aa6:	2b01      	cmp	r3, #1
 8105aa8:	dd4b      	ble.n	8105b42 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8105aaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8105aac:	3b02      	subs	r3, #2
 8105aae:	2b03      	cmp	r3, #3
 8105ab0:	d82a      	bhi.n	8105b08 <ethernet_link_thread+0xd0>
 8105ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8105ab8 <ethernet_link_thread+0x80>)
 8105ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105ab8:	08105ac9 	.word	0x08105ac9
 8105abc:	08105adb 	.word	0x08105adb
 8105ac0:	08105aeb 	.word	0x08105aeb
 8105ac4:	08105afb 	.word	0x08105afb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8105ac8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8105acc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8105ace:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8105ad2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8105ad4:	2301      	movs	r3, #1
 8105ad6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8105ad8:	e017      	b.n	8105b0a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8105ada:	2300      	movs	r3, #0
 8105adc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8105ade:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8105ae2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8105ae4:	2301      	movs	r3, #1
 8105ae6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8105ae8:	e00f      	b.n	8105b0a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8105aea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8105aee:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8105af0:	2300      	movs	r3, #0
 8105af2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8105af4:	2301      	movs	r3, #1
 8105af6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8105af8:	e007      	b.n	8105b0a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8105afa:	2300      	movs	r3, #0
 8105afc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8105afe:	2300      	movs	r3, #0
 8105b00:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8105b02:	2301      	movs	r3, #1
 8105b04:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8105b06:	e000      	b.n	8105b0a <ethernet_link_thread+0xd2>
    default:
      break;
 8105b08:	bf00      	nop
    }

    if(linkchanged)
 8105b0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8105b0c:	2b00      	cmp	r3, #0
 8105b0e:	d018      	beq.n	8105b42 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8105b10:	f107 0308 	add.w	r3, r7, #8
 8105b14:	4619      	mov	r1, r3
 8105b16:	480e      	ldr	r0, [pc, #56]	@ (8105b50 <ethernet_link_thread+0x118>)
 8105b18:	f003 fb38 	bl	810918c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8105b1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8105b1e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8105b20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8105b22:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8105b24:	f107 0308 	add.w	r3, r7, #8
 8105b28:	4619      	mov	r1, r3
 8105b2a:	4809      	ldr	r0, [pc, #36]	@ (8105b50 <ethernet_link_thread+0x118>)
 8105b2c:	f003 fd02 	bl	8109534 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8105b30:	4807      	ldr	r0, [pc, #28]	@ (8105b50 <ethernet_link_thread+0x118>)
 8105b32:	f002 fe83 	bl	810883c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8105b36:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8105b38:	f00f ff0a 	bl	8115950 <netif_set_up>
      netif_set_link_up(netif);
 8105b3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8105b3e:	f00f ffa5 	bl	8115a8c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8105b42:	2064      	movs	r0, #100	@ 0x64
 8105b44:	f007 fead 	bl	810d8a2 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8105b48:	e78b      	b.n	8105a62 <ethernet_link_thread+0x2a>
 8105b4a:	bf00      	nop
 8105b4c:	1000039c 	.word	0x1000039c
 8105b50:	100002b4 	.word	0x100002b4

08105b54 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8105b54:	b580      	push	{r7, lr}
 8105b56:	b086      	sub	sp, #24
 8105b58:	af02      	add	r7, sp, #8
 8105b5a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8105b5c:	4812      	ldr	r0, [pc, #72]	@ (8105ba8 <HAL_ETH_RxAllocateCallback+0x54>)
 8105b5e:	f00f fc6b 	bl	8115438 <memp_malloc_pool>
 8105b62:	60f8      	str	r0, [r7, #12]
  if (p)
 8105b64:	68fb      	ldr	r3, [r7, #12]
 8105b66:	2b00      	cmp	r3, #0
 8105b68:	d014      	beq.n	8105b94 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8105b6a:	68fb      	ldr	r3, [r7, #12]
 8105b6c:	f103 0220 	add.w	r2, r3, #32
 8105b70:	687b      	ldr	r3, [r7, #4]
 8105b72:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8105b74:	68fb      	ldr	r3, [r7, #12]
 8105b76:	4a0d      	ldr	r2, [pc, #52]	@ (8105bac <HAL_ETH_RxAllocateCallback+0x58>)
 8105b78:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8105b7a:	687b      	ldr	r3, [r7, #4]
 8105b7c:	681b      	ldr	r3, [r3, #0]
 8105b7e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8105b82:	9201      	str	r2, [sp, #4]
 8105b84:	9300      	str	r3, [sp, #0]
 8105b86:	68fb      	ldr	r3, [r7, #12]
 8105b88:	2241      	movs	r2, #65	@ 0x41
 8105b8a:	2100      	movs	r1, #0
 8105b8c:	2000      	movs	r0, #0
 8105b8e:	f010 f9d7 	bl	8115f40 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8105b92:	e005      	b.n	8105ba0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8105b94:	4b06      	ldr	r3, [pc, #24]	@ (8105bb0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8105b96:	2201      	movs	r2, #1
 8105b98:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8105b9a:	687b      	ldr	r3, [r7, #4]
 8105b9c:	2200      	movs	r2, #0
 8105b9e:	601a      	str	r2, [r3, #0]
}
 8105ba0:	bf00      	nop
 8105ba2:	3710      	adds	r7, #16
 8105ba4:	46bd      	mov	sp, r7
 8105ba6:	bd80      	pop	{r7, pc}
 8105ba8:	081224ac 	.word	0x081224ac
 8105bac:	081057d5 	.word	0x081057d5
 8105bb0:	100002a8 	.word	0x100002a8

08105bb4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8105bb4:	b480      	push	{r7}
 8105bb6:	b089      	sub	sp, #36	@ 0x24
 8105bb8:	af00      	add	r7, sp, #0
 8105bba:	60f8      	str	r0, [r7, #12]
 8105bbc:	60b9      	str	r1, [r7, #8]
 8105bbe:	607a      	str	r2, [r7, #4]
 8105bc0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8105bc2:	68fb      	ldr	r3, [r7, #12]
 8105bc4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8105bc6:	68bb      	ldr	r3, [r7, #8]
 8105bc8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8105bca:	2300      	movs	r3, #0
 8105bcc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8105bce:	687b      	ldr	r3, [r7, #4]
 8105bd0:	3b20      	subs	r3, #32
 8105bd2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8105bd4:	69fb      	ldr	r3, [r7, #28]
 8105bd6:	2200      	movs	r2, #0
 8105bd8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8105bda:	69fb      	ldr	r3, [r7, #28]
 8105bdc:	2200      	movs	r2, #0
 8105bde:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8105be0:	69fb      	ldr	r3, [r7, #28]
 8105be2:	887a      	ldrh	r2, [r7, #2]
 8105be4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8105be6:	69bb      	ldr	r3, [r7, #24]
 8105be8:	681b      	ldr	r3, [r3, #0]
 8105bea:	2b00      	cmp	r3, #0
 8105bec:	d103      	bne.n	8105bf6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8105bee:	69bb      	ldr	r3, [r7, #24]
 8105bf0:	69fa      	ldr	r2, [r7, #28]
 8105bf2:	601a      	str	r2, [r3, #0]
 8105bf4:	e003      	b.n	8105bfe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8105bf6:	697b      	ldr	r3, [r7, #20]
 8105bf8:	681b      	ldr	r3, [r3, #0]
 8105bfa:	69fa      	ldr	r2, [r7, #28]
 8105bfc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8105bfe:	697b      	ldr	r3, [r7, #20]
 8105c00:	69fa      	ldr	r2, [r7, #28]
 8105c02:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8105c04:	69bb      	ldr	r3, [r7, #24]
 8105c06:	681b      	ldr	r3, [r3, #0]
 8105c08:	61fb      	str	r3, [r7, #28]
 8105c0a:	e009      	b.n	8105c20 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8105c0c:	69fb      	ldr	r3, [r7, #28]
 8105c0e:	891a      	ldrh	r2, [r3, #8]
 8105c10:	887b      	ldrh	r3, [r7, #2]
 8105c12:	4413      	add	r3, r2
 8105c14:	b29a      	uxth	r2, r3
 8105c16:	69fb      	ldr	r3, [r7, #28]
 8105c18:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8105c1a:	69fb      	ldr	r3, [r7, #28]
 8105c1c:	681b      	ldr	r3, [r3, #0]
 8105c1e:	61fb      	str	r3, [r7, #28]
 8105c20:	69fb      	ldr	r3, [r7, #28]
 8105c22:	2b00      	cmp	r3, #0
 8105c24:	d1f2      	bne.n	8105c0c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8105c26:	bf00      	nop
 8105c28:	bf00      	nop
 8105c2a:	3724      	adds	r7, #36	@ 0x24
 8105c2c:	46bd      	mov	sp, r7
 8105c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c32:	4770      	bx	lr

08105c34 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8105c34:	b580      	push	{r7, lr}
 8105c36:	b082      	sub	sp, #8
 8105c38:	af00      	add	r7, sp, #0
 8105c3a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8105c3c:	6878      	ldr	r0, [r7, #4]
 8105c3e:	f010 fb37 	bl	81162b0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8105c42:	bf00      	nop
 8105c44:	3708      	adds	r7, #8
 8105c46:	46bd      	mov	sp, r7
 8105c48:	bd80      	pop	{r7, pc}
	...

08105c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8105c4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8105c84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8105c50:	f002 fb54 	bl	81082fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8105c54:	480c      	ldr	r0, [pc, #48]	@ (8105c88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8105c56:	490d      	ldr	r1, [pc, #52]	@ (8105c8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8105c58:	4a0d      	ldr	r2, [pc, #52]	@ (8105c90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8105c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8105c5c:	e002      	b.n	8105c64 <LoopCopyDataInit>

08105c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8105c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8105c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8105c62:	3304      	adds	r3, #4

08105c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8105c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8105c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8105c68:	d3f9      	bcc.n	8105c5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8105c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8105c94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8105c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8105c98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8105c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8105c70:	e001      	b.n	8105c76 <LoopFillZerobss>

08105c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8105c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8105c74:	3204      	adds	r2, #4

08105c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8105c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8105c78:	d3fb      	bcc.n	8105c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8105c7a:	f018 fb17 	bl	811e2ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8105c7e:	f7fa fd0d 	bl	810069c <main>
  bx  lr
 8105c82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8105c84:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8105c88:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8105c8c:	10000090 	.word	0x10000090
  ldr r2, =_sidata
 8105c90:	081227fc 	.word	0x081227fc
  ldr r2, =_sbss
 8105c94:	10000090 	.word	0x10000090
  ldr r4, =_ebss
 8105c98:	100122e8 	.word	0x100122e8

08105c9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8105c9c:	e7fe      	b.n	8105c9c <ADC3_IRQHandler>

08105c9e <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 8105c9e:	b480      	push	{r7}
 8105ca0:	af00      	add	r7, sp, #0
 8105ca2:	bf00      	nop
 8105ca4:	4618      	mov	r0, r3
 8105ca6:	46bd      	mov	sp, r7
 8105ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cac:	4770      	bx	lr

08105cae <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>:
    _Iter_less_val() { }
#endif

    _GLIBCXX20_CONSTEXPR
    explicit
    _Iter_less_val(_Iter_less_iter) { }
 8105cae:	b480      	push	{r7}
 8105cb0:	b083      	sub	sp, #12
 8105cb2:	af00      	add	r7, sp, #0
 8105cb4:	6078      	str	r0, [r7, #4]
 8105cb6:	7039      	strb	r1, [r7, #0]
 8105cb8:	687b      	ldr	r3, [r7, #4]
 8105cba:	4618      	mov	r0, r3
 8105cbc:	370c      	adds	r7, #12
 8105cbe:	46bd      	mov	sp, r7
 8105cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cc4:	4770      	bx	lr

08105cc6 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8105cc6:	b480      	push	{r7}
 8105cc8:	b083      	sub	sp, #12
 8105cca:	af00      	add	r7, sp, #0
 8105ccc:	7138      	strb	r0, [r7, #4]
 8105cce:	bf00      	nop
 8105cd0:	4618      	mov	r0, r3
 8105cd2:	370c      	adds	r7, #12
 8105cd4:	46bd      	mov	sp, r7
 8105cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cda:	4770      	bx	lr

08105cdc <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8105cdc:	b480      	push	{r7}
 8105cde:	b083      	sub	sp, #12
 8105ce0:	af00      	add	r7, sp, #0
 8105ce2:	6078      	str	r0, [r7, #4]
 8105ce4:	687b      	ldr	r3, [r7, #4]
 8105ce6:	fab3 f383 	clz	r3, r3
 8105cea:	f1c3 031f 	rsb	r3, r3, #31
 8105cee:	4618      	mov	r0, r3
 8105cf0:	370c      	adds	r7, #12
 8105cf2:	46bd      	mov	sp, r7
 8105cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cf8:	4770      	bx	lr

08105cfa <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8105cfa:	b580      	push	{r7, lr}
 8105cfc:	b082      	sub	sp, #8
 8105cfe:	af00      	add	r7, sp, #0
 8105d00:	ed87 0a01 	vstr	s0, [r7, #4]
 8105d04:	ed97 0a01 	vldr	s0, [r7, #4]
 8105d08:	f017 fa0e 	bl	811d128 <roundf>
 8105d0c:	eef0 7a40 	vmov.f32	s15, s0
 8105d10:	eeb0 0a67 	vmov.f32	s0, s15
 8105d14:	3708      	adds	r7, #8
 8105d16:	46bd      	mov	sp, r7
 8105d18:	bd80      	pop	{r7, pc}
	...

08105d1c <_ZNSt14numeric_limitsIsE3minEv>:
    struct numeric_limits<short>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR short
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8105d1c:	b480      	push	{r7}
 8105d1e:	af00      	add	r7, sp, #0
 8105d20:	4b02      	ldr	r3, [pc, #8]	@ (8105d2c <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8105d22:	4618      	mov	r0, r3
 8105d24:	46bd      	mov	sp, r7
 8105d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d2a:	4770      	bx	lr
 8105d2c:	ffff8000 	.word	0xffff8000

08105d30 <_Z15StartTask_CTempPv>:
constexpr uint16_t MCP9808_I2C_ADDRESS 	= 0x18 << 1;  // MCP9808 address (shift for HAL I2C)
constexpr uint8_t  MCP9808_TEMP_REG    	= 0x05;       // Temperature register


void StartTask_CTemp(void *argument)
{
 8105d30:	b580      	push	{r7, lr}
 8105d32:	b088      	sub	sp, #32
 8105d34:	af00      	add	r7, sp, #0
 8105d36:	6078      	str	r0, [r7, #4]
	TemperatureTask TemperatureTaskInstance;
 8105d38:	f107 0308 	add.w	r3, r7, #8
 8105d3c:	4618      	mov	r0, r3
 8105d3e:	f000 f831 	bl	8105da4 <_ZN15TemperatureTaskC1Ev>

    for (;;)
    {
    	TemperatureTaskInstance.process();
 8105d42:	f107 0308 	add.w	r3, r7, #8
 8105d46:	4618      	mov	r0, r3
 8105d48:	f000 f848 	bl	8105ddc <_ZN15TemperatureTask7processEv>
    	osDelay(2000);
 8105d4c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8105d50:	f007 fda7 	bl	810d8a2 <osDelay>
    	TemperatureTaskInstance.process();
 8105d54:	bf00      	nop
 8105d56:	e7f4      	b.n	8105d42 <_Z15StartTask_CTempPv+0x12>

08105d58 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8105d58:	b580      	push	{r7, lr}
 8105d5a:	b082      	sub	sp, #8
 8105d5c:	af00      	add	r7, sp, #0
 8105d5e:	6078      	str	r0, [r7, #4]
 8105d60:	6878      	ldr	r0, [r7, #4]
 8105d62:	f000 f9d4 	bl	810610e <_ZNSaIfED1Ev>
 8105d66:	687b      	ldr	r3, [r7, #4]
 8105d68:	4618      	mov	r0, r3
 8105d6a:	3708      	adds	r7, #8
 8105d6c:	46bd      	mov	sp, r7
 8105d6e:	bd80      	pop	{r7, pc}

08105d70 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base() = default;
 8105d70:	b580      	push	{r7, lr}
 8105d72:	b082      	sub	sp, #8
 8105d74:	af00      	add	r7, sp, #0
 8105d76:	6078      	str	r0, [r7, #4]
 8105d78:	687b      	ldr	r3, [r7, #4]
 8105d7a:	4618      	mov	r0, r3
 8105d7c:	f000 f9b7 	bl	81060ee <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8105d80:	687b      	ldr	r3, [r7, #4]
 8105d82:	4618      	mov	r0, r3
 8105d84:	3708      	adds	r7, #8
 8105d86:	46bd      	mov	sp, r7
 8105d88:	bd80      	pop	{r7, pc}

08105d8a <_ZNSt6vectorIfSaIfEEC1Ev>:
      vector() = default;
 8105d8a:	b580      	push	{r7, lr}
 8105d8c:	b082      	sub	sp, #8
 8105d8e:	af00      	add	r7, sp, #0
 8105d90:	6078      	str	r0, [r7, #4]
 8105d92:	687b      	ldr	r3, [r7, #4]
 8105d94:	4618      	mov	r0, r3
 8105d96:	f7ff ffeb 	bl	8105d70 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8105d9a:	687b      	ldr	r3, [r7, #4]
 8105d9c:	4618      	mov	r0, r3
 8105d9e:	3708      	adds	r7, #8
 8105da0:	46bd      	mov	sp, r7
 8105da2:	bd80      	pop	{r7, pc}

08105da4 <_ZN15TemperatureTaskC1Ev>:
    }
}

TemperatureTask::TemperatureTask() : event_bus(EventBus(queueToTemperature, EVENT_CLIENT_THERMOMETER))
 8105da4:	b580      	push	{r7, lr}
 8105da6:	b082      	sub	sp, #8
 8105da8:	af00      	add	r7, sp, #0
 8105daa:	6078      	str	r0, [r7, #4]
 8105dac:	687b      	ldr	r3, [r7, #4]
 8105dae:	4618      	mov	r0, r3
 8105db0:	f7ff ffeb 	bl	8105d8a <_ZNSt6vectorIfSaIfEEC1Ev>
 8105db4:	687b      	ldr	r3, [r7, #4]
 8105db6:	330c      	adds	r3, #12
 8105db8:	4a07      	ldr	r2, [pc, #28]	@ (8105dd8 <_ZN15TemperatureTaskC1Ev+0x34>)
 8105dba:	6811      	ldr	r1, [r2, #0]
 8105dbc:	2204      	movs	r2, #4
 8105dbe:	4618      	mov	r0, r3
 8105dc0:	f7fc fa56 	bl	8102270 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
{
	measurements.reserve(MEASUREMENTS_COUNT);
 8105dc4:	687b      	ldr	r3, [r7, #4]
 8105dc6:	2106      	movs	r1, #6
 8105dc8:	4618      	mov	r0, r3
 8105dca:	f000 f9db 	bl	8106184 <_ZNSt6vectorIfSaIfEE7reserveEj>
}
 8105dce:	687b      	ldr	r3, [r7, #4]
 8105dd0:	4618      	mov	r0, r3
 8105dd2:	3708      	adds	r7, #8
 8105dd4:	46bd      	mov	sp, r7
 8105dd6:	bd80      	pop	{r7, pc}
 8105dd8:	100001bc 	.word	0x100001bc

08105ddc <_ZN15TemperatureTask7processEv>:

void TemperatureTask::process()
{
 8105ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8105dde:	b08f      	sub	sp, #60	@ 0x3c
 8105de0:	af04      	add	r7, sp, #16
 8105de2:	6078      	str	r0, [r7, #4]
	uint32_t err = doMeasurement();
 8105de4:	6878      	ldr	r0, [r7, #4]
 8105de6:	f000 f8b3 	bl	8105f50 <_ZN15TemperatureTask13doMeasurementEv>
 8105dea:	6278      	str	r0, [r7, #36]	@ 0x24
	if( err != HAL_I2C_ERROR_NONE)
 8105dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105dee:	2b00      	cmp	r3, #0
 8105df0:	d12f      	bne.n	8105e52 <_ZN15TemperatureTask7processEv+0x76>
	{
		return;
	}
	short int measurement = getMedian();
 8105df2:	6878      	ldr	r0, [r7, #4]
 8105df4:	f000 f833 	bl	8105e5e <_ZN15TemperatureTask9getMedianEv>
 8105df8:	4603      	mov	r3, r0
 8105dfa:	847b      	strh	r3, [r7, #34]	@ 0x22
	if(measurement == std::numeric_limits<short int>::min())
 8105dfc:	f7ff ff8e 	bl	8105d1c <_ZNSt14numeric_limitsIsE3minEv>
 8105e00:	4603      	mov	r3, r0
 8105e02:	461a      	mov	r2, r3
 8105e04:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8105e08:	4293      	cmp	r3, r2
 8105e0a:	bf0c      	ite	eq
 8105e0c:	2301      	moveq	r3, #1
 8105e0e:	2300      	movne	r3, #0
 8105e10:	b2db      	uxtb	r3, r3
 8105e12:	2b00      	cmp	r3, #0
 8105e14:	d11f      	bne.n	8105e56 <_ZN15TemperatureTask7processEv+0x7a>
	{
		return;
	}
	EEventClient receiver = EVENT_CLIENT_FRONTEND;
 8105e16:	2300      	movs	r3, #0
 8105e18:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	EEventType event = EVENT_UPDATE_ROOM_TEMPERATURE;
 8105e1c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8105e20:	83fb      	strh	r3, [r7, #30]
	UMessageData data;
	data.room_temperature = measurement;
 8105e22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8105e24:	813b      	strh	r3, [r7, #8]
	event_bus.send(event, data, receiver);
 8105e26:	687b      	ldr	r3, [r7, #4]
 8105e28:	f103 050c 	add.w	r5, r3, #12
 8105e2c:	8bfe      	ldrh	r6, [r7, #30]
 8105e2e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8105e32:	9303      	str	r3, [sp, #12]
 8105e34:	466c      	mov	r4, sp
 8105e36:	f107 0310 	add.w	r3, r7, #16
 8105e3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8105e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8105e42:	f107 0308 	add.w	r3, r7, #8
 8105e46:	cb0c      	ldmia	r3, {r2, r3}
 8105e48:	4631      	mov	r1, r6
 8105e4a:	4628      	mov	r0, r5
 8105e4c:	f7fc fa2a 	bl	81022a4 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
 8105e50:	e002      	b.n	8105e58 <_ZN15TemperatureTask7processEv+0x7c>
		return;
 8105e52:	bf00      	nop
 8105e54:	e000      	b.n	8105e58 <_ZN15TemperatureTask7processEv+0x7c>
		return;
 8105e56:	bf00      	nop
}
 8105e58:	372c      	adds	r7, #44	@ 0x2c
 8105e5a:	46bd      	mov	sp, r7
 8105e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08105e5e <_ZN15TemperatureTask9getMedianEv>:

short int TemperatureTask::getMedian()
{
 8105e5e:	b590      	push	{r4, r7, lr}
 8105e60:	ed2d 8b02 	vpush	{d8}
 8105e64:	b089      	sub	sp, #36	@ 0x24
 8105e66:	af00      	add	r7, sp, #0
 8105e68:	6078      	str	r0, [r7, #4]
	short int median = std::numeric_limits<short>::min();
 8105e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8105e6e:	83fb      	strh	r3, [r7, #30]
	size_t currMesSize = measurements.size();
 8105e70:	687b      	ldr	r3, [r7, #4]
 8105e72:	4618      	mov	r0, r3
 8105e74:	f000 fa06 	bl	8106284 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8105e78:	61b8      	str	r0, [r7, #24]

	if(currMesSize > 0)
 8105e7a:	69bb      	ldr	r3, [r7, #24]
 8105e7c:	2b00      	cmp	r3, #0
 8105e7e:	d05f      	beq.n	8105f40 <_ZN15TemperatureTask9getMedianEv+0xe2>
	{
		std::vector<float> sortedCopy = measurements;
 8105e80:	687a      	ldr	r2, [r7, #4]
 8105e82:	f107 030c 	add.w	r3, r7, #12
 8105e86:	4611      	mov	r1, r2
 8105e88:	4618      	mov	r0, r3
 8105e8a:	f000 fa0b 	bl	81062a4 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
		std::sort(sortedCopy.begin(), sortedCopy.end());
 8105e8e:	f107 030c 	add.w	r3, r7, #12
 8105e92:	4618      	mov	r0, r3
 8105e94:	f000 fa43 	bl	810631e <_ZNSt6vectorIfSaIfEE5beginEv>
 8105e98:	4604      	mov	r4, r0
 8105e9a:	f107 030c 	add.w	r3, r7, #12
 8105e9e:	4618      	mov	r0, r3
 8105ea0:	f000 fa4d 	bl	810633e <_ZNSt6vectorIfSaIfEE3endEv>
 8105ea4:	4603      	mov	r3, r0
 8105ea6:	4619      	mov	r1, r3
 8105ea8:	4620      	mov	r0, r4
 8105eaa:	f000 fa59 	bl	8106360 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

		if(currMesSize % 2 == 0)
 8105eae:	69bb      	ldr	r3, [r7, #24]
 8105eb0:	f003 0301 	and.w	r3, r3, #1
 8105eb4:	2b00      	cmp	r3, #0
 8105eb6:	d128      	bne.n	8105f0a <_ZN15TemperatureTask9getMedianEv+0xac>
		{
			median = static_cast<short int>(std::round((sortedCopy[currMesSize / 2 - 1] + sortedCopy[currMesSize / 2]) / 2));
 8105eb8:	69bb      	ldr	r3, [r7, #24]
 8105eba:	085b      	lsrs	r3, r3, #1
 8105ebc:	1e5a      	subs	r2, r3, #1
 8105ebe:	f107 030c 	add.w	r3, r7, #12
 8105ec2:	4611      	mov	r1, r2
 8105ec4:	4618      	mov	r0, r3
 8105ec6:	f000 fa5b 	bl	8106380 <_ZNSt6vectorIfSaIfEEixEj>
 8105eca:	4603      	mov	r3, r0
 8105ecc:	ed93 8a00 	vldr	s16, [r3]
 8105ed0:	69bb      	ldr	r3, [r7, #24]
 8105ed2:	085a      	lsrs	r2, r3, #1
 8105ed4:	f107 030c 	add.w	r3, r7, #12
 8105ed8:	4611      	mov	r1, r2
 8105eda:	4618      	mov	r0, r3
 8105edc:	f000 fa50 	bl	8106380 <_ZNSt6vectorIfSaIfEEixEj>
 8105ee0:	4603      	mov	r3, r0
 8105ee2:	edd3 7a00 	vldr	s15, [r3]
 8105ee6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8105eea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8105eee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8105ef2:	eeb0 0a47 	vmov.f32	s0, s14
 8105ef6:	f7ff ff00 	bl	8105cfa <_ZSt5roundf>
 8105efa:	eef0 7a40 	vmov.f32	s15, s0
 8105efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8105f02:	ee17 3a90 	vmov	r3, s15
 8105f06:	83fb      	strh	r3, [r7, #30]
 8105f08:	e015      	b.n	8105f36 <_ZN15TemperatureTask9getMedianEv+0xd8>
		}
		else
		{
			median = static_cast<short int>(std::round(sortedCopy[currMesSize / 2]));
 8105f0a:	69bb      	ldr	r3, [r7, #24]
 8105f0c:	085a      	lsrs	r2, r3, #1
 8105f0e:	f107 030c 	add.w	r3, r7, #12
 8105f12:	4611      	mov	r1, r2
 8105f14:	4618      	mov	r0, r3
 8105f16:	f000 fa33 	bl	8106380 <_ZNSt6vectorIfSaIfEEixEj>
 8105f1a:	4603      	mov	r3, r0
 8105f1c:	edd3 7a00 	vldr	s15, [r3]
 8105f20:	eeb0 0a67 	vmov.f32	s0, s15
 8105f24:	f7ff fee9 	bl	8105cfa <_ZSt5roundf>
 8105f28:	eef0 7a40 	vmov.f32	s15, s0
 8105f2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8105f30:	ee17 3a90 	vmov	r3, s15
 8105f34:	83fb      	strh	r3, [r7, #30]
		}
	}
 8105f36:	f107 030c 	add.w	r3, r7, #12
 8105f3a:	4618      	mov	r0, r3
 8105f3c:	f000 f8bc 	bl	81060b8 <_ZNSt6vectorIfSaIfEED1Ev>
	return median;
 8105f40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8105f44:	4618      	mov	r0, r3
 8105f46:	3724      	adds	r7, #36	@ 0x24
 8105f48:	46bd      	mov	sp, r7
 8105f4a:	ecbd 8b02 	vpop	{d8}
 8105f4e:	bd90      	pop	{r4, r7, pc}

08105f50 <_ZN15TemperatureTask13doMeasurementEv>:

uint32_t TemperatureTask::doMeasurement()
{
 8105f50:	b5b0      	push	{r4, r5, r7, lr}
 8105f52:	b090      	sub	sp, #64	@ 0x40
 8105f54:	af04      	add	r7, sp, #16
 8105f56:	6078      	str	r0, [r7, #4]
	uint8_t data[2];

    if (HAL_I2C_Mem_Read(&hi2c4, MCP9808_I2C_ADDRESS, MCP9808_TEMP_REG, I2C_MEMADD_SIZE_8BIT, data, 2, 1000u) != HAL_OK)
 8105f58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8105f5c:	9302      	str	r3, [sp, #8]
 8105f5e:	2302      	movs	r3, #2
 8105f60:	9301      	str	r3, [sp, #4]
 8105f62:	f107 030c 	add.w	r3, r7, #12
 8105f66:	9300      	str	r3, [sp, #0]
 8105f68:	2301      	movs	r3, #1
 8105f6a:	2205      	movs	r2, #5
 8105f6c:	2130      	movs	r1, #48	@ 0x30
 8105f6e:	4851      	ldr	r0, [pc, #324]	@ (81060b4 <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8105f70:	f004 fccc 	bl	810a90c <HAL_I2C_Mem_Read>
 8105f74:	4603      	mov	r3, r0
 8105f76:	2b00      	cmp	r3, #0
 8105f78:	bf14      	ite	ne
 8105f7a:	2301      	movne	r3, #1
 8105f7c:	2300      	moveq	r3, #0
 8105f7e:	b2db      	uxtb	r3, r3
 8105f80:	2b00      	cmp	r3, #0
 8105f82:	d00b      	beq.n	8105f9c <_ZN15TemperatureTask13doMeasurementEv+0x4c>
    {
    	uint32_t err = HAL_I2C_GetError(&hi2c4);
 8105f84:	484b      	ldr	r0, [pc, #300]	@ (81060b4 <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8105f86:	f004 fddb 	bl	810ab40 <HAL_I2C_GetError>
 8105f8a:	61b8      	str	r0, [r7, #24]
        // Error handling - restart I2C4 interface
    	HAL_I2C_DeInit(&hi2c4);
 8105f8c:	4849      	ldr	r0, [pc, #292]	@ (81060b4 <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8105f8e:	f004 fc8e 	bl	810a8ae <HAL_I2C_DeInit>
    	HAL_I2C_Init(&hi2c4);
 8105f92:	4848      	ldr	r0, [pc, #288]	@ (81060b4 <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8105f94:	f004 fbf0 	bl	810a778 <HAL_I2C_Init>
    	//do not block other tasks, try again later.
    	return err;
 8105f98:	69bb      	ldr	r3, [r7, #24]
 8105f9a:	e086      	b.n	81060aa <_ZN15TemperatureTask13doMeasurementEv+0x15a>
    }

	uint16_t dataLong;
	float tmpVal = 0;
 8105f9c:	f04f 0300 	mov.w	r3, #0
 8105fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float tmpValDec;

	dataLong = ((data[0] << 8u) | data[1]);
 8105fa2:	7b3b      	ldrb	r3, [r7, #12]
 8105fa4:	021b      	lsls	r3, r3, #8
 8105fa6:	b21a      	sxth	r2, r3
 8105fa8:	7b7b      	ldrb	r3, [r7, #13]
 8105faa:	b21b      	sxth	r3, r3
 8105fac:	4313      	orrs	r3, r2
 8105fae:	b21b      	sxth	r3, r3
 8105fb0:	847b      	strh	r3, [r7, #34]	@ 0x22
	/* Extract the integer part from the fixed point value */
	tmpVal = ((dataLong & 0x0FFF) >> 4);
 8105fb2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8105fb4:	091b      	lsrs	r3, r3, #4
 8105fb6:	b29b      	uxth	r3, r3
 8105fb8:	b2db      	uxtb	r3, r3
 8105fba:	ee07 3a90 	vmov	s15, r3
 8105fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105fc2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* Extract decimal part */
	tmpValDec = 0.0625;
 8105fc6:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 8105fca:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (int i=0; i < 4; i++)
 8105fcc:	2300      	movs	r3, #0
 8105fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8105fd0:	e01c      	b.n	810600c <_ZN15TemperatureTask13doMeasurementEv+0xbc>
	{
		tmpVal += ((dataLong >> i) & 0x0001) * tmpValDec;
 8105fd2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8105fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105fd6:	fa42 f303 	asr.w	r3, r2, r3
 8105fda:	f003 0301 	and.w	r3, r3, #1
 8105fde:	ee07 3a90 	vmov	s15, r3
 8105fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8105fe6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8105fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105fee:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8105ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8105ff6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		tmpValDec *= 2u;
 8105ffa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8105ffe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8106002:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	for (int i=0; i < 4; i++)
 8106006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106008:	3301      	adds	r3, #1
 810600a:	627b      	str	r3, [r7, #36]	@ 0x24
 810600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810600e:	2b03      	cmp	r3, #3
 8106010:	dddf      	ble.n	8105fd2 <_ZN15TemperatureTask13doMeasurementEv+0x82>
	}

	short int measurement = static_cast<short int>(tmpVal);
 8106012:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8106016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810601a:	ee17 3a90 	vmov	r3, s15
 810601e:	843b      	strh	r3, [r7, #32]

	size_t currMesSize = measurements.size();
 8106020:	687b      	ldr	r3, [r7, #4]
 8106022:	4618      	mov	r0, r3
 8106024:	f000 f92e 	bl	8106284 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8106028:	61f8      	str	r0, [r7, #28]

	if(currMesSize < MEASUREMENTS_COUNT)
 810602a:	69fb      	ldr	r3, [r7, #28]
 810602c:	2b05      	cmp	r3, #5
 810602e:	d80f      	bhi.n	8106050 <_ZN15TemperatureTask13doMeasurementEv+0x100>
	{
		measurements.push_back(measurement);
 8106030:	687b      	ldr	r3, [r7, #4]
 8106032:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8106036:	ee07 2a90 	vmov	s15, r2
 810603a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810603e:	edc7 7a04 	vstr	s15, [r7, #16]
 8106042:	f107 0210 	add.w	r2, r7, #16
 8106046:	4611      	mov	r1, r2
 8106048:	4618      	mov	r0, r3
 810604a:	f000 f9a9 	bl	81063a0 <_ZNSt6vectorIfSaIfEE9push_backEOf>
 810604e:	e02b      	b.n	81060a8 <_ZN15TemperatureTask13doMeasurementEv+0x158>
	}
	else
	{
		std::rotate(measurements.begin(), measurements.begin() + 1, measurements.end());
 8106050:	687b      	ldr	r3, [r7, #4]
 8106052:	4618      	mov	r0, r3
 8106054:	f000 f963 	bl	810631e <_ZNSt6vectorIfSaIfEE5beginEv>
 8106058:	4604      	mov	r4, r0
 810605a:	687b      	ldr	r3, [r7, #4]
 810605c:	4618      	mov	r0, r3
 810605e:	f000 f95e 	bl	810631e <_ZNSt6vectorIfSaIfEE5beginEv>
 8106062:	4603      	mov	r3, r0
 8106064:	617b      	str	r3, [r7, #20]
 8106066:	f107 0314 	add.w	r3, r7, #20
 810606a:	2101      	movs	r1, #1
 810606c:	4618      	mov	r0, r3
 810606e:	f000 f9a8 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106072:	4605      	mov	r5, r0
 8106074:	687b      	ldr	r3, [r7, #4]
 8106076:	4618      	mov	r0, r3
 8106078:	f000 f961 	bl	810633e <_ZNSt6vectorIfSaIfEE3endEv>
 810607c:	4603      	mov	r3, r0
 810607e:	461a      	mov	r2, r3
 8106080:	4629      	mov	r1, r5
 8106082:	4620      	mov	r0, r4
 8106084:	f000 f9b5 	bl	81063f2 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_>
		measurements[currMesSize - 1] = measurement;
 8106088:	687a      	ldr	r2, [r7, #4]
 810608a:	69fb      	ldr	r3, [r7, #28]
 810608c:	3b01      	subs	r3, #1
 810608e:	4619      	mov	r1, r3
 8106090:	4610      	mov	r0, r2
 8106092:	f000 f975 	bl	8106380 <_ZNSt6vectorIfSaIfEEixEj>
 8106096:	4603      	mov	r3, r0
 8106098:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 810609c:	ee07 2a90 	vmov	s15, r2
 81060a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81060a4:	edc3 7a00 	vstr	s15, [r3]
	}
	return HAL_I2C_ERROR_NONE;
 81060a8:	2300      	movs	r3, #0
}
 81060aa:	4618      	mov	r0, r3
 81060ac:	3730      	adds	r7, #48	@ 0x30
 81060ae:	46bd      	mov	sp, r7
 81060b0:	bdb0      	pop	{r4, r5, r7, pc}
 81060b2:	bf00      	nop
 81060b4:	100000b4 	.word	0x100000b4

081060b8 <_ZNSt6vectorIfSaIfEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 81060b8:	b5b0      	push	{r4, r5, r7, lr}
 81060ba:	b082      	sub	sp, #8
 81060bc:	af00      	add	r7, sp, #0
 81060be:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 81060c0:	687b      	ldr	r3, [r7, #4]
 81060c2:	681c      	ldr	r4, [r3, #0]
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 81060c8:	687b      	ldr	r3, [r7, #4]
 81060ca:	4618      	mov	r0, r3
 81060cc:	f000 f9a7 	bl	810641e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 81060d0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 81060d2:	461a      	mov	r2, r3
 81060d4:	4629      	mov	r1, r5
 81060d6:	4620      	mov	r0, r4
 81060d8:	f000 f9ac 	bl	8106434 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      }
 81060dc:	687b      	ldr	r3, [r7, #4]
 81060de:	4618      	mov	r0, r3
 81060e0:	f000 f821 	bl	8106126 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 81060e4:	687b      	ldr	r3, [r7, #4]
 81060e6:	4618      	mov	r0, r3
 81060e8:	3708      	adds	r7, #8
 81060ea:	46bd      	mov	sp, r7
 81060ec:	bdb0      	pop	{r4, r5, r7, pc}

081060ee <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 81060ee:	b580      	push	{r7, lr}
 81060f0:	b082      	sub	sp, #8
 81060f2:	af00      	add	r7, sp, #0
 81060f4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 81060f6:	6878      	ldr	r0, [r7, #4]
 81060f8:	f000 f9aa 	bl	8106450 <_ZNSaIfEC1Ev>
 81060fc:	687b      	ldr	r3, [r7, #4]
 81060fe:	4618      	mov	r0, r3
 8106100:	f000 f9b2 	bl	8106468 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8106104:	687b      	ldr	r3, [r7, #4]
 8106106:	4618      	mov	r0, r3
 8106108:	3708      	adds	r7, #8
 810610a:	46bd      	mov	sp, r7
 810610c:	bd80      	pop	{r7, pc}

0810610e <_ZNSaIfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 810610e:	b580      	push	{r7, lr}
 8106110:	b082      	sub	sp, #8
 8106112:	af00      	add	r7, sp, #0
 8106114:	6078      	str	r0, [r7, #4]
 8106116:	6878      	ldr	r0, [r7, #4]
 8106118:	f000 f9ba 	bl	8106490 <_ZNSt15__new_allocatorIfED1Ev>
 810611c:	687b      	ldr	r3, [r7, #4]
 810611e:	4618      	mov	r0, r3
 8106120:	3708      	adds	r7, #8
 8106122:	46bd      	mov	sp, r7
 8106124:	bd80      	pop	{r7, pc}

08106126 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8106126:	b580      	push	{r7, lr}
 8106128:	b082      	sub	sp, #8
 810612a:	af00      	add	r7, sp, #0
 810612c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 810612e:	687b      	ldr	r3, [r7, #4]
 8106130:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8106132:	687b      	ldr	r3, [r7, #4]
 8106134:	689a      	ldr	r2, [r3, #8]
 8106136:	687b      	ldr	r3, [r7, #4]
 8106138:	681b      	ldr	r3, [r3, #0]
 810613a:	1ad3      	subs	r3, r2, r3
 810613c:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 810613e:	461a      	mov	r2, r3
 8106140:	6878      	ldr	r0, [r7, #4]
 8106142:	f000 f9b0 	bl	81064a6 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 8106146:	687b      	ldr	r3, [r7, #4]
 8106148:	4618      	mov	r0, r3
 810614a:	f7ff fe05 	bl	8105d58 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 810614e:	687b      	ldr	r3, [r7, #4]
 8106150:	4618      	mov	r0, r3
 8106152:	3708      	adds	r7, #8
 8106154:	46bd      	mov	sp, r7
 8106156:	bd80      	pop	{r7, pc}

08106158 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>:
      _S_use_relocate()
 8106158:	b580      	push	{r7, lr}
 810615a:	b082      	sub	sp, #8
 810615c:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 810615e:	4618      	mov	r0, r3
 8106160:	f000 f805 	bl	810616e <_ZNSt6vectorIfSaIfEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8106164:	4603      	mov	r3, r0
      }
 8106166:	4618      	mov	r0, r3
 8106168:	3708      	adds	r7, #8
 810616a:	46bd      	mov	sp, r7
 810616c:	bd80      	pop	{r7, pc}

0810616e <_ZNSt6vectorIfSaIfEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 810616e:	b480      	push	{r7}
 8106170:	b083      	sub	sp, #12
 8106172:	af00      	add	r7, sp, #0
 8106174:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8106176:	2301      	movs	r3, #1
      }
 8106178:	4618      	mov	r0, r3
 810617a:	370c      	adds	r7, #12
 810617c:	46bd      	mov	sp, r7
 810617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106182:	4770      	bx	lr

08106184 <_ZNSt6vectorIfSaIfEE7reserveEj>:
    vector<_Tp, _Alloc>::
 8106184:	b5b0      	push	{r4, r5, r7, lr}
 8106186:	b084      	sub	sp, #16
 8106188:	af00      	add	r7, sp, #0
 810618a:	6078      	str	r0, [r7, #4]
 810618c:	6039      	str	r1, [r7, #0]
      if (__n > this->max_size())
 810618e:	6878      	ldr	r0, [r7, #4]
 8106190:	f000 f99c 	bl	81064cc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8106194:	4602      	mov	r2, r0
 8106196:	683b      	ldr	r3, [r7, #0]
 8106198:	4293      	cmp	r3, r2
 810619a:	bf8c      	ite	hi
 810619c:	2301      	movhi	r3, #1
 810619e:	2300      	movls	r3, #0
 81061a0:	b2db      	uxtb	r3, r3
 81061a2:	2b00      	cmp	r3, #0
 81061a4:	d002      	beq.n	81061ac <_ZNSt6vectorIfSaIfEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 81061a6:	4836      	ldr	r0, [pc, #216]	@ (8106280 <_ZNSt6vectorIfSaIfEE7reserveEj+0xfc>)
 81061a8:	f016 ffad 	bl	811d106 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 81061ac:	6878      	ldr	r0, [r7, #4]
 81061ae:	f000 f99e 	bl	81064ee <_ZNKSt6vectorIfSaIfEE8capacityEv>
 81061b2:	4602      	mov	r2, r0
 81061b4:	683b      	ldr	r3, [r7, #0]
 81061b6:	4293      	cmp	r3, r2
 81061b8:	bf8c      	ite	hi
 81061ba:	2301      	movhi	r3, #1
 81061bc:	2300      	movls	r3, #0
 81061be:	b2db      	uxtb	r3, r3
 81061c0:	2b00      	cmp	r3, #0
 81061c2:	d059      	beq.n	8106278 <_ZNSt6vectorIfSaIfEE7reserveEj+0xf4>
	  const size_type __old_size = size();
 81061c4:	6878      	ldr	r0, [r7, #4]
 81061c6:	f000 f85d 	bl	8106284 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 81061ca:	60b8      	str	r0, [r7, #8]
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 81061cc:	f7ff ffc4 	bl	8106158 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>
 81061d0:	4603      	mov	r3, r0
 81061d2:	2b00      	cmp	r3, #0
 81061d4:	d014      	beq.n	8106200 <_ZNSt6vectorIfSaIfEE7reserveEj+0x7c>
	      __tmp = this->_M_allocate(__n);
 81061d6:	687b      	ldr	r3, [r7, #4]
 81061d8:	6839      	ldr	r1, [r7, #0]
 81061da:	4618      	mov	r0, r3
 81061dc:	f000 f997 	bl	810650e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 81061e0:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 81061e2:	687b      	ldr	r3, [r7, #4]
 81061e4:	681c      	ldr	r4, [r3, #0]
 81061e6:	687b      	ldr	r3, [r7, #4]
 81061e8:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 81061ea:	687b      	ldr	r3, [r7, #4]
 81061ec:	4618      	mov	r0, r3
 81061ee:	f000 f916 	bl	810641e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 81061f2:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 81061f4:	68fa      	ldr	r2, [r7, #12]
 81061f6:	4629      	mov	r1, r5
 81061f8:	4620      	mov	r0, r4
 81061fa:	f000 f99c 	bl	8106536 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 81061fe:	e01f      	b.n	8106240 <_ZNSt6vectorIfSaIfEE7reserveEj+0xbc>
	      __tmp = _M_allocate_and_copy(__n,
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	681b      	ldr	r3, [r3, #0]
 8106204:	4618      	mov	r0, r3
 8106206:	f000 f9aa 	bl	810655e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 810620a:	4604      	mov	r4, r0
 810620c:	687b      	ldr	r3, [r7, #4]
 810620e:	685b      	ldr	r3, [r3, #4]
 8106210:	4618      	mov	r0, r3
 8106212:	f000 f9a4 	bl	810655e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8106216:	4603      	mov	r3, r0
 8106218:	4622      	mov	r2, r4
 810621a:	6839      	ldr	r1, [r7, #0]
 810621c:	6878      	ldr	r0, [r7, #4]
 810621e:	f000 f9ad 	bl	810657c <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyISt13move_iteratorIPfEEES4_jT_S6_>
 8106222:	60f8      	str	r0, [r7, #12]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8106224:	687b      	ldr	r3, [r7, #4]
 8106226:	681c      	ldr	r4, [r3, #0]
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 810622c:	687b      	ldr	r3, [r7, #4]
 810622e:	4618      	mov	r0, r3
 8106230:	f000 f8f5 	bl	810641e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8106234:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8106236:	461a      	mov	r2, r3
 8106238:	4629      	mov	r1, r5
 810623a:	4620      	mov	r0, r4
 810623c:	f000 f8fa 	bl	8106434 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	  _M_deallocate(this->_M_impl._M_start,
 8106240:	6878      	ldr	r0, [r7, #4]
 8106242:	687b      	ldr	r3, [r7, #4]
 8106244:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 8106246:	687b      	ldr	r3, [r7, #4]
 8106248:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 810624a:	687b      	ldr	r3, [r7, #4]
 810624c:	681b      	ldr	r3, [r3, #0]
 810624e:	1ad3      	subs	r3, r2, r3
 8106250:	109b      	asrs	r3, r3, #2
	  _M_deallocate(this->_M_impl._M_start,
 8106252:	461a      	mov	r2, r3
 8106254:	f000 f927 	bl	81064a6 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	  this->_M_impl._M_start = __tmp;
 8106258:	687b      	ldr	r3, [r7, #4]
 810625a:	68fa      	ldr	r2, [r7, #12]
 810625c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 810625e:	68bb      	ldr	r3, [r7, #8]
 8106260:	009b      	lsls	r3, r3, #2
 8106262:	68fa      	ldr	r2, [r7, #12]
 8106264:	441a      	add	r2, r3
 8106266:	687b      	ldr	r3, [r7, #4]
 8106268:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 810626a:	687b      	ldr	r3, [r7, #4]
 810626c:	681a      	ldr	r2, [r3, #0]
 810626e:	683b      	ldr	r3, [r7, #0]
 8106270:	009b      	lsls	r3, r3, #2
 8106272:	441a      	add	r2, r3
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	609a      	str	r2, [r3, #8]
    }
 8106278:	bf00      	nop
 810627a:	3710      	adds	r7, #16
 810627c:	46bd      	mov	sp, r7
 810627e:	bdb0      	pop	{r4, r5, r7, pc}
 8106280:	0811f4c4 	.word	0x0811f4c4

08106284 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8106284:	b480      	push	{r7}
 8106286:	b083      	sub	sp, #12
 8106288:	af00      	add	r7, sp, #0
 810628a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	685a      	ldr	r2, [r3, #4]
 8106290:	687b      	ldr	r3, [r7, #4]
 8106292:	681b      	ldr	r3, [r3, #0]
 8106294:	1ad3      	subs	r3, r2, r3
 8106296:	109b      	asrs	r3, r3, #2
 8106298:	4618      	mov	r0, r3
 810629a:	370c      	adds	r7, #12
 810629c:	46bd      	mov	sp, r7
 810629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062a2:	4770      	bx	lr

081062a4 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 81062a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 81062a6:	b085      	sub	sp, #20
 81062a8:	af00      	add	r7, sp, #0
 81062aa:	6078      	str	r0, [r7, #4]
 81062ac:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 81062ae:	687c      	ldr	r4, [r7, #4]
 81062b0:	6838      	ldr	r0, [r7, #0]
 81062b2:	f7ff ffe7 	bl	8106284 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 81062b6:	4605      	mov	r5, r0
 81062b8:	683b      	ldr	r3, [r7, #0]
 81062ba:	4618      	mov	r0, r3
 81062bc:	f000 f97a 	bl	81065b4 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 81062c0:	4602      	mov	r2, r0
 81062c2:	f107 030c 	add.w	r3, r7, #12
 81062c6:	4611      	mov	r1, r2
 81062c8:	4618      	mov	r0, r3
 81062ca:	f000 f97e 	bl	81065ca <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 81062ce:	f107 030c 	add.w	r3, r7, #12
 81062d2:	461a      	mov	r2, r3
 81062d4:	4629      	mov	r1, r5
 81062d6:	4620      	mov	r0, r4
 81062d8:	f000 f985 	bl	81065e6 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 81062dc:	f107 030c 	add.w	r3, r7, #12
 81062e0:	4618      	mov	r0, r3
 81062e2:	f7ff ff14 	bl	810610e <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 81062e6:	6838      	ldr	r0, [r7, #0]
 81062e8:	f000 f991 	bl	810660e <_ZNKSt6vectorIfSaIfEE5beginEv>
 81062ec:	4605      	mov	r5, r0
 81062ee:	6838      	ldr	r0, [r7, #0]
 81062f0:	f000 f99d 	bl	810662e <_ZNKSt6vectorIfSaIfEE3endEv>
 81062f4:	4606      	mov	r6, r0
 81062f6:	687b      	ldr	r3, [r7, #4]
 81062f8:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 81062fa:	687b      	ldr	r3, [r7, #4]
 81062fc:	4618      	mov	r0, r3
 81062fe:	f000 f88e 	bl	810641e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8106302:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8106304:	4622      	mov	r2, r4
 8106306:	4631      	mov	r1, r6
 8106308:	4628      	mov	r0, r5
 810630a:	f000 f9a1 	bl	8106650 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 810630e:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8106310:	687b      	ldr	r3, [r7, #4]
 8106312:	605a      	str	r2, [r3, #4]
      }
 8106314:	687b      	ldr	r3, [r7, #4]
 8106316:	4618      	mov	r0, r3
 8106318:	3714      	adds	r7, #20
 810631a:	46bd      	mov	sp, r7
 810631c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810631e <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 810631e:	b580      	push	{r7, lr}
 8106320:	b084      	sub	sp, #16
 8106322:	af00      	add	r7, sp, #0
 8106324:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8106326:	687a      	ldr	r2, [r7, #4]
 8106328:	f107 030c 	add.w	r3, r7, #12
 810632c:	4611      	mov	r1, r2
 810632e:	4618      	mov	r0, r3
 8106330:	f000 f99f 	bl	8106672 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8106334:	68fb      	ldr	r3, [r7, #12]
 8106336:	4618      	mov	r0, r3
 8106338:	3710      	adds	r7, #16
 810633a:	46bd      	mov	sp, r7
 810633c:	bd80      	pop	{r7, pc}

0810633e <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 810633e:	b580      	push	{r7, lr}
 8106340:	b084      	sub	sp, #16
 8106342:	af00      	add	r7, sp, #0
 8106344:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8106346:	687b      	ldr	r3, [r7, #4]
 8106348:	1d1a      	adds	r2, r3, #4
 810634a:	f107 030c 	add.w	r3, r7, #12
 810634e:	4611      	mov	r1, r2
 8106350:	4618      	mov	r0, r3
 8106352:	f000 f98e 	bl	8106672 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8106356:	68fb      	ldr	r3, [r7, #12]
 8106358:	4618      	mov	r0, r3
 810635a:	3710      	adds	r7, #16
 810635c:	46bd      	mov	sp, r7
 810635e:	bd80      	pop	{r7, pc}

08106360 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 8106360:	b590      	push	{r4, r7, lr}
 8106362:	b083      	sub	sp, #12
 8106364:	af00      	add	r7, sp, #0
 8106366:	6078      	str	r0, [r7, #4]
 8106368:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 810636a:	f7ff fc98 	bl	8105c9e <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 810636e:	4622      	mov	r2, r4
 8106370:	6839      	ldr	r1, [r7, #0]
 8106372:	6878      	ldr	r0, [r7, #4]
 8106374:	f000 f98d 	bl	8106692 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8106378:	bf00      	nop
 810637a:	370c      	adds	r7, #12
 810637c:	46bd      	mov	sp, r7
 810637e:	bd90      	pop	{r4, r7, pc}

08106380 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8106380:	b480      	push	{r7}
 8106382:	b083      	sub	sp, #12
 8106384:	af00      	add	r7, sp, #0
 8106386:	6078      	str	r0, [r7, #4]
 8106388:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 810638a:	687b      	ldr	r3, [r7, #4]
 810638c:	681a      	ldr	r2, [r3, #0]
 810638e:	683b      	ldr	r3, [r7, #0]
 8106390:	009b      	lsls	r3, r3, #2
 8106392:	4413      	add	r3, r2
      }
 8106394:	4618      	mov	r0, r3
 8106396:	370c      	adds	r7, #12
 8106398:	46bd      	mov	sp, r7
 810639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810639e:	4770      	bx	lr

081063a0 <_ZNSt6vectorIfSaIfEE9push_backEOf>:
      push_back(value_type&& __x)
 81063a0:	b580      	push	{r7, lr}
 81063a2:	b082      	sub	sp, #8
 81063a4:	af00      	add	r7, sp, #0
 81063a6:	6078      	str	r0, [r7, #4]
 81063a8:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 81063aa:	6838      	ldr	r0, [r7, #0]
 81063ac:	f000 f99e 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 81063b0:	4603      	mov	r3, r0
 81063b2:	4619      	mov	r1, r3
 81063b4:	6878      	ldr	r0, [r7, #4]
 81063b6:	f000 f9a4 	bl	8106702 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>
 81063ba:	bf00      	nop
 81063bc:	3708      	adds	r7, #8
 81063be:	46bd      	mov	sp, r7
 81063c0:	bd80      	pop	{r7, pc}

081063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 81063c2:	b580      	push	{r7, lr}
 81063c4:	b084      	sub	sp, #16
 81063c6:	af00      	add	r7, sp, #0
 81063c8:	6078      	str	r0, [r7, #4]
 81063ca:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 81063cc:	687b      	ldr	r3, [r7, #4]
 81063ce:	681a      	ldr	r2, [r3, #0]
 81063d0:	683b      	ldr	r3, [r7, #0]
 81063d2:	009b      	lsls	r3, r3, #2
 81063d4:	4413      	add	r3, r2
 81063d6:	60fb      	str	r3, [r7, #12]
 81063d8:	f107 020c 	add.w	r2, r7, #12
 81063dc:	f107 0308 	add.w	r3, r7, #8
 81063e0:	4611      	mov	r1, r2
 81063e2:	4618      	mov	r0, r3
 81063e4:	f000 f945 	bl	8106672 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 81063e8:	68bb      	ldr	r3, [r7, #8]
 81063ea:	4618      	mov	r0, r3
 81063ec:	3710      	adds	r7, #16
 81063ee:	46bd      	mov	sp, r7
 81063f0:	bd80      	pop	{r7, pc}

081063f2 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_>:
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 81063f2:	b590      	push	{r4, r7, lr}
 81063f4:	b085      	sub	sp, #20
 81063f6:	af00      	add	r7, sp, #0
 81063f8:	60f8      	str	r0, [r7, #12]
 81063fa:	60b9      	str	r1, [r7, #8]
 81063fc:	607a      	str	r2, [r7, #4]
			   std::__iterator_category(__first));
 81063fe:	f107 030c 	add.w	r3, r7, #12
 8106402:	4618      	mov	r0, r3
 8106404:	f000 f9ab 	bl	810675e <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return std::__rotate(__first, __middle, __last,
 8106408:	4623      	mov	r3, r4
 810640a:	687a      	ldr	r2, [r7, #4]
 810640c:	68b9      	ldr	r1, [r7, #8]
 810640e:	68f8      	ldr	r0, [r7, #12]
 8106410:	f000 f9b0 	bl	8106774 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag>
 8106414:	4603      	mov	r3, r0
    }
 8106416:	4618      	mov	r0, r3
 8106418:	3714      	adds	r7, #20
 810641a:	46bd      	mov	sp, r7
 810641c:	bd90      	pop	{r4, r7, pc}

0810641e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 810641e:	b480      	push	{r7}
 8106420:	b083      	sub	sp, #12
 8106422:	af00      	add	r7, sp, #0
 8106424:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	4618      	mov	r0, r3
 810642a:	370c      	adds	r7, #12
 810642c:	46bd      	mov	sp, r7
 810642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106432:	4770      	bx	lr

08106434 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8106434:	b580      	push	{r7, lr}
 8106436:	b084      	sub	sp, #16
 8106438:	af00      	add	r7, sp, #0
 810643a:	60f8      	str	r0, [r7, #12]
 810643c:	60b9      	str	r1, [r7, #8]
 810643e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8106440:	68b9      	ldr	r1, [r7, #8]
 8106442:	68f8      	ldr	r0, [r7, #12]
 8106444:	f000 fb07 	bl	8106a56 <_ZSt8_DestroyIPfEvT_S1_>
    }
 8106448:	bf00      	nop
 810644a:	3710      	adds	r7, #16
 810644c:	46bd      	mov	sp, r7
 810644e:	bd80      	pop	{r7, pc}

08106450 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8106450:	b580      	push	{r7, lr}
 8106452:	b082      	sub	sp, #8
 8106454:	af00      	add	r7, sp, #0
 8106456:	6078      	str	r0, [r7, #4]
 8106458:	6878      	ldr	r0, [r7, #4]
 810645a:	f000 fb09 	bl	8106a70 <_ZNSt15__new_allocatorIfEC1Ev>
 810645e:	687b      	ldr	r3, [r7, #4]
 8106460:	4618      	mov	r0, r3
 8106462:	3708      	adds	r7, #8
 8106464:	46bd      	mov	sp, r7
 8106466:	bd80      	pop	{r7, pc}

08106468 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8106468:	b480      	push	{r7}
 810646a:	b083      	sub	sp, #12
 810646c:	af00      	add	r7, sp, #0
 810646e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	2200      	movs	r2, #0
 8106474:	601a      	str	r2, [r3, #0]
 8106476:	687b      	ldr	r3, [r7, #4]
 8106478:	2200      	movs	r2, #0
 810647a:	605a      	str	r2, [r3, #4]
 810647c:	687b      	ldr	r3, [r7, #4]
 810647e:	2200      	movs	r2, #0
 8106480:	609a      	str	r2, [r3, #8]
	{ }
 8106482:	687b      	ldr	r3, [r7, #4]
 8106484:	4618      	mov	r0, r3
 8106486:	370c      	adds	r7, #12
 8106488:	46bd      	mov	sp, r7
 810648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810648e:	4770      	bx	lr

08106490 <_ZNSt15__new_allocatorIfED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8106490:	b480      	push	{r7}
 8106492:	b083      	sub	sp, #12
 8106494:	af00      	add	r7, sp, #0
 8106496:	6078      	str	r0, [r7, #4]
 8106498:	687b      	ldr	r3, [r7, #4]
 810649a:	4618      	mov	r0, r3
 810649c:	370c      	adds	r7, #12
 810649e:	46bd      	mov	sp, r7
 81064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064a4:	4770      	bx	lr

081064a6 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 81064a6:	b580      	push	{r7, lr}
 81064a8:	b084      	sub	sp, #16
 81064aa:	af00      	add	r7, sp, #0
 81064ac:	60f8      	str	r0, [r7, #12]
 81064ae:	60b9      	str	r1, [r7, #8]
 81064b0:	607a      	str	r2, [r7, #4]
	if (__p)
 81064b2:	68bb      	ldr	r3, [r7, #8]
 81064b4:	2b00      	cmp	r3, #0
 81064b6:	d005      	beq.n	81064c4 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 81064b8:	68fb      	ldr	r3, [r7, #12]
 81064ba:	687a      	ldr	r2, [r7, #4]
 81064bc:	68b9      	ldr	r1, [r7, #8]
 81064be:	4618      	mov	r0, r3
 81064c0:	f000 fae1 	bl	8106a86 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 81064c4:	bf00      	nop
 81064c6:	3710      	adds	r7, #16
 81064c8:	46bd      	mov	sp, r7
 81064ca:	bd80      	pop	{r7, pc}

081064cc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 81064cc:	b580      	push	{r7, lr}
 81064ce:	b082      	sub	sp, #8
 81064d0:	af00      	add	r7, sp, #0
 81064d2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 81064d4:	687b      	ldr	r3, [r7, #4]
 81064d6:	4618      	mov	r0, r3
 81064d8:	f000 f86c 	bl	81065b4 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 81064dc:	4603      	mov	r3, r0
 81064de:	4618      	mov	r0, r3
 81064e0:	f000 fae0 	bl	8106aa4 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 81064e4:	4603      	mov	r3, r0
 81064e6:	4618      	mov	r0, r3
 81064e8:	3708      	adds	r7, #8
 81064ea:	46bd      	mov	sp, r7
 81064ec:	bd80      	pop	{r7, pc}

081064ee <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 81064ee:	b480      	push	{r7}
 81064f0:	b083      	sub	sp, #12
 81064f2:	af00      	add	r7, sp, #0
 81064f4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	681b      	ldr	r3, [r3, #0]
 81064fe:	1ad3      	subs	r3, r2, r3
 8106500:	109b      	asrs	r3, r3, #2
 8106502:	4618      	mov	r0, r3
 8106504:	370c      	adds	r7, #12
 8106506:	46bd      	mov	sp, r7
 8106508:	f85d 7b04 	ldr.w	r7, [sp], #4
 810650c:	4770      	bx	lr

0810650e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 810650e:	b580      	push	{r7, lr}
 8106510:	b082      	sub	sp, #8
 8106512:	af00      	add	r7, sp, #0
 8106514:	6078      	str	r0, [r7, #4]
 8106516:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8106518:	683b      	ldr	r3, [r7, #0]
 810651a:	2b00      	cmp	r3, #0
 810651c:	d006      	beq.n	810652c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 810651e:	687b      	ldr	r3, [r7, #4]
 8106520:	6839      	ldr	r1, [r7, #0]
 8106522:	4618      	mov	r0, r3
 8106524:	f000 fad8 	bl	8106ad8 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8106528:	4603      	mov	r3, r0
 810652a:	e000      	b.n	810652e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 810652c:	2300      	movs	r3, #0
      }
 810652e:	4618      	mov	r0, r3
 8106530:	3708      	adds	r7, #8
 8106532:	46bd      	mov	sp, r7
 8106534:	bd80      	pop	{r7, pc}

08106536 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8106536:	b590      	push	{r4, r7, lr}
 8106538:	b087      	sub	sp, #28
 810653a:	af02      	add	r7, sp, #8
 810653c:	60f8      	str	r0, [r7, #12]
 810653e:	60b9      	str	r1, [r7, #8]
 8106540:	607a      	str	r2, [r7, #4]
 8106542:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8106544:	f88d 4000 	strb.w	r4, [sp]
 8106548:	683b      	ldr	r3, [r7, #0]
 810654a:	687a      	ldr	r2, [r7, #4]
 810654c:	68b9      	ldr	r1, [r7, #8]
 810654e:	68f8      	ldr	r0, [r7, #12]
 8106550:	f000 fad1 	bl	8106af6 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>
 8106554:	4603      	mov	r3, r0
      }
 8106556:	4618      	mov	r0, r3
 8106558:	3714      	adds	r7, #20
 810655a:	46bd      	mov	sp, r7
 810655c:	bd90      	pop	{r4, r7, pc}

0810655e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 810655e:	b580      	push	{r7, lr}
 8106560:	b084      	sub	sp, #16
 8106562:	af00      	add	r7, sp, #0
 8106564:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8106566:	f107 030c 	add.w	r3, r7, #12
 810656a:	6879      	ldr	r1, [r7, #4]
 810656c:	4618      	mov	r0, r3
 810656e:	f000 fad4 	bl	8106b1a <_ZNSt13move_iteratorIPfEC1ES0_>
 8106572:	68fb      	ldr	r3, [r7, #12]
 8106574:	4618      	mov	r0, r3
 8106576:	3710      	adds	r7, #16
 8106578:	46bd      	mov	sp, r7
 810657a:	bd80      	pop	{r7, pc}

0810657c <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyISt13move_iteratorIPfEEES4_jT_S6_>:
	_M_allocate_and_copy(size_type __n,
 810657c:	b580      	push	{r7, lr}
 810657e:	b086      	sub	sp, #24
 8106580:	af00      	add	r7, sp, #0
 8106582:	60f8      	str	r0, [r7, #12]
 8106584:	60b9      	str	r1, [r7, #8]
 8106586:	607a      	str	r2, [r7, #4]
 8106588:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 810658a:	68fb      	ldr	r3, [r7, #12]
 810658c:	68b9      	ldr	r1, [r7, #8]
 810658e:	4618      	mov	r0, r3
 8106590:	f7ff ffbd 	bl	810650e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8106594:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8106596:	68fb      	ldr	r3, [r7, #12]
 8106598:	4618      	mov	r0, r3
 810659a:	f7ff ff40 	bl	810641e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810659e:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 81065a0:	697a      	ldr	r2, [r7, #20]
 81065a2:	6839      	ldr	r1, [r7, #0]
 81065a4:	6878      	ldr	r0, [r7, #4]
 81065a6:	f000 faca 	bl	8106b3e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
	      return __result;
 81065aa:	697b      	ldr	r3, [r7, #20]
	}
 81065ac:	4618      	mov	r0, r3
 81065ae:	3718      	adds	r7, #24
 81065b0:	46bd      	mov	sp, r7
 81065b2:	bd80      	pop	{r7, pc}

081065b4 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 81065b4:	b480      	push	{r7}
 81065b6:	b083      	sub	sp, #12
 81065b8:	af00      	add	r7, sp, #0
 81065ba:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 81065bc:	687b      	ldr	r3, [r7, #4]
 81065be:	4618      	mov	r0, r3
 81065c0:	370c      	adds	r7, #12
 81065c2:	46bd      	mov	sp, r7
 81065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065c8:	4770      	bx	lr

081065ca <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 81065ca:	b580      	push	{r7, lr}
 81065cc:	b082      	sub	sp, #8
 81065ce:	af00      	add	r7, sp, #0
 81065d0:	6078      	str	r0, [r7, #4]
 81065d2:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 81065d4:	687b      	ldr	r3, [r7, #4]
 81065d6:	6839      	ldr	r1, [r7, #0]
 81065d8:	4618      	mov	r0, r3
 81065da:	f000 fac1 	bl	8106b60 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 81065de:	6878      	ldr	r0, [r7, #4]
 81065e0:	3708      	adds	r7, #8
 81065e2:	46bd      	mov	sp, r7
 81065e4:	bd80      	pop	{r7, pc}

081065e6 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 81065e6:	b580      	push	{r7, lr}
 81065e8:	b084      	sub	sp, #16
 81065ea:	af00      	add	r7, sp, #0
 81065ec:	60f8      	str	r0, [r7, #12]
 81065ee:	60b9      	str	r1, [r7, #8]
 81065f0:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 81065f2:	68fb      	ldr	r3, [r7, #12]
 81065f4:	6879      	ldr	r1, [r7, #4]
 81065f6:	4618      	mov	r0, r3
 81065f8:	f000 facd 	bl	8106b96 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 81065fc:	68b9      	ldr	r1, [r7, #8]
 81065fe:	68f8      	ldr	r0, [r7, #12]
 8106600:	f000 fadb 	bl	8106bba <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 8106604:	68fb      	ldr	r3, [r7, #12]
 8106606:	4618      	mov	r0, r3
 8106608:	3710      	adds	r7, #16
 810660a:	46bd      	mov	sp, r7
 810660c:	bd80      	pop	{r7, pc}

0810660e <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 810660e:	b580      	push	{r7, lr}
 8106610:	b084      	sub	sp, #16
 8106612:	af00      	add	r7, sp, #0
 8106614:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8106616:	687a      	ldr	r2, [r7, #4]
 8106618:	f107 030c 	add.w	r3, r7, #12
 810661c:	4611      	mov	r1, r2
 810661e:	4618      	mov	r0, r3
 8106620:	f000 fae6 	bl	8106bf0 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8106624:	68fb      	ldr	r3, [r7, #12]
 8106626:	4618      	mov	r0, r3
 8106628:	3710      	adds	r7, #16
 810662a:	46bd      	mov	sp, r7
 810662c:	bd80      	pop	{r7, pc}

0810662e <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 810662e:	b580      	push	{r7, lr}
 8106630:	b084      	sub	sp, #16
 8106632:	af00      	add	r7, sp, #0
 8106634:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8106636:	687b      	ldr	r3, [r7, #4]
 8106638:	1d1a      	adds	r2, r3, #4
 810663a:	f107 030c 	add.w	r3, r7, #12
 810663e:	4611      	mov	r1, r2
 8106640:	4618      	mov	r0, r3
 8106642:	f000 fad5 	bl	8106bf0 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8106646:	68fb      	ldr	r3, [r7, #12]
 8106648:	4618      	mov	r0, r3
 810664a:	3710      	adds	r7, #16
 810664c:	46bd      	mov	sp, r7
 810664e:	bd80      	pop	{r7, pc}

08106650 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8106650:	b580      	push	{r7, lr}
 8106652:	b084      	sub	sp, #16
 8106654:	af00      	add	r7, sp, #0
 8106656:	60f8      	str	r0, [r7, #12]
 8106658:	60b9      	str	r1, [r7, #8]
 810665a:	607a      	str	r2, [r7, #4]
 810665c:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 810665e:	687a      	ldr	r2, [r7, #4]
 8106660:	68b9      	ldr	r1, [r7, #8]
 8106662:	68f8      	ldr	r0, [r7, #12]
 8106664:	f000 fad4 	bl	8106c10 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8106668:	4603      	mov	r3, r0
    }
 810666a:	4618      	mov	r0, r3
 810666c:	3710      	adds	r7, #16
 810666e:	46bd      	mov	sp, r7
 8106670:	bd80      	pop	{r7, pc}

08106672 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8106672:	b480      	push	{r7}
 8106674:	b083      	sub	sp, #12
 8106676:	af00      	add	r7, sp, #0
 8106678:	6078      	str	r0, [r7, #4]
 810667a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810667c:	683b      	ldr	r3, [r7, #0]
 810667e:	681a      	ldr	r2, [r3, #0]
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	601a      	str	r2, [r3, #0]
 8106684:	687b      	ldr	r3, [r7, #4]
 8106686:	4618      	mov	r0, r3
 8106688:	370c      	adds	r7, #12
 810668a:	46bd      	mov	sp, r7
 810668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106690:	4770      	bx	lr

08106692 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8106692:	b5b0      	push	{r4, r5, r7, lr}
 8106694:	b084      	sub	sp, #16
 8106696:	af00      	add	r7, sp, #0
 8106698:	60f8      	str	r0, [r7, #12]
 810669a:	60b9      	str	r1, [r7, #8]
 810669c:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 810669e:	f107 0208 	add.w	r2, r7, #8
 81066a2:	f107 030c 	add.w	r3, r7, #12
 81066a6:	4611      	mov	r1, r2
 81066a8:	4618      	mov	r0, r3
 81066aa:	f000 fac5 	bl	8106c38 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 81066ae:	4603      	mov	r3, r0
 81066b0:	2b00      	cmp	r3, #0
 81066b2:	d017      	beq.n	81066e4 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x52>
				std::__lg(__last - __first) * 2,
 81066b4:	f107 020c 	add.w	r2, r7, #12
 81066b8:	f107 0308 	add.w	r3, r7, #8
 81066bc:	4611      	mov	r1, r2
 81066be:	4618      	mov	r0, r3
 81066c0:	f000 fad2 	bl	8106c68 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81066c4:	4603      	mov	r3, r0
 81066c6:	4618      	mov	r0, r3
 81066c8:	f7ff fb08 	bl	8105cdc <_ZSt4__lgi>
 81066cc:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 81066ce:	005a      	lsls	r2, r3, #1
 81066d0:	462b      	mov	r3, r5
 81066d2:	68b9      	ldr	r1, [r7, #8]
 81066d4:	68f8      	ldr	r0, [r7, #12]
 81066d6:	f000 fadc 	bl	8106c92 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 81066da:	4622      	mov	r2, r4
 81066dc:	68b9      	ldr	r1, [r7, #8]
 81066de:	68f8      	ldr	r0, [r7, #12]
 81066e0:	f000 fb0e 	bl	8106d00 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 81066e4:	bf00      	nop
 81066e6:	3710      	adds	r7, #16
 81066e8:	46bd      	mov	sp, r7
 81066ea:	bdb0      	pop	{r4, r5, r7, pc}

081066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 81066ec:	b480      	push	{r7}
 81066ee:	b083      	sub	sp, #12
 81066f0:	af00      	add	r7, sp, #0
 81066f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 81066f4:	687b      	ldr	r3, [r7, #4]
 81066f6:	4618      	mov	r0, r3
 81066f8:	370c      	adds	r7, #12
 81066fa:	46bd      	mov	sp, r7
 81066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106700:	4770      	bx	lr

08106702 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8106702:	b5b0      	push	{r4, r5, r7, lr}
 8106704:	b082      	sub	sp, #8
 8106706:	af00      	add	r7, sp, #0
 8106708:	6078      	str	r0, [r7, #4]
 810670a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 810670c:	687b      	ldr	r3, [r7, #4]
 810670e:	685a      	ldr	r2, [r3, #4]
 8106710:	687b      	ldr	r3, [r7, #4]
 8106712:	689b      	ldr	r3, [r3, #8]
 8106714:	429a      	cmp	r2, r3
 8106716:	d011      	beq.n	810673c <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8106718:	687c      	ldr	r4, [r7, #4]
 810671a:	687b      	ldr	r3, [r7, #4]
 810671c:	685d      	ldr	r5, [r3, #4]
 810671e:	6838      	ldr	r0, [r7, #0]
 8106720:	f000 fb26 	bl	8106d70 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8106724:	4603      	mov	r3, r0
 8106726:	461a      	mov	r2, r3
 8106728:	4629      	mov	r1, r5
 810672a:	4620      	mov	r0, r4
 810672c:	f000 fb2b 	bl	8106d86 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	685b      	ldr	r3, [r3, #4]
 8106734:	1d1a      	adds	r2, r3, #4
 8106736:	687b      	ldr	r3, [r7, #4]
 8106738:	605a      	str	r2, [r3, #4]
      }
 810673a:	e00c      	b.n	8106756 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 810673c:	6878      	ldr	r0, [r7, #4]
 810673e:	f7ff fdfe 	bl	810633e <_ZNSt6vectorIfSaIfEE3endEv>
 8106742:	4604      	mov	r4, r0
 8106744:	6838      	ldr	r0, [r7, #0]
 8106746:	f000 fb13 	bl	8106d70 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810674a:	4603      	mov	r3, r0
 810674c:	461a      	mov	r2, r3
 810674e:	4621      	mov	r1, r4
 8106750:	6878      	ldr	r0, [r7, #4]
 8106752:	f000 fb2b 	bl	8106dac <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8106756:	bf00      	nop
 8106758:	3708      	adds	r7, #8
 810675a:	46bd      	mov	sp, r7
 810675c:	bdb0      	pop	{r4, r5, r7, pc}

0810675e <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 810675e:	b480      	push	{r7}
 8106760:	b083      	sub	sp, #12
 8106762:	af00      	add	r7, sp, #0
 8106764:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8106766:	bf00      	nop
 8106768:	4618      	mov	r0, r3
 810676a:	370c      	adds	r7, #12
 810676c:	46bd      	mov	sp, r7
 810676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106772:	4770      	bx	lr

08106774 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 8106774:	b590      	push	{r4, r7, lr}
 8106776:	b095      	sub	sp, #84	@ 0x54
 8106778:	af00      	add	r7, sp, #0
 810677a:	60f8      	str	r0, [r7, #12]
 810677c:	60b9      	str	r1, [r7, #8]
 810677e:	607a      	str	r2, [r7, #4]
 8106780:	703b      	strb	r3, [r7, #0]
      if (__first == __middle)
 8106782:	f107 0208 	add.w	r2, r7, #8
 8106786:	f107 030c 	add.w	r3, r7, #12
 810678a:	4611      	mov	r1, r2
 810678c:	4618      	mov	r0, r3
 810678e:	f000 fbc9 	bl	8106f24 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8106792:	4603      	mov	r3, r0
 8106794:	2b00      	cmp	r3, #0
 8106796:	d001      	beq.n	810679c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x28>
	return __last;
 8106798:	687b      	ldr	r3, [r7, #4]
 810679a:	e158      	b.n	8106a4e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      else if (__last == __middle)
 810679c:	f107 0208 	add.w	r2, r7, #8
 81067a0:	1d3b      	adds	r3, r7, #4
 81067a2:	4611      	mov	r1, r2
 81067a4:	4618      	mov	r0, r3
 81067a6:	f000 fbbd 	bl	8106f24 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 81067aa:	4603      	mov	r3, r0
 81067ac:	2b00      	cmp	r3, #0
 81067ae:	d001      	beq.n	81067b4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x40>
	return __first;
 81067b0:	68fb      	ldr	r3, [r7, #12]
 81067b2:	e14c      	b.n	8106a4e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _Distance __n = __last   - __first;
 81067b4:	f107 020c 	add.w	r2, r7, #12
 81067b8:	1d3b      	adds	r3, r7, #4
 81067ba:	4611      	mov	r1, r2
 81067bc:	4618      	mov	r0, r3
 81067be:	f000 fa53 	bl	8106c68 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81067c2:	4603      	mov	r3, r0
 81067c4:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __k = __middle - __first;
 81067c6:	f107 020c 	add.w	r2, r7, #12
 81067ca:	f107 0308 	add.w	r3, r7, #8
 81067ce:	4611      	mov	r1, r2
 81067d0:	4618      	mov	r0, r3
 81067d2:	f000 fa49 	bl	8106c68 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81067d6:	4603      	mov	r3, r0
 81067d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__k == __n - __k)
 81067da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81067dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81067de:	1ad2      	subs	r2, r2, r3
 81067e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81067e2:	429a      	cmp	r2, r3
 81067e4:	d106      	bne.n	81067f4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x80>
	  std::swap_ranges(__first, __middle, __middle);
 81067e6:	68ba      	ldr	r2, [r7, #8]
 81067e8:	68b9      	ldr	r1, [r7, #8]
 81067ea:	68f8      	ldr	r0, [r7, #12]
 81067ec:	f000 fbb2 	bl	8106f54 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	  return __middle;
 81067f0:	68bb      	ldr	r3, [r7, #8]
 81067f2:	e12c      	b.n	8106a4e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _RandomAccessIterator __p = __first;
 81067f4:	68fb      	ldr	r3, [r7, #12]
 81067f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      _RandomAccessIterator __ret = __first + (__last - __middle);
 81067f8:	f107 0208 	add.w	r2, r7, #8
 81067fc:	1d3b      	adds	r3, r7, #4
 81067fe:	4611      	mov	r1, r2
 8106800:	4618      	mov	r0, r3
 8106802:	f000 fa31 	bl	8106c68 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8106806:	4602      	mov	r2, r0
 8106808:	f107 030c 	add.w	r3, r7, #12
 810680c:	4611      	mov	r1, r2
 810680e:	4618      	mov	r0, r3
 8106810:	f7ff fdd7 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106814:	4603      	mov	r3, r0
 8106816:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (__k < __n - __k)
 8106818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810681a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810681c:	1ad2      	subs	r2, r2, r3
 810681e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106820:	429a      	cmp	r2, r3
 8106822:	f340 8081 	ble.w	8106928 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x1b4>
	      if (__is_pod(_ValueType) && __k == 1)
 8106826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106828:	2b01      	cmp	r3, #1
 810682a:	d140      	bne.n	81068ae <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x13a>
		  _ValueType __t = _GLIBCXX_MOVE(*__p);
 810682c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8106830:	4618      	mov	r0, r3
 8106832:	f000 fbb3 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106836:	4603      	mov	r3, r0
 8106838:	4618      	mov	r0, r3
 810683a:	f7ff ff57 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810683e:	4603      	mov	r3, r0
 8106840:	681b      	ldr	r3, [r3, #0]
 8106842:	61fb      	str	r3, [r7, #28]
		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
 8106844:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8106848:	2101      	movs	r1, #1
 810684a:	4618      	mov	r0, r3
 810684c:	f7ff fdb9 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106850:	4604      	mov	r4, r0
 8106852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106854:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8106858:	4611      	mov	r1, r2
 810685a:	4618      	mov	r0, r3
 810685c:	f7ff fdb1 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106860:	4603      	mov	r3, r0
 8106862:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8106864:	4619      	mov	r1, r3
 8106866:	4620      	mov	r0, r4
 8106868:	f000 fba4 	bl	8106fb4 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
 810686c:	f107 031c 	add.w	r3, r7, #28
 8106870:	4618      	mov	r0, r3
 8106872:	f7ff ff3b 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106876:	4604      	mov	r4, r0
 8106878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810687a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810687e:	4611      	mov	r1, r2
 8106880:	4618      	mov	r0, r3
 8106882:	f7ff fd9e 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106886:	4603      	mov	r3, r0
 8106888:	63bb      	str	r3, [r7, #56]	@ 0x38
 810688a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 810688e:	2101      	movs	r1, #1
 8106890:	4618      	mov	r0, r3
 8106892:	f000 fba7 	bl	8106fe4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 8106896:	4603      	mov	r3, r0
 8106898:	637b      	str	r3, [r7, #52]	@ 0x34
 810689a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 810689e:	4618      	mov	r0, r3
 81068a0:	f000 fb7c 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81068a4:	4602      	mov	r2, r0
 81068a6:	6823      	ldr	r3, [r4, #0]
 81068a8:	6013      	str	r3, [r2, #0]
		  return __ret;
 81068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81068ac:	e0cf      	b.n	8106a4e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __k;
 81068ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81068b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81068b4:	4611      	mov	r1, r2
 81068b6:	4618      	mov	r0, r3
 81068b8:	f7ff fd83 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81068bc:	4603      	mov	r3, r0
 81068be:	623b      	str	r3, [r7, #32]
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 81068c0:	2300      	movs	r3, #0
 81068c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81068c4:	e010      	b.n	81068e8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x174>
		  std::iter_swap(__p, __q);
 81068c6:	6a39      	ldr	r1, [r7, #32]
 81068c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81068ca:	f000 fba4 	bl	8107016 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
		  ++__p;
 81068ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81068d2:	4618      	mov	r0, r3
 81068d4:	f000 fbb6 	bl	8107044 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
		  ++__q;
 81068d8:	f107 0320 	add.w	r3, r7, #32
 81068dc:	4618      	mov	r0, r3
 81068de:	f000 fbb1 	bl	8107044 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 81068e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81068e4:	3301      	adds	r3, #1
 81068e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81068e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81068ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81068ec:	1ad3      	subs	r3, r2, r3
 81068ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81068f0:	429a      	cmp	r2, r3
 81068f2:	dbe8      	blt.n	81068c6 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x152>
	      __n %= __k;
 81068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81068f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81068f8:	fb93 f1f2 	sdiv	r1, r3, r2
 81068fc:	fb01 f202 	mul.w	r2, r1, r2
 8106900:	1a9b      	subs	r3, r3, r2
 8106902:	633b      	str	r3, [r7, #48]	@ 0x30
	      if (__n == 0)
 8106904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106906:	2b00      	cmp	r3, #0
 8106908:	d101      	bne.n	810690e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x19a>
		return __ret;
 810690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810690c:	e09f      	b.n	8106a4e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 810690e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8106912:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8106916:	4611      	mov	r1, r2
 8106918:	4618      	mov	r0, r3
 810691a:	f000 fba3 	bl	8107064 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 810691e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106922:	1ad3      	subs	r3, r2, r3
 8106924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8106926:	e777      	b.n	8106818 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
	      __k = __n - __k;
 8106928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810692a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810692c:	1ad3      	subs	r3, r2, r3
 810692e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	      if (__is_pod(_ValueType) && __k == 1)
 8106930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106932:	2b01      	cmp	r3, #1
 8106934:	d149      	bne.n	81069ca <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x256>
		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
 8106936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106938:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810693c:	4611      	mov	r1, r2
 810693e:	4618      	mov	r0, r3
 8106940:	f7ff fd3f 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106944:	4603      	mov	r3, r0
 8106946:	643b      	str	r3, [r7, #64]	@ 0x40
 8106948:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 810694c:	2101      	movs	r1, #1
 810694e:	4618      	mov	r0, r3
 8106950:	f000 fb48 	bl	8106fe4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 8106954:	4603      	mov	r3, r0
 8106956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106958:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 810695c:	4618      	mov	r0, r3
 810695e:	f000 fb1d 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106962:	4603      	mov	r3, r0
 8106964:	4618      	mov	r0, r3
 8106966:	f7ff fec1 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810696a:	4603      	mov	r3, r0
 810696c:	681b      	ldr	r3, [r3, #0]
 810696e:	617b      	str	r3, [r7, #20]
		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
 8106970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106972:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8106976:	4611      	mov	r1, r2
 8106978:	4618      	mov	r0, r3
 810697a:	f7ff fd22 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810697e:	4603      	mov	r3, r0
 8106980:	647b      	str	r3, [r7, #68]	@ 0x44
 8106982:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8106986:	2101      	movs	r1, #1
 8106988:	4618      	mov	r0, r3
 810698a:	f000 fb2b 	bl	8106fe4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810698e:	4604      	mov	r4, r0
 8106990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106992:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8106996:	4611      	mov	r1, r2
 8106998:	4618      	mov	r0, r3
 810699a:	f7ff fd12 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810699e:	4603      	mov	r3, r0
 81069a0:	461a      	mov	r2, r3
 81069a2:	4621      	mov	r1, r4
 81069a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81069a6:	f000 fb7c 	bl	81070a2 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
		  *__p = _GLIBCXX_MOVE(__t);
 81069aa:	f107 0314 	add.w	r3, r7, #20
 81069ae:	4618      	mov	r0, r3
 81069b0:	f7ff fe9c 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 81069b4:	4604      	mov	r4, r0
 81069b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81069ba:	4618      	mov	r0, r3
 81069bc:	f000 faee 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81069c0:	4602      	mov	r2, r0
 81069c2:	6823      	ldr	r3, [r4, #0]
 81069c4:	6013      	str	r3, [r2, #0]
		  return __ret;
 81069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81069c8:	e041      	b.n	8106a4e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __n;
 81069ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81069cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81069d0:	4611      	mov	r1, r2
 81069d2:	4618      	mov	r0, r3
 81069d4:	f7ff fcf5 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81069d8:	4603      	mov	r3, r0
 81069da:	61bb      	str	r3, [r7, #24]
	      __p = __q - __k;
 81069dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81069de:	f107 0318 	add.w	r3, r7, #24
 81069e2:	4611      	mov	r1, r2
 81069e4:	4618      	mov	r0, r3
 81069e6:	f000 fafd 	bl	8106fe4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 81069ea:	4603      	mov	r3, r0
 81069ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 81069ee:	2300      	movs	r3, #0
 81069f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 81069f2:	e010      	b.n	8106a16 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2a2>
		  --__p;
 81069f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81069f8:	4618      	mov	r0, r3
 81069fa:	f000 fb6a 	bl	81070d2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
		  --__q;
 81069fe:	f107 0318 	add.w	r3, r7, #24
 8106a02:	4618      	mov	r0, r3
 8106a04:	f000 fb65 	bl	81070d2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
		  std::iter_swap(__p, __q);
 8106a08:	69b9      	ldr	r1, [r7, #24]
 8106a0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8106a0c:	f000 fb03 	bl	8107016 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 8106a10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8106a12:	3301      	adds	r3, #1
 8106a14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8106a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106a1a:	1ad3      	subs	r3, r2, r3
 8106a1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8106a1e:	429a      	cmp	r2, r3
 8106a20:	dbe8      	blt.n	81069f4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x280>
	      __n %= __k;
 8106a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106a24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8106a26:	fb93 f1f2 	sdiv	r1, r3, r2
 8106a2a:	fb01 f202 	mul.w	r2, r1, r2
 8106a2e:	1a9b      	subs	r3, r3, r2
 8106a30:	633b      	str	r3, [r7, #48]	@ 0x30
	      if (__n == 0)
 8106a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106a34:	2b00      	cmp	r3, #0
 8106a36:	d101      	bne.n	8106a3c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2c8>
		return __ret;
 8106a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106a3a:	e008      	b.n	8106a4e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 8106a3c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8106a40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8106a44:	4611      	mov	r1, r2
 8106a46:	4618      	mov	r0, r3
 8106a48:	f000 fb0c 	bl	8107064 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 8106a4c:	e6e4      	b.n	8106818 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
    }
 8106a4e:	4618      	mov	r0, r3
 8106a50:	3754      	adds	r7, #84	@ 0x54
 8106a52:	46bd      	mov	sp, r7
 8106a54:	bd90      	pop	{r4, r7, pc}

08106a56 <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8106a56:	b580      	push	{r7, lr}
 8106a58:	b082      	sub	sp, #8
 8106a5a:	af00      	add	r7, sp, #0
 8106a5c:	6078      	str	r0, [r7, #4]
 8106a5e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8106a60:	6839      	ldr	r1, [r7, #0]
 8106a62:	6878      	ldr	r0, [r7, #4]
 8106a64:	f000 fb45 	bl	81070f2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8106a68:	bf00      	nop
 8106a6a:	3708      	adds	r7, #8
 8106a6c:	46bd      	mov	sp, r7
 8106a6e:	bd80      	pop	{r7, pc}

08106a70 <_ZNSt15__new_allocatorIfEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8106a70:	b480      	push	{r7}
 8106a72:	b083      	sub	sp, #12
 8106a74:	af00      	add	r7, sp, #0
 8106a76:	6078      	str	r0, [r7, #4]
 8106a78:	687b      	ldr	r3, [r7, #4]
 8106a7a:	4618      	mov	r0, r3
 8106a7c:	370c      	adds	r7, #12
 8106a7e:	46bd      	mov	sp, r7
 8106a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a84:	4770      	bx	lr

08106a86 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8106a86:	b580      	push	{r7, lr}
 8106a88:	b084      	sub	sp, #16
 8106a8a:	af00      	add	r7, sp, #0
 8106a8c:	60f8      	str	r0, [r7, #12]
 8106a8e:	60b9      	str	r1, [r7, #8]
 8106a90:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8106a92:	687a      	ldr	r2, [r7, #4]
 8106a94:	68b9      	ldr	r1, [r7, #8]
 8106a96:	68f8      	ldr	r0, [r7, #12]
 8106a98:	f000 fb36 	bl	8107108 <_ZNSt15__new_allocatorIfE10deallocateEPfj>
 8106a9c:	bf00      	nop
 8106a9e:	3710      	adds	r7, #16
 8106aa0:	46bd      	mov	sp, r7
 8106aa2:	bd80      	pop	{r7, pc}

08106aa4 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8106aa4:	b580      	push	{r7, lr}
 8106aa6:	b084      	sub	sp, #16
 8106aa8:	af00      	add	r7, sp, #0
 8106aaa:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8106aac:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8106ab0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8106ab2:	6878      	ldr	r0, [r7, #4]
 8106ab4:	f000 fb38 	bl	8107128 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8106ab8:	4603      	mov	r3, r0
 8106aba:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8106abc:	f107 0208 	add.w	r2, r7, #8
 8106ac0:	f107 030c 	add.w	r3, r7, #12
 8106ac4:	4611      	mov	r1, r2
 8106ac6:	4618      	mov	r0, r3
 8106ac8:	f7fd fc6b 	bl	81043a2 <_ZSt3minIjERKT_S2_S2_>
 8106acc:	4603      	mov	r3, r0
 8106ace:	681b      	ldr	r3, [r3, #0]
      }
 8106ad0:	4618      	mov	r0, r3
 8106ad2:	3710      	adds	r7, #16
 8106ad4:	46bd      	mov	sp, r7
 8106ad6:	bd80      	pop	{r7, pc}

08106ad8 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8106ad8:	b580      	push	{r7, lr}
 8106ada:	b082      	sub	sp, #8
 8106adc:	af00      	add	r7, sp, #0
 8106ade:	6078      	str	r0, [r7, #4]
 8106ae0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8106ae2:	2200      	movs	r2, #0
 8106ae4:	6839      	ldr	r1, [r7, #0]
 8106ae6:	6878      	ldr	r0, [r7, #4]
 8106ae8:	f000 fb2a 	bl	8107140 <_ZNSt15__new_allocatorIfE8allocateEjPKv>
 8106aec:	4603      	mov	r3, r0
 8106aee:	4618      	mov	r0, r3
 8106af0:	3708      	adds	r7, #8
 8106af2:	46bd      	mov	sp, r7
 8106af4:	bd80      	pop	{r7, pc}

08106af6 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8106af6:	b580      	push	{r7, lr}
 8106af8:	b084      	sub	sp, #16
 8106afa:	af00      	add	r7, sp, #0
 8106afc:	60f8      	str	r0, [r7, #12]
 8106afe:	60b9      	str	r1, [r7, #8]
 8106b00:	607a      	str	r2, [r7, #4]
 8106b02:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8106b04:	683b      	ldr	r3, [r7, #0]
 8106b06:	687a      	ldr	r2, [r7, #4]
 8106b08:	68b9      	ldr	r1, [r7, #8]
 8106b0a:	68f8      	ldr	r0, [r7, #12]
 8106b0c:	f000 fb41 	bl	8107192 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8106b10:	4603      	mov	r3, r0
      }
 8106b12:	4618      	mov	r0, r3
 8106b14:	3710      	adds	r7, #16
 8106b16:	46bd      	mov	sp, r7
 8106b18:	bd80      	pop	{r7, pc}

08106b1a <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 8106b1a:	b580      	push	{r7, lr}
 8106b1c:	b082      	sub	sp, #8
 8106b1e:	af00      	add	r7, sp, #0
 8106b20:	6078      	str	r0, [r7, #4]
 8106b22:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8106b24:	463b      	mov	r3, r7
 8106b26:	4618      	mov	r0, r3
 8106b28:	f000 fb50 	bl	81071cc <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>
 8106b2c:	4603      	mov	r3, r0
 8106b2e:	681a      	ldr	r2, [r3, #0]
 8106b30:	687b      	ldr	r3, [r7, #4]
 8106b32:	601a      	str	r2, [r3, #0]
 8106b34:	687b      	ldr	r3, [r7, #4]
 8106b36:	4618      	mov	r0, r3
 8106b38:	3708      	adds	r7, #8
 8106b3a:	46bd      	mov	sp, r7
 8106b3c:	bd80      	pop	{r7, pc}

08106b3e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8106b3e:	b580      	push	{r7, lr}
 8106b40:	b084      	sub	sp, #16
 8106b42:	af00      	add	r7, sp, #0
 8106b44:	60f8      	str	r0, [r7, #12]
 8106b46:	60b9      	str	r1, [r7, #8]
 8106b48:	607a      	str	r2, [r7, #4]
 8106b4a:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8106b4c:	687a      	ldr	r2, [r7, #4]
 8106b4e:	68b9      	ldr	r1, [r7, #8]
 8106b50:	68f8      	ldr	r0, [r7, #12]
 8106b52:	f000 fb46 	bl	81071e2 <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8106b56:	4603      	mov	r3, r0
    }
 8106b58:	4618      	mov	r0, r3
 8106b5a:	3710      	adds	r7, #16
 8106b5c:	46bd      	mov	sp, r7
 8106b5e:	bd80      	pop	{r7, pc}

08106b60 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8106b60:	b580      	push	{r7, lr}
 8106b62:	b082      	sub	sp, #8
 8106b64:	af00      	add	r7, sp, #0
 8106b66:	6078      	str	r0, [r7, #4]
 8106b68:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8106b6a:	6839      	ldr	r1, [r7, #0]
 8106b6c:	6878      	ldr	r0, [r7, #4]
 8106b6e:	f000 f804 	bl	8106b7a <_ZNSaIfEC1ERKS_>
 8106b72:	6878      	ldr	r0, [r7, #4]
 8106b74:	3708      	adds	r7, #8
 8106b76:	46bd      	mov	sp, r7
 8106b78:	bd80      	pop	{r7, pc}

08106b7a <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8106b7a:	b580      	push	{r7, lr}
 8106b7c:	b082      	sub	sp, #8
 8106b7e:	af00      	add	r7, sp, #0
 8106b80:	6078      	str	r0, [r7, #4]
 8106b82:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8106b84:	6839      	ldr	r1, [r7, #0]
 8106b86:	6878      	ldr	r0, [r7, #4]
 8106b88:	f000 fb3f 	bl	810720a <_ZNSt15__new_allocatorIfEC1ERKS0_>
 8106b8c:	687b      	ldr	r3, [r7, #4]
 8106b8e:	4618      	mov	r0, r3
 8106b90:	3708      	adds	r7, #8
 8106b92:	46bd      	mov	sp, r7
 8106b94:	bd80      	pop	{r7, pc}

08106b96 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8106b96:	b580      	push	{r7, lr}
 8106b98:	b082      	sub	sp, #8
 8106b9a:	af00      	add	r7, sp, #0
 8106b9c:	6078      	str	r0, [r7, #4]
 8106b9e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8106ba0:	6839      	ldr	r1, [r7, #0]
 8106ba2:	6878      	ldr	r0, [r7, #4]
 8106ba4:	f7ff ffe9 	bl	8106b7a <_ZNSaIfEC1ERKS_>
 8106ba8:	687b      	ldr	r3, [r7, #4]
 8106baa:	4618      	mov	r0, r3
 8106bac:	f7ff fc5c 	bl	8106468 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8106bb0:	687b      	ldr	r3, [r7, #4]
 8106bb2:	4618      	mov	r0, r3
 8106bb4:	3708      	adds	r7, #8
 8106bb6:	46bd      	mov	sp, r7
 8106bb8:	bd80      	pop	{r7, pc}

08106bba <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8106bba:	b580      	push	{r7, lr}
 8106bbc:	b082      	sub	sp, #8
 8106bbe:	af00      	add	r7, sp, #0
 8106bc0:	6078      	str	r0, [r7, #4]
 8106bc2:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8106bc4:	6839      	ldr	r1, [r7, #0]
 8106bc6:	6878      	ldr	r0, [r7, #4]
 8106bc8:	f7ff fca1 	bl	810650e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8106bcc:	4602      	mov	r2, r0
 8106bce:	687b      	ldr	r3, [r7, #4]
 8106bd0:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8106bd2:	687b      	ldr	r3, [r7, #4]
 8106bd4:	681a      	ldr	r2, [r3, #0]
 8106bd6:	687b      	ldr	r3, [r7, #4]
 8106bd8:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8106bda:	687b      	ldr	r3, [r7, #4]
 8106bdc:	681a      	ldr	r2, [r3, #0]
 8106bde:	683b      	ldr	r3, [r7, #0]
 8106be0:	009b      	lsls	r3, r3, #2
 8106be2:	441a      	add	r2, r3
 8106be4:	687b      	ldr	r3, [r7, #4]
 8106be6:	609a      	str	r2, [r3, #8]
      }
 8106be8:	bf00      	nop
 8106bea:	3708      	adds	r7, #8
 8106bec:	46bd      	mov	sp, r7
 8106bee:	bd80      	pop	{r7, pc}

08106bf0 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8106bf0:	b480      	push	{r7}
 8106bf2:	b083      	sub	sp, #12
 8106bf4:	af00      	add	r7, sp, #0
 8106bf6:	6078      	str	r0, [r7, #4]
 8106bf8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8106bfa:	683b      	ldr	r3, [r7, #0]
 8106bfc:	681a      	ldr	r2, [r3, #0]
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	601a      	str	r2, [r3, #0]
 8106c02:	687b      	ldr	r3, [r7, #4]
 8106c04:	4618      	mov	r0, r3
 8106c06:	370c      	adds	r7, #12
 8106c08:	46bd      	mov	sp, r7
 8106c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c0e:	4770      	bx	lr

08106c10 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8106c10:	b580      	push	{r7, lr}
 8106c12:	b086      	sub	sp, #24
 8106c14:	af00      	add	r7, sp, #0
 8106c16:	60f8      	str	r0, [r7, #12]
 8106c18:	60b9      	str	r1, [r7, #8]
 8106c1a:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8106c1c:	2301      	movs	r3, #1
 8106c1e:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8106c20:	2301      	movs	r3, #1
 8106c22:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8106c24:	687a      	ldr	r2, [r7, #4]
 8106c26:	68b9      	ldr	r1, [r7, #8]
 8106c28:	68f8      	ldr	r0, [r7, #12]
 8106c2a:	f000 fafa 	bl	8107222 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 8106c2e:	4603      	mov	r3, r0
    }
 8106c30:	4618      	mov	r0, r3
 8106c32:	3718      	adds	r7, #24
 8106c34:	46bd      	mov	sp, r7
 8106c36:	bd80      	pop	{r7, pc}

08106c38 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8106c38:	b590      	push	{r4, r7, lr}
 8106c3a:	b083      	sub	sp, #12
 8106c3c:	af00      	add	r7, sp, #0
 8106c3e:	6078      	str	r0, [r7, #4]
 8106c40:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8106c42:	6878      	ldr	r0, [r7, #4]
 8106c44:	f000 fafd 	bl	8107242 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106c48:	4603      	mov	r3, r0
 8106c4a:	681c      	ldr	r4, [r3, #0]
 8106c4c:	6838      	ldr	r0, [r7, #0]
 8106c4e:	f000 faf8 	bl	8107242 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106c52:	4603      	mov	r3, r0
 8106c54:	681b      	ldr	r3, [r3, #0]
 8106c56:	429c      	cmp	r4, r3
 8106c58:	bf14      	ite	ne
 8106c5a:	2301      	movne	r3, #1
 8106c5c:	2300      	moveq	r3, #0
 8106c5e:	b2db      	uxtb	r3, r3
 8106c60:	4618      	mov	r0, r3
 8106c62:	370c      	adds	r7, #12
 8106c64:	46bd      	mov	sp, r7
 8106c66:	bd90      	pop	{r4, r7, pc}

08106c68 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8106c68:	b590      	push	{r4, r7, lr}
 8106c6a:	b083      	sub	sp, #12
 8106c6c:	af00      	add	r7, sp, #0
 8106c6e:	6078      	str	r0, [r7, #4]
 8106c70:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8106c72:	6878      	ldr	r0, [r7, #4]
 8106c74:	f000 fae5 	bl	8107242 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106c78:	4603      	mov	r3, r0
 8106c7a:	681c      	ldr	r4, [r3, #0]
 8106c7c:	6838      	ldr	r0, [r7, #0]
 8106c7e:	f000 fae0 	bl	8107242 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106c82:	4603      	mov	r3, r0
 8106c84:	681b      	ldr	r3, [r3, #0]
 8106c86:	1ae3      	subs	r3, r4, r3
 8106c88:	109b      	asrs	r3, r3, #2
 8106c8a:	4618      	mov	r0, r3
 8106c8c:	370c      	adds	r7, #12
 8106c8e:	46bd      	mov	sp, r7
 8106c90:	bd90      	pop	{r4, r7, pc}

08106c92 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8106c92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8106c94:	b087      	sub	sp, #28
 8106c96:	af00      	add	r7, sp, #0
 8106c98:	60f8      	str	r0, [r7, #12]
 8106c9a:	60b9      	str	r1, [r7, #8]
 8106c9c:	607a      	str	r2, [r7, #4]
 8106c9e:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 8106ca0:	e01b      	b.n	8106cda <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x48>
	  if (__depth_limit == 0)
 8106ca2:	687b      	ldr	r3, [r7, #4]
 8106ca4:	2b00      	cmp	r3, #0
 8106ca6:	d106      	bne.n	8106cb6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 8106ca8:	4633      	mov	r3, r6
 8106caa:	68ba      	ldr	r2, [r7, #8]
 8106cac:	68b9      	ldr	r1, [r7, #8]
 8106cae:	68f8      	ldr	r0, [r7, #12]
 8106cb0:	f000 fad2 	bl	8107258 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 8106cb4:	e021      	b.n	8106cfa <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 8106cb6:	687b      	ldr	r3, [r7, #4]
 8106cb8:	3b01      	subs	r3, #1
 8106cba:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 8106cbc:	462a      	mov	r2, r5
 8106cbe:	68b9      	ldr	r1, [r7, #8]
 8106cc0:	68f8      	ldr	r0, [r7, #12]
 8106cc2:	f000 fae0 	bl	8107286 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 8106cc6:	4603      	mov	r3, r0
 8106cc8:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8106cca:	4623      	mov	r3, r4
 8106ccc:	687a      	ldr	r2, [r7, #4]
 8106cce:	68b9      	ldr	r1, [r7, #8]
 8106cd0:	6978      	ldr	r0, [r7, #20]
 8106cd2:	f7ff ffde 	bl	8106c92 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 8106cd6:	697b      	ldr	r3, [r7, #20]
 8106cd8:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8106cda:	f107 020c 	add.w	r2, r7, #12
 8106cde:	f107 0308 	add.w	r3, r7, #8
 8106ce2:	4611      	mov	r1, r2
 8106ce4:	4618      	mov	r0, r3
 8106ce6:	f7ff ffbf 	bl	8106c68 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8106cea:	4603      	mov	r3, r0
 8106cec:	2b10      	cmp	r3, #16
 8106cee:	bfcc      	ite	gt
 8106cf0:	2301      	movgt	r3, #1
 8106cf2:	2300      	movle	r3, #0
 8106cf4:	b2db      	uxtb	r3, r3
 8106cf6:	2b00      	cmp	r3, #0
 8106cf8:	d1d3      	bne.n	8106ca2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x10>
    }
 8106cfa:	371c      	adds	r7, #28
 8106cfc:	46bd      	mov	sp, r7
 8106cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08106d00 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8106d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8106d02:	b085      	sub	sp, #20
 8106d04:	af00      	add	r7, sp, #0
 8106d06:	60f8      	str	r0, [r7, #12]
 8106d08:	60b9      	str	r1, [r7, #8]
 8106d0a:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 8106d0c:	f107 020c 	add.w	r2, r7, #12
 8106d10:	f107 0308 	add.w	r3, r7, #8
 8106d14:	4611      	mov	r1, r2
 8106d16:	4618      	mov	r0, r3
 8106d18:	f7ff ffa6 	bl	8106c68 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8106d1c:	4603      	mov	r3, r0
 8106d1e:	2b10      	cmp	r3, #16
 8106d20:	bfcc      	ite	gt
 8106d22:	2301      	movgt	r3, #1
 8106d24:	2300      	movle	r3, #0
 8106d26:	b2db      	uxtb	r3, r3
 8106d28:	2b00      	cmp	r3, #0
 8106d2a:	d018      	beq.n	8106d5e <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8106d2c:	f107 030c 	add.w	r3, r7, #12
 8106d30:	2110      	movs	r1, #16
 8106d32:	4618      	mov	r0, r3
 8106d34:	f7ff fb45 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106d38:	4603      	mov	r3, r0
 8106d3a:	4632      	mov	r2, r6
 8106d3c:	4619      	mov	r1, r3
 8106d3e:	68f8      	ldr	r0, [r7, #12]
 8106d40:	f000 fae1 	bl	8107306 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 8106d44:	f107 030c 	add.w	r3, r7, #12
 8106d48:	2110      	movs	r1, #16
 8106d4a:	4618      	mov	r0, r3
 8106d4c:	f7ff fb39 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106d50:	4603      	mov	r3, r0
 8106d52:	462a      	mov	r2, r5
 8106d54:	68b9      	ldr	r1, [r7, #8]
 8106d56:	4618      	mov	r0, r3
 8106d58:	f000 fb3b 	bl	81073d2 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8106d5c:	e004      	b.n	8106d68 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 8106d5e:	4622      	mov	r2, r4
 8106d60:	68b9      	ldr	r1, [r7, #8]
 8106d62:	68f8      	ldr	r0, [r7, #12]
 8106d64:	f000 facf 	bl	8107306 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8106d68:	bf00      	nop
 8106d6a:	3714      	adds	r7, #20
 8106d6c:	46bd      	mov	sp, r7
 8106d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08106d70 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8106d70:	b480      	push	{r7}
 8106d72:	b083      	sub	sp, #12
 8106d74:	af00      	add	r7, sp, #0
 8106d76:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8106d78:	687b      	ldr	r3, [r7, #4]
 8106d7a:	4618      	mov	r0, r3
 8106d7c:	370c      	adds	r7, #12
 8106d7e:	46bd      	mov	sp, r7
 8106d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d84:	4770      	bx	lr

08106d86 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8106d86:	b580      	push	{r7, lr}
 8106d88:	b084      	sub	sp, #16
 8106d8a:	af00      	add	r7, sp, #0
 8106d8c:	60f8      	str	r0, [r7, #12]
 8106d8e:	60b9      	str	r1, [r7, #8]
 8106d90:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8106d92:	6878      	ldr	r0, [r7, #4]
 8106d94:	f7ff ffec 	bl	8106d70 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8106d98:	4603      	mov	r3, r0
 8106d9a:	461a      	mov	r2, r3
 8106d9c:	68b9      	ldr	r1, [r7, #8]
 8106d9e:	68f8      	ldr	r0, [r7, #12]
 8106da0:	f000 fb3c 	bl	810741c <_ZNSt15__new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>
	}
 8106da4:	bf00      	nop
 8106da6:	3710      	adds	r7, #16
 8106da8:	46bd      	mov	sp, r7
 8106daa:	bd80      	pop	{r7, pc}

08106dac <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8106dac:	b5b0      	push	{r4, r5, r7, lr}
 8106dae:	b08c      	sub	sp, #48	@ 0x30
 8106db0:	af00      	add	r7, sp, #0
 8106db2:	60f8      	str	r0, [r7, #12]
 8106db4:	60b9      	str	r1, [r7, #8]
 8106db6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8106db8:	4a59      	ldr	r2, [pc, #356]	@ (8106f20 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x174>)
 8106dba:	2101      	movs	r1, #1
 8106dbc:	68f8      	ldr	r0, [r7, #12]
 8106dbe:	f000 fb43 	bl	8107448 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 8106dc2:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8106dc4:	68fb      	ldr	r3, [r7, #12]
 8106dc6:	681b      	ldr	r3, [r3, #0]
 8106dc8:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8106dca:	68fb      	ldr	r3, [r7, #12]
 8106dcc:	685b      	ldr	r3, [r3, #4]
 8106dce:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8106dd0:	68f8      	ldr	r0, [r7, #12]
 8106dd2:	f7ff faa4 	bl	810631e <_ZNSt6vectorIfSaIfEE5beginEv>
 8106dd6:	4603      	mov	r3, r0
 8106dd8:	617b      	str	r3, [r7, #20]
 8106dda:	f107 0214 	add.w	r2, r7, #20
 8106dde:	f107 0308 	add.w	r3, r7, #8
 8106de2:	4611      	mov	r1, r2
 8106de4:	4618      	mov	r0, r3
 8106de6:	f7ff ff3f 	bl	8106c68 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8106dea:	4603      	mov	r3, r0
 8106dec:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8106dee:	68fb      	ldr	r3, [r7, #12]
 8106df0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8106df2:	4618      	mov	r0, r3
 8106df4:	f7ff fb8b 	bl	810650e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8106df8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8106dfa:	69bb      	ldr	r3, [r7, #24]
 8106dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8106dfe:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8106e00:	69fb      	ldr	r3, [r7, #28]
 8106e02:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8106e04:	69ba      	ldr	r2, [r7, #24]
 8106e06:	18d5      	adds	r5, r2, r3
 8106e08:	6878      	ldr	r0, [r7, #4]
 8106e0a:	f7ff ffb1 	bl	8106d70 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8106e0e:	4603      	mov	r3, r0
 8106e10:	461a      	mov	r2, r3
 8106e12:	4629      	mov	r1, r5
 8106e14:	4620      	mov	r0, r4
 8106e16:	f7ff ffb6 	bl	8106d86 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8106e1a:	2300      	movs	r3, #0
 8106e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8106e1e:	f7ff f99b 	bl	8106158 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>
 8106e22:	4603      	mov	r3, r0
 8106e24:	2b00      	cmp	r3, #0
 8106e26:	d027      	beq.n	8106e78 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8106e28:	f107 0308 	add.w	r3, r7, #8
 8106e2c:	4618      	mov	r0, r3
 8106e2e:	f000 fa08 	bl	8107242 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106e32:	4603      	mov	r3, r0
 8106e34:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8106e36:	68fb      	ldr	r3, [r7, #12]
 8106e38:	4618      	mov	r0, r3
 8106e3a:	f7ff faf0 	bl	810641e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8106e3e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8106e40:	69ba      	ldr	r2, [r7, #24]
 8106e42:	4621      	mov	r1, r4
 8106e44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8106e46:	f7ff fb76 	bl	8106536 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8106e4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 8106e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106e4e:	3304      	adds	r3, #4
 8106e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8106e52:	f107 0308 	add.w	r3, r7, #8
 8106e56:	4618      	mov	r0, r3
 8106e58:	f000 f9f3 	bl	8107242 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106e5c:	4603      	mov	r3, r0
 8106e5e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8106e60:	68fb      	ldr	r3, [r7, #12]
 8106e62:	4618      	mov	r0, r3
 8106e64:	f7ff fadb 	bl	810641e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8106e68:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8106e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8106e6c:	6a39      	ldr	r1, [r7, #32]
 8106e6e:	4620      	mov	r0, r4
 8106e70:	f7ff fb61 	bl	8106536 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8106e74:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8106e76:	e026      	b.n	8106ec6 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8106e78:	f107 0308 	add.w	r3, r7, #8
 8106e7c:	4618      	mov	r0, r3
 8106e7e:	f000 f9e0 	bl	8107242 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106e82:	4603      	mov	r3, r0
 8106e84:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8106e86:	68fb      	ldr	r3, [r7, #12]
 8106e88:	4618      	mov	r0, r3
 8106e8a:	f7ff fac8 	bl	810641e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8106e8e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8106e90:	69ba      	ldr	r2, [r7, #24]
 8106e92:	4621      	mov	r1, r4
 8106e94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8106e96:	f000 fb1e 	bl	81074d6 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8106e9a:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 8106e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106e9e:	3304      	adds	r3, #4
 8106ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		(__position.base(), __old_finish,
 8106ea2:	f107 0308 	add.w	r3, r7, #8
 8106ea6:	4618      	mov	r0, r3
 8106ea8:	f000 f9cb 	bl	8107242 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106eac:	4603      	mov	r3, r0
 8106eae:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8106eb0:	68fb      	ldr	r3, [r7, #12]
 8106eb2:	4618      	mov	r0, r3
 8106eb4:	f7ff fab3 	bl	810641e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8106eb8:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8106eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8106ebc:	6a39      	ldr	r1, [r7, #32]
 8106ebe:	4620      	mov	r0, r4
 8106ec0:	f000 fb09 	bl	81074d6 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8106ec4:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8106ec6:	f7ff f947 	bl	8106158 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>
 8106eca:	4603      	mov	r3, r0
 8106ecc:	f083 0301 	eor.w	r3, r3, #1
 8106ed0:	b2db      	uxtb	r3, r3
 8106ed2:	2b00      	cmp	r3, #0
 8106ed4:	d009      	beq.n	8106eea <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8106ed6:	68fb      	ldr	r3, [r7, #12]
 8106ed8:	4618      	mov	r0, r3
 8106eda:	f7ff faa0 	bl	810641e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8106ede:	4603      	mov	r3, r0
 8106ee0:	461a      	mov	r2, r3
 8106ee2:	6a39      	ldr	r1, [r7, #32]
 8106ee4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8106ee6:	f7ff faa5 	bl	8106434 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 8106eea:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8106eec:	68fb      	ldr	r3, [r7, #12]
 8106eee:	689a      	ldr	r2, [r3, #8]
 8106ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106ef2:	1ad3      	subs	r3, r2, r3
 8106ef4:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8106ef6:	461a      	mov	r2, r3
 8106ef8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8106efa:	f7ff fad4 	bl	81064a6 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 8106efe:	68fb      	ldr	r3, [r7, #12]
 8106f00:	69ba      	ldr	r2, [r7, #24]
 8106f02:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8106f04:	68fb      	ldr	r3, [r7, #12]
 8106f06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8106f08:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8106f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106f0c:	009b      	lsls	r3, r3, #2
 8106f0e:	69ba      	ldr	r2, [r7, #24]
 8106f10:	441a      	add	r2, r3
 8106f12:	68fb      	ldr	r3, [r7, #12]
 8106f14:	609a      	str	r2, [r3, #8]
    }
 8106f16:	bf00      	nop
 8106f18:	3730      	adds	r7, #48	@ 0x30
 8106f1a:	46bd      	mov	sp, r7
 8106f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8106f1e:	bf00      	nop
 8106f20:	0811f4d4 	.word	0x0811f4d4

08106f24 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8106f24:	b590      	push	{r4, r7, lr}
 8106f26:	b083      	sub	sp, #12
 8106f28:	af00      	add	r7, sp, #0
 8106f2a:	6078      	str	r0, [r7, #4]
 8106f2c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8106f2e:	6878      	ldr	r0, [r7, #4]
 8106f30:	f000 f987 	bl	8107242 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106f34:	4603      	mov	r3, r0
 8106f36:	681c      	ldr	r4, [r3, #0]
 8106f38:	6838      	ldr	r0, [r7, #0]
 8106f3a:	f000 f982 	bl	8107242 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106f3e:	4603      	mov	r3, r0
 8106f40:	681b      	ldr	r3, [r3, #0]
 8106f42:	429c      	cmp	r4, r3
 8106f44:	bf0c      	ite	eq
 8106f46:	2301      	moveq	r3, #1
 8106f48:	2300      	movne	r3, #0
 8106f4a:	b2db      	uxtb	r3, r3
 8106f4c:	4618      	mov	r0, r3
 8106f4e:	370c      	adds	r7, #12
 8106f50:	46bd      	mov	sp, r7
 8106f52:	bd90      	pop	{r4, r7, pc}

08106f54 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 8106f54:	b580      	push	{r7, lr}
 8106f56:	b084      	sub	sp, #16
 8106f58:	af00      	add	r7, sp, #0
 8106f5a:	60f8      	str	r0, [r7, #12]
 8106f5c:	60b9      	str	r1, [r7, #8]
 8106f5e:	607a      	str	r2, [r7, #4]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8106f60:	e00c      	b.n	8106f7c <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_+0x28>
	std::iter_swap(__first1, __first2);
 8106f62:	6879      	ldr	r1, [r7, #4]
 8106f64:	68f8      	ldr	r0, [r7, #12]
 8106f66:	f000 f856 	bl	8107016 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8106f6a:	f107 030c 	add.w	r3, r7, #12
 8106f6e:	4618      	mov	r0, r3
 8106f70:	f000 f868 	bl	8107044 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 8106f74:	1d3b      	adds	r3, r7, #4
 8106f76:	4618      	mov	r0, r3
 8106f78:	f000 f864 	bl	8107044 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 8106f7c:	f107 0208 	add.w	r2, r7, #8
 8106f80:	f107 030c 	add.w	r3, r7, #12
 8106f84:	4611      	mov	r1, r2
 8106f86:	4618      	mov	r0, r3
 8106f88:	f7ff fe56 	bl	8106c38 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8106f8c:	4603      	mov	r3, r0
 8106f8e:	2b00      	cmp	r3, #0
 8106f90:	d1e7      	bne.n	8106f62 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_+0xe>
      return __first2;
 8106f92:	687b      	ldr	r3, [r7, #4]
    }
 8106f94:	4618      	mov	r0, r3
 8106f96:	3710      	adds	r7, #16
 8106f98:	46bd      	mov	sp, r7
 8106f9a:	bd80      	pop	{r7, pc}

08106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8106f9c:	b480      	push	{r7}
 8106f9e:	b083      	sub	sp, #12
 8106fa0:	af00      	add	r7, sp, #0
 8106fa2:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8106fa4:	687b      	ldr	r3, [r7, #4]
 8106fa6:	681b      	ldr	r3, [r3, #0]
 8106fa8:	4618      	mov	r0, r3
 8106faa:	370c      	adds	r7, #12
 8106fac:	46bd      	mov	sp, r7
 8106fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fb2:	4770      	bx	lr

08106fb4 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move(_II __first, _II __last, _OI __result)
 8106fb4:	b590      	push	{r4, r7, lr}
 8106fb6:	b085      	sub	sp, #20
 8106fb8:	af00      	add	r7, sp, #0
 8106fba:	60f8      	str	r0, [r7, #12]
 8106fbc:	60b9      	str	r1, [r7, #8]
 8106fbe:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 8106fc0:	68f8      	ldr	r0, [r7, #12]
 8106fc2:	f000 faa1 	bl	8107508 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 8106fc6:	4604      	mov	r4, r0
 8106fc8:	68b8      	ldr	r0, [r7, #8]
 8106fca:	f000 fa9d 	bl	8107508 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 8106fce:	4603      	mov	r3, r0
 8106fd0:	687a      	ldr	r2, [r7, #4]
 8106fd2:	4619      	mov	r1, r3
 8106fd4:	4620      	mov	r0, r4
 8106fd6:	f000 faa2 	bl	810751e <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 8106fda:	4603      	mov	r3, r0
    }
 8106fdc:	4618      	mov	r0, r3
 8106fde:	3714      	adds	r7, #20
 8106fe0:	46bd      	mov	sp, r7
 8106fe2:	bd90      	pop	{r4, r7, pc}

08106fe4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8106fe4:	b580      	push	{r7, lr}
 8106fe6:	b084      	sub	sp, #16
 8106fe8:	af00      	add	r7, sp, #0
 8106fea:	6078      	str	r0, [r7, #4]
 8106fec:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	681a      	ldr	r2, [r3, #0]
 8106ff2:	683b      	ldr	r3, [r7, #0]
 8106ff4:	009b      	lsls	r3, r3, #2
 8106ff6:	425b      	negs	r3, r3
 8106ff8:	4413      	add	r3, r2
 8106ffa:	60fb      	str	r3, [r7, #12]
 8106ffc:	f107 020c 	add.w	r2, r7, #12
 8107000:	f107 0308 	add.w	r3, r7, #8
 8107004:	4611      	mov	r1, r2
 8107006:	4618      	mov	r0, r3
 8107008:	f7ff fb33 	bl	8106672 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 810700c:	68bb      	ldr	r3, [r7, #8]
 810700e:	4618      	mov	r0, r3
 8107010:	3710      	adds	r7, #16
 8107012:	46bd      	mov	sp, r7
 8107014:	bd80      	pop	{r7, pc}

08107016 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8107016:	b590      	push	{r4, r7, lr}
 8107018:	b083      	sub	sp, #12
 810701a:	af00      	add	r7, sp, #0
 810701c:	6078      	str	r0, [r7, #4]
 810701e:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8107020:	1d3b      	adds	r3, r7, #4
 8107022:	4618      	mov	r0, r3
 8107024:	f7ff ffba 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107028:	4604      	mov	r4, r0
 810702a:	463b      	mov	r3, r7
 810702c:	4618      	mov	r0, r3
 810702e:	f7ff ffb5 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107032:	4603      	mov	r3, r0
 8107034:	4619      	mov	r1, r3
 8107036:	4620      	mov	r0, r4
 8107038:	f000 fa92 	bl	8107560 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 810703c:	bf00      	nop
 810703e:	370c      	adds	r7, #12
 8107040:	46bd      	mov	sp, r7
 8107042:	bd90      	pop	{r4, r7, pc}

08107044 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8107044:	b480      	push	{r7}
 8107046:	b083      	sub	sp, #12
 8107048:	af00      	add	r7, sp, #0
 810704a:	6078      	str	r0, [r7, #4]
	++_M_current;
 810704c:	687b      	ldr	r3, [r7, #4]
 810704e:	681b      	ldr	r3, [r3, #0]
 8107050:	1d1a      	adds	r2, r3, #4
 8107052:	687b      	ldr	r3, [r7, #4]
 8107054:	601a      	str	r2, [r3, #0]
	return *this;
 8107056:	687b      	ldr	r3, [r7, #4]
      }
 8107058:	4618      	mov	r0, r3
 810705a:	370c      	adds	r7, #12
 810705c:	46bd      	mov	sp, r7
 810705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107062:	4770      	bx	lr

08107064 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8107064:	b580      	push	{r7, lr}
 8107066:	b084      	sub	sp, #16
 8107068:	af00      	add	r7, sp, #0
 810706a:	6078      	str	r0, [r7, #4]
 810706c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810706e:	6878      	ldr	r0, [r7, #4]
 8107070:	f000 fa95 	bl	810759e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8107074:	4603      	mov	r3, r0
 8107076:	681b      	ldr	r3, [r3, #0]
 8107078:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 810707a:	6838      	ldr	r0, [r7, #0]
 810707c:	f000 fa8f 	bl	810759e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8107080:	4603      	mov	r3, r0
 8107082:	681a      	ldr	r2, [r3, #0]
 8107084:	687b      	ldr	r3, [r7, #4]
 8107086:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8107088:	f107 030c 	add.w	r3, r7, #12
 810708c:	4618      	mov	r0, r3
 810708e:	f000 fa86 	bl	810759e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8107092:	4603      	mov	r3, r0
 8107094:	681a      	ldr	r2, [r3, #0]
 8107096:	683b      	ldr	r3, [r7, #0]
 8107098:	601a      	str	r2, [r3, #0]
    }
 810709a:	bf00      	nop
 810709c:	3710      	adds	r7, #16
 810709e:	46bd      	mov	sp, r7
 81070a0:	bd80      	pop	{r7, pc}

081070a2 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 81070a2:	b590      	push	{r4, r7, lr}
 81070a4:	b085      	sub	sp, #20
 81070a6:	af00      	add	r7, sp, #0
 81070a8:	60f8      	str	r0, [r7, #12]
 81070aa:	60b9      	str	r1, [r7, #8]
 81070ac:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 81070ae:	68f8      	ldr	r0, [r7, #12]
 81070b0:	f000 fa2a 	bl	8107508 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 81070b4:	4604      	mov	r4, r0
 81070b6:	68b8      	ldr	r0, [r7, #8]
 81070b8:	f000 fa26 	bl	8107508 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 81070bc:	4603      	mov	r3, r0
 81070be:	687a      	ldr	r2, [r7, #4]
 81070c0:	4619      	mov	r1, r3
 81070c2:	4620      	mov	r0, r4
 81070c4:	f000 fa76 	bl	81075b4 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 81070c8:	4603      	mov	r3, r0
    }
 81070ca:	4618      	mov	r0, r3
 81070cc:	3714      	adds	r7, #20
 81070ce:	46bd      	mov	sp, r7
 81070d0:	bd90      	pop	{r4, r7, pc}

081070d2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 81070d2:	b480      	push	{r7}
 81070d4:	b083      	sub	sp, #12
 81070d6:	af00      	add	r7, sp, #0
 81070d8:	6078      	str	r0, [r7, #4]
	--_M_current;
 81070da:	687b      	ldr	r3, [r7, #4]
 81070dc:	681b      	ldr	r3, [r3, #0]
 81070de:	1f1a      	subs	r2, r3, #4
 81070e0:	687b      	ldr	r3, [r7, #4]
 81070e2:	601a      	str	r2, [r3, #0]
	return *this;
 81070e4:	687b      	ldr	r3, [r7, #4]
      }
 81070e6:	4618      	mov	r0, r3
 81070e8:	370c      	adds	r7, #12
 81070ea:	46bd      	mov	sp, r7
 81070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070f0:	4770      	bx	lr

081070f2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 81070f2:	b480      	push	{r7}
 81070f4:	b083      	sub	sp, #12
 81070f6:	af00      	add	r7, sp, #0
 81070f8:	6078      	str	r0, [r7, #4]
 81070fa:	6039      	str	r1, [r7, #0]
 81070fc:	bf00      	nop
 81070fe:	370c      	adds	r7, #12
 8107100:	46bd      	mov	sp, r7
 8107102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107106:	4770      	bx	lr

08107108 <_ZNSt15__new_allocatorIfE10deallocateEPfj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8107108:	b580      	push	{r7, lr}
 810710a:	b084      	sub	sp, #16
 810710c:	af00      	add	r7, sp, #0
 810710e:	60f8      	str	r0, [r7, #12]
 8107110:	60b9      	str	r1, [r7, #8]
 8107112:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8107114:	687b      	ldr	r3, [r7, #4]
 8107116:	009b      	lsls	r3, r3, #2
 8107118:	4619      	mov	r1, r3
 810711a:	68b8      	ldr	r0, [r7, #8]
 810711c:	f015 ff0e 	bl	811cf3c <_ZdlPvj>
      }
 8107120:	bf00      	nop
 8107122:	3710      	adds	r7, #16
 8107124:	46bd      	mov	sp, r7
 8107126:	bd80      	pop	{r7, pc}

08107128 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8107128:	b580      	push	{r7, lr}
 810712a:	b082      	sub	sp, #8
 810712c:	af00      	add	r7, sp, #0
 810712e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8107130:	6878      	ldr	r0, [r7, #4]
 8107132:	f000 fa60 	bl	81075f6 <_ZNKSt15__new_allocatorIfE8max_sizeEv>
 8107136:	4603      	mov	r3, r0
      }
 8107138:	4618      	mov	r0, r3
 810713a:	3708      	adds	r7, #8
 810713c:	46bd      	mov	sp, r7
 810713e:	bd80      	pop	{r7, pc}

08107140 <_ZNSt15__new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8107140:	b580      	push	{r7, lr}
 8107142:	b084      	sub	sp, #16
 8107144:	af00      	add	r7, sp, #0
 8107146:	60f8      	str	r0, [r7, #12]
 8107148:	60b9      	str	r1, [r7, #8]
 810714a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 810714c:	68f8      	ldr	r0, [r7, #12]
 810714e:	f000 fa5e 	bl	810760e <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>
 8107152:	4602      	mov	r2, r0
 8107154:	68bb      	ldr	r3, [r7, #8]
 8107156:	4293      	cmp	r3, r2
 8107158:	bf8c      	ite	hi
 810715a:	2301      	movhi	r3, #1
 810715c:	2300      	movls	r3, #0
 810715e:	b2db      	uxtb	r3, r3
 8107160:	2b00      	cmp	r3, #0
 8107162:	bf14      	ite	ne
 8107164:	2301      	movne	r3, #1
 8107166:	2300      	moveq	r3, #0
 8107168:	b2db      	uxtb	r3, r3
 810716a:	2b00      	cmp	r3, #0
 810716c:	d007      	beq.n	810717e <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 810716e:	68bb      	ldr	r3, [r7, #8]
 8107170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107174:	d301      	bcc.n	810717a <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8107176:	f015 ffc3 	bl	811d100 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 810717a:	f015 ffbe 	bl	811d0fa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 810717e:	68bb      	ldr	r3, [r7, #8]
 8107180:	009b      	lsls	r3, r3, #2
 8107182:	4618      	mov	r0, r3
 8107184:	f015 feeb 	bl	811cf5e <_Znwj>
 8107188:	4603      	mov	r3, r0
      }
 810718a:	4618      	mov	r0, r3
 810718c:	3710      	adds	r7, #16
 810718e:	46bd      	mov	sp, r7
 8107190:	bd80      	pop	{r7, pc}

08107192 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8107192:	b5b0      	push	{r4, r5, r7, lr}
 8107194:	b084      	sub	sp, #16
 8107196:	af00      	add	r7, sp, #0
 8107198:	60f8      	str	r0, [r7, #12]
 810719a:	60b9      	str	r1, [r7, #8]
 810719c:	607a      	str	r2, [r7, #4]
 810719e:	603b      	str	r3, [r7, #0]
      return std::__relocate_a_1(std::__niter_base(__first),
 81071a0:	68f8      	ldr	r0, [r7, #12]
 81071a2:	f000 fa40 	bl	8107626 <_ZSt12__niter_baseIPfET_S1_>
 81071a6:	4604      	mov	r4, r0
 81071a8:	68b8      	ldr	r0, [r7, #8]
 81071aa:	f000 fa3c 	bl	8107626 <_ZSt12__niter_baseIPfET_S1_>
 81071ae:	4605      	mov	r5, r0
 81071b0:	6878      	ldr	r0, [r7, #4]
 81071b2:	f000 fa38 	bl	8107626 <_ZSt12__niter_baseIPfET_S1_>
 81071b6:	4602      	mov	r2, r0
 81071b8:	683b      	ldr	r3, [r7, #0]
 81071ba:	4629      	mov	r1, r5
 81071bc:	4620      	mov	r0, r4
 81071be:	f000 fa3d 	bl	810763c <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 81071c2:	4603      	mov	r3, r0
    }
 81071c4:	4618      	mov	r0, r3
 81071c6:	3710      	adds	r7, #16
 81071c8:	46bd      	mov	sp, r7
 81071ca:	bdb0      	pop	{r4, r5, r7, pc}

081071cc <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 81071cc:	b480      	push	{r7}
 81071ce:	b083      	sub	sp, #12
 81071d0:	af00      	add	r7, sp, #0
 81071d2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 81071d4:	687b      	ldr	r3, [r7, #4]
 81071d6:	4618      	mov	r0, r3
 81071d8:	370c      	adds	r7, #12
 81071da:	46bd      	mov	sp, r7
 81071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071e0:	4770      	bx	lr

081071e2 <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 81071e2:	b580      	push	{r7, lr}
 81071e4:	b086      	sub	sp, #24
 81071e6:	af00      	add	r7, sp, #0
 81071e8:	60f8      	str	r0, [r7, #12]
 81071ea:	60b9      	str	r1, [r7, #8]
 81071ec:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 81071ee:	2301      	movs	r3, #1
 81071f0:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 81071f2:	2301      	movs	r3, #1
 81071f4:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 81071f6:	687a      	ldr	r2, [r7, #4]
 81071f8:	68b9      	ldr	r1, [r7, #8]
 81071fa:	68f8      	ldr	r0, [r7, #12]
 81071fc:	f000 fa3c 	bl	8107678 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>
 8107200:	4603      	mov	r3, r0
    }
 8107202:	4618      	mov	r0, r3
 8107204:	3718      	adds	r7, #24
 8107206:	46bd      	mov	sp, r7
 8107208:	bd80      	pop	{r7, pc}

0810720a <_ZNSt15__new_allocatorIfEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 810720a:	b480      	push	{r7}
 810720c:	b083      	sub	sp, #12
 810720e:	af00      	add	r7, sp, #0
 8107210:	6078      	str	r0, [r7, #4]
 8107212:	6039      	str	r1, [r7, #0]
 8107214:	687b      	ldr	r3, [r7, #4]
 8107216:	4618      	mov	r0, r3
 8107218:	370c      	adds	r7, #12
 810721a:	46bd      	mov	sp, r7
 810721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107220:	4770      	bx	lr

08107222 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8107222:	b580      	push	{r7, lr}
 8107224:	b084      	sub	sp, #16
 8107226:	af00      	add	r7, sp, #0
 8107228:	60f8      	str	r0, [r7, #12]
 810722a:	60b9      	str	r1, [r7, #8]
 810722c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 810722e:	687a      	ldr	r2, [r7, #4]
 8107230:	68b9      	ldr	r1, [r7, #8]
 8107232:	68f8      	ldr	r0, [r7, #12]
 8107234:	f000 fa30 	bl	8107698 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8107238:	4603      	mov	r3, r0
 810723a:	4618      	mov	r0, r3
 810723c:	3710      	adds	r7, #16
 810723e:	46bd      	mov	sp, r7
 8107240:	bd80      	pop	{r7, pc}

08107242 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8107242:	b480      	push	{r7}
 8107244:	b083      	sub	sp, #12
 8107246:	af00      	add	r7, sp, #0
 8107248:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 810724a:	687b      	ldr	r3, [r7, #4]
 810724c:	4618      	mov	r0, r3
 810724e:	370c      	adds	r7, #12
 8107250:	46bd      	mov	sp, r7
 8107252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107256:	4770      	bx	lr

08107258 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 8107258:	b590      	push	{r4, r7, lr}
 810725a:	b085      	sub	sp, #20
 810725c:	af00      	add	r7, sp, #0
 810725e:	60f8      	str	r0, [r7, #12]
 8107260:	60b9      	str	r1, [r7, #8]
 8107262:	607a      	str	r2, [r7, #4]
 8107264:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 8107266:	4623      	mov	r3, r4
 8107268:	687a      	ldr	r2, [r7, #4]
 810726a:	68b9      	ldr	r1, [r7, #8]
 810726c:	68f8      	ldr	r0, [r7, #12]
 810726e:	f000 fa2b 	bl	81076c8 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 8107272:	463b      	mov	r3, r7
 8107274:	461a      	mov	r2, r3
 8107276:	68b9      	ldr	r1, [r7, #8]
 8107278:	68f8      	ldr	r0, [r7, #12]
 810727a:	f000 fa58 	bl	810772e <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 810727e:	bf00      	nop
 8107280:	3714      	adds	r7, #20
 8107282:	46bd      	mov	sp, r7
 8107284:	bd90      	pop	{r4, r7, pc}

08107286 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8107286:	b5f0      	push	{r4, r5, r6, r7, lr}
 8107288:	b089      	sub	sp, #36	@ 0x24
 810728a:	af02      	add	r7, sp, #8
 810728c:	60f8      	str	r0, [r7, #12]
 810728e:	60b9      	str	r1, [r7, #8]
 8107290:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8107292:	f107 020c 	add.w	r2, r7, #12
 8107296:	f107 0308 	add.w	r3, r7, #8
 810729a:	4611      	mov	r1, r2
 810729c:	4618      	mov	r0, r3
 810729e:	f7ff fce3 	bl	8106c68 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81072a2:	4603      	mov	r3, r0
 81072a4:	0fda      	lsrs	r2, r3, #31
 81072a6:	4413      	add	r3, r2
 81072a8:	105b      	asrs	r3, r3, #1
 81072aa:	461a      	mov	r2, r3
 81072ac:	f107 030c 	add.w	r3, r7, #12
 81072b0:	4611      	mov	r1, r2
 81072b2:	4618      	mov	r0, r3
 81072b4:	f7ff f885 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81072b8:	4603      	mov	r3, r0
 81072ba:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 81072bc:	f107 030c 	add.w	r3, r7, #12
 81072c0:	2101      	movs	r1, #1
 81072c2:	4618      	mov	r0, r3
 81072c4:	f7ff f87d 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81072c8:	4604      	mov	r4, r0
 81072ca:	f107 0308 	add.w	r3, r7, #8
 81072ce:	2101      	movs	r1, #1
 81072d0:	4618      	mov	r0, r3
 81072d2:	f7ff fe87 	bl	8106fe4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 81072d6:	4603      	mov	r3, r0
 81072d8:	f88d 5000 	strb.w	r5, [sp]
 81072dc:	697a      	ldr	r2, [r7, #20]
 81072de:	4621      	mov	r1, r4
 81072e0:	68f8      	ldr	r0, [r7, #12]
 81072e2:	f000 fa4b 	bl	810777c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 81072e6:	f107 030c 	add.w	r3, r7, #12
 81072ea:	2101      	movs	r1, #1
 81072ec:	4618      	mov	r0, r3
 81072ee:	f7ff f868 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81072f2:	4633      	mov	r3, r6
 81072f4:	68fa      	ldr	r2, [r7, #12]
 81072f6:	68b9      	ldr	r1, [r7, #8]
 81072f8:	f000 fa95 	bl	8107826 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 81072fc:	4603      	mov	r3, r0
    }
 81072fe:	4618      	mov	r0, r3
 8107300:	371c      	adds	r7, #28
 8107302:	46bd      	mov	sp, r7
 8107304:	bdf0      	pop	{r4, r5, r6, r7, pc}

08107306 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 8107306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8107308:	b087      	sub	sp, #28
 810730a:	af00      	add	r7, sp, #0
 810730c:	60f8      	str	r0, [r7, #12]
 810730e:	60b9      	str	r1, [r7, #8]
 8107310:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 8107312:	f107 0208 	add.w	r2, r7, #8
 8107316:	f107 030c 	add.w	r3, r7, #12
 810731a:	4611      	mov	r1, r2
 810731c:	4618      	mov	r0, r3
 810731e:	f7ff fe01 	bl	8106f24 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8107322:	4603      	mov	r3, r0
 8107324:	2b00      	cmp	r3, #0
 8107326:	d150      	bne.n	81073ca <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xc4>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8107328:	f107 030c 	add.w	r3, r7, #12
 810732c:	2101      	movs	r1, #1
 810732e:	4618      	mov	r0, r3
 8107330:	f7ff f847 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107334:	4603      	mov	r3, r0
 8107336:	617b      	str	r3, [r7, #20]
 8107338:	e03b      	b.n	81073b2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
	  if (__comp(__i, __first))
 810733a:	1d3b      	adds	r3, r7, #4
 810733c:	68fa      	ldr	r2, [r7, #12]
 810733e:	6979      	ldr	r1, [r7, #20]
 8107340:	4618      	mov	r0, r3
 8107342:	f000 fab8 	bl	81078b6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8107346:	4603      	mov	r3, r0
 8107348:	2b00      	cmp	r3, #0
 810734a:	d026      	beq.n	810739a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 810734c:	f107 0314 	add.w	r3, r7, #20
 8107350:	4618      	mov	r0, r3
 8107352:	f7ff fe23 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107356:	4603      	mov	r3, r0
 8107358:	4618      	mov	r0, r3
 810735a:	f7ff f9c7 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810735e:	4603      	mov	r3, r0
 8107360:	681b      	ldr	r3, [r3, #0]
 8107362:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8107364:	f107 0314 	add.w	r3, r7, #20
 8107368:	2101      	movs	r1, #1
 810736a:	4618      	mov	r0, r3
 810736c:	f7ff f829 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107370:	4603      	mov	r3, r0
 8107372:	461a      	mov	r2, r3
 8107374:	6979      	ldr	r1, [r7, #20]
 8107376:	68f8      	ldr	r0, [r7, #12]
 8107378:	f7ff fe93 	bl	81070a2 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 810737c:	f107 0310 	add.w	r3, r7, #16
 8107380:	4618      	mov	r0, r3
 8107382:	f7ff f9b3 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8107386:	4604      	mov	r4, r0
 8107388:	f107 030c 	add.w	r3, r7, #12
 810738c:	4618      	mov	r0, r3
 810738e:	f7ff fe05 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107392:	4602      	mov	r2, r0
 8107394:	6823      	ldr	r3, [r4, #0]
 8107396:	6013      	str	r3, [r2, #0]
 8107398:	e006      	b.n	81073a8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 810739a:	4630      	mov	r0, r6
 810739c:	f7fe fc93 	bl	8105cc6 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 81073a0:	4629      	mov	r1, r5
 81073a2:	6978      	ldr	r0, [r7, #20]
 81073a4:	f000 faac 	bl	8107900 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 81073a8:	f107 0314 	add.w	r3, r7, #20
 81073ac:	4618      	mov	r0, r3
 81073ae:	f7ff fe49 	bl	8107044 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 81073b2:	f107 0208 	add.w	r2, r7, #8
 81073b6:	f107 0314 	add.w	r3, r7, #20
 81073ba:	4611      	mov	r1, r2
 81073bc:	4618      	mov	r0, r3
 81073be:	f7ff fc3b 	bl	8106c38 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 81073c2:	4603      	mov	r3, r0
 81073c4:	2b00      	cmp	r3, #0
 81073c6:	d1b8      	bne.n	810733a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x34>
 81073c8:	e000      	b.n	81073cc <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xc6>
      if (__first == __last) return;
 81073ca:	bf00      	nop
    }
 81073cc:	371c      	adds	r7, #28
 81073ce:	46bd      	mov	sp, r7
 81073d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

081073d2 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 81073d2:	b5b0      	push	{r4, r5, r7, lr}
 81073d4:	b086      	sub	sp, #24
 81073d6:	af00      	add	r7, sp, #0
 81073d8:	60f8      	str	r0, [r7, #12]
 81073da:	60b9      	str	r1, [r7, #8]
 81073dc:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 81073de:	68fb      	ldr	r3, [r7, #12]
 81073e0:	617b      	str	r3, [r7, #20]
 81073e2:	e00b      	b.n	81073fc <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 81073e4:	4628      	mov	r0, r5
 81073e6:	f7fe fc6e 	bl	8105cc6 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 81073ea:	4621      	mov	r1, r4
 81073ec:	6978      	ldr	r0, [r7, #20]
 81073ee:	f000 fa87 	bl	8107900 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 81073f2:	f107 0314 	add.w	r3, r7, #20
 81073f6:	4618      	mov	r0, r3
 81073f8:	f7ff fe24 	bl	8107044 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 81073fc:	f107 0208 	add.w	r2, r7, #8
 8107400:	f107 0314 	add.w	r3, r7, #20
 8107404:	4611      	mov	r1, r2
 8107406:	4618      	mov	r0, r3
 8107408:	f7ff fc16 	bl	8106c38 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810740c:	4603      	mov	r3, r0
 810740e:	2b00      	cmp	r3, #0
 8107410:	d1e8      	bne.n	81073e4 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x12>
    }
 8107412:	bf00      	nop
 8107414:	bf00      	nop
 8107416:	3718      	adds	r7, #24
 8107418:	46bd      	mov	sp, r7
 810741a:	bdb0      	pop	{r4, r5, r7, pc}

0810741c <_ZNSt15__new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 810741c:	b590      	push	{r4, r7, lr}
 810741e:	b085      	sub	sp, #20
 8107420:	af00      	add	r7, sp, #0
 8107422:	60f8      	str	r0, [r7, #12]
 8107424:	60b9      	str	r1, [r7, #8]
 8107426:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8107428:	68bb      	ldr	r3, [r7, #8]
 810742a:	4619      	mov	r1, r3
 810742c:	2004      	movs	r0, #4
 810742e:	f7f9 fd35 	bl	8100e9c <_ZnwjPv>
 8107432:	4604      	mov	r4, r0
 8107434:	6878      	ldr	r0, [r7, #4]
 8107436:	f7ff fc9b 	bl	8106d70 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810743a:	4603      	mov	r3, r0
 810743c:	681b      	ldr	r3, [r3, #0]
 810743e:	6023      	str	r3, [r4, #0]
 8107440:	bf00      	nop
 8107442:	3714      	adds	r7, #20
 8107444:	46bd      	mov	sp, r7
 8107446:	bd90      	pop	{r4, r7, pc}

08107448 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8107448:	b590      	push	{r4, r7, lr}
 810744a:	b087      	sub	sp, #28
 810744c:	af00      	add	r7, sp, #0
 810744e:	60f8      	str	r0, [r7, #12]
 8107450:	60b9      	str	r1, [r7, #8]
 8107452:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8107454:	68f8      	ldr	r0, [r7, #12]
 8107456:	f7ff f839 	bl	81064cc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810745a:	4604      	mov	r4, r0
 810745c:	68f8      	ldr	r0, [r7, #12]
 810745e:	f7fe ff11 	bl	8106284 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8107462:	4603      	mov	r3, r0
 8107464:	1ae2      	subs	r2, r4, r3
 8107466:	68bb      	ldr	r3, [r7, #8]
 8107468:	429a      	cmp	r2, r3
 810746a:	bf34      	ite	cc
 810746c:	2301      	movcc	r3, #1
 810746e:	2300      	movcs	r3, #0
 8107470:	b2db      	uxtb	r3, r3
 8107472:	2b00      	cmp	r3, #0
 8107474:	d002      	beq.n	810747c <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8107476:	6878      	ldr	r0, [r7, #4]
 8107478:	f015 fe45 	bl	811d106 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 810747c:	68f8      	ldr	r0, [r7, #12]
 810747e:	f7fe ff01 	bl	8106284 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8107482:	4604      	mov	r4, r0
 8107484:	68f8      	ldr	r0, [r7, #12]
 8107486:	f7fe fefd 	bl	8106284 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810748a:	4603      	mov	r3, r0
 810748c:	613b      	str	r3, [r7, #16]
 810748e:	f107 0208 	add.w	r2, r7, #8
 8107492:	f107 0310 	add.w	r3, r7, #16
 8107496:	4611      	mov	r1, r2
 8107498:	4618      	mov	r0, r3
 810749a:	f7fc fc6d 	bl	8103d78 <_ZSt3maxIjERKT_S2_S2_>
 810749e:	4603      	mov	r3, r0
 81074a0:	681b      	ldr	r3, [r3, #0]
 81074a2:	4423      	add	r3, r4
 81074a4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 81074a6:	68f8      	ldr	r0, [r7, #12]
 81074a8:	f7fe feec 	bl	8106284 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 81074ac:	4602      	mov	r2, r0
 81074ae:	697b      	ldr	r3, [r7, #20]
 81074b0:	4293      	cmp	r3, r2
 81074b2:	d306      	bcc.n	81074c2 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 81074b4:	68f8      	ldr	r0, [r7, #12]
 81074b6:	f7ff f809 	bl	81064cc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 81074ba:	4602      	mov	r2, r0
 81074bc:	697b      	ldr	r3, [r7, #20]
 81074be:	4293      	cmp	r3, r2
 81074c0:	d904      	bls.n	81074cc <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 81074c2:	68f8      	ldr	r0, [r7, #12]
 81074c4:	f7ff f802 	bl	81064cc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 81074c8:	4603      	mov	r3, r0
 81074ca:	e000      	b.n	81074ce <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 81074cc:	697b      	ldr	r3, [r7, #20]
      }
 81074ce:	4618      	mov	r0, r3
 81074d0:	371c      	adds	r7, #28
 81074d2:	46bd      	mov	sp, r7
 81074d4:	bd90      	pop	{r4, r7, pc}

081074d6 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 81074d6:	b590      	push	{r4, r7, lr}
 81074d8:	b085      	sub	sp, #20
 81074da:	af00      	add	r7, sp, #0
 81074dc:	60f8      	str	r0, [r7, #12]
 81074de:	60b9      	str	r1, [r7, #8]
 81074e0:	607a      	str	r2, [r7, #4]
 81074e2:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 81074e4:	68f8      	ldr	r0, [r7, #12]
 81074e6:	f7ff f83a 	bl	810655e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 81074ea:	4604      	mov	r4, r0
 81074ec:	68b8      	ldr	r0, [r7, #8]
 81074ee:	f7ff f836 	bl	810655e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 81074f2:	4601      	mov	r1, r0
 81074f4:	683b      	ldr	r3, [r7, #0]
 81074f6:	687a      	ldr	r2, [r7, #4]
 81074f8:	4620      	mov	r0, r4
 81074fa:	f7ff fb20 	bl	8106b3e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
 81074fe:	4603      	mov	r3, r0
    }
 8107500:	4618      	mov	r0, r3
 8107502:	3714      	adds	r7, #20
 8107504:	46bd      	mov	sp, r7
 8107506:	bd90      	pop	{r4, r7, pc}

08107508 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
    __miter_base(_Iterator __it)
 8107508:	b480      	push	{r7}
 810750a:	b083      	sub	sp, #12
 810750c:	af00      	add	r7, sp, #0
 810750e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8107510:	687b      	ldr	r3, [r7, #4]
 8107512:	4618      	mov	r0, r3
 8107514:	370c      	adds	r7, #12
 8107516:	46bd      	mov	sp, r7
 8107518:	f85d 7b04 	ldr.w	r7, [sp], #4
 810751c:	4770      	bx	lr

0810751e <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 810751e:	b5b0      	push	{r4, r5, r7, lr}
 8107520:	b084      	sub	sp, #16
 8107522:	af00      	add	r7, sp, #0
 8107524:	60f8      	str	r0, [r7, #12]
 8107526:	60b9      	str	r1, [r7, #8]
 8107528:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 810752a:	68f8      	ldr	r0, [r7, #12]
 810752c:	f000 fa33 	bl	8107996 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8107530:	4604      	mov	r4, r0
 8107532:	68b8      	ldr	r0, [r7, #8]
 8107534:	f000 fa2f 	bl	8107996 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8107538:	4605      	mov	r5, r0
 810753a:	6878      	ldr	r0, [r7, #4]
 810753c:	f000 fa2b 	bl	8107996 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8107540:	4603      	mov	r3, r0
 8107542:	461a      	mov	r2, r3
 8107544:	4629      	mov	r1, r5
 8107546:	4620      	mov	r0, r4
 8107548:	f000 fa33 	bl	81079b2 <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>
 810754c:	4603      	mov	r3, r0
 810754e:	4619      	mov	r1, r3
 8107550:	6878      	ldr	r0, [r7, #4]
 8107552:	f000 fa3e 	bl	81079d2 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 8107556:	4603      	mov	r3, r0
    }
 8107558:	4618      	mov	r0, r3
 810755a:	3710      	adds	r7, #16
 810755c:	46bd      	mov	sp, r7
 810755e:	bdb0      	pop	{r4, r5, r7, pc}

08107560 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 8107560:	b580      	push	{r7, lr}
 8107562:	b084      	sub	sp, #16
 8107564:	af00      	add	r7, sp, #0
 8107566:	6078      	str	r0, [r7, #4]
 8107568:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810756a:	6878      	ldr	r0, [r7, #4]
 810756c:	f7ff f8be 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8107570:	4603      	mov	r3, r0
 8107572:	681b      	ldr	r3, [r3, #0]
 8107574:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8107576:	6838      	ldr	r0, [r7, #0]
 8107578:	f7ff f8b8 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810757c:	4603      	mov	r3, r0
 810757e:	681a      	ldr	r2, [r3, #0]
 8107580:	687b      	ldr	r3, [r7, #4]
 8107582:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8107584:	f107 030c 	add.w	r3, r7, #12
 8107588:	4618      	mov	r0, r3
 810758a:	f7ff f8af 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810758e:	4603      	mov	r3, r0
 8107590:	681a      	ldr	r2, [r3, #0]
 8107592:	683b      	ldr	r3, [r7, #0]
 8107594:	601a      	str	r2, [r3, #0]
    }
 8107596:	bf00      	nop
 8107598:	3710      	adds	r7, #16
 810759a:	46bd      	mov	sp, r7
 810759c:	bd80      	pop	{r7, pc}

0810759e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 810759e:	b480      	push	{r7}
 81075a0:	b083      	sub	sp, #12
 81075a2:	af00      	add	r7, sp, #0
 81075a4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 81075a6:	687b      	ldr	r3, [r7, #4]
 81075a8:	4618      	mov	r0, r3
 81075aa:	370c      	adds	r7, #12
 81075ac:	46bd      	mov	sp, r7
 81075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075b2:	4770      	bx	lr

081075b4 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 81075b4:	b5b0      	push	{r4, r5, r7, lr}
 81075b6:	b084      	sub	sp, #16
 81075b8:	af00      	add	r7, sp, #0
 81075ba:	60f8      	str	r0, [r7, #12]
 81075bc:	60b9      	str	r1, [r7, #8]
 81075be:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 81075c0:	68f8      	ldr	r0, [r7, #12]
 81075c2:	f000 f9e8 	bl	8107996 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 81075c6:	4604      	mov	r4, r0
 81075c8:	68b8      	ldr	r0, [r7, #8]
 81075ca:	f000 f9e4 	bl	8107996 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 81075ce:	4605      	mov	r5, r0
 81075d0:	6878      	ldr	r0, [r7, #4]
 81075d2:	f000 f9e0 	bl	8107996 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 81075d6:	4603      	mov	r3, r0
 81075d8:	461a      	mov	r2, r3
 81075da:	4629      	mov	r1, r5
 81075dc:	4620      	mov	r0, r4
 81075de:	f000 fa0f 	bl	8107a00 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 81075e2:	4603      	mov	r3, r0
 81075e4:	4619      	mov	r1, r3
 81075e6:	6878      	ldr	r0, [r7, #4]
 81075e8:	f000 f9f3 	bl	81079d2 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 81075ec:	4603      	mov	r3, r0
    }
 81075ee:	4618      	mov	r0, r3
 81075f0:	3710      	adds	r7, #16
 81075f2:	46bd      	mov	sp, r7
 81075f4:	bdb0      	pop	{r4, r5, r7, pc}

081075f6 <_ZNKSt15__new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 81075f6:	b580      	push	{r7, lr}
 81075f8:	b082      	sub	sp, #8
 81075fa:	af00      	add	r7, sp, #0
 81075fc:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 81075fe:	6878      	ldr	r0, [r7, #4]
 8107600:	f000 f805 	bl	810760e <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>
 8107604:	4603      	mov	r3, r0
 8107606:	4618      	mov	r0, r3
 8107608:	3708      	adds	r7, #8
 810760a:	46bd      	mov	sp, r7
 810760c:	bd80      	pop	{r7, pc}

0810760e <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 810760e:	b480      	push	{r7}
 8107610:	b083      	sub	sp, #12
 8107612:	af00      	add	r7, sp, #0
 8107614:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8107616:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 810761a:	4618      	mov	r0, r3
 810761c:	370c      	adds	r7, #12
 810761e:	46bd      	mov	sp, r7
 8107620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107624:	4770      	bx	lr

08107626 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8107626:	b480      	push	{r7}
 8107628:	b083      	sub	sp, #12
 810762a:	af00      	add	r7, sp, #0
 810762c:	6078      	str	r0, [r7, #4]
    { return __it; }
 810762e:	687b      	ldr	r3, [r7, #4]
 8107630:	4618      	mov	r0, r3
 8107632:	370c      	adds	r7, #12
 8107634:	46bd      	mov	sp, r7
 8107636:	f85d 7b04 	ldr.w	r7, [sp], #4
 810763a:	4770      	bx	lr

0810763c <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 810763c:	b580      	push	{r7, lr}
 810763e:	b086      	sub	sp, #24
 8107640:	af00      	add	r7, sp, #0
 8107642:	60f8      	str	r0, [r7, #12]
 8107644:	60b9      	str	r1, [r7, #8]
 8107646:	607a      	str	r2, [r7, #4]
 8107648:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 810764a:	68ba      	ldr	r2, [r7, #8]
 810764c:	68fb      	ldr	r3, [r7, #12]
 810764e:	1ad3      	subs	r3, r2, r3
 8107650:	109b      	asrs	r3, r3, #2
 8107652:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8107654:	697b      	ldr	r3, [r7, #20]
 8107656:	2b00      	cmp	r3, #0
 8107658:	dd06      	ble.n	8107668 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 810765a:	697b      	ldr	r3, [r7, #20]
 810765c:	009b      	lsls	r3, r3, #2
 810765e:	461a      	mov	r2, r3
 8107660:	68f9      	ldr	r1, [r7, #12]
 8107662:	6878      	ldr	r0, [r7, #4]
 8107664:	f016 fce0 	bl	811e028 <memmove>
      return __result + __count;
 8107668:	697b      	ldr	r3, [r7, #20]
 810766a:	009b      	lsls	r3, r3, #2
 810766c:	687a      	ldr	r2, [r7, #4]
 810766e:	4413      	add	r3, r2
    }
 8107670:	4618      	mov	r0, r3
 8107672:	3718      	adds	r7, #24
 8107674:	46bd      	mov	sp, r7
 8107676:	bd80      	pop	{r7, pc}

08107678 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8107678:	b580      	push	{r7, lr}
 810767a:	b084      	sub	sp, #16
 810767c:	af00      	add	r7, sp, #0
 810767e:	60f8      	str	r0, [r7, #12]
 8107680:	60b9      	str	r1, [r7, #8]
 8107682:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8107684:	687a      	ldr	r2, [r7, #4]
 8107686:	68b9      	ldr	r1, [r7, #8]
 8107688:	68f8      	ldr	r0, [r7, #12]
 810768a:	f000 f9c9 	bl	8107a20 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 810768e:	4603      	mov	r3, r0
 8107690:	4618      	mov	r0, r3
 8107692:	3710      	adds	r7, #16
 8107694:	46bd      	mov	sp, r7
 8107696:	bd80      	pop	{r7, pc}

08107698 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8107698:	b590      	push	{r4, r7, lr}
 810769a:	b085      	sub	sp, #20
 810769c:	af00      	add	r7, sp, #0
 810769e:	60f8      	str	r0, [r7, #12]
 81076a0:	60b9      	str	r1, [r7, #8]
 81076a2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 81076a4:	68f8      	ldr	r0, [r7, #12]
 81076a6:	f000 f9d3 	bl	8107a50 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 81076aa:	4604      	mov	r4, r0
 81076ac:	68b8      	ldr	r0, [r7, #8]
 81076ae:	f000 f9cf 	bl	8107a50 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 81076b2:	4603      	mov	r3, r0
 81076b4:	687a      	ldr	r2, [r7, #4]
 81076b6:	4619      	mov	r1, r3
 81076b8:	4620      	mov	r0, r4
 81076ba:	f000 f9d4 	bl	8107a66 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 81076be:	4603      	mov	r3, r0
    }
 81076c0:	4618      	mov	r0, r3
 81076c2:	3714      	adds	r7, #20
 81076c4:	46bd      	mov	sp, r7
 81076c6:	bd90      	pop	{r4, r7, pc}

081076c8 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 81076c8:	b580      	push	{r7, lr}
 81076ca:	b086      	sub	sp, #24
 81076cc:	af00      	add	r7, sp, #0
 81076ce:	60f8      	str	r0, [r7, #12]
 81076d0:	60b9      	str	r1, [r7, #8]
 81076d2:	607a      	str	r2, [r7, #4]
 81076d4:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 81076d6:	463b      	mov	r3, r7
 81076d8:	461a      	mov	r2, r3
 81076da:	68b9      	ldr	r1, [r7, #8]
 81076dc:	68f8      	ldr	r0, [r7, #12]
 81076de:	f000 f9e5 	bl	8107aac <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 81076e2:	68bb      	ldr	r3, [r7, #8]
 81076e4:	617b      	str	r3, [r7, #20]
 81076e6:	e013      	b.n	8107710 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x48>
	if (__comp(__i, __first))
 81076e8:	463b      	mov	r3, r7
 81076ea:	68fa      	ldr	r2, [r7, #12]
 81076ec:	6979      	ldr	r1, [r7, #20]
 81076ee:	4618      	mov	r0, r3
 81076f0:	f000 f8e1 	bl	81078b6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81076f4:	4603      	mov	r3, r0
 81076f6:	2b00      	cmp	r3, #0
 81076f8:	d005      	beq.n	8107706 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 81076fa:	463b      	mov	r3, r7
 81076fc:	697a      	ldr	r2, [r7, #20]
 81076fe:	68b9      	ldr	r1, [r7, #8]
 8107700:	68f8      	ldr	r0, [r7, #12]
 8107702:	f000 fa41 	bl	8107b88 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8107706:	f107 0314 	add.w	r3, r7, #20
 810770a:	4618      	mov	r0, r3
 810770c:	f7ff fc9a 	bl	8107044 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 8107710:	1d3a      	adds	r2, r7, #4
 8107712:	f107 0314 	add.w	r3, r7, #20
 8107716:	4611      	mov	r1, r2
 8107718:	4618      	mov	r0, r3
 810771a:	f000 fa1d 	bl	8107b58 <_ZN9__gnu_cxxltIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810771e:	4603      	mov	r3, r0
 8107720:	2b00      	cmp	r3, #0
 8107722:	d1e1      	bne.n	81076e8 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x20>
    }
 8107724:	bf00      	nop
 8107726:	bf00      	nop
 8107728:	3718      	adds	r7, #24
 810772a:	46bd      	mov	sp, r7
 810772c:	bd80      	pop	{r7, pc}

0810772e <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810772e:	b580      	push	{r7, lr}
 8107730:	b084      	sub	sp, #16
 8107732:	af00      	add	r7, sp, #0
 8107734:	60f8      	str	r0, [r7, #12]
 8107736:	60b9      	str	r1, [r7, #8]
 8107738:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 810773a:	e00a      	b.n	8107752 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x24>
	{
	  --__last;
 810773c:	f107 0308 	add.w	r3, r7, #8
 8107740:	4618      	mov	r0, r3
 8107742:	f7ff fcc6 	bl	81070d2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 8107746:	687b      	ldr	r3, [r7, #4]
 8107748:	68ba      	ldr	r2, [r7, #8]
 810774a:	68b9      	ldr	r1, [r7, #8]
 810774c:	68f8      	ldr	r0, [r7, #12]
 810774e:	f000 fa1b 	bl	8107b88 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 8107752:	f107 020c 	add.w	r2, r7, #12
 8107756:	f107 0308 	add.w	r3, r7, #8
 810775a:	4611      	mov	r1, r2
 810775c:	4618      	mov	r0, r3
 810775e:	f7ff fa83 	bl	8106c68 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8107762:	4603      	mov	r3, r0
 8107764:	2b01      	cmp	r3, #1
 8107766:	bfcc      	ite	gt
 8107768:	2301      	movgt	r3, #1
 810776a:	2300      	movle	r3, #0
 810776c:	b2db      	uxtb	r3, r3
 810776e:	2b00      	cmp	r3, #0
 8107770:	d1e4      	bne.n	810773c <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xe>
	}
    }
 8107772:	bf00      	nop
 8107774:	bf00      	nop
 8107776:	3710      	adds	r7, #16
 8107778:	46bd      	mov	sp, r7
 810777a:	bd80      	pop	{r7, pc}

0810777c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 810777c:	b580      	push	{r7, lr}
 810777e:	b084      	sub	sp, #16
 8107780:	af00      	add	r7, sp, #0
 8107782:	60f8      	str	r0, [r7, #12]
 8107784:	60b9      	str	r1, [r7, #8]
 8107786:	607a      	str	r2, [r7, #4]
 8107788:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 810778a:	687a      	ldr	r2, [r7, #4]
 810778c:	68b9      	ldr	r1, [r7, #8]
 810778e:	f107 0018 	add.w	r0, r7, #24
 8107792:	f000 f890 	bl	81078b6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8107796:	4603      	mov	r3, r0
 8107798:	2b00      	cmp	r3, #0
 810779a:	d020      	beq.n	81077de <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 810779c:	683a      	ldr	r2, [r7, #0]
 810779e:	6879      	ldr	r1, [r7, #4]
 81077a0:	f107 0018 	add.w	r0, r7, #24
 81077a4:	f000 f887 	bl	81078b6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81077a8:	4603      	mov	r3, r0
 81077aa:	2b00      	cmp	r3, #0
 81077ac:	d004      	beq.n	81077b8 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 81077ae:	6879      	ldr	r1, [r7, #4]
 81077b0:	68f8      	ldr	r0, [r7, #12]
 81077b2:	f7ff fc30 	bl	8107016 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81077b6:	e032      	b.n	810781e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 81077b8:	683a      	ldr	r2, [r7, #0]
 81077ba:	68b9      	ldr	r1, [r7, #8]
 81077bc:	f107 0018 	add.w	r0, r7, #24
 81077c0:	f000 f879 	bl	81078b6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81077c4:	4603      	mov	r3, r0
 81077c6:	2b00      	cmp	r3, #0
 81077c8:	d004      	beq.n	81077d4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 81077ca:	6839      	ldr	r1, [r7, #0]
 81077cc:	68f8      	ldr	r0, [r7, #12]
 81077ce:	f7ff fc22 	bl	8107016 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81077d2:	e024      	b.n	810781e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 81077d4:	68b9      	ldr	r1, [r7, #8]
 81077d6:	68f8      	ldr	r0, [r7, #12]
 81077d8:	f7ff fc1d 	bl	8107016 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81077dc:	e01f      	b.n	810781e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 81077de:	683a      	ldr	r2, [r7, #0]
 81077e0:	68b9      	ldr	r1, [r7, #8]
 81077e2:	f107 0018 	add.w	r0, r7, #24
 81077e6:	f000 f866 	bl	81078b6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81077ea:	4603      	mov	r3, r0
 81077ec:	2b00      	cmp	r3, #0
 81077ee:	d004      	beq.n	81077fa <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 81077f0:	68b9      	ldr	r1, [r7, #8]
 81077f2:	68f8      	ldr	r0, [r7, #12]
 81077f4:	f7ff fc0f 	bl	8107016 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81077f8:	e011      	b.n	810781e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 81077fa:	683a      	ldr	r2, [r7, #0]
 81077fc:	6879      	ldr	r1, [r7, #4]
 81077fe:	f107 0018 	add.w	r0, r7, #24
 8107802:	f000 f858 	bl	81078b6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8107806:	4603      	mov	r3, r0
 8107808:	2b00      	cmp	r3, #0
 810780a:	d004      	beq.n	8107816 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 810780c:	6839      	ldr	r1, [r7, #0]
 810780e:	68f8      	ldr	r0, [r7, #12]
 8107810:	f7ff fc01 	bl	8107016 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 8107814:	e003      	b.n	810781e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 8107816:	6879      	ldr	r1, [r7, #4]
 8107818:	68f8      	ldr	r0, [r7, #12]
 810781a:	f7ff fbfc 	bl	8107016 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810781e:	bf00      	nop
 8107820:	3710      	adds	r7, #16
 8107822:	46bd      	mov	sp, r7
 8107824:	bd80      	pop	{r7, pc}

08107826 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8107826:	b580      	push	{r7, lr}
 8107828:	b084      	sub	sp, #16
 810782a:	af00      	add	r7, sp, #0
 810782c:	60f8      	str	r0, [r7, #12]
 810782e:	60b9      	str	r1, [r7, #8]
 8107830:	607a      	str	r2, [r7, #4]
 8107832:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 8107834:	e004      	b.n	8107840 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
	    ++__first;
 8107836:	f107 030c 	add.w	r3, r7, #12
 810783a:	4618      	mov	r0, r3
 810783c:	f7ff fc02 	bl	8107044 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 8107840:	463b      	mov	r3, r7
 8107842:	687a      	ldr	r2, [r7, #4]
 8107844:	68f9      	ldr	r1, [r7, #12]
 8107846:	4618      	mov	r0, r3
 8107848:	f000 f835 	bl	81078b6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810784c:	4603      	mov	r3, r0
 810784e:	2b00      	cmp	r3, #0
 8107850:	d1f1      	bne.n	8107836 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x10>
	  --__last;
 8107852:	f107 0308 	add.w	r3, r7, #8
 8107856:	4618      	mov	r0, r3
 8107858:	f7ff fc3b 	bl	81070d2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 810785c:	e004      	b.n	8107868 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x42>
	    --__last;
 810785e:	f107 0308 	add.w	r3, r7, #8
 8107862:	4618      	mov	r0, r3
 8107864:	f7ff fc35 	bl	81070d2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 8107868:	463b      	mov	r3, r7
 810786a:	68ba      	ldr	r2, [r7, #8]
 810786c:	6879      	ldr	r1, [r7, #4]
 810786e:	4618      	mov	r0, r3
 8107870:	f000 f821 	bl	81078b6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8107874:	4603      	mov	r3, r0
 8107876:	2b00      	cmp	r3, #0
 8107878:	d1f1      	bne.n	810785e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x38>
	  if (!(__first < __last))
 810787a:	f107 0208 	add.w	r2, r7, #8
 810787e:	f107 030c 	add.w	r3, r7, #12
 8107882:	4611      	mov	r1, r2
 8107884:	4618      	mov	r0, r3
 8107886:	f000 f967 	bl	8107b58 <_ZN9__gnu_cxxltIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810788a:	4603      	mov	r3, r0
 810788c:	f083 0301 	eor.w	r3, r3, #1
 8107890:	b2db      	uxtb	r3, r3
 8107892:	2b00      	cmp	r3, #0
 8107894:	d001      	beq.n	810789a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x74>
	    return __first;
 8107896:	68fb      	ldr	r3, [r7, #12]
 8107898:	e009      	b.n	81078ae <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x88>
	  std::iter_swap(__first, __last);
 810789a:	68b9      	ldr	r1, [r7, #8]
 810789c:	68f8      	ldr	r0, [r7, #12]
 810789e:	f7ff fbba 	bl	8107016 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 81078a2:	f107 030c 	add.w	r3, r7, #12
 81078a6:	4618      	mov	r0, r3
 81078a8:	f7ff fbcc 	bl	8107044 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 81078ac:	e7c8      	b.n	8107840 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
    }
 81078ae:	4618      	mov	r0, r3
 81078b0:	3710      	adds	r7, #16
 81078b2:	46bd      	mov	sp, r7
 81078b4:	bd80      	pop	{r7, pc}

081078b6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 81078b6:	b580      	push	{r7, lr}
 81078b8:	ed2d 8b02 	vpush	{d8}
 81078bc:	b084      	sub	sp, #16
 81078be:	af00      	add	r7, sp, #0
 81078c0:	60f8      	str	r0, [r7, #12]
 81078c2:	60b9      	str	r1, [r7, #8]
 81078c4:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 81078c6:	f107 0308 	add.w	r3, r7, #8
 81078ca:	4618      	mov	r0, r3
 81078cc:	f7ff fb66 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81078d0:	4603      	mov	r3, r0
 81078d2:	ed93 8a00 	vldr	s16, [r3]
 81078d6:	1d3b      	adds	r3, r7, #4
 81078d8:	4618      	mov	r0, r3
 81078da:	f7ff fb5f 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81078de:	4603      	mov	r3, r0
 81078e0:	edd3 7a00 	vldr	s15, [r3]
 81078e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 81078e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81078ec:	bf4c      	ite	mi
 81078ee:	2301      	movmi	r3, #1
 81078f0:	2300      	movpl	r3, #0
 81078f2:	b2db      	uxtb	r3, r3
 81078f4:	4618      	mov	r0, r3
 81078f6:	3710      	adds	r7, #16
 81078f8:	46bd      	mov	sp, r7
 81078fa:	ecbd 8b02 	vpop	{d8}
 81078fe:	bd80      	pop	{r7, pc}

08107900 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8107900:	b590      	push	{r4, r7, lr}
 8107902:	b085      	sub	sp, #20
 8107904:	af00      	add	r7, sp, #0
 8107906:	6078      	str	r0, [r7, #4]
 8107908:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 810790a:	1d3b      	adds	r3, r7, #4
 810790c:	4618      	mov	r0, r3
 810790e:	f7ff fb45 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107912:	4603      	mov	r3, r0
 8107914:	4618      	mov	r0, r3
 8107916:	f7fe fee9 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810791a:	4603      	mov	r3, r0
 810791c:	681b      	ldr	r3, [r3, #0]
 810791e:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 8107920:	687b      	ldr	r3, [r7, #4]
 8107922:	60bb      	str	r3, [r7, #8]
      --__next;
 8107924:	f107 0308 	add.w	r3, r7, #8
 8107928:	4618      	mov	r0, r3
 810792a:	f7ff fbd2 	bl	81070d2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 810792e:	e017      	b.n	8107960 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 8107930:	f107 0308 	add.w	r3, r7, #8
 8107934:	4618      	mov	r0, r3
 8107936:	f7ff fb31 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810793a:	4603      	mov	r3, r0
 810793c:	4618      	mov	r0, r3
 810793e:	f7fe fed5 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8107942:	4604      	mov	r4, r0
 8107944:	1d3b      	adds	r3, r7, #4
 8107946:	4618      	mov	r0, r3
 8107948:	f7ff fb28 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810794c:	4602      	mov	r2, r0
 810794e:	6823      	ldr	r3, [r4, #0]
 8107950:	6013      	str	r3, [r2, #0]
	  __last = __next;
 8107952:	68bb      	ldr	r3, [r7, #8]
 8107954:	607b      	str	r3, [r7, #4]
	  --__next;
 8107956:	f107 0308 	add.w	r3, r7, #8
 810795a:	4618      	mov	r0, r3
 810795c:	f7ff fbb9 	bl	81070d2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 8107960:	f107 010c 	add.w	r1, r7, #12
 8107964:	463b      	mov	r3, r7
 8107966:	68ba      	ldr	r2, [r7, #8]
 8107968:	4618      	mov	r0, r3
 810796a:	f000 f94d 	bl	8107c08 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 810796e:	4603      	mov	r3, r0
 8107970:	2b00      	cmp	r3, #0
 8107972:	d1dd      	bne.n	8107930 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 8107974:	f107 030c 	add.w	r3, r7, #12
 8107978:	4618      	mov	r0, r3
 810797a:	f7fe feb7 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810797e:	4604      	mov	r4, r0
 8107980:	1d3b      	adds	r3, r7, #4
 8107982:	4618      	mov	r0, r3
 8107984:	f7ff fb0a 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107988:	4602      	mov	r2, r0
 810798a:	6823      	ldr	r3, [r4, #0]
 810798c:	6013      	str	r3, [r2, #0]
    }
 810798e:	bf00      	nop
 8107990:	3714      	adds	r7, #20
 8107992:	46bd      	mov	sp, r7
 8107994:	bd90      	pop	{r4, r7, pc}

08107996 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8107996:	b580      	push	{r7, lr}
 8107998:	b082      	sub	sp, #8
 810799a:	af00      	add	r7, sp, #0
 810799c:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 810799e:	1d3b      	adds	r3, r7, #4
 81079a0:	4618      	mov	r0, r3
 81079a2:	f7ff fc4e 	bl	8107242 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 81079a6:	4603      	mov	r3, r0
 81079a8:	681b      	ldr	r3, [r3, #0]
 81079aa:	4618      	mov	r0, r3
 81079ac:	3708      	adds	r7, #8
 81079ae:	46bd      	mov	sp, r7
 81079b0:	bd80      	pop	{r7, pc}

081079b2 <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 81079b2:	b580      	push	{r7, lr}
 81079b4:	b084      	sub	sp, #16
 81079b6:	af00      	add	r7, sp, #0
 81079b8:	60f8      	str	r0, [r7, #12]
 81079ba:	60b9      	str	r1, [r7, #8]
 81079bc:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 81079be:	687a      	ldr	r2, [r7, #4]
 81079c0:	68b9      	ldr	r1, [r7, #8]
 81079c2:	68f8      	ldr	r0, [r7, #12]
 81079c4:	f000 f940 	bl	8107c48 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 81079c8:	4603      	mov	r3, r0
 81079ca:	4618      	mov	r0, r3
 81079cc:	3710      	adds	r7, #16
 81079ce:	46bd      	mov	sp, r7
 81079d0:	bd80      	pop	{r7, pc}

081079d2 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 81079d2:	b580      	push	{r7, lr}
 81079d4:	b082      	sub	sp, #8
 81079d6:	af00      	add	r7, sp, #0
 81079d8:	6078      	str	r0, [r7, #4]
 81079da:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 81079dc:	6878      	ldr	r0, [r7, #4]
 81079de:	f7ff ffda 	bl	8107996 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 81079e2:	4602      	mov	r2, r0
 81079e4:	683b      	ldr	r3, [r7, #0]
 81079e6:	1a9b      	subs	r3, r3, r2
 81079e8:	109b      	asrs	r3, r3, #2
 81079ea:	461a      	mov	r2, r3
 81079ec:	1d3b      	adds	r3, r7, #4
 81079ee:	4611      	mov	r1, r2
 81079f0:	4618      	mov	r0, r3
 81079f2:	f7fe fce6 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81079f6:	4603      	mov	r3, r0
 81079f8:	4618      	mov	r0, r3
 81079fa:	3708      	adds	r7, #8
 81079fc:	46bd      	mov	sp, r7
 81079fe:	bd80      	pop	{r7, pc}

08107a00 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8107a00:	b580      	push	{r7, lr}
 8107a02:	b084      	sub	sp, #16
 8107a04:	af00      	add	r7, sp, #0
 8107a06:	60f8      	str	r0, [r7, #12]
 8107a08:	60b9      	str	r1, [r7, #8]
 8107a0a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8107a0c:	687a      	ldr	r2, [r7, #4]
 8107a0e:	68b9      	ldr	r1, [r7, #8]
 8107a10:	68f8      	ldr	r0, [r7, #12]
 8107a12:	f000 f929 	bl	8107c68 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 8107a16:	4603      	mov	r3, r0
 8107a18:	4618      	mov	r0, r3
 8107a1a:	3710      	adds	r7, #16
 8107a1c:	46bd      	mov	sp, r7
 8107a1e:	bd80      	pop	{r7, pc}

08107a20 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8107a20:	b590      	push	{r4, r7, lr}
 8107a22:	b085      	sub	sp, #20
 8107a24:	af00      	add	r7, sp, #0
 8107a26:	60f8      	str	r0, [r7, #12]
 8107a28:	60b9      	str	r1, [r7, #8]
 8107a2a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8107a2c:	68f8      	ldr	r0, [r7, #12]
 8107a2e:	f000 f92b 	bl	8107c88 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8107a32:	4604      	mov	r4, r0
 8107a34:	68b8      	ldr	r0, [r7, #8]
 8107a36:	f000 f927 	bl	8107c88 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8107a3a:	4603      	mov	r3, r0
 8107a3c:	687a      	ldr	r2, [r7, #4]
 8107a3e:	4619      	mov	r1, r3
 8107a40:	4620      	mov	r0, r4
 8107a42:	f000 f932 	bl	8107caa <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>
 8107a46:	4603      	mov	r3, r0
    }
 8107a48:	4618      	mov	r0, r3
 8107a4a:	3714      	adds	r7, #20
 8107a4c:	46bd      	mov	sp, r7
 8107a4e:	bd90      	pop	{r4, r7, pc}

08107a50 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8107a50:	b480      	push	{r7}
 8107a52:	b083      	sub	sp, #12
 8107a54:	af00      	add	r7, sp, #0
 8107a56:	6078      	str	r0, [r7, #4]
    { return __it; }
 8107a58:	687b      	ldr	r3, [r7, #4]
 8107a5a:	4618      	mov	r0, r3
 8107a5c:	370c      	adds	r7, #12
 8107a5e:	46bd      	mov	sp, r7
 8107a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a64:	4770      	bx	lr

08107a66 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8107a66:	b5b0      	push	{r4, r5, r7, lr}
 8107a68:	b084      	sub	sp, #16
 8107a6a:	af00      	add	r7, sp, #0
 8107a6c:	60f8      	str	r0, [r7, #12]
 8107a6e:	60b9      	str	r1, [r7, #8]
 8107a70:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8107a72:	68f8      	ldr	r0, [r7, #12]
 8107a74:	f000 f93c 	bl	8107cf0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8107a78:	4604      	mov	r4, r0
 8107a7a:	68b8      	ldr	r0, [r7, #8]
 8107a7c:	f000 f938 	bl	8107cf0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8107a80:	4605      	mov	r5, r0
 8107a82:	687b      	ldr	r3, [r7, #4]
 8107a84:	4618      	mov	r0, r3
 8107a86:	f7ff fdce 	bl	8107626 <_ZSt12__niter_baseIPfET_S1_>
 8107a8a:	4603      	mov	r3, r0
 8107a8c:	461a      	mov	r2, r3
 8107a8e:	4629      	mov	r1, r5
 8107a90:	4620      	mov	r0, r4
 8107a92:	f000 f93b 	bl	8107d0c <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 8107a96:	4602      	mov	r2, r0
 8107a98:	1d3b      	adds	r3, r7, #4
 8107a9a:	4611      	mov	r1, r2
 8107a9c:	4618      	mov	r0, r3
 8107a9e:	f000 f945 	bl	8107d2c <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8107aa2:	4603      	mov	r3, r0
    }
 8107aa4:	4618      	mov	r0, r3
 8107aa6:	3710      	adds	r7, #16
 8107aa8:	46bd      	mov	sp, r7
 8107aaa:	bdb0      	pop	{r4, r5, r7, pc}

08107aac <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8107aac:	b590      	push	{r4, r7, lr}
 8107aae:	b089      	sub	sp, #36	@ 0x24
 8107ab0:	af00      	add	r7, sp, #0
 8107ab2:	60f8      	str	r0, [r7, #12]
 8107ab4:	60b9      	str	r1, [r7, #8]
 8107ab6:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8107ab8:	f107 020c 	add.w	r2, r7, #12
 8107abc:	f107 0308 	add.w	r3, r7, #8
 8107ac0:	4611      	mov	r1, r2
 8107ac2:	4618      	mov	r0, r3
 8107ac4:	f7ff f8d0 	bl	8106c68 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8107ac8:	4603      	mov	r3, r0
 8107aca:	2b01      	cmp	r3, #1
 8107acc:	bfd4      	ite	le
 8107ace:	2301      	movle	r3, #1
 8107ad0:	2300      	movgt	r3, #0
 8107ad2:	b2db      	uxtb	r3, r3
 8107ad4:	2b00      	cmp	r3, #0
 8107ad6:	d139      	bne.n	8107b4c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 8107ad8:	f107 020c 	add.w	r2, r7, #12
 8107adc:	f107 0308 	add.w	r3, r7, #8
 8107ae0:	4611      	mov	r1, r2
 8107ae2:	4618      	mov	r0, r3
 8107ae4:	f7ff f8c0 	bl	8106c68 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8107ae8:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 8107aea:	69bb      	ldr	r3, [r7, #24]
 8107aec:	3b02      	subs	r3, #2
 8107aee:	0fda      	lsrs	r2, r3, #31
 8107af0:	4413      	add	r3, r2
 8107af2:	105b      	asrs	r3, r3, #1
 8107af4:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 8107af6:	f107 030c 	add.w	r3, r7, #12
 8107afa:	69f9      	ldr	r1, [r7, #28]
 8107afc:	4618      	mov	r0, r3
 8107afe:	f7fe fc60 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107b02:	4603      	mov	r3, r0
 8107b04:	617b      	str	r3, [r7, #20]
 8107b06:	f107 0314 	add.w	r3, r7, #20
 8107b0a:	4618      	mov	r0, r3
 8107b0c:	f7ff fa46 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107b10:	4603      	mov	r3, r0
 8107b12:	4618      	mov	r0, r3
 8107b14:	f7fe fdea 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8107b18:	4603      	mov	r3, r0
 8107b1a:	681b      	ldr	r3, [r3, #0]
 8107b1c:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8107b1e:	f107 0310 	add.w	r3, r7, #16
 8107b22:	4618      	mov	r0, r3
 8107b24:	f7fe fde2 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8107b28:	4603      	mov	r3, r0
 8107b2a:	edd3 7a00 	vldr	s15, [r3]
 8107b2e:	4623      	mov	r3, r4
 8107b30:	eeb0 0a67 	vmov.f32	s0, s15
 8107b34:	69ba      	ldr	r2, [r7, #24]
 8107b36:	69f9      	ldr	r1, [r7, #28]
 8107b38:	68f8      	ldr	r0, [r7, #12]
 8107b3a:	f000 f903 	bl	8107d44 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 8107b3e:	69fb      	ldr	r3, [r7, #28]
 8107b40:	2b00      	cmp	r3, #0
 8107b42:	d005      	beq.n	8107b50 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 8107b44:	69fb      	ldr	r3, [r7, #28]
 8107b46:	3b01      	subs	r3, #1
 8107b48:	61fb      	str	r3, [r7, #28]
      while (true)
 8107b4a:	e7d4      	b.n	8107af6 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 8107b4c:	bf00      	nop
 8107b4e:	e000      	b.n	8107b52 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 8107b50:	bf00      	nop
    }
 8107b52:	3724      	adds	r7, #36	@ 0x24
 8107b54:	46bd      	mov	sp, r7
 8107b56:	bd90      	pop	{r4, r7, pc}

08107b58 <_ZN9__gnu_cxxltIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 8107b58:	b590      	push	{r4, r7, lr}
 8107b5a:	b083      	sub	sp, #12
 8107b5c:	af00      	add	r7, sp, #0
 8107b5e:	6078      	str	r0, [r7, #4]
 8107b60:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 8107b62:	6878      	ldr	r0, [r7, #4]
 8107b64:	f7ff fb6d 	bl	8107242 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8107b68:	4603      	mov	r3, r0
 8107b6a:	681c      	ldr	r4, [r3, #0]
 8107b6c:	6838      	ldr	r0, [r7, #0]
 8107b6e:	f7ff fb68 	bl	8107242 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8107b72:	4603      	mov	r3, r0
 8107b74:	681b      	ldr	r3, [r3, #0]
 8107b76:	429c      	cmp	r4, r3
 8107b78:	bf34      	ite	cc
 8107b7a:	2301      	movcc	r3, #1
 8107b7c:	2300      	movcs	r3, #0
 8107b7e:	b2db      	uxtb	r3, r3
 8107b80:	4618      	mov	r0, r3
 8107b82:	370c      	adds	r7, #12
 8107b84:	46bd      	mov	sp, r7
 8107b86:	bd90      	pop	{r4, r7, pc}

08107b88 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8107b88:	b5b0      	push	{r4, r5, r7, lr}
 8107b8a:	b086      	sub	sp, #24
 8107b8c:	af00      	add	r7, sp, #0
 8107b8e:	60f8      	str	r0, [r7, #12]
 8107b90:	60b9      	str	r1, [r7, #8]
 8107b92:	607a      	str	r2, [r7, #4]
 8107b94:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8107b96:	1d3b      	adds	r3, r7, #4
 8107b98:	4618      	mov	r0, r3
 8107b9a:	f7ff f9ff 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107b9e:	4603      	mov	r3, r0
 8107ba0:	4618      	mov	r0, r3
 8107ba2:	f7fe fda3 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8107ba6:	4603      	mov	r3, r0
 8107ba8:	681b      	ldr	r3, [r3, #0]
 8107baa:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 8107bac:	f107 030c 	add.w	r3, r7, #12
 8107bb0:	4618      	mov	r0, r3
 8107bb2:	f7ff f9f3 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107bb6:	4603      	mov	r3, r0
 8107bb8:	4618      	mov	r0, r3
 8107bba:	f7fe fd97 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8107bbe:	4604      	mov	r4, r0
 8107bc0:	1d3b      	adds	r3, r7, #4
 8107bc2:	4618      	mov	r0, r3
 8107bc4:	f7ff f9ea 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107bc8:	4602      	mov	r2, r0
 8107bca:	6823      	ldr	r3, [r4, #0]
 8107bcc:	6013      	str	r3, [r2, #0]
			 _DistanceType(__last - __first),
 8107bce:	f107 020c 	add.w	r2, r7, #12
 8107bd2:	f107 0308 	add.w	r3, r7, #8
 8107bd6:	4611      	mov	r1, r2
 8107bd8:	4618      	mov	r0, r3
 8107bda:	f7ff f845 	bl	8106c68 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8107bde:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 8107be0:	f107 0314 	add.w	r3, r7, #20
 8107be4:	4618      	mov	r0, r3
 8107be6:	f7fe fd81 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8107bea:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 8107bec:	edd3 7a00 	vldr	s15, [r3]
 8107bf0:	462b      	mov	r3, r5
 8107bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8107bf6:	4622      	mov	r2, r4
 8107bf8:	2100      	movs	r1, #0
 8107bfa:	68f8      	ldr	r0, [r7, #12]
 8107bfc:	f000 f8a2 	bl	8107d44 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 8107c00:	bf00      	nop
 8107c02:	3718      	adds	r7, #24
 8107c04:	46bd      	mov	sp, r7
 8107c06:	bdb0      	pop	{r4, r5, r7, pc}

08107c08 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 8107c08:	b580      	push	{r7, lr}
 8107c0a:	ed2d 8b02 	vpush	{d8}
 8107c0e:	b084      	sub	sp, #16
 8107c10:	af00      	add	r7, sp, #0
 8107c12:	60f8      	str	r0, [r7, #12]
 8107c14:	60b9      	str	r1, [r7, #8]
 8107c16:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 8107c18:	68bb      	ldr	r3, [r7, #8]
 8107c1a:	ed93 8a00 	vldr	s16, [r3]
 8107c1e:	1d3b      	adds	r3, r7, #4
 8107c20:	4618      	mov	r0, r3
 8107c22:	f7ff f9bb 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107c26:	4603      	mov	r3, r0
 8107c28:	edd3 7a00 	vldr	s15, [r3]
 8107c2c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8107c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8107c34:	bf4c      	ite	mi
 8107c36:	2301      	movmi	r3, #1
 8107c38:	2300      	movpl	r3, #0
 8107c3a:	b2db      	uxtb	r3, r3
 8107c3c:	4618      	mov	r0, r3
 8107c3e:	3710      	adds	r7, #16
 8107c40:	46bd      	mov	sp, r7
 8107c42:	ecbd 8b02 	vpop	{d8}
 8107c46:	bd80      	pop	{r7, pc}

08107c48 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8107c48:	b580      	push	{r7, lr}
 8107c4a:	b084      	sub	sp, #16
 8107c4c:	af00      	add	r7, sp, #0
 8107c4e:	60f8      	str	r0, [r7, #12]
 8107c50:	60b9      	str	r1, [r7, #8]
 8107c52:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8107c54:	687a      	ldr	r2, [r7, #4]
 8107c56:	68b9      	ldr	r1, [r7, #8]
 8107c58:	68f8      	ldr	r0, [r7, #12]
 8107c5a:	f000 f925 	bl	8107ea8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8107c5e:	4603      	mov	r3, r0
    }
 8107c60:	4618      	mov	r0, r3
 8107c62:	3710      	adds	r7, #16
 8107c64:	46bd      	mov	sp, r7
 8107c66:	bd80      	pop	{r7, pc}

08107c68 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8107c68:	b580      	push	{r7, lr}
 8107c6a:	b084      	sub	sp, #16
 8107c6c:	af00      	add	r7, sp, #0
 8107c6e:	60f8      	str	r0, [r7, #12]
 8107c70:	60b9      	str	r1, [r7, #8]
 8107c72:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8107c74:	687a      	ldr	r2, [r7, #4]
 8107c76:	68b9      	ldr	r1, [r7, #8]
 8107c78:	68f8      	ldr	r0, [r7, #12]
 8107c7a:	f000 f932 	bl	8107ee2 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 8107c7e:	4603      	mov	r3, r0
    }
 8107c80:	4618      	mov	r0, r3
 8107c82:	3710      	adds	r7, #16
 8107c84:	46bd      	mov	sp, r7
 8107c86:	bd80      	pop	{r7, pc}

08107c88 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8107c88:	b580      	push	{r7, lr}
 8107c8a:	b082      	sub	sp, #8
 8107c8c:	af00      	add	r7, sp, #0
 8107c8e:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8107c90:	1d3b      	adds	r3, r7, #4
 8107c92:	4618      	mov	r0, r3
 8107c94:	f000 f947 	bl	8107f26 <_ZNKSt13move_iteratorIPfE4baseEv>
 8107c98:	4603      	mov	r3, r0
 8107c9a:	4618      	mov	r0, r3
 8107c9c:	f000 f94f 	bl	8107f3e <_ZSt12__miter_baseIPfET_S1_>
 8107ca0:	4603      	mov	r3, r0
 8107ca2:	4618      	mov	r0, r3
 8107ca4:	3708      	adds	r7, #8
 8107ca6:	46bd      	mov	sp, r7
 8107ca8:	bd80      	pop	{r7, pc}

08107caa <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8107caa:	b5b0      	push	{r4, r5, r7, lr}
 8107cac:	b084      	sub	sp, #16
 8107cae:	af00      	add	r7, sp, #0
 8107cb0:	60f8      	str	r0, [r7, #12]
 8107cb2:	60b9      	str	r1, [r7, #8]
 8107cb4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8107cb6:	68f8      	ldr	r0, [r7, #12]
 8107cb8:	f7ff fcb5 	bl	8107626 <_ZSt12__niter_baseIPfET_S1_>
 8107cbc:	4604      	mov	r4, r0
 8107cbe:	68b8      	ldr	r0, [r7, #8]
 8107cc0:	f7ff fcb1 	bl	8107626 <_ZSt12__niter_baseIPfET_S1_>
 8107cc4:	4605      	mov	r5, r0
 8107cc6:	687b      	ldr	r3, [r7, #4]
 8107cc8:	4618      	mov	r0, r3
 8107cca:	f7ff fcac 	bl	8107626 <_ZSt12__niter_baseIPfET_S1_>
 8107cce:	4603      	mov	r3, r0
 8107cd0:	461a      	mov	r2, r3
 8107cd2:	4629      	mov	r1, r5
 8107cd4:	4620      	mov	r0, r4
 8107cd6:	f7ff fe6c 	bl	81079b2 <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>
 8107cda:	4602      	mov	r2, r0
 8107cdc:	1d3b      	adds	r3, r7, #4
 8107cde:	4611      	mov	r1, r2
 8107ce0:	4618      	mov	r0, r3
 8107ce2:	f000 f823 	bl	8107d2c <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8107ce6:	4603      	mov	r3, r0
    }
 8107ce8:	4618      	mov	r0, r3
 8107cea:	3710      	adds	r7, #16
 8107cec:	46bd      	mov	sp, r7
 8107cee:	bdb0      	pop	{r4, r5, r7, pc}

08107cf0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8107cf0:	b580      	push	{r7, lr}
 8107cf2:	b082      	sub	sp, #8
 8107cf4:	af00      	add	r7, sp, #0
 8107cf6:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8107cf8:	1d3b      	adds	r3, r7, #4
 8107cfa:	4618      	mov	r0, r3
 8107cfc:	f000 f92a 	bl	8107f54 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8107d00:	4603      	mov	r3, r0
 8107d02:	681b      	ldr	r3, [r3, #0]
 8107d04:	4618      	mov	r0, r3
 8107d06:	3708      	adds	r7, #8
 8107d08:	46bd      	mov	sp, r7
 8107d0a:	bd80      	pop	{r7, pc}

08107d0c <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8107d0c:	b580      	push	{r7, lr}
 8107d0e:	b084      	sub	sp, #16
 8107d10:	af00      	add	r7, sp, #0
 8107d12:	60f8      	str	r0, [r7, #12]
 8107d14:	60b9      	str	r1, [r7, #8]
 8107d16:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8107d18:	687a      	ldr	r2, [r7, #4]
 8107d1a:	68b9      	ldr	r1, [r7, #8]
 8107d1c:	68f8      	ldr	r0, [r7, #12]
 8107d1e:	f000 f924 	bl	8107f6a <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8107d22:	4603      	mov	r3, r0
 8107d24:	4618      	mov	r0, r3
 8107d26:	3710      	adds	r7, #16
 8107d28:	46bd      	mov	sp, r7
 8107d2a:	bd80      	pop	{r7, pc}

08107d2c <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8107d2c:	b480      	push	{r7}
 8107d2e:	b083      	sub	sp, #12
 8107d30:	af00      	add	r7, sp, #0
 8107d32:	6078      	str	r0, [r7, #4]
 8107d34:	6039      	str	r1, [r7, #0]
    { return __res; }
 8107d36:	683b      	ldr	r3, [r7, #0]
 8107d38:	4618      	mov	r0, r3
 8107d3a:	370c      	adds	r7, #12
 8107d3c:	46bd      	mov	sp, r7
 8107d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d42:	4770      	bx	lr

08107d44 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8107d44:	b5b0      	push	{r4, r5, r7, lr}
 8107d46:	b08e      	sub	sp, #56	@ 0x38
 8107d48:	af00      	add	r7, sp, #0
 8107d4a:	6178      	str	r0, [r7, #20]
 8107d4c:	6139      	str	r1, [r7, #16]
 8107d4e:	60fa      	str	r2, [r7, #12]
 8107d50:	ed87 0a02 	vstr	s0, [r7, #8]
 8107d54:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 8107d56:	693b      	ldr	r3, [r7, #16]
 8107d58:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __secondChild = __holeIndex;
 8107d5a:	693b      	ldr	r3, [r7, #16]
 8107d5c:	637b      	str	r3, [r7, #52]	@ 0x34
      while (__secondChild < (__len - 1) / 2)
 8107d5e:	e042      	b.n	8107de6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 8107d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107d62:	3301      	adds	r3, #1
 8107d64:	005b      	lsls	r3, r3, #1
 8107d66:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (__comp(__first + __secondChild,
 8107d68:	f107 0314 	add.w	r3, r7, #20
 8107d6c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8107d6e:	4618      	mov	r0, r3
 8107d70:	f7fe fb27 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107d74:	4604      	mov	r4, r0
 8107d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107d78:	1e5a      	subs	r2, r3, #1
 8107d7a:	f107 0314 	add.w	r3, r7, #20
 8107d7e:	4611      	mov	r1, r2
 8107d80:	4618      	mov	r0, r3
 8107d82:	f7fe fb1e 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107d86:	4602      	mov	r2, r0
 8107d88:	1d3b      	adds	r3, r7, #4
 8107d8a:	4621      	mov	r1, r4
 8107d8c:	4618      	mov	r0, r3
 8107d8e:	f7ff fd92 	bl	81078b6 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8107d92:	4603      	mov	r3, r0
 8107d94:	2b00      	cmp	r3, #0
 8107d96:	d002      	beq.n	8107d9e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x5a>
	    __secondChild--;
 8107d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107d9a:	3b01      	subs	r3, #1
 8107d9c:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8107d9e:	f107 0314 	add.w	r3, r7, #20
 8107da2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8107da4:	4618      	mov	r0, r3
 8107da6:	f7fe fb0c 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107daa:	4603      	mov	r3, r0
 8107dac:	623b      	str	r3, [r7, #32]
 8107dae:	f107 0320 	add.w	r3, r7, #32
 8107db2:	4618      	mov	r0, r3
 8107db4:	f7ff f8f2 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107db8:	4603      	mov	r3, r0
 8107dba:	4618      	mov	r0, r3
 8107dbc:	f7fe fc96 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8107dc0:	4604      	mov	r4, r0
 8107dc2:	f107 0314 	add.w	r3, r7, #20
 8107dc6:	6939      	ldr	r1, [r7, #16]
 8107dc8:	4618      	mov	r0, r3
 8107dca:	f7fe fafa 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107dce:	4603      	mov	r3, r0
 8107dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8107dd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107dd6:	4618      	mov	r0, r3
 8107dd8:	f7ff f8e0 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107ddc:	4602      	mov	r2, r0
 8107dde:	6823      	ldr	r3, [r4, #0]
 8107de0:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild;
 8107de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107de4:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 8107de6:	68fb      	ldr	r3, [r7, #12]
 8107de8:	3b01      	subs	r3, #1
 8107dea:	0fda      	lsrs	r2, r3, #31
 8107dec:	4413      	add	r3, r2
 8107dee:	105b      	asrs	r3, r3, #1
 8107df0:	461a      	mov	r2, r3
 8107df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107df4:	4293      	cmp	r3, r2
 8107df6:	dbb3      	blt.n	8107d60 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8107df8:	68fb      	ldr	r3, [r7, #12]
 8107dfa:	f003 0301 	and.w	r3, r3, #1
 8107dfe:	2b00      	cmp	r3, #0
 8107e00:	d133      	bne.n	8107e6a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 8107e02:	68fb      	ldr	r3, [r7, #12]
 8107e04:	3b02      	subs	r3, #2
 8107e06:	0fda      	lsrs	r2, r3, #31
 8107e08:	4413      	add	r3, r2
 8107e0a:	105b      	asrs	r3, r3, #1
 8107e0c:	461a      	mov	r2, r3
 8107e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e10:	4293      	cmp	r3, r2
 8107e12:	d12a      	bne.n	8107e6a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 8107e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e16:	3301      	adds	r3, #1
 8107e18:	005b      	lsls	r3, r3, #1
 8107e1a:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8107e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e1e:	1e5a      	subs	r2, r3, #1
 8107e20:	f107 0314 	add.w	r3, r7, #20
 8107e24:	4611      	mov	r1, r2
 8107e26:	4618      	mov	r0, r3
 8107e28:	f7fe facb 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107e2c:	4603      	mov	r3, r0
 8107e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8107e30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8107e34:	4618      	mov	r0, r3
 8107e36:	f7ff f8b1 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107e3a:	4603      	mov	r3, r0
 8107e3c:	4618      	mov	r0, r3
 8107e3e:	f7fe fc55 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8107e42:	4604      	mov	r4, r0
 8107e44:	f107 0314 	add.w	r3, r7, #20
 8107e48:	6939      	ldr	r1, [r7, #16]
 8107e4a:	4618      	mov	r0, r3
 8107e4c:	f7fe fab9 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107e50:	4603      	mov	r3, r0
 8107e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8107e54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8107e58:	4618      	mov	r0, r3
 8107e5a:	f7ff f89f 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107e5e:	4602      	mov	r2, r0
 8107e60:	6823      	ldr	r3, [r4, #0]
 8107e62:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild - 1;
 8107e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107e66:	3b01      	subs	r3, #1
 8107e68:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 8107e6a:	1d3b      	adds	r3, r7, #4
 8107e6c:	4618      	mov	r0, r3
 8107e6e:	f000 f88c 	bl	8107f8a <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>
 8107e72:	f107 031c 	add.w	r3, r7, #28
 8107e76:	4629      	mov	r1, r5
 8107e78:	4618      	mov	r0, r3
 8107e7a:	f7fd ff18 	bl	8105cae <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8107e7e:	f107 0308 	add.w	r3, r7, #8
 8107e82:	4618      	mov	r0, r3
 8107e84:	f7fe fc32 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8107e88:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8107e8a:	edd3 7a00 	vldr	s15, [r3]
 8107e8e:	f107 031c 	add.w	r3, r7, #28
 8107e92:	eeb0 0a67 	vmov.f32	s0, s15
 8107e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8107e98:	6939      	ldr	r1, [r7, #16]
 8107e9a:	6978      	ldr	r0, [r7, #20]
 8107e9c:	f000 f880 	bl	8107fa0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 8107ea0:	bf00      	nop
 8107ea2:	3738      	adds	r7, #56	@ 0x38
 8107ea4:	46bd      	mov	sp, r7
 8107ea6:	bdb0      	pop	{r4, r5, r7, pc}

08107ea8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8107ea8:	b580      	push	{r7, lr}
 8107eaa:	b086      	sub	sp, #24
 8107eac:	af00      	add	r7, sp, #0
 8107eae:	60f8      	str	r0, [r7, #12]
 8107eb0:	60b9      	str	r1, [r7, #8]
 8107eb2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8107eb4:	68ba      	ldr	r2, [r7, #8]
 8107eb6:	68fb      	ldr	r3, [r7, #12]
 8107eb8:	1ad3      	subs	r3, r2, r3
 8107eba:	109b      	asrs	r3, r3, #2
 8107ebc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8107ebe:	697b      	ldr	r3, [r7, #20]
 8107ec0:	2b00      	cmp	r3, #0
 8107ec2:	d006      	beq.n	8107ed2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8107ec4:	697b      	ldr	r3, [r7, #20]
 8107ec6:	009b      	lsls	r3, r3, #2
 8107ec8:	461a      	mov	r2, r3
 8107eca:	68f9      	ldr	r1, [r7, #12]
 8107ecc:	6878      	ldr	r0, [r7, #4]
 8107ece:	f016 f8ab 	bl	811e028 <memmove>
	  return __result + _Num;
 8107ed2:	697b      	ldr	r3, [r7, #20]
 8107ed4:	009b      	lsls	r3, r3, #2
 8107ed6:	687a      	ldr	r2, [r7, #4]
 8107ed8:	4413      	add	r3, r2
	}
 8107eda:	4618      	mov	r0, r3
 8107edc:	3718      	adds	r7, #24
 8107ede:	46bd      	mov	sp, r7
 8107ee0:	bd80      	pop	{r7, pc}

08107ee2 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8107ee2:	b580      	push	{r7, lr}
 8107ee4:	b086      	sub	sp, #24
 8107ee6:	af00      	add	r7, sp, #0
 8107ee8:	60f8      	str	r0, [r7, #12]
 8107eea:	60b9      	str	r1, [r7, #8]
 8107eec:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8107eee:	68ba      	ldr	r2, [r7, #8]
 8107ef0:	68fb      	ldr	r3, [r7, #12]
 8107ef2:	1ad3      	subs	r3, r2, r3
 8107ef4:	109b      	asrs	r3, r3, #2
 8107ef6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8107ef8:	697b      	ldr	r3, [r7, #20]
 8107efa:	2b00      	cmp	r3, #0
 8107efc:	d00a      	beq.n	8107f14 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8107efe:	697b      	ldr	r3, [r7, #20]
 8107f00:	009b      	lsls	r3, r3, #2
 8107f02:	425b      	negs	r3, r3
 8107f04:	687a      	ldr	r2, [r7, #4]
 8107f06:	18d0      	adds	r0, r2, r3
 8107f08:	697b      	ldr	r3, [r7, #20]
 8107f0a:	009b      	lsls	r3, r3, #2
 8107f0c:	461a      	mov	r2, r3
 8107f0e:	68f9      	ldr	r1, [r7, #12]
 8107f10:	f016 f88a 	bl	811e028 <memmove>
	  return __result - _Num;
 8107f14:	697b      	ldr	r3, [r7, #20]
 8107f16:	009b      	lsls	r3, r3, #2
 8107f18:	425b      	negs	r3, r3
 8107f1a:	687a      	ldr	r2, [r7, #4]
 8107f1c:	4413      	add	r3, r2
	}
 8107f1e:	4618      	mov	r0, r3
 8107f20:	3718      	adds	r7, #24
 8107f22:	46bd      	mov	sp, r7
 8107f24:	bd80      	pop	{r7, pc}

08107f26 <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 8107f26:	b480      	push	{r7}
 8107f28:	b083      	sub	sp, #12
 8107f2a:	af00      	add	r7, sp, #0
 8107f2c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8107f2e:	687b      	ldr	r3, [r7, #4]
 8107f30:	681b      	ldr	r3, [r3, #0]
 8107f32:	4618      	mov	r0, r3
 8107f34:	370c      	adds	r7, #12
 8107f36:	46bd      	mov	sp, r7
 8107f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f3c:	4770      	bx	lr

08107f3e <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 8107f3e:	b480      	push	{r7}
 8107f40:	b083      	sub	sp, #12
 8107f42:	af00      	add	r7, sp, #0
 8107f44:	6078      	str	r0, [r7, #4]
    { return __it; }
 8107f46:	687b      	ldr	r3, [r7, #4]
 8107f48:	4618      	mov	r0, r3
 8107f4a:	370c      	adds	r7, #12
 8107f4c:	46bd      	mov	sp, r7
 8107f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f52:	4770      	bx	lr

08107f54 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8107f54:	b480      	push	{r7}
 8107f56:	b083      	sub	sp, #12
 8107f58:	af00      	add	r7, sp, #0
 8107f5a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8107f5c:	687b      	ldr	r3, [r7, #4]
 8107f5e:	4618      	mov	r0, r3
 8107f60:	370c      	adds	r7, #12
 8107f62:	46bd      	mov	sp, r7
 8107f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f68:	4770      	bx	lr

08107f6a <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8107f6a:	b580      	push	{r7, lr}
 8107f6c:	b084      	sub	sp, #16
 8107f6e:	af00      	add	r7, sp, #0
 8107f70:	60f8      	str	r0, [r7, #12]
 8107f72:	60b9      	str	r1, [r7, #8]
 8107f74:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8107f76:	687a      	ldr	r2, [r7, #4]
 8107f78:	68b9      	ldr	r1, [r7, #8]
 8107f7a:	68f8      	ldr	r0, [r7, #12]
 8107f7c:	f000 f87d 	bl	810807a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8107f80:	4603      	mov	r3, r0
    }
 8107f82:	4618      	mov	r0, r3
 8107f84:	3710      	adds	r7, #16
 8107f86:	46bd      	mov	sp, r7
 8107f88:	bd80      	pop	{r7, pc}

08107f8a <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8107f8a:	b480      	push	{r7}
 8107f8c:	b083      	sub	sp, #12
 8107f8e:	af00      	add	r7, sp, #0
 8107f90:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8107f92:	687b      	ldr	r3, [r7, #4]
 8107f94:	4618      	mov	r0, r3
 8107f96:	370c      	adds	r7, #12
 8107f98:	46bd      	mov	sp, r7
 8107f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f9e:	4770      	bx	lr

08107fa0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8107fa0:	b590      	push	{r4, r7, lr}
 8107fa2:	b08b      	sub	sp, #44	@ 0x2c
 8107fa4:	af00      	add	r7, sp, #0
 8107fa6:	6178      	str	r0, [r7, #20]
 8107fa8:	6139      	str	r1, [r7, #16]
 8107faa:	60fa      	str	r2, [r7, #12]
 8107fac:	ed87 0a02 	vstr	s0, [r7, #8]
 8107fb0:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 8107fb2:	693b      	ldr	r3, [r7, #16]
 8107fb4:	3b01      	subs	r3, #1
 8107fb6:	0fda      	lsrs	r2, r3, #31
 8107fb8:	4413      	add	r3, r2
 8107fba:	105b      	asrs	r3, r3, #1
 8107fbc:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8107fbe:	e029      	b.n	8108014 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8107fc0:	f107 0314 	add.w	r3, r7, #20
 8107fc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8107fc6:	4618      	mov	r0, r3
 8107fc8:	f7fe f9fb 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107fcc:	4603      	mov	r3, r0
 8107fce:	61bb      	str	r3, [r7, #24]
 8107fd0:	f107 0318 	add.w	r3, r7, #24
 8107fd4:	4618      	mov	r0, r3
 8107fd6:	f7fe ffe1 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107fda:	4603      	mov	r3, r0
 8107fdc:	4618      	mov	r0, r3
 8107fde:	f7fe fb85 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8107fe2:	4604      	mov	r4, r0
 8107fe4:	f107 0314 	add.w	r3, r7, #20
 8107fe8:	6939      	ldr	r1, [r7, #16]
 8107fea:	4618      	mov	r0, r3
 8107fec:	f7fe f9e9 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107ff0:	4603      	mov	r3, r0
 8107ff2:	61fb      	str	r3, [r7, #28]
 8107ff4:	f107 031c 	add.w	r3, r7, #28
 8107ff8:	4618      	mov	r0, r3
 8107ffa:	f7fe ffcf 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107ffe:	4602      	mov	r2, r0
 8108000:	6823      	ldr	r3, [r4, #0]
 8108002:	6013      	str	r3, [r2, #0]
	  __holeIndex = __parent;
 8108004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108006:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 8108008:	693b      	ldr	r3, [r7, #16]
 810800a:	3b01      	subs	r3, #1
 810800c:	0fda      	lsrs	r2, r3, #31
 810800e:	4413      	add	r3, r2
 8108010:	105b      	asrs	r3, r3, #1
 8108012:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8108014:	693a      	ldr	r2, [r7, #16]
 8108016:	68fb      	ldr	r3, [r7, #12]
 8108018:	429a      	cmp	r2, r3
 810801a:	dd11      	ble.n	8108040 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 810801c:	f107 0314 	add.w	r3, r7, #20
 8108020:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8108022:	4618      	mov	r0, r3
 8108024:	f7fe f9cd 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8108028:	4601      	mov	r1, r0
 810802a:	f107 0308 	add.w	r3, r7, #8
 810802e:	461a      	mov	r2, r3
 8108030:	6878      	ldr	r0, [r7, #4]
 8108032:	f000 f83f 	bl	81080b4 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 8108036:	4603      	mov	r3, r0
 8108038:	2b00      	cmp	r3, #0
 810803a:	d001      	beq.n	8108040 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 810803c:	2301      	movs	r3, #1
 810803e:	e000      	b.n	8108042 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa2>
 8108040:	2300      	movs	r3, #0
 8108042:	2b00      	cmp	r3, #0
 8108044:	d1bc      	bne.n	8107fc0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8108046:	f107 0308 	add.w	r3, r7, #8
 810804a:	4618      	mov	r0, r3
 810804c:	f7fe fb4e 	bl	81066ec <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8108050:	4604      	mov	r4, r0
 8108052:	f107 0314 	add.w	r3, r7, #20
 8108056:	6939      	ldr	r1, [r7, #16]
 8108058:	4618      	mov	r0, r3
 810805a:	f7fe f9b2 	bl	81063c2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810805e:	4603      	mov	r3, r0
 8108060:	623b      	str	r3, [r7, #32]
 8108062:	f107 0320 	add.w	r3, r7, #32
 8108066:	4618      	mov	r0, r3
 8108068:	f7fe ff98 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810806c:	4602      	mov	r2, r0
 810806e:	6823      	ldr	r3, [r4, #0]
 8108070:	6013      	str	r3, [r2, #0]
    }
 8108072:	bf00      	nop
 8108074:	372c      	adds	r7, #44	@ 0x2c
 8108076:	46bd      	mov	sp, r7
 8108078:	bd90      	pop	{r4, r7, pc}

0810807a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 810807a:	b580      	push	{r7, lr}
 810807c:	b086      	sub	sp, #24
 810807e:	af00      	add	r7, sp, #0
 8108080:	60f8      	str	r0, [r7, #12]
 8108082:	60b9      	str	r1, [r7, #8]
 8108084:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8108086:	68ba      	ldr	r2, [r7, #8]
 8108088:	68fb      	ldr	r3, [r7, #12]
 810808a:	1ad3      	subs	r3, r2, r3
 810808c:	109b      	asrs	r3, r3, #2
 810808e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8108090:	697b      	ldr	r3, [r7, #20]
 8108092:	2b00      	cmp	r3, #0
 8108094:	d006      	beq.n	81080a4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8108096:	697b      	ldr	r3, [r7, #20]
 8108098:	009b      	lsls	r3, r3, #2
 810809a:	461a      	mov	r2, r3
 810809c:	68f9      	ldr	r1, [r7, #12]
 810809e:	6878      	ldr	r0, [r7, #4]
 81080a0:	f015 ffc2 	bl	811e028 <memmove>
	  return __result + _Num;
 81080a4:	697b      	ldr	r3, [r7, #20]
 81080a6:	009b      	lsls	r3, r3, #2
 81080a8:	687a      	ldr	r2, [r7, #4]
 81080aa:	4413      	add	r3, r2
	}
 81080ac:	4618      	mov	r0, r3
 81080ae:	3718      	adds	r7, #24
 81080b0:	46bd      	mov	sp, r7
 81080b2:	bd80      	pop	{r7, pc}

081080b4 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 81080b4:	b580      	push	{r7, lr}
 81080b6:	b084      	sub	sp, #16
 81080b8:	af00      	add	r7, sp, #0
 81080ba:	60f8      	str	r0, [r7, #12]
 81080bc:	60b9      	str	r1, [r7, #8]
 81080be:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 81080c0:	f107 0308 	add.w	r3, r7, #8
 81080c4:	4618      	mov	r0, r3
 81080c6:	f7fe ff69 	bl	8106f9c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81080ca:	4603      	mov	r3, r0
 81080cc:	ed93 7a00 	vldr	s14, [r3]
 81080d0:	687b      	ldr	r3, [r7, #4]
 81080d2:	edd3 7a00 	vldr	s15, [r3]
 81080d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81080da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81080de:	bf4c      	ite	mi
 81080e0:	2301      	movmi	r3, #1
 81080e2:	2300      	movpl	r3, #0
 81080e4:	b2db      	uxtb	r3, r3
 81080e6:	4618      	mov	r0, r3
 81080e8:	3710      	adds	r7, #16
 81080ea:	46bd      	mov	sp, r7
 81080ec:	bd80      	pop	{r7, pc}

081080ee <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 81080ee:	b480      	push	{r7}
 81080f0:	b083      	sub	sp, #12
 81080f2:	af00      	add	r7, sp, #0
 81080f4:	6078      	str	r0, [r7, #4]
 81080f6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 81080f8:	687b      	ldr	r3, [r7, #4]
 81080fa:	2b00      	cmp	r3, #0
 81080fc:	d00b      	beq.n	8108116 <LAN8742_RegisterBusIO+0x28>
 81080fe:	683b      	ldr	r3, [r7, #0]
 8108100:	68db      	ldr	r3, [r3, #12]
 8108102:	2b00      	cmp	r3, #0
 8108104:	d007      	beq.n	8108116 <LAN8742_RegisterBusIO+0x28>
 8108106:	683b      	ldr	r3, [r7, #0]
 8108108:	689b      	ldr	r3, [r3, #8]
 810810a:	2b00      	cmp	r3, #0
 810810c:	d003      	beq.n	8108116 <LAN8742_RegisterBusIO+0x28>
 810810e:	683b      	ldr	r3, [r7, #0]
 8108110:	691b      	ldr	r3, [r3, #16]
 8108112:	2b00      	cmp	r3, #0
 8108114:	d102      	bne.n	810811c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8108116:	f04f 33ff 	mov.w	r3, #4294967295
 810811a:	e014      	b.n	8108146 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 810811c:	683b      	ldr	r3, [r7, #0]
 810811e:	681a      	ldr	r2, [r3, #0]
 8108120:	687b      	ldr	r3, [r7, #4]
 8108122:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8108124:	683b      	ldr	r3, [r7, #0]
 8108126:	685a      	ldr	r2, [r3, #4]
 8108128:	687b      	ldr	r3, [r7, #4]
 810812a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 810812c:	683b      	ldr	r3, [r7, #0]
 810812e:	68da      	ldr	r2, [r3, #12]
 8108130:	687b      	ldr	r3, [r7, #4]
 8108132:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8108134:	683b      	ldr	r3, [r7, #0]
 8108136:	689a      	ldr	r2, [r3, #8]
 8108138:	687b      	ldr	r3, [r7, #4]
 810813a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 810813c:	683b      	ldr	r3, [r7, #0]
 810813e:	691a      	ldr	r2, [r3, #16]
 8108140:	687b      	ldr	r3, [r7, #4]
 8108142:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8108144:	2300      	movs	r3, #0
}
 8108146:	4618      	mov	r0, r3
 8108148:	370c      	adds	r7, #12
 810814a:	46bd      	mov	sp, r7
 810814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108150:	4770      	bx	lr

08108152 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8108152:	b580      	push	{r7, lr}
 8108154:	b086      	sub	sp, #24
 8108156:	af00      	add	r7, sp, #0
 8108158:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 810815a:	2300      	movs	r3, #0
 810815c:	60fb      	str	r3, [r7, #12]
 810815e:	2300      	movs	r3, #0
 8108160:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8108162:	2300      	movs	r3, #0
 8108164:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8108166:	687b      	ldr	r3, [r7, #4]
 8108168:	685b      	ldr	r3, [r3, #4]
 810816a:	2b00      	cmp	r3, #0
 810816c:	d139      	bne.n	81081e2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 810816e:	687b      	ldr	r3, [r7, #4]
 8108170:	689b      	ldr	r3, [r3, #8]
 8108172:	2b00      	cmp	r3, #0
 8108174:	d002      	beq.n	810817c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8108176:	687b      	ldr	r3, [r7, #4]
 8108178:	689b      	ldr	r3, [r3, #8]
 810817a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 810817c:	687b      	ldr	r3, [r7, #4]
 810817e:	2220      	movs	r2, #32
 8108180:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8108182:	2300      	movs	r3, #0
 8108184:	617b      	str	r3, [r7, #20]
 8108186:	e01c      	b.n	81081c2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8108188:	687b      	ldr	r3, [r7, #4]
 810818a:	695b      	ldr	r3, [r3, #20]
 810818c:	f107 020c 	add.w	r2, r7, #12
 8108190:	2112      	movs	r1, #18
 8108192:	6978      	ldr	r0, [r7, #20]
 8108194:	4798      	blx	r3
 8108196:	4603      	mov	r3, r0
 8108198:	2b00      	cmp	r3, #0
 810819a:	da03      	bge.n	81081a4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 810819c:	f06f 0304 	mvn.w	r3, #4
 81081a0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 81081a2:	e00b      	b.n	81081bc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 81081a4:	68fb      	ldr	r3, [r7, #12]
 81081a6:	f003 031f 	and.w	r3, r3, #31
 81081aa:	697a      	ldr	r2, [r7, #20]
 81081ac:	429a      	cmp	r2, r3
 81081ae:	d105      	bne.n	81081bc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 81081b0:	687b      	ldr	r3, [r7, #4]
 81081b2:	697a      	ldr	r2, [r7, #20]
 81081b4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 81081b6:	2300      	movs	r3, #0
 81081b8:	613b      	str	r3, [r7, #16]
         break;
 81081ba:	e005      	b.n	81081c8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 81081bc:	697b      	ldr	r3, [r7, #20]
 81081be:	3301      	adds	r3, #1
 81081c0:	617b      	str	r3, [r7, #20]
 81081c2:	697b      	ldr	r3, [r7, #20]
 81081c4:	2b1f      	cmp	r3, #31
 81081c6:	d9df      	bls.n	8108188 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 81081c8:	687b      	ldr	r3, [r7, #4]
 81081ca:	681b      	ldr	r3, [r3, #0]
 81081cc:	2b1f      	cmp	r3, #31
 81081ce:	d902      	bls.n	81081d6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 81081d0:	f06f 0302 	mvn.w	r3, #2
 81081d4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 81081d6:	693b      	ldr	r3, [r7, #16]
 81081d8:	2b00      	cmp	r3, #0
 81081da:	d102      	bne.n	81081e2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 81081dc:	687b      	ldr	r3, [r7, #4]
 81081de:	2201      	movs	r2, #1
 81081e0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 81081e2:	693b      	ldr	r3, [r7, #16]
 }
 81081e4:	4618      	mov	r0, r3
 81081e6:	3718      	adds	r7, #24
 81081e8:	46bd      	mov	sp, r7
 81081ea:	bd80      	pop	{r7, pc}

081081ec <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 81081ec:	b580      	push	{r7, lr}
 81081ee:	b084      	sub	sp, #16
 81081f0:	af00      	add	r7, sp, #0
 81081f2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 81081f4:	2300      	movs	r3, #0
 81081f6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 81081f8:	687b      	ldr	r3, [r7, #4]
 81081fa:	695b      	ldr	r3, [r3, #20]
 81081fc:	687a      	ldr	r2, [r7, #4]
 81081fe:	6810      	ldr	r0, [r2, #0]
 8108200:	f107 020c 	add.w	r2, r7, #12
 8108204:	2101      	movs	r1, #1
 8108206:	4798      	blx	r3
 8108208:	4603      	mov	r3, r0
 810820a:	2b00      	cmp	r3, #0
 810820c:	da02      	bge.n	8108214 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 810820e:	f06f 0304 	mvn.w	r3, #4
 8108212:	e06e      	b.n	81082f2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8108214:	687b      	ldr	r3, [r7, #4]
 8108216:	695b      	ldr	r3, [r3, #20]
 8108218:	687a      	ldr	r2, [r7, #4]
 810821a:	6810      	ldr	r0, [r2, #0]
 810821c:	f107 020c 	add.w	r2, r7, #12
 8108220:	2101      	movs	r1, #1
 8108222:	4798      	blx	r3
 8108224:	4603      	mov	r3, r0
 8108226:	2b00      	cmp	r3, #0
 8108228:	da02      	bge.n	8108230 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 810822a:	f06f 0304 	mvn.w	r3, #4
 810822e:	e060      	b.n	81082f2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8108230:	68fb      	ldr	r3, [r7, #12]
 8108232:	f003 0304 	and.w	r3, r3, #4
 8108236:	2b00      	cmp	r3, #0
 8108238:	d101      	bne.n	810823e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 810823a:	2301      	movs	r3, #1
 810823c:	e059      	b.n	81082f2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 810823e:	687b      	ldr	r3, [r7, #4]
 8108240:	695b      	ldr	r3, [r3, #20]
 8108242:	687a      	ldr	r2, [r7, #4]
 8108244:	6810      	ldr	r0, [r2, #0]
 8108246:	f107 020c 	add.w	r2, r7, #12
 810824a:	2100      	movs	r1, #0
 810824c:	4798      	blx	r3
 810824e:	4603      	mov	r3, r0
 8108250:	2b00      	cmp	r3, #0
 8108252:	da02      	bge.n	810825a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8108254:	f06f 0304 	mvn.w	r3, #4
 8108258:	e04b      	b.n	81082f2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 810825a:	68fb      	ldr	r3, [r7, #12]
 810825c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8108260:	2b00      	cmp	r3, #0
 8108262:	d11b      	bne.n	810829c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8108264:	68fb      	ldr	r3, [r7, #12]
 8108266:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810826a:	2b00      	cmp	r3, #0
 810826c:	d006      	beq.n	810827c <LAN8742_GetLinkState+0x90>
 810826e:	68fb      	ldr	r3, [r7, #12]
 8108270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108274:	2b00      	cmp	r3, #0
 8108276:	d001      	beq.n	810827c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8108278:	2302      	movs	r3, #2
 810827a:	e03a      	b.n	81082f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 810827c:	68fb      	ldr	r3, [r7, #12]
 810827e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8108282:	2b00      	cmp	r3, #0
 8108284:	d001      	beq.n	810828a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8108286:	2303      	movs	r3, #3
 8108288:	e033      	b.n	81082f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 810828a:	68fb      	ldr	r3, [r7, #12]
 810828c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108290:	2b00      	cmp	r3, #0
 8108292:	d001      	beq.n	8108298 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8108294:	2304      	movs	r3, #4
 8108296:	e02c      	b.n	81082f2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8108298:	2305      	movs	r3, #5
 810829a:	e02a      	b.n	81082f2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 810829c:	687b      	ldr	r3, [r7, #4]
 810829e:	695b      	ldr	r3, [r3, #20]
 81082a0:	687a      	ldr	r2, [r7, #4]
 81082a2:	6810      	ldr	r0, [r2, #0]
 81082a4:	f107 020c 	add.w	r2, r7, #12
 81082a8:	211f      	movs	r1, #31
 81082aa:	4798      	blx	r3
 81082ac:	4603      	mov	r3, r0
 81082ae:	2b00      	cmp	r3, #0
 81082b0:	da02      	bge.n	81082b8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 81082b2:	f06f 0304 	mvn.w	r3, #4
 81082b6:	e01c      	b.n	81082f2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 81082b8:	68fb      	ldr	r3, [r7, #12]
 81082ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81082be:	2b00      	cmp	r3, #0
 81082c0:	d101      	bne.n	81082c6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 81082c2:	2306      	movs	r3, #6
 81082c4:	e015      	b.n	81082f2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 81082c6:	68fb      	ldr	r3, [r7, #12]
 81082c8:	f003 031c 	and.w	r3, r3, #28
 81082cc:	2b18      	cmp	r3, #24
 81082ce:	d101      	bne.n	81082d4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 81082d0:	2302      	movs	r3, #2
 81082d2:	e00e      	b.n	81082f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 81082d4:	68fb      	ldr	r3, [r7, #12]
 81082d6:	f003 031c 	and.w	r3, r3, #28
 81082da:	2b08      	cmp	r3, #8
 81082dc:	d101      	bne.n	81082e2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 81082de:	2303      	movs	r3, #3
 81082e0:	e007      	b.n	81082f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 81082e2:	68fb      	ldr	r3, [r7, #12]
 81082e4:	f003 031c 	and.w	r3, r3, #28
 81082e8:	2b14      	cmp	r3, #20
 81082ea:	d101      	bne.n	81082f0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 81082ec:	2304      	movs	r3, #4
 81082ee:	e000      	b.n	81082f2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 81082f0:	2305      	movs	r3, #5
    }
  }
}
 81082f2:	4618      	mov	r0, r3
 81082f4:	3710      	adds	r7, #16
 81082f6:	46bd      	mov	sp, r7
 81082f8:	bd80      	pop	{r7, pc}
	...

081082fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81082fc:	b480      	push	{r7}
 81082fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8108300:	4b0b      	ldr	r3, [pc, #44]	@ (8108330 <SystemInit+0x34>)
 8108302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108306:	4a0a      	ldr	r2, [pc, #40]	@ (8108330 <SystemInit+0x34>)
 8108308:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810830c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8108310:	4b07      	ldr	r3, [pc, #28]	@ (8108330 <SystemInit+0x34>)
 8108312:	691b      	ldr	r3, [r3, #16]
 8108314:	4a06      	ldr	r2, [pc, #24]	@ (8108330 <SystemInit+0x34>)
 8108316:	f043 0310 	orr.w	r3, r3, #16
 810831a:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 810831c:	4b04      	ldr	r3, [pc, #16]	@ (8108330 <SystemInit+0x34>)
 810831e:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 8108322:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8108324:	bf00      	nop
 8108326:	46bd      	mov	sp, r7
 8108328:	f85d 7b04 	ldr.w	r7, [sp], #4
 810832c:	4770      	bx	lr
 810832e:	bf00      	nop
 8108330:	e000ed00 	.word	0xe000ed00

08108334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8108334:	b580      	push	{r7, lr}
 8108336:	b082      	sub	sp, #8
 8108338:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810833a:	4b28      	ldr	r3, [pc, #160]	@ (81083dc <HAL_Init+0xa8>)
 810833c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8108340:	4a26      	ldr	r2, [pc, #152]	@ (81083dc <HAL_Init+0xa8>)
 8108342:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8108346:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810834a:	4b24      	ldr	r3, [pc, #144]	@ (81083dc <HAL_Init+0xa8>)
 810834c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8108350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8108354:	603b      	str	r3, [r7, #0]
 8108356:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8108358:	4b21      	ldr	r3, [pc, #132]	@ (81083e0 <HAL_Init+0xac>)
 810835a:	681b      	ldr	r3, [r3, #0]
 810835c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8108360:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8108364:	4a1e      	ldr	r2, [pc, #120]	@ (81083e0 <HAL_Init+0xac>)
 8108366:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810836a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810836c:	4b1c      	ldr	r3, [pc, #112]	@ (81083e0 <HAL_Init+0xac>)
 810836e:	681b      	ldr	r3, [r3, #0]
 8108370:	4a1b      	ldr	r2, [pc, #108]	@ (81083e0 <HAL_Init+0xac>)
 8108372:	f043 0301 	orr.w	r3, r3, #1
 8108376:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8108378:	2003      	movs	r0, #3
 810837a:	f000 f91a 	bl	81085b2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810837e:	f002 ff79 	bl	810b274 <HAL_RCC_GetSysClockFreq>
 8108382:	4602      	mov	r2, r0
 8108384:	4b15      	ldr	r3, [pc, #84]	@ (81083dc <HAL_Init+0xa8>)
 8108386:	699b      	ldr	r3, [r3, #24]
 8108388:	0a1b      	lsrs	r3, r3, #8
 810838a:	f003 030f 	and.w	r3, r3, #15
 810838e:	4915      	ldr	r1, [pc, #84]	@ (81083e4 <HAL_Init+0xb0>)
 8108390:	5ccb      	ldrb	r3, [r1, r3]
 8108392:	f003 031f 	and.w	r3, r3, #31
 8108396:	fa22 f303 	lsr.w	r3, r2, r3
 810839a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810839c:	4b0f      	ldr	r3, [pc, #60]	@ (81083dc <HAL_Init+0xa8>)
 810839e:	699b      	ldr	r3, [r3, #24]
 81083a0:	f003 030f 	and.w	r3, r3, #15
 81083a4:	4a0f      	ldr	r2, [pc, #60]	@ (81083e4 <HAL_Init+0xb0>)
 81083a6:	5cd3      	ldrb	r3, [r2, r3]
 81083a8:	f003 031f 	and.w	r3, r3, #31
 81083ac:	687a      	ldr	r2, [r7, #4]
 81083ae:	fa22 f303 	lsr.w	r3, r2, r3
 81083b2:	4a0d      	ldr	r2, [pc, #52]	@ (81083e8 <HAL_Init+0xb4>)
 81083b4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81083b6:	4b0c      	ldr	r3, [pc, #48]	@ (81083e8 <HAL_Init+0xb4>)
 81083b8:	681b      	ldr	r3, [r3, #0]
 81083ba:	4a0c      	ldr	r2, [pc, #48]	@ (81083ec <HAL_Init+0xb8>)
 81083bc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81083be:	2000      	movs	r0, #0
 81083c0:	f7f8 fbf6 	bl	8100bb0 <HAL_InitTick>
 81083c4:	4603      	mov	r3, r0
 81083c6:	2b00      	cmp	r3, #0
 81083c8:	d001      	beq.n	81083ce <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81083ca:	2301      	movs	r3, #1
 81083cc:	e002      	b.n	81083d4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81083ce:	f7f8 fb39 	bl	8100a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81083d2:	2300      	movs	r3, #0
}
 81083d4:	4618      	mov	r0, r3
 81083d6:	3708      	adds	r7, #8
 81083d8:	46bd      	mov	sp, r7
 81083da:	bd80      	pop	{r7, pc}
 81083dc:	58024400 	.word	0x58024400
 81083e0:	40024400 	.word	0x40024400
 81083e4:	081224b8 	.word	0x081224b8
 81083e8:	10000018 	.word	0x10000018
 81083ec:	10000014 	.word	0x10000014

081083f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81083f0:	b480      	push	{r7}
 81083f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81083f4:	4b06      	ldr	r3, [pc, #24]	@ (8108410 <HAL_IncTick+0x20>)
 81083f6:	781b      	ldrb	r3, [r3, #0]
 81083f8:	461a      	mov	r2, r3
 81083fa:	4b06      	ldr	r3, [pc, #24]	@ (8108414 <HAL_IncTick+0x24>)
 81083fc:	681b      	ldr	r3, [r3, #0]
 81083fe:	4413      	add	r3, r2
 8108400:	4a04      	ldr	r2, [pc, #16]	@ (8108414 <HAL_IncTick+0x24>)
 8108402:	6013      	str	r3, [r2, #0]
}
 8108404:	bf00      	nop
 8108406:	46bd      	mov	sp, r7
 8108408:	f85d 7b04 	ldr.w	r7, [sp], #4
 810840c:	4770      	bx	lr
 810840e:	bf00      	nop
 8108410:	10000020 	.word	0x10000020
 8108414:	100003bc 	.word	0x100003bc

08108418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8108418:	b480      	push	{r7}
 810841a:	af00      	add	r7, sp, #0
  return uwTick;
 810841c:	4b03      	ldr	r3, [pc, #12]	@ (810842c <HAL_GetTick+0x14>)
 810841e:	681b      	ldr	r3, [r3, #0]
}
 8108420:	4618      	mov	r0, r3
 8108422:	46bd      	mov	sp, r7
 8108424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108428:	4770      	bx	lr
 810842a:	bf00      	nop
 810842c:	100003bc 	.word	0x100003bc

08108430 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8108430:	b480      	push	{r7}
 8108432:	b083      	sub	sp, #12
 8108434:	af00      	add	r7, sp, #0
 8108436:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8108438:	4b06      	ldr	r3, [pc, #24]	@ (8108454 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810843a:	685b      	ldr	r3, [r3, #4]
 810843c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8108440:	4904      	ldr	r1, [pc, #16]	@ (8108454 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8108442:	687b      	ldr	r3, [r7, #4]
 8108444:	4313      	orrs	r3, r2
 8108446:	604b      	str	r3, [r1, #4]
}
 8108448:	bf00      	nop
 810844a:	370c      	adds	r7, #12
 810844c:	46bd      	mov	sp, r7
 810844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108452:	4770      	bx	lr
 8108454:	58000400 	.word	0x58000400

08108458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8108458:	b480      	push	{r7}
 810845a:	b085      	sub	sp, #20
 810845c:	af00      	add	r7, sp, #0
 810845e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8108460:	687b      	ldr	r3, [r7, #4]
 8108462:	f003 0307 	and.w	r3, r3, #7
 8108466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8108468:	4b0c      	ldr	r3, [pc, #48]	@ (810849c <__NVIC_SetPriorityGrouping+0x44>)
 810846a:	68db      	ldr	r3, [r3, #12]
 810846c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810846e:	68ba      	ldr	r2, [r7, #8]
 8108470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8108474:	4013      	ands	r3, r2
 8108476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8108478:	68fb      	ldr	r3, [r7, #12]
 810847a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810847c:	68bb      	ldr	r3, [r7, #8]
 810847e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8108480:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8108484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810848a:	4a04      	ldr	r2, [pc, #16]	@ (810849c <__NVIC_SetPriorityGrouping+0x44>)
 810848c:	68bb      	ldr	r3, [r7, #8]
 810848e:	60d3      	str	r3, [r2, #12]
}
 8108490:	bf00      	nop
 8108492:	3714      	adds	r7, #20
 8108494:	46bd      	mov	sp, r7
 8108496:	f85d 7b04 	ldr.w	r7, [sp], #4
 810849a:	4770      	bx	lr
 810849c:	e000ed00 	.word	0xe000ed00

081084a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81084a0:	b480      	push	{r7}
 81084a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81084a4:	4b04      	ldr	r3, [pc, #16]	@ (81084b8 <__NVIC_GetPriorityGrouping+0x18>)
 81084a6:	68db      	ldr	r3, [r3, #12]
 81084a8:	0a1b      	lsrs	r3, r3, #8
 81084aa:	f003 0307 	and.w	r3, r3, #7
}
 81084ae:	4618      	mov	r0, r3
 81084b0:	46bd      	mov	sp, r7
 81084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084b6:	4770      	bx	lr
 81084b8:	e000ed00 	.word	0xe000ed00

081084bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81084bc:	b480      	push	{r7}
 81084be:	b083      	sub	sp, #12
 81084c0:	af00      	add	r7, sp, #0
 81084c2:	4603      	mov	r3, r0
 81084c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81084c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81084ca:	2b00      	cmp	r3, #0
 81084cc:	db0b      	blt.n	81084e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81084ce:	88fb      	ldrh	r3, [r7, #6]
 81084d0:	f003 021f 	and.w	r2, r3, #31
 81084d4:	4907      	ldr	r1, [pc, #28]	@ (81084f4 <__NVIC_EnableIRQ+0x38>)
 81084d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81084da:	095b      	lsrs	r3, r3, #5
 81084dc:	2001      	movs	r0, #1
 81084de:	fa00 f202 	lsl.w	r2, r0, r2
 81084e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81084e6:	bf00      	nop
 81084e8:	370c      	adds	r7, #12
 81084ea:	46bd      	mov	sp, r7
 81084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084f0:	4770      	bx	lr
 81084f2:	bf00      	nop
 81084f4:	e000e100 	.word	0xe000e100

081084f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81084f8:	b480      	push	{r7}
 81084fa:	b083      	sub	sp, #12
 81084fc:	af00      	add	r7, sp, #0
 81084fe:	4603      	mov	r3, r0
 8108500:	6039      	str	r1, [r7, #0]
 8108502:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8108504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108508:	2b00      	cmp	r3, #0
 810850a:	db0a      	blt.n	8108522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810850c:	683b      	ldr	r3, [r7, #0]
 810850e:	b2da      	uxtb	r2, r3
 8108510:	490c      	ldr	r1, [pc, #48]	@ (8108544 <__NVIC_SetPriority+0x4c>)
 8108512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108516:	0112      	lsls	r2, r2, #4
 8108518:	b2d2      	uxtb	r2, r2
 810851a:	440b      	add	r3, r1
 810851c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8108520:	e00a      	b.n	8108538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8108522:	683b      	ldr	r3, [r7, #0]
 8108524:	b2da      	uxtb	r2, r3
 8108526:	4908      	ldr	r1, [pc, #32]	@ (8108548 <__NVIC_SetPriority+0x50>)
 8108528:	88fb      	ldrh	r3, [r7, #6]
 810852a:	f003 030f 	and.w	r3, r3, #15
 810852e:	3b04      	subs	r3, #4
 8108530:	0112      	lsls	r2, r2, #4
 8108532:	b2d2      	uxtb	r2, r2
 8108534:	440b      	add	r3, r1
 8108536:	761a      	strb	r2, [r3, #24]
}
 8108538:	bf00      	nop
 810853a:	370c      	adds	r7, #12
 810853c:	46bd      	mov	sp, r7
 810853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108542:	4770      	bx	lr
 8108544:	e000e100 	.word	0xe000e100
 8108548:	e000ed00 	.word	0xe000ed00

0810854c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810854c:	b480      	push	{r7}
 810854e:	b089      	sub	sp, #36	@ 0x24
 8108550:	af00      	add	r7, sp, #0
 8108552:	60f8      	str	r0, [r7, #12]
 8108554:	60b9      	str	r1, [r7, #8]
 8108556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8108558:	68fb      	ldr	r3, [r7, #12]
 810855a:	f003 0307 	and.w	r3, r3, #7
 810855e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8108560:	69fb      	ldr	r3, [r7, #28]
 8108562:	f1c3 0307 	rsb	r3, r3, #7
 8108566:	2b04      	cmp	r3, #4
 8108568:	bf28      	it	cs
 810856a:	2304      	movcs	r3, #4
 810856c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810856e:	69fb      	ldr	r3, [r7, #28]
 8108570:	3304      	adds	r3, #4
 8108572:	2b06      	cmp	r3, #6
 8108574:	d902      	bls.n	810857c <NVIC_EncodePriority+0x30>
 8108576:	69fb      	ldr	r3, [r7, #28]
 8108578:	3b03      	subs	r3, #3
 810857a:	e000      	b.n	810857e <NVIC_EncodePriority+0x32>
 810857c:	2300      	movs	r3, #0
 810857e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8108580:	f04f 32ff 	mov.w	r2, #4294967295
 8108584:	69bb      	ldr	r3, [r7, #24]
 8108586:	fa02 f303 	lsl.w	r3, r2, r3
 810858a:	43da      	mvns	r2, r3
 810858c:	68bb      	ldr	r3, [r7, #8]
 810858e:	401a      	ands	r2, r3
 8108590:	697b      	ldr	r3, [r7, #20]
 8108592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8108594:	f04f 31ff 	mov.w	r1, #4294967295
 8108598:	697b      	ldr	r3, [r7, #20]
 810859a:	fa01 f303 	lsl.w	r3, r1, r3
 810859e:	43d9      	mvns	r1, r3
 81085a0:	687b      	ldr	r3, [r7, #4]
 81085a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81085a4:	4313      	orrs	r3, r2
         );
}
 81085a6:	4618      	mov	r0, r3
 81085a8:	3724      	adds	r7, #36	@ 0x24
 81085aa:	46bd      	mov	sp, r7
 81085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085b0:	4770      	bx	lr

081085b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81085b2:	b580      	push	{r7, lr}
 81085b4:	b082      	sub	sp, #8
 81085b6:	af00      	add	r7, sp, #0
 81085b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81085ba:	6878      	ldr	r0, [r7, #4]
 81085bc:	f7ff ff4c 	bl	8108458 <__NVIC_SetPriorityGrouping>
}
 81085c0:	bf00      	nop
 81085c2:	3708      	adds	r7, #8
 81085c4:	46bd      	mov	sp, r7
 81085c6:	bd80      	pop	{r7, pc}

081085c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81085c8:	b580      	push	{r7, lr}
 81085ca:	b086      	sub	sp, #24
 81085cc:	af00      	add	r7, sp, #0
 81085ce:	4603      	mov	r3, r0
 81085d0:	60b9      	str	r1, [r7, #8]
 81085d2:	607a      	str	r2, [r7, #4]
 81085d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81085d6:	f7ff ff63 	bl	81084a0 <__NVIC_GetPriorityGrouping>
 81085da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81085dc:	687a      	ldr	r2, [r7, #4]
 81085de:	68b9      	ldr	r1, [r7, #8]
 81085e0:	6978      	ldr	r0, [r7, #20]
 81085e2:	f7ff ffb3 	bl	810854c <NVIC_EncodePriority>
 81085e6:	4602      	mov	r2, r0
 81085e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81085ec:	4611      	mov	r1, r2
 81085ee:	4618      	mov	r0, r3
 81085f0:	f7ff ff82 	bl	81084f8 <__NVIC_SetPriority>
}
 81085f4:	bf00      	nop
 81085f6:	3718      	adds	r7, #24
 81085f8:	46bd      	mov	sp, r7
 81085fa:	bd80      	pop	{r7, pc}

081085fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81085fc:	b580      	push	{r7, lr}
 81085fe:	b082      	sub	sp, #8
 8108600:	af00      	add	r7, sp, #0
 8108602:	4603      	mov	r3, r0
 8108604:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8108606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810860a:	4618      	mov	r0, r3
 810860c:	f7ff ff56 	bl	81084bc <__NVIC_EnableIRQ>
}
 8108610:	bf00      	nop
 8108612:	3708      	adds	r7, #8
 8108614:	46bd      	mov	sp, r7
 8108616:	bd80      	pop	{r7, pc}

08108618 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8108618:	b480      	push	{r7}
 810861a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810861c:	4b07      	ldr	r3, [pc, #28]	@ (810863c <HAL_GetCurrentCPUID+0x24>)
 810861e:	681b      	ldr	r3, [r3, #0]
 8108620:	091b      	lsrs	r3, r3, #4
 8108622:	f003 030f 	and.w	r3, r3, #15
 8108626:	2b07      	cmp	r3, #7
 8108628:	d101      	bne.n	810862e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810862a:	2303      	movs	r3, #3
 810862c:	e000      	b.n	8108630 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810862e:	2301      	movs	r3, #1
  }
}
 8108630:	4618      	mov	r0, r3
 8108632:	46bd      	mov	sp, r7
 8108634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108638:	4770      	bx	lr
 810863a:	bf00      	nop
 810863c:	e000ed00 	.word	0xe000ed00

08108640 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8108640:	b580      	push	{r7, lr}
 8108642:	b084      	sub	sp, #16
 8108644:	af00      	add	r7, sp, #0
 8108646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8108648:	687b      	ldr	r3, [r7, #4]
 810864a:	2b00      	cmp	r3, #0
 810864c:	d101      	bne.n	8108652 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 810864e:	2301      	movs	r3, #1
 8108650:	e0e7      	b.n	8108822 <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8108652:	687b      	ldr	r3, [r7, #4]
 8108654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108658:	2b00      	cmp	r3, #0
 810865a:	d106      	bne.n	810866a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 810865c:	687b      	ldr	r3, [r7, #4]
 810865e:	2223      	movs	r2, #35	@ 0x23
 8108660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8108664:	6878      	ldr	r0, [r7, #4]
 8108666:	f7fd f8dd 	bl	8105824 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810866a:	4b70      	ldr	r3, [pc, #448]	@ (810882c <HAL_ETH_Init+0x1ec>)
 810866c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8108670:	4a6e      	ldr	r2, [pc, #440]	@ (810882c <HAL_ETH_Init+0x1ec>)
 8108672:	f043 0302 	orr.w	r3, r3, #2
 8108676:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810867a:	4b6c      	ldr	r3, [pc, #432]	@ (810882c <HAL_ETH_Init+0x1ec>)
 810867c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8108680:	f003 0302 	and.w	r3, r3, #2
 8108684:	60bb      	str	r3, [r7, #8]
 8108686:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8108688:	687b      	ldr	r3, [r7, #4]
 810868a:	7a1b      	ldrb	r3, [r3, #8]
 810868c:	2b00      	cmp	r3, #0
 810868e:	d103      	bne.n	8108698 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8108690:	2000      	movs	r0, #0
 8108692:	f7ff fecd 	bl	8108430 <HAL_SYSCFG_ETHInterfaceSelect>
 8108696:	e003      	b.n	81086a0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8108698:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 810869c:	f7ff fec8 	bl	8108430 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 81086a0:	4b63      	ldr	r3, [pc, #396]	@ (8108830 <HAL_ETH_Init+0x1f0>)
 81086a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 81086a4:	687b      	ldr	r3, [r7, #4]
 81086a6:	681b      	ldr	r3, [r3, #0]
 81086a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81086ac:	681b      	ldr	r3, [r3, #0]
 81086ae:	687a      	ldr	r2, [r7, #4]
 81086b0:	6812      	ldr	r2, [r2, #0]
 81086b2:	f043 0301 	orr.w	r3, r3, #1
 81086b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81086ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 81086bc:	f7ff feac 	bl	8108418 <HAL_GetTick>
 81086c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81086c2:	e011      	b.n	81086e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 81086c4:	f7ff fea8 	bl	8108418 <HAL_GetTick>
 81086c8:	4602      	mov	r2, r0
 81086ca:	68fb      	ldr	r3, [r7, #12]
 81086cc:	1ad3      	subs	r3, r2, r3
 81086ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 81086d2:	d909      	bls.n	81086e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 81086d4:	687b      	ldr	r3, [r7, #4]
 81086d6:	2204      	movs	r2, #4
 81086d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 81086dc:	687b      	ldr	r3, [r7, #4]
 81086de:	22e0      	movs	r2, #224	@ 0xe0
 81086e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 81086e4:	2301      	movs	r3, #1
 81086e6:	e09c      	b.n	8108822 <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81086e8:	687b      	ldr	r3, [r7, #4]
 81086ea:	681b      	ldr	r3, [r3, #0]
 81086ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81086f0:	681b      	ldr	r3, [r3, #0]
 81086f2:	f003 0301 	and.w	r3, r3, #1
 81086f6:	2b00      	cmp	r3, #0
 81086f8:	d1e4      	bne.n	81086c4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 81086fa:	6878      	ldr	r0, [r7, #4]
 81086fc:	f000 ff34 	bl	8109568 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8108700:	f002 ff32 	bl	810b568 <HAL_RCC_GetHCLKFreq>
 8108704:	4603      	mov	r3, r0
 8108706:	4a4b      	ldr	r2, [pc, #300]	@ (8108834 <HAL_ETH_Init+0x1f4>)
 8108708:	fba2 2303 	umull	r2, r3, r2, r3
 810870c:	0c9a      	lsrs	r2, r3, #18
 810870e:	687b      	ldr	r3, [r7, #4]
 8108710:	681b      	ldr	r3, [r3, #0]
 8108712:	3a01      	subs	r2, #1
 8108714:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8108718:	6878      	ldr	r0, [r7, #4]
 810871a:	f001 f931 	bl	8109980 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 810871e:	687b      	ldr	r3, [r7, #4]
 8108720:	681b      	ldr	r3, [r3, #0]
 8108722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108726:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 810872a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 810872e:	687a      	ldr	r2, [r7, #4]
 8108730:	6812      	ldr	r2, [r2, #0]
 8108732:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8108736:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810873a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 810873e:	687b      	ldr	r3, [r7, #4]
 8108740:	695b      	ldr	r3, [r3, #20]
 8108742:	f003 0303 	and.w	r3, r3, #3
 8108746:	2b00      	cmp	r3, #0
 8108748:	d009      	beq.n	810875e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 810874a:	687b      	ldr	r3, [r7, #4]
 810874c:	2201      	movs	r2, #1
 810874e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8108752:	687b      	ldr	r3, [r7, #4]
 8108754:	22e0      	movs	r2, #224	@ 0xe0
 8108756:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 810875a:	2301      	movs	r3, #1
 810875c:	e061      	b.n	8108822 <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 810875e:	687b      	ldr	r3, [r7, #4]
 8108760:	681b      	ldr	r3, [r3, #0]
 8108762:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108766:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810876a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810876e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8108772:	687a      	ldr	r2, [r7, #4]
 8108774:	6952      	ldr	r2, [r2, #20]
 8108776:	0051      	lsls	r1, r2, #1
 8108778:	687a      	ldr	r2, [r7, #4]
 810877a:	6812      	ldr	r2, [r2, #0]
 810877c:	430b      	orrs	r3, r1
 810877e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8108782:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8108786:	6878      	ldr	r0, [r7, #4]
 8108788:	f001 f997 	bl	8109aba <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 810878c:	6878      	ldr	r0, [r7, #4]
 810878e:	f001 f9dd 	bl	8109b4c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8108792:	687b      	ldr	r3, [r7, #4]
 8108794:	685b      	ldr	r3, [r3, #4]
 8108796:	3305      	adds	r3, #5
 8108798:	781b      	ldrb	r3, [r3, #0]
 810879a:	021a      	lsls	r2, r3, #8
 810879c:	687b      	ldr	r3, [r7, #4]
 810879e:	685b      	ldr	r3, [r3, #4]
 81087a0:	3304      	adds	r3, #4
 81087a2:	781b      	ldrb	r3, [r3, #0]
 81087a4:	4619      	mov	r1, r3
 81087a6:	687b      	ldr	r3, [r7, #4]
 81087a8:	681b      	ldr	r3, [r3, #0]
 81087aa:	430a      	orrs	r2, r1
 81087ac:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81087b0:	687b      	ldr	r3, [r7, #4]
 81087b2:	685b      	ldr	r3, [r3, #4]
 81087b4:	3303      	adds	r3, #3
 81087b6:	781b      	ldrb	r3, [r3, #0]
 81087b8:	061a      	lsls	r2, r3, #24
 81087ba:	687b      	ldr	r3, [r7, #4]
 81087bc:	685b      	ldr	r3, [r3, #4]
 81087be:	3302      	adds	r3, #2
 81087c0:	781b      	ldrb	r3, [r3, #0]
 81087c2:	041b      	lsls	r3, r3, #16
 81087c4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81087c6:	687b      	ldr	r3, [r7, #4]
 81087c8:	685b      	ldr	r3, [r3, #4]
 81087ca:	3301      	adds	r3, #1
 81087cc:	781b      	ldrb	r3, [r3, #0]
 81087ce:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81087d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81087d2:	687b      	ldr	r3, [r7, #4]
 81087d4:	685b      	ldr	r3, [r3, #4]
 81087d6:	781b      	ldrb	r3, [r3, #0]
 81087d8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81087da:	687b      	ldr	r3, [r7, #4]
 81087dc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81087de:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81087e0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 81087e4:	687b      	ldr	r3, [r7, #4]
 81087e6:	681b      	ldr	r3, [r3, #0]
 81087e8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 81087ec:	687b      	ldr	r3, [r7, #4]
 81087ee:	681a      	ldr	r2, [r3, #0]
 81087f0:	4b11      	ldr	r3, [pc, #68]	@ (8108838 <HAL_ETH_Init+0x1f8>)
 81087f2:	430b      	orrs	r3, r1
 81087f4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 81087f8:	687b      	ldr	r3, [r7, #4]
 81087fa:	681b      	ldr	r3, [r3, #0]
 81087fc:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 8108800:	687a      	ldr	r2, [r7, #4]
 8108802:	6812      	ldr	r2, [r2, #0]
 8108804:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 8108808:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 810880c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8108810:	687b      	ldr	r3, [r7, #4]
 8108812:	2200      	movs	r2, #0
 8108814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8108818:	687b      	ldr	r3, [r7, #4]
 810881a:	2210      	movs	r2, #16
 810881c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8108820:	2300      	movs	r3, #0
}
 8108822:	4618      	mov	r0, r3
 8108824:	3710      	adds	r7, #16
 8108826:	46bd      	mov	sp, r7
 8108828:	bd80      	pop	{r7, pc}
 810882a:	bf00      	nop
 810882c:	58024400 	.word	0x58024400
 8108830:	58000400 	.word	0x58000400
 8108834:	431bde83 	.word	0x431bde83
 8108838:	0c020060 	.word	0x0c020060

0810883c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 810883c:	b580      	push	{r7, lr}
 810883e:	b082      	sub	sp, #8
 8108840:	af00      	add	r7, sp, #0
 8108842:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8108844:	687b      	ldr	r3, [r7, #4]
 8108846:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810884a:	2b10      	cmp	r3, #16
 810884c:	d166      	bne.n	810891c <HAL_ETH_Start_IT+0xe0>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 810884e:	687b      	ldr	r3, [r7, #4]
 8108850:	2223      	movs	r2, #35	@ 0x23
 8108852:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8108856:	687b      	ldr	r3, [r7, #4]
 8108858:	2201      	movs	r2, #1
 810885a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 810885c:	687b      	ldr	r3, [r7, #4]
 810885e:	2204      	movs	r2, #4
 8108860:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8108862:	6878      	ldr	r0, [r7, #4]
 8108864:	f000 f9e5 	bl	8108c32 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8108868:	687b      	ldr	r3, [r7, #4]
 810886a:	681b      	ldr	r3, [r3, #0]
 810886c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108870:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8108874:	687a      	ldr	r2, [r7, #4]
 8108876:	6812      	ldr	r2, [r2, #0]
 8108878:	f043 0301 	orr.w	r3, r3, #1
 810887c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8108880:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8108884:	687b      	ldr	r3, [r7, #4]
 8108886:	681b      	ldr	r3, [r3, #0]
 8108888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810888c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8108890:	687a      	ldr	r2, [r7, #4]
 8108892:	6812      	ldr	r2, [r2, #0]
 8108894:	f043 0301 	orr.w	r3, r3, #1
 8108898:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810889c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 81088a0:	687b      	ldr	r3, [r7, #4]
 81088a2:	681b      	ldr	r3, [r3, #0]
 81088a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81088a8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 81088ac:	687a      	ldr	r2, [r7, #4]
 81088ae:	6812      	ldr	r2, [r2, #0]
 81088b0:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 81088b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81088b8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 81088bc:	687b      	ldr	r3, [r7, #4]
 81088be:	681b      	ldr	r3, [r3, #0]
 81088c0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 81088c4:	687b      	ldr	r3, [r7, #4]
 81088c6:	681b      	ldr	r3, [r3, #0]
 81088c8:	f042 0201 	orr.w	r2, r2, #1
 81088cc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 81088d0:	687b      	ldr	r3, [r7, #4]
 81088d2:	681b      	ldr	r3, [r3, #0]
 81088d4:	681a      	ldr	r2, [r3, #0]
 81088d6:	687b      	ldr	r3, [r7, #4]
 81088d8:	681b      	ldr	r3, [r3, #0]
 81088da:	f042 0202 	orr.w	r2, r2, #2
 81088de:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 81088e0:	687b      	ldr	r3, [r7, #4]
 81088e2:	681b      	ldr	r3, [r3, #0]
 81088e4:	681a      	ldr	r2, [r3, #0]
 81088e6:	687b      	ldr	r3, [r7, #4]
 81088e8:	681b      	ldr	r3, [r3, #0]
 81088ea:	f042 0201 	orr.w	r2, r2, #1
 81088ee:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 81088f0:	687b      	ldr	r3, [r7, #4]
 81088f2:	681b      	ldr	r3, [r3, #0]
 81088f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81088f8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 81088fc:	687a      	ldr	r2, [r7, #4]
 81088fe:	6812      	ldr	r2, [r2, #0]
 8108900:	f443 4350 	orr.w	r3, r3, #53248	@ 0xd000
 8108904:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8108908:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810890c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8108910:	687b      	ldr	r3, [r7, #4]
 8108912:	2223      	movs	r2, #35	@ 0x23
 8108914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8108918:	2300      	movs	r3, #0
 810891a:	e000      	b.n	810891e <HAL_ETH_Start_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 810891c:	2301      	movs	r3, #1
  }
}
 810891e:	4618      	mov	r0, r3
 8108920:	3708      	adds	r7, #8
 8108922:	46bd      	mov	sp, r7
 8108924:	bd80      	pop	{r7, pc}

08108926 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8108926:	b480      	push	{r7}
 8108928:	b085      	sub	sp, #20
 810892a:	af00      	add	r7, sp, #0
 810892c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 810892e:	687b      	ldr	r3, [r7, #4]
 8108930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108934:	2b23      	cmp	r3, #35	@ 0x23
 8108936:	d167      	bne.n	8108a08 <HAL_ETH_Stop_IT+0xe2>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8108938:	687b      	ldr	r3, [r7, #4]
 810893a:	2223      	movs	r2, #35	@ 0x23
 810893c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8108940:	687b      	ldr	r3, [r7, #4]
 8108942:	681b      	ldr	r3, [r3, #0]
 8108944:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108948:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 810894c:	687a      	ldr	r2, [r7, #4]
 810894e:	6812      	ldr	r2, [r2, #0]
 8108950:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8108954:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8108958:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810895c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8108960:	687b      	ldr	r3, [r7, #4]
 8108962:	681b      	ldr	r3, [r3, #0]
 8108964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108968:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810896c:	687a      	ldr	r2, [r7, #4]
 810896e:	6812      	ldr	r2, [r2, #0]
 8108970:	f023 0301 	bic.w	r3, r3, #1
 8108974:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8108978:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 810897c:	687b      	ldr	r3, [r7, #4]
 810897e:	681b      	ldr	r3, [r3, #0]
 8108980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108984:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8108988:	687a      	ldr	r2, [r7, #4]
 810898a:	6812      	ldr	r2, [r2, #0]
 810898c:	f023 0301 	bic.w	r3, r3, #1
 8108990:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8108994:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8108998:	687b      	ldr	r3, [r7, #4]
 810899a:	681b      	ldr	r3, [r3, #0]
 810899c:	681a      	ldr	r2, [r3, #0]
 810899e:	687b      	ldr	r3, [r7, #4]
 81089a0:	681b      	ldr	r3, [r3, #0]
 81089a2:	f022 0201 	bic.w	r2, r2, #1
 81089a6:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 81089a8:	687b      	ldr	r3, [r7, #4]
 81089aa:	681b      	ldr	r3, [r3, #0]
 81089ac:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 81089b0:	687b      	ldr	r3, [r7, #4]
 81089b2:	681b      	ldr	r3, [r3, #0]
 81089b4:	f042 0201 	orr.w	r2, r2, #1
 81089b8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 81089bc:	687b      	ldr	r3, [r7, #4]
 81089be:	681b      	ldr	r3, [r3, #0]
 81089c0:	681a      	ldr	r2, [r3, #0]
 81089c2:	687b      	ldr	r3, [r7, #4]
 81089c4:	681b      	ldr	r3, [r3, #0]
 81089c6:	f022 0202 	bic.w	r2, r2, #2
 81089ca:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 81089cc:	2300      	movs	r3, #0
 81089ce:	60fb      	str	r3, [r7, #12]
 81089d0:	e00e      	b.n	81089f0 <HAL_ETH_Stop_IT+0xca>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 81089d2:	687b      	ldr	r3, [r7, #4]
 81089d4:	68fa      	ldr	r2, [r7, #12]
 81089d6:	3212      	adds	r2, #18
 81089d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81089dc:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 81089de:	68bb      	ldr	r3, [r7, #8]
 81089e0:	68db      	ldr	r3, [r3, #12]
 81089e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 81089e6:	68bb      	ldr	r3, [r7, #8]
 81089e8:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 81089ea:	68fb      	ldr	r3, [r7, #12]
 81089ec:	3301      	adds	r3, #1
 81089ee:	60fb      	str	r3, [r7, #12]
 81089f0:	68fb      	ldr	r3, [r7, #12]
 81089f2:	2b03      	cmp	r3, #3
 81089f4:	d9ed      	bls.n	81089d2 <HAL_ETH_Stop_IT+0xac>
    }

    heth->RxDescList.ItMode = 0U;
 81089f6:	687b      	ldr	r3, [r7, #4]
 81089f8:	2200      	movs	r2, #0
 81089fa:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 81089fc:	687b      	ldr	r3, [r7, #4]
 81089fe:	2210      	movs	r2, #16
 8108a00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8108a04:	2300      	movs	r3, #0
 8108a06:	e000      	b.n	8108a0a <HAL_ETH_Stop_IT+0xe4>
  }
  else
  {
    return HAL_ERROR;
 8108a08:	2301      	movs	r3, #1
  }
}
 8108a0a:	4618      	mov	r0, r3
 8108a0c:	3714      	adds	r7, #20
 8108a0e:	46bd      	mov	sp, r7
 8108a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a14:	4770      	bx	lr

08108a16 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8108a16:	b580      	push	{r7, lr}
 8108a18:	b082      	sub	sp, #8
 8108a1a:	af00      	add	r7, sp, #0
 8108a1c:	6078      	str	r0, [r7, #4]
 8108a1e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8108a20:	683b      	ldr	r3, [r7, #0]
 8108a22:	2b00      	cmp	r3, #0
 8108a24:	d109      	bne.n	8108a3a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8108a26:	687b      	ldr	r3, [r7, #4]
 8108a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108a2c:	f043 0201 	orr.w	r2, r3, #1
 8108a30:	687b      	ldr	r3, [r7, #4]
 8108a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8108a36:	2301      	movs	r3, #1
 8108a38:	e03a      	b.n	8108ab0 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8108a3a:	687b      	ldr	r3, [r7, #4]
 8108a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108a40:	2b23      	cmp	r3, #35	@ 0x23
 8108a42:	d134      	bne.n	8108aae <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8108a44:	683b      	ldr	r3, [r7, #0]
 8108a46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108a48:	687b      	ldr	r3, [r7, #4]
 8108a4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8108a4c:	2201      	movs	r2, #1
 8108a4e:	6839      	ldr	r1, [r7, #0]
 8108a50:	6878      	ldr	r0, [r7, #4]
 8108a52:	f001 f8d8 	bl	8109c06 <ETH_Prepare_Tx_Descriptors>
 8108a56:	4603      	mov	r3, r0
 8108a58:	2b00      	cmp	r3, #0
 8108a5a:	d009      	beq.n	8108a70 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8108a5c:	687b      	ldr	r3, [r7, #4]
 8108a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108a62:	f043 0202 	orr.w	r2, r3, #2
 8108a66:	687b      	ldr	r3, [r7, #4]
 8108a68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8108a6c:	2301      	movs	r3, #1
 8108a6e:	e01f      	b.n	8108ab0 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8108a70:	f3bf 8f4f 	dsb	sy
}
 8108a74:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8108a76:	687b      	ldr	r3, [r7, #4]
 8108a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108a7a:	1c5a      	adds	r2, r3, #1
 8108a7c:	687b      	ldr	r3, [r7, #4]
 8108a7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8108a80:	687b      	ldr	r3, [r7, #4]
 8108a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108a84:	2b03      	cmp	r3, #3
 8108a86:	d904      	bls.n	8108a92 <HAL_ETH_Transmit_IT+0x7c>
 8108a88:	687b      	ldr	r3, [r7, #4]
 8108a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108a8c:	1f1a      	subs	r2, r3, #4
 8108a8e:	687b      	ldr	r3, [r7, #4]
 8108a90:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8108a92:	687b      	ldr	r3, [r7, #4]
 8108a94:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8108a96:	687b      	ldr	r3, [r7, #4]
 8108a98:	681a      	ldr	r2, [r3, #0]
 8108a9a:	687b      	ldr	r3, [r7, #4]
 8108a9c:	3106      	adds	r1, #6
 8108a9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8108aa2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8108aa6:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8108aaa:	2300      	movs	r3, #0
 8108aac:	e000      	b.n	8108ab0 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8108aae:	2301      	movs	r3, #1
  }
}
 8108ab0:	4618      	mov	r0, r3
 8108ab2:	3708      	adds	r7, #8
 8108ab4:	46bd      	mov	sp, r7
 8108ab6:	bd80      	pop	{r7, pc}

08108ab8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8108ab8:	b580      	push	{r7, lr}
 8108aba:	b088      	sub	sp, #32
 8108abc:	af00      	add	r7, sp, #0
 8108abe:	6078      	str	r0, [r7, #4]
 8108ac0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8108ac2:	2300      	movs	r3, #0
 8108ac4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8108ac6:	2300      	movs	r3, #0
 8108ac8:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8108aca:	683b      	ldr	r3, [r7, #0]
 8108acc:	2b00      	cmp	r3, #0
 8108ace:	d109      	bne.n	8108ae4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8108ad0:	687b      	ldr	r3, [r7, #4]
 8108ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108ad6:	f043 0201 	orr.w	r2, r3, #1
 8108ada:	687b      	ldr	r3, [r7, #4]
 8108adc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8108ae0:	2301      	movs	r3, #1
 8108ae2:	e0a2      	b.n	8108c2a <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8108ae4:	687b      	ldr	r3, [r7, #4]
 8108ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108aea:	2b23      	cmp	r3, #35	@ 0x23
 8108aec:	d001      	beq.n	8108af2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8108aee:	2301      	movs	r3, #1
 8108af0:	e09b      	b.n	8108c2a <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8108af2:	687b      	ldr	r3, [r7, #4]
 8108af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8108af6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8108af8:	687b      	ldr	r3, [r7, #4]
 8108afa:	69fa      	ldr	r2, [r7, #28]
 8108afc:	3212      	adds	r2, #18
 8108afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108b02:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8108b04:	687b      	ldr	r3, [r7, #4]
 8108b06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8108b08:	f1c3 0304 	rsb	r3, r3, #4
 8108b0c:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8108b0e:	e064      	b.n	8108bda <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8108b10:	69bb      	ldr	r3, [r7, #24]
 8108b12:	68db      	ldr	r3, [r3, #12]
 8108b14:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8108b18:	2b00      	cmp	r3, #0
 8108b1a:	d007      	beq.n	8108b2c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8108b1c:	69bb      	ldr	r3, [r7, #24]
 8108b1e:	685a      	ldr	r2, [r3, #4]
 8108b20:	687b      	ldr	r3, [r7, #4]
 8108b22:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8108b24:	69bb      	ldr	r3, [r7, #24]
 8108b26:	681a      	ldr	r2, [r3, #0]
 8108b28:	687b      	ldr	r3, [r7, #4]
 8108b2a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8108b2c:	69bb      	ldr	r3, [r7, #24]
 8108b2e:	68db      	ldr	r3, [r3, #12]
 8108b30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108b34:	2b00      	cmp	r3, #0
 8108b36:	d103      	bne.n	8108b40 <HAL_ETH_ReadData+0x88>
 8108b38:	687b      	ldr	r3, [r7, #4]
 8108b3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8108b3c:	2b00      	cmp	r3, #0
 8108b3e:	d03a      	beq.n	8108bb6 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8108b40:	69bb      	ldr	r3, [r7, #24]
 8108b42:	68db      	ldr	r3, [r3, #12]
 8108b44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108b48:	2b00      	cmp	r3, #0
 8108b4a:	d005      	beq.n	8108b58 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8108b4c:	687b      	ldr	r3, [r7, #4]
 8108b4e:	2200      	movs	r2, #0
 8108b50:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8108b52:	687b      	ldr	r3, [r7, #4]
 8108b54:	2200      	movs	r2, #0
 8108b56:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8108b58:	69bb      	ldr	r3, [r7, #24]
 8108b5a:	68db      	ldr	r3, [r3, #12]
 8108b5c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8108b60:	687b      	ldr	r3, [r7, #4]
 8108b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108b64:	1ad3      	subs	r3, r2, r3
 8108b66:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8108b68:	69bb      	ldr	r3, [r7, #24]
 8108b6a:	68db      	ldr	r3, [r3, #12]
 8108b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8108b70:	2b00      	cmp	r3, #0
 8108b72:	d005      	beq.n	8108b80 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8108b74:	69bb      	ldr	r3, [r7, #24]
 8108b76:	68da      	ldr	r2, [r3, #12]
 8108b78:	687b      	ldr	r3, [r7, #4]
 8108b7a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8108b7c:	2301      	movs	r3, #1
 8108b7e:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8108b80:	687b      	ldr	r3, [r7, #4]
 8108b82:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8108b86:	687b      	ldr	r3, [r7, #4]
 8108b88:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8108b8c:	69bb      	ldr	r3, [r7, #24]
 8108b8e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8108b90:	461a      	mov	r2, r3
 8108b92:	68bb      	ldr	r3, [r7, #8]
 8108b94:	b29b      	uxth	r3, r3
 8108b96:	f7fd f80d 	bl	8105bb4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8108b9a:	687b      	ldr	r3, [r7, #4]
 8108b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108b9e:	1c5a      	adds	r2, r3, #1
 8108ba0:	687b      	ldr	r3, [r7, #4]
 8108ba2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8108ba4:	687b      	ldr	r3, [r7, #4]
 8108ba6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8108ba8:	68bb      	ldr	r3, [r7, #8]
 8108baa:	441a      	add	r2, r3
 8108bac:	687b      	ldr	r3, [r7, #4]
 8108bae:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8108bb0:	69bb      	ldr	r3, [r7, #24]
 8108bb2:	2200      	movs	r2, #0
 8108bb4:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8108bb6:	69fb      	ldr	r3, [r7, #28]
 8108bb8:	3301      	adds	r3, #1
 8108bba:	61fb      	str	r3, [r7, #28]
 8108bbc:	69fb      	ldr	r3, [r7, #28]
 8108bbe:	2b03      	cmp	r3, #3
 8108bc0:	d902      	bls.n	8108bc8 <HAL_ETH_ReadData+0x110>
 8108bc2:	69fb      	ldr	r3, [r7, #28]
 8108bc4:	3b04      	subs	r3, #4
 8108bc6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8108bc8:	687b      	ldr	r3, [r7, #4]
 8108bca:	69fa      	ldr	r2, [r7, #28]
 8108bcc:	3212      	adds	r2, #18
 8108bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108bd2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8108bd4:	697b      	ldr	r3, [r7, #20]
 8108bd6:	3301      	adds	r3, #1
 8108bd8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8108bda:	69bb      	ldr	r3, [r7, #24]
 8108bdc:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8108bde:	2b00      	cmp	r3, #0
 8108be0:	db06      	blt.n	8108bf0 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8108be2:	697a      	ldr	r2, [r7, #20]
 8108be4:	68fb      	ldr	r3, [r7, #12]
 8108be6:	429a      	cmp	r2, r3
 8108be8:	d202      	bcs.n	8108bf0 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8108bea:	7cfb      	ldrb	r3, [r7, #19]
 8108bec:	2b00      	cmp	r3, #0
 8108bee:	d08f      	beq.n	8108b10 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8108bf0:	687b      	ldr	r3, [r7, #4]
 8108bf2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8108bf4:	697b      	ldr	r3, [r7, #20]
 8108bf6:	441a      	add	r2, r3
 8108bf8:	687b      	ldr	r3, [r7, #4]
 8108bfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8108bfc:	687b      	ldr	r3, [r7, #4]
 8108bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8108c00:	2b00      	cmp	r3, #0
 8108c02:	d002      	beq.n	8108c0a <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8108c04:	6878      	ldr	r0, [r7, #4]
 8108c06:	f000 f814 	bl	8108c32 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8108c0a:	687b      	ldr	r3, [r7, #4]
 8108c0c:	69fa      	ldr	r2, [r7, #28]
 8108c0e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8108c10:	7cfb      	ldrb	r3, [r7, #19]
 8108c12:	2b01      	cmp	r3, #1
 8108c14:	d108      	bne.n	8108c28 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8108c16:	687b      	ldr	r3, [r7, #4]
 8108c18:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8108c1a:	683b      	ldr	r3, [r7, #0]
 8108c1c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8108c1e:	687b      	ldr	r3, [r7, #4]
 8108c20:	2200      	movs	r2, #0
 8108c22:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8108c24:	2300      	movs	r3, #0
 8108c26:	e000      	b.n	8108c2a <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8108c28:	2301      	movs	r3, #1
}
 8108c2a:	4618      	mov	r0, r3
 8108c2c:	3720      	adds	r7, #32
 8108c2e:	46bd      	mov	sp, r7
 8108c30:	bd80      	pop	{r7, pc}

08108c32 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8108c32:	b580      	push	{r7, lr}
 8108c34:	b088      	sub	sp, #32
 8108c36:	af00      	add	r7, sp, #0
 8108c38:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8108c3a:	2300      	movs	r3, #0
 8108c3c:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8108c3e:	2301      	movs	r3, #1
 8108c40:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8108c42:	687b      	ldr	r3, [r7, #4]
 8108c44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108c46:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8108c48:	687b      	ldr	r3, [r7, #4]
 8108c4a:	69fa      	ldr	r2, [r7, #28]
 8108c4c:	3212      	adds	r2, #18
 8108c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108c52:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8108c54:	687b      	ldr	r3, [r7, #4]
 8108c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8108c58:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8108c5a:	e038      	b.n	8108cce <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8108c5c:	697b      	ldr	r3, [r7, #20]
 8108c5e:	691b      	ldr	r3, [r3, #16]
 8108c60:	2b00      	cmp	r3, #0
 8108c62:	d112      	bne.n	8108c8a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8108c64:	f107 0308 	add.w	r3, r7, #8
 8108c68:	4618      	mov	r0, r3
 8108c6a:	f7fc ff73 	bl	8105b54 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8108c6e:	68bb      	ldr	r3, [r7, #8]
 8108c70:	2b00      	cmp	r3, #0
 8108c72:	d102      	bne.n	8108c7a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8108c74:	2300      	movs	r3, #0
 8108c76:	74fb      	strb	r3, [r7, #19]
 8108c78:	e007      	b.n	8108c8a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8108c7a:	68bb      	ldr	r3, [r7, #8]
 8108c7c:	461a      	mov	r2, r3
 8108c7e:	697b      	ldr	r3, [r7, #20]
 8108c80:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8108c82:	68bb      	ldr	r3, [r7, #8]
 8108c84:	461a      	mov	r2, r3
 8108c86:	697b      	ldr	r3, [r7, #20]
 8108c88:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8108c8a:	7cfb      	ldrb	r3, [r7, #19]
 8108c8c:	2b00      	cmp	r3, #0
 8108c8e:	d01e      	beq.n	8108cce <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8108c90:	687b      	ldr	r3, [r7, #4]
 8108c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108c94:	2b00      	cmp	r3, #0
 8108c96:	d004      	beq.n	8108ca2 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8108c98:	697b      	ldr	r3, [r7, #20]
 8108c9a:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8108c9e:	60da      	str	r2, [r3, #12]
 8108ca0:	e003      	b.n	8108caa <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8108ca2:	697b      	ldr	r3, [r7, #20]
 8108ca4:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8108ca8:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8108caa:	69fb      	ldr	r3, [r7, #28]
 8108cac:	3301      	adds	r3, #1
 8108cae:	61fb      	str	r3, [r7, #28]
 8108cb0:	69fb      	ldr	r3, [r7, #28]
 8108cb2:	2b03      	cmp	r3, #3
 8108cb4:	d902      	bls.n	8108cbc <ETH_UpdateDescriptor+0x8a>
 8108cb6:	69fb      	ldr	r3, [r7, #28]
 8108cb8:	3b04      	subs	r3, #4
 8108cba:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8108cbc:	687b      	ldr	r3, [r7, #4]
 8108cbe:	69fa      	ldr	r2, [r7, #28]
 8108cc0:	3212      	adds	r2, #18
 8108cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108cc6:	617b      	str	r3, [r7, #20]
      desccount--;
 8108cc8:	69bb      	ldr	r3, [r7, #24]
 8108cca:	3b01      	subs	r3, #1
 8108ccc:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8108cce:	69bb      	ldr	r3, [r7, #24]
 8108cd0:	2b00      	cmp	r3, #0
 8108cd2:	d002      	beq.n	8108cda <ETH_UpdateDescriptor+0xa8>
 8108cd4:	7cfb      	ldrb	r3, [r7, #19]
 8108cd6:	2b00      	cmp	r3, #0
 8108cd8:	d1c0      	bne.n	8108c5c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8108cda:	687b      	ldr	r3, [r7, #4]
 8108cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8108cde:	69ba      	ldr	r2, [r7, #24]
 8108ce0:	429a      	cmp	r2, r3
 8108ce2:	d01b      	beq.n	8108d1c <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8108ce4:	69fb      	ldr	r3, [r7, #28]
 8108ce6:	3301      	adds	r3, #1
 8108ce8:	f003 0303 	and.w	r3, r3, #3
 8108cec:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8108cee:	f3bf 8f5f 	dmb	sy
}
 8108cf2:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8108cf4:	687b      	ldr	r3, [r7, #4]
 8108cf6:	6919      	ldr	r1, [r3, #16]
 8108cf8:	68fa      	ldr	r2, [r7, #12]
 8108cfa:	4613      	mov	r3, r2
 8108cfc:	005b      	lsls	r3, r3, #1
 8108cfe:	4413      	add	r3, r2
 8108d00:	00db      	lsls	r3, r3, #3
 8108d02:	18ca      	adds	r2, r1, r3
 8108d04:	687b      	ldr	r3, [r7, #4]
 8108d06:	681b      	ldr	r3, [r3, #0]
 8108d08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108d0c:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8108d10:	687b      	ldr	r3, [r7, #4]
 8108d12:	69fa      	ldr	r2, [r7, #28]
 8108d14:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8108d16:	687b      	ldr	r3, [r7, #4]
 8108d18:	69ba      	ldr	r2, [r7, #24]
 8108d1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8108d1c:	bf00      	nop
 8108d1e:	3720      	adds	r7, #32
 8108d20:	46bd      	mov	sp, r7
 8108d22:	bd80      	pop	{r7, pc}

08108d24 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8108d24:	b580      	push	{r7, lr}
 8108d26:	b086      	sub	sp, #24
 8108d28:	af00      	add	r7, sp, #0
 8108d2a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8108d2c:	687b      	ldr	r3, [r7, #4]
 8108d2e:	3318      	adds	r3, #24
 8108d30:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8108d32:	68bb      	ldr	r3, [r7, #8]
 8108d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108d36:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8108d38:	68bb      	ldr	r3, [r7, #8]
 8108d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108d3c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8108d3e:	2301      	movs	r3, #1
 8108d40:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8108d42:	e047      	b.n	8108dd4 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8108d44:	2301      	movs	r3, #1
 8108d46:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8108d48:	697b      	ldr	r3, [r7, #20]
 8108d4a:	3b01      	subs	r3, #1
 8108d4c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8108d4e:	68ba      	ldr	r2, [r7, #8]
 8108d50:	693b      	ldr	r3, [r7, #16]
 8108d52:	3304      	adds	r3, #4
 8108d54:	009b      	lsls	r3, r3, #2
 8108d56:	4413      	add	r3, r2
 8108d58:	685b      	ldr	r3, [r3, #4]
 8108d5a:	2b00      	cmp	r3, #0
 8108d5c:	d10a      	bne.n	8108d74 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8108d5e:	693b      	ldr	r3, [r7, #16]
 8108d60:	3301      	adds	r3, #1
 8108d62:	613b      	str	r3, [r7, #16]
 8108d64:	693b      	ldr	r3, [r7, #16]
 8108d66:	2b03      	cmp	r3, #3
 8108d68:	d902      	bls.n	8108d70 <HAL_ETH_ReleaseTxPacket+0x4c>
 8108d6a:	693b      	ldr	r3, [r7, #16]
 8108d6c:	3b04      	subs	r3, #4
 8108d6e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8108d70:	2300      	movs	r3, #0
 8108d72:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8108d74:	7bbb      	ldrb	r3, [r7, #14]
 8108d76:	2b00      	cmp	r3, #0
 8108d78:	d02c      	beq.n	8108dd4 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8108d7a:	687b      	ldr	r3, [r7, #4]
 8108d7c:	68d9      	ldr	r1, [r3, #12]
 8108d7e:	693a      	ldr	r2, [r7, #16]
 8108d80:	4613      	mov	r3, r2
 8108d82:	005b      	lsls	r3, r3, #1
 8108d84:	4413      	add	r3, r2
 8108d86:	00db      	lsls	r3, r3, #3
 8108d88:	440b      	add	r3, r1
 8108d8a:	68db      	ldr	r3, [r3, #12]
 8108d8c:	2b00      	cmp	r3, #0
 8108d8e:	db1f      	blt.n	8108dd0 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8108d90:	68ba      	ldr	r2, [r7, #8]
 8108d92:	693b      	ldr	r3, [r7, #16]
 8108d94:	3304      	adds	r3, #4
 8108d96:	009b      	lsls	r3, r3, #2
 8108d98:	4413      	add	r3, r2
 8108d9a:	685b      	ldr	r3, [r3, #4]
 8108d9c:	4618      	mov	r0, r3
 8108d9e:	f7fc ff49 	bl	8105c34 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8108da2:	68ba      	ldr	r2, [r7, #8]
 8108da4:	693b      	ldr	r3, [r7, #16]
 8108da6:	3304      	adds	r3, #4
 8108da8:	009b      	lsls	r3, r3, #2
 8108daa:	4413      	add	r3, r2
 8108dac:	2200      	movs	r2, #0
 8108dae:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8108db0:	693b      	ldr	r3, [r7, #16]
 8108db2:	3301      	adds	r3, #1
 8108db4:	613b      	str	r3, [r7, #16]
 8108db6:	693b      	ldr	r3, [r7, #16]
 8108db8:	2b03      	cmp	r3, #3
 8108dba:	d902      	bls.n	8108dc2 <HAL_ETH_ReleaseTxPacket+0x9e>
 8108dbc:	693b      	ldr	r3, [r7, #16]
 8108dbe:	3b04      	subs	r3, #4
 8108dc0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8108dc2:	68bb      	ldr	r3, [r7, #8]
 8108dc4:	697a      	ldr	r2, [r7, #20]
 8108dc6:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8108dc8:	68bb      	ldr	r3, [r7, #8]
 8108dca:	693a      	ldr	r2, [r7, #16]
 8108dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8108dce:	e001      	b.n	8108dd4 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8108dd0:	2300      	movs	r3, #0
 8108dd2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8108dd4:	697b      	ldr	r3, [r7, #20]
 8108dd6:	2b00      	cmp	r3, #0
 8108dd8:	d002      	beq.n	8108de0 <HAL_ETH_ReleaseTxPacket+0xbc>
 8108dda:	7bfb      	ldrb	r3, [r7, #15]
 8108ddc:	2b00      	cmp	r3, #0
 8108dde:	d1b1      	bne.n	8108d44 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8108de0:	2300      	movs	r3, #0
}
 8108de2:	4618      	mov	r0, r3
 8108de4:	3718      	adds	r7, #24
 8108de6:	46bd      	mov	sp, r7
 8108de8:	bd80      	pop	{r7, pc}
	...

08108dec <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8108dec:	b580      	push	{r7, lr}
 8108dee:	b088      	sub	sp, #32
 8108df0:	af00      	add	r7, sp, #0
 8108df2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8108df4:	687b      	ldr	r3, [r7, #4]
 8108df6:	681b      	ldr	r3, [r3, #0]
 8108df8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8108dfc:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8108dfe:	687b      	ldr	r3, [r7, #4]
 8108e00:	681b      	ldr	r3, [r3, #0]
 8108e02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108e06:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8108e0a:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8108e0c:	687b      	ldr	r3, [r7, #4]
 8108e0e:	681b      	ldr	r3, [r3, #0]
 8108e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108e14:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8108e18:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8108e1a:	4b77      	ldr	r3, [pc, #476]	@ (8108ff8 <HAL_ETH_IRQHandler+0x20c>)
 8108e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108e1e:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 8108e20:	4b76      	ldr	r3, [pc, #472]	@ (8108ffc <HAL_ETH_IRQHandler+0x210>)
 8108e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108e24:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8108e26:	69bb      	ldr	r3, [r7, #24]
 8108e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108e2c:	2b00      	cmp	r3, #0
 8108e2e:	d010      	beq.n	8108e52 <HAL_ETH_IRQHandler+0x66>
 8108e30:	697b      	ldr	r3, [r7, #20]
 8108e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108e36:	2b00      	cmp	r3, #0
 8108e38:	d00b      	beq.n	8108e52 <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8108e3a:	687b      	ldr	r3, [r7, #4]
 8108e3c:	681b      	ldr	r3, [r3, #0]
 8108e3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108e42:	461a      	mov	r2, r3
 8108e44:	f248 0340 	movw	r3, #32832	@ 0x8040
 8108e48:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8108e4c:	6878      	ldr	r0, [r7, #4]
 8108e4e:	f7fc fa29 	bl	81052a4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8108e52:	69bb      	ldr	r3, [r7, #24]
 8108e54:	f003 0301 	and.w	r3, r3, #1
 8108e58:	2b00      	cmp	r3, #0
 8108e5a:	d010      	beq.n	8108e7e <HAL_ETH_IRQHandler+0x92>
 8108e5c:	697b      	ldr	r3, [r7, #20]
 8108e5e:	f003 0301 	and.w	r3, r3, #1
 8108e62:	2b00      	cmp	r3, #0
 8108e64:	d00b      	beq.n	8108e7e <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8108e66:	687b      	ldr	r3, [r7, #4]
 8108e68:	681b      	ldr	r3, [r3, #0]
 8108e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108e6e:	461a      	mov	r2, r3
 8108e70:	f248 0301 	movw	r3, #32769	@ 0x8001
 8108e74:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8108e78:	6878      	ldr	r0, [r7, #4]
 8108e7a:	f7fc fa23 	bl	81052c4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8108e7e:	69bb      	ldr	r3, [r7, #24]
 8108e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8108e84:	2b00      	cmp	r3, #0
 8108e86:	d047      	beq.n	8108f18 <HAL_ETH_IRQHandler+0x12c>
 8108e88:	697b      	ldr	r3, [r7, #20]
 8108e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8108e8e:	2b00      	cmp	r3, #0
 8108e90:	d042      	beq.n	8108f18 <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8108e92:	687b      	ldr	r3, [r7, #4]
 8108e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108e98:	f043 0208 	orr.w	r2, r3, #8
 8108e9c:	687b      	ldr	r3, [r7, #4]
 8108e9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8108ea2:	69bb      	ldr	r3, [r7, #24]
 8108ea4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8108ea8:	2b00      	cmp	r3, #0
 8108eaa:	d01e      	beq.n	8108eea <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8108eac:	687b      	ldr	r3, [r7, #4]
 8108eae:	681b      	ldr	r3, [r3, #0]
 8108eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108eb4:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8108eb8:	f241 1302 	movw	r3, #4354	@ 0x1102
 8108ebc:	4013      	ands	r3, r2
 8108ebe:	687a      	ldr	r2, [r7, #4]
 8108ec0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8108ec4:	687b      	ldr	r3, [r7, #4]
 8108ec6:	681b      	ldr	r3, [r3, #0]
 8108ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108ecc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8108ed0:	687a      	ldr	r2, [r7, #4]
 8108ed2:	6812      	ldr	r2, [r2, #0]
 8108ed4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8108ed8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8108edc:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8108ee0:	687b      	ldr	r3, [r7, #4]
 8108ee2:	22e0      	movs	r2, #224	@ 0xe0
 8108ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8108ee8:	e013      	b.n	8108f12 <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8108eea:	687b      	ldr	r3, [r7, #4]
 8108eec:	681b      	ldr	r3, [r3, #0]
 8108eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108ef2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8108ef6:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8108efa:	687b      	ldr	r3, [r7, #4]
 8108efc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8108f00:	687b      	ldr	r3, [r7, #4]
 8108f02:	681b      	ldr	r3, [r3, #0]
 8108f04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108f08:	461a      	mov	r2, r3
 8108f0a:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8108f0e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8108f12:	6878      	ldr	r0, [r7, #4]
 8108f14:	f7fc f9e6 	bl	81052e4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8108f18:	69fb      	ldr	r3, [r7, #28]
 8108f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8108f1e:	2b00      	cmp	r3, #0
 8108f20:	d104      	bne.n	8108f2c <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8108f22:	69fb      	ldr	r3, [r7, #28]
 8108f24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8108f28:	2b00      	cmp	r3, #0
 8108f2a:	d019      	beq.n	8108f60 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8108f2c:	687b      	ldr	r3, [r7, #4]
 8108f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108f32:	f043 0210 	orr.w	r2, r3, #16
 8108f36:	687b      	ldr	r3, [r7, #4]
 8108f38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8108f3c:	687b      	ldr	r3, [r7, #4]
 8108f3e:	681b      	ldr	r3, [r3, #0]
 8108f40:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8108f44:	687b      	ldr	r3, [r7, #4]
 8108f46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8108f4a:	687b      	ldr	r3, [r7, #4]
 8108f4c:	22e0      	movs	r2, #224	@ 0xe0
 8108f4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8108f52:	6878      	ldr	r0, [r7, #4]
 8108f54:	f7fc f9c6 	bl	81052e4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8108f58:	687b      	ldr	r3, [r7, #4]
 8108f5a:	2200      	movs	r2, #0
 8108f5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8108f60:	69fb      	ldr	r3, [r7, #28]
 8108f62:	f003 0310 	and.w	r3, r3, #16
 8108f66:	2b00      	cmp	r3, #0
 8108f68:	d00f      	beq.n	8108f8a <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8108f6a:	687b      	ldr	r3, [r7, #4]
 8108f6c:	681b      	ldr	r3, [r3, #0]
 8108f6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8108f72:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8108f76:	687b      	ldr	r3, [r7, #4]
 8108f78:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8108f7c:	6878      	ldr	r0, [r7, #4]
 8108f7e:	f000 f83f 	bl	8109000 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8108f82:	687b      	ldr	r3, [r7, #4]
 8108f84:	2200      	movs	r2, #0
 8108f86:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8108f8a:	69fb      	ldr	r3, [r7, #28]
 8108f8c:	f003 0320 	and.w	r3, r3, #32
 8108f90:	2b00      	cmp	r3, #0
 8108f92:	d00f      	beq.n	8108fb4 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8108f94:	687b      	ldr	r3, [r7, #4]
 8108f96:	681b      	ldr	r3, [r3, #0]
 8108f98:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8108f9c:	f003 020f 	and.w	r2, r3, #15
 8108fa0:	687b      	ldr	r3, [r7, #4]
 8108fa2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8108fa6:	6878      	ldr	r0, [r7, #4]
 8108fa8:	f000 f834 	bl	8109014 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8108fac:	687b      	ldr	r3, [r7, #4]
 8108fae:	2200      	movs	r2, #0
 8108fb0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8108fb4:	f7ff fb30 	bl	8108618 <HAL_GetCurrentCPUID>
 8108fb8:	4603      	mov	r3, r0
 8108fba:	2b03      	cmp	r3, #3
 8108fbc:	d10c      	bne.n	8108fd8 <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8108fbe:	693b      	ldr	r3, [r7, #16]
 8108fc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8108fc4:	2b00      	cmp	r3, #0
 8108fc6:	d013      	beq.n	8108ff0 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8108fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8108ff8 <HAL_ETH_IRQHandler+0x20c>)
 8108fca:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8108fce:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8108fd0:	6878      	ldr	r0, [r7, #4]
 8108fd2:	f000 f829 	bl	8109028 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8108fd6:	e00b      	b.n	8108ff0 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8108fd8:	68fb      	ldr	r3, [r7, #12]
 8108fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8108fde:	2b00      	cmp	r3, #0
 8108fe0:	d006      	beq.n	8108ff0 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8108fe2:	4b06      	ldr	r3, [pc, #24]	@ (8108ffc <HAL_ETH_IRQHandler+0x210>)
 8108fe4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8108fe8:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 8108fea:	6878      	ldr	r0, [r7, #4]
 8108fec:	f000 f81c 	bl	8109028 <HAL_ETH_WakeUpCallback>
}
 8108ff0:	bf00      	nop
 8108ff2:	3720      	adds	r7, #32
 8108ff4:	46bd      	mov	sp, r7
 8108ff6:	bd80      	pop	{r7, pc}
 8108ff8:	58000080 	.word	0x58000080
 8108ffc:	580000c0 	.word	0x580000c0

08109000 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8109000:	b480      	push	{r7}
 8109002:	b083      	sub	sp, #12
 8109004:	af00      	add	r7, sp, #0
 8109006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8109008:	bf00      	nop
 810900a:	370c      	adds	r7, #12
 810900c:	46bd      	mov	sp, r7
 810900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109012:	4770      	bx	lr

08109014 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8109014:	b480      	push	{r7}
 8109016:	b083      	sub	sp, #12
 8109018:	af00      	add	r7, sp, #0
 810901a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 810901c:	bf00      	nop
 810901e:	370c      	adds	r7, #12
 8109020:	46bd      	mov	sp, r7
 8109022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109026:	4770      	bx	lr

08109028 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8109028:	b480      	push	{r7}
 810902a:	b083      	sub	sp, #12
 810902c:	af00      	add	r7, sp, #0
 810902e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8109030:	bf00      	nop
 8109032:	370c      	adds	r7, #12
 8109034:	46bd      	mov	sp, r7
 8109036:	f85d 7b04 	ldr.w	r7, [sp], #4
 810903a:	4770      	bx	lr

0810903c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 810903c:	b580      	push	{r7, lr}
 810903e:	b086      	sub	sp, #24
 8109040:	af00      	add	r7, sp, #0
 8109042:	60f8      	str	r0, [r7, #12]
 8109044:	60b9      	str	r1, [r7, #8]
 8109046:	607a      	str	r2, [r7, #4]
 8109048:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 810904a:	68fb      	ldr	r3, [r7, #12]
 810904c:	681b      	ldr	r3, [r3, #0]
 810904e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8109052:	f003 0301 	and.w	r3, r3, #1
 8109056:	2b00      	cmp	r3, #0
 8109058:	d001      	beq.n	810905e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 810905a:	2301      	movs	r3, #1
 810905c:	e03e      	b.n	81090dc <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 810905e:	68fb      	ldr	r3, [r7, #12]
 8109060:	681b      	ldr	r3, [r3, #0]
 8109062:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8109066:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8109068:	697b      	ldr	r3, [r7, #20]
 810906a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 810906e:	68bb      	ldr	r3, [r7, #8]
 8109070:	055b      	lsls	r3, r3, #21
 8109072:	4313      	orrs	r3, r2
 8109074:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8109076:	697b      	ldr	r3, [r7, #20]
 8109078:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 810907c:	687b      	ldr	r3, [r7, #4]
 810907e:	041b      	lsls	r3, r3, #16
 8109080:	4313      	orrs	r3, r2
 8109082:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8109084:	697b      	ldr	r3, [r7, #20]
 8109086:	f043 030c 	orr.w	r3, r3, #12
 810908a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 810908c:	697b      	ldr	r3, [r7, #20]
 810908e:	f043 0301 	orr.w	r3, r3, #1
 8109092:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8109094:	68fb      	ldr	r3, [r7, #12]
 8109096:	681b      	ldr	r3, [r3, #0]
 8109098:	697a      	ldr	r2, [r7, #20]
 810909a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 810909e:	f7ff f9bb 	bl	8108418 <HAL_GetTick>
 81090a2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 81090a4:	e009      	b.n	81090ba <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 81090a6:	f7ff f9b7 	bl	8108418 <HAL_GetTick>
 81090aa:	4602      	mov	r2, r0
 81090ac:	693b      	ldr	r3, [r7, #16]
 81090ae:	1ad3      	subs	r3, r2, r3
 81090b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 81090b4:	d901      	bls.n	81090ba <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 81090b6:	2301      	movs	r3, #1
 81090b8:	e010      	b.n	81090dc <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 81090ba:	68fb      	ldr	r3, [r7, #12]
 81090bc:	681b      	ldr	r3, [r3, #0]
 81090be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81090c2:	f003 0301 	and.w	r3, r3, #1
 81090c6:	2b00      	cmp	r3, #0
 81090c8:	d1ed      	bne.n	81090a6 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 81090ca:	68fb      	ldr	r3, [r7, #12]
 81090cc:	681b      	ldr	r3, [r3, #0]
 81090ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 81090d2:	b29b      	uxth	r3, r3
 81090d4:	461a      	mov	r2, r3
 81090d6:	683b      	ldr	r3, [r7, #0]
 81090d8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 81090da:	2300      	movs	r3, #0
}
 81090dc:	4618      	mov	r0, r3
 81090de:	3718      	adds	r7, #24
 81090e0:	46bd      	mov	sp, r7
 81090e2:	bd80      	pop	{r7, pc}

081090e4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 81090e4:	b580      	push	{r7, lr}
 81090e6:	b086      	sub	sp, #24
 81090e8:	af00      	add	r7, sp, #0
 81090ea:	60f8      	str	r0, [r7, #12]
 81090ec:	60b9      	str	r1, [r7, #8]
 81090ee:	607a      	str	r2, [r7, #4]
 81090f0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 81090f2:	68fb      	ldr	r3, [r7, #12]
 81090f4:	681b      	ldr	r3, [r3, #0]
 81090f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 81090fa:	f003 0301 	and.w	r3, r3, #1
 81090fe:	2b00      	cmp	r3, #0
 8109100:	d001      	beq.n	8109106 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8109102:	2301      	movs	r3, #1
 8109104:	e03c      	b.n	8109180 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8109106:	68fb      	ldr	r3, [r7, #12]
 8109108:	681b      	ldr	r3, [r3, #0]
 810910a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810910e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8109110:	697b      	ldr	r3, [r7, #20]
 8109112:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8109116:	68bb      	ldr	r3, [r7, #8]
 8109118:	055b      	lsls	r3, r3, #21
 810911a:	4313      	orrs	r3, r2
 810911c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 810911e:	697b      	ldr	r3, [r7, #20]
 8109120:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8109124:	687b      	ldr	r3, [r7, #4]
 8109126:	041b      	lsls	r3, r3, #16
 8109128:	4313      	orrs	r3, r2
 810912a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 810912c:	697b      	ldr	r3, [r7, #20]
 810912e:	f023 030c 	bic.w	r3, r3, #12
 8109132:	f043 0304 	orr.w	r3, r3, #4
 8109136:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8109138:	697b      	ldr	r3, [r7, #20]
 810913a:	f043 0301 	orr.w	r3, r3, #1
 810913e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8109140:	683b      	ldr	r3, [r7, #0]
 8109142:	b29a      	uxth	r2, r3
 8109144:	4b10      	ldr	r3, [pc, #64]	@ (8109188 <HAL_ETH_WritePHYRegister+0xa4>)
 8109146:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 810914a:	4a0f      	ldr	r2, [pc, #60]	@ (8109188 <HAL_ETH_WritePHYRegister+0xa4>)
 810914c:	697b      	ldr	r3, [r7, #20]
 810914e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8109152:	f7ff f961 	bl	8108418 <HAL_GetTick>
 8109156:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8109158:	e009      	b.n	810916e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 810915a:	f7ff f95d 	bl	8108418 <HAL_GetTick>
 810915e:	4602      	mov	r2, r0
 8109160:	693b      	ldr	r3, [r7, #16]
 8109162:	1ad3      	subs	r3, r2, r3
 8109164:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8109168:	d901      	bls.n	810916e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 810916a:	2301      	movs	r3, #1
 810916c:	e008      	b.n	8109180 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 810916e:	68fb      	ldr	r3, [r7, #12]
 8109170:	681b      	ldr	r3, [r3, #0]
 8109172:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8109176:	f003 0301 	and.w	r3, r3, #1
 810917a:	2b00      	cmp	r3, #0
 810917c:	d1ed      	bne.n	810915a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 810917e:	2300      	movs	r3, #0
}
 8109180:	4618      	mov	r0, r3
 8109182:	3718      	adds	r7, #24
 8109184:	46bd      	mov	sp, r7
 8109186:	bd80      	pop	{r7, pc}
 8109188:	40028000 	.word	0x40028000

0810918c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 810918c:	b480      	push	{r7}
 810918e:	b083      	sub	sp, #12
 8109190:	af00      	add	r7, sp, #0
 8109192:	6078      	str	r0, [r7, #4]
 8109194:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8109196:	683b      	ldr	r3, [r7, #0]
 8109198:	2b00      	cmp	r3, #0
 810919a:	d101      	bne.n	81091a0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 810919c:	2301      	movs	r3, #1
 810919e:	e1c3      	b.n	8109528 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 81091a0:	687b      	ldr	r3, [r7, #4]
 81091a2:	681b      	ldr	r3, [r3, #0]
 81091a4:	681b      	ldr	r3, [r3, #0]
 81091a6:	f003 020c 	and.w	r2, r3, #12
 81091aa:	683b      	ldr	r3, [r7, #0]
 81091ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 81091ae:	687b      	ldr	r3, [r7, #4]
 81091b0:	681b      	ldr	r3, [r3, #0]
 81091b2:	681b      	ldr	r3, [r3, #0]
 81091b4:	f003 0310 	and.w	r3, r3, #16
 81091b8:	2b00      	cmp	r3, #0
 81091ba:	bf14      	ite	ne
 81091bc:	2301      	movne	r3, #1
 81091be:	2300      	moveq	r3, #0
 81091c0:	b2db      	uxtb	r3, r3
 81091c2:	461a      	mov	r2, r3
 81091c4:	683b      	ldr	r3, [r7, #0]
 81091c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 81091ca:	687b      	ldr	r3, [r7, #4]
 81091cc:	681b      	ldr	r3, [r3, #0]
 81091ce:	681b      	ldr	r3, [r3, #0]
 81091d0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 81091d4:	683b      	ldr	r3, [r7, #0]
 81091d6:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 81091d8:	687b      	ldr	r3, [r7, #4]
 81091da:	681b      	ldr	r3, [r3, #0]
 81091dc:	681b      	ldr	r3, [r3, #0]
 81091de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81091e2:	2b00      	cmp	r3, #0
 81091e4:	bf0c      	ite	eq
 81091e6:	2301      	moveq	r3, #1
 81091e8:	2300      	movne	r3, #0
 81091ea:	b2db      	uxtb	r3, r3
 81091ec:	461a      	mov	r2, r3
 81091ee:	683b      	ldr	r3, [r7, #0]
 81091f0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 81091f4:	687b      	ldr	r3, [r7, #4]
 81091f6:	681b      	ldr	r3, [r3, #0]
 81091f8:	681b      	ldr	r3, [r3, #0]
 81091fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 81091fe:	2b00      	cmp	r3, #0
 8109200:	bf14      	ite	ne
 8109202:	2301      	movne	r3, #1
 8109204:	2300      	moveq	r3, #0
 8109206:	b2db      	uxtb	r3, r3
 8109208:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 810920a:	683b      	ldr	r3, [r7, #0]
 810920c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 810920e:	687b      	ldr	r3, [r7, #4]
 8109210:	681b      	ldr	r3, [r3, #0]
 8109212:	681b      	ldr	r3, [r3, #0]
 8109214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8109218:	2b00      	cmp	r3, #0
 810921a:	bf0c      	ite	eq
 810921c:	2301      	moveq	r3, #1
 810921e:	2300      	movne	r3, #0
 8109220:	b2db      	uxtb	r3, r3
 8109222:	461a      	mov	r2, r3
 8109224:	683b      	ldr	r3, [r7, #0]
 8109226:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8109228:	687b      	ldr	r3, [r7, #4]
 810922a:	681b      	ldr	r3, [r3, #0]
 810922c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 810922e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8109232:	2b00      	cmp	r3, #0
 8109234:	bf14      	ite	ne
 8109236:	2301      	movne	r3, #1
 8109238:	2300      	moveq	r3, #0
 810923a:	b2db      	uxtb	r3, r3
 810923c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 810923e:	683b      	ldr	r3, [r7, #0]
 8109240:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8109242:	687b      	ldr	r3, [r7, #4]
 8109244:	681b      	ldr	r3, [r3, #0]
 8109246:	681b      	ldr	r3, [r3, #0]
 8109248:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810924c:	2b00      	cmp	r3, #0
 810924e:	bf14      	ite	ne
 8109250:	2301      	movne	r3, #1
 8109252:	2300      	moveq	r3, #0
 8109254:	b2db      	uxtb	r3, r3
 8109256:	461a      	mov	r2, r3
 8109258:	683b      	ldr	r3, [r7, #0]
 810925a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 810925c:	687b      	ldr	r3, [r7, #4]
 810925e:	681b      	ldr	r3, [r3, #0]
 8109260:	681b      	ldr	r3, [r3, #0]
 8109262:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8109266:	683b      	ldr	r3, [r7, #0]
 8109268:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 810926a:	687b      	ldr	r3, [r7, #4]
 810926c:	681b      	ldr	r3, [r3, #0]
 810926e:	681b      	ldr	r3, [r3, #0]
 8109270:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8109274:	683b      	ldr	r3, [r7, #0]
 8109276:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8109278:	687b      	ldr	r3, [r7, #4]
 810927a:	681b      	ldr	r3, [r3, #0]
 810927c:	681b      	ldr	r3, [r3, #0]
 810927e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8109282:	2b00      	cmp	r3, #0
 8109284:	bf14      	ite	ne
 8109286:	2301      	movne	r3, #1
 8109288:	2300      	moveq	r3, #0
 810928a:	b2db      	uxtb	r3, r3
 810928c:	461a      	mov	r2, r3
 810928e:	683b      	ldr	r3, [r7, #0]
 8109290:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8109292:	687b      	ldr	r3, [r7, #4]
 8109294:	681b      	ldr	r3, [r3, #0]
 8109296:	681b      	ldr	r3, [r3, #0]
 8109298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810929c:	2b00      	cmp	r3, #0
 810929e:	bf0c      	ite	eq
 81092a0:	2301      	moveq	r3, #1
 81092a2:	2300      	movne	r3, #0
 81092a4:	b2db      	uxtb	r3, r3
 81092a6:	461a      	mov	r2, r3
 81092a8:	683b      	ldr	r3, [r7, #0]
 81092aa:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 81092ac:	687b      	ldr	r3, [r7, #4]
 81092ae:	681b      	ldr	r3, [r3, #0]
 81092b0:	681b      	ldr	r3, [r3, #0]
 81092b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81092b6:	2b00      	cmp	r3, #0
 81092b8:	bf0c      	ite	eq
 81092ba:	2301      	moveq	r3, #1
 81092bc:	2300      	movne	r3, #0
 81092be:	b2db      	uxtb	r3, r3
 81092c0:	461a      	mov	r2, r3
 81092c2:	683b      	ldr	r3, [r7, #0]
 81092c4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 81092c6:	687b      	ldr	r3, [r7, #4]
 81092c8:	681b      	ldr	r3, [r3, #0]
 81092ca:	681b      	ldr	r3, [r3, #0]
 81092cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81092d0:	2b00      	cmp	r3, #0
 81092d2:	bf14      	ite	ne
 81092d4:	2301      	movne	r3, #1
 81092d6:	2300      	moveq	r3, #0
 81092d8:	b2db      	uxtb	r3, r3
 81092da:	461a      	mov	r2, r3
 81092dc:	683b      	ldr	r3, [r7, #0]
 81092de:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 81092e0:	687b      	ldr	r3, [r7, #4]
 81092e2:	681b      	ldr	r3, [r3, #0]
 81092e4:	681b      	ldr	r3, [r3, #0]
 81092e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81092ea:	2b00      	cmp	r3, #0
 81092ec:	bf14      	ite	ne
 81092ee:	2301      	movne	r3, #1
 81092f0:	2300      	moveq	r3, #0
 81092f2:	b2db      	uxtb	r3, r3
 81092f4:	461a      	mov	r2, r3
 81092f6:	683b      	ldr	r3, [r7, #0]
 81092f8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 81092fa:	687b      	ldr	r3, [r7, #4]
 81092fc:	681b      	ldr	r3, [r3, #0]
 81092fe:	681b      	ldr	r3, [r3, #0]
 8109300:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8109304:	2b00      	cmp	r3, #0
 8109306:	bf14      	ite	ne
 8109308:	2301      	movne	r3, #1
 810930a:	2300      	moveq	r3, #0
 810930c:	b2db      	uxtb	r3, r3
 810930e:	461a      	mov	r2, r3
 8109310:	683b      	ldr	r3, [r7, #0]
 8109312:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8109314:	687b      	ldr	r3, [r7, #4]
 8109316:	681b      	ldr	r3, [r3, #0]
 8109318:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 810931a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810931e:	2b00      	cmp	r3, #0
 8109320:	bf14      	ite	ne
 8109322:	2301      	movne	r3, #1
 8109324:	2300      	moveq	r3, #0
 8109326:	b2db      	uxtb	r3, r3
 8109328:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 810932a:	683b      	ldr	r3, [r7, #0]
 810932c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 810932e:	687b      	ldr	r3, [r7, #4]
 8109330:	681b      	ldr	r3, [r3, #0]
 8109332:	681b      	ldr	r3, [r3, #0]
 8109334:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8109338:	683b      	ldr	r3, [r7, #0]
 810933a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 810933c:	687b      	ldr	r3, [r7, #4]
 810933e:	681b      	ldr	r3, [r3, #0]
 8109340:	681b      	ldr	r3, [r3, #0]
 8109342:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8109346:	2b00      	cmp	r3, #0
 8109348:	bf14      	ite	ne
 810934a:	2301      	movne	r3, #1
 810934c:	2300      	moveq	r3, #0
 810934e:	b2db      	uxtb	r3, r3
 8109350:	461a      	mov	r2, r3
 8109352:	683b      	ldr	r3, [r7, #0]
 8109354:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8109356:	687b      	ldr	r3, [r7, #4]
 8109358:	681b      	ldr	r3, [r3, #0]
 810935a:	681b      	ldr	r3, [r3, #0]
 810935c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8109360:	683b      	ldr	r3, [r7, #0]
 8109362:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8109364:	687b      	ldr	r3, [r7, #4]
 8109366:	681b      	ldr	r3, [r3, #0]
 8109368:	685b      	ldr	r3, [r3, #4]
 810936a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 810936e:	683b      	ldr	r3, [r7, #0]
 8109370:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8109372:	687b      	ldr	r3, [r7, #4]
 8109374:	681b      	ldr	r3, [r3, #0]
 8109376:	685b      	ldr	r3, [r3, #4]
 8109378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810937c:	2b00      	cmp	r3, #0
 810937e:	bf0c      	ite	eq
 8109380:	2301      	moveq	r3, #1
 8109382:	2300      	movne	r3, #0
 8109384:	b2db      	uxtb	r3, r3
 8109386:	461a      	mov	r2, r3
 8109388:	683b      	ldr	r3, [r7, #0]
 810938a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 810938e:	687b      	ldr	r3, [r7, #4]
 8109390:	681b      	ldr	r3, [r3, #0]
 8109392:	685b      	ldr	r3, [r3, #4]
 8109394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109398:	2b00      	cmp	r3, #0
 810939a:	bf14      	ite	ne
 810939c:	2301      	movne	r3, #1
 810939e:	2300      	moveq	r3, #0
 81093a0:	b2db      	uxtb	r3, r3
 81093a2:	461a      	mov	r2, r3
 81093a4:	683b      	ldr	r3, [r7, #0]
 81093a6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 81093aa:	687b      	ldr	r3, [r7, #4]
 81093ac:	681b      	ldr	r3, [r3, #0]
 81093ae:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 81093b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81093b4:	2b00      	cmp	r3, #0
 81093b6:	bf14      	ite	ne
 81093b8:	2301      	movne	r3, #1
 81093ba:	2300      	moveq	r3, #0
 81093bc:	b2db      	uxtb	r3, r3
 81093be:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 81093c0:	683b      	ldr	r3, [r7, #0]
 81093c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 81093c6:	687b      	ldr	r3, [r7, #4]
 81093c8:	681b      	ldr	r3, [r3, #0]
 81093ca:	685b      	ldr	r3, [r3, #4]
 81093cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 81093d0:	2b00      	cmp	r3, #0
 81093d2:	bf14      	ite	ne
 81093d4:	2301      	movne	r3, #1
 81093d6:	2300      	moveq	r3, #0
 81093d8:	b2db      	uxtb	r3, r3
 81093da:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 81093dc:	683b      	ldr	r3, [r7, #0]
 81093de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 81093e2:	687b      	ldr	r3, [r7, #4]
 81093e4:	681b      	ldr	r3, [r3, #0]
 81093e6:	685b      	ldr	r3, [r3, #4]
 81093e8:	0e5b      	lsrs	r3, r3, #25
 81093ea:	f003 021f 	and.w	r2, r3, #31
 81093ee:	683b      	ldr	r3, [r7, #0]
 81093f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 81093f2:	687b      	ldr	r3, [r7, #4]
 81093f4:	681b      	ldr	r3, [r3, #0]
 81093f6:	68db      	ldr	r3, [r3, #12]
 81093f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81093fc:	2b00      	cmp	r3, #0
 81093fe:	bf14      	ite	ne
 8109400:	2301      	movne	r3, #1
 8109402:	2300      	moveq	r3, #0
 8109404:	b2db      	uxtb	r3, r3
 8109406:	461a      	mov	r2, r3
 8109408:	683b      	ldr	r3, [r7, #0]
 810940a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 810940e:	687b      	ldr	r3, [r7, #4]
 8109410:	681b      	ldr	r3, [r3, #0]
 8109412:	68db      	ldr	r3, [r3, #12]
 8109414:	f003 020f 	and.w	r2, r3, #15
 8109418:	683b      	ldr	r3, [r7, #0]
 810941a:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 810941c:	687b      	ldr	r3, [r7, #4]
 810941e:	681b      	ldr	r3, [r3, #0]
 8109420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109422:	f003 0302 	and.w	r3, r3, #2
 8109426:	2b00      	cmp	r3, #0
 8109428:	bf14      	ite	ne
 810942a:	2301      	movne	r3, #1
 810942c:	2300      	moveq	r3, #0
 810942e:	b2db      	uxtb	r3, r3
 8109430:	461a      	mov	r2, r3
 8109432:	683b      	ldr	r3, [r7, #0]
 8109434:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8109438:	687b      	ldr	r3, [r7, #4]
 810943a:	681b      	ldr	r3, [r3, #0]
 810943c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810943e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109442:	2b00      	cmp	r3, #0
 8109444:	bf0c      	ite	eq
 8109446:	2301      	moveq	r3, #1
 8109448:	2300      	movne	r3, #0
 810944a:	b2db      	uxtb	r3, r3
 810944c:	461a      	mov	r2, r3
 810944e:	683b      	ldr	r3, [r7, #0]
 8109450:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8109454:	687b      	ldr	r3, [r7, #4]
 8109456:	681b      	ldr	r3, [r3, #0]
 8109458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810945a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810945e:	683b      	ldr	r3, [r7, #0]
 8109460:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8109462:	687b      	ldr	r3, [r7, #4]
 8109464:	681b      	ldr	r3, [r3, #0]
 8109466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109468:	0c1b      	lsrs	r3, r3, #16
 810946a:	b29a      	uxth	r2, r3
 810946c:	683b      	ldr	r3, [r7, #0]
 810946e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8109470:	687b      	ldr	r3, [r7, #4]
 8109472:	681b      	ldr	r3, [r3, #0]
 8109474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109478:	f003 0301 	and.w	r3, r3, #1
 810947c:	2b00      	cmp	r3, #0
 810947e:	bf14      	ite	ne
 8109480:	2301      	movne	r3, #1
 8109482:	2300      	moveq	r3, #0
 8109484:	b2db      	uxtb	r3, r3
 8109486:	461a      	mov	r2, r3
 8109488:	683b      	ldr	r3, [r7, #0]
 810948a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 810948e:	687b      	ldr	r3, [r7, #4]
 8109490:	681b      	ldr	r3, [r3, #0]
 8109492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109496:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 810949a:	2b00      	cmp	r3, #0
 810949c:	bf14      	ite	ne
 810949e:	2301      	movne	r3, #1
 81094a0:	2300      	moveq	r3, #0
 81094a2:	b2db      	uxtb	r3, r3
 81094a4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 81094a6:	683b      	ldr	r3, [r7, #0]
 81094a8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 81094ac:	687b      	ldr	r3, [r7, #4]
 81094ae:	681b      	ldr	r3, [r3, #0]
 81094b0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 81094b4:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 81094b8:	683b      	ldr	r3, [r7, #0]
 81094ba:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 81094bc:	687b      	ldr	r3, [r7, #4]
 81094be:	681b      	ldr	r3, [r3, #0]
 81094c0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 81094c4:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 81094c8:	683b      	ldr	r3, [r7, #0]
 81094ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 81094cc:	687b      	ldr	r3, [r7, #4]
 81094ce:	681b      	ldr	r3, [r3, #0]
 81094d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 81094d4:	f003 0308 	and.w	r3, r3, #8
 81094d8:	2b00      	cmp	r3, #0
 81094da:	bf14      	ite	ne
 81094dc:	2301      	movne	r3, #1
 81094de:	2300      	moveq	r3, #0
 81094e0:	b2db      	uxtb	r3, r3
 81094e2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 81094e4:	683b      	ldr	r3, [r7, #0]
 81094e6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 81094ea:	687b      	ldr	r3, [r7, #4]
 81094ec:	681b      	ldr	r3, [r3, #0]
 81094ee:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 81094f2:	f003 0310 	and.w	r3, r3, #16
 81094f6:	2b00      	cmp	r3, #0
 81094f8:	bf14      	ite	ne
 81094fa:	2301      	movne	r3, #1
 81094fc:	2300      	moveq	r3, #0
 81094fe:	b2db      	uxtb	r3, r3
 8109500:	461a      	mov	r2, r3
 8109502:	683b      	ldr	r3, [r7, #0]
 8109504:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8109508:	687b      	ldr	r3, [r7, #4]
 810950a:	681b      	ldr	r3, [r3, #0]
 810950c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8109510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109514:	2b00      	cmp	r3, #0
 8109516:	bf0c      	ite	eq
 8109518:	2301      	moveq	r3, #1
 810951a:	2300      	movne	r3, #0
 810951c:	b2db      	uxtb	r3, r3
 810951e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8109520:	683b      	ldr	r3, [r7, #0]
 8109522:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8109526:	2300      	movs	r3, #0
}
 8109528:	4618      	mov	r0, r3
 810952a:	370c      	adds	r7, #12
 810952c:	46bd      	mov	sp, r7
 810952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109532:	4770      	bx	lr

08109534 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8109534:	b580      	push	{r7, lr}
 8109536:	b082      	sub	sp, #8
 8109538:	af00      	add	r7, sp, #0
 810953a:	6078      	str	r0, [r7, #4]
 810953c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 810953e:	683b      	ldr	r3, [r7, #0]
 8109540:	2b00      	cmp	r3, #0
 8109542:	d101      	bne.n	8109548 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8109544:	2301      	movs	r3, #1
 8109546:	e00b      	b.n	8109560 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8109548:	687b      	ldr	r3, [r7, #4]
 810954a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810954e:	2b10      	cmp	r3, #16
 8109550:	d105      	bne.n	810955e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8109552:	6839      	ldr	r1, [r7, #0]
 8109554:	6878      	ldr	r0, [r7, #4]
 8109556:	f000 f871 	bl	810963c <ETH_SetMACConfig>

    return HAL_OK;
 810955a:	2300      	movs	r3, #0
 810955c:	e000      	b.n	8109560 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 810955e:	2301      	movs	r3, #1
  }
}
 8109560:	4618      	mov	r0, r3
 8109562:	3708      	adds	r7, #8
 8109564:	46bd      	mov	sp, r7
 8109566:	bd80      	pop	{r7, pc}

08109568 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8109568:	b580      	push	{r7, lr}
 810956a:	b084      	sub	sp, #16
 810956c:	af00      	add	r7, sp, #0
 810956e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8109570:	687b      	ldr	r3, [r7, #4]
 8109572:	681b      	ldr	r3, [r3, #0]
 8109574:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8109578:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 810957a:	68fb      	ldr	r3, [r7, #12]
 810957c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8109580:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8109582:	f001 fff1 	bl	810b568 <HAL_RCC_GetHCLKFreq>
 8109586:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8109588:	68bb      	ldr	r3, [r7, #8]
 810958a:	4a1a      	ldr	r2, [pc, #104]	@ (81095f4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 810958c:	4293      	cmp	r3, r2
 810958e:	d804      	bhi.n	810959a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8109590:	68fb      	ldr	r3, [r7, #12]
 8109592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8109596:	60fb      	str	r3, [r7, #12]
 8109598:	e022      	b.n	81095e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 810959a:	68bb      	ldr	r3, [r7, #8]
 810959c:	4a16      	ldr	r2, [pc, #88]	@ (81095f8 <HAL_ETH_SetMDIOClockRange+0x90>)
 810959e:	4293      	cmp	r3, r2
 81095a0:	d204      	bcs.n	81095ac <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 81095a2:	68fb      	ldr	r3, [r7, #12]
 81095a4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 81095a8:	60fb      	str	r3, [r7, #12]
 81095aa:	e019      	b.n	81095e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 81095ac:	68bb      	ldr	r3, [r7, #8]
 81095ae:	4a13      	ldr	r2, [pc, #76]	@ (81095fc <HAL_ETH_SetMDIOClockRange+0x94>)
 81095b0:	4293      	cmp	r3, r2
 81095b2:	d915      	bls.n	81095e0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 81095b4:	68bb      	ldr	r3, [r7, #8]
 81095b6:	4a12      	ldr	r2, [pc, #72]	@ (8109600 <HAL_ETH_SetMDIOClockRange+0x98>)
 81095b8:	4293      	cmp	r3, r2
 81095ba:	d804      	bhi.n	81095c6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 81095bc:	68fb      	ldr	r3, [r7, #12]
 81095be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81095c2:	60fb      	str	r3, [r7, #12]
 81095c4:	e00c      	b.n	81095e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 81095c6:	68bb      	ldr	r3, [r7, #8]
 81095c8:	4a0e      	ldr	r2, [pc, #56]	@ (8109604 <HAL_ETH_SetMDIOClockRange+0x9c>)
 81095ca:	4293      	cmp	r3, r2
 81095cc:	d804      	bhi.n	81095d8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 81095ce:	68fb      	ldr	r3, [r7, #12]
 81095d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 81095d4:	60fb      	str	r3, [r7, #12]
 81095d6:	e003      	b.n	81095e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 81095d8:	68fb      	ldr	r3, [r7, #12]
 81095da:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 81095de:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 81095e0:	687b      	ldr	r3, [r7, #4]
 81095e2:	681b      	ldr	r3, [r3, #0]
 81095e4:	68fa      	ldr	r2, [r7, #12]
 81095e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 81095ea:	bf00      	nop
 81095ec:	3710      	adds	r7, #16
 81095ee:	46bd      	mov	sp, r7
 81095f0:	bd80      	pop	{r7, pc}
 81095f2:	bf00      	nop
 81095f4:	02160ebf 	.word	0x02160ebf
 81095f8:	03938700 	.word	0x03938700
 81095fc:	05f5e0ff 	.word	0x05f5e0ff
 8109600:	08f0d17f 	.word	0x08f0d17f
 8109604:	0ee6b27f 	.word	0x0ee6b27f

08109608 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8109608:	b480      	push	{r7}
 810960a:	b083      	sub	sp, #12
 810960c:	af00      	add	r7, sp, #0
 810960e:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8109610:	687b      	ldr	r3, [r7, #4]
 8109612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8109616:	4618      	mov	r0, r3
 8109618:	370c      	adds	r7, #12
 810961a:	46bd      	mov	sp, r7
 810961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109620:	4770      	bx	lr

08109622 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8109622:	b480      	push	{r7}
 8109624:	b083      	sub	sp, #12
 8109626:	af00      	add	r7, sp, #0
 8109628:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 810962a:	687b      	ldr	r3, [r7, #4]
 810962c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8109630:	4618      	mov	r0, r3
 8109632:	370c      	adds	r7, #12
 8109634:	46bd      	mov	sp, r7
 8109636:	f85d 7b04 	ldr.w	r7, [sp], #4
 810963a:	4770      	bx	lr

0810963c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 810963c:	b480      	push	{r7}
 810963e:	b085      	sub	sp, #20
 8109640:	af00      	add	r7, sp, #0
 8109642:	6078      	str	r0, [r7, #4]
 8109644:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8109646:	683b      	ldr	r3, [r7, #0]
 8109648:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 810964a:	683b      	ldr	r3, [r7, #0]
 810964c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 810964e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8109650:	683b      	ldr	r3, [r7, #0]
 8109652:	791b      	ldrb	r3, [r3, #4]
 8109654:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8109656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8109658:	683b      	ldr	r3, [r7, #0]
 810965a:	7b1b      	ldrb	r3, [r3, #12]
 810965c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 810965e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8109660:	683b      	ldr	r3, [r7, #0]
 8109662:	7b5b      	ldrb	r3, [r3, #13]
 8109664:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8109666:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8109668:	683b      	ldr	r3, [r7, #0]
 810966a:	7b9b      	ldrb	r3, [r3, #14]
 810966c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 810966e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8109670:	683b      	ldr	r3, [r7, #0]
 8109672:	7bdb      	ldrb	r3, [r3, #15]
 8109674:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8109676:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8109678:	683a      	ldr	r2, [r7, #0]
 810967a:	7c12      	ldrb	r2, [r2, #16]
 810967c:	2a00      	cmp	r2, #0
 810967e:	d102      	bne.n	8109686 <ETH_SetMACConfig+0x4a>
 8109680:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8109684:	e000      	b.n	8109688 <ETH_SetMACConfig+0x4c>
 8109686:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8109688:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810968a:	683a      	ldr	r2, [r7, #0]
 810968c:	7c52      	ldrb	r2, [r2, #17]
 810968e:	2a00      	cmp	r2, #0
 8109690:	d102      	bne.n	8109698 <ETH_SetMACConfig+0x5c>
 8109692:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8109696:	e000      	b.n	810969a <ETH_SetMACConfig+0x5e>
 8109698:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810969a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 810969c:	683b      	ldr	r3, [r7, #0]
 810969e:	7c9b      	ldrb	r3, [r3, #18]
 81096a0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 81096a2:	431a      	orrs	r2, r3
               macconf->Speed |
 81096a4:	683b      	ldr	r3, [r7, #0]
 81096a6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 81096a8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 81096aa:	683b      	ldr	r3, [r7, #0]
 81096ac:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 81096ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 81096b0:	683b      	ldr	r3, [r7, #0]
 81096b2:	7f1b      	ldrb	r3, [r3, #28]
 81096b4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 81096b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 81096b8:	683b      	ldr	r3, [r7, #0]
 81096ba:	7f5b      	ldrb	r3, [r3, #29]
 81096bc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 81096be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 81096c0:	683a      	ldr	r2, [r7, #0]
 81096c2:	7f92      	ldrb	r2, [r2, #30]
 81096c4:	2a00      	cmp	r2, #0
 81096c6:	d102      	bne.n	81096ce <ETH_SetMACConfig+0x92>
 81096c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81096cc:	e000      	b.n	81096d0 <ETH_SetMACConfig+0x94>
 81096ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 81096d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 81096d2:	683b      	ldr	r3, [r7, #0]
 81096d4:	7fdb      	ldrb	r3, [r3, #31]
 81096d6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 81096d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 81096da:	683a      	ldr	r2, [r7, #0]
 81096dc:	f892 2020 	ldrb.w	r2, [r2, #32]
 81096e0:	2a00      	cmp	r2, #0
 81096e2:	d102      	bne.n	81096ea <ETH_SetMACConfig+0xae>
 81096e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81096e8:	e000      	b.n	81096ec <ETH_SetMACConfig+0xb0>
 81096ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 81096ec:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 81096ee:	683b      	ldr	r3, [r7, #0]
 81096f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 81096f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 81096f4:	683b      	ldr	r3, [r7, #0]
 81096f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81096fa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 81096fc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 81096fe:	683b      	ldr	r3, [r7, #0]
 8109700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8109702:	4313      	orrs	r3, r2
 8109704:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8109706:	687b      	ldr	r3, [r7, #4]
 8109708:	681b      	ldr	r3, [r3, #0]
 810970a:	681a      	ldr	r2, [r3, #0]
 810970c:	4b57      	ldr	r3, [pc, #348]	@ (810986c <ETH_SetMACConfig+0x230>)
 810970e:	4013      	ands	r3, r2
 8109710:	687a      	ldr	r2, [r7, #4]
 8109712:	6812      	ldr	r2, [r2, #0]
 8109714:	68f9      	ldr	r1, [r7, #12]
 8109716:	430b      	orrs	r3, r1
 8109718:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810971a:	683b      	ldr	r3, [r7, #0]
 810971c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810971e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8109720:	683b      	ldr	r3, [r7, #0]
 8109722:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8109726:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8109728:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810972a:	683b      	ldr	r3, [r7, #0]
 810972c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8109730:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8109732:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8109734:	683b      	ldr	r3, [r7, #0]
 8109736:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 810973a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810973c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 810973e:	683a      	ldr	r2, [r7, #0]
 8109740:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8109744:	2a00      	cmp	r2, #0
 8109746:	d102      	bne.n	810974e <ETH_SetMACConfig+0x112>
 8109748:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 810974c:	e000      	b.n	8109750 <ETH_SetMACConfig+0x114>
 810974e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8109750:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8109752:	683b      	ldr	r3, [r7, #0]
 8109754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8109756:	4313      	orrs	r3, r2
 8109758:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 810975a:	687b      	ldr	r3, [r7, #4]
 810975c:	681b      	ldr	r3, [r3, #0]
 810975e:	685a      	ldr	r2, [r3, #4]
 8109760:	4b43      	ldr	r3, [pc, #268]	@ (8109870 <ETH_SetMACConfig+0x234>)
 8109762:	4013      	ands	r3, r2
 8109764:	687a      	ldr	r2, [r7, #4]
 8109766:	6812      	ldr	r2, [r2, #0]
 8109768:	68f9      	ldr	r1, [r7, #12]
 810976a:	430b      	orrs	r3, r1
 810976c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810976e:	683b      	ldr	r3, [r7, #0]
 8109770:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109774:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8109776:	683b      	ldr	r3, [r7, #0]
 8109778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810977a:	4313      	orrs	r3, r2
 810977c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 810977e:	687b      	ldr	r3, [r7, #4]
 8109780:	681b      	ldr	r3, [r3, #0]
 8109782:	68db      	ldr	r3, [r3, #12]
 8109784:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8109788:	f023 0301 	bic.w	r3, r3, #1
 810978c:	687a      	ldr	r2, [r7, #4]
 810978e:	6812      	ldr	r2, [r2, #0]
 8109790:	68f9      	ldr	r1, [r7, #12]
 8109792:	430b      	orrs	r3, r1
 8109794:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8109796:	683b      	ldr	r3, [r7, #0]
 8109798:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 810979c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 810979e:	683b      	ldr	r3, [r7, #0]
 81097a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 81097a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 81097a4:	683a      	ldr	r2, [r7, #0]
 81097a6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 81097aa:	2a00      	cmp	r2, #0
 81097ac:	d101      	bne.n	81097b2 <ETH_SetMACConfig+0x176>
 81097ae:	2280      	movs	r2, #128	@ 0x80
 81097b0:	e000      	b.n	81097b4 <ETH_SetMACConfig+0x178>
 81097b2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 81097b4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 81097b6:	683b      	ldr	r3, [r7, #0]
 81097b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81097ba:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 81097bc:	4313      	orrs	r3, r2
 81097be:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 81097c0:	687b      	ldr	r3, [r7, #4]
 81097c2:	681b      	ldr	r3, [r3, #0]
 81097c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81097c6:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 81097ca:	4013      	ands	r3, r2
 81097cc:	687a      	ldr	r2, [r7, #4]
 81097ce:	6812      	ldr	r2, [r2, #0]
 81097d0:	68f9      	ldr	r1, [r7, #12]
 81097d2:	430b      	orrs	r3, r1
 81097d4:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 81097d6:	683b      	ldr	r3, [r7, #0]
 81097d8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 81097dc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 81097de:	683b      	ldr	r3, [r7, #0]
 81097e0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 81097e4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 81097e6:	4313      	orrs	r3, r2
 81097e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 81097ea:	687b      	ldr	r3, [r7, #4]
 81097ec:	681b      	ldr	r3, [r3, #0]
 81097ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81097f2:	f023 0103 	bic.w	r1, r3, #3
 81097f6:	687b      	ldr	r3, [r7, #4]
 81097f8:	681b      	ldr	r3, [r3, #0]
 81097fa:	68fa      	ldr	r2, [r7, #12]
 81097fc:	430a      	orrs	r2, r1
 81097fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8109802:	687b      	ldr	r3, [r7, #4]
 8109804:	681b      	ldr	r3, [r3, #0]
 8109806:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 810980a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 810980e:	683b      	ldr	r3, [r7, #0]
 8109810:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8109812:	687b      	ldr	r3, [r7, #4]
 8109814:	681b      	ldr	r3, [r3, #0]
 8109816:	430a      	orrs	r2, r1
 8109818:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 810981c:	683b      	ldr	r3, [r7, #0]
 810981e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8109820:	683a      	ldr	r2, [r7, #0]
 8109822:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8109826:	2a00      	cmp	r2, #0
 8109828:	d101      	bne.n	810982e <ETH_SetMACConfig+0x1f2>
 810982a:	2240      	movs	r2, #64	@ 0x40
 810982c:	e000      	b.n	8109830 <ETH_SetMACConfig+0x1f4>
 810982e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8109830:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8109832:	683b      	ldr	r3, [r7, #0]
 8109834:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8109838:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 810983a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 810983c:	683b      	ldr	r3, [r7, #0]
 810983e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8109842:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8109844:	4313      	orrs	r3, r2
 8109846:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8109848:	687b      	ldr	r3, [r7, #4]
 810984a:	681b      	ldr	r3, [r3, #0]
 810984c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8109850:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8109854:	687b      	ldr	r3, [r7, #4]
 8109856:	681b      	ldr	r3, [r3, #0]
 8109858:	68fa      	ldr	r2, [r7, #12]
 810985a:	430a      	orrs	r2, r1
 810985c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8109860:	bf00      	nop
 8109862:	3714      	adds	r7, #20
 8109864:	46bd      	mov	sp, r7
 8109866:	f85d 7b04 	ldr.w	r7, [sp], #4
 810986a:	4770      	bx	lr
 810986c:	00048083 	.word	0x00048083
 8109870:	c0f88000 	.word	0xc0f88000

08109874 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8109874:	b480      	push	{r7}
 8109876:	b085      	sub	sp, #20
 8109878:	af00      	add	r7, sp, #0
 810987a:	6078      	str	r0, [r7, #4]
 810987c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 810987e:	687b      	ldr	r3, [r7, #4]
 8109880:	681b      	ldr	r3, [r3, #0]
 8109882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109886:	681b      	ldr	r3, [r3, #0]
 8109888:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 810988c:	f023 0302 	bic.w	r3, r3, #2
 8109890:	683a      	ldr	r2, [r7, #0]
 8109892:	6811      	ldr	r1, [r2, #0]
 8109894:	687a      	ldr	r2, [r7, #4]
 8109896:	6812      	ldr	r2, [r2, #0]
 8109898:	430b      	orrs	r3, r1
 810989a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810989e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81098a0:	683b      	ldr	r3, [r7, #0]
 81098a2:	791b      	ldrb	r3, [r3, #4]
 81098a4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 81098a6:	683b      	ldr	r3, [r7, #0]
 81098a8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81098aa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 81098ac:	683b      	ldr	r3, [r7, #0]
 81098ae:	7b1b      	ldrb	r3, [r3, #12]
 81098b0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81098b2:	4313      	orrs	r3, r2
 81098b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 81098b6:	687b      	ldr	r3, [r7, #4]
 81098b8:	681b      	ldr	r3, [r3, #0]
 81098ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81098be:	685b      	ldr	r3, [r3, #4]
 81098c0:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 81098c4:	f023 0301 	bic.w	r3, r3, #1
 81098c8:	687a      	ldr	r2, [r7, #4]
 81098ca:	6812      	ldr	r2, [r2, #0]
 81098cc:	68f9      	ldr	r1, [r7, #12]
 81098ce:	430b      	orrs	r3, r1
 81098d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81098d4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 81098d6:	683b      	ldr	r3, [r7, #0]
 81098d8:	7b5b      	ldrb	r3, [r3, #13]
 81098da:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 81098dc:	683b      	ldr	r3, [r7, #0]
 81098de:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 81098e0:	4313      	orrs	r3, r2
 81098e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 81098e4:	687b      	ldr	r3, [r7, #4]
 81098e6:	681b      	ldr	r3, [r3, #0]
 81098e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81098ec:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 81098f0:	4b21      	ldr	r3, [pc, #132]	@ (8109978 <ETH_SetDMAConfig+0x104>)
 81098f2:	4013      	ands	r3, r2
 81098f4:	687a      	ldr	r2, [r7, #4]
 81098f6:	6812      	ldr	r2, [r2, #0]
 81098f8:	68f9      	ldr	r1, [r7, #12]
 81098fa:	430b      	orrs	r3, r1
 81098fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8109900:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8109904:	683b      	ldr	r3, [r7, #0]
 8109906:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8109908:	683b      	ldr	r3, [r7, #0]
 810990a:	7d1b      	ldrb	r3, [r3, #20]
 810990c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 810990e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8109910:	683b      	ldr	r3, [r7, #0]
 8109912:	7f5b      	ldrb	r3, [r3, #29]
 8109914:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8109916:	4313      	orrs	r3, r2
 8109918:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 810991a:	687b      	ldr	r3, [r7, #4]
 810991c:	681b      	ldr	r3, [r3, #0]
 810991e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109922:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8109926:	4b15      	ldr	r3, [pc, #84]	@ (810997c <ETH_SetDMAConfig+0x108>)
 8109928:	4013      	ands	r3, r2
 810992a:	687a      	ldr	r2, [r7, #4]
 810992c:	6812      	ldr	r2, [r2, #0]
 810992e:	68f9      	ldr	r1, [r7, #12]
 8109930:	430b      	orrs	r3, r1
 8109932:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8109936:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 810993a:	683b      	ldr	r3, [r7, #0]
 810993c:	7f1b      	ldrb	r3, [r3, #28]
 810993e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8109940:	683b      	ldr	r3, [r7, #0]
 8109942:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8109944:	4313      	orrs	r3, r2
 8109946:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8109948:	687b      	ldr	r3, [r7, #4]
 810994a:	681b      	ldr	r3, [r3, #0]
 810994c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109950:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8109954:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8109958:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810995c:	687a      	ldr	r2, [r7, #4]
 810995e:	6812      	ldr	r2, [r2, #0]
 8109960:	68f9      	ldr	r1, [r7, #12]
 8109962:	430b      	orrs	r3, r1
 8109964:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8109968:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 810996c:	bf00      	nop
 810996e:	3714      	adds	r7, #20
 8109970:	46bd      	mov	sp, r7
 8109972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109976:	4770      	bx	lr
 8109978:	fffec000 	.word	0xfffec000
 810997c:	ffc0efef 	.word	0xffc0efef

08109980 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8109980:	b580      	push	{r7, lr}
 8109982:	b0a4      	sub	sp, #144	@ 0x90
 8109984:	af00      	add	r7, sp, #0
 8109986:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8109988:	2301      	movs	r3, #1
 810998a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 810998e:	2300      	movs	r3, #0
 8109990:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8109992:	2300      	movs	r3, #0
 8109994:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8109998:	2300      	movs	r3, #0
 810999a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 810999e:	2301      	movs	r3, #1
 81099a0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 81099a4:	2301      	movs	r3, #1
 81099a6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 81099aa:	2301      	movs	r3, #1
 81099ac:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 81099b0:	2300      	movs	r3, #0
 81099b2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 81099b6:	2301      	movs	r3, #1
 81099b8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 81099bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81099c0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 81099c2:	2300      	movs	r3, #0
 81099c4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 81099c8:	2300      	movs	r3, #0
 81099ca:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 81099cc:	2300      	movs	r3, #0
 81099ce:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 81099d2:	2300      	movs	r3, #0
 81099d4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 81099d8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 81099dc:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 81099de:	2300      	movs	r3, #0
 81099e0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 81099e4:	2300      	movs	r3, #0
 81099e6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 81099e8:	2301      	movs	r3, #1
 81099ea:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 81099ee:	2300      	movs	r3, #0
 81099f0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 81099f4:	2300      	movs	r3, #0
 81099f6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 81099fa:	2300      	movs	r3, #0
 81099fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 81099fe:	2300      	movs	r3, #0
 8109a00:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8109a02:	2300      	movs	r3, #0
 8109a04:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8109a06:	2300      	movs	r3, #0
 8109a08:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8109a0c:	2300      	movs	r3, #0
 8109a0e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8109a12:	2301      	movs	r3, #1
 8109a14:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8109a18:	2320      	movs	r3, #32
 8109a1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8109a1e:	2301      	movs	r3, #1
 8109a20:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8109a24:	2300      	movs	r3, #0
 8109a26:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8109a2a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8109a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8109a30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8109a34:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8109a36:	2300      	movs	r3, #0
 8109a38:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8109a3c:	2302      	movs	r3, #2
 8109a3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8109a42:	2300      	movs	r3, #0
 8109a44:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8109a48:	2300      	movs	r3, #0
 8109a4a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8109a4e:	2300      	movs	r3, #0
 8109a50:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8109a54:	2301      	movs	r3, #1
 8109a56:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8109a5a:	2300      	movs	r3, #0
 8109a5c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8109a5e:	2301      	movs	r3, #1
 8109a60:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8109a64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8109a68:	4619      	mov	r1, r3
 8109a6a:	6878      	ldr	r0, [r7, #4]
 8109a6c:	f7ff fde6 	bl	810963c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8109a70:	2301      	movs	r3, #1
 8109a72:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8109a74:	2301      	movs	r3, #1
 8109a76:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8109a78:	2300      	movs	r3, #0
 8109a7a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8109a7c:	2300      	movs	r3, #0
 8109a7e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8109a82:	2300      	movs	r3, #0
 8109a84:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8109a86:	2300      	movs	r3, #0
 8109a88:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8109a8a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8109a8e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8109a90:	2300      	movs	r3, #0
 8109a92:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8109a94:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8109a98:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8109a9a:	2300      	movs	r3, #0
 8109a9c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8109aa0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8109aa4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8109aa6:	f107 0308 	add.w	r3, r7, #8
 8109aaa:	4619      	mov	r1, r3
 8109aac:	6878      	ldr	r0, [r7, #4]
 8109aae:	f7ff fee1 	bl	8109874 <ETH_SetDMAConfig>
}
 8109ab2:	bf00      	nop
 8109ab4:	3790      	adds	r7, #144	@ 0x90
 8109ab6:	46bd      	mov	sp, r7
 8109ab8:	bd80      	pop	{r7, pc}

08109aba <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8109aba:	b480      	push	{r7}
 8109abc:	b085      	sub	sp, #20
 8109abe:	af00      	add	r7, sp, #0
 8109ac0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8109ac2:	2300      	movs	r3, #0
 8109ac4:	60fb      	str	r3, [r7, #12]
 8109ac6:	e01d      	b.n	8109b04 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8109ac8:	687b      	ldr	r3, [r7, #4]
 8109aca:	68d9      	ldr	r1, [r3, #12]
 8109acc:	68fa      	ldr	r2, [r7, #12]
 8109ace:	4613      	mov	r3, r2
 8109ad0:	005b      	lsls	r3, r3, #1
 8109ad2:	4413      	add	r3, r2
 8109ad4:	00db      	lsls	r3, r3, #3
 8109ad6:	440b      	add	r3, r1
 8109ad8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8109ada:	68bb      	ldr	r3, [r7, #8]
 8109adc:	2200      	movs	r2, #0
 8109ade:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8109ae0:	68bb      	ldr	r3, [r7, #8]
 8109ae2:	2200      	movs	r2, #0
 8109ae4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8109ae6:	68bb      	ldr	r3, [r7, #8]
 8109ae8:	2200      	movs	r2, #0
 8109aea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8109aec:	68bb      	ldr	r3, [r7, #8]
 8109aee:	2200      	movs	r2, #0
 8109af0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8109af2:	68b9      	ldr	r1, [r7, #8]
 8109af4:	687b      	ldr	r3, [r7, #4]
 8109af6:	68fa      	ldr	r2, [r7, #12]
 8109af8:	3206      	adds	r2, #6
 8109afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8109afe:	68fb      	ldr	r3, [r7, #12]
 8109b00:	3301      	adds	r3, #1
 8109b02:	60fb      	str	r3, [r7, #12]
 8109b04:	68fb      	ldr	r3, [r7, #12]
 8109b06:	2b03      	cmp	r3, #3
 8109b08:	d9de      	bls.n	8109ac8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8109b0a:	687b      	ldr	r3, [r7, #4]
 8109b0c:	2200      	movs	r2, #0
 8109b0e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8109b10:	687b      	ldr	r3, [r7, #4]
 8109b12:	681b      	ldr	r3, [r3, #0]
 8109b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109b18:	461a      	mov	r2, r3
 8109b1a:	2303      	movs	r3, #3
 8109b1c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8109b20:	687b      	ldr	r3, [r7, #4]
 8109b22:	68da      	ldr	r2, [r3, #12]
 8109b24:	687b      	ldr	r3, [r7, #4]
 8109b26:	681b      	ldr	r3, [r3, #0]
 8109b28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109b2c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8109b30:	687b      	ldr	r3, [r7, #4]
 8109b32:	68da      	ldr	r2, [r3, #12]
 8109b34:	687b      	ldr	r3, [r7, #4]
 8109b36:	681b      	ldr	r3, [r3, #0]
 8109b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109b3c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8109b40:	bf00      	nop
 8109b42:	3714      	adds	r7, #20
 8109b44:	46bd      	mov	sp, r7
 8109b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b4a:	4770      	bx	lr

08109b4c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8109b4c:	b480      	push	{r7}
 8109b4e:	b085      	sub	sp, #20
 8109b50:	af00      	add	r7, sp, #0
 8109b52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8109b54:	2300      	movs	r3, #0
 8109b56:	60fb      	str	r3, [r7, #12]
 8109b58:	e023      	b.n	8109ba2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8109b5a:	687b      	ldr	r3, [r7, #4]
 8109b5c:	6919      	ldr	r1, [r3, #16]
 8109b5e:	68fa      	ldr	r2, [r7, #12]
 8109b60:	4613      	mov	r3, r2
 8109b62:	005b      	lsls	r3, r3, #1
 8109b64:	4413      	add	r3, r2
 8109b66:	00db      	lsls	r3, r3, #3
 8109b68:	440b      	add	r3, r1
 8109b6a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8109b6c:	68bb      	ldr	r3, [r7, #8]
 8109b6e:	2200      	movs	r2, #0
 8109b70:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8109b72:	68bb      	ldr	r3, [r7, #8]
 8109b74:	2200      	movs	r2, #0
 8109b76:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8109b78:	68bb      	ldr	r3, [r7, #8]
 8109b7a:	2200      	movs	r2, #0
 8109b7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8109b7e:	68bb      	ldr	r3, [r7, #8]
 8109b80:	2200      	movs	r2, #0
 8109b82:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8109b84:	68bb      	ldr	r3, [r7, #8]
 8109b86:	2200      	movs	r2, #0
 8109b88:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8109b8a:	68bb      	ldr	r3, [r7, #8]
 8109b8c:	2200      	movs	r2, #0
 8109b8e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8109b90:	68b9      	ldr	r1, [r7, #8]
 8109b92:	687b      	ldr	r3, [r7, #4]
 8109b94:	68fa      	ldr	r2, [r7, #12]
 8109b96:	3212      	adds	r2, #18
 8109b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8109b9c:	68fb      	ldr	r3, [r7, #12]
 8109b9e:	3301      	adds	r3, #1
 8109ba0:	60fb      	str	r3, [r7, #12]
 8109ba2:	68fb      	ldr	r3, [r7, #12]
 8109ba4:	2b03      	cmp	r3, #3
 8109ba6:	d9d8      	bls.n	8109b5a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8109ba8:	687b      	ldr	r3, [r7, #4]
 8109baa:	2200      	movs	r2, #0
 8109bac:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8109bae:	687b      	ldr	r3, [r7, #4]
 8109bb0:	2200      	movs	r2, #0
 8109bb2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8109bb4:	687b      	ldr	r3, [r7, #4]
 8109bb6:	2200      	movs	r2, #0
 8109bb8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8109bba:	687b      	ldr	r3, [r7, #4]
 8109bbc:	2200      	movs	r2, #0
 8109bbe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8109bc0:	687b      	ldr	r3, [r7, #4]
 8109bc2:	2200      	movs	r2, #0
 8109bc4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8109bc6:	687b      	ldr	r3, [r7, #4]
 8109bc8:	681b      	ldr	r3, [r3, #0]
 8109bca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109bce:	461a      	mov	r2, r3
 8109bd0:	2303      	movs	r3, #3
 8109bd2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8109bd6:	687b      	ldr	r3, [r7, #4]
 8109bd8:	691a      	ldr	r2, [r3, #16]
 8109bda:	687b      	ldr	r3, [r7, #4]
 8109bdc:	681b      	ldr	r3, [r3, #0]
 8109bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109be2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8109be6:	687b      	ldr	r3, [r7, #4]
 8109be8:	691b      	ldr	r3, [r3, #16]
 8109bea:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8109bee:	687b      	ldr	r3, [r7, #4]
 8109bf0:	681b      	ldr	r3, [r3, #0]
 8109bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109bf6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8109bfa:	bf00      	nop
 8109bfc:	3714      	adds	r7, #20
 8109bfe:	46bd      	mov	sp, r7
 8109c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c04:	4770      	bx	lr

08109c06 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8109c06:	b480      	push	{r7}
 8109c08:	b091      	sub	sp, #68	@ 0x44
 8109c0a:	af00      	add	r7, sp, #0
 8109c0c:	60f8      	str	r0, [r7, #12]
 8109c0e:	60b9      	str	r1, [r7, #8]
 8109c10:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8109c12:	68fb      	ldr	r3, [r7, #12]
 8109c14:	3318      	adds	r3, #24
 8109c16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8109c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109c1a:	691b      	ldr	r3, [r3, #16]
 8109c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8109c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109c20:	691b      	ldr	r3, [r3, #16]
 8109c22:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8109c24:	2300      	movs	r3, #0
 8109c26:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8109c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109c2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8109c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8109c30:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8109c32:	68bb      	ldr	r3, [r7, #8]
 8109c34:	689b      	ldr	r3, [r3, #8]
 8109c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8109c38:	2300      	movs	r3, #0
 8109c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8109c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109c3e:	68db      	ldr	r3, [r3, #12]
 8109c40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8109c44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8109c48:	d007      	beq.n	8109c5a <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8109c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109c4e:	3304      	adds	r3, #4
 8109c50:	009b      	lsls	r3, r3, #2
 8109c52:	4413      	add	r3, r2
 8109c54:	685b      	ldr	r3, [r3, #4]
 8109c56:	2b00      	cmp	r3, #0
 8109c58:	d001      	beq.n	8109c5e <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8109c5a:	2302      	movs	r3, #2
 8109c5c:	e267      	b.n	810a12e <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8109c5e:	68bb      	ldr	r3, [r7, #8]
 8109c60:	681b      	ldr	r3, [r3, #0]
 8109c62:	f003 0304 	and.w	r3, r3, #4
 8109c66:	2b00      	cmp	r3, #0
 8109c68:	d044      	beq.n	8109cf4 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8109c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109c6c:	68db      	ldr	r3, [r3, #12]
 8109c6e:	0c1b      	lsrs	r3, r3, #16
 8109c70:	041b      	lsls	r3, r3, #16
 8109c72:	68ba      	ldr	r2, [r7, #8]
 8109c74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8109c76:	431a      	orrs	r2, r3
 8109c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109c7a:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8109c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109c7e:	68db      	ldr	r3, [r3, #12]
 8109c80:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8109c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109c86:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8109c88:	68fb      	ldr	r3, [r7, #12]
 8109c8a:	681b      	ldr	r3, [r3, #0]
 8109c8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8109c8e:	68fb      	ldr	r3, [r7, #12]
 8109c90:	681b      	ldr	r3, [r3, #0]
 8109c92:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8109c96:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8109c98:	68bb      	ldr	r3, [r7, #8]
 8109c9a:	681b      	ldr	r3, [r3, #0]
 8109c9c:	f003 0308 	and.w	r3, r3, #8
 8109ca0:	2b00      	cmp	r3, #0
 8109ca2:	d027      	beq.n	8109cf4 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8109ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109ca6:	689b      	ldr	r3, [r3, #8]
 8109ca8:	b29a      	uxth	r2, r3
 8109caa:	68bb      	ldr	r3, [r7, #8]
 8109cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109cae:	041b      	lsls	r3, r3, #16
 8109cb0:	431a      	orrs	r2, r3
 8109cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109cb4:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8109cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109cb8:	68db      	ldr	r3, [r3, #12]
 8109cba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8109cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109cc0:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8109cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109cc4:	68db      	ldr	r3, [r3, #12]
 8109cc6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8109cca:	68bb      	ldr	r3, [r7, #8]
 8109ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109cce:	431a      	orrs	r2, r3
 8109cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109cd2:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8109cd4:	68fb      	ldr	r3, [r7, #12]
 8109cd6:	681b      	ldr	r3, [r3, #0]
 8109cd8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8109cda:	68fb      	ldr	r3, [r7, #12]
 8109cdc:	681b      	ldr	r3, [r3, #0]
 8109cde:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8109ce2:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8109ce4:	68fb      	ldr	r3, [r7, #12]
 8109ce6:	681b      	ldr	r3, [r3, #0]
 8109ce8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8109cea:	68fb      	ldr	r3, [r7, #12]
 8109cec:	681b      	ldr	r3, [r3, #0]
 8109cee:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8109cf2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8109cf4:	68bb      	ldr	r3, [r7, #8]
 8109cf6:	681b      	ldr	r3, [r3, #0]
 8109cf8:	f003 0310 	and.w	r3, r3, #16
 8109cfc:	2b00      	cmp	r3, #0
 8109cfe:	d010      	beq.n	8109d22 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8109d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d02:	689b      	ldr	r3, [r3, #8]
 8109d04:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8109d08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8109d0c:	68ba      	ldr	r2, [r7, #8]
 8109d0e:	6992      	ldr	r2, [r2, #24]
 8109d10:	431a      	orrs	r2, r3
 8109d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d14:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8109d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d18:	68db      	ldr	r3, [r3, #12]
 8109d1a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8109d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d20:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8109d22:	68bb      	ldr	r3, [r7, #8]
 8109d24:	681b      	ldr	r3, [r3, #0]
 8109d26:	f003 0304 	and.w	r3, r3, #4
 8109d2a:	2b00      	cmp	r3, #0
 8109d2c:	d105      	bne.n	8109d3a <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8109d2e:	68bb      	ldr	r3, [r7, #8]
 8109d30:	681b      	ldr	r3, [r3, #0]
 8109d32:	f003 0310 	and.w	r3, r3, #16
 8109d36:	2b00      	cmp	r3, #0
 8109d38:	d036      	beq.n	8109da8 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8109d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d3c:	68db      	ldr	r3, [r3, #12]
 8109d3e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8109d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d44:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8109d46:	f3bf 8f5f 	dmb	sy
}
 8109d4a:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8109d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d4e:	68db      	ldr	r3, [r3, #12]
 8109d50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8109d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d56:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8109d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109d5a:	3301      	adds	r3, #1
 8109d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109d60:	2b03      	cmp	r3, #3
 8109d62:	d902      	bls.n	8109d6a <ETH_Prepare_Tx_Descriptors+0x164>
 8109d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109d66:	3b04      	subs	r3, #4
 8109d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8109d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109d6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8109d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8109d72:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8109d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109d76:	3301      	adds	r3, #1
 8109d78:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8109d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d7c:	68db      	ldr	r3, [r3, #12]
 8109d7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8109d82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8109d86:	d10f      	bne.n	8109da8 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8109d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109d8a:	6a3a      	ldr	r2, [r7, #32]
 8109d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8109d90:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8109d92:	f3bf 8f5f 	dmb	sy
}
 8109d96:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8109d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109d9a:	68db      	ldr	r3, [r3, #12]
 8109d9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8109da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109da2:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8109da4:	2302      	movs	r3, #2
 8109da6:	e1c2      	b.n	810a12e <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8109da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109daa:	3301      	adds	r3, #1
 8109dac:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8109dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109db0:	681b      	ldr	r3, [r3, #0]
 8109db2:	461a      	mov	r2, r3
 8109db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109db6:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8109db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109dba:	689b      	ldr	r3, [r3, #8]
 8109dbc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8109dc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8109dc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8109dc6:	6852      	ldr	r2, [r2, #4]
 8109dc8:	431a      	orrs	r2, r3
 8109dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109dcc:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8109dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109dd0:	689b      	ldr	r3, [r3, #8]
 8109dd2:	2b00      	cmp	r3, #0
 8109dd4:	d014      	beq.n	8109e00 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8109dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109dd8:	689b      	ldr	r3, [r3, #8]
 8109dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8109ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109dde:	681b      	ldr	r3, [r3, #0]
 8109de0:	461a      	mov	r2, r3
 8109de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109de4:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8109de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109de8:	689b      	ldr	r3, [r3, #8]
 8109dea:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8109dee:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8109df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8109df4:	6852      	ldr	r2, [r2, #4]
 8109df6:	0412      	lsls	r2, r2, #16
 8109df8:	431a      	orrs	r2, r3
 8109dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109dfc:	609a      	str	r2, [r3, #8]
 8109dfe:	e00a      	b.n	8109e16 <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8109e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e02:	2200      	movs	r2, #0
 8109e04:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8109e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e08:	689b      	ldr	r3, [r3, #8]
 8109e0a:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8109e0e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8109e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109e14:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8109e16:	68bb      	ldr	r3, [r7, #8]
 8109e18:	681b      	ldr	r3, [r3, #0]
 8109e1a:	f003 0310 	and.w	r3, r3, #16
 8109e1e:	2b00      	cmp	r3, #0
 8109e20:	d019      	beq.n	8109e56 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8109e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e24:	68db      	ldr	r3, [r3, #12]
 8109e26:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8109e2a:	68bb      	ldr	r3, [r7, #8]
 8109e2c:	6a1b      	ldr	r3, [r3, #32]
 8109e2e:	04db      	lsls	r3, r3, #19
 8109e30:	431a      	orrs	r2, r3
 8109e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e34:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8109e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e38:	68db      	ldr	r3, [r3, #12]
 8109e3a:	0c9b      	lsrs	r3, r3, #18
 8109e3c:	049b      	lsls	r3, r3, #18
 8109e3e:	68ba      	ldr	r2, [r7, #8]
 8109e40:	69d2      	ldr	r2, [r2, #28]
 8109e42:	431a      	orrs	r2, r3
 8109e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e46:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8109e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e4a:	68db      	ldr	r3, [r3, #12]
 8109e4c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8109e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e52:	60da      	str	r2, [r3, #12]
 8109e54:	e028      	b.n	8109ea8 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8109e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e58:	68db      	ldr	r3, [r3, #12]
 8109e5a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8109e5e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8109e62:	68ba      	ldr	r2, [r7, #8]
 8109e64:	6852      	ldr	r2, [r2, #4]
 8109e66:	431a      	orrs	r2, r3
 8109e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e6a:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8109e6c:	68bb      	ldr	r3, [r7, #8]
 8109e6e:	681b      	ldr	r3, [r3, #0]
 8109e70:	f003 0301 	and.w	r3, r3, #1
 8109e74:	2b00      	cmp	r3, #0
 8109e76:	d008      	beq.n	8109e8a <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8109e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e7a:	68db      	ldr	r3, [r3, #12]
 8109e7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8109e80:	68bb      	ldr	r3, [r7, #8]
 8109e82:	695b      	ldr	r3, [r3, #20]
 8109e84:	431a      	orrs	r2, r3
 8109e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e88:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8109e8a:	68bb      	ldr	r3, [r7, #8]
 8109e8c:	681b      	ldr	r3, [r3, #0]
 8109e8e:	f003 0320 	and.w	r3, r3, #32
 8109e92:	2b00      	cmp	r3, #0
 8109e94:	d008      	beq.n	8109ea8 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8109e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e98:	68db      	ldr	r3, [r3, #12]
 8109e9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8109e9e:	68bb      	ldr	r3, [r7, #8]
 8109ea0:	691b      	ldr	r3, [r3, #16]
 8109ea2:	431a      	orrs	r2, r3
 8109ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109ea6:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8109ea8:	68bb      	ldr	r3, [r7, #8]
 8109eaa:	681b      	ldr	r3, [r3, #0]
 8109eac:	f003 0304 	and.w	r3, r3, #4
 8109eb0:	2b00      	cmp	r3, #0
 8109eb2:	d008      	beq.n	8109ec6 <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8109eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109eb6:	689b      	ldr	r3, [r3, #8]
 8109eb8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8109ebc:	68bb      	ldr	r3, [r7, #8]
 8109ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109ec0:	431a      	orrs	r2, r3
 8109ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109ec4:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8109ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109ec8:	68db      	ldr	r3, [r3, #12]
 8109eca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8109ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109ed0:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8109ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109ed4:	68db      	ldr	r3, [r3, #12]
 8109ed6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8109eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109edc:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8109ede:	f3bf 8f5f 	dmb	sy
}
 8109ee2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8109ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109ee6:	68db      	ldr	r3, [r3, #12]
 8109ee8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8109eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109eee:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8109ef0:	68bb      	ldr	r3, [r7, #8]
 8109ef2:	681b      	ldr	r3, [r3, #0]
 8109ef4:	f003 0302 	and.w	r3, r3, #2
 8109ef8:	2b00      	cmp	r3, #0
 8109efa:	f000 80d9 	beq.w	810a0b0 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8109efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109f00:	68db      	ldr	r3, [r3, #12]
 8109f02:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8109f06:	68bb      	ldr	r3, [r7, #8]
 8109f08:	68db      	ldr	r3, [r3, #12]
 8109f0a:	431a      	orrs	r2, r3
 8109f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109f0e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8109f10:	e0ce      	b.n	810a0b0 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8109f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109f14:	68db      	ldr	r3, [r3, #12]
 8109f16:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8109f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109f1c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8109f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109f20:	3301      	adds	r3, #1
 8109f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109f26:	2b03      	cmp	r3, #3
 8109f28:	d902      	bls.n	8109f30 <ETH_Prepare_Tx_Descriptors+0x32a>
 8109f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109f2c:	3b04      	subs	r3, #4
 8109f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8109f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109f32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8109f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8109f38:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8109f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109f3c:	68db      	ldr	r3, [r3, #12]
 8109f3e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8109f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109f44:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8109f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109f48:	68db      	ldr	r3, [r3, #12]
 8109f4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8109f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8109f52:	d007      	beq.n	8109f64 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8109f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109f58:	3304      	adds	r3, #4
 8109f5a:	009b      	lsls	r3, r3, #2
 8109f5c:	4413      	add	r3, r2
 8109f5e:	685b      	ldr	r3, [r3, #4]
 8109f60:	2b00      	cmp	r3, #0
 8109f62:	d029      	beq.n	8109fb8 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8109f64:	6a3b      	ldr	r3, [r7, #32]
 8109f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8109f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109f6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8109f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8109f70:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8109f72:	2300      	movs	r3, #0
 8109f74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8109f76:	e019      	b.n	8109fac <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8109f78:	f3bf 8f5f 	dmb	sy
}
 8109f7c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8109f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109f80:	68db      	ldr	r3, [r3, #12]
 8109f82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8109f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109f88:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8109f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109f8c:	3301      	adds	r3, #1
 8109f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109f92:	2b03      	cmp	r3, #3
 8109f94:	d902      	bls.n	8109f9c <ETH_Prepare_Tx_Descriptors+0x396>
 8109f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109f98:	3b04      	subs	r3, #4
 8109f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8109f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109f9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8109fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8109fa4:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8109fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109fa8:	3301      	adds	r3, #1
 8109faa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8109fac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8109fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109fb0:	429a      	cmp	r2, r3
 8109fb2:	d3e1      	bcc.n	8109f78 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8109fb4:	2302      	movs	r3, #2
 8109fb6:	e0ba      	b.n	810a12e <ETH_Prepare_Tx_Descriptors+0x528>
    }

    descnbr += 1U;
 8109fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109fba:	3301      	adds	r3, #1
 8109fbc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8109fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109fc0:	689b      	ldr	r3, [r3, #8]
 8109fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8109fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109fc6:	681b      	ldr	r3, [r3, #0]
 8109fc8:	461a      	mov	r2, r3
 8109fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109fcc:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8109fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109fd0:	689b      	ldr	r3, [r3, #8]
 8109fd2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8109fd6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8109fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8109fdc:	6852      	ldr	r2, [r2, #4]
 8109fde:	431a      	orrs	r2, r3
 8109fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109fe2:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8109fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109fe6:	689b      	ldr	r3, [r3, #8]
 8109fe8:	2b00      	cmp	r3, #0
 8109fea:	d014      	beq.n	810a016 <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8109fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109fee:	689b      	ldr	r3, [r3, #8]
 8109ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8109ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109ff4:	681b      	ldr	r3, [r3, #0]
 8109ff6:	461a      	mov	r2, r3
 8109ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109ffa:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8109ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109ffe:	689b      	ldr	r3, [r3, #8]
 810a000:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810a004:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810a008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810a00a:	6852      	ldr	r2, [r2, #4]
 810a00c:	0412      	lsls	r2, r2, #16
 810a00e:	431a      	orrs	r2, r3
 810a010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a012:	609a      	str	r2, [r3, #8]
 810a014:	e00a      	b.n	810a02c <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 810a016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a018:	2200      	movs	r2, #0
 810a01a:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 810a01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a01e:	689b      	ldr	r3, [r3, #8]
 810a020:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810a024:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810a028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a02a:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 810a02c:	68bb      	ldr	r3, [r7, #8]
 810a02e:	681b      	ldr	r3, [r3, #0]
 810a030:	f003 0310 	and.w	r3, r3, #16
 810a034:	2b00      	cmp	r3, #0
 810a036:	d00f      	beq.n	810a058 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 810a038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a03a:	68db      	ldr	r3, [r3, #12]
 810a03c:	0c9b      	lsrs	r3, r3, #18
 810a03e:	049b      	lsls	r3, r3, #18
 810a040:	68ba      	ldr	r2, [r7, #8]
 810a042:	69d2      	ldr	r2, [r2, #28]
 810a044:	431a      	orrs	r2, r3
 810a046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a048:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 810a04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a04c:	68db      	ldr	r3, [r3, #12]
 810a04e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 810a052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a054:	60da      	str	r2, [r3, #12]
 810a056:	e019      	b.n	810a08c <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 810a058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a05a:	68db      	ldr	r3, [r3, #12]
 810a05c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810a060:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810a064:	68ba      	ldr	r2, [r7, #8]
 810a066:	6852      	ldr	r2, [r2, #4]
 810a068:	431a      	orrs	r2, r3
 810a06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a06c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 810a06e:	68bb      	ldr	r3, [r7, #8]
 810a070:	681b      	ldr	r3, [r3, #0]
 810a072:	f003 0301 	and.w	r3, r3, #1
 810a076:	2b00      	cmp	r3, #0
 810a078:	d008      	beq.n	810a08c <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 810a07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a07c:	68db      	ldr	r3, [r3, #12]
 810a07e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 810a082:	68bb      	ldr	r3, [r7, #8]
 810a084:	695b      	ldr	r3, [r3, #20]
 810a086:	431a      	orrs	r2, r3
 810a088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a08a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 810a08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a08e:	3301      	adds	r3, #1
 810a090:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 810a092:	f3bf 8f5f 	dmb	sy
}
 810a096:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 810a098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a09a:	68db      	ldr	r3, [r3, #12]
 810a09c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810a0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a0a2:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 810a0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a0a6:	68db      	ldr	r3, [r3, #12]
 810a0a8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 810a0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a0ae:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 810a0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a0b2:	689b      	ldr	r3, [r3, #8]
 810a0b4:	2b00      	cmp	r3, #0
 810a0b6:	f47f af2c 	bne.w	8109f12 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 810a0ba:	687b      	ldr	r3, [r7, #4]
 810a0bc:	2b00      	cmp	r3, #0
 810a0be:	d006      	beq.n	810a0ce <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 810a0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a0c2:	689b      	ldr	r3, [r3, #8]
 810a0c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810a0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a0ca:	609a      	str	r2, [r3, #8]
 810a0cc:	e005      	b.n	810a0da <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 810a0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a0d0:	689b      	ldr	r3, [r3, #8]
 810a0d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 810a0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a0d8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 810a0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a0dc:	68db      	ldr	r3, [r3, #12]
 810a0de:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 810a0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a0e4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 810a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a0e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810a0ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810a0ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a0ee:	3304      	adds	r3, #4
 810a0f0:	009b      	lsls	r3, r3, #2
 810a0f2:	440b      	add	r3, r1
 810a0f4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 810a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a0f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810a0fa:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 810a0fc:	f3ef 8310 	mrs	r3, PRIMASK
 810a100:	613b      	str	r3, [r7, #16]
  return(result);
 810a102:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 810a104:	61fb      	str	r3, [r7, #28]
 810a106:	2301      	movs	r3, #1
 810a108:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 810a10a:	697b      	ldr	r3, [r7, #20]
 810a10c:	f383 8810 	msr	PRIMASK, r3
}
 810a110:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 810a112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a114:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 810a116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a118:	4413      	add	r3, r2
 810a11a:	1c5a      	adds	r2, r3, #1
 810a11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a11e:	629a      	str	r2, [r3, #40]	@ 0x28
 810a120:	69fb      	ldr	r3, [r7, #28]
 810a122:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 810a124:	69bb      	ldr	r3, [r7, #24]
 810a126:	f383 8810 	msr	PRIMASK, r3
}
 810a12a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 810a12c:	2300      	movs	r3, #0
}
 810a12e:	4618      	mov	r0, r3
 810a130:	3744      	adds	r7, #68	@ 0x44
 810a132:	46bd      	mov	sp, r7
 810a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a138:	4770      	bx	lr
	...

0810a13c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810a13c:	b480      	push	{r7}
 810a13e:	b089      	sub	sp, #36	@ 0x24
 810a140:	af00      	add	r7, sp, #0
 810a142:	6078      	str	r0, [r7, #4]
 810a144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810a146:	2300      	movs	r3, #0
 810a148:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810a14a:	4b89      	ldr	r3, [pc, #548]	@ (810a370 <HAL_GPIO_Init+0x234>)
 810a14c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810a14e:	e194      	b.n	810a47a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810a150:	683b      	ldr	r3, [r7, #0]
 810a152:	681a      	ldr	r2, [r3, #0]
 810a154:	2101      	movs	r1, #1
 810a156:	69fb      	ldr	r3, [r7, #28]
 810a158:	fa01 f303 	lsl.w	r3, r1, r3
 810a15c:	4013      	ands	r3, r2
 810a15e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810a160:	693b      	ldr	r3, [r7, #16]
 810a162:	2b00      	cmp	r3, #0
 810a164:	f000 8186 	beq.w	810a474 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810a168:	683b      	ldr	r3, [r7, #0]
 810a16a:	685b      	ldr	r3, [r3, #4]
 810a16c:	f003 0303 	and.w	r3, r3, #3
 810a170:	2b01      	cmp	r3, #1
 810a172:	d005      	beq.n	810a180 <HAL_GPIO_Init+0x44>
 810a174:	683b      	ldr	r3, [r7, #0]
 810a176:	685b      	ldr	r3, [r3, #4]
 810a178:	f003 0303 	and.w	r3, r3, #3
 810a17c:	2b02      	cmp	r3, #2
 810a17e:	d130      	bne.n	810a1e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810a180:	687b      	ldr	r3, [r7, #4]
 810a182:	689b      	ldr	r3, [r3, #8]
 810a184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810a186:	69fb      	ldr	r3, [r7, #28]
 810a188:	005b      	lsls	r3, r3, #1
 810a18a:	2203      	movs	r2, #3
 810a18c:	fa02 f303 	lsl.w	r3, r2, r3
 810a190:	43db      	mvns	r3, r3
 810a192:	69ba      	ldr	r2, [r7, #24]
 810a194:	4013      	ands	r3, r2
 810a196:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810a198:	683b      	ldr	r3, [r7, #0]
 810a19a:	68da      	ldr	r2, [r3, #12]
 810a19c:	69fb      	ldr	r3, [r7, #28]
 810a19e:	005b      	lsls	r3, r3, #1
 810a1a0:	fa02 f303 	lsl.w	r3, r2, r3
 810a1a4:	69ba      	ldr	r2, [r7, #24]
 810a1a6:	4313      	orrs	r3, r2
 810a1a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810a1aa:	687b      	ldr	r3, [r7, #4]
 810a1ac:	69ba      	ldr	r2, [r7, #24]
 810a1ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810a1b0:	687b      	ldr	r3, [r7, #4]
 810a1b2:	685b      	ldr	r3, [r3, #4]
 810a1b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810a1b6:	2201      	movs	r2, #1
 810a1b8:	69fb      	ldr	r3, [r7, #28]
 810a1ba:	fa02 f303 	lsl.w	r3, r2, r3
 810a1be:	43db      	mvns	r3, r3
 810a1c0:	69ba      	ldr	r2, [r7, #24]
 810a1c2:	4013      	ands	r3, r2
 810a1c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810a1c6:	683b      	ldr	r3, [r7, #0]
 810a1c8:	685b      	ldr	r3, [r3, #4]
 810a1ca:	091b      	lsrs	r3, r3, #4
 810a1cc:	f003 0201 	and.w	r2, r3, #1
 810a1d0:	69fb      	ldr	r3, [r7, #28]
 810a1d2:	fa02 f303 	lsl.w	r3, r2, r3
 810a1d6:	69ba      	ldr	r2, [r7, #24]
 810a1d8:	4313      	orrs	r3, r2
 810a1da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810a1dc:	687b      	ldr	r3, [r7, #4]
 810a1de:	69ba      	ldr	r2, [r7, #24]
 810a1e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810a1e2:	683b      	ldr	r3, [r7, #0]
 810a1e4:	685b      	ldr	r3, [r3, #4]
 810a1e6:	f003 0303 	and.w	r3, r3, #3
 810a1ea:	2b03      	cmp	r3, #3
 810a1ec:	d017      	beq.n	810a21e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810a1ee:	687b      	ldr	r3, [r7, #4]
 810a1f0:	68db      	ldr	r3, [r3, #12]
 810a1f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810a1f4:	69fb      	ldr	r3, [r7, #28]
 810a1f6:	005b      	lsls	r3, r3, #1
 810a1f8:	2203      	movs	r2, #3
 810a1fa:	fa02 f303 	lsl.w	r3, r2, r3
 810a1fe:	43db      	mvns	r3, r3
 810a200:	69ba      	ldr	r2, [r7, #24]
 810a202:	4013      	ands	r3, r2
 810a204:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810a206:	683b      	ldr	r3, [r7, #0]
 810a208:	689a      	ldr	r2, [r3, #8]
 810a20a:	69fb      	ldr	r3, [r7, #28]
 810a20c:	005b      	lsls	r3, r3, #1
 810a20e:	fa02 f303 	lsl.w	r3, r2, r3
 810a212:	69ba      	ldr	r2, [r7, #24]
 810a214:	4313      	orrs	r3, r2
 810a216:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810a218:	687b      	ldr	r3, [r7, #4]
 810a21a:	69ba      	ldr	r2, [r7, #24]
 810a21c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810a21e:	683b      	ldr	r3, [r7, #0]
 810a220:	685b      	ldr	r3, [r3, #4]
 810a222:	f003 0303 	and.w	r3, r3, #3
 810a226:	2b02      	cmp	r3, #2
 810a228:	d123      	bne.n	810a272 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810a22a:	69fb      	ldr	r3, [r7, #28]
 810a22c:	08da      	lsrs	r2, r3, #3
 810a22e:	687b      	ldr	r3, [r7, #4]
 810a230:	3208      	adds	r2, #8
 810a232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810a236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810a238:	69fb      	ldr	r3, [r7, #28]
 810a23a:	f003 0307 	and.w	r3, r3, #7
 810a23e:	009b      	lsls	r3, r3, #2
 810a240:	220f      	movs	r2, #15
 810a242:	fa02 f303 	lsl.w	r3, r2, r3
 810a246:	43db      	mvns	r3, r3
 810a248:	69ba      	ldr	r2, [r7, #24]
 810a24a:	4013      	ands	r3, r2
 810a24c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810a24e:	683b      	ldr	r3, [r7, #0]
 810a250:	691a      	ldr	r2, [r3, #16]
 810a252:	69fb      	ldr	r3, [r7, #28]
 810a254:	f003 0307 	and.w	r3, r3, #7
 810a258:	009b      	lsls	r3, r3, #2
 810a25a:	fa02 f303 	lsl.w	r3, r2, r3
 810a25e:	69ba      	ldr	r2, [r7, #24]
 810a260:	4313      	orrs	r3, r2
 810a262:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810a264:	69fb      	ldr	r3, [r7, #28]
 810a266:	08da      	lsrs	r2, r3, #3
 810a268:	687b      	ldr	r3, [r7, #4]
 810a26a:	3208      	adds	r2, #8
 810a26c:	69b9      	ldr	r1, [r7, #24]
 810a26e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810a272:	687b      	ldr	r3, [r7, #4]
 810a274:	681b      	ldr	r3, [r3, #0]
 810a276:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810a278:	69fb      	ldr	r3, [r7, #28]
 810a27a:	005b      	lsls	r3, r3, #1
 810a27c:	2203      	movs	r2, #3
 810a27e:	fa02 f303 	lsl.w	r3, r2, r3
 810a282:	43db      	mvns	r3, r3
 810a284:	69ba      	ldr	r2, [r7, #24]
 810a286:	4013      	ands	r3, r2
 810a288:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810a28a:	683b      	ldr	r3, [r7, #0]
 810a28c:	685b      	ldr	r3, [r3, #4]
 810a28e:	f003 0203 	and.w	r2, r3, #3
 810a292:	69fb      	ldr	r3, [r7, #28]
 810a294:	005b      	lsls	r3, r3, #1
 810a296:	fa02 f303 	lsl.w	r3, r2, r3
 810a29a:	69ba      	ldr	r2, [r7, #24]
 810a29c:	4313      	orrs	r3, r2
 810a29e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810a2a0:	687b      	ldr	r3, [r7, #4]
 810a2a2:	69ba      	ldr	r2, [r7, #24]
 810a2a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810a2a6:	683b      	ldr	r3, [r7, #0]
 810a2a8:	685b      	ldr	r3, [r3, #4]
 810a2aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810a2ae:	2b00      	cmp	r3, #0
 810a2b0:	f000 80e0 	beq.w	810a474 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810a2b4:	4b2f      	ldr	r3, [pc, #188]	@ (810a374 <HAL_GPIO_Init+0x238>)
 810a2b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810a2ba:	4a2e      	ldr	r2, [pc, #184]	@ (810a374 <HAL_GPIO_Init+0x238>)
 810a2bc:	f043 0302 	orr.w	r3, r3, #2
 810a2c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810a2c4:	4b2b      	ldr	r3, [pc, #172]	@ (810a374 <HAL_GPIO_Init+0x238>)
 810a2c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810a2ca:	f003 0302 	and.w	r3, r3, #2
 810a2ce:	60fb      	str	r3, [r7, #12]
 810a2d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810a2d2:	4a29      	ldr	r2, [pc, #164]	@ (810a378 <HAL_GPIO_Init+0x23c>)
 810a2d4:	69fb      	ldr	r3, [r7, #28]
 810a2d6:	089b      	lsrs	r3, r3, #2
 810a2d8:	3302      	adds	r3, #2
 810a2da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810a2de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810a2e0:	69fb      	ldr	r3, [r7, #28]
 810a2e2:	f003 0303 	and.w	r3, r3, #3
 810a2e6:	009b      	lsls	r3, r3, #2
 810a2e8:	220f      	movs	r2, #15
 810a2ea:	fa02 f303 	lsl.w	r3, r2, r3
 810a2ee:	43db      	mvns	r3, r3
 810a2f0:	69ba      	ldr	r2, [r7, #24]
 810a2f2:	4013      	ands	r3, r2
 810a2f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810a2f6:	687b      	ldr	r3, [r7, #4]
 810a2f8:	4a20      	ldr	r2, [pc, #128]	@ (810a37c <HAL_GPIO_Init+0x240>)
 810a2fa:	4293      	cmp	r3, r2
 810a2fc:	d052      	beq.n	810a3a4 <HAL_GPIO_Init+0x268>
 810a2fe:	687b      	ldr	r3, [r7, #4]
 810a300:	4a1f      	ldr	r2, [pc, #124]	@ (810a380 <HAL_GPIO_Init+0x244>)
 810a302:	4293      	cmp	r3, r2
 810a304:	d031      	beq.n	810a36a <HAL_GPIO_Init+0x22e>
 810a306:	687b      	ldr	r3, [r7, #4]
 810a308:	4a1e      	ldr	r2, [pc, #120]	@ (810a384 <HAL_GPIO_Init+0x248>)
 810a30a:	4293      	cmp	r3, r2
 810a30c:	d02b      	beq.n	810a366 <HAL_GPIO_Init+0x22a>
 810a30e:	687b      	ldr	r3, [r7, #4]
 810a310:	4a1d      	ldr	r2, [pc, #116]	@ (810a388 <HAL_GPIO_Init+0x24c>)
 810a312:	4293      	cmp	r3, r2
 810a314:	d025      	beq.n	810a362 <HAL_GPIO_Init+0x226>
 810a316:	687b      	ldr	r3, [r7, #4]
 810a318:	4a1c      	ldr	r2, [pc, #112]	@ (810a38c <HAL_GPIO_Init+0x250>)
 810a31a:	4293      	cmp	r3, r2
 810a31c:	d01f      	beq.n	810a35e <HAL_GPIO_Init+0x222>
 810a31e:	687b      	ldr	r3, [r7, #4]
 810a320:	4a1b      	ldr	r2, [pc, #108]	@ (810a390 <HAL_GPIO_Init+0x254>)
 810a322:	4293      	cmp	r3, r2
 810a324:	d019      	beq.n	810a35a <HAL_GPIO_Init+0x21e>
 810a326:	687b      	ldr	r3, [r7, #4]
 810a328:	4a1a      	ldr	r2, [pc, #104]	@ (810a394 <HAL_GPIO_Init+0x258>)
 810a32a:	4293      	cmp	r3, r2
 810a32c:	d013      	beq.n	810a356 <HAL_GPIO_Init+0x21a>
 810a32e:	687b      	ldr	r3, [r7, #4]
 810a330:	4a19      	ldr	r2, [pc, #100]	@ (810a398 <HAL_GPIO_Init+0x25c>)
 810a332:	4293      	cmp	r3, r2
 810a334:	d00d      	beq.n	810a352 <HAL_GPIO_Init+0x216>
 810a336:	687b      	ldr	r3, [r7, #4]
 810a338:	4a18      	ldr	r2, [pc, #96]	@ (810a39c <HAL_GPIO_Init+0x260>)
 810a33a:	4293      	cmp	r3, r2
 810a33c:	d007      	beq.n	810a34e <HAL_GPIO_Init+0x212>
 810a33e:	687b      	ldr	r3, [r7, #4]
 810a340:	4a17      	ldr	r2, [pc, #92]	@ (810a3a0 <HAL_GPIO_Init+0x264>)
 810a342:	4293      	cmp	r3, r2
 810a344:	d101      	bne.n	810a34a <HAL_GPIO_Init+0x20e>
 810a346:	2309      	movs	r3, #9
 810a348:	e02d      	b.n	810a3a6 <HAL_GPIO_Init+0x26a>
 810a34a:	230a      	movs	r3, #10
 810a34c:	e02b      	b.n	810a3a6 <HAL_GPIO_Init+0x26a>
 810a34e:	2308      	movs	r3, #8
 810a350:	e029      	b.n	810a3a6 <HAL_GPIO_Init+0x26a>
 810a352:	2307      	movs	r3, #7
 810a354:	e027      	b.n	810a3a6 <HAL_GPIO_Init+0x26a>
 810a356:	2306      	movs	r3, #6
 810a358:	e025      	b.n	810a3a6 <HAL_GPIO_Init+0x26a>
 810a35a:	2305      	movs	r3, #5
 810a35c:	e023      	b.n	810a3a6 <HAL_GPIO_Init+0x26a>
 810a35e:	2304      	movs	r3, #4
 810a360:	e021      	b.n	810a3a6 <HAL_GPIO_Init+0x26a>
 810a362:	2303      	movs	r3, #3
 810a364:	e01f      	b.n	810a3a6 <HAL_GPIO_Init+0x26a>
 810a366:	2302      	movs	r3, #2
 810a368:	e01d      	b.n	810a3a6 <HAL_GPIO_Init+0x26a>
 810a36a:	2301      	movs	r3, #1
 810a36c:	e01b      	b.n	810a3a6 <HAL_GPIO_Init+0x26a>
 810a36e:	bf00      	nop
 810a370:	580000c0 	.word	0x580000c0
 810a374:	58024400 	.word	0x58024400
 810a378:	58000400 	.word	0x58000400
 810a37c:	58020000 	.word	0x58020000
 810a380:	58020400 	.word	0x58020400
 810a384:	58020800 	.word	0x58020800
 810a388:	58020c00 	.word	0x58020c00
 810a38c:	58021000 	.word	0x58021000
 810a390:	58021400 	.word	0x58021400
 810a394:	58021800 	.word	0x58021800
 810a398:	58021c00 	.word	0x58021c00
 810a39c:	58022000 	.word	0x58022000
 810a3a0:	58022400 	.word	0x58022400
 810a3a4:	2300      	movs	r3, #0
 810a3a6:	69fa      	ldr	r2, [r7, #28]
 810a3a8:	f002 0203 	and.w	r2, r2, #3
 810a3ac:	0092      	lsls	r2, r2, #2
 810a3ae:	4093      	lsls	r3, r2
 810a3b0:	69ba      	ldr	r2, [r7, #24]
 810a3b2:	4313      	orrs	r3, r2
 810a3b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810a3b6:	4938      	ldr	r1, [pc, #224]	@ (810a498 <HAL_GPIO_Init+0x35c>)
 810a3b8:	69fb      	ldr	r3, [r7, #28]
 810a3ba:	089b      	lsrs	r3, r3, #2
 810a3bc:	3302      	adds	r3, #2
 810a3be:	69ba      	ldr	r2, [r7, #24]
 810a3c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810a3c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810a3c8:	681b      	ldr	r3, [r3, #0]
 810a3ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810a3cc:	693b      	ldr	r3, [r7, #16]
 810a3ce:	43db      	mvns	r3, r3
 810a3d0:	69ba      	ldr	r2, [r7, #24]
 810a3d2:	4013      	ands	r3, r2
 810a3d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810a3d6:	683b      	ldr	r3, [r7, #0]
 810a3d8:	685b      	ldr	r3, [r3, #4]
 810a3da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810a3de:	2b00      	cmp	r3, #0
 810a3e0:	d003      	beq.n	810a3ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810a3e2:	69ba      	ldr	r2, [r7, #24]
 810a3e4:	693b      	ldr	r3, [r7, #16]
 810a3e6:	4313      	orrs	r3, r2
 810a3e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810a3ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810a3ee:	69bb      	ldr	r3, [r7, #24]
 810a3f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810a3f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810a3f6:	685b      	ldr	r3, [r3, #4]
 810a3f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810a3fa:	693b      	ldr	r3, [r7, #16]
 810a3fc:	43db      	mvns	r3, r3
 810a3fe:	69ba      	ldr	r2, [r7, #24]
 810a400:	4013      	ands	r3, r2
 810a402:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810a404:	683b      	ldr	r3, [r7, #0]
 810a406:	685b      	ldr	r3, [r3, #4]
 810a408:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810a40c:	2b00      	cmp	r3, #0
 810a40e:	d003      	beq.n	810a418 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810a410:	69ba      	ldr	r2, [r7, #24]
 810a412:	693b      	ldr	r3, [r7, #16]
 810a414:	4313      	orrs	r3, r2
 810a416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810a418:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810a41c:	69bb      	ldr	r3, [r7, #24]
 810a41e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810a420:	697b      	ldr	r3, [r7, #20]
 810a422:	685b      	ldr	r3, [r3, #4]
 810a424:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810a426:	693b      	ldr	r3, [r7, #16]
 810a428:	43db      	mvns	r3, r3
 810a42a:	69ba      	ldr	r2, [r7, #24]
 810a42c:	4013      	ands	r3, r2
 810a42e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810a430:	683b      	ldr	r3, [r7, #0]
 810a432:	685b      	ldr	r3, [r3, #4]
 810a434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810a438:	2b00      	cmp	r3, #0
 810a43a:	d003      	beq.n	810a444 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810a43c:	69ba      	ldr	r2, [r7, #24]
 810a43e:	693b      	ldr	r3, [r7, #16]
 810a440:	4313      	orrs	r3, r2
 810a442:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810a444:	697b      	ldr	r3, [r7, #20]
 810a446:	69ba      	ldr	r2, [r7, #24]
 810a448:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810a44a:	697b      	ldr	r3, [r7, #20]
 810a44c:	681b      	ldr	r3, [r3, #0]
 810a44e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810a450:	693b      	ldr	r3, [r7, #16]
 810a452:	43db      	mvns	r3, r3
 810a454:	69ba      	ldr	r2, [r7, #24]
 810a456:	4013      	ands	r3, r2
 810a458:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810a45a:	683b      	ldr	r3, [r7, #0]
 810a45c:	685b      	ldr	r3, [r3, #4]
 810a45e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810a462:	2b00      	cmp	r3, #0
 810a464:	d003      	beq.n	810a46e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810a466:	69ba      	ldr	r2, [r7, #24]
 810a468:	693b      	ldr	r3, [r7, #16]
 810a46a:	4313      	orrs	r3, r2
 810a46c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810a46e:	697b      	ldr	r3, [r7, #20]
 810a470:	69ba      	ldr	r2, [r7, #24]
 810a472:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810a474:	69fb      	ldr	r3, [r7, #28]
 810a476:	3301      	adds	r3, #1
 810a478:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810a47a:	683b      	ldr	r3, [r7, #0]
 810a47c:	681a      	ldr	r2, [r3, #0]
 810a47e:	69fb      	ldr	r3, [r7, #28]
 810a480:	fa22 f303 	lsr.w	r3, r2, r3
 810a484:	2b00      	cmp	r3, #0
 810a486:	f47f ae63 	bne.w	810a150 <HAL_GPIO_Init+0x14>
  }
}
 810a48a:	bf00      	nop
 810a48c:	bf00      	nop
 810a48e:	3724      	adds	r7, #36	@ 0x24
 810a490:	46bd      	mov	sp, r7
 810a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a496:	4770      	bx	lr
 810a498:	58000400 	.word	0x58000400

0810a49c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 810a49c:	b480      	push	{r7}
 810a49e:	b087      	sub	sp, #28
 810a4a0:	af00      	add	r7, sp, #0
 810a4a2:	6078      	str	r0, [r7, #4]
 810a4a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810a4a6:	2300      	movs	r3, #0
 810a4a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810a4aa:	4b75      	ldr	r3, [pc, #468]	@ (810a680 <HAL_GPIO_DeInit+0x1e4>)
 810a4ac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 810a4ae:	e0d9      	b.n	810a664 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 810a4b0:	2201      	movs	r2, #1
 810a4b2:	697b      	ldr	r3, [r7, #20]
 810a4b4:	fa02 f303 	lsl.w	r3, r2, r3
 810a4b8:	683a      	ldr	r2, [r7, #0]
 810a4ba:	4013      	ands	r3, r2
 810a4bc:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 810a4be:	68fb      	ldr	r3, [r7, #12]
 810a4c0:	2b00      	cmp	r3, #0
 810a4c2:	f000 80cc 	beq.w	810a65e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 810a4c6:	4a6f      	ldr	r2, [pc, #444]	@ (810a684 <HAL_GPIO_DeInit+0x1e8>)
 810a4c8:	697b      	ldr	r3, [r7, #20]
 810a4ca:	089b      	lsrs	r3, r3, #2
 810a4cc:	3302      	adds	r3, #2
 810a4ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810a4d2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 810a4d4:	697b      	ldr	r3, [r7, #20]
 810a4d6:	f003 0303 	and.w	r3, r3, #3
 810a4da:	009b      	lsls	r3, r3, #2
 810a4dc:	220f      	movs	r2, #15
 810a4de:	fa02 f303 	lsl.w	r3, r2, r3
 810a4e2:	68ba      	ldr	r2, [r7, #8]
 810a4e4:	4013      	ands	r3, r2
 810a4e6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 810a4e8:	687b      	ldr	r3, [r7, #4]
 810a4ea:	4a67      	ldr	r2, [pc, #412]	@ (810a688 <HAL_GPIO_DeInit+0x1ec>)
 810a4ec:	4293      	cmp	r3, r2
 810a4ee:	d037      	beq.n	810a560 <HAL_GPIO_DeInit+0xc4>
 810a4f0:	687b      	ldr	r3, [r7, #4]
 810a4f2:	4a66      	ldr	r2, [pc, #408]	@ (810a68c <HAL_GPIO_DeInit+0x1f0>)
 810a4f4:	4293      	cmp	r3, r2
 810a4f6:	d031      	beq.n	810a55c <HAL_GPIO_DeInit+0xc0>
 810a4f8:	687b      	ldr	r3, [r7, #4]
 810a4fa:	4a65      	ldr	r2, [pc, #404]	@ (810a690 <HAL_GPIO_DeInit+0x1f4>)
 810a4fc:	4293      	cmp	r3, r2
 810a4fe:	d02b      	beq.n	810a558 <HAL_GPIO_DeInit+0xbc>
 810a500:	687b      	ldr	r3, [r7, #4]
 810a502:	4a64      	ldr	r2, [pc, #400]	@ (810a694 <HAL_GPIO_DeInit+0x1f8>)
 810a504:	4293      	cmp	r3, r2
 810a506:	d025      	beq.n	810a554 <HAL_GPIO_DeInit+0xb8>
 810a508:	687b      	ldr	r3, [r7, #4]
 810a50a:	4a63      	ldr	r2, [pc, #396]	@ (810a698 <HAL_GPIO_DeInit+0x1fc>)
 810a50c:	4293      	cmp	r3, r2
 810a50e:	d01f      	beq.n	810a550 <HAL_GPIO_DeInit+0xb4>
 810a510:	687b      	ldr	r3, [r7, #4]
 810a512:	4a62      	ldr	r2, [pc, #392]	@ (810a69c <HAL_GPIO_DeInit+0x200>)
 810a514:	4293      	cmp	r3, r2
 810a516:	d019      	beq.n	810a54c <HAL_GPIO_DeInit+0xb0>
 810a518:	687b      	ldr	r3, [r7, #4]
 810a51a:	4a61      	ldr	r2, [pc, #388]	@ (810a6a0 <HAL_GPIO_DeInit+0x204>)
 810a51c:	4293      	cmp	r3, r2
 810a51e:	d013      	beq.n	810a548 <HAL_GPIO_DeInit+0xac>
 810a520:	687b      	ldr	r3, [r7, #4]
 810a522:	4a60      	ldr	r2, [pc, #384]	@ (810a6a4 <HAL_GPIO_DeInit+0x208>)
 810a524:	4293      	cmp	r3, r2
 810a526:	d00d      	beq.n	810a544 <HAL_GPIO_DeInit+0xa8>
 810a528:	687b      	ldr	r3, [r7, #4]
 810a52a:	4a5f      	ldr	r2, [pc, #380]	@ (810a6a8 <HAL_GPIO_DeInit+0x20c>)
 810a52c:	4293      	cmp	r3, r2
 810a52e:	d007      	beq.n	810a540 <HAL_GPIO_DeInit+0xa4>
 810a530:	687b      	ldr	r3, [r7, #4]
 810a532:	4a5e      	ldr	r2, [pc, #376]	@ (810a6ac <HAL_GPIO_DeInit+0x210>)
 810a534:	4293      	cmp	r3, r2
 810a536:	d101      	bne.n	810a53c <HAL_GPIO_DeInit+0xa0>
 810a538:	2309      	movs	r3, #9
 810a53a:	e012      	b.n	810a562 <HAL_GPIO_DeInit+0xc6>
 810a53c:	230a      	movs	r3, #10
 810a53e:	e010      	b.n	810a562 <HAL_GPIO_DeInit+0xc6>
 810a540:	2308      	movs	r3, #8
 810a542:	e00e      	b.n	810a562 <HAL_GPIO_DeInit+0xc6>
 810a544:	2307      	movs	r3, #7
 810a546:	e00c      	b.n	810a562 <HAL_GPIO_DeInit+0xc6>
 810a548:	2306      	movs	r3, #6
 810a54a:	e00a      	b.n	810a562 <HAL_GPIO_DeInit+0xc6>
 810a54c:	2305      	movs	r3, #5
 810a54e:	e008      	b.n	810a562 <HAL_GPIO_DeInit+0xc6>
 810a550:	2304      	movs	r3, #4
 810a552:	e006      	b.n	810a562 <HAL_GPIO_DeInit+0xc6>
 810a554:	2303      	movs	r3, #3
 810a556:	e004      	b.n	810a562 <HAL_GPIO_DeInit+0xc6>
 810a558:	2302      	movs	r3, #2
 810a55a:	e002      	b.n	810a562 <HAL_GPIO_DeInit+0xc6>
 810a55c:	2301      	movs	r3, #1
 810a55e:	e000      	b.n	810a562 <HAL_GPIO_DeInit+0xc6>
 810a560:	2300      	movs	r3, #0
 810a562:	697a      	ldr	r2, [r7, #20]
 810a564:	f002 0203 	and.w	r2, r2, #3
 810a568:	0092      	lsls	r2, r2, #2
 810a56a:	4093      	lsls	r3, r2
 810a56c:	68ba      	ldr	r2, [r7, #8]
 810a56e:	429a      	cmp	r2, r3
 810a570:	d136      	bne.n	810a5e0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 810a572:	693b      	ldr	r3, [r7, #16]
 810a574:	681a      	ldr	r2, [r3, #0]
 810a576:	68fb      	ldr	r3, [r7, #12]
 810a578:	43db      	mvns	r3, r3
 810a57a:	401a      	ands	r2, r3
 810a57c:	693b      	ldr	r3, [r7, #16]
 810a57e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 810a580:	693b      	ldr	r3, [r7, #16]
 810a582:	685a      	ldr	r2, [r3, #4]
 810a584:	68fb      	ldr	r3, [r7, #12]
 810a586:	43db      	mvns	r3, r3
 810a588:	401a      	ands	r2, r3
 810a58a:	693b      	ldr	r3, [r7, #16]
 810a58c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 810a58e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810a592:	685a      	ldr	r2, [r3, #4]
 810a594:	68fb      	ldr	r3, [r7, #12]
 810a596:	43db      	mvns	r3, r3
 810a598:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 810a59c:	4013      	ands	r3, r2
 810a59e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 810a5a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810a5a4:	681a      	ldr	r2, [r3, #0]
 810a5a6:	68fb      	ldr	r3, [r7, #12]
 810a5a8:	43db      	mvns	r3, r3
 810a5aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 810a5ae:	4013      	ands	r3, r2
 810a5b0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 810a5b2:	697b      	ldr	r3, [r7, #20]
 810a5b4:	f003 0303 	and.w	r3, r3, #3
 810a5b8:	009b      	lsls	r3, r3, #2
 810a5ba:	220f      	movs	r2, #15
 810a5bc:	fa02 f303 	lsl.w	r3, r2, r3
 810a5c0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 810a5c2:	4a30      	ldr	r2, [pc, #192]	@ (810a684 <HAL_GPIO_DeInit+0x1e8>)
 810a5c4:	697b      	ldr	r3, [r7, #20]
 810a5c6:	089b      	lsrs	r3, r3, #2
 810a5c8:	3302      	adds	r3, #2
 810a5ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 810a5ce:	68bb      	ldr	r3, [r7, #8]
 810a5d0:	43da      	mvns	r2, r3
 810a5d2:	482c      	ldr	r0, [pc, #176]	@ (810a684 <HAL_GPIO_DeInit+0x1e8>)
 810a5d4:	697b      	ldr	r3, [r7, #20]
 810a5d6:	089b      	lsrs	r3, r3, #2
 810a5d8:	400a      	ands	r2, r1
 810a5da:	3302      	adds	r3, #2
 810a5dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 810a5e0:	687b      	ldr	r3, [r7, #4]
 810a5e2:	681a      	ldr	r2, [r3, #0]
 810a5e4:	697b      	ldr	r3, [r7, #20]
 810a5e6:	005b      	lsls	r3, r3, #1
 810a5e8:	2103      	movs	r1, #3
 810a5ea:	fa01 f303 	lsl.w	r3, r1, r3
 810a5ee:	431a      	orrs	r2, r3
 810a5f0:	687b      	ldr	r3, [r7, #4]
 810a5f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 810a5f4:	697b      	ldr	r3, [r7, #20]
 810a5f6:	08da      	lsrs	r2, r3, #3
 810a5f8:	687b      	ldr	r3, [r7, #4]
 810a5fa:	3208      	adds	r2, #8
 810a5fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810a600:	697b      	ldr	r3, [r7, #20]
 810a602:	f003 0307 	and.w	r3, r3, #7
 810a606:	009b      	lsls	r3, r3, #2
 810a608:	220f      	movs	r2, #15
 810a60a:	fa02 f303 	lsl.w	r3, r2, r3
 810a60e:	43db      	mvns	r3, r3
 810a610:	697a      	ldr	r2, [r7, #20]
 810a612:	08d2      	lsrs	r2, r2, #3
 810a614:	4019      	ands	r1, r3
 810a616:	687b      	ldr	r3, [r7, #4]
 810a618:	3208      	adds	r2, #8
 810a61a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810a61e:	687b      	ldr	r3, [r7, #4]
 810a620:	68da      	ldr	r2, [r3, #12]
 810a622:	697b      	ldr	r3, [r7, #20]
 810a624:	005b      	lsls	r3, r3, #1
 810a626:	2103      	movs	r1, #3
 810a628:	fa01 f303 	lsl.w	r3, r1, r3
 810a62c:	43db      	mvns	r3, r3
 810a62e:	401a      	ands	r2, r3
 810a630:	687b      	ldr	r3, [r7, #4]
 810a632:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 810a634:	687b      	ldr	r3, [r7, #4]
 810a636:	685a      	ldr	r2, [r3, #4]
 810a638:	2101      	movs	r1, #1
 810a63a:	697b      	ldr	r3, [r7, #20]
 810a63c:	fa01 f303 	lsl.w	r3, r1, r3
 810a640:	43db      	mvns	r3, r3
 810a642:	401a      	ands	r2, r3
 810a644:	687b      	ldr	r3, [r7, #4]
 810a646:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810a648:	687b      	ldr	r3, [r7, #4]
 810a64a:	689a      	ldr	r2, [r3, #8]
 810a64c:	697b      	ldr	r3, [r7, #20]
 810a64e:	005b      	lsls	r3, r3, #1
 810a650:	2103      	movs	r1, #3
 810a652:	fa01 f303 	lsl.w	r3, r1, r3
 810a656:	43db      	mvns	r3, r3
 810a658:	401a      	ands	r2, r3
 810a65a:	687b      	ldr	r3, [r7, #4]
 810a65c:	609a      	str	r2, [r3, #8]
    }

    position++;
 810a65e:	697b      	ldr	r3, [r7, #20]
 810a660:	3301      	adds	r3, #1
 810a662:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 810a664:	683a      	ldr	r2, [r7, #0]
 810a666:	697b      	ldr	r3, [r7, #20]
 810a668:	fa22 f303 	lsr.w	r3, r2, r3
 810a66c:	2b00      	cmp	r3, #0
 810a66e:	f47f af1f 	bne.w	810a4b0 <HAL_GPIO_DeInit+0x14>
  }
}
 810a672:	bf00      	nop
 810a674:	bf00      	nop
 810a676:	371c      	adds	r7, #28
 810a678:	46bd      	mov	sp, r7
 810a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a67e:	4770      	bx	lr
 810a680:	580000c0 	.word	0x580000c0
 810a684:	58000400 	.word	0x58000400
 810a688:	58020000 	.word	0x58020000
 810a68c:	58020400 	.word	0x58020400
 810a690:	58020800 	.word	0x58020800
 810a694:	58020c00 	.word	0x58020c00
 810a698:	58021000 	.word	0x58021000
 810a69c:	58021400 	.word	0x58021400
 810a6a0:	58021800 	.word	0x58021800
 810a6a4:	58021c00 	.word	0x58021c00
 810a6a8:	58022000 	.word	0x58022000
 810a6ac:	58022400 	.word	0x58022400

0810a6b0 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 810a6b0:	b480      	push	{r7}
 810a6b2:	b083      	sub	sp, #12
 810a6b4:	af00      	add	r7, sp, #0
 810a6b6:	6078      	str	r0, [r7, #4]
 810a6b8:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 810a6ba:	490e      	ldr	r1, [pc, #56]	@ (810a6f4 <HAL_HSEM_Take+0x44>)
 810a6bc:	683b      	ldr	r3, [r7, #0]
 810a6be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810a6c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810a6c6:	687a      	ldr	r2, [r7, #4]
 810a6c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 810a6cc:	4a09      	ldr	r2, [pc, #36]	@ (810a6f4 <HAL_HSEM_Take+0x44>)
 810a6ce:	687b      	ldr	r3, [r7, #4]
 810a6d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 810a6d4:	683b      	ldr	r3, [r7, #0]
 810a6d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810a6da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810a6de:	429a      	cmp	r2, r3
 810a6e0:	d101      	bne.n	810a6e6 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 810a6e2:	2300      	movs	r3, #0
 810a6e4:	e000      	b.n	810a6e8 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 810a6e6:	2301      	movs	r3, #1
}
 810a6e8:	4618      	mov	r0, r3
 810a6ea:	370c      	adds	r7, #12
 810a6ec:	46bd      	mov	sp, r7
 810a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6f2:	4770      	bx	lr
 810a6f4:	58026400 	.word	0x58026400

0810a6f8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 810a6f8:	b480      	push	{r7}
 810a6fa:	b083      	sub	sp, #12
 810a6fc:	af00      	add	r7, sp, #0
 810a6fe:	6078      	str	r0, [r7, #4]
 810a700:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 810a702:	4906      	ldr	r1, [pc, #24]	@ (810a71c <HAL_HSEM_Release+0x24>)
 810a704:	683b      	ldr	r3, [r7, #0]
 810a706:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810a70a:	687b      	ldr	r3, [r7, #4]
 810a70c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 810a710:	bf00      	nop
 810a712:	370c      	adds	r7, #12
 810a714:	46bd      	mov	sp, r7
 810a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a71a:	4770      	bx	lr
 810a71c:	58026400 	.word	0x58026400

0810a720 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810a720:	b480      	push	{r7}
 810a722:	b083      	sub	sp, #12
 810a724:	af00      	add	r7, sp, #0
 810a726:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810a728:	4b05      	ldr	r3, [pc, #20]	@ (810a740 <HAL_HSEM_ActivateNotification+0x20>)
 810a72a:	681a      	ldr	r2, [r3, #0]
 810a72c:	4904      	ldr	r1, [pc, #16]	@ (810a740 <HAL_HSEM_ActivateNotification+0x20>)
 810a72e:	687b      	ldr	r3, [r7, #4]
 810a730:	4313      	orrs	r3, r2
 810a732:	600b      	str	r3, [r1, #0]
#endif
}
 810a734:	bf00      	nop
 810a736:	370c      	adds	r7, #12
 810a738:	46bd      	mov	sp, r7
 810a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a73e:	4770      	bx	lr
 810a740:	58026510 	.word	0x58026510

0810a744 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 810a744:	b580      	push	{r7, lr}
 810a746:	b082      	sub	sp, #8
 810a748:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 810a74a:	4b0a      	ldr	r3, [pc, #40]	@ (810a774 <HAL_HSEM_IRQHandler+0x30>)
 810a74c:	68db      	ldr	r3, [r3, #12]
 810a74e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 810a750:	4b08      	ldr	r3, [pc, #32]	@ (810a774 <HAL_HSEM_IRQHandler+0x30>)
 810a752:	681a      	ldr	r2, [r3, #0]
 810a754:	687b      	ldr	r3, [r7, #4]
 810a756:	43db      	mvns	r3, r3
 810a758:	4906      	ldr	r1, [pc, #24]	@ (810a774 <HAL_HSEM_IRQHandler+0x30>)
 810a75a:	4013      	ands	r3, r2
 810a75c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810a75e:	4a05      	ldr	r2, [pc, #20]	@ (810a774 <HAL_HSEM_IRQHandler+0x30>)
 810a760:	687b      	ldr	r3, [r7, #4]
 810a762:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 810a764:	6878      	ldr	r0, [r7, #4]
 810a766:	f7f5 fe83 	bl	8100470 <HAL_HSEM_FreeCallback>
}
 810a76a:	bf00      	nop
 810a76c:	3708      	adds	r7, #8
 810a76e:	46bd      	mov	sp, r7
 810a770:	bd80      	pop	{r7, pc}
 810a772:	bf00      	nop
 810a774:	58026510 	.word	0x58026510

0810a778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 810a778:	b580      	push	{r7, lr}
 810a77a:	b082      	sub	sp, #8
 810a77c:	af00      	add	r7, sp, #0
 810a77e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810a780:	687b      	ldr	r3, [r7, #4]
 810a782:	2b00      	cmp	r3, #0
 810a784:	d101      	bne.n	810a78a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810a786:	2301      	movs	r3, #1
 810a788:	e08d      	b.n	810a8a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810a78a:	687b      	ldr	r3, [r7, #4]
 810a78c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810a790:	b2db      	uxtb	r3, r3
 810a792:	2b00      	cmp	r3, #0
 810a794:	d106      	bne.n	810a7a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810a796:	687b      	ldr	r3, [r7, #4]
 810a798:	2200      	movs	r2, #0
 810a79a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810a79e:	6878      	ldr	r0, [r7, #4]
 810a7a0:	f7f6 f976 	bl	8100a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810a7a4:	687b      	ldr	r3, [r7, #4]
 810a7a6:	2224      	movs	r2, #36	@ 0x24
 810a7a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810a7ac:	687b      	ldr	r3, [r7, #4]
 810a7ae:	681b      	ldr	r3, [r3, #0]
 810a7b0:	681a      	ldr	r2, [r3, #0]
 810a7b2:	687b      	ldr	r3, [r7, #4]
 810a7b4:	681b      	ldr	r3, [r3, #0]
 810a7b6:	f022 0201 	bic.w	r2, r2, #1
 810a7ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 810a7bc:	687b      	ldr	r3, [r7, #4]
 810a7be:	685a      	ldr	r2, [r3, #4]
 810a7c0:	687b      	ldr	r3, [r7, #4]
 810a7c2:	681b      	ldr	r3, [r3, #0]
 810a7c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 810a7c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810a7ca:	687b      	ldr	r3, [r7, #4]
 810a7cc:	681b      	ldr	r3, [r3, #0]
 810a7ce:	689a      	ldr	r2, [r3, #8]
 810a7d0:	687b      	ldr	r3, [r7, #4]
 810a7d2:	681b      	ldr	r3, [r3, #0]
 810a7d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810a7d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810a7da:	687b      	ldr	r3, [r7, #4]
 810a7dc:	68db      	ldr	r3, [r3, #12]
 810a7de:	2b01      	cmp	r3, #1
 810a7e0:	d107      	bne.n	810a7f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810a7e2:	687b      	ldr	r3, [r7, #4]
 810a7e4:	689a      	ldr	r2, [r3, #8]
 810a7e6:	687b      	ldr	r3, [r7, #4]
 810a7e8:	681b      	ldr	r3, [r3, #0]
 810a7ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810a7ee:	609a      	str	r2, [r3, #8]
 810a7f0:	e006      	b.n	810a800 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810a7f2:	687b      	ldr	r3, [r7, #4]
 810a7f4:	689a      	ldr	r2, [r3, #8]
 810a7f6:	687b      	ldr	r3, [r7, #4]
 810a7f8:	681b      	ldr	r3, [r3, #0]
 810a7fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 810a7fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810a800:	687b      	ldr	r3, [r7, #4]
 810a802:	68db      	ldr	r3, [r3, #12]
 810a804:	2b02      	cmp	r3, #2
 810a806:	d108      	bne.n	810a81a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 810a808:	687b      	ldr	r3, [r7, #4]
 810a80a:	681b      	ldr	r3, [r3, #0]
 810a80c:	685a      	ldr	r2, [r3, #4]
 810a80e:	687b      	ldr	r3, [r7, #4]
 810a810:	681b      	ldr	r3, [r3, #0]
 810a812:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810a816:	605a      	str	r2, [r3, #4]
 810a818:	e007      	b.n	810a82a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 810a81a:	687b      	ldr	r3, [r7, #4]
 810a81c:	681b      	ldr	r3, [r3, #0]
 810a81e:	685a      	ldr	r2, [r3, #4]
 810a820:	687b      	ldr	r3, [r7, #4]
 810a822:	681b      	ldr	r3, [r3, #0]
 810a824:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 810a828:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810a82a:	687b      	ldr	r3, [r7, #4]
 810a82c:	681b      	ldr	r3, [r3, #0]
 810a82e:	685b      	ldr	r3, [r3, #4]
 810a830:	687a      	ldr	r2, [r7, #4]
 810a832:	6812      	ldr	r2, [r2, #0]
 810a834:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810a838:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810a83c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810a83e:	687b      	ldr	r3, [r7, #4]
 810a840:	681b      	ldr	r3, [r3, #0]
 810a842:	68da      	ldr	r2, [r3, #12]
 810a844:	687b      	ldr	r3, [r7, #4]
 810a846:	681b      	ldr	r3, [r3, #0]
 810a848:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810a84c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810a84e:	687b      	ldr	r3, [r7, #4]
 810a850:	691a      	ldr	r2, [r3, #16]
 810a852:	687b      	ldr	r3, [r7, #4]
 810a854:	695b      	ldr	r3, [r3, #20]
 810a856:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 810a85a:	687b      	ldr	r3, [r7, #4]
 810a85c:	699b      	ldr	r3, [r3, #24]
 810a85e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810a860:	687b      	ldr	r3, [r7, #4]
 810a862:	681b      	ldr	r3, [r3, #0]
 810a864:	430a      	orrs	r2, r1
 810a866:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810a868:	687b      	ldr	r3, [r7, #4]
 810a86a:	69d9      	ldr	r1, [r3, #28]
 810a86c:	687b      	ldr	r3, [r7, #4]
 810a86e:	6a1a      	ldr	r2, [r3, #32]
 810a870:	687b      	ldr	r3, [r7, #4]
 810a872:	681b      	ldr	r3, [r3, #0]
 810a874:	430a      	orrs	r2, r1
 810a876:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 810a878:	687b      	ldr	r3, [r7, #4]
 810a87a:	681b      	ldr	r3, [r3, #0]
 810a87c:	681a      	ldr	r2, [r3, #0]
 810a87e:	687b      	ldr	r3, [r7, #4]
 810a880:	681b      	ldr	r3, [r3, #0]
 810a882:	f042 0201 	orr.w	r2, r2, #1
 810a886:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810a888:	687b      	ldr	r3, [r7, #4]
 810a88a:	2200      	movs	r2, #0
 810a88c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810a88e:	687b      	ldr	r3, [r7, #4]
 810a890:	2220      	movs	r2, #32
 810a892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810a896:	687b      	ldr	r3, [r7, #4]
 810a898:	2200      	movs	r2, #0
 810a89a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810a89c:	687b      	ldr	r3, [r7, #4]
 810a89e:	2200      	movs	r2, #0
 810a8a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 810a8a4:	2300      	movs	r3, #0
}
 810a8a6:	4618      	mov	r0, r3
 810a8a8:	3708      	adds	r7, #8
 810a8aa:	46bd      	mov	sp, r7
 810a8ac:	bd80      	pop	{r7, pc}

0810a8ae <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 810a8ae:	b580      	push	{r7, lr}
 810a8b0:	b082      	sub	sp, #8
 810a8b2:	af00      	add	r7, sp, #0
 810a8b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810a8b6:	687b      	ldr	r3, [r7, #4]
 810a8b8:	2b00      	cmp	r3, #0
 810a8ba:	d101      	bne.n	810a8c0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 810a8bc:	2301      	movs	r3, #1
 810a8be:	e021      	b.n	810a904 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 810a8c0:	687b      	ldr	r3, [r7, #4]
 810a8c2:	2224      	movs	r2, #36	@ 0x24
 810a8c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 810a8c8:	687b      	ldr	r3, [r7, #4]
 810a8ca:	681b      	ldr	r3, [r3, #0]
 810a8cc:	681a      	ldr	r2, [r3, #0]
 810a8ce:	687b      	ldr	r3, [r7, #4]
 810a8d0:	681b      	ldr	r3, [r3, #0]
 810a8d2:	f022 0201 	bic.w	r2, r2, #1
 810a8d6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 810a8d8:	6878      	ldr	r0, [r7, #4]
 810a8da:	f7f6 f943 	bl	8100b64 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810a8de:	687b      	ldr	r3, [r7, #4]
 810a8e0:	2200      	movs	r2, #0
 810a8e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 810a8e4:	687b      	ldr	r3, [r7, #4]
 810a8e6:	2200      	movs	r2, #0
 810a8e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810a8ec:	687b      	ldr	r3, [r7, #4]
 810a8ee:	2200      	movs	r2, #0
 810a8f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810a8f2:	687b      	ldr	r3, [r7, #4]
 810a8f4:	2200      	movs	r2, #0
 810a8f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 810a8fa:	687b      	ldr	r3, [r7, #4]
 810a8fc:	2200      	movs	r2, #0
 810a8fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 810a902:	2300      	movs	r3, #0
}
 810a904:	4618      	mov	r0, r3
 810a906:	3708      	adds	r7, #8
 810a908:	46bd      	mov	sp, r7
 810a90a:	bd80      	pop	{r7, pc}

0810a90c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810a90c:	b580      	push	{r7, lr}
 810a90e:	b088      	sub	sp, #32
 810a910:	af02      	add	r7, sp, #8
 810a912:	60f8      	str	r0, [r7, #12]
 810a914:	4608      	mov	r0, r1
 810a916:	4611      	mov	r1, r2
 810a918:	461a      	mov	r2, r3
 810a91a:	4603      	mov	r3, r0
 810a91c:	817b      	strh	r3, [r7, #10]
 810a91e:	460b      	mov	r3, r1
 810a920:	813b      	strh	r3, [r7, #8]
 810a922:	4613      	mov	r3, r2
 810a924:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810a926:	68fb      	ldr	r3, [r7, #12]
 810a928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810a92c:	b2db      	uxtb	r3, r3
 810a92e:	2b20      	cmp	r3, #32
 810a930:	f040 80fd 	bne.w	810ab2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 810a934:	6a3b      	ldr	r3, [r7, #32]
 810a936:	2b00      	cmp	r3, #0
 810a938:	d002      	beq.n	810a940 <HAL_I2C_Mem_Read+0x34>
 810a93a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810a93c:	2b00      	cmp	r3, #0
 810a93e:	d105      	bne.n	810a94c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 810a940:	68fb      	ldr	r3, [r7, #12]
 810a942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810a946:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 810a948:	2301      	movs	r3, #1
 810a94a:	e0f1      	b.n	810ab30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810a94c:	68fb      	ldr	r3, [r7, #12]
 810a94e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810a952:	2b01      	cmp	r3, #1
 810a954:	d101      	bne.n	810a95a <HAL_I2C_Mem_Read+0x4e>
 810a956:	2302      	movs	r3, #2
 810a958:	e0ea      	b.n	810ab30 <HAL_I2C_Mem_Read+0x224>
 810a95a:	68fb      	ldr	r3, [r7, #12]
 810a95c:	2201      	movs	r2, #1
 810a95e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810a962:	f7fd fd59 	bl	8108418 <HAL_GetTick>
 810a966:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810a968:	697b      	ldr	r3, [r7, #20]
 810a96a:	9300      	str	r3, [sp, #0]
 810a96c:	2319      	movs	r3, #25
 810a96e:	2201      	movs	r2, #1
 810a970:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810a974:	68f8      	ldr	r0, [r7, #12]
 810a976:	f000 f967 	bl	810ac48 <I2C_WaitOnFlagUntilTimeout>
 810a97a:	4603      	mov	r3, r0
 810a97c:	2b00      	cmp	r3, #0
 810a97e:	d001      	beq.n	810a984 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 810a980:	2301      	movs	r3, #1
 810a982:	e0d5      	b.n	810ab30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 810a984:	68fb      	ldr	r3, [r7, #12]
 810a986:	2222      	movs	r2, #34	@ 0x22
 810a988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 810a98c:	68fb      	ldr	r3, [r7, #12]
 810a98e:	2240      	movs	r2, #64	@ 0x40
 810a990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810a994:	68fb      	ldr	r3, [r7, #12]
 810a996:	2200      	movs	r2, #0
 810a998:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810a99a:	68fb      	ldr	r3, [r7, #12]
 810a99c:	6a3a      	ldr	r2, [r7, #32]
 810a99e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 810a9a0:	68fb      	ldr	r3, [r7, #12]
 810a9a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 810a9a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 810a9a6:	68fb      	ldr	r3, [r7, #12]
 810a9a8:	2200      	movs	r2, #0
 810a9aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810a9ac:	88f8      	ldrh	r0, [r7, #6]
 810a9ae:	893a      	ldrh	r2, [r7, #8]
 810a9b0:	8979      	ldrh	r1, [r7, #10]
 810a9b2:	697b      	ldr	r3, [r7, #20]
 810a9b4:	9301      	str	r3, [sp, #4]
 810a9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a9b8:	9300      	str	r3, [sp, #0]
 810a9ba:	4603      	mov	r3, r0
 810a9bc:	68f8      	ldr	r0, [r7, #12]
 810a9be:	f000 f8cb 	bl	810ab58 <I2C_RequestMemoryRead>
 810a9c2:	4603      	mov	r3, r0
 810a9c4:	2b00      	cmp	r3, #0
 810a9c6:	d005      	beq.n	810a9d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810a9c8:	68fb      	ldr	r3, [r7, #12]
 810a9ca:	2200      	movs	r2, #0
 810a9cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 810a9d0:	2301      	movs	r3, #1
 810a9d2:	e0ad      	b.n	810ab30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810a9d4:	68fb      	ldr	r3, [r7, #12]
 810a9d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810a9d8:	b29b      	uxth	r3, r3
 810a9da:	2bff      	cmp	r3, #255	@ 0xff
 810a9dc:	d90e      	bls.n	810a9fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810a9de:	68fb      	ldr	r3, [r7, #12]
 810a9e0:	22ff      	movs	r2, #255	@ 0xff
 810a9e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810a9e4:	68fb      	ldr	r3, [r7, #12]
 810a9e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810a9e8:	b2da      	uxtb	r2, r3
 810a9ea:	8979      	ldrh	r1, [r7, #10]
 810a9ec:	4b52      	ldr	r3, [pc, #328]	@ (810ab38 <HAL_I2C_Mem_Read+0x22c>)
 810a9ee:	9300      	str	r3, [sp, #0]
 810a9f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810a9f4:	68f8      	ldr	r0, [r7, #12]
 810a9f6:	f000 faeb 	bl	810afd0 <I2C_TransferConfig>
 810a9fa:	e00f      	b.n	810aa1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810a9fc:	68fb      	ldr	r3, [r7, #12]
 810a9fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810aa00:	b29a      	uxth	r2, r3
 810aa02:	68fb      	ldr	r3, [r7, #12]
 810aa04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810aa06:	68fb      	ldr	r3, [r7, #12]
 810aa08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810aa0a:	b2da      	uxtb	r2, r3
 810aa0c:	8979      	ldrh	r1, [r7, #10]
 810aa0e:	4b4a      	ldr	r3, [pc, #296]	@ (810ab38 <HAL_I2C_Mem_Read+0x22c>)
 810aa10:	9300      	str	r3, [sp, #0]
 810aa12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810aa16:	68f8      	ldr	r0, [r7, #12]
 810aa18:	f000 fada 	bl	810afd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 810aa1c:	697b      	ldr	r3, [r7, #20]
 810aa1e:	9300      	str	r3, [sp, #0]
 810aa20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810aa22:	2200      	movs	r2, #0
 810aa24:	2104      	movs	r1, #4
 810aa26:	68f8      	ldr	r0, [r7, #12]
 810aa28:	f000 f90e 	bl	810ac48 <I2C_WaitOnFlagUntilTimeout>
 810aa2c:	4603      	mov	r3, r0
 810aa2e:	2b00      	cmp	r3, #0
 810aa30:	d001      	beq.n	810aa36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 810aa32:	2301      	movs	r3, #1
 810aa34:	e07c      	b.n	810ab30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810aa36:	68fb      	ldr	r3, [r7, #12]
 810aa38:	681b      	ldr	r3, [r3, #0]
 810aa3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810aa3c:	68fb      	ldr	r3, [r7, #12]
 810aa3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810aa40:	b2d2      	uxtb	r2, r2
 810aa42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810aa44:	68fb      	ldr	r3, [r7, #12]
 810aa46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810aa48:	1c5a      	adds	r2, r3, #1
 810aa4a:	68fb      	ldr	r3, [r7, #12]
 810aa4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 810aa4e:	68fb      	ldr	r3, [r7, #12]
 810aa50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810aa52:	3b01      	subs	r3, #1
 810aa54:	b29a      	uxth	r2, r3
 810aa56:	68fb      	ldr	r3, [r7, #12]
 810aa58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 810aa5a:	68fb      	ldr	r3, [r7, #12]
 810aa5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810aa5e:	b29b      	uxth	r3, r3
 810aa60:	3b01      	subs	r3, #1
 810aa62:	b29a      	uxth	r2, r3
 810aa64:	68fb      	ldr	r3, [r7, #12]
 810aa66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810aa68:	68fb      	ldr	r3, [r7, #12]
 810aa6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810aa6c:	b29b      	uxth	r3, r3
 810aa6e:	2b00      	cmp	r3, #0
 810aa70:	d034      	beq.n	810aadc <HAL_I2C_Mem_Read+0x1d0>
 810aa72:	68fb      	ldr	r3, [r7, #12]
 810aa74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810aa76:	2b00      	cmp	r3, #0
 810aa78:	d130      	bne.n	810aadc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810aa7a:	697b      	ldr	r3, [r7, #20]
 810aa7c:	9300      	str	r3, [sp, #0]
 810aa7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810aa80:	2200      	movs	r2, #0
 810aa82:	2180      	movs	r1, #128	@ 0x80
 810aa84:	68f8      	ldr	r0, [r7, #12]
 810aa86:	f000 f8df 	bl	810ac48 <I2C_WaitOnFlagUntilTimeout>
 810aa8a:	4603      	mov	r3, r0
 810aa8c:	2b00      	cmp	r3, #0
 810aa8e:	d001      	beq.n	810aa94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 810aa90:	2301      	movs	r3, #1
 810aa92:	e04d      	b.n	810ab30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810aa94:	68fb      	ldr	r3, [r7, #12]
 810aa96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810aa98:	b29b      	uxth	r3, r3
 810aa9a:	2bff      	cmp	r3, #255	@ 0xff
 810aa9c:	d90e      	bls.n	810aabc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810aa9e:	68fb      	ldr	r3, [r7, #12]
 810aaa0:	22ff      	movs	r2, #255	@ 0xff
 810aaa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 810aaa4:	68fb      	ldr	r3, [r7, #12]
 810aaa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810aaa8:	b2da      	uxtb	r2, r3
 810aaaa:	8979      	ldrh	r1, [r7, #10]
 810aaac:	2300      	movs	r3, #0
 810aaae:	9300      	str	r3, [sp, #0]
 810aab0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810aab4:	68f8      	ldr	r0, [r7, #12]
 810aab6:	f000 fa8b 	bl	810afd0 <I2C_TransferConfig>
 810aaba:	e00f      	b.n	810aadc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810aabc:	68fb      	ldr	r3, [r7, #12]
 810aabe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810aac0:	b29a      	uxth	r2, r3
 810aac2:	68fb      	ldr	r3, [r7, #12]
 810aac4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810aac6:	68fb      	ldr	r3, [r7, #12]
 810aac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810aaca:	b2da      	uxtb	r2, r3
 810aacc:	8979      	ldrh	r1, [r7, #10]
 810aace:	2300      	movs	r3, #0
 810aad0:	9300      	str	r3, [sp, #0]
 810aad2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810aad6:	68f8      	ldr	r0, [r7, #12]
 810aad8:	f000 fa7a 	bl	810afd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 810aadc:	68fb      	ldr	r3, [r7, #12]
 810aade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810aae0:	b29b      	uxth	r3, r3
 810aae2:	2b00      	cmp	r3, #0
 810aae4:	d19a      	bne.n	810aa1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810aae6:	697a      	ldr	r2, [r7, #20]
 810aae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810aaea:	68f8      	ldr	r0, [r7, #12]
 810aaec:	f000 f94c 	bl	810ad88 <I2C_WaitOnSTOPFlagUntilTimeout>
 810aaf0:	4603      	mov	r3, r0
 810aaf2:	2b00      	cmp	r3, #0
 810aaf4:	d001      	beq.n	810aafa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810aaf6:	2301      	movs	r3, #1
 810aaf8:	e01a      	b.n	810ab30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810aafa:	68fb      	ldr	r3, [r7, #12]
 810aafc:	681b      	ldr	r3, [r3, #0]
 810aafe:	2220      	movs	r2, #32
 810ab00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810ab02:	68fb      	ldr	r3, [r7, #12]
 810ab04:	681b      	ldr	r3, [r3, #0]
 810ab06:	6859      	ldr	r1, [r3, #4]
 810ab08:	68fb      	ldr	r3, [r7, #12]
 810ab0a:	681a      	ldr	r2, [r3, #0]
 810ab0c:	4b0b      	ldr	r3, [pc, #44]	@ (810ab3c <HAL_I2C_Mem_Read+0x230>)
 810ab0e:	400b      	ands	r3, r1
 810ab10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810ab12:	68fb      	ldr	r3, [r7, #12]
 810ab14:	2220      	movs	r2, #32
 810ab16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810ab1a:	68fb      	ldr	r3, [r7, #12]
 810ab1c:	2200      	movs	r2, #0
 810ab1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810ab22:	68fb      	ldr	r3, [r7, #12]
 810ab24:	2200      	movs	r2, #0
 810ab26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810ab2a:	2300      	movs	r3, #0
 810ab2c:	e000      	b.n	810ab30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 810ab2e:	2302      	movs	r3, #2
  }
}
 810ab30:	4618      	mov	r0, r3
 810ab32:	3718      	adds	r7, #24
 810ab34:	46bd      	mov	sp, r7
 810ab36:	bd80      	pop	{r7, pc}
 810ab38:	80002400 	.word	0x80002400
 810ab3c:	fe00e800 	.word	0xfe00e800

0810ab40 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 810ab40:	b480      	push	{r7}
 810ab42:	b083      	sub	sp, #12
 810ab44:	af00      	add	r7, sp, #0
 810ab46:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 810ab48:	687b      	ldr	r3, [r7, #4]
 810ab4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 810ab4c:	4618      	mov	r0, r3
 810ab4e:	370c      	adds	r7, #12
 810ab50:	46bd      	mov	sp, r7
 810ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab56:	4770      	bx	lr

0810ab58 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 810ab58:	b580      	push	{r7, lr}
 810ab5a:	b086      	sub	sp, #24
 810ab5c:	af02      	add	r7, sp, #8
 810ab5e:	60f8      	str	r0, [r7, #12]
 810ab60:	4608      	mov	r0, r1
 810ab62:	4611      	mov	r1, r2
 810ab64:	461a      	mov	r2, r3
 810ab66:	4603      	mov	r3, r0
 810ab68:	817b      	strh	r3, [r7, #10]
 810ab6a:	460b      	mov	r3, r1
 810ab6c:	813b      	strh	r3, [r7, #8]
 810ab6e:	4613      	mov	r3, r2
 810ab70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810ab72:	88fb      	ldrh	r3, [r7, #6]
 810ab74:	b2da      	uxtb	r2, r3
 810ab76:	8979      	ldrh	r1, [r7, #10]
 810ab78:	4b20      	ldr	r3, [pc, #128]	@ (810abfc <I2C_RequestMemoryRead+0xa4>)
 810ab7a:	9300      	str	r3, [sp, #0]
 810ab7c:	2300      	movs	r3, #0
 810ab7e:	68f8      	ldr	r0, [r7, #12]
 810ab80:	f000 fa26 	bl	810afd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810ab84:	69fa      	ldr	r2, [r7, #28]
 810ab86:	69b9      	ldr	r1, [r7, #24]
 810ab88:	68f8      	ldr	r0, [r7, #12]
 810ab8a:	f000 f8b6 	bl	810acfa <I2C_WaitOnTXISFlagUntilTimeout>
 810ab8e:	4603      	mov	r3, r0
 810ab90:	2b00      	cmp	r3, #0
 810ab92:	d001      	beq.n	810ab98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 810ab94:	2301      	movs	r3, #1
 810ab96:	e02c      	b.n	810abf2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810ab98:	88fb      	ldrh	r3, [r7, #6]
 810ab9a:	2b01      	cmp	r3, #1
 810ab9c:	d105      	bne.n	810abaa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810ab9e:	893b      	ldrh	r3, [r7, #8]
 810aba0:	b2da      	uxtb	r2, r3
 810aba2:	68fb      	ldr	r3, [r7, #12]
 810aba4:	681b      	ldr	r3, [r3, #0]
 810aba6:	629a      	str	r2, [r3, #40]	@ 0x28
 810aba8:	e015      	b.n	810abd6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810abaa:	893b      	ldrh	r3, [r7, #8]
 810abac:	0a1b      	lsrs	r3, r3, #8
 810abae:	b29b      	uxth	r3, r3
 810abb0:	b2da      	uxtb	r2, r3
 810abb2:	68fb      	ldr	r3, [r7, #12]
 810abb4:	681b      	ldr	r3, [r3, #0]
 810abb6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810abb8:	69fa      	ldr	r2, [r7, #28]
 810abba:	69b9      	ldr	r1, [r7, #24]
 810abbc:	68f8      	ldr	r0, [r7, #12]
 810abbe:	f000 f89c 	bl	810acfa <I2C_WaitOnTXISFlagUntilTimeout>
 810abc2:	4603      	mov	r3, r0
 810abc4:	2b00      	cmp	r3, #0
 810abc6:	d001      	beq.n	810abcc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 810abc8:	2301      	movs	r3, #1
 810abca:	e012      	b.n	810abf2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810abcc:	893b      	ldrh	r3, [r7, #8]
 810abce:	b2da      	uxtb	r2, r3
 810abd0:	68fb      	ldr	r3, [r7, #12]
 810abd2:	681b      	ldr	r3, [r3, #0]
 810abd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810abd6:	69fb      	ldr	r3, [r7, #28]
 810abd8:	9300      	str	r3, [sp, #0]
 810abda:	69bb      	ldr	r3, [r7, #24]
 810abdc:	2200      	movs	r2, #0
 810abde:	2140      	movs	r1, #64	@ 0x40
 810abe0:	68f8      	ldr	r0, [r7, #12]
 810abe2:	f000 f831 	bl	810ac48 <I2C_WaitOnFlagUntilTimeout>
 810abe6:	4603      	mov	r3, r0
 810abe8:	2b00      	cmp	r3, #0
 810abea:	d001      	beq.n	810abf0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 810abec:	2301      	movs	r3, #1
 810abee:	e000      	b.n	810abf2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 810abf0:	2300      	movs	r3, #0
}
 810abf2:	4618      	mov	r0, r3
 810abf4:	3710      	adds	r7, #16
 810abf6:	46bd      	mov	sp, r7
 810abf8:	bd80      	pop	{r7, pc}
 810abfa:	bf00      	nop
 810abfc:	80002000 	.word	0x80002000

0810ac00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 810ac00:	b480      	push	{r7}
 810ac02:	b083      	sub	sp, #12
 810ac04:	af00      	add	r7, sp, #0
 810ac06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 810ac08:	687b      	ldr	r3, [r7, #4]
 810ac0a:	681b      	ldr	r3, [r3, #0]
 810ac0c:	699b      	ldr	r3, [r3, #24]
 810ac0e:	f003 0302 	and.w	r3, r3, #2
 810ac12:	2b02      	cmp	r3, #2
 810ac14:	d103      	bne.n	810ac1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 810ac16:	687b      	ldr	r3, [r7, #4]
 810ac18:	681b      	ldr	r3, [r3, #0]
 810ac1a:	2200      	movs	r2, #0
 810ac1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810ac1e:	687b      	ldr	r3, [r7, #4]
 810ac20:	681b      	ldr	r3, [r3, #0]
 810ac22:	699b      	ldr	r3, [r3, #24]
 810ac24:	f003 0301 	and.w	r3, r3, #1
 810ac28:	2b01      	cmp	r3, #1
 810ac2a:	d007      	beq.n	810ac3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810ac2c:	687b      	ldr	r3, [r7, #4]
 810ac2e:	681b      	ldr	r3, [r3, #0]
 810ac30:	699a      	ldr	r2, [r3, #24]
 810ac32:	687b      	ldr	r3, [r7, #4]
 810ac34:	681b      	ldr	r3, [r3, #0]
 810ac36:	f042 0201 	orr.w	r2, r2, #1
 810ac3a:	619a      	str	r2, [r3, #24]
  }
}
 810ac3c:	bf00      	nop
 810ac3e:	370c      	adds	r7, #12
 810ac40:	46bd      	mov	sp, r7
 810ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac46:	4770      	bx	lr

0810ac48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 810ac48:	b580      	push	{r7, lr}
 810ac4a:	b084      	sub	sp, #16
 810ac4c:	af00      	add	r7, sp, #0
 810ac4e:	60f8      	str	r0, [r7, #12]
 810ac50:	60b9      	str	r1, [r7, #8]
 810ac52:	603b      	str	r3, [r7, #0]
 810ac54:	4613      	mov	r3, r2
 810ac56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810ac58:	e03b      	b.n	810acd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810ac5a:	69ba      	ldr	r2, [r7, #24]
 810ac5c:	6839      	ldr	r1, [r7, #0]
 810ac5e:	68f8      	ldr	r0, [r7, #12]
 810ac60:	f000 f8d6 	bl	810ae10 <I2C_IsErrorOccurred>
 810ac64:	4603      	mov	r3, r0
 810ac66:	2b00      	cmp	r3, #0
 810ac68:	d001      	beq.n	810ac6e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 810ac6a:	2301      	movs	r3, #1
 810ac6c:	e041      	b.n	810acf2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810ac6e:	683b      	ldr	r3, [r7, #0]
 810ac70:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ac74:	d02d      	beq.n	810acd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810ac76:	f7fd fbcf 	bl	8108418 <HAL_GetTick>
 810ac7a:	4602      	mov	r2, r0
 810ac7c:	69bb      	ldr	r3, [r7, #24]
 810ac7e:	1ad3      	subs	r3, r2, r3
 810ac80:	683a      	ldr	r2, [r7, #0]
 810ac82:	429a      	cmp	r2, r3
 810ac84:	d302      	bcc.n	810ac8c <I2C_WaitOnFlagUntilTimeout+0x44>
 810ac86:	683b      	ldr	r3, [r7, #0]
 810ac88:	2b00      	cmp	r3, #0
 810ac8a:	d122      	bne.n	810acd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 810ac8c:	68fb      	ldr	r3, [r7, #12]
 810ac8e:	681b      	ldr	r3, [r3, #0]
 810ac90:	699a      	ldr	r2, [r3, #24]
 810ac92:	68bb      	ldr	r3, [r7, #8]
 810ac94:	4013      	ands	r3, r2
 810ac96:	68ba      	ldr	r2, [r7, #8]
 810ac98:	429a      	cmp	r2, r3
 810ac9a:	bf0c      	ite	eq
 810ac9c:	2301      	moveq	r3, #1
 810ac9e:	2300      	movne	r3, #0
 810aca0:	b2db      	uxtb	r3, r3
 810aca2:	461a      	mov	r2, r3
 810aca4:	79fb      	ldrb	r3, [r7, #7]
 810aca6:	429a      	cmp	r2, r3
 810aca8:	d113      	bne.n	810acd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810acaa:	68fb      	ldr	r3, [r7, #12]
 810acac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810acae:	f043 0220 	orr.w	r2, r3, #32
 810acb2:	68fb      	ldr	r3, [r7, #12]
 810acb4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810acb6:	68fb      	ldr	r3, [r7, #12]
 810acb8:	2220      	movs	r2, #32
 810acba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810acbe:	68fb      	ldr	r3, [r7, #12]
 810acc0:	2200      	movs	r2, #0
 810acc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810acc6:	68fb      	ldr	r3, [r7, #12]
 810acc8:	2200      	movs	r2, #0
 810acca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 810acce:	2301      	movs	r3, #1
 810acd0:	e00f      	b.n	810acf2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810acd2:	68fb      	ldr	r3, [r7, #12]
 810acd4:	681b      	ldr	r3, [r3, #0]
 810acd6:	699a      	ldr	r2, [r3, #24]
 810acd8:	68bb      	ldr	r3, [r7, #8]
 810acda:	4013      	ands	r3, r2
 810acdc:	68ba      	ldr	r2, [r7, #8]
 810acde:	429a      	cmp	r2, r3
 810ace0:	bf0c      	ite	eq
 810ace2:	2301      	moveq	r3, #1
 810ace4:	2300      	movne	r3, #0
 810ace6:	b2db      	uxtb	r3, r3
 810ace8:	461a      	mov	r2, r3
 810acea:	79fb      	ldrb	r3, [r7, #7]
 810acec:	429a      	cmp	r2, r3
 810acee:	d0b4      	beq.n	810ac5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810acf0:	2300      	movs	r3, #0
}
 810acf2:	4618      	mov	r0, r3
 810acf4:	3710      	adds	r7, #16
 810acf6:	46bd      	mov	sp, r7
 810acf8:	bd80      	pop	{r7, pc}

0810acfa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810acfa:	b580      	push	{r7, lr}
 810acfc:	b084      	sub	sp, #16
 810acfe:	af00      	add	r7, sp, #0
 810ad00:	60f8      	str	r0, [r7, #12]
 810ad02:	60b9      	str	r1, [r7, #8]
 810ad04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810ad06:	e033      	b.n	810ad70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810ad08:	687a      	ldr	r2, [r7, #4]
 810ad0a:	68b9      	ldr	r1, [r7, #8]
 810ad0c:	68f8      	ldr	r0, [r7, #12]
 810ad0e:	f000 f87f 	bl	810ae10 <I2C_IsErrorOccurred>
 810ad12:	4603      	mov	r3, r0
 810ad14:	2b00      	cmp	r3, #0
 810ad16:	d001      	beq.n	810ad1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810ad18:	2301      	movs	r3, #1
 810ad1a:	e031      	b.n	810ad80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810ad1c:	68bb      	ldr	r3, [r7, #8]
 810ad1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ad22:	d025      	beq.n	810ad70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810ad24:	f7fd fb78 	bl	8108418 <HAL_GetTick>
 810ad28:	4602      	mov	r2, r0
 810ad2a:	687b      	ldr	r3, [r7, #4]
 810ad2c:	1ad3      	subs	r3, r2, r3
 810ad2e:	68ba      	ldr	r2, [r7, #8]
 810ad30:	429a      	cmp	r2, r3
 810ad32:	d302      	bcc.n	810ad3a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810ad34:	68bb      	ldr	r3, [r7, #8]
 810ad36:	2b00      	cmp	r3, #0
 810ad38:	d11a      	bne.n	810ad70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 810ad3a:	68fb      	ldr	r3, [r7, #12]
 810ad3c:	681b      	ldr	r3, [r3, #0]
 810ad3e:	699b      	ldr	r3, [r3, #24]
 810ad40:	f003 0302 	and.w	r3, r3, #2
 810ad44:	2b02      	cmp	r3, #2
 810ad46:	d013      	beq.n	810ad70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810ad48:	68fb      	ldr	r3, [r7, #12]
 810ad4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810ad4c:	f043 0220 	orr.w	r2, r3, #32
 810ad50:	68fb      	ldr	r3, [r7, #12]
 810ad52:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810ad54:	68fb      	ldr	r3, [r7, #12]
 810ad56:	2220      	movs	r2, #32
 810ad58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810ad5c:	68fb      	ldr	r3, [r7, #12]
 810ad5e:	2200      	movs	r2, #0
 810ad60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810ad64:	68fb      	ldr	r3, [r7, #12]
 810ad66:	2200      	movs	r2, #0
 810ad68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 810ad6c:	2301      	movs	r3, #1
 810ad6e:	e007      	b.n	810ad80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810ad70:	68fb      	ldr	r3, [r7, #12]
 810ad72:	681b      	ldr	r3, [r3, #0]
 810ad74:	699b      	ldr	r3, [r3, #24]
 810ad76:	f003 0302 	and.w	r3, r3, #2
 810ad7a:	2b02      	cmp	r3, #2
 810ad7c:	d1c4      	bne.n	810ad08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 810ad7e:	2300      	movs	r3, #0
}
 810ad80:	4618      	mov	r0, r3
 810ad82:	3710      	adds	r7, #16
 810ad84:	46bd      	mov	sp, r7
 810ad86:	bd80      	pop	{r7, pc}

0810ad88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810ad88:	b580      	push	{r7, lr}
 810ad8a:	b084      	sub	sp, #16
 810ad8c:	af00      	add	r7, sp, #0
 810ad8e:	60f8      	str	r0, [r7, #12]
 810ad90:	60b9      	str	r1, [r7, #8]
 810ad92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810ad94:	e02f      	b.n	810adf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810ad96:	687a      	ldr	r2, [r7, #4]
 810ad98:	68b9      	ldr	r1, [r7, #8]
 810ad9a:	68f8      	ldr	r0, [r7, #12]
 810ad9c:	f000 f838 	bl	810ae10 <I2C_IsErrorOccurred>
 810ada0:	4603      	mov	r3, r0
 810ada2:	2b00      	cmp	r3, #0
 810ada4:	d001      	beq.n	810adaa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810ada6:	2301      	movs	r3, #1
 810ada8:	e02d      	b.n	810ae06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810adaa:	f7fd fb35 	bl	8108418 <HAL_GetTick>
 810adae:	4602      	mov	r2, r0
 810adb0:	687b      	ldr	r3, [r7, #4]
 810adb2:	1ad3      	subs	r3, r2, r3
 810adb4:	68ba      	ldr	r2, [r7, #8]
 810adb6:	429a      	cmp	r2, r3
 810adb8:	d302      	bcc.n	810adc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810adba:	68bb      	ldr	r3, [r7, #8]
 810adbc:	2b00      	cmp	r3, #0
 810adbe:	d11a      	bne.n	810adf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 810adc0:	68fb      	ldr	r3, [r7, #12]
 810adc2:	681b      	ldr	r3, [r3, #0]
 810adc4:	699b      	ldr	r3, [r3, #24]
 810adc6:	f003 0320 	and.w	r3, r3, #32
 810adca:	2b20      	cmp	r3, #32
 810adcc:	d013      	beq.n	810adf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810adce:	68fb      	ldr	r3, [r7, #12]
 810add0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810add2:	f043 0220 	orr.w	r2, r3, #32
 810add6:	68fb      	ldr	r3, [r7, #12]
 810add8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810adda:	68fb      	ldr	r3, [r7, #12]
 810addc:	2220      	movs	r2, #32
 810adde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810ade2:	68fb      	ldr	r3, [r7, #12]
 810ade4:	2200      	movs	r2, #0
 810ade6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810adea:	68fb      	ldr	r3, [r7, #12]
 810adec:	2200      	movs	r2, #0
 810adee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 810adf2:	2301      	movs	r3, #1
 810adf4:	e007      	b.n	810ae06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810adf6:	68fb      	ldr	r3, [r7, #12]
 810adf8:	681b      	ldr	r3, [r3, #0]
 810adfa:	699b      	ldr	r3, [r3, #24]
 810adfc:	f003 0320 	and.w	r3, r3, #32
 810ae00:	2b20      	cmp	r3, #32
 810ae02:	d1c8      	bne.n	810ad96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810ae04:	2300      	movs	r3, #0
}
 810ae06:	4618      	mov	r0, r3
 810ae08:	3710      	adds	r7, #16
 810ae0a:	46bd      	mov	sp, r7
 810ae0c:	bd80      	pop	{r7, pc}
	...

0810ae10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810ae10:	b580      	push	{r7, lr}
 810ae12:	b08a      	sub	sp, #40	@ 0x28
 810ae14:	af00      	add	r7, sp, #0
 810ae16:	60f8      	str	r0, [r7, #12]
 810ae18:	60b9      	str	r1, [r7, #8]
 810ae1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810ae1c:	2300      	movs	r3, #0
 810ae1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 810ae22:	68fb      	ldr	r3, [r7, #12]
 810ae24:	681b      	ldr	r3, [r3, #0]
 810ae26:	699b      	ldr	r3, [r3, #24]
 810ae28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 810ae2a:	2300      	movs	r3, #0
 810ae2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 810ae2e:	687b      	ldr	r3, [r7, #4]
 810ae30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 810ae32:	69bb      	ldr	r3, [r7, #24]
 810ae34:	f003 0310 	and.w	r3, r3, #16
 810ae38:	2b00      	cmp	r3, #0
 810ae3a:	d068      	beq.n	810af0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810ae3c:	68fb      	ldr	r3, [r7, #12]
 810ae3e:	681b      	ldr	r3, [r3, #0]
 810ae40:	2210      	movs	r2, #16
 810ae42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810ae44:	e049      	b.n	810aeda <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810ae46:	68bb      	ldr	r3, [r7, #8]
 810ae48:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ae4c:	d045      	beq.n	810aeda <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810ae4e:	f7fd fae3 	bl	8108418 <HAL_GetTick>
 810ae52:	4602      	mov	r2, r0
 810ae54:	69fb      	ldr	r3, [r7, #28]
 810ae56:	1ad3      	subs	r3, r2, r3
 810ae58:	68ba      	ldr	r2, [r7, #8]
 810ae5a:	429a      	cmp	r2, r3
 810ae5c:	d302      	bcc.n	810ae64 <I2C_IsErrorOccurred+0x54>
 810ae5e:	68bb      	ldr	r3, [r7, #8]
 810ae60:	2b00      	cmp	r3, #0
 810ae62:	d13a      	bne.n	810aeda <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 810ae64:	68fb      	ldr	r3, [r7, #12]
 810ae66:	681b      	ldr	r3, [r3, #0]
 810ae68:	685b      	ldr	r3, [r3, #4]
 810ae6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810ae6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 810ae70:	68fb      	ldr	r3, [r7, #12]
 810ae72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810ae76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 810ae78:	68fb      	ldr	r3, [r7, #12]
 810ae7a:	681b      	ldr	r3, [r3, #0]
 810ae7c:	699b      	ldr	r3, [r3, #24]
 810ae7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810ae82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810ae86:	d121      	bne.n	810aecc <I2C_IsErrorOccurred+0xbc>
 810ae88:	697b      	ldr	r3, [r7, #20]
 810ae8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810ae8e:	d01d      	beq.n	810aecc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 810ae90:	7cfb      	ldrb	r3, [r7, #19]
 810ae92:	2b20      	cmp	r3, #32
 810ae94:	d01a      	beq.n	810aecc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 810ae96:	68fb      	ldr	r3, [r7, #12]
 810ae98:	681b      	ldr	r3, [r3, #0]
 810ae9a:	685a      	ldr	r2, [r3, #4]
 810ae9c:	68fb      	ldr	r3, [r7, #12]
 810ae9e:	681b      	ldr	r3, [r3, #0]
 810aea0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810aea4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 810aea6:	f7fd fab7 	bl	8108418 <HAL_GetTick>
 810aeaa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810aeac:	e00e      	b.n	810aecc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810aeae:	f7fd fab3 	bl	8108418 <HAL_GetTick>
 810aeb2:	4602      	mov	r2, r0
 810aeb4:	69fb      	ldr	r3, [r7, #28]
 810aeb6:	1ad3      	subs	r3, r2, r3
 810aeb8:	2b19      	cmp	r3, #25
 810aeba:	d907      	bls.n	810aecc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 810aebc:	6a3b      	ldr	r3, [r7, #32]
 810aebe:	f043 0320 	orr.w	r3, r3, #32
 810aec2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 810aec4:	2301      	movs	r3, #1
 810aec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 810aeca:	e006      	b.n	810aeda <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810aecc:	68fb      	ldr	r3, [r7, #12]
 810aece:	681b      	ldr	r3, [r3, #0]
 810aed0:	699b      	ldr	r3, [r3, #24]
 810aed2:	f003 0320 	and.w	r3, r3, #32
 810aed6:	2b20      	cmp	r3, #32
 810aed8:	d1e9      	bne.n	810aeae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810aeda:	68fb      	ldr	r3, [r7, #12]
 810aedc:	681b      	ldr	r3, [r3, #0]
 810aede:	699b      	ldr	r3, [r3, #24]
 810aee0:	f003 0320 	and.w	r3, r3, #32
 810aee4:	2b20      	cmp	r3, #32
 810aee6:	d003      	beq.n	810aef0 <I2C_IsErrorOccurred+0xe0>
 810aee8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810aeec:	2b00      	cmp	r3, #0
 810aeee:	d0aa      	beq.n	810ae46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 810aef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810aef4:	2b00      	cmp	r3, #0
 810aef6:	d103      	bne.n	810af00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810aef8:	68fb      	ldr	r3, [r7, #12]
 810aefa:	681b      	ldr	r3, [r3, #0]
 810aefc:	2220      	movs	r2, #32
 810aefe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 810af00:	6a3b      	ldr	r3, [r7, #32]
 810af02:	f043 0304 	orr.w	r3, r3, #4
 810af06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 810af08:	2301      	movs	r3, #1
 810af0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 810af0e:	68fb      	ldr	r3, [r7, #12]
 810af10:	681b      	ldr	r3, [r3, #0]
 810af12:	699b      	ldr	r3, [r3, #24]
 810af14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 810af16:	69bb      	ldr	r3, [r7, #24]
 810af18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810af1c:	2b00      	cmp	r3, #0
 810af1e:	d00b      	beq.n	810af38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 810af20:	6a3b      	ldr	r3, [r7, #32]
 810af22:	f043 0301 	orr.w	r3, r3, #1
 810af26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810af28:	68fb      	ldr	r3, [r7, #12]
 810af2a:	681b      	ldr	r3, [r3, #0]
 810af2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810af30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810af32:	2301      	movs	r3, #1
 810af34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810af38:	69bb      	ldr	r3, [r7, #24]
 810af3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810af3e:	2b00      	cmp	r3, #0
 810af40:	d00b      	beq.n	810af5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 810af42:	6a3b      	ldr	r3, [r7, #32]
 810af44:	f043 0308 	orr.w	r3, r3, #8
 810af48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810af4a:	68fb      	ldr	r3, [r7, #12]
 810af4c:	681b      	ldr	r3, [r3, #0]
 810af4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810af52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810af54:	2301      	movs	r3, #1
 810af56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 810af5a:	69bb      	ldr	r3, [r7, #24]
 810af5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810af60:	2b00      	cmp	r3, #0
 810af62:	d00b      	beq.n	810af7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810af64:	6a3b      	ldr	r3, [r7, #32]
 810af66:	f043 0302 	orr.w	r3, r3, #2
 810af6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 810af6c:	68fb      	ldr	r3, [r7, #12]
 810af6e:	681b      	ldr	r3, [r3, #0]
 810af70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810af74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810af76:	2301      	movs	r3, #1
 810af78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 810af7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810af80:	2b00      	cmp	r3, #0
 810af82:	d01c      	beq.n	810afbe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810af84:	68f8      	ldr	r0, [r7, #12]
 810af86:	f7ff fe3b 	bl	810ac00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810af8a:	68fb      	ldr	r3, [r7, #12]
 810af8c:	681b      	ldr	r3, [r3, #0]
 810af8e:	6859      	ldr	r1, [r3, #4]
 810af90:	68fb      	ldr	r3, [r7, #12]
 810af92:	681a      	ldr	r2, [r3, #0]
 810af94:	4b0d      	ldr	r3, [pc, #52]	@ (810afcc <I2C_IsErrorOccurred+0x1bc>)
 810af96:	400b      	ands	r3, r1
 810af98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 810af9a:	68fb      	ldr	r3, [r7, #12]
 810af9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810af9e:	6a3b      	ldr	r3, [r7, #32]
 810afa0:	431a      	orrs	r2, r3
 810afa2:	68fb      	ldr	r3, [r7, #12]
 810afa4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810afa6:	68fb      	ldr	r3, [r7, #12]
 810afa8:	2220      	movs	r2, #32
 810afaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810afae:	68fb      	ldr	r3, [r7, #12]
 810afb0:	2200      	movs	r2, #0
 810afb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810afb6:	68fb      	ldr	r3, [r7, #12]
 810afb8:	2200      	movs	r2, #0
 810afba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 810afbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 810afc2:	4618      	mov	r0, r3
 810afc4:	3728      	adds	r7, #40	@ 0x28
 810afc6:	46bd      	mov	sp, r7
 810afc8:	bd80      	pop	{r7, pc}
 810afca:	bf00      	nop
 810afcc:	fe00e800 	.word	0xfe00e800

0810afd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 810afd0:	b480      	push	{r7}
 810afd2:	b087      	sub	sp, #28
 810afd4:	af00      	add	r7, sp, #0
 810afd6:	60f8      	str	r0, [r7, #12]
 810afd8:	607b      	str	r3, [r7, #4]
 810afda:	460b      	mov	r3, r1
 810afdc:	817b      	strh	r3, [r7, #10]
 810afde:	4613      	mov	r3, r2
 810afe0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810afe2:	897b      	ldrh	r3, [r7, #10]
 810afe4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810afe8:	7a7b      	ldrb	r3, [r7, #9]
 810afea:	041b      	lsls	r3, r3, #16
 810afec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810aff0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810aff2:	687b      	ldr	r3, [r7, #4]
 810aff4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810aff6:	6a3b      	ldr	r3, [r7, #32]
 810aff8:	4313      	orrs	r3, r2
 810affa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810affe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 810b000:	68fb      	ldr	r3, [r7, #12]
 810b002:	681b      	ldr	r3, [r3, #0]
 810b004:	685a      	ldr	r2, [r3, #4]
 810b006:	6a3b      	ldr	r3, [r7, #32]
 810b008:	0d5b      	lsrs	r3, r3, #21
 810b00a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 810b00e:	4b08      	ldr	r3, [pc, #32]	@ (810b030 <I2C_TransferConfig+0x60>)
 810b010:	430b      	orrs	r3, r1
 810b012:	43db      	mvns	r3, r3
 810b014:	ea02 0103 	and.w	r1, r2, r3
 810b018:	68fb      	ldr	r3, [r7, #12]
 810b01a:	681b      	ldr	r3, [r3, #0]
 810b01c:	697a      	ldr	r2, [r7, #20]
 810b01e:	430a      	orrs	r2, r1
 810b020:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 810b022:	bf00      	nop
 810b024:	371c      	adds	r7, #28
 810b026:	46bd      	mov	sp, r7
 810b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b02c:	4770      	bx	lr
 810b02e:	bf00      	nop
 810b030:	03ff63ff 	.word	0x03ff63ff

0810b034 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 810b034:	b480      	push	{r7}
 810b036:	b083      	sub	sp, #12
 810b038:	af00      	add	r7, sp, #0
 810b03a:	6078      	str	r0, [r7, #4]
 810b03c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810b03e:	687b      	ldr	r3, [r7, #4]
 810b040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810b044:	b2db      	uxtb	r3, r3
 810b046:	2b20      	cmp	r3, #32
 810b048:	d138      	bne.n	810b0bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810b04a:	687b      	ldr	r3, [r7, #4]
 810b04c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810b050:	2b01      	cmp	r3, #1
 810b052:	d101      	bne.n	810b058 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810b054:	2302      	movs	r3, #2
 810b056:	e032      	b.n	810b0be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810b058:	687b      	ldr	r3, [r7, #4]
 810b05a:	2201      	movs	r2, #1
 810b05c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810b060:	687b      	ldr	r3, [r7, #4]
 810b062:	2224      	movs	r2, #36	@ 0x24
 810b064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810b068:	687b      	ldr	r3, [r7, #4]
 810b06a:	681b      	ldr	r3, [r3, #0]
 810b06c:	681a      	ldr	r2, [r3, #0]
 810b06e:	687b      	ldr	r3, [r7, #4]
 810b070:	681b      	ldr	r3, [r3, #0]
 810b072:	f022 0201 	bic.w	r2, r2, #1
 810b076:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810b078:	687b      	ldr	r3, [r7, #4]
 810b07a:	681b      	ldr	r3, [r3, #0]
 810b07c:	681a      	ldr	r2, [r3, #0]
 810b07e:	687b      	ldr	r3, [r7, #4]
 810b080:	681b      	ldr	r3, [r3, #0]
 810b082:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 810b086:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810b088:	687b      	ldr	r3, [r7, #4]
 810b08a:	681b      	ldr	r3, [r3, #0]
 810b08c:	6819      	ldr	r1, [r3, #0]
 810b08e:	687b      	ldr	r3, [r7, #4]
 810b090:	681b      	ldr	r3, [r3, #0]
 810b092:	683a      	ldr	r2, [r7, #0]
 810b094:	430a      	orrs	r2, r1
 810b096:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810b098:	687b      	ldr	r3, [r7, #4]
 810b09a:	681b      	ldr	r3, [r3, #0]
 810b09c:	681a      	ldr	r2, [r3, #0]
 810b09e:	687b      	ldr	r3, [r7, #4]
 810b0a0:	681b      	ldr	r3, [r3, #0]
 810b0a2:	f042 0201 	orr.w	r2, r2, #1
 810b0a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810b0a8:	687b      	ldr	r3, [r7, #4]
 810b0aa:	2220      	movs	r2, #32
 810b0ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810b0b0:	687b      	ldr	r3, [r7, #4]
 810b0b2:	2200      	movs	r2, #0
 810b0b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810b0b8:	2300      	movs	r3, #0
 810b0ba:	e000      	b.n	810b0be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810b0bc:	2302      	movs	r3, #2
  }
}
 810b0be:	4618      	mov	r0, r3
 810b0c0:	370c      	adds	r7, #12
 810b0c2:	46bd      	mov	sp, r7
 810b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b0c8:	4770      	bx	lr

0810b0ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810b0ca:	b480      	push	{r7}
 810b0cc:	b085      	sub	sp, #20
 810b0ce:	af00      	add	r7, sp, #0
 810b0d0:	6078      	str	r0, [r7, #4]
 810b0d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810b0d4:	687b      	ldr	r3, [r7, #4]
 810b0d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810b0da:	b2db      	uxtb	r3, r3
 810b0dc:	2b20      	cmp	r3, #32
 810b0de:	d139      	bne.n	810b154 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810b0e0:	687b      	ldr	r3, [r7, #4]
 810b0e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810b0e6:	2b01      	cmp	r3, #1
 810b0e8:	d101      	bne.n	810b0ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810b0ea:	2302      	movs	r3, #2
 810b0ec:	e033      	b.n	810b156 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810b0ee:	687b      	ldr	r3, [r7, #4]
 810b0f0:	2201      	movs	r2, #1
 810b0f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810b0f6:	687b      	ldr	r3, [r7, #4]
 810b0f8:	2224      	movs	r2, #36	@ 0x24
 810b0fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810b0fe:	687b      	ldr	r3, [r7, #4]
 810b100:	681b      	ldr	r3, [r3, #0]
 810b102:	681a      	ldr	r2, [r3, #0]
 810b104:	687b      	ldr	r3, [r7, #4]
 810b106:	681b      	ldr	r3, [r3, #0]
 810b108:	f022 0201 	bic.w	r2, r2, #1
 810b10c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810b10e:	687b      	ldr	r3, [r7, #4]
 810b110:	681b      	ldr	r3, [r3, #0]
 810b112:	681b      	ldr	r3, [r3, #0]
 810b114:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810b116:	68fb      	ldr	r3, [r7, #12]
 810b118:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810b11c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810b11e:	683b      	ldr	r3, [r7, #0]
 810b120:	021b      	lsls	r3, r3, #8
 810b122:	68fa      	ldr	r2, [r7, #12]
 810b124:	4313      	orrs	r3, r2
 810b126:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 810b128:	687b      	ldr	r3, [r7, #4]
 810b12a:	681b      	ldr	r3, [r3, #0]
 810b12c:	68fa      	ldr	r2, [r7, #12]
 810b12e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810b130:	687b      	ldr	r3, [r7, #4]
 810b132:	681b      	ldr	r3, [r3, #0]
 810b134:	681a      	ldr	r2, [r3, #0]
 810b136:	687b      	ldr	r3, [r7, #4]
 810b138:	681b      	ldr	r3, [r3, #0]
 810b13a:	f042 0201 	orr.w	r2, r2, #1
 810b13e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810b140:	687b      	ldr	r3, [r7, #4]
 810b142:	2220      	movs	r2, #32
 810b144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810b148:	687b      	ldr	r3, [r7, #4]
 810b14a:	2200      	movs	r2, #0
 810b14c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810b150:	2300      	movs	r3, #0
 810b152:	e000      	b.n	810b156 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810b154:	2302      	movs	r3, #2
  }
}
 810b156:	4618      	mov	r0, r3
 810b158:	3714      	adds	r7, #20
 810b15a:	46bd      	mov	sp, r7
 810b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b160:	4770      	bx	lr
	...

0810b164 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810b164:	b580      	push	{r7, lr}
 810b166:	b084      	sub	sp, #16
 810b168:	af00      	add	r7, sp, #0
 810b16a:	60f8      	str	r0, [r7, #12]
 810b16c:	460b      	mov	r3, r1
 810b16e:	607a      	str	r2, [r7, #4]
 810b170:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810b172:	4b37      	ldr	r3, [pc, #220]	@ (810b250 <HAL_PWREx_EnterSTOPMode+0xec>)
 810b174:	681b      	ldr	r3, [r3, #0]
 810b176:	f023 0201 	bic.w	r2, r3, #1
 810b17a:	4935      	ldr	r1, [pc, #212]	@ (810b250 <HAL_PWREx_EnterSTOPMode+0xec>)
 810b17c:	68fb      	ldr	r3, [r7, #12]
 810b17e:	4313      	orrs	r3, r2
 810b180:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810b182:	687b      	ldr	r3, [r7, #4]
 810b184:	2b00      	cmp	r3, #0
 810b186:	d123      	bne.n	810b1d0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810b188:	f7fd fa46 	bl	8108618 <HAL_GetCurrentCPUID>
 810b18c:	4603      	mov	r3, r0
 810b18e:	2b03      	cmp	r3, #3
 810b190:	d158      	bne.n	810b244 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810b192:	4b2f      	ldr	r3, [pc, #188]	@ (810b250 <HAL_PWREx_EnterSTOPMode+0xec>)
 810b194:	691b      	ldr	r3, [r3, #16]
 810b196:	4a2e      	ldr	r2, [pc, #184]	@ (810b250 <HAL_PWREx_EnterSTOPMode+0xec>)
 810b198:	f023 0301 	bic.w	r3, r3, #1
 810b19c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810b19e:	4b2d      	ldr	r3, [pc, #180]	@ (810b254 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810b1a0:	691b      	ldr	r3, [r3, #16]
 810b1a2:	4a2c      	ldr	r2, [pc, #176]	@ (810b254 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810b1a4:	f043 0304 	orr.w	r3, r3, #4
 810b1a8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810b1aa:	f3bf 8f4f 	dsb	sy
}
 810b1ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810b1b0:	f3bf 8f6f 	isb	sy
}
 810b1b4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810b1b6:	7afb      	ldrb	r3, [r7, #11]
 810b1b8:	2b01      	cmp	r3, #1
 810b1ba:	d101      	bne.n	810b1c0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810b1bc:	bf30      	wfi
 810b1be:	e000      	b.n	810b1c2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810b1c0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810b1c2:	4b24      	ldr	r3, [pc, #144]	@ (810b254 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810b1c4:	691b      	ldr	r3, [r3, #16]
 810b1c6:	4a23      	ldr	r2, [pc, #140]	@ (810b254 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810b1c8:	f023 0304 	bic.w	r3, r3, #4
 810b1cc:	6113      	str	r3, [r2, #16]
 810b1ce:	e03c      	b.n	810b24a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810b1d0:	687b      	ldr	r3, [r7, #4]
 810b1d2:	2b01      	cmp	r3, #1
 810b1d4:	d123      	bne.n	810b21e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810b1d6:	f7fd fa1f 	bl	8108618 <HAL_GetCurrentCPUID>
 810b1da:	4603      	mov	r3, r0
 810b1dc:	2b01      	cmp	r3, #1
 810b1de:	d133      	bne.n	810b248 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810b1e0:	4b1b      	ldr	r3, [pc, #108]	@ (810b250 <HAL_PWREx_EnterSTOPMode+0xec>)
 810b1e2:	695b      	ldr	r3, [r3, #20]
 810b1e4:	4a1a      	ldr	r2, [pc, #104]	@ (810b250 <HAL_PWREx_EnterSTOPMode+0xec>)
 810b1e6:	f023 0302 	bic.w	r3, r3, #2
 810b1ea:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810b1ec:	4b19      	ldr	r3, [pc, #100]	@ (810b254 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810b1ee:	691b      	ldr	r3, [r3, #16]
 810b1f0:	4a18      	ldr	r2, [pc, #96]	@ (810b254 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810b1f2:	f043 0304 	orr.w	r3, r3, #4
 810b1f6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810b1f8:	f3bf 8f4f 	dsb	sy
}
 810b1fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810b1fe:	f3bf 8f6f 	isb	sy
}
 810b202:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810b204:	7afb      	ldrb	r3, [r7, #11]
 810b206:	2b01      	cmp	r3, #1
 810b208:	d101      	bne.n	810b20e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810b20a:	bf30      	wfi
 810b20c:	e000      	b.n	810b210 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810b20e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810b210:	4b10      	ldr	r3, [pc, #64]	@ (810b254 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810b212:	691b      	ldr	r3, [r3, #16]
 810b214:	4a0f      	ldr	r2, [pc, #60]	@ (810b254 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810b216:	f023 0304 	bic.w	r3, r3, #4
 810b21a:	6113      	str	r3, [r2, #16]
 810b21c:	e015      	b.n	810b24a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810b21e:	f7fd f9fb 	bl	8108618 <HAL_GetCurrentCPUID>
 810b222:	4603      	mov	r3, r0
 810b224:	2b03      	cmp	r3, #3
 810b226:	d106      	bne.n	810b236 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810b228:	4b09      	ldr	r3, [pc, #36]	@ (810b250 <HAL_PWREx_EnterSTOPMode+0xec>)
 810b22a:	691b      	ldr	r3, [r3, #16]
 810b22c:	4a08      	ldr	r2, [pc, #32]	@ (810b250 <HAL_PWREx_EnterSTOPMode+0xec>)
 810b22e:	f023 0304 	bic.w	r3, r3, #4
 810b232:	6113      	str	r3, [r2, #16]
 810b234:	e009      	b.n	810b24a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810b236:	4b06      	ldr	r3, [pc, #24]	@ (810b250 <HAL_PWREx_EnterSTOPMode+0xec>)
 810b238:	695b      	ldr	r3, [r3, #20]
 810b23a:	4a05      	ldr	r2, [pc, #20]	@ (810b250 <HAL_PWREx_EnterSTOPMode+0xec>)
 810b23c:	f023 0304 	bic.w	r3, r3, #4
 810b240:	6153      	str	r3, [r2, #20]
 810b242:	e002      	b.n	810b24a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810b244:	bf00      	nop
 810b246:	e000      	b.n	810b24a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810b248:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810b24a:	3710      	adds	r7, #16
 810b24c:	46bd      	mov	sp, r7
 810b24e:	bd80      	pop	{r7, pc}
 810b250:	58024800 	.word	0x58024800
 810b254:	e000ed00 	.word	0xe000ed00

0810b258 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810b258:	b580      	push	{r7, lr}
 810b25a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810b25c:	f7fd f9dc 	bl	8108618 <HAL_GetCurrentCPUID>
 810b260:	4603      	mov	r3, r0
 810b262:	2b03      	cmp	r3, #3
 810b264:	d101      	bne.n	810b26a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810b266:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810b268:	e001      	b.n	810b26e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810b26a:	bf40      	sev
    __WFE ();
 810b26c:	bf20      	wfe
}
 810b26e:	bf00      	nop
 810b270:	bd80      	pop	{r7, pc}
	...

0810b274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810b274:	b480      	push	{r7}
 810b276:	b089      	sub	sp, #36	@ 0x24
 810b278:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810b27a:	4bb3      	ldr	r3, [pc, #716]	@ (810b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810b27c:	691b      	ldr	r3, [r3, #16]
 810b27e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810b282:	2b18      	cmp	r3, #24
 810b284:	f200 8155 	bhi.w	810b532 <HAL_RCC_GetSysClockFreq+0x2be>
 810b288:	a201      	add	r2, pc, #4	@ (adr r2, 810b290 <HAL_RCC_GetSysClockFreq+0x1c>)
 810b28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b28e:	bf00      	nop
 810b290:	0810b2f5 	.word	0x0810b2f5
 810b294:	0810b533 	.word	0x0810b533
 810b298:	0810b533 	.word	0x0810b533
 810b29c:	0810b533 	.word	0x0810b533
 810b2a0:	0810b533 	.word	0x0810b533
 810b2a4:	0810b533 	.word	0x0810b533
 810b2a8:	0810b533 	.word	0x0810b533
 810b2ac:	0810b533 	.word	0x0810b533
 810b2b0:	0810b31b 	.word	0x0810b31b
 810b2b4:	0810b533 	.word	0x0810b533
 810b2b8:	0810b533 	.word	0x0810b533
 810b2bc:	0810b533 	.word	0x0810b533
 810b2c0:	0810b533 	.word	0x0810b533
 810b2c4:	0810b533 	.word	0x0810b533
 810b2c8:	0810b533 	.word	0x0810b533
 810b2cc:	0810b533 	.word	0x0810b533
 810b2d0:	0810b321 	.word	0x0810b321
 810b2d4:	0810b533 	.word	0x0810b533
 810b2d8:	0810b533 	.word	0x0810b533
 810b2dc:	0810b533 	.word	0x0810b533
 810b2e0:	0810b533 	.word	0x0810b533
 810b2e4:	0810b533 	.word	0x0810b533
 810b2e8:	0810b533 	.word	0x0810b533
 810b2ec:	0810b533 	.word	0x0810b533
 810b2f0:	0810b327 	.word	0x0810b327
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b2f4:	4b94      	ldr	r3, [pc, #592]	@ (810b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810b2f6:	681b      	ldr	r3, [r3, #0]
 810b2f8:	f003 0320 	and.w	r3, r3, #32
 810b2fc:	2b00      	cmp	r3, #0
 810b2fe:	d009      	beq.n	810b314 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b300:	4b91      	ldr	r3, [pc, #580]	@ (810b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810b302:	681b      	ldr	r3, [r3, #0]
 810b304:	08db      	lsrs	r3, r3, #3
 810b306:	f003 0303 	and.w	r3, r3, #3
 810b30a:	4a90      	ldr	r2, [pc, #576]	@ (810b54c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810b30c:	fa22 f303 	lsr.w	r3, r2, r3
 810b310:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810b312:	e111      	b.n	810b538 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810b314:	4b8d      	ldr	r3, [pc, #564]	@ (810b54c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810b316:	61bb      	str	r3, [r7, #24]
      break;
 810b318:	e10e      	b.n	810b538 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810b31a:	4b8d      	ldr	r3, [pc, #564]	@ (810b550 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810b31c:	61bb      	str	r3, [r7, #24]
      break;
 810b31e:	e10b      	b.n	810b538 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810b320:	4b8c      	ldr	r3, [pc, #560]	@ (810b554 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810b322:	61bb      	str	r3, [r7, #24]
      break;
 810b324:	e108      	b.n	810b538 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810b326:	4b88      	ldr	r3, [pc, #544]	@ (810b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810b328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b32a:	f003 0303 	and.w	r3, r3, #3
 810b32e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810b330:	4b85      	ldr	r3, [pc, #532]	@ (810b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810b332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b334:	091b      	lsrs	r3, r3, #4
 810b336:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810b33a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810b33c:	4b82      	ldr	r3, [pc, #520]	@ (810b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810b33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b340:	f003 0301 	and.w	r3, r3, #1
 810b344:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810b346:	4b80      	ldr	r3, [pc, #512]	@ (810b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810b348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810b34a:	08db      	lsrs	r3, r3, #3
 810b34c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810b350:	68fa      	ldr	r2, [r7, #12]
 810b352:	fb02 f303 	mul.w	r3, r2, r3
 810b356:	ee07 3a90 	vmov	s15, r3
 810b35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b35e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810b362:	693b      	ldr	r3, [r7, #16]
 810b364:	2b00      	cmp	r3, #0
 810b366:	f000 80e1 	beq.w	810b52c <HAL_RCC_GetSysClockFreq+0x2b8>
 810b36a:	697b      	ldr	r3, [r7, #20]
 810b36c:	2b02      	cmp	r3, #2
 810b36e:	f000 8083 	beq.w	810b478 <HAL_RCC_GetSysClockFreq+0x204>
 810b372:	697b      	ldr	r3, [r7, #20]
 810b374:	2b02      	cmp	r3, #2
 810b376:	f200 80a1 	bhi.w	810b4bc <HAL_RCC_GetSysClockFreq+0x248>
 810b37a:	697b      	ldr	r3, [r7, #20]
 810b37c:	2b00      	cmp	r3, #0
 810b37e:	d003      	beq.n	810b388 <HAL_RCC_GetSysClockFreq+0x114>
 810b380:	697b      	ldr	r3, [r7, #20]
 810b382:	2b01      	cmp	r3, #1
 810b384:	d056      	beq.n	810b434 <HAL_RCC_GetSysClockFreq+0x1c0>
 810b386:	e099      	b.n	810b4bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b388:	4b6f      	ldr	r3, [pc, #444]	@ (810b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810b38a:	681b      	ldr	r3, [r3, #0]
 810b38c:	f003 0320 	and.w	r3, r3, #32
 810b390:	2b00      	cmp	r3, #0
 810b392:	d02d      	beq.n	810b3f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b394:	4b6c      	ldr	r3, [pc, #432]	@ (810b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810b396:	681b      	ldr	r3, [r3, #0]
 810b398:	08db      	lsrs	r3, r3, #3
 810b39a:	f003 0303 	and.w	r3, r3, #3
 810b39e:	4a6b      	ldr	r2, [pc, #428]	@ (810b54c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810b3a0:	fa22 f303 	lsr.w	r3, r2, r3
 810b3a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810b3a6:	687b      	ldr	r3, [r7, #4]
 810b3a8:	ee07 3a90 	vmov	s15, r3
 810b3ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b3b0:	693b      	ldr	r3, [r7, #16]
 810b3b2:	ee07 3a90 	vmov	s15, r3
 810b3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b3ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b3be:	4b62      	ldr	r3, [pc, #392]	@ (810b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810b3c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b3c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b3c6:	ee07 3a90 	vmov	s15, r3
 810b3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b3ce:	ed97 6a02 	vldr	s12, [r7, #8]
 810b3d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 810b558 <HAL_RCC_GetSysClockFreq+0x2e4>
 810b3d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b3da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b3de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b3e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b3e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b3ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810b3ee:	e087      	b.n	810b500 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810b3f0:	693b      	ldr	r3, [r7, #16]
 810b3f2:	ee07 3a90 	vmov	s15, r3
 810b3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b3fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 810b55c <HAL_RCC_GetSysClockFreq+0x2e8>
 810b3fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b402:	4b51      	ldr	r3, [pc, #324]	@ (810b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810b404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b40a:	ee07 3a90 	vmov	s15, r3
 810b40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b412:	ed97 6a02 	vldr	s12, [r7, #8]
 810b416:	eddf 5a50 	vldr	s11, [pc, #320]	@ 810b558 <HAL_RCC_GetSysClockFreq+0x2e4>
 810b41a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b41e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b42e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810b432:	e065      	b.n	810b500 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810b434:	693b      	ldr	r3, [r7, #16]
 810b436:	ee07 3a90 	vmov	s15, r3
 810b43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b43e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 810b560 <HAL_RCC_GetSysClockFreq+0x2ec>
 810b442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b446:	4b40      	ldr	r3, [pc, #256]	@ (810b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810b448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b44a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b44e:	ee07 3a90 	vmov	s15, r3
 810b452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b456:	ed97 6a02 	vldr	s12, [r7, #8]
 810b45a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 810b558 <HAL_RCC_GetSysClockFreq+0x2e4>
 810b45e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b46a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b472:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810b476:	e043      	b.n	810b500 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810b478:	693b      	ldr	r3, [r7, #16]
 810b47a:	ee07 3a90 	vmov	s15, r3
 810b47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b482:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810b564 <HAL_RCC_GetSysClockFreq+0x2f0>
 810b486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b48a:	4b2f      	ldr	r3, [pc, #188]	@ (810b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810b48c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b48e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b492:	ee07 3a90 	vmov	s15, r3
 810b496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b49a:	ed97 6a02 	vldr	s12, [r7, #8]
 810b49e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 810b558 <HAL_RCC_GetSysClockFreq+0x2e4>
 810b4a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b4a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b4aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b4ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b4b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b4b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810b4ba:	e021      	b.n	810b500 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810b4bc:	693b      	ldr	r3, [r7, #16]
 810b4be:	ee07 3a90 	vmov	s15, r3
 810b4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810b4c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 810b560 <HAL_RCC_GetSysClockFreq+0x2ec>
 810b4ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810b4ce:	4b1e      	ldr	r3, [pc, #120]	@ (810b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810b4d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810b4d6:	ee07 3a90 	vmov	s15, r3
 810b4da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810b4de:	ed97 6a02 	vldr	s12, [r7, #8]
 810b4e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 810b558 <HAL_RCC_GetSysClockFreq+0x2e4>
 810b4e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810b4ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810b4ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810b4f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810b4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810b4fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810b4fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810b500:	4b11      	ldr	r3, [pc, #68]	@ (810b548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810b502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b504:	0a5b      	lsrs	r3, r3, #9
 810b506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810b50a:	3301      	adds	r3, #1
 810b50c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810b50e:	683b      	ldr	r3, [r7, #0]
 810b510:	ee07 3a90 	vmov	s15, r3
 810b514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810b518:	edd7 6a07 	vldr	s13, [r7, #28]
 810b51c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810b520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810b524:	ee17 3a90 	vmov	r3, s15
 810b528:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810b52a:	e005      	b.n	810b538 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810b52c:	2300      	movs	r3, #0
 810b52e:	61bb      	str	r3, [r7, #24]
      break;
 810b530:	e002      	b.n	810b538 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810b532:	4b07      	ldr	r3, [pc, #28]	@ (810b550 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810b534:	61bb      	str	r3, [r7, #24]
      break;
 810b536:	bf00      	nop
  }

  return sysclockfreq;
 810b538:	69bb      	ldr	r3, [r7, #24]
}
 810b53a:	4618      	mov	r0, r3
 810b53c:	3724      	adds	r7, #36	@ 0x24
 810b53e:	46bd      	mov	sp, r7
 810b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b544:	4770      	bx	lr
 810b546:	bf00      	nop
 810b548:	58024400 	.word	0x58024400
 810b54c:	03d09000 	.word	0x03d09000
 810b550:	003d0900 	.word	0x003d0900
 810b554:	017d7840 	.word	0x017d7840
 810b558:	46000000 	.word	0x46000000
 810b55c:	4c742400 	.word	0x4c742400
 810b560:	4a742400 	.word	0x4a742400
 810b564:	4bbebc20 	.word	0x4bbebc20

0810b568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810b568:	b580      	push	{r7, lr}
 810b56a:	b082      	sub	sp, #8
 810b56c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810b56e:	f7ff fe81 	bl	810b274 <HAL_RCC_GetSysClockFreq>
 810b572:	4602      	mov	r2, r0
 810b574:	4b11      	ldr	r3, [pc, #68]	@ (810b5bc <HAL_RCC_GetHCLKFreq+0x54>)
 810b576:	699b      	ldr	r3, [r3, #24]
 810b578:	0a1b      	lsrs	r3, r3, #8
 810b57a:	f003 030f 	and.w	r3, r3, #15
 810b57e:	4910      	ldr	r1, [pc, #64]	@ (810b5c0 <HAL_RCC_GetHCLKFreq+0x58>)
 810b580:	5ccb      	ldrb	r3, [r1, r3]
 810b582:	f003 031f 	and.w	r3, r3, #31
 810b586:	fa22 f303 	lsr.w	r3, r2, r3
 810b58a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810b58c:	4b0b      	ldr	r3, [pc, #44]	@ (810b5bc <HAL_RCC_GetHCLKFreq+0x54>)
 810b58e:	699b      	ldr	r3, [r3, #24]
 810b590:	f003 030f 	and.w	r3, r3, #15
 810b594:	4a0a      	ldr	r2, [pc, #40]	@ (810b5c0 <HAL_RCC_GetHCLKFreq+0x58>)
 810b596:	5cd3      	ldrb	r3, [r2, r3]
 810b598:	f003 031f 	and.w	r3, r3, #31
 810b59c:	687a      	ldr	r2, [r7, #4]
 810b59e:	fa22 f303 	lsr.w	r3, r2, r3
 810b5a2:	4a08      	ldr	r2, [pc, #32]	@ (810b5c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 810b5a4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810b5a6:	4b07      	ldr	r3, [pc, #28]	@ (810b5c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 810b5a8:	681b      	ldr	r3, [r3, #0]
 810b5aa:	4a07      	ldr	r2, [pc, #28]	@ (810b5c8 <HAL_RCC_GetHCLKFreq+0x60>)
 810b5ac:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810b5ae:	4b05      	ldr	r3, [pc, #20]	@ (810b5c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 810b5b0:	681b      	ldr	r3, [r3, #0]
}
 810b5b2:	4618      	mov	r0, r3
 810b5b4:	3708      	adds	r7, #8
 810b5b6:	46bd      	mov	sp, r7
 810b5b8:	bd80      	pop	{r7, pc}
 810b5ba:	bf00      	nop
 810b5bc:	58024400 	.word	0x58024400
 810b5c0:	081224b8 	.word	0x081224b8
 810b5c4:	10000018 	.word	0x10000018
 810b5c8:	10000014 	.word	0x10000014

0810b5cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810b5cc:	b580      	push	{r7, lr}
 810b5ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810b5d0:	f7ff ffca 	bl	810b568 <HAL_RCC_GetHCLKFreq>
 810b5d4:	4602      	mov	r2, r0
 810b5d6:	4b06      	ldr	r3, [pc, #24]	@ (810b5f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 810b5d8:	69db      	ldr	r3, [r3, #28]
 810b5da:	091b      	lsrs	r3, r3, #4
 810b5dc:	f003 0307 	and.w	r3, r3, #7
 810b5e0:	4904      	ldr	r1, [pc, #16]	@ (810b5f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 810b5e2:	5ccb      	ldrb	r3, [r1, r3]
 810b5e4:	f003 031f 	and.w	r3, r3, #31
 810b5e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810b5ec:	4618      	mov	r0, r3
 810b5ee:	bd80      	pop	{r7, pc}
 810b5f0:	58024400 	.word	0x58024400
 810b5f4:	081224b8 	.word	0x081224b8

0810b5f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 810b5f8:	b480      	push	{r7}
 810b5fa:	b083      	sub	sp, #12
 810b5fc:	af00      	add	r7, sp, #0
 810b5fe:	6078      	str	r0, [r7, #4]
 810b600:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810b602:	687b      	ldr	r3, [r7, #4]
 810b604:	223f      	movs	r2, #63	@ 0x3f
 810b606:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 810b608:	4b1a      	ldr	r3, [pc, #104]	@ (810b674 <HAL_RCC_GetClockConfig+0x7c>)
 810b60a:	691b      	ldr	r3, [r3, #16]
 810b60c:	f003 0207 	and.w	r2, r3, #7
 810b610:	687b      	ldr	r3, [r7, #4]
 810b612:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810b614:	4b17      	ldr	r3, [pc, #92]	@ (810b674 <HAL_RCC_GetClockConfig+0x7c>)
 810b616:	699b      	ldr	r3, [r3, #24]
 810b618:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 810b61c:	687b      	ldr	r3, [r7, #4]
 810b61e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810b620:	4b14      	ldr	r3, [pc, #80]	@ (810b674 <HAL_RCC_GetClockConfig+0x7c>)
 810b622:	699b      	ldr	r3, [r3, #24]
 810b624:	f003 020f 	and.w	r2, r3, #15
 810b628:	687b      	ldr	r3, [r7, #4]
 810b62a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 810b62c:	4b11      	ldr	r3, [pc, #68]	@ (810b674 <HAL_RCC_GetClockConfig+0x7c>)
 810b62e:	699b      	ldr	r3, [r3, #24]
 810b630:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810b634:	687b      	ldr	r3, [r7, #4]
 810b636:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 810b638:	4b0e      	ldr	r3, [pc, #56]	@ (810b674 <HAL_RCC_GetClockConfig+0x7c>)
 810b63a:	69db      	ldr	r3, [r3, #28]
 810b63c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810b640:	687b      	ldr	r3, [r7, #4]
 810b642:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 810b644:	4b0b      	ldr	r3, [pc, #44]	@ (810b674 <HAL_RCC_GetClockConfig+0x7c>)
 810b646:	69db      	ldr	r3, [r3, #28]
 810b648:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810b64c:	687b      	ldr	r3, [r7, #4]
 810b64e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810b650:	4b08      	ldr	r3, [pc, #32]	@ (810b674 <HAL_RCC_GetClockConfig+0x7c>)
 810b652:	6a1b      	ldr	r3, [r3, #32]
 810b654:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810b658:	687b      	ldr	r3, [r7, #4]
 810b65a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 810b65c:	4b06      	ldr	r3, [pc, #24]	@ (810b678 <HAL_RCC_GetClockConfig+0x80>)
 810b65e:	681b      	ldr	r3, [r3, #0]
 810b660:	f003 020f 	and.w	r2, r3, #15
 810b664:	683b      	ldr	r3, [r7, #0]
 810b666:	601a      	str	r2, [r3, #0]
}
 810b668:	bf00      	nop
 810b66a:	370c      	adds	r7, #12
 810b66c:	46bd      	mov	sp, r7
 810b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b672:	4770      	bx	lr
 810b674:	58024400 	.word	0x58024400
 810b678:	52002000 	.word	0x52002000

0810b67c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810b67c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810b680:	b0cc      	sub	sp, #304	@ 0x130
 810b682:	af00      	add	r7, sp, #0
 810b684:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810b688:	2300      	movs	r3, #0
 810b68a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810b68e:	2300      	movs	r3, #0
 810b690:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810b694:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b69c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 810b6a0:	2500      	movs	r5, #0
 810b6a2:	ea54 0305 	orrs.w	r3, r4, r5
 810b6a6:	d049      	beq.n	810b73c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810b6a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b6ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b6ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810b6b2:	d02f      	beq.n	810b714 <HAL_RCCEx_PeriphCLKConfig+0x98>
 810b6b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810b6b8:	d828      	bhi.n	810b70c <HAL_RCCEx_PeriphCLKConfig+0x90>
 810b6ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810b6be:	d01a      	beq.n	810b6f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 810b6c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810b6c4:	d822      	bhi.n	810b70c <HAL_RCCEx_PeriphCLKConfig+0x90>
 810b6c6:	2b00      	cmp	r3, #0
 810b6c8:	d003      	beq.n	810b6d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810b6ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b6ce:	d007      	beq.n	810b6e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810b6d0:	e01c      	b.n	810b70c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b6d2:	4bb8      	ldr	r3, [pc, #736]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b6d6:	4ab7      	ldr	r2, [pc, #732]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b6d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b6dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810b6de:	e01a      	b.n	810b716 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810b6e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b6e4:	3308      	adds	r3, #8
 810b6e6:	2102      	movs	r1, #2
 810b6e8:	4618      	mov	r0, r3
 810b6ea:	f001 fa11 	bl	810cb10 <RCCEx_PLL2_Config>
 810b6ee:	4603      	mov	r3, r0
 810b6f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810b6f4:	e00f      	b.n	810b716 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b6f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b6fa:	3328      	adds	r3, #40	@ 0x28
 810b6fc:	2102      	movs	r1, #2
 810b6fe:	4618      	mov	r0, r3
 810b700:	f001 fab8 	bl	810cc74 <RCCEx_PLL3_Config>
 810b704:	4603      	mov	r3, r0
 810b706:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810b70a:	e004      	b.n	810b716 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b70c:	2301      	movs	r3, #1
 810b70e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b712:	e000      	b.n	810b716 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810b714:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b716:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b71a:	2b00      	cmp	r3, #0
 810b71c:	d10a      	bne.n	810b734 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810b71e:	4ba5      	ldr	r3, [pc, #660]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b722:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810b726:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b72a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b72c:	4aa1      	ldr	r2, [pc, #644]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b72e:	430b      	orrs	r3, r1
 810b730:	6513      	str	r3, [r2, #80]	@ 0x50
 810b732:	e003      	b.n	810b73c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b734:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b738:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810b73c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b740:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b744:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 810b748:	f04f 0900 	mov.w	r9, #0
 810b74c:	ea58 0309 	orrs.w	r3, r8, r9
 810b750:	d047      	beq.n	810b7e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810b752:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810b758:	2b04      	cmp	r3, #4
 810b75a:	d82a      	bhi.n	810b7b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810b75c:	a201      	add	r2, pc, #4	@ (adr r2, 810b764 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810b75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b762:	bf00      	nop
 810b764:	0810b779 	.word	0x0810b779
 810b768:	0810b787 	.word	0x0810b787
 810b76c:	0810b79d 	.word	0x0810b79d
 810b770:	0810b7bb 	.word	0x0810b7bb
 810b774:	0810b7bb 	.word	0x0810b7bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b778:	4b8e      	ldr	r3, [pc, #568]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b77c:	4a8d      	ldr	r2, [pc, #564]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b77e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810b784:	e01a      	b.n	810b7bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b786:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b78a:	3308      	adds	r3, #8
 810b78c:	2100      	movs	r1, #0
 810b78e:	4618      	mov	r0, r3
 810b790:	f001 f9be 	bl	810cb10 <RCCEx_PLL2_Config>
 810b794:	4603      	mov	r3, r0
 810b796:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810b79a:	e00f      	b.n	810b7bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810b79c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b7a0:	3328      	adds	r3, #40	@ 0x28
 810b7a2:	2100      	movs	r1, #0
 810b7a4:	4618      	mov	r0, r3
 810b7a6:	f001 fa65 	bl	810cc74 <RCCEx_PLL3_Config>
 810b7aa:	4603      	mov	r3, r0
 810b7ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810b7b0:	e004      	b.n	810b7bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b7b2:	2301      	movs	r3, #1
 810b7b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b7b8:	e000      	b.n	810b7bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810b7ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b7bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b7c0:	2b00      	cmp	r3, #0
 810b7c2:	d10a      	bne.n	810b7da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810b7c4:	4b7b      	ldr	r3, [pc, #492]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b7c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b7c8:	f023 0107 	bic.w	r1, r3, #7
 810b7cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b7d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810b7d2:	4a78      	ldr	r2, [pc, #480]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b7d4:	430b      	orrs	r3, r1
 810b7d6:	6513      	str	r3, [r2, #80]	@ 0x50
 810b7d8:	e003      	b.n	810b7e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b7da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b7de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810b7e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b7ea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810b7ee:	f04f 0b00 	mov.w	fp, #0
 810b7f2:	ea5a 030b 	orrs.w	r3, sl, fp
 810b7f6:	d04c      	beq.n	810b892 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810b7f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b7fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810b7fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b802:	d030      	beq.n	810b866 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810b804:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b808:	d829      	bhi.n	810b85e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810b80a:	2bc0      	cmp	r3, #192	@ 0xc0
 810b80c:	d02d      	beq.n	810b86a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810b80e:	2bc0      	cmp	r3, #192	@ 0xc0
 810b810:	d825      	bhi.n	810b85e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810b812:	2b80      	cmp	r3, #128	@ 0x80
 810b814:	d018      	beq.n	810b848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810b816:	2b80      	cmp	r3, #128	@ 0x80
 810b818:	d821      	bhi.n	810b85e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810b81a:	2b00      	cmp	r3, #0
 810b81c:	d002      	beq.n	810b824 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810b81e:	2b40      	cmp	r3, #64	@ 0x40
 810b820:	d007      	beq.n	810b832 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810b822:	e01c      	b.n	810b85e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b824:	4b63      	ldr	r3, [pc, #396]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b828:	4a62      	ldr	r2, [pc, #392]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b82a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b82e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810b830:	e01c      	b.n	810b86c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b832:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b836:	3308      	adds	r3, #8
 810b838:	2100      	movs	r1, #0
 810b83a:	4618      	mov	r0, r3
 810b83c:	f001 f968 	bl	810cb10 <RCCEx_PLL2_Config>
 810b840:	4603      	mov	r3, r0
 810b842:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810b846:	e011      	b.n	810b86c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810b848:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b84c:	3328      	adds	r3, #40	@ 0x28
 810b84e:	2100      	movs	r1, #0
 810b850:	4618      	mov	r0, r3
 810b852:	f001 fa0f 	bl	810cc74 <RCCEx_PLL3_Config>
 810b856:	4603      	mov	r3, r0
 810b858:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810b85c:	e006      	b.n	810b86c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b85e:	2301      	movs	r3, #1
 810b860:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b864:	e002      	b.n	810b86c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810b866:	bf00      	nop
 810b868:	e000      	b.n	810b86c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810b86a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b86c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b870:	2b00      	cmp	r3, #0
 810b872:	d10a      	bne.n	810b88a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810b874:	4b4f      	ldr	r3, [pc, #316]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b878:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810b87c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810b882:	4a4c      	ldr	r2, [pc, #304]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b884:	430b      	orrs	r3, r1
 810b886:	6513      	str	r3, [r2, #80]	@ 0x50
 810b888:	e003      	b.n	810b892 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b88a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b88e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810b892:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b896:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b89a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810b89e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 810b8a2:	2300      	movs	r3, #0
 810b8a4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 810b8a8:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 810b8ac:	460b      	mov	r3, r1
 810b8ae:	4313      	orrs	r3, r2
 810b8b0:	d053      	beq.n	810b95a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810b8b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b8b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810b8ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810b8be:	d035      	beq.n	810b92c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 810b8c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810b8c4:	d82e      	bhi.n	810b924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810b8c6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810b8ca:	d031      	beq.n	810b930 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810b8cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810b8d0:	d828      	bhi.n	810b924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810b8d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810b8d6:	d01a      	beq.n	810b90e <HAL_RCCEx_PeriphCLKConfig+0x292>
 810b8d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810b8dc:	d822      	bhi.n	810b924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810b8de:	2b00      	cmp	r3, #0
 810b8e0:	d003      	beq.n	810b8ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810b8e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810b8e6:	d007      	beq.n	810b8f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810b8e8:	e01c      	b.n	810b924 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b8ea:	4b32      	ldr	r3, [pc, #200]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b8ee:	4a31      	ldr	r2, [pc, #196]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b8f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b8f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810b8f6:	e01c      	b.n	810b932 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b8f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b8fc:	3308      	adds	r3, #8
 810b8fe:	2100      	movs	r1, #0
 810b900:	4618      	mov	r0, r3
 810b902:	f001 f905 	bl	810cb10 <RCCEx_PLL2_Config>
 810b906:	4603      	mov	r3, r0
 810b908:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810b90c:	e011      	b.n	810b932 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810b90e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b912:	3328      	adds	r3, #40	@ 0x28
 810b914:	2100      	movs	r1, #0
 810b916:	4618      	mov	r0, r3
 810b918:	f001 f9ac 	bl	810cc74 <RCCEx_PLL3_Config>
 810b91c:	4603      	mov	r3, r0
 810b91e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810b922:	e006      	b.n	810b932 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810b924:	2301      	movs	r3, #1
 810b926:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b92a:	e002      	b.n	810b932 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810b92c:	bf00      	nop
 810b92e:	e000      	b.n	810b932 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810b930:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b932:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b936:	2b00      	cmp	r3, #0
 810b938:	d10b      	bne.n	810b952 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810b93a:	4b1e      	ldr	r3, [pc, #120]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b93c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b93e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810b942:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b946:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810b94a:	4a1a      	ldr	r2, [pc, #104]	@ (810b9b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810b94c:	430b      	orrs	r3, r1
 810b94e:	6593      	str	r3, [r2, #88]	@ 0x58
 810b950:	e003      	b.n	810b95a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b952:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b956:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810b95a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b962:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810b966:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810b96a:	2300      	movs	r3, #0
 810b96c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 810b970:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810b974:	460b      	mov	r3, r1
 810b976:	4313      	orrs	r3, r2
 810b978:	d056      	beq.n	810ba28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810b97a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b97e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810b982:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810b986:	d038      	beq.n	810b9fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 810b988:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810b98c:	d831      	bhi.n	810b9f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810b98e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810b992:	d034      	beq.n	810b9fe <HAL_RCCEx_PeriphCLKConfig+0x382>
 810b994:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810b998:	d82b      	bhi.n	810b9f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810b99a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b99e:	d01d      	beq.n	810b9dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 810b9a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810b9a4:	d825      	bhi.n	810b9f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810b9a6:	2b00      	cmp	r3, #0
 810b9a8:	d006      	beq.n	810b9b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810b9aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810b9ae:	d00a      	beq.n	810b9c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810b9b0:	e01f      	b.n	810b9f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810b9b2:	bf00      	nop
 810b9b4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b9b8:	4ba2      	ldr	r3, [pc, #648]	@ (810bc44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810b9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b9bc:	4aa1      	ldr	r2, [pc, #644]	@ (810bc44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810b9be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b9c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810b9c4:	e01c      	b.n	810ba00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b9c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b9ca:	3308      	adds	r3, #8
 810b9cc:	2100      	movs	r1, #0
 810b9ce:	4618      	mov	r0, r3
 810b9d0:	f001 f89e 	bl	810cb10 <RCCEx_PLL2_Config>
 810b9d4:	4603      	mov	r3, r0
 810b9d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810b9da:	e011      	b.n	810ba00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810b9dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b9e0:	3328      	adds	r3, #40	@ 0x28
 810b9e2:	2100      	movs	r1, #0
 810b9e4:	4618      	mov	r0, r3
 810b9e6:	f001 f945 	bl	810cc74 <RCCEx_PLL3_Config>
 810b9ea:	4603      	mov	r3, r0
 810b9ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810b9f0:	e006      	b.n	810ba00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810b9f2:	2301      	movs	r3, #1
 810b9f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b9f8:	e002      	b.n	810ba00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810b9fa:	bf00      	nop
 810b9fc:	e000      	b.n	810ba00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810b9fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ba00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ba04:	2b00      	cmp	r3, #0
 810ba06:	d10b      	bne.n	810ba20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810ba08:	4b8e      	ldr	r3, [pc, #568]	@ (810bc44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810ba0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ba0c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 810ba10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ba14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810ba18:	4a8a      	ldr	r2, [pc, #552]	@ (810bc44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810ba1a:	430b      	orrs	r3, r1
 810ba1c:	6593      	str	r3, [r2, #88]	@ 0x58
 810ba1e:	e003      	b.n	810ba28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ba20:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ba24:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810ba28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ba30:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810ba34:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810ba38:	2300      	movs	r3, #0
 810ba3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810ba3e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810ba42:	460b      	mov	r3, r1
 810ba44:	4313      	orrs	r3, r2
 810ba46:	d03a      	beq.n	810babe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810ba48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ba4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810ba4e:	2b30      	cmp	r3, #48	@ 0x30
 810ba50:	d01f      	beq.n	810ba92 <HAL_RCCEx_PeriphCLKConfig+0x416>
 810ba52:	2b30      	cmp	r3, #48	@ 0x30
 810ba54:	d819      	bhi.n	810ba8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810ba56:	2b20      	cmp	r3, #32
 810ba58:	d00c      	beq.n	810ba74 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810ba5a:	2b20      	cmp	r3, #32
 810ba5c:	d815      	bhi.n	810ba8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810ba5e:	2b00      	cmp	r3, #0
 810ba60:	d019      	beq.n	810ba96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810ba62:	2b10      	cmp	r3, #16
 810ba64:	d111      	bne.n	810ba8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810ba66:	4b77      	ldr	r3, [pc, #476]	@ (810bc44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810ba68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ba6a:	4a76      	ldr	r2, [pc, #472]	@ (810bc44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810ba6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810ba70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810ba72:	e011      	b.n	810ba98 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810ba74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ba78:	3308      	adds	r3, #8
 810ba7a:	2102      	movs	r1, #2
 810ba7c:	4618      	mov	r0, r3
 810ba7e:	f001 f847 	bl	810cb10 <RCCEx_PLL2_Config>
 810ba82:	4603      	mov	r3, r0
 810ba84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810ba88:	e006      	b.n	810ba98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810ba8a:	2301      	movs	r3, #1
 810ba8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810ba90:	e002      	b.n	810ba98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810ba92:	bf00      	nop
 810ba94:	e000      	b.n	810ba98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810ba96:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ba98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ba9c:	2b00      	cmp	r3, #0
 810ba9e:	d10a      	bne.n	810bab6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810baa0:	4b68      	ldr	r3, [pc, #416]	@ (810bc44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810baa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810baa4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 810baa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810baac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810baae:	4a65      	ldr	r2, [pc, #404]	@ (810bc44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810bab0:	430b      	orrs	r3, r1
 810bab2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810bab4:	e003      	b.n	810babe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810bab6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810baba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810babe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bac6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810baca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 810bace:	2300      	movs	r3, #0
 810bad0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810bad4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810bad8:	460b      	mov	r3, r1
 810bada:	4313      	orrs	r3, r2
 810badc:	d051      	beq.n	810bb82 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810bade:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810bae4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810bae8:	d035      	beq.n	810bb56 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810baea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810baee:	d82e      	bhi.n	810bb4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810baf0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810baf4:	d031      	beq.n	810bb5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810baf6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810bafa:	d828      	bhi.n	810bb4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810bafc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810bb00:	d01a      	beq.n	810bb38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810bb02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810bb06:	d822      	bhi.n	810bb4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810bb08:	2b00      	cmp	r3, #0
 810bb0a:	d003      	beq.n	810bb14 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810bb0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810bb10:	d007      	beq.n	810bb22 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810bb12:	e01c      	b.n	810bb4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810bb14:	4b4b      	ldr	r3, [pc, #300]	@ (810bc44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810bb16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb18:	4a4a      	ldr	r2, [pc, #296]	@ (810bc44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810bb1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810bb1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810bb20:	e01c      	b.n	810bb5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810bb22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bb26:	3308      	adds	r3, #8
 810bb28:	2100      	movs	r1, #0
 810bb2a:	4618      	mov	r0, r3
 810bb2c:	f000 fff0 	bl	810cb10 <RCCEx_PLL2_Config>
 810bb30:	4603      	mov	r3, r0
 810bb32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810bb36:	e011      	b.n	810bb5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810bb38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bb3c:	3328      	adds	r3, #40	@ 0x28
 810bb3e:	2100      	movs	r1, #0
 810bb40:	4618      	mov	r0, r3
 810bb42:	f001 f897 	bl	810cc74 <RCCEx_PLL3_Config>
 810bb46:	4603      	mov	r3, r0
 810bb48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810bb4c:	e006      	b.n	810bb5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810bb4e:	2301      	movs	r3, #1
 810bb50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810bb54:	e002      	b.n	810bb5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810bb56:	bf00      	nop
 810bb58:	e000      	b.n	810bb5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810bb5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810bb5c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810bb60:	2b00      	cmp	r3, #0
 810bb62:	d10a      	bne.n	810bb7a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810bb64:	4b37      	ldr	r3, [pc, #220]	@ (810bc44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810bb66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810bb68:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810bb6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bb70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810bb72:	4a34      	ldr	r2, [pc, #208]	@ (810bc44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810bb74:	430b      	orrs	r3, r1
 810bb76:	6513      	str	r3, [r2, #80]	@ 0x50
 810bb78:	e003      	b.n	810bb82 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810bb7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810bb7e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810bb82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bb8a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810bb8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810bb92:	2300      	movs	r3, #0
 810bb94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 810bb98:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 810bb9c:	460b      	mov	r3, r1
 810bb9e:	4313      	orrs	r3, r2
 810bba0:	d056      	beq.n	810bc50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810bba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bba6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810bba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810bbac:	d033      	beq.n	810bc16 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810bbae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810bbb2:	d82c      	bhi.n	810bc0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 810bbb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810bbb8:	d02f      	beq.n	810bc1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810bbba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810bbbe:	d826      	bhi.n	810bc0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 810bbc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810bbc4:	d02b      	beq.n	810bc1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810bbc6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810bbca:	d820      	bhi.n	810bc0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 810bbcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810bbd0:	d012      	beq.n	810bbf8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810bbd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810bbd6:	d81a      	bhi.n	810bc0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 810bbd8:	2b00      	cmp	r3, #0
 810bbda:	d022      	beq.n	810bc22 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810bbdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bbe0:	d115      	bne.n	810bc0e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810bbe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bbe6:	3308      	adds	r3, #8
 810bbe8:	2101      	movs	r1, #1
 810bbea:	4618      	mov	r0, r3
 810bbec:	f000 ff90 	bl	810cb10 <RCCEx_PLL2_Config>
 810bbf0:	4603      	mov	r3, r0
 810bbf2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810bbf6:	e015      	b.n	810bc24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810bbf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bbfc:	3328      	adds	r3, #40	@ 0x28
 810bbfe:	2101      	movs	r1, #1
 810bc00:	4618      	mov	r0, r3
 810bc02:	f001 f837 	bl	810cc74 <RCCEx_PLL3_Config>
 810bc06:	4603      	mov	r3, r0
 810bc08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810bc0c:	e00a      	b.n	810bc24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810bc0e:	2301      	movs	r3, #1
 810bc10:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810bc14:	e006      	b.n	810bc24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810bc16:	bf00      	nop
 810bc18:	e004      	b.n	810bc24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810bc1a:	bf00      	nop
 810bc1c:	e002      	b.n	810bc24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810bc1e:	bf00      	nop
 810bc20:	e000      	b.n	810bc24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810bc22:	bf00      	nop
    }

    if (ret == HAL_OK)
 810bc24:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810bc28:	2b00      	cmp	r3, #0
 810bc2a:	d10d      	bne.n	810bc48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810bc2c:	4b05      	ldr	r3, [pc, #20]	@ (810bc44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810bc2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810bc30:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810bc34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bc38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810bc3a:	4a02      	ldr	r2, [pc, #8]	@ (810bc44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810bc3c:	430b      	orrs	r3, r1
 810bc3e:	6513      	str	r3, [r2, #80]	@ 0x50
 810bc40:	e006      	b.n	810bc50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810bc42:	bf00      	nop
 810bc44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810bc48:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810bc4c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810bc50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bc58:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810bc5c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810bc60:	2300      	movs	r3, #0
 810bc62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 810bc66:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810bc6a:	460b      	mov	r3, r1
 810bc6c:	4313      	orrs	r3, r2
 810bc6e:	d055      	beq.n	810bd1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810bc70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bc74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810bc78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810bc7c:	d033      	beq.n	810bce6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810bc7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810bc82:	d82c      	bhi.n	810bcde <HAL_RCCEx_PeriphCLKConfig+0x662>
 810bc84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bc88:	d02f      	beq.n	810bcea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810bc8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bc8e:	d826      	bhi.n	810bcde <HAL_RCCEx_PeriphCLKConfig+0x662>
 810bc90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810bc94:	d02b      	beq.n	810bcee <HAL_RCCEx_PeriphCLKConfig+0x672>
 810bc96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810bc9a:	d820      	bhi.n	810bcde <HAL_RCCEx_PeriphCLKConfig+0x662>
 810bc9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bca0:	d012      	beq.n	810bcc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810bca2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bca6:	d81a      	bhi.n	810bcde <HAL_RCCEx_PeriphCLKConfig+0x662>
 810bca8:	2b00      	cmp	r3, #0
 810bcaa:	d022      	beq.n	810bcf2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810bcac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810bcb0:	d115      	bne.n	810bcde <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810bcb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bcb6:	3308      	adds	r3, #8
 810bcb8:	2101      	movs	r1, #1
 810bcba:	4618      	mov	r0, r3
 810bcbc:	f000 ff28 	bl	810cb10 <RCCEx_PLL2_Config>
 810bcc0:	4603      	mov	r3, r0
 810bcc2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810bcc6:	e015      	b.n	810bcf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810bcc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bccc:	3328      	adds	r3, #40	@ 0x28
 810bcce:	2101      	movs	r1, #1
 810bcd0:	4618      	mov	r0, r3
 810bcd2:	f000 ffcf 	bl	810cc74 <RCCEx_PLL3_Config>
 810bcd6:	4603      	mov	r3, r0
 810bcd8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810bcdc:	e00a      	b.n	810bcf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810bcde:	2301      	movs	r3, #1
 810bce0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810bce4:	e006      	b.n	810bcf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810bce6:	bf00      	nop
 810bce8:	e004      	b.n	810bcf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810bcea:	bf00      	nop
 810bcec:	e002      	b.n	810bcf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810bcee:	bf00      	nop
 810bcf0:	e000      	b.n	810bcf4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810bcf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 810bcf4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810bcf8:	2b00      	cmp	r3, #0
 810bcfa:	d10b      	bne.n	810bd14 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810bcfc:	4bb7      	ldr	r3, [pc, #732]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bcfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810bd00:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810bd04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bd08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810bd0c:	4ab3      	ldr	r2, [pc, #716]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bd0e:	430b      	orrs	r3, r1
 810bd10:	6593      	str	r3, [r2, #88]	@ 0x58
 810bd12:	e003      	b.n	810bd1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810bd14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810bd18:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 810bd1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bd24:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 810bd28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 810bd2c:	2300      	movs	r3, #0
 810bd2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810bd32:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810bd36:	460b      	mov	r3, r1
 810bd38:	4313      	orrs	r3, r2
 810bd3a:	d02a      	beq.n	810bd92 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 810bd3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bd40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810bd42:	2b00      	cmp	r3, #0
 810bd44:	d011      	beq.n	810bd6a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 810bd46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810bd4a:	d10a      	bne.n	810bd62 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810bd4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bd50:	3308      	adds	r3, #8
 810bd52:	2101      	movs	r1, #1
 810bd54:	4618      	mov	r0, r3
 810bd56:	f000 fedb 	bl	810cb10 <RCCEx_PLL2_Config>
 810bd5a:	4603      	mov	r3, r0
 810bd5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 810bd60:	e004      	b.n	810bd6c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810bd62:	2301      	movs	r3, #1
 810bd64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810bd68:	e000      	b.n	810bd6c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 810bd6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810bd6c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810bd70:	2b00      	cmp	r3, #0
 810bd72:	d10a      	bne.n	810bd8a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 810bd74:	4b99      	ldr	r3, [pc, #612]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bd76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810bd78:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 810bd7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bd80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810bd82:	4a96      	ldr	r2, [pc, #600]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bd84:	430b      	orrs	r3, r1
 810bd86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810bd88:	e003      	b.n	810bd92 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810bd8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810bd8e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810bd92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bd9a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810bd9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810bda2:	2300      	movs	r3, #0
 810bda4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810bda8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810bdac:	460b      	mov	r3, r1
 810bdae:	4313      	orrs	r3, r2
 810bdb0:	d037      	beq.n	810be22 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810bdb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bdb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810bdb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bdbc:	d00e      	beq.n	810bddc <HAL_RCCEx_PeriphCLKConfig+0x760>
 810bdbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bdc2:	d816      	bhi.n	810bdf2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 810bdc4:	2b00      	cmp	r3, #0
 810bdc6:	d018      	beq.n	810bdfa <HAL_RCCEx_PeriphCLKConfig+0x77e>
 810bdc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810bdcc:	d111      	bne.n	810bdf2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810bdce:	4b83      	ldr	r3, [pc, #524]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bdd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bdd2:	4a82      	ldr	r2, [pc, #520]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bdd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810bdd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810bdda:	e00f      	b.n	810bdfc <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810bddc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bde0:	3308      	adds	r3, #8
 810bde2:	2101      	movs	r1, #1
 810bde4:	4618      	mov	r0, r3
 810bde6:	f000 fe93 	bl	810cb10 <RCCEx_PLL2_Config>
 810bdea:	4603      	mov	r3, r0
 810bdec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810bdf0:	e004      	b.n	810bdfc <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810bdf2:	2301      	movs	r3, #1
 810bdf4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810bdf8:	e000      	b.n	810bdfc <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810bdfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 810bdfc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810be00:	2b00      	cmp	r3, #0
 810be02:	d10a      	bne.n	810be1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810be04:	4b75      	ldr	r3, [pc, #468]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810be06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810be08:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810be0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810be10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810be12:	4a72      	ldr	r2, [pc, #456]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810be14:	430b      	orrs	r3, r1
 810be16:	6513      	str	r3, [r2, #80]	@ 0x50
 810be18:	e003      	b.n	810be22 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810be1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810be1e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810be22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810be26:	e9d3 2300 	ldrd	r2, r3, [r3]
 810be2a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 810be2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810be32:	2300      	movs	r3, #0
 810be34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810be38:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810be3c:	460b      	mov	r3, r1
 810be3e:	4313      	orrs	r3, r2
 810be40:	d03a      	beq.n	810beb8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810be42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810be46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810be48:	2b03      	cmp	r3, #3
 810be4a:	d81d      	bhi.n	810be88 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 810be4c:	a201      	add	r2, pc, #4	@ (adr r2, 810be54 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 810be4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810be52:	bf00      	nop
 810be54:	0810be91 	.word	0x0810be91
 810be58:	0810be65 	.word	0x0810be65
 810be5c:	0810be73 	.word	0x0810be73
 810be60:	0810be91 	.word	0x0810be91
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810be64:	4b5d      	ldr	r3, [pc, #372]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810be66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810be68:	4a5c      	ldr	r2, [pc, #368]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810be6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810be6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810be70:	e00f      	b.n	810be92 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810be72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810be76:	3308      	adds	r3, #8
 810be78:	2102      	movs	r1, #2
 810be7a:	4618      	mov	r0, r3
 810be7c:	f000 fe48 	bl	810cb10 <RCCEx_PLL2_Config>
 810be80:	4603      	mov	r3, r0
 810be82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 810be86:	e004      	b.n	810be92 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810be88:	2301      	movs	r3, #1
 810be8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810be8e:	e000      	b.n	810be92 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 810be90:	bf00      	nop
    }

    if (ret == HAL_OK)
 810be92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810be96:	2b00      	cmp	r3, #0
 810be98:	d10a      	bne.n	810beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810be9a:	4b50      	ldr	r3, [pc, #320]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810be9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810be9e:	f023 0103 	bic.w	r1, r3, #3
 810bea2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810bea8:	4a4c      	ldr	r2, [pc, #304]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810beaa:	430b      	orrs	r3, r1
 810beac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810beae:	e003      	b.n	810beb8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810beb0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810beb4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810beb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bec0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 810bec4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810bec8:	2300      	movs	r3, #0
 810beca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810bece:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810bed2:	460b      	mov	r3, r1
 810bed4:	4313      	orrs	r3, r2
 810bed6:	f000 80a0 	beq.w	810c01a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810beda:	4b41      	ldr	r3, [pc, #260]	@ (810bfe0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810bedc:	681b      	ldr	r3, [r3, #0]
 810bede:	4a40      	ldr	r2, [pc, #256]	@ (810bfe0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810bee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810bee4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810bee6:	f7fc fa97 	bl	8108418 <HAL_GetTick>
 810beea:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810beee:	e00b      	b.n	810bf08 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810bef0:	f7fc fa92 	bl	8108418 <HAL_GetTick>
 810bef4:	4602      	mov	r2, r0
 810bef6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810befa:	1ad3      	subs	r3, r2, r3
 810befc:	2b64      	cmp	r3, #100	@ 0x64
 810befe:	d903      	bls.n	810bf08 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 810bf00:	2303      	movs	r3, #3
 810bf02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810bf06:	e005      	b.n	810bf14 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810bf08:	4b35      	ldr	r3, [pc, #212]	@ (810bfe0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810bf0a:	681b      	ldr	r3, [r3, #0]
 810bf0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810bf10:	2b00      	cmp	r3, #0
 810bf12:	d0ed      	beq.n	810bef0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 810bf14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810bf18:	2b00      	cmp	r3, #0
 810bf1a:	d17a      	bne.n	810c012 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810bf1c:	4b2f      	ldr	r3, [pc, #188]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bf1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810bf20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bf24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810bf28:	4053      	eors	r3, r2
 810bf2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810bf2e:	2b00      	cmp	r3, #0
 810bf30:	d015      	beq.n	810bf5e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810bf32:	4b2a      	ldr	r3, [pc, #168]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bf34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810bf36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810bf3a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810bf3e:	4b27      	ldr	r3, [pc, #156]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bf40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810bf42:	4a26      	ldr	r2, [pc, #152]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bf44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810bf48:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810bf4a:	4b24      	ldr	r3, [pc, #144]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bf4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810bf4e:	4a23      	ldr	r2, [pc, #140]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bf50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810bf54:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810bf56:	4a21      	ldr	r2, [pc, #132]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bf58:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 810bf5c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810bf5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bf62:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810bf66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810bf6a:	d118      	bne.n	810bf9e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810bf6c:	f7fc fa54 	bl	8108418 <HAL_GetTick>
 810bf70:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810bf74:	e00d      	b.n	810bf92 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810bf76:	f7fc fa4f 	bl	8108418 <HAL_GetTick>
 810bf7a:	4602      	mov	r2, r0
 810bf7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810bf80:	1ad2      	subs	r2, r2, r3
 810bf82:	f241 3388 	movw	r3, #5000	@ 0x1388
 810bf86:	429a      	cmp	r2, r3
 810bf88:	d903      	bls.n	810bf92 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 810bf8a:	2303      	movs	r3, #3
 810bf8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 810bf90:	e005      	b.n	810bf9e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810bf92:	4b12      	ldr	r3, [pc, #72]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bf94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810bf96:	f003 0302 	and.w	r3, r3, #2
 810bf9a:	2b00      	cmp	r3, #0
 810bf9c:	d0eb      	beq.n	810bf76 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 810bf9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810bfa2:	2b00      	cmp	r3, #0
 810bfa4:	d130      	bne.n	810c008 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810bfa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bfaa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810bfae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810bfb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810bfb6:	d115      	bne.n	810bfe4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 810bfb8:	4b08      	ldr	r3, [pc, #32]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bfba:	691b      	ldr	r3, [r3, #16]
 810bfbc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 810bfc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bfc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810bfc8:	091b      	lsrs	r3, r3, #4
 810bfca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810bfce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 810bfd2:	4a02      	ldr	r2, [pc, #8]	@ (810bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810bfd4:	430b      	orrs	r3, r1
 810bfd6:	6113      	str	r3, [r2, #16]
 810bfd8:	e00a      	b.n	810bff0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 810bfda:	bf00      	nop
 810bfdc:	58024400 	.word	0x58024400
 810bfe0:	58024800 	.word	0x58024800
 810bfe4:	4bd4      	ldr	r3, [pc, #848]	@ (810c338 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810bfe6:	691b      	ldr	r3, [r3, #16]
 810bfe8:	4ad3      	ldr	r2, [pc, #844]	@ (810c338 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810bfea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 810bfee:	6113      	str	r3, [r2, #16]
 810bff0:	4bd1      	ldr	r3, [pc, #836]	@ (810c338 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810bff2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810bff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810bff8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810bffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810c000:	4acd      	ldr	r2, [pc, #820]	@ (810c338 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810c002:	430b      	orrs	r3, r1
 810c004:	6713      	str	r3, [r2, #112]	@ 0x70
 810c006:	e008      	b.n	810c01a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810c008:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c00c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 810c010:	e003      	b.n	810c01a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c012:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c016:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810c01a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c022:	f002 0301 	and.w	r3, r2, #1
 810c026:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810c02a:	2300      	movs	r3, #0
 810c02c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810c030:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810c034:	460b      	mov	r3, r1
 810c036:	4313      	orrs	r3, r2
 810c038:	f000 808b 	beq.w	810c152 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810c03c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c044:	2b28      	cmp	r3, #40	@ 0x28
 810c046:	d86b      	bhi.n	810c120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 810c048:	a201      	add	r2, pc, #4	@ (adr r2, 810c050 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 810c04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c04e:	bf00      	nop
 810c050:	0810c129 	.word	0x0810c129
 810c054:	0810c121 	.word	0x0810c121
 810c058:	0810c121 	.word	0x0810c121
 810c05c:	0810c121 	.word	0x0810c121
 810c060:	0810c121 	.word	0x0810c121
 810c064:	0810c121 	.word	0x0810c121
 810c068:	0810c121 	.word	0x0810c121
 810c06c:	0810c121 	.word	0x0810c121
 810c070:	0810c0f5 	.word	0x0810c0f5
 810c074:	0810c121 	.word	0x0810c121
 810c078:	0810c121 	.word	0x0810c121
 810c07c:	0810c121 	.word	0x0810c121
 810c080:	0810c121 	.word	0x0810c121
 810c084:	0810c121 	.word	0x0810c121
 810c088:	0810c121 	.word	0x0810c121
 810c08c:	0810c121 	.word	0x0810c121
 810c090:	0810c10b 	.word	0x0810c10b
 810c094:	0810c121 	.word	0x0810c121
 810c098:	0810c121 	.word	0x0810c121
 810c09c:	0810c121 	.word	0x0810c121
 810c0a0:	0810c121 	.word	0x0810c121
 810c0a4:	0810c121 	.word	0x0810c121
 810c0a8:	0810c121 	.word	0x0810c121
 810c0ac:	0810c121 	.word	0x0810c121
 810c0b0:	0810c129 	.word	0x0810c129
 810c0b4:	0810c121 	.word	0x0810c121
 810c0b8:	0810c121 	.word	0x0810c121
 810c0bc:	0810c121 	.word	0x0810c121
 810c0c0:	0810c121 	.word	0x0810c121
 810c0c4:	0810c121 	.word	0x0810c121
 810c0c8:	0810c121 	.word	0x0810c121
 810c0cc:	0810c121 	.word	0x0810c121
 810c0d0:	0810c129 	.word	0x0810c129
 810c0d4:	0810c121 	.word	0x0810c121
 810c0d8:	0810c121 	.word	0x0810c121
 810c0dc:	0810c121 	.word	0x0810c121
 810c0e0:	0810c121 	.word	0x0810c121
 810c0e4:	0810c121 	.word	0x0810c121
 810c0e8:	0810c121 	.word	0x0810c121
 810c0ec:	0810c121 	.word	0x0810c121
 810c0f0:	0810c129 	.word	0x0810c129
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810c0f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c0f8:	3308      	adds	r3, #8
 810c0fa:	2101      	movs	r1, #1
 810c0fc:	4618      	mov	r0, r3
 810c0fe:	f000 fd07 	bl	810cb10 <RCCEx_PLL2_Config>
 810c102:	4603      	mov	r3, r0
 810c104:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810c108:	e00f      	b.n	810c12a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810c10a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c10e:	3328      	adds	r3, #40	@ 0x28
 810c110:	2101      	movs	r1, #1
 810c112:	4618      	mov	r0, r3
 810c114:	f000 fdae 	bl	810cc74 <RCCEx_PLL3_Config>
 810c118:	4603      	mov	r3, r0
 810c11a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810c11e:	e004      	b.n	810c12a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810c120:	2301      	movs	r3, #1
 810c122:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c126:	e000      	b.n	810c12a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 810c128:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c12a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c12e:	2b00      	cmp	r3, #0
 810c130:	d10b      	bne.n	810c14a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810c132:	4b81      	ldr	r3, [pc, #516]	@ (810c338 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810c134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c136:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810c13a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810c142:	4a7d      	ldr	r2, [pc, #500]	@ (810c338 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810c144:	430b      	orrs	r3, r1
 810c146:	6553      	str	r3, [r2, #84]	@ 0x54
 810c148:	e003      	b.n	810c152 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c14a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c14e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810c152:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c15a:	f002 0302 	and.w	r3, r2, #2
 810c15e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810c162:	2300      	movs	r3, #0
 810c164:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810c168:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 810c16c:	460b      	mov	r3, r1
 810c16e:	4313      	orrs	r3, r2
 810c170:	d042      	beq.n	810c1f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810c172:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c176:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810c178:	2b05      	cmp	r3, #5
 810c17a:	d825      	bhi.n	810c1c8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 810c17c:	a201      	add	r2, pc, #4	@ (adr r2, 810c184 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 810c17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c182:	bf00      	nop
 810c184:	0810c1d1 	.word	0x0810c1d1
 810c188:	0810c19d 	.word	0x0810c19d
 810c18c:	0810c1b3 	.word	0x0810c1b3
 810c190:	0810c1d1 	.word	0x0810c1d1
 810c194:	0810c1d1 	.word	0x0810c1d1
 810c198:	0810c1d1 	.word	0x0810c1d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810c19c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c1a0:	3308      	adds	r3, #8
 810c1a2:	2101      	movs	r1, #1
 810c1a4:	4618      	mov	r0, r3
 810c1a6:	f000 fcb3 	bl	810cb10 <RCCEx_PLL2_Config>
 810c1aa:	4603      	mov	r3, r0
 810c1ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810c1b0:	e00f      	b.n	810c1d2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810c1b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c1b6:	3328      	adds	r3, #40	@ 0x28
 810c1b8:	2101      	movs	r1, #1
 810c1ba:	4618      	mov	r0, r3
 810c1bc:	f000 fd5a 	bl	810cc74 <RCCEx_PLL3_Config>
 810c1c0:	4603      	mov	r3, r0
 810c1c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810c1c6:	e004      	b.n	810c1d2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810c1c8:	2301      	movs	r3, #1
 810c1ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c1ce:	e000      	b.n	810c1d2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 810c1d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c1d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c1d6:	2b00      	cmp	r3, #0
 810c1d8:	d10a      	bne.n	810c1f0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810c1da:	4b57      	ldr	r3, [pc, #348]	@ (810c338 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810c1dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c1de:	f023 0107 	bic.w	r1, r3, #7
 810c1e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c1e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810c1e8:	4a53      	ldr	r2, [pc, #332]	@ (810c338 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810c1ea:	430b      	orrs	r3, r1
 810c1ec:	6553      	str	r3, [r2, #84]	@ 0x54
 810c1ee:	e003      	b.n	810c1f8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c1f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c1f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810c1f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c200:	f002 0304 	and.w	r3, r2, #4
 810c204:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810c208:	2300      	movs	r3, #0
 810c20a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810c20e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810c212:	460b      	mov	r3, r1
 810c214:	4313      	orrs	r3, r2
 810c216:	d044      	beq.n	810c2a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810c218:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c21c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810c220:	2b05      	cmp	r3, #5
 810c222:	d825      	bhi.n	810c270 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 810c224:	a201      	add	r2, pc, #4	@ (adr r2, 810c22c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 810c226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c22a:	bf00      	nop
 810c22c:	0810c279 	.word	0x0810c279
 810c230:	0810c245 	.word	0x0810c245
 810c234:	0810c25b 	.word	0x0810c25b
 810c238:	0810c279 	.word	0x0810c279
 810c23c:	0810c279 	.word	0x0810c279
 810c240:	0810c279 	.word	0x0810c279
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810c244:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c248:	3308      	adds	r3, #8
 810c24a:	2101      	movs	r1, #1
 810c24c:	4618      	mov	r0, r3
 810c24e:	f000 fc5f 	bl	810cb10 <RCCEx_PLL2_Config>
 810c252:	4603      	mov	r3, r0
 810c254:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810c258:	e00f      	b.n	810c27a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810c25a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c25e:	3328      	adds	r3, #40	@ 0x28
 810c260:	2101      	movs	r1, #1
 810c262:	4618      	mov	r0, r3
 810c264:	f000 fd06 	bl	810cc74 <RCCEx_PLL3_Config>
 810c268:	4603      	mov	r3, r0
 810c26a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810c26e:	e004      	b.n	810c27a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810c270:	2301      	movs	r3, #1
 810c272:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c276:	e000      	b.n	810c27a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 810c278:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c27a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c27e:	2b00      	cmp	r3, #0
 810c280:	d10b      	bne.n	810c29a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810c282:	4b2d      	ldr	r3, [pc, #180]	@ (810c338 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810c284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810c286:	f023 0107 	bic.w	r1, r3, #7
 810c28a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c28e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810c292:	4a29      	ldr	r2, [pc, #164]	@ (810c338 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810c294:	430b      	orrs	r3, r1
 810c296:	6593      	str	r3, [r2, #88]	@ 0x58
 810c298:	e003      	b.n	810c2a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c29a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c29e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810c2a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c2aa:	f002 0320 	and.w	r3, r2, #32
 810c2ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810c2b2:	2300      	movs	r3, #0
 810c2b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810c2b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 810c2bc:	460b      	mov	r3, r1
 810c2be:	4313      	orrs	r3, r2
 810c2c0:	d057      	beq.n	810c372 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810c2c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c2c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810c2ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810c2ce:	d035      	beq.n	810c33c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 810c2d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810c2d4:	d82c      	bhi.n	810c330 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810c2d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810c2da:	d031      	beq.n	810c340 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 810c2dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810c2e0:	d826      	bhi.n	810c330 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810c2e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810c2e6:	d02d      	beq.n	810c344 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 810c2e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810c2ec:	d820      	bhi.n	810c330 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810c2ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810c2f2:	d012      	beq.n	810c31a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 810c2f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810c2f8:	d81a      	bhi.n	810c330 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810c2fa:	2b00      	cmp	r3, #0
 810c2fc:	d024      	beq.n	810c348 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 810c2fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810c302:	d115      	bne.n	810c330 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810c304:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c308:	3308      	adds	r3, #8
 810c30a:	2100      	movs	r1, #0
 810c30c:	4618      	mov	r0, r3
 810c30e:	f000 fbff 	bl	810cb10 <RCCEx_PLL2_Config>
 810c312:	4603      	mov	r3, r0
 810c314:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810c318:	e017      	b.n	810c34a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810c31a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c31e:	3328      	adds	r3, #40	@ 0x28
 810c320:	2102      	movs	r1, #2
 810c322:	4618      	mov	r0, r3
 810c324:	f000 fca6 	bl	810cc74 <RCCEx_PLL3_Config>
 810c328:	4603      	mov	r3, r0
 810c32a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810c32e:	e00c      	b.n	810c34a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810c330:	2301      	movs	r3, #1
 810c332:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c336:	e008      	b.n	810c34a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 810c338:	58024400 	.word	0x58024400
        break;
 810c33c:	bf00      	nop
 810c33e:	e004      	b.n	810c34a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810c340:	bf00      	nop
 810c342:	e002      	b.n	810c34a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810c344:	bf00      	nop
 810c346:	e000      	b.n	810c34a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810c348:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c34a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c34e:	2b00      	cmp	r3, #0
 810c350:	d10b      	bne.n	810c36a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810c352:	4bc2      	ldr	r3, [pc, #776]	@ (810c65c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810c354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c356:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810c35a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c35e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810c362:	4abe      	ldr	r2, [pc, #760]	@ (810c65c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810c364:	430b      	orrs	r3, r1
 810c366:	6553      	str	r3, [r2, #84]	@ 0x54
 810c368:	e003      	b.n	810c372 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c36a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c36e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810c372:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c376:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c37a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810c37e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 810c382:	2300      	movs	r3, #0
 810c384:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 810c388:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810c38c:	460b      	mov	r3, r1
 810c38e:	4313      	orrs	r3, r2
 810c390:	d055      	beq.n	810c43e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810c392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c396:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810c39a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810c39e:	d033      	beq.n	810c408 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 810c3a0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810c3a4:	d82c      	bhi.n	810c400 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810c3a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810c3aa:	d02f      	beq.n	810c40c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 810c3ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810c3b0:	d826      	bhi.n	810c400 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810c3b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810c3b6:	d02b      	beq.n	810c410 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 810c3b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810c3bc:	d820      	bhi.n	810c400 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810c3be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810c3c2:	d012      	beq.n	810c3ea <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 810c3c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810c3c8:	d81a      	bhi.n	810c400 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810c3ca:	2b00      	cmp	r3, #0
 810c3cc:	d022      	beq.n	810c414 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 810c3ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810c3d2:	d115      	bne.n	810c400 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810c3d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c3d8:	3308      	adds	r3, #8
 810c3da:	2100      	movs	r1, #0
 810c3dc:	4618      	mov	r0, r3
 810c3de:	f000 fb97 	bl	810cb10 <RCCEx_PLL2_Config>
 810c3e2:	4603      	mov	r3, r0
 810c3e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810c3e8:	e015      	b.n	810c416 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810c3ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c3ee:	3328      	adds	r3, #40	@ 0x28
 810c3f0:	2102      	movs	r1, #2
 810c3f2:	4618      	mov	r0, r3
 810c3f4:	f000 fc3e 	bl	810cc74 <RCCEx_PLL3_Config>
 810c3f8:	4603      	mov	r3, r0
 810c3fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810c3fe:	e00a      	b.n	810c416 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810c400:	2301      	movs	r3, #1
 810c402:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c406:	e006      	b.n	810c416 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810c408:	bf00      	nop
 810c40a:	e004      	b.n	810c416 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810c40c:	bf00      	nop
 810c40e:	e002      	b.n	810c416 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810c410:	bf00      	nop
 810c412:	e000      	b.n	810c416 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810c414:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c416:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c41a:	2b00      	cmp	r3, #0
 810c41c:	d10b      	bne.n	810c436 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810c41e:	4b8f      	ldr	r3, [pc, #572]	@ (810c65c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810c420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810c422:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810c426:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c42a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810c42e:	4a8b      	ldr	r2, [pc, #556]	@ (810c65c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810c430:	430b      	orrs	r3, r1
 810c432:	6593      	str	r3, [r2, #88]	@ 0x58
 810c434:	e003      	b.n	810c43e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c436:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c43a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810c43e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c442:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c446:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810c44a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810c44e:	2300      	movs	r3, #0
 810c450:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810c454:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810c458:	460b      	mov	r3, r1
 810c45a:	4313      	orrs	r3, r2
 810c45c:	d055      	beq.n	810c50a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810c45e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c462:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810c466:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810c46a:	d033      	beq.n	810c4d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 810c46c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810c470:	d82c      	bhi.n	810c4cc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810c472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810c476:	d02f      	beq.n	810c4d8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 810c478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810c47c:	d826      	bhi.n	810c4cc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810c47e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810c482:	d02b      	beq.n	810c4dc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 810c484:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810c488:	d820      	bhi.n	810c4cc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810c48a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810c48e:	d012      	beq.n	810c4b6 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 810c490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810c494:	d81a      	bhi.n	810c4cc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810c496:	2b00      	cmp	r3, #0
 810c498:	d022      	beq.n	810c4e0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 810c49a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810c49e:	d115      	bne.n	810c4cc <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810c4a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c4a4:	3308      	adds	r3, #8
 810c4a6:	2100      	movs	r1, #0
 810c4a8:	4618      	mov	r0, r3
 810c4aa:	f000 fb31 	bl	810cb10 <RCCEx_PLL2_Config>
 810c4ae:	4603      	mov	r3, r0
 810c4b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810c4b4:	e015      	b.n	810c4e2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810c4b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c4ba:	3328      	adds	r3, #40	@ 0x28
 810c4bc:	2102      	movs	r1, #2
 810c4be:	4618      	mov	r0, r3
 810c4c0:	f000 fbd8 	bl	810cc74 <RCCEx_PLL3_Config>
 810c4c4:	4603      	mov	r3, r0
 810c4c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810c4ca:	e00a      	b.n	810c4e2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810c4cc:	2301      	movs	r3, #1
 810c4ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c4d2:	e006      	b.n	810c4e2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810c4d4:	bf00      	nop
 810c4d6:	e004      	b.n	810c4e2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810c4d8:	bf00      	nop
 810c4da:	e002      	b.n	810c4e2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810c4dc:	bf00      	nop
 810c4de:	e000      	b.n	810c4e2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810c4e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c4e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c4e6:	2b00      	cmp	r3, #0
 810c4e8:	d10b      	bne.n	810c502 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810c4ea:	4b5c      	ldr	r3, [pc, #368]	@ (810c65c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810c4ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810c4ee:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810c4f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c4f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810c4fa:	4a58      	ldr	r2, [pc, #352]	@ (810c65c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810c4fc:	430b      	orrs	r3, r1
 810c4fe:	6593      	str	r3, [r2, #88]	@ 0x58
 810c500:	e003      	b.n	810c50a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c502:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c506:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810c50a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c512:	f002 0308 	and.w	r3, r2, #8
 810c516:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810c51a:	2300      	movs	r3, #0
 810c51c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810c520:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810c524:	460b      	mov	r3, r1
 810c526:	4313      	orrs	r3, r2
 810c528:	d01e      	beq.n	810c568 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810c52a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c52e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810c532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810c536:	d10c      	bne.n	810c552 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810c538:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c53c:	3328      	adds	r3, #40	@ 0x28
 810c53e:	2102      	movs	r1, #2
 810c540:	4618      	mov	r0, r3
 810c542:	f000 fb97 	bl	810cc74 <RCCEx_PLL3_Config>
 810c546:	4603      	mov	r3, r0
 810c548:	2b00      	cmp	r3, #0
 810c54a:	d002      	beq.n	810c552 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 810c54c:	2301      	movs	r3, #1
 810c54e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810c552:	4b42      	ldr	r3, [pc, #264]	@ (810c65c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810c554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c556:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810c55a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810c562:	4a3e      	ldr	r2, [pc, #248]	@ (810c65c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810c564:	430b      	orrs	r3, r1
 810c566:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810c568:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c570:	f002 0310 	and.w	r3, r2, #16
 810c574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810c578:	2300      	movs	r3, #0
 810c57a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810c57e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810c582:	460b      	mov	r3, r1
 810c584:	4313      	orrs	r3, r2
 810c586:	d01e      	beq.n	810c5c6 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810c588:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c58c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810c590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810c594:	d10c      	bne.n	810c5b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810c596:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c59a:	3328      	adds	r3, #40	@ 0x28
 810c59c:	2102      	movs	r1, #2
 810c59e:	4618      	mov	r0, r3
 810c5a0:	f000 fb68 	bl	810cc74 <RCCEx_PLL3_Config>
 810c5a4:	4603      	mov	r3, r0
 810c5a6:	2b00      	cmp	r3, #0
 810c5a8:	d002      	beq.n	810c5b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 810c5aa:	2301      	movs	r3, #1
 810c5ac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810c5b0:	4b2a      	ldr	r3, [pc, #168]	@ (810c65c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810c5b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810c5b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810c5b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c5bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810c5c0:	4a26      	ldr	r2, [pc, #152]	@ (810c65c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810c5c2:	430b      	orrs	r3, r1
 810c5c4:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810c5c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c5ce:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810c5d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810c5d6:	2300      	movs	r3, #0
 810c5d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810c5dc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810c5e0:	460b      	mov	r3, r1
 810c5e2:	4313      	orrs	r3, r2
 810c5e4:	d040      	beq.n	810c668 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810c5e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c5ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810c5ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810c5f2:	d022      	beq.n	810c63a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 810c5f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810c5f8:	d81b      	bhi.n	810c632 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810c5fa:	2b00      	cmp	r3, #0
 810c5fc:	d003      	beq.n	810c606 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 810c5fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810c602:	d00b      	beq.n	810c61c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 810c604:	e015      	b.n	810c632 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810c606:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c60a:	3308      	adds	r3, #8
 810c60c:	2100      	movs	r1, #0
 810c60e:	4618      	mov	r0, r3
 810c610:	f000 fa7e 	bl	810cb10 <RCCEx_PLL2_Config>
 810c614:	4603      	mov	r3, r0
 810c616:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810c61a:	e00f      	b.n	810c63c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810c61c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c620:	3328      	adds	r3, #40	@ 0x28
 810c622:	2102      	movs	r1, #2
 810c624:	4618      	mov	r0, r3
 810c626:	f000 fb25 	bl	810cc74 <RCCEx_PLL3_Config>
 810c62a:	4603      	mov	r3, r0
 810c62c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810c630:	e004      	b.n	810c63c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810c632:	2301      	movs	r3, #1
 810c634:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c638:	e000      	b.n	810c63c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 810c63a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c63c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c640:	2b00      	cmp	r3, #0
 810c642:	d10d      	bne.n	810c660 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810c644:	4b05      	ldr	r3, [pc, #20]	@ (810c65c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810c646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810c648:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810c64c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c650:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810c654:	4a01      	ldr	r2, [pc, #4]	@ (810c65c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810c656:	430b      	orrs	r3, r1
 810c658:	6593      	str	r3, [r2, #88]	@ 0x58
 810c65a:	e005      	b.n	810c668 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 810c65c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c660:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c664:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810c668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c670:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810c674:	67bb      	str	r3, [r7, #120]	@ 0x78
 810c676:	2300      	movs	r3, #0
 810c678:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810c67a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810c67e:	460b      	mov	r3, r1
 810c680:	4313      	orrs	r3, r2
 810c682:	d03b      	beq.n	810c6fc <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810c684:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c688:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810c68c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810c690:	d01f      	beq.n	810c6d2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 810c692:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810c696:	d818      	bhi.n	810c6ca <HAL_RCCEx_PeriphCLKConfig+0x104e>
 810c698:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810c69c:	d003      	beq.n	810c6a6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 810c69e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810c6a2:	d007      	beq.n	810c6b4 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 810c6a4:	e011      	b.n	810c6ca <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810c6a6:	4b64      	ldr	r3, [pc, #400]	@ (810c838 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810c6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c6aa:	4a63      	ldr	r2, [pc, #396]	@ (810c838 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810c6ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810c6b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810c6b2:	e00f      	b.n	810c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810c6b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c6b8:	3328      	adds	r3, #40	@ 0x28
 810c6ba:	2101      	movs	r1, #1
 810c6bc:	4618      	mov	r0, r3
 810c6be:	f000 fad9 	bl	810cc74 <RCCEx_PLL3_Config>
 810c6c2:	4603      	mov	r3, r0
 810c6c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 810c6c8:	e004      	b.n	810c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810c6ca:	2301      	movs	r3, #1
 810c6cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c6d0:	e000      	b.n	810c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 810c6d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c6d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c6d8:	2b00      	cmp	r3, #0
 810c6da:	d10b      	bne.n	810c6f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810c6dc:	4b56      	ldr	r3, [pc, #344]	@ (810c838 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810c6de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c6e0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810c6e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c6e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810c6ec:	4a52      	ldr	r2, [pc, #328]	@ (810c838 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810c6ee:	430b      	orrs	r3, r1
 810c6f0:	6553      	str	r3, [r2, #84]	@ 0x54
 810c6f2:	e003      	b.n	810c6fc <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c6f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c6f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810c6fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c700:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c704:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810c708:	673b      	str	r3, [r7, #112]	@ 0x70
 810c70a:	2300      	movs	r3, #0
 810c70c:	677b      	str	r3, [r7, #116]	@ 0x74
 810c70e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 810c712:	460b      	mov	r3, r1
 810c714:	4313      	orrs	r3, r2
 810c716:	d031      	beq.n	810c77c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810c718:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c71c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c71e:	2b00      	cmp	r3, #0
 810c720:	d003      	beq.n	810c72a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 810c722:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810c726:	d007      	beq.n	810c738 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 810c728:	e011      	b.n	810c74e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810c72a:	4b43      	ldr	r3, [pc, #268]	@ (810c838 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810c72c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c72e:	4a42      	ldr	r2, [pc, #264]	@ (810c838 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810c730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810c734:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810c736:	e00e      	b.n	810c756 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810c738:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c73c:	3308      	adds	r3, #8
 810c73e:	2102      	movs	r1, #2
 810c740:	4618      	mov	r0, r3
 810c742:	f000 f9e5 	bl	810cb10 <RCCEx_PLL2_Config>
 810c746:	4603      	mov	r3, r0
 810c748:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810c74c:	e003      	b.n	810c756 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 810c74e:	2301      	movs	r3, #1
 810c750:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c754:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c756:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c75a:	2b00      	cmp	r3, #0
 810c75c:	d10a      	bne.n	810c774 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810c75e:	4b36      	ldr	r3, [pc, #216]	@ (810c838 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810c760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810c762:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810c766:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c76a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c76c:	4a32      	ldr	r2, [pc, #200]	@ (810c838 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810c76e:	430b      	orrs	r3, r1
 810c770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810c772:	e003      	b.n	810c77c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c774:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c778:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810c77c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c780:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c784:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810c788:	66bb      	str	r3, [r7, #104]	@ 0x68
 810c78a:	2300      	movs	r3, #0
 810c78c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810c78e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810c792:	460b      	mov	r3, r1
 810c794:	4313      	orrs	r3, r2
 810c796:	d00c      	beq.n	810c7b2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810c798:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c79c:	3328      	adds	r3, #40	@ 0x28
 810c79e:	2102      	movs	r1, #2
 810c7a0:	4618      	mov	r0, r3
 810c7a2:	f000 fa67 	bl	810cc74 <RCCEx_PLL3_Config>
 810c7a6:	4603      	mov	r3, r0
 810c7a8:	2b00      	cmp	r3, #0
 810c7aa:	d002      	beq.n	810c7b2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 810c7ac:	2301      	movs	r3, #1
 810c7ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810c7b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c7ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810c7be:	663b      	str	r3, [r7, #96]	@ 0x60
 810c7c0:	2300      	movs	r3, #0
 810c7c2:	667b      	str	r3, [r7, #100]	@ 0x64
 810c7c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810c7c8:	460b      	mov	r3, r1
 810c7ca:	4313      	orrs	r3, r2
 810c7cc:	d03a      	beq.n	810c844 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 810c7ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c7d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810c7d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810c7da:	d018      	beq.n	810c80e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 810c7dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810c7e0:	d811      	bhi.n	810c806 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810c7e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810c7e6:	d014      	beq.n	810c812 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 810c7e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810c7ec:	d80b      	bhi.n	810c806 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810c7ee:	2b00      	cmp	r3, #0
 810c7f0:	d011      	beq.n	810c816 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 810c7f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810c7f6:	d106      	bne.n	810c806 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810c7f8:	4b0f      	ldr	r3, [pc, #60]	@ (810c838 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810c7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c7fc:	4a0e      	ldr	r2, [pc, #56]	@ (810c838 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810c7fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810c802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810c804:	e008      	b.n	810c818 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810c806:	2301      	movs	r3, #1
 810c808:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c80c:	e004      	b.n	810c818 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810c80e:	bf00      	nop
 810c810:	e002      	b.n	810c818 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810c812:	bf00      	nop
 810c814:	e000      	b.n	810c818 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810c816:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c818:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c81c:	2b00      	cmp	r3, #0
 810c81e:	d10d      	bne.n	810c83c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810c820:	4b05      	ldr	r3, [pc, #20]	@ (810c838 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810c822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c824:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810c828:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c82c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810c830:	4a01      	ldr	r2, [pc, #4]	@ (810c838 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810c832:	430b      	orrs	r3, r1
 810c834:	6553      	str	r3, [r2, #84]	@ 0x54
 810c836:	e005      	b.n	810c844 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 810c838:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c83c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c840:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810c844:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c84c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 810c850:	65bb      	str	r3, [r7, #88]	@ 0x58
 810c852:	2300      	movs	r3, #0
 810c854:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810c856:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810c85a:	460b      	mov	r3, r1
 810c85c:	4313      	orrs	r3, r2
 810c85e:	d009      	beq.n	810c874 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810c860:	4baa      	ldr	r3, [pc, #680]	@ (810cb0c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810c862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810c864:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810c868:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c86c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810c86e:	4aa7      	ldr	r2, [pc, #668]	@ (810cb0c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810c870:	430b      	orrs	r3, r1
 810c872:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810c874:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c878:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c87c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 810c880:	653b      	str	r3, [r7, #80]	@ 0x50
 810c882:	2300      	movs	r3, #0
 810c884:	657b      	str	r3, [r7, #84]	@ 0x54
 810c886:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810c88a:	460b      	mov	r3, r1
 810c88c:	4313      	orrs	r3, r2
 810c88e:	d00a      	beq.n	810c8a6 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810c890:	4b9e      	ldr	r3, [pc, #632]	@ (810cb0c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810c892:	691b      	ldr	r3, [r3, #16]
 810c894:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 810c898:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c89c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810c8a0:	4a9a      	ldr	r2, [pc, #616]	@ (810cb0c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810c8a2:	430b      	orrs	r3, r1
 810c8a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810c8a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c8ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810c8b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 810c8b4:	2300      	movs	r3, #0
 810c8b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810c8b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810c8bc:	460b      	mov	r3, r1
 810c8be:	4313      	orrs	r3, r2
 810c8c0:	d009      	beq.n	810c8d6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810c8c2:	4b92      	ldr	r3, [pc, #584]	@ (810cb0c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810c8c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810c8c6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810c8ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c8ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810c8d0:	4a8e      	ldr	r2, [pc, #568]	@ (810cb0c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810c8d2:	430b      	orrs	r3, r1
 810c8d4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810c8d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c8de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810c8e2:	643b      	str	r3, [r7, #64]	@ 0x40
 810c8e4:	2300      	movs	r3, #0
 810c8e6:	647b      	str	r3, [r7, #68]	@ 0x44
 810c8e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810c8ec:	460b      	mov	r3, r1
 810c8ee:	4313      	orrs	r3, r2
 810c8f0:	d00e      	beq.n	810c910 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810c8f2:	4b86      	ldr	r3, [pc, #536]	@ (810cb0c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810c8f4:	691b      	ldr	r3, [r3, #16]
 810c8f6:	4a85      	ldr	r2, [pc, #532]	@ (810cb0c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810c8f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810c8fc:	6113      	str	r3, [r2, #16]
 810c8fe:	4b83      	ldr	r3, [pc, #524]	@ (810cb0c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810c900:	6919      	ldr	r1, [r3, #16]
 810c902:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c906:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810c90a:	4a80      	ldr	r2, [pc, #512]	@ (810cb0c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810c90c:	430b      	orrs	r3, r1
 810c90e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810c910:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c914:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c918:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810c91c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810c91e:	2300      	movs	r3, #0
 810c920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810c922:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810c926:	460b      	mov	r3, r1
 810c928:	4313      	orrs	r3, r2
 810c92a:	d009      	beq.n	810c940 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810c92c:	4b77      	ldr	r3, [pc, #476]	@ (810cb0c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810c92e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810c930:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810c934:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810c93a:	4a74      	ldr	r2, [pc, #464]	@ (810cb0c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810c93c:	430b      	orrs	r3, r1
 810c93e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810c940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c948:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810c94c:	633b      	str	r3, [r7, #48]	@ 0x30
 810c94e:	2300      	movs	r3, #0
 810c950:	637b      	str	r3, [r7, #52]	@ 0x34
 810c952:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810c956:	460b      	mov	r3, r1
 810c958:	4313      	orrs	r3, r2
 810c95a:	d00a      	beq.n	810c972 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810c95c:	4b6b      	ldr	r3, [pc, #428]	@ (810cb0c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810c95e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810c960:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810c964:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810c96c:	4a67      	ldr	r2, [pc, #412]	@ (810cb0c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810c96e:	430b      	orrs	r3, r1
 810c970:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810c972:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c976:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c97a:	2100      	movs	r1, #0
 810c97c:	62b9      	str	r1, [r7, #40]	@ 0x28
 810c97e:	f003 0301 	and.w	r3, r3, #1
 810c982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810c984:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 810c988:	460b      	mov	r3, r1
 810c98a:	4313      	orrs	r3, r2
 810c98c:	d011      	beq.n	810c9b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810c98e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c992:	3308      	adds	r3, #8
 810c994:	2100      	movs	r1, #0
 810c996:	4618      	mov	r0, r3
 810c998:	f000 f8ba 	bl	810cb10 <RCCEx_PLL2_Config>
 810c99c:	4603      	mov	r3, r0
 810c99e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810c9a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c9a6:	2b00      	cmp	r3, #0
 810c9a8:	d003      	beq.n	810c9b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c9aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c9ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810c9b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c9ba:	2100      	movs	r1, #0
 810c9bc:	6239      	str	r1, [r7, #32]
 810c9be:	f003 0302 	and.w	r3, r3, #2
 810c9c2:	627b      	str	r3, [r7, #36]	@ 0x24
 810c9c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810c9c8:	460b      	mov	r3, r1
 810c9ca:	4313      	orrs	r3, r2
 810c9cc:	d011      	beq.n	810c9f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810c9ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c9d2:	3308      	adds	r3, #8
 810c9d4:	2101      	movs	r1, #1
 810c9d6:	4618      	mov	r0, r3
 810c9d8:	f000 f89a 	bl	810cb10 <RCCEx_PLL2_Config>
 810c9dc:	4603      	mov	r3, r0
 810c9de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810c9e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c9e6:	2b00      	cmp	r3, #0
 810c9e8:	d003      	beq.n	810c9f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c9ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c9ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810c9f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c9fa:	2100      	movs	r1, #0
 810c9fc:	61b9      	str	r1, [r7, #24]
 810c9fe:	f003 0304 	and.w	r3, r3, #4
 810ca02:	61fb      	str	r3, [r7, #28]
 810ca04:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810ca08:	460b      	mov	r3, r1
 810ca0a:	4313      	orrs	r3, r2
 810ca0c:	d011      	beq.n	810ca32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810ca0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ca12:	3308      	adds	r3, #8
 810ca14:	2102      	movs	r1, #2
 810ca16:	4618      	mov	r0, r3
 810ca18:	f000 f87a 	bl	810cb10 <RCCEx_PLL2_Config>
 810ca1c:	4603      	mov	r3, r0
 810ca1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810ca22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ca26:	2b00      	cmp	r3, #0
 810ca28:	d003      	beq.n	810ca32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ca2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ca2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810ca32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ca36:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca3a:	2100      	movs	r1, #0
 810ca3c:	6139      	str	r1, [r7, #16]
 810ca3e:	f003 0308 	and.w	r3, r3, #8
 810ca42:	617b      	str	r3, [r7, #20]
 810ca44:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810ca48:	460b      	mov	r3, r1
 810ca4a:	4313      	orrs	r3, r2
 810ca4c:	d011      	beq.n	810ca72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810ca4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ca52:	3328      	adds	r3, #40	@ 0x28
 810ca54:	2100      	movs	r1, #0
 810ca56:	4618      	mov	r0, r3
 810ca58:	f000 f90c 	bl	810cc74 <RCCEx_PLL3_Config>
 810ca5c:	4603      	mov	r3, r0
 810ca5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 810ca62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ca66:	2b00      	cmp	r3, #0
 810ca68:	d003      	beq.n	810ca72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ca6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ca6e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810ca72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ca76:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca7a:	2100      	movs	r1, #0
 810ca7c:	60b9      	str	r1, [r7, #8]
 810ca7e:	f003 0310 	and.w	r3, r3, #16
 810ca82:	60fb      	str	r3, [r7, #12]
 810ca84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810ca88:	460b      	mov	r3, r1
 810ca8a:	4313      	orrs	r3, r2
 810ca8c:	d011      	beq.n	810cab2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810ca8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ca92:	3328      	adds	r3, #40	@ 0x28
 810ca94:	2101      	movs	r1, #1
 810ca96:	4618      	mov	r0, r3
 810ca98:	f000 f8ec 	bl	810cc74 <RCCEx_PLL3_Config>
 810ca9c:	4603      	mov	r3, r0
 810ca9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810caa2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810caa6:	2b00      	cmp	r3, #0
 810caa8:	d003      	beq.n	810cab2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810caaa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810caae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810cab2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810caba:	2100      	movs	r1, #0
 810cabc:	6039      	str	r1, [r7, #0]
 810cabe:	f003 0320 	and.w	r3, r3, #32
 810cac2:	607b      	str	r3, [r7, #4]
 810cac4:	e9d7 1200 	ldrd	r1, r2, [r7]
 810cac8:	460b      	mov	r3, r1
 810caca:	4313      	orrs	r3, r2
 810cacc:	d011      	beq.n	810caf2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810cace:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cad2:	3328      	adds	r3, #40	@ 0x28
 810cad4:	2102      	movs	r1, #2
 810cad6:	4618      	mov	r0, r3
 810cad8:	f000 f8cc 	bl	810cc74 <RCCEx_PLL3_Config>
 810cadc:	4603      	mov	r3, r0
 810cade:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810cae2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810cae6:	2b00      	cmp	r3, #0
 810cae8:	d003      	beq.n	810caf2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810caea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810caee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 810caf2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 810caf6:	2b00      	cmp	r3, #0
 810caf8:	d101      	bne.n	810cafe <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 810cafa:	2300      	movs	r3, #0
 810cafc:	e000      	b.n	810cb00 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 810cafe:	2301      	movs	r3, #1
}
 810cb00:	4618      	mov	r0, r3
 810cb02:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 810cb06:	46bd      	mov	sp, r7
 810cb08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810cb0c:	58024400 	.word	0x58024400

0810cb10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810cb10:	b580      	push	{r7, lr}
 810cb12:	b084      	sub	sp, #16
 810cb14:	af00      	add	r7, sp, #0
 810cb16:	6078      	str	r0, [r7, #4]
 810cb18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810cb1a:	2300      	movs	r3, #0
 810cb1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810cb1e:	4b54      	ldr	r3, [pc, #336]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cb20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810cb22:	f003 0303 	and.w	r3, r3, #3
 810cb26:	2b03      	cmp	r3, #3
 810cb28:	d101      	bne.n	810cb2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810cb2a:	2301      	movs	r3, #1
 810cb2c:	e09b      	b.n	810cc66 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810cb2e:	4b50      	ldr	r3, [pc, #320]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cb30:	681b      	ldr	r3, [r3, #0]
 810cb32:	4a4f      	ldr	r2, [pc, #316]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cb34:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810cb38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810cb3a:	f7fb fc6d 	bl	8108418 <HAL_GetTick>
 810cb3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810cb40:	e008      	b.n	810cb54 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810cb42:	f7fb fc69 	bl	8108418 <HAL_GetTick>
 810cb46:	4602      	mov	r2, r0
 810cb48:	68bb      	ldr	r3, [r7, #8]
 810cb4a:	1ad3      	subs	r3, r2, r3
 810cb4c:	2b02      	cmp	r3, #2
 810cb4e:	d901      	bls.n	810cb54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810cb50:	2303      	movs	r3, #3
 810cb52:	e088      	b.n	810cc66 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810cb54:	4b46      	ldr	r3, [pc, #280]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cb56:	681b      	ldr	r3, [r3, #0]
 810cb58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810cb5c:	2b00      	cmp	r3, #0
 810cb5e:	d1f0      	bne.n	810cb42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810cb60:	4b43      	ldr	r3, [pc, #268]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cb62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810cb64:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810cb68:	687b      	ldr	r3, [r7, #4]
 810cb6a:	681b      	ldr	r3, [r3, #0]
 810cb6c:	031b      	lsls	r3, r3, #12
 810cb6e:	4940      	ldr	r1, [pc, #256]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cb70:	4313      	orrs	r3, r2
 810cb72:	628b      	str	r3, [r1, #40]	@ 0x28
 810cb74:	687b      	ldr	r3, [r7, #4]
 810cb76:	685b      	ldr	r3, [r3, #4]
 810cb78:	3b01      	subs	r3, #1
 810cb7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810cb7e:	687b      	ldr	r3, [r7, #4]
 810cb80:	689b      	ldr	r3, [r3, #8]
 810cb82:	3b01      	subs	r3, #1
 810cb84:	025b      	lsls	r3, r3, #9
 810cb86:	b29b      	uxth	r3, r3
 810cb88:	431a      	orrs	r2, r3
 810cb8a:	687b      	ldr	r3, [r7, #4]
 810cb8c:	68db      	ldr	r3, [r3, #12]
 810cb8e:	3b01      	subs	r3, #1
 810cb90:	041b      	lsls	r3, r3, #16
 810cb92:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810cb96:	431a      	orrs	r2, r3
 810cb98:	687b      	ldr	r3, [r7, #4]
 810cb9a:	691b      	ldr	r3, [r3, #16]
 810cb9c:	3b01      	subs	r3, #1
 810cb9e:	061b      	lsls	r3, r3, #24
 810cba0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810cba4:	4932      	ldr	r1, [pc, #200]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cba6:	4313      	orrs	r3, r2
 810cba8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810cbaa:	4b31      	ldr	r3, [pc, #196]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cbac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cbae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810cbb2:	687b      	ldr	r3, [r7, #4]
 810cbb4:	695b      	ldr	r3, [r3, #20]
 810cbb6:	492e      	ldr	r1, [pc, #184]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cbb8:	4313      	orrs	r3, r2
 810cbba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810cbbc:	4b2c      	ldr	r3, [pc, #176]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cbc0:	f023 0220 	bic.w	r2, r3, #32
 810cbc4:	687b      	ldr	r3, [r7, #4]
 810cbc6:	699b      	ldr	r3, [r3, #24]
 810cbc8:	4929      	ldr	r1, [pc, #164]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cbca:	4313      	orrs	r3, r2
 810cbcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810cbce:	4b28      	ldr	r3, [pc, #160]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cbd2:	4a27      	ldr	r2, [pc, #156]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cbd4:	f023 0310 	bic.w	r3, r3, #16
 810cbd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810cbda:	4b25      	ldr	r3, [pc, #148]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cbdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810cbde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810cbe2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810cbe6:	687a      	ldr	r2, [r7, #4]
 810cbe8:	69d2      	ldr	r2, [r2, #28]
 810cbea:	00d2      	lsls	r2, r2, #3
 810cbec:	4920      	ldr	r1, [pc, #128]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cbee:	4313      	orrs	r3, r2
 810cbf0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810cbf2:	4b1f      	ldr	r3, [pc, #124]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cbf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cbf6:	4a1e      	ldr	r2, [pc, #120]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cbf8:	f043 0310 	orr.w	r3, r3, #16
 810cbfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810cbfe:	683b      	ldr	r3, [r7, #0]
 810cc00:	2b00      	cmp	r3, #0
 810cc02:	d106      	bne.n	810cc12 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810cc04:	4b1a      	ldr	r3, [pc, #104]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cc06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cc08:	4a19      	ldr	r2, [pc, #100]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cc0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810cc0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810cc10:	e00f      	b.n	810cc32 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810cc12:	683b      	ldr	r3, [r7, #0]
 810cc14:	2b01      	cmp	r3, #1
 810cc16:	d106      	bne.n	810cc26 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810cc18:	4b15      	ldr	r3, [pc, #84]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cc1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cc1c:	4a14      	ldr	r2, [pc, #80]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cc1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810cc22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810cc24:	e005      	b.n	810cc32 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810cc26:	4b12      	ldr	r3, [pc, #72]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cc2a:	4a11      	ldr	r2, [pc, #68]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cc2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810cc30:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810cc32:	4b0f      	ldr	r3, [pc, #60]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cc34:	681b      	ldr	r3, [r3, #0]
 810cc36:	4a0e      	ldr	r2, [pc, #56]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cc38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810cc3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810cc3e:	f7fb fbeb 	bl	8108418 <HAL_GetTick>
 810cc42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810cc44:	e008      	b.n	810cc58 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810cc46:	f7fb fbe7 	bl	8108418 <HAL_GetTick>
 810cc4a:	4602      	mov	r2, r0
 810cc4c:	68bb      	ldr	r3, [r7, #8]
 810cc4e:	1ad3      	subs	r3, r2, r3
 810cc50:	2b02      	cmp	r3, #2
 810cc52:	d901      	bls.n	810cc58 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810cc54:	2303      	movs	r3, #3
 810cc56:	e006      	b.n	810cc66 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810cc58:	4b05      	ldr	r3, [pc, #20]	@ (810cc70 <RCCEx_PLL2_Config+0x160>)
 810cc5a:	681b      	ldr	r3, [r3, #0]
 810cc5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810cc60:	2b00      	cmp	r3, #0
 810cc62:	d0f0      	beq.n	810cc46 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810cc64:	7bfb      	ldrb	r3, [r7, #15]
}
 810cc66:	4618      	mov	r0, r3
 810cc68:	3710      	adds	r7, #16
 810cc6a:	46bd      	mov	sp, r7
 810cc6c:	bd80      	pop	{r7, pc}
 810cc6e:	bf00      	nop
 810cc70:	58024400 	.word	0x58024400

0810cc74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810cc74:	b580      	push	{r7, lr}
 810cc76:	b084      	sub	sp, #16
 810cc78:	af00      	add	r7, sp, #0
 810cc7a:	6078      	str	r0, [r7, #4]
 810cc7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810cc7e:	2300      	movs	r3, #0
 810cc80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810cc82:	4b54      	ldr	r3, [pc, #336]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cc84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810cc86:	f003 0303 	and.w	r3, r3, #3
 810cc8a:	2b03      	cmp	r3, #3
 810cc8c:	d101      	bne.n	810cc92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810cc8e:	2301      	movs	r3, #1
 810cc90:	e09b      	b.n	810cdca <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810cc92:	4b50      	ldr	r3, [pc, #320]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cc94:	681b      	ldr	r3, [r3, #0]
 810cc96:	4a4f      	ldr	r2, [pc, #316]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cc98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810cc9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810cc9e:	f7fb fbbb 	bl	8108418 <HAL_GetTick>
 810cca2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810cca4:	e008      	b.n	810ccb8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810cca6:	f7fb fbb7 	bl	8108418 <HAL_GetTick>
 810ccaa:	4602      	mov	r2, r0
 810ccac:	68bb      	ldr	r3, [r7, #8]
 810ccae:	1ad3      	subs	r3, r2, r3
 810ccb0:	2b02      	cmp	r3, #2
 810ccb2:	d901      	bls.n	810ccb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810ccb4:	2303      	movs	r3, #3
 810ccb6:	e088      	b.n	810cdca <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810ccb8:	4b46      	ldr	r3, [pc, #280]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810ccba:	681b      	ldr	r3, [r3, #0]
 810ccbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810ccc0:	2b00      	cmp	r3, #0
 810ccc2:	d1f0      	bne.n	810cca6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810ccc4:	4b43      	ldr	r3, [pc, #268]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810ccc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ccc8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810cccc:	687b      	ldr	r3, [r7, #4]
 810ccce:	681b      	ldr	r3, [r3, #0]
 810ccd0:	051b      	lsls	r3, r3, #20
 810ccd2:	4940      	ldr	r1, [pc, #256]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810ccd4:	4313      	orrs	r3, r2
 810ccd6:	628b      	str	r3, [r1, #40]	@ 0x28
 810ccd8:	687b      	ldr	r3, [r7, #4]
 810ccda:	685b      	ldr	r3, [r3, #4]
 810ccdc:	3b01      	subs	r3, #1
 810ccde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810cce2:	687b      	ldr	r3, [r7, #4]
 810cce4:	689b      	ldr	r3, [r3, #8]
 810cce6:	3b01      	subs	r3, #1
 810cce8:	025b      	lsls	r3, r3, #9
 810ccea:	b29b      	uxth	r3, r3
 810ccec:	431a      	orrs	r2, r3
 810ccee:	687b      	ldr	r3, [r7, #4]
 810ccf0:	68db      	ldr	r3, [r3, #12]
 810ccf2:	3b01      	subs	r3, #1
 810ccf4:	041b      	lsls	r3, r3, #16
 810ccf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810ccfa:	431a      	orrs	r2, r3
 810ccfc:	687b      	ldr	r3, [r7, #4]
 810ccfe:	691b      	ldr	r3, [r3, #16]
 810cd00:	3b01      	subs	r3, #1
 810cd02:	061b      	lsls	r3, r3, #24
 810cd04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810cd08:	4932      	ldr	r1, [pc, #200]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd0a:	4313      	orrs	r3, r2
 810cd0c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810cd0e:	4b31      	ldr	r3, [pc, #196]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cd12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810cd16:	687b      	ldr	r3, [r7, #4]
 810cd18:	695b      	ldr	r3, [r3, #20]
 810cd1a:	492e      	ldr	r1, [pc, #184]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd1c:	4313      	orrs	r3, r2
 810cd1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810cd20:	4b2c      	ldr	r3, [pc, #176]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cd24:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810cd28:	687b      	ldr	r3, [r7, #4]
 810cd2a:	699b      	ldr	r3, [r3, #24]
 810cd2c:	4929      	ldr	r1, [pc, #164]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd2e:	4313      	orrs	r3, r2
 810cd30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810cd32:	4b28      	ldr	r3, [pc, #160]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cd36:	4a27      	ldr	r2, [pc, #156]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810cd3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810cd3e:	4b25      	ldr	r3, [pc, #148]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810cd42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810cd46:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810cd4a:	687a      	ldr	r2, [r7, #4]
 810cd4c:	69d2      	ldr	r2, [r2, #28]
 810cd4e:	00d2      	lsls	r2, r2, #3
 810cd50:	4920      	ldr	r1, [pc, #128]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd52:	4313      	orrs	r3, r2
 810cd54:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810cd56:	4b1f      	ldr	r3, [pc, #124]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cd5a:	4a1e      	ldr	r2, [pc, #120]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810cd60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810cd62:	683b      	ldr	r3, [r7, #0]
 810cd64:	2b00      	cmp	r3, #0
 810cd66:	d106      	bne.n	810cd76 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810cd68:	4b1a      	ldr	r3, [pc, #104]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cd6c:	4a19      	ldr	r2, [pc, #100]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810cd72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810cd74:	e00f      	b.n	810cd96 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810cd76:	683b      	ldr	r3, [r7, #0]
 810cd78:	2b01      	cmp	r3, #1
 810cd7a:	d106      	bne.n	810cd8a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810cd7c:	4b15      	ldr	r3, [pc, #84]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cd80:	4a14      	ldr	r2, [pc, #80]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810cd86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810cd88:	e005      	b.n	810cd96 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810cd8a:	4b12      	ldr	r3, [pc, #72]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cd8e:	4a11      	ldr	r2, [pc, #68]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810cd94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810cd96:	4b0f      	ldr	r3, [pc, #60]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd98:	681b      	ldr	r3, [r3, #0]
 810cd9a:	4a0e      	ldr	r2, [pc, #56]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cd9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810cda0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810cda2:	f7fb fb39 	bl	8108418 <HAL_GetTick>
 810cda6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810cda8:	e008      	b.n	810cdbc <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810cdaa:	f7fb fb35 	bl	8108418 <HAL_GetTick>
 810cdae:	4602      	mov	r2, r0
 810cdb0:	68bb      	ldr	r3, [r7, #8]
 810cdb2:	1ad3      	subs	r3, r2, r3
 810cdb4:	2b02      	cmp	r3, #2
 810cdb6:	d901      	bls.n	810cdbc <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810cdb8:	2303      	movs	r3, #3
 810cdba:	e006      	b.n	810cdca <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810cdbc:	4b05      	ldr	r3, [pc, #20]	@ (810cdd4 <RCCEx_PLL3_Config+0x160>)
 810cdbe:	681b      	ldr	r3, [r3, #0]
 810cdc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810cdc4:	2b00      	cmp	r3, #0
 810cdc6:	d0f0      	beq.n	810cdaa <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810cdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 810cdca:	4618      	mov	r0, r3
 810cdcc:	3710      	adds	r7, #16
 810cdce:	46bd      	mov	sp, r7
 810cdd0:	bd80      	pop	{r7, pc}
 810cdd2:	bf00      	nop
 810cdd4:	58024400 	.word	0x58024400

0810cdd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810cdd8:	b580      	push	{r7, lr}
 810cdda:	b082      	sub	sp, #8
 810cddc:	af00      	add	r7, sp, #0
 810cdde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810cde0:	687b      	ldr	r3, [r7, #4]
 810cde2:	2b00      	cmp	r3, #0
 810cde4:	d101      	bne.n	810cdea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810cde6:	2301      	movs	r3, #1
 810cde8:	e049      	b.n	810ce7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810cdea:	687b      	ldr	r3, [r7, #4]
 810cdec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810cdf0:	b2db      	uxtb	r3, r3
 810cdf2:	2b00      	cmp	r3, #0
 810cdf4:	d106      	bne.n	810ce04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810cdf6:	687b      	ldr	r3, [r7, #4]
 810cdf8:	2200      	movs	r2, #0
 810cdfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810cdfe:	6878      	ldr	r0, [r7, #4]
 810ce00:	f000 f841 	bl	810ce86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ce04:	687b      	ldr	r3, [r7, #4]
 810ce06:	2202      	movs	r2, #2
 810ce08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810ce0c:	687b      	ldr	r3, [r7, #4]
 810ce0e:	681a      	ldr	r2, [r3, #0]
 810ce10:	687b      	ldr	r3, [r7, #4]
 810ce12:	3304      	adds	r3, #4
 810ce14:	4619      	mov	r1, r3
 810ce16:	4610      	mov	r0, r2
 810ce18:	f000 f9e8 	bl	810d1ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810ce1c:	687b      	ldr	r3, [r7, #4]
 810ce1e:	2201      	movs	r2, #1
 810ce20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ce24:	687b      	ldr	r3, [r7, #4]
 810ce26:	2201      	movs	r2, #1
 810ce28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810ce2c:	687b      	ldr	r3, [r7, #4]
 810ce2e:	2201      	movs	r2, #1
 810ce30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810ce34:	687b      	ldr	r3, [r7, #4]
 810ce36:	2201      	movs	r2, #1
 810ce38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810ce3c:	687b      	ldr	r3, [r7, #4]
 810ce3e:	2201      	movs	r2, #1
 810ce40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810ce44:	687b      	ldr	r3, [r7, #4]
 810ce46:	2201      	movs	r2, #1
 810ce48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810ce4c:	687b      	ldr	r3, [r7, #4]
 810ce4e:	2201      	movs	r2, #1
 810ce50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ce54:	687b      	ldr	r3, [r7, #4]
 810ce56:	2201      	movs	r2, #1
 810ce58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810ce5c:	687b      	ldr	r3, [r7, #4]
 810ce5e:	2201      	movs	r2, #1
 810ce60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810ce64:	687b      	ldr	r3, [r7, #4]
 810ce66:	2201      	movs	r2, #1
 810ce68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810ce6c:	687b      	ldr	r3, [r7, #4]
 810ce6e:	2201      	movs	r2, #1
 810ce70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810ce74:	687b      	ldr	r3, [r7, #4]
 810ce76:	2201      	movs	r2, #1
 810ce78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810ce7c:	2300      	movs	r3, #0
}
 810ce7e:	4618      	mov	r0, r3
 810ce80:	3708      	adds	r7, #8
 810ce82:	46bd      	mov	sp, r7
 810ce84:	bd80      	pop	{r7, pc}

0810ce86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 810ce86:	b480      	push	{r7}
 810ce88:	b083      	sub	sp, #12
 810ce8a:	af00      	add	r7, sp, #0
 810ce8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 810ce8e:	bf00      	nop
 810ce90:	370c      	adds	r7, #12
 810ce92:	46bd      	mov	sp, r7
 810ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce98:	4770      	bx	lr
	...

0810ce9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810ce9c:	b480      	push	{r7}
 810ce9e:	b085      	sub	sp, #20
 810cea0:	af00      	add	r7, sp, #0
 810cea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810cea4:	687b      	ldr	r3, [r7, #4]
 810cea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810ceaa:	b2db      	uxtb	r3, r3
 810ceac:	2b01      	cmp	r3, #1
 810ceae:	d001      	beq.n	810ceb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810ceb0:	2301      	movs	r3, #1
 810ceb2:	e054      	b.n	810cf5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ceb4:	687b      	ldr	r3, [r7, #4]
 810ceb6:	2202      	movs	r2, #2
 810ceb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810cebc:	687b      	ldr	r3, [r7, #4]
 810cebe:	681b      	ldr	r3, [r3, #0]
 810cec0:	68da      	ldr	r2, [r3, #12]
 810cec2:	687b      	ldr	r3, [r7, #4]
 810cec4:	681b      	ldr	r3, [r3, #0]
 810cec6:	f042 0201 	orr.w	r2, r2, #1
 810ceca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810cecc:	687b      	ldr	r3, [r7, #4]
 810cece:	681b      	ldr	r3, [r3, #0]
 810ced0:	4a26      	ldr	r2, [pc, #152]	@ (810cf6c <HAL_TIM_Base_Start_IT+0xd0>)
 810ced2:	4293      	cmp	r3, r2
 810ced4:	d022      	beq.n	810cf1c <HAL_TIM_Base_Start_IT+0x80>
 810ced6:	687b      	ldr	r3, [r7, #4]
 810ced8:	681b      	ldr	r3, [r3, #0]
 810ceda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810cede:	d01d      	beq.n	810cf1c <HAL_TIM_Base_Start_IT+0x80>
 810cee0:	687b      	ldr	r3, [r7, #4]
 810cee2:	681b      	ldr	r3, [r3, #0]
 810cee4:	4a22      	ldr	r2, [pc, #136]	@ (810cf70 <HAL_TIM_Base_Start_IT+0xd4>)
 810cee6:	4293      	cmp	r3, r2
 810cee8:	d018      	beq.n	810cf1c <HAL_TIM_Base_Start_IT+0x80>
 810ceea:	687b      	ldr	r3, [r7, #4]
 810ceec:	681b      	ldr	r3, [r3, #0]
 810ceee:	4a21      	ldr	r2, [pc, #132]	@ (810cf74 <HAL_TIM_Base_Start_IT+0xd8>)
 810cef0:	4293      	cmp	r3, r2
 810cef2:	d013      	beq.n	810cf1c <HAL_TIM_Base_Start_IT+0x80>
 810cef4:	687b      	ldr	r3, [r7, #4]
 810cef6:	681b      	ldr	r3, [r3, #0]
 810cef8:	4a1f      	ldr	r2, [pc, #124]	@ (810cf78 <HAL_TIM_Base_Start_IT+0xdc>)
 810cefa:	4293      	cmp	r3, r2
 810cefc:	d00e      	beq.n	810cf1c <HAL_TIM_Base_Start_IT+0x80>
 810cefe:	687b      	ldr	r3, [r7, #4]
 810cf00:	681b      	ldr	r3, [r3, #0]
 810cf02:	4a1e      	ldr	r2, [pc, #120]	@ (810cf7c <HAL_TIM_Base_Start_IT+0xe0>)
 810cf04:	4293      	cmp	r3, r2
 810cf06:	d009      	beq.n	810cf1c <HAL_TIM_Base_Start_IT+0x80>
 810cf08:	687b      	ldr	r3, [r7, #4]
 810cf0a:	681b      	ldr	r3, [r3, #0]
 810cf0c:	4a1c      	ldr	r2, [pc, #112]	@ (810cf80 <HAL_TIM_Base_Start_IT+0xe4>)
 810cf0e:	4293      	cmp	r3, r2
 810cf10:	d004      	beq.n	810cf1c <HAL_TIM_Base_Start_IT+0x80>
 810cf12:	687b      	ldr	r3, [r7, #4]
 810cf14:	681b      	ldr	r3, [r3, #0]
 810cf16:	4a1b      	ldr	r2, [pc, #108]	@ (810cf84 <HAL_TIM_Base_Start_IT+0xe8>)
 810cf18:	4293      	cmp	r3, r2
 810cf1a:	d115      	bne.n	810cf48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810cf1c:	687b      	ldr	r3, [r7, #4]
 810cf1e:	681b      	ldr	r3, [r3, #0]
 810cf20:	689a      	ldr	r2, [r3, #8]
 810cf22:	4b19      	ldr	r3, [pc, #100]	@ (810cf88 <HAL_TIM_Base_Start_IT+0xec>)
 810cf24:	4013      	ands	r3, r2
 810cf26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810cf28:	68fb      	ldr	r3, [r7, #12]
 810cf2a:	2b06      	cmp	r3, #6
 810cf2c:	d015      	beq.n	810cf5a <HAL_TIM_Base_Start_IT+0xbe>
 810cf2e:	68fb      	ldr	r3, [r7, #12]
 810cf30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810cf34:	d011      	beq.n	810cf5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810cf36:	687b      	ldr	r3, [r7, #4]
 810cf38:	681b      	ldr	r3, [r3, #0]
 810cf3a:	681a      	ldr	r2, [r3, #0]
 810cf3c:	687b      	ldr	r3, [r7, #4]
 810cf3e:	681b      	ldr	r3, [r3, #0]
 810cf40:	f042 0201 	orr.w	r2, r2, #1
 810cf44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810cf46:	e008      	b.n	810cf5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810cf48:	687b      	ldr	r3, [r7, #4]
 810cf4a:	681b      	ldr	r3, [r3, #0]
 810cf4c:	681a      	ldr	r2, [r3, #0]
 810cf4e:	687b      	ldr	r3, [r7, #4]
 810cf50:	681b      	ldr	r3, [r3, #0]
 810cf52:	f042 0201 	orr.w	r2, r2, #1
 810cf56:	601a      	str	r2, [r3, #0]
 810cf58:	e000      	b.n	810cf5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810cf5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810cf5c:	2300      	movs	r3, #0
}
 810cf5e:	4618      	mov	r0, r3
 810cf60:	3714      	adds	r7, #20
 810cf62:	46bd      	mov	sp, r7
 810cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf68:	4770      	bx	lr
 810cf6a:	bf00      	nop
 810cf6c:	40010000 	.word	0x40010000
 810cf70:	40000400 	.word	0x40000400
 810cf74:	40000800 	.word	0x40000800
 810cf78:	40000c00 	.word	0x40000c00
 810cf7c:	40010400 	.word	0x40010400
 810cf80:	40001800 	.word	0x40001800
 810cf84:	40014000 	.word	0x40014000
 810cf88:	00010007 	.word	0x00010007

0810cf8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810cf8c:	b580      	push	{r7, lr}
 810cf8e:	b084      	sub	sp, #16
 810cf90:	af00      	add	r7, sp, #0
 810cf92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810cf94:	687b      	ldr	r3, [r7, #4]
 810cf96:	681b      	ldr	r3, [r3, #0]
 810cf98:	68db      	ldr	r3, [r3, #12]
 810cf9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 810cf9c:	687b      	ldr	r3, [r7, #4]
 810cf9e:	681b      	ldr	r3, [r3, #0]
 810cfa0:	691b      	ldr	r3, [r3, #16]
 810cfa2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810cfa4:	68bb      	ldr	r3, [r7, #8]
 810cfa6:	f003 0302 	and.w	r3, r3, #2
 810cfaa:	2b00      	cmp	r3, #0
 810cfac:	d020      	beq.n	810cff0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810cfae:	68fb      	ldr	r3, [r7, #12]
 810cfb0:	f003 0302 	and.w	r3, r3, #2
 810cfb4:	2b00      	cmp	r3, #0
 810cfb6:	d01b      	beq.n	810cff0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 810cfb8:	687b      	ldr	r3, [r7, #4]
 810cfba:	681b      	ldr	r3, [r3, #0]
 810cfbc:	f06f 0202 	mvn.w	r2, #2
 810cfc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810cfc2:	687b      	ldr	r3, [r7, #4]
 810cfc4:	2201      	movs	r2, #1
 810cfc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810cfc8:	687b      	ldr	r3, [r7, #4]
 810cfca:	681b      	ldr	r3, [r3, #0]
 810cfcc:	699b      	ldr	r3, [r3, #24]
 810cfce:	f003 0303 	and.w	r3, r3, #3
 810cfd2:	2b00      	cmp	r3, #0
 810cfd4:	d003      	beq.n	810cfde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810cfd6:	6878      	ldr	r0, [r7, #4]
 810cfd8:	f000 f8e9 	bl	810d1ae <HAL_TIM_IC_CaptureCallback>
 810cfdc:	e005      	b.n	810cfea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810cfde:	6878      	ldr	r0, [r7, #4]
 810cfe0:	f000 f8db 	bl	810d19a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810cfe4:	6878      	ldr	r0, [r7, #4]
 810cfe6:	f000 f8ec 	bl	810d1c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810cfea:	687b      	ldr	r3, [r7, #4]
 810cfec:	2200      	movs	r2, #0
 810cfee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810cff0:	68bb      	ldr	r3, [r7, #8]
 810cff2:	f003 0304 	and.w	r3, r3, #4
 810cff6:	2b00      	cmp	r3, #0
 810cff8:	d020      	beq.n	810d03c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810cffa:	68fb      	ldr	r3, [r7, #12]
 810cffc:	f003 0304 	and.w	r3, r3, #4
 810d000:	2b00      	cmp	r3, #0
 810d002:	d01b      	beq.n	810d03c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810d004:	687b      	ldr	r3, [r7, #4]
 810d006:	681b      	ldr	r3, [r3, #0]
 810d008:	f06f 0204 	mvn.w	r2, #4
 810d00c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810d00e:	687b      	ldr	r3, [r7, #4]
 810d010:	2202      	movs	r2, #2
 810d012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810d014:	687b      	ldr	r3, [r7, #4]
 810d016:	681b      	ldr	r3, [r3, #0]
 810d018:	699b      	ldr	r3, [r3, #24]
 810d01a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810d01e:	2b00      	cmp	r3, #0
 810d020:	d003      	beq.n	810d02a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810d022:	6878      	ldr	r0, [r7, #4]
 810d024:	f000 f8c3 	bl	810d1ae <HAL_TIM_IC_CaptureCallback>
 810d028:	e005      	b.n	810d036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810d02a:	6878      	ldr	r0, [r7, #4]
 810d02c:	f000 f8b5 	bl	810d19a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810d030:	6878      	ldr	r0, [r7, #4]
 810d032:	f000 f8c6 	bl	810d1c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810d036:	687b      	ldr	r3, [r7, #4]
 810d038:	2200      	movs	r2, #0
 810d03a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 810d03c:	68bb      	ldr	r3, [r7, #8]
 810d03e:	f003 0308 	and.w	r3, r3, #8
 810d042:	2b00      	cmp	r3, #0
 810d044:	d020      	beq.n	810d088 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810d046:	68fb      	ldr	r3, [r7, #12]
 810d048:	f003 0308 	and.w	r3, r3, #8
 810d04c:	2b00      	cmp	r3, #0
 810d04e:	d01b      	beq.n	810d088 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810d050:	687b      	ldr	r3, [r7, #4]
 810d052:	681b      	ldr	r3, [r3, #0]
 810d054:	f06f 0208 	mvn.w	r2, #8
 810d058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810d05a:	687b      	ldr	r3, [r7, #4]
 810d05c:	2204      	movs	r2, #4
 810d05e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810d060:	687b      	ldr	r3, [r7, #4]
 810d062:	681b      	ldr	r3, [r3, #0]
 810d064:	69db      	ldr	r3, [r3, #28]
 810d066:	f003 0303 	and.w	r3, r3, #3
 810d06a:	2b00      	cmp	r3, #0
 810d06c:	d003      	beq.n	810d076 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810d06e:	6878      	ldr	r0, [r7, #4]
 810d070:	f000 f89d 	bl	810d1ae <HAL_TIM_IC_CaptureCallback>
 810d074:	e005      	b.n	810d082 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810d076:	6878      	ldr	r0, [r7, #4]
 810d078:	f000 f88f 	bl	810d19a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810d07c:	6878      	ldr	r0, [r7, #4]
 810d07e:	f000 f8a0 	bl	810d1c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810d082:	687b      	ldr	r3, [r7, #4]
 810d084:	2200      	movs	r2, #0
 810d086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 810d088:	68bb      	ldr	r3, [r7, #8]
 810d08a:	f003 0310 	and.w	r3, r3, #16
 810d08e:	2b00      	cmp	r3, #0
 810d090:	d020      	beq.n	810d0d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810d092:	68fb      	ldr	r3, [r7, #12]
 810d094:	f003 0310 	and.w	r3, r3, #16
 810d098:	2b00      	cmp	r3, #0
 810d09a:	d01b      	beq.n	810d0d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 810d09c:	687b      	ldr	r3, [r7, #4]
 810d09e:	681b      	ldr	r3, [r3, #0]
 810d0a0:	f06f 0210 	mvn.w	r2, #16
 810d0a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810d0a6:	687b      	ldr	r3, [r7, #4]
 810d0a8:	2208      	movs	r2, #8
 810d0aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810d0ac:	687b      	ldr	r3, [r7, #4]
 810d0ae:	681b      	ldr	r3, [r3, #0]
 810d0b0:	69db      	ldr	r3, [r3, #28]
 810d0b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810d0b6:	2b00      	cmp	r3, #0
 810d0b8:	d003      	beq.n	810d0c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810d0ba:	6878      	ldr	r0, [r7, #4]
 810d0bc:	f000 f877 	bl	810d1ae <HAL_TIM_IC_CaptureCallback>
 810d0c0:	e005      	b.n	810d0ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810d0c2:	6878      	ldr	r0, [r7, #4]
 810d0c4:	f000 f869 	bl	810d19a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810d0c8:	6878      	ldr	r0, [r7, #4]
 810d0ca:	f000 f87a 	bl	810d1c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810d0ce:	687b      	ldr	r3, [r7, #4]
 810d0d0:	2200      	movs	r2, #0
 810d0d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810d0d4:	68bb      	ldr	r3, [r7, #8]
 810d0d6:	f003 0301 	and.w	r3, r3, #1
 810d0da:	2b00      	cmp	r3, #0
 810d0dc:	d00c      	beq.n	810d0f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810d0de:	68fb      	ldr	r3, [r7, #12]
 810d0e0:	f003 0301 	and.w	r3, r3, #1
 810d0e4:	2b00      	cmp	r3, #0
 810d0e6:	d007      	beq.n	810d0f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810d0e8:	687b      	ldr	r3, [r7, #4]
 810d0ea:	681b      	ldr	r3, [r3, #0]
 810d0ec:	f06f 0201 	mvn.w	r2, #1
 810d0f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810d0f2:	6878      	ldr	r0, [r7, #4]
 810d0f4:	f7f3 fc4c 	bl	8100990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810d0f8:	68bb      	ldr	r3, [r7, #8]
 810d0fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d0fe:	2b00      	cmp	r3, #0
 810d100:	d104      	bne.n	810d10c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810d102:	68bb      	ldr	r3, [r7, #8]
 810d104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810d108:	2b00      	cmp	r3, #0
 810d10a:	d00c      	beq.n	810d126 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810d10c:	68fb      	ldr	r3, [r7, #12]
 810d10e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d112:	2b00      	cmp	r3, #0
 810d114:	d007      	beq.n	810d126 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810d116:	687b      	ldr	r3, [r7, #4]
 810d118:	681b      	ldr	r3, [r3, #0]
 810d11a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810d11e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810d120:	6878      	ldr	r0, [r7, #4]
 810d122:	f000 f913 	bl	810d34c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810d126:	68bb      	ldr	r3, [r7, #8]
 810d128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810d12c:	2b00      	cmp	r3, #0
 810d12e:	d00c      	beq.n	810d14a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810d130:	68fb      	ldr	r3, [r7, #12]
 810d132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d136:	2b00      	cmp	r3, #0
 810d138:	d007      	beq.n	810d14a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810d13a:	687b      	ldr	r3, [r7, #4]
 810d13c:	681b      	ldr	r3, [r3, #0]
 810d13e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810d142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810d144:	6878      	ldr	r0, [r7, #4]
 810d146:	f000 f90b 	bl	810d360 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810d14a:	68bb      	ldr	r3, [r7, #8]
 810d14c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d150:	2b00      	cmp	r3, #0
 810d152:	d00c      	beq.n	810d16e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810d154:	68fb      	ldr	r3, [r7, #12]
 810d156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810d15a:	2b00      	cmp	r3, #0
 810d15c:	d007      	beq.n	810d16e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810d15e:	687b      	ldr	r3, [r7, #4]
 810d160:	681b      	ldr	r3, [r3, #0]
 810d162:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810d166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810d168:	6878      	ldr	r0, [r7, #4]
 810d16a:	f000 f834 	bl	810d1d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810d16e:	68bb      	ldr	r3, [r7, #8]
 810d170:	f003 0320 	and.w	r3, r3, #32
 810d174:	2b00      	cmp	r3, #0
 810d176:	d00c      	beq.n	810d192 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810d178:	68fb      	ldr	r3, [r7, #12]
 810d17a:	f003 0320 	and.w	r3, r3, #32
 810d17e:	2b00      	cmp	r3, #0
 810d180:	d007      	beq.n	810d192 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810d182:	687b      	ldr	r3, [r7, #4]
 810d184:	681b      	ldr	r3, [r3, #0]
 810d186:	f06f 0220 	mvn.w	r2, #32
 810d18a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810d18c:	6878      	ldr	r0, [r7, #4]
 810d18e:	f000 f8d3 	bl	810d338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810d192:	bf00      	nop
 810d194:	3710      	adds	r7, #16
 810d196:	46bd      	mov	sp, r7
 810d198:	bd80      	pop	{r7, pc}

0810d19a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810d19a:	b480      	push	{r7}
 810d19c:	b083      	sub	sp, #12
 810d19e:	af00      	add	r7, sp, #0
 810d1a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810d1a2:	bf00      	nop
 810d1a4:	370c      	adds	r7, #12
 810d1a6:	46bd      	mov	sp, r7
 810d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d1ac:	4770      	bx	lr

0810d1ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810d1ae:	b480      	push	{r7}
 810d1b0:	b083      	sub	sp, #12
 810d1b2:	af00      	add	r7, sp, #0
 810d1b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810d1b6:	bf00      	nop
 810d1b8:	370c      	adds	r7, #12
 810d1ba:	46bd      	mov	sp, r7
 810d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d1c0:	4770      	bx	lr

0810d1c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810d1c2:	b480      	push	{r7}
 810d1c4:	b083      	sub	sp, #12
 810d1c6:	af00      	add	r7, sp, #0
 810d1c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810d1ca:	bf00      	nop
 810d1cc:	370c      	adds	r7, #12
 810d1ce:	46bd      	mov	sp, r7
 810d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d1d4:	4770      	bx	lr

0810d1d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810d1d6:	b480      	push	{r7}
 810d1d8:	b083      	sub	sp, #12
 810d1da:	af00      	add	r7, sp, #0
 810d1dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810d1de:	bf00      	nop
 810d1e0:	370c      	adds	r7, #12
 810d1e2:	46bd      	mov	sp, r7
 810d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d1e8:	4770      	bx	lr
	...

0810d1ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810d1ec:	b480      	push	{r7}
 810d1ee:	b085      	sub	sp, #20
 810d1f0:	af00      	add	r7, sp, #0
 810d1f2:	6078      	str	r0, [r7, #4]
 810d1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810d1f6:	687b      	ldr	r3, [r7, #4]
 810d1f8:	681b      	ldr	r3, [r3, #0]
 810d1fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810d1fc:	687b      	ldr	r3, [r7, #4]
 810d1fe:	4a46      	ldr	r2, [pc, #280]	@ (810d318 <TIM_Base_SetConfig+0x12c>)
 810d200:	4293      	cmp	r3, r2
 810d202:	d013      	beq.n	810d22c <TIM_Base_SetConfig+0x40>
 810d204:	687b      	ldr	r3, [r7, #4]
 810d206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810d20a:	d00f      	beq.n	810d22c <TIM_Base_SetConfig+0x40>
 810d20c:	687b      	ldr	r3, [r7, #4]
 810d20e:	4a43      	ldr	r2, [pc, #268]	@ (810d31c <TIM_Base_SetConfig+0x130>)
 810d210:	4293      	cmp	r3, r2
 810d212:	d00b      	beq.n	810d22c <TIM_Base_SetConfig+0x40>
 810d214:	687b      	ldr	r3, [r7, #4]
 810d216:	4a42      	ldr	r2, [pc, #264]	@ (810d320 <TIM_Base_SetConfig+0x134>)
 810d218:	4293      	cmp	r3, r2
 810d21a:	d007      	beq.n	810d22c <TIM_Base_SetConfig+0x40>
 810d21c:	687b      	ldr	r3, [r7, #4]
 810d21e:	4a41      	ldr	r2, [pc, #260]	@ (810d324 <TIM_Base_SetConfig+0x138>)
 810d220:	4293      	cmp	r3, r2
 810d222:	d003      	beq.n	810d22c <TIM_Base_SetConfig+0x40>
 810d224:	687b      	ldr	r3, [r7, #4]
 810d226:	4a40      	ldr	r2, [pc, #256]	@ (810d328 <TIM_Base_SetConfig+0x13c>)
 810d228:	4293      	cmp	r3, r2
 810d22a:	d108      	bne.n	810d23e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810d22c:	68fb      	ldr	r3, [r7, #12]
 810d22e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810d232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810d234:	683b      	ldr	r3, [r7, #0]
 810d236:	685b      	ldr	r3, [r3, #4]
 810d238:	68fa      	ldr	r2, [r7, #12]
 810d23a:	4313      	orrs	r3, r2
 810d23c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810d23e:	687b      	ldr	r3, [r7, #4]
 810d240:	4a35      	ldr	r2, [pc, #212]	@ (810d318 <TIM_Base_SetConfig+0x12c>)
 810d242:	4293      	cmp	r3, r2
 810d244:	d01f      	beq.n	810d286 <TIM_Base_SetConfig+0x9a>
 810d246:	687b      	ldr	r3, [r7, #4]
 810d248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810d24c:	d01b      	beq.n	810d286 <TIM_Base_SetConfig+0x9a>
 810d24e:	687b      	ldr	r3, [r7, #4]
 810d250:	4a32      	ldr	r2, [pc, #200]	@ (810d31c <TIM_Base_SetConfig+0x130>)
 810d252:	4293      	cmp	r3, r2
 810d254:	d017      	beq.n	810d286 <TIM_Base_SetConfig+0x9a>
 810d256:	687b      	ldr	r3, [r7, #4]
 810d258:	4a31      	ldr	r2, [pc, #196]	@ (810d320 <TIM_Base_SetConfig+0x134>)
 810d25a:	4293      	cmp	r3, r2
 810d25c:	d013      	beq.n	810d286 <TIM_Base_SetConfig+0x9a>
 810d25e:	687b      	ldr	r3, [r7, #4]
 810d260:	4a30      	ldr	r2, [pc, #192]	@ (810d324 <TIM_Base_SetConfig+0x138>)
 810d262:	4293      	cmp	r3, r2
 810d264:	d00f      	beq.n	810d286 <TIM_Base_SetConfig+0x9a>
 810d266:	687b      	ldr	r3, [r7, #4]
 810d268:	4a2f      	ldr	r2, [pc, #188]	@ (810d328 <TIM_Base_SetConfig+0x13c>)
 810d26a:	4293      	cmp	r3, r2
 810d26c:	d00b      	beq.n	810d286 <TIM_Base_SetConfig+0x9a>
 810d26e:	687b      	ldr	r3, [r7, #4]
 810d270:	4a2e      	ldr	r2, [pc, #184]	@ (810d32c <TIM_Base_SetConfig+0x140>)
 810d272:	4293      	cmp	r3, r2
 810d274:	d007      	beq.n	810d286 <TIM_Base_SetConfig+0x9a>
 810d276:	687b      	ldr	r3, [r7, #4]
 810d278:	4a2d      	ldr	r2, [pc, #180]	@ (810d330 <TIM_Base_SetConfig+0x144>)
 810d27a:	4293      	cmp	r3, r2
 810d27c:	d003      	beq.n	810d286 <TIM_Base_SetConfig+0x9a>
 810d27e:	687b      	ldr	r3, [r7, #4]
 810d280:	4a2c      	ldr	r2, [pc, #176]	@ (810d334 <TIM_Base_SetConfig+0x148>)
 810d282:	4293      	cmp	r3, r2
 810d284:	d108      	bne.n	810d298 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810d286:	68fb      	ldr	r3, [r7, #12]
 810d288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810d28c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810d28e:	683b      	ldr	r3, [r7, #0]
 810d290:	68db      	ldr	r3, [r3, #12]
 810d292:	68fa      	ldr	r2, [r7, #12]
 810d294:	4313      	orrs	r3, r2
 810d296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810d298:	68fb      	ldr	r3, [r7, #12]
 810d29a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810d29e:	683b      	ldr	r3, [r7, #0]
 810d2a0:	695b      	ldr	r3, [r3, #20]
 810d2a2:	4313      	orrs	r3, r2
 810d2a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810d2a6:	687b      	ldr	r3, [r7, #4]
 810d2a8:	68fa      	ldr	r2, [r7, #12]
 810d2aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810d2ac:	683b      	ldr	r3, [r7, #0]
 810d2ae:	689a      	ldr	r2, [r3, #8]
 810d2b0:	687b      	ldr	r3, [r7, #4]
 810d2b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810d2b4:	683b      	ldr	r3, [r7, #0]
 810d2b6:	681a      	ldr	r2, [r3, #0]
 810d2b8:	687b      	ldr	r3, [r7, #4]
 810d2ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810d2bc:	687b      	ldr	r3, [r7, #4]
 810d2be:	4a16      	ldr	r2, [pc, #88]	@ (810d318 <TIM_Base_SetConfig+0x12c>)
 810d2c0:	4293      	cmp	r3, r2
 810d2c2:	d00f      	beq.n	810d2e4 <TIM_Base_SetConfig+0xf8>
 810d2c4:	687b      	ldr	r3, [r7, #4]
 810d2c6:	4a18      	ldr	r2, [pc, #96]	@ (810d328 <TIM_Base_SetConfig+0x13c>)
 810d2c8:	4293      	cmp	r3, r2
 810d2ca:	d00b      	beq.n	810d2e4 <TIM_Base_SetConfig+0xf8>
 810d2cc:	687b      	ldr	r3, [r7, #4]
 810d2ce:	4a17      	ldr	r2, [pc, #92]	@ (810d32c <TIM_Base_SetConfig+0x140>)
 810d2d0:	4293      	cmp	r3, r2
 810d2d2:	d007      	beq.n	810d2e4 <TIM_Base_SetConfig+0xf8>
 810d2d4:	687b      	ldr	r3, [r7, #4]
 810d2d6:	4a16      	ldr	r2, [pc, #88]	@ (810d330 <TIM_Base_SetConfig+0x144>)
 810d2d8:	4293      	cmp	r3, r2
 810d2da:	d003      	beq.n	810d2e4 <TIM_Base_SetConfig+0xf8>
 810d2dc:	687b      	ldr	r3, [r7, #4]
 810d2de:	4a15      	ldr	r2, [pc, #84]	@ (810d334 <TIM_Base_SetConfig+0x148>)
 810d2e0:	4293      	cmp	r3, r2
 810d2e2:	d103      	bne.n	810d2ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810d2e4:	683b      	ldr	r3, [r7, #0]
 810d2e6:	691a      	ldr	r2, [r3, #16]
 810d2e8:	687b      	ldr	r3, [r7, #4]
 810d2ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810d2ec:	687b      	ldr	r3, [r7, #4]
 810d2ee:	2201      	movs	r2, #1
 810d2f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810d2f2:	687b      	ldr	r3, [r7, #4]
 810d2f4:	691b      	ldr	r3, [r3, #16]
 810d2f6:	f003 0301 	and.w	r3, r3, #1
 810d2fa:	2b01      	cmp	r3, #1
 810d2fc:	d105      	bne.n	810d30a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810d2fe:	687b      	ldr	r3, [r7, #4]
 810d300:	691b      	ldr	r3, [r3, #16]
 810d302:	f023 0201 	bic.w	r2, r3, #1
 810d306:	687b      	ldr	r3, [r7, #4]
 810d308:	611a      	str	r2, [r3, #16]
  }
}
 810d30a:	bf00      	nop
 810d30c:	3714      	adds	r7, #20
 810d30e:	46bd      	mov	sp, r7
 810d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d314:	4770      	bx	lr
 810d316:	bf00      	nop
 810d318:	40010000 	.word	0x40010000
 810d31c:	40000400 	.word	0x40000400
 810d320:	40000800 	.word	0x40000800
 810d324:	40000c00 	.word	0x40000c00
 810d328:	40010400 	.word	0x40010400
 810d32c:	40014000 	.word	0x40014000
 810d330:	40014400 	.word	0x40014400
 810d334:	40014800 	.word	0x40014800

0810d338 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810d338:	b480      	push	{r7}
 810d33a:	b083      	sub	sp, #12
 810d33c:	af00      	add	r7, sp, #0
 810d33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810d340:	bf00      	nop
 810d342:	370c      	adds	r7, #12
 810d344:	46bd      	mov	sp, r7
 810d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d34a:	4770      	bx	lr

0810d34c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810d34c:	b480      	push	{r7}
 810d34e:	b083      	sub	sp, #12
 810d350:	af00      	add	r7, sp, #0
 810d352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810d354:	bf00      	nop
 810d356:	370c      	adds	r7, #12
 810d358:	46bd      	mov	sp, r7
 810d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d35e:	4770      	bx	lr

0810d360 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810d360:	b480      	push	{r7}
 810d362:	b083      	sub	sp, #12
 810d364:	af00      	add	r7, sp, #0
 810d366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810d368:	bf00      	nop
 810d36a:	370c      	adds	r7, #12
 810d36c:	46bd      	mov	sp, r7
 810d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d372:	4770      	bx	lr

0810d374 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810d374:	b580      	push	{r7, lr}
 810d376:	b08a      	sub	sp, #40	@ 0x28
 810d378:	af02      	add	r7, sp, #8
 810d37a:	60f8      	str	r0, [r7, #12]
 810d37c:	60b9      	str	r1, [r7, #8]
 810d37e:	603b      	str	r3, [r7, #0]
 810d380:	4613      	mov	r3, r2
 810d382:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810d384:	68fb      	ldr	r3, [r7, #12]
 810d386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810d38a:	2b20      	cmp	r3, #32
 810d38c:	d17b      	bne.n	810d486 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810d38e:	68bb      	ldr	r3, [r7, #8]
 810d390:	2b00      	cmp	r3, #0
 810d392:	d002      	beq.n	810d39a <HAL_UART_Transmit+0x26>
 810d394:	88fb      	ldrh	r3, [r7, #6]
 810d396:	2b00      	cmp	r3, #0
 810d398:	d101      	bne.n	810d39e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810d39a:	2301      	movs	r3, #1
 810d39c:	e074      	b.n	810d488 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810d39e:	68fb      	ldr	r3, [r7, #12]
 810d3a0:	2200      	movs	r2, #0
 810d3a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810d3a6:	68fb      	ldr	r3, [r7, #12]
 810d3a8:	2221      	movs	r2, #33	@ 0x21
 810d3aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810d3ae:	f7fb f833 	bl	8108418 <HAL_GetTick>
 810d3b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810d3b4:	68fb      	ldr	r3, [r7, #12]
 810d3b6:	88fa      	ldrh	r2, [r7, #6]
 810d3b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810d3bc:	68fb      	ldr	r3, [r7, #12]
 810d3be:	88fa      	ldrh	r2, [r7, #6]
 810d3c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810d3c4:	68fb      	ldr	r3, [r7, #12]
 810d3c6:	689b      	ldr	r3, [r3, #8]
 810d3c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810d3cc:	d108      	bne.n	810d3e0 <HAL_UART_Transmit+0x6c>
 810d3ce:	68fb      	ldr	r3, [r7, #12]
 810d3d0:	691b      	ldr	r3, [r3, #16]
 810d3d2:	2b00      	cmp	r3, #0
 810d3d4:	d104      	bne.n	810d3e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810d3d6:	2300      	movs	r3, #0
 810d3d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810d3da:	68bb      	ldr	r3, [r7, #8]
 810d3dc:	61bb      	str	r3, [r7, #24]
 810d3de:	e003      	b.n	810d3e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 810d3e0:	68bb      	ldr	r3, [r7, #8]
 810d3e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810d3e4:	2300      	movs	r3, #0
 810d3e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810d3e8:	e030      	b.n	810d44c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810d3ea:	683b      	ldr	r3, [r7, #0]
 810d3ec:	9300      	str	r3, [sp, #0]
 810d3ee:	697b      	ldr	r3, [r7, #20]
 810d3f0:	2200      	movs	r2, #0
 810d3f2:	2180      	movs	r1, #128	@ 0x80
 810d3f4:	68f8      	ldr	r0, [r7, #12]
 810d3f6:	f000 f84b 	bl	810d490 <UART_WaitOnFlagUntilTimeout>
 810d3fa:	4603      	mov	r3, r0
 810d3fc:	2b00      	cmp	r3, #0
 810d3fe:	d005      	beq.n	810d40c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 810d400:	68fb      	ldr	r3, [r7, #12]
 810d402:	2220      	movs	r2, #32
 810d404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810d408:	2303      	movs	r3, #3
 810d40a:	e03d      	b.n	810d488 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810d40c:	69fb      	ldr	r3, [r7, #28]
 810d40e:	2b00      	cmp	r3, #0
 810d410:	d10b      	bne.n	810d42a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810d412:	69bb      	ldr	r3, [r7, #24]
 810d414:	881b      	ldrh	r3, [r3, #0]
 810d416:	461a      	mov	r2, r3
 810d418:	68fb      	ldr	r3, [r7, #12]
 810d41a:	681b      	ldr	r3, [r3, #0]
 810d41c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810d420:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810d422:	69bb      	ldr	r3, [r7, #24]
 810d424:	3302      	adds	r3, #2
 810d426:	61bb      	str	r3, [r7, #24]
 810d428:	e007      	b.n	810d43a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810d42a:	69fb      	ldr	r3, [r7, #28]
 810d42c:	781a      	ldrb	r2, [r3, #0]
 810d42e:	68fb      	ldr	r3, [r7, #12]
 810d430:	681b      	ldr	r3, [r3, #0]
 810d432:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810d434:	69fb      	ldr	r3, [r7, #28]
 810d436:	3301      	adds	r3, #1
 810d438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810d43a:	68fb      	ldr	r3, [r7, #12]
 810d43c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810d440:	b29b      	uxth	r3, r3
 810d442:	3b01      	subs	r3, #1
 810d444:	b29a      	uxth	r2, r3
 810d446:	68fb      	ldr	r3, [r7, #12]
 810d448:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 810d44c:	68fb      	ldr	r3, [r7, #12]
 810d44e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810d452:	b29b      	uxth	r3, r3
 810d454:	2b00      	cmp	r3, #0
 810d456:	d1c8      	bne.n	810d3ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810d458:	683b      	ldr	r3, [r7, #0]
 810d45a:	9300      	str	r3, [sp, #0]
 810d45c:	697b      	ldr	r3, [r7, #20]
 810d45e:	2200      	movs	r2, #0
 810d460:	2140      	movs	r1, #64	@ 0x40
 810d462:	68f8      	ldr	r0, [r7, #12]
 810d464:	f000 f814 	bl	810d490 <UART_WaitOnFlagUntilTimeout>
 810d468:	4603      	mov	r3, r0
 810d46a:	2b00      	cmp	r3, #0
 810d46c:	d005      	beq.n	810d47a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810d46e:	68fb      	ldr	r3, [r7, #12]
 810d470:	2220      	movs	r2, #32
 810d472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810d476:	2303      	movs	r3, #3
 810d478:	e006      	b.n	810d488 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810d47a:	68fb      	ldr	r3, [r7, #12]
 810d47c:	2220      	movs	r2, #32
 810d47e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810d482:	2300      	movs	r3, #0
 810d484:	e000      	b.n	810d488 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810d486:	2302      	movs	r3, #2
  }
}
 810d488:	4618      	mov	r0, r3
 810d48a:	3720      	adds	r7, #32
 810d48c:	46bd      	mov	sp, r7
 810d48e:	bd80      	pop	{r7, pc}

0810d490 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810d490:	b580      	push	{r7, lr}
 810d492:	b084      	sub	sp, #16
 810d494:	af00      	add	r7, sp, #0
 810d496:	60f8      	str	r0, [r7, #12]
 810d498:	60b9      	str	r1, [r7, #8]
 810d49a:	603b      	str	r3, [r7, #0]
 810d49c:	4613      	mov	r3, r2
 810d49e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810d4a0:	e04f      	b.n	810d542 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810d4a2:	69bb      	ldr	r3, [r7, #24]
 810d4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d4a8:	d04b      	beq.n	810d542 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810d4aa:	f7fa ffb5 	bl	8108418 <HAL_GetTick>
 810d4ae:	4602      	mov	r2, r0
 810d4b0:	683b      	ldr	r3, [r7, #0]
 810d4b2:	1ad3      	subs	r3, r2, r3
 810d4b4:	69ba      	ldr	r2, [r7, #24]
 810d4b6:	429a      	cmp	r2, r3
 810d4b8:	d302      	bcc.n	810d4c0 <UART_WaitOnFlagUntilTimeout+0x30>
 810d4ba:	69bb      	ldr	r3, [r7, #24]
 810d4bc:	2b00      	cmp	r3, #0
 810d4be:	d101      	bne.n	810d4c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810d4c0:	2303      	movs	r3, #3
 810d4c2:	e04e      	b.n	810d562 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810d4c4:	68fb      	ldr	r3, [r7, #12]
 810d4c6:	681b      	ldr	r3, [r3, #0]
 810d4c8:	681b      	ldr	r3, [r3, #0]
 810d4ca:	f003 0304 	and.w	r3, r3, #4
 810d4ce:	2b00      	cmp	r3, #0
 810d4d0:	d037      	beq.n	810d542 <UART_WaitOnFlagUntilTimeout+0xb2>
 810d4d2:	68bb      	ldr	r3, [r7, #8]
 810d4d4:	2b80      	cmp	r3, #128	@ 0x80
 810d4d6:	d034      	beq.n	810d542 <UART_WaitOnFlagUntilTimeout+0xb2>
 810d4d8:	68bb      	ldr	r3, [r7, #8]
 810d4da:	2b40      	cmp	r3, #64	@ 0x40
 810d4dc:	d031      	beq.n	810d542 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810d4de:	68fb      	ldr	r3, [r7, #12]
 810d4e0:	681b      	ldr	r3, [r3, #0]
 810d4e2:	69db      	ldr	r3, [r3, #28]
 810d4e4:	f003 0308 	and.w	r3, r3, #8
 810d4e8:	2b08      	cmp	r3, #8
 810d4ea:	d110      	bne.n	810d50e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810d4ec:	68fb      	ldr	r3, [r7, #12]
 810d4ee:	681b      	ldr	r3, [r3, #0]
 810d4f0:	2208      	movs	r2, #8
 810d4f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810d4f4:	68f8      	ldr	r0, [r7, #12]
 810d4f6:	f000 f838 	bl	810d56a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810d4fa:	68fb      	ldr	r3, [r7, #12]
 810d4fc:	2208      	movs	r2, #8
 810d4fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810d502:	68fb      	ldr	r3, [r7, #12]
 810d504:	2200      	movs	r2, #0
 810d506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810d50a:	2301      	movs	r3, #1
 810d50c:	e029      	b.n	810d562 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810d50e:	68fb      	ldr	r3, [r7, #12]
 810d510:	681b      	ldr	r3, [r3, #0]
 810d512:	69db      	ldr	r3, [r3, #28]
 810d514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810d518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810d51c:	d111      	bne.n	810d542 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810d51e:	68fb      	ldr	r3, [r7, #12]
 810d520:	681b      	ldr	r3, [r3, #0]
 810d522:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810d526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810d528:	68f8      	ldr	r0, [r7, #12]
 810d52a:	f000 f81e 	bl	810d56a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810d52e:	68fb      	ldr	r3, [r7, #12]
 810d530:	2220      	movs	r2, #32
 810d532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810d536:	68fb      	ldr	r3, [r7, #12]
 810d538:	2200      	movs	r2, #0
 810d53a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810d53e:	2303      	movs	r3, #3
 810d540:	e00f      	b.n	810d562 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810d542:	68fb      	ldr	r3, [r7, #12]
 810d544:	681b      	ldr	r3, [r3, #0]
 810d546:	69da      	ldr	r2, [r3, #28]
 810d548:	68bb      	ldr	r3, [r7, #8]
 810d54a:	4013      	ands	r3, r2
 810d54c:	68ba      	ldr	r2, [r7, #8]
 810d54e:	429a      	cmp	r2, r3
 810d550:	bf0c      	ite	eq
 810d552:	2301      	moveq	r3, #1
 810d554:	2300      	movne	r3, #0
 810d556:	b2db      	uxtb	r3, r3
 810d558:	461a      	mov	r2, r3
 810d55a:	79fb      	ldrb	r3, [r7, #7]
 810d55c:	429a      	cmp	r2, r3
 810d55e:	d0a0      	beq.n	810d4a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810d560:	2300      	movs	r3, #0
}
 810d562:	4618      	mov	r0, r3
 810d564:	3710      	adds	r7, #16
 810d566:	46bd      	mov	sp, r7
 810d568:	bd80      	pop	{r7, pc}

0810d56a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810d56a:	b480      	push	{r7}
 810d56c:	b095      	sub	sp, #84	@ 0x54
 810d56e:	af00      	add	r7, sp, #0
 810d570:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810d572:	687b      	ldr	r3, [r7, #4]
 810d574:	681b      	ldr	r3, [r3, #0]
 810d576:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d57a:	e853 3f00 	ldrex	r3, [r3]
 810d57e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810d580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d582:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810d586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810d588:	687b      	ldr	r3, [r7, #4]
 810d58a:	681b      	ldr	r3, [r3, #0]
 810d58c:	461a      	mov	r2, r3
 810d58e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810d590:	643b      	str	r3, [r7, #64]	@ 0x40
 810d592:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d594:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810d596:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810d598:	e841 2300 	strex	r3, r2, [r1]
 810d59c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810d59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d5a0:	2b00      	cmp	r3, #0
 810d5a2:	d1e6      	bne.n	810d572 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810d5a4:	687b      	ldr	r3, [r7, #4]
 810d5a6:	681b      	ldr	r3, [r3, #0]
 810d5a8:	3308      	adds	r3, #8
 810d5aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d5ac:	6a3b      	ldr	r3, [r7, #32]
 810d5ae:	e853 3f00 	ldrex	r3, [r3]
 810d5b2:	61fb      	str	r3, [r7, #28]
   return(result);
 810d5b4:	69fb      	ldr	r3, [r7, #28]
 810d5b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810d5ba:	f023 0301 	bic.w	r3, r3, #1
 810d5be:	64bb      	str	r3, [r7, #72]	@ 0x48
 810d5c0:	687b      	ldr	r3, [r7, #4]
 810d5c2:	681b      	ldr	r3, [r3, #0]
 810d5c4:	3308      	adds	r3, #8
 810d5c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810d5c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810d5ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d5cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810d5ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810d5d0:	e841 2300 	strex	r3, r2, [r1]
 810d5d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810d5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d5d8:	2b00      	cmp	r3, #0
 810d5da:	d1e3      	bne.n	810d5a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810d5dc:	687b      	ldr	r3, [r7, #4]
 810d5de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810d5e0:	2b01      	cmp	r3, #1
 810d5e2:	d118      	bne.n	810d616 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810d5e4:	687b      	ldr	r3, [r7, #4]
 810d5e6:	681b      	ldr	r3, [r3, #0]
 810d5e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810d5ea:	68fb      	ldr	r3, [r7, #12]
 810d5ec:	e853 3f00 	ldrex	r3, [r3]
 810d5f0:	60bb      	str	r3, [r7, #8]
   return(result);
 810d5f2:	68bb      	ldr	r3, [r7, #8]
 810d5f4:	f023 0310 	bic.w	r3, r3, #16
 810d5f8:	647b      	str	r3, [r7, #68]	@ 0x44
 810d5fa:	687b      	ldr	r3, [r7, #4]
 810d5fc:	681b      	ldr	r3, [r3, #0]
 810d5fe:	461a      	mov	r2, r3
 810d600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810d602:	61bb      	str	r3, [r7, #24]
 810d604:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810d606:	6979      	ldr	r1, [r7, #20]
 810d608:	69ba      	ldr	r2, [r7, #24]
 810d60a:	e841 2300 	strex	r3, r2, [r1]
 810d60e:	613b      	str	r3, [r7, #16]
   return(result);
 810d610:	693b      	ldr	r3, [r7, #16]
 810d612:	2b00      	cmp	r3, #0
 810d614:	d1e6      	bne.n	810d5e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810d616:	687b      	ldr	r3, [r7, #4]
 810d618:	2220      	movs	r2, #32
 810d61a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810d61e:	687b      	ldr	r3, [r7, #4]
 810d620:	2200      	movs	r2, #0
 810d622:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810d624:	687b      	ldr	r3, [r7, #4]
 810d626:	2200      	movs	r2, #0
 810d628:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810d62a:	bf00      	nop
 810d62c:	3754      	adds	r7, #84	@ 0x54
 810d62e:	46bd      	mov	sp, r7
 810d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d634:	4770      	bx	lr
	...

0810d638 <__NVIC_SetPriority>:
{
 810d638:	b480      	push	{r7}
 810d63a:	b083      	sub	sp, #12
 810d63c:	af00      	add	r7, sp, #0
 810d63e:	4603      	mov	r3, r0
 810d640:	6039      	str	r1, [r7, #0]
 810d642:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810d644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810d648:	2b00      	cmp	r3, #0
 810d64a:	db0a      	blt.n	810d662 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810d64c:	683b      	ldr	r3, [r7, #0]
 810d64e:	b2da      	uxtb	r2, r3
 810d650:	490c      	ldr	r1, [pc, #48]	@ (810d684 <__NVIC_SetPriority+0x4c>)
 810d652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810d656:	0112      	lsls	r2, r2, #4
 810d658:	b2d2      	uxtb	r2, r2
 810d65a:	440b      	add	r3, r1
 810d65c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 810d660:	e00a      	b.n	810d678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810d662:	683b      	ldr	r3, [r7, #0]
 810d664:	b2da      	uxtb	r2, r3
 810d666:	4908      	ldr	r1, [pc, #32]	@ (810d688 <__NVIC_SetPriority+0x50>)
 810d668:	88fb      	ldrh	r3, [r7, #6]
 810d66a:	f003 030f 	and.w	r3, r3, #15
 810d66e:	3b04      	subs	r3, #4
 810d670:	0112      	lsls	r2, r2, #4
 810d672:	b2d2      	uxtb	r2, r2
 810d674:	440b      	add	r3, r1
 810d676:	761a      	strb	r2, [r3, #24]
}
 810d678:	bf00      	nop
 810d67a:	370c      	adds	r7, #12
 810d67c:	46bd      	mov	sp, r7
 810d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d682:	4770      	bx	lr
 810d684:	e000e100 	.word	0xe000e100
 810d688:	e000ed00 	.word	0xe000ed00

0810d68c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 810d68c:	b580      	push	{r7, lr}
 810d68e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 810d690:	4b05      	ldr	r3, [pc, #20]	@ (810d6a8 <SysTick_Handler+0x1c>)
 810d692:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810d694:	f003 fd5a 	bl	811114c <xTaskGetSchedulerState>
 810d698:	4603      	mov	r3, r0
 810d69a:	2b01      	cmp	r3, #1
 810d69c:	d001      	beq.n	810d6a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 810d69e:	f001 f913 	bl	810e8c8 <xPortSysTickHandler>
  }
}
 810d6a2:	bf00      	nop
 810d6a4:	bd80      	pop	{r7, pc}
 810d6a6:	bf00      	nop
 810d6a8:	e000e010 	.word	0xe000e010

0810d6ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810d6ac:	b580      	push	{r7, lr}
 810d6ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810d6b0:	2100      	movs	r1, #0
 810d6b2:	f06f 0004 	mvn.w	r0, #4
 810d6b6:	f7ff ffbf 	bl	810d638 <__NVIC_SetPriority>
#endif
}
 810d6ba:	bf00      	nop
 810d6bc:	bd80      	pop	{r7, pc}
	...

0810d6c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810d6c0:	b480      	push	{r7}
 810d6c2:	b083      	sub	sp, #12
 810d6c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810d6c6:	f3ef 8305 	mrs	r3, IPSR
 810d6ca:	603b      	str	r3, [r7, #0]
  return(result);
 810d6cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810d6ce:	2b00      	cmp	r3, #0
 810d6d0:	d003      	beq.n	810d6da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810d6d2:	f06f 0305 	mvn.w	r3, #5
 810d6d6:	607b      	str	r3, [r7, #4]
 810d6d8:	e00c      	b.n	810d6f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810d6da:	4b0a      	ldr	r3, [pc, #40]	@ (810d704 <osKernelInitialize+0x44>)
 810d6dc:	681b      	ldr	r3, [r3, #0]
 810d6de:	2b00      	cmp	r3, #0
 810d6e0:	d105      	bne.n	810d6ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810d6e2:	4b08      	ldr	r3, [pc, #32]	@ (810d704 <osKernelInitialize+0x44>)
 810d6e4:	2201      	movs	r2, #1
 810d6e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810d6e8:	2300      	movs	r3, #0
 810d6ea:	607b      	str	r3, [r7, #4]
 810d6ec:	e002      	b.n	810d6f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810d6ee:	f04f 33ff 	mov.w	r3, #4294967295
 810d6f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810d6f4:	687b      	ldr	r3, [r7, #4]
}
 810d6f6:	4618      	mov	r0, r3
 810d6f8:	370c      	adds	r7, #12
 810d6fa:	46bd      	mov	sp, r7
 810d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d700:	4770      	bx	lr
 810d702:	bf00      	nop
 810d704:	100003c0 	.word	0x100003c0

0810d708 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810d708:	b580      	push	{r7, lr}
 810d70a:	b082      	sub	sp, #8
 810d70c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810d70e:	f3ef 8305 	mrs	r3, IPSR
 810d712:	603b      	str	r3, [r7, #0]
  return(result);
 810d714:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810d716:	2b00      	cmp	r3, #0
 810d718:	d003      	beq.n	810d722 <osKernelStart+0x1a>
    stat = osErrorISR;
 810d71a:	f06f 0305 	mvn.w	r3, #5
 810d71e:	607b      	str	r3, [r7, #4]
 810d720:	e010      	b.n	810d744 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810d722:	4b0b      	ldr	r3, [pc, #44]	@ (810d750 <osKernelStart+0x48>)
 810d724:	681b      	ldr	r3, [r3, #0]
 810d726:	2b01      	cmp	r3, #1
 810d728:	d109      	bne.n	810d73e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810d72a:	f7ff ffbf 	bl	810d6ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810d72e:	4b08      	ldr	r3, [pc, #32]	@ (810d750 <osKernelStart+0x48>)
 810d730:	2202      	movs	r2, #2
 810d732:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810d734:	f003 f85c 	bl	81107f0 <vTaskStartScheduler>
      stat = osOK;
 810d738:	2300      	movs	r3, #0
 810d73a:	607b      	str	r3, [r7, #4]
 810d73c:	e002      	b.n	810d744 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810d73e:	f04f 33ff 	mov.w	r3, #4294967295
 810d742:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810d744:	687b      	ldr	r3, [r7, #4]
}
 810d746:	4618      	mov	r0, r3
 810d748:	3708      	adds	r7, #8
 810d74a:	46bd      	mov	sp, r7
 810d74c:	bd80      	pop	{r7, pc}
 810d74e:	bf00      	nop
 810d750:	100003c0 	.word	0x100003c0

0810d754 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 810d754:	b580      	push	{r7, lr}
 810d756:	b082      	sub	sp, #8
 810d758:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810d75a:	f3ef 8305 	mrs	r3, IPSR
 810d75e:	603b      	str	r3, [r7, #0]
  return(result);
 810d760:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 810d762:	2b00      	cmp	r3, #0
 810d764:	d003      	beq.n	810d76e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 810d766:	f003 f96f 	bl	8110a48 <xTaskGetTickCountFromISR>
 810d76a:	6078      	str	r0, [r7, #4]
 810d76c:	e002      	b.n	810d774 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 810d76e:	f003 f95b 	bl	8110a28 <xTaskGetTickCount>
 810d772:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 810d774:	687b      	ldr	r3, [r7, #4]
}
 810d776:	4618      	mov	r0, r3
 810d778:	3708      	adds	r7, #8
 810d77a:	46bd      	mov	sp, r7
 810d77c:	bd80      	pop	{r7, pc}

0810d77e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810d77e:	b580      	push	{r7, lr}
 810d780:	b08e      	sub	sp, #56	@ 0x38
 810d782:	af04      	add	r7, sp, #16
 810d784:	60f8      	str	r0, [r7, #12]
 810d786:	60b9      	str	r1, [r7, #8]
 810d788:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810d78a:	2300      	movs	r3, #0
 810d78c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810d78e:	f3ef 8305 	mrs	r3, IPSR
 810d792:	617b      	str	r3, [r7, #20]
  return(result);
 810d794:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810d796:	2b00      	cmp	r3, #0
 810d798:	d17e      	bne.n	810d898 <osThreadNew+0x11a>
 810d79a:	68fb      	ldr	r3, [r7, #12]
 810d79c:	2b00      	cmp	r3, #0
 810d79e:	d07b      	beq.n	810d898 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810d7a0:	2380      	movs	r3, #128	@ 0x80
 810d7a2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810d7a4:	2318      	movs	r3, #24
 810d7a6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810d7a8:	2300      	movs	r3, #0
 810d7aa:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810d7ac:	f04f 33ff 	mov.w	r3, #4294967295
 810d7b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810d7b2:	687b      	ldr	r3, [r7, #4]
 810d7b4:	2b00      	cmp	r3, #0
 810d7b6:	d045      	beq.n	810d844 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810d7b8:	687b      	ldr	r3, [r7, #4]
 810d7ba:	681b      	ldr	r3, [r3, #0]
 810d7bc:	2b00      	cmp	r3, #0
 810d7be:	d002      	beq.n	810d7c6 <osThreadNew+0x48>
        name = attr->name;
 810d7c0:	687b      	ldr	r3, [r7, #4]
 810d7c2:	681b      	ldr	r3, [r3, #0]
 810d7c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810d7c6:	687b      	ldr	r3, [r7, #4]
 810d7c8:	699b      	ldr	r3, [r3, #24]
 810d7ca:	2b00      	cmp	r3, #0
 810d7cc:	d002      	beq.n	810d7d4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810d7ce:	687b      	ldr	r3, [r7, #4]
 810d7d0:	699b      	ldr	r3, [r3, #24]
 810d7d2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810d7d4:	69fb      	ldr	r3, [r7, #28]
 810d7d6:	2b00      	cmp	r3, #0
 810d7d8:	d008      	beq.n	810d7ec <osThreadNew+0x6e>
 810d7da:	69fb      	ldr	r3, [r7, #28]
 810d7dc:	2b38      	cmp	r3, #56	@ 0x38
 810d7de:	d805      	bhi.n	810d7ec <osThreadNew+0x6e>
 810d7e0:	687b      	ldr	r3, [r7, #4]
 810d7e2:	685b      	ldr	r3, [r3, #4]
 810d7e4:	f003 0301 	and.w	r3, r3, #1
 810d7e8:	2b00      	cmp	r3, #0
 810d7ea:	d001      	beq.n	810d7f0 <osThreadNew+0x72>
        return (NULL);
 810d7ec:	2300      	movs	r3, #0
 810d7ee:	e054      	b.n	810d89a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810d7f0:	687b      	ldr	r3, [r7, #4]
 810d7f2:	695b      	ldr	r3, [r3, #20]
 810d7f4:	2b00      	cmp	r3, #0
 810d7f6:	d003      	beq.n	810d800 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810d7f8:	687b      	ldr	r3, [r7, #4]
 810d7fa:	695b      	ldr	r3, [r3, #20]
 810d7fc:	089b      	lsrs	r3, r3, #2
 810d7fe:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810d800:	687b      	ldr	r3, [r7, #4]
 810d802:	689b      	ldr	r3, [r3, #8]
 810d804:	2b00      	cmp	r3, #0
 810d806:	d00e      	beq.n	810d826 <osThreadNew+0xa8>
 810d808:	687b      	ldr	r3, [r7, #4]
 810d80a:	68db      	ldr	r3, [r3, #12]
 810d80c:	2ba7      	cmp	r3, #167	@ 0xa7
 810d80e:	d90a      	bls.n	810d826 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810d810:	687b      	ldr	r3, [r7, #4]
 810d812:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810d814:	2b00      	cmp	r3, #0
 810d816:	d006      	beq.n	810d826 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810d818:	687b      	ldr	r3, [r7, #4]
 810d81a:	695b      	ldr	r3, [r3, #20]
 810d81c:	2b00      	cmp	r3, #0
 810d81e:	d002      	beq.n	810d826 <osThreadNew+0xa8>
        mem = 1;
 810d820:	2301      	movs	r3, #1
 810d822:	61bb      	str	r3, [r7, #24]
 810d824:	e010      	b.n	810d848 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810d826:	687b      	ldr	r3, [r7, #4]
 810d828:	689b      	ldr	r3, [r3, #8]
 810d82a:	2b00      	cmp	r3, #0
 810d82c:	d10c      	bne.n	810d848 <osThreadNew+0xca>
 810d82e:	687b      	ldr	r3, [r7, #4]
 810d830:	68db      	ldr	r3, [r3, #12]
 810d832:	2b00      	cmp	r3, #0
 810d834:	d108      	bne.n	810d848 <osThreadNew+0xca>
 810d836:	687b      	ldr	r3, [r7, #4]
 810d838:	691b      	ldr	r3, [r3, #16]
 810d83a:	2b00      	cmp	r3, #0
 810d83c:	d104      	bne.n	810d848 <osThreadNew+0xca>
          mem = 0;
 810d83e:	2300      	movs	r3, #0
 810d840:	61bb      	str	r3, [r7, #24]
 810d842:	e001      	b.n	810d848 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810d844:	2300      	movs	r3, #0
 810d846:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810d848:	69bb      	ldr	r3, [r7, #24]
 810d84a:	2b01      	cmp	r3, #1
 810d84c:	d110      	bne.n	810d870 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810d84e:	687b      	ldr	r3, [r7, #4]
 810d850:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810d852:	687a      	ldr	r2, [r7, #4]
 810d854:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810d856:	9202      	str	r2, [sp, #8]
 810d858:	9301      	str	r3, [sp, #4]
 810d85a:	69fb      	ldr	r3, [r7, #28]
 810d85c:	9300      	str	r3, [sp, #0]
 810d85e:	68bb      	ldr	r3, [r7, #8]
 810d860:	6a3a      	ldr	r2, [r7, #32]
 810d862:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810d864:	68f8      	ldr	r0, [r7, #12]
 810d866:	f002 fdcf 	bl	8110408 <xTaskCreateStatic>
 810d86a:	4603      	mov	r3, r0
 810d86c:	613b      	str	r3, [r7, #16]
 810d86e:	e013      	b.n	810d898 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810d870:	69bb      	ldr	r3, [r7, #24]
 810d872:	2b00      	cmp	r3, #0
 810d874:	d110      	bne.n	810d898 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810d876:	6a3b      	ldr	r3, [r7, #32]
 810d878:	b29a      	uxth	r2, r3
 810d87a:	f107 0310 	add.w	r3, r7, #16
 810d87e:	9301      	str	r3, [sp, #4]
 810d880:	69fb      	ldr	r3, [r7, #28]
 810d882:	9300      	str	r3, [sp, #0]
 810d884:	68bb      	ldr	r3, [r7, #8]
 810d886:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810d888:	68f8      	ldr	r0, [r7, #12]
 810d88a:	f002 fe1d 	bl	81104c8 <xTaskCreate>
 810d88e:	4603      	mov	r3, r0
 810d890:	2b01      	cmp	r3, #1
 810d892:	d001      	beq.n	810d898 <osThreadNew+0x11a>
            hTask = NULL;
 810d894:	2300      	movs	r3, #0
 810d896:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810d898:	693b      	ldr	r3, [r7, #16]
}
 810d89a:	4618      	mov	r0, r3
 810d89c:	3728      	adds	r7, #40	@ 0x28
 810d89e:	46bd      	mov	sp, r7
 810d8a0:	bd80      	pop	{r7, pc}

0810d8a2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810d8a2:	b580      	push	{r7, lr}
 810d8a4:	b084      	sub	sp, #16
 810d8a6:	af00      	add	r7, sp, #0
 810d8a8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810d8aa:	f3ef 8305 	mrs	r3, IPSR
 810d8ae:	60bb      	str	r3, [r7, #8]
  return(result);
 810d8b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810d8b2:	2b00      	cmp	r3, #0
 810d8b4:	d003      	beq.n	810d8be <osDelay+0x1c>
    stat = osErrorISR;
 810d8b6:	f06f 0305 	mvn.w	r3, #5
 810d8ba:	60fb      	str	r3, [r7, #12]
 810d8bc:	e007      	b.n	810d8ce <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810d8be:	2300      	movs	r3, #0
 810d8c0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810d8c2:	687b      	ldr	r3, [r7, #4]
 810d8c4:	2b00      	cmp	r3, #0
 810d8c6:	d002      	beq.n	810d8ce <osDelay+0x2c>
      vTaskDelay(ticks);
 810d8c8:	6878      	ldr	r0, [r7, #4]
 810d8ca:	f002 ff5b 	bl	8110784 <vTaskDelay>
    }
  }

  return (stat);
 810d8ce:	68fb      	ldr	r3, [r7, #12]
}
 810d8d0:	4618      	mov	r0, r3
 810d8d2:	3710      	adds	r7, #16
 810d8d4:	46bd      	mov	sp, r7
 810d8d6:	bd80      	pop	{r7, pc}

0810d8d8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 810d8d8:	b580      	push	{r7, lr}
 810d8da:	b088      	sub	sp, #32
 810d8dc:	af00      	add	r7, sp, #0
 810d8de:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 810d8e0:	2300      	movs	r3, #0
 810d8e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810d8e4:	f3ef 8305 	mrs	r3, IPSR
 810d8e8:	60bb      	str	r3, [r7, #8]
  return(result);
 810d8ea:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 810d8ec:	2b00      	cmp	r3, #0
 810d8ee:	d174      	bne.n	810d9da <osMutexNew+0x102>
    if (attr != NULL) {
 810d8f0:	687b      	ldr	r3, [r7, #4]
 810d8f2:	2b00      	cmp	r3, #0
 810d8f4:	d003      	beq.n	810d8fe <osMutexNew+0x26>
      type = attr->attr_bits;
 810d8f6:	687b      	ldr	r3, [r7, #4]
 810d8f8:	685b      	ldr	r3, [r3, #4]
 810d8fa:	61bb      	str	r3, [r7, #24]
 810d8fc:	e001      	b.n	810d902 <osMutexNew+0x2a>
    } else {
      type = 0U;
 810d8fe:	2300      	movs	r3, #0
 810d900:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 810d902:	69bb      	ldr	r3, [r7, #24]
 810d904:	f003 0301 	and.w	r3, r3, #1
 810d908:	2b00      	cmp	r3, #0
 810d90a:	d002      	beq.n	810d912 <osMutexNew+0x3a>
      rmtx = 1U;
 810d90c:	2301      	movs	r3, #1
 810d90e:	617b      	str	r3, [r7, #20]
 810d910:	e001      	b.n	810d916 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 810d912:	2300      	movs	r3, #0
 810d914:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 810d916:	69bb      	ldr	r3, [r7, #24]
 810d918:	f003 0308 	and.w	r3, r3, #8
 810d91c:	2b00      	cmp	r3, #0
 810d91e:	d15c      	bne.n	810d9da <osMutexNew+0x102>
      mem = -1;
 810d920:	f04f 33ff 	mov.w	r3, #4294967295
 810d924:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 810d926:	687b      	ldr	r3, [r7, #4]
 810d928:	2b00      	cmp	r3, #0
 810d92a:	d015      	beq.n	810d958 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 810d92c:	687b      	ldr	r3, [r7, #4]
 810d92e:	689b      	ldr	r3, [r3, #8]
 810d930:	2b00      	cmp	r3, #0
 810d932:	d006      	beq.n	810d942 <osMutexNew+0x6a>
 810d934:	687b      	ldr	r3, [r7, #4]
 810d936:	68db      	ldr	r3, [r3, #12]
 810d938:	2b4f      	cmp	r3, #79	@ 0x4f
 810d93a:	d902      	bls.n	810d942 <osMutexNew+0x6a>
          mem = 1;
 810d93c:	2301      	movs	r3, #1
 810d93e:	613b      	str	r3, [r7, #16]
 810d940:	e00c      	b.n	810d95c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 810d942:	687b      	ldr	r3, [r7, #4]
 810d944:	689b      	ldr	r3, [r3, #8]
 810d946:	2b00      	cmp	r3, #0
 810d948:	d108      	bne.n	810d95c <osMutexNew+0x84>
 810d94a:	687b      	ldr	r3, [r7, #4]
 810d94c:	68db      	ldr	r3, [r3, #12]
 810d94e:	2b00      	cmp	r3, #0
 810d950:	d104      	bne.n	810d95c <osMutexNew+0x84>
            mem = 0;
 810d952:	2300      	movs	r3, #0
 810d954:	613b      	str	r3, [r7, #16]
 810d956:	e001      	b.n	810d95c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 810d958:	2300      	movs	r3, #0
 810d95a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 810d95c:	693b      	ldr	r3, [r7, #16]
 810d95e:	2b01      	cmp	r3, #1
 810d960:	d112      	bne.n	810d988 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 810d962:	697b      	ldr	r3, [r7, #20]
 810d964:	2b00      	cmp	r3, #0
 810d966:	d007      	beq.n	810d978 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 810d968:	687b      	ldr	r3, [r7, #4]
 810d96a:	689b      	ldr	r3, [r3, #8]
 810d96c:	4619      	mov	r1, r3
 810d96e:	2004      	movs	r0, #4
 810d970:	f001 f9b3 	bl	810ecda <xQueueCreateMutexStatic>
 810d974:	61f8      	str	r0, [r7, #28]
 810d976:	e016      	b.n	810d9a6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 810d978:	687b      	ldr	r3, [r7, #4]
 810d97a:	689b      	ldr	r3, [r3, #8]
 810d97c:	4619      	mov	r1, r3
 810d97e:	2001      	movs	r0, #1
 810d980:	f001 f9ab 	bl	810ecda <xQueueCreateMutexStatic>
 810d984:	61f8      	str	r0, [r7, #28]
 810d986:	e00e      	b.n	810d9a6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 810d988:	693b      	ldr	r3, [r7, #16]
 810d98a:	2b00      	cmp	r3, #0
 810d98c:	d10b      	bne.n	810d9a6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 810d98e:	697b      	ldr	r3, [r7, #20]
 810d990:	2b00      	cmp	r3, #0
 810d992:	d004      	beq.n	810d99e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 810d994:	2004      	movs	r0, #4
 810d996:	f001 f988 	bl	810ecaa <xQueueCreateMutex>
 810d99a:	61f8      	str	r0, [r7, #28]
 810d99c:	e003      	b.n	810d9a6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 810d99e:	2001      	movs	r0, #1
 810d9a0:	f001 f983 	bl	810ecaa <xQueueCreateMutex>
 810d9a4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 810d9a6:	69fb      	ldr	r3, [r7, #28]
 810d9a8:	2b00      	cmp	r3, #0
 810d9aa:	d00c      	beq.n	810d9c6 <osMutexNew+0xee>
        if (attr != NULL) {
 810d9ac:	687b      	ldr	r3, [r7, #4]
 810d9ae:	2b00      	cmp	r3, #0
 810d9b0:	d003      	beq.n	810d9ba <osMutexNew+0xe2>
          name = attr->name;
 810d9b2:	687b      	ldr	r3, [r7, #4]
 810d9b4:	681b      	ldr	r3, [r3, #0]
 810d9b6:	60fb      	str	r3, [r7, #12]
 810d9b8:	e001      	b.n	810d9be <osMutexNew+0xe6>
        } else {
          name = NULL;
 810d9ba:	2300      	movs	r3, #0
 810d9bc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 810d9be:	68f9      	ldr	r1, [r7, #12]
 810d9c0:	69f8      	ldr	r0, [r7, #28]
 810d9c2:	f002 f86f 	bl	810faa4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 810d9c6:	69fb      	ldr	r3, [r7, #28]
 810d9c8:	2b00      	cmp	r3, #0
 810d9ca:	d006      	beq.n	810d9da <osMutexNew+0x102>
 810d9cc:	697b      	ldr	r3, [r7, #20]
 810d9ce:	2b00      	cmp	r3, #0
 810d9d0:	d003      	beq.n	810d9da <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 810d9d2:	69fb      	ldr	r3, [r7, #28]
 810d9d4:	f043 0301 	orr.w	r3, r3, #1
 810d9d8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 810d9da:	69fb      	ldr	r3, [r7, #28]
}
 810d9dc:	4618      	mov	r0, r3
 810d9de:	3720      	adds	r7, #32
 810d9e0:	46bd      	mov	sp, r7
 810d9e2:	bd80      	pop	{r7, pc}

0810d9e4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 810d9e4:	b580      	push	{r7, lr}
 810d9e6:	b086      	sub	sp, #24
 810d9e8:	af00      	add	r7, sp, #0
 810d9ea:	6078      	str	r0, [r7, #4]
 810d9ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 810d9ee:	687b      	ldr	r3, [r7, #4]
 810d9f0:	f023 0301 	bic.w	r3, r3, #1
 810d9f4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 810d9f6:	687b      	ldr	r3, [r7, #4]
 810d9f8:	f003 0301 	and.w	r3, r3, #1
 810d9fc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 810d9fe:	2300      	movs	r3, #0
 810da00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810da02:	f3ef 8305 	mrs	r3, IPSR
 810da06:	60bb      	str	r3, [r7, #8]
  return(result);
 810da08:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 810da0a:	2b00      	cmp	r3, #0
 810da0c:	d003      	beq.n	810da16 <osMutexAcquire+0x32>
    stat = osErrorISR;
 810da0e:	f06f 0305 	mvn.w	r3, #5
 810da12:	617b      	str	r3, [r7, #20]
 810da14:	e02c      	b.n	810da70 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 810da16:	693b      	ldr	r3, [r7, #16]
 810da18:	2b00      	cmp	r3, #0
 810da1a:	d103      	bne.n	810da24 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 810da1c:	f06f 0303 	mvn.w	r3, #3
 810da20:	617b      	str	r3, [r7, #20]
 810da22:	e025      	b.n	810da70 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 810da24:	68fb      	ldr	r3, [r7, #12]
 810da26:	2b00      	cmp	r3, #0
 810da28:	d011      	beq.n	810da4e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 810da2a:	6839      	ldr	r1, [r7, #0]
 810da2c:	6938      	ldr	r0, [r7, #16]
 810da2e:	f001 f9a4 	bl	810ed7a <xQueueTakeMutexRecursive>
 810da32:	4603      	mov	r3, r0
 810da34:	2b01      	cmp	r3, #1
 810da36:	d01b      	beq.n	810da70 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 810da38:	683b      	ldr	r3, [r7, #0]
 810da3a:	2b00      	cmp	r3, #0
 810da3c:	d003      	beq.n	810da46 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 810da3e:	f06f 0301 	mvn.w	r3, #1
 810da42:	617b      	str	r3, [r7, #20]
 810da44:	e014      	b.n	810da70 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 810da46:	f06f 0302 	mvn.w	r3, #2
 810da4a:	617b      	str	r3, [r7, #20]
 810da4c:	e010      	b.n	810da70 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 810da4e:	6839      	ldr	r1, [r7, #0]
 810da50:	6938      	ldr	r0, [r7, #16]
 810da52:	f001 fd49 	bl	810f4e8 <xQueueSemaphoreTake>
 810da56:	4603      	mov	r3, r0
 810da58:	2b01      	cmp	r3, #1
 810da5a:	d009      	beq.n	810da70 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 810da5c:	683b      	ldr	r3, [r7, #0]
 810da5e:	2b00      	cmp	r3, #0
 810da60:	d003      	beq.n	810da6a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 810da62:	f06f 0301 	mvn.w	r3, #1
 810da66:	617b      	str	r3, [r7, #20]
 810da68:	e002      	b.n	810da70 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 810da6a:	f06f 0302 	mvn.w	r3, #2
 810da6e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 810da70:	697b      	ldr	r3, [r7, #20]
}
 810da72:	4618      	mov	r0, r3
 810da74:	3718      	adds	r7, #24
 810da76:	46bd      	mov	sp, r7
 810da78:	bd80      	pop	{r7, pc}

0810da7a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 810da7a:	b580      	push	{r7, lr}
 810da7c:	b086      	sub	sp, #24
 810da7e:	af00      	add	r7, sp, #0
 810da80:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 810da82:	687b      	ldr	r3, [r7, #4]
 810da84:	f023 0301 	bic.w	r3, r3, #1
 810da88:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 810da8a:	687b      	ldr	r3, [r7, #4]
 810da8c:	f003 0301 	and.w	r3, r3, #1
 810da90:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 810da92:	2300      	movs	r3, #0
 810da94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810da96:	f3ef 8305 	mrs	r3, IPSR
 810da9a:	60bb      	str	r3, [r7, #8]
  return(result);
 810da9c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 810da9e:	2b00      	cmp	r3, #0
 810daa0:	d003      	beq.n	810daaa <osMutexRelease+0x30>
    stat = osErrorISR;
 810daa2:	f06f 0305 	mvn.w	r3, #5
 810daa6:	617b      	str	r3, [r7, #20]
 810daa8:	e01f      	b.n	810daea <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 810daaa:	693b      	ldr	r3, [r7, #16]
 810daac:	2b00      	cmp	r3, #0
 810daae:	d103      	bne.n	810dab8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 810dab0:	f06f 0303 	mvn.w	r3, #3
 810dab4:	617b      	str	r3, [r7, #20]
 810dab6:	e018      	b.n	810daea <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 810dab8:	68fb      	ldr	r3, [r7, #12]
 810daba:	2b00      	cmp	r3, #0
 810dabc:	d009      	beq.n	810dad2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 810dabe:	6938      	ldr	r0, [r7, #16]
 810dac0:	f001 f926 	bl	810ed10 <xQueueGiveMutexRecursive>
 810dac4:	4603      	mov	r3, r0
 810dac6:	2b01      	cmp	r3, #1
 810dac8:	d00f      	beq.n	810daea <osMutexRelease+0x70>
        stat = osErrorResource;
 810daca:	f06f 0302 	mvn.w	r3, #2
 810dace:	617b      	str	r3, [r7, #20]
 810dad0:	e00b      	b.n	810daea <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 810dad2:	2300      	movs	r3, #0
 810dad4:	2200      	movs	r2, #0
 810dad6:	2100      	movs	r1, #0
 810dad8:	6938      	ldr	r0, [r7, #16]
 810dada:	f001 f9f3 	bl	810eec4 <xQueueGenericSend>
 810dade:	4603      	mov	r3, r0
 810dae0:	2b01      	cmp	r3, #1
 810dae2:	d002      	beq.n	810daea <osMutexRelease+0x70>
        stat = osErrorResource;
 810dae4:	f06f 0302 	mvn.w	r3, #2
 810dae8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 810daea:	697b      	ldr	r3, [r7, #20]
}
 810daec:	4618      	mov	r0, r3
 810daee:	3718      	adds	r7, #24
 810daf0:	46bd      	mov	sp, r7
 810daf2:	bd80      	pop	{r7, pc}

0810daf4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 810daf4:	b580      	push	{r7, lr}
 810daf6:	b08a      	sub	sp, #40	@ 0x28
 810daf8:	af02      	add	r7, sp, #8
 810dafa:	60f8      	str	r0, [r7, #12]
 810dafc:	60b9      	str	r1, [r7, #8]
 810dafe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 810db00:	2300      	movs	r3, #0
 810db02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810db04:	f3ef 8305 	mrs	r3, IPSR
 810db08:	613b      	str	r3, [r7, #16]
  return(result);
 810db0a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 810db0c:	2b00      	cmp	r3, #0
 810db0e:	d175      	bne.n	810dbfc <osSemaphoreNew+0x108>
 810db10:	68fb      	ldr	r3, [r7, #12]
 810db12:	2b00      	cmp	r3, #0
 810db14:	d072      	beq.n	810dbfc <osSemaphoreNew+0x108>
 810db16:	68ba      	ldr	r2, [r7, #8]
 810db18:	68fb      	ldr	r3, [r7, #12]
 810db1a:	429a      	cmp	r2, r3
 810db1c:	d86e      	bhi.n	810dbfc <osSemaphoreNew+0x108>
    mem = -1;
 810db1e:	f04f 33ff 	mov.w	r3, #4294967295
 810db22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810db24:	687b      	ldr	r3, [r7, #4]
 810db26:	2b00      	cmp	r3, #0
 810db28:	d015      	beq.n	810db56 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 810db2a:	687b      	ldr	r3, [r7, #4]
 810db2c:	689b      	ldr	r3, [r3, #8]
 810db2e:	2b00      	cmp	r3, #0
 810db30:	d006      	beq.n	810db40 <osSemaphoreNew+0x4c>
 810db32:	687b      	ldr	r3, [r7, #4]
 810db34:	68db      	ldr	r3, [r3, #12]
 810db36:	2b4f      	cmp	r3, #79	@ 0x4f
 810db38:	d902      	bls.n	810db40 <osSemaphoreNew+0x4c>
        mem = 1;
 810db3a:	2301      	movs	r3, #1
 810db3c:	61bb      	str	r3, [r7, #24]
 810db3e:	e00c      	b.n	810db5a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 810db40:	687b      	ldr	r3, [r7, #4]
 810db42:	689b      	ldr	r3, [r3, #8]
 810db44:	2b00      	cmp	r3, #0
 810db46:	d108      	bne.n	810db5a <osSemaphoreNew+0x66>
 810db48:	687b      	ldr	r3, [r7, #4]
 810db4a:	68db      	ldr	r3, [r3, #12]
 810db4c:	2b00      	cmp	r3, #0
 810db4e:	d104      	bne.n	810db5a <osSemaphoreNew+0x66>
          mem = 0;
 810db50:	2300      	movs	r3, #0
 810db52:	61bb      	str	r3, [r7, #24]
 810db54:	e001      	b.n	810db5a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 810db56:	2300      	movs	r3, #0
 810db58:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 810db5a:	69bb      	ldr	r3, [r7, #24]
 810db5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810db60:	d04c      	beq.n	810dbfc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 810db62:	68fb      	ldr	r3, [r7, #12]
 810db64:	2b01      	cmp	r3, #1
 810db66:	d128      	bne.n	810dbba <osSemaphoreNew+0xc6>
        if (mem == 1) {
 810db68:	69bb      	ldr	r3, [r7, #24]
 810db6a:	2b01      	cmp	r3, #1
 810db6c:	d10a      	bne.n	810db84 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 810db6e:	687b      	ldr	r3, [r7, #4]
 810db70:	689b      	ldr	r3, [r3, #8]
 810db72:	2203      	movs	r2, #3
 810db74:	9200      	str	r2, [sp, #0]
 810db76:	2200      	movs	r2, #0
 810db78:	2100      	movs	r1, #0
 810db7a:	2001      	movs	r0, #1
 810db7c:	f000 ffa0 	bl	810eac0 <xQueueGenericCreateStatic>
 810db80:	61f8      	str	r0, [r7, #28]
 810db82:	e005      	b.n	810db90 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 810db84:	2203      	movs	r2, #3
 810db86:	2100      	movs	r1, #0
 810db88:	2001      	movs	r0, #1
 810db8a:	f001 f816 	bl	810ebba <xQueueGenericCreate>
 810db8e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 810db90:	69fb      	ldr	r3, [r7, #28]
 810db92:	2b00      	cmp	r3, #0
 810db94:	d022      	beq.n	810dbdc <osSemaphoreNew+0xe8>
 810db96:	68bb      	ldr	r3, [r7, #8]
 810db98:	2b00      	cmp	r3, #0
 810db9a:	d01f      	beq.n	810dbdc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810db9c:	2300      	movs	r3, #0
 810db9e:	2200      	movs	r2, #0
 810dba0:	2100      	movs	r1, #0
 810dba2:	69f8      	ldr	r0, [r7, #28]
 810dba4:	f001 f98e 	bl	810eec4 <xQueueGenericSend>
 810dba8:	4603      	mov	r3, r0
 810dbaa:	2b01      	cmp	r3, #1
 810dbac:	d016      	beq.n	810dbdc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 810dbae:	69f8      	ldr	r0, [r7, #28]
 810dbb0:	f001 fe2c 	bl	810f80c <vQueueDelete>
            hSemaphore = NULL;
 810dbb4:	2300      	movs	r3, #0
 810dbb6:	61fb      	str	r3, [r7, #28]
 810dbb8:	e010      	b.n	810dbdc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 810dbba:	69bb      	ldr	r3, [r7, #24]
 810dbbc:	2b01      	cmp	r3, #1
 810dbbe:	d108      	bne.n	810dbd2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 810dbc0:	687b      	ldr	r3, [r7, #4]
 810dbc2:	689b      	ldr	r3, [r3, #8]
 810dbc4:	461a      	mov	r2, r3
 810dbc6:	68b9      	ldr	r1, [r7, #8]
 810dbc8:	68f8      	ldr	r0, [r7, #12]
 810dbca:	f001 f90d 	bl	810ede8 <xQueueCreateCountingSemaphoreStatic>
 810dbce:	61f8      	str	r0, [r7, #28]
 810dbd0:	e004      	b.n	810dbdc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 810dbd2:	68b9      	ldr	r1, [r7, #8]
 810dbd4:	68f8      	ldr	r0, [r7, #12]
 810dbd6:	f001 f940 	bl	810ee5a <xQueueCreateCountingSemaphore>
 810dbda:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 810dbdc:	69fb      	ldr	r3, [r7, #28]
 810dbde:	2b00      	cmp	r3, #0
 810dbe0:	d00c      	beq.n	810dbfc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 810dbe2:	687b      	ldr	r3, [r7, #4]
 810dbe4:	2b00      	cmp	r3, #0
 810dbe6:	d003      	beq.n	810dbf0 <osSemaphoreNew+0xfc>
          name = attr->name;
 810dbe8:	687b      	ldr	r3, [r7, #4]
 810dbea:	681b      	ldr	r3, [r3, #0]
 810dbec:	617b      	str	r3, [r7, #20]
 810dbee:	e001      	b.n	810dbf4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 810dbf0:	2300      	movs	r3, #0
 810dbf2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 810dbf4:	6979      	ldr	r1, [r7, #20]
 810dbf6:	69f8      	ldr	r0, [r7, #28]
 810dbf8:	f001 ff54 	bl	810faa4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 810dbfc:	69fb      	ldr	r3, [r7, #28]
}
 810dbfe:	4618      	mov	r0, r3
 810dc00:	3720      	adds	r7, #32
 810dc02:	46bd      	mov	sp, r7
 810dc04:	bd80      	pop	{r7, pc}
	...

0810dc08 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 810dc08:	b580      	push	{r7, lr}
 810dc0a:	b086      	sub	sp, #24
 810dc0c:	af00      	add	r7, sp, #0
 810dc0e:	6078      	str	r0, [r7, #4]
 810dc10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 810dc12:	687b      	ldr	r3, [r7, #4]
 810dc14:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 810dc16:	2300      	movs	r3, #0
 810dc18:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 810dc1a:	693b      	ldr	r3, [r7, #16]
 810dc1c:	2b00      	cmp	r3, #0
 810dc1e:	d103      	bne.n	810dc28 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 810dc20:	f06f 0303 	mvn.w	r3, #3
 810dc24:	617b      	str	r3, [r7, #20]
 810dc26:	e039      	b.n	810dc9c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810dc28:	f3ef 8305 	mrs	r3, IPSR
 810dc2c:	60fb      	str	r3, [r7, #12]
  return(result);
 810dc2e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 810dc30:	2b00      	cmp	r3, #0
 810dc32:	d022      	beq.n	810dc7a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 810dc34:	683b      	ldr	r3, [r7, #0]
 810dc36:	2b00      	cmp	r3, #0
 810dc38:	d003      	beq.n	810dc42 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 810dc3a:	f06f 0303 	mvn.w	r3, #3
 810dc3e:	617b      	str	r3, [r7, #20]
 810dc40:	e02c      	b.n	810dc9c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 810dc42:	2300      	movs	r3, #0
 810dc44:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 810dc46:	f107 0308 	add.w	r3, r7, #8
 810dc4a:	461a      	mov	r2, r3
 810dc4c:	2100      	movs	r1, #0
 810dc4e:	6938      	ldr	r0, [r7, #16]
 810dc50:	f001 fd5a 	bl	810f708 <xQueueReceiveFromISR>
 810dc54:	4603      	mov	r3, r0
 810dc56:	2b01      	cmp	r3, #1
 810dc58:	d003      	beq.n	810dc62 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 810dc5a:	f06f 0302 	mvn.w	r3, #2
 810dc5e:	617b      	str	r3, [r7, #20]
 810dc60:	e01c      	b.n	810dc9c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 810dc62:	68bb      	ldr	r3, [r7, #8]
 810dc64:	2b00      	cmp	r3, #0
 810dc66:	d019      	beq.n	810dc9c <osSemaphoreAcquire+0x94>
 810dc68:	4b0f      	ldr	r3, [pc, #60]	@ (810dca8 <osSemaphoreAcquire+0xa0>)
 810dc6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810dc6e:	601a      	str	r2, [r3, #0]
 810dc70:	f3bf 8f4f 	dsb	sy
 810dc74:	f3bf 8f6f 	isb	sy
 810dc78:	e010      	b.n	810dc9c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 810dc7a:	6839      	ldr	r1, [r7, #0]
 810dc7c:	6938      	ldr	r0, [r7, #16]
 810dc7e:	f001 fc33 	bl	810f4e8 <xQueueSemaphoreTake>
 810dc82:	4603      	mov	r3, r0
 810dc84:	2b01      	cmp	r3, #1
 810dc86:	d009      	beq.n	810dc9c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 810dc88:	683b      	ldr	r3, [r7, #0]
 810dc8a:	2b00      	cmp	r3, #0
 810dc8c:	d003      	beq.n	810dc96 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 810dc8e:	f06f 0301 	mvn.w	r3, #1
 810dc92:	617b      	str	r3, [r7, #20]
 810dc94:	e002      	b.n	810dc9c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 810dc96:	f06f 0302 	mvn.w	r3, #2
 810dc9a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 810dc9c:	697b      	ldr	r3, [r7, #20]
}
 810dc9e:	4618      	mov	r0, r3
 810dca0:	3718      	adds	r7, #24
 810dca2:	46bd      	mov	sp, r7
 810dca4:	bd80      	pop	{r7, pc}
 810dca6:	bf00      	nop
 810dca8:	e000ed04 	.word	0xe000ed04

0810dcac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 810dcac:	b580      	push	{r7, lr}
 810dcae:	b086      	sub	sp, #24
 810dcb0:	af00      	add	r7, sp, #0
 810dcb2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 810dcb4:	687b      	ldr	r3, [r7, #4]
 810dcb6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 810dcb8:	2300      	movs	r3, #0
 810dcba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 810dcbc:	693b      	ldr	r3, [r7, #16]
 810dcbe:	2b00      	cmp	r3, #0
 810dcc0:	d103      	bne.n	810dcca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 810dcc2:	f06f 0303 	mvn.w	r3, #3
 810dcc6:	617b      	str	r3, [r7, #20]
 810dcc8:	e02c      	b.n	810dd24 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810dcca:	f3ef 8305 	mrs	r3, IPSR
 810dcce:	60fb      	str	r3, [r7, #12]
  return(result);
 810dcd0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 810dcd2:	2b00      	cmp	r3, #0
 810dcd4:	d01a      	beq.n	810dd0c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 810dcd6:	2300      	movs	r3, #0
 810dcd8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 810dcda:	f107 0308 	add.w	r3, r7, #8
 810dcde:	4619      	mov	r1, r3
 810dce0:	6938      	ldr	r0, [r7, #16]
 810dce2:	f001 fa8f 	bl	810f204 <xQueueGiveFromISR>
 810dce6:	4603      	mov	r3, r0
 810dce8:	2b01      	cmp	r3, #1
 810dcea:	d003      	beq.n	810dcf4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 810dcec:	f06f 0302 	mvn.w	r3, #2
 810dcf0:	617b      	str	r3, [r7, #20]
 810dcf2:	e017      	b.n	810dd24 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 810dcf4:	68bb      	ldr	r3, [r7, #8]
 810dcf6:	2b00      	cmp	r3, #0
 810dcf8:	d014      	beq.n	810dd24 <osSemaphoreRelease+0x78>
 810dcfa:	4b0d      	ldr	r3, [pc, #52]	@ (810dd30 <osSemaphoreRelease+0x84>)
 810dcfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810dd00:	601a      	str	r2, [r3, #0]
 810dd02:	f3bf 8f4f 	dsb	sy
 810dd06:	f3bf 8f6f 	isb	sy
 810dd0a:	e00b      	b.n	810dd24 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810dd0c:	2300      	movs	r3, #0
 810dd0e:	2200      	movs	r2, #0
 810dd10:	2100      	movs	r1, #0
 810dd12:	6938      	ldr	r0, [r7, #16]
 810dd14:	f001 f8d6 	bl	810eec4 <xQueueGenericSend>
 810dd18:	4603      	mov	r3, r0
 810dd1a:	2b01      	cmp	r3, #1
 810dd1c:	d002      	beq.n	810dd24 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 810dd1e:	f06f 0302 	mvn.w	r3, #2
 810dd22:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 810dd24:	697b      	ldr	r3, [r7, #20]
}
 810dd26:	4618      	mov	r0, r3
 810dd28:	3718      	adds	r7, #24
 810dd2a:	46bd      	mov	sp, r7
 810dd2c:	bd80      	pop	{r7, pc}
 810dd2e:	bf00      	nop
 810dd30:	e000ed04 	.word	0xe000ed04

0810dd34 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 810dd34:	b580      	push	{r7, lr}
 810dd36:	b08a      	sub	sp, #40	@ 0x28
 810dd38:	af02      	add	r7, sp, #8
 810dd3a:	60f8      	str	r0, [r7, #12]
 810dd3c:	60b9      	str	r1, [r7, #8]
 810dd3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 810dd40:	2300      	movs	r3, #0
 810dd42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810dd44:	f3ef 8305 	mrs	r3, IPSR
 810dd48:	613b      	str	r3, [r7, #16]
  return(result);
 810dd4a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 810dd4c:	2b00      	cmp	r3, #0
 810dd4e:	d15f      	bne.n	810de10 <osMessageQueueNew+0xdc>
 810dd50:	68fb      	ldr	r3, [r7, #12]
 810dd52:	2b00      	cmp	r3, #0
 810dd54:	d05c      	beq.n	810de10 <osMessageQueueNew+0xdc>
 810dd56:	68bb      	ldr	r3, [r7, #8]
 810dd58:	2b00      	cmp	r3, #0
 810dd5a:	d059      	beq.n	810de10 <osMessageQueueNew+0xdc>
    mem = -1;
 810dd5c:	f04f 33ff 	mov.w	r3, #4294967295
 810dd60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810dd62:	687b      	ldr	r3, [r7, #4]
 810dd64:	2b00      	cmp	r3, #0
 810dd66:	d029      	beq.n	810ddbc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 810dd68:	687b      	ldr	r3, [r7, #4]
 810dd6a:	689b      	ldr	r3, [r3, #8]
 810dd6c:	2b00      	cmp	r3, #0
 810dd6e:	d012      	beq.n	810dd96 <osMessageQueueNew+0x62>
 810dd70:	687b      	ldr	r3, [r7, #4]
 810dd72:	68db      	ldr	r3, [r3, #12]
 810dd74:	2b4f      	cmp	r3, #79	@ 0x4f
 810dd76:	d90e      	bls.n	810dd96 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 810dd78:	687b      	ldr	r3, [r7, #4]
 810dd7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 810dd7c:	2b00      	cmp	r3, #0
 810dd7e:	d00a      	beq.n	810dd96 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 810dd80:	687b      	ldr	r3, [r7, #4]
 810dd82:	695a      	ldr	r2, [r3, #20]
 810dd84:	68fb      	ldr	r3, [r7, #12]
 810dd86:	68b9      	ldr	r1, [r7, #8]
 810dd88:	fb01 f303 	mul.w	r3, r1, r3
 810dd8c:	429a      	cmp	r2, r3
 810dd8e:	d302      	bcc.n	810dd96 <osMessageQueueNew+0x62>
        mem = 1;
 810dd90:	2301      	movs	r3, #1
 810dd92:	61bb      	str	r3, [r7, #24]
 810dd94:	e014      	b.n	810ddc0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 810dd96:	687b      	ldr	r3, [r7, #4]
 810dd98:	689b      	ldr	r3, [r3, #8]
 810dd9a:	2b00      	cmp	r3, #0
 810dd9c:	d110      	bne.n	810ddc0 <osMessageQueueNew+0x8c>
 810dd9e:	687b      	ldr	r3, [r7, #4]
 810dda0:	68db      	ldr	r3, [r3, #12]
 810dda2:	2b00      	cmp	r3, #0
 810dda4:	d10c      	bne.n	810ddc0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 810dda6:	687b      	ldr	r3, [r7, #4]
 810dda8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 810ddaa:	2b00      	cmp	r3, #0
 810ddac:	d108      	bne.n	810ddc0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 810ddae:	687b      	ldr	r3, [r7, #4]
 810ddb0:	695b      	ldr	r3, [r3, #20]
 810ddb2:	2b00      	cmp	r3, #0
 810ddb4:	d104      	bne.n	810ddc0 <osMessageQueueNew+0x8c>
          mem = 0;
 810ddb6:	2300      	movs	r3, #0
 810ddb8:	61bb      	str	r3, [r7, #24]
 810ddba:	e001      	b.n	810ddc0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 810ddbc:	2300      	movs	r3, #0
 810ddbe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810ddc0:	69bb      	ldr	r3, [r7, #24]
 810ddc2:	2b01      	cmp	r3, #1
 810ddc4:	d10b      	bne.n	810ddde <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 810ddc6:	687b      	ldr	r3, [r7, #4]
 810ddc8:	691a      	ldr	r2, [r3, #16]
 810ddca:	687b      	ldr	r3, [r7, #4]
 810ddcc:	689b      	ldr	r3, [r3, #8]
 810ddce:	2100      	movs	r1, #0
 810ddd0:	9100      	str	r1, [sp, #0]
 810ddd2:	68b9      	ldr	r1, [r7, #8]
 810ddd4:	68f8      	ldr	r0, [r7, #12]
 810ddd6:	f000 fe73 	bl	810eac0 <xQueueGenericCreateStatic>
 810ddda:	61f8      	str	r0, [r7, #28]
 810dddc:	e008      	b.n	810ddf0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 810ddde:	69bb      	ldr	r3, [r7, #24]
 810dde0:	2b00      	cmp	r3, #0
 810dde2:	d105      	bne.n	810ddf0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 810dde4:	2200      	movs	r2, #0
 810dde6:	68b9      	ldr	r1, [r7, #8]
 810dde8:	68f8      	ldr	r0, [r7, #12]
 810ddea:	f000 fee6 	bl	810ebba <xQueueGenericCreate>
 810ddee:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 810ddf0:	69fb      	ldr	r3, [r7, #28]
 810ddf2:	2b00      	cmp	r3, #0
 810ddf4:	d00c      	beq.n	810de10 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 810ddf6:	687b      	ldr	r3, [r7, #4]
 810ddf8:	2b00      	cmp	r3, #0
 810ddfa:	d003      	beq.n	810de04 <osMessageQueueNew+0xd0>
        name = attr->name;
 810ddfc:	687b      	ldr	r3, [r7, #4]
 810ddfe:	681b      	ldr	r3, [r3, #0]
 810de00:	617b      	str	r3, [r7, #20]
 810de02:	e001      	b.n	810de08 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 810de04:	2300      	movs	r3, #0
 810de06:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 810de08:	6979      	ldr	r1, [r7, #20]
 810de0a:	69f8      	ldr	r0, [r7, #28]
 810de0c:	f001 fe4a 	bl	810faa4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 810de10:	69fb      	ldr	r3, [r7, #28]
}
 810de12:	4618      	mov	r0, r3
 810de14:	3720      	adds	r7, #32
 810de16:	46bd      	mov	sp, r7
 810de18:	bd80      	pop	{r7, pc}
	...

0810de1c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 810de1c:	b580      	push	{r7, lr}
 810de1e:	b088      	sub	sp, #32
 810de20:	af00      	add	r7, sp, #0
 810de22:	60f8      	str	r0, [r7, #12]
 810de24:	60b9      	str	r1, [r7, #8]
 810de26:	603b      	str	r3, [r7, #0]
 810de28:	4613      	mov	r3, r2
 810de2a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 810de2c:	68fb      	ldr	r3, [r7, #12]
 810de2e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 810de30:	2300      	movs	r3, #0
 810de32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810de34:	f3ef 8305 	mrs	r3, IPSR
 810de38:	617b      	str	r3, [r7, #20]
  return(result);
 810de3a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 810de3c:	2b00      	cmp	r3, #0
 810de3e:	d028      	beq.n	810de92 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 810de40:	69bb      	ldr	r3, [r7, #24]
 810de42:	2b00      	cmp	r3, #0
 810de44:	d005      	beq.n	810de52 <osMessageQueuePut+0x36>
 810de46:	68bb      	ldr	r3, [r7, #8]
 810de48:	2b00      	cmp	r3, #0
 810de4a:	d002      	beq.n	810de52 <osMessageQueuePut+0x36>
 810de4c:	683b      	ldr	r3, [r7, #0]
 810de4e:	2b00      	cmp	r3, #0
 810de50:	d003      	beq.n	810de5a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 810de52:	f06f 0303 	mvn.w	r3, #3
 810de56:	61fb      	str	r3, [r7, #28]
 810de58:	e038      	b.n	810decc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 810de5a:	2300      	movs	r3, #0
 810de5c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 810de5e:	f107 0210 	add.w	r2, r7, #16
 810de62:	2300      	movs	r3, #0
 810de64:	68b9      	ldr	r1, [r7, #8]
 810de66:	69b8      	ldr	r0, [r7, #24]
 810de68:	f001 f92e 	bl	810f0c8 <xQueueGenericSendFromISR>
 810de6c:	4603      	mov	r3, r0
 810de6e:	2b01      	cmp	r3, #1
 810de70:	d003      	beq.n	810de7a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 810de72:	f06f 0302 	mvn.w	r3, #2
 810de76:	61fb      	str	r3, [r7, #28]
 810de78:	e028      	b.n	810decc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 810de7a:	693b      	ldr	r3, [r7, #16]
 810de7c:	2b00      	cmp	r3, #0
 810de7e:	d025      	beq.n	810decc <osMessageQueuePut+0xb0>
 810de80:	4b15      	ldr	r3, [pc, #84]	@ (810ded8 <osMessageQueuePut+0xbc>)
 810de82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810de86:	601a      	str	r2, [r3, #0]
 810de88:	f3bf 8f4f 	dsb	sy
 810de8c:	f3bf 8f6f 	isb	sy
 810de90:	e01c      	b.n	810decc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 810de92:	69bb      	ldr	r3, [r7, #24]
 810de94:	2b00      	cmp	r3, #0
 810de96:	d002      	beq.n	810de9e <osMessageQueuePut+0x82>
 810de98:	68bb      	ldr	r3, [r7, #8]
 810de9a:	2b00      	cmp	r3, #0
 810de9c:	d103      	bne.n	810dea6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 810de9e:	f06f 0303 	mvn.w	r3, #3
 810dea2:	61fb      	str	r3, [r7, #28]
 810dea4:	e012      	b.n	810decc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 810dea6:	2300      	movs	r3, #0
 810dea8:	683a      	ldr	r2, [r7, #0]
 810deaa:	68b9      	ldr	r1, [r7, #8]
 810deac:	69b8      	ldr	r0, [r7, #24]
 810deae:	f001 f809 	bl	810eec4 <xQueueGenericSend>
 810deb2:	4603      	mov	r3, r0
 810deb4:	2b01      	cmp	r3, #1
 810deb6:	d009      	beq.n	810decc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 810deb8:	683b      	ldr	r3, [r7, #0]
 810deba:	2b00      	cmp	r3, #0
 810debc:	d003      	beq.n	810dec6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 810debe:	f06f 0301 	mvn.w	r3, #1
 810dec2:	61fb      	str	r3, [r7, #28]
 810dec4:	e002      	b.n	810decc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 810dec6:	f06f 0302 	mvn.w	r3, #2
 810deca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 810decc:	69fb      	ldr	r3, [r7, #28]
}
 810dece:	4618      	mov	r0, r3
 810ded0:	3720      	adds	r7, #32
 810ded2:	46bd      	mov	sp, r7
 810ded4:	bd80      	pop	{r7, pc}
 810ded6:	bf00      	nop
 810ded8:	e000ed04 	.word	0xe000ed04

0810dedc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 810dedc:	b580      	push	{r7, lr}
 810dede:	b088      	sub	sp, #32
 810dee0:	af00      	add	r7, sp, #0
 810dee2:	60f8      	str	r0, [r7, #12]
 810dee4:	60b9      	str	r1, [r7, #8]
 810dee6:	607a      	str	r2, [r7, #4]
 810dee8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 810deea:	68fb      	ldr	r3, [r7, #12]
 810deec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 810deee:	2300      	movs	r3, #0
 810def0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810def2:	f3ef 8305 	mrs	r3, IPSR
 810def6:	617b      	str	r3, [r7, #20]
  return(result);
 810def8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 810defa:	2b00      	cmp	r3, #0
 810defc:	d028      	beq.n	810df50 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 810defe:	69bb      	ldr	r3, [r7, #24]
 810df00:	2b00      	cmp	r3, #0
 810df02:	d005      	beq.n	810df10 <osMessageQueueGet+0x34>
 810df04:	68bb      	ldr	r3, [r7, #8]
 810df06:	2b00      	cmp	r3, #0
 810df08:	d002      	beq.n	810df10 <osMessageQueueGet+0x34>
 810df0a:	683b      	ldr	r3, [r7, #0]
 810df0c:	2b00      	cmp	r3, #0
 810df0e:	d003      	beq.n	810df18 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 810df10:	f06f 0303 	mvn.w	r3, #3
 810df14:	61fb      	str	r3, [r7, #28]
 810df16:	e037      	b.n	810df88 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 810df18:	2300      	movs	r3, #0
 810df1a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 810df1c:	f107 0310 	add.w	r3, r7, #16
 810df20:	461a      	mov	r2, r3
 810df22:	68b9      	ldr	r1, [r7, #8]
 810df24:	69b8      	ldr	r0, [r7, #24]
 810df26:	f001 fbef 	bl	810f708 <xQueueReceiveFromISR>
 810df2a:	4603      	mov	r3, r0
 810df2c:	2b01      	cmp	r3, #1
 810df2e:	d003      	beq.n	810df38 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 810df30:	f06f 0302 	mvn.w	r3, #2
 810df34:	61fb      	str	r3, [r7, #28]
 810df36:	e027      	b.n	810df88 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 810df38:	693b      	ldr	r3, [r7, #16]
 810df3a:	2b00      	cmp	r3, #0
 810df3c:	d024      	beq.n	810df88 <osMessageQueueGet+0xac>
 810df3e:	4b15      	ldr	r3, [pc, #84]	@ (810df94 <osMessageQueueGet+0xb8>)
 810df40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810df44:	601a      	str	r2, [r3, #0]
 810df46:	f3bf 8f4f 	dsb	sy
 810df4a:	f3bf 8f6f 	isb	sy
 810df4e:	e01b      	b.n	810df88 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 810df50:	69bb      	ldr	r3, [r7, #24]
 810df52:	2b00      	cmp	r3, #0
 810df54:	d002      	beq.n	810df5c <osMessageQueueGet+0x80>
 810df56:	68bb      	ldr	r3, [r7, #8]
 810df58:	2b00      	cmp	r3, #0
 810df5a:	d103      	bne.n	810df64 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 810df5c:	f06f 0303 	mvn.w	r3, #3
 810df60:	61fb      	str	r3, [r7, #28]
 810df62:	e011      	b.n	810df88 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 810df64:	683a      	ldr	r2, [r7, #0]
 810df66:	68b9      	ldr	r1, [r7, #8]
 810df68:	69b8      	ldr	r0, [r7, #24]
 810df6a:	f001 f9db 	bl	810f324 <xQueueReceive>
 810df6e:	4603      	mov	r3, r0
 810df70:	2b01      	cmp	r3, #1
 810df72:	d009      	beq.n	810df88 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 810df74:	683b      	ldr	r3, [r7, #0]
 810df76:	2b00      	cmp	r3, #0
 810df78:	d003      	beq.n	810df82 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 810df7a:	f06f 0301 	mvn.w	r3, #1
 810df7e:	61fb      	str	r3, [r7, #28]
 810df80:	e002      	b.n	810df88 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 810df82:	f06f 0302 	mvn.w	r3, #2
 810df86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 810df88:	69fb      	ldr	r3, [r7, #28]
}
 810df8a:	4618      	mov	r0, r3
 810df8c:	3720      	adds	r7, #32
 810df8e:	46bd      	mov	sp, r7
 810df90:	bd80      	pop	{r7, pc}
 810df92:	bf00      	nop
 810df94:	e000ed04 	.word	0xe000ed04

0810df98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810df98:	b480      	push	{r7}
 810df9a:	b085      	sub	sp, #20
 810df9c:	af00      	add	r7, sp, #0
 810df9e:	60f8      	str	r0, [r7, #12]
 810dfa0:	60b9      	str	r1, [r7, #8]
 810dfa2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810dfa4:	68fb      	ldr	r3, [r7, #12]
 810dfa6:	4a07      	ldr	r2, [pc, #28]	@ (810dfc4 <vApplicationGetIdleTaskMemory+0x2c>)
 810dfa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810dfaa:	68bb      	ldr	r3, [r7, #8]
 810dfac:	4a06      	ldr	r2, [pc, #24]	@ (810dfc8 <vApplicationGetIdleTaskMemory+0x30>)
 810dfae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810dfb0:	687b      	ldr	r3, [r7, #4]
 810dfb2:	2280      	movs	r2, #128	@ 0x80
 810dfb4:	601a      	str	r2, [r3, #0]
}
 810dfb6:	bf00      	nop
 810dfb8:	3714      	adds	r7, #20
 810dfba:	46bd      	mov	sp, r7
 810dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dfc0:	4770      	bx	lr
 810dfc2:	bf00      	nop
 810dfc4:	100003c4 	.word	0x100003c4
 810dfc8:	1000046c 	.word	0x1000046c

0810dfcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810dfcc:	b480      	push	{r7}
 810dfce:	b085      	sub	sp, #20
 810dfd0:	af00      	add	r7, sp, #0
 810dfd2:	60f8      	str	r0, [r7, #12]
 810dfd4:	60b9      	str	r1, [r7, #8]
 810dfd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810dfd8:	68fb      	ldr	r3, [r7, #12]
 810dfda:	4a07      	ldr	r2, [pc, #28]	@ (810dff8 <vApplicationGetTimerTaskMemory+0x2c>)
 810dfdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810dfde:	68bb      	ldr	r3, [r7, #8]
 810dfe0:	4a06      	ldr	r2, [pc, #24]	@ (810dffc <vApplicationGetTimerTaskMemory+0x30>)
 810dfe2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810dfe4:	687b      	ldr	r3, [r7, #4]
 810dfe6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810dfea:	601a      	str	r2, [r3, #0]
}
 810dfec:	bf00      	nop
 810dfee:	3714      	adds	r7, #20
 810dff0:	46bd      	mov	sp, r7
 810dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dff6:	4770      	bx	lr
 810dff8:	1000066c 	.word	0x1000066c
 810dffc:	10000714 	.word	0x10000714

0810e000 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810e000:	b580      	push	{r7, lr}
 810e002:	b08a      	sub	sp, #40	@ 0x28
 810e004:	af00      	add	r7, sp, #0
 810e006:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810e008:	2300      	movs	r3, #0
 810e00a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810e00c:	f002 fc60 	bl	81108d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810e010:	4b5c      	ldr	r3, [pc, #368]	@ (810e184 <pvPortMalloc+0x184>)
 810e012:	681b      	ldr	r3, [r3, #0]
 810e014:	2b00      	cmp	r3, #0
 810e016:	d101      	bne.n	810e01c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810e018:	f000 f924 	bl	810e264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810e01c:	4b5a      	ldr	r3, [pc, #360]	@ (810e188 <pvPortMalloc+0x188>)
 810e01e:	681a      	ldr	r2, [r3, #0]
 810e020:	687b      	ldr	r3, [r7, #4]
 810e022:	4013      	ands	r3, r2
 810e024:	2b00      	cmp	r3, #0
 810e026:	f040 8095 	bne.w	810e154 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810e02a:	687b      	ldr	r3, [r7, #4]
 810e02c:	2b00      	cmp	r3, #0
 810e02e:	d01e      	beq.n	810e06e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 810e030:	2208      	movs	r2, #8
 810e032:	687b      	ldr	r3, [r7, #4]
 810e034:	4413      	add	r3, r2
 810e036:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810e038:	687b      	ldr	r3, [r7, #4]
 810e03a:	f003 0307 	and.w	r3, r3, #7
 810e03e:	2b00      	cmp	r3, #0
 810e040:	d015      	beq.n	810e06e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810e042:	687b      	ldr	r3, [r7, #4]
 810e044:	f023 0307 	bic.w	r3, r3, #7
 810e048:	3308      	adds	r3, #8
 810e04a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810e04c:	687b      	ldr	r3, [r7, #4]
 810e04e:	f003 0307 	and.w	r3, r3, #7
 810e052:	2b00      	cmp	r3, #0
 810e054:	d00b      	beq.n	810e06e <pvPortMalloc+0x6e>
	__asm volatile
 810e056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e05a:	f383 8811 	msr	BASEPRI, r3
 810e05e:	f3bf 8f6f 	isb	sy
 810e062:	f3bf 8f4f 	dsb	sy
 810e066:	617b      	str	r3, [r7, #20]
}
 810e068:	bf00      	nop
 810e06a:	bf00      	nop
 810e06c:	e7fd      	b.n	810e06a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810e06e:	687b      	ldr	r3, [r7, #4]
 810e070:	2b00      	cmp	r3, #0
 810e072:	d06f      	beq.n	810e154 <pvPortMalloc+0x154>
 810e074:	4b45      	ldr	r3, [pc, #276]	@ (810e18c <pvPortMalloc+0x18c>)
 810e076:	681b      	ldr	r3, [r3, #0]
 810e078:	687a      	ldr	r2, [r7, #4]
 810e07a:	429a      	cmp	r2, r3
 810e07c:	d86a      	bhi.n	810e154 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810e07e:	4b44      	ldr	r3, [pc, #272]	@ (810e190 <pvPortMalloc+0x190>)
 810e080:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810e082:	4b43      	ldr	r3, [pc, #268]	@ (810e190 <pvPortMalloc+0x190>)
 810e084:	681b      	ldr	r3, [r3, #0]
 810e086:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810e088:	e004      	b.n	810e094 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 810e08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e08c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810e08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e090:	681b      	ldr	r3, [r3, #0]
 810e092:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810e094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e096:	685b      	ldr	r3, [r3, #4]
 810e098:	687a      	ldr	r2, [r7, #4]
 810e09a:	429a      	cmp	r2, r3
 810e09c:	d903      	bls.n	810e0a6 <pvPortMalloc+0xa6>
 810e09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e0a0:	681b      	ldr	r3, [r3, #0]
 810e0a2:	2b00      	cmp	r3, #0
 810e0a4:	d1f1      	bne.n	810e08a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810e0a6:	4b37      	ldr	r3, [pc, #220]	@ (810e184 <pvPortMalloc+0x184>)
 810e0a8:	681b      	ldr	r3, [r3, #0]
 810e0aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e0ac:	429a      	cmp	r2, r3
 810e0ae:	d051      	beq.n	810e154 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810e0b0:	6a3b      	ldr	r3, [r7, #32]
 810e0b2:	681b      	ldr	r3, [r3, #0]
 810e0b4:	2208      	movs	r2, #8
 810e0b6:	4413      	add	r3, r2
 810e0b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810e0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e0bc:	681a      	ldr	r2, [r3, #0]
 810e0be:	6a3b      	ldr	r3, [r7, #32]
 810e0c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810e0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e0c4:	685a      	ldr	r2, [r3, #4]
 810e0c6:	687b      	ldr	r3, [r7, #4]
 810e0c8:	1ad2      	subs	r2, r2, r3
 810e0ca:	2308      	movs	r3, #8
 810e0cc:	005b      	lsls	r3, r3, #1
 810e0ce:	429a      	cmp	r2, r3
 810e0d0:	d920      	bls.n	810e114 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810e0d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e0d4:	687b      	ldr	r3, [r7, #4]
 810e0d6:	4413      	add	r3, r2
 810e0d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810e0da:	69bb      	ldr	r3, [r7, #24]
 810e0dc:	f003 0307 	and.w	r3, r3, #7
 810e0e0:	2b00      	cmp	r3, #0
 810e0e2:	d00b      	beq.n	810e0fc <pvPortMalloc+0xfc>
	__asm volatile
 810e0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e0e8:	f383 8811 	msr	BASEPRI, r3
 810e0ec:	f3bf 8f6f 	isb	sy
 810e0f0:	f3bf 8f4f 	dsb	sy
 810e0f4:	613b      	str	r3, [r7, #16]
}
 810e0f6:	bf00      	nop
 810e0f8:	bf00      	nop
 810e0fa:	e7fd      	b.n	810e0f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810e0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e0fe:	685a      	ldr	r2, [r3, #4]
 810e100:	687b      	ldr	r3, [r7, #4]
 810e102:	1ad2      	subs	r2, r2, r3
 810e104:	69bb      	ldr	r3, [r7, #24]
 810e106:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810e108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e10a:	687a      	ldr	r2, [r7, #4]
 810e10c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810e10e:	69b8      	ldr	r0, [r7, #24]
 810e110:	f000 f90a 	bl	810e328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810e114:	4b1d      	ldr	r3, [pc, #116]	@ (810e18c <pvPortMalloc+0x18c>)
 810e116:	681a      	ldr	r2, [r3, #0]
 810e118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e11a:	685b      	ldr	r3, [r3, #4]
 810e11c:	1ad3      	subs	r3, r2, r3
 810e11e:	4a1b      	ldr	r2, [pc, #108]	@ (810e18c <pvPortMalloc+0x18c>)
 810e120:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810e122:	4b1a      	ldr	r3, [pc, #104]	@ (810e18c <pvPortMalloc+0x18c>)
 810e124:	681a      	ldr	r2, [r3, #0]
 810e126:	4b1b      	ldr	r3, [pc, #108]	@ (810e194 <pvPortMalloc+0x194>)
 810e128:	681b      	ldr	r3, [r3, #0]
 810e12a:	429a      	cmp	r2, r3
 810e12c:	d203      	bcs.n	810e136 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810e12e:	4b17      	ldr	r3, [pc, #92]	@ (810e18c <pvPortMalloc+0x18c>)
 810e130:	681b      	ldr	r3, [r3, #0]
 810e132:	4a18      	ldr	r2, [pc, #96]	@ (810e194 <pvPortMalloc+0x194>)
 810e134:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810e136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e138:	685a      	ldr	r2, [r3, #4]
 810e13a:	4b13      	ldr	r3, [pc, #76]	@ (810e188 <pvPortMalloc+0x188>)
 810e13c:	681b      	ldr	r3, [r3, #0]
 810e13e:	431a      	orrs	r2, r3
 810e140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e142:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810e144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e146:	2200      	movs	r2, #0
 810e148:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810e14a:	4b13      	ldr	r3, [pc, #76]	@ (810e198 <pvPortMalloc+0x198>)
 810e14c:	681b      	ldr	r3, [r3, #0]
 810e14e:	3301      	adds	r3, #1
 810e150:	4a11      	ldr	r2, [pc, #68]	@ (810e198 <pvPortMalloc+0x198>)
 810e152:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810e154:	f002 fbca 	bl	81108ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810e158:	69fb      	ldr	r3, [r7, #28]
 810e15a:	f003 0307 	and.w	r3, r3, #7
 810e15e:	2b00      	cmp	r3, #0
 810e160:	d00b      	beq.n	810e17a <pvPortMalloc+0x17a>
	__asm volatile
 810e162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e166:	f383 8811 	msr	BASEPRI, r3
 810e16a:	f3bf 8f6f 	isb	sy
 810e16e:	f3bf 8f4f 	dsb	sy
 810e172:	60fb      	str	r3, [r7, #12]
}
 810e174:	bf00      	nop
 810e176:	bf00      	nop
 810e178:	e7fd      	b.n	810e176 <pvPortMalloc+0x176>
	return pvReturn;
 810e17a:	69fb      	ldr	r3, [r7, #28]
}
 810e17c:	4618      	mov	r0, r3
 810e17e:	3728      	adds	r7, #40	@ 0x28
 810e180:	46bd      	mov	sp, r7
 810e182:	bd80      	pop	{r7, pc}
 810e184:	1000ab1c 	.word	0x1000ab1c
 810e188:	1000ab30 	.word	0x1000ab30
 810e18c:	1000ab20 	.word	0x1000ab20
 810e190:	1000ab14 	.word	0x1000ab14
 810e194:	1000ab24 	.word	0x1000ab24
 810e198:	1000ab28 	.word	0x1000ab28

0810e19c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810e19c:	b580      	push	{r7, lr}
 810e19e:	b086      	sub	sp, #24
 810e1a0:	af00      	add	r7, sp, #0
 810e1a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810e1a4:	687b      	ldr	r3, [r7, #4]
 810e1a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810e1a8:	687b      	ldr	r3, [r7, #4]
 810e1aa:	2b00      	cmp	r3, #0
 810e1ac:	d04f      	beq.n	810e24e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810e1ae:	2308      	movs	r3, #8
 810e1b0:	425b      	negs	r3, r3
 810e1b2:	697a      	ldr	r2, [r7, #20]
 810e1b4:	4413      	add	r3, r2
 810e1b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810e1b8:	697b      	ldr	r3, [r7, #20]
 810e1ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810e1bc:	693b      	ldr	r3, [r7, #16]
 810e1be:	685a      	ldr	r2, [r3, #4]
 810e1c0:	4b25      	ldr	r3, [pc, #148]	@ (810e258 <vPortFree+0xbc>)
 810e1c2:	681b      	ldr	r3, [r3, #0]
 810e1c4:	4013      	ands	r3, r2
 810e1c6:	2b00      	cmp	r3, #0
 810e1c8:	d10b      	bne.n	810e1e2 <vPortFree+0x46>
	__asm volatile
 810e1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e1ce:	f383 8811 	msr	BASEPRI, r3
 810e1d2:	f3bf 8f6f 	isb	sy
 810e1d6:	f3bf 8f4f 	dsb	sy
 810e1da:	60fb      	str	r3, [r7, #12]
}
 810e1dc:	bf00      	nop
 810e1de:	bf00      	nop
 810e1e0:	e7fd      	b.n	810e1de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810e1e2:	693b      	ldr	r3, [r7, #16]
 810e1e4:	681b      	ldr	r3, [r3, #0]
 810e1e6:	2b00      	cmp	r3, #0
 810e1e8:	d00b      	beq.n	810e202 <vPortFree+0x66>
	__asm volatile
 810e1ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e1ee:	f383 8811 	msr	BASEPRI, r3
 810e1f2:	f3bf 8f6f 	isb	sy
 810e1f6:	f3bf 8f4f 	dsb	sy
 810e1fa:	60bb      	str	r3, [r7, #8]
}
 810e1fc:	bf00      	nop
 810e1fe:	bf00      	nop
 810e200:	e7fd      	b.n	810e1fe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810e202:	693b      	ldr	r3, [r7, #16]
 810e204:	685a      	ldr	r2, [r3, #4]
 810e206:	4b14      	ldr	r3, [pc, #80]	@ (810e258 <vPortFree+0xbc>)
 810e208:	681b      	ldr	r3, [r3, #0]
 810e20a:	4013      	ands	r3, r2
 810e20c:	2b00      	cmp	r3, #0
 810e20e:	d01e      	beq.n	810e24e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810e210:	693b      	ldr	r3, [r7, #16]
 810e212:	681b      	ldr	r3, [r3, #0]
 810e214:	2b00      	cmp	r3, #0
 810e216:	d11a      	bne.n	810e24e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810e218:	693b      	ldr	r3, [r7, #16]
 810e21a:	685a      	ldr	r2, [r3, #4]
 810e21c:	4b0e      	ldr	r3, [pc, #56]	@ (810e258 <vPortFree+0xbc>)
 810e21e:	681b      	ldr	r3, [r3, #0]
 810e220:	43db      	mvns	r3, r3
 810e222:	401a      	ands	r2, r3
 810e224:	693b      	ldr	r3, [r7, #16]
 810e226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810e228:	f002 fb52 	bl	81108d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810e22c:	693b      	ldr	r3, [r7, #16]
 810e22e:	685a      	ldr	r2, [r3, #4]
 810e230:	4b0a      	ldr	r3, [pc, #40]	@ (810e25c <vPortFree+0xc0>)
 810e232:	681b      	ldr	r3, [r3, #0]
 810e234:	4413      	add	r3, r2
 810e236:	4a09      	ldr	r2, [pc, #36]	@ (810e25c <vPortFree+0xc0>)
 810e238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810e23a:	6938      	ldr	r0, [r7, #16]
 810e23c:	f000 f874 	bl	810e328 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810e240:	4b07      	ldr	r3, [pc, #28]	@ (810e260 <vPortFree+0xc4>)
 810e242:	681b      	ldr	r3, [r3, #0]
 810e244:	3301      	adds	r3, #1
 810e246:	4a06      	ldr	r2, [pc, #24]	@ (810e260 <vPortFree+0xc4>)
 810e248:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810e24a:	f002 fb4f 	bl	81108ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810e24e:	bf00      	nop
 810e250:	3718      	adds	r7, #24
 810e252:	46bd      	mov	sp, r7
 810e254:	bd80      	pop	{r7, pc}
 810e256:	bf00      	nop
 810e258:	1000ab30 	.word	0x1000ab30
 810e25c:	1000ab20 	.word	0x1000ab20
 810e260:	1000ab2c 	.word	0x1000ab2c

0810e264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810e264:	b480      	push	{r7}
 810e266:	b085      	sub	sp, #20
 810e268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810e26a:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 810e26e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810e270:	4b27      	ldr	r3, [pc, #156]	@ (810e310 <prvHeapInit+0xac>)
 810e272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810e274:	68fb      	ldr	r3, [r7, #12]
 810e276:	f003 0307 	and.w	r3, r3, #7
 810e27a:	2b00      	cmp	r3, #0
 810e27c:	d00c      	beq.n	810e298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810e27e:	68fb      	ldr	r3, [r7, #12]
 810e280:	3307      	adds	r3, #7
 810e282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810e284:	68fb      	ldr	r3, [r7, #12]
 810e286:	f023 0307 	bic.w	r3, r3, #7
 810e28a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810e28c:	68ba      	ldr	r2, [r7, #8]
 810e28e:	68fb      	ldr	r3, [r7, #12]
 810e290:	1ad3      	subs	r3, r2, r3
 810e292:	4a1f      	ldr	r2, [pc, #124]	@ (810e310 <prvHeapInit+0xac>)
 810e294:	4413      	add	r3, r2
 810e296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810e298:	68fb      	ldr	r3, [r7, #12]
 810e29a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810e29c:	4a1d      	ldr	r2, [pc, #116]	@ (810e314 <prvHeapInit+0xb0>)
 810e29e:	687b      	ldr	r3, [r7, #4]
 810e2a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810e2a2:	4b1c      	ldr	r3, [pc, #112]	@ (810e314 <prvHeapInit+0xb0>)
 810e2a4:	2200      	movs	r2, #0
 810e2a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810e2a8:	687b      	ldr	r3, [r7, #4]
 810e2aa:	68ba      	ldr	r2, [r7, #8]
 810e2ac:	4413      	add	r3, r2
 810e2ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810e2b0:	2208      	movs	r2, #8
 810e2b2:	68fb      	ldr	r3, [r7, #12]
 810e2b4:	1a9b      	subs	r3, r3, r2
 810e2b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810e2b8:	68fb      	ldr	r3, [r7, #12]
 810e2ba:	f023 0307 	bic.w	r3, r3, #7
 810e2be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810e2c0:	68fb      	ldr	r3, [r7, #12]
 810e2c2:	4a15      	ldr	r2, [pc, #84]	@ (810e318 <prvHeapInit+0xb4>)
 810e2c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810e2c6:	4b14      	ldr	r3, [pc, #80]	@ (810e318 <prvHeapInit+0xb4>)
 810e2c8:	681b      	ldr	r3, [r3, #0]
 810e2ca:	2200      	movs	r2, #0
 810e2cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810e2ce:	4b12      	ldr	r3, [pc, #72]	@ (810e318 <prvHeapInit+0xb4>)
 810e2d0:	681b      	ldr	r3, [r3, #0]
 810e2d2:	2200      	movs	r2, #0
 810e2d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810e2d6:	687b      	ldr	r3, [r7, #4]
 810e2d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810e2da:	683b      	ldr	r3, [r7, #0]
 810e2dc:	68fa      	ldr	r2, [r7, #12]
 810e2de:	1ad2      	subs	r2, r2, r3
 810e2e0:	683b      	ldr	r3, [r7, #0]
 810e2e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810e2e4:	4b0c      	ldr	r3, [pc, #48]	@ (810e318 <prvHeapInit+0xb4>)
 810e2e6:	681a      	ldr	r2, [r3, #0]
 810e2e8:	683b      	ldr	r3, [r7, #0]
 810e2ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810e2ec:	683b      	ldr	r3, [r7, #0]
 810e2ee:	685b      	ldr	r3, [r3, #4]
 810e2f0:	4a0a      	ldr	r2, [pc, #40]	@ (810e31c <prvHeapInit+0xb8>)
 810e2f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810e2f4:	683b      	ldr	r3, [r7, #0]
 810e2f6:	685b      	ldr	r3, [r3, #4]
 810e2f8:	4a09      	ldr	r2, [pc, #36]	@ (810e320 <prvHeapInit+0xbc>)
 810e2fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810e2fc:	4b09      	ldr	r3, [pc, #36]	@ (810e324 <prvHeapInit+0xc0>)
 810e2fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810e302:	601a      	str	r2, [r3, #0]
}
 810e304:	bf00      	nop
 810e306:	3714      	adds	r7, #20
 810e308:	46bd      	mov	sp, r7
 810e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e30e:	4770      	bx	lr
 810e310:	10000b14 	.word	0x10000b14
 810e314:	1000ab14 	.word	0x1000ab14
 810e318:	1000ab1c 	.word	0x1000ab1c
 810e31c:	1000ab24 	.word	0x1000ab24
 810e320:	1000ab20 	.word	0x1000ab20
 810e324:	1000ab30 	.word	0x1000ab30

0810e328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810e328:	b480      	push	{r7}
 810e32a:	b085      	sub	sp, #20
 810e32c:	af00      	add	r7, sp, #0
 810e32e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810e330:	4b28      	ldr	r3, [pc, #160]	@ (810e3d4 <prvInsertBlockIntoFreeList+0xac>)
 810e332:	60fb      	str	r3, [r7, #12]
 810e334:	e002      	b.n	810e33c <prvInsertBlockIntoFreeList+0x14>
 810e336:	68fb      	ldr	r3, [r7, #12]
 810e338:	681b      	ldr	r3, [r3, #0]
 810e33a:	60fb      	str	r3, [r7, #12]
 810e33c:	68fb      	ldr	r3, [r7, #12]
 810e33e:	681b      	ldr	r3, [r3, #0]
 810e340:	687a      	ldr	r2, [r7, #4]
 810e342:	429a      	cmp	r2, r3
 810e344:	d8f7      	bhi.n	810e336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810e346:	68fb      	ldr	r3, [r7, #12]
 810e348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810e34a:	68fb      	ldr	r3, [r7, #12]
 810e34c:	685b      	ldr	r3, [r3, #4]
 810e34e:	68ba      	ldr	r2, [r7, #8]
 810e350:	4413      	add	r3, r2
 810e352:	687a      	ldr	r2, [r7, #4]
 810e354:	429a      	cmp	r2, r3
 810e356:	d108      	bne.n	810e36a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810e358:	68fb      	ldr	r3, [r7, #12]
 810e35a:	685a      	ldr	r2, [r3, #4]
 810e35c:	687b      	ldr	r3, [r7, #4]
 810e35e:	685b      	ldr	r3, [r3, #4]
 810e360:	441a      	add	r2, r3
 810e362:	68fb      	ldr	r3, [r7, #12]
 810e364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810e366:	68fb      	ldr	r3, [r7, #12]
 810e368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810e36a:	687b      	ldr	r3, [r7, #4]
 810e36c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810e36e:	687b      	ldr	r3, [r7, #4]
 810e370:	685b      	ldr	r3, [r3, #4]
 810e372:	68ba      	ldr	r2, [r7, #8]
 810e374:	441a      	add	r2, r3
 810e376:	68fb      	ldr	r3, [r7, #12]
 810e378:	681b      	ldr	r3, [r3, #0]
 810e37a:	429a      	cmp	r2, r3
 810e37c:	d118      	bne.n	810e3b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810e37e:	68fb      	ldr	r3, [r7, #12]
 810e380:	681a      	ldr	r2, [r3, #0]
 810e382:	4b15      	ldr	r3, [pc, #84]	@ (810e3d8 <prvInsertBlockIntoFreeList+0xb0>)
 810e384:	681b      	ldr	r3, [r3, #0]
 810e386:	429a      	cmp	r2, r3
 810e388:	d00d      	beq.n	810e3a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810e38a:	687b      	ldr	r3, [r7, #4]
 810e38c:	685a      	ldr	r2, [r3, #4]
 810e38e:	68fb      	ldr	r3, [r7, #12]
 810e390:	681b      	ldr	r3, [r3, #0]
 810e392:	685b      	ldr	r3, [r3, #4]
 810e394:	441a      	add	r2, r3
 810e396:	687b      	ldr	r3, [r7, #4]
 810e398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810e39a:	68fb      	ldr	r3, [r7, #12]
 810e39c:	681b      	ldr	r3, [r3, #0]
 810e39e:	681a      	ldr	r2, [r3, #0]
 810e3a0:	687b      	ldr	r3, [r7, #4]
 810e3a2:	601a      	str	r2, [r3, #0]
 810e3a4:	e008      	b.n	810e3b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810e3a6:	4b0c      	ldr	r3, [pc, #48]	@ (810e3d8 <prvInsertBlockIntoFreeList+0xb0>)
 810e3a8:	681a      	ldr	r2, [r3, #0]
 810e3aa:	687b      	ldr	r3, [r7, #4]
 810e3ac:	601a      	str	r2, [r3, #0]
 810e3ae:	e003      	b.n	810e3b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810e3b0:	68fb      	ldr	r3, [r7, #12]
 810e3b2:	681a      	ldr	r2, [r3, #0]
 810e3b4:	687b      	ldr	r3, [r7, #4]
 810e3b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810e3b8:	68fa      	ldr	r2, [r7, #12]
 810e3ba:	687b      	ldr	r3, [r7, #4]
 810e3bc:	429a      	cmp	r2, r3
 810e3be:	d002      	beq.n	810e3c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810e3c0:	68fb      	ldr	r3, [r7, #12]
 810e3c2:	687a      	ldr	r2, [r7, #4]
 810e3c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810e3c6:	bf00      	nop
 810e3c8:	3714      	adds	r7, #20
 810e3ca:	46bd      	mov	sp, r7
 810e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e3d0:	4770      	bx	lr
 810e3d2:	bf00      	nop
 810e3d4:	1000ab14 	.word	0x1000ab14
 810e3d8:	1000ab1c 	.word	0x1000ab1c

0810e3dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810e3dc:	b480      	push	{r7}
 810e3de:	b083      	sub	sp, #12
 810e3e0:	af00      	add	r7, sp, #0
 810e3e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810e3e4:	687b      	ldr	r3, [r7, #4]
 810e3e6:	f103 0208 	add.w	r2, r3, #8
 810e3ea:	687b      	ldr	r3, [r7, #4]
 810e3ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810e3ee:	687b      	ldr	r3, [r7, #4]
 810e3f0:	f04f 32ff 	mov.w	r2, #4294967295
 810e3f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810e3f6:	687b      	ldr	r3, [r7, #4]
 810e3f8:	f103 0208 	add.w	r2, r3, #8
 810e3fc:	687b      	ldr	r3, [r7, #4]
 810e3fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810e400:	687b      	ldr	r3, [r7, #4]
 810e402:	f103 0208 	add.w	r2, r3, #8
 810e406:	687b      	ldr	r3, [r7, #4]
 810e408:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810e40a:	687b      	ldr	r3, [r7, #4]
 810e40c:	2200      	movs	r2, #0
 810e40e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810e410:	bf00      	nop
 810e412:	370c      	adds	r7, #12
 810e414:	46bd      	mov	sp, r7
 810e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e41a:	4770      	bx	lr

0810e41c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810e41c:	b480      	push	{r7}
 810e41e:	b083      	sub	sp, #12
 810e420:	af00      	add	r7, sp, #0
 810e422:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810e424:	687b      	ldr	r3, [r7, #4]
 810e426:	2200      	movs	r2, #0
 810e428:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810e42a:	bf00      	nop
 810e42c:	370c      	adds	r7, #12
 810e42e:	46bd      	mov	sp, r7
 810e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e434:	4770      	bx	lr

0810e436 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810e436:	b480      	push	{r7}
 810e438:	b085      	sub	sp, #20
 810e43a:	af00      	add	r7, sp, #0
 810e43c:	6078      	str	r0, [r7, #4]
 810e43e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810e440:	687b      	ldr	r3, [r7, #4]
 810e442:	685b      	ldr	r3, [r3, #4]
 810e444:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810e446:	683b      	ldr	r3, [r7, #0]
 810e448:	68fa      	ldr	r2, [r7, #12]
 810e44a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810e44c:	68fb      	ldr	r3, [r7, #12]
 810e44e:	689a      	ldr	r2, [r3, #8]
 810e450:	683b      	ldr	r3, [r7, #0]
 810e452:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810e454:	68fb      	ldr	r3, [r7, #12]
 810e456:	689b      	ldr	r3, [r3, #8]
 810e458:	683a      	ldr	r2, [r7, #0]
 810e45a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810e45c:	68fb      	ldr	r3, [r7, #12]
 810e45e:	683a      	ldr	r2, [r7, #0]
 810e460:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810e462:	683b      	ldr	r3, [r7, #0]
 810e464:	687a      	ldr	r2, [r7, #4]
 810e466:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810e468:	687b      	ldr	r3, [r7, #4]
 810e46a:	681b      	ldr	r3, [r3, #0]
 810e46c:	1c5a      	adds	r2, r3, #1
 810e46e:	687b      	ldr	r3, [r7, #4]
 810e470:	601a      	str	r2, [r3, #0]
}
 810e472:	bf00      	nop
 810e474:	3714      	adds	r7, #20
 810e476:	46bd      	mov	sp, r7
 810e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e47c:	4770      	bx	lr

0810e47e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810e47e:	b480      	push	{r7}
 810e480:	b085      	sub	sp, #20
 810e482:	af00      	add	r7, sp, #0
 810e484:	6078      	str	r0, [r7, #4]
 810e486:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810e488:	683b      	ldr	r3, [r7, #0]
 810e48a:	681b      	ldr	r3, [r3, #0]
 810e48c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810e48e:	68bb      	ldr	r3, [r7, #8]
 810e490:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e494:	d103      	bne.n	810e49e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810e496:	687b      	ldr	r3, [r7, #4]
 810e498:	691b      	ldr	r3, [r3, #16]
 810e49a:	60fb      	str	r3, [r7, #12]
 810e49c:	e00c      	b.n	810e4b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810e49e:	687b      	ldr	r3, [r7, #4]
 810e4a0:	3308      	adds	r3, #8
 810e4a2:	60fb      	str	r3, [r7, #12]
 810e4a4:	e002      	b.n	810e4ac <vListInsert+0x2e>
 810e4a6:	68fb      	ldr	r3, [r7, #12]
 810e4a8:	685b      	ldr	r3, [r3, #4]
 810e4aa:	60fb      	str	r3, [r7, #12]
 810e4ac:	68fb      	ldr	r3, [r7, #12]
 810e4ae:	685b      	ldr	r3, [r3, #4]
 810e4b0:	681b      	ldr	r3, [r3, #0]
 810e4b2:	68ba      	ldr	r2, [r7, #8]
 810e4b4:	429a      	cmp	r2, r3
 810e4b6:	d2f6      	bcs.n	810e4a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810e4b8:	68fb      	ldr	r3, [r7, #12]
 810e4ba:	685a      	ldr	r2, [r3, #4]
 810e4bc:	683b      	ldr	r3, [r7, #0]
 810e4be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810e4c0:	683b      	ldr	r3, [r7, #0]
 810e4c2:	685b      	ldr	r3, [r3, #4]
 810e4c4:	683a      	ldr	r2, [r7, #0]
 810e4c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810e4c8:	683b      	ldr	r3, [r7, #0]
 810e4ca:	68fa      	ldr	r2, [r7, #12]
 810e4cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810e4ce:	68fb      	ldr	r3, [r7, #12]
 810e4d0:	683a      	ldr	r2, [r7, #0]
 810e4d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810e4d4:	683b      	ldr	r3, [r7, #0]
 810e4d6:	687a      	ldr	r2, [r7, #4]
 810e4d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810e4da:	687b      	ldr	r3, [r7, #4]
 810e4dc:	681b      	ldr	r3, [r3, #0]
 810e4de:	1c5a      	adds	r2, r3, #1
 810e4e0:	687b      	ldr	r3, [r7, #4]
 810e4e2:	601a      	str	r2, [r3, #0]
}
 810e4e4:	bf00      	nop
 810e4e6:	3714      	adds	r7, #20
 810e4e8:	46bd      	mov	sp, r7
 810e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e4ee:	4770      	bx	lr

0810e4f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810e4f0:	b480      	push	{r7}
 810e4f2:	b085      	sub	sp, #20
 810e4f4:	af00      	add	r7, sp, #0
 810e4f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810e4f8:	687b      	ldr	r3, [r7, #4]
 810e4fa:	691b      	ldr	r3, [r3, #16]
 810e4fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810e4fe:	687b      	ldr	r3, [r7, #4]
 810e500:	685b      	ldr	r3, [r3, #4]
 810e502:	687a      	ldr	r2, [r7, #4]
 810e504:	6892      	ldr	r2, [r2, #8]
 810e506:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810e508:	687b      	ldr	r3, [r7, #4]
 810e50a:	689b      	ldr	r3, [r3, #8]
 810e50c:	687a      	ldr	r2, [r7, #4]
 810e50e:	6852      	ldr	r2, [r2, #4]
 810e510:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810e512:	68fb      	ldr	r3, [r7, #12]
 810e514:	685b      	ldr	r3, [r3, #4]
 810e516:	687a      	ldr	r2, [r7, #4]
 810e518:	429a      	cmp	r2, r3
 810e51a:	d103      	bne.n	810e524 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810e51c:	687b      	ldr	r3, [r7, #4]
 810e51e:	689a      	ldr	r2, [r3, #8]
 810e520:	68fb      	ldr	r3, [r7, #12]
 810e522:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810e524:	687b      	ldr	r3, [r7, #4]
 810e526:	2200      	movs	r2, #0
 810e528:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810e52a:	68fb      	ldr	r3, [r7, #12]
 810e52c:	681b      	ldr	r3, [r3, #0]
 810e52e:	1e5a      	subs	r2, r3, #1
 810e530:	68fb      	ldr	r3, [r7, #12]
 810e532:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810e534:	68fb      	ldr	r3, [r7, #12]
 810e536:	681b      	ldr	r3, [r3, #0]
}
 810e538:	4618      	mov	r0, r3
 810e53a:	3714      	adds	r7, #20
 810e53c:	46bd      	mov	sp, r7
 810e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e542:	4770      	bx	lr

0810e544 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810e544:	b480      	push	{r7}
 810e546:	b085      	sub	sp, #20
 810e548:	af00      	add	r7, sp, #0
 810e54a:	60f8      	str	r0, [r7, #12]
 810e54c:	60b9      	str	r1, [r7, #8]
 810e54e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810e550:	68fb      	ldr	r3, [r7, #12]
 810e552:	3b04      	subs	r3, #4
 810e554:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810e556:	68fb      	ldr	r3, [r7, #12]
 810e558:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810e55c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810e55e:	68fb      	ldr	r3, [r7, #12]
 810e560:	3b04      	subs	r3, #4
 810e562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810e564:	68bb      	ldr	r3, [r7, #8]
 810e566:	f023 0201 	bic.w	r2, r3, #1
 810e56a:	68fb      	ldr	r3, [r7, #12]
 810e56c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810e56e:	68fb      	ldr	r3, [r7, #12]
 810e570:	3b04      	subs	r3, #4
 810e572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810e574:	4a0c      	ldr	r2, [pc, #48]	@ (810e5a8 <pxPortInitialiseStack+0x64>)
 810e576:	68fb      	ldr	r3, [r7, #12]
 810e578:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810e57a:	68fb      	ldr	r3, [r7, #12]
 810e57c:	3b14      	subs	r3, #20
 810e57e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810e580:	687a      	ldr	r2, [r7, #4]
 810e582:	68fb      	ldr	r3, [r7, #12]
 810e584:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810e586:	68fb      	ldr	r3, [r7, #12]
 810e588:	3b04      	subs	r3, #4
 810e58a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810e58c:	68fb      	ldr	r3, [r7, #12]
 810e58e:	f06f 0202 	mvn.w	r2, #2
 810e592:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810e594:	68fb      	ldr	r3, [r7, #12]
 810e596:	3b20      	subs	r3, #32
 810e598:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810e59a:	68fb      	ldr	r3, [r7, #12]
}
 810e59c:	4618      	mov	r0, r3
 810e59e:	3714      	adds	r7, #20
 810e5a0:	46bd      	mov	sp, r7
 810e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e5a6:	4770      	bx	lr
 810e5a8:	0810e5ad 	.word	0x0810e5ad

0810e5ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810e5ac:	b480      	push	{r7}
 810e5ae:	b085      	sub	sp, #20
 810e5b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810e5b2:	2300      	movs	r3, #0
 810e5b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810e5b6:	4b13      	ldr	r3, [pc, #76]	@ (810e604 <prvTaskExitError+0x58>)
 810e5b8:	681b      	ldr	r3, [r3, #0]
 810e5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e5be:	d00b      	beq.n	810e5d8 <prvTaskExitError+0x2c>
	__asm volatile
 810e5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e5c4:	f383 8811 	msr	BASEPRI, r3
 810e5c8:	f3bf 8f6f 	isb	sy
 810e5cc:	f3bf 8f4f 	dsb	sy
 810e5d0:	60fb      	str	r3, [r7, #12]
}
 810e5d2:	bf00      	nop
 810e5d4:	bf00      	nop
 810e5d6:	e7fd      	b.n	810e5d4 <prvTaskExitError+0x28>
	__asm volatile
 810e5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e5dc:	f383 8811 	msr	BASEPRI, r3
 810e5e0:	f3bf 8f6f 	isb	sy
 810e5e4:	f3bf 8f4f 	dsb	sy
 810e5e8:	60bb      	str	r3, [r7, #8]
}
 810e5ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810e5ec:	bf00      	nop
 810e5ee:	687b      	ldr	r3, [r7, #4]
 810e5f0:	2b00      	cmp	r3, #0
 810e5f2:	d0fc      	beq.n	810e5ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810e5f4:	bf00      	nop
 810e5f6:	bf00      	nop
 810e5f8:	3714      	adds	r7, #20
 810e5fa:	46bd      	mov	sp, r7
 810e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e600:	4770      	bx	lr
 810e602:	bf00      	nop
 810e604:	10000024 	.word	0x10000024
	...

0810e610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810e610:	4b07      	ldr	r3, [pc, #28]	@ (810e630 <pxCurrentTCBConst2>)
 810e612:	6819      	ldr	r1, [r3, #0]
 810e614:	6808      	ldr	r0, [r1, #0]
 810e616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e61a:	f380 8809 	msr	PSP, r0
 810e61e:	f3bf 8f6f 	isb	sy
 810e622:	f04f 0000 	mov.w	r0, #0
 810e626:	f380 8811 	msr	BASEPRI, r0
 810e62a:	4770      	bx	lr
 810e62c:	f3af 8000 	nop.w

0810e630 <pxCurrentTCBConst2>:
 810e630:	1000ab7c 	.word	0x1000ab7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810e634:	bf00      	nop
 810e636:	bf00      	nop

0810e638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810e638:	4808      	ldr	r0, [pc, #32]	@ (810e65c <prvPortStartFirstTask+0x24>)
 810e63a:	6800      	ldr	r0, [r0, #0]
 810e63c:	6800      	ldr	r0, [r0, #0]
 810e63e:	f380 8808 	msr	MSP, r0
 810e642:	f04f 0000 	mov.w	r0, #0
 810e646:	f380 8814 	msr	CONTROL, r0
 810e64a:	b662      	cpsie	i
 810e64c:	b661      	cpsie	f
 810e64e:	f3bf 8f4f 	dsb	sy
 810e652:	f3bf 8f6f 	isb	sy
 810e656:	df00      	svc	0
 810e658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810e65a:	bf00      	nop
 810e65c:	e000ed08 	.word	0xe000ed08

0810e660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810e660:	b580      	push	{r7, lr}
 810e662:	b086      	sub	sp, #24
 810e664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810e666:	4b47      	ldr	r3, [pc, #284]	@ (810e784 <xPortStartScheduler+0x124>)
 810e668:	681b      	ldr	r3, [r3, #0]
 810e66a:	4a47      	ldr	r2, [pc, #284]	@ (810e788 <xPortStartScheduler+0x128>)
 810e66c:	4293      	cmp	r3, r2
 810e66e:	d10b      	bne.n	810e688 <xPortStartScheduler+0x28>
	__asm volatile
 810e670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e674:	f383 8811 	msr	BASEPRI, r3
 810e678:	f3bf 8f6f 	isb	sy
 810e67c:	f3bf 8f4f 	dsb	sy
 810e680:	613b      	str	r3, [r7, #16]
}
 810e682:	bf00      	nop
 810e684:	bf00      	nop
 810e686:	e7fd      	b.n	810e684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810e688:	4b3e      	ldr	r3, [pc, #248]	@ (810e784 <xPortStartScheduler+0x124>)
 810e68a:	681b      	ldr	r3, [r3, #0]
 810e68c:	4a3f      	ldr	r2, [pc, #252]	@ (810e78c <xPortStartScheduler+0x12c>)
 810e68e:	4293      	cmp	r3, r2
 810e690:	d10b      	bne.n	810e6aa <xPortStartScheduler+0x4a>
	__asm volatile
 810e692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e696:	f383 8811 	msr	BASEPRI, r3
 810e69a:	f3bf 8f6f 	isb	sy
 810e69e:	f3bf 8f4f 	dsb	sy
 810e6a2:	60fb      	str	r3, [r7, #12]
}
 810e6a4:	bf00      	nop
 810e6a6:	bf00      	nop
 810e6a8:	e7fd      	b.n	810e6a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810e6aa:	4b39      	ldr	r3, [pc, #228]	@ (810e790 <xPortStartScheduler+0x130>)
 810e6ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810e6ae:	697b      	ldr	r3, [r7, #20]
 810e6b0:	781b      	ldrb	r3, [r3, #0]
 810e6b2:	b2db      	uxtb	r3, r3
 810e6b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810e6b6:	697b      	ldr	r3, [r7, #20]
 810e6b8:	22ff      	movs	r2, #255	@ 0xff
 810e6ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810e6bc:	697b      	ldr	r3, [r7, #20]
 810e6be:	781b      	ldrb	r3, [r3, #0]
 810e6c0:	b2db      	uxtb	r3, r3
 810e6c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810e6c4:	78fb      	ldrb	r3, [r7, #3]
 810e6c6:	b2db      	uxtb	r3, r3
 810e6c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810e6cc:	b2da      	uxtb	r2, r3
 810e6ce:	4b31      	ldr	r3, [pc, #196]	@ (810e794 <xPortStartScheduler+0x134>)
 810e6d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810e6d2:	4b31      	ldr	r3, [pc, #196]	@ (810e798 <xPortStartScheduler+0x138>)
 810e6d4:	2207      	movs	r2, #7
 810e6d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810e6d8:	e009      	b.n	810e6ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810e6da:	4b2f      	ldr	r3, [pc, #188]	@ (810e798 <xPortStartScheduler+0x138>)
 810e6dc:	681b      	ldr	r3, [r3, #0]
 810e6de:	3b01      	subs	r3, #1
 810e6e0:	4a2d      	ldr	r2, [pc, #180]	@ (810e798 <xPortStartScheduler+0x138>)
 810e6e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810e6e4:	78fb      	ldrb	r3, [r7, #3]
 810e6e6:	b2db      	uxtb	r3, r3
 810e6e8:	005b      	lsls	r3, r3, #1
 810e6ea:	b2db      	uxtb	r3, r3
 810e6ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810e6ee:	78fb      	ldrb	r3, [r7, #3]
 810e6f0:	b2db      	uxtb	r3, r3
 810e6f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810e6f6:	2b80      	cmp	r3, #128	@ 0x80
 810e6f8:	d0ef      	beq.n	810e6da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810e6fa:	4b27      	ldr	r3, [pc, #156]	@ (810e798 <xPortStartScheduler+0x138>)
 810e6fc:	681b      	ldr	r3, [r3, #0]
 810e6fe:	f1c3 0307 	rsb	r3, r3, #7
 810e702:	2b04      	cmp	r3, #4
 810e704:	d00b      	beq.n	810e71e <xPortStartScheduler+0xbe>
	__asm volatile
 810e706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e70a:	f383 8811 	msr	BASEPRI, r3
 810e70e:	f3bf 8f6f 	isb	sy
 810e712:	f3bf 8f4f 	dsb	sy
 810e716:	60bb      	str	r3, [r7, #8]
}
 810e718:	bf00      	nop
 810e71a:	bf00      	nop
 810e71c:	e7fd      	b.n	810e71a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810e71e:	4b1e      	ldr	r3, [pc, #120]	@ (810e798 <xPortStartScheduler+0x138>)
 810e720:	681b      	ldr	r3, [r3, #0]
 810e722:	021b      	lsls	r3, r3, #8
 810e724:	4a1c      	ldr	r2, [pc, #112]	@ (810e798 <xPortStartScheduler+0x138>)
 810e726:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810e728:	4b1b      	ldr	r3, [pc, #108]	@ (810e798 <xPortStartScheduler+0x138>)
 810e72a:	681b      	ldr	r3, [r3, #0]
 810e72c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 810e730:	4a19      	ldr	r2, [pc, #100]	@ (810e798 <xPortStartScheduler+0x138>)
 810e732:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810e734:	687b      	ldr	r3, [r7, #4]
 810e736:	b2da      	uxtb	r2, r3
 810e738:	697b      	ldr	r3, [r7, #20]
 810e73a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810e73c:	4b17      	ldr	r3, [pc, #92]	@ (810e79c <xPortStartScheduler+0x13c>)
 810e73e:	681b      	ldr	r3, [r3, #0]
 810e740:	4a16      	ldr	r2, [pc, #88]	@ (810e79c <xPortStartScheduler+0x13c>)
 810e742:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810e746:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810e748:	4b14      	ldr	r3, [pc, #80]	@ (810e79c <xPortStartScheduler+0x13c>)
 810e74a:	681b      	ldr	r3, [r3, #0]
 810e74c:	4a13      	ldr	r2, [pc, #76]	@ (810e79c <xPortStartScheduler+0x13c>)
 810e74e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 810e752:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810e754:	f000 f8da 	bl	810e90c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810e758:	4b11      	ldr	r3, [pc, #68]	@ (810e7a0 <xPortStartScheduler+0x140>)
 810e75a:	2200      	movs	r2, #0
 810e75c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810e75e:	f000 f8f9 	bl	810e954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810e762:	4b10      	ldr	r3, [pc, #64]	@ (810e7a4 <xPortStartScheduler+0x144>)
 810e764:	681b      	ldr	r3, [r3, #0]
 810e766:	4a0f      	ldr	r2, [pc, #60]	@ (810e7a4 <xPortStartScheduler+0x144>)
 810e768:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 810e76c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810e76e:	f7ff ff63 	bl	810e638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810e772:	f002 fa35 	bl	8110be0 <vTaskSwitchContext>
	prvTaskExitError();
 810e776:	f7ff ff19 	bl	810e5ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810e77a:	2300      	movs	r3, #0
}
 810e77c:	4618      	mov	r0, r3
 810e77e:	3718      	adds	r7, #24
 810e780:	46bd      	mov	sp, r7
 810e782:	bd80      	pop	{r7, pc}
 810e784:	e000ed00 	.word	0xe000ed00
 810e788:	410fc271 	.word	0x410fc271
 810e78c:	410fc270 	.word	0x410fc270
 810e790:	e000e400 	.word	0xe000e400
 810e794:	1000ab34 	.word	0x1000ab34
 810e798:	1000ab38 	.word	0x1000ab38
 810e79c:	e000ed20 	.word	0xe000ed20
 810e7a0:	10000024 	.word	0x10000024
 810e7a4:	e000ef34 	.word	0xe000ef34

0810e7a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810e7a8:	b480      	push	{r7}
 810e7aa:	b083      	sub	sp, #12
 810e7ac:	af00      	add	r7, sp, #0
	__asm volatile
 810e7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e7b2:	f383 8811 	msr	BASEPRI, r3
 810e7b6:	f3bf 8f6f 	isb	sy
 810e7ba:	f3bf 8f4f 	dsb	sy
 810e7be:	607b      	str	r3, [r7, #4]
}
 810e7c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810e7c2:	4b10      	ldr	r3, [pc, #64]	@ (810e804 <vPortEnterCritical+0x5c>)
 810e7c4:	681b      	ldr	r3, [r3, #0]
 810e7c6:	3301      	adds	r3, #1
 810e7c8:	4a0e      	ldr	r2, [pc, #56]	@ (810e804 <vPortEnterCritical+0x5c>)
 810e7ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810e7cc:	4b0d      	ldr	r3, [pc, #52]	@ (810e804 <vPortEnterCritical+0x5c>)
 810e7ce:	681b      	ldr	r3, [r3, #0]
 810e7d0:	2b01      	cmp	r3, #1
 810e7d2:	d110      	bne.n	810e7f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810e7d4:	4b0c      	ldr	r3, [pc, #48]	@ (810e808 <vPortEnterCritical+0x60>)
 810e7d6:	681b      	ldr	r3, [r3, #0]
 810e7d8:	b2db      	uxtb	r3, r3
 810e7da:	2b00      	cmp	r3, #0
 810e7dc:	d00b      	beq.n	810e7f6 <vPortEnterCritical+0x4e>
	__asm volatile
 810e7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e7e2:	f383 8811 	msr	BASEPRI, r3
 810e7e6:	f3bf 8f6f 	isb	sy
 810e7ea:	f3bf 8f4f 	dsb	sy
 810e7ee:	603b      	str	r3, [r7, #0]
}
 810e7f0:	bf00      	nop
 810e7f2:	bf00      	nop
 810e7f4:	e7fd      	b.n	810e7f2 <vPortEnterCritical+0x4a>
	}
}
 810e7f6:	bf00      	nop
 810e7f8:	370c      	adds	r7, #12
 810e7fa:	46bd      	mov	sp, r7
 810e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e800:	4770      	bx	lr
 810e802:	bf00      	nop
 810e804:	10000024 	.word	0x10000024
 810e808:	e000ed04 	.word	0xe000ed04

0810e80c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810e80c:	b480      	push	{r7}
 810e80e:	b083      	sub	sp, #12
 810e810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810e812:	4b12      	ldr	r3, [pc, #72]	@ (810e85c <vPortExitCritical+0x50>)
 810e814:	681b      	ldr	r3, [r3, #0]
 810e816:	2b00      	cmp	r3, #0
 810e818:	d10b      	bne.n	810e832 <vPortExitCritical+0x26>
	__asm volatile
 810e81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e81e:	f383 8811 	msr	BASEPRI, r3
 810e822:	f3bf 8f6f 	isb	sy
 810e826:	f3bf 8f4f 	dsb	sy
 810e82a:	607b      	str	r3, [r7, #4]
}
 810e82c:	bf00      	nop
 810e82e:	bf00      	nop
 810e830:	e7fd      	b.n	810e82e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810e832:	4b0a      	ldr	r3, [pc, #40]	@ (810e85c <vPortExitCritical+0x50>)
 810e834:	681b      	ldr	r3, [r3, #0]
 810e836:	3b01      	subs	r3, #1
 810e838:	4a08      	ldr	r2, [pc, #32]	@ (810e85c <vPortExitCritical+0x50>)
 810e83a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810e83c:	4b07      	ldr	r3, [pc, #28]	@ (810e85c <vPortExitCritical+0x50>)
 810e83e:	681b      	ldr	r3, [r3, #0]
 810e840:	2b00      	cmp	r3, #0
 810e842:	d105      	bne.n	810e850 <vPortExitCritical+0x44>
 810e844:	2300      	movs	r3, #0
 810e846:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810e848:	683b      	ldr	r3, [r7, #0]
 810e84a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810e84e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810e850:	bf00      	nop
 810e852:	370c      	adds	r7, #12
 810e854:	46bd      	mov	sp, r7
 810e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e85a:	4770      	bx	lr
 810e85c:	10000024 	.word	0x10000024

0810e860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810e860:	f3ef 8009 	mrs	r0, PSP
 810e864:	f3bf 8f6f 	isb	sy
 810e868:	4b15      	ldr	r3, [pc, #84]	@ (810e8c0 <pxCurrentTCBConst>)
 810e86a:	681a      	ldr	r2, [r3, #0]
 810e86c:	f01e 0f10 	tst.w	lr, #16
 810e870:	bf08      	it	eq
 810e872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810e876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e87a:	6010      	str	r0, [r2, #0]
 810e87c:	e92d 0009 	stmdb	sp!, {r0, r3}
 810e880:	f04f 0050 	mov.w	r0, #80	@ 0x50
 810e884:	f380 8811 	msr	BASEPRI, r0
 810e888:	f3bf 8f4f 	dsb	sy
 810e88c:	f3bf 8f6f 	isb	sy
 810e890:	f002 f9a6 	bl	8110be0 <vTaskSwitchContext>
 810e894:	f04f 0000 	mov.w	r0, #0
 810e898:	f380 8811 	msr	BASEPRI, r0
 810e89c:	bc09      	pop	{r0, r3}
 810e89e:	6819      	ldr	r1, [r3, #0]
 810e8a0:	6808      	ldr	r0, [r1, #0]
 810e8a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e8a6:	f01e 0f10 	tst.w	lr, #16
 810e8aa:	bf08      	it	eq
 810e8ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810e8b0:	f380 8809 	msr	PSP, r0
 810e8b4:	f3bf 8f6f 	isb	sy
 810e8b8:	4770      	bx	lr
 810e8ba:	bf00      	nop
 810e8bc:	f3af 8000 	nop.w

0810e8c0 <pxCurrentTCBConst>:
 810e8c0:	1000ab7c 	.word	0x1000ab7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810e8c4:	bf00      	nop
 810e8c6:	bf00      	nop

0810e8c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810e8c8:	b580      	push	{r7, lr}
 810e8ca:	b082      	sub	sp, #8
 810e8cc:	af00      	add	r7, sp, #0
	__asm volatile
 810e8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e8d2:	f383 8811 	msr	BASEPRI, r3
 810e8d6:	f3bf 8f6f 	isb	sy
 810e8da:	f3bf 8f4f 	dsb	sy
 810e8de:	607b      	str	r3, [r7, #4]
}
 810e8e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810e8e2:	f002 f8c3 	bl	8110a6c <xTaskIncrementTick>
 810e8e6:	4603      	mov	r3, r0
 810e8e8:	2b00      	cmp	r3, #0
 810e8ea:	d003      	beq.n	810e8f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810e8ec:	4b06      	ldr	r3, [pc, #24]	@ (810e908 <xPortSysTickHandler+0x40>)
 810e8ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e8f2:	601a      	str	r2, [r3, #0]
 810e8f4:	2300      	movs	r3, #0
 810e8f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 810e8f8:	683b      	ldr	r3, [r7, #0]
 810e8fa:	f383 8811 	msr	BASEPRI, r3
}
 810e8fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 810e900:	bf00      	nop
 810e902:	3708      	adds	r7, #8
 810e904:	46bd      	mov	sp, r7
 810e906:	bd80      	pop	{r7, pc}
 810e908:	e000ed04 	.word	0xe000ed04

0810e90c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810e90c:	b480      	push	{r7}
 810e90e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810e910:	4b0b      	ldr	r3, [pc, #44]	@ (810e940 <vPortSetupTimerInterrupt+0x34>)
 810e912:	2200      	movs	r2, #0
 810e914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810e916:	4b0b      	ldr	r3, [pc, #44]	@ (810e944 <vPortSetupTimerInterrupt+0x38>)
 810e918:	2200      	movs	r2, #0
 810e91a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810e91c:	4b0a      	ldr	r3, [pc, #40]	@ (810e948 <vPortSetupTimerInterrupt+0x3c>)
 810e91e:	681b      	ldr	r3, [r3, #0]
 810e920:	4a0a      	ldr	r2, [pc, #40]	@ (810e94c <vPortSetupTimerInterrupt+0x40>)
 810e922:	fba2 2303 	umull	r2, r3, r2, r3
 810e926:	099b      	lsrs	r3, r3, #6
 810e928:	4a09      	ldr	r2, [pc, #36]	@ (810e950 <vPortSetupTimerInterrupt+0x44>)
 810e92a:	3b01      	subs	r3, #1
 810e92c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810e92e:	4b04      	ldr	r3, [pc, #16]	@ (810e940 <vPortSetupTimerInterrupt+0x34>)
 810e930:	2207      	movs	r2, #7
 810e932:	601a      	str	r2, [r3, #0]
}
 810e934:	bf00      	nop
 810e936:	46bd      	mov	sp, r7
 810e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e93c:	4770      	bx	lr
 810e93e:	bf00      	nop
 810e940:	e000e010 	.word	0xe000e010
 810e944:	e000e018 	.word	0xe000e018
 810e948:	10000018 	.word	0x10000018
 810e94c:	10624dd3 	.word	0x10624dd3
 810e950:	e000e014 	.word	0xe000e014

0810e954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810e954:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 810e964 <vPortEnableVFP+0x10>
 810e958:	6801      	ldr	r1, [r0, #0]
 810e95a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810e95e:	6001      	str	r1, [r0, #0]
 810e960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810e962:	bf00      	nop
 810e964:	e000ed88 	.word	0xe000ed88

0810e968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810e968:	b480      	push	{r7}
 810e96a:	b085      	sub	sp, #20
 810e96c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810e96e:	f3ef 8305 	mrs	r3, IPSR
 810e972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810e974:	68fb      	ldr	r3, [r7, #12]
 810e976:	2b0f      	cmp	r3, #15
 810e978:	d915      	bls.n	810e9a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810e97a:	4a18      	ldr	r2, [pc, #96]	@ (810e9dc <vPortValidateInterruptPriority+0x74>)
 810e97c:	68fb      	ldr	r3, [r7, #12]
 810e97e:	4413      	add	r3, r2
 810e980:	781b      	ldrb	r3, [r3, #0]
 810e982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810e984:	4b16      	ldr	r3, [pc, #88]	@ (810e9e0 <vPortValidateInterruptPriority+0x78>)
 810e986:	781b      	ldrb	r3, [r3, #0]
 810e988:	7afa      	ldrb	r2, [r7, #11]
 810e98a:	429a      	cmp	r2, r3
 810e98c:	d20b      	bcs.n	810e9a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810e98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e992:	f383 8811 	msr	BASEPRI, r3
 810e996:	f3bf 8f6f 	isb	sy
 810e99a:	f3bf 8f4f 	dsb	sy
 810e99e:	607b      	str	r3, [r7, #4]
}
 810e9a0:	bf00      	nop
 810e9a2:	bf00      	nop
 810e9a4:	e7fd      	b.n	810e9a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810e9a6:	4b0f      	ldr	r3, [pc, #60]	@ (810e9e4 <vPortValidateInterruptPriority+0x7c>)
 810e9a8:	681b      	ldr	r3, [r3, #0]
 810e9aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810e9ae:	4b0e      	ldr	r3, [pc, #56]	@ (810e9e8 <vPortValidateInterruptPriority+0x80>)
 810e9b0:	681b      	ldr	r3, [r3, #0]
 810e9b2:	429a      	cmp	r2, r3
 810e9b4:	d90b      	bls.n	810e9ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 810e9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e9ba:	f383 8811 	msr	BASEPRI, r3
 810e9be:	f3bf 8f6f 	isb	sy
 810e9c2:	f3bf 8f4f 	dsb	sy
 810e9c6:	603b      	str	r3, [r7, #0]
}
 810e9c8:	bf00      	nop
 810e9ca:	bf00      	nop
 810e9cc:	e7fd      	b.n	810e9ca <vPortValidateInterruptPriority+0x62>
	}
 810e9ce:	bf00      	nop
 810e9d0:	3714      	adds	r7, #20
 810e9d2:	46bd      	mov	sp, r7
 810e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e9d8:	4770      	bx	lr
 810e9da:	bf00      	nop
 810e9dc:	e000e3f0 	.word	0xe000e3f0
 810e9e0:	1000ab34 	.word	0x1000ab34
 810e9e4:	e000ed0c 	.word	0xe000ed0c
 810e9e8:	1000ab38 	.word	0x1000ab38

0810e9ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810e9ec:	b580      	push	{r7, lr}
 810e9ee:	b084      	sub	sp, #16
 810e9f0:	af00      	add	r7, sp, #0
 810e9f2:	6078      	str	r0, [r7, #4]
 810e9f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810e9f6:	687b      	ldr	r3, [r7, #4]
 810e9f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810e9fa:	68fb      	ldr	r3, [r7, #12]
 810e9fc:	2b00      	cmp	r3, #0
 810e9fe:	d10b      	bne.n	810ea18 <xQueueGenericReset+0x2c>
	__asm volatile
 810ea00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ea04:	f383 8811 	msr	BASEPRI, r3
 810ea08:	f3bf 8f6f 	isb	sy
 810ea0c:	f3bf 8f4f 	dsb	sy
 810ea10:	60bb      	str	r3, [r7, #8]
}
 810ea12:	bf00      	nop
 810ea14:	bf00      	nop
 810ea16:	e7fd      	b.n	810ea14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810ea18:	f7ff fec6 	bl	810e7a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810ea1c:	68fb      	ldr	r3, [r7, #12]
 810ea1e:	681a      	ldr	r2, [r3, #0]
 810ea20:	68fb      	ldr	r3, [r7, #12]
 810ea22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ea24:	68f9      	ldr	r1, [r7, #12]
 810ea26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810ea28:	fb01 f303 	mul.w	r3, r1, r3
 810ea2c:	441a      	add	r2, r3
 810ea2e:	68fb      	ldr	r3, [r7, #12]
 810ea30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810ea32:	68fb      	ldr	r3, [r7, #12]
 810ea34:	2200      	movs	r2, #0
 810ea36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810ea38:	68fb      	ldr	r3, [r7, #12]
 810ea3a:	681a      	ldr	r2, [r3, #0]
 810ea3c:	68fb      	ldr	r3, [r7, #12]
 810ea3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810ea40:	68fb      	ldr	r3, [r7, #12]
 810ea42:	681a      	ldr	r2, [r3, #0]
 810ea44:	68fb      	ldr	r3, [r7, #12]
 810ea46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ea48:	3b01      	subs	r3, #1
 810ea4a:	68f9      	ldr	r1, [r7, #12]
 810ea4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810ea4e:	fb01 f303 	mul.w	r3, r1, r3
 810ea52:	441a      	add	r2, r3
 810ea54:	68fb      	ldr	r3, [r7, #12]
 810ea56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810ea58:	68fb      	ldr	r3, [r7, #12]
 810ea5a:	22ff      	movs	r2, #255	@ 0xff
 810ea5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810ea60:	68fb      	ldr	r3, [r7, #12]
 810ea62:	22ff      	movs	r2, #255	@ 0xff
 810ea64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 810ea68:	683b      	ldr	r3, [r7, #0]
 810ea6a:	2b00      	cmp	r3, #0
 810ea6c:	d114      	bne.n	810ea98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810ea6e:	68fb      	ldr	r3, [r7, #12]
 810ea70:	691b      	ldr	r3, [r3, #16]
 810ea72:	2b00      	cmp	r3, #0
 810ea74:	d01a      	beq.n	810eaac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810ea76:	68fb      	ldr	r3, [r7, #12]
 810ea78:	3310      	adds	r3, #16
 810ea7a:	4618      	mov	r0, r3
 810ea7c:	f002 f968 	bl	8110d50 <xTaskRemoveFromEventList>
 810ea80:	4603      	mov	r3, r0
 810ea82:	2b00      	cmp	r3, #0
 810ea84:	d012      	beq.n	810eaac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810ea86:	4b0d      	ldr	r3, [pc, #52]	@ (810eabc <xQueueGenericReset+0xd0>)
 810ea88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ea8c:	601a      	str	r2, [r3, #0]
 810ea8e:	f3bf 8f4f 	dsb	sy
 810ea92:	f3bf 8f6f 	isb	sy
 810ea96:	e009      	b.n	810eaac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810ea98:	68fb      	ldr	r3, [r7, #12]
 810ea9a:	3310      	adds	r3, #16
 810ea9c:	4618      	mov	r0, r3
 810ea9e:	f7ff fc9d 	bl	810e3dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810eaa2:	68fb      	ldr	r3, [r7, #12]
 810eaa4:	3324      	adds	r3, #36	@ 0x24
 810eaa6:	4618      	mov	r0, r3
 810eaa8:	f7ff fc98 	bl	810e3dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810eaac:	f7ff feae 	bl	810e80c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810eab0:	2301      	movs	r3, #1
}
 810eab2:	4618      	mov	r0, r3
 810eab4:	3710      	adds	r7, #16
 810eab6:	46bd      	mov	sp, r7
 810eab8:	bd80      	pop	{r7, pc}
 810eaba:	bf00      	nop
 810eabc:	e000ed04 	.word	0xe000ed04

0810eac0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810eac0:	b580      	push	{r7, lr}
 810eac2:	b08e      	sub	sp, #56	@ 0x38
 810eac4:	af02      	add	r7, sp, #8
 810eac6:	60f8      	str	r0, [r7, #12]
 810eac8:	60b9      	str	r1, [r7, #8]
 810eaca:	607a      	str	r2, [r7, #4]
 810eacc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810eace:	68fb      	ldr	r3, [r7, #12]
 810ead0:	2b00      	cmp	r3, #0
 810ead2:	d10b      	bne.n	810eaec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 810ead4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ead8:	f383 8811 	msr	BASEPRI, r3
 810eadc:	f3bf 8f6f 	isb	sy
 810eae0:	f3bf 8f4f 	dsb	sy
 810eae4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810eae6:	bf00      	nop
 810eae8:	bf00      	nop
 810eaea:	e7fd      	b.n	810eae8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810eaec:	683b      	ldr	r3, [r7, #0]
 810eaee:	2b00      	cmp	r3, #0
 810eaf0:	d10b      	bne.n	810eb0a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 810eaf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eaf6:	f383 8811 	msr	BASEPRI, r3
 810eafa:	f3bf 8f6f 	isb	sy
 810eafe:	f3bf 8f4f 	dsb	sy
 810eb02:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810eb04:	bf00      	nop
 810eb06:	bf00      	nop
 810eb08:	e7fd      	b.n	810eb06 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810eb0a:	687b      	ldr	r3, [r7, #4]
 810eb0c:	2b00      	cmp	r3, #0
 810eb0e:	d002      	beq.n	810eb16 <xQueueGenericCreateStatic+0x56>
 810eb10:	68bb      	ldr	r3, [r7, #8]
 810eb12:	2b00      	cmp	r3, #0
 810eb14:	d001      	beq.n	810eb1a <xQueueGenericCreateStatic+0x5a>
 810eb16:	2301      	movs	r3, #1
 810eb18:	e000      	b.n	810eb1c <xQueueGenericCreateStatic+0x5c>
 810eb1a:	2300      	movs	r3, #0
 810eb1c:	2b00      	cmp	r3, #0
 810eb1e:	d10b      	bne.n	810eb38 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 810eb20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eb24:	f383 8811 	msr	BASEPRI, r3
 810eb28:	f3bf 8f6f 	isb	sy
 810eb2c:	f3bf 8f4f 	dsb	sy
 810eb30:	623b      	str	r3, [r7, #32]
}
 810eb32:	bf00      	nop
 810eb34:	bf00      	nop
 810eb36:	e7fd      	b.n	810eb34 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810eb38:	687b      	ldr	r3, [r7, #4]
 810eb3a:	2b00      	cmp	r3, #0
 810eb3c:	d102      	bne.n	810eb44 <xQueueGenericCreateStatic+0x84>
 810eb3e:	68bb      	ldr	r3, [r7, #8]
 810eb40:	2b00      	cmp	r3, #0
 810eb42:	d101      	bne.n	810eb48 <xQueueGenericCreateStatic+0x88>
 810eb44:	2301      	movs	r3, #1
 810eb46:	e000      	b.n	810eb4a <xQueueGenericCreateStatic+0x8a>
 810eb48:	2300      	movs	r3, #0
 810eb4a:	2b00      	cmp	r3, #0
 810eb4c:	d10b      	bne.n	810eb66 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 810eb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eb52:	f383 8811 	msr	BASEPRI, r3
 810eb56:	f3bf 8f6f 	isb	sy
 810eb5a:	f3bf 8f4f 	dsb	sy
 810eb5e:	61fb      	str	r3, [r7, #28]
}
 810eb60:	bf00      	nop
 810eb62:	bf00      	nop
 810eb64:	e7fd      	b.n	810eb62 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810eb66:	2350      	movs	r3, #80	@ 0x50
 810eb68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810eb6a:	697b      	ldr	r3, [r7, #20]
 810eb6c:	2b50      	cmp	r3, #80	@ 0x50
 810eb6e:	d00b      	beq.n	810eb88 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 810eb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eb74:	f383 8811 	msr	BASEPRI, r3
 810eb78:	f3bf 8f6f 	isb	sy
 810eb7c:	f3bf 8f4f 	dsb	sy
 810eb80:	61bb      	str	r3, [r7, #24]
}
 810eb82:	bf00      	nop
 810eb84:	bf00      	nop
 810eb86:	e7fd      	b.n	810eb84 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810eb88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810eb8a:	683b      	ldr	r3, [r7, #0]
 810eb8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 810eb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810eb90:	2b00      	cmp	r3, #0
 810eb92:	d00d      	beq.n	810ebb0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810eb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810eb96:	2201      	movs	r2, #1
 810eb98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810eb9c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 810eba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810eba2:	9300      	str	r3, [sp, #0]
 810eba4:	4613      	mov	r3, r2
 810eba6:	687a      	ldr	r2, [r7, #4]
 810eba8:	68b9      	ldr	r1, [r7, #8]
 810ebaa:	68f8      	ldr	r0, [r7, #12]
 810ebac:	f000 f840 	bl	810ec30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810ebb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 810ebb2:	4618      	mov	r0, r3
 810ebb4:	3730      	adds	r7, #48	@ 0x30
 810ebb6:	46bd      	mov	sp, r7
 810ebb8:	bd80      	pop	{r7, pc}

0810ebba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810ebba:	b580      	push	{r7, lr}
 810ebbc:	b08a      	sub	sp, #40	@ 0x28
 810ebbe:	af02      	add	r7, sp, #8
 810ebc0:	60f8      	str	r0, [r7, #12]
 810ebc2:	60b9      	str	r1, [r7, #8]
 810ebc4:	4613      	mov	r3, r2
 810ebc6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810ebc8:	68fb      	ldr	r3, [r7, #12]
 810ebca:	2b00      	cmp	r3, #0
 810ebcc:	d10b      	bne.n	810ebe6 <xQueueGenericCreate+0x2c>
	__asm volatile
 810ebce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ebd2:	f383 8811 	msr	BASEPRI, r3
 810ebd6:	f3bf 8f6f 	isb	sy
 810ebda:	f3bf 8f4f 	dsb	sy
 810ebde:	613b      	str	r3, [r7, #16]
}
 810ebe0:	bf00      	nop
 810ebe2:	bf00      	nop
 810ebe4:	e7fd      	b.n	810ebe2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810ebe6:	68fb      	ldr	r3, [r7, #12]
 810ebe8:	68ba      	ldr	r2, [r7, #8]
 810ebea:	fb02 f303 	mul.w	r3, r2, r3
 810ebee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 810ebf0:	69fb      	ldr	r3, [r7, #28]
 810ebf2:	3350      	adds	r3, #80	@ 0x50
 810ebf4:	4618      	mov	r0, r3
 810ebf6:	f7ff fa03 	bl	810e000 <pvPortMalloc>
 810ebfa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810ebfc:	69bb      	ldr	r3, [r7, #24]
 810ebfe:	2b00      	cmp	r3, #0
 810ec00:	d011      	beq.n	810ec26 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 810ec02:	69bb      	ldr	r3, [r7, #24]
 810ec04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810ec06:	697b      	ldr	r3, [r7, #20]
 810ec08:	3350      	adds	r3, #80	@ 0x50
 810ec0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810ec0c:	69bb      	ldr	r3, [r7, #24]
 810ec0e:	2200      	movs	r2, #0
 810ec10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810ec14:	79fa      	ldrb	r2, [r7, #7]
 810ec16:	69bb      	ldr	r3, [r7, #24]
 810ec18:	9300      	str	r3, [sp, #0]
 810ec1a:	4613      	mov	r3, r2
 810ec1c:	697a      	ldr	r2, [r7, #20]
 810ec1e:	68b9      	ldr	r1, [r7, #8]
 810ec20:	68f8      	ldr	r0, [r7, #12]
 810ec22:	f000 f805 	bl	810ec30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810ec26:	69bb      	ldr	r3, [r7, #24]
	}
 810ec28:	4618      	mov	r0, r3
 810ec2a:	3720      	adds	r7, #32
 810ec2c:	46bd      	mov	sp, r7
 810ec2e:	bd80      	pop	{r7, pc}

0810ec30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810ec30:	b580      	push	{r7, lr}
 810ec32:	b084      	sub	sp, #16
 810ec34:	af00      	add	r7, sp, #0
 810ec36:	60f8      	str	r0, [r7, #12]
 810ec38:	60b9      	str	r1, [r7, #8]
 810ec3a:	607a      	str	r2, [r7, #4]
 810ec3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810ec3e:	68bb      	ldr	r3, [r7, #8]
 810ec40:	2b00      	cmp	r3, #0
 810ec42:	d103      	bne.n	810ec4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810ec44:	69bb      	ldr	r3, [r7, #24]
 810ec46:	69ba      	ldr	r2, [r7, #24]
 810ec48:	601a      	str	r2, [r3, #0]
 810ec4a:	e002      	b.n	810ec52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810ec4c:	69bb      	ldr	r3, [r7, #24]
 810ec4e:	687a      	ldr	r2, [r7, #4]
 810ec50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810ec52:	69bb      	ldr	r3, [r7, #24]
 810ec54:	68fa      	ldr	r2, [r7, #12]
 810ec56:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810ec58:	69bb      	ldr	r3, [r7, #24]
 810ec5a:	68ba      	ldr	r2, [r7, #8]
 810ec5c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810ec5e:	2101      	movs	r1, #1
 810ec60:	69b8      	ldr	r0, [r7, #24]
 810ec62:	f7ff fec3 	bl	810e9ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810ec66:	69bb      	ldr	r3, [r7, #24]
 810ec68:	78fa      	ldrb	r2, [r7, #3]
 810ec6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810ec6e:	bf00      	nop
 810ec70:	3710      	adds	r7, #16
 810ec72:	46bd      	mov	sp, r7
 810ec74:	bd80      	pop	{r7, pc}

0810ec76 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 810ec76:	b580      	push	{r7, lr}
 810ec78:	b082      	sub	sp, #8
 810ec7a:	af00      	add	r7, sp, #0
 810ec7c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 810ec7e:	687b      	ldr	r3, [r7, #4]
 810ec80:	2b00      	cmp	r3, #0
 810ec82:	d00e      	beq.n	810eca2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 810ec84:	687b      	ldr	r3, [r7, #4]
 810ec86:	2200      	movs	r2, #0
 810ec88:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 810ec8a:	687b      	ldr	r3, [r7, #4]
 810ec8c:	2200      	movs	r2, #0
 810ec8e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 810ec90:	687b      	ldr	r3, [r7, #4]
 810ec92:	2200      	movs	r2, #0
 810ec94:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 810ec96:	2300      	movs	r3, #0
 810ec98:	2200      	movs	r2, #0
 810ec9a:	2100      	movs	r1, #0
 810ec9c:	6878      	ldr	r0, [r7, #4]
 810ec9e:	f000 f911 	bl	810eec4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 810eca2:	bf00      	nop
 810eca4:	3708      	adds	r7, #8
 810eca6:	46bd      	mov	sp, r7
 810eca8:	bd80      	pop	{r7, pc}

0810ecaa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 810ecaa:	b580      	push	{r7, lr}
 810ecac:	b086      	sub	sp, #24
 810ecae:	af00      	add	r7, sp, #0
 810ecb0:	4603      	mov	r3, r0
 810ecb2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 810ecb4:	2301      	movs	r3, #1
 810ecb6:	617b      	str	r3, [r7, #20]
 810ecb8:	2300      	movs	r3, #0
 810ecba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 810ecbc:	79fb      	ldrb	r3, [r7, #7]
 810ecbe:	461a      	mov	r2, r3
 810ecc0:	6939      	ldr	r1, [r7, #16]
 810ecc2:	6978      	ldr	r0, [r7, #20]
 810ecc4:	f7ff ff79 	bl	810ebba <xQueueGenericCreate>
 810ecc8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 810ecca:	68f8      	ldr	r0, [r7, #12]
 810eccc:	f7ff ffd3 	bl	810ec76 <prvInitialiseMutex>

		return xNewQueue;
 810ecd0:	68fb      	ldr	r3, [r7, #12]
	}
 810ecd2:	4618      	mov	r0, r3
 810ecd4:	3718      	adds	r7, #24
 810ecd6:	46bd      	mov	sp, r7
 810ecd8:	bd80      	pop	{r7, pc}

0810ecda <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 810ecda:	b580      	push	{r7, lr}
 810ecdc:	b088      	sub	sp, #32
 810ecde:	af02      	add	r7, sp, #8
 810ece0:	4603      	mov	r3, r0
 810ece2:	6039      	str	r1, [r7, #0]
 810ece4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 810ece6:	2301      	movs	r3, #1
 810ece8:	617b      	str	r3, [r7, #20]
 810ecea:	2300      	movs	r3, #0
 810ecec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 810ecee:	79fb      	ldrb	r3, [r7, #7]
 810ecf0:	9300      	str	r3, [sp, #0]
 810ecf2:	683b      	ldr	r3, [r7, #0]
 810ecf4:	2200      	movs	r2, #0
 810ecf6:	6939      	ldr	r1, [r7, #16]
 810ecf8:	6978      	ldr	r0, [r7, #20]
 810ecfa:	f7ff fee1 	bl	810eac0 <xQueueGenericCreateStatic>
 810ecfe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 810ed00:	68f8      	ldr	r0, [r7, #12]
 810ed02:	f7ff ffb8 	bl	810ec76 <prvInitialiseMutex>

		return xNewQueue;
 810ed06:	68fb      	ldr	r3, [r7, #12]
	}
 810ed08:	4618      	mov	r0, r3
 810ed0a:	3718      	adds	r7, #24
 810ed0c:	46bd      	mov	sp, r7
 810ed0e:	bd80      	pop	{r7, pc}

0810ed10 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 810ed10:	b590      	push	{r4, r7, lr}
 810ed12:	b087      	sub	sp, #28
 810ed14:	af00      	add	r7, sp, #0
 810ed16:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 810ed18:	687b      	ldr	r3, [r7, #4]
 810ed1a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 810ed1c:	693b      	ldr	r3, [r7, #16]
 810ed1e:	2b00      	cmp	r3, #0
 810ed20:	d10b      	bne.n	810ed3a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 810ed22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ed26:	f383 8811 	msr	BASEPRI, r3
 810ed2a:	f3bf 8f6f 	isb	sy
 810ed2e:	f3bf 8f4f 	dsb	sy
 810ed32:	60fb      	str	r3, [r7, #12]
}
 810ed34:	bf00      	nop
 810ed36:	bf00      	nop
 810ed38:	e7fd      	b.n	810ed36 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 810ed3a:	693b      	ldr	r3, [r7, #16]
 810ed3c:	689c      	ldr	r4, [r3, #8]
 810ed3e:	f002 f9f5 	bl	811112c <xTaskGetCurrentTaskHandle>
 810ed42:	4603      	mov	r3, r0
 810ed44:	429c      	cmp	r4, r3
 810ed46:	d111      	bne.n	810ed6c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 810ed48:	693b      	ldr	r3, [r7, #16]
 810ed4a:	68db      	ldr	r3, [r3, #12]
 810ed4c:	1e5a      	subs	r2, r3, #1
 810ed4e:	693b      	ldr	r3, [r7, #16]
 810ed50:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 810ed52:	693b      	ldr	r3, [r7, #16]
 810ed54:	68db      	ldr	r3, [r3, #12]
 810ed56:	2b00      	cmp	r3, #0
 810ed58:	d105      	bne.n	810ed66 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 810ed5a:	2300      	movs	r3, #0
 810ed5c:	2200      	movs	r2, #0
 810ed5e:	2100      	movs	r1, #0
 810ed60:	6938      	ldr	r0, [r7, #16]
 810ed62:	f000 f8af 	bl	810eec4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 810ed66:	2301      	movs	r3, #1
 810ed68:	617b      	str	r3, [r7, #20]
 810ed6a:	e001      	b.n	810ed70 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 810ed6c:	2300      	movs	r3, #0
 810ed6e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 810ed70:	697b      	ldr	r3, [r7, #20]
	}
 810ed72:	4618      	mov	r0, r3
 810ed74:	371c      	adds	r7, #28
 810ed76:	46bd      	mov	sp, r7
 810ed78:	bd90      	pop	{r4, r7, pc}

0810ed7a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 810ed7a:	b590      	push	{r4, r7, lr}
 810ed7c:	b087      	sub	sp, #28
 810ed7e:	af00      	add	r7, sp, #0
 810ed80:	6078      	str	r0, [r7, #4]
 810ed82:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 810ed84:	687b      	ldr	r3, [r7, #4]
 810ed86:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 810ed88:	693b      	ldr	r3, [r7, #16]
 810ed8a:	2b00      	cmp	r3, #0
 810ed8c:	d10b      	bne.n	810eda6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 810ed8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ed92:	f383 8811 	msr	BASEPRI, r3
 810ed96:	f3bf 8f6f 	isb	sy
 810ed9a:	f3bf 8f4f 	dsb	sy
 810ed9e:	60fb      	str	r3, [r7, #12]
}
 810eda0:	bf00      	nop
 810eda2:	bf00      	nop
 810eda4:	e7fd      	b.n	810eda2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 810eda6:	693b      	ldr	r3, [r7, #16]
 810eda8:	689c      	ldr	r4, [r3, #8]
 810edaa:	f002 f9bf 	bl	811112c <xTaskGetCurrentTaskHandle>
 810edae:	4603      	mov	r3, r0
 810edb0:	429c      	cmp	r4, r3
 810edb2:	d107      	bne.n	810edc4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 810edb4:	693b      	ldr	r3, [r7, #16]
 810edb6:	68db      	ldr	r3, [r3, #12]
 810edb8:	1c5a      	adds	r2, r3, #1
 810edba:	693b      	ldr	r3, [r7, #16]
 810edbc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 810edbe:	2301      	movs	r3, #1
 810edc0:	617b      	str	r3, [r7, #20]
 810edc2:	e00c      	b.n	810edde <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 810edc4:	6839      	ldr	r1, [r7, #0]
 810edc6:	6938      	ldr	r0, [r7, #16]
 810edc8:	f000 fb8e 	bl	810f4e8 <xQueueSemaphoreTake>
 810edcc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 810edce:	697b      	ldr	r3, [r7, #20]
 810edd0:	2b00      	cmp	r3, #0
 810edd2:	d004      	beq.n	810edde <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 810edd4:	693b      	ldr	r3, [r7, #16]
 810edd6:	68db      	ldr	r3, [r3, #12]
 810edd8:	1c5a      	adds	r2, r3, #1
 810edda:	693b      	ldr	r3, [r7, #16]
 810eddc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 810edde:	697b      	ldr	r3, [r7, #20]
	}
 810ede0:	4618      	mov	r0, r3
 810ede2:	371c      	adds	r7, #28
 810ede4:	46bd      	mov	sp, r7
 810ede6:	bd90      	pop	{r4, r7, pc}

0810ede8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 810ede8:	b580      	push	{r7, lr}
 810edea:	b08a      	sub	sp, #40	@ 0x28
 810edec:	af02      	add	r7, sp, #8
 810edee:	60f8      	str	r0, [r7, #12]
 810edf0:	60b9      	str	r1, [r7, #8]
 810edf2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810edf4:	68fb      	ldr	r3, [r7, #12]
 810edf6:	2b00      	cmp	r3, #0
 810edf8:	d10b      	bne.n	810ee12 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 810edfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810edfe:	f383 8811 	msr	BASEPRI, r3
 810ee02:	f3bf 8f6f 	isb	sy
 810ee06:	f3bf 8f4f 	dsb	sy
 810ee0a:	61bb      	str	r3, [r7, #24]
}
 810ee0c:	bf00      	nop
 810ee0e:	bf00      	nop
 810ee10:	e7fd      	b.n	810ee0e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 810ee12:	68ba      	ldr	r2, [r7, #8]
 810ee14:	68fb      	ldr	r3, [r7, #12]
 810ee16:	429a      	cmp	r2, r3
 810ee18:	d90b      	bls.n	810ee32 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 810ee1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ee1e:	f383 8811 	msr	BASEPRI, r3
 810ee22:	f3bf 8f6f 	isb	sy
 810ee26:	f3bf 8f4f 	dsb	sy
 810ee2a:	617b      	str	r3, [r7, #20]
}
 810ee2c:	bf00      	nop
 810ee2e:	bf00      	nop
 810ee30:	e7fd      	b.n	810ee2e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 810ee32:	2302      	movs	r3, #2
 810ee34:	9300      	str	r3, [sp, #0]
 810ee36:	687b      	ldr	r3, [r7, #4]
 810ee38:	2200      	movs	r2, #0
 810ee3a:	2100      	movs	r1, #0
 810ee3c:	68f8      	ldr	r0, [r7, #12]
 810ee3e:	f7ff fe3f 	bl	810eac0 <xQueueGenericCreateStatic>
 810ee42:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 810ee44:	69fb      	ldr	r3, [r7, #28]
 810ee46:	2b00      	cmp	r3, #0
 810ee48:	d002      	beq.n	810ee50 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 810ee4a:	69fb      	ldr	r3, [r7, #28]
 810ee4c:	68ba      	ldr	r2, [r7, #8]
 810ee4e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810ee50:	69fb      	ldr	r3, [r7, #28]
	}
 810ee52:	4618      	mov	r0, r3
 810ee54:	3720      	adds	r7, #32
 810ee56:	46bd      	mov	sp, r7
 810ee58:	bd80      	pop	{r7, pc}

0810ee5a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 810ee5a:	b580      	push	{r7, lr}
 810ee5c:	b086      	sub	sp, #24
 810ee5e:	af00      	add	r7, sp, #0
 810ee60:	6078      	str	r0, [r7, #4]
 810ee62:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810ee64:	687b      	ldr	r3, [r7, #4]
 810ee66:	2b00      	cmp	r3, #0
 810ee68:	d10b      	bne.n	810ee82 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 810ee6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ee6e:	f383 8811 	msr	BASEPRI, r3
 810ee72:	f3bf 8f6f 	isb	sy
 810ee76:	f3bf 8f4f 	dsb	sy
 810ee7a:	613b      	str	r3, [r7, #16]
}
 810ee7c:	bf00      	nop
 810ee7e:	bf00      	nop
 810ee80:	e7fd      	b.n	810ee7e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 810ee82:	683a      	ldr	r2, [r7, #0]
 810ee84:	687b      	ldr	r3, [r7, #4]
 810ee86:	429a      	cmp	r2, r3
 810ee88:	d90b      	bls.n	810eea2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 810ee8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ee8e:	f383 8811 	msr	BASEPRI, r3
 810ee92:	f3bf 8f6f 	isb	sy
 810ee96:	f3bf 8f4f 	dsb	sy
 810ee9a:	60fb      	str	r3, [r7, #12]
}
 810ee9c:	bf00      	nop
 810ee9e:	bf00      	nop
 810eea0:	e7fd      	b.n	810ee9e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 810eea2:	2202      	movs	r2, #2
 810eea4:	2100      	movs	r1, #0
 810eea6:	6878      	ldr	r0, [r7, #4]
 810eea8:	f7ff fe87 	bl	810ebba <xQueueGenericCreate>
 810eeac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 810eeae:	697b      	ldr	r3, [r7, #20]
 810eeb0:	2b00      	cmp	r3, #0
 810eeb2:	d002      	beq.n	810eeba <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 810eeb4:	697b      	ldr	r3, [r7, #20]
 810eeb6:	683a      	ldr	r2, [r7, #0]
 810eeb8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810eeba:	697b      	ldr	r3, [r7, #20]
	}
 810eebc:	4618      	mov	r0, r3
 810eebe:	3718      	adds	r7, #24
 810eec0:	46bd      	mov	sp, r7
 810eec2:	bd80      	pop	{r7, pc}

0810eec4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810eec4:	b580      	push	{r7, lr}
 810eec6:	b08e      	sub	sp, #56	@ 0x38
 810eec8:	af00      	add	r7, sp, #0
 810eeca:	60f8      	str	r0, [r7, #12]
 810eecc:	60b9      	str	r1, [r7, #8]
 810eece:	607a      	str	r2, [r7, #4]
 810eed0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810eed2:	2300      	movs	r3, #0
 810eed4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810eed6:	68fb      	ldr	r3, [r7, #12]
 810eed8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810eeda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810eedc:	2b00      	cmp	r3, #0
 810eede:	d10b      	bne.n	810eef8 <xQueueGenericSend+0x34>
	__asm volatile
 810eee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eee4:	f383 8811 	msr	BASEPRI, r3
 810eee8:	f3bf 8f6f 	isb	sy
 810eeec:	f3bf 8f4f 	dsb	sy
 810eef0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810eef2:	bf00      	nop
 810eef4:	bf00      	nop
 810eef6:	e7fd      	b.n	810eef4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810eef8:	68bb      	ldr	r3, [r7, #8]
 810eefa:	2b00      	cmp	r3, #0
 810eefc:	d103      	bne.n	810ef06 <xQueueGenericSend+0x42>
 810eefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ef00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810ef02:	2b00      	cmp	r3, #0
 810ef04:	d101      	bne.n	810ef0a <xQueueGenericSend+0x46>
 810ef06:	2301      	movs	r3, #1
 810ef08:	e000      	b.n	810ef0c <xQueueGenericSend+0x48>
 810ef0a:	2300      	movs	r3, #0
 810ef0c:	2b00      	cmp	r3, #0
 810ef0e:	d10b      	bne.n	810ef28 <xQueueGenericSend+0x64>
	__asm volatile
 810ef10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ef14:	f383 8811 	msr	BASEPRI, r3
 810ef18:	f3bf 8f6f 	isb	sy
 810ef1c:	f3bf 8f4f 	dsb	sy
 810ef20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810ef22:	bf00      	nop
 810ef24:	bf00      	nop
 810ef26:	e7fd      	b.n	810ef24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810ef28:	683b      	ldr	r3, [r7, #0]
 810ef2a:	2b02      	cmp	r3, #2
 810ef2c:	d103      	bne.n	810ef36 <xQueueGenericSend+0x72>
 810ef2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ef30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ef32:	2b01      	cmp	r3, #1
 810ef34:	d101      	bne.n	810ef3a <xQueueGenericSend+0x76>
 810ef36:	2301      	movs	r3, #1
 810ef38:	e000      	b.n	810ef3c <xQueueGenericSend+0x78>
 810ef3a:	2300      	movs	r3, #0
 810ef3c:	2b00      	cmp	r3, #0
 810ef3e:	d10b      	bne.n	810ef58 <xQueueGenericSend+0x94>
	__asm volatile
 810ef40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ef44:	f383 8811 	msr	BASEPRI, r3
 810ef48:	f3bf 8f6f 	isb	sy
 810ef4c:	f3bf 8f4f 	dsb	sy
 810ef50:	623b      	str	r3, [r7, #32]
}
 810ef52:	bf00      	nop
 810ef54:	bf00      	nop
 810ef56:	e7fd      	b.n	810ef54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810ef58:	f002 f8f8 	bl	811114c <xTaskGetSchedulerState>
 810ef5c:	4603      	mov	r3, r0
 810ef5e:	2b00      	cmp	r3, #0
 810ef60:	d102      	bne.n	810ef68 <xQueueGenericSend+0xa4>
 810ef62:	687b      	ldr	r3, [r7, #4]
 810ef64:	2b00      	cmp	r3, #0
 810ef66:	d101      	bne.n	810ef6c <xQueueGenericSend+0xa8>
 810ef68:	2301      	movs	r3, #1
 810ef6a:	e000      	b.n	810ef6e <xQueueGenericSend+0xaa>
 810ef6c:	2300      	movs	r3, #0
 810ef6e:	2b00      	cmp	r3, #0
 810ef70:	d10b      	bne.n	810ef8a <xQueueGenericSend+0xc6>
	__asm volatile
 810ef72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ef76:	f383 8811 	msr	BASEPRI, r3
 810ef7a:	f3bf 8f6f 	isb	sy
 810ef7e:	f3bf 8f4f 	dsb	sy
 810ef82:	61fb      	str	r3, [r7, #28]
}
 810ef84:	bf00      	nop
 810ef86:	bf00      	nop
 810ef88:	e7fd      	b.n	810ef86 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810ef8a:	f7ff fc0d 	bl	810e7a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810ef8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ef90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810ef92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ef94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ef96:	429a      	cmp	r2, r3
 810ef98:	d302      	bcc.n	810efa0 <xQueueGenericSend+0xdc>
 810ef9a:	683b      	ldr	r3, [r7, #0]
 810ef9c:	2b02      	cmp	r3, #2
 810ef9e:	d129      	bne.n	810eff4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810efa0:	683a      	ldr	r2, [r7, #0]
 810efa2:	68b9      	ldr	r1, [r7, #8]
 810efa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810efa6:	f000 fc6d 	bl	810f884 <prvCopyDataToQueue>
 810efaa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810efac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810efae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810efb0:	2b00      	cmp	r3, #0
 810efb2:	d010      	beq.n	810efd6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810efb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810efb6:	3324      	adds	r3, #36	@ 0x24
 810efb8:	4618      	mov	r0, r3
 810efba:	f001 fec9 	bl	8110d50 <xTaskRemoveFromEventList>
 810efbe:	4603      	mov	r3, r0
 810efc0:	2b00      	cmp	r3, #0
 810efc2:	d013      	beq.n	810efec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810efc4:	4b3f      	ldr	r3, [pc, #252]	@ (810f0c4 <xQueueGenericSend+0x200>)
 810efc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810efca:	601a      	str	r2, [r3, #0]
 810efcc:	f3bf 8f4f 	dsb	sy
 810efd0:	f3bf 8f6f 	isb	sy
 810efd4:	e00a      	b.n	810efec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810efd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810efd8:	2b00      	cmp	r3, #0
 810efda:	d007      	beq.n	810efec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810efdc:	4b39      	ldr	r3, [pc, #228]	@ (810f0c4 <xQueueGenericSend+0x200>)
 810efde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810efe2:	601a      	str	r2, [r3, #0]
 810efe4:	f3bf 8f4f 	dsb	sy
 810efe8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810efec:	f7ff fc0e 	bl	810e80c <vPortExitCritical>
				return pdPASS;
 810eff0:	2301      	movs	r3, #1
 810eff2:	e063      	b.n	810f0bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810eff4:	687b      	ldr	r3, [r7, #4]
 810eff6:	2b00      	cmp	r3, #0
 810eff8:	d103      	bne.n	810f002 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810effa:	f7ff fc07 	bl	810e80c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810effe:	2300      	movs	r3, #0
 810f000:	e05c      	b.n	810f0bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810f002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f004:	2b00      	cmp	r3, #0
 810f006:	d106      	bne.n	810f016 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810f008:	f107 0314 	add.w	r3, r7, #20
 810f00c:	4618      	mov	r0, r3
 810f00e:	f001 ff2b 	bl	8110e68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810f012:	2301      	movs	r3, #1
 810f014:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810f016:	f7ff fbf9 	bl	810e80c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810f01a:	f001 fc59 	bl	81108d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810f01e:	f7ff fbc3 	bl	810e7a8 <vPortEnterCritical>
 810f022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f024:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810f028:	b25b      	sxtb	r3, r3
 810f02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f02e:	d103      	bne.n	810f038 <xQueueGenericSend+0x174>
 810f030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f032:	2200      	movs	r2, #0
 810f034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810f038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f03a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810f03e:	b25b      	sxtb	r3, r3
 810f040:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f044:	d103      	bne.n	810f04e <xQueueGenericSend+0x18a>
 810f046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f048:	2200      	movs	r2, #0
 810f04a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810f04e:	f7ff fbdd 	bl	810e80c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810f052:	1d3a      	adds	r2, r7, #4
 810f054:	f107 0314 	add.w	r3, r7, #20
 810f058:	4611      	mov	r1, r2
 810f05a:	4618      	mov	r0, r3
 810f05c:	f001 ff1a 	bl	8110e94 <xTaskCheckForTimeOut>
 810f060:	4603      	mov	r3, r0
 810f062:	2b00      	cmp	r3, #0
 810f064:	d124      	bne.n	810f0b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810f066:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810f068:	f000 fd04 	bl	810fa74 <prvIsQueueFull>
 810f06c:	4603      	mov	r3, r0
 810f06e:	2b00      	cmp	r3, #0
 810f070:	d018      	beq.n	810f0a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810f072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f074:	3310      	adds	r3, #16
 810f076:	687a      	ldr	r2, [r7, #4]
 810f078:	4611      	mov	r1, r2
 810f07a:	4618      	mov	r0, r3
 810f07c:	f001 fe16 	bl	8110cac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810f080:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810f082:	f000 fc8f 	bl	810f9a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810f086:	f001 fc31 	bl	81108ec <xTaskResumeAll>
 810f08a:	4603      	mov	r3, r0
 810f08c:	2b00      	cmp	r3, #0
 810f08e:	f47f af7c 	bne.w	810ef8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 810f092:	4b0c      	ldr	r3, [pc, #48]	@ (810f0c4 <xQueueGenericSend+0x200>)
 810f094:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f098:	601a      	str	r2, [r3, #0]
 810f09a:	f3bf 8f4f 	dsb	sy
 810f09e:	f3bf 8f6f 	isb	sy
 810f0a2:	e772      	b.n	810ef8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810f0a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810f0a6:	f000 fc7d 	bl	810f9a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810f0aa:	f001 fc1f 	bl	81108ec <xTaskResumeAll>
 810f0ae:	e76c      	b.n	810ef8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810f0b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810f0b2:	f000 fc77 	bl	810f9a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810f0b6:	f001 fc19 	bl	81108ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810f0ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810f0bc:	4618      	mov	r0, r3
 810f0be:	3738      	adds	r7, #56	@ 0x38
 810f0c0:	46bd      	mov	sp, r7
 810f0c2:	bd80      	pop	{r7, pc}
 810f0c4:	e000ed04 	.word	0xe000ed04

0810f0c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810f0c8:	b580      	push	{r7, lr}
 810f0ca:	b090      	sub	sp, #64	@ 0x40
 810f0cc:	af00      	add	r7, sp, #0
 810f0ce:	60f8      	str	r0, [r7, #12]
 810f0d0:	60b9      	str	r1, [r7, #8]
 810f0d2:	607a      	str	r2, [r7, #4]
 810f0d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810f0d6:	68fb      	ldr	r3, [r7, #12]
 810f0d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810f0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f0dc:	2b00      	cmp	r3, #0
 810f0de:	d10b      	bne.n	810f0f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 810f0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f0e4:	f383 8811 	msr	BASEPRI, r3
 810f0e8:	f3bf 8f6f 	isb	sy
 810f0ec:	f3bf 8f4f 	dsb	sy
 810f0f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810f0f2:	bf00      	nop
 810f0f4:	bf00      	nop
 810f0f6:	e7fd      	b.n	810f0f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810f0f8:	68bb      	ldr	r3, [r7, #8]
 810f0fa:	2b00      	cmp	r3, #0
 810f0fc:	d103      	bne.n	810f106 <xQueueGenericSendFromISR+0x3e>
 810f0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f102:	2b00      	cmp	r3, #0
 810f104:	d101      	bne.n	810f10a <xQueueGenericSendFromISR+0x42>
 810f106:	2301      	movs	r3, #1
 810f108:	e000      	b.n	810f10c <xQueueGenericSendFromISR+0x44>
 810f10a:	2300      	movs	r3, #0
 810f10c:	2b00      	cmp	r3, #0
 810f10e:	d10b      	bne.n	810f128 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 810f110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f114:	f383 8811 	msr	BASEPRI, r3
 810f118:	f3bf 8f6f 	isb	sy
 810f11c:	f3bf 8f4f 	dsb	sy
 810f120:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810f122:	bf00      	nop
 810f124:	bf00      	nop
 810f126:	e7fd      	b.n	810f124 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810f128:	683b      	ldr	r3, [r7, #0]
 810f12a:	2b02      	cmp	r3, #2
 810f12c:	d103      	bne.n	810f136 <xQueueGenericSendFromISR+0x6e>
 810f12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810f132:	2b01      	cmp	r3, #1
 810f134:	d101      	bne.n	810f13a <xQueueGenericSendFromISR+0x72>
 810f136:	2301      	movs	r3, #1
 810f138:	e000      	b.n	810f13c <xQueueGenericSendFromISR+0x74>
 810f13a:	2300      	movs	r3, #0
 810f13c:	2b00      	cmp	r3, #0
 810f13e:	d10b      	bne.n	810f158 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 810f140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f144:	f383 8811 	msr	BASEPRI, r3
 810f148:	f3bf 8f6f 	isb	sy
 810f14c:	f3bf 8f4f 	dsb	sy
 810f150:	623b      	str	r3, [r7, #32]
}
 810f152:	bf00      	nop
 810f154:	bf00      	nop
 810f156:	e7fd      	b.n	810f154 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810f158:	f7ff fc06 	bl	810e968 <vPortValidateInterruptPriority>
	__asm volatile
 810f15c:	f3ef 8211 	mrs	r2, BASEPRI
 810f160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f164:	f383 8811 	msr	BASEPRI, r3
 810f168:	f3bf 8f6f 	isb	sy
 810f16c:	f3bf 8f4f 	dsb	sy
 810f170:	61fa      	str	r2, [r7, #28]
 810f172:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810f174:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810f176:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810f178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f17a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810f17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f17e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810f180:	429a      	cmp	r2, r3
 810f182:	d302      	bcc.n	810f18a <xQueueGenericSendFromISR+0xc2>
 810f184:	683b      	ldr	r3, [r7, #0]
 810f186:	2b02      	cmp	r3, #2
 810f188:	d12f      	bne.n	810f1ea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810f18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f18c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810f190:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810f194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810f198:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810f19a:	683a      	ldr	r2, [r7, #0]
 810f19c:	68b9      	ldr	r1, [r7, #8]
 810f19e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810f1a0:	f000 fb70 	bl	810f884 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810f1a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 810f1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f1ac:	d112      	bne.n	810f1d4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810f1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f1b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f1b2:	2b00      	cmp	r3, #0
 810f1b4:	d016      	beq.n	810f1e4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810f1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f1b8:	3324      	adds	r3, #36	@ 0x24
 810f1ba:	4618      	mov	r0, r3
 810f1bc:	f001 fdc8 	bl	8110d50 <xTaskRemoveFromEventList>
 810f1c0:	4603      	mov	r3, r0
 810f1c2:	2b00      	cmp	r3, #0
 810f1c4:	d00e      	beq.n	810f1e4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810f1c6:	687b      	ldr	r3, [r7, #4]
 810f1c8:	2b00      	cmp	r3, #0
 810f1ca:	d00b      	beq.n	810f1e4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810f1cc:	687b      	ldr	r3, [r7, #4]
 810f1ce:	2201      	movs	r2, #1
 810f1d0:	601a      	str	r2, [r3, #0]
 810f1d2:	e007      	b.n	810f1e4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810f1d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810f1d8:	3301      	adds	r3, #1
 810f1da:	b2db      	uxtb	r3, r3
 810f1dc:	b25a      	sxtb	r2, r3
 810f1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f1e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810f1e4:	2301      	movs	r3, #1
 810f1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 810f1e8:	e001      	b.n	810f1ee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810f1ea:	2300      	movs	r3, #0
 810f1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810f1ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f1f0:	617b      	str	r3, [r7, #20]
	__asm volatile
 810f1f2:	697b      	ldr	r3, [r7, #20]
 810f1f4:	f383 8811 	msr	BASEPRI, r3
}
 810f1f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810f1fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810f1fc:	4618      	mov	r0, r3
 810f1fe:	3740      	adds	r7, #64	@ 0x40
 810f200:	46bd      	mov	sp, r7
 810f202:	bd80      	pop	{r7, pc}

0810f204 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810f204:	b580      	push	{r7, lr}
 810f206:	b08e      	sub	sp, #56	@ 0x38
 810f208:	af00      	add	r7, sp, #0
 810f20a:	6078      	str	r0, [r7, #4]
 810f20c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810f20e:	687b      	ldr	r3, [r7, #4]
 810f210:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 810f212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f214:	2b00      	cmp	r3, #0
 810f216:	d10b      	bne.n	810f230 <xQueueGiveFromISR+0x2c>
	__asm volatile
 810f218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f21c:	f383 8811 	msr	BASEPRI, r3
 810f220:	f3bf 8f6f 	isb	sy
 810f224:	f3bf 8f4f 	dsb	sy
 810f228:	623b      	str	r3, [r7, #32]
}
 810f22a:	bf00      	nop
 810f22c:	bf00      	nop
 810f22e:	e7fd      	b.n	810f22c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810f230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f234:	2b00      	cmp	r3, #0
 810f236:	d00b      	beq.n	810f250 <xQueueGiveFromISR+0x4c>
	__asm volatile
 810f238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f23c:	f383 8811 	msr	BASEPRI, r3
 810f240:	f3bf 8f6f 	isb	sy
 810f244:	f3bf 8f4f 	dsb	sy
 810f248:	61fb      	str	r3, [r7, #28]
}
 810f24a:	bf00      	nop
 810f24c:	bf00      	nop
 810f24e:	e7fd      	b.n	810f24c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 810f250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f252:	681b      	ldr	r3, [r3, #0]
 810f254:	2b00      	cmp	r3, #0
 810f256:	d103      	bne.n	810f260 <xQueueGiveFromISR+0x5c>
 810f258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f25a:	689b      	ldr	r3, [r3, #8]
 810f25c:	2b00      	cmp	r3, #0
 810f25e:	d101      	bne.n	810f264 <xQueueGiveFromISR+0x60>
 810f260:	2301      	movs	r3, #1
 810f262:	e000      	b.n	810f266 <xQueueGiveFromISR+0x62>
 810f264:	2300      	movs	r3, #0
 810f266:	2b00      	cmp	r3, #0
 810f268:	d10b      	bne.n	810f282 <xQueueGiveFromISR+0x7e>
	__asm volatile
 810f26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f26e:	f383 8811 	msr	BASEPRI, r3
 810f272:	f3bf 8f6f 	isb	sy
 810f276:	f3bf 8f4f 	dsb	sy
 810f27a:	61bb      	str	r3, [r7, #24]
}
 810f27c:	bf00      	nop
 810f27e:	bf00      	nop
 810f280:	e7fd      	b.n	810f27e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810f282:	f7ff fb71 	bl	810e968 <vPortValidateInterruptPriority>
	__asm volatile
 810f286:	f3ef 8211 	mrs	r2, BASEPRI
 810f28a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f28e:	f383 8811 	msr	BASEPRI, r3
 810f292:	f3bf 8f6f 	isb	sy
 810f296:	f3bf 8f4f 	dsb	sy
 810f29a:	617a      	str	r2, [r7, #20]
 810f29c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 810f29e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810f2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810f2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f2a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810f2a6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 810f2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f2aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810f2ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810f2ae:	429a      	cmp	r2, r3
 810f2b0:	d22b      	bcs.n	810f30a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810f2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f2b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810f2b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810f2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f2be:	1c5a      	adds	r2, r3, #1
 810f2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f2c2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810f2c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 810f2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f2cc:	d112      	bne.n	810f2f4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810f2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f2d2:	2b00      	cmp	r3, #0
 810f2d4:	d016      	beq.n	810f304 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810f2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f2d8:	3324      	adds	r3, #36	@ 0x24
 810f2da:	4618      	mov	r0, r3
 810f2dc:	f001 fd38 	bl	8110d50 <xTaskRemoveFromEventList>
 810f2e0:	4603      	mov	r3, r0
 810f2e2:	2b00      	cmp	r3, #0
 810f2e4:	d00e      	beq.n	810f304 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810f2e6:	683b      	ldr	r3, [r7, #0]
 810f2e8:	2b00      	cmp	r3, #0
 810f2ea:	d00b      	beq.n	810f304 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810f2ec:	683b      	ldr	r3, [r7, #0]
 810f2ee:	2201      	movs	r2, #1
 810f2f0:	601a      	str	r2, [r3, #0]
 810f2f2:	e007      	b.n	810f304 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810f2f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810f2f8:	3301      	adds	r3, #1
 810f2fa:	b2db      	uxtb	r3, r3
 810f2fc:	b25a      	sxtb	r2, r3
 810f2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810f304:	2301      	movs	r3, #1
 810f306:	637b      	str	r3, [r7, #52]	@ 0x34
 810f308:	e001      	b.n	810f30e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810f30a:	2300      	movs	r3, #0
 810f30c:	637b      	str	r3, [r7, #52]	@ 0x34
 810f30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f310:	60fb      	str	r3, [r7, #12]
	__asm volatile
 810f312:	68fb      	ldr	r3, [r7, #12]
 810f314:	f383 8811 	msr	BASEPRI, r3
}
 810f318:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810f31a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 810f31c:	4618      	mov	r0, r3
 810f31e:	3738      	adds	r7, #56	@ 0x38
 810f320:	46bd      	mov	sp, r7
 810f322:	bd80      	pop	{r7, pc}

0810f324 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810f324:	b580      	push	{r7, lr}
 810f326:	b08c      	sub	sp, #48	@ 0x30
 810f328:	af00      	add	r7, sp, #0
 810f32a:	60f8      	str	r0, [r7, #12]
 810f32c:	60b9      	str	r1, [r7, #8]
 810f32e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810f330:	2300      	movs	r3, #0
 810f332:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810f334:	68fb      	ldr	r3, [r7, #12]
 810f336:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810f338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f33a:	2b00      	cmp	r3, #0
 810f33c:	d10b      	bne.n	810f356 <xQueueReceive+0x32>
	__asm volatile
 810f33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f342:	f383 8811 	msr	BASEPRI, r3
 810f346:	f3bf 8f6f 	isb	sy
 810f34a:	f3bf 8f4f 	dsb	sy
 810f34e:	623b      	str	r3, [r7, #32]
}
 810f350:	bf00      	nop
 810f352:	bf00      	nop
 810f354:	e7fd      	b.n	810f352 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810f356:	68bb      	ldr	r3, [r7, #8]
 810f358:	2b00      	cmp	r3, #0
 810f35a:	d103      	bne.n	810f364 <xQueueReceive+0x40>
 810f35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f35e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f360:	2b00      	cmp	r3, #0
 810f362:	d101      	bne.n	810f368 <xQueueReceive+0x44>
 810f364:	2301      	movs	r3, #1
 810f366:	e000      	b.n	810f36a <xQueueReceive+0x46>
 810f368:	2300      	movs	r3, #0
 810f36a:	2b00      	cmp	r3, #0
 810f36c:	d10b      	bne.n	810f386 <xQueueReceive+0x62>
	__asm volatile
 810f36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f372:	f383 8811 	msr	BASEPRI, r3
 810f376:	f3bf 8f6f 	isb	sy
 810f37a:	f3bf 8f4f 	dsb	sy
 810f37e:	61fb      	str	r3, [r7, #28]
}
 810f380:	bf00      	nop
 810f382:	bf00      	nop
 810f384:	e7fd      	b.n	810f382 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810f386:	f001 fee1 	bl	811114c <xTaskGetSchedulerState>
 810f38a:	4603      	mov	r3, r0
 810f38c:	2b00      	cmp	r3, #0
 810f38e:	d102      	bne.n	810f396 <xQueueReceive+0x72>
 810f390:	687b      	ldr	r3, [r7, #4]
 810f392:	2b00      	cmp	r3, #0
 810f394:	d101      	bne.n	810f39a <xQueueReceive+0x76>
 810f396:	2301      	movs	r3, #1
 810f398:	e000      	b.n	810f39c <xQueueReceive+0x78>
 810f39a:	2300      	movs	r3, #0
 810f39c:	2b00      	cmp	r3, #0
 810f39e:	d10b      	bne.n	810f3b8 <xQueueReceive+0x94>
	__asm volatile
 810f3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f3a4:	f383 8811 	msr	BASEPRI, r3
 810f3a8:	f3bf 8f6f 	isb	sy
 810f3ac:	f3bf 8f4f 	dsb	sy
 810f3b0:	61bb      	str	r3, [r7, #24]
}
 810f3b2:	bf00      	nop
 810f3b4:	bf00      	nop
 810f3b6:	e7fd      	b.n	810f3b4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810f3b8:	f7ff f9f6 	bl	810e7a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810f3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f3be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810f3c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810f3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f3c4:	2b00      	cmp	r3, #0
 810f3c6:	d01f      	beq.n	810f408 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810f3c8:	68b9      	ldr	r1, [r7, #8]
 810f3ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f3cc:	f000 fac4 	bl	810f958 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810f3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f3d2:	1e5a      	subs	r2, r3, #1
 810f3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f3d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810f3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f3da:	691b      	ldr	r3, [r3, #16]
 810f3dc:	2b00      	cmp	r3, #0
 810f3de:	d00f      	beq.n	810f400 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810f3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f3e2:	3310      	adds	r3, #16
 810f3e4:	4618      	mov	r0, r3
 810f3e6:	f001 fcb3 	bl	8110d50 <xTaskRemoveFromEventList>
 810f3ea:	4603      	mov	r3, r0
 810f3ec:	2b00      	cmp	r3, #0
 810f3ee:	d007      	beq.n	810f400 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810f3f0:	4b3c      	ldr	r3, [pc, #240]	@ (810f4e4 <xQueueReceive+0x1c0>)
 810f3f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f3f6:	601a      	str	r2, [r3, #0]
 810f3f8:	f3bf 8f4f 	dsb	sy
 810f3fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810f400:	f7ff fa04 	bl	810e80c <vPortExitCritical>
				return pdPASS;
 810f404:	2301      	movs	r3, #1
 810f406:	e069      	b.n	810f4dc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810f408:	687b      	ldr	r3, [r7, #4]
 810f40a:	2b00      	cmp	r3, #0
 810f40c:	d103      	bne.n	810f416 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810f40e:	f7ff f9fd 	bl	810e80c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810f412:	2300      	movs	r3, #0
 810f414:	e062      	b.n	810f4dc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810f416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f418:	2b00      	cmp	r3, #0
 810f41a:	d106      	bne.n	810f42a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810f41c:	f107 0310 	add.w	r3, r7, #16
 810f420:	4618      	mov	r0, r3
 810f422:	f001 fd21 	bl	8110e68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810f426:	2301      	movs	r3, #1
 810f428:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810f42a:	f7ff f9ef 	bl	810e80c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810f42e:	f001 fa4f 	bl	81108d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810f432:	f7ff f9b9 	bl	810e7a8 <vPortEnterCritical>
 810f436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f438:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810f43c:	b25b      	sxtb	r3, r3
 810f43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f442:	d103      	bne.n	810f44c <xQueueReceive+0x128>
 810f444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f446:	2200      	movs	r2, #0
 810f448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810f44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f44e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810f452:	b25b      	sxtb	r3, r3
 810f454:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f458:	d103      	bne.n	810f462 <xQueueReceive+0x13e>
 810f45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f45c:	2200      	movs	r2, #0
 810f45e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810f462:	f7ff f9d3 	bl	810e80c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810f466:	1d3a      	adds	r2, r7, #4
 810f468:	f107 0310 	add.w	r3, r7, #16
 810f46c:	4611      	mov	r1, r2
 810f46e:	4618      	mov	r0, r3
 810f470:	f001 fd10 	bl	8110e94 <xTaskCheckForTimeOut>
 810f474:	4603      	mov	r3, r0
 810f476:	2b00      	cmp	r3, #0
 810f478:	d123      	bne.n	810f4c2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810f47a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f47c:	f000 fae4 	bl	810fa48 <prvIsQueueEmpty>
 810f480:	4603      	mov	r3, r0
 810f482:	2b00      	cmp	r3, #0
 810f484:	d017      	beq.n	810f4b6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810f486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f488:	3324      	adds	r3, #36	@ 0x24
 810f48a:	687a      	ldr	r2, [r7, #4]
 810f48c:	4611      	mov	r1, r2
 810f48e:	4618      	mov	r0, r3
 810f490:	f001 fc0c 	bl	8110cac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810f494:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f496:	f000 fa85 	bl	810f9a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810f49a:	f001 fa27 	bl	81108ec <xTaskResumeAll>
 810f49e:	4603      	mov	r3, r0
 810f4a0:	2b00      	cmp	r3, #0
 810f4a2:	d189      	bne.n	810f3b8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 810f4a4:	4b0f      	ldr	r3, [pc, #60]	@ (810f4e4 <xQueueReceive+0x1c0>)
 810f4a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f4aa:	601a      	str	r2, [r3, #0]
 810f4ac:	f3bf 8f4f 	dsb	sy
 810f4b0:	f3bf 8f6f 	isb	sy
 810f4b4:	e780      	b.n	810f3b8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810f4b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f4b8:	f000 fa74 	bl	810f9a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810f4bc:	f001 fa16 	bl	81108ec <xTaskResumeAll>
 810f4c0:	e77a      	b.n	810f3b8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810f4c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f4c4:	f000 fa6e 	bl	810f9a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810f4c8:	f001 fa10 	bl	81108ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810f4cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810f4ce:	f000 fabb 	bl	810fa48 <prvIsQueueEmpty>
 810f4d2:	4603      	mov	r3, r0
 810f4d4:	2b00      	cmp	r3, #0
 810f4d6:	f43f af6f 	beq.w	810f3b8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810f4da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810f4dc:	4618      	mov	r0, r3
 810f4de:	3730      	adds	r7, #48	@ 0x30
 810f4e0:	46bd      	mov	sp, r7
 810f4e2:	bd80      	pop	{r7, pc}
 810f4e4:	e000ed04 	.word	0xe000ed04

0810f4e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 810f4e8:	b580      	push	{r7, lr}
 810f4ea:	b08e      	sub	sp, #56	@ 0x38
 810f4ec:	af00      	add	r7, sp, #0
 810f4ee:	6078      	str	r0, [r7, #4]
 810f4f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 810f4f2:	2300      	movs	r3, #0
 810f4f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810f4f6:	687b      	ldr	r3, [r7, #4]
 810f4f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 810f4fa:	2300      	movs	r3, #0
 810f4fc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810f4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f500:	2b00      	cmp	r3, #0
 810f502:	d10b      	bne.n	810f51c <xQueueSemaphoreTake+0x34>
	__asm volatile
 810f504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f508:	f383 8811 	msr	BASEPRI, r3
 810f50c:	f3bf 8f6f 	isb	sy
 810f510:	f3bf 8f4f 	dsb	sy
 810f514:	623b      	str	r3, [r7, #32]
}
 810f516:	bf00      	nop
 810f518:	bf00      	nop
 810f51a:	e7fd      	b.n	810f518 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810f51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f51e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f520:	2b00      	cmp	r3, #0
 810f522:	d00b      	beq.n	810f53c <xQueueSemaphoreTake+0x54>
	__asm volatile
 810f524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f528:	f383 8811 	msr	BASEPRI, r3
 810f52c:	f3bf 8f6f 	isb	sy
 810f530:	f3bf 8f4f 	dsb	sy
 810f534:	61fb      	str	r3, [r7, #28]
}
 810f536:	bf00      	nop
 810f538:	bf00      	nop
 810f53a:	e7fd      	b.n	810f538 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810f53c:	f001 fe06 	bl	811114c <xTaskGetSchedulerState>
 810f540:	4603      	mov	r3, r0
 810f542:	2b00      	cmp	r3, #0
 810f544:	d102      	bne.n	810f54c <xQueueSemaphoreTake+0x64>
 810f546:	683b      	ldr	r3, [r7, #0]
 810f548:	2b00      	cmp	r3, #0
 810f54a:	d101      	bne.n	810f550 <xQueueSemaphoreTake+0x68>
 810f54c:	2301      	movs	r3, #1
 810f54e:	e000      	b.n	810f552 <xQueueSemaphoreTake+0x6a>
 810f550:	2300      	movs	r3, #0
 810f552:	2b00      	cmp	r3, #0
 810f554:	d10b      	bne.n	810f56e <xQueueSemaphoreTake+0x86>
	__asm volatile
 810f556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f55a:	f383 8811 	msr	BASEPRI, r3
 810f55e:	f3bf 8f6f 	isb	sy
 810f562:	f3bf 8f4f 	dsb	sy
 810f566:	61bb      	str	r3, [r7, #24]
}
 810f568:	bf00      	nop
 810f56a:	bf00      	nop
 810f56c:	e7fd      	b.n	810f56a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810f56e:	f7ff f91b 	bl	810e7a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 810f572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810f576:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 810f578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f57a:	2b00      	cmp	r3, #0
 810f57c:	d024      	beq.n	810f5c8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 810f57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f580:	1e5a      	subs	r2, r3, #1
 810f582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f584:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810f586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f588:	681b      	ldr	r3, [r3, #0]
 810f58a:	2b00      	cmp	r3, #0
 810f58c:	d104      	bne.n	810f598 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 810f58e:	f001 ff57 	bl	8111440 <pvTaskIncrementMutexHeldCount>
 810f592:	4602      	mov	r2, r0
 810f594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f596:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810f598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f59a:	691b      	ldr	r3, [r3, #16]
 810f59c:	2b00      	cmp	r3, #0
 810f59e:	d00f      	beq.n	810f5c0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810f5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f5a2:	3310      	adds	r3, #16
 810f5a4:	4618      	mov	r0, r3
 810f5a6:	f001 fbd3 	bl	8110d50 <xTaskRemoveFromEventList>
 810f5aa:	4603      	mov	r3, r0
 810f5ac:	2b00      	cmp	r3, #0
 810f5ae:	d007      	beq.n	810f5c0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810f5b0:	4b54      	ldr	r3, [pc, #336]	@ (810f704 <xQueueSemaphoreTake+0x21c>)
 810f5b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f5b6:	601a      	str	r2, [r3, #0]
 810f5b8:	f3bf 8f4f 	dsb	sy
 810f5bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810f5c0:	f7ff f924 	bl	810e80c <vPortExitCritical>
				return pdPASS;
 810f5c4:	2301      	movs	r3, #1
 810f5c6:	e098      	b.n	810f6fa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810f5c8:	683b      	ldr	r3, [r7, #0]
 810f5ca:	2b00      	cmp	r3, #0
 810f5cc:	d112      	bne.n	810f5f4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 810f5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f5d0:	2b00      	cmp	r3, #0
 810f5d2:	d00b      	beq.n	810f5ec <xQueueSemaphoreTake+0x104>
	__asm volatile
 810f5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f5d8:	f383 8811 	msr	BASEPRI, r3
 810f5dc:	f3bf 8f6f 	isb	sy
 810f5e0:	f3bf 8f4f 	dsb	sy
 810f5e4:	617b      	str	r3, [r7, #20]
}
 810f5e6:	bf00      	nop
 810f5e8:	bf00      	nop
 810f5ea:	e7fd      	b.n	810f5e8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 810f5ec:	f7ff f90e 	bl	810e80c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810f5f0:	2300      	movs	r3, #0
 810f5f2:	e082      	b.n	810f6fa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 810f5f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f5f6:	2b00      	cmp	r3, #0
 810f5f8:	d106      	bne.n	810f608 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810f5fa:	f107 030c 	add.w	r3, r7, #12
 810f5fe:	4618      	mov	r0, r3
 810f600:	f001 fc32 	bl	8110e68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810f604:	2301      	movs	r3, #1
 810f606:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810f608:	f7ff f900 	bl	810e80c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 810f60c:	f001 f960 	bl	81108d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810f610:	f7ff f8ca 	bl	810e7a8 <vPortEnterCritical>
 810f614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f616:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810f61a:	b25b      	sxtb	r3, r3
 810f61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f620:	d103      	bne.n	810f62a <xQueueSemaphoreTake+0x142>
 810f622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f624:	2200      	movs	r2, #0
 810f626:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810f62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f62c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810f630:	b25b      	sxtb	r3, r3
 810f632:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f636:	d103      	bne.n	810f640 <xQueueSemaphoreTake+0x158>
 810f638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f63a:	2200      	movs	r2, #0
 810f63c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810f640:	f7ff f8e4 	bl	810e80c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810f644:	463a      	mov	r2, r7
 810f646:	f107 030c 	add.w	r3, r7, #12
 810f64a:	4611      	mov	r1, r2
 810f64c:	4618      	mov	r0, r3
 810f64e:	f001 fc21 	bl	8110e94 <xTaskCheckForTimeOut>
 810f652:	4603      	mov	r3, r0
 810f654:	2b00      	cmp	r3, #0
 810f656:	d132      	bne.n	810f6be <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810f658:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810f65a:	f000 f9f5 	bl	810fa48 <prvIsQueueEmpty>
 810f65e:	4603      	mov	r3, r0
 810f660:	2b00      	cmp	r3, #0
 810f662:	d026      	beq.n	810f6b2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810f664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f666:	681b      	ldr	r3, [r3, #0]
 810f668:	2b00      	cmp	r3, #0
 810f66a:	d109      	bne.n	810f680 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 810f66c:	f7ff f89c 	bl	810e7a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 810f670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f672:	689b      	ldr	r3, [r3, #8]
 810f674:	4618      	mov	r0, r3
 810f676:	f001 fd87 	bl	8111188 <xTaskPriorityInherit>
 810f67a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 810f67c:	f7ff f8c6 	bl	810e80c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810f680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f682:	3324      	adds	r3, #36	@ 0x24
 810f684:	683a      	ldr	r2, [r7, #0]
 810f686:	4611      	mov	r1, r2
 810f688:	4618      	mov	r0, r3
 810f68a:	f001 fb0f 	bl	8110cac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810f68e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810f690:	f000 f988 	bl	810f9a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810f694:	f001 f92a 	bl	81108ec <xTaskResumeAll>
 810f698:	4603      	mov	r3, r0
 810f69a:	2b00      	cmp	r3, #0
 810f69c:	f47f af67 	bne.w	810f56e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 810f6a0:	4b18      	ldr	r3, [pc, #96]	@ (810f704 <xQueueSemaphoreTake+0x21c>)
 810f6a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f6a6:	601a      	str	r2, [r3, #0]
 810f6a8:	f3bf 8f4f 	dsb	sy
 810f6ac:	f3bf 8f6f 	isb	sy
 810f6b0:	e75d      	b.n	810f56e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 810f6b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810f6b4:	f000 f976 	bl	810f9a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810f6b8:	f001 f918 	bl	81108ec <xTaskResumeAll>
 810f6bc:	e757      	b.n	810f56e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 810f6be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810f6c0:	f000 f970 	bl	810f9a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810f6c4:	f001 f912 	bl	81108ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810f6c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810f6ca:	f000 f9bd 	bl	810fa48 <prvIsQueueEmpty>
 810f6ce:	4603      	mov	r3, r0
 810f6d0:	2b00      	cmp	r3, #0
 810f6d2:	f43f af4c 	beq.w	810f56e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 810f6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f6d8:	2b00      	cmp	r3, #0
 810f6da:	d00d      	beq.n	810f6f8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 810f6dc:	f7ff f864 	bl	810e7a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 810f6e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810f6e2:	f000 f8b7 	bl	810f854 <prvGetDisinheritPriorityAfterTimeout>
 810f6e6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 810f6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f6ea:	689b      	ldr	r3, [r3, #8]
 810f6ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810f6ee:	4618      	mov	r0, r3
 810f6f0:	f001 fe22 	bl	8111338 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 810f6f4:	f7ff f88a 	bl	810e80c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810f6f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810f6fa:	4618      	mov	r0, r3
 810f6fc:	3738      	adds	r7, #56	@ 0x38
 810f6fe:	46bd      	mov	sp, r7
 810f700:	bd80      	pop	{r7, pc}
 810f702:	bf00      	nop
 810f704:	e000ed04 	.word	0xe000ed04

0810f708 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810f708:	b580      	push	{r7, lr}
 810f70a:	b08e      	sub	sp, #56	@ 0x38
 810f70c:	af00      	add	r7, sp, #0
 810f70e:	60f8      	str	r0, [r7, #12]
 810f710:	60b9      	str	r1, [r7, #8]
 810f712:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810f714:	68fb      	ldr	r3, [r7, #12]
 810f716:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810f718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f71a:	2b00      	cmp	r3, #0
 810f71c:	d10b      	bne.n	810f736 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 810f71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f722:	f383 8811 	msr	BASEPRI, r3
 810f726:	f3bf 8f6f 	isb	sy
 810f72a:	f3bf 8f4f 	dsb	sy
 810f72e:	623b      	str	r3, [r7, #32]
}
 810f730:	bf00      	nop
 810f732:	bf00      	nop
 810f734:	e7fd      	b.n	810f732 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810f736:	68bb      	ldr	r3, [r7, #8]
 810f738:	2b00      	cmp	r3, #0
 810f73a:	d103      	bne.n	810f744 <xQueueReceiveFromISR+0x3c>
 810f73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f73e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f740:	2b00      	cmp	r3, #0
 810f742:	d101      	bne.n	810f748 <xQueueReceiveFromISR+0x40>
 810f744:	2301      	movs	r3, #1
 810f746:	e000      	b.n	810f74a <xQueueReceiveFromISR+0x42>
 810f748:	2300      	movs	r3, #0
 810f74a:	2b00      	cmp	r3, #0
 810f74c:	d10b      	bne.n	810f766 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 810f74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f752:	f383 8811 	msr	BASEPRI, r3
 810f756:	f3bf 8f6f 	isb	sy
 810f75a:	f3bf 8f4f 	dsb	sy
 810f75e:	61fb      	str	r3, [r7, #28]
}
 810f760:	bf00      	nop
 810f762:	bf00      	nop
 810f764:	e7fd      	b.n	810f762 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810f766:	f7ff f8ff 	bl	810e968 <vPortValidateInterruptPriority>
	__asm volatile
 810f76a:	f3ef 8211 	mrs	r2, BASEPRI
 810f76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f772:	f383 8811 	msr	BASEPRI, r3
 810f776:	f3bf 8f6f 	isb	sy
 810f77a:	f3bf 8f4f 	dsb	sy
 810f77e:	61ba      	str	r2, [r7, #24]
 810f780:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 810f782:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810f784:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810f786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810f78a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810f78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f78e:	2b00      	cmp	r3, #0
 810f790:	d02f      	beq.n	810f7f2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 810f792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f794:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810f798:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 810f79c:	68b9      	ldr	r1, [r7, #8]
 810f79e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810f7a0:	f000 f8da 	bl	810f958 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810f7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f7a6:	1e5a      	subs	r2, r3, #1
 810f7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f7aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 810f7ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 810f7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f7b4:	d112      	bne.n	810f7dc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810f7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f7b8:	691b      	ldr	r3, [r3, #16]
 810f7ba:	2b00      	cmp	r3, #0
 810f7bc:	d016      	beq.n	810f7ec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810f7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f7c0:	3310      	adds	r3, #16
 810f7c2:	4618      	mov	r0, r3
 810f7c4:	f001 fac4 	bl	8110d50 <xTaskRemoveFromEventList>
 810f7c8:	4603      	mov	r3, r0
 810f7ca:	2b00      	cmp	r3, #0
 810f7cc:	d00e      	beq.n	810f7ec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 810f7ce:	687b      	ldr	r3, [r7, #4]
 810f7d0:	2b00      	cmp	r3, #0
 810f7d2:	d00b      	beq.n	810f7ec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 810f7d4:	687b      	ldr	r3, [r7, #4]
 810f7d6:	2201      	movs	r2, #1
 810f7d8:	601a      	str	r2, [r3, #0]
 810f7da:	e007      	b.n	810f7ec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 810f7dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810f7e0:	3301      	adds	r3, #1
 810f7e2:	b2db      	uxtb	r3, r3
 810f7e4:	b25a      	sxtb	r2, r3
 810f7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f7e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 810f7ec:	2301      	movs	r3, #1
 810f7ee:	637b      	str	r3, [r7, #52]	@ 0x34
 810f7f0:	e001      	b.n	810f7f6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 810f7f2:	2300      	movs	r3, #0
 810f7f4:	637b      	str	r3, [r7, #52]	@ 0x34
 810f7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f7f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 810f7fa:	693b      	ldr	r3, [r7, #16]
 810f7fc:	f383 8811 	msr	BASEPRI, r3
}
 810f800:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810f802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 810f804:	4618      	mov	r0, r3
 810f806:	3738      	adds	r7, #56	@ 0x38
 810f808:	46bd      	mov	sp, r7
 810f80a:	bd80      	pop	{r7, pc}

0810f80c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 810f80c:	b580      	push	{r7, lr}
 810f80e:	b084      	sub	sp, #16
 810f810:	af00      	add	r7, sp, #0
 810f812:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 810f814:	687b      	ldr	r3, [r7, #4]
 810f816:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810f818:	68fb      	ldr	r3, [r7, #12]
 810f81a:	2b00      	cmp	r3, #0
 810f81c:	d10b      	bne.n	810f836 <vQueueDelete+0x2a>
	__asm volatile
 810f81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f822:	f383 8811 	msr	BASEPRI, r3
 810f826:	f3bf 8f6f 	isb	sy
 810f82a:	f3bf 8f4f 	dsb	sy
 810f82e:	60bb      	str	r3, [r7, #8]
}
 810f830:	bf00      	nop
 810f832:	bf00      	nop
 810f834:	e7fd      	b.n	810f832 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 810f836:	68f8      	ldr	r0, [r7, #12]
 810f838:	f000 f95e 	bl	810faf8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 810f83c:	68fb      	ldr	r3, [r7, #12]
 810f83e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 810f842:	2b00      	cmp	r3, #0
 810f844:	d102      	bne.n	810f84c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 810f846:	68f8      	ldr	r0, [r7, #12]
 810f848:	f7fe fca8 	bl	810e19c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 810f84c:	bf00      	nop
 810f84e:	3710      	adds	r7, #16
 810f850:	46bd      	mov	sp, r7
 810f852:	bd80      	pop	{r7, pc}

0810f854 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 810f854:	b480      	push	{r7}
 810f856:	b085      	sub	sp, #20
 810f858:	af00      	add	r7, sp, #0
 810f85a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 810f85c:	687b      	ldr	r3, [r7, #4]
 810f85e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f860:	2b00      	cmp	r3, #0
 810f862:	d006      	beq.n	810f872 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 810f864:	687b      	ldr	r3, [r7, #4]
 810f866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810f868:	681b      	ldr	r3, [r3, #0]
 810f86a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 810f86e:	60fb      	str	r3, [r7, #12]
 810f870:	e001      	b.n	810f876 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 810f872:	2300      	movs	r3, #0
 810f874:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 810f876:	68fb      	ldr	r3, [r7, #12]
	}
 810f878:	4618      	mov	r0, r3
 810f87a:	3714      	adds	r7, #20
 810f87c:	46bd      	mov	sp, r7
 810f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f882:	4770      	bx	lr

0810f884 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810f884:	b580      	push	{r7, lr}
 810f886:	b086      	sub	sp, #24
 810f888:	af00      	add	r7, sp, #0
 810f88a:	60f8      	str	r0, [r7, #12]
 810f88c:	60b9      	str	r1, [r7, #8]
 810f88e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810f890:	2300      	movs	r3, #0
 810f892:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810f894:	68fb      	ldr	r3, [r7, #12]
 810f896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810f898:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810f89a:	68fb      	ldr	r3, [r7, #12]
 810f89c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f89e:	2b00      	cmp	r3, #0
 810f8a0:	d10d      	bne.n	810f8be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810f8a2:	68fb      	ldr	r3, [r7, #12]
 810f8a4:	681b      	ldr	r3, [r3, #0]
 810f8a6:	2b00      	cmp	r3, #0
 810f8a8:	d14d      	bne.n	810f946 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810f8aa:	68fb      	ldr	r3, [r7, #12]
 810f8ac:	689b      	ldr	r3, [r3, #8]
 810f8ae:	4618      	mov	r0, r3
 810f8b0:	f001 fcd2 	bl	8111258 <xTaskPriorityDisinherit>
 810f8b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810f8b6:	68fb      	ldr	r3, [r7, #12]
 810f8b8:	2200      	movs	r2, #0
 810f8ba:	609a      	str	r2, [r3, #8]
 810f8bc:	e043      	b.n	810f946 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810f8be:	687b      	ldr	r3, [r7, #4]
 810f8c0:	2b00      	cmp	r3, #0
 810f8c2:	d119      	bne.n	810f8f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810f8c4:	68fb      	ldr	r3, [r7, #12]
 810f8c6:	6858      	ldr	r0, [r3, #4]
 810f8c8:	68fb      	ldr	r3, [r7, #12]
 810f8ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f8cc:	461a      	mov	r2, r3
 810f8ce:	68b9      	ldr	r1, [r7, #8]
 810f8d0:	f00e fd13 	bl	811e2fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810f8d4:	68fb      	ldr	r3, [r7, #12]
 810f8d6:	685a      	ldr	r2, [r3, #4]
 810f8d8:	68fb      	ldr	r3, [r7, #12]
 810f8da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f8dc:	441a      	add	r2, r3
 810f8de:	68fb      	ldr	r3, [r7, #12]
 810f8e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810f8e2:	68fb      	ldr	r3, [r7, #12]
 810f8e4:	685a      	ldr	r2, [r3, #4]
 810f8e6:	68fb      	ldr	r3, [r7, #12]
 810f8e8:	689b      	ldr	r3, [r3, #8]
 810f8ea:	429a      	cmp	r2, r3
 810f8ec:	d32b      	bcc.n	810f946 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810f8ee:	68fb      	ldr	r3, [r7, #12]
 810f8f0:	681a      	ldr	r2, [r3, #0]
 810f8f2:	68fb      	ldr	r3, [r7, #12]
 810f8f4:	605a      	str	r2, [r3, #4]
 810f8f6:	e026      	b.n	810f946 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810f8f8:	68fb      	ldr	r3, [r7, #12]
 810f8fa:	68d8      	ldr	r0, [r3, #12]
 810f8fc:	68fb      	ldr	r3, [r7, #12]
 810f8fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f900:	461a      	mov	r2, r3
 810f902:	68b9      	ldr	r1, [r7, #8]
 810f904:	f00e fcf9 	bl	811e2fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810f908:	68fb      	ldr	r3, [r7, #12]
 810f90a:	68da      	ldr	r2, [r3, #12]
 810f90c:	68fb      	ldr	r3, [r7, #12]
 810f90e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f910:	425b      	negs	r3, r3
 810f912:	441a      	add	r2, r3
 810f914:	68fb      	ldr	r3, [r7, #12]
 810f916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810f918:	68fb      	ldr	r3, [r7, #12]
 810f91a:	68da      	ldr	r2, [r3, #12]
 810f91c:	68fb      	ldr	r3, [r7, #12]
 810f91e:	681b      	ldr	r3, [r3, #0]
 810f920:	429a      	cmp	r2, r3
 810f922:	d207      	bcs.n	810f934 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810f924:	68fb      	ldr	r3, [r7, #12]
 810f926:	689a      	ldr	r2, [r3, #8]
 810f928:	68fb      	ldr	r3, [r7, #12]
 810f92a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f92c:	425b      	negs	r3, r3
 810f92e:	441a      	add	r2, r3
 810f930:	68fb      	ldr	r3, [r7, #12]
 810f932:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810f934:	687b      	ldr	r3, [r7, #4]
 810f936:	2b02      	cmp	r3, #2
 810f938:	d105      	bne.n	810f946 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810f93a:	693b      	ldr	r3, [r7, #16]
 810f93c:	2b00      	cmp	r3, #0
 810f93e:	d002      	beq.n	810f946 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810f940:	693b      	ldr	r3, [r7, #16]
 810f942:	3b01      	subs	r3, #1
 810f944:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810f946:	693b      	ldr	r3, [r7, #16]
 810f948:	1c5a      	adds	r2, r3, #1
 810f94a:	68fb      	ldr	r3, [r7, #12]
 810f94c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 810f94e:	697b      	ldr	r3, [r7, #20]
}
 810f950:	4618      	mov	r0, r3
 810f952:	3718      	adds	r7, #24
 810f954:	46bd      	mov	sp, r7
 810f956:	bd80      	pop	{r7, pc}

0810f958 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810f958:	b580      	push	{r7, lr}
 810f95a:	b082      	sub	sp, #8
 810f95c:	af00      	add	r7, sp, #0
 810f95e:	6078      	str	r0, [r7, #4]
 810f960:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810f962:	687b      	ldr	r3, [r7, #4]
 810f964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f966:	2b00      	cmp	r3, #0
 810f968:	d018      	beq.n	810f99c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810f96a:	687b      	ldr	r3, [r7, #4]
 810f96c:	68da      	ldr	r2, [r3, #12]
 810f96e:	687b      	ldr	r3, [r7, #4]
 810f970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f972:	441a      	add	r2, r3
 810f974:	687b      	ldr	r3, [r7, #4]
 810f976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810f978:	687b      	ldr	r3, [r7, #4]
 810f97a:	68da      	ldr	r2, [r3, #12]
 810f97c:	687b      	ldr	r3, [r7, #4]
 810f97e:	689b      	ldr	r3, [r3, #8]
 810f980:	429a      	cmp	r2, r3
 810f982:	d303      	bcc.n	810f98c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810f984:	687b      	ldr	r3, [r7, #4]
 810f986:	681a      	ldr	r2, [r3, #0]
 810f988:	687b      	ldr	r3, [r7, #4]
 810f98a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810f98c:	687b      	ldr	r3, [r7, #4]
 810f98e:	68d9      	ldr	r1, [r3, #12]
 810f990:	687b      	ldr	r3, [r7, #4]
 810f992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810f994:	461a      	mov	r2, r3
 810f996:	6838      	ldr	r0, [r7, #0]
 810f998:	f00e fcaf 	bl	811e2fa <memcpy>
	}
}
 810f99c:	bf00      	nop
 810f99e:	3708      	adds	r7, #8
 810f9a0:	46bd      	mov	sp, r7
 810f9a2:	bd80      	pop	{r7, pc}

0810f9a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810f9a4:	b580      	push	{r7, lr}
 810f9a6:	b084      	sub	sp, #16
 810f9a8:	af00      	add	r7, sp, #0
 810f9aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810f9ac:	f7fe fefc 	bl	810e7a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810f9b0:	687b      	ldr	r3, [r7, #4]
 810f9b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810f9b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810f9b8:	e011      	b.n	810f9de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810f9ba:	687b      	ldr	r3, [r7, #4]
 810f9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f9be:	2b00      	cmp	r3, #0
 810f9c0:	d012      	beq.n	810f9e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810f9c2:	687b      	ldr	r3, [r7, #4]
 810f9c4:	3324      	adds	r3, #36	@ 0x24
 810f9c6:	4618      	mov	r0, r3
 810f9c8:	f001 f9c2 	bl	8110d50 <xTaskRemoveFromEventList>
 810f9cc:	4603      	mov	r3, r0
 810f9ce:	2b00      	cmp	r3, #0
 810f9d0:	d001      	beq.n	810f9d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810f9d2:	f001 fac3 	bl	8110f5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810f9d6:	7bfb      	ldrb	r3, [r7, #15]
 810f9d8:	3b01      	subs	r3, #1
 810f9da:	b2db      	uxtb	r3, r3
 810f9dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810f9de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810f9e2:	2b00      	cmp	r3, #0
 810f9e4:	dce9      	bgt.n	810f9ba <prvUnlockQueue+0x16>
 810f9e6:	e000      	b.n	810f9ea <prvUnlockQueue+0x46>
					break;
 810f9e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810f9ea:	687b      	ldr	r3, [r7, #4]
 810f9ec:	22ff      	movs	r2, #255	@ 0xff
 810f9ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 810f9f2:	f7fe ff0b 	bl	810e80c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810f9f6:	f7fe fed7 	bl	810e7a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810f9fa:	687b      	ldr	r3, [r7, #4]
 810f9fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810fa00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810fa02:	e011      	b.n	810fa28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810fa04:	687b      	ldr	r3, [r7, #4]
 810fa06:	691b      	ldr	r3, [r3, #16]
 810fa08:	2b00      	cmp	r3, #0
 810fa0a:	d012      	beq.n	810fa32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810fa0c:	687b      	ldr	r3, [r7, #4]
 810fa0e:	3310      	adds	r3, #16
 810fa10:	4618      	mov	r0, r3
 810fa12:	f001 f99d 	bl	8110d50 <xTaskRemoveFromEventList>
 810fa16:	4603      	mov	r3, r0
 810fa18:	2b00      	cmp	r3, #0
 810fa1a:	d001      	beq.n	810fa20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810fa1c:	f001 fa9e 	bl	8110f5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810fa20:	7bbb      	ldrb	r3, [r7, #14]
 810fa22:	3b01      	subs	r3, #1
 810fa24:	b2db      	uxtb	r3, r3
 810fa26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810fa28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810fa2c:	2b00      	cmp	r3, #0
 810fa2e:	dce9      	bgt.n	810fa04 <prvUnlockQueue+0x60>
 810fa30:	e000      	b.n	810fa34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810fa32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810fa34:	687b      	ldr	r3, [r7, #4]
 810fa36:	22ff      	movs	r2, #255	@ 0xff
 810fa38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 810fa3c:	f7fe fee6 	bl	810e80c <vPortExitCritical>
}
 810fa40:	bf00      	nop
 810fa42:	3710      	adds	r7, #16
 810fa44:	46bd      	mov	sp, r7
 810fa46:	bd80      	pop	{r7, pc}

0810fa48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810fa48:	b580      	push	{r7, lr}
 810fa4a:	b084      	sub	sp, #16
 810fa4c:	af00      	add	r7, sp, #0
 810fa4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810fa50:	f7fe feaa 	bl	810e7a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810fa54:	687b      	ldr	r3, [r7, #4]
 810fa56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810fa58:	2b00      	cmp	r3, #0
 810fa5a:	d102      	bne.n	810fa62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810fa5c:	2301      	movs	r3, #1
 810fa5e:	60fb      	str	r3, [r7, #12]
 810fa60:	e001      	b.n	810fa66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810fa62:	2300      	movs	r3, #0
 810fa64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810fa66:	f7fe fed1 	bl	810e80c <vPortExitCritical>

	return xReturn;
 810fa6a:	68fb      	ldr	r3, [r7, #12]
}
 810fa6c:	4618      	mov	r0, r3
 810fa6e:	3710      	adds	r7, #16
 810fa70:	46bd      	mov	sp, r7
 810fa72:	bd80      	pop	{r7, pc}

0810fa74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810fa74:	b580      	push	{r7, lr}
 810fa76:	b084      	sub	sp, #16
 810fa78:	af00      	add	r7, sp, #0
 810fa7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810fa7c:	f7fe fe94 	bl	810e7a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810fa80:	687b      	ldr	r3, [r7, #4]
 810fa82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810fa84:	687b      	ldr	r3, [r7, #4]
 810fa86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810fa88:	429a      	cmp	r2, r3
 810fa8a:	d102      	bne.n	810fa92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810fa8c:	2301      	movs	r3, #1
 810fa8e:	60fb      	str	r3, [r7, #12]
 810fa90:	e001      	b.n	810fa96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810fa92:	2300      	movs	r3, #0
 810fa94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810fa96:	f7fe feb9 	bl	810e80c <vPortExitCritical>

	return xReturn;
 810fa9a:	68fb      	ldr	r3, [r7, #12]
}
 810fa9c:	4618      	mov	r0, r3
 810fa9e:	3710      	adds	r7, #16
 810faa0:	46bd      	mov	sp, r7
 810faa2:	bd80      	pop	{r7, pc}

0810faa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810faa4:	b480      	push	{r7}
 810faa6:	b085      	sub	sp, #20
 810faa8:	af00      	add	r7, sp, #0
 810faaa:	6078      	str	r0, [r7, #4]
 810faac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810faae:	2300      	movs	r3, #0
 810fab0:	60fb      	str	r3, [r7, #12]
 810fab2:	e014      	b.n	810fade <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810fab4:	4a0f      	ldr	r2, [pc, #60]	@ (810faf4 <vQueueAddToRegistry+0x50>)
 810fab6:	68fb      	ldr	r3, [r7, #12]
 810fab8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810fabc:	2b00      	cmp	r3, #0
 810fabe:	d10b      	bne.n	810fad8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810fac0:	490c      	ldr	r1, [pc, #48]	@ (810faf4 <vQueueAddToRegistry+0x50>)
 810fac2:	68fb      	ldr	r3, [r7, #12]
 810fac4:	683a      	ldr	r2, [r7, #0]
 810fac6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810faca:	4a0a      	ldr	r2, [pc, #40]	@ (810faf4 <vQueueAddToRegistry+0x50>)
 810facc:	68fb      	ldr	r3, [r7, #12]
 810face:	00db      	lsls	r3, r3, #3
 810fad0:	4413      	add	r3, r2
 810fad2:	687a      	ldr	r2, [r7, #4]
 810fad4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810fad6:	e006      	b.n	810fae6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810fad8:	68fb      	ldr	r3, [r7, #12]
 810fada:	3301      	adds	r3, #1
 810fadc:	60fb      	str	r3, [r7, #12]
 810fade:	68fb      	ldr	r3, [r7, #12]
 810fae0:	2b07      	cmp	r3, #7
 810fae2:	d9e7      	bls.n	810fab4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810fae4:	bf00      	nop
 810fae6:	bf00      	nop
 810fae8:	3714      	adds	r7, #20
 810faea:	46bd      	mov	sp, r7
 810faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810faf0:	4770      	bx	lr
 810faf2:	bf00      	nop
 810faf4:	1000ab3c 	.word	0x1000ab3c

0810faf8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 810faf8:	b480      	push	{r7}
 810fafa:	b085      	sub	sp, #20
 810fafc:	af00      	add	r7, sp, #0
 810fafe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810fb00:	2300      	movs	r3, #0
 810fb02:	60fb      	str	r3, [r7, #12]
 810fb04:	e016      	b.n	810fb34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 810fb06:	4a10      	ldr	r2, [pc, #64]	@ (810fb48 <vQueueUnregisterQueue+0x50>)
 810fb08:	68fb      	ldr	r3, [r7, #12]
 810fb0a:	00db      	lsls	r3, r3, #3
 810fb0c:	4413      	add	r3, r2
 810fb0e:	685b      	ldr	r3, [r3, #4]
 810fb10:	687a      	ldr	r2, [r7, #4]
 810fb12:	429a      	cmp	r2, r3
 810fb14:	d10b      	bne.n	810fb2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 810fb16:	4a0c      	ldr	r2, [pc, #48]	@ (810fb48 <vQueueUnregisterQueue+0x50>)
 810fb18:	68fb      	ldr	r3, [r7, #12]
 810fb1a:	2100      	movs	r1, #0
 810fb1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 810fb20:	4a09      	ldr	r2, [pc, #36]	@ (810fb48 <vQueueUnregisterQueue+0x50>)
 810fb22:	68fb      	ldr	r3, [r7, #12]
 810fb24:	00db      	lsls	r3, r3, #3
 810fb26:	4413      	add	r3, r2
 810fb28:	2200      	movs	r2, #0
 810fb2a:	605a      	str	r2, [r3, #4]
				break;
 810fb2c:	e006      	b.n	810fb3c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810fb2e:	68fb      	ldr	r3, [r7, #12]
 810fb30:	3301      	adds	r3, #1
 810fb32:	60fb      	str	r3, [r7, #12]
 810fb34:	68fb      	ldr	r3, [r7, #12]
 810fb36:	2b07      	cmp	r3, #7
 810fb38:	d9e5      	bls.n	810fb06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 810fb3a:	bf00      	nop
 810fb3c:	bf00      	nop
 810fb3e:	3714      	adds	r7, #20
 810fb40:	46bd      	mov	sp, r7
 810fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fb46:	4770      	bx	lr
 810fb48:	1000ab3c 	.word	0x1000ab3c

0810fb4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810fb4c:	b580      	push	{r7, lr}
 810fb4e:	b086      	sub	sp, #24
 810fb50:	af00      	add	r7, sp, #0
 810fb52:	60f8      	str	r0, [r7, #12]
 810fb54:	60b9      	str	r1, [r7, #8]
 810fb56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810fb58:	68fb      	ldr	r3, [r7, #12]
 810fb5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810fb5c:	f7fe fe24 	bl	810e7a8 <vPortEnterCritical>
 810fb60:	697b      	ldr	r3, [r7, #20]
 810fb62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810fb66:	b25b      	sxtb	r3, r3
 810fb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 810fb6c:	d103      	bne.n	810fb76 <vQueueWaitForMessageRestricted+0x2a>
 810fb6e:	697b      	ldr	r3, [r7, #20]
 810fb70:	2200      	movs	r2, #0
 810fb72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810fb76:	697b      	ldr	r3, [r7, #20]
 810fb78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810fb7c:	b25b      	sxtb	r3, r3
 810fb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810fb82:	d103      	bne.n	810fb8c <vQueueWaitForMessageRestricted+0x40>
 810fb84:	697b      	ldr	r3, [r7, #20]
 810fb86:	2200      	movs	r2, #0
 810fb88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810fb8c:	f7fe fe3e 	bl	810e80c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810fb90:	697b      	ldr	r3, [r7, #20]
 810fb92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810fb94:	2b00      	cmp	r3, #0
 810fb96:	d106      	bne.n	810fba6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810fb98:	697b      	ldr	r3, [r7, #20]
 810fb9a:	3324      	adds	r3, #36	@ 0x24
 810fb9c:	687a      	ldr	r2, [r7, #4]
 810fb9e:	68b9      	ldr	r1, [r7, #8]
 810fba0:	4618      	mov	r0, r3
 810fba2:	f001 f8a9 	bl	8110cf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810fba6:	6978      	ldr	r0, [r7, #20]
 810fba8:	f7ff fefc 	bl	810f9a4 <prvUnlockQueue>
	}
 810fbac:	bf00      	nop
 810fbae:	3718      	adds	r7, #24
 810fbb0:	46bd      	mov	sp, r7
 810fbb2:	bd80      	pop	{r7, pc}

0810fbb4 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 810fbb4:	b580      	push	{r7, lr}
 810fbb6:	b090      	sub	sp, #64	@ 0x40
 810fbb8:	af02      	add	r7, sp, #8
 810fbba:	60f8      	str	r0, [r7, #12]
 810fbbc:	60b9      	str	r1, [r7, #8]
 810fbbe:	607a      	str	r2, [r7, #4]
 810fbc0:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 810fbc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810fbc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 810fbc6:	683b      	ldr	r3, [r7, #0]
 810fbc8:	2b00      	cmp	r3, #0
 810fbca:	d10b      	bne.n	810fbe4 <xStreamBufferGenericCreateStatic+0x30>
	__asm volatile
 810fbcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fbd0:	f383 8811 	msr	BASEPRI, r3
 810fbd4:	f3bf 8f6f 	isb	sy
 810fbd8:	f3bf 8f4f 	dsb	sy
 810fbdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810fbde:	bf00      	nop
 810fbe0:	bf00      	nop
 810fbe2:	e7fd      	b.n	810fbe0 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 810fbe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810fbe6:	2b00      	cmp	r3, #0
 810fbe8:	d10b      	bne.n	810fc02 <xStreamBufferGenericCreateStatic+0x4e>
	__asm volatile
 810fbea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fbee:	f383 8811 	msr	BASEPRI, r3
 810fbf2:	f3bf 8f6f 	isb	sy
 810fbf6:	f3bf 8f4f 	dsb	sy
 810fbfa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810fbfc:	bf00      	nop
 810fbfe:	bf00      	nop
 810fc00:	e7fd      	b.n	810fbfe <xStreamBufferGenericCreateStatic+0x4a>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 810fc02:	68ba      	ldr	r2, [r7, #8]
 810fc04:	68fb      	ldr	r3, [r7, #12]
 810fc06:	429a      	cmp	r2, r3
 810fc08:	d90b      	bls.n	810fc22 <xStreamBufferGenericCreateStatic+0x6e>
	__asm volatile
 810fc0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fc0e:	f383 8811 	msr	BASEPRI, r3
 810fc12:	f3bf 8f6f 	isb	sy
 810fc16:	f3bf 8f4f 	dsb	sy
 810fc1a:	623b      	str	r3, [r7, #32]
}
 810fc1c:	bf00      	nop
 810fc1e:	bf00      	nop
 810fc20:	e7fd      	b.n	810fc1e <xStreamBufferGenericCreateStatic+0x6a>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 810fc22:	68bb      	ldr	r3, [r7, #8]
 810fc24:	2b00      	cmp	r3, #0
 810fc26:	d101      	bne.n	810fc2c <xStreamBufferGenericCreateStatic+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 810fc28:	2301      	movs	r3, #1
 810fc2a:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 810fc2c:	687b      	ldr	r3, [r7, #4]
 810fc2e:	2b00      	cmp	r3, #0
 810fc30:	d003      	beq.n	810fc3a <xStreamBufferGenericCreateStatic+0x86>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 810fc32:	2303      	movs	r3, #3
 810fc34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 810fc38:	e002      	b.n	810fc40 <xStreamBufferGenericCreateStatic+0x8c>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 810fc3a:	2302      	movs	r3, #2
 810fc3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 810fc40:	68fb      	ldr	r3, [r7, #12]
 810fc42:	2b04      	cmp	r3, #4
 810fc44:	d80b      	bhi.n	810fc5e <xStreamBufferGenericCreateStatic+0xaa>
	__asm volatile
 810fc46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fc4a:	f383 8811 	msr	BASEPRI, r3
 810fc4e:	f3bf 8f6f 	isb	sy
 810fc52:	f3bf 8f4f 	dsb	sy
 810fc56:	61fb      	str	r3, [r7, #28]
}
 810fc58:	bf00      	nop
 810fc5a:	bf00      	nop
 810fc5c:	e7fd      	b.n	810fc5a <xStreamBufferGenericCreateStatic+0xa6>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 810fc5e:	2324      	movs	r3, #36	@ 0x24
 810fc60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 810fc62:	697b      	ldr	r3, [r7, #20]
 810fc64:	2b24      	cmp	r3, #36	@ 0x24
 810fc66:	d00b      	beq.n	810fc80 <xStreamBufferGenericCreateStatic+0xcc>
	__asm volatile
 810fc68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fc6c:	f383 8811 	msr	BASEPRI, r3
 810fc70:	f3bf 8f6f 	isb	sy
 810fc74:	f3bf 8f4f 	dsb	sy
 810fc78:	61bb      	str	r3, [r7, #24]
}
 810fc7a:	bf00      	nop
 810fc7c:	bf00      	nop
 810fc7e:	e7fd      	b.n	810fc7c <xStreamBufferGenericCreateStatic+0xc8>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 810fc80:	683b      	ldr	r3, [r7, #0]
 810fc82:	2b00      	cmp	r3, #0
 810fc84:	d015      	beq.n	810fcb2 <xStreamBufferGenericCreateStatic+0xfe>
 810fc86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810fc88:	2b00      	cmp	r3, #0
 810fc8a:	d012      	beq.n	810fcb2 <xStreamBufferGenericCreateStatic+0xfe>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 810fc8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810fc90:	9300      	str	r3, [sp, #0]
 810fc92:	68bb      	ldr	r3, [r7, #8]
 810fc94:	68fa      	ldr	r2, [r7, #12]
 810fc96:	6839      	ldr	r1, [r7, #0]
 810fc98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810fc9a:	f000 fb81 	bl	81103a0 <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 810fc9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fca0:	7f1b      	ldrb	r3, [r3, #28]
 810fca2:	f043 0302 	orr.w	r3, r3, #2
 810fca6:	b2da      	uxtb	r2, r3
 810fca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fcaa:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 810fcac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810fcae:	637b      	str	r3, [r7, #52]	@ 0x34
 810fcb0:	e001      	b.n	810fcb6 <xStreamBufferGenericCreateStatic+0x102>
		}
		else
		{
			xReturn = NULL;
 810fcb2:	2300      	movs	r3, #0
 810fcb4:	637b      	str	r3, [r7, #52]	@ 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 810fcb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 810fcb8:	4618      	mov	r0, r3
 810fcba:	3738      	adds	r7, #56	@ 0x38
 810fcbc:	46bd      	mov	sp, r7
 810fcbe:	bd80      	pop	{r7, pc}

0810fcc0 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 810fcc0:	b480      	push	{r7}
 810fcc2:	b087      	sub	sp, #28
 810fcc4:	af00      	add	r7, sp, #0
 810fcc6:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810fcc8:	687b      	ldr	r3, [r7, #4]
 810fcca:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 810fccc:	693b      	ldr	r3, [r7, #16]
 810fcce:	2b00      	cmp	r3, #0
 810fcd0:	d10b      	bne.n	810fcea <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 810fcd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fcd6:	f383 8811 	msr	BASEPRI, r3
 810fcda:	f3bf 8f6f 	isb	sy
 810fcde:	f3bf 8f4f 	dsb	sy
 810fce2:	60fb      	str	r3, [r7, #12]
}
 810fce4:	bf00      	nop
 810fce6:	bf00      	nop
 810fce8:	e7fd      	b.n	810fce6 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 810fcea:	693b      	ldr	r3, [r7, #16]
 810fcec:	689a      	ldr	r2, [r3, #8]
 810fcee:	693b      	ldr	r3, [r7, #16]
 810fcf0:	681b      	ldr	r3, [r3, #0]
 810fcf2:	4413      	add	r3, r2
 810fcf4:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 810fcf6:	693b      	ldr	r3, [r7, #16]
 810fcf8:	685b      	ldr	r3, [r3, #4]
 810fcfa:	697a      	ldr	r2, [r7, #20]
 810fcfc:	1ad3      	subs	r3, r2, r3
 810fcfe:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 810fd00:	697b      	ldr	r3, [r7, #20]
 810fd02:	3b01      	subs	r3, #1
 810fd04:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 810fd06:	693b      	ldr	r3, [r7, #16]
 810fd08:	689b      	ldr	r3, [r3, #8]
 810fd0a:	697a      	ldr	r2, [r7, #20]
 810fd0c:	429a      	cmp	r2, r3
 810fd0e:	d304      	bcc.n	810fd1a <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 810fd10:	693b      	ldr	r3, [r7, #16]
 810fd12:	689b      	ldr	r3, [r3, #8]
 810fd14:	697a      	ldr	r2, [r7, #20]
 810fd16:	1ad3      	subs	r3, r2, r3
 810fd18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 810fd1a:	697b      	ldr	r3, [r7, #20]
}
 810fd1c:	4618      	mov	r0, r3
 810fd1e:	371c      	adds	r7, #28
 810fd20:	46bd      	mov	sp, r7
 810fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fd26:	4770      	bx	lr

0810fd28 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 810fd28:	b580      	push	{r7, lr}
 810fd2a:	b090      	sub	sp, #64	@ 0x40
 810fd2c:	af02      	add	r7, sp, #8
 810fd2e:	60f8      	str	r0, [r7, #12]
 810fd30:	60b9      	str	r1, [r7, #8]
 810fd32:	607a      	str	r2, [r7, #4]
 810fd34:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810fd36:	68fb      	ldr	r3, [r7, #12]
 810fd38:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 810fd3a:	2300      	movs	r3, #0
 810fd3c:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 810fd3e:	687b      	ldr	r3, [r7, #4]
 810fd40:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 810fd42:	68bb      	ldr	r3, [r7, #8]
 810fd44:	2b00      	cmp	r3, #0
 810fd46:	d10b      	bne.n	810fd60 <xStreamBufferSend+0x38>
	__asm volatile
 810fd48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fd4c:	f383 8811 	msr	BASEPRI, r3
 810fd50:	f3bf 8f6f 	isb	sy
 810fd54:	f3bf 8f4f 	dsb	sy
 810fd58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810fd5a:	bf00      	nop
 810fd5c:	bf00      	nop
 810fd5e:	e7fd      	b.n	810fd5c <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 810fd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fd62:	2b00      	cmp	r3, #0
 810fd64:	d10b      	bne.n	810fd7e <xStreamBufferSend+0x56>
	__asm volatile
 810fd66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fd6a:	f383 8811 	msr	BASEPRI, r3
 810fd6e:	f3bf 8f6f 	isb	sy
 810fd72:	f3bf 8f4f 	dsb	sy
 810fd76:	623b      	str	r3, [r7, #32]
}
 810fd78:	bf00      	nop
 810fd7a:	bf00      	nop
 810fd7c:	e7fd      	b.n	810fd7a <xStreamBufferSend+0x52>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 810fd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fd80:	7f1b      	ldrb	r3, [r3, #28]
 810fd82:	f003 0301 	and.w	r3, r3, #1
 810fd86:	2b00      	cmp	r3, #0
 810fd88:	d012      	beq.n	810fdb0 <xStreamBufferSend+0x88>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 810fd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fd8c:	3304      	adds	r3, #4
 810fd8e:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 810fd90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810fd92:	687b      	ldr	r3, [r7, #4]
 810fd94:	429a      	cmp	r2, r3
 810fd96:	d80b      	bhi.n	810fdb0 <xStreamBufferSend+0x88>
	__asm volatile
 810fd98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fd9c:	f383 8811 	msr	BASEPRI, r3
 810fda0:	f3bf 8f6f 	isb	sy
 810fda4:	f3bf 8f4f 	dsb	sy
 810fda8:	61fb      	str	r3, [r7, #28]
}
 810fdaa:	bf00      	nop
 810fdac:	bf00      	nop
 810fdae:	e7fd      	b.n	810fdac <xStreamBufferSend+0x84>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 810fdb0:	683b      	ldr	r3, [r7, #0]
 810fdb2:	2b00      	cmp	r3, #0
 810fdb4:	d03f      	beq.n	810fe36 <xStreamBufferSend+0x10e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 810fdb6:	f107 0310 	add.w	r3, r7, #16
 810fdba:	4618      	mov	r0, r3
 810fdbc:	f001 f82c 	bl	8110e18 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 810fdc0:	f7fe fcf2 	bl	810e7a8 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 810fdc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810fdc6:	f7ff ff7b 	bl	810fcc0 <xStreamBufferSpacesAvailable>
 810fdca:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 810fdcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810fdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fdd0:	429a      	cmp	r2, r3
 810fdd2:	d218      	bcs.n	810fe06 <xStreamBufferSend+0xde>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 810fdd4:	2000      	movs	r0, #0
 810fdd6:	f001 fc8d 	bl	81116f4 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 810fdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fddc:	695b      	ldr	r3, [r3, #20]
 810fdde:	2b00      	cmp	r3, #0
 810fde0:	d00b      	beq.n	810fdfa <xStreamBufferSend+0xd2>
	__asm volatile
 810fde2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fde6:	f383 8811 	msr	BASEPRI, r3
 810fdea:	f3bf 8f6f 	isb	sy
 810fdee:	f3bf 8f4f 	dsb	sy
 810fdf2:	61bb      	str	r3, [r7, #24]
}
 810fdf4:	bf00      	nop
 810fdf6:	bf00      	nop
 810fdf8:	e7fd      	b.n	810fdf6 <xStreamBufferSend+0xce>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 810fdfa:	f001 f997 	bl	811112c <xTaskGetCurrentTaskHandle>
 810fdfe:	4602      	mov	r2, r0
 810fe00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fe02:	615a      	str	r2, [r3, #20]
 810fe04:	e002      	b.n	810fe0c <xStreamBufferSend+0xe4>
				}
				else
				{
					taskEXIT_CRITICAL();
 810fe06:	f7fe fd01 	bl	810e80c <vPortExitCritical>
					break;
 810fe0a:	e014      	b.n	810fe36 <xStreamBufferSend+0x10e>
				}
			}
			taskEXIT_CRITICAL();
 810fe0c:	f7fe fcfe 	bl	810e80c <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 810fe10:	683b      	ldr	r3, [r7, #0]
 810fe12:	2200      	movs	r2, #0
 810fe14:	2100      	movs	r1, #0
 810fe16:	2000      	movs	r0, #0
 810fe18:	f001 fb26 	bl	8111468 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 810fe1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fe1e:	2200      	movs	r2, #0
 810fe20:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 810fe22:	463a      	mov	r2, r7
 810fe24:	f107 0310 	add.w	r3, r7, #16
 810fe28:	4611      	mov	r1, r2
 810fe2a:	4618      	mov	r0, r3
 810fe2c:	f001 f832 	bl	8110e94 <xTaskCheckForTimeOut>
 810fe30:	4603      	mov	r3, r0
 810fe32:	2b00      	cmp	r3, #0
 810fe34:	d0c4      	beq.n	810fdc0 <xStreamBufferSend+0x98>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 810fe36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810fe38:	2b00      	cmp	r3, #0
 810fe3a:	d103      	bne.n	810fe44 <xStreamBufferSend+0x11c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 810fe3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810fe3e:	f7ff ff3f 	bl	810fcc0 <xStreamBufferSpacesAvailable>
 810fe42:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 810fe44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810fe46:	9300      	str	r3, [sp, #0]
 810fe48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810fe4a:	687a      	ldr	r2, [r7, #4]
 810fe4c:	68b9      	ldr	r1, [r7, #8]
 810fe4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810fe50:	f000 f814 	bl	810fe7c <prvWriteMessageToBuffer>
 810fe54:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 810fe56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810fe58:	2b00      	cmp	r3, #0
 810fe5a:	d00a      	beq.n	810fe72 <xStreamBufferSend+0x14a>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 810fe5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810fe5e:	f000 fa7f 	bl	8110360 <prvBytesInBuffer>
 810fe62:	4602      	mov	r2, r0
 810fe64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fe66:	68db      	ldr	r3, [r3, #12]
 810fe68:	429a      	cmp	r2, r3
 810fe6a:	d302      	bcc.n	810fe72 <xStreamBufferSend+0x14a>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 810fe6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810fe6e:	f7f0 fb9b 	bl	81005a8 <vGenerateRemoteInterrupt>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 810fe72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 810fe74:	4618      	mov	r0, r3
 810fe76:	3738      	adds	r7, #56	@ 0x38
 810fe78:	46bd      	mov	sp, r7
 810fe7a:	bd80      	pop	{r7, pc}

0810fe7c <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 810fe7c:	b580      	push	{r7, lr}
 810fe7e:	b086      	sub	sp, #24
 810fe80:	af00      	add	r7, sp, #0
 810fe82:	60f8      	str	r0, [r7, #12]
 810fe84:	60b9      	str	r1, [r7, #8]
 810fe86:	607a      	str	r2, [r7, #4]
 810fe88:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 810fe8a:	683b      	ldr	r3, [r7, #0]
 810fe8c:	2b00      	cmp	r3, #0
 810fe8e:	d102      	bne.n	810fe96 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 810fe90:	2300      	movs	r3, #0
 810fe92:	617b      	str	r3, [r7, #20]
 810fe94:	e01d      	b.n	810fed2 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 810fe96:	68fb      	ldr	r3, [r7, #12]
 810fe98:	7f1b      	ldrb	r3, [r3, #28]
 810fe9a:	f003 0301 	and.w	r3, r3, #1
 810fe9e:	2b00      	cmp	r3, #0
 810fea0:	d108      	bne.n	810feb4 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 810fea2:	2301      	movs	r3, #1
 810fea4:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 810fea6:	687a      	ldr	r2, [r7, #4]
 810fea8:	683b      	ldr	r3, [r7, #0]
 810feaa:	4293      	cmp	r3, r2
 810feac:	bf28      	it	cs
 810feae:	4613      	movcs	r3, r2
 810feb0:	607b      	str	r3, [r7, #4]
 810feb2:	e00e      	b.n	810fed2 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 810feb4:	683a      	ldr	r2, [r7, #0]
 810feb6:	6a3b      	ldr	r3, [r7, #32]
 810feb8:	429a      	cmp	r2, r3
 810feba:	d308      	bcc.n	810fece <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 810febc:	2301      	movs	r3, #1
 810febe:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 810fec0:	1d3b      	adds	r3, r7, #4
 810fec2:	2204      	movs	r2, #4
 810fec4:	4619      	mov	r1, r3
 810fec6:	68f8      	ldr	r0, [r7, #12]
 810fec8:	f000 f958 	bl	811017c <prvWriteBytesToBuffer>
 810fecc:	e001      	b.n	810fed2 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 810fece:	2300      	movs	r3, #0
 810fed0:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 810fed2:	697b      	ldr	r3, [r7, #20]
 810fed4:	2b00      	cmp	r3, #0
 810fed6:	d007      	beq.n	810fee8 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 810fed8:	687b      	ldr	r3, [r7, #4]
 810feda:	461a      	mov	r2, r3
 810fedc:	68b9      	ldr	r1, [r7, #8]
 810fede:	68f8      	ldr	r0, [r7, #12]
 810fee0:	f000 f94c 	bl	811017c <prvWriteBytesToBuffer>
 810fee4:	6138      	str	r0, [r7, #16]
 810fee6:	e001      	b.n	810feec <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 810fee8:	2300      	movs	r3, #0
 810feea:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 810feec:	693b      	ldr	r3, [r7, #16]
}
 810feee:	4618      	mov	r0, r3
 810fef0:	3718      	adds	r7, #24
 810fef2:	46bd      	mov	sp, r7
 810fef4:	bd80      	pop	{r7, pc}

0810fef6 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 810fef6:	b580      	push	{r7, lr}
 810fef8:	b08e      	sub	sp, #56	@ 0x38
 810fefa:	af02      	add	r7, sp, #8
 810fefc:	60f8      	str	r0, [r7, #12]
 810fefe:	60b9      	str	r1, [r7, #8]
 810ff00:	607a      	str	r2, [r7, #4]
 810ff02:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810ff04:	68fb      	ldr	r3, [r7, #12]
 810ff06:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 810ff08:	2300      	movs	r3, #0
 810ff0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 810ff0c:	68bb      	ldr	r3, [r7, #8]
 810ff0e:	2b00      	cmp	r3, #0
 810ff10:	d10b      	bne.n	810ff2a <xStreamBufferReceive+0x34>
	__asm volatile
 810ff12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ff16:	f383 8811 	msr	BASEPRI, r3
 810ff1a:	f3bf 8f6f 	isb	sy
 810ff1e:	f3bf 8f4f 	dsb	sy
 810ff22:	61fb      	str	r3, [r7, #28]
}
 810ff24:	bf00      	nop
 810ff26:	bf00      	nop
 810ff28:	e7fd      	b.n	810ff26 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 810ff2a:	6a3b      	ldr	r3, [r7, #32]
 810ff2c:	2b00      	cmp	r3, #0
 810ff2e:	d10b      	bne.n	810ff48 <xStreamBufferReceive+0x52>
	__asm volatile
 810ff30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ff34:	f383 8811 	msr	BASEPRI, r3
 810ff38:	f3bf 8f6f 	isb	sy
 810ff3c:	f3bf 8f4f 	dsb	sy
 810ff40:	61bb      	str	r3, [r7, #24]
}
 810ff42:	bf00      	nop
 810ff44:	bf00      	nop
 810ff46:	e7fd      	b.n	810ff44 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 810ff48:	6a3b      	ldr	r3, [r7, #32]
 810ff4a:	7f1b      	ldrb	r3, [r3, #28]
 810ff4c:	f003 0301 	and.w	r3, r3, #1
 810ff50:	2b00      	cmp	r3, #0
 810ff52:	d002      	beq.n	810ff5a <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 810ff54:	2304      	movs	r3, #4
 810ff56:	627b      	str	r3, [r7, #36]	@ 0x24
 810ff58:	e001      	b.n	810ff5e <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 810ff5a:	2300      	movs	r3, #0
 810ff5c:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 810ff5e:	683b      	ldr	r3, [r7, #0]
 810ff60:	2b00      	cmp	r3, #0
 810ff62:	d035      	beq.n	810ffd0 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 810ff64:	f7fe fc20 	bl	810e7a8 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 810ff68:	6a38      	ldr	r0, [r7, #32]
 810ff6a:	f000 f9f9 	bl	8110360 <prvBytesInBuffer>
 810ff6e:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 810ff70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810ff72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ff74:	429a      	cmp	r2, r3
 810ff76:	d817      	bhi.n	810ffa8 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 810ff78:	2000      	movs	r0, #0
 810ff7a:	f001 fbbb 	bl	81116f4 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 810ff7e:	6a3b      	ldr	r3, [r7, #32]
 810ff80:	691b      	ldr	r3, [r3, #16]
 810ff82:	2b00      	cmp	r3, #0
 810ff84:	d00b      	beq.n	810ff9e <xStreamBufferReceive+0xa8>
	__asm volatile
 810ff86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ff8a:	f383 8811 	msr	BASEPRI, r3
 810ff8e:	f3bf 8f6f 	isb	sy
 810ff92:	f3bf 8f4f 	dsb	sy
 810ff96:	617b      	str	r3, [r7, #20]
}
 810ff98:	bf00      	nop
 810ff9a:	bf00      	nop
 810ff9c:	e7fd      	b.n	810ff9a <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 810ff9e:	f001 f8c5 	bl	811112c <xTaskGetCurrentTaskHandle>
 810ffa2:	4602      	mov	r2, r0
 810ffa4:	6a3b      	ldr	r3, [r7, #32]
 810ffa6:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810ffa8:	f7fe fc30 	bl	810e80c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 810ffac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810ffae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ffb0:	429a      	cmp	r2, r3
 810ffb2:	d811      	bhi.n	810ffd8 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 810ffb4:	683b      	ldr	r3, [r7, #0]
 810ffb6:	2200      	movs	r2, #0
 810ffb8:	2100      	movs	r1, #0
 810ffba:	2000      	movs	r0, #0
 810ffbc:	f001 fa54 	bl	8111468 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 810ffc0:	6a3b      	ldr	r3, [r7, #32]
 810ffc2:	2200      	movs	r2, #0
 810ffc4:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 810ffc6:	6a38      	ldr	r0, [r7, #32]
 810ffc8:	f000 f9ca 	bl	8110360 <prvBytesInBuffer>
 810ffcc:	62b8      	str	r0, [r7, #40]	@ 0x28
 810ffce:	e003      	b.n	810ffd8 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 810ffd0:	6a38      	ldr	r0, [r7, #32]
 810ffd2:	f000 f9c5 	bl	8110360 <prvBytesInBuffer>
 810ffd6:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 810ffd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810ffda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ffdc:	429a      	cmp	r2, r3
 810ffde:	d90e      	bls.n	810fffe <xStreamBufferReceive+0x108>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 810ffe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ffe2:	9300      	str	r3, [sp, #0]
 810ffe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ffe6:	687a      	ldr	r2, [r7, #4]
 810ffe8:	68b9      	ldr	r1, [r7, #8]
 810ffea:	6a38      	ldr	r0, [r7, #32]
 810ffec:	f000 f80c 	bl	8110008 <prvReadMessageFromBuffer>
 810fff0:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 810fff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810fff4:	2b00      	cmp	r3, #0
 810fff6:	d002      	beq.n	810fffe <xStreamBufferReceive+0x108>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 810fff8:	6a38      	ldr	r0, [r7, #32]
 810fffa:	f7f0 fad5 	bl	81005a8 <vGenerateRemoteInterrupt>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 810fffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8110000:	4618      	mov	r0, r3
 8110002:	3730      	adds	r7, #48	@ 0x30
 8110004:	46bd      	mov	sp, r7
 8110006:	bd80      	pop	{r7, pc}

08110008 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8110008:	b580      	push	{r7, lr}
 811000a:	b088      	sub	sp, #32
 811000c:	af00      	add	r7, sp, #0
 811000e:	60f8      	str	r0, [r7, #12]
 8110010:	60b9      	str	r1, [r7, #8]
 8110012:	607a      	str	r2, [r7, #4]
 8110014:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8110016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110018:	2b00      	cmp	r3, #0
 811001a:	d019      	beq.n	8110050 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 811001c:	68fb      	ldr	r3, [r7, #12]
 811001e:	681b      	ldr	r3, [r3, #0]
 8110020:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8110022:	f107 0110 	add.w	r1, r7, #16
 8110026:	683b      	ldr	r3, [r7, #0]
 8110028:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811002a:	68f8      	ldr	r0, [r7, #12]
 811002c:	f000 f91b 	bl	8110266 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8110030:	693b      	ldr	r3, [r7, #16]
 8110032:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8110034:	683a      	ldr	r2, [r7, #0]
 8110036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110038:	1ad3      	subs	r3, r2, r3
 811003a:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 811003c:	69fa      	ldr	r2, [r7, #28]
 811003e:	687b      	ldr	r3, [r7, #4]
 8110040:	429a      	cmp	r2, r3
 8110042:	d907      	bls.n	8110054 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8110044:	68fb      	ldr	r3, [r7, #12]
 8110046:	69ba      	ldr	r2, [r7, #24]
 8110048:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 811004a:	2300      	movs	r3, #0
 811004c:	61fb      	str	r3, [r7, #28]
 811004e:	e001      	b.n	8110054 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8110050:	687b      	ldr	r3, [r7, #4]
 8110052:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8110054:	683b      	ldr	r3, [r7, #0]
 8110056:	69fa      	ldr	r2, [r7, #28]
 8110058:	68b9      	ldr	r1, [r7, #8]
 811005a:	68f8      	ldr	r0, [r7, #12]
 811005c:	f000 f903 	bl	8110266 <prvReadBytesFromBuffer>
 8110060:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8110062:	697b      	ldr	r3, [r7, #20]
}
 8110064:	4618      	mov	r0, r3
 8110066:	3720      	adds	r7, #32
 8110068:	46bd      	mov	sp, r7
 811006a:	bd80      	pop	{r7, pc}

0811006c <xStreamBufferSendCompletedFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 811006c:	b580      	push	{r7, lr}
 811006e:	b08c      	sub	sp, #48	@ 0x30
 8110070:	af02      	add	r7, sp, #8
 8110072:	6078      	str	r0, [r7, #4]
 8110074:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8110076:	687b      	ldr	r3, [r7, #4]
 8110078:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 811007a:	6a3b      	ldr	r3, [r7, #32]
 811007c:	2b00      	cmp	r3, #0
 811007e:	d10b      	bne.n	8110098 <xStreamBufferSendCompletedFromISR+0x2c>
	__asm volatile
 8110080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110084:	f383 8811 	msr	BASEPRI, r3
 8110088:	f3bf 8f6f 	isb	sy
 811008c:	f3bf 8f4f 	dsb	sy
 8110090:	61bb      	str	r3, [r7, #24]
}
 8110092:	bf00      	nop
 8110094:	bf00      	nop
 8110096:	e7fd      	b.n	8110094 <xStreamBufferSendCompletedFromISR+0x28>
	__asm volatile
 8110098:	f3ef 8211 	mrs	r2, BASEPRI
 811009c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81100a0:	f383 8811 	msr	BASEPRI, r3
 81100a4:	f3bf 8f6f 	isb	sy
 81100a8:	f3bf 8f4f 	dsb	sy
 81100ac:	617a      	str	r2, [r7, #20]
 81100ae:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 81100b0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 81100b2:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 81100b4:	6a3b      	ldr	r3, [r7, #32]
 81100b6:	691b      	ldr	r3, [r3, #16]
 81100b8:	2b00      	cmp	r3, #0
 81100ba:	d00e      	beq.n	81100da <xStreamBufferSendCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 81100bc:	6a3b      	ldr	r3, [r7, #32]
 81100be:	6918      	ldr	r0, [r3, #16]
 81100c0:	683b      	ldr	r3, [r7, #0]
 81100c2:	9300      	str	r3, [sp, #0]
 81100c4:	2300      	movs	r3, #0
 81100c6:	2200      	movs	r2, #0
 81100c8:	2100      	movs	r1, #0
 81100ca:	f001 fa2d 	bl	8111528 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 81100ce:	6a3b      	ldr	r3, [r7, #32]
 81100d0:	2200      	movs	r2, #0
 81100d2:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 81100d4:	2301      	movs	r3, #1
 81100d6:	627b      	str	r3, [r7, #36]	@ 0x24
 81100d8:	e001      	b.n	81100de <xStreamBufferSendCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 81100da:	2300      	movs	r3, #0
 81100dc:	627b      	str	r3, [r7, #36]	@ 0x24
 81100de:	69fb      	ldr	r3, [r7, #28]
 81100e0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 81100e2:	68fb      	ldr	r3, [r7, #12]
 81100e4:	f383 8811 	msr	BASEPRI, r3
}
 81100e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81100ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 81100ec:	4618      	mov	r0, r3
 81100ee:	3728      	adds	r7, #40	@ 0x28
 81100f0:	46bd      	mov	sp, r7
 81100f2:	bd80      	pop	{r7, pc}

081100f4 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 81100f4:	b580      	push	{r7, lr}
 81100f6:	b08c      	sub	sp, #48	@ 0x30
 81100f8:	af02      	add	r7, sp, #8
 81100fa:	6078      	str	r0, [r7, #4]
 81100fc:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 81100fe:	687b      	ldr	r3, [r7, #4]
 8110100:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 8110102:	6a3b      	ldr	r3, [r7, #32]
 8110104:	2b00      	cmp	r3, #0
 8110106:	d10b      	bne.n	8110120 <xStreamBufferReceiveCompletedFromISR+0x2c>
	__asm volatile
 8110108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811010c:	f383 8811 	msr	BASEPRI, r3
 8110110:	f3bf 8f6f 	isb	sy
 8110114:	f3bf 8f4f 	dsb	sy
 8110118:	61bb      	str	r3, [r7, #24]
}
 811011a:	bf00      	nop
 811011c:	bf00      	nop
 811011e:	e7fd      	b.n	811011c <xStreamBufferReceiveCompletedFromISR+0x28>
	__asm volatile
 8110120:	f3ef 8211 	mrs	r2, BASEPRI
 8110124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110128:	f383 8811 	msr	BASEPRI, r3
 811012c:	f3bf 8f6f 	isb	sy
 8110130:	f3bf 8f4f 	dsb	sy
 8110134:	617a      	str	r2, [r7, #20]
 8110136:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8110138:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 811013a:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 811013c:	6a3b      	ldr	r3, [r7, #32]
 811013e:	695b      	ldr	r3, [r3, #20]
 8110140:	2b00      	cmp	r3, #0
 8110142:	d00e      	beq.n	8110162 <xStreamBufferReceiveCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 8110144:	6a3b      	ldr	r3, [r7, #32]
 8110146:	6958      	ldr	r0, [r3, #20]
 8110148:	683b      	ldr	r3, [r7, #0]
 811014a:	9300      	str	r3, [sp, #0]
 811014c:	2300      	movs	r3, #0
 811014e:	2200      	movs	r2, #0
 8110150:	2100      	movs	r1, #0
 8110152:	f001 f9e9 	bl	8111528 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8110156:	6a3b      	ldr	r3, [r7, #32]
 8110158:	2200      	movs	r2, #0
 811015a:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
 811015c:	2301      	movs	r3, #1
 811015e:	627b      	str	r3, [r7, #36]	@ 0x24
 8110160:	e001      	b.n	8110166 <xStreamBufferReceiveCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 8110162:	2300      	movs	r3, #0
 8110164:	627b      	str	r3, [r7, #36]	@ 0x24
 8110166:	69fb      	ldr	r3, [r7, #28]
 8110168:	60fb      	str	r3, [r7, #12]
	__asm volatile
 811016a:	68fb      	ldr	r3, [r7, #12]
 811016c:	f383 8811 	msr	BASEPRI, r3
}
 8110170:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8110172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8110174:	4618      	mov	r0, r3
 8110176:	3728      	adds	r7, #40	@ 0x28
 8110178:	46bd      	mov	sp, r7
 811017a:	bd80      	pop	{r7, pc}

0811017c <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 811017c:	b580      	push	{r7, lr}
 811017e:	b08a      	sub	sp, #40	@ 0x28
 8110180:	af00      	add	r7, sp, #0
 8110182:	60f8      	str	r0, [r7, #12]
 8110184:	60b9      	str	r1, [r7, #8]
 8110186:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8110188:	687b      	ldr	r3, [r7, #4]
 811018a:	2b00      	cmp	r3, #0
 811018c:	d10b      	bne.n	81101a6 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 811018e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110192:	f383 8811 	msr	BASEPRI, r3
 8110196:	f3bf 8f6f 	isb	sy
 811019a:	f3bf 8f4f 	dsb	sy
 811019e:	61fb      	str	r3, [r7, #28]
}
 81101a0:	bf00      	nop
 81101a2:	bf00      	nop
 81101a4:	e7fd      	b.n	81101a2 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 81101a6:	68fb      	ldr	r3, [r7, #12]
 81101a8:	685b      	ldr	r3, [r3, #4]
 81101aa:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 81101ac:	68fb      	ldr	r3, [r7, #12]
 81101ae:	689a      	ldr	r2, [r3, #8]
 81101b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81101b2:	1ad3      	subs	r3, r2, r3
 81101b4:	687a      	ldr	r2, [r7, #4]
 81101b6:	4293      	cmp	r3, r2
 81101b8:	bf28      	it	cs
 81101ba:	4613      	movcs	r3, r2
 81101bc:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 81101be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81101c0:	6a3b      	ldr	r3, [r7, #32]
 81101c2:	441a      	add	r2, r3
 81101c4:	68fb      	ldr	r3, [r7, #12]
 81101c6:	689b      	ldr	r3, [r3, #8]
 81101c8:	429a      	cmp	r2, r3
 81101ca:	d90b      	bls.n	81101e4 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 81101cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81101d0:	f383 8811 	msr	BASEPRI, r3
 81101d4:	f3bf 8f6f 	isb	sy
 81101d8:	f3bf 8f4f 	dsb	sy
 81101dc:	61bb      	str	r3, [r7, #24]
}
 81101de:	bf00      	nop
 81101e0:	bf00      	nop
 81101e2:	e7fd      	b.n	81101e0 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 81101e4:	68fb      	ldr	r3, [r7, #12]
 81101e6:	699a      	ldr	r2, [r3, #24]
 81101e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81101ea:	4413      	add	r3, r2
 81101ec:	6a3a      	ldr	r2, [r7, #32]
 81101ee:	68b9      	ldr	r1, [r7, #8]
 81101f0:	4618      	mov	r0, r3
 81101f2:	f00e f882 	bl	811e2fa <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 81101f6:	687a      	ldr	r2, [r7, #4]
 81101f8:	6a3b      	ldr	r3, [r7, #32]
 81101fa:	429a      	cmp	r2, r3
 81101fc:	d91d      	bls.n	811023a <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 81101fe:	687a      	ldr	r2, [r7, #4]
 8110200:	6a3b      	ldr	r3, [r7, #32]
 8110202:	1ad2      	subs	r2, r2, r3
 8110204:	68fb      	ldr	r3, [r7, #12]
 8110206:	689b      	ldr	r3, [r3, #8]
 8110208:	429a      	cmp	r2, r3
 811020a:	d90b      	bls.n	8110224 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 811020c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110210:	f383 8811 	msr	BASEPRI, r3
 8110214:	f3bf 8f6f 	isb	sy
 8110218:	f3bf 8f4f 	dsb	sy
 811021c:	617b      	str	r3, [r7, #20]
}
 811021e:	bf00      	nop
 8110220:	bf00      	nop
 8110222:	e7fd      	b.n	8110220 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8110224:	68fb      	ldr	r3, [r7, #12]
 8110226:	6998      	ldr	r0, [r3, #24]
 8110228:	68ba      	ldr	r2, [r7, #8]
 811022a:	6a3b      	ldr	r3, [r7, #32]
 811022c:	18d1      	adds	r1, r2, r3
 811022e:	687a      	ldr	r2, [r7, #4]
 8110230:	6a3b      	ldr	r3, [r7, #32]
 8110232:	1ad3      	subs	r3, r2, r3
 8110234:	461a      	mov	r2, r3
 8110236:	f00e f860 	bl	811e2fa <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 811023a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811023c:	687b      	ldr	r3, [r7, #4]
 811023e:	4413      	add	r3, r2
 8110240:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8110242:	68fb      	ldr	r3, [r7, #12]
 8110244:	689b      	ldr	r3, [r3, #8]
 8110246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8110248:	429a      	cmp	r2, r3
 811024a:	d304      	bcc.n	8110256 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 811024c:	68fb      	ldr	r3, [r7, #12]
 811024e:	689b      	ldr	r3, [r3, #8]
 8110250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8110252:	1ad3      	subs	r3, r2, r3
 8110254:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8110256:	68fb      	ldr	r3, [r7, #12]
 8110258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811025a:	605a      	str	r2, [r3, #4]

	return xCount;
 811025c:	687b      	ldr	r3, [r7, #4]
}
 811025e:	4618      	mov	r0, r3
 8110260:	3728      	adds	r7, #40	@ 0x28
 8110262:	46bd      	mov	sp, r7
 8110264:	bd80      	pop	{r7, pc}

08110266 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8110266:	b580      	push	{r7, lr}
 8110268:	b08a      	sub	sp, #40	@ 0x28
 811026a:	af00      	add	r7, sp, #0
 811026c:	60f8      	str	r0, [r7, #12]
 811026e:	60b9      	str	r1, [r7, #8]
 8110270:	607a      	str	r2, [r7, #4]
 8110272:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8110274:	687a      	ldr	r2, [r7, #4]
 8110276:	683b      	ldr	r3, [r7, #0]
 8110278:	4293      	cmp	r3, r2
 811027a:	bf28      	it	cs
 811027c:	4613      	movcs	r3, r2
 811027e:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8110280:	6a3b      	ldr	r3, [r7, #32]
 8110282:	2b00      	cmp	r3, #0
 8110284:	d067      	beq.n	8110356 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8110286:	68fb      	ldr	r3, [r7, #12]
 8110288:	681b      	ldr	r3, [r3, #0]
 811028a:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 811028c:	68fb      	ldr	r3, [r7, #12]
 811028e:	689a      	ldr	r2, [r3, #8]
 8110290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110292:	1ad3      	subs	r3, r2, r3
 8110294:	6a3a      	ldr	r2, [r7, #32]
 8110296:	4293      	cmp	r3, r2
 8110298:	bf28      	it	cs
 811029a:	4613      	movcs	r3, r2
 811029c:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 811029e:	69fa      	ldr	r2, [r7, #28]
 81102a0:	687b      	ldr	r3, [r7, #4]
 81102a2:	429a      	cmp	r2, r3
 81102a4:	d90b      	bls.n	81102be <prvReadBytesFromBuffer+0x58>
	__asm volatile
 81102a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81102aa:	f383 8811 	msr	BASEPRI, r3
 81102ae:	f3bf 8f6f 	isb	sy
 81102b2:	f3bf 8f4f 	dsb	sy
 81102b6:	61bb      	str	r3, [r7, #24]
}
 81102b8:	bf00      	nop
 81102ba:	bf00      	nop
 81102bc:	e7fd      	b.n	81102ba <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 81102be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81102c0:	69fb      	ldr	r3, [r7, #28]
 81102c2:	441a      	add	r2, r3
 81102c4:	68fb      	ldr	r3, [r7, #12]
 81102c6:	689b      	ldr	r3, [r3, #8]
 81102c8:	429a      	cmp	r2, r3
 81102ca:	d90b      	bls.n	81102e4 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 81102cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81102d0:	f383 8811 	msr	BASEPRI, r3
 81102d4:	f3bf 8f6f 	isb	sy
 81102d8:	f3bf 8f4f 	dsb	sy
 81102dc:	617b      	str	r3, [r7, #20]
}
 81102de:	bf00      	nop
 81102e0:	bf00      	nop
 81102e2:	e7fd      	b.n	81102e0 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 81102e4:	68fb      	ldr	r3, [r7, #12]
 81102e6:	699a      	ldr	r2, [r3, #24]
 81102e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81102ea:	4413      	add	r3, r2
 81102ec:	69fa      	ldr	r2, [r7, #28]
 81102ee:	4619      	mov	r1, r3
 81102f0:	68b8      	ldr	r0, [r7, #8]
 81102f2:	f00e f802 	bl	811e2fa <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 81102f6:	6a3a      	ldr	r2, [r7, #32]
 81102f8:	69fb      	ldr	r3, [r7, #28]
 81102fa:	429a      	cmp	r2, r3
 81102fc:	d91a      	bls.n	8110334 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 81102fe:	6a3a      	ldr	r2, [r7, #32]
 8110300:	687b      	ldr	r3, [r7, #4]
 8110302:	429a      	cmp	r2, r3
 8110304:	d90b      	bls.n	811031e <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 8110306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811030a:	f383 8811 	msr	BASEPRI, r3
 811030e:	f3bf 8f6f 	isb	sy
 8110312:	f3bf 8f4f 	dsb	sy
 8110316:	613b      	str	r3, [r7, #16]
}
 8110318:	bf00      	nop
 811031a:	bf00      	nop
 811031c:	e7fd      	b.n	811031a <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 811031e:	68ba      	ldr	r2, [r7, #8]
 8110320:	69fb      	ldr	r3, [r7, #28]
 8110322:	18d0      	adds	r0, r2, r3
 8110324:	68fb      	ldr	r3, [r7, #12]
 8110326:	6999      	ldr	r1, [r3, #24]
 8110328:	6a3a      	ldr	r2, [r7, #32]
 811032a:	69fb      	ldr	r3, [r7, #28]
 811032c:	1ad3      	subs	r3, r2, r3
 811032e:	461a      	mov	r2, r3
 8110330:	f00d ffe3 	bl	811e2fa <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8110334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8110336:	6a3b      	ldr	r3, [r7, #32]
 8110338:	4413      	add	r3, r2
 811033a:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 811033c:	68fb      	ldr	r3, [r7, #12]
 811033e:	689b      	ldr	r3, [r3, #8]
 8110340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8110342:	429a      	cmp	r2, r3
 8110344:	d304      	bcc.n	8110350 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8110346:	68fb      	ldr	r3, [r7, #12]
 8110348:	689b      	ldr	r3, [r3, #8]
 811034a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811034c:	1ad3      	subs	r3, r2, r3
 811034e:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8110350:	68fb      	ldr	r3, [r7, #12]
 8110352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8110354:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8110356:	6a3b      	ldr	r3, [r7, #32]
}
 8110358:	4618      	mov	r0, r3
 811035a:	3728      	adds	r7, #40	@ 0x28
 811035c:	46bd      	mov	sp, r7
 811035e:	bd80      	pop	{r7, pc}

08110360 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8110360:	b480      	push	{r7}
 8110362:	b085      	sub	sp, #20
 8110364:	af00      	add	r7, sp, #0
 8110366:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8110368:	687b      	ldr	r3, [r7, #4]
 811036a:	689a      	ldr	r2, [r3, #8]
 811036c:	687b      	ldr	r3, [r7, #4]
 811036e:	685b      	ldr	r3, [r3, #4]
 8110370:	4413      	add	r3, r2
 8110372:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8110374:	687b      	ldr	r3, [r7, #4]
 8110376:	681b      	ldr	r3, [r3, #0]
 8110378:	68fa      	ldr	r2, [r7, #12]
 811037a:	1ad3      	subs	r3, r2, r3
 811037c:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 811037e:	687b      	ldr	r3, [r7, #4]
 8110380:	689b      	ldr	r3, [r3, #8]
 8110382:	68fa      	ldr	r2, [r7, #12]
 8110384:	429a      	cmp	r2, r3
 8110386:	d304      	bcc.n	8110392 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8110388:	687b      	ldr	r3, [r7, #4]
 811038a:	689b      	ldr	r3, [r3, #8]
 811038c:	68fa      	ldr	r2, [r7, #12]
 811038e:	1ad3      	subs	r3, r2, r3
 8110390:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8110392:	68fb      	ldr	r3, [r7, #12]
}
 8110394:	4618      	mov	r0, r3
 8110396:	3714      	adds	r7, #20
 8110398:	46bd      	mov	sp, r7
 811039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811039e:	4770      	bx	lr

081103a0 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 81103a0:	b580      	push	{r7, lr}
 81103a2:	b086      	sub	sp, #24
 81103a4:	af00      	add	r7, sp, #0
 81103a6:	60f8      	str	r0, [r7, #12]
 81103a8:	60b9      	str	r1, [r7, #8]
 81103aa:	607a      	str	r2, [r7, #4]
 81103ac:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 81103ae:	2355      	movs	r3, #85	@ 0x55
 81103b0:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 81103b2:	687a      	ldr	r2, [r7, #4]
 81103b4:	6979      	ldr	r1, [r7, #20]
 81103b6:	68b8      	ldr	r0, [r7, #8]
 81103b8:	f00d fe50 	bl	811e05c <memset>
 81103bc:	4602      	mov	r2, r0
 81103be:	68bb      	ldr	r3, [r7, #8]
 81103c0:	4293      	cmp	r3, r2
 81103c2:	d00b      	beq.n	81103dc <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 81103c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81103c8:	f383 8811 	msr	BASEPRI, r3
 81103cc:	f3bf 8f6f 	isb	sy
 81103d0:	f3bf 8f4f 	dsb	sy
 81103d4:	613b      	str	r3, [r7, #16]
}
 81103d6:	bf00      	nop
 81103d8:	bf00      	nop
 81103da:	e7fd      	b.n	81103d8 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 81103dc:	2224      	movs	r2, #36	@ 0x24
 81103de:	2100      	movs	r1, #0
 81103e0:	68f8      	ldr	r0, [r7, #12]
 81103e2:	f00d fe3b 	bl	811e05c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 81103e6:	68fb      	ldr	r3, [r7, #12]
 81103e8:	68ba      	ldr	r2, [r7, #8]
 81103ea:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 81103ec:	68fb      	ldr	r3, [r7, #12]
 81103ee:	687a      	ldr	r2, [r7, #4]
 81103f0:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 81103f2:	68fb      	ldr	r3, [r7, #12]
 81103f4:	683a      	ldr	r2, [r7, #0]
 81103f6:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 81103f8:	68fb      	ldr	r3, [r7, #12]
 81103fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 81103fe:	771a      	strb	r2, [r3, #28]
}
 8110400:	bf00      	nop
 8110402:	3718      	adds	r7, #24
 8110404:	46bd      	mov	sp, r7
 8110406:	bd80      	pop	{r7, pc}

08110408 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8110408:	b580      	push	{r7, lr}
 811040a:	b08e      	sub	sp, #56	@ 0x38
 811040c:	af04      	add	r7, sp, #16
 811040e:	60f8      	str	r0, [r7, #12]
 8110410:	60b9      	str	r1, [r7, #8]
 8110412:	607a      	str	r2, [r7, #4]
 8110414:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8110416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8110418:	2b00      	cmp	r3, #0
 811041a:	d10b      	bne.n	8110434 <xTaskCreateStatic+0x2c>
	__asm volatile
 811041c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110420:	f383 8811 	msr	BASEPRI, r3
 8110424:	f3bf 8f6f 	isb	sy
 8110428:	f3bf 8f4f 	dsb	sy
 811042c:	623b      	str	r3, [r7, #32]
}
 811042e:	bf00      	nop
 8110430:	bf00      	nop
 8110432:	e7fd      	b.n	8110430 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8110434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8110436:	2b00      	cmp	r3, #0
 8110438:	d10b      	bne.n	8110452 <xTaskCreateStatic+0x4a>
	__asm volatile
 811043a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811043e:	f383 8811 	msr	BASEPRI, r3
 8110442:	f3bf 8f6f 	isb	sy
 8110446:	f3bf 8f4f 	dsb	sy
 811044a:	61fb      	str	r3, [r7, #28]
}
 811044c:	bf00      	nop
 811044e:	bf00      	nop
 8110450:	e7fd      	b.n	811044e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8110452:	23a8      	movs	r3, #168	@ 0xa8
 8110454:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8110456:	693b      	ldr	r3, [r7, #16]
 8110458:	2ba8      	cmp	r3, #168	@ 0xa8
 811045a:	d00b      	beq.n	8110474 <xTaskCreateStatic+0x6c>
	__asm volatile
 811045c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110460:	f383 8811 	msr	BASEPRI, r3
 8110464:	f3bf 8f6f 	isb	sy
 8110468:	f3bf 8f4f 	dsb	sy
 811046c:	61bb      	str	r3, [r7, #24]
}
 811046e:	bf00      	nop
 8110470:	bf00      	nop
 8110472:	e7fd      	b.n	8110470 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8110474:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8110476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8110478:	2b00      	cmp	r3, #0
 811047a:	d01e      	beq.n	81104ba <xTaskCreateStatic+0xb2>
 811047c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811047e:	2b00      	cmp	r3, #0
 8110480:	d01b      	beq.n	81104ba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8110482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8110484:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8110486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110488:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811048a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 811048c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811048e:	2202      	movs	r2, #2
 8110490:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8110494:	2300      	movs	r3, #0
 8110496:	9303      	str	r3, [sp, #12]
 8110498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811049a:	9302      	str	r3, [sp, #8]
 811049c:	f107 0314 	add.w	r3, r7, #20
 81104a0:	9301      	str	r3, [sp, #4]
 81104a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81104a4:	9300      	str	r3, [sp, #0]
 81104a6:	683b      	ldr	r3, [r7, #0]
 81104a8:	687a      	ldr	r2, [r7, #4]
 81104aa:	68b9      	ldr	r1, [r7, #8]
 81104ac:	68f8      	ldr	r0, [r7, #12]
 81104ae:	f000 f851 	bl	8110554 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81104b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81104b4:	f000 f8f6 	bl	81106a4 <prvAddNewTaskToReadyList>
 81104b8:	e001      	b.n	81104be <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 81104ba:	2300      	movs	r3, #0
 81104bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 81104be:	697b      	ldr	r3, [r7, #20]
	}
 81104c0:	4618      	mov	r0, r3
 81104c2:	3728      	adds	r7, #40	@ 0x28
 81104c4:	46bd      	mov	sp, r7
 81104c6:	bd80      	pop	{r7, pc}

081104c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 81104c8:	b580      	push	{r7, lr}
 81104ca:	b08c      	sub	sp, #48	@ 0x30
 81104cc:	af04      	add	r7, sp, #16
 81104ce:	60f8      	str	r0, [r7, #12]
 81104d0:	60b9      	str	r1, [r7, #8]
 81104d2:	603b      	str	r3, [r7, #0]
 81104d4:	4613      	mov	r3, r2
 81104d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 81104d8:	88fb      	ldrh	r3, [r7, #6]
 81104da:	009b      	lsls	r3, r3, #2
 81104dc:	4618      	mov	r0, r3
 81104de:	f7fd fd8f 	bl	810e000 <pvPortMalloc>
 81104e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 81104e4:	697b      	ldr	r3, [r7, #20]
 81104e6:	2b00      	cmp	r3, #0
 81104e8:	d00e      	beq.n	8110508 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 81104ea:	20a8      	movs	r0, #168	@ 0xa8
 81104ec:	f7fd fd88 	bl	810e000 <pvPortMalloc>
 81104f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 81104f2:	69fb      	ldr	r3, [r7, #28]
 81104f4:	2b00      	cmp	r3, #0
 81104f6:	d003      	beq.n	8110500 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 81104f8:	69fb      	ldr	r3, [r7, #28]
 81104fa:	697a      	ldr	r2, [r7, #20]
 81104fc:	631a      	str	r2, [r3, #48]	@ 0x30
 81104fe:	e005      	b.n	811050c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8110500:	6978      	ldr	r0, [r7, #20]
 8110502:	f7fd fe4b 	bl	810e19c <vPortFree>
 8110506:	e001      	b.n	811050c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8110508:	2300      	movs	r3, #0
 811050a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 811050c:	69fb      	ldr	r3, [r7, #28]
 811050e:	2b00      	cmp	r3, #0
 8110510:	d017      	beq.n	8110542 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8110512:	69fb      	ldr	r3, [r7, #28]
 8110514:	2200      	movs	r2, #0
 8110516:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 811051a:	88fa      	ldrh	r2, [r7, #6]
 811051c:	2300      	movs	r3, #0
 811051e:	9303      	str	r3, [sp, #12]
 8110520:	69fb      	ldr	r3, [r7, #28]
 8110522:	9302      	str	r3, [sp, #8]
 8110524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110526:	9301      	str	r3, [sp, #4]
 8110528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811052a:	9300      	str	r3, [sp, #0]
 811052c:	683b      	ldr	r3, [r7, #0]
 811052e:	68b9      	ldr	r1, [r7, #8]
 8110530:	68f8      	ldr	r0, [r7, #12]
 8110532:	f000 f80f 	bl	8110554 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8110536:	69f8      	ldr	r0, [r7, #28]
 8110538:	f000 f8b4 	bl	81106a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 811053c:	2301      	movs	r3, #1
 811053e:	61bb      	str	r3, [r7, #24]
 8110540:	e002      	b.n	8110548 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8110542:	f04f 33ff 	mov.w	r3, #4294967295
 8110546:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8110548:	69bb      	ldr	r3, [r7, #24]
	}
 811054a:	4618      	mov	r0, r3
 811054c:	3720      	adds	r7, #32
 811054e:	46bd      	mov	sp, r7
 8110550:	bd80      	pop	{r7, pc}
	...

08110554 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8110554:	b580      	push	{r7, lr}
 8110556:	b088      	sub	sp, #32
 8110558:	af00      	add	r7, sp, #0
 811055a:	60f8      	str	r0, [r7, #12]
 811055c:	60b9      	str	r1, [r7, #8]
 811055e:	607a      	str	r2, [r7, #4]
 8110560:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8110562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110564:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8110566:	687b      	ldr	r3, [r7, #4]
 8110568:	009b      	lsls	r3, r3, #2
 811056a:	461a      	mov	r2, r3
 811056c:	21a5      	movs	r1, #165	@ 0xa5
 811056e:	f00d fd75 	bl	811e05c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8110572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8110576:	687b      	ldr	r3, [r7, #4]
 8110578:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 811057c:	3b01      	subs	r3, #1
 811057e:	009b      	lsls	r3, r3, #2
 8110580:	4413      	add	r3, r2
 8110582:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8110584:	69bb      	ldr	r3, [r7, #24]
 8110586:	f023 0307 	bic.w	r3, r3, #7
 811058a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 811058c:	69bb      	ldr	r3, [r7, #24]
 811058e:	f003 0307 	and.w	r3, r3, #7
 8110592:	2b00      	cmp	r3, #0
 8110594:	d00b      	beq.n	81105ae <prvInitialiseNewTask+0x5a>
	__asm volatile
 8110596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811059a:	f383 8811 	msr	BASEPRI, r3
 811059e:	f3bf 8f6f 	isb	sy
 81105a2:	f3bf 8f4f 	dsb	sy
 81105a6:	617b      	str	r3, [r7, #20]
}
 81105a8:	bf00      	nop
 81105aa:	bf00      	nop
 81105ac:	e7fd      	b.n	81105aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 81105ae:	68bb      	ldr	r3, [r7, #8]
 81105b0:	2b00      	cmp	r3, #0
 81105b2:	d01f      	beq.n	81105f4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81105b4:	2300      	movs	r3, #0
 81105b6:	61fb      	str	r3, [r7, #28]
 81105b8:	e012      	b.n	81105e0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 81105ba:	68ba      	ldr	r2, [r7, #8]
 81105bc:	69fb      	ldr	r3, [r7, #28]
 81105be:	4413      	add	r3, r2
 81105c0:	7819      	ldrb	r1, [r3, #0]
 81105c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81105c4:	69fb      	ldr	r3, [r7, #28]
 81105c6:	4413      	add	r3, r2
 81105c8:	3334      	adds	r3, #52	@ 0x34
 81105ca:	460a      	mov	r2, r1
 81105cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 81105ce:	68ba      	ldr	r2, [r7, #8]
 81105d0:	69fb      	ldr	r3, [r7, #28]
 81105d2:	4413      	add	r3, r2
 81105d4:	781b      	ldrb	r3, [r3, #0]
 81105d6:	2b00      	cmp	r3, #0
 81105d8:	d006      	beq.n	81105e8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81105da:	69fb      	ldr	r3, [r7, #28]
 81105dc:	3301      	adds	r3, #1
 81105de:	61fb      	str	r3, [r7, #28]
 81105e0:	69fb      	ldr	r3, [r7, #28]
 81105e2:	2b0f      	cmp	r3, #15
 81105e4:	d9e9      	bls.n	81105ba <prvInitialiseNewTask+0x66>
 81105e6:	e000      	b.n	81105ea <prvInitialiseNewTask+0x96>
			{
				break;
 81105e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 81105ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81105ec:	2200      	movs	r2, #0
 81105ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 81105f2:	e003      	b.n	81105fc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 81105f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81105f6:	2200      	movs	r2, #0
 81105f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 81105fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81105fe:	2b37      	cmp	r3, #55	@ 0x37
 8110600:	d901      	bls.n	8110606 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8110602:	2337      	movs	r3, #55	@ 0x37
 8110604:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8110606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811060a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 811060c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811060e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8110610:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8110612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110614:	2200      	movs	r2, #0
 8110616:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8110618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811061a:	3304      	adds	r3, #4
 811061c:	4618      	mov	r0, r3
 811061e:	f7fd fefd 	bl	810e41c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8110622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110624:	3318      	adds	r3, #24
 8110626:	4618      	mov	r0, r3
 8110628:	f7fd fef8 	bl	810e41c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 811062c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811062e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8110630:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8110632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110634:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8110638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811063a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 811063c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811063e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8110640:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8110642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110644:	2200      	movs	r2, #0
 8110646:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 811064a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811064c:	2200      	movs	r2, #0
 811064e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8110652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110654:	3354      	adds	r3, #84	@ 0x54
 8110656:	224c      	movs	r2, #76	@ 0x4c
 8110658:	2100      	movs	r1, #0
 811065a:	4618      	mov	r0, r3
 811065c:	f00d fcfe 	bl	811e05c <memset>
 8110660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110662:	4a0d      	ldr	r2, [pc, #52]	@ (8110698 <prvInitialiseNewTask+0x144>)
 8110664:	659a      	str	r2, [r3, #88]	@ 0x58
 8110666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110668:	4a0c      	ldr	r2, [pc, #48]	@ (811069c <prvInitialiseNewTask+0x148>)
 811066a:	65da      	str	r2, [r3, #92]	@ 0x5c
 811066c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811066e:	4a0c      	ldr	r2, [pc, #48]	@ (81106a0 <prvInitialiseNewTask+0x14c>)
 8110670:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8110672:	683a      	ldr	r2, [r7, #0]
 8110674:	68f9      	ldr	r1, [r7, #12]
 8110676:	69b8      	ldr	r0, [r7, #24]
 8110678:	f7fd ff64 	bl	810e544 <pxPortInitialiseStack>
 811067c:	4602      	mov	r2, r0
 811067e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110680:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8110682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110684:	2b00      	cmp	r3, #0
 8110686:	d002      	beq.n	811068e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8110688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811068a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811068c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 811068e:	bf00      	nop
 8110690:	3720      	adds	r7, #32
 8110692:	46bd      	mov	sp, r7
 8110694:	bd80      	pop	{r7, pc}
 8110696:	bf00      	nop
 8110698:	100121a4 	.word	0x100121a4
 811069c:	1001220c 	.word	0x1001220c
 81106a0:	10012274 	.word	0x10012274

081106a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 81106a4:	b580      	push	{r7, lr}
 81106a6:	b082      	sub	sp, #8
 81106a8:	af00      	add	r7, sp, #0
 81106aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 81106ac:	f7fe f87c 	bl	810e7a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 81106b0:	4b2d      	ldr	r3, [pc, #180]	@ (8110768 <prvAddNewTaskToReadyList+0xc4>)
 81106b2:	681b      	ldr	r3, [r3, #0]
 81106b4:	3301      	adds	r3, #1
 81106b6:	4a2c      	ldr	r2, [pc, #176]	@ (8110768 <prvAddNewTaskToReadyList+0xc4>)
 81106b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 81106ba:	4b2c      	ldr	r3, [pc, #176]	@ (811076c <prvAddNewTaskToReadyList+0xc8>)
 81106bc:	681b      	ldr	r3, [r3, #0]
 81106be:	2b00      	cmp	r3, #0
 81106c0:	d109      	bne.n	81106d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 81106c2:	4a2a      	ldr	r2, [pc, #168]	@ (811076c <prvAddNewTaskToReadyList+0xc8>)
 81106c4:	687b      	ldr	r3, [r7, #4]
 81106c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 81106c8:	4b27      	ldr	r3, [pc, #156]	@ (8110768 <prvAddNewTaskToReadyList+0xc4>)
 81106ca:	681b      	ldr	r3, [r3, #0]
 81106cc:	2b01      	cmp	r3, #1
 81106ce:	d110      	bne.n	81106f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 81106d0:	f000 fc68 	bl	8110fa4 <prvInitialiseTaskLists>
 81106d4:	e00d      	b.n	81106f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 81106d6:	4b26      	ldr	r3, [pc, #152]	@ (8110770 <prvAddNewTaskToReadyList+0xcc>)
 81106d8:	681b      	ldr	r3, [r3, #0]
 81106da:	2b00      	cmp	r3, #0
 81106dc:	d109      	bne.n	81106f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 81106de:	4b23      	ldr	r3, [pc, #140]	@ (811076c <prvAddNewTaskToReadyList+0xc8>)
 81106e0:	681b      	ldr	r3, [r3, #0]
 81106e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81106e4:	687b      	ldr	r3, [r7, #4]
 81106e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81106e8:	429a      	cmp	r2, r3
 81106ea:	d802      	bhi.n	81106f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 81106ec:	4a1f      	ldr	r2, [pc, #124]	@ (811076c <prvAddNewTaskToReadyList+0xc8>)
 81106ee:	687b      	ldr	r3, [r7, #4]
 81106f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 81106f2:	4b20      	ldr	r3, [pc, #128]	@ (8110774 <prvAddNewTaskToReadyList+0xd0>)
 81106f4:	681b      	ldr	r3, [r3, #0]
 81106f6:	3301      	adds	r3, #1
 81106f8:	4a1e      	ldr	r2, [pc, #120]	@ (8110774 <prvAddNewTaskToReadyList+0xd0>)
 81106fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 81106fc:	4b1d      	ldr	r3, [pc, #116]	@ (8110774 <prvAddNewTaskToReadyList+0xd0>)
 81106fe:	681a      	ldr	r2, [r3, #0]
 8110700:	687b      	ldr	r3, [r7, #4]
 8110702:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8110704:	687b      	ldr	r3, [r7, #4]
 8110706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8110708:	4b1b      	ldr	r3, [pc, #108]	@ (8110778 <prvAddNewTaskToReadyList+0xd4>)
 811070a:	681b      	ldr	r3, [r3, #0]
 811070c:	429a      	cmp	r2, r3
 811070e:	d903      	bls.n	8110718 <prvAddNewTaskToReadyList+0x74>
 8110710:	687b      	ldr	r3, [r7, #4]
 8110712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110714:	4a18      	ldr	r2, [pc, #96]	@ (8110778 <prvAddNewTaskToReadyList+0xd4>)
 8110716:	6013      	str	r3, [r2, #0]
 8110718:	687b      	ldr	r3, [r7, #4]
 811071a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811071c:	4613      	mov	r3, r2
 811071e:	009b      	lsls	r3, r3, #2
 8110720:	4413      	add	r3, r2
 8110722:	009b      	lsls	r3, r3, #2
 8110724:	4a15      	ldr	r2, [pc, #84]	@ (811077c <prvAddNewTaskToReadyList+0xd8>)
 8110726:	441a      	add	r2, r3
 8110728:	687b      	ldr	r3, [r7, #4]
 811072a:	3304      	adds	r3, #4
 811072c:	4619      	mov	r1, r3
 811072e:	4610      	mov	r0, r2
 8110730:	f7fd fe81 	bl	810e436 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8110734:	f7fe f86a 	bl	810e80c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8110738:	4b0d      	ldr	r3, [pc, #52]	@ (8110770 <prvAddNewTaskToReadyList+0xcc>)
 811073a:	681b      	ldr	r3, [r3, #0]
 811073c:	2b00      	cmp	r3, #0
 811073e:	d00e      	beq.n	811075e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8110740:	4b0a      	ldr	r3, [pc, #40]	@ (811076c <prvAddNewTaskToReadyList+0xc8>)
 8110742:	681b      	ldr	r3, [r3, #0]
 8110744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8110746:	687b      	ldr	r3, [r7, #4]
 8110748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811074a:	429a      	cmp	r2, r3
 811074c:	d207      	bcs.n	811075e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 811074e:	4b0c      	ldr	r3, [pc, #48]	@ (8110780 <prvAddNewTaskToReadyList+0xdc>)
 8110750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8110754:	601a      	str	r2, [r3, #0]
 8110756:	f3bf 8f4f 	dsb	sy
 811075a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 811075e:	bf00      	nop
 8110760:	3708      	adds	r7, #8
 8110762:	46bd      	mov	sp, r7
 8110764:	bd80      	pop	{r7, pc}
 8110766:	bf00      	nop
 8110768:	1000b050 	.word	0x1000b050
 811076c:	1000ab7c 	.word	0x1000ab7c
 8110770:	1000b05c 	.word	0x1000b05c
 8110774:	1000b06c 	.word	0x1000b06c
 8110778:	1000b058 	.word	0x1000b058
 811077c:	1000ab80 	.word	0x1000ab80
 8110780:	e000ed04 	.word	0xe000ed04

08110784 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8110784:	b580      	push	{r7, lr}
 8110786:	b084      	sub	sp, #16
 8110788:	af00      	add	r7, sp, #0
 811078a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 811078c:	2300      	movs	r3, #0
 811078e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8110790:	687b      	ldr	r3, [r7, #4]
 8110792:	2b00      	cmp	r3, #0
 8110794:	d018      	beq.n	81107c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8110796:	4b14      	ldr	r3, [pc, #80]	@ (81107e8 <vTaskDelay+0x64>)
 8110798:	681b      	ldr	r3, [r3, #0]
 811079a:	2b00      	cmp	r3, #0
 811079c:	d00b      	beq.n	81107b6 <vTaskDelay+0x32>
	__asm volatile
 811079e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81107a2:	f383 8811 	msr	BASEPRI, r3
 81107a6:	f3bf 8f6f 	isb	sy
 81107aa:	f3bf 8f4f 	dsb	sy
 81107ae:	60bb      	str	r3, [r7, #8]
}
 81107b0:	bf00      	nop
 81107b2:	bf00      	nop
 81107b4:	e7fd      	b.n	81107b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 81107b6:	f000 f88b 	bl	81108d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 81107ba:	2100      	movs	r1, #0
 81107bc:	6878      	ldr	r0, [r7, #4]
 81107be:	f000 ffbf 	bl	8111740 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 81107c2:	f000 f893 	bl	81108ec <xTaskResumeAll>
 81107c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 81107c8:	68fb      	ldr	r3, [r7, #12]
 81107ca:	2b00      	cmp	r3, #0
 81107cc:	d107      	bne.n	81107de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 81107ce:	4b07      	ldr	r3, [pc, #28]	@ (81107ec <vTaskDelay+0x68>)
 81107d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81107d4:	601a      	str	r2, [r3, #0]
 81107d6:	f3bf 8f4f 	dsb	sy
 81107da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 81107de:	bf00      	nop
 81107e0:	3710      	adds	r7, #16
 81107e2:	46bd      	mov	sp, r7
 81107e4:	bd80      	pop	{r7, pc}
 81107e6:	bf00      	nop
 81107e8:	1000b078 	.word	0x1000b078
 81107ec:	e000ed04 	.word	0xe000ed04

081107f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 81107f0:	b580      	push	{r7, lr}
 81107f2:	b08a      	sub	sp, #40	@ 0x28
 81107f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 81107f6:	2300      	movs	r3, #0
 81107f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 81107fa:	2300      	movs	r3, #0
 81107fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 81107fe:	463a      	mov	r2, r7
 8110800:	1d39      	adds	r1, r7, #4
 8110802:	f107 0308 	add.w	r3, r7, #8
 8110806:	4618      	mov	r0, r3
 8110808:	f7fd fbc6 	bl	810df98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 811080c:	6839      	ldr	r1, [r7, #0]
 811080e:	687b      	ldr	r3, [r7, #4]
 8110810:	68ba      	ldr	r2, [r7, #8]
 8110812:	9202      	str	r2, [sp, #8]
 8110814:	9301      	str	r3, [sp, #4]
 8110816:	2300      	movs	r3, #0
 8110818:	9300      	str	r3, [sp, #0]
 811081a:	2300      	movs	r3, #0
 811081c:	460a      	mov	r2, r1
 811081e:	4924      	ldr	r1, [pc, #144]	@ (81108b0 <vTaskStartScheduler+0xc0>)
 8110820:	4824      	ldr	r0, [pc, #144]	@ (81108b4 <vTaskStartScheduler+0xc4>)
 8110822:	f7ff fdf1 	bl	8110408 <xTaskCreateStatic>
 8110826:	4603      	mov	r3, r0
 8110828:	4a23      	ldr	r2, [pc, #140]	@ (81108b8 <vTaskStartScheduler+0xc8>)
 811082a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 811082c:	4b22      	ldr	r3, [pc, #136]	@ (81108b8 <vTaskStartScheduler+0xc8>)
 811082e:	681b      	ldr	r3, [r3, #0]
 8110830:	2b00      	cmp	r3, #0
 8110832:	d002      	beq.n	811083a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8110834:	2301      	movs	r3, #1
 8110836:	617b      	str	r3, [r7, #20]
 8110838:	e001      	b.n	811083e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 811083a:	2300      	movs	r3, #0
 811083c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 811083e:	697b      	ldr	r3, [r7, #20]
 8110840:	2b01      	cmp	r3, #1
 8110842:	d102      	bne.n	811084a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8110844:	f000 ffd0 	bl	81117e8 <xTimerCreateTimerTask>
 8110848:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 811084a:	697b      	ldr	r3, [r7, #20]
 811084c:	2b01      	cmp	r3, #1
 811084e:	d11b      	bne.n	8110888 <vTaskStartScheduler+0x98>
	__asm volatile
 8110850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110854:	f383 8811 	msr	BASEPRI, r3
 8110858:	f3bf 8f6f 	isb	sy
 811085c:	f3bf 8f4f 	dsb	sy
 8110860:	613b      	str	r3, [r7, #16]
}
 8110862:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8110864:	4b15      	ldr	r3, [pc, #84]	@ (81108bc <vTaskStartScheduler+0xcc>)
 8110866:	681b      	ldr	r3, [r3, #0]
 8110868:	3354      	adds	r3, #84	@ 0x54
 811086a:	4a15      	ldr	r2, [pc, #84]	@ (81108c0 <vTaskStartScheduler+0xd0>)
 811086c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 811086e:	4b15      	ldr	r3, [pc, #84]	@ (81108c4 <vTaskStartScheduler+0xd4>)
 8110870:	f04f 32ff 	mov.w	r2, #4294967295
 8110874:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8110876:	4b14      	ldr	r3, [pc, #80]	@ (81108c8 <vTaskStartScheduler+0xd8>)
 8110878:	2201      	movs	r2, #1
 811087a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 811087c:	4b13      	ldr	r3, [pc, #76]	@ (81108cc <vTaskStartScheduler+0xdc>)
 811087e:	2200      	movs	r2, #0
 8110880:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8110882:	f7fd feed 	bl	810e660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8110886:	e00f      	b.n	81108a8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8110888:	697b      	ldr	r3, [r7, #20]
 811088a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811088e:	d10b      	bne.n	81108a8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8110890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110894:	f383 8811 	msr	BASEPRI, r3
 8110898:	f3bf 8f6f 	isb	sy
 811089c:	f3bf 8f4f 	dsb	sy
 81108a0:	60fb      	str	r3, [r7, #12]
}
 81108a2:	bf00      	nop
 81108a4:	bf00      	nop
 81108a6:	e7fd      	b.n	81108a4 <vTaskStartScheduler+0xb4>
}
 81108a8:	bf00      	nop
 81108aa:	3718      	adds	r7, #24
 81108ac:	46bd      	mov	sp, r7
 81108ae:	bd80      	pop	{r7, pc}
 81108b0:	0811f4f0 	.word	0x0811f4f0
 81108b4:	08110f75 	.word	0x08110f75
 81108b8:	1000b074 	.word	0x1000b074
 81108bc:	1000ab7c 	.word	0x1000ab7c
 81108c0:	10000040 	.word	0x10000040
 81108c4:	1000b070 	.word	0x1000b070
 81108c8:	1000b05c 	.word	0x1000b05c
 81108cc:	1000b054 	.word	0x1000b054

081108d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 81108d0:	b480      	push	{r7}
 81108d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 81108d4:	4b04      	ldr	r3, [pc, #16]	@ (81108e8 <vTaskSuspendAll+0x18>)
 81108d6:	681b      	ldr	r3, [r3, #0]
 81108d8:	3301      	adds	r3, #1
 81108da:	4a03      	ldr	r2, [pc, #12]	@ (81108e8 <vTaskSuspendAll+0x18>)
 81108dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 81108de:	bf00      	nop
 81108e0:	46bd      	mov	sp, r7
 81108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81108e6:	4770      	bx	lr
 81108e8:	1000b078 	.word	0x1000b078

081108ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 81108ec:	b580      	push	{r7, lr}
 81108ee:	b084      	sub	sp, #16
 81108f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 81108f2:	2300      	movs	r3, #0
 81108f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 81108f6:	2300      	movs	r3, #0
 81108f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 81108fa:	4b42      	ldr	r3, [pc, #264]	@ (8110a04 <xTaskResumeAll+0x118>)
 81108fc:	681b      	ldr	r3, [r3, #0]
 81108fe:	2b00      	cmp	r3, #0
 8110900:	d10b      	bne.n	811091a <xTaskResumeAll+0x2e>
	__asm volatile
 8110902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110906:	f383 8811 	msr	BASEPRI, r3
 811090a:	f3bf 8f6f 	isb	sy
 811090e:	f3bf 8f4f 	dsb	sy
 8110912:	603b      	str	r3, [r7, #0]
}
 8110914:	bf00      	nop
 8110916:	bf00      	nop
 8110918:	e7fd      	b.n	8110916 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 811091a:	f7fd ff45 	bl	810e7a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 811091e:	4b39      	ldr	r3, [pc, #228]	@ (8110a04 <xTaskResumeAll+0x118>)
 8110920:	681b      	ldr	r3, [r3, #0]
 8110922:	3b01      	subs	r3, #1
 8110924:	4a37      	ldr	r2, [pc, #220]	@ (8110a04 <xTaskResumeAll+0x118>)
 8110926:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8110928:	4b36      	ldr	r3, [pc, #216]	@ (8110a04 <xTaskResumeAll+0x118>)
 811092a:	681b      	ldr	r3, [r3, #0]
 811092c:	2b00      	cmp	r3, #0
 811092e:	d162      	bne.n	81109f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8110930:	4b35      	ldr	r3, [pc, #212]	@ (8110a08 <xTaskResumeAll+0x11c>)
 8110932:	681b      	ldr	r3, [r3, #0]
 8110934:	2b00      	cmp	r3, #0
 8110936:	d05e      	beq.n	81109f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8110938:	e02f      	b.n	811099a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 811093a:	4b34      	ldr	r3, [pc, #208]	@ (8110a0c <xTaskResumeAll+0x120>)
 811093c:	68db      	ldr	r3, [r3, #12]
 811093e:	68db      	ldr	r3, [r3, #12]
 8110940:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8110942:	68fb      	ldr	r3, [r7, #12]
 8110944:	3318      	adds	r3, #24
 8110946:	4618      	mov	r0, r3
 8110948:	f7fd fdd2 	bl	810e4f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 811094c:	68fb      	ldr	r3, [r7, #12]
 811094e:	3304      	adds	r3, #4
 8110950:	4618      	mov	r0, r3
 8110952:	f7fd fdcd 	bl	810e4f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8110956:	68fb      	ldr	r3, [r7, #12]
 8110958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811095a:	4b2d      	ldr	r3, [pc, #180]	@ (8110a10 <xTaskResumeAll+0x124>)
 811095c:	681b      	ldr	r3, [r3, #0]
 811095e:	429a      	cmp	r2, r3
 8110960:	d903      	bls.n	811096a <xTaskResumeAll+0x7e>
 8110962:	68fb      	ldr	r3, [r7, #12]
 8110964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110966:	4a2a      	ldr	r2, [pc, #168]	@ (8110a10 <xTaskResumeAll+0x124>)
 8110968:	6013      	str	r3, [r2, #0]
 811096a:	68fb      	ldr	r3, [r7, #12]
 811096c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811096e:	4613      	mov	r3, r2
 8110970:	009b      	lsls	r3, r3, #2
 8110972:	4413      	add	r3, r2
 8110974:	009b      	lsls	r3, r3, #2
 8110976:	4a27      	ldr	r2, [pc, #156]	@ (8110a14 <xTaskResumeAll+0x128>)
 8110978:	441a      	add	r2, r3
 811097a:	68fb      	ldr	r3, [r7, #12]
 811097c:	3304      	adds	r3, #4
 811097e:	4619      	mov	r1, r3
 8110980:	4610      	mov	r0, r2
 8110982:	f7fd fd58 	bl	810e436 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8110986:	68fb      	ldr	r3, [r7, #12]
 8110988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811098a:	4b23      	ldr	r3, [pc, #140]	@ (8110a18 <xTaskResumeAll+0x12c>)
 811098c:	681b      	ldr	r3, [r3, #0]
 811098e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110990:	429a      	cmp	r2, r3
 8110992:	d302      	bcc.n	811099a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8110994:	4b21      	ldr	r3, [pc, #132]	@ (8110a1c <xTaskResumeAll+0x130>)
 8110996:	2201      	movs	r2, #1
 8110998:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 811099a:	4b1c      	ldr	r3, [pc, #112]	@ (8110a0c <xTaskResumeAll+0x120>)
 811099c:	681b      	ldr	r3, [r3, #0]
 811099e:	2b00      	cmp	r3, #0
 81109a0:	d1cb      	bne.n	811093a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 81109a2:	68fb      	ldr	r3, [r7, #12]
 81109a4:	2b00      	cmp	r3, #0
 81109a6:	d001      	beq.n	81109ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 81109a8:	f000 fba0 	bl	81110ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 81109ac:	4b1c      	ldr	r3, [pc, #112]	@ (8110a20 <xTaskResumeAll+0x134>)
 81109ae:	681b      	ldr	r3, [r3, #0]
 81109b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 81109b2:	687b      	ldr	r3, [r7, #4]
 81109b4:	2b00      	cmp	r3, #0
 81109b6:	d010      	beq.n	81109da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 81109b8:	f000 f858 	bl	8110a6c <xTaskIncrementTick>
 81109bc:	4603      	mov	r3, r0
 81109be:	2b00      	cmp	r3, #0
 81109c0:	d002      	beq.n	81109c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 81109c2:	4b16      	ldr	r3, [pc, #88]	@ (8110a1c <xTaskResumeAll+0x130>)
 81109c4:	2201      	movs	r2, #1
 81109c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 81109c8:	687b      	ldr	r3, [r7, #4]
 81109ca:	3b01      	subs	r3, #1
 81109cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 81109ce:	687b      	ldr	r3, [r7, #4]
 81109d0:	2b00      	cmp	r3, #0
 81109d2:	d1f1      	bne.n	81109b8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 81109d4:	4b12      	ldr	r3, [pc, #72]	@ (8110a20 <xTaskResumeAll+0x134>)
 81109d6:	2200      	movs	r2, #0
 81109d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 81109da:	4b10      	ldr	r3, [pc, #64]	@ (8110a1c <xTaskResumeAll+0x130>)
 81109dc:	681b      	ldr	r3, [r3, #0]
 81109de:	2b00      	cmp	r3, #0
 81109e0:	d009      	beq.n	81109f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 81109e2:	2301      	movs	r3, #1
 81109e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 81109e6:	4b0f      	ldr	r3, [pc, #60]	@ (8110a24 <xTaskResumeAll+0x138>)
 81109e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81109ec:	601a      	str	r2, [r3, #0]
 81109ee:	f3bf 8f4f 	dsb	sy
 81109f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81109f6:	f7fd ff09 	bl	810e80c <vPortExitCritical>

	return xAlreadyYielded;
 81109fa:	68bb      	ldr	r3, [r7, #8]
}
 81109fc:	4618      	mov	r0, r3
 81109fe:	3710      	adds	r7, #16
 8110a00:	46bd      	mov	sp, r7
 8110a02:	bd80      	pop	{r7, pc}
 8110a04:	1000b078 	.word	0x1000b078
 8110a08:	1000b050 	.word	0x1000b050
 8110a0c:	1000b010 	.word	0x1000b010
 8110a10:	1000b058 	.word	0x1000b058
 8110a14:	1000ab80 	.word	0x1000ab80
 8110a18:	1000ab7c 	.word	0x1000ab7c
 8110a1c:	1000b064 	.word	0x1000b064
 8110a20:	1000b060 	.word	0x1000b060
 8110a24:	e000ed04 	.word	0xe000ed04

08110a28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8110a28:	b480      	push	{r7}
 8110a2a:	b083      	sub	sp, #12
 8110a2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8110a2e:	4b05      	ldr	r3, [pc, #20]	@ (8110a44 <xTaskGetTickCount+0x1c>)
 8110a30:	681b      	ldr	r3, [r3, #0]
 8110a32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8110a34:	687b      	ldr	r3, [r7, #4]
}
 8110a36:	4618      	mov	r0, r3
 8110a38:	370c      	adds	r7, #12
 8110a3a:	46bd      	mov	sp, r7
 8110a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110a40:	4770      	bx	lr
 8110a42:	bf00      	nop
 8110a44:	1000b054 	.word	0x1000b054

08110a48 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8110a48:	b580      	push	{r7, lr}
 8110a4a:	b082      	sub	sp, #8
 8110a4c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8110a4e:	f7fd ff8b 	bl	810e968 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8110a52:	2300      	movs	r3, #0
 8110a54:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8110a56:	4b04      	ldr	r3, [pc, #16]	@ (8110a68 <xTaskGetTickCountFromISR+0x20>)
 8110a58:	681b      	ldr	r3, [r3, #0]
 8110a5a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8110a5c:	683b      	ldr	r3, [r7, #0]
}
 8110a5e:	4618      	mov	r0, r3
 8110a60:	3708      	adds	r7, #8
 8110a62:	46bd      	mov	sp, r7
 8110a64:	bd80      	pop	{r7, pc}
 8110a66:	bf00      	nop
 8110a68:	1000b054 	.word	0x1000b054

08110a6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8110a6c:	b580      	push	{r7, lr}
 8110a6e:	b086      	sub	sp, #24
 8110a70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8110a72:	2300      	movs	r3, #0
 8110a74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8110a76:	4b4f      	ldr	r3, [pc, #316]	@ (8110bb4 <xTaskIncrementTick+0x148>)
 8110a78:	681b      	ldr	r3, [r3, #0]
 8110a7a:	2b00      	cmp	r3, #0
 8110a7c:	f040 8090 	bne.w	8110ba0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8110a80:	4b4d      	ldr	r3, [pc, #308]	@ (8110bb8 <xTaskIncrementTick+0x14c>)
 8110a82:	681b      	ldr	r3, [r3, #0]
 8110a84:	3301      	adds	r3, #1
 8110a86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8110a88:	4a4b      	ldr	r2, [pc, #300]	@ (8110bb8 <xTaskIncrementTick+0x14c>)
 8110a8a:	693b      	ldr	r3, [r7, #16]
 8110a8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8110a8e:	693b      	ldr	r3, [r7, #16]
 8110a90:	2b00      	cmp	r3, #0
 8110a92:	d121      	bne.n	8110ad8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8110a94:	4b49      	ldr	r3, [pc, #292]	@ (8110bbc <xTaskIncrementTick+0x150>)
 8110a96:	681b      	ldr	r3, [r3, #0]
 8110a98:	681b      	ldr	r3, [r3, #0]
 8110a9a:	2b00      	cmp	r3, #0
 8110a9c:	d00b      	beq.n	8110ab6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8110a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110aa2:	f383 8811 	msr	BASEPRI, r3
 8110aa6:	f3bf 8f6f 	isb	sy
 8110aaa:	f3bf 8f4f 	dsb	sy
 8110aae:	603b      	str	r3, [r7, #0]
}
 8110ab0:	bf00      	nop
 8110ab2:	bf00      	nop
 8110ab4:	e7fd      	b.n	8110ab2 <xTaskIncrementTick+0x46>
 8110ab6:	4b41      	ldr	r3, [pc, #260]	@ (8110bbc <xTaskIncrementTick+0x150>)
 8110ab8:	681b      	ldr	r3, [r3, #0]
 8110aba:	60fb      	str	r3, [r7, #12]
 8110abc:	4b40      	ldr	r3, [pc, #256]	@ (8110bc0 <xTaskIncrementTick+0x154>)
 8110abe:	681b      	ldr	r3, [r3, #0]
 8110ac0:	4a3e      	ldr	r2, [pc, #248]	@ (8110bbc <xTaskIncrementTick+0x150>)
 8110ac2:	6013      	str	r3, [r2, #0]
 8110ac4:	4a3e      	ldr	r2, [pc, #248]	@ (8110bc0 <xTaskIncrementTick+0x154>)
 8110ac6:	68fb      	ldr	r3, [r7, #12]
 8110ac8:	6013      	str	r3, [r2, #0]
 8110aca:	4b3e      	ldr	r3, [pc, #248]	@ (8110bc4 <xTaskIncrementTick+0x158>)
 8110acc:	681b      	ldr	r3, [r3, #0]
 8110ace:	3301      	adds	r3, #1
 8110ad0:	4a3c      	ldr	r2, [pc, #240]	@ (8110bc4 <xTaskIncrementTick+0x158>)
 8110ad2:	6013      	str	r3, [r2, #0]
 8110ad4:	f000 fb0a 	bl	81110ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8110ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8110bc8 <xTaskIncrementTick+0x15c>)
 8110ada:	681b      	ldr	r3, [r3, #0]
 8110adc:	693a      	ldr	r2, [r7, #16]
 8110ade:	429a      	cmp	r2, r3
 8110ae0:	d349      	bcc.n	8110b76 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8110ae2:	4b36      	ldr	r3, [pc, #216]	@ (8110bbc <xTaskIncrementTick+0x150>)
 8110ae4:	681b      	ldr	r3, [r3, #0]
 8110ae6:	681b      	ldr	r3, [r3, #0]
 8110ae8:	2b00      	cmp	r3, #0
 8110aea:	d104      	bne.n	8110af6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8110aec:	4b36      	ldr	r3, [pc, #216]	@ (8110bc8 <xTaskIncrementTick+0x15c>)
 8110aee:	f04f 32ff 	mov.w	r2, #4294967295
 8110af2:	601a      	str	r2, [r3, #0]
					break;
 8110af4:	e03f      	b.n	8110b76 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8110af6:	4b31      	ldr	r3, [pc, #196]	@ (8110bbc <xTaskIncrementTick+0x150>)
 8110af8:	681b      	ldr	r3, [r3, #0]
 8110afa:	68db      	ldr	r3, [r3, #12]
 8110afc:	68db      	ldr	r3, [r3, #12]
 8110afe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8110b00:	68bb      	ldr	r3, [r7, #8]
 8110b02:	685b      	ldr	r3, [r3, #4]
 8110b04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8110b06:	693a      	ldr	r2, [r7, #16]
 8110b08:	687b      	ldr	r3, [r7, #4]
 8110b0a:	429a      	cmp	r2, r3
 8110b0c:	d203      	bcs.n	8110b16 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8110b0e:	4a2e      	ldr	r2, [pc, #184]	@ (8110bc8 <xTaskIncrementTick+0x15c>)
 8110b10:	687b      	ldr	r3, [r7, #4]
 8110b12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8110b14:	e02f      	b.n	8110b76 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8110b16:	68bb      	ldr	r3, [r7, #8]
 8110b18:	3304      	adds	r3, #4
 8110b1a:	4618      	mov	r0, r3
 8110b1c:	f7fd fce8 	bl	810e4f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8110b20:	68bb      	ldr	r3, [r7, #8]
 8110b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8110b24:	2b00      	cmp	r3, #0
 8110b26:	d004      	beq.n	8110b32 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8110b28:	68bb      	ldr	r3, [r7, #8]
 8110b2a:	3318      	adds	r3, #24
 8110b2c:	4618      	mov	r0, r3
 8110b2e:	f7fd fcdf 	bl	810e4f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8110b32:	68bb      	ldr	r3, [r7, #8]
 8110b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8110b36:	4b25      	ldr	r3, [pc, #148]	@ (8110bcc <xTaskIncrementTick+0x160>)
 8110b38:	681b      	ldr	r3, [r3, #0]
 8110b3a:	429a      	cmp	r2, r3
 8110b3c:	d903      	bls.n	8110b46 <xTaskIncrementTick+0xda>
 8110b3e:	68bb      	ldr	r3, [r7, #8]
 8110b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110b42:	4a22      	ldr	r2, [pc, #136]	@ (8110bcc <xTaskIncrementTick+0x160>)
 8110b44:	6013      	str	r3, [r2, #0]
 8110b46:	68bb      	ldr	r3, [r7, #8]
 8110b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8110b4a:	4613      	mov	r3, r2
 8110b4c:	009b      	lsls	r3, r3, #2
 8110b4e:	4413      	add	r3, r2
 8110b50:	009b      	lsls	r3, r3, #2
 8110b52:	4a1f      	ldr	r2, [pc, #124]	@ (8110bd0 <xTaskIncrementTick+0x164>)
 8110b54:	441a      	add	r2, r3
 8110b56:	68bb      	ldr	r3, [r7, #8]
 8110b58:	3304      	adds	r3, #4
 8110b5a:	4619      	mov	r1, r3
 8110b5c:	4610      	mov	r0, r2
 8110b5e:	f7fd fc6a 	bl	810e436 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8110b62:	68bb      	ldr	r3, [r7, #8]
 8110b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8110b66:	4b1b      	ldr	r3, [pc, #108]	@ (8110bd4 <xTaskIncrementTick+0x168>)
 8110b68:	681b      	ldr	r3, [r3, #0]
 8110b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110b6c:	429a      	cmp	r2, r3
 8110b6e:	d3b8      	bcc.n	8110ae2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8110b70:	2301      	movs	r3, #1
 8110b72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8110b74:	e7b5      	b.n	8110ae2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8110b76:	4b17      	ldr	r3, [pc, #92]	@ (8110bd4 <xTaskIncrementTick+0x168>)
 8110b78:	681b      	ldr	r3, [r3, #0]
 8110b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8110b7c:	4914      	ldr	r1, [pc, #80]	@ (8110bd0 <xTaskIncrementTick+0x164>)
 8110b7e:	4613      	mov	r3, r2
 8110b80:	009b      	lsls	r3, r3, #2
 8110b82:	4413      	add	r3, r2
 8110b84:	009b      	lsls	r3, r3, #2
 8110b86:	440b      	add	r3, r1
 8110b88:	681b      	ldr	r3, [r3, #0]
 8110b8a:	2b01      	cmp	r3, #1
 8110b8c:	d901      	bls.n	8110b92 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8110b8e:	2301      	movs	r3, #1
 8110b90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8110b92:	4b11      	ldr	r3, [pc, #68]	@ (8110bd8 <xTaskIncrementTick+0x16c>)
 8110b94:	681b      	ldr	r3, [r3, #0]
 8110b96:	2b00      	cmp	r3, #0
 8110b98:	d007      	beq.n	8110baa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8110b9a:	2301      	movs	r3, #1
 8110b9c:	617b      	str	r3, [r7, #20]
 8110b9e:	e004      	b.n	8110baa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8110ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8110bdc <xTaskIncrementTick+0x170>)
 8110ba2:	681b      	ldr	r3, [r3, #0]
 8110ba4:	3301      	adds	r3, #1
 8110ba6:	4a0d      	ldr	r2, [pc, #52]	@ (8110bdc <xTaskIncrementTick+0x170>)
 8110ba8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8110baa:	697b      	ldr	r3, [r7, #20]
}
 8110bac:	4618      	mov	r0, r3
 8110bae:	3718      	adds	r7, #24
 8110bb0:	46bd      	mov	sp, r7
 8110bb2:	bd80      	pop	{r7, pc}
 8110bb4:	1000b078 	.word	0x1000b078
 8110bb8:	1000b054 	.word	0x1000b054
 8110bbc:	1000b008 	.word	0x1000b008
 8110bc0:	1000b00c 	.word	0x1000b00c
 8110bc4:	1000b068 	.word	0x1000b068
 8110bc8:	1000b070 	.word	0x1000b070
 8110bcc:	1000b058 	.word	0x1000b058
 8110bd0:	1000ab80 	.word	0x1000ab80
 8110bd4:	1000ab7c 	.word	0x1000ab7c
 8110bd8:	1000b064 	.word	0x1000b064
 8110bdc:	1000b060 	.word	0x1000b060

08110be0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8110be0:	b480      	push	{r7}
 8110be2:	b085      	sub	sp, #20
 8110be4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8110be6:	4b2b      	ldr	r3, [pc, #172]	@ (8110c94 <vTaskSwitchContext+0xb4>)
 8110be8:	681b      	ldr	r3, [r3, #0]
 8110bea:	2b00      	cmp	r3, #0
 8110bec:	d003      	beq.n	8110bf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8110bee:	4b2a      	ldr	r3, [pc, #168]	@ (8110c98 <vTaskSwitchContext+0xb8>)
 8110bf0:	2201      	movs	r2, #1
 8110bf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8110bf4:	e047      	b.n	8110c86 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8110bf6:	4b28      	ldr	r3, [pc, #160]	@ (8110c98 <vTaskSwitchContext+0xb8>)
 8110bf8:	2200      	movs	r2, #0
 8110bfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8110bfc:	4b27      	ldr	r3, [pc, #156]	@ (8110c9c <vTaskSwitchContext+0xbc>)
 8110bfe:	681b      	ldr	r3, [r3, #0]
 8110c00:	60fb      	str	r3, [r7, #12]
 8110c02:	e011      	b.n	8110c28 <vTaskSwitchContext+0x48>
 8110c04:	68fb      	ldr	r3, [r7, #12]
 8110c06:	2b00      	cmp	r3, #0
 8110c08:	d10b      	bne.n	8110c22 <vTaskSwitchContext+0x42>
	__asm volatile
 8110c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110c0e:	f383 8811 	msr	BASEPRI, r3
 8110c12:	f3bf 8f6f 	isb	sy
 8110c16:	f3bf 8f4f 	dsb	sy
 8110c1a:	607b      	str	r3, [r7, #4]
}
 8110c1c:	bf00      	nop
 8110c1e:	bf00      	nop
 8110c20:	e7fd      	b.n	8110c1e <vTaskSwitchContext+0x3e>
 8110c22:	68fb      	ldr	r3, [r7, #12]
 8110c24:	3b01      	subs	r3, #1
 8110c26:	60fb      	str	r3, [r7, #12]
 8110c28:	491d      	ldr	r1, [pc, #116]	@ (8110ca0 <vTaskSwitchContext+0xc0>)
 8110c2a:	68fa      	ldr	r2, [r7, #12]
 8110c2c:	4613      	mov	r3, r2
 8110c2e:	009b      	lsls	r3, r3, #2
 8110c30:	4413      	add	r3, r2
 8110c32:	009b      	lsls	r3, r3, #2
 8110c34:	440b      	add	r3, r1
 8110c36:	681b      	ldr	r3, [r3, #0]
 8110c38:	2b00      	cmp	r3, #0
 8110c3a:	d0e3      	beq.n	8110c04 <vTaskSwitchContext+0x24>
 8110c3c:	68fa      	ldr	r2, [r7, #12]
 8110c3e:	4613      	mov	r3, r2
 8110c40:	009b      	lsls	r3, r3, #2
 8110c42:	4413      	add	r3, r2
 8110c44:	009b      	lsls	r3, r3, #2
 8110c46:	4a16      	ldr	r2, [pc, #88]	@ (8110ca0 <vTaskSwitchContext+0xc0>)
 8110c48:	4413      	add	r3, r2
 8110c4a:	60bb      	str	r3, [r7, #8]
 8110c4c:	68bb      	ldr	r3, [r7, #8]
 8110c4e:	685b      	ldr	r3, [r3, #4]
 8110c50:	685a      	ldr	r2, [r3, #4]
 8110c52:	68bb      	ldr	r3, [r7, #8]
 8110c54:	605a      	str	r2, [r3, #4]
 8110c56:	68bb      	ldr	r3, [r7, #8]
 8110c58:	685a      	ldr	r2, [r3, #4]
 8110c5a:	68bb      	ldr	r3, [r7, #8]
 8110c5c:	3308      	adds	r3, #8
 8110c5e:	429a      	cmp	r2, r3
 8110c60:	d104      	bne.n	8110c6c <vTaskSwitchContext+0x8c>
 8110c62:	68bb      	ldr	r3, [r7, #8]
 8110c64:	685b      	ldr	r3, [r3, #4]
 8110c66:	685a      	ldr	r2, [r3, #4]
 8110c68:	68bb      	ldr	r3, [r7, #8]
 8110c6a:	605a      	str	r2, [r3, #4]
 8110c6c:	68bb      	ldr	r3, [r7, #8]
 8110c6e:	685b      	ldr	r3, [r3, #4]
 8110c70:	68db      	ldr	r3, [r3, #12]
 8110c72:	4a0c      	ldr	r2, [pc, #48]	@ (8110ca4 <vTaskSwitchContext+0xc4>)
 8110c74:	6013      	str	r3, [r2, #0]
 8110c76:	4a09      	ldr	r2, [pc, #36]	@ (8110c9c <vTaskSwitchContext+0xbc>)
 8110c78:	68fb      	ldr	r3, [r7, #12]
 8110c7a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8110c7c:	4b09      	ldr	r3, [pc, #36]	@ (8110ca4 <vTaskSwitchContext+0xc4>)
 8110c7e:	681b      	ldr	r3, [r3, #0]
 8110c80:	3354      	adds	r3, #84	@ 0x54
 8110c82:	4a09      	ldr	r2, [pc, #36]	@ (8110ca8 <vTaskSwitchContext+0xc8>)
 8110c84:	6013      	str	r3, [r2, #0]
}
 8110c86:	bf00      	nop
 8110c88:	3714      	adds	r7, #20
 8110c8a:	46bd      	mov	sp, r7
 8110c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c90:	4770      	bx	lr
 8110c92:	bf00      	nop
 8110c94:	1000b078 	.word	0x1000b078
 8110c98:	1000b064 	.word	0x1000b064
 8110c9c:	1000b058 	.word	0x1000b058
 8110ca0:	1000ab80 	.word	0x1000ab80
 8110ca4:	1000ab7c 	.word	0x1000ab7c
 8110ca8:	10000040 	.word	0x10000040

08110cac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8110cac:	b580      	push	{r7, lr}
 8110cae:	b084      	sub	sp, #16
 8110cb0:	af00      	add	r7, sp, #0
 8110cb2:	6078      	str	r0, [r7, #4]
 8110cb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8110cb6:	687b      	ldr	r3, [r7, #4]
 8110cb8:	2b00      	cmp	r3, #0
 8110cba:	d10b      	bne.n	8110cd4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8110cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110cc0:	f383 8811 	msr	BASEPRI, r3
 8110cc4:	f3bf 8f6f 	isb	sy
 8110cc8:	f3bf 8f4f 	dsb	sy
 8110ccc:	60fb      	str	r3, [r7, #12]
}
 8110cce:	bf00      	nop
 8110cd0:	bf00      	nop
 8110cd2:	e7fd      	b.n	8110cd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8110cd4:	4b07      	ldr	r3, [pc, #28]	@ (8110cf4 <vTaskPlaceOnEventList+0x48>)
 8110cd6:	681b      	ldr	r3, [r3, #0]
 8110cd8:	3318      	adds	r3, #24
 8110cda:	4619      	mov	r1, r3
 8110cdc:	6878      	ldr	r0, [r7, #4]
 8110cde:	f7fd fbce 	bl	810e47e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8110ce2:	2101      	movs	r1, #1
 8110ce4:	6838      	ldr	r0, [r7, #0]
 8110ce6:	f000 fd2b 	bl	8111740 <prvAddCurrentTaskToDelayedList>
}
 8110cea:	bf00      	nop
 8110cec:	3710      	adds	r7, #16
 8110cee:	46bd      	mov	sp, r7
 8110cf0:	bd80      	pop	{r7, pc}
 8110cf2:	bf00      	nop
 8110cf4:	1000ab7c 	.word	0x1000ab7c

08110cf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8110cf8:	b580      	push	{r7, lr}
 8110cfa:	b086      	sub	sp, #24
 8110cfc:	af00      	add	r7, sp, #0
 8110cfe:	60f8      	str	r0, [r7, #12]
 8110d00:	60b9      	str	r1, [r7, #8]
 8110d02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8110d04:	68fb      	ldr	r3, [r7, #12]
 8110d06:	2b00      	cmp	r3, #0
 8110d08:	d10b      	bne.n	8110d22 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8110d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110d0e:	f383 8811 	msr	BASEPRI, r3
 8110d12:	f3bf 8f6f 	isb	sy
 8110d16:	f3bf 8f4f 	dsb	sy
 8110d1a:	617b      	str	r3, [r7, #20]
}
 8110d1c:	bf00      	nop
 8110d1e:	bf00      	nop
 8110d20:	e7fd      	b.n	8110d1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8110d22:	4b0a      	ldr	r3, [pc, #40]	@ (8110d4c <vTaskPlaceOnEventListRestricted+0x54>)
 8110d24:	681b      	ldr	r3, [r3, #0]
 8110d26:	3318      	adds	r3, #24
 8110d28:	4619      	mov	r1, r3
 8110d2a:	68f8      	ldr	r0, [r7, #12]
 8110d2c:	f7fd fb83 	bl	810e436 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8110d30:	687b      	ldr	r3, [r7, #4]
 8110d32:	2b00      	cmp	r3, #0
 8110d34:	d002      	beq.n	8110d3c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8110d36:	f04f 33ff 	mov.w	r3, #4294967295
 8110d3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8110d3c:	6879      	ldr	r1, [r7, #4]
 8110d3e:	68b8      	ldr	r0, [r7, #8]
 8110d40:	f000 fcfe 	bl	8111740 <prvAddCurrentTaskToDelayedList>
	}
 8110d44:	bf00      	nop
 8110d46:	3718      	adds	r7, #24
 8110d48:	46bd      	mov	sp, r7
 8110d4a:	bd80      	pop	{r7, pc}
 8110d4c:	1000ab7c 	.word	0x1000ab7c

08110d50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8110d50:	b580      	push	{r7, lr}
 8110d52:	b086      	sub	sp, #24
 8110d54:	af00      	add	r7, sp, #0
 8110d56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8110d58:	687b      	ldr	r3, [r7, #4]
 8110d5a:	68db      	ldr	r3, [r3, #12]
 8110d5c:	68db      	ldr	r3, [r3, #12]
 8110d5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8110d60:	693b      	ldr	r3, [r7, #16]
 8110d62:	2b00      	cmp	r3, #0
 8110d64:	d10b      	bne.n	8110d7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8110d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110d6a:	f383 8811 	msr	BASEPRI, r3
 8110d6e:	f3bf 8f6f 	isb	sy
 8110d72:	f3bf 8f4f 	dsb	sy
 8110d76:	60fb      	str	r3, [r7, #12]
}
 8110d78:	bf00      	nop
 8110d7a:	bf00      	nop
 8110d7c:	e7fd      	b.n	8110d7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8110d7e:	693b      	ldr	r3, [r7, #16]
 8110d80:	3318      	adds	r3, #24
 8110d82:	4618      	mov	r0, r3
 8110d84:	f7fd fbb4 	bl	810e4f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8110d88:	4b1d      	ldr	r3, [pc, #116]	@ (8110e00 <xTaskRemoveFromEventList+0xb0>)
 8110d8a:	681b      	ldr	r3, [r3, #0]
 8110d8c:	2b00      	cmp	r3, #0
 8110d8e:	d11d      	bne.n	8110dcc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8110d90:	693b      	ldr	r3, [r7, #16]
 8110d92:	3304      	adds	r3, #4
 8110d94:	4618      	mov	r0, r3
 8110d96:	f7fd fbab 	bl	810e4f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8110d9a:	693b      	ldr	r3, [r7, #16]
 8110d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8110d9e:	4b19      	ldr	r3, [pc, #100]	@ (8110e04 <xTaskRemoveFromEventList+0xb4>)
 8110da0:	681b      	ldr	r3, [r3, #0]
 8110da2:	429a      	cmp	r2, r3
 8110da4:	d903      	bls.n	8110dae <xTaskRemoveFromEventList+0x5e>
 8110da6:	693b      	ldr	r3, [r7, #16]
 8110da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110daa:	4a16      	ldr	r2, [pc, #88]	@ (8110e04 <xTaskRemoveFromEventList+0xb4>)
 8110dac:	6013      	str	r3, [r2, #0]
 8110dae:	693b      	ldr	r3, [r7, #16]
 8110db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8110db2:	4613      	mov	r3, r2
 8110db4:	009b      	lsls	r3, r3, #2
 8110db6:	4413      	add	r3, r2
 8110db8:	009b      	lsls	r3, r3, #2
 8110dba:	4a13      	ldr	r2, [pc, #76]	@ (8110e08 <xTaskRemoveFromEventList+0xb8>)
 8110dbc:	441a      	add	r2, r3
 8110dbe:	693b      	ldr	r3, [r7, #16]
 8110dc0:	3304      	adds	r3, #4
 8110dc2:	4619      	mov	r1, r3
 8110dc4:	4610      	mov	r0, r2
 8110dc6:	f7fd fb36 	bl	810e436 <vListInsertEnd>
 8110dca:	e005      	b.n	8110dd8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8110dcc:	693b      	ldr	r3, [r7, #16]
 8110dce:	3318      	adds	r3, #24
 8110dd0:	4619      	mov	r1, r3
 8110dd2:	480e      	ldr	r0, [pc, #56]	@ (8110e0c <xTaskRemoveFromEventList+0xbc>)
 8110dd4:	f7fd fb2f 	bl	810e436 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8110dd8:	693b      	ldr	r3, [r7, #16]
 8110dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8110ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8110e10 <xTaskRemoveFromEventList+0xc0>)
 8110dde:	681b      	ldr	r3, [r3, #0]
 8110de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110de2:	429a      	cmp	r2, r3
 8110de4:	d905      	bls.n	8110df2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8110de6:	2301      	movs	r3, #1
 8110de8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8110dea:	4b0a      	ldr	r3, [pc, #40]	@ (8110e14 <xTaskRemoveFromEventList+0xc4>)
 8110dec:	2201      	movs	r2, #1
 8110dee:	601a      	str	r2, [r3, #0]
 8110df0:	e001      	b.n	8110df6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8110df2:	2300      	movs	r3, #0
 8110df4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8110df6:	697b      	ldr	r3, [r7, #20]
}
 8110df8:	4618      	mov	r0, r3
 8110dfa:	3718      	adds	r7, #24
 8110dfc:	46bd      	mov	sp, r7
 8110dfe:	bd80      	pop	{r7, pc}
 8110e00:	1000b078 	.word	0x1000b078
 8110e04:	1000b058 	.word	0x1000b058
 8110e08:	1000ab80 	.word	0x1000ab80
 8110e0c:	1000b010 	.word	0x1000b010
 8110e10:	1000ab7c 	.word	0x1000ab7c
 8110e14:	1000b064 	.word	0x1000b064

08110e18 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8110e18:	b580      	push	{r7, lr}
 8110e1a:	b084      	sub	sp, #16
 8110e1c:	af00      	add	r7, sp, #0
 8110e1e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8110e20:	687b      	ldr	r3, [r7, #4]
 8110e22:	2b00      	cmp	r3, #0
 8110e24:	d10b      	bne.n	8110e3e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8110e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110e2a:	f383 8811 	msr	BASEPRI, r3
 8110e2e:	f3bf 8f6f 	isb	sy
 8110e32:	f3bf 8f4f 	dsb	sy
 8110e36:	60fb      	str	r3, [r7, #12]
}
 8110e38:	bf00      	nop
 8110e3a:	bf00      	nop
 8110e3c:	e7fd      	b.n	8110e3a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8110e3e:	f7fd fcb3 	bl	810e7a8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8110e42:	4b07      	ldr	r3, [pc, #28]	@ (8110e60 <vTaskSetTimeOutState+0x48>)
 8110e44:	681a      	ldr	r2, [r3, #0]
 8110e46:	687b      	ldr	r3, [r7, #4]
 8110e48:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8110e4a:	4b06      	ldr	r3, [pc, #24]	@ (8110e64 <vTaskSetTimeOutState+0x4c>)
 8110e4c:	681a      	ldr	r2, [r3, #0]
 8110e4e:	687b      	ldr	r3, [r7, #4]
 8110e50:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8110e52:	f7fd fcdb 	bl	810e80c <vPortExitCritical>
}
 8110e56:	bf00      	nop
 8110e58:	3710      	adds	r7, #16
 8110e5a:	46bd      	mov	sp, r7
 8110e5c:	bd80      	pop	{r7, pc}
 8110e5e:	bf00      	nop
 8110e60:	1000b068 	.word	0x1000b068
 8110e64:	1000b054 	.word	0x1000b054

08110e68 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8110e68:	b480      	push	{r7}
 8110e6a:	b083      	sub	sp, #12
 8110e6c:	af00      	add	r7, sp, #0
 8110e6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8110e70:	4b06      	ldr	r3, [pc, #24]	@ (8110e8c <vTaskInternalSetTimeOutState+0x24>)
 8110e72:	681a      	ldr	r2, [r3, #0]
 8110e74:	687b      	ldr	r3, [r7, #4]
 8110e76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8110e78:	4b05      	ldr	r3, [pc, #20]	@ (8110e90 <vTaskInternalSetTimeOutState+0x28>)
 8110e7a:	681a      	ldr	r2, [r3, #0]
 8110e7c:	687b      	ldr	r3, [r7, #4]
 8110e7e:	605a      	str	r2, [r3, #4]
}
 8110e80:	bf00      	nop
 8110e82:	370c      	adds	r7, #12
 8110e84:	46bd      	mov	sp, r7
 8110e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110e8a:	4770      	bx	lr
 8110e8c:	1000b068 	.word	0x1000b068
 8110e90:	1000b054 	.word	0x1000b054

08110e94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8110e94:	b580      	push	{r7, lr}
 8110e96:	b088      	sub	sp, #32
 8110e98:	af00      	add	r7, sp, #0
 8110e9a:	6078      	str	r0, [r7, #4]
 8110e9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8110e9e:	687b      	ldr	r3, [r7, #4]
 8110ea0:	2b00      	cmp	r3, #0
 8110ea2:	d10b      	bne.n	8110ebc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8110ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110ea8:	f383 8811 	msr	BASEPRI, r3
 8110eac:	f3bf 8f6f 	isb	sy
 8110eb0:	f3bf 8f4f 	dsb	sy
 8110eb4:	613b      	str	r3, [r7, #16]
}
 8110eb6:	bf00      	nop
 8110eb8:	bf00      	nop
 8110eba:	e7fd      	b.n	8110eb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8110ebc:	683b      	ldr	r3, [r7, #0]
 8110ebe:	2b00      	cmp	r3, #0
 8110ec0:	d10b      	bne.n	8110eda <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8110ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110ec6:	f383 8811 	msr	BASEPRI, r3
 8110eca:	f3bf 8f6f 	isb	sy
 8110ece:	f3bf 8f4f 	dsb	sy
 8110ed2:	60fb      	str	r3, [r7, #12]
}
 8110ed4:	bf00      	nop
 8110ed6:	bf00      	nop
 8110ed8:	e7fd      	b.n	8110ed6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8110eda:	f7fd fc65 	bl	810e7a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8110ede:	4b1d      	ldr	r3, [pc, #116]	@ (8110f54 <xTaskCheckForTimeOut+0xc0>)
 8110ee0:	681b      	ldr	r3, [r3, #0]
 8110ee2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8110ee4:	687b      	ldr	r3, [r7, #4]
 8110ee6:	685b      	ldr	r3, [r3, #4]
 8110ee8:	69ba      	ldr	r2, [r7, #24]
 8110eea:	1ad3      	subs	r3, r2, r3
 8110eec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8110eee:	683b      	ldr	r3, [r7, #0]
 8110ef0:	681b      	ldr	r3, [r3, #0]
 8110ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110ef6:	d102      	bne.n	8110efe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8110ef8:	2300      	movs	r3, #0
 8110efa:	61fb      	str	r3, [r7, #28]
 8110efc:	e023      	b.n	8110f46 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8110efe:	687b      	ldr	r3, [r7, #4]
 8110f00:	681a      	ldr	r2, [r3, #0]
 8110f02:	4b15      	ldr	r3, [pc, #84]	@ (8110f58 <xTaskCheckForTimeOut+0xc4>)
 8110f04:	681b      	ldr	r3, [r3, #0]
 8110f06:	429a      	cmp	r2, r3
 8110f08:	d007      	beq.n	8110f1a <xTaskCheckForTimeOut+0x86>
 8110f0a:	687b      	ldr	r3, [r7, #4]
 8110f0c:	685b      	ldr	r3, [r3, #4]
 8110f0e:	69ba      	ldr	r2, [r7, #24]
 8110f10:	429a      	cmp	r2, r3
 8110f12:	d302      	bcc.n	8110f1a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8110f14:	2301      	movs	r3, #1
 8110f16:	61fb      	str	r3, [r7, #28]
 8110f18:	e015      	b.n	8110f46 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8110f1a:	683b      	ldr	r3, [r7, #0]
 8110f1c:	681b      	ldr	r3, [r3, #0]
 8110f1e:	697a      	ldr	r2, [r7, #20]
 8110f20:	429a      	cmp	r2, r3
 8110f22:	d20b      	bcs.n	8110f3c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8110f24:	683b      	ldr	r3, [r7, #0]
 8110f26:	681a      	ldr	r2, [r3, #0]
 8110f28:	697b      	ldr	r3, [r7, #20]
 8110f2a:	1ad2      	subs	r2, r2, r3
 8110f2c:	683b      	ldr	r3, [r7, #0]
 8110f2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8110f30:	6878      	ldr	r0, [r7, #4]
 8110f32:	f7ff ff99 	bl	8110e68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8110f36:	2300      	movs	r3, #0
 8110f38:	61fb      	str	r3, [r7, #28]
 8110f3a:	e004      	b.n	8110f46 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8110f3c:	683b      	ldr	r3, [r7, #0]
 8110f3e:	2200      	movs	r2, #0
 8110f40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8110f42:	2301      	movs	r3, #1
 8110f44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8110f46:	f7fd fc61 	bl	810e80c <vPortExitCritical>

	return xReturn;
 8110f4a:	69fb      	ldr	r3, [r7, #28]
}
 8110f4c:	4618      	mov	r0, r3
 8110f4e:	3720      	adds	r7, #32
 8110f50:	46bd      	mov	sp, r7
 8110f52:	bd80      	pop	{r7, pc}
 8110f54:	1000b054 	.word	0x1000b054
 8110f58:	1000b068 	.word	0x1000b068

08110f5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8110f5c:	b480      	push	{r7}
 8110f5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8110f60:	4b03      	ldr	r3, [pc, #12]	@ (8110f70 <vTaskMissedYield+0x14>)
 8110f62:	2201      	movs	r2, #1
 8110f64:	601a      	str	r2, [r3, #0]
}
 8110f66:	bf00      	nop
 8110f68:	46bd      	mov	sp, r7
 8110f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110f6e:	4770      	bx	lr
 8110f70:	1000b064 	.word	0x1000b064

08110f74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8110f74:	b580      	push	{r7, lr}
 8110f76:	b082      	sub	sp, #8
 8110f78:	af00      	add	r7, sp, #0
 8110f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8110f7c:	f000 f852 	bl	8111024 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8110f80:	4b06      	ldr	r3, [pc, #24]	@ (8110f9c <prvIdleTask+0x28>)
 8110f82:	681b      	ldr	r3, [r3, #0]
 8110f84:	2b01      	cmp	r3, #1
 8110f86:	d9f9      	bls.n	8110f7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8110f88:	4b05      	ldr	r3, [pc, #20]	@ (8110fa0 <prvIdleTask+0x2c>)
 8110f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8110f8e:	601a      	str	r2, [r3, #0]
 8110f90:	f3bf 8f4f 	dsb	sy
 8110f94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8110f98:	e7f0      	b.n	8110f7c <prvIdleTask+0x8>
 8110f9a:	bf00      	nop
 8110f9c:	1000ab80 	.word	0x1000ab80
 8110fa0:	e000ed04 	.word	0xe000ed04

08110fa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8110fa4:	b580      	push	{r7, lr}
 8110fa6:	b082      	sub	sp, #8
 8110fa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8110faa:	2300      	movs	r3, #0
 8110fac:	607b      	str	r3, [r7, #4]
 8110fae:	e00c      	b.n	8110fca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8110fb0:	687a      	ldr	r2, [r7, #4]
 8110fb2:	4613      	mov	r3, r2
 8110fb4:	009b      	lsls	r3, r3, #2
 8110fb6:	4413      	add	r3, r2
 8110fb8:	009b      	lsls	r3, r3, #2
 8110fba:	4a12      	ldr	r2, [pc, #72]	@ (8111004 <prvInitialiseTaskLists+0x60>)
 8110fbc:	4413      	add	r3, r2
 8110fbe:	4618      	mov	r0, r3
 8110fc0:	f7fd fa0c 	bl	810e3dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8110fc4:	687b      	ldr	r3, [r7, #4]
 8110fc6:	3301      	adds	r3, #1
 8110fc8:	607b      	str	r3, [r7, #4]
 8110fca:	687b      	ldr	r3, [r7, #4]
 8110fcc:	2b37      	cmp	r3, #55	@ 0x37
 8110fce:	d9ef      	bls.n	8110fb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8110fd0:	480d      	ldr	r0, [pc, #52]	@ (8111008 <prvInitialiseTaskLists+0x64>)
 8110fd2:	f7fd fa03 	bl	810e3dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8110fd6:	480d      	ldr	r0, [pc, #52]	@ (811100c <prvInitialiseTaskLists+0x68>)
 8110fd8:	f7fd fa00 	bl	810e3dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8110fdc:	480c      	ldr	r0, [pc, #48]	@ (8111010 <prvInitialiseTaskLists+0x6c>)
 8110fde:	f7fd f9fd 	bl	810e3dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8110fe2:	480c      	ldr	r0, [pc, #48]	@ (8111014 <prvInitialiseTaskLists+0x70>)
 8110fe4:	f7fd f9fa 	bl	810e3dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8110fe8:	480b      	ldr	r0, [pc, #44]	@ (8111018 <prvInitialiseTaskLists+0x74>)
 8110fea:	f7fd f9f7 	bl	810e3dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8110fee:	4b0b      	ldr	r3, [pc, #44]	@ (811101c <prvInitialiseTaskLists+0x78>)
 8110ff0:	4a05      	ldr	r2, [pc, #20]	@ (8111008 <prvInitialiseTaskLists+0x64>)
 8110ff2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8110ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8111020 <prvInitialiseTaskLists+0x7c>)
 8110ff6:	4a05      	ldr	r2, [pc, #20]	@ (811100c <prvInitialiseTaskLists+0x68>)
 8110ff8:	601a      	str	r2, [r3, #0]
}
 8110ffa:	bf00      	nop
 8110ffc:	3708      	adds	r7, #8
 8110ffe:	46bd      	mov	sp, r7
 8111000:	bd80      	pop	{r7, pc}
 8111002:	bf00      	nop
 8111004:	1000ab80 	.word	0x1000ab80
 8111008:	1000afe0 	.word	0x1000afe0
 811100c:	1000aff4 	.word	0x1000aff4
 8111010:	1000b010 	.word	0x1000b010
 8111014:	1000b024 	.word	0x1000b024
 8111018:	1000b03c 	.word	0x1000b03c
 811101c:	1000b008 	.word	0x1000b008
 8111020:	1000b00c 	.word	0x1000b00c

08111024 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8111024:	b580      	push	{r7, lr}
 8111026:	b082      	sub	sp, #8
 8111028:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 811102a:	e019      	b.n	8111060 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 811102c:	f7fd fbbc 	bl	810e7a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8111030:	4b10      	ldr	r3, [pc, #64]	@ (8111074 <prvCheckTasksWaitingTermination+0x50>)
 8111032:	68db      	ldr	r3, [r3, #12]
 8111034:	68db      	ldr	r3, [r3, #12]
 8111036:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8111038:	687b      	ldr	r3, [r7, #4]
 811103a:	3304      	adds	r3, #4
 811103c:	4618      	mov	r0, r3
 811103e:	f7fd fa57 	bl	810e4f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8111042:	4b0d      	ldr	r3, [pc, #52]	@ (8111078 <prvCheckTasksWaitingTermination+0x54>)
 8111044:	681b      	ldr	r3, [r3, #0]
 8111046:	3b01      	subs	r3, #1
 8111048:	4a0b      	ldr	r2, [pc, #44]	@ (8111078 <prvCheckTasksWaitingTermination+0x54>)
 811104a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 811104c:	4b0b      	ldr	r3, [pc, #44]	@ (811107c <prvCheckTasksWaitingTermination+0x58>)
 811104e:	681b      	ldr	r3, [r3, #0]
 8111050:	3b01      	subs	r3, #1
 8111052:	4a0a      	ldr	r2, [pc, #40]	@ (811107c <prvCheckTasksWaitingTermination+0x58>)
 8111054:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8111056:	f7fd fbd9 	bl	810e80c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 811105a:	6878      	ldr	r0, [r7, #4]
 811105c:	f000 f810 	bl	8111080 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8111060:	4b06      	ldr	r3, [pc, #24]	@ (811107c <prvCheckTasksWaitingTermination+0x58>)
 8111062:	681b      	ldr	r3, [r3, #0]
 8111064:	2b00      	cmp	r3, #0
 8111066:	d1e1      	bne.n	811102c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8111068:	bf00      	nop
 811106a:	bf00      	nop
 811106c:	3708      	adds	r7, #8
 811106e:	46bd      	mov	sp, r7
 8111070:	bd80      	pop	{r7, pc}
 8111072:	bf00      	nop
 8111074:	1000b024 	.word	0x1000b024
 8111078:	1000b050 	.word	0x1000b050
 811107c:	1000b038 	.word	0x1000b038

08111080 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8111080:	b580      	push	{r7, lr}
 8111082:	b084      	sub	sp, #16
 8111084:	af00      	add	r7, sp, #0
 8111086:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8111088:	687b      	ldr	r3, [r7, #4]
 811108a:	3354      	adds	r3, #84	@ 0x54
 811108c:	4618      	mov	r0, r3
 811108e:	f00d f857 	bl	811e140 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8111092:	687b      	ldr	r3, [r7, #4]
 8111094:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8111098:	2b00      	cmp	r3, #0
 811109a:	d108      	bne.n	81110ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 811109c:	687b      	ldr	r3, [r7, #4]
 811109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81110a0:	4618      	mov	r0, r3
 81110a2:	f7fd f87b 	bl	810e19c <vPortFree>
				vPortFree( pxTCB );
 81110a6:	6878      	ldr	r0, [r7, #4]
 81110a8:	f7fd f878 	bl	810e19c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 81110ac:	e019      	b.n	81110e2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 81110ae:	687b      	ldr	r3, [r7, #4]
 81110b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 81110b4:	2b01      	cmp	r3, #1
 81110b6:	d103      	bne.n	81110c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 81110b8:	6878      	ldr	r0, [r7, #4]
 81110ba:	f7fd f86f 	bl	810e19c <vPortFree>
	}
 81110be:	e010      	b.n	81110e2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 81110c0:	687b      	ldr	r3, [r7, #4]
 81110c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 81110c6:	2b02      	cmp	r3, #2
 81110c8:	d00b      	beq.n	81110e2 <prvDeleteTCB+0x62>
	__asm volatile
 81110ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81110ce:	f383 8811 	msr	BASEPRI, r3
 81110d2:	f3bf 8f6f 	isb	sy
 81110d6:	f3bf 8f4f 	dsb	sy
 81110da:	60fb      	str	r3, [r7, #12]
}
 81110dc:	bf00      	nop
 81110de:	bf00      	nop
 81110e0:	e7fd      	b.n	81110de <prvDeleteTCB+0x5e>
	}
 81110e2:	bf00      	nop
 81110e4:	3710      	adds	r7, #16
 81110e6:	46bd      	mov	sp, r7
 81110e8:	bd80      	pop	{r7, pc}
	...

081110ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 81110ec:	b480      	push	{r7}
 81110ee:	b083      	sub	sp, #12
 81110f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81110f2:	4b0c      	ldr	r3, [pc, #48]	@ (8111124 <prvResetNextTaskUnblockTime+0x38>)
 81110f4:	681b      	ldr	r3, [r3, #0]
 81110f6:	681b      	ldr	r3, [r3, #0]
 81110f8:	2b00      	cmp	r3, #0
 81110fa:	d104      	bne.n	8111106 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 81110fc:	4b0a      	ldr	r3, [pc, #40]	@ (8111128 <prvResetNextTaskUnblockTime+0x3c>)
 81110fe:	f04f 32ff 	mov.w	r2, #4294967295
 8111102:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8111104:	e008      	b.n	8111118 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8111106:	4b07      	ldr	r3, [pc, #28]	@ (8111124 <prvResetNextTaskUnblockTime+0x38>)
 8111108:	681b      	ldr	r3, [r3, #0]
 811110a:	68db      	ldr	r3, [r3, #12]
 811110c:	68db      	ldr	r3, [r3, #12]
 811110e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8111110:	687b      	ldr	r3, [r7, #4]
 8111112:	685b      	ldr	r3, [r3, #4]
 8111114:	4a04      	ldr	r2, [pc, #16]	@ (8111128 <prvResetNextTaskUnblockTime+0x3c>)
 8111116:	6013      	str	r3, [r2, #0]
}
 8111118:	bf00      	nop
 811111a:	370c      	adds	r7, #12
 811111c:	46bd      	mov	sp, r7
 811111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111122:	4770      	bx	lr
 8111124:	1000b008 	.word	0x1000b008
 8111128:	1000b070 	.word	0x1000b070

0811112c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 811112c:	b480      	push	{r7}
 811112e:	b083      	sub	sp, #12
 8111130:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8111132:	4b05      	ldr	r3, [pc, #20]	@ (8111148 <xTaskGetCurrentTaskHandle+0x1c>)
 8111134:	681b      	ldr	r3, [r3, #0]
 8111136:	607b      	str	r3, [r7, #4]

		return xReturn;
 8111138:	687b      	ldr	r3, [r7, #4]
	}
 811113a:	4618      	mov	r0, r3
 811113c:	370c      	adds	r7, #12
 811113e:	46bd      	mov	sp, r7
 8111140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111144:	4770      	bx	lr
 8111146:	bf00      	nop
 8111148:	1000ab7c 	.word	0x1000ab7c

0811114c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 811114c:	b480      	push	{r7}
 811114e:	b083      	sub	sp, #12
 8111150:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8111152:	4b0b      	ldr	r3, [pc, #44]	@ (8111180 <xTaskGetSchedulerState+0x34>)
 8111154:	681b      	ldr	r3, [r3, #0]
 8111156:	2b00      	cmp	r3, #0
 8111158:	d102      	bne.n	8111160 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 811115a:	2301      	movs	r3, #1
 811115c:	607b      	str	r3, [r7, #4]
 811115e:	e008      	b.n	8111172 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8111160:	4b08      	ldr	r3, [pc, #32]	@ (8111184 <xTaskGetSchedulerState+0x38>)
 8111162:	681b      	ldr	r3, [r3, #0]
 8111164:	2b00      	cmp	r3, #0
 8111166:	d102      	bne.n	811116e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8111168:	2302      	movs	r3, #2
 811116a:	607b      	str	r3, [r7, #4]
 811116c:	e001      	b.n	8111172 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 811116e:	2300      	movs	r3, #0
 8111170:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8111172:	687b      	ldr	r3, [r7, #4]
	}
 8111174:	4618      	mov	r0, r3
 8111176:	370c      	adds	r7, #12
 8111178:	46bd      	mov	sp, r7
 811117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811117e:	4770      	bx	lr
 8111180:	1000b05c 	.word	0x1000b05c
 8111184:	1000b078 	.word	0x1000b078

08111188 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8111188:	b580      	push	{r7, lr}
 811118a:	b084      	sub	sp, #16
 811118c:	af00      	add	r7, sp, #0
 811118e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8111190:	687b      	ldr	r3, [r7, #4]
 8111192:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8111194:	2300      	movs	r3, #0
 8111196:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8111198:	687b      	ldr	r3, [r7, #4]
 811119a:	2b00      	cmp	r3, #0
 811119c:	d051      	beq.n	8111242 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 811119e:	68bb      	ldr	r3, [r7, #8]
 81111a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81111a2:	4b2a      	ldr	r3, [pc, #168]	@ (811124c <xTaskPriorityInherit+0xc4>)
 81111a4:	681b      	ldr	r3, [r3, #0]
 81111a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81111a8:	429a      	cmp	r2, r3
 81111aa:	d241      	bcs.n	8111230 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 81111ac:	68bb      	ldr	r3, [r7, #8]
 81111ae:	699b      	ldr	r3, [r3, #24]
 81111b0:	2b00      	cmp	r3, #0
 81111b2:	db06      	blt.n	81111c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81111b4:	4b25      	ldr	r3, [pc, #148]	@ (811124c <xTaskPriorityInherit+0xc4>)
 81111b6:	681b      	ldr	r3, [r3, #0]
 81111b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81111ba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 81111be:	68bb      	ldr	r3, [r7, #8]
 81111c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 81111c2:	68bb      	ldr	r3, [r7, #8]
 81111c4:	6959      	ldr	r1, [r3, #20]
 81111c6:	68bb      	ldr	r3, [r7, #8]
 81111c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81111ca:	4613      	mov	r3, r2
 81111cc:	009b      	lsls	r3, r3, #2
 81111ce:	4413      	add	r3, r2
 81111d0:	009b      	lsls	r3, r3, #2
 81111d2:	4a1f      	ldr	r2, [pc, #124]	@ (8111250 <xTaskPriorityInherit+0xc8>)
 81111d4:	4413      	add	r3, r2
 81111d6:	4299      	cmp	r1, r3
 81111d8:	d122      	bne.n	8111220 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81111da:	68bb      	ldr	r3, [r7, #8]
 81111dc:	3304      	adds	r3, #4
 81111de:	4618      	mov	r0, r3
 81111e0:	f7fd f986 	bl	810e4f0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 81111e4:	4b19      	ldr	r3, [pc, #100]	@ (811124c <xTaskPriorityInherit+0xc4>)
 81111e6:	681b      	ldr	r3, [r3, #0]
 81111e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81111ea:	68bb      	ldr	r3, [r7, #8]
 81111ec:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 81111ee:	68bb      	ldr	r3, [r7, #8]
 81111f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81111f2:	4b18      	ldr	r3, [pc, #96]	@ (8111254 <xTaskPriorityInherit+0xcc>)
 81111f4:	681b      	ldr	r3, [r3, #0]
 81111f6:	429a      	cmp	r2, r3
 81111f8:	d903      	bls.n	8111202 <xTaskPriorityInherit+0x7a>
 81111fa:	68bb      	ldr	r3, [r7, #8]
 81111fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81111fe:	4a15      	ldr	r2, [pc, #84]	@ (8111254 <xTaskPriorityInherit+0xcc>)
 8111200:	6013      	str	r3, [r2, #0]
 8111202:	68bb      	ldr	r3, [r7, #8]
 8111204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8111206:	4613      	mov	r3, r2
 8111208:	009b      	lsls	r3, r3, #2
 811120a:	4413      	add	r3, r2
 811120c:	009b      	lsls	r3, r3, #2
 811120e:	4a10      	ldr	r2, [pc, #64]	@ (8111250 <xTaskPriorityInherit+0xc8>)
 8111210:	441a      	add	r2, r3
 8111212:	68bb      	ldr	r3, [r7, #8]
 8111214:	3304      	adds	r3, #4
 8111216:	4619      	mov	r1, r3
 8111218:	4610      	mov	r0, r2
 811121a:	f7fd f90c 	bl	810e436 <vListInsertEnd>
 811121e:	e004      	b.n	811122a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8111220:	4b0a      	ldr	r3, [pc, #40]	@ (811124c <xTaskPriorityInherit+0xc4>)
 8111222:	681b      	ldr	r3, [r3, #0]
 8111224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8111226:	68bb      	ldr	r3, [r7, #8]
 8111228:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 811122a:	2301      	movs	r3, #1
 811122c:	60fb      	str	r3, [r7, #12]
 811122e:	e008      	b.n	8111242 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8111230:	68bb      	ldr	r3, [r7, #8]
 8111232:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8111234:	4b05      	ldr	r3, [pc, #20]	@ (811124c <xTaskPriorityInherit+0xc4>)
 8111236:	681b      	ldr	r3, [r3, #0]
 8111238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811123a:	429a      	cmp	r2, r3
 811123c:	d201      	bcs.n	8111242 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 811123e:	2301      	movs	r3, #1
 8111240:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8111242:	68fb      	ldr	r3, [r7, #12]
	}
 8111244:	4618      	mov	r0, r3
 8111246:	3710      	adds	r7, #16
 8111248:	46bd      	mov	sp, r7
 811124a:	bd80      	pop	{r7, pc}
 811124c:	1000ab7c 	.word	0x1000ab7c
 8111250:	1000ab80 	.word	0x1000ab80
 8111254:	1000b058 	.word	0x1000b058

08111258 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8111258:	b580      	push	{r7, lr}
 811125a:	b086      	sub	sp, #24
 811125c:	af00      	add	r7, sp, #0
 811125e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8111260:	687b      	ldr	r3, [r7, #4]
 8111262:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8111264:	2300      	movs	r3, #0
 8111266:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8111268:	687b      	ldr	r3, [r7, #4]
 811126a:	2b00      	cmp	r3, #0
 811126c:	d058      	beq.n	8111320 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 811126e:	4b2f      	ldr	r3, [pc, #188]	@ (811132c <xTaskPriorityDisinherit+0xd4>)
 8111270:	681b      	ldr	r3, [r3, #0]
 8111272:	693a      	ldr	r2, [r7, #16]
 8111274:	429a      	cmp	r2, r3
 8111276:	d00b      	beq.n	8111290 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8111278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811127c:	f383 8811 	msr	BASEPRI, r3
 8111280:	f3bf 8f6f 	isb	sy
 8111284:	f3bf 8f4f 	dsb	sy
 8111288:	60fb      	str	r3, [r7, #12]
}
 811128a:	bf00      	nop
 811128c:	bf00      	nop
 811128e:	e7fd      	b.n	811128c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8111290:	693b      	ldr	r3, [r7, #16]
 8111292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8111294:	2b00      	cmp	r3, #0
 8111296:	d10b      	bne.n	81112b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8111298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811129c:	f383 8811 	msr	BASEPRI, r3
 81112a0:	f3bf 8f6f 	isb	sy
 81112a4:	f3bf 8f4f 	dsb	sy
 81112a8:	60bb      	str	r3, [r7, #8]
}
 81112aa:	bf00      	nop
 81112ac:	bf00      	nop
 81112ae:	e7fd      	b.n	81112ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 81112b0:	693b      	ldr	r3, [r7, #16]
 81112b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81112b4:	1e5a      	subs	r2, r3, #1
 81112b6:	693b      	ldr	r3, [r7, #16]
 81112b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 81112ba:	693b      	ldr	r3, [r7, #16]
 81112bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81112be:	693b      	ldr	r3, [r7, #16]
 81112c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81112c2:	429a      	cmp	r2, r3
 81112c4:	d02c      	beq.n	8111320 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 81112c6:	693b      	ldr	r3, [r7, #16]
 81112c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81112ca:	2b00      	cmp	r3, #0
 81112cc:	d128      	bne.n	8111320 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81112ce:	693b      	ldr	r3, [r7, #16]
 81112d0:	3304      	adds	r3, #4
 81112d2:	4618      	mov	r0, r3
 81112d4:	f7fd f90c 	bl	810e4f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 81112d8:	693b      	ldr	r3, [r7, #16]
 81112da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81112dc:	693b      	ldr	r3, [r7, #16]
 81112de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81112e0:	693b      	ldr	r3, [r7, #16]
 81112e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81112e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 81112e8:	693b      	ldr	r3, [r7, #16]
 81112ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 81112ec:	693b      	ldr	r3, [r7, #16]
 81112ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81112f0:	4b0f      	ldr	r3, [pc, #60]	@ (8111330 <xTaskPriorityDisinherit+0xd8>)
 81112f2:	681b      	ldr	r3, [r3, #0]
 81112f4:	429a      	cmp	r2, r3
 81112f6:	d903      	bls.n	8111300 <xTaskPriorityDisinherit+0xa8>
 81112f8:	693b      	ldr	r3, [r7, #16]
 81112fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81112fc:	4a0c      	ldr	r2, [pc, #48]	@ (8111330 <xTaskPriorityDisinherit+0xd8>)
 81112fe:	6013      	str	r3, [r2, #0]
 8111300:	693b      	ldr	r3, [r7, #16]
 8111302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8111304:	4613      	mov	r3, r2
 8111306:	009b      	lsls	r3, r3, #2
 8111308:	4413      	add	r3, r2
 811130a:	009b      	lsls	r3, r3, #2
 811130c:	4a09      	ldr	r2, [pc, #36]	@ (8111334 <xTaskPriorityDisinherit+0xdc>)
 811130e:	441a      	add	r2, r3
 8111310:	693b      	ldr	r3, [r7, #16]
 8111312:	3304      	adds	r3, #4
 8111314:	4619      	mov	r1, r3
 8111316:	4610      	mov	r0, r2
 8111318:	f7fd f88d 	bl	810e436 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 811131c:	2301      	movs	r3, #1
 811131e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8111320:	697b      	ldr	r3, [r7, #20]
	}
 8111322:	4618      	mov	r0, r3
 8111324:	3718      	adds	r7, #24
 8111326:	46bd      	mov	sp, r7
 8111328:	bd80      	pop	{r7, pc}
 811132a:	bf00      	nop
 811132c:	1000ab7c 	.word	0x1000ab7c
 8111330:	1000b058 	.word	0x1000b058
 8111334:	1000ab80 	.word	0x1000ab80

08111338 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8111338:	b580      	push	{r7, lr}
 811133a:	b088      	sub	sp, #32
 811133c:	af00      	add	r7, sp, #0
 811133e:	6078      	str	r0, [r7, #4]
 8111340:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8111342:	687b      	ldr	r3, [r7, #4]
 8111344:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8111346:	2301      	movs	r3, #1
 8111348:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 811134a:	687b      	ldr	r3, [r7, #4]
 811134c:	2b00      	cmp	r3, #0
 811134e:	d06c      	beq.n	811142a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8111350:	69bb      	ldr	r3, [r7, #24]
 8111352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8111354:	2b00      	cmp	r3, #0
 8111356:	d10b      	bne.n	8111370 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8111358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811135c:	f383 8811 	msr	BASEPRI, r3
 8111360:	f3bf 8f6f 	isb	sy
 8111364:	f3bf 8f4f 	dsb	sy
 8111368:	60fb      	str	r3, [r7, #12]
}
 811136a:	bf00      	nop
 811136c:	bf00      	nop
 811136e:	e7fd      	b.n	811136c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8111370:	69bb      	ldr	r3, [r7, #24]
 8111372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8111374:	683a      	ldr	r2, [r7, #0]
 8111376:	429a      	cmp	r2, r3
 8111378:	d902      	bls.n	8111380 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 811137a:	683b      	ldr	r3, [r7, #0]
 811137c:	61fb      	str	r3, [r7, #28]
 811137e:	e002      	b.n	8111386 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8111380:	69bb      	ldr	r3, [r7, #24]
 8111382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8111384:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8111386:	69bb      	ldr	r3, [r7, #24]
 8111388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811138a:	69fa      	ldr	r2, [r7, #28]
 811138c:	429a      	cmp	r2, r3
 811138e:	d04c      	beq.n	811142a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8111390:	69bb      	ldr	r3, [r7, #24]
 8111392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8111394:	697a      	ldr	r2, [r7, #20]
 8111396:	429a      	cmp	r2, r3
 8111398:	d147      	bne.n	811142a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 811139a:	4b26      	ldr	r3, [pc, #152]	@ (8111434 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 811139c:	681b      	ldr	r3, [r3, #0]
 811139e:	69ba      	ldr	r2, [r7, #24]
 81113a0:	429a      	cmp	r2, r3
 81113a2:	d10b      	bne.n	81113bc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 81113a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81113a8:	f383 8811 	msr	BASEPRI, r3
 81113ac:	f3bf 8f6f 	isb	sy
 81113b0:	f3bf 8f4f 	dsb	sy
 81113b4:	60bb      	str	r3, [r7, #8]
}
 81113b6:	bf00      	nop
 81113b8:	bf00      	nop
 81113ba:	e7fd      	b.n	81113b8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 81113bc:	69bb      	ldr	r3, [r7, #24]
 81113be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81113c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 81113c2:	69bb      	ldr	r3, [r7, #24]
 81113c4:	69fa      	ldr	r2, [r7, #28]
 81113c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 81113c8:	69bb      	ldr	r3, [r7, #24]
 81113ca:	699b      	ldr	r3, [r3, #24]
 81113cc:	2b00      	cmp	r3, #0
 81113ce:	db04      	blt.n	81113da <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81113d0:	69fb      	ldr	r3, [r7, #28]
 81113d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 81113d6:	69bb      	ldr	r3, [r7, #24]
 81113d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 81113da:	69bb      	ldr	r3, [r7, #24]
 81113dc:	6959      	ldr	r1, [r3, #20]
 81113de:	693a      	ldr	r2, [r7, #16]
 81113e0:	4613      	mov	r3, r2
 81113e2:	009b      	lsls	r3, r3, #2
 81113e4:	4413      	add	r3, r2
 81113e6:	009b      	lsls	r3, r3, #2
 81113e8:	4a13      	ldr	r2, [pc, #76]	@ (8111438 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 81113ea:	4413      	add	r3, r2
 81113ec:	4299      	cmp	r1, r3
 81113ee:	d11c      	bne.n	811142a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81113f0:	69bb      	ldr	r3, [r7, #24]
 81113f2:	3304      	adds	r3, #4
 81113f4:	4618      	mov	r0, r3
 81113f6:	f7fd f87b 	bl	810e4f0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 81113fa:	69bb      	ldr	r3, [r7, #24]
 81113fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81113fe:	4b0f      	ldr	r3, [pc, #60]	@ (811143c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8111400:	681b      	ldr	r3, [r3, #0]
 8111402:	429a      	cmp	r2, r3
 8111404:	d903      	bls.n	811140e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8111406:	69bb      	ldr	r3, [r7, #24]
 8111408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811140a:	4a0c      	ldr	r2, [pc, #48]	@ (811143c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 811140c:	6013      	str	r3, [r2, #0]
 811140e:	69bb      	ldr	r3, [r7, #24]
 8111410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8111412:	4613      	mov	r3, r2
 8111414:	009b      	lsls	r3, r3, #2
 8111416:	4413      	add	r3, r2
 8111418:	009b      	lsls	r3, r3, #2
 811141a:	4a07      	ldr	r2, [pc, #28]	@ (8111438 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 811141c:	441a      	add	r2, r3
 811141e:	69bb      	ldr	r3, [r7, #24]
 8111420:	3304      	adds	r3, #4
 8111422:	4619      	mov	r1, r3
 8111424:	4610      	mov	r0, r2
 8111426:	f7fd f806 	bl	810e436 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 811142a:	bf00      	nop
 811142c:	3720      	adds	r7, #32
 811142e:	46bd      	mov	sp, r7
 8111430:	bd80      	pop	{r7, pc}
 8111432:	bf00      	nop
 8111434:	1000ab7c 	.word	0x1000ab7c
 8111438:	1000ab80 	.word	0x1000ab80
 811143c:	1000b058 	.word	0x1000b058

08111440 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8111440:	b480      	push	{r7}
 8111442:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8111444:	4b07      	ldr	r3, [pc, #28]	@ (8111464 <pvTaskIncrementMutexHeldCount+0x24>)
 8111446:	681b      	ldr	r3, [r3, #0]
 8111448:	2b00      	cmp	r3, #0
 811144a:	d004      	beq.n	8111456 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 811144c:	4b05      	ldr	r3, [pc, #20]	@ (8111464 <pvTaskIncrementMutexHeldCount+0x24>)
 811144e:	681b      	ldr	r3, [r3, #0]
 8111450:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8111452:	3201      	adds	r2, #1
 8111454:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8111456:	4b03      	ldr	r3, [pc, #12]	@ (8111464 <pvTaskIncrementMutexHeldCount+0x24>)
 8111458:	681b      	ldr	r3, [r3, #0]
	}
 811145a:	4618      	mov	r0, r3
 811145c:	46bd      	mov	sp, r7
 811145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111462:	4770      	bx	lr
 8111464:	1000ab7c 	.word	0x1000ab7c

08111468 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8111468:	b580      	push	{r7, lr}
 811146a:	b086      	sub	sp, #24
 811146c:	af00      	add	r7, sp, #0
 811146e:	60f8      	str	r0, [r7, #12]
 8111470:	60b9      	str	r1, [r7, #8]
 8111472:	607a      	str	r2, [r7, #4]
 8111474:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8111476:	f7fd f997 	bl	810e7a8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 811147a:	4b29      	ldr	r3, [pc, #164]	@ (8111520 <xTaskNotifyWait+0xb8>)
 811147c:	681b      	ldr	r3, [r3, #0]
 811147e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8111482:	b2db      	uxtb	r3, r3
 8111484:	2b02      	cmp	r3, #2
 8111486:	d01c      	beq.n	81114c2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8111488:	4b25      	ldr	r3, [pc, #148]	@ (8111520 <xTaskNotifyWait+0xb8>)
 811148a:	681b      	ldr	r3, [r3, #0]
 811148c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8111490:	68fa      	ldr	r2, [r7, #12]
 8111492:	43d2      	mvns	r2, r2
 8111494:	400a      	ands	r2, r1
 8111496:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 811149a:	4b21      	ldr	r3, [pc, #132]	@ (8111520 <xTaskNotifyWait+0xb8>)
 811149c:	681b      	ldr	r3, [r3, #0]
 811149e:	2201      	movs	r2, #1
 81114a0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 81114a4:	683b      	ldr	r3, [r7, #0]
 81114a6:	2b00      	cmp	r3, #0
 81114a8:	d00b      	beq.n	81114c2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 81114aa:	2101      	movs	r1, #1
 81114ac:	6838      	ldr	r0, [r7, #0]
 81114ae:	f000 f947 	bl	8111740 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 81114b2:	4b1c      	ldr	r3, [pc, #112]	@ (8111524 <xTaskNotifyWait+0xbc>)
 81114b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81114b8:	601a      	str	r2, [r3, #0]
 81114ba:	f3bf 8f4f 	dsb	sy
 81114be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 81114c2:	f7fd f9a3 	bl	810e80c <vPortExitCritical>

		taskENTER_CRITICAL();
 81114c6:	f7fd f96f 	bl	810e7a8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 81114ca:	687b      	ldr	r3, [r7, #4]
 81114cc:	2b00      	cmp	r3, #0
 81114ce:	d005      	beq.n	81114dc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 81114d0:	4b13      	ldr	r3, [pc, #76]	@ (8111520 <xTaskNotifyWait+0xb8>)
 81114d2:	681b      	ldr	r3, [r3, #0]
 81114d4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 81114d8:	687b      	ldr	r3, [r7, #4]
 81114da:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 81114dc:	4b10      	ldr	r3, [pc, #64]	@ (8111520 <xTaskNotifyWait+0xb8>)
 81114de:	681b      	ldr	r3, [r3, #0]
 81114e0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 81114e4:	b2db      	uxtb	r3, r3
 81114e6:	2b02      	cmp	r3, #2
 81114e8:	d002      	beq.n	81114f0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 81114ea:	2300      	movs	r3, #0
 81114ec:	617b      	str	r3, [r7, #20]
 81114ee:	e00a      	b.n	8111506 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 81114f0:	4b0b      	ldr	r3, [pc, #44]	@ (8111520 <xTaskNotifyWait+0xb8>)
 81114f2:	681b      	ldr	r3, [r3, #0]
 81114f4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 81114f8:	68ba      	ldr	r2, [r7, #8]
 81114fa:	43d2      	mvns	r2, r2
 81114fc:	400a      	ands	r2, r1
 81114fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8111502:	2301      	movs	r3, #1
 8111504:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8111506:	4b06      	ldr	r3, [pc, #24]	@ (8111520 <xTaskNotifyWait+0xb8>)
 8111508:	681b      	ldr	r3, [r3, #0]
 811150a:	2200      	movs	r2, #0
 811150c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8111510:	f7fd f97c 	bl	810e80c <vPortExitCritical>

		return xReturn;
 8111514:	697b      	ldr	r3, [r7, #20]
	}
 8111516:	4618      	mov	r0, r3
 8111518:	3718      	adds	r7, #24
 811151a:	46bd      	mov	sp, r7
 811151c:	bd80      	pop	{r7, pc}
 811151e:	bf00      	nop
 8111520:	1000ab7c 	.word	0x1000ab7c
 8111524:	e000ed04 	.word	0xe000ed04

08111528 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8111528:	b580      	push	{r7, lr}
 811152a:	b08e      	sub	sp, #56	@ 0x38
 811152c:	af00      	add	r7, sp, #0
 811152e:	60f8      	str	r0, [r7, #12]
 8111530:	60b9      	str	r1, [r7, #8]
 8111532:	603b      	str	r3, [r7, #0]
 8111534:	4613      	mov	r3, r2
 8111536:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8111538:	2301      	movs	r3, #1
 811153a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 811153c:	68fb      	ldr	r3, [r7, #12]
 811153e:	2b00      	cmp	r3, #0
 8111540:	d10b      	bne.n	811155a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8111542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111546:	f383 8811 	msr	BASEPRI, r3
 811154a:	f3bf 8f6f 	isb	sy
 811154e:	f3bf 8f4f 	dsb	sy
 8111552:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8111554:	bf00      	nop
 8111556:	bf00      	nop
 8111558:	e7fd      	b.n	8111556 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 811155a:	f7fd fa05 	bl	810e968 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 811155e:	68fb      	ldr	r3, [r7, #12]
 8111560:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8111562:	f3ef 8211 	mrs	r2, BASEPRI
 8111566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811156a:	f383 8811 	msr	BASEPRI, r3
 811156e:	f3bf 8f6f 	isb	sy
 8111572:	f3bf 8f4f 	dsb	sy
 8111576:	623a      	str	r2, [r7, #32]
 8111578:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 811157a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 811157c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 811157e:	683b      	ldr	r3, [r7, #0]
 8111580:	2b00      	cmp	r3, #0
 8111582:	d004      	beq.n	811158e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8111584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111586:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 811158a:	683b      	ldr	r3, [r7, #0]
 811158c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 811158e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111590:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8111594:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8111598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811159a:	2202      	movs	r2, #2
 811159c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 81115a0:	79fb      	ldrb	r3, [r7, #7]
 81115a2:	2b04      	cmp	r3, #4
 81115a4:	d82e      	bhi.n	8111604 <xTaskGenericNotifyFromISR+0xdc>
 81115a6:	a201      	add	r2, pc, #4	@ (adr r2, 81115ac <xTaskGenericNotifyFromISR+0x84>)
 81115a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81115ac:	08111629 	.word	0x08111629
 81115b0:	081115c1 	.word	0x081115c1
 81115b4:	081115d3 	.word	0x081115d3
 81115b8:	081115e3 	.word	0x081115e3
 81115bc:	081115ed 	.word	0x081115ed
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 81115c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81115c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 81115c6:	68bb      	ldr	r3, [r7, #8]
 81115c8:	431a      	orrs	r2, r3
 81115ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81115cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 81115d0:	e02d      	b.n	811162e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 81115d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81115d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81115d8:	1c5a      	adds	r2, r3, #1
 81115da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81115dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 81115e0:	e025      	b.n	811162e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 81115e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81115e4:	68ba      	ldr	r2, [r7, #8]
 81115e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 81115ea:	e020      	b.n	811162e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 81115ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 81115f0:	2b02      	cmp	r3, #2
 81115f2:	d004      	beq.n	81115fe <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 81115f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81115f6:	68ba      	ldr	r2, [r7, #8]
 81115f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 81115fc:	e017      	b.n	811162e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 81115fe:	2300      	movs	r3, #0
 8111600:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8111602:	e014      	b.n	811162e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8111604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111606:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 811160a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811160e:	d00d      	beq.n	811162c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8111610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111614:	f383 8811 	msr	BASEPRI, r3
 8111618:	f3bf 8f6f 	isb	sy
 811161c:	f3bf 8f4f 	dsb	sy
 8111620:	61bb      	str	r3, [r7, #24]
}
 8111622:	bf00      	nop
 8111624:	bf00      	nop
 8111626:	e7fd      	b.n	8111624 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8111628:	bf00      	nop
 811162a:	e000      	b.n	811162e <xTaskGenericNotifyFromISR+0x106>
					break;
 811162c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 811162e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8111632:	2b01      	cmp	r3, #1
 8111634:	d147      	bne.n	81116c6 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8111636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811163a:	2b00      	cmp	r3, #0
 811163c:	d00b      	beq.n	8111656 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 811163e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111642:	f383 8811 	msr	BASEPRI, r3
 8111646:	f3bf 8f6f 	isb	sy
 811164a:	f3bf 8f4f 	dsb	sy
 811164e:	617b      	str	r3, [r7, #20]
}
 8111650:	bf00      	nop
 8111652:	bf00      	nop
 8111654:	e7fd      	b.n	8111652 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8111656:	4b21      	ldr	r3, [pc, #132]	@ (81116dc <xTaskGenericNotifyFromISR+0x1b4>)
 8111658:	681b      	ldr	r3, [r3, #0]
 811165a:	2b00      	cmp	r3, #0
 811165c:	d11d      	bne.n	811169a <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 811165e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111660:	3304      	adds	r3, #4
 8111662:	4618      	mov	r0, r3
 8111664:	f7fc ff44 	bl	810e4f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8111668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811166a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811166c:	4b1c      	ldr	r3, [pc, #112]	@ (81116e0 <xTaskGenericNotifyFromISR+0x1b8>)
 811166e:	681b      	ldr	r3, [r3, #0]
 8111670:	429a      	cmp	r2, r3
 8111672:	d903      	bls.n	811167c <xTaskGenericNotifyFromISR+0x154>
 8111674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8111678:	4a19      	ldr	r2, [pc, #100]	@ (81116e0 <xTaskGenericNotifyFromISR+0x1b8>)
 811167a:	6013      	str	r3, [r2, #0]
 811167c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811167e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8111680:	4613      	mov	r3, r2
 8111682:	009b      	lsls	r3, r3, #2
 8111684:	4413      	add	r3, r2
 8111686:	009b      	lsls	r3, r3, #2
 8111688:	4a16      	ldr	r2, [pc, #88]	@ (81116e4 <xTaskGenericNotifyFromISR+0x1bc>)
 811168a:	441a      	add	r2, r3
 811168c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811168e:	3304      	adds	r3, #4
 8111690:	4619      	mov	r1, r3
 8111692:	4610      	mov	r0, r2
 8111694:	f7fc fecf 	bl	810e436 <vListInsertEnd>
 8111698:	e005      	b.n	81116a6 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 811169a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811169c:	3318      	adds	r3, #24
 811169e:	4619      	mov	r1, r3
 81116a0:	4811      	ldr	r0, [pc, #68]	@ (81116e8 <xTaskGenericNotifyFromISR+0x1c0>)
 81116a2:	f7fc fec8 	bl	810e436 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 81116a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81116a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81116aa:	4b10      	ldr	r3, [pc, #64]	@ (81116ec <xTaskGenericNotifyFromISR+0x1c4>)
 81116ac:	681b      	ldr	r3, [r3, #0]
 81116ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81116b0:	429a      	cmp	r2, r3
 81116b2:	d908      	bls.n	81116c6 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 81116b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81116b6:	2b00      	cmp	r3, #0
 81116b8:	d002      	beq.n	81116c0 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 81116ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81116bc:	2201      	movs	r2, #1
 81116be:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 81116c0:	4b0b      	ldr	r3, [pc, #44]	@ (81116f0 <xTaskGenericNotifyFromISR+0x1c8>)
 81116c2:	2201      	movs	r2, #1
 81116c4:	601a      	str	r2, [r3, #0]
 81116c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81116c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 81116ca:	693b      	ldr	r3, [r7, #16]
 81116cc:	f383 8811 	msr	BASEPRI, r3
}
 81116d0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 81116d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 81116d4:	4618      	mov	r0, r3
 81116d6:	3738      	adds	r7, #56	@ 0x38
 81116d8:	46bd      	mov	sp, r7
 81116da:	bd80      	pop	{r7, pc}
 81116dc:	1000b078 	.word	0x1000b078
 81116e0:	1000b058 	.word	0x1000b058
 81116e4:	1000ab80 	.word	0x1000ab80
 81116e8:	1000b010 	.word	0x1000b010
 81116ec:	1000ab7c 	.word	0x1000ab7c
 81116f0:	1000b064 	.word	0x1000b064

081116f4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 81116f4:	b580      	push	{r7, lr}
 81116f6:	b084      	sub	sp, #16
 81116f8:	af00      	add	r7, sp, #0
 81116fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 81116fc:	687b      	ldr	r3, [r7, #4]
 81116fe:	2b00      	cmp	r3, #0
 8111700:	d102      	bne.n	8111708 <xTaskNotifyStateClear+0x14>
 8111702:	4b0e      	ldr	r3, [pc, #56]	@ (811173c <xTaskNotifyStateClear+0x48>)
 8111704:	681b      	ldr	r3, [r3, #0]
 8111706:	e000      	b.n	811170a <xTaskNotifyStateClear+0x16>
 8111708:	687b      	ldr	r3, [r7, #4]
 811170a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 811170c:	f7fd f84c 	bl	810e7a8 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8111710:	68bb      	ldr	r3, [r7, #8]
 8111712:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8111716:	b2db      	uxtb	r3, r3
 8111718:	2b02      	cmp	r3, #2
 811171a:	d106      	bne.n	811172a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 811171c:	68bb      	ldr	r3, [r7, #8]
 811171e:	2200      	movs	r2, #0
 8111720:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 8111724:	2301      	movs	r3, #1
 8111726:	60fb      	str	r3, [r7, #12]
 8111728:	e001      	b.n	811172e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 811172a:	2300      	movs	r3, #0
 811172c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 811172e:	f7fd f86d 	bl	810e80c <vPortExitCritical>

		return xReturn;
 8111732:	68fb      	ldr	r3, [r7, #12]
	}
 8111734:	4618      	mov	r0, r3
 8111736:	3710      	adds	r7, #16
 8111738:	46bd      	mov	sp, r7
 811173a:	bd80      	pop	{r7, pc}
 811173c:	1000ab7c 	.word	0x1000ab7c

08111740 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8111740:	b580      	push	{r7, lr}
 8111742:	b084      	sub	sp, #16
 8111744:	af00      	add	r7, sp, #0
 8111746:	6078      	str	r0, [r7, #4]
 8111748:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 811174a:	4b21      	ldr	r3, [pc, #132]	@ (81117d0 <prvAddCurrentTaskToDelayedList+0x90>)
 811174c:	681b      	ldr	r3, [r3, #0]
 811174e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8111750:	4b20      	ldr	r3, [pc, #128]	@ (81117d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8111752:	681b      	ldr	r3, [r3, #0]
 8111754:	3304      	adds	r3, #4
 8111756:	4618      	mov	r0, r3
 8111758:	f7fc feca 	bl	810e4f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 811175c:	687b      	ldr	r3, [r7, #4]
 811175e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8111762:	d10a      	bne.n	811177a <prvAddCurrentTaskToDelayedList+0x3a>
 8111764:	683b      	ldr	r3, [r7, #0]
 8111766:	2b00      	cmp	r3, #0
 8111768:	d007      	beq.n	811177a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 811176a:	4b1a      	ldr	r3, [pc, #104]	@ (81117d4 <prvAddCurrentTaskToDelayedList+0x94>)
 811176c:	681b      	ldr	r3, [r3, #0]
 811176e:	3304      	adds	r3, #4
 8111770:	4619      	mov	r1, r3
 8111772:	4819      	ldr	r0, [pc, #100]	@ (81117d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8111774:	f7fc fe5f 	bl	810e436 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8111778:	e026      	b.n	81117c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 811177a:	68fa      	ldr	r2, [r7, #12]
 811177c:	687b      	ldr	r3, [r7, #4]
 811177e:	4413      	add	r3, r2
 8111780:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8111782:	4b14      	ldr	r3, [pc, #80]	@ (81117d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8111784:	681b      	ldr	r3, [r3, #0]
 8111786:	68ba      	ldr	r2, [r7, #8]
 8111788:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 811178a:	68ba      	ldr	r2, [r7, #8]
 811178c:	68fb      	ldr	r3, [r7, #12]
 811178e:	429a      	cmp	r2, r3
 8111790:	d209      	bcs.n	81117a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8111792:	4b12      	ldr	r3, [pc, #72]	@ (81117dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8111794:	681a      	ldr	r2, [r3, #0]
 8111796:	4b0f      	ldr	r3, [pc, #60]	@ (81117d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8111798:	681b      	ldr	r3, [r3, #0]
 811179a:	3304      	adds	r3, #4
 811179c:	4619      	mov	r1, r3
 811179e:	4610      	mov	r0, r2
 81117a0:	f7fc fe6d 	bl	810e47e <vListInsert>
}
 81117a4:	e010      	b.n	81117c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81117a6:	4b0e      	ldr	r3, [pc, #56]	@ (81117e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 81117a8:	681a      	ldr	r2, [r3, #0]
 81117aa:	4b0a      	ldr	r3, [pc, #40]	@ (81117d4 <prvAddCurrentTaskToDelayedList+0x94>)
 81117ac:	681b      	ldr	r3, [r3, #0]
 81117ae:	3304      	adds	r3, #4
 81117b0:	4619      	mov	r1, r3
 81117b2:	4610      	mov	r0, r2
 81117b4:	f7fc fe63 	bl	810e47e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 81117b8:	4b0a      	ldr	r3, [pc, #40]	@ (81117e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 81117ba:	681b      	ldr	r3, [r3, #0]
 81117bc:	68ba      	ldr	r2, [r7, #8]
 81117be:	429a      	cmp	r2, r3
 81117c0:	d202      	bcs.n	81117c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 81117c2:	4a08      	ldr	r2, [pc, #32]	@ (81117e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 81117c4:	68bb      	ldr	r3, [r7, #8]
 81117c6:	6013      	str	r3, [r2, #0]
}
 81117c8:	bf00      	nop
 81117ca:	3710      	adds	r7, #16
 81117cc:	46bd      	mov	sp, r7
 81117ce:	bd80      	pop	{r7, pc}
 81117d0:	1000b054 	.word	0x1000b054
 81117d4:	1000ab7c 	.word	0x1000ab7c
 81117d8:	1000b03c 	.word	0x1000b03c
 81117dc:	1000b00c 	.word	0x1000b00c
 81117e0:	1000b008 	.word	0x1000b008
 81117e4:	1000b070 	.word	0x1000b070

081117e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 81117e8:	b580      	push	{r7, lr}
 81117ea:	b08a      	sub	sp, #40	@ 0x28
 81117ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 81117ee:	2300      	movs	r3, #0
 81117f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 81117f2:	f000 fb13 	bl	8111e1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 81117f6:	4b1d      	ldr	r3, [pc, #116]	@ (811186c <xTimerCreateTimerTask+0x84>)
 81117f8:	681b      	ldr	r3, [r3, #0]
 81117fa:	2b00      	cmp	r3, #0
 81117fc:	d021      	beq.n	8111842 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 81117fe:	2300      	movs	r3, #0
 8111800:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8111802:	2300      	movs	r3, #0
 8111804:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8111806:	1d3a      	adds	r2, r7, #4
 8111808:	f107 0108 	add.w	r1, r7, #8
 811180c:	f107 030c 	add.w	r3, r7, #12
 8111810:	4618      	mov	r0, r3
 8111812:	f7fc fbdb 	bl	810dfcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8111816:	6879      	ldr	r1, [r7, #4]
 8111818:	68bb      	ldr	r3, [r7, #8]
 811181a:	68fa      	ldr	r2, [r7, #12]
 811181c:	9202      	str	r2, [sp, #8]
 811181e:	9301      	str	r3, [sp, #4]
 8111820:	2302      	movs	r3, #2
 8111822:	9300      	str	r3, [sp, #0]
 8111824:	2300      	movs	r3, #0
 8111826:	460a      	mov	r2, r1
 8111828:	4911      	ldr	r1, [pc, #68]	@ (8111870 <xTimerCreateTimerTask+0x88>)
 811182a:	4812      	ldr	r0, [pc, #72]	@ (8111874 <xTimerCreateTimerTask+0x8c>)
 811182c:	f7fe fdec 	bl	8110408 <xTaskCreateStatic>
 8111830:	4603      	mov	r3, r0
 8111832:	4a11      	ldr	r2, [pc, #68]	@ (8111878 <xTimerCreateTimerTask+0x90>)
 8111834:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8111836:	4b10      	ldr	r3, [pc, #64]	@ (8111878 <xTimerCreateTimerTask+0x90>)
 8111838:	681b      	ldr	r3, [r3, #0]
 811183a:	2b00      	cmp	r3, #0
 811183c:	d001      	beq.n	8111842 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 811183e:	2301      	movs	r3, #1
 8111840:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8111842:	697b      	ldr	r3, [r7, #20]
 8111844:	2b00      	cmp	r3, #0
 8111846:	d10b      	bne.n	8111860 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8111848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811184c:	f383 8811 	msr	BASEPRI, r3
 8111850:	f3bf 8f6f 	isb	sy
 8111854:	f3bf 8f4f 	dsb	sy
 8111858:	613b      	str	r3, [r7, #16]
}
 811185a:	bf00      	nop
 811185c:	bf00      	nop
 811185e:	e7fd      	b.n	811185c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8111860:	697b      	ldr	r3, [r7, #20]
}
 8111862:	4618      	mov	r0, r3
 8111864:	3718      	adds	r7, #24
 8111866:	46bd      	mov	sp, r7
 8111868:	bd80      	pop	{r7, pc}
 811186a:	bf00      	nop
 811186c:	1000b0ac 	.word	0x1000b0ac
 8111870:	0811f4f8 	.word	0x0811f4f8
 8111874:	081119b5 	.word	0x081119b5
 8111878:	1000b0b0 	.word	0x1000b0b0

0811187c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 811187c:	b580      	push	{r7, lr}
 811187e:	b08a      	sub	sp, #40	@ 0x28
 8111880:	af00      	add	r7, sp, #0
 8111882:	60f8      	str	r0, [r7, #12]
 8111884:	60b9      	str	r1, [r7, #8]
 8111886:	607a      	str	r2, [r7, #4]
 8111888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 811188a:	2300      	movs	r3, #0
 811188c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 811188e:	68fb      	ldr	r3, [r7, #12]
 8111890:	2b00      	cmp	r3, #0
 8111892:	d10b      	bne.n	81118ac <xTimerGenericCommand+0x30>
	__asm volatile
 8111894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111898:	f383 8811 	msr	BASEPRI, r3
 811189c:	f3bf 8f6f 	isb	sy
 81118a0:	f3bf 8f4f 	dsb	sy
 81118a4:	623b      	str	r3, [r7, #32]
}
 81118a6:	bf00      	nop
 81118a8:	bf00      	nop
 81118aa:	e7fd      	b.n	81118a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 81118ac:	4b19      	ldr	r3, [pc, #100]	@ (8111914 <xTimerGenericCommand+0x98>)
 81118ae:	681b      	ldr	r3, [r3, #0]
 81118b0:	2b00      	cmp	r3, #0
 81118b2:	d02a      	beq.n	811190a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 81118b4:	68bb      	ldr	r3, [r7, #8]
 81118b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 81118b8:	687b      	ldr	r3, [r7, #4]
 81118ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 81118bc:	68fb      	ldr	r3, [r7, #12]
 81118be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 81118c0:	68bb      	ldr	r3, [r7, #8]
 81118c2:	2b05      	cmp	r3, #5
 81118c4:	dc18      	bgt.n	81118f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 81118c6:	f7ff fc41 	bl	811114c <xTaskGetSchedulerState>
 81118ca:	4603      	mov	r3, r0
 81118cc:	2b02      	cmp	r3, #2
 81118ce:	d109      	bne.n	81118e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 81118d0:	4b10      	ldr	r3, [pc, #64]	@ (8111914 <xTimerGenericCommand+0x98>)
 81118d2:	6818      	ldr	r0, [r3, #0]
 81118d4:	f107 0110 	add.w	r1, r7, #16
 81118d8:	2300      	movs	r3, #0
 81118da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81118dc:	f7fd faf2 	bl	810eec4 <xQueueGenericSend>
 81118e0:	6278      	str	r0, [r7, #36]	@ 0x24
 81118e2:	e012      	b.n	811190a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 81118e4:	4b0b      	ldr	r3, [pc, #44]	@ (8111914 <xTimerGenericCommand+0x98>)
 81118e6:	6818      	ldr	r0, [r3, #0]
 81118e8:	f107 0110 	add.w	r1, r7, #16
 81118ec:	2300      	movs	r3, #0
 81118ee:	2200      	movs	r2, #0
 81118f0:	f7fd fae8 	bl	810eec4 <xQueueGenericSend>
 81118f4:	6278      	str	r0, [r7, #36]	@ 0x24
 81118f6:	e008      	b.n	811190a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 81118f8:	4b06      	ldr	r3, [pc, #24]	@ (8111914 <xTimerGenericCommand+0x98>)
 81118fa:	6818      	ldr	r0, [r3, #0]
 81118fc:	f107 0110 	add.w	r1, r7, #16
 8111900:	2300      	movs	r3, #0
 8111902:	683a      	ldr	r2, [r7, #0]
 8111904:	f7fd fbe0 	bl	810f0c8 <xQueueGenericSendFromISR>
 8111908:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 811190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 811190c:	4618      	mov	r0, r3
 811190e:	3728      	adds	r7, #40	@ 0x28
 8111910:	46bd      	mov	sp, r7
 8111912:	bd80      	pop	{r7, pc}
 8111914:	1000b0ac 	.word	0x1000b0ac

08111918 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8111918:	b580      	push	{r7, lr}
 811191a:	b088      	sub	sp, #32
 811191c:	af02      	add	r7, sp, #8
 811191e:	6078      	str	r0, [r7, #4]
 8111920:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8111922:	4b23      	ldr	r3, [pc, #140]	@ (81119b0 <prvProcessExpiredTimer+0x98>)
 8111924:	681b      	ldr	r3, [r3, #0]
 8111926:	68db      	ldr	r3, [r3, #12]
 8111928:	68db      	ldr	r3, [r3, #12]
 811192a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 811192c:	697b      	ldr	r3, [r7, #20]
 811192e:	3304      	adds	r3, #4
 8111930:	4618      	mov	r0, r3
 8111932:	f7fc fddd 	bl	810e4f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8111936:	697b      	ldr	r3, [r7, #20]
 8111938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 811193c:	f003 0304 	and.w	r3, r3, #4
 8111940:	2b00      	cmp	r3, #0
 8111942:	d023      	beq.n	811198c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8111944:	697b      	ldr	r3, [r7, #20]
 8111946:	699a      	ldr	r2, [r3, #24]
 8111948:	687b      	ldr	r3, [r7, #4]
 811194a:	18d1      	adds	r1, r2, r3
 811194c:	687b      	ldr	r3, [r7, #4]
 811194e:	683a      	ldr	r2, [r7, #0]
 8111950:	6978      	ldr	r0, [r7, #20]
 8111952:	f000 f8d5 	bl	8111b00 <prvInsertTimerInActiveList>
 8111956:	4603      	mov	r3, r0
 8111958:	2b00      	cmp	r3, #0
 811195a:	d020      	beq.n	811199e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 811195c:	2300      	movs	r3, #0
 811195e:	9300      	str	r3, [sp, #0]
 8111960:	2300      	movs	r3, #0
 8111962:	687a      	ldr	r2, [r7, #4]
 8111964:	2100      	movs	r1, #0
 8111966:	6978      	ldr	r0, [r7, #20]
 8111968:	f7ff ff88 	bl	811187c <xTimerGenericCommand>
 811196c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 811196e:	693b      	ldr	r3, [r7, #16]
 8111970:	2b00      	cmp	r3, #0
 8111972:	d114      	bne.n	811199e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8111974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111978:	f383 8811 	msr	BASEPRI, r3
 811197c:	f3bf 8f6f 	isb	sy
 8111980:	f3bf 8f4f 	dsb	sy
 8111984:	60fb      	str	r3, [r7, #12]
}
 8111986:	bf00      	nop
 8111988:	bf00      	nop
 811198a:	e7fd      	b.n	8111988 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 811198c:	697b      	ldr	r3, [r7, #20]
 811198e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8111992:	f023 0301 	bic.w	r3, r3, #1
 8111996:	b2da      	uxtb	r2, r3
 8111998:	697b      	ldr	r3, [r7, #20]
 811199a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 811199e:	697b      	ldr	r3, [r7, #20]
 81119a0:	6a1b      	ldr	r3, [r3, #32]
 81119a2:	6978      	ldr	r0, [r7, #20]
 81119a4:	4798      	blx	r3
}
 81119a6:	bf00      	nop
 81119a8:	3718      	adds	r7, #24
 81119aa:	46bd      	mov	sp, r7
 81119ac:	bd80      	pop	{r7, pc}
 81119ae:	bf00      	nop
 81119b0:	1000b0a4 	.word	0x1000b0a4

081119b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 81119b4:	b580      	push	{r7, lr}
 81119b6:	b084      	sub	sp, #16
 81119b8:	af00      	add	r7, sp, #0
 81119ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 81119bc:	f107 0308 	add.w	r3, r7, #8
 81119c0:	4618      	mov	r0, r3
 81119c2:	f000 f859 	bl	8111a78 <prvGetNextExpireTime>
 81119c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 81119c8:	68bb      	ldr	r3, [r7, #8]
 81119ca:	4619      	mov	r1, r3
 81119cc:	68f8      	ldr	r0, [r7, #12]
 81119ce:	f000 f805 	bl	81119dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 81119d2:	f000 f8d7 	bl	8111b84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 81119d6:	bf00      	nop
 81119d8:	e7f0      	b.n	81119bc <prvTimerTask+0x8>
	...

081119dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 81119dc:	b580      	push	{r7, lr}
 81119de:	b084      	sub	sp, #16
 81119e0:	af00      	add	r7, sp, #0
 81119e2:	6078      	str	r0, [r7, #4]
 81119e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 81119e6:	f7fe ff73 	bl	81108d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 81119ea:	f107 0308 	add.w	r3, r7, #8
 81119ee:	4618      	mov	r0, r3
 81119f0:	f000 f866 	bl	8111ac0 <prvSampleTimeNow>
 81119f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 81119f6:	68bb      	ldr	r3, [r7, #8]
 81119f8:	2b00      	cmp	r3, #0
 81119fa:	d130      	bne.n	8111a5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 81119fc:	683b      	ldr	r3, [r7, #0]
 81119fe:	2b00      	cmp	r3, #0
 8111a00:	d10a      	bne.n	8111a18 <prvProcessTimerOrBlockTask+0x3c>
 8111a02:	687a      	ldr	r2, [r7, #4]
 8111a04:	68fb      	ldr	r3, [r7, #12]
 8111a06:	429a      	cmp	r2, r3
 8111a08:	d806      	bhi.n	8111a18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8111a0a:	f7fe ff6f 	bl	81108ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8111a0e:	68f9      	ldr	r1, [r7, #12]
 8111a10:	6878      	ldr	r0, [r7, #4]
 8111a12:	f7ff ff81 	bl	8111918 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8111a16:	e024      	b.n	8111a62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8111a18:	683b      	ldr	r3, [r7, #0]
 8111a1a:	2b00      	cmp	r3, #0
 8111a1c:	d008      	beq.n	8111a30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8111a1e:	4b13      	ldr	r3, [pc, #76]	@ (8111a6c <prvProcessTimerOrBlockTask+0x90>)
 8111a20:	681b      	ldr	r3, [r3, #0]
 8111a22:	681b      	ldr	r3, [r3, #0]
 8111a24:	2b00      	cmp	r3, #0
 8111a26:	d101      	bne.n	8111a2c <prvProcessTimerOrBlockTask+0x50>
 8111a28:	2301      	movs	r3, #1
 8111a2a:	e000      	b.n	8111a2e <prvProcessTimerOrBlockTask+0x52>
 8111a2c:	2300      	movs	r3, #0
 8111a2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8111a30:	4b0f      	ldr	r3, [pc, #60]	@ (8111a70 <prvProcessTimerOrBlockTask+0x94>)
 8111a32:	6818      	ldr	r0, [r3, #0]
 8111a34:	687a      	ldr	r2, [r7, #4]
 8111a36:	68fb      	ldr	r3, [r7, #12]
 8111a38:	1ad3      	subs	r3, r2, r3
 8111a3a:	683a      	ldr	r2, [r7, #0]
 8111a3c:	4619      	mov	r1, r3
 8111a3e:	f7fe f885 	bl	810fb4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8111a42:	f7fe ff53 	bl	81108ec <xTaskResumeAll>
 8111a46:	4603      	mov	r3, r0
 8111a48:	2b00      	cmp	r3, #0
 8111a4a:	d10a      	bne.n	8111a62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8111a4c:	4b09      	ldr	r3, [pc, #36]	@ (8111a74 <prvProcessTimerOrBlockTask+0x98>)
 8111a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8111a52:	601a      	str	r2, [r3, #0]
 8111a54:	f3bf 8f4f 	dsb	sy
 8111a58:	f3bf 8f6f 	isb	sy
}
 8111a5c:	e001      	b.n	8111a62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8111a5e:	f7fe ff45 	bl	81108ec <xTaskResumeAll>
}
 8111a62:	bf00      	nop
 8111a64:	3710      	adds	r7, #16
 8111a66:	46bd      	mov	sp, r7
 8111a68:	bd80      	pop	{r7, pc}
 8111a6a:	bf00      	nop
 8111a6c:	1000b0a8 	.word	0x1000b0a8
 8111a70:	1000b0ac 	.word	0x1000b0ac
 8111a74:	e000ed04 	.word	0xe000ed04

08111a78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8111a78:	b480      	push	{r7}
 8111a7a:	b085      	sub	sp, #20
 8111a7c:	af00      	add	r7, sp, #0
 8111a7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8111a80:	4b0e      	ldr	r3, [pc, #56]	@ (8111abc <prvGetNextExpireTime+0x44>)
 8111a82:	681b      	ldr	r3, [r3, #0]
 8111a84:	681b      	ldr	r3, [r3, #0]
 8111a86:	2b00      	cmp	r3, #0
 8111a88:	d101      	bne.n	8111a8e <prvGetNextExpireTime+0x16>
 8111a8a:	2201      	movs	r2, #1
 8111a8c:	e000      	b.n	8111a90 <prvGetNextExpireTime+0x18>
 8111a8e:	2200      	movs	r2, #0
 8111a90:	687b      	ldr	r3, [r7, #4]
 8111a92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8111a94:	687b      	ldr	r3, [r7, #4]
 8111a96:	681b      	ldr	r3, [r3, #0]
 8111a98:	2b00      	cmp	r3, #0
 8111a9a:	d105      	bne.n	8111aa8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8111a9c:	4b07      	ldr	r3, [pc, #28]	@ (8111abc <prvGetNextExpireTime+0x44>)
 8111a9e:	681b      	ldr	r3, [r3, #0]
 8111aa0:	68db      	ldr	r3, [r3, #12]
 8111aa2:	681b      	ldr	r3, [r3, #0]
 8111aa4:	60fb      	str	r3, [r7, #12]
 8111aa6:	e001      	b.n	8111aac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8111aa8:	2300      	movs	r3, #0
 8111aaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8111aac:	68fb      	ldr	r3, [r7, #12]
}
 8111aae:	4618      	mov	r0, r3
 8111ab0:	3714      	adds	r7, #20
 8111ab2:	46bd      	mov	sp, r7
 8111ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111ab8:	4770      	bx	lr
 8111aba:	bf00      	nop
 8111abc:	1000b0a4 	.word	0x1000b0a4

08111ac0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8111ac0:	b580      	push	{r7, lr}
 8111ac2:	b084      	sub	sp, #16
 8111ac4:	af00      	add	r7, sp, #0
 8111ac6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8111ac8:	f7fe ffae 	bl	8110a28 <xTaskGetTickCount>
 8111acc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8111ace:	4b0b      	ldr	r3, [pc, #44]	@ (8111afc <prvSampleTimeNow+0x3c>)
 8111ad0:	681b      	ldr	r3, [r3, #0]
 8111ad2:	68fa      	ldr	r2, [r7, #12]
 8111ad4:	429a      	cmp	r2, r3
 8111ad6:	d205      	bcs.n	8111ae4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8111ad8:	f000 f93a 	bl	8111d50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8111adc:	687b      	ldr	r3, [r7, #4]
 8111ade:	2201      	movs	r2, #1
 8111ae0:	601a      	str	r2, [r3, #0]
 8111ae2:	e002      	b.n	8111aea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8111ae4:	687b      	ldr	r3, [r7, #4]
 8111ae6:	2200      	movs	r2, #0
 8111ae8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8111aea:	4a04      	ldr	r2, [pc, #16]	@ (8111afc <prvSampleTimeNow+0x3c>)
 8111aec:	68fb      	ldr	r3, [r7, #12]
 8111aee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8111af0:	68fb      	ldr	r3, [r7, #12]
}
 8111af2:	4618      	mov	r0, r3
 8111af4:	3710      	adds	r7, #16
 8111af6:	46bd      	mov	sp, r7
 8111af8:	bd80      	pop	{r7, pc}
 8111afa:	bf00      	nop
 8111afc:	1000b0b4 	.word	0x1000b0b4

08111b00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8111b00:	b580      	push	{r7, lr}
 8111b02:	b086      	sub	sp, #24
 8111b04:	af00      	add	r7, sp, #0
 8111b06:	60f8      	str	r0, [r7, #12]
 8111b08:	60b9      	str	r1, [r7, #8]
 8111b0a:	607a      	str	r2, [r7, #4]
 8111b0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8111b0e:	2300      	movs	r3, #0
 8111b10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8111b12:	68fb      	ldr	r3, [r7, #12]
 8111b14:	68ba      	ldr	r2, [r7, #8]
 8111b16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8111b18:	68fb      	ldr	r3, [r7, #12]
 8111b1a:	68fa      	ldr	r2, [r7, #12]
 8111b1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8111b1e:	68ba      	ldr	r2, [r7, #8]
 8111b20:	687b      	ldr	r3, [r7, #4]
 8111b22:	429a      	cmp	r2, r3
 8111b24:	d812      	bhi.n	8111b4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8111b26:	687a      	ldr	r2, [r7, #4]
 8111b28:	683b      	ldr	r3, [r7, #0]
 8111b2a:	1ad2      	subs	r2, r2, r3
 8111b2c:	68fb      	ldr	r3, [r7, #12]
 8111b2e:	699b      	ldr	r3, [r3, #24]
 8111b30:	429a      	cmp	r2, r3
 8111b32:	d302      	bcc.n	8111b3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8111b34:	2301      	movs	r3, #1
 8111b36:	617b      	str	r3, [r7, #20]
 8111b38:	e01b      	b.n	8111b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8111b3a:	4b10      	ldr	r3, [pc, #64]	@ (8111b7c <prvInsertTimerInActiveList+0x7c>)
 8111b3c:	681a      	ldr	r2, [r3, #0]
 8111b3e:	68fb      	ldr	r3, [r7, #12]
 8111b40:	3304      	adds	r3, #4
 8111b42:	4619      	mov	r1, r3
 8111b44:	4610      	mov	r0, r2
 8111b46:	f7fc fc9a 	bl	810e47e <vListInsert>
 8111b4a:	e012      	b.n	8111b72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8111b4c:	687a      	ldr	r2, [r7, #4]
 8111b4e:	683b      	ldr	r3, [r7, #0]
 8111b50:	429a      	cmp	r2, r3
 8111b52:	d206      	bcs.n	8111b62 <prvInsertTimerInActiveList+0x62>
 8111b54:	68ba      	ldr	r2, [r7, #8]
 8111b56:	683b      	ldr	r3, [r7, #0]
 8111b58:	429a      	cmp	r2, r3
 8111b5a:	d302      	bcc.n	8111b62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8111b5c:	2301      	movs	r3, #1
 8111b5e:	617b      	str	r3, [r7, #20]
 8111b60:	e007      	b.n	8111b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8111b62:	4b07      	ldr	r3, [pc, #28]	@ (8111b80 <prvInsertTimerInActiveList+0x80>)
 8111b64:	681a      	ldr	r2, [r3, #0]
 8111b66:	68fb      	ldr	r3, [r7, #12]
 8111b68:	3304      	adds	r3, #4
 8111b6a:	4619      	mov	r1, r3
 8111b6c:	4610      	mov	r0, r2
 8111b6e:	f7fc fc86 	bl	810e47e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8111b72:	697b      	ldr	r3, [r7, #20]
}
 8111b74:	4618      	mov	r0, r3
 8111b76:	3718      	adds	r7, #24
 8111b78:	46bd      	mov	sp, r7
 8111b7a:	bd80      	pop	{r7, pc}
 8111b7c:	1000b0a8 	.word	0x1000b0a8
 8111b80:	1000b0a4 	.word	0x1000b0a4

08111b84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8111b84:	b580      	push	{r7, lr}
 8111b86:	b08e      	sub	sp, #56	@ 0x38
 8111b88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8111b8a:	e0ce      	b.n	8111d2a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8111b8c:	687b      	ldr	r3, [r7, #4]
 8111b8e:	2b00      	cmp	r3, #0
 8111b90:	da19      	bge.n	8111bc6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8111b92:	1d3b      	adds	r3, r7, #4
 8111b94:	3304      	adds	r3, #4
 8111b96:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8111b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111b9a:	2b00      	cmp	r3, #0
 8111b9c:	d10b      	bne.n	8111bb6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8111b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111ba2:	f383 8811 	msr	BASEPRI, r3
 8111ba6:	f3bf 8f6f 	isb	sy
 8111baa:	f3bf 8f4f 	dsb	sy
 8111bae:	61fb      	str	r3, [r7, #28]
}
 8111bb0:	bf00      	nop
 8111bb2:	bf00      	nop
 8111bb4:	e7fd      	b.n	8111bb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8111bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111bb8:	681b      	ldr	r3, [r3, #0]
 8111bba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8111bbc:	6850      	ldr	r0, [r2, #4]
 8111bbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8111bc0:	6892      	ldr	r2, [r2, #8]
 8111bc2:	4611      	mov	r1, r2
 8111bc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8111bc6:	687b      	ldr	r3, [r7, #4]
 8111bc8:	2b00      	cmp	r3, #0
 8111bca:	f2c0 80ae 	blt.w	8111d2a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8111bce:	68fb      	ldr	r3, [r7, #12]
 8111bd0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8111bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111bd4:	695b      	ldr	r3, [r3, #20]
 8111bd6:	2b00      	cmp	r3, #0
 8111bd8:	d004      	beq.n	8111be4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8111bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111bdc:	3304      	adds	r3, #4
 8111bde:	4618      	mov	r0, r3
 8111be0:	f7fc fc86 	bl	810e4f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8111be4:	463b      	mov	r3, r7
 8111be6:	4618      	mov	r0, r3
 8111be8:	f7ff ff6a 	bl	8111ac0 <prvSampleTimeNow>
 8111bec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8111bee:	687b      	ldr	r3, [r7, #4]
 8111bf0:	2b09      	cmp	r3, #9
 8111bf2:	f200 8097 	bhi.w	8111d24 <prvProcessReceivedCommands+0x1a0>
 8111bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8111bfc <prvProcessReceivedCommands+0x78>)
 8111bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8111bfc:	08111c25 	.word	0x08111c25
 8111c00:	08111c25 	.word	0x08111c25
 8111c04:	08111c25 	.word	0x08111c25
 8111c08:	08111c9b 	.word	0x08111c9b
 8111c0c:	08111caf 	.word	0x08111caf
 8111c10:	08111cfb 	.word	0x08111cfb
 8111c14:	08111c25 	.word	0x08111c25
 8111c18:	08111c25 	.word	0x08111c25
 8111c1c:	08111c9b 	.word	0x08111c9b
 8111c20:	08111caf 	.word	0x08111caf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8111c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111c26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8111c2a:	f043 0301 	orr.w	r3, r3, #1
 8111c2e:	b2da      	uxtb	r2, r3
 8111c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111c32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8111c36:	68ba      	ldr	r2, [r7, #8]
 8111c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111c3a:	699b      	ldr	r3, [r3, #24]
 8111c3c:	18d1      	adds	r1, r2, r3
 8111c3e:	68bb      	ldr	r3, [r7, #8]
 8111c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8111c42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111c44:	f7ff ff5c 	bl	8111b00 <prvInsertTimerInActiveList>
 8111c48:	4603      	mov	r3, r0
 8111c4a:	2b00      	cmp	r3, #0
 8111c4c:	d06c      	beq.n	8111d28 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8111c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111c50:	6a1b      	ldr	r3, [r3, #32]
 8111c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111c54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8111c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111c58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8111c5c:	f003 0304 	and.w	r3, r3, #4
 8111c60:	2b00      	cmp	r3, #0
 8111c62:	d061      	beq.n	8111d28 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8111c64:	68ba      	ldr	r2, [r7, #8]
 8111c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111c68:	699b      	ldr	r3, [r3, #24]
 8111c6a:	441a      	add	r2, r3
 8111c6c:	2300      	movs	r3, #0
 8111c6e:	9300      	str	r3, [sp, #0]
 8111c70:	2300      	movs	r3, #0
 8111c72:	2100      	movs	r1, #0
 8111c74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111c76:	f7ff fe01 	bl	811187c <xTimerGenericCommand>
 8111c7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8111c7c:	6a3b      	ldr	r3, [r7, #32]
 8111c7e:	2b00      	cmp	r3, #0
 8111c80:	d152      	bne.n	8111d28 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8111c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111c86:	f383 8811 	msr	BASEPRI, r3
 8111c8a:	f3bf 8f6f 	isb	sy
 8111c8e:	f3bf 8f4f 	dsb	sy
 8111c92:	61bb      	str	r3, [r7, #24]
}
 8111c94:	bf00      	nop
 8111c96:	bf00      	nop
 8111c98:	e7fd      	b.n	8111c96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8111c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8111ca0:	f023 0301 	bic.w	r3, r3, #1
 8111ca4:	b2da      	uxtb	r2, r3
 8111ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111ca8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8111cac:	e03d      	b.n	8111d2a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8111cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8111cb4:	f043 0301 	orr.w	r3, r3, #1
 8111cb8:	b2da      	uxtb	r2, r3
 8111cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111cbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8111cc0:	68ba      	ldr	r2, [r7, #8]
 8111cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111cc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8111cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111cc8:	699b      	ldr	r3, [r3, #24]
 8111cca:	2b00      	cmp	r3, #0
 8111ccc:	d10b      	bne.n	8111ce6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8111cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111cd2:	f383 8811 	msr	BASEPRI, r3
 8111cd6:	f3bf 8f6f 	isb	sy
 8111cda:	f3bf 8f4f 	dsb	sy
 8111cde:	617b      	str	r3, [r7, #20]
}
 8111ce0:	bf00      	nop
 8111ce2:	bf00      	nop
 8111ce4:	e7fd      	b.n	8111ce2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8111ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111ce8:	699a      	ldr	r2, [r3, #24]
 8111cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8111cec:	18d1      	adds	r1, r2, r3
 8111cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8111cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8111cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111cf4:	f7ff ff04 	bl	8111b00 <prvInsertTimerInActiveList>
					break;
 8111cf8:	e017      	b.n	8111d2a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8111cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8111d00:	f003 0302 	and.w	r3, r3, #2
 8111d04:	2b00      	cmp	r3, #0
 8111d06:	d103      	bne.n	8111d10 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8111d08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111d0a:	f7fc fa47 	bl	810e19c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8111d0e:	e00c      	b.n	8111d2a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8111d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111d12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8111d16:	f023 0301 	bic.w	r3, r3, #1
 8111d1a:	b2da      	uxtb	r2, r3
 8111d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111d1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8111d22:	e002      	b.n	8111d2a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8111d24:	bf00      	nop
 8111d26:	e000      	b.n	8111d2a <prvProcessReceivedCommands+0x1a6>
					break;
 8111d28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8111d2a:	4b08      	ldr	r3, [pc, #32]	@ (8111d4c <prvProcessReceivedCommands+0x1c8>)
 8111d2c:	681b      	ldr	r3, [r3, #0]
 8111d2e:	1d39      	adds	r1, r7, #4
 8111d30:	2200      	movs	r2, #0
 8111d32:	4618      	mov	r0, r3
 8111d34:	f7fd faf6 	bl	810f324 <xQueueReceive>
 8111d38:	4603      	mov	r3, r0
 8111d3a:	2b00      	cmp	r3, #0
 8111d3c:	f47f af26 	bne.w	8111b8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8111d40:	bf00      	nop
 8111d42:	bf00      	nop
 8111d44:	3730      	adds	r7, #48	@ 0x30
 8111d46:	46bd      	mov	sp, r7
 8111d48:	bd80      	pop	{r7, pc}
 8111d4a:	bf00      	nop
 8111d4c:	1000b0ac 	.word	0x1000b0ac

08111d50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8111d50:	b580      	push	{r7, lr}
 8111d52:	b088      	sub	sp, #32
 8111d54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8111d56:	e049      	b.n	8111dec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8111d58:	4b2e      	ldr	r3, [pc, #184]	@ (8111e14 <prvSwitchTimerLists+0xc4>)
 8111d5a:	681b      	ldr	r3, [r3, #0]
 8111d5c:	68db      	ldr	r3, [r3, #12]
 8111d5e:	681b      	ldr	r3, [r3, #0]
 8111d60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8111d62:	4b2c      	ldr	r3, [pc, #176]	@ (8111e14 <prvSwitchTimerLists+0xc4>)
 8111d64:	681b      	ldr	r3, [r3, #0]
 8111d66:	68db      	ldr	r3, [r3, #12]
 8111d68:	68db      	ldr	r3, [r3, #12]
 8111d6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8111d6c:	68fb      	ldr	r3, [r7, #12]
 8111d6e:	3304      	adds	r3, #4
 8111d70:	4618      	mov	r0, r3
 8111d72:	f7fc fbbd 	bl	810e4f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8111d76:	68fb      	ldr	r3, [r7, #12]
 8111d78:	6a1b      	ldr	r3, [r3, #32]
 8111d7a:	68f8      	ldr	r0, [r7, #12]
 8111d7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8111d7e:	68fb      	ldr	r3, [r7, #12]
 8111d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8111d84:	f003 0304 	and.w	r3, r3, #4
 8111d88:	2b00      	cmp	r3, #0
 8111d8a:	d02f      	beq.n	8111dec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8111d8c:	68fb      	ldr	r3, [r7, #12]
 8111d8e:	699b      	ldr	r3, [r3, #24]
 8111d90:	693a      	ldr	r2, [r7, #16]
 8111d92:	4413      	add	r3, r2
 8111d94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8111d96:	68ba      	ldr	r2, [r7, #8]
 8111d98:	693b      	ldr	r3, [r7, #16]
 8111d9a:	429a      	cmp	r2, r3
 8111d9c:	d90e      	bls.n	8111dbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8111d9e:	68fb      	ldr	r3, [r7, #12]
 8111da0:	68ba      	ldr	r2, [r7, #8]
 8111da2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8111da4:	68fb      	ldr	r3, [r7, #12]
 8111da6:	68fa      	ldr	r2, [r7, #12]
 8111da8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8111daa:	4b1a      	ldr	r3, [pc, #104]	@ (8111e14 <prvSwitchTimerLists+0xc4>)
 8111dac:	681a      	ldr	r2, [r3, #0]
 8111dae:	68fb      	ldr	r3, [r7, #12]
 8111db0:	3304      	adds	r3, #4
 8111db2:	4619      	mov	r1, r3
 8111db4:	4610      	mov	r0, r2
 8111db6:	f7fc fb62 	bl	810e47e <vListInsert>
 8111dba:	e017      	b.n	8111dec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8111dbc:	2300      	movs	r3, #0
 8111dbe:	9300      	str	r3, [sp, #0]
 8111dc0:	2300      	movs	r3, #0
 8111dc2:	693a      	ldr	r2, [r7, #16]
 8111dc4:	2100      	movs	r1, #0
 8111dc6:	68f8      	ldr	r0, [r7, #12]
 8111dc8:	f7ff fd58 	bl	811187c <xTimerGenericCommand>
 8111dcc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8111dce:	687b      	ldr	r3, [r7, #4]
 8111dd0:	2b00      	cmp	r3, #0
 8111dd2:	d10b      	bne.n	8111dec <prvSwitchTimerLists+0x9c>
	__asm volatile
 8111dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111dd8:	f383 8811 	msr	BASEPRI, r3
 8111ddc:	f3bf 8f6f 	isb	sy
 8111de0:	f3bf 8f4f 	dsb	sy
 8111de4:	603b      	str	r3, [r7, #0]
}
 8111de6:	bf00      	nop
 8111de8:	bf00      	nop
 8111dea:	e7fd      	b.n	8111de8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8111dec:	4b09      	ldr	r3, [pc, #36]	@ (8111e14 <prvSwitchTimerLists+0xc4>)
 8111dee:	681b      	ldr	r3, [r3, #0]
 8111df0:	681b      	ldr	r3, [r3, #0]
 8111df2:	2b00      	cmp	r3, #0
 8111df4:	d1b0      	bne.n	8111d58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8111df6:	4b07      	ldr	r3, [pc, #28]	@ (8111e14 <prvSwitchTimerLists+0xc4>)
 8111df8:	681b      	ldr	r3, [r3, #0]
 8111dfa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8111dfc:	4b06      	ldr	r3, [pc, #24]	@ (8111e18 <prvSwitchTimerLists+0xc8>)
 8111dfe:	681b      	ldr	r3, [r3, #0]
 8111e00:	4a04      	ldr	r2, [pc, #16]	@ (8111e14 <prvSwitchTimerLists+0xc4>)
 8111e02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8111e04:	4a04      	ldr	r2, [pc, #16]	@ (8111e18 <prvSwitchTimerLists+0xc8>)
 8111e06:	697b      	ldr	r3, [r7, #20]
 8111e08:	6013      	str	r3, [r2, #0]
}
 8111e0a:	bf00      	nop
 8111e0c:	3718      	adds	r7, #24
 8111e0e:	46bd      	mov	sp, r7
 8111e10:	bd80      	pop	{r7, pc}
 8111e12:	bf00      	nop
 8111e14:	1000b0a4 	.word	0x1000b0a4
 8111e18:	1000b0a8 	.word	0x1000b0a8

08111e1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8111e1c:	b580      	push	{r7, lr}
 8111e1e:	b082      	sub	sp, #8
 8111e20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8111e22:	f7fc fcc1 	bl	810e7a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8111e26:	4b15      	ldr	r3, [pc, #84]	@ (8111e7c <prvCheckForValidListAndQueue+0x60>)
 8111e28:	681b      	ldr	r3, [r3, #0]
 8111e2a:	2b00      	cmp	r3, #0
 8111e2c:	d120      	bne.n	8111e70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8111e2e:	4814      	ldr	r0, [pc, #80]	@ (8111e80 <prvCheckForValidListAndQueue+0x64>)
 8111e30:	f7fc fad4 	bl	810e3dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8111e34:	4813      	ldr	r0, [pc, #76]	@ (8111e84 <prvCheckForValidListAndQueue+0x68>)
 8111e36:	f7fc fad1 	bl	810e3dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8111e3a:	4b13      	ldr	r3, [pc, #76]	@ (8111e88 <prvCheckForValidListAndQueue+0x6c>)
 8111e3c:	4a10      	ldr	r2, [pc, #64]	@ (8111e80 <prvCheckForValidListAndQueue+0x64>)
 8111e3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8111e40:	4b12      	ldr	r3, [pc, #72]	@ (8111e8c <prvCheckForValidListAndQueue+0x70>)
 8111e42:	4a10      	ldr	r2, [pc, #64]	@ (8111e84 <prvCheckForValidListAndQueue+0x68>)
 8111e44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8111e46:	2300      	movs	r3, #0
 8111e48:	9300      	str	r3, [sp, #0]
 8111e4a:	4b11      	ldr	r3, [pc, #68]	@ (8111e90 <prvCheckForValidListAndQueue+0x74>)
 8111e4c:	4a11      	ldr	r2, [pc, #68]	@ (8111e94 <prvCheckForValidListAndQueue+0x78>)
 8111e4e:	2110      	movs	r1, #16
 8111e50:	200a      	movs	r0, #10
 8111e52:	f7fc fe35 	bl	810eac0 <xQueueGenericCreateStatic>
 8111e56:	4603      	mov	r3, r0
 8111e58:	4a08      	ldr	r2, [pc, #32]	@ (8111e7c <prvCheckForValidListAndQueue+0x60>)
 8111e5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8111e5c:	4b07      	ldr	r3, [pc, #28]	@ (8111e7c <prvCheckForValidListAndQueue+0x60>)
 8111e5e:	681b      	ldr	r3, [r3, #0]
 8111e60:	2b00      	cmp	r3, #0
 8111e62:	d005      	beq.n	8111e70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8111e64:	4b05      	ldr	r3, [pc, #20]	@ (8111e7c <prvCheckForValidListAndQueue+0x60>)
 8111e66:	681b      	ldr	r3, [r3, #0]
 8111e68:	490b      	ldr	r1, [pc, #44]	@ (8111e98 <prvCheckForValidListAndQueue+0x7c>)
 8111e6a:	4618      	mov	r0, r3
 8111e6c:	f7fd fe1a 	bl	810faa4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8111e70:	f7fc fccc 	bl	810e80c <vPortExitCritical>
}
 8111e74:	bf00      	nop
 8111e76:	46bd      	mov	sp, r7
 8111e78:	bd80      	pop	{r7, pc}
 8111e7a:	bf00      	nop
 8111e7c:	1000b0ac 	.word	0x1000b0ac
 8111e80:	1000b07c 	.word	0x1000b07c
 8111e84:	1000b090 	.word	0x1000b090
 8111e88:	1000b0a4 	.word	0x1000b0a4
 8111e8c:	1000b0a8 	.word	0x1000b0a8
 8111e90:	1000b158 	.word	0x1000b158
 8111e94:	1000b0b8 	.word	0x1000b0b8
 8111e98:	0811f500 	.word	0x0811f500

08111e9c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8111e9c:	b480      	push	{r7}
 8111e9e:	b083      	sub	sp, #12
 8111ea0:	af00      	add	r7, sp, #0
 8111ea2:	4603      	mov	r3, r0
 8111ea4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8111ea6:	88fb      	ldrh	r3, [r7, #6]
 8111ea8:	021b      	lsls	r3, r3, #8
 8111eaa:	b21a      	sxth	r2, r3
 8111eac:	88fb      	ldrh	r3, [r7, #6]
 8111eae:	0a1b      	lsrs	r3, r3, #8
 8111eb0:	b29b      	uxth	r3, r3
 8111eb2:	b21b      	sxth	r3, r3
 8111eb4:	4313      	orrs	r3, r2
 8111eb6:	b21b      	sxth	r3, r3
 8111eb8:	b29b      	uxth	r3, r3
}
 8111eba:	4618      	mov	r0, r3
 8111ebc:	370c      	adds	r7, #12
 8111ebe:	46bd      	mov	sp, r7
 8111ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111ec4:	4770      	bx	lr

08111ec6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8111ec6:	b480      	push	{r7}
 8111ec8:	b083      	sub	sp, #12
 8111eca:	af00      	add	r7, sp, #0
 8111ecc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8111ece:	687b      	ldr	r3, [r7, #4]
 8111ed0:	061a      	lsls	r2, r3, #24
 8111ed2:	687b      	ldr	r3, [r7, #4]
 8111ed4:	021b      	lsls	r3, r3, #8
 8111ed6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8111eda:	431a      	orrs	r2, r3
 8111edc:	687b      	ldr	r3, [r7, #4]
 8111ede:	0a1b      	lsrs	r3, r3, #8
 8111ee0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8111ee4:	431a      	orrs	r2, r3
 8111ee6:	687b      	ldr	r3, [r7, #4]
 8111ee8:	0e1b      	lsrs	r3, r3, #24
 8111eea:	4313      	orrs	r3, r2
}
 8111eec:	4618      	mov	r0, r3
 8111eee:	370c      	adds	r7, #12
 8111ef0:	46bd      	mov	sp, r7
 8111ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111ef6:	4770      	bx	lr

08111ef8 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 8111ef8:	b580      	push	{r7, lr}
 8111efa:	b084      	sub	sp, #16
 8111efc:	af00      	add	r7, sp, #0
 8111efe:	6078      	str	r0, [r7, #4]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 8111f00:	687b      	ldr	r3, [r7, #4]
 8111f02:	2b00      	cmp	r3, #0
 8111f04:	d11e      	bne.n	8111f44 <free_etharp_q+0x4c>
 8111f06:	4b13      	ldr	r3, [pc, #76]	@ (8111f54 <free_etharp_q+0x5c>)
 8111f08:	2296      	movs	r2, #150	@ 0x96
 8111f0a:	4913      	ldr	r1, [pc, #76]	@ (8111f58 <free_etharp_q+0x60>)
 8111f0c:	4813      	ldr	r0, [pc, #76]	@ (8111f5c <free_etharp_q+0x64>)
 8111f0e:	f00b ff65 	bl	811dddc <iprintf>
  while (q) {
 8111f12:	e017      	b.n	8111f44 <free_etharp_q+0x4c>
    r = q;
 8111f14:	687b      	ldr	r3, [r7, #4]
 8111f16:	60fb      	str	r3, [r7, #12]
    q = q->next;
 8111f18:	687b      	ldr	r3, [r7, #4]
 8111f1a:	681b      	ldr	r3, [r3, #0]
 8111f1c:	607b      	str	r3, [r7, #4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8111f1e:	68fb      	ldr	r3, [r7, #12]
 8111f20:	685b      	ldr	r3, [r3, #4]
 8111f22:	2b00      	cmp	r3, #0
 8111f24:	d105      	bne.n	8111f32 <free_etharp_q+0x3a>
 8111f26:	4b0b      	ldr	r3, [pc, #44]	@ (8111f54 <free_etharp_q+0x5c>)
 8111f28:	229a      	movs	r2, #154	@ 0x9a
 8111f2a:	490d      	ldr	r1, [pc, #52]	@ (8111f60 <free_etharp_q+0x68>)
 8111f2c:	480b      	ldr	r0, [pc, #44]	@ (8111f5c <free_etharp_q+0x64>)
 8111f2e:	f00b ff55 	bl	811dddc <iprintf>
    pbuf_free(r->p);
 8111f32:	68fb      	ldr	r3, [r7, #12]
 8111f34:	685b      	ldr	r3, [r3, #4]
 8111f36:	4618      	mov	r0, r3
 8111f38:	f004 f9ba 	bl	81162b0 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8111f3c:	68f9      	ldr	r1, [r7, #12]
 8111f3e:	2009      	movs	r0, #9
 8111f40:	f003 fb12 	bl	8115568 <memp_free>
  while (q) {
 8111f44:	687b      	ldr	r3, [r7, #4]
 8111f46:	2b00      	cmp	r3, #0
 8111f48:	d1e4      	bne.n	8111f14 <free_etharp_q+0x1c>
  }
}
 8111f4a:	bf00      	nop
 8111f4c:	bf00      	nop
 8111f4e:	3710      	adds	r7, #16
 8111f50:	46bd      	mov	sp, r7
 8111f52:	bd80      	pop	{r7, pc}
 8111f54:	0811f508 	.word	0x0811f508
 8111f58:	0811f580 	.word	0x0811f580
 8111f5c:	0811f58c 	.word	0x0811f58c
 8111f60:	0811f5b4 	.word	0x0811f5b4

08111f64 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8111f64:	b580      	push	{r7, lr}
 8111f66:	b082      	sub	sp, #8
 8111f68:	af00      	add	r7, sp, #0
 8111f6a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8111f6c:	4915      	ldr	r1, [pc, #84]	@ (8111fc4 <etharp_free_entry+0x60>)
 8111f6e:	687a      	ldr	r2, [r7, #4]
 8111f70:	4613      	mov	r3, r2
 8111f72:	005b      	lsls	r3, r3, #1
 8111f74:	4413      	add	r3, r2
 8111f76:	00db      	lsls	r3, r3, #3
 8111f78:	440b      	add	r3, r1
 8111f7a:	681b      	ldr	r3, [r3, #0]
 8111f7c:	2b00      	cmp	r3, #0
 8111f7e:	d013      	beq.n	8111fa8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8111f80:	4910      	ldr	r1, [pc, #64]	@ (8111fc4 <etharp_free_entry+0x60>)
 8111f82:	687a      	ldr	r2, [r7, #4]
 8111f84:	4613      	mov	r3, r2
 8111f86:	005b      	lsls	r3, r3, #1
 8111f88:	4413      	add	r3, r2
 8111f8a:	00db      	lsls	r3, r3, #3
 8111f8c:	440b      	add	r3, r1
 8111f8e:	681b      	ldr	r3, [r3, #0]
 8111f90:	4618      	mov	r0, r3
 8111f92:	f7ff ffb1 	bl	8111ef8 <free_etharp_q>
    arp_table[i].q = NULL;
 8111f96:	490b      	ldr	r1, [pc, #44]	@ (8111fc4 <etharp_free_entry+0x60>)
 8111f98:	687a      	ldr	r2, [r7, #4]
 8111f9a:	4613      	mov	r3, r2
 8111f9c:	005b      	lsls	r3, r3, #1
 8111f9e:	4413      	add	r3, r2
 8111fa0:	00db      	lsls	r3, r3, #3
 8111fa2:	440b      	add	r3, r1
 8111fa4:	2200      	movs	r2, #0
 8111fa6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8111fa8:	4906      	ldr	r1, [pc, #24]	@ (8111fc4 <etharp_free_entry+0x60>)
 8111faa:	687a      	ldr	r2, [r7, #4]
 8111fac:	4613      	mov	r3, r2
 8111fae:	005b      	lsls	r3, r3, #1
 8111fb0:	4413      	add	r3, r2
 8111fb2:	00db      	lsls	r3, r3, #3
 8111fb4:	440b      	add	r3, r1
 8111fb6:	3314      	adds	r3, #20
 8111fb8:	2200      	movs	r2, #0
 8111fba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8111fbc:	bf00      	nop
 8111fbe:	3708      	adds	r7, #8
 8111fc0:	46bd      	mov	sp, r7
 8111fc2:	bd80      	pop	{r7, pc}
 8111fc4:	1000b1a8 	.word	0x1000b1a8

08111fc8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8111fc8:	b580      	push	{r7, lr}
 8111fca:	b082      	sub	sp, #8
 8111fcc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8111fce:	2300      	movs	r3, #0
 8111fd0:	607b      	str	r3, [r7, #4]
 8111fd2:	e09a      	b.n	811210a <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 8111fd4:	4951      	ldr	r1, [pc, #324]	@ (811211c <etharp_tmr+0x154>)
 8111fd6:	687a      	ldr	r2, [r7, #4]
 8111fd8:	4613      	mov	r3, r2
 8111fda:	005b      	lsls	r3, r3, #1
 8111fdc:	4413      	add	r3, r2
 8111fde:	00db      	lsls	r3, r3, #3
 8111fe0:	440b      	add	r3, r1
 8111fe2:	3314      	adds	r3, #20
 8111fe4:	781b      	ldrb	r3, [r3, #0]
 8111fe6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8111fe8:	78fb      	ldrb	r3, [r7, #3]
 8111fea:	2b00      	cmp	r3, #0
 8111fec:	f000 808a 	beq.w	8112104 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 8111ff0:	78fb      	ldrb	r3, [r7, #3]
 8111ff2:	2b05      	cmp	r3, #5
 8111ff4:	f000 8086 	beq.w	8112104 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8111ff8:	4948      	ldr	r1, [pc, #288]	@ (811211c <etharp_tmr+0x154>)
 8111ffa:	687a      	ldr	r2, [r7, #4]
 8111ffc:	4613      	mov	r3, r2
 8111ffe:	005b      	lsls	r3, r3, #1
 8112000:	4413      	add	r3, r2
 8112002:	00db      	lsls	r3, r3, #3
 8112004:	440b      	add	r3, r1
 8112006:	3312      	adds	r3, #18
 8112008:	881b      	ldrh	r3, [r3, #0]
 811200a:	3301      	adds	r3, #1
 811200c:	b298      	uxth	r0, r3
 811200e:	4943      	ldr	r1, [pc, #268]	@ (811211c <etharp_tmr+0x154>)
 8112010:	687a      	ldr	r2, [r7, #4]
 8112012:	4613      	mov	r3, r2
 8112014:	005b      	lsls	r3, r3, #1
 8112016:	4413      	add	r3, r2
 8112018:	00db      	lsls	r3, r3, #3
 811201a:	440b      	add	r3, r1
 811201c:	3312      	adds	r3, #18
 811201e:	4602      	mov	r2, r0
 8112020:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8112022:	493e      	ldr	r1, [pc, #248]	@ (811211c <etharp_tmr+0x154>)
 8112024:	687a      	ldr	r2, [r7, #4]
 8112026:	4613      	mov	r3, r2
 8112028:	005b      	lsls	r3, r3, #1
 811202a:	4413      	add	r3, r2
 811202c:	00db      	lsls	r3, r3, #3
 811202e:	440b      	add	r3, r1
 8112030:	3312      	adds	r3, #18
 8112032:	881b      	ldrh	r3, [r3, #0]
 8112034:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8112038:	d215      	bcs.n	8112066 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 811203a:	4938      	ldr	r1, [pc, #224]	@ (811211c <etharp_tmr+0x154>)
 811203c:	687a      	ldr	r2, [r7, #4]
 811203e:	4613      	mov	r3, r2
 8112040:	005b      	lsls	r3, r3, #1
 8112042:	4413      	add	r3, r2
 8112044:	00db      	lsls	r3, r3, #3
 8112046:	440b      	add	r3, r1
 8112048:	3314      	adds	r3, #20
 811204a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 811204c:	2b01      	cmp	r3, #1
 811204e:	d10e      	bne.n	811206e <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8112050:	4932      	ldr	r1, [pc, #200]	@ (811211c <etharp_tmr+0x154>)
 8112052:	687a      	ldr	r2, [r7, #4]
 8112054:	4613      	mov	r3, r2
 8112056:	005b      	lsls	r3, r3, #1
 8112058:	4413      	add	r3, r2
 811205a:	00db      	lsls	r3, r3, #3
 811205c:	440b      	add	r3, r1
 811205e:	3312      	adds	r3, #18
 8112060:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8112062:	2b04      	cmp	r3, #4
 8112064:	d903      	bls.n	811206e <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8112066:	6878      	ldr	r0, [r7, #4]
 8112068:	f7ff ff7c 	bl	8111f64 <etharp_free_entry>
 811206c:	e04a      	b.n	8112104 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 811206e:	492b      	ldr	r1, [pc, #172]	@ (811211c <etharp_tmr+0x154>)
 8112070:	687a      	ldr	r2, [r7, #4]
 8112072:	4613      	mov	r3, r2
 8112074:	005b      	lsls	r3, r3, #1
 8112076:	4413      	add	r3, r2
 8112078:	00db      	lsls	r3, r3, #3
 811207a:	440b      	add	r3, r1
 811207c:	3314      	adds	r3, #20
 811207e:	781b      	ldrb	r3, [r3, #0]
 8112080:	2b03      	cmp	r3, #3
 8112082:	d10a      	bne.n	811209a <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8112084:	4925      	ldr	r1, [pc, #148]	@ (811211c <etharp_tmr+0x154>)
 8112086:	687a      	ldr	r2, [r7, #4]
 8112088:	4613      	mov	r3, r2
 811208a:	005b      	lsls	r3, r3, #1
 811208c:	4413      	add	r3, r2
 811208e:	00db      	lsls	r3, r3, #3
 8112090:	440b      	add	r3, r1
 8112092:	3314      	adds	r3, #20
 8112094:	2204      	movs	r2, #4
 8112096:	701a      	strb	r2, [r3, #0]
 8112098:	e034      	b.n	8112104 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 811209a:	4920      	ldr	r1, [pc, #128]	@ (811211c <etharp_tmr+0x154>)
 811209c:	687a      	ldr	r2, [r7, #4]
 811209e:	4613      	mov	r3, r2
 81120a0:	005b      	lsls	r3, r3, #1
 81120a2:	4413      	add	r3, r2
 81120a4:	00db      	lsls	r3, r3, #3
 81120a6:	440b      	add	r3, r1
 81120a8:	3314      	adds	r3, #20
 81120aa:	781b      	ldrb	r3, [r3, #0]
 81120ac:	2b04      	cmp	r3, #4
 81120ae:	d10a      	bne.n	81120c6 <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 81120b0:	491a      	ldr	r1, [pc, #104]	@ (811211c <etharp_tmr+0x154>)
 81120b2:	687a      	ldr	r2, [r7, #4]
 81120b4:	4613      	mov	r3, r2
 81120b6:	005b      	lsls	r3, r3, #1
 81120b8:	4413      	add	r3, r2
 81120ba:	00db      	lsls	r3, r3, #3
 81120bc:	440b      	add	r3, r1
 81120be:	3314      	adds	r3, #20
 81120c0:	2202      	movs	r2, #2
 81120c2:	701a      	strb	r2, [r3, #0]
 81120c4:	e01e      	b.n	8112104 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 81120c6:	4915      	ldr	r1, [pc, #84]	@ (811211c <etharp_tmr+0x154>)
 81120c8:	687a      	ldr	r2, [r7, #4]
 81120ca:	4613      	mov	r3, r2
 81120cc:	005b      	lsls	r3, r3, #1
 81120ce:	4413      	add	r3, r2
 81120d0:	00db      	lsls	r3, r3, #3
 81120d2:	440b      	add	r3, r1
 81120d4:	3314      	adds	r3, #20
 81120d6:	781b      	ldrb	r3, [r3, #0]
 81120d8:	2b01      	cmp	r3, #1
 81120da:	d113      	bne.n	8112104 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 81120dc:	490f      	ldr	r1, [pc, #60]	@ (811211c <etharp_tmr+0x154>)
 81120de:	687a      	ldr	r2, [r7, #4]
 81120e0:	4613      	mov	r3, r2
 81120e2:	005b      	lsls	r3, r3, #1
 81120e4:	4413      	add	r3, r2
 81120e6:	00db      	lsls	r3, r3, #3
 81120e8:	440b      	add	r3, r1
 81120ea:	3308      	adds	r3, #8
 81120ec:	6818      	ldr	r0, [r3, #0]
 81120ee:	687a      	ldr	r2, [r7, #4]
 81120f0:	4613      	mov	r3, r2
 81120f2:	005b      	lsls	r3, r3, #1
 81120f4:	4413      	add	r3, r2
 81120f6:	00db      	lsls	r3, r3, #3
 81120f8:	4a08      	ldr	r2, [pc, #32]	@ (811211c <etharp_tmr+0x154>)
 81120fa:	4413      	add	r3, r2
 81120fc:	3304      	adds	r3, #4
 81120fe:	4619      	mov	r1, r3
 8112100:	f000 fefe 	bl	8112f00 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8112104:	687b      	ldr	r3, [r7, #4]
 8112106:	3301      	adds	r3, #1
 8112108:	607b      	str	r3, [r7, #4]
 811210a:	687b      	ldr	r3, [r7, #4]
 811210c:	2b09      	cmp	r3, #9
 811210e:	f77f af61 	ble.w	8111fd4 <etharp_tmr+0xc>
      }
    }
  }
}
 8112112:	bf00      	nop
 8112114:	bf00      	nop
 8112116:	3708      	adds	r7, #8
 8112118:	46bd      	mov	sp, r7
 811211a:	bd80      	pop	{r7, pc}
 811211c:	1000b1a8 	.word	0x1000b1a8

08112120 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8112120:	b580      	push	{r7, lr}
 8112122:	b08a      	sub	sp, #40	@ 0x28
 8112124:	af00      	add	r7, sp, #0
 8112126:	60f8      	str	r0, [r7, #12]
 8112128:	460b      	mov	r3, r1
 811212a:	607a      	str	r2, [r7, #4]
 811212c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 811212e:	230a      	movs	r3, #10
 8112130:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8112132:	230a      	movs	r3, #10
 8112134:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8112136:	230a      	movs	r3, #10
 8112138:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 811213a:	2300      	movs	r3, #0
 811213c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 811213e:	230a      	movs	r3, #10
 8112140:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8112142:	2300      	movs	r3, #0
 8112144:	83bb      	strh	r3, [r7, #28]
 8112146:	2300      	movs	r3, #0
 8112148:	837b      	strh	r3, [r7, #26]
 811214a:	2300      	movs	r3, #0
 811214c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811214e:	2300      	movs	r3, #0
 8112150:	843b      	strh	r3, [r7, #32]
 8112152:	e0b1      	b.n	81122b8 <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 8112154:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8112158:	49a7      	ldr	r1, [pc, #668]	@ (81123f8 <etharp_find_entry+0x2d8>)
 811215a:	4613      	mov	r3, r2
 811215c:	005b      	lsls	r3, r3, #1
 811215e:	4413      	add	r3, r2
 8112160:	00db      	lsls	r3, r3, #3
 8112162:	440b      	add	r3, r1
 8112164:	3314      	adds	r3, #20
 8112166:	781b      	ldrb	r3, [r3, #0]
 8112168:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 811216a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 811216e:	2b0a      	cmp	r3, #10
 8112170:	d105      	bne.n	811217e <etharp_find_entry+0x5e>
 8112172:	7dfb      	ldrb	r3, [r7, #23]
 8112174:	2b00      	cmp	r3, #0
 8112176:	d102      	bne.n	811217e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8112178:	8c3b      	ldrh	r3, [r7, #32]
 811217a:	847b      	strh	r3, [r7, #34]	@ 0x22
 811217c:	e098      	b.n	81122b0 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 811217e:	7dfb      	ldrb	r3, [r7, #23]
 8112180:	2b00      	cmp	r3, #0
 8112182:	f000 8095 	beq.w	81122b0 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8112186:	7dfb      	ldrb	r3, [r7, #23]
 8112188:	2b01      	cmp	r3, #1
 811218a:	d009      	beq.n	81121a0 <etharp_find_entry+0x80>
 811218c:	7dfb      	ldrb	r3, [r7, #23]
 811218e:	2b01      	cmp	r3, #1
 8112190:	d806      	bhi.n	81121a0 <etharp_find_entry+0x80>
 8112192:	4b9a      	ldr	r3, [pc, #616]	@ (81123fc <etharp_find_entry+0x2dc>)
 8112194:	f240 1223 	movw	r2, #291	@ 0x123
 8112198:	4999      	ldr	r1, [pc, #612]	@ (8112400 <etharp_find_entry+0x2e0>)
 811219a:	489a      	ldr	r0, [pc, #616]	@ (8112404 <etharp_find_entry+0x2e4>)
 811219c:	f00b fe1e 	bl	811dddc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 81121a0:	68fb      	ldr	r3, [r7, #12]
 81121a2:	2b00      	cmp	r3, #0
 81121a4:	d020      	beq.n	81121e8 <etharp_find_entry+0xc8>
 81121a6:	68fb      	ldr	r3, [r7, #12]
 81121a8:	6819      	ldr	r1, [r3, #0]
 81121aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81121ae:	4892      	ldr	r0, [pc, #584]	@ (81123f8 <etharp_find_entry+0x2d8>)
 81121b0:	4613      	mov	r3, r2
 81121b2:	005b      	lsls	r3, r3, #1
 81121b4:	4413      	add	r3, r2
 81121b6:	00db      	lsls	r3, r3, #3
 81121b8:	4403      	add	r3, r0
 81121ba:	3304      	adds	r3, #4
 81121bc:	681b      	ldr	r3, [r3, #0]
 81121be:	4299      	cmp	r1, r3
 81121c0:	d112      	bne.n	81121e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 81121c2:	687b      	ldr	r3, [r7, #4]
 81121c4:	2b00      	cmp	r3, #0
 81121c6:	d00c      	beq.n	81121e2 <etharp_find_entry+0xc2>
 81121c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81121cc:	498a      	ldr	r1, [pc, #552]	@ (81123f8 <etharp_find_entry+0x2d8>)
 81121ce:	4613      	mov	r3, r2
 81121d0:	005b      	lsls	r3, r3, #1
 81121d2:	4413      	add	r3, r2
 81121d4:	00db      	lsls	r3, r3, #3
 81121d6:	440b      	add	r3, r1
 81121d8:	3308      	adds	r3, #8
 81121da:	681b      	ldr	r3, [r3, #0]
 81121dc:	687a      	ldr	r2, [r7, #4]
 81121de:	429a      	cmp	r2, r3
 81121e0:	d102      	bne.n	81121e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 81121e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 81121e6:	e103      	b.n	81123f0 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 81121e8:	7dfb      	ldrb	r3, [r7, #23]
 81121ea:	2b01      	cmp	r3, #1
 81121ec:	d140      	bne.n	8112270 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 81121ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81121f2:	4981      	ldr	r1, [pc, #516]	@ (81123f8 <etharp_find_entry+0x2d8>)
 81121f4:	4613      	mov	r3, r2
 81121f6:	005b      	lsls	r3, r3, #1
 81121f8:	4413      	add	r3, r2
 81121fa:	00db      	lsls	r3, r3, #3
 81121fc:	440b      	add	r3, r1
 81121fe:	681b      	ldr	r3, [r3, #0]
 8112200:	2b00      	cmp	r3, #0
 8112202:	d01a      	beq.n	811223a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8112204:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8112208:	497b      	ldr	r1, [pc, #492]	@ (81123f8 <etharp_find_entry+0x2d8>)
 811220a:	4613      	mov	r3, r2
 811220c:	005b      	lsls	r3, r3, #1
 811220e:	4413      	add	r3, r2
 8112210:	00db      	lsls	r3, r3, #3
 8112212:	440b      	add	r3, r1
 8112214:	3312      	adds	r3, #18
 8112216:	881b      	ldrh	r3, [r3, #0]
 8112218:	8bba      	ldrh	r2, [r7, #28]
 811221a:	429a      	cmp	r2, r3
 811221c:	d848      	bhi.n	81122b0 <etharp_find_entry+0x190>
            old_queue = i;
 811221e:	8c3b      	ldrh	r3, [r7, #32]
 8112220:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8112222:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8112226:	4974      	ldr	r1, [pc, #464]	@ (81123f8 <etharp_find_entry+0x2d8>)
 8112228:	4613      	mov	r3, r2
 811222a:	005b      	lsls	r3, r3, #1
 811222c:	4413      	add	r3, r2
 811222e:	00db      	lsls	r3, r3, #3
 8112230:	440b      	add	r3, r1
 8112232:	3312      	adds	r3, #18
 8112234:	881b      	ldrh	r3, [r3, #0]
 8112236:	83bb      	strh	r3, [r7, #28]
 8112238:	e03a      	b.n	81122b0 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 811223a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811223e:	496e      	ldr	r1, [pc, #440]	@ (81123f8 <etharp_find_entry+0x2d8>)
 8112240:	4613      	mov	r3, r2
 8112242:	005b      	lsls	r3, r3, #1
 8112244:	4413      	add	r3, r2
 8112246:	00db      	lsls	r3, r3, #3
 8112248:	440b      	add	r3, r1
 811224a:	3312      	adds	r3, #18
 811224c:	881b      	ldrh	r3, [r3, #0]
 811224e:	8b7a      	ldrh	r2, [r7, #26]
 8112250:	429a      	cmp	r2, r3
 8112252:	d82d      	bhi.n	81122b0 <etharp_find_entry+0x190>
            old_pending = i;
 8112254:	8c3b      	ldrh	r3, [r7, #32]
 8112256:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8112258:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811225c:	4966      	ldr	r1, [pc, #408]	@ (81123f8 <etharp_find_entry+0x2d8>)
 811225e:	4613      	mov	r3, r2
 8112260:	005b      	lsls	r3, r3, #1
 8112262:	4413      	add	r3, r2
 8112264:	00db      	lsls	r3, r3, #3
 8112266:	440b      	add	r3, r1
 8112268:	3312      	adds	r3, #18
 811226a:	881b      	ldrh	r3, [r3, #0]
 811226c:	837b      	strh	r3, [r7, #26]
 811226e:	e01f      	b.n	81122b0 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8112270:	7dfb      	ldrb	r3, [r7, #23]
 8112272:	2b01      	cmp	r3, #1
 8112274:	d91c      	bls.n	81122b0 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 8112276:	7dfb      	ldrb	r3, [r7, #23]
 8112278:	2b04      	cmp	r3, #4
 811227a:	d819      	bhi.n	81122b0 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 811227c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8112280:	495d      	ldr	r1, [pc, #372]	@ (81123f8 <etharp_find_entry+0x2d8>)
 8112282:	4613      	mov	r3, r2
 8112284:	005b      	lsls	r3, r3, #1
 8112286:	4413      	add	r3, r2
 8112288:	00db      	lsls	r3, r3, #3
 811228a:	440b      	add	r3, r1
 811228c:	3312      	adds	r3, #18
 811228e:	881b      	ldrh	r3, [r3, #0]
 8112290:	8b3a      	ldrh	r2, [r7, #24]
 8112292:	429a      	cmp	r2, r3
 8112294:	d80c      	bhi.n	81122b0 <etharp_find_entry+0x190>
            old_stable = i;
 8112296:	8c3b      	ldrh	r3, [r7, #32]
 8112298:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 811229a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811229e:	4956      	ldr	r1, [pc, #344]	@ (81123f8 <etharp_find_entry+0x2d8>)
 81122a0:	4613      	mov	r3, r2
 81122a2:	005b      	lsls	r3, r3, #1
 81122a4:	4413      	add	r3, r2
 81122a6:	00db      	lsls	r3, r3, #3
 81122a8:	440b      	add	r3, r1
 81122aa:	3312      	adds	r3, #18
 81122ac:	881b      	ldrh	r3, [r3, #0]
 81122ae:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 81122b0:	8c3b      	ldrh	r3, [r7, #32]
 81122b2:	3301      	adds	r3, #1
 81122b4:	b29b      	uxth	r3, r3
 81122b6:	843b      	strh	r3, [r7, #32]
 81122b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 81122bc:	2b09      	cmp	r3, #9
 81122be:	f77f af49 	ble.w	8112154 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 81122c2:	7afb      	ldrb	r3, [r7, #11]
 81122c4:	f003 0302 	and.w	r3, r3, #2
 81122c8:	2b00      	cmp	r3, #0
 81122ca:	d108      	bne.n	81122de <etharp_find_entry+0x1be>
 81122cc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 81122d0:	2b0a      	cmp	r3, #10
 81122d2:	d107      	bne.n	81122e4 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 81122d4:	7afb      	ldrb	r3, [r7, #11]
 81122d6:	f003 0301 	and.w	r3, r3, #1
 81122da:	2b00      	cmp	r3, #0
 81122dc:	d102      	bne.n	81122e4 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 81122de:	f04f 33ff 	mov.w	r3, #4294967295
 81122e2:	e085      	b.n	81123f0 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 81122e4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 81122e8:	2b09      	cmp	r3, #9
 81122ea:	dc02      	bgt.n	81122f2 <etharp_find_entry+0x1d2>
    i = empty;
 81122ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81122ee:	843b      	strh	r3, [r7, #32]
 81122f0:	e039      	b.n	8112366 <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 81122f2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 81122f6:	2b09      	cmp	r3, #9
 81122f8:	dc14      	bgt.n	8112324 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 81122fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81122fc:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 81122fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8112302:	493d      	ldr	r1, [pc, #244]	@ (81123f8 <etharp_find_entry+0x2d8>)
 8112304:	4613      	mov	r3, r2
 8112306:	005b      	lsls	r3, r3, #1
 8112308:	4413      	add	r3, r2
 811230a:	00db      	lsls	r3, r3, #3
 811230c:	440b      	add	r3, r1
 811230e:	681b      	ldr	r3, [r3, #0]
 8112310:	2b00      	cmp	r3, #0
 8112312:	d018      	beq.n	8112346 <etharp_find_entry+0x226>
 8112314:	4b39      	ldr	r3, [pc, #228]	@ (81123fc <etharp_find_entry+0x2dc>)
 8112316:	f240 126d 	movw	r2, #365	@ 0x16d
 811231a:	493b      	ldr	r1, [pc, #236]	@ (8112408 <etharp_find_entry+0x2e8>)
 811231c:	4839      	ldr	r0, [pc, #228]	@ (8112404 <etharp_find_entry+0x2e4>)
 811231e:	f00b fd5d 	bl	811dddc <iprintf>
 8112322:	e010      	b.n	8112346 <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8112324:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8112328:	2b09      	cmp	r3, #9
 811232a:	dc02      	bgt.n	8112332 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 811232c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 811232e:	843b      	strh	r3, [r7, #32]
 8112330:	e009      	b.n	8112346 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8112332:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8112336:	2b09      	cmp	r3, #9
 8112338:	dc02      	bgt.n	8112340 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 811233a:	8bfb      	ldrh	r3, [r7, #30]
 811233c:	843b      	strh	r3, [r7, #32]
 811233e:	e002      	b.n	8112346 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8112340:	f04f 33ff 	mov.w	r3, #4294967295
 8112344:	e054      	b.n	81123f0 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8112346:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 811234a:	2b09      	cmp	r3, #9
 811234c:	dd06      	ble.n	811235c <etharp_find_entry+0x23c>
 811234e:	4b2b      	ldr	r3, [pc, #172]	@ (81123fc <etharp_find_entry+0x2dc>)
 8112350:	f240 127f 	movw	r2, #383	@ 0x17f
 8112354:	492d      	ldr	r1, [pc, #180]	@ (811240c <etharp_find_entry+0x2ec>)
 8112356:	482b      	ldr	r0, [pc, #172]	@ (8112404 <etharp_find_entry+0x2e4>)
 8112358:	f00b fd40 	bl	811dddc <iprintf>
    etharp_free_entry(i);
 811235c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8112360:	4618      	mov	r0, r3
 8112362:	f7ff fdff 	bl	8111f64 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8112366:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 811236a:	2b09      	cmp	r3, #9
 811236c:	dd06      	ble.n	811237c <etharp_find_entry+0x25c>
 811236e:	4b23      	ldr	r3, [pc, #140]	@ (81123fc <etharp_find_entry+0x2dc>)
 8112370:	f240 1283 	movw	r2, #387	@ 0x183
 8112374:	4925      	ldr	r1, [pc, #148]	@ (811240c <etharp_find_entry+0x2ec>)
 8112376:	4823      	ldr	r0, [pc, #140]	@ (8112404 <etharp_find_entry+0x2e4>)
 8112378:	f00b fd30 	bl	811dddc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 811237c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8112380:	491d      	ldr	r1, [pc, #116]	@ (81123f8 <etharp_find_entry+0x2d8>)
 8112382:	4613      	mov	r3, r2
 8112384:	005b      	lsls	r3, r3, #1
 8112386:	4413      	add	r3, r2
 8112388:	00db      	lsls	r3, r3, #3
 811238a:	440b      	add	r3, r1
 811238c:	3314      	adds	r3, #20
 811238e:	781b      	ldrb	r3, [r3, #0]
 8112390:	2b00      	cmp	r3, #0
 8112392:	d006      	beq.n	81123a2 <etharp_find_entry+0x282>
 8112394:	4b19      	ldr	r3, [pc, #100]	@ (81123fc <etharp_find_entry+0x2dc>)
 8112396:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 811239a:	491d      	ldr	r1, [pc, #116]	@ (8112410 <etharp_find_entry+0x2f0>)
 811239c:	4819      	ldr	r0, [pc, #100]	@ (8112404 <etharp_find_entry+0x2e4>)
 811239e:	f00b fd1d 	bl	811dddc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 81123a2:	68fb      	ldr	r3, [r7, #12]
 81123a4:	2b00      	cmp	r3, #0
 81123a6:	d00b      	beq.n	81123c0 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 81123a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81123ac:	68fb      	ldr	r3, [r7, #12]
 81123ae:	6819      	ldr	r1, [r3, #0]
 81123b0:	4811      	ldr	r0, [pc, #68]	@ (81123f8 <etharp_find_entry+0x2d8>)
 81123b2:	4613      	mov	r3, r2
 81123b4:	005b      	lsls	r3, r3, #1
 81123b6:	4413      	add	r3, r2
 81123b8:	00db      	lsls	r3, r3, #3
 81123ba:	4403      	add	r3, r0
 81123bc:	3304      	adds	r3, #4
 81123be:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 81123c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81123c4:	490c      	ldr	r1, [pc, #48]	@ (81123f8 <etharp_find_entry+0x2d8>)
 81123c6:	4613      	mov	r3, r2
 81123c8:	005b      	lsls	r3, r3, #1
 81123ca:	4413      	add	r3, r2
 81123cc:	00db      	lsls	r3, r3, #3
 81123ce:	440b      	add	r3, r1
 81123d0:	3312      	adds	r3, #18
 81123d2:	2200      	movs	r2, #0
 81123d4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 81123d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81123da:	4907      	ldr	r1, [pc, #28]	@ (81123f8 <etharp_find_entry+0x2d8>)
 81123dc:	4613      	mov	r3, r2
 81123de:	005b      	lsls	r3, r3, #1
 81123e0:	4413      	add	r3, r2
 81123e2:	00db      	lsls	r3, r3, #3
 81123e4:	440b      	add	r3, r1
 81123e6:	3308      	adds	r3, #8
 81123e8:	687a      	ldr	r2, [r7, #4]
 81123ea:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 81123ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 81123f0:	4618      	mov	r0, r3
 81123f2:	3728      	adds	r7, #40	@ 0x28
 81123f4:	46bd      	mov	sp, r7
 81123f6:	bd80      	pop	{r7, pc}
 81123f8:	1000b1a8 	.word	0x1000b1a8
 81123fc:	0811f508 	.word	0x0811f508
 8112400:	0811f5c4 	.word	0x0811f5c4
 8112404:	0811f58c 	.word	0x0811f58c
 8112408:	0811f604 	.word	0x0811f604
 811240c:	0811f61c 	.word	0x0811f61c
 8112410:	0811f630 	.word	0x0811f630

08112414 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8112414:	b580      	push	{r7, lr}
 8112416:	b08a      	sub	sp, #40	@ 0x28
 8112418:	af02      	add	r7, sp, #8
 811241a:	60f8      	str	r0, [r7, #12]
 811241c:	60b9      	str	r1, [r7, #8]
 811241e:	607a      	str	r2, [r7, #4]
 8112420:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8112422:	68fb      	ldr	r3, [r7, #12]
 8112424:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8112428:	2b06      	cmp	r3, #6
 811242a:	d006      	beq.n	811243a <etharp_update_arp_entry+0x26>
 811242c:	4b5c      	ldr	r3, [pc, #368]	@ (81125a0 <etharp_update_arp_entry+0x18c>)
 811242e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8112432:	495c      	ldr	r1, [pc, #368]	@ (81125a4 <etharp_update_arp_entry+0x190>)
 8112434:	485c      	ldr	r0, [pc, #368]	@ (81125a8 <etharp_update_arp_entry+0x194>)
 8112436:	f00b fcd1 	bl	811dddc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 811243a:	68bb      	ldr	r3, [r7, #8]
 811243c:	2b00      	cmp	r3, #0
 811243e:	d012      	beq.n	8112466 <etharp_update_arp_entry+0x52>
 8112440:	68bb      	ldr	r3, [r7, #8]
 8112442:	681b      	ldr	r3, [r3, #0]
 8112444:	2b00      	cmp	r3, #0
 8112446:	d00e      	beq.n	8112466 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8112448:	68bb      	ldr	r3, [r7, #8]
 811244a:	681b      	ldr	r3, [r3, #0]
 811244c:	68f9      	ldr	r1, [r7, #12]
 811244e:	4618      	mov	r0, r3
 8112450:	f001 fb5c 	bl	8113b0c <ip4_addr_isbroadcast_u32>
 8112454:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8112456:	2b00      	cmp	r3, #0
 8112458:	d105      	bne.n	8112466 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 811245a:	68bb      	ldr	r3, [r7, #8]
 811245c:	681b      	ldr	r3, [r3, #0]
 811245e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8112462:	2be0      	cmp	r3, #224	@ 0xe0
 8112464:	d102      	bne.n	811246c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8112466:	f06f 030f 	mvn.w	r3, #15
 811246a:	e095      	b.n	8112598 <etharp_update_arp_entry+0x184>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 811246c:	78fb      	ldrb	r3, [r7, #3]
 811246e:	68fa      	ldr	r2, [r7, #12]
 8112470:	4619      	mov	r1, r3
 8112472:	68b8      	ldr	r0, [r7, #8]
 8112474:	f7ff fe54 	bl	8112120 <etharp_find_entry>
 8112478:	4603      	mov	r3, r0
 811247a:	83fb      	strh	r3, [r7, #30]
  /* bail out if no entry could be found */
  if (i < 0) {
 811247c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8112480:	2b00      	cmp	r3, #0
 8112482:	da02      	bge.n	811248a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8112484:	8bfb      	ldrh	r3, [r7, #30]
 8112486:	b25b      	sxtb	r3, r3
 8112488:	e086      	b.n	8112598 <etharp_update_arp_entry+0x184>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 811248a:	78fb      	ldrb	r3, [r7, #3]
 811248c:	f003 0304 	and.w	r3, r3, #4
 8112490:	2b00      	cmp	r3, #0
 8112492:	d00b      	beq.n	81124ac <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 8112494:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8112498:	4944      	ldr	r1, [pc, #272]	@ (81125ac <etharp_update_arp_entry+0x198>)
 811249a:	4613      	mov	r3, r2
 811249c:	005b      	lsls	r3, r3, #1
 811249e:	4413      	add	r3, r2
 81124a0:	00db      	lsls	r3, r3, #3
 81124a2:	440b      	add	r3, r1
 81124a4:	3314      	adds	r3, #20
 81124a6:	2205      	movs	r2, #5
 81124a8:	701a      	strb	r2, [r3, #0]
 81124aa:	e019      	b.n	81124e0 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 81124ac:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 81124b0:	493e      	ldr	r1, [pc, #248]	@ (81125ac <etharp_update_arp_entry+0x198>)
 81124b2:	4613      	mov	r3, r2
 81124b4:	005b      	lsls	r3, r3, #1
 81124b6:	4413      	add	r3, r2
 81124b8:	00db      	lsls	r3, r3, #3
 81124ba:	440b      	add	r3, r1
 81124bc:	3314      	adds	r3, #20
 81124be:	781b      	ldrb	r3, [r3, #0]
 81124c0:	2b05      	cmp	r3, #5
 81124c2:	d102      	bne.n	81124ca <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 81124c4:	f06f 0305 	mvn.w	r3, #5
 81124c8:	e066      	b.n	8112598 <etharp_update_arp_entry+0x184>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 81124ca:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 81124ce:	4937      	ldr	r1, [pc, #220]	@ (81125ac <etharp_update_arp_entry+0x198>)
 81124d0:	4613      	mov	r3, r2
 81124d2:	005b      	lsls	r3, r3, #1
 81124d4:	4413      	add	r3, r2
 81124d6:	00db      	lsls	r3, r3, #3
 81124d8:	440b      	add	r3, r1
 81124da:	3314      	adds	r3, #20
 81124dc:	2202      	movs	r2, #2
 81124de:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 81124e0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 81124e4:	4931      	ldr	r1, [pc, #196]	@ (81125ac <etharp_update_arp_entry+0x198>)
 81124e6:	4613      	mov	r3, r2
 81124e8:	005b      	lsls	r3, r3, #1
 81124ea:	4413      	add	r3, r2
 81124ec:	00db      	lsls	r3, r3, #3
 81124ee:	440b      	add	r3, r1
 81124f0:	3308      	adds	r3, #8
 81124f2:	68fa      	ldr	r2, [r7, #12]
 81124f4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 81124f6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 81124fa:	4613      	mov	r3, r2
 81124fc:	005b      	lsls	r3, r3, #1
 81124fe:	4413      	add	r3, r2
 8112500:	00db      	lsls	r3, r3, #3
 8112502:	3308      	adds	r3, #8
 8112504:	4a29      	ldr	r2, [pc, #164]	@ (81125ac <etharp_update_arp_entry+0x198>)
 8112506:	4413      	add	r3, r2
 8112508:	3304      	adds	r3, #4
 811250a:	2206      	movs	r2, #6
 811250c:	6879      	ldr	r1, [r7, #4]
 811250e:	4618      	mov	r0, r3
 8112510:	f00b fef3 	bl	811e2fa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8112514:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8112518:	4924      	ldr	r1, [pc, #144]	@ (81125ac <etharp_update_arp_entry+0x198>)
 811251a:	4613      	mov	r3, r2
 811251c:	005b      	lsls	r3, r3, #1
 811251e:	4413      	add	r3, r2
 8112520:	00db      	lsls	r3, r3, #3
 8112522:	440b      	add	r3, r1
 8112524:	3312      	adds	r3, #18
 8112526:	2200      	movs	r2, #0
 8112528:	801a      	strh	r2, [r3, #0]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 811252a:	e029      	b.n	8112580 <etharp_update_arp_entry+0x16c>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 811252c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8112530:	491e      	ldr	r1, [pc, #120]	@ (81125ac <etharp_update_arp_entry+0x198>)
 8112532:	4613      	mov	r3, r2
 8112534:	005b      	lsls	r3, r3, #1
 8112536:	4413      	add	r3, r2
 8112538:	00db      	lsls	r3, r3, #3
 811253a:	440b      	add	r3, r1
 811253c:	681b      	ldr	r3, [r3, #0]
 811253e:	61bb      	str	r3, [r7, #24]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 8112540:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8112544:	69bb      	ldr	r3, [r7, #24]
 8112546:	6819      	ldr	r1, [r3, #0]
 8112548:	4818      	ldr	r0, [pc, #96]	@ (81125ac <etharp_update_arp_entry+0x198>)
 811254a:	4613      	mov	r3, r2
 811254c:	005b      	lsls	r3, r3, #1
 811254e:	4413      	add	r3, r2
 8112550:	00db      	lsls	r3, r3, #3
 8112552:	4403      	add	r3, r0
 8112554:	6019      	str	r1, [r3, #0]
    /* get the packet pointer */
    p = q->p;
 8112556:	69bb      	ldr	r3, [r7, #24]
 8112558:	685b      	ldr	r3, [r3, #4]
 811255a:	617b      	str	r3, [r7, #20]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 811255c:	69b9      	ldr	r1, [r7, #24]
 811255e:	2009      	movs	r0, #9
 8112560:	f003 f802 	bl	8115568 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8112564:	68fb      	ldr	r3, [r7, #12]
 8112566:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 811256a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 811256e:	9300      	str	r3, [sp, #0]
 8112570:	687b      	ldr	r3, [r7, #4]
 8112572:	6979      	ldr	r1, [r7, #20]
 8112574:	68f8      	ldr	r0, [r7, #12]
 8112576:	f000 fd63 	bl	8113040 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 811257a:	6978      	ldr	r0, [r7, #20]
 811257c:	f003 fe98 	bl	81162b0 <pbuf_free>
  while (arp_table[i].q != NULL) {
 8112580:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8112584:	4909      	ldr	r1, [pc, #36]	@ (81125ac <etharp_update_arp_entry+0x198>)
 8112586:	4613      	mov	r3, r2
 8112588:	005b      	lsls	r3, r3, #1
 811258a:	4413      	add	r3, r2
 811258c:	00db      	lsls	r3, r3, #3
 811258e:	440b      	add	r3, r1
 8112590:	681b      	ldr	r3, [r3, #0]
 8112592:	2b00      	cmp	r3, #0
 8112594:	d1ca      	bne.n	811252c <etharp_update_arp_entry+0x118>
  }
  return ERR_OK;
 8112596:	2300      	movs	r3, #0
}
 8112598:	4618      	mov	r0, r3
 811259a:	3720      	adds	r7, #32
 811259c:	46bd      	mov	sp, r7
 811259e:	bd80      	pop	{r7, pc}
 81125a0:	0811f508 	.word	0x0811f508
 81125a4:	0811f65c 	.word	0x0811f65c
 81125a8:	0811f58c 	.word	0x0811f58c
 81125ac:	1000b1a8 	.word	0x1000b1a8

081125b0 <etharp_add_static_entry>:
 * @param ethaddr ethernet address for the new static entry
 * @return See return values of etharp_add_static_entry
 */
err_t
etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
{
 81125b0:	b580      	push	{r7, lr}
 81125b2:	b084      	sub	sp, #16
 81125b4:	af00      	add	r7, sp, #0
 81125b6:	6078      	str	r0, [r7, #4]
 81125b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));

  netif = ip4_route(ipaddr);
 81125ba:	6878      	ldr	r0, [r7, #4]
 81125bc:	f001 f810 	bl	81135e0 <ip4_route>
 81125c0:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 81125c2:	68fb      	ldr	r3, [r7, #12]
 81125c4:	2b00      	cmp	r3, #0
 81125c6:	d102      	bne.n	81125ce <etharp_add_static_entry+0x1e>
    return ERR_RTE;
 81125c8:	f06f 0303 	mvn.w	r3, #3
 81125cc:	e006      	b.n	81125dc <etharp_add_static_entry+0x2c>
  }

  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 81125ce:	2305      	movs	r3, #5
 81125d0:	683a      	ldr	r2, [r7, #0]
 81125d2:	6879      	ldr	r1, [r7, #4]
 81125d4:	68f8      	ldr	r0, [r7, #12]
 81125d6:	f7ff ff1d 	bl	8112414 <etharp_update_arp_entry>
 81125da:	4603      	mov	r3, r0
}
 81125dc:	4618      	mov	r0, r3
 81125de:	3710      	adds	r7, #16
 81125e0:	46bd      	mov	sp, r7
 81125e2:	bd80      	pop	{r7, pc}

081125e4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 81125e4:	b580      	push	{r7, lr}
 81125e6:	b084      	sub	sp, #16
 81125e8:	af00      	add	r7, sp, #0
 81125ea:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 81125ec:	2300      	movs	r3, #0
 81125ee:	60fb      	str	r3, [r7, #12]
 81125f0:	e01e      	b.n	8112630 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 81125f2:	4913      	ldr	r1, [pc, #76]	@ (8112640 <etharp_cleanup_netif+0x5c>)
 81125f4:	68fa      	ldr	r2, [r7, #12]
 81125f6:	4613      	mov	r3, r2
 81125f8:	005b      	lsls	r3, r3, #1
 81125fa:	4413      	add	r3, r2
 81125fc:	00db      	lsls	r3, r3, #3
 81125fe:	440b      	add	r3, r1
 8112600:	3314      	adds	r3, #20
 8112602:	781b      	ldrb	r3, [r3, #0]
 8112604:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8112606:	7afb      	ldrb	r3, [r7, #11]
 8112608:	2b00      	cmp	r3, #0
 811260a:	d00e      	beq.n	811262a <etharp_cleanup_netif+0x46>
 811260c:	490c      	ldr	r1, [pc, #48]	@ (8112640 <etharp_cleanup_netif+0x5c>)
 811260e:	68fa      	ldr	r2, [r7, #12]
 8112610:	4613      	mov	r3, r2
 8112612:	005b      	lsls	r3, r3, #1
 8112614:	4413      	add	r3, r2
 8112616:	00db      	lsls	r3, r3, #3
 8112618:	440b      	add	r3, r1
 811261a:	3308      	adds	r3, #8
 811261c:	681b      	ldr	r3, [r3, #0]
 811261e:	687a      	ldr	r2, [r7, #4]
 8112620:	429a      	cmp	r2, r3
 8112622:	d102      	bne.n	811262a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8112624:	68f8      	ldr	r0, [r7, #12]
 8112626:	f7ff fc9d 	bl	8111f64 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811262a:	68fb      	ldr	r3, [r7, #12]
 811262c:	3301      	adds	r3, #1
 811262e:	60fb      	str	r3, [r7, #12]
 8112630:	68fb      	ldr	r3, [r7, #12]
 8112632:	2b09      	cmp	r3, #9
 8112634:	dddd      	ble.n	81125f2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8112636:	bf00      	nop
 8112638:	bf00      	nop
 811263a:	3710      	adds	r7, #16
 811263c:	46bd      	mov	sp, r7
 811263e:	bd80      	pop	{r7, pc}
 8112640:	1000b1a8 	.word	0x1000b1a8

08112644 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8112644:	b5b0      	push	{r4, r5, r7, lr}
 8112646:	b08a      	sub	sp, #40	@ 0x28
 8112648:	af04      	add	r7, sp, #16
 811264a:	6078      	str	r0, [r7, #4]
 811264c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 811264e:	683b      	ldr	r3, [r7, #0]
 8112650:	2b00      	cmp	r3, #0
 8112652:	d107      	bne.n	8112664 <etharp_input+0x20>
 8112654:	4b3d      	ldr	r3, [pc, #244]	@ (811274c <etharp_input+0x108>)
 8112656:	f240 228a 	movw	r2, #650	@ 0x28a
 811265a:	493d      	ldr	r1, [pc, #244]	@ (8112750 <etharp_input+0x10c>)
 811265c:	483d      	ldr	r0, [pc, #244]	@ (8112754 <etharp_input+0x110>)
 811265e:	f00b fbbd 	bl	811dddc <iprintf>
 8112662:	e06f      	b.n	8112744 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8112664:	687b      	ldr	r3, [r7, #4]
 8112666:	685b      	ldr	r3, [r3, #4]
 8112668:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 811266a:	693b      	ldr	r3, [r7, #16]
 811266c:	881b      	ldrh	r3, [r3, #0]
 811266e:	b29b      	uxth	r3, r3
 8112670:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8112674:	d10c      	bne.n	8112690 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8112676:	693b      	ldr	r3, [r7, #16]
 8112678:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 811267a:	2b06      	cmp	r3, #6
 811267c:	d108      	bne.n	8112690 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 811267e:	693b      	ldr	r3, [r7, #16]
 8112680:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8112682:	2b04      	cmp	r3, #4
 8112684:	d104      	bne.n	8112690 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8112686:	693b      	ldr	r3, [r7, #16]
 8112688:	885b      	ldrh	r3, [r3, #2]
 811268a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 811268c:	2b08      	cmp	r3, #8
 811268e:	d003      	beq.n	8112698 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8112690:	6878      	ldr	r0, [r7, #4]
 8112692:	f003 fe0d 	bl	81162b0 <pbuf_free>
    return;
 8112696:	e055      	b.n	8112744 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8112698:	693b      	ldr	r3, [r7, #16]
 811269a:	330e      	adds	r3, #14
 811269c:	681b      	ldr	r3, [r3, #0]
 811269e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 81126a0:	693b      	ldr	r3, [r7, #16]
 81126a2:	3318      	adds	r3, #24
 81126a4:	681b      	ldr	r3, [r3, #0]
 81126a6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 81126a8:	683b      	ldr	r3, [r7, #0]
 81126aa:	3304      	adds	r3, #4
 81126ac:	681b      	ldr	r3, [r3, #0]
 81126ae:	2b00      	cmp	r3, #0
 81126b0:	d102      	bne.n	81126b8 <etharp_input+0x74>
    for_us = 0;
 81126b2:	2300      	movs	r3, #0
 81126b4:	75fb      	strb	r3, [r7, #23]
 81126b6:	e009      	b.n	81126cc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 81126b8:	68ba      	ldr	r2, [r7, #8]
 81126ba:	683b      	ldr	r3, [r7, #0]
 81126bc:	3304      	adds	r3, #4
 81126be:	681b      	ldr	r3, [r3, #0]
 81126c0:	429a      	cmp	r2, r3
 81126c2:	bf0c      	ite	eq
 81126c4:	2301      	moveq	r3, #1
 81126c6:	2300      	movne	r3, #0
 81126c8:	b2db      	uxtb	r3, r3
 81126ca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 81126cc:	693b      	ldr	r3, [r7, #16]
 81126ce:	f103 0208 	add.w	r2, r3, #8
 81126d2:	7dfb      	ldrb	r3, [r7, #23]
 81126d4:	2b00      	cmp	r3, #0
 81126d6:	d001      	beq.n	81126dc <etharp_input+0x98>
 81126d8:	2301      	movs	r3, #1
 81126da:	e000      	b.n	81126de <etharp_input+0x9a>
 81126dc:	2302      	movs	r3, #2
 81126de:	f107 010c 	add.w	r1, r7, #12
 81126e2:	6838      	ldr	r0, [r7, #0]
 81126e4:	f7ff fe96 	bl	8112414 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 81126e8:	693b      	ldr	r3, [r7, #16]
 81126ea:	88db      	ldrh	r3, [r3, #6]
 81126ec:	b29b      	uxth	r3, r3
 81126ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81126f2:	d003      	beq.n	81126fc <etharp_input+0xb8>
 81126f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81126f8:	d01e      	beq.n	8112738 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 81126fa:	e020      	b.n	811273e <etharp_input+0xfa>
      if (for_us) {
 81126fc:	7dfb      	ldrb	r3, [r7, #23]
 81126fe:	2b00      	cmp	r3, #0
 8112700:	d01c      	beq.n	811273c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8112702:	683b      	ldr	r3, [r7, #0]
 8112704:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8112708:	693b      	ldr	r3, [r7, #16]
 811270a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 811270e:	683b      	ldr	r3, [r7, #0]
 8112710:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8112714:	683b      	ldr	r3, [r7, #0]
 8112716:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8112718:	693a      	ldr	r2, [r7, #16]
 811271a:	3208      	adds	r2, #8
        etharp_raw(netif,
 811271c:	2102      	movs	r1, #2
 811271e:	9103      	str	r1, [sp, #12]
 8112720:	f107 010c 	add.w	r1, r7, #12
 8112724:	9102      	str	r1, [sp, #8]
 8112726:	9201      	str	r2, [sp, #4]
 8112728:	9300      	str	r3, [sp, #0]
 811272a:	462b      	mov	r3, r5
 811272c:	4622      	mov	r2, r4
 811272e:	4601      	mov	r1, r0
 8112730:	6838      	ldr	r0, [r7, #0]
 8112732:	f000 fb37 	bl	8112da4 <etharp_raw>
      break;
 8112736:	e001      	b.n	811273c <etharp_input+0xf8>
      break;
 8112738:	bf00      	nop
 811273a:	e000      	b.n	811273e <etharp_input+0xfa>
      break;
 811273c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 811273e:	6878      	ldr	r0, [r7, #4]
 8112740:	f003 fdb6 	bl	81162b0 <pbuf_free>
}
 8112744:	3718      	adds	r7, #24
 8112746:	46bd      	mov	sp, r7
 8112748:	bdb0      	pop	{r4, r5, r7, pc}
 811274a:	bf00      	nop
 811274c:	0811f508 	.word	0x0811f508
 8112750:	0811f6b4 	.word	0x0811f6b4
 8112754:	0811f58c 	.word	0x0811f58c

08112758 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8112758:	b580      	push	{r7, lr}
 811275a:	b086      	sub	sp, #24
 811275c:	af02      	add	r7, sp, #8
 811275e:	60f8      	str	r0, [r7, #12]
 8112760:	60b9      	str	r1, [r7, #8]
 8112762:	4613      	mov	r3, r2
 8112764:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8112766:	79fa      	ldrb	r2, [r7, #7]
 8112768:	4944      	ldr	r1, [pc, #272]	@ (811287c <etharp_output_to_arp_index+0x124>)
 811276a:	4613      	mov	r3, r2
 811276c:	005b      	lsls	r3, r3, #1
 811276e:	4413      	add	r3, r2
 8112770:	00db      	lsls	r3, r3, #3
 8112772:	440b      	add	r3, r1
 8112774:	3314      	adds	r3, #20
 8112776:	781b      	ldrb	r3, [r3, #0]
 8112778:	2b01      	cmp	r3, #1
 811277a:	d806      	bhi.n	811278a <etharp_output_to_arp_index+0x32>
 811277c:	4b40      	ldr	r3, [pc, #256]	@ (8112880 <etharp_output_to_arp_index+0x128>)
 811277e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8112782:	4940      	ldr	r1, [pc, #256]	@ (8112884 <etharp_output_to_arp_index+0x12c>)
 8112784:	4840      	ldr	r0, [pc, #256]	@ (8112888 <etharp_output_to_arp_index+0x130>)
 8112786:	f00b fb29 	bl	811dddc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 811278a:	79fa      	ldrb	r2, [r7, #7]
 811278c:	493b      	ldr	r1, [pc, #236]	@ (811287c <etharp_output_to_arp_index+0x124>)
 811278e:	4613      	mov	r3, r2
 8112790:	005b      	lsls	r3, r3, #1
 8112792:	4413      	add	r3, r2
 8112794:	00db      	lsls	r3, r3, #3
 8112796:	440b      	add	r3, r1
 8112798:	3314      	adds	r3, #20
 811279a:	781b      	ldrb	r3, [r3, #0]
 811279c:	2b02      	cmp	r3, #2
 811279e:	d153      	bne.n	8112848 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 81127a0:	79fa      	ldrb	r2, [r7, #7]
 81127a2:	4936      	ldr	r1, [pc, #216]	@ (811287c <etharp_output_to_arp_index+0x124>)
 81127a4:	4613      	mov	r3, r2
 81127a6:	005b      	lsls	r3, r3, #1
 81127a8:	4413      	add	r3, r2
 81127aa:	00db      	lsls	r3, r3, #3
 81127ac:	440b      	add	r3, r1
 81127ae:	3312      	adds	r3, #18
 81127b0:	881b      	ldrh	r3, [r3, #0]
 81127b2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 81127b6:	d919      	bls.n	81127ec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 81127b8:	79fa      	ldrb	r2, [r7, #7]
 81127ba:	4613      	mov	r3, r2
 81127bc:	005b      	lsls	r3, r3, #1
 81127be:	4413      	add	r3, r2
 81127c0:	00db      	lsls	r3, r3, #3
 81127c2:	4a2e      	ldr	r2, [pc, #184]	@ (811287c <etharp_output_to_arp_index+0x124>)
 81127c4:	4413      	add	r3, r2
 81127c6:	3304      	adds	r3, #4
 81127c8:	4619      	mov	r1, r3
 81127ca:	68f8      	ldr	r0, [r7, #12]
 81127cc:	f000 fb98 	bl	8112f00 <etharp_request>
 81127d0:	4603      	mov	r3, r0
 81127d2:	2b00      	cmp	r3, #0
 81127d4:	d138      	bne.n	8112848 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 81127d6:	79fa      	ldrb	r2, [r7, #7]
 81127d8:	4928      	ldr	r1, [pc, #160]	@ (811287c <etharp_output_to_arp_index+0x124>)
 81127da:	4613      	mov	r3, r2
 81127dc:	005b      	lsls	r3, r3, #1
 81127de:	4413      	add	r3, r2
 81127e0:	00db      	lsls	r3, r3, #3
 81127e2:	440b      	add	r3, r1
 81127e4:	3314      	adds	r3, #20
 81127e6:	2203      	movs	r2, #3
 81127e8:	701a      	strb	r2, [r3, #0]
 81127ea:	e02d      	b.n	8112848 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 81127ec:	79fa      	ldrb	r2, [r7, #7]
 81127ee:	4923      	ldr	r1, [pc, #140]	@ (811287c <etharp_output_to_arp_index+0x124>)
 81127f0:	4613      	mov	r3, r2
 81127f2:	005b      	lsls	r3, r3, #1
 81127f4:	4413      	add	r3, r2
 81127f6:	00db      	lsls	r3, r3, #3
 81127f8:	440b      	add	r3, r1
 81127fa:	3312      	adds	r3, #18
 81127fc:	881b      	ldrh	r3, [r3, #0]
 81127fe:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8112802:	d321      	bcc.n	8112848 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8112804:	79fa      	ldrb	r2, [r7, #7]
 8112806:	4613      	mov	r3, r2
 8112808:	005b      	lsls	r3, r3, #1
 811280a:	4413      	add	r3, r2
 811280c:	00db      	lsls	r3, r3, #3
 811280e:	4a1b      	ldr	r2, [pc, #108]	@ (811287c <etharp_output_to_arp_index+0x124>)
 8112810:	4413      	add	r3, r2
 8112812:	1d19      	adds	r1, r3, #4
 8112814:	79fa      	ldrb	r2, [r7, #7]
 8112816:	4613      	mov	r3, r2
 8112818:	005b      	lsls	r3, r3, #1
 811281a:	4413      	add	r3, r2
 811281c:	00db      	lsls	r3, r3, #3
 811281e:	3308      	adds	r3, #8
 8112820:	4a16      	ldr	r2, [pc, #88]	@ (811287c <etharp_output_to_arp_index+0x124>)
 8112822:	4413      	add	r3, r2
 8112824:	3304      	adds	r3, #4
 8112826:	461a      	mov	r2, r3
 8112828:	68f8      	ldr	r0, [r7, #12]
 811282a:	f000 fb47 	bl	8112ebc <etharp_request_dst>
 811282e:	4603      	mov	r3, r0
 8112830:	2b00      	cmp	r3, #0
 8112832:	d109      	bne.n	8112848 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8112834:	79fa      	ldrb	r2, [r7, #7]
 8112836:	4911      	ldr	r1, [pc, #68]	@ (811287c <etharp_output_to_arp_index+0x124>)
 8112838:	4613      	mov	r3, r2
 811283a:	005b      	lsls	r3, r3, #1
 811283c:	4413      	add	r3, r2
 811283e:	00db      	lsls	r3, r3, #3
 8112840:	440b      	add	r3, r1
 8112842:	3314      	adds	r3, #20
 8112844:	2203      	movs	r2, #3
 8112846:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8112848:	68fb      	ldr	r3, [r7, #12]
 811284a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 811284e:	79fa      	ldrb	r2, [r7, #7]
 8112850:	4613      	mov	r3, r2
 8112852:	005b      	lsls	r3, r3, #1
 8112854:	4413      	add	r3, r2
 8112856:	00db      	lsls	r3, r3, #3
 8112858:	3308      	adds	r3, #8
 811285a:	4a08      	ldr	r2, [pc, #32]	@ (811287c <etharp_output_to_arp_index+0x124>)
 811285c:	4413      	add	r3, r2
 811285e:	3304      	adds	r3, #4
 8112860:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8112864:	9200      	str	r2, [sp, #0]
 8112866:	460a      	mov	r2, r1
 8112868:	68b9      	ldr	r1, [r7, #8]
 811286a:	68f8      	ldr	r0, [r7, #12]
 811286c:	f000 fbe8 	bl	8113040 <ethernet_output>
 8112870:	4603      	mov	r3, r0
}
 8112872:	4618      	mov	r0, r3
 8112874:	3710      	adds	r7, #16
 8112876:	46bd      	mov	sp, r7
 8112878:	bd80      	pop	{r7, pc}
 811287a:	bf00      	nop
 811287c:	1000b1a8 	.word	0x1000b1a8
 8112880:	0811f508 	.word	0x0811f508
 8112884:	0811f6d4 	.word	0x0811f6d4
 8112888:	0811f58c 	.word	0x0811f58c

0811288c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 811288c:	b580      	push	{r7, lr}
 811288e:	b08a      	sub	sp, #40	@ 0x28
 8112890:	af02      	add	r7, sp, #8
 8112892:	60f8      	str	r0, [r7, #12]
 8112894:	60b9      	str	r1, [r7, #8]
 8112896:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8112898:	687b      	ldr	r3, [r7, #4]
 811289a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 811289c:	68fb      	ldr	r3, [r7, #12]
 811289e:	2b00      	cmp	r3, #0
 81128a0:	d106      	bne.n	81128b0 <etharp_output+0x24>
 81128a2:	4b73      	ldr	r3, [pc, #460]	@ (8112a70 <etharp_output+0x1e4>)
 81128a4:	f240 321e 	movw	r2, #798	@ 0x31e
 81128a8:	4972      	ldr	r1, [pc, #456]	@ (8112a74 <etharp_output+0x1e8>)
 81128aa:	4873      	ldr	r0, [pc, #460]	@ (8112a78 <etharp_output+0x1ec>)
 81128ac:	f00b fa96 	bl	811dddc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 81128b0:	68bb      	ldr	r3, [r7, #8]
 81128b2:	2b00      	cmp	r3, #0
 81128b4:	d106      	bne.n	81128c4 <etharp_output+0x38>
 81128b6:	4b6e      	ldr	r3, [pc, #440]	@ (8112a70 <etharp_output+0x1e4>)
 81128b8:	f240 321f 	movw	r2, #799	@ 0x31f
 81128bc:	496f      	ldr	r1, [pc, #444]	@ (8112a7c <etharp_output+0x1f0>)
 81128be:	486e      	ldr	r0, [pc, #440]	@ (8112a78 <etharp_output+0x1ec>)
 81128c0:	f00b fa8c 	bl	811dddc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 81128c4:	687b      	ldr	r3, [r7, #4]
 81128c6:	2b00      	cmp	r3, #0
 81128c8:	d106      	bne.n	81128d8 <etharp_output+0x4c>
 81128ca:	4b69      	ldr	r3, [pc, #420]	@ (8112a70 <etharp_output+0x1e4>)
 81128cc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 81128d0:	496b      	ldr	r1, [pc, #428]	@ (8112a80 <etharp_output+0x1f4>)
 81128d2:	4869      	ldr	r0, [pc, #420]	@ (8112a78 <etharp_output+0x1ec>)
 81128d4:	f00b fa82 	bl	811dddc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 81128d8:	687b      	ldr	r3, [r7, #4]
 81128da:	681b      	ldr	r3, [r3, #0]
 81128dc:	68f9      	ldr	r1, [r7, #12]
 81128de:	4618      	mov	r0, r3
 81128e0:	f001 f914 	bl	8113b0c <ip4_addr_isbroadcast_u32>
 81128e4:	4603      	mov	r3, r0
 81128e6:	2b00      	cmp	r3, #0
 81128e8:	d002      	beq.n	81128f0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 81128ea:	4b66      	ldr	r3, [pc, #408]	@ (8112a84 <etharp_output+0x1f8>)
 81128ec:	61fb      	str	r3, [r7, #28]
 81128ee:	e0af      	b.n	8112a50 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 81128f0:	687b      	ldr	r3, [r7, #4]
 81128f2:	681b      	ldr	r3, [r3, #0]
 81128f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81128f8:	2be0      	cmp	r3, #224	@ 0xe0
 81128fa:	d118      	bne.n	811292e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 81128fc:	2301      	movs	r3, #1
 81128fe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8112900:	2300      	movs	r3, #0
 8112902:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8112904:	235e      	movs	r3, #94	@ 0x5e
 8112906:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8112908:	687b      	ldr	r3, [r7, #4]
 811290a:	3301      	adds	r3, #1
 811290c:	781b      	ldrb	r3, [r3, #0]
 811290e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8112912:	b2db      	uxtb	r3, r3
 8112914:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8112916:	687b      	ldr	r3, [r7, #4]
 8112918:	3302      	adds	r3, #2
 811291a:	781b      	ldrb	r3, [r3, #0]
 811291c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 811291e:	687b      	ldr	r3, [r7, #4]
 8112920:	3303      	adds	r3, #3
 8112922:	781b      	ldrb	r3, [r3, #0]
 8112924:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8112926:	f107 0310 	add.w	r3, r7, #16
 811292a:	61fb      	str	r3, [r7, #28]
 811292c:	e090      	b.n	8112a50 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 811292e:	687b      	ldr	r3, [r7, #4]
 8112930:	681a      	ldr	r2, [r3, #0]
 8112932:	68fb      	ldr	r3, [r7, #12]
 8112934:	3304      	adds	r3, #4
 8112936:	681b      	ldr	r3, [r3, #0]
 8112938:	405a      	eors	r2, r3
 811293a:	68fb      	ldr	r3, [r7, #12]
 811293c:	3308      	adds	r3, #8
 811293e:	681b      	ldr	r3, [r3, #0]
 8112940:	4013      	ands	r3, r2
 8112942:	2b00      	cmp	r3, #0
 8112944:	d012      	beq.n	811296c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8112946:	687b      	ldr	r3, [r7, #4]
 8112948:	681b      	ldr	r3, [r3, #0]
 811294a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 811294c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8112950:	4293      	cmp	r3, r2
 8112952:	d00b      	beq.n	811296c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8112954:	68fb      	ldr	r3, [r7, #12]
 8112956:	330c      	adds	r3, #12
 8112958:	681b      	ldr	r3, [r3, #0]
 811295a:	2b00      	cmp	r3, #0
 811295c:	d003      	beq.n	8112966 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 811295e:	68fb      	ldr	r3, [r7, #12]
 8112960:	330c      	adds	r3, #12
 8112962:	61bb      	str	r3, [r7, #24]
 8112964:	e002      	b.n	811296c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8112966:	f06f 0303 	mvn.w	r3, #3
 811296a:	e07d      	b.n	8112a68 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 811296c:	4b46      	ldr	r3, [pc, #280]	@ (8112a88 <etharp_output+0x1fc>)
 811296e:	781b      	ldrb	r3, [r3, #0]
 8112970:	4619      	mov	r1, r3
 8112972:	4a46      	ldr	r2, [pc, #280]	@ (8112a8c <etharp_output+0x200>)
 8112974:	460b      	mov	r3, r1
 8112976:	005b      	lsls	r3, r3, #1
 8112978:	440b      	add	r3, r1
 811297a:	00db      	lsls	r3, r3, #3
 811297c:	4413      	add	r3, r2
 811297e:	3314      	adds	r3, #20
 8112980:	781b      	ldrb	r3, [r3, #0]
 8112982:	2b01      	cmp	r3, #1
 8112984:	d925      	bls.n	81129d2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8112986:	4b40      	ldr	r3, [pc, #256]	@ (8112a88 <etharp_output+0x1fc>)
 8112988:	781b      	ldrb	r3, [r3, #0]
 811298a:	4619      	mov	r1, r3
 811298c:	4a3f      	ldr	r2, [pc, #252]	@ (8112a8c <etharp_output+0x200>)
 811298e:	460b      	mov	r3, r1
 8112990:	005b      	lsls	r3, r3, #1
 8112992:	440b      	add	r3, r1
 8112994:	00db      	lsls	r3, r3, #3
 8112996:	4413      	add	r3, r2
 8112998:	3308      	adds	r3, #8
 811299a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 811299c:	68fa      	ldr	r2, [r7, #12]
 811299e:	429a      	cmp	r2, r3
 81129a0:	d117      	bne.n	81129d2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 81129a2:	69bb      	ldr	r3, [r7, #24]
 81129a4:	681a      	ldr	r2, [r3, #0]
 81129a6:	4b38      	ldr	r3, [pc, #224]	@ (8112a88 <etharp_output+0x1fc>)
 81129a8:	781b      	ldrb	r3, [r3, #0]
 81129aa:	4618      	mov	r0, r3
 81129ac:	4937      	ldr	r1, [pc, #220]	@ (8112a8c <etharp_output+0x200>)
 81129ae:	4603      	mov	r3, r0
 81129b0:	005b      	lsls	r3, r3, #1
 81129b2:	4403      	add	r3, r0
 81129b4:	00db      	lsls	r3, r3, #3
 81129b6:	440b      	add	r3, r1
 81129b8:	3304      	adds	r3, #4
 81129ba:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 81129bc:	429a      	cmp	r2, r3
 81129be:	d108      	bne.n	81129d2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 81129c0:	4b31      	ldr	r3, [pc, #196]	@ (8112a88 <etharp_output+0x1fc>)
 81129c2:	781b      	ldrb	r3, [r3, #0]
 81129c4:	461a      	mov	r2, r3
 81129c6:	68b9      	ldr	r1, [r7, #8]
 81129c8:	68f8      	ldr	r0, [r7, #12]
 81129ca:	f7ff fec5 	bl	8112758 <etharp_output_to_arp_index>
 81129ce:	4603      	mov	r3, r0
 81129d0:	e04a      	b.n	8112a68 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 81129d2:	2300      	movs	r3, #0
 81129d4:	75fb      	strb	r3, [r7, #23]
 81129d6:	e031      	b.n	8112a3c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 81129d8:	7dfa      	ldrb	r2, [r7, #23]
 81129da:	492c      	ldr	r1, [pc, #176]	@ (8112a8c <etharp_output+0x200>)
 81129dc:	4613      	mov	r3, r2
 81129de:	005b      	lsls	r3, r3, #1
 81129e0:	4413      	add	r3, r2
 81129e2:	00db      	lsls	r3, r3, #3
 81129e4:	440b      	add	r3, r1
 81129e6:	3314      	adds	r3, #20
 81129e8:	781b      	ldrb	r3, [r3, #0]
 81129ea:	2b01      	cmp	r3, #1
 81129ec:	d923      	bls.n	8112a36 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 81129ee:	7dfa      	ldrb	r2, [r7, #23]
 81129f0:	4926      	ldr	r1, [pc, #152]	@ (8112a8c <etharp_output+0x200>)
 81129f2:	4613      	mov	r3, r2
 81129f4:	005b      	lsls	r3, r3, #1
 81129f6:	4413      	add	r3, r2
 81129f8:	00db      	lsls	r3, r3, #3
 81129fa:	440b      	add	r3, r1
 81129fc:	3308      	adds	r3, #8
 81129fe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8112a00:	68fa      	ldr	r2, [r7, #12]
 8112a02:	429a      	cmp	r2, r3
 8112a04:	d117      	bne.n	8112a36 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8112a06:	69bb      	ldr	r3, [r7, #24]
 8112a08:	6819      	ldr	r1, [r3, #0]
 8112a0a:	7dfa      	ldrb	r2, [r7, #23]
 8112a0c:	481f      	ldr	r0, [pc, #124]	@ (8112a8c <etharp_output+0x200>)
 8112a0e:	4613      	mov	r3, r2
 8112a10:	005b      	lsls	r3, r3, #1
 8112a12:	4413      	add	r3, r2
 8112a14:	00db      	lsls	r3, r3, #3
 8112a16:	4403      	add	r3, r0
 8112a18:	3304      	adds	r3, #4
 8112a1a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8112a1c:	4299      	cmp	r1, r3
 8112a1e:	d10a      	bne.n	8112a36 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8112a20:	4a19      	ldr	r2, [pc, #100]	@ (8112a88 <etharp_output+0x1fc>)
 8112a22:	7dfb      	ldrb	r3, [r7, #23]
 8112a24:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8112a26:	7dfb      	ldrb	r3, [r7, #23]
 8112a28:	461a      	mov	r2, r3
 8112a2a:	68b9      	ldr	r1, [r7, #8]
 8112a2c:	68f8      	ldr	r0, [r7, #12]
 8112a2e:	f7ff fe93 	bl	8112758 <etharp_output_to_arp_index>
 8112a32:	4603      	mov	r3, r0
 8112a34:	e018      	b.n	8112a68 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8112a36:	7dfb      	ldrb	r3, [r7, #23]
 8112a38:	3301      	adds	r3, #1
 8112a3a:	75fb      	strb	r3, [r7, #23]
 8112a3c:	7dfb      	ldrb	r3, [r7, #23]
 8112a3e:	2b09      	cmp	r3, #9
 8112a40:	d9ca      	bls.n	81129d8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8112a42:	68ba      	ldr	r2, [r7, #8]
 8112a44:	69b9      	ldr	r1, [r7, #24]
 8112a46:	68f8      	ldr	r0, [r7, #12]
 8112a48:	f000 f822 	bl	8112a90 <etharp_query>
 8112a4c:	4603      	mov	r3, r0
 8112a4e:	e00b      	b.n	8112a68 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8112a50:	68fb      	ldr	r3, [r7, #12]
 8112a52:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8112a56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8112a5a:	9300      	str	r3, [sp, #0]
 8112a5c:	69fb      	ldr	r3, [r7, #28]
 8112a5e:	68b9      	ldr	r1, [r7, #8]
 8112a60:	68f8      	ldr	r0, [r7, #12]
 8112a62:	f000 faed 	bl	8113040 <ethernet_output>
 8112a66:	4603      	mov	r3, r0
}
 8112a68:	4618      	mov	r0, r3
 8112a6a:	3720      	adds	r7, #32
 8112a6c:	46bd      	mov	sp, r7
 8112a6e:	bd80      	pop	{r7, pc}
 8112a70:	0811f508 	.word	0x0811f508
 8112a74:	0811f6b4 	.word	0x0811f6b4
 8112a78:	0811f58c 	.word	0x0811f58c
 8112a7c:	0811f580 	.word	0x0811f580
 8112a80:	0811f6a4 	.word	0x0811f6a4
 8112a84:	081224c8 	.word	0x081224c8
 8112a88:	1000b298 	.word	0x1000b298
 8112a8c:	1000b1a8 	.word	0x1000b1a8

08112a90 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8112a90:	b580      	push	{r7, lr}
 8112a92:	b090      	sub	sp, #64	@ 0x40
 8112a94:	af02      	add	r7, sp, #8
 8112a96:	60f8      	str	r0, [r7, #12]
 8112a98:	60b9      	str	r1, [r7, #8]
 8112a9a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8112a9c:	68fb      	ldr	r3, [r7, #12]
 8112a9e:	3326      	adds	r3, #38	@ 0x26
 8112aa0:	61fb      	str	r3, [r7, #28]
  err_t result = ERR_MEM;
 8112aa2:	23ff      	movs	r3, #255	@ 0xff
 8112aa4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  int is_new_entry = 0;
 8112aa8:	2300      	movs	r3, #0
 8112aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8112aac:	68bb      	ldr	r3, [r7, #8]
 8112aae:	681b      	ldr	r3, [r3, #0]
 8112ab0:	68f9      	ldr	r1, [r7, #12]
 8112ab2:	4618      	mov	r0, r3
 8112ab4:	f001 f82a 	bl	8113b0c <ip4_addr_isbroadcast_u32>
 8112ab8:	4603      	mov	r3, r0
 8112aba:	2b00      	cmp	r3, #0
 8112abc:	d10c      	bne.n	8112ad8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8112abe:	68bb      	ldr	r3, [r7, #8]
 8112ac0:	681b      	ldr	r3, [r3, #0]
 8112ac2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8112ac6:	2be0      	cmp	r3, #224	@ 0xe0
 8112ac8:	d006      	beq.n	8112ad8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8112aca:	68bb      	ldr	r3, [r7, #8]
 8112acc:	2b00      	cmp	r3, #0
 8112ace:	d003      	beq.n	8112ad8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8112ad0:	68bb      	ldr	r3, [r7, #8]
 8112ad2:	681b      	ldr	r3, [r3, #0]
 8112ad4:	2b00      	cmp	r3, #0
 8112ad6:	d102      	bne.n	8112ade <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8112ad8:	f06f 030f 	mvn.w	r3, #15
 8112adc:	e14e      	b.n	8112d7c <etharp_query+0x2ec>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8112ade:	68fa      	ldr	r2, [r7, #12]
 8112ae0:	2101      	movs	r1, #1
 8112ae2:	68b8      	ldr	r0, [r7, #8]
 8112ae4:	f7ff fb1c 	bl	8112120 <etharp_find_entry>
 8112ae8:	4603      	mov	r3, r0
 8112aea:	837b      	strh	r3, [r7, #26]

  /* could not find or create entry? */
  if (i_err < 0) {
 8112aec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8112af0:	2b00      	cmp	r3, #0
 8112af2:	da02      	bge.n	8112afa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8112af4:	8b7b      	ldrh	r3, [r7, #26]
 8112af6:	b25b      	sxtb	r3, r3
 8112af8:	e140      	b.n	8112d7c <etharp_query+0x2ec>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8112afa:	8b7b      	ldrh	r3, [r7, #26]
 8112afc:	2b7e      	cmp	r3, #126	@ 0x7e
 8112afe:	d906      	bls.n	8112b0e <etharp_query+0x7e>
 8112b00:	4ba0      	ldr	r3, [pc, #640]	@ (8112d84 <etharp_query+0x2f4>)
 8112b02:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8112b06:	49a0      	ldr	r1, [pc, #640]	@ (8112d88 <etharp_query+0x2f8>)
 8112b08:	48a0      	ldr	r0, [pc, #640]	@ (8112d8c <etharp_query+0x2fc>)
 8112b0a:	f00b f967 	bl	811dddc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8112b0e:	8b7b      	ldrh	r3, [r7, #26]
 8112b10:	767b      	strb	r3, [r7, #25]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8112b12:	7e7a      	ldrb	r2, [r7, #25]
 8112b14:	499e      	ldr	r1, [pc, #632]	@ (8112d90 <etharp_query+0x300>)
 8112b16:	4613      	mov	r3, r2
 8112b18:	005b      	lsls	r3, r3, #1
 8112b1a:	4413      	add	r3, r2
 8112b1c:	00db      	lsls	r3, r3, #3
 8112b1e:	440b      	add	r3, r1
 8112b20:	3314      	adds	r3, #20
 8112b22:	781b      	ldrb	r3, [r3, #0]
 8112b24:	2b00      	cmp	r3, #0
 8112b26:	d115      	bne.n	8112b54 <etharp_query+0xc4>
    is_new_entry = 1;
 8112b28:	2301      	movs	r3, #1
 8112b2a:	633b      	str	r3, [r7, #48]	@ 0x30
    arp_table[i].state = ETHARP_STATE_PENDING;
 8112b2c:	7e7a      	ldrb	r2, [r7, #25]
 8112b2e:	4998      	ldr	r1, [pc, #608]	@ (8112d90 <etharp_query+0x300>)
 8112b30:	4613      	mov	r3, r2
 8112b32:	005b      	lsls	r3, r3, #1
 8112b34:	4413      	add	r3, r2
 8112b36:	00db      	lsls	r3, r3, #3
 8112b38:	440b      	add	r3, r1
 8112b3a:	3314      	adds	r3, #20
 8112b3c:	2201      	movs	r2, #1
 8112b3e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8112b40:	7e7a      	ldrb	r2, [r7, #25]
 8112b42:	4993      	ldr	r1, [pc, #588]	@ (8112d90 <etharp_query+0x300>)
 8112b44:	4613      	mov	r3, r2
 8112b46:	005b      	lsls	r3, r3, #1
 8112b48:	4413      	add	r3, r2
 8112b4a:	00db      	lsls	r3, r3, #3
 8112b4c:	440b      	add	r3, r1
 8112b4e:	3308      	adds	r3, #8
 8112b50:	68fa      	ldr	r2, [r7, #12]
 8112b52:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8112b54:	7e7a      	ldrb	r2, [r7, #25]
 8112b56:	498e      	ldr	r1, [pc, #568]	@ (8112d90 <etharp_query+0x300>)
 8112b58:	4613      	mov	r3, r2
 8112b5a:	005b      	lsls	r3, r3, #1
 8112b5c:	4413      	add	r3, r2
 8112b5e:	00db      	lsls	r3, r3, #3
 8112b60:	440b      	add	r3, r1
 8112b62:	3314      	adds	r3, #20
 8112b64:	781b      	ldrb	r3, [r3, #0]
 8112b66:	2b01      	cmp	r3, #1
 8112b68:	d011      	beq.n	8112b8e <etharp_query+0xfe>
 8112b6a:	7e7a      	ldrb	r2, [r7, #25]
 8112b6c:	4988      	ldr	r1, [pc, #544]	@ (8112d90 <etharp_query+0x300>)
 8112b6e:	4613      	mov	r3, r2
 8112b70:	005b      	lsls	r3, r3, #1
 8112b72:	4413      	add	r3, r2
 8112b74:	00db      	lsls	r3, r3, #3
 8112b76:	440b      	add	r3, r1
 8112b78:	3314      	adds	r3, #20
 8112b7a:	781b      	ldrb	r3, [r3, #0]
 8112b7c:	2b01      	cmp	r3, #1
 8112b7e:	d806      	bhi.n	8112b8e <etharp_query+0xfe>
 8112b80:	4b80      	ldr	r3, [pc, #512]	@ (8112d84 <etharp_query+0x2f4>)
 8112b82:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8112b86:	4983      	ldr	r1, [pc, #524]	@ (8112d94 <etharp_query+0x304>)
 8112b88:	4880      	ldr	r0, [pc, #512]	@ (8112d8c <etharp_query+0x2fc>)
 8112b8a:	f00b f927 	bl	811dddc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8112b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112b90:	2b00      	cmp	r3, #0
 8112b92:	d102      	bne.n	8112b9a <etharp_query+0x10a>
 8112b94:	687b      	ldr	r3, [r7, #4]
 8112b96:	2b00      	cmp	r3, #0
 8112b98:	d10c      	bne.n	8112bb4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8112b9a:	68b9      	ldr	r1, [r7, #8]
 8112b9c:	68f8      	ldr	r0, [r7, #12]
 8112b9e:	f000 f9af 	bl	8112f00 <etharp_request>
 8112ba2:	4603      	mov	r3, r0
 8112ba4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8112ba8:	687b      	ldr	r3, [r7, #4]
 8112baa:	2b00      	cmp	r3, #0
 8112bac:	d102      	bne.n	8112bb4 <etharp_query+0x124>
      return result;
 8112bae:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8112bb2:	e0e3      	b.n	8112d7c <etharp_query+0x2ec>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8112bb4:	687b      	ldr	r3, [r7, #4]
 8112bb6:	2b00      	cmp	r3, #0
 8112bb8:	d106      	bne.n	8112bc8 <etharp_query+0x138>
 8112bba:	4b72      	ldr	r3, [pc, #456]	@ (8112d84 <etharp_query+0x2f4>)
 8112bbc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8112bc0:	4975      	ldr	r1, [pc, #468]	@ (8112d98 <etharp_query+0x308>)
 8112bc2:	4872      	ldr	r0, [pc, #456]	@ (8112d8c <etharp_query+0x2fc>)
 8112bc4:	f00b f90a 	bl	811dddc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8112bc8:	7e7a      	ldrb	r2, [r7, #25]
 8112bca:	4971      	ldr	r1, [pc, #452]	@ (8112d90 <etharp_query+0x300>)
 8112bcc:	4613      	mov	r3, r2
 8112bce:	005b      	lsls	r3, r3, #1
 8112bd0:	4413      	add	r3, r2
 8112bd2:	00db      	lsls	r3, r3, #3
 8112bd4:	440b      	add	r3, r1
 8112bd6:	3314      	adds	r3, #20
 8112bd8:	781b      	ldrb	r3, [r3, #0]
 8112bda:	2b01      	cmp	r3, #1
 8112bdc:	d917      	bls.n	8112c0e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8112bde:	4a6f      	ldr	r2, [pc, #444]	@ (8112d9c <etharp_query+0x30c>)
 8112be0:	7e7b      	ldrb	r3, [r7, #25]
 8112be2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8112be4:	7e7a      	ldrb	r2, [r7, #25]
 8112be6:	4613      	mov	r3, r2
 8112be8:	005b      	lsls	r3, r3, #1
 8112bea:	4413      	add	r3, r2
 8112bec:	00db      	lsls	r3, r3, #3
 8112bee:	3308      	adds	r3, #8
 8112bf0:	4a67      	ldr	r2, [pc, #412]	@ (8112d90 <etharp_query+0x300>)
 8112bf2:	4413      	add	r3, r2
 8112bf4:	3304      	adds	r3, #4
 8112bf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8112bfa:	9200      	str	r2, [sp, #0]
 8112bfc:	69fa      	ldr	r2, [r7, #28]
 8112bfe:	6879      	ldr	r1, [r7, #4]
 8112c00:	68f8      	ldr	r0, [r7, #12]
 8112c02:	f000 fa1d 	bl	8113040 <ethernet_output>
 8112c06:	4603      	mov	r3, r0
 8112c08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8112c0c:	e0b4      	b.n	8112d78 <etharp_query+0x2e8>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8112c0e:	7e7a      	ldrb	r2, [r7, #25]
 8112c10:	495f      	ldr	r1, [pc, #380]	@ (8112d90 <etharp_query+0x300>)
 8112c12:	4613      	mov	r3, r2
 8112c14:	005b      	lsls	r3, r3, #1
 8112c16:	4413      	add	r3, r2
 8112c18:	00db      	lsls	r3, r3, #3
 8112c1a:	440b      	add	r3, r1
 8112c1c:	3314      	adds	r3, #20
 8112c1e:	781b      	ldrb	r3, [r3, #0]
 8112c20:	2b01      	cmp	r3, #1
 8112c22:	f040 80a9 	bne.w	8112d78 <etharp_query+0x2e8>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8112c26:	2300      	movs	r3, #0
 8112c28:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8112c2a:	687b      	ldr	r3, [r7, #4]
 8112c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p) {
 8112c2e:	e01c      	b.n	8112c6a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8112c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112c32:	895a      	ldrh	r2, [r3, #10]
 8112c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112c36:	891b      	ldrh	r3, [r3, #8]
 8112c38:	429a      	cmp	r2, r3
 8112c3a:	d10a      	bne.n	8112c52 <etharp_query+0x1c2>
 8112c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112c3e:	681b      	ldr	r3, [r3, #0]
 8112c40:	2b00      	cmp	r3, #0
 8112c42:	d006      	beq.n	8112c52 <etharp_query+0x1c2>
 8112c44:	4b4f      	ldr	r3, [pc, #316]	@ (8112d84 <etharp_query+0x2f4>)
 8112c46:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8112c4a:	4955      	ldr	r1, [pc, #340]	@ (8112da0 <etharp_query+0x310>)
 8112c4c:	484f      	ldr	r0, [pc, #316]	@ (8112d8c <etharp_query+0x2fc>)
 8112c4e:	f00b f8c5 	bl	811dddc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8112c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112c54:	7b1b      	ldrb	r3, [r3, #12]
 8112c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8112c5a:	2b00      	cmp	r3, #0
 8112c5c:	d002      	beq.n	8112c64 <etharp_query+0x1d4>
        copy_needed = 1;
 8112c5e:	2301      	movs	r3, #1
 8112c60:	62bb      	str	r3, [r7, #40]	@ 0x28
        break;
 8112c62:	e005      	b.n	8112c70 <etharp_query+0x1e0>
      }
      p = p->next;
 8112c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112c66:	681b      	ldr	r3, [r3, #0]
 8112c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p) {
 8112c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112c6c:	2b00      	cmp	r3, #0
 8112c6e:	d1df      	bne.n	8112c30 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8112c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112c72:	2b00      	cmp	r3, #0
 8112c74:	d007      	beq.n	8112c86 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8112c76:	687a      	ldr	r2, [r7, #4]
 8112c78:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8112c7c:	200e      	movs	r0, #14
 8112c7e:	f003 fd8f 	bl	81167a0 <pbuf_clone>
 8112c82:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8112c84:	e004      	b.n	8112c90 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8112c86:	687b      	ldr	r3, [r7, #4]
 8112c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pbuf_ref(p);
 8112c8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8112c8c:	f003 fbb6 	bl	81163fc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8112c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112c92:	2b00      	cmp	r3, #0
 8112c94:	d06d      	beq.n	8112d72 <etharp_query+0x2e2>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 8112c96:	2009      	movs	r0, #9
 8112c98:	f002 fbf0 	bl	811547c <memp_malloc>
 8112c9c:	6178      	str	r0, [r7, #20]
      if (new_entry != NULL) {
 8112c9e:	697b      	ldr	r3, [r7, #20]
 8112ca0:	2b00      	cmp	r3, #0
 8112ca2:	d05f      	beq.n	8112d64 <etharp_query+0x2d4>
        unsigned int qlen = 0;
 8112ca4:	2300      	movs	r3, #0
 8112ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        new_entry->next = 0;
 8112ca8:	697b      	ldr	r3, [r7, #20]
 8112caa:	2200      	movs	r2, #0
 8112cac:	601a      	str	r2, [r3, #0]
        new_entry->p = p;
 8112cae:	697b      	ldr	r3, [r7, #20]
 8112cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8112cb2:	605a      	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
 8112cb4:	7e7a      	ldrb	r2, [r7, #25]
 8112cb6:	4936      	ldr	r1, [pc, #216]	@ (8112d90 <etharp_query+0x300>)
 8112cb8:	4613      	mov	r3, r2
 8112cba:	005b      	lsls	r3, r3, #1
 8112cbc:	4413      	add	r3, r2
 8112cbe:	00db      	lsls	r3, r3, #3
 8112cc0:	440b      	add	r3, r1
 8112cc2:	681b      	ldr	r3, [r3, #0]
 8112cc4:	2b00      	cmp	r3, #0
 8112cc6:	d01a      	beq.n	8112cfe <etharp_query+0x26e>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 8112cc8:	7e7a      	ldrb	r2, [r7, #25]
 8112cca:	4931      	ldr	r1, [pc, #196]	@ (8112d90 <etharp_query+0x300>)
 8112ccc:	4613      	mov	r3, r2
 8112cce:	005b      	lsls	r3, r3, #1
 8112cd0:	4413      	add	r3, r2
 8112cd2:	00db      	lsls	r3, r3, #3
 8112cd4:	440b      	add	r3, r1
 8112cd6:	681b      	ldr	r3, [r3, #0]
 8112cd8:	623b      	str	r3, [r7, #32]
          qlen++;
 8112cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112cdc:	3301      	adds	r3, #1
 8112cde:	627b      	str	r3, [r7, #36]	@ 0x24
          while (r->next != NULL) {
 8112ce0:	e005      	b.n	8112cee <etharp_query+0x25e>
            r = r->next;
 8112ce2:	6a3b      	ldr	r3, [r7, #32]
 8112ce4:	681b      	ldr	r3, [r3, #0]
 8112ce6:	623b      	str	r3, [r7, #32]
            qlen++;
 8112ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112cea:	3301      	adds	r3, #1
 8112cec:	627b      	str	r3, [r7, #36]	@ 0x24
          while (r->next != NULL) {
 8112cee:	6a3b      	ldr	r3, [r7, #32]
 8112cf0:	681b      	ldr	r3, [r3, #0]
 8112cf2:	2b00      	cmp	r3, #0
 8112cf4:	d1f5      	bne.n	8112ce2 <etharp_query+0x252>
          }
          r->next = new_entry;
 8112cf6:	6a3b      	ldr	r3, [r7, #32]
 8112cf8:	697a      	ldr	r2, [r7, #20]
 8112cfa:	601a      	str	r2, [r3, #0]
 8112cfc:	e008      	b.n	8112d10 <etharp_query+0x280>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 8112cfe:	7e7a      	ldrb	r2, [r7, #25]
 8112d00:	4923      	ldr	r1, [pc, #140]	@ (8112d90 <etharp_query+0x300>)
 8112d02:	4613      	mov	r3, r2
 8112d04:	005b      	lsls	r3, r3, #1
 8112d06:	4413      	add	r3, r2
 8112d08:	00db      	lsls	r3, r3, #3
 8112d0a:	440b      	add	r3, r1
 8112d0c:	697a      	ldr	r2, [r7, #20]
 8112d0e:	601a      	str	r2, [r3, #0]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
 8112d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112d12:	2b02      	cmp	r3, #2
 8112d14:	d922      	bls.n	8112d5c <etharp_query+0x2cc>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
 8112d16:	7e7a      	ldrb	r2, [r7, #25]
 8112d18:	491d      	ldr	r1, [pc, #116]	@ (8112d90 <etharp_query+0x300>)
 8112d1a:	4613      	mov	r3, r2
 8112d1c:	005b      	lsls	r3, r3, #1
 8112d1e:	4413      	add	r3, r2
 8112d20:	00db      	lsls	r3, r3, #3
 8112d22:	440b      	add	r3, r1
 8112d24:	681b      	ldr	r3, [r3, #0]
 8112d26:	613b      	str	r3, [r7, #16]
          arp_table[i].q = arp_table[i].q->next;
 8112d28:	7e7a      	ldrb	r2, [r7, #25]
 8112d2a:	4919      	ldr	r1, [pc, #100]	@ (8112d90 <etharp_query+0x300>)
 8112d2c:	4613      	mov	r3, r2
 8112d2e:	005b      	lsls	r3, r3, #1
 8112d30:	4413      	add	r3, r2
 8112d32:	00db      	lsls	r3, r3, #3
 8112d34:	440b      	add	r3, r1
 8112d36:	681b      	ldr	r3, [r3, #0]
 8112d38:	7e7a      	ldrb	r2, [r7, #25]
 8112d3a:	6819      	ldr	r1, [r3, #0]
 8112d3c:	4814      	ldr	r0, [pc, #80]	@ (8112d90 <etharp_query+0x300>)
 8112d3e:	4613      	mov	r3, r2
 8112d40:	005b      	lsls	r3, r3, #1
 8112d42:	4413      	add	r3, r2
 8112d44:	00db      	lsls	r3, r3, #3
 8112d46:	4403      	add	r3, r0
 8112d48:	6019      	str	r1, [r3, #0]
          pbuf_free(old->p);
 8112d4a:	693b      	ldr	r3, [r7, #16]
 8112d4c:	685b      	ldr	r3, [r3, #4]
 8112d4e:	4618      	mov	r0, r3
 8112d50:	f003 faae 	bl	81162b0 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 8112d54:	6939      	ldr	r1, [r7, #16]
 8112d56:	2009      	movs	r0, #9
 8112d58:	f002 fc06 	bl	8115568 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, i));
        result = ERR_OK;
 8112d5c:	2300      	movs	r3, #0
 8112d5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8112d62:	e009      	b.n	8112d78 <etharp_query+0x2e8>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 8112d64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8112d66:	f003 faa3 	bl	81162b0 <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
 8112d6a:	23ff      	movs	r3, #255	@ 0xff
 8112d6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8112d70:	e002      	b.n	8112d78 <etharp_query+0x2e8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8112d72:	23ff      	movs	r3, #255	@ 0xff
 8112d74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }
  }
  return result;
 8112d78:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8112d7c:	4618      	mov	r0, r3
 8112d7e:	3738      	adds	r7, #56	@ 0x38
 8112d80:	46bd      	mov	sp, r7
 8112d82:	bd80      	pop	{r7, pc}
 8112d84:	0811f508 	.word	0x0811f508
 8112d88:	0811f704 	.word	0x0811f704
 8112d8c:	0811f58c 	.word	0x0811f58c
 8112d90:	1000b1a8 	.word	0x1000b1a8
 8112d94:	0811f714 	.word	0x0811f714
 8112d98:	0811f580 	.word	0x0811f580
 8112d9c:	1000b298 	.word	0x1000b298
 8112da0:	0811f73c 	.word	0x0811f73c

08112da4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8112da4:	b580      	push	{r7, lr}
 8112da6:	b08a      	sub	sp, #40	@ 0x28
 8112da8:	af02      	add	r7, sp, #8
 8112daa:	60f8      	str	r0, [r7, #12]
 8112dac:	60b9      	str	r1, [r7, #8]
 8112dae:	607a      	str	r2, [r7, #4]
 8112db0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8112db2:	2300      	movs	r3, #0
 8112db4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8112db6:	68fb      	ldr	r3, [r7, #12]
 8112db8:	2b00      	cmp	r3, #0
 8112dba:	d106      	bne.n	8112dca <etharp_raw+0x26>
 8112dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8112ea8 <etharp_raw+0x104>)
 8112dbe:	f240 4257 	movw	r2, #1111	@ 0x457
 8112dc2:	493a      	ldr	r1, [pc, #232]	@ (8112eac <etharp_raw+0x108>)
 8112dc4:	483a      	ldr	r0, [pc, #232]	@ (8112eb0 <etharp_raw+0x10c>)
 8112dc6:	f00b f809 	bl	811dddc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8112dca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8112dce:	211c      	movs	r1, #28
 8112dd0:	200e      	movs	r0, #14
 8112dd2:	f002 ff89 	bl	8115ce8 <pbuf_alloc>
 8112dd6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8112dd8:	69bb      	ldr	r3, [r7, #24]
 8112dda:	2b00      	cmp	r3, #0
 8112ddc:	d102      	bne.n	8112de4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8112dde:	f04f 33ff 	mov.w	r3, #4294967295
 8112de2:	e05d      	b.n	8112ea0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8112de4:	69bb      	ldr	r3, [r7, #24]
 8112de6:	895b      	ldrh	r3, [r3, #10]
 8112de8:	2b1b      	cmp	r3, #27
 8112dea:	d806      	bhi.n	8112dfa <etharp_raw+0x56>
 8112dec:	4b2e      	ldr	r3, [pc, #184]	@ (8112ea8 <etharp_raw+0x104>)
 8112dee:	f240 4262 	movw	r2, #1122	@ 0x462
 8112df2:	4930      	ldr	r1, [pc, #192]	@ (8112eb4 <etharp_raw+0x110>)
 8112df4:	482e      	ldr	r0, [pc, #184]	@ (8112eb0 <etharp_raw+0x10c>)
 8112df6:	f00a fff1 	bl	811dddc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8112dfa:	69bb      	ldr	r3, [r7, #24]
 8112dfc:	685b      	ldr	r3, [r3, #4]
 8112dfe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8112e00:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8112e02:	4618      	mov	r0, r3
 8112e04:	f7ff f84a 	bl	8111e9c <lwip_htons>
 8112e08:	4603      	mov	r3, r0
 8112e0a:	461a      	mov	r2, r3
 8112e0c:	697b      	ldr	r3, [r7, #20]
 8112e0e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8112e10:	68fb      	ldr	r3, [r7, #12]
 8112e12:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8112e16:	2b06      	cmp	r3, #6
 8112e18:	d006      	beq.n	8112e28 <etharp_raw+0x84>
 8112e1a:	4b23      	ldr	r3, [pc, #140]	@ (8112ea8 <etharp_raw+0x104>)
 8112e1c:	f240 4269 	movw	r2, #1129	@ 0x469
 8112e20:	4925      	ldr	r1, [pc, #148]	@ (8112eb8 <etharp_raw+0x114>)
 8112e22:	4823      	ldr	r0, [pc, #140]	@ (8112eb0 <etharp_raw+0x10c>)
 8112e24:	f00a ffda 	bl	811dddc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8112e28:	697b      	ldr	r3, [r7, #20]
 8112e2a:	3308      	adds	r3, #8
 8112e2c:	2206      	movs	r2, #6
 8112e2e:	6839      	ldr	r1, [r7, #0]
 8112e30:	4618      	mov	r0, r3
 8112e32:	f00b fa62 	bl	811e2fa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8112e36:	697b      	ldr	r3, [r7, #20]
 8112e38:	3312      	adds	r3, #18
 8112e3a:	2206      	movs	r2, #6
 8112e3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8112e3e:	4618      	mov	r0, r3
 8112e40:	f00b fa5b 	bl	811e2fa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8112e44:	697b      	ldr	r3, [r7, #20]
 8112e46:	330e      	adds	r3, #14
 8112e48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8112e4a:	6812      	ldr	r2, [r2, #0]
 8112e4c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8112e4e:	697b      	ldr	r3, [r7, #20]
 8112e50:	3318      	adds	r3, #24
 8112e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112e54:	6812      	ldr	r2, [r2, #0]
 8112e56:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8112e58:	697b      	ldr	r3, [r7, #20]
 8112e5a:	2200      	movs	r2, #0
 8112e5c:	701a      	strb	r2, [r3, #0]
 8112e5e:	2200      	movs	r2, #0
 8112e60:	f042 0201 	orr.w	r2, r2, #1
 8112e64:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8112e66:	697b      	ldr	r3, [r7, #20]
 8112e68:	2200      	movs	r2, #0
 8112e6a:	f042 0208 	orr.w	r2, r2, #8
 8112e6e:	709a      	strb	r2, [r3, #2]
 8112e70:	2200      	movs	r2, #0
 8112e72:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8112e74:	697b      	ldr	r3, [r7, #20]
 8112e76:	2206      	movs	r2, #6
 8112e78:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8112e7a:	697b      	ldr	r3, [r7, #20]
 8112e7c:	2204      	movs	r2, #4
 8112e7e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8112e80:	f640 0306 	movw	r3, #2054	@ 0x806
 8112e84:	9300      	str	r3, [sp, #0]
 8112e86:	687b      	ldr	r3, [r7, #4]
 8112e88:	68ba      	ldr	r2, [r7, #8]
 8112e8a:	69b9      	ldr	r1, [r7, #24]
 8112e8c:	68f8      	ldr	r0, [r7, #12]
 8112e8e:	f000 f8d7 	bl	8113040 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8112e92:	69b8      	ldr	r0, [r7, #24]
 8112e94:	f003 fa0c 	bl	81162b0 <pbuf_free>
  p = NULL;
 8112e98:	2300      	movs	r3, #0
 8112e9a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8112e9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8112ea0:	4618      	mov	r0, r3
 8112ea2:	3720      	adds	r7, #32
 8112ea4:	46bd      	mov	sp, r7
 8112ea6:	bd80      	pop	{r7, pc}
 8112ea8:	0811f508 	.word	0x0811f508
 8112eac:	0811f6b4 	.word	0x0811f6b4
 8112eb0:	0811f58c 	.word	0x0811f58c
 8112eb4:	0811f758 	.word	0x0811f758
 8112eb8:	0811f78c 	.word	0x0811f78c

08112ebc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8112ebc:	b580      	push	{r7, lr}
 8112ebe:	b088      	sub	sp, #32
 8112ec0:	af04      	add	r7, sp, #16
 8112ec2:	60f8      	str	r0, [r7, #12]
 8112ec4:	60b9      	str	r1, [r7, #8]
 8112ec6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8112ec8:	68fb      	ldr	r3, [r7, #12]
 8112eca:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8112ece:	68fb      	ldr	r3, [r7, #12]
 8112ed0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8112ed4:	68fb      	ldr	r3, [r7, #12]
 8112ed6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8112ed8:	2201      	movs	r2, #1
 8112eda:	9203      	str	r2, [sp, #12]
 8112edc:	68ba      	ldr	r2, [r7, #8]
 8112ede:	9202      	str	r2, [sp, #8]
 8112ee0:	4a06      	ldr	r2, [pc, #24]	@ (8112efc <etharp_request_dst+0x40>)
 8112ee2:	9201      	str	r2, [sp, #4]
 8112ee4:	9300      	str	r3, [sp, #0]
 8112ee6:	4603      	mov	r3, r0
 8112ee8:	687a      	ldr	r2, [r7, #4]
 8112eea:	68f8      	ldr	r0, [r7, #12]
 8112eec:	f7ff ff5a 	bl	8112da4 <etharp_raw>
 8112ef0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8112ef2:	4618      	mov	r0, r3
 8112ef4:	3710      	adds	r7, #16
 8112ef6:	46bd      	mov	sp, r7
 8112ef8:	bd80      	pop	{r7, pc}
 8112efa:	bf00      	nop
 8112efc:	081224d0 	.word	0x081224d0

08112f00 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8112f00:	b580      	push	{r7, lr}
 8112f02:	b082      	sub	sp, #8
 8112f04:	af00      	add	r7, sp, #0
 8112f06:	6078      	str	r0, [r7, #4]
 8112f08:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8112f0a:	4a05      	ldr	r2, [pc, #20]	@ (8112f20 <etharp_request+0x20>)
 8112f0c:	6839      	ldr	r1, [r7, #0]
 8112f0e:	6878      	ldr	r0, [r7, #4]
 8112f10:	f7ff ffd4 	bl	8112ebc <etharp_request_dst>
 8112f14:	4603      	mov	r3, r0
}
 8112f16:	4618      	mov	r0, r3
 8112f18:	3708      	adds	r7, #8
 8112f1a:	46bd      	mov	sp, r7
 8112f1c:	bd80      	pop	{r7, pc}
 8112f1e:	bf00      	nop
 8112f20:	081224c8 	.word	0x081224c8

08112f24 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8112f24:	b580      	push	{r7, lr}
 8112f26:	b086      	sub	sp, #24
 8112f28:	af00      	add	r7, sp, #0
 8112f2a:	6078      	str	r0, [r7, #4]
 8112f2c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8112f2e:	230e      	movs	r3, #14
 8112f30:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8112f32:	687b      	ldr	r3, [r7, #4]
 8112f34:	895b      	ldrh	r3, [r3, #10]
 8112f36:	2b0e      	cmp	r3, #14
 8112f38:	d96e      	bls.n	8113018 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8112f3a:	687b      	ldr	r3, [r7, #4]
 8112f3c:	7bdb      	ldrb	r3, [r3, #15]
 8112f3e:	2b00      	cmp	r3, #0
 8112f40:	d106      	bne.n	8112f50 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8112f42:	683b      	ldr	r3, [r7, #0]
 8112f44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8112f48:	3301      	adds	r3, #1
 8112f4a:	b2da      	uxtb	r2, r3
 8112f4c:	687b      	ldr	r3, [r7, #4]
 8112f4e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8112f50:	687b      	ldr	r3, [r7, #4]
 8112f52:	685b      	ldr	r3, [r3, #4]
 8112f54:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8112f56:	693b      	ldr	r3, [r7, #16]
 8112f58:	7b1a      	ldrb	r2, [r3, #12]
 8112f5a:	7b5b      	ldrb	r3, [r3, #13]
 8112f5c:	021b      	lsls	r3, r3, #8
 8112f5e:	4313      	orrs	r3, r2
 8112f60:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8112f62:	693b      	ldr	r3, [r7, #16]
 8112f64:	781b      	ldrb	r3, [r3, #0]
 8112f66:	f003 0301 	and.w	r3, r3, #1
 8112f6a:	2b00      	cmp	r3, #0
 8112f6c:	d023      	beq.n	8112fb6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8112f6e:	693b      	ldr	r3, [r7, #16]
 8112f70:	781b      	ldrb	r3, [r3, #0]
 8112f72:	2b01      	cmp	r3, #1
 8112f74:	d10f      	bne.n	8112f96 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8112f76:	693b      	ldr	r3, [r7, #16]
 8112f78:	785b      	ldrb	r3, [r3, #1]
 8112f7a:	2b00      	cmp	r3, #0
 8112f7c:	d11b      	bne.n	8112fb6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8112f7e:	693b      	ldr	r3, [r7, #16]
 8112f80:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8112f82:	2b5e      	cmp	r3, #94	@ 0x5e
 8112f84:	d117      	bne.n	8112fb6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8112f86:	687b      	ldr	r3, [r7, #4]
 8112f88:	7b5b      	ldrb	r3, [r3, #13]
 8112f8a:	f043 0310 	orr.w	r3, r3, #16
 8112f8e:	b2da      	uxtb	r2, r3
 8112f90:	687b      	ldr	r3, [r7, #4]
 8112f92:	735a      	strb	r2, [r3, #13]
 8112f94:	e00f      	b.n	8112fb6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8112f96:	693b      	ldr	r3, [r7, #16]
 8112f98:	2206      	movs	r2, #6
 8112f9a:	4928      	ldr	r1, [pc, #160]	@ (811303c <ethernet_input+0x118>)
 8112f9c:	4618      	mov	r0, r3
 8112f9e:	f00b f833 	bl	811e008 <memcmp>
 8112fa2:	4603      	mov	r3, r0
 8112fa4:	2b00      	cmp	r3, #0
 8112fa6:	d106      	bne.n	8112fb6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8112fa8:	687b      	ldr	r3, [r7, #4]
 8112faa:	7b5b      	ldrb	r3, [r3, #13]
 8112fac:	f043 0308 	orr.w	r3, r3, #8
 8112fb0:	b2da      	uxtb	r2, r3
 8112fb2:	687b      	ldr	r3, [r7, #4]
 8112fb4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8112fb6:	89fb      	ldrh	r3, [r7, #14]
 8112fb8:	2b08      	cmp	r3, #8
 8112fba:	d003      	beq.n	8112fc4 <ethernet_input+0xa0>
 8112fbc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8112fc0:	d014      	beq.n	8112fec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8112fc2:	e032      	b.n	811302a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8112fc4:	683b      	ldr	r3, [r7, #0]
 8112fc6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8112fca:	f003 0308 	and.w	r3, r3, #8
 8112fce:	2b00      	cmp	r3, #0
 8112fd0:	d024      	beq.n	811301c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8112fd2:	8afb      	ldrh	r3, [r7, #22]
 8112fd4:	4619      	mov	r1, r3
 8112fd6:	6878      	ldr	r0, [r7, #4]
 8112fd8:	f003 f8e4 	bl	81161a4 <pbuf_remove_header>
 8112fdc:	4603      	mov	r3, r0
 8112fde:	2b00      	cmp	r3, #0
 8112fe0:	d11e      	bne.n	8113020 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8112fe2:	6839      	ldr	r1, [r7, #0]
 8112fe4:	6878      	ldr	r0, [r7, #4]
 8112fe6:	f000 fb95 	bl	8113714 <ip4_input>
      break;
 8112fea:	e013      	b.n	8113014 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8112fec:	683b      	ldr	r3, [r7, #0]
 8112fee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8112ff2:	f003 0308 	and.w	r3, r3, #8
 8112ff6:	2b00      	cmp	r3, #0
 8112ff8:	d014      	beq.n	8113024 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8112ffa:	8afb      	ldrh	r3, [r7, #22]
 8112ffc:	4619      	mov	r1, r3
 8112ffe:	6878      	ldr	r0, [r7, #4]
 8113000:	f003 f8d0 	bl	81161a4 <pbuf_remove_header>
 8113004:	4603      	mov	r3, r0
 8113006:	2b00      	cmp	r3, #0
 8113008:	d10e      	bne.n	8113028 <ethernet_input+0x104>
        etharp_input(p, netif);
 811300a:	6839      	ldr	r1, [r7, #0]
 811300c:	6878      	ldr	r0, [r7, #4]
 811300e:	f7ff fb19 	bl	8112644 <etharp_input>
      break;
 8113012:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8113014:	2300      	movs	r3, #0
 8113016:	e00c      	b.n	8113032 <ethernet_input+0x10e>
    goto free_and_return;
 8113018:	bf00      	nop
 811301a:	e006      	b.n	811302a <ethernet_input+0x106>
        goto free_and_return;
 811301c:	bf00      	nop
 811301e:	e004      	b.n	811302a <ethernet_input+0x106>
        goto free_and_return;
 8113020:	bf00      	nop
 8113022:	e002      	b.n	811302a <ethernet_input+0x106>
        goto free_and_return;
 8113024:	bf00      	nop
 8113026:	e000      	b.n	811302a <ethernet_input+0x106>
        goto free_and_return;
 8113028:	bf00      	nop

free_and_return:
  pbuf_free(p);
 811302a:	6878      	ldr	r0, [r7, #4]
 811302c:	f003 f940 	bl	81162b0 <pbuf_free>
  return ERR_OK;
 8113030:	2300      	movs	r3, #0
}
 8113032:	4618      	mov	r0, r3
 8113034:	3718      	adds	r7, #24
 8113036:	46bd      	mov	sp, r7
 8113038:	bd80      	pop	{r7, pc}
 811303a:	bf00      	nop
 811303c:	081224c8 	.word	0x081224c8

08113040 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8113040:	b580      	push	{r7, lr}
 8113042:	b086      	sub	sp, #24
 8113044:	af00      	add	r7, sp, #0
 8113046:	60f8      	str	r0, [r7, #12]
 8113048:	60b9      	str	r1, [r7, #8]
 811304a:	607a      	str	r2, [r7, #4]
 811304c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 811304e:	8c3b      	ldrh	r3, [r7, #32]
 8113050:	4618      	mov	r0, r3
 8113052:	f7fe ff23 	bl	8111e9c <lwip_htons>
 8113056:	4603      	mov	r3, r0
 8113058:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 811305a:	210e      	movs	r1, #14
 811305c:	68b8      	ldr	r0, [r7, #8]
 811305e:	f003 f891 	bl	8116184 <pbuf_add_header>
 8113062:	4603      	mov	r3, r0
 8113064:	2b00      	cmp	r3, #0
 8113066:	d125      	bne.n	81130b4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8113068:	68bb      	ldr	r3, [r7, #8]
 811306a:	685b      	ldr	r3, [r3, #4]
 811306c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 811306e:	693b      	ldr	r3, [r7, #16]
 8113070:	8afa      	ldrh	r2, [r7, #22]
 8113072:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8113074:	693b      	ldr	r3, [r7, #16]
 8113076:	2206      	movs	r2, #6
 8113078:	6839      	ldr	r1, [r7, #0]
 811307a:	4618      	mov	r0, r3
 811307c:	f00b f93d 	bl	811e2fa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8113080:	693b      	ldr	r3, [r7, #16]
 8113082:	3306      	adds	r3, #6
 8113084:	2206      	movs	r2, #6
 8113086:	6879      	ldr	r1, [r7, #4]
 8113088:	4618      	mov	r0, r3
 811308a:	f00b f936 	bl	811e2fa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 811308e:	68fb      	ldr	r3, [r7, #12]
 8113090:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8113094:	2b06      	cmp	r3, #6
 8113096:	d006      	beq.n	81130a6 <ethernet_output+0x66>
 8113098:	4b0a      	ldr	r3, [pc, #40]	@ (81130c4 <ethernet_output+0x84>)
 811309a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 811309e:	490a      	ldr	r1, [pc, #40]	@ (81130c8 <ethernet_output+0x88>)
 81130a0:	480a      	ldr	r0, [pc, #40]	@ (81130cc <ethernet_output+0x8c>)
 81130a2:	f00a fe9b 	bl	811dddc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 81130a6:	68fb      	ldr	r3, [r7, #12]
 81130a8:	699b      	ldr	r3, [r3, #24]
 81130aa:	68b9      	ldr	r1, [r7, #8]
 81130ac:	68f8      	ldr	r0, [r7, #12]
 81130ae:	4798      	blx	r3
 81130b0:	4603      	mov	r3, r0
 81130b2:	e002      	b.n	81130ba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 81130b4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 81130b6:	f06f 0301 	mvn.w	r3, #1
}
 81130ba:	4618      	mov	r0, r3
 81130bc:	3718      	adds	r7, #24
 81130be:	46bd      	mov	sp, r7
 81130c0:	bd80      	pop	{r7, pc}
 81130c2:	bf00      	nop
 81130c4:	0811f7d0 	.word	0x0811f7d0
 81130c8:	0811f844 	.word	0x0811f844
 81130cc:	0811f878 	.word	0x0811f878

081130d0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 81130d0:	b580      	push	{r7, lr}
 81130d2:	b08e      	sub	sp, #56	@ 0x38
 81130d4:	af04      	add	r7, sp, #16
 81130d6:	6078      	str	r0, [r7, #4]
 81130d8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 81130da:	4b87      	ldr	r3, [pc, #540]	@ (81132f8 <icmp_input+0x228>)
 81130dc:	689b      	ldr	r3, [r3, #8]
 81130de:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 81130e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81130e2:	781b      	ldrb	r3, [r3, #0]
 81130e4:	f003 030f 	and.w	r3, r3, #15
 81130e8:	b2db      	uxtb	r3, r3
 81130ea:	009b      	lsls	r3, r3, #2
 81130ec:	b2db      	uxtb	r3, r3
 81130ee:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 81130f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81130f2:	2b13      	cmp	r3, #19
 81130f4:	f240 80e8 	bls.w	81132c8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 81130f8:	687b      	ldr	r3, [r7, #4]
 81130fa:	895b      	ldrh	r3, [r3, #10]
 81130fc:	2b03      	cmp	r3, #3
 81130fe:	f240 80e5 	bls.w	81132cc <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8113102:	687b      	ldr	r3, [r7, #4]
 8113104:	685b      	ldr	r3, [r3, #4]
 8113106:	781b      	ldrb	r3, [r3, #0]
 8113108:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 811310c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8113110:	2b00      	cmp	r3, #0
 8113112:	f000 80d2 	beq.w	81132ba <icmp_input+0x1ea>
 8113116:	2b08      	cmp	r3, #8
 8113118:	f040 80d2 	bne.w	81132c0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 811311c:	4b77      	ldr	r3, [pc, #476]	@ (81132fc <icmp_input+0x22c>)
 811311e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8113120:	4b75      	ldr	r3, [pc, #468]	@ (81132f8 <icmp_input+0x228>)
 8113122:	695b      	ldr	r3, [r3, #20]
 8113124:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8113128:	2be0      	cmp	r3, #224	@ 0xe0
 811312a:	f000 80d6 	beq.w	81132da <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 811312e:	4b72      	ldr	r3, [pc, #456]	@ (81132f8 <icmp_input+0x228>)
 8113130:	695b      	ldr	r3, [r3, #20]
 8113132:	4a71      	ldr	r2, [pc, #452]	@ (81132f8 <icmp_input+0x228>)
 8113134:	6812      	ldr	r2, [r2, #0]
 8113136:	4611      	mov	r1, r2
 8113138:	4618      	mov	r0, r3
 811313a:	f000 fce7 	bl	8113b0c <ip4_addr_isbroadcast_u32>
 811313e:	4603      	mov	r3, r0
 8113140:	2b00      	cmp	r3, #0
 8113142:	f040 80cc 	bne.w	81132de <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8113146:	687b      	ldr	r3, [r7, #4]
 8113148:	891b      	ldrh	r3, [r3, #8]
 811314a:	2b07      	cmp	r3, #7
 811314c:	f240 80c0 	bls.w	81132d0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8113150:	6878      	ldr	r0, [r7, #4]
 8113152:	f000 f9e0 	bl	8113516 <inet_chksum_pbuf>
 8113156:	4603      	mov	r3, r0
 8113158:	2b00      	cmp	r3, #0
 811315a:	d003      	beq.n	8113164 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 811315c:	6878      	ldr	r0, [r7, #4]
 811315e:	f003 f8a7 	bl	81162b0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8113162:	e0c5      	b.n	81132f0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8113164:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8113166:	330e      	adds	r3, #14
 8113168:	4619      	mov	r1, r3
 811316a:	6878      	ldr	r0, [r7, #4]
 811316c:	f003 f80a 	bl	8116184 <pbuf_add_header>
 8113170:	4603      	mov	r3, r0
 8113172:	2b00      	cmp	r3, #0
 8113174:	d04b      	beq.n	811320e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8113176:	687b      	ldr	r3, [r7, #4]
 8113178:	891a      	ldrh	r2, [r3, #8]
 811317a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811317c:	4413      	add	r3, r2
 811317e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8113180:	687b      	ldr	r3, [r7, #4]
 8113182:	891b      	ldrh	r3, [r3, #8]
 8113184:	8b7a      	ldrh	r2, [r7, #26]
 8113186:	429a      	cmp	r2, r3
 8113188:	f0c0 80ab 	bcc.w	81132e2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 811318c:	8b7b      	ldrh	r3, [r7, #26]
 811318e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8113192:	4619      	mov	r1, r3
 8113194:	200e      	movs	r0, #14
 8113196:	f002 fda7 	bl	8115ce8 <pbuf_alloc>
 811319a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 811319c:	697b      	ldr	r3, [r7, #20]
 811319e:	2b00      	cmp	r3, #0
 81131a0:	f000 80a1 	beq.w	81132e6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 81131a4:	697b      	ldr	r3, [r7, #20]
 81131a6:	895b      	ldrh	r3, [r3, #10]
 81131a8:	461a      	mov	r2, r3
 81131aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81131ac:	3308      	adds	r3, #8
 81131ae:	429a      	cmp	r2, r3
 81131b0:	d203      	bcs.n	81131ba <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 81131b2:	6978      	ldr	r0, [r7, #20]
 81131b4:	f003 f87c 	bl	81162b0 <pbuf_free>
          goto icmperr;
 81131b8:	e096      	b.n	81132e8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 81131ba:	697b      	ldr	r3, [r7, #20]
 81131bc:	685b      	ldr	r3, [r3, #4]
 81131be:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 81131c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81131c2:	4618      	mov	r0, r3
 81131c4:	f00b f899 	bl	811e2fa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 81131c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81131ca:	4619      	mov	r1, r3
 81131cc:	6978      	ldr	r0, [r7, #20]
 81131ce:	f002 ffe9 	bl	81161a4 <pbuf_remove_header>
 81131d2:	4603      	mov	r3, r0
 81131d4:	2b00      	cmp	r3, #0
 81131d6:	d009      	beq.n	81131ec <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 81131d8:	4b49      	ldr	r3, [pc, #292]	@ (8113300 <icmp_input+0x230>)
 81131da:	22b6      	movs	r2, #182	@ 0xb6
 81131dc:	4949      	ldr	r1, [pc, #292]	@ (8113304 <icmp_input+0x234>)
 81131de:	484a      	ldr	r0, [pc, #296]	@ (8113308 <icmp_input+0x238>)
 81131e0:	f00a fdfc 	bl	811dddc <iprintf>
          pbuf_free(r);
 81131e4:	6978      	ldr	r0, [r7, #20]
 81131e6:	f003 f863 	bl	81162b0 <pbuf_free>
          goto icmperr;
 81131ea:	e07d      	b.n	81132e8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 81131ec:	6879      	ldr	r1, [r7, #4]
 81131ee:	6978      	ldr	r0, [r7, #20]
 81131f0:	f003 f992 	bl	8116518 <pbuf_copy>
 81131f4:	4603      	mov	r3, r0
 81131f6:	2b00      	cmp	r3, #0
 81131f8:	d003      	beq.n	8113202 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 81131fa:	6978      	ldr	r0, [r7, #20]
 81131fc:	f003 f858 	bl	81162b0 <pbuf_free>
          goto icmperr;
 8113200:	e072      	b.n	81132e8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8113202:	6878      	ldr	r0, [r7, #4]
 8113204:	f003 f854 	bl	81162b0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8113208:	697b      	ldr	r3, [r7, #20]
 811320a:	607b      	str	r3, [r7, #4]
 811320c:	e00f      	b.n	811322e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 811320e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8113210:	330e      	adds	r3, #14
 8113212:	4619      	mov	r1, r3
 8113214:	6878      	ldr	r0, [r7, #4]
 8113216:	f002 ffc5 	bl	81161a4 <pbuf_remove_header>
 811321a:	4603      	mov	r3, r0
 811321c:	2b00      	cmp	r3, #0
 811321e:	d006      	beq.n	811322e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8113220:	4b37      	ldr	r3, [pc, #220]	@ (8113300 <icmp_input+0x230>)
 8113222:	22c7      	movs	r2, #199	@ 0xc7
 8113224:	4939      	ldr	r1, [pc, #228]	@ (811330c <icmp_input+0x23c>)
 8113226:	4838      	ldr	r0, [pc, #224]	@ (8113308 <icmp_input+0x238>)
 8113228:	f00a fdd8 	bl	811dddc <iprintf>
          goto icmperr;
 811322c:	e05c      	b.n	81132e8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 811322e:	687b      	ldr	r3, [r7, #4]
 8113230:	685b      	ldr	r3, [r3, #4]
 8113232:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8113234:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8113236:	4619      	mov	r1, r3
 8113238:	6878      	ldr	r0, [r7, #4]
 811323a:	f002 ffa3 	bl	8116184 <pbuf_add_header>
 811323e:	4603      	mov	r3, r0
 8113240:	2b00      	cmp	r3, #0
 8113242:	d13c      	bne.n	81132be <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8113244:	687b      	ldr	r3, [r7, #4]
 8113246:	685b      	ldr	r3, [r3, #4]
 8113248:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 811324a:	69fb      	ldr	r3, [r7, #28]
 811324c:	681a      	ldr	r2, [r3, #0]
 811324e:	68fb      	ldr	r3, [r7, #12]
 8113250:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8113252:	4b29      	ldr	r3, [pc, #164]	@ (81132f8 <icmp_input+0x228>)
 8113254:	691a      	ldr	r2, [r3, #16]
 8113256:	68fb      	ldr	r3, [r7, #12]
 8113258:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 811325a:	693b      	ldr	r3, [r7, #16]
 811325c:	2200      	movs	r2, #0
 811325e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8113260:	693b      	ldr	r3, [r7, #16]
 8113262:	885b      	ldrh	r3, [r3, #2]
 8113264:	b29b      	uxth	r3, r3
 8113266:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 811326a:	4293      	cmp	r3, r2
 811326c:	d907      	bls.n	811327e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 811326e:	693b      	ldr	r3, [r7, #16]
 8113270:	885b      	ldrh	r3, [r3, #2]
 8113272:	b29b      	uxth	r3, r3
 8113274:	3309      	adds	r3, #9
 8113276:	b29a      	uxth	r2, r3
 8113278:	693b      	ldr	r3, [r7, #16]
 811327a:	805a      	strh	r2, [r3, #2]
 811327c:	e006      	b.n	811328c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 811327e:	693b      	ldr	r3, [r7, #16]
 8113280:	885b      	ldrh	r3, [r3, #2]
 8113282:	b29b      	uxth	r3, r3
 8113284:	3308      	adds	r3, #8
 8113286:	b29a      	uxth	r2, r3
 8113288:	693b      	ldr	r3, [r7, #16]
 811328a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 811328c:	68fb      	ldr	r3, [r7, #12]
 811328e:	22ff      	movs	r2, #255	@ 0xff
 8113290:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8113292:	68fb      	ldr	r3, [r7, #12]
 8113294:	2200      	movs	r2, #0
 8113296:	729a      	strb	r2, [r3, #10]
 8113298:	2200      	movs	r2, #0
 811329a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 811329c:	683b      	ldr	r3, [r7, #0]
 811329e:	9302      	str	r3, [sp, #8]
 81132a0:	2301      	movs	r3, #1
 81132a2:	9301      	str	r3, [sp, #4]
 81132a4:	2300      	movs	r3, #0
 81132a6:	9300      	str	r3, [sp, #0]
 81132a8:	23ff      	movs	r3, #255	@ 0xff
 81132aa:	2200      	movs	r2, #0
 81132ac:	69f9      	ldr	r1, [r7, #28]
 81132ae:	6878      	ldr	r0, [r7, #4]
 81132b0:	f000 fb54 	bl	811395c <ip4_output_if>
 81132b4:	4603      	mov	r3, r0
 81132b6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 81132b8:	e001      	b.n	81132be <icmp_input+0x1ee>
      break;
 81132ba:	bf00      	nop
 81132bc:	e000      	b.n	81132c0 <icmp_input+0x1f0>
      break;
 81132be:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 81132c0:	6878      	ldr	r0, [r7, #4]
 81132c2:	f002 fff5 	bl	81162b0 <pbuf_free>
  return;
 81132c6:	e013      	b.n	81132f0 <icmp_input+0x220>
    goto lenerr;
 81132c8:	bf00      	nop
 81132ca:	e002      	b.n	81132d2 <icmp_input+0x202>
    goto lenerr;
 81132cc:	bf00      	nop
 81132ce:	e000      	b.n	81132d2 <icmp_input+0x202>
        goto lenerr;
 81132d0:	bf00      	nop
lenerr:
  pbuf_free(p);
 81132d2:	6878      	ldr	r0, [r7, #4]
 81132d4:	f002 ffec 	bl	81162b0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 81132d8:	e00a      	b.n	81132f0 <icmp_input+0x220>
        goto icmperr;
 81132da:	bf00      	nop
 81132dc:	e004      	b.n	81132e8 <icmp_input+0x218>
        goto icmperr;
 81132de:	bf00      	nop
 81132e0:	e002      	b.n	81132e8 <icmp_input+0x218>
          goto icmperr;
 81132e2:	bf00      	nop
 81132e4:	e000      	b.n	81132e8 <icmp_input+0x218>
          goto icmperr;
 81132e6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 81132e8:	6878      	ldr	r0, [r7, #4]
 81132ea:	f002 ffe1 	bl	81162b0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 81132ee:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 81132f0:	3728      	adds	r7, #40	@ 0x28
 81132f2:	46bd      	mov	sp, r7
 81132f4:	bd80      	pop	{r7, pc}
 81132f6:	bf00      	nop
 81132f8:	1000b29c 	.word	0x1000b29c
 81132fc:	1000b2b0 	.word	0x1000b2b0
 8113300:	0811f8a0 	.word	0x0811f8a0
 8113304:	0811f914 	.word	0x0811f914
 8113308:	0811f94c 	.word	0x0811f94c
 811330c:	0811f974 	.word	0x0811f974

08113310 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8113310:	b580      	push	{r7, lr}
 8113312:	b082      	sub	sp, #8
 8113314:	af00      	add	r7, sp, #0
 8113316:	6078      	str	r0, [r7, #4]
 8113318:	460b      	mov	r3, r1
 811331a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 811331c:	78fb      	ldrb	r3, [r7, #3]
 811331e:	461a      	mov	r2, r3
 8113320:	2103      	movs	r1, #3
 8113322:	6878      	ldr	r0, [r7, #4]
 8113324:	f000 f814 	bl	8113350 <icmp_send_response>
}
 8113328:	bf00      	nop
 811332a:	3708      	adds	r7, #8
 811332c:	46bd      	mov	sp, r7
 811332e:	bd80      	pop	{r7, pc}

08113330 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8113330:	b580      	push	{r7, lr}
 8113332:	b082      	sub	sp, #8
 8113334:	af00      	add	r7, sp, #0
 8113336:	6078      	str	r0, [r7, #4]
 8113338:	460b      	mov	r3, r1
 811333a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 811333c:	78fb      	ldrb	r3, [r7, #3]
 811333e:	461a      	mov	r2, r3
 8113340:	210b      	movs	r1, #11
 8113342:	6878      	ldr	r0, [r7, #4]
 8113344:	f000 f804 	bl	8113350 <icmp_send_response>
}
 8113348:	bf00      	nop
 811334a:	3708      	adds	r7, #8
 811334c:	46bd      	mov	sp, r7
 811334e:	bd80      	pop	{r7, pc}

08113350 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8113350:	b580      	push	{r7, lr}
 8113352:	b08c      	sub	sp, #48	@ 0x30
 8113354:	af04      	add	r7, sp, #16
 8113356:	6078      	str	r0, [r7, #4]
 8113358:	460b      	mov	r3, r1
 811335a:	70fb      	strb	r3, [r7, #3]
 811335c:	4613      	mov	r3, r2
 811335e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8113360:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8113364:	2124      	movs	r1, #36	@ 0x24
 8113366:	2022      	movs	r0, #34	@ 0x22
 8113368:	f002 fcbe 	bl	8115ce8 <pbuf_alloc>
 811336c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 811336e:	69fb      	ldr	r3, [r7, #28]
 8113370:	2b00      	cmp	r3, #0
 8113372:	d056      	beq.n	8113422 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8113374:	69fb      	ldr	r3, [r7, #28]
 8113376:	895b      	ldrh	r3, [r3, #10]
 8113378:	2b23      	cmp	r3, #35	@ 0x23
 811337a:	d806      	bhi.n	811338a <icmp_send_response+0x3a>
 811337c:	4b2b      	ldr	r3, [pc, #172]	@ (811342c <icmp_send_response+0xdc>)
 811337e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8113382:	492b      	ldr	r1, [pc, #172]	@ (8113430 <icmp_send_response+0xe0>)
 8113384:	482b      	ldr	r0, [pc, #172]	@ (8113434 <icmp_send_response+0xe4>)
 8113386:	f00a fd29 	bl	811dddc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 811338a:	687b      	ldr	r3, [r7, #4]
 811338c:	685b      	ldr	r3, [r3, #4]
 811338e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8113390:	69fb      	ldr	r3, [r7, #28]
 8113392:	685b      	ldr	r3, [r3, #4]
 8113394:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8113396:	697b      	ldr	r3, [r7, #20]
 8113398:	78fa      	ldrb	r2, [r7, #3]
 811339a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 811339c:	697b      	ldr	r3, [r7, #20]
 811339e:	78ba      	ldrb	r2, [r7, #2]
 81133a0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 81133a2:	697b      	ldr	r3, [r7, #20]
 81133a4:	2200      	movs	r2, #0
 81133a6:	711a      	strb	r2, [r3, #4]
 81133a8:	2200      	movs	r2, #0
 81133aa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 81133ac:	697b      	ldr	r3, [r7, #20]
 81133ae:	2200      	movs	r2, #0
 81133b0:	719a      	strb	r2, [r3, #6]
 81133b2:	2200      	movs	r2, #0
 81133b4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 81133b6:	69fb      	ldr	r3, [r7, #28]
 81133b8:	685b      	ldr	r3, [r3, #4]
 81133ba:	f103 0008 	add.w	r0, r3, #8
 81133be:	687b      	ldr	r3, [r7, #4]
 81133c0:	685b      	ldr	r3, [r3, #4]
 81133c2:	221c      	movs	r2, #28
 81133c4:	4619      	mov	r1, r3
 81133c6:	f00a ff98 	bl	811e2fa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 81133ca:	69bb      	ldr	r3, [r7, #24]
 81133cc:	68db      	ldr	r3, [r3, #12]
 81133ce:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 81133d0:	f107 030c 	add.w	r3, r7, #12
 81133d4:	4618      	mov	r0, r3
 81133d6:	f000 f903 	bl	81135e0 <ip4_route>
 81133da:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 81133dc:	693b      	ldr	r3, [r7, #16]
 81133de:	2b00      	cmp	r3, #0
 81133e0:	d01b      	beq.n	811341a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 81133e2:	697b      	ldr	r3, [r7, #20]
 81133e4:	2200      	movs	r2, #0
 81133e6:	709a      	strb	r2, [r3, #2]
 81133e8:	2200      	movs	r2, #0
 81133ea:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 81133ec:	69fb      	ldr	r3, [r7, #28]
 81133ee:	895b      	ldrh	r3, [r3, #10]
 81133f0:	4619      	mov	r1, r3
 81133f2:	6978      	ldr	r0, [r7, #20]
 81133f4:	f000 f87d 	bl	81134f2 <inet_chksum>
 81133f8:	4603      	mov	r3, r0
 81133fa:	461a      	mov	r2, r3
 81133fc:	697b      	ldr	r3, [r7, #20]
 81133fe:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8113400:	f107 020c 	add.w	r2, r7, #12
 8113404:	693b      	ldr	r3, [r7, #16]
 8113406:	9302      	str	r3, [sp, #8]
 8113408:	2301      	movs	r3, #1
 811340a:	9301      	str	r3, [sp, #4]
 811340c:	2300      	movs	r3, #0
 811340e:	9300      	str	r3, [sp, #0]
 8113410:	23ff      	movs	r3, #255	@ 0xff
 8113412:	2100      	movs	r1, #0
 8113414:	69f8      	ldr	r0, [r7, #28]
 8113416:	f000 faa1 	bl	811395c <ip4_output_if>
  }
  pbuf_free(q);
 811341a:	69f8      	ldr	r0, [r7, #28]
 811341c:	f002 ff48 	bl	81162b0 <pbuf_free>
 8113420:	e000      	b.n	8113424 <icmp_send_response+0xd4>
    return;
 8113422:	bf00      	nop
}
 8113424:	3720      	adds	r7, #32
 8113426:	46bd      	mov	sp, r7
 8113428:	bd80      	pop	{r7, pc}
 811342a:	bf00      	nop
 811342c:	0811f8a0 	.word	0x0811f8a0
 8113430:	0811f9a8 	.word	0x0811f9a8
 8113434:	0811f94c 	.word	0x0811f94c

08113438 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8113438:	b480      	push	{r7}
 811343a:	b089      	sub	sp, #36	@ 0x24
 811343c:	af00      	add	r7, sp, #0
 811343e:	6078      	str	r0, [r7, #4]
 8113440:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8113442:	687b      	ldr	r3, [r7, #4]
 8113444:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8113446:	2300      	movs	r3, #0
 8113448:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 811344a:	2300      	movs	r3, #0
 811344c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 811344e:	69fb      	ldr	r3, [r7, #28]
 8113450:	f003 0301 	and.w	r3, r3, #1
 8113454:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8113456:	693b      	ldr	r3, [r7, #16]
 8113458:	2b00      	cmp	r3, #0
 811345a:	d00d      	beq.n	8113478 <lwip_standard_chksum+0x40>
 811345c:	683b      	ldr	r3, [r7, #0]
 811345e:	2b00      	cmp	r3, #0
 8113460:	dd0a      	ble.n	8113478 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8113462:	69fa      	ldr	r2, [r7, #28]
 8113464:	1c53      	adds	r3, r2, #1
 8113466:	61fb      	str	r3, [r7, #28]
 8113468:	f107 030e 	add.w	r3, r7, #14
 811346c:	3301      	adds	r3, #1
 811346e:	7812      	ldrb	r2, [r2, #0]
 8113470:	701a      	strb	r2, [r3, #0]
    len--;
 8113472:	683b      	ldr	r3, [r7, #0]
 8113474:	3b01      	subs	r3, #1
 8113476:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8113478:	69fb      	ldr	r3, [r7, #28]
 811347a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 811347c:	e00a      	b.n	8113494 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 811347e:	69bb      	ldr	r3, [r7, #24]
 8113480:	1c9a      	adds	r2, r3, #2
 8113482:	61ba      	str	r2, [r7, #24]
 8113484:	881b      	ldrh	r3, [r3, #0]
 8113486:	461a      	mov	r2, r3
 8113488:	697b      	ldr	r3, [r7, #20]
 811348a:	4413      	add	r3, r2
 811348c:	617b      	str	r3, [r7, #20]
    len -= 2;
 811348e:	683b      	ldr	r3, [r7, #0]
 8113490:	3b02      	subs	r3, #2
 8113492:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8113494:	683b      	ldr	r3, [r7, #0]
 8113496:	2b01      	cmp	r3, #1
 8113498:	dcf1      	bgt.n	811347e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 811349a:	683b      	ldr	r3, [r7, #0]
 811349c:	2b00      	cmp	r3, #0
 811349e:	dd04      	ble.n	81134aa <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 81134a0:	f107 030e 	add.w	r3, r7, #14
 81134a4:	69ba      	ldr	r2, [r7, #24]
 81134a6:	7812      	ldrb	r2, [r2, #0]
 81134a8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 81134aa:	89fb      	ldrh	r3, [r7, #14]
 81134ac:	461a      	mov	r2, r3
 81134ae:	697b      	ldr	r3, [r7, #20]
 81134b0:	4413      	add	r3, r2
 81134b2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 81134b4:	697b      	ldr	r3, [r7, #20]
 81134b6:	0c1a      	lsrs	r2, r3, #16
 81134b8:	697b      	ldr	r3, [r7, #20]
 81134ba:	b29b      	uxth	r3, r3
 81134bc:	4413      	add	r3, r2
 81134be:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 81134c0:	697b      	ldr	r3, [r7, #20]
 81134c2:	0c1a      	lsrs	r2, r3, #16
 81134c4:	697b      	ldr	r3, [r7, #20]
 81134c6:	b29b      	uxth	r3, r3
 81134c8:	4413      	add	r3, r2
 81134ca:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 81134cc:	693b      	ldr	r3, [r7, #16]
 81134ce:	2b00      	cmp	r3, #0
 81134d0:	d007      	beq.n	81134e2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 81134d2:	697b      	ldr	r3, [r7, #20]
 81134d4:	021b      	lsls	r3, r3, #8
 81134d6:	b29a      	uxth	r2, r3
 81134d8:	697b      	ldr	r3, [r7, #20]
 81134da:	0a1b      	lsrs	r3, r3, #8
 81134dc:	b2db      	uxtb	r3, r3
 81134de:	4313      	orrs	r3, r2
 81134e0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 81134e2:	697b      	ldr	r3, [r7, #20]
 81134e4:	b29b      	uxth	r3, r3
}
 81134e6:	4618      	mov	r0, r3
 81134e8:	3724      	adds	r7, #36	@ 0x24
 81134ea:	46bd      	mov	sp, r7
 81134ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81134f0:	4770      	bx	lr

081134f2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 81134f2:	b580      	push	{r7, lr}
 81134f4:	b082      	sub	sp, #8
 81134f6:	af00      	add	r7, sp, #0
 81134f8:	6078      	str	r0, [r7, #4]
 81134fa:	460b      	mov	r3, r1
 81134fc:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 81134fe:	887b      	ldrh	r3, [r7, #2]
 8113500:	4619      	mov	r1, r3
 8113502:	6878      	ldr	r0, [r7, #4]
 8113504:	f7ff ff98 	bl	8113438 <lwip_standard_chksum>
 8113508:	4603      	mov	r3, r0
 811350a:	43db      	mvns	r3, r3
 811350c:	b29b      	uxth	r3, r3
}
 811350e:	4618      	mov	r0, r3
 8113510:	3708      	adds	r7, #8
 8113512:	46bd      	mov	sp, r7
 8113514:	bd80      	pop	{r7, pc}

08113516 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8113516:	b580      	push	{r7, lr}
 8113518:	b086      	sub	sp, #24
 811351a:	af00      	add	r7, sp, #0
 811351c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 811351e:	2300      	movs	r3, #0
 8113520:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8113522:	2300      	movs	r3, #0
 8113524:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8113526:	687b      	ldr	r3, [r7, #4]
 8113528:	613b      	str	r3, [r7, #16]
 811352a:	e02b      	b.n	8113584 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 811352c:	693b      	ldr	r3, [r7, #16]
 811352e:	685a      	ldr	r2, [r3, #4]
 8113530:	693b      	ldr	r3, [r7, #16]
 8113532:	895b      	ldrh	r3, [r3, #10]
 8113534:	4619      	mov	r1, r3
 8113536:	4610      	mov	r0, r2
 8113538:	f7ff ff7e 	bl	8113438 <lwip_standard_chksum>
 811353c:	4603      	mov	r3, r0
 811353e:	461a      	mov	r2, r3
 8113540:	697b      	ldr	r3, [r7, #20]
 8113542:	4413      	add	r3, r2
 8113544:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8113546:	697b      	ldr	r3, [r7, #20]
 8113548:	0c1a      	lsrs	r2, r3, #16
 811354a:	697b      	ldr	r3, [r7, #20]
 811354c:	b29b      	uxth	r3, r3
 811354e:	4413      	add	r3, r2
 8113550:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8113552:	693b      	ldr	r3, [r7, #16]
 8113554:	895b      	ldrh	r3, [r3, #10]
 8113556:	f003 0301 	and.w	r3, r3, #1
 811355a:	b29b      	uxth	r3, r3
 811355c:	2b00      	cmp	r3, #0
 811355e:	d00e      	beq.n	811357e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8113560:	68fb      	ldr	r3, [r7, #12]
 8113562:	2b00      	cmp	r3, #0
 8113564:	bf0c      	ite	eq
 8113566:	2301      	moveq	r3, #1
 8113568:	2300      	movne	r3, #0
 811356a:	b2db      	uxtb	r3, r3
 811356c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 811356e:	697b      	ldr	r3, [r7, #20]
 8113570:	021b      	lsls	r3, r3, #8
 8113572:	b29a      	uxth	r2, r3
 8113574:	697b      	ldr	r3, [r7, #20]
 8113576:	0a1b      	lsrs	r3, r3, #8
 8113578:	b2db      	uxtb	r3, r3
 811357a:	4313      	orrs	r3, r2
 811357c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 811357e:	693b      	ldr	r3, [r7, #16]
 8113580:	681b      	ldr	r3, [r3, #0]
 8113582:	613b      	str	r3, [r7, #16]
 8113584:	693b      	ldr	r3, [r7, #16]
 8113586:	2b00      	cmp	r3, #0
 8113588:	d1d0      	bne.n	811352c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 811358a:	68fb      	ldr	r3, [r7, #12]
 811358c:	2b00      	cmp	r3, #0
 811358e:	d007      	beq.n	81135a0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8113590:	697b      	ldr	r3, [r7, #20]
 8113592:	021b      	lsls	r3, r3, #8
 8113594:	b29a      	uxth	r2, r3
 8113596:	697b      	ldr	r3, [r7, #20]
 8113598:	0a1b      	lsrs	r3, r3, #8
 811359a:	b2db      	uxtb	r3, r3
 811359c:	4313      	orrs	r3, r2
 811359e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 81135a0:	697b      	ldr	r3, [r7, #20]
 81135a2:	b29b      	uxth	r3, r3
 81135a4:	43db      	mvns	r3, r3
 81135a6:	b29b      	uxth	r3, r3
}
 81135a8:	4618      	mov	r0, r3
 81135aa:	3718      	adds	r7, #24
 81135ac:	46bd      	mov	sp, r7
 81135ae:	bd80      	pop	{r7, pc}

081135b0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 81135b0:	b580      	push	{r7, lr}
 81135b2:	b082      	sub	sp, #8
 81135b4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 81135b6:	2300      	movs	r3, #0
 81135b8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 81135ba:	f003 f999 	bl	81168f0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 81135be:	f001 fba3 	bl	8114d08 <mem_init>
  memp_init();
 81135c2:	f001 feed 	bl	81153a0 <memp_init>
  pbuf_init();
  netif_init();
 81135c6:	f001 fff9 	bl	81155bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 81135ca:	f009 f80d 	bl	811c5e8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 81135ce:	f003 fa0b 	bl	81169e8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 81135d2:	f008 ff4f 	bl	811c474 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 81135d6:	bf00      	nop
 81135d8:	3708      	adds	r7, #8
 81135da:	46bd      	mov	sp, r7
 81135dc:	bd80      	pop	{r7, pc}
	...

081135e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 81135e0:	b480      	push	{r7}
 81135e2:	b085      	sub	sp, #20
 81135e4:	af00      	add	r7, sp, #0
 81135e6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 81135e8:	4b33      	ldr	r3, [pc, #204]	@ (81136b8 <ip4_route+0xd8>)
 81135ea:	681b      	ldr	r3, [r3, #0]
 81135ec:	60fb      	str	r3, [r7, #12]
 81135ee:	e036      	b.n	811365e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 81135f0:	68fb      	ldr	r3, [r7, #12]
 81135f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81135f6:	f003 0301 	and.w	r3, r3, #1
 81135fa:	b2db      	uxtb	r3, r3
 81135fc:	2b00      	cmp	r3, #0
 81135fe:	d02b      	beq.n	8113658 <ip4_route+0x78>
 8113600:	68fb      	ldr	r3, [r7, #12]
 8113602:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8113606:	089b      	lsrs	r3, r3, #2
 8113608:	f003 0301 	and.w	r3, r3, #1
 811360c:	b2db      	uxtb	r3, r3
 811360e:	2b00      	cmp	r3, #0
 8113610:	d022      	beq.n	8113658 <ip4_route+0x78>
 8113612:	68fb      	ldr	r3, [r7, #12]
 8113614:	3304      	adds	r3, #4
 8113616:	681b      	ldr	r3, [r3, #0]
 8113618:	2b00      	cmp	r3, #0
 811361a:	d01d      	beq.n	8113658 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 811361c:	687b      	ldr	r3, [r7, #4]
 811361e:	681a      	ldr	r2, [r3, #0]
 8113620:	68fb      	ldr	r3, [r7, #12]
 8113622:	3304      	adds	r3, #4
 8113624:	681b      	ldr	r3, [r3, #0]
 8113626:	405a      	eors	r2, r3
 8113628:	68fb      	ldr	r3, [r7, #12]
 811362a:	3308      	adds	r3, #8
 811362c:	681b      	ldr	r3, [r3, #0]
 811362e:	4013      	ands	r3, r2
 8113630:	2b00      	cmp	r3, #0
 8113632:	d101      	bne.n	8113638 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8113634:	68fb      	ldr	r3, [r7, #12]
 8113636:	e038      	b.n	81136aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8113638:	68fb      	ldr	r3, [r7, #12]
 811363a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811363e:	f003 0302 	and.w	r3, r3, #2
 8113642:	2b00      	cmp	r3, #0
 8113644:	d108      	bne.n	8113658 <ip4_route+0x78>
 8113646:	687b      	ldr	r3, [r7, #4]
 8113648:	681a      	ldr	r2, [r3, #0]
 811364a:	68fb      	ldr	r3, [r7, #12]
 811364c:	330c      	adds	r3, #12
 811364e:	681b      	ldr	r3, [r3, #0]
 8113650:	429a      	cmp	r2, r3
 8113652:	d101      	bne.n	8113658 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8113654:	68fb      	ldr	r3, [r7, #12]
 8113656:	e028      	b.n	81136aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8113658:	68fb      	ldr	r3, [r7, #12]
 811365a:	681b      	ldr	r3, [r3, #0]
 811365c:	60fb      	str	r3, [r7, #12]
 811365e:	68fb      	ldr	r3, [r7, #12]
 8113660:	2b00      	cmp	r3, #0
 8113662:	d1c5      	bne.n	81135f0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8113664:	4b15      	ldr	r3, [pc, #84]	@ (81136bc <ip4_route+0xdc>)
 8113666:	681b      	ldr	r3, [r3, #0]
 8113668:	2b00      	cmp	r3, #0
 811366a:	d01a      	beq.n	81136a2 <ip4_route+0xc2>
 811366c:	4b13      	ldr	r3, [pc, #76]	@ (81136bc <ip4_route+0xdc>)
 811366e:	681b      	ldr	r3, [r3, #0]
 8113670:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8113674:	f003 0301 	and.w	r3, r3, #1
 8113678:	2b00      	cmp	r3, #0
 811367a:	d012      	beq.n	81136a2 <ip4_route+0xc2>
 811367c:	4b0f      	ldr	r3, [pc, #60]	@ (81136bc <ip4_route+0xdc>)
 811367e:	681b      	ldr	r3, [r3, #0]
 8113680:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8113684:	f003 0304 	and.w	r3, r3, #4
 8113688:	2b00      	cmp	r3, #0
 811368a:	d00a      	beq.n	81136a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 811368c:	4b0b      	ldr	r3, [pc, #44]	@ (81136bc <ip4_route+0xdc>)
 811368e:	681b      	ldr	r3, [r3, #0]
 8113690:	3304      	adds	r3, #4
 8113692:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8113694:	2b00      	cmp	r3, #0
 8113696:	d004      	beq.n	81136a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8113698:	687b      	ldr	r3, [r7, #4]
 811369a:	681b      	ldr	r3, [r3, #0]
 811369c:	b2db      	uxtb	r3, r3
 811369e:	2b7f      	cmp	r3, #127	@ 0x7f
 81136a0:	d101      	bne.n	81136a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 81136a2:	2300      	movs	r3, #0
 81136a4:	e001      	b.n	81136aa <ip4_route+0xca>
  }

  return netif_default;
 81136a6:	4b05      	ldr	r3, [pc, #20]	@ (81136bc <ip4_route+0xdc>)
 81136a8:	681b      	ldr	r3, [r3, #0]
}
 81136aa:	4618      	mov	r0, r3
 81136ac:	3714      	adds	r7, #20
 81136ae:	46bd      	mov	sp, r7
 81136b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81136b4:	4770      	bx	lr
 81136b6:	bf00      	nop
 81136b8:	10012118 	.word	0x10012118
 81136bc:	1001211c 	.word	0x1001211c

081136c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 81136c0:	b580      	push	{r7, lr}
 81136c2:	b082      	sub	sp, #8
 81136c4:	af00      	add	r7, sp, #0
 81136c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 81136c8:	687b      	ldr	r3, [r7, #4]
 81136ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81136ce:	f003 0301 	and.w	r3, r3, #1
 81136d2:	b2db      	uxtb	r3, r3
 81136d4:	2b00      	cmp	r3, #0
 81136d6:	d016      	beq.n	8113706 <ip4_input_accept+0x46>
 81136d8:	687b      	ldr	r3, [r7, #4]
 81136da:	3304      	adds	r3, #4
 81136dc:	681b      	ldr	r3, [r3, #0]
 81136de:	2b00      	cmp	r3, #0
 81136e0:	d011      	beq.n	8113706 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 81136e2:	4b0b      	ldr	r3, [pc, #44]	@ (8113710 <ip4_input_accept+0x50>)
 81136e4:	695a      	ldr	r2, [r3, #20]
 81136e6:	687b      	ldr	r3, [r7, #4]
 81136e8:	3304      	adds	r3, #4
 81136ea:	681b      	ldr	r3, [r3, #0]
 81136ec:	429a      	cmp	r2, r3
 81136ee:	d008      	beq.n	8113702 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 81136f0:	4b07      	ldr	r3, [pc, #28]	@ (8113710 <ip4_input_accept+0x50>)
 81136f2:	695b      	ldr	r3, [r3, #20]
 81136f4:	6879      	ldr	r1, [r7, #4]
 81136f6:	4618      	mov	r0, r3
 81136f8:	f000 fa08 	bl	8113b0c <ip4_addr_isbroadcast_u32>
 81136fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 81136fe:	2b00      	cmp	r3, #0
 8113700:	d001      	beq.n	8113706 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8113702:	2301      	movs	r3, #1
 8113704:	e000      	b.n	8113708 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8113706:	2300      	movs	r3, #0
}
 8113708:	4618      	mov	r0, r3
 811370a:	3708      	adds	r7, #8
 811370c:	46bd      	mov	sp, r7
 811370e:	bd80      	pop	{r7, pc}
 8113710:	1000b29c 	.word	0x1000b29c

08113714 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8113714:	b580      	push	{r7, lr}
 8113716:	b086      	sub	sp, #24
 8113718:	af00      	add	r7, sp, #0
 811371a:	6078      	str	r0, [r7, #4]
 811371c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 811371e:	687b      	ldr	r3, [r7, #4]
 8113720:	685b      	ldr	r3, [r3, #4]
 8113722:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8113724:	697b      	ldr	r3, [r7, #20]
 8113726:	781b      	ldrb	r3, [r3, #0]
 8113728:	091b      	lsrs	r3, r3, #4
 811372a:	b2db      	uxtb	r3, r3
 811372c:	2b04      	cmp	r3, #4
 811372e:	d004      	beq.n	811373a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8113730:	6878      	ldr	r0, [r7, #4]
 8113732:	f002 fdbd 	bl	81162b0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8113736:	2300      	movs	r3, #0
 8113738:	e107      	b.n	811394a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 811373a:	697b      	ldr	r3, [r7, #20]
 811373c:	781b      	ldrb	r3, [r3, #0]
 811373e:	f003 030f 	and.w	r3, r3, #15
 8113742:	b2db      	uxtb	r3, r3
 8113744:	009b      	lsls	r3, r3, #2
 8113746:	b2db      	uxtb	r3, r3
 8113748:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 811374a:	697b      	ldr	r3, [r7, #20]
 811374c:	885b      	ldrh	r3, [r3, #2]
 811374e:	b29b      	uxth	r3, r3
 8113750:	4618      	mov	r0, r3
 8113752:	f7fe fba3 	bl	8111e9c <lwip_htons>
 8113756:	4603      	mov	r3, r0
 8113758:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 811375a:	687b      	ldr	r3, [r7, #4]
 811375c:	891b      	ldrh	r3, [r3, #8]
 811375e:	89ba      	ldrh	r2, [r7, #12]
 8113760:	429a      	cmp	r2, r3
 8113762:	d204      	bcs.n	811376e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8113764:	89bb      	ldrh	r3, [r7, #12]
 8113766:	4619      	mov	r1, r3
 8113768:	6878      	ldr	r0, [r7, #4]
 811376a:	f002 fc1d 	bl	8115fa8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 811376e:	687b      	ldr	r3, [r7, #4]
 8113770:	895b      	ldrh	r3, [r3, #10]
 8113772:	89fa      	ldrh	r2, [r7, #14]
 8113774:	429a      	cmp	r2, r3
 8113776:	d807      	bhi.n	8113788 <ip4_input+0x74>
 8113778:	687b      	ldr	r3, [r7, #4]
 811377a:	891b      	ldrh	r3, [r3, #8]
 811377c:	89ba      	ldrh	r2, [r7, #12]
 811377e:	429a      	cmp	r2, r3
 8113780:	d802      	bhi.n	8113788 <ip4_input+0x74>
 8113782:	89fb      	ldrh	r3, [r7, #14]
 8113784:	2b13      	cmp	r3, #19
 8113786:	d804      	bhi.n	8113792 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8113788:	6878      	ldr	r0, [r7, #4]
 811378a:	f002 fd91 	bl	81162b0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 811378e:	2300      	movs	r3, #0
 8113790:	e0db      	b.n	811394a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8113792:	697b      	ldr	r3, [r7, #20]
 8113794:	691b      	ldr	r3, [r3, #16]
 8113796:	4a6f      	ldr	r2, [pc, #444]	@ (8113954 <ip4_input+0x240>)
 8113798:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 811379a:	697b      	ldr	r3, [r7, #20]
 811379c:	68db      	ldr	r3, [r3, #12]
 811379e:	4a6d      	ldr	r2, [pc, #436]	@ (8113954 <ip4_input+0x240>)
 81137a0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 81137a2:	4b6c      	ldr	r3, [pc, #432]	@ (8113954 <ip4_input+0x240>)
 81137a4:	695b      	ldr	r3, [r3, #20]
 81137a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81137aa:	2be0      	cmp	r3, #224	@ 0xe0
 81137ac:	d112      	bne.n	81137d4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 81137ae:	683b      	ldr	r3, [r7, #0]
 81137b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81137b4:	f003 0301 	and.w	r3, r3, #1
 81137b8:	b2db      	uxtb	r3, r3
 81137ba:	2b00      	cmp	r3, #0
 81137bc:	d007      	beq.n	81137ce <ip4_input+0xba>
 81137be:	683b      	ldr	r3, [r7, #0]
 81137c0:	3304      	adds	r3, #4
 81137c2:	681b      	ldr	r3, [r3, #0]
 81137c4:	2b00      	cmp	r3, #0
 81137c6:	d002      	beq.n	81137ce <ip4_input+0xba>
      netif = inp;
 81137c8:	683b      	ldr	r3, [r7, #0]
 81137ca:	613b      	str	r3, [r7, #16]
 81137cc:	e02a      	b.n	8113824 <ip4_input+0x110>
    } else {
      netif = NULL;
 81137ce:	2300      	movs	r3, #0
 81137d0:	613b      	str	r3, [r7, #16]
 81137d2:	e027      	b.n	8113824 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 81137d4:	6838      	ldr	r0, [r7, #0]
 81137d6:	f7ff ff73 	bl	81136c0 <ip4_input_accept>
 81137da:	4603      	mov	r3, r0
 81137dc:	2b00      	cmp	r3, #0
 81137de:	d002      	beq.n	81137e6 <ip4_input+0xd2>
      netif = inp;
 81137e0:	683b      	ldr	r3, [r7, #0]
 81137e2:	613b      	str	r3, [r7, #16]
 81137e4:	e01e      	b.n	8113824 <ip4_input+0x110>
    } else {
      netif = NULL;
 81137e6:	2300      	movs	r3, #0
 81137e8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 81137ea:	4b5a      	ldr	r3, [pc, #360]	@ (8113954 <ip4_input+0x240>)
 81137ec:	695b      	ldr	r3, [r3, #20]
 81137ee:	b2db      	uxtb	r3, r3
 81137f0:	2b7f      	cmp	r3, #127	@ 0x7f
 81137f2:	d017      	beq.n	8113824 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 81137f4:	4b58      	ldr	r3, [pc, #352]	@ (8113958 <ip4_input+0x244>)
 81137f6:	681b      	ldr	r3, [r3, #0]
 81137f8:	613b      	str	r3, [r7, #16]
 81137fa:	e00e      	b.n	811381a <ip4_input+0x106>
          if (netif == inp) {
 81137fc:	693a      	ldr	r2, [r7, #16]
 81137fe:	683b      	ldr	r3, [r7, #0]
 8113800:	429a      	cmp	r2, r3
 8113802:	d006      	beq.n	8113812 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8113804:	6938      	ldr	r0, [r7, #16]
 8113806:	f7ff ff5b 	bl	81136c0 <ip4_input_accept>
 811380a:	4603      	mov	r3, r0
 811380c:	2b00      	cmp	r3, #0
 811380e:	d108      	bne.n	8113822 <ip4_input+0x10e>
 8113810:	e000      	b.n	8113814 <ip4_input+0x100>
            continue;
 8113812:	bf00      	nop
        NETIF_FOREACH(netif) {
 8113814:	693b      	ldr	r3, [r7, #16]
 8113816:	681b      	ldr	r3, [r3, #0]
 8113818:	613b      	str	r3, [r7, #16]
 811381a:	693b      	ldr	r3, [r7, #16]
 811381c:	2b00      	cmp	r3, #0
 811381e:	d1ed      	bne.n	81137fc <ip4_input+0xe8>
 8113820:	e000      	b.n	8113824 <ip4_input+0x110>
            break;
 8113822:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8113824:	4b4b      	ldr	r3, [pc, #300]	@ (8113954 <ip4_input+0x240>)
 8113826:	691b      	ldr	r3, [r3, #16]
 8113828:	6839      	ldr	r1, [r7, #0]
 811382a:	4618      	mov	r0, r3
 811382c:	f000 f96e 	bl	8113b0c <ip4_addr_isbroadcast_u32>
 8113830:	4603      	mov	r3, r0
 8113832:	2b00      	cmp	r3, #0
 8113834:	d105      	bne.n	8113842 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8113836:	4b47      	ldr	r3, [pc, #284]	@ (8113954 <ip4_input+0x240>)
 8113838:	691b      	ldr	r3, [r3, #16]
 811383a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 811383e:	2be0      	cmp	r3, #224	@ 0xe0
 8113840:	d104      	bne.n	811384c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8113842:	6878      	ldr	r0, [r7, #4]
 8113844:	f002 fd34 	bl	81162b0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8113848:	2300      	movs	r3, #0
 811384a:	e07e      	b.n	811394a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 811384c:	693b      	ldr	r3, [r7, #16]
 811384e:	2b00      	cmp	r3, #0
 8113850:	d104      	bne.n	811385c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8113852:	6878      	ldr	r0, [r7, #4]
 8113854:	f002 fd2c 	bl	81162b0 <pbuf_free>
    return ERR_OK;
 8113858:	2300      	movs	r3, #0
 811385a:	e076      	b.n	811394a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 811385c:	697b      	ldr	r3, [r7, #20]
 811385e:	88db      	ldrh	r3, [r3, #6]
 8113860:	b29b      	uxth	r3, r3
 8113862:	461a      	mov	r2, r3
 8113864:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8113868:	4013      	ands	r3, r2
 811386a:	2b00      	cmp	r3, #0
 811386c:	d00b      	beq.n	8113886 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 811386e:	6878      	ldr	r0, [r7, #4]
 8113870:	f000 fe4c 	bl	811450c <ip4_reass>
 8113874:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8113876:	687b      	ldr	r3, [r7, #4]
 8113878:	2b00      	cmp	r3, #0
 811387a:	d101      	bne.n	8113880 <ip4_input+0x16c>
      return ERR_OK;
 811387c:	2300      	movs	r3, #0
 811387e:	e064      	b.n	811394a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8113880:	687b      	ldr	r3, [r7, #4]
 8113882:	685b      	ldr	r3, [r3, #4]
 8113884:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8113886:	4a33      	ldr	r2, [pc, #204]	@ (8113954 <ip4_input+0x240>)
 8113888:	693b      	ldr	r3, [r7, #16]
 811388a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 811388c:	4a31      	ldr	r2, [pc, #196]	@ (8113954 <ip4_input+0x240>)
 811388e:	683b      	ldr	r3, [r7, #0]
 8113890:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8113892:	4a30      	ldr	r2, [pc, #192]	@ (8113954 <ip4_input+0x240>)
 8113894:	697b      	ldr	r3, [r7, #20]
 8113896:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8113898:	697b      	ldr	r3, [r7, #20]
 811389a:	781b      	ldrb	r3, [r3, #0]
 811389c:	f003 030f 	and.w	r3, r3, #15
 81138a0:	b2db      	uxtb	r3, r3
 81138a2:	009b      	lsls	r3, r3, #2
 81138a4:	b2db      	uxtb	r3, r3
 81138a6:	461a      	mov	r2, r3
 81138a8:	4b2a      	ldr	r3, [pc, #168]	@ (8113954 <ip4_input+0x240>)
 81138aa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 81138ac:	89fb      	ldrh	r3, [r7, #14]
 81138ae:	4619      	mov	r1, r3
 81138b0:	6878      	ldr	r0, [r7, #4]
 81138b2:	f002 fc77 	bl	81161a4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 81138b6:	697b      	ldr	r3, [r7, #20]
 81138b8:	7a5b      	ldrb	r3, [r3, #9]
 81138ba:	2b11      	cmp	r3, #17
 81138bc:	d006      	beq.n	81138cc <ip4_input+0x1b8>
 81138be:	2b11      	cmp	r3, #17
 81138c0:	dc13      	bgt.n	81138ea <ip4_input+0x1d6>
 81138c2:	2b01      	cmp	r3, #1
 81138c4:	d00c      	beq.n	81138e0 <ip4_input+0x1cc>
 81138c6:	2b06      	cmp	r3, #6
 81138c8:	d005      	beq.n	81138d6 <ip4_input+0x1c2>
 81138ca:	e00e      	b.n	81138ea <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 81138cc:	6839      	ldr	r1, [r7, #0]
 81138ce:	6878      	ldr	r0, [r7, #4]
 81138d0:	f008 ff38 	bl	811c744 <udp_input>
        break;
 81138d4:	e026      	b.n	8113924 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 81138d6:	6839      	ldr	r1, [r7, #0]
 81138d8:	6878      	ldr	r0, [r7, #4]
 81138da:	f004 fdef 	bl	81184bc <tcp_input>
        break;
 81138de:	e021      	b.n	8113924 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 81138e0:	6839      	ldr	r1, [r7, #0]
 81138e2:	6878      	ldr	r0, [r7, #4]
 81138e4:	f7ff fbf4 	bl	81130d0 <icmp_input>
        break;
 81138e8:	e01c      	b.n	8113924 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 81138ea:	4b1a      	ldr	r3, [pc, #104]	@ (8113954 <ip4_input+0x240>)
 81138ec:	695b      	ldr	r3, [r3, #20]
 81138ee:	6939      	ldr	r1, [r7, #16]
 81138f0:	4618      	mov	r0, r3
 81138f2:	f000 f90b 	bl	8113b0c <ip4_addr_isbroadcast_u32>
 81138f6:	4603      	mov	r3, r0
 81138f8:	2b00      	cmp	r3, #0
 81138fa:	d10f      	bne.n	811391c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 81138fc:	4b15      	ldr	r3, [pc, #84]	@ (8113954 <ip4_input+0x240>)
 81138fe:	695b      	ldr	r3, [r3, #20]
 8113900:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8113904:	2be0      	cmp	r3, #224	@ 0xe0
 8113906:	d009      	beq.n	811391c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8113908:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 811390c:	4619      	mov	r1, r3
 811390e:	6878      	ldr	r0, [r7, #4]
 8113910:	f002 fcbb 	bl	811628a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8113914:	2102      	movs	r1, #2
 8113916:	6878      	ldr	r0, [r7, #4]
 8113918:	f7ff fcfa 	bl	8113310 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 811391c:	6878      	ldr	r0, [r7, #4]
 811391e:	f002 fcc7 	bl	81162b0 <pbuf_free>
        break;
 8113922:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8113924:	4b0b      	ldr	r3, [pc, #44]	@ (8113954 <ip4_input+0x240>)
 8113926:	2200      	movs	r2, #0
 8113928:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 811392a:	4b0a      	ldr	r3, [pc, #40]	@ (8113954 <ip4_input+0x240>)
 811392c:	2200      	movs	r2, #0
 811392e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8113930:	4b08      	ldr	r3, [pc, #32]	@ (8113954 <ip4_input+0x240>)
 8113932:	2200      	movs	r2, #0
 8113934:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8113936:	4b07      	ldr	r3, [pc, #28]	@ (8113954 <ip4_input+0x240>)
 8113938:	2200      	movs	r2, #0
 811393a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 811393c:	4b05      	ldr	r3, [pc, #20]	@ (8113954 <ip4_input+0x240>)
 811393e:	2200      	movs	r2, #0
 8113940:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8113942:	4b04      	ldr	r3, [pc, #16]	@ (8113954 <ip4_input+0x240>)
 8113944:	2200      	movs	r2, #0
 8113946:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8113948:	2300      	movs	r3, #0
}
 811394a:	4618      	mov	r0, r3
 811394c:	3718      	adds	r7, #24
 811394e:	46bd      	mov	sp, r7
 8113950:	bd80      	pop	{r7, pc}
 8113952:	bf00      	nop
 8113954:	1000b29c 	.word	0x1000b29c
 8113958:	10012118 	.word	0x10012118

0811395c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 811395c:	b580      	push	{r7, lr}
 811395e:	b08a      	sub	sp, #40	@ 0x28
 8113960:	af04      	add	r7, sp, #16
 8113962:	60f8      	str	r0, [r7, #12]
 8113964:	60b9      	str	r1, [r7, #8]
 8113966:	607a      	str	r2, [r7, #4]
 8113968:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 811396a:	68bb      	ldr	r3, [r7, #8]
 811396c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 811396e:	687b      	ldr	r3, [r7, #4]
 8113970:	2b00      	cmp	r3, #0
 8113972:	d009      	beq.n	8113988 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8113974:	68bb      	ldr	r3, [r7, #8]
 8113976:	2b00      	cmp	r3, #0
 8113978:	d003      	beq.n	8113982 <ip4_output_if+0x26>
 811397a:	68bb      	ldr	r3, [r7, #8]
 811397c:	681b      	ldr	r3, [r3, #0]
 811397e:	2b00      	cmp	r3, #0
 8113980:	d102      	bne.n	8113988 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8113982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113984:	3304      	adds	r3, #4
 8113986:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8113988:	78fa      	ldrb	r2, [r7, #3]
 811398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811398c:	9302      	str	r3, [sp, #8]
 811398e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8113992:	9301      	str	r3, [sp, #4]
 8113994:	f897 3020 	ldrb.w	r3, [r7, #32]
 8113998:	9300      	str	r3, [sp, #0]
 811399a:	4613      	mov	r3, r2
 811399c:	687a      	ldr	r2, [r7, #4]
 811399e:	6979      	ldr	r1, [r7, #20]
 81139a0:	68f8      	ldr	r0, [r7, #12]
 81139a2:	f000 f805 	bl	81139b0 <ip4_output_if_src>
 81139a6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 81139a8:	4618      	mov	r0, r3
 81139aa:	3718      	adds	r7, #24
 81139ac:	46bd      	mov	sp, r7
 81139ae:	bd80      	pop	{r7, pc}

081139b0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 81139b0:	b580      	push	{r7, lr}
 81139b2:	b088      	sub	sp, #32
 81139b4:	af00      	add	r7, sp, #0
 81139b6:	60f8      	str	r0, [r7, #12]
 81139b8:	60b9      	str	r1, [r7, #8]
 81139ba:	607a      	str	r2, [r7, #4]
 81139bc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 81139be:	68fb      	ldr	r3, [r7, #12]
 81139c0:	7b9b      	ldrb	r3, [r3, #14]
 81139c2:	2b01      	cmp	r3, #1
 81139c4:	d006      	beq.n	81139d4 <ip4_output_if_src+0x24>
 81139c6:	4b4b      	ldr	r3, [pc, #300]	@ (8113af4 <ip4_output_if_src+0x144>)
 81139c8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 81139cc:	494a      	ldr	r1, [pc, #296]	@ (8113af8 <ip4_output_if_src+0x148>)
 81139ce:	484b      	ldr	r0, [pc, #300]	@ (8113afc <ip4_output_if_src+0x14c>)
 81139d0:	f00a fa04 	bl	811dddc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 81139d4:	687b      	ldr	r3, [r7, #4]
 81139d6:	2b00      	cmp	r3, #0
 81139d8:	d060      	beq.n	8113a9c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 81139da:	2314      	movs	r3, #20
 81139dc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 81139de:	2114      	movs	r1, #20
 81139e0:	68f8      	ldr	r0, [r7, #12]
 81139e2:	f002 fbcf 	bl	8116184 <pbuf_add_header>
 81139e6:	4603      	mov	r3, r0
 81139e8:	2b00      	cmp	r3, #0
 81139ea:	d002      	beq.n	81139f2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 81139ec:	f06f 0301 	mvn.w	r3, #1
 81139f0:	e07c      	b.n	8113aec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 81139f2:	68fb      	ldr	r3, [r7, #12]
 81139f4:	685b      	ldr	r3, [r3, #4]
 81139f6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 81139f8:	68fb      	ldr	r3, [r7, #12]
 81139fa:	895b      	ldrh	r3, [r3, #10]
 81139fc:	2b13      	cmp	r3, #19
 81139fe:	d806      	bhi.n	8113a0e <ip4_output_if_src+0x5e>
 8113a00:	4b3c      	ldr	r3, [pc, #240]	@ (8113af4 <ip4_output_if_src+0x144>)
 8113a02:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8113a06:	493e      	ldr	r1, [pc, #248]	@ (8113b00 <ip4_output_if_src+0x150>)
 8113a08:	483c      	ldr	r0, [pc, #240]	@ (8113afc <ip4_output_if_src+0x14c>)
 8113a0a:	f00a f9e7 	bl	811dddc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8113a0e:	69fb      	ldr	r3, [r7, #28]
 8113a10:	78fa      	ldrb	r2, [r7, #3]
 8113a12:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8113a14:	69fb      	ldr	r3, [r7, #28]
 8113a16:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8113a1a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8113a1c:	687b      	ldr	r3, [r7, #4]
 8113a1e:	681a      	ldr	r2, [r3, #0]
 8113a20:	69fb      	ldr	r3, [r7, #28]
 8113a22:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8113a24:	8b7b      	ldrh	r3, [r7, #26]
 8113a26:	089b      	lsrs	r3, r3, #2
 8113a28:	b29b      	uxth	r3, r3
 8113a2a:	b2db      	uxtb	r3, r3
 8113a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8113a30:	b2da      	uxtb	r2, r3
 8113a32:	69fb      	ldr	r3, [r7, #28]
 8113a34:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8113a36:	69fb      	ldr	r3, [r7, #28]
 8113a38:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8113a3c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8113a3e:	68fb      	ldr	r3, [r7, #12]
 8113a40:	891b      	ldrh	r3, [r3, #8]
 8113a42:	4618      	mov	r0, r3
 8113a44:	f7fe fa2a 	bl	8111e9c <lwip_htons>
 8113a48:	4603      	mov	r3, r0
 8113a4a:	461a      	mov	r2, r3
 8113a4c:	69fb      	ldr	r3, [r7, #28]
 8113a4e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8113a50:	69fb      	ldr	r3, [r7, #28]
 8113a52:	2200      	movs	r2, #0
 8113a54:	719a      	strb	r2, [r3, #6]
 8113a56:	2200      	movs	r2, #0
 8113a58:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8113a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8113b04 <ip4_output_if_src+0x154>)
 8113a5c:	881b      	ldrh	r3, [r3, #0]
 8113a5e:	4618      	mov	r0, r3
 8113a60:	f7fe fa1c 	bl	8111e9c <lwip_htons>
 8113a64:	4603      	mov	r3, r0
 8113a66:	461a      	mov	r2, r3
 8113a68:	69fb      	ldr	r3, [r7, #28]
 8113a6a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8113a6c:	4b25      	ldr	r3, [pc, #148]	@ (8113b04 <ip4_output_if_src+0x154>)
 8113a6e:	881b      	ldrh	r3, [r3, #0]
 8113a70:	3301      	adds	r3, #1
 8113a72:	b29a      	uxth	r2, r3
 8113a74:	4b23      	ldr	r3, [pc, #140]	@ (8113b04 <ip4_output_if_src+0x154>)
 8113a76:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8113a78:	68bb      	ldr	r3, [r7, #8]
 8113a7a:	2b00      	cmp	r3, #0
 8113a7c:	d104      	bne.n	8113a88 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8113a7e:	4b22      	ldr	r3, [pc, #136]	@ (8113b08 <ip4_output_if_src+0x158>)
 8113a80:	681a      	ldr	r2, [r3, #0]
 8113a82:	69fb      	ldr	r3, [r7, #28]
 8113a84:	60da      	str	r2, [r3, #12]
 8113a86:	e003      	b.n	8113a90 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8113a88:	68bb      	ldr	r3, [r7, #8]
 8113a8a:	681a      	ldr	r2, [r3, #0]
 8113a8c:	69fb      	ldr	r3, [r7, #28]
 8113a8e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8113a90:	69fb      	ldr	r3, [r7, #28]
 8113a92:	2200      	movs	r2, #0
 8113a94:	729a      	strb	r2, [r3, #10]
 8113a96:	2200      	movs	r2, #0
 8113a98:	72da      	strb	r2, [r3, #11]
 8113a9a:	e00f      	b.n	8113abc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8113a9c:	68fb      	ldr	r3, [r7, #12]
 8113a9e:	895b      	ldrh	r3, [r3, #10]
 8113aa0:	2b13      	cmp	r3, #19
 8113aa2:	d802      	bhi.n	8113aaa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8113aa4:	f06f 0301 	mvn.w	r3, #1
 8113aa8:	e020      	b.n	8113aec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8113aaa:	68fb      	ldr	r3, [r7, #12]
 8113aac:	685b      	ldr	r3, [r3, #4]
 8113aae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8113ab0:	69fb      	ldr	r3, [r7, #28]
 8113ab2:	691b      	ldr	r3, [r3, #16]
 8113ab4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8113ab6:	f107 0314 	add.w	r3, r7, #20
 8113aba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8113abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113abe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8113ac0:	2b00      	cmp	r3, #0
 8113ac2:	d00c      	beq.n	8113ade <ip4_output_if_src+0x12e>
 8113ac4:	68fb      	ldr	r3, [r7, #12]
 8113ac6:	891a      	ldrh	r2, [r3, #8]
 8113ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113aca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8113acc:	429a      	cmp	r2, r3
 8113ace:	d906      	bls.n	8113ade <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8113ad0:	687a      	ldr	r2, [r7, #4]
 8113ad2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8113ad4:	68f8      	ldr	r0, [r7, #12]
 8113ad6:	f000 ff0d 	bl	81148f4 <ip4_frag>
 8113ada:	4603      	mov	r3, r0
 8113adc:	e006      	b.n	8113aec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8113ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113ae0:	695b      	ldr	r3, [r3, #20]
 8113ae2:	687a      	ldr	r2, [r7, #4]
 8113ae4:	68f9      	ldr	r1, [r7, #12]
 8113ae6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8113ae8:	4798      	blx	r3
 8113aea:	4603      	mov	r3, r0
}
 8113aec:	4618      	mov	r0, r3
 8113aee:	3720      	adds	r7, #32
 8113af0:	46bd      	mov	sp, r7
 8113af2:	bd80      	pop	{r7, pc}
 8113af4:	0811f9d4 	.word	0x0811f9d4
 8113af8:	0811fa48 	.word	0x0811fa48
 8113afc:	0811fa54 	.word	0x0811fa54
 8113b00:	0811fa7c 	.word	0x0811fa7c
 8113b04:	1000b2b4 	.word	0x1000b2b4
 8113b08:	081224d8 	.word	0x081224d8

08113b0c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8113b0c:	b480      	push	{r7}
 8113b0e:	b085      	sub	sp, #20
 8113b10:	af00      	add	r7, sp, #0
 8113b12:	6078      	str	r0, [r7, #4]
 8113b14:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8113b16:	687b      	ldr	r3, [r7, #4]
 8113b18:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8113b1a:	687b      	ldr	r3, [r7, #4]
 8113b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8113b20:	d002      	beq.n	8113b28 <ip4_addr_isbroadcast_u32+0x1c>
 8113b22:	687b      	ldr	r3, [r7, #4]
 8113b24:	2b00      	cmp	r3, #0
 8113b26:	d101      	bne.n	8113b2c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8113b28:	2301      	movs	r3, #1
 8113b2a:	e02a      	b.n	8113b82 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8113b2c:	683b      	ldr	r3, [r7, #0]
 8113b2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8113b32:	f003 0302 	and.w	r3, r3, #2
 8113b36:	2b00      	cmp	r3, #0
 8113b38:	d101      	bne.n	8113b3e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8113b3a:	2300      	movs	r3, #0
 8113b3c:	e021      	b.n	8113b82 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8113b3e:	683b      	ldr	r3, [r7, #0]
 8113b40:	3304      	adds	r3, #4
 8113b42:	681b      	ldr	r3, [r3, #0]
 8113b44:	687a      	ldr	r2, [r7, #4]
 8113b46:	429a      	cmp	r2, r3
 8113b48:	d101      	bne.n	8113b4e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8113b4a:	2300      	movs	r3, #0
 8113b4c:	e019      	b.n	8113b82 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8113b4e:	68fa      	ldr	r2, [r7, #12]
 8113b50:	683b      	ldr	r3, [r7, #0]
 8113b52:	3304      	adds	r3, #4
 8113b54:	681b      	ldr	r3, [r3, #0]
 8113b56:	405a      	eors	r2, r3
 8113b58:	683b      	ldr	r3, [r7, #0]
 8113b5a:	3308      	adds	r3, #8
 8113b5c:	681b      	ldr	r3, [r3, #0]
 8113b5e:	4013      	ands	r3, r2
 8113b60:	2b00      	cmp	r3, #0
 8113b62:	d10d      	bne.n	8113b80 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8113b64:	683b      	ldr	r3, [r7, #0]
 8113b66:	3308      	adds	r3, #8
 8113b68:	681b      	ldr	r3, [r3, #0]
 8113b6a:	43da      	mvns	r2, r3
 8113b6c:	687b      	ldr	r3, [r7, #4]
 8113b6e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8113b70:	683b      	ldr	r3, [r7, #0]
 8113b72:	3308      	adds	r3, #8
 8113b74:	681b      	ldr	r3, [r3, #0]
 8113b76:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8113b78:	429a      	cmp	r2, r3
 8113b7a:	d101      	bne.n	8113b80 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8113b7c:	2301      	movs	r3, #1
 8113b7e:	e000      	b.n	8113b82 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8113b80:	2300      	movs	r3, #0
  }
}
 8113b82:	4618      	mov	r0, r3
 8113b84:	3714      	adds	r7, #20
 8113b86:	46bd      	mov	sp, r7
 8113b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113b8c:	4770      	bx	lr
	...

08113b90 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8113b90:	b580      	push	{r7, lr}
 8113b92:	b08a      	sub	sp, #40	@ 0x28
 8113b94:	af00      	add	r7, sp, #0
 8113b96:	6078      	str	r0, [r7, #4]
 8113b98:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8113b9a:	f107 030c 	add.w	r3, r7, #12
 8113b9e:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8113ba0:	687b      	ldr	r3, [r7, #4]
 8113ba2:	781b      	ldrb	r3, [r3, #0]
 8113ba4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8113ba8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8113bac:	3301      	adds	r3, #1
 8113bae:	4a89      	ldr	r2, [pc, #548]	@ (8113dd4 <ip4addr_aton+0x244>)
 8113bb0:	4413      	add	r3, r2
 8113bb2:	781b      	ldrb	r3, [r3, #0]
 8113bb4:	f003 0304 	and.w	r3, r3, #4
 8113bb8:	2b00      	cmp	r3, #0
 8113bba:	d101      	bne.n	8113bc0 <ip4addr_aton+0x30>
      return 0;
 8113bbc:	2300      	movs	r3, #0
 8113bbe:	e105      	b.n	8113dcc <ip4addr_aton+0x23c>
    }
    val = 0;
 8113bc0:	2300      	movs	r3, #0
 8113bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8113bc4:	230a      	movs	r3, #10
 8113bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 8113bca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8113bce:	2b30      	cmp	r3, #48	@ 0x30
 8113bd0:	d11c      	bne.n	8113c0c <ip4addr_aton+0x7c>
      c = *++cp;
 8113bd2:	687b      	ldr	r3, [r7, #4]
 8113bd4:	3301      	adds	r3, #1
 8113bd6:	607b      	str	r3, [r7, #4]
 8113bd8:	687b      	ldr	r3, [r7, #4]
 8113bda:	781b      	ldrb	r3, [r3, #0]
 8113bdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 8113be0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8113be4:	2b78      	cmp	r3, #120	@ 0x78
 8113be6:	d003      	beq.n	8113bf0 <ip4addr_aton+0x60>
 8113be8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8113bec:	2b58      	cmp	r3, #88	@ 0x58
 8113bee:	d10a      	bne.n	8113c06 <ip4addr_aton+0x76>
        base = 16;
 8113bf0:	2310      	movs	r3, #16
 8113bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 8113bf6:	687b      	ldr	r3, [r7, #4]
 8113bf8:	3301      	adds	r3, #1
 8113bfa:	607b      	str	r3, [r7, #4]
 8113bfc:	687b      	ldr	r3, [r7, #4]
 8113bfe:	781b      	ldrb	r3, [r3, #0]
 8113c00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8113c04:	e002      	b.n	8113c0c <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8113c06:	2308      	movs	r3, #8
 8113c08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8113c0c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8113c10:	3301      	adds	r3, #1
 8113c12:	4a70      	ldr	r2, [pc, #448]	@ (8113dd4 <ip4addr_aton+0x244>)
 8113c14:	4413      	add	r3, r2
 8113c16:	781b      	ldrb	r3, [r3, #0]
 8113c18:	f003 0304 	and.w	r3, r3, #4
 8113c1c:	2b00      	cmp	r3, #0
 8113c1e:	d011      	beq.n	8113c44 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8113c20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8113c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8113c26:	fb03 f202 	mul.w	r2, r3, r2
 8113c2a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8113c2e:	4413      	add	r3, r2
 8113c30:	3b30      	subs	r3, #48	@ 0x30
 8113c32:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8113c34:	687b      	ldr	r3, [r7, #4]
 8113c36:	3301      	adds	r3, #1
 8113c38:	607b      	str	r3, [r7, #4]
 8113c3a:	687b      	ldr	r3, [r7, #4]
 8113c3c:	781b      	ldrb	r3, [r3, #0]
 8113c3e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8113c42:	e7e3      	b.n	8113c0c <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8113c44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8113c48:	2b10      	cmp	r3, #16
 8113c4a:	d127      	bne.n	8113c9c <ip4addr_aton+0x10c>
 8113c4c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8113c50:	3301      	adds	r3, #1
 8113c52:	4a60      	ldr	r2, [pc, #384]	@ (8113dd4 <ip4addr_aton+0x244>)
 8113c54:	4413      	add	r3, r2
 8113c56:	781b      	ldrb	r3, [r3, #0]
 8113c58:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8113c5c:	2b00      	cmp	r3, #0
 8113c5e:	d01d      	beq.n	8113c9c <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8113c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113c62:	011b      	lsls	r3, r3, #4
 8113c64:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8113c68:	f102 010a 	add.w	r1, r2, #10
 8113c6c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8113c70:	3201      	adds	r2, #1
 8113c72:	4858      	ldr	r0, [pc, #352]	@ (8113dd4 <ip4addr_aton+0x244>)
 8113c74:	4402      	add	r2, r0
 8113c76:	7812      	ldrb	r2, [r2, #0]
 8113c78:	f002 0203 	and.w	r2, r2, #3
 8113c7c:	2a02      	cmp	r2, #2
 8113c7e:	d101      	bne.n	8113c84 <ip4addr_aton+0xf4>
 8113c80:	2261      	movs	r2, #97	@ 0x61
 8113c82:	e000      	b.n	8113c86 <ip4addr_aton+0xf6>
 8113c84:	2241      	movs	r2, #65	@ 0x41
 8113c86:	1a8a      	subs	r2, r1, r2
 8113c88:	4313      	orrs	r3, r2
 8113c8a:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8113c8c:	687b      	ldr	r3, [r7, #4]
 8113c8e:	3301      	adds	r3, #1
 8113c90:	607b      	str	r3, [r7, #4]
 8113c92:	687b      	ldr	r3, [r7, #4]
 8113c94:	781b      	ldrb	r3, [r3, #0]
 8113c96:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 8113c9a:	e7b7      	b.n	8113c0c <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8113c9c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8113ca0:	2b2e      	cmp	r3, #46	@ 0x2e
 8113ca2:	d114      	bne.n	8113cce <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8113ca4:	f107 030c 	add.w	r3, r7, #12
 8113ca8:	330c      	adds	r3, #12
 8113caa:	69fa      	ldr	r2, [r7, #28]
 8113cac:	429a      	cmp	r2, r3
 8113cae:	d301      	bcc.n	8113cb4 <ip4addr_aton+0x124>
        return 0;
 8113cb0:	2300      	movs	r3, #0
 8113cb2:	e08b      	b.n	8113dcc <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8113cb4:	69fb      	ldr	r3, [r7, #28]
 8113cb6:	1d1a      	adds	r2, r3, #4
 8113cb8:	61fa      	str	r2, [r7, #28]
 8113cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8113cbc:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8113cbe:	687b      	ldr	r3, [r7, #4]
 8113cc0:	3301      	adds	r3, #1
 8113cc2:	607b      	str	r3, [r7, #4]
 8113cc4:	687b      	ldr	r3, [r7, #4]
 8113cc6:	781b      	ldrb	r3, [r3, #0]
 8113cc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 8113ccc:	e76c      	b.n	8113ba8 <ip4addr_aton+0x18>
    } else {
      break;
 8113cce:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8113cd0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8113cd4:	2b00      	cmp	r3, #0
 8113cd6:	d00b      	beq.n	8113cf0 <ip4addr_aton+0x160>
 8113cd8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8113cdc:	3301      	adds	r3, #1
 8113cde:	4a3d      	ldr	r2, [pc, #244]	@ (8113dd4 <ip4addr_aton+0x244>)
 8113ce0:	4413      	add	r3, r2
 8113ce2:	781b      	ldrb	r3, [r3, #0]
 8113ce4:	f003 0308 	and.w	r3, r3, #8
 8113ce8:	2b00      	cmp	r3, #0
 8113cea:	d101      	bne.n	8113cf0 <ip4addr_aton+0x160>
    return 0;
 8113cec:	2300      	movs	r3, #0
 8113cee:	e06d      	b.n	8113dcc <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8113cf0:	f107 030c 	add.w	r3, r7, #12
 8113cf4:	69fa      	ldr	r2, [r7, #28]
 8113cf6:	1ad3      	subs	r3, r2, r3
 8113cf8:	109b      	asrs	r3, r3, #2
 8113cfa:	3301      	adds	r3, #1
 8113cfc:	2b04      	cmp	r3, #4
 8113cfe:	d853      	bhi.n	8113da8 <ip4addr_aton+0x218>
 8113d00:	a201      	add	r2, pc, #4	@ (adr r2, 8113d08 <ip4addr_aton+0x178>)
 8113d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8113d06:	bf00      	nop
 8113d08:	08113d1d 	.word	0x08113d1d
 8113d0c:	08113db7 	.word	0x08113db7
 8113d10:	08113d21 	.word	0x08113d21
 8113d14:	08113d43 	.word	0x08113d43
 8113d18:	08113d71 	.word	0x08113d71

    case 0:
      return 0;       /* initial nondigit */
 8113d1c:	2300      	movs	r3, #0
 8113d1e:	e055      	b.n	8113dcc <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8113d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113d22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8113d26:	d301      	bcc.n	8113d2c <ip4addr_aton+0x19c>
        return 0;
 8113d28:	2300      	movs	r3, #0
 8113d2a:	e04f      	b.n	8113dcc <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8113d2c:	68fb      	ldr	r3, [r7, #12]
 8113d2e:	2bff      	cmp	r3, #255	@ 0xff
 8113d30:	d901      	bls.n	8113d36 <ip4addr_aton+0x1a6>
        return 0;
 8113d32:	2300      	movs	r3, #0
 8113d34:	e04a      	b.n	8113dcc <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8113d36:	68fb      	ldr	r3, [r7, #12]
 8113d38:	061b      	lsls	r3, r3, #24
 8113d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8113d3c:	4313      	orrs	r3, r2
 8113d3e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8113d40:	e03a      	b.n	8113db8 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8113d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8113d48:	d301      	bcc.n	8113d4e <ip4addr_aton+0x1be>
        return 0;
 8113d4a:	2300      	movs	r3, #0
 8113d4c:	e03e      	b.n	8113dcc <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8113d4e:	68fb      	ldr	r3, [r7, #12]
 8113d50:	2bff      	cmp	r3, #255	@ 0xff
 8113d52:	d802      	bhi.n	8113d5a <ip4addr_aton+0x1ca>
 8113d54:	693b      	ldr	r3, [r7, #16]
 8113d56:	2bff      	cmp	r3, #255	@ 0xff
 8113d58:	d901      	bls.n	8113d5e <ip4addr_aton+0x1ce>
        return 0;
 8113d5a:	2300      	movs	r3, #0
 8113d5c:	e036      	b.n	8113dcc <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8113d5e:	68fb      	ldr	r3, [r7, #12]
 8113d60:	061a      	lsls	r2, r3, #24
 8113d62:	693b      	ldr	r3, [r7, #16]
 8113d64:	041b      	lsls	r3, r3, #16
 8113d66:	4313      	orrs	r3, r2
 8113d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8113d6a:	4313      	orrs	r3, r2
 8113d6c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8113d6e:	e023      	b.n	8113db8 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8113d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113d72:	2bff      	cmp	r3, #255	@ 0xff
 8113d74:	d901      	bls.n	8113d7a <ip4addr_aton+0x1ea>
        return 0;
 8113d76:	2300      	movs	r3, #0
 8113d78:	e028      	b.n	8113dcc <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8113d7a:	68fb      	ldr	r3, [r7, #12]
 8113d7c:	2bff      	cmp	r3, #255	@ 0xff
 8113d7e:	d805      	bhi.n	8113d8c <ip4addr_aton+0x1fc>
 8113d80:	693b      	ldr	r3, [r7, #16]
 8113d82:	2bff      	cmp	r3, #255	@ 0xff
 8113d84:	d802      	bhi.n	8113d8c <ip4addr_aton+0x1fc>
 8113d86:	697b      	ldr	r3, [r7, #20]
 8113d88:	2bff      	cmp	r3, #255	@ 0xff
 8113d8a:	d901      	bls.n	8113d90 <ip4addr_aton+0x200>
        return 0;
 8113d8c:	2300      	movs	r3, #0
 8113d8e:	e01d      	b.n	8113dcc <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8113d90:	68fb      	ldr	r3, [r7, #12]
 8113d92:	061a      	lsls	r2, r3, #24
 8113d94:	693b      	ldr	r3, [r7, #16]
 8113d96:	041b      	lsls	r3, r3, #16
 8113d98:	431a      	orrs	r2, r3
 8113d9a:	697b      	ldr	r3, [r7, #20]
 8113d9c:	021b      	lsls	r3, r3, #8
 8113d9e:	4313      	orrs	r3, r2
 8113da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8113da2:	4313      	orrs	r3, r2
 8113da4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8113da6:	e007      	b.n	8113db8 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8113da8:	4b0b      	ldr	r3, [pc, #44]	@ (8113dd8 <ip4addr_aton+0x248>)
 8113daa:	22f9      	movs	r2, #249	@ 0xf9
 8113dac:	490b      	ldr	r1, [pc, #44]	@ (8113ddc <ip4addr_aton+0x24c>)
 8113dae:	480c      	ldr	r0, [pc, #48]	@ (8113de0 <ip4addr_aton+0x250>)
 8113db0:	f00a f814 	bl	811dddc <iprintf>
      break;
 8113db4:	e000      	b.n	8113db8 <ip4addr_aton+0x228>
      break;
 8113db6:	bf00      	nop
  }
  if (addr) {
 8113db8:	683b      	ldr	r3, [r7, #0]
 8113dba:	2b00      	cmp	r3, #0
 8113dbc:	d005      	beq.n	8113dca <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8113dbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8113dc0:	f7fe f881 	bl	8111ec6 <lwip_htonl>
 8113dc4:	4602      	mov	r2, r0
 8113dc6:	683b      	ldr	r3, [r7, #0]
 8113dc8:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8113dca:	2301      	movs	r3, #1
}
 8113dcc:	4618      	mov	r0, r3
 8113dce:	3728      	adds	r7, #40	@ 0x28
 8113dd0:	46bd      	mov	sp, r7
 8113dd2:	bd80      	pop	{r7, pc}
 8113dd4:	0812265b 	.word	0x0812265b
 8113dd8:	0811faac 	.word	0x0811faac
 8113ddc:	0811fb24 	.word	0x0811fb24
 8113de0:	0811fb30 	.word	0x0811fb30

08113de4 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8113de4:	b580      	push	{r7, lr}
 8113de6:	b082      	sub	sp, #8
 8113de8:	af00      	add	r7, sp, #0
 8113dea:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8113dec:	2210      	movs	r2, #16
 8113dee:	4904      	ldr	r1, [pc, #16]	@ (8113e00 <ip4addr_ntoa+0x1c>)
 8113df0:	6878      	ldr	r0, [r7, #4]
 8113df2:	f000 f807 	bl	8113e04 <ip4addr_ntoa_r>
 8113df6:	4603      	mov	r3, r0
}
 8113df8:	4618      	mov	r0, r3
 8113dfa:	3708      	adds	r7, #8
 8113dfc:	46bd      	mov	sp, r7
 8113dfe:	bd80      	pop	{r7, pc}
 8113e00:	1000b2b8 	.word	0x1000b2b8

08113e04 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8113e04:	b480      	push	{r7}
 8113e06:	b08d      	sub	sp, #52	@ 0x34
 8113e08:	af00      	add	r7, sp, #0
 8113e0a:	60f8      	str	r0, [r7, #12]
 8113e0c:	60b9      	str	r1, [r7, #8]
 8113e0e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8113e10:	2300      	movs	r3, #0
 8113e12:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8113e14:	68fb      	ldr	r3, [r7, #12]
 8113e16:	681b      	ldr	r3, [r3, #0]
 8113e18:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8113e1a:	68bb      	ldr	r3, [r7, #8]
 8113e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8113e1e:	f107 0318 	add.w	r3, r7, #24
 8113e22:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8113e24:	2300      	movs	r3, #0
 8113e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8113e2a:	e058      	b.n	8113ede <ip4addr_ntoa_r+0xda>
    i = 0;
 8113e2c:	2300      	movs	r3, #0
 8113e2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8113e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113e34:	781a      	ldrb	r2, [r3, #0]
 8113e36:	4b32      	ldr	r3, [pc, #200]	@ (8113f00 <ip4addr_ntoa_r+0xfc>)
 8113e38:	fba3 1302 	umull	r1, r3, r3, r2
 8113e3c:	08d9      	lsrs	r1, r3, #3
 8113e3e:	460b      	mov	r3, r1
 8113e40:	009b      	lsls	r3, r3, #2
 8113e42:	440b      	add	r3, r1
 8113e44:	005b      	lsls	r3, r3, #1
 8113e46:	1ad3      	subs	r3, r2, r3
 8113e48:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8113e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113e4c:	781b      	ldrb	r3, [r3, #0]
 8113e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8113f00 <ip4addr_ntoa_r+0xfc>)
 8113e50:	fba2 2303 	umull	r2, r3, r2, r3
 8113e54:	08db      	lsrs	r3, r3, #3
 8113e56:	b2da      	uxtb	r2, r3
 8113e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113e5a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8113e5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8113e60:	1c5a      	adds	r2, r3, #1
 8113e62:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8113e66:	4619      	mov	r1, r3
 8113e68:	7ffb      	ldrb	r3, [r7, #31]
 8113e6a:	3330      	adds	r3, #48	@ 0x30
 8113e6c:	b2da      	uxtb	r2, r3
 8113e6e:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8113e72:	443b      	add	r3, r7
 8113e74:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8113e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113e7a:	781b      	ldrb	r3, [r3, #0]
 8113e7c:	2b00      	cmp	r3, #0
 8113e7e:	d1d8      	bne.n	8113e32 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8113e80:	e011      	b.n	8113ea6 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8113e82:	6a3b      	ldr	r3, [r7, #32]
 8113e84:	1c5a      	adds	r2, r3, #1
 8113e86:	623a      	str	r2, [r7, #32]
 8113e88:	687a      	ldr	r2, [r7, #4]
 8113e8a:	429a      	cmp	r2, r3
 8113e8c:	dc01      	bgt.n	8113e92 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8113e8e:	2300      	movs	r3, #0
 8113e90:	e030      	b.n	8113ef4 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8113e92:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8113e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113e98:	1c59      	adds	r1, r3, #1
 8113e9a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8113e9c:	3230      	adds	r2, #48	@ 0x30
 8113e9e:	443a      	add	r2, r7
 8113ea0:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8113ea4:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8113ea6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8113eaa:	1e5a      	subs	r2, r3, #1
 8113eac:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8113eb0:	2b00      	cmp	r3, #0
 8113eb2:	d1e6      	bne.n	8113e82 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8113eb4:	6a3b      	ldr	r3, [r7, #32]
 8113eb6:	1c5a      	adds	r2, r3, #1
 8113eb8:	623a      	str	r2, [r7, #32]
 8113eba:	687a      	ldr	r2, [r7, #4]
 8113ebc:	429a      	cmp	r2, r3
 8113ebe:	dc01      	bgt.n	8113ec4 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8113ec0:	2300      	movs	r3, #0
 8113ec2:	e017      	b.n	8113ef4 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8113ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113ec6:	1c5a      	adds	r2, r3, #1
 8113ec8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8113eca:	222e      	movs	r2, #46	@ 0x2e
 8113ecc:	701a      	strb	r2, [r3, #0]
    ap++;
 8113ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113ed0:	3301      	adds	r3, #1
 8113ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8113ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8113ed8:	3301      	adds	r3, #1
 8113eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8113ede:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8113ee2:	2b03      	cmp	r3, #3
 8113ee4:	d9a2      	bls.n	8113e2c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8113ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113ee8:	3b01      	subs	r3, #1
 8113eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8113eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113eee:	2200      	movs	r2, #0
 8113ef0:	701a      	strb	r2, [r3, #0]
  return buf;
 8113ef2:	68bb      	ldr	r3, [r7, #8]
}
 8113ef4:	4618      	mov	r0, r3
 8113ef6:	3734      	adds	r7, #52	@ 0x34
 8113ef8:	46bd      	mov	sp, r7
 8113efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113efe:	4770      	bx	lr
 8113f00:	cccccccd 	.word	0xcccccccd

08113f04 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8113f04:	b580      	push	{r7, lr}
 8113f06:	b084      	sub	sp, #16
 8113f08:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8113f0a:	2300      	movs	r3, #0
 8113f0c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8113f0e:	4b12      	ldr	r3, [pc, #72]	@ (8113f58 <ip_reass_tmr+0x54>)
 8113f10:	681b      	ldr	r3, [r3, #0]
 8113f12:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8113f14:	e018      	b.n	8113f48 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8113f16:	68fb      	ldr	r3, [r7, #12]
 8113f18:	7fdb      	ldrb	r3, [r3, #31]
 8113f1a:	2b00      	cmp	r3, #0
 8113f1c:	d00b      	beq.n	8113f36 <ip_reass_tmr+0x32>
      r->timer--;
 8113f1e:	68fb      	ldr	r3, [r7, #12]
 8113f20:	7fdb      	ldrb	r3, [r3, #31]
 8113f22:	3b01      	subs	r3, #1
 8113f24:	b2da      	uxtb	r2, r3
 8113f26:	68fb      	ldr	r3, [r7, #12]
 8113f28:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8113f2a:	68fb      	ldr	r3, [r7, #12]
 8113f2c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8113f2e:	68fb      	ldr	r3, [r7, #12]
 8113f30:	681b      	ldr	r3, [r3, #0]
 8113f32:	60fb      	str	r3, [r7, #12]
 8113f34:	e008      	b.n	8113f48 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8113f36:	68fb      	ldr	r3, [r7, #12]
 8113f38:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8113f3a:	68fb      	ldr	r3, [r7, #12]
 8113f3c:	681b      	ldr	r3, [r3, #0]
 8113f3e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8113f40:	68b9      	ldr	r1, [r7, #8]
 8113f42:	6878      	ldr	r0, [r7, #4]
 8113f44:	f000 f80a 	bl	8113f5c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8113f48:	68fb      	ldr	r3, [r7, #12]
 8113f4a:	2b00      	cmp	r3, #0
 8113f4c:	d1e3      	bne.n	8113f16 <ip_reass_tmr+0x12>
    }
  }
}
 8113f4e:	bf00      	nop
 8113f50:	bf00      	nop
 8113f52:	3710      	adds	r7, #16
 8113f54:	46bd      	mov	sp, r7
 8113f56:	bd80      	pop	{r7, pc}
 8113f58:	1000b2c8 	.word	0x1000b2c8

08113f5c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8113f5c:	b580      	push	{r7, lr}
 8113f5e:	b088      	sub	sp, #32
 8113f60:	af00      	add	r7, sp, #0
 8113f62:	6078      	str	r0, [r7, #4]
 8113f64:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8113f66:	2300      	movs	r3, #0
 8113f68:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8113f6a:	683a      	ldr	r2, [r7, #0]
 8113f6c:	687b      	ldr	r3, [r7, #4]
 8113f6e:	429a      	cmp	r2, r3
 8113f70:	d105      	bne.n	8113f7e <ip_reass_free_complete_datagram+0x22>
 8113f72:	4b45      	ldr	r3, [pc, #276]	@ (8114088 <ip_reass_free_complete_datagram+0x12c>)
 8113f74:	22ab      	movs	r2, #171	@ 0xab
 8113f76:	4945      	ldr	r1, [pc, #276]	@ (811408c <ip_reass_free_complete_datagram+0x130>)
 8113f78:	4845      	ldr	r0, [pc, #276]	@ (8114090 <ip_reass_free_complete_datagram+0x134>)
 8113f7a:	f009 ff2f 	bl	811dddc <iprintf>
  if (prev != NULL) {
 8113f7e:	683b      	ldr	r3, [r7, #0]
 8113f80:	2b00      	cmp	r3, #0
 8113f82:	d00a      	beq.n	8113f9a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8113f84:	683b      	ldr	r3, [r7, #0]
 8113f86:	681b      	ldr	r3, [r3, #0]
 8113f88:	687a      	ldr	r2, [r7, #4]
 8113f8a:	429a      	cmp	r2, r3
 8113f8c:	d005      	beq.n	8113f9a <ip_reass_free_complete_datagram+0x3e>
 8113f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8114088 <ip_reass_free_complete_datagram+0x12c>)
 8113f90:	22ad      	movs	r2, #173	@ 0xad
 8113f92:	4940      	ldr	r1, [pc, #256]	@ (8114094 <ip_reass_free_complete_datagram+0x138>)
 8113f94:	483e      	ldr	r0, [pc, #248]	@ (8114090 <ip_reass_free_complete_datagram+0x134>)
 8113f96:	f009 ff21 	bl	811dddc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8113f9a:	687b      	ldr	r3, [r7, #4]
 8113f9c:	685b      	ldr	r3, [r3, #4]
 8113f9e:	685b      	ldr	r3, [r3, #4]
 8113fa0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8113fa2:	697b      	ldr	r3, [r7, #20]
 8113fa4:	889b      	ldrh	r3, [r3, #4]
 8113fa6:	b29b      	uxth	r3, r3
 8113fa8:	2b00      	cmp	r3, #0
 8113faa:	d12a      	bne.n	8114002 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8113fac:	687b      	ldr	r3, [r7, #4]
 8113fae:	685b      	ldr	r3, [r3, #4]
 8113fb0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8113fb2:	697b      	ldr	r3, [r7, #20]
 8113fb4:	681a      	ldr	r2, [r3, #0]
 8113fb6:	687b      	ldr	r3, [r7, #4]
 8113fb8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8113fba:	69bb      	ldr	r3, [r7, #24]
 8113fbc:	6858      	ldr	r0, [r3, #4]
 8113fbe:	687b      	ldr	r3, [r7, #4]
 8113fc0:	3308      	adds	r3, #8
 8113fc2:	2214      	movs	r2, #20
 8113fc4:	4619      	mov	r1, r3
 8113fc6:	f00a f998 	bl	811e2fa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8113fca:	2101      	movs	r1, #1
 8113fcc:	69b8      	ldr	r0, [r7, #24]
 8113fce:	f7ff f9af 	bl	8113330 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8113fd2:	69b8      	ldr	r0, [r7, #24]
 8113fd4:	f002 f9fa 	bl	81163cc <pbuf_clen>
 8113fd8:	4603      	mov	r3, r0
 8113fda:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8113fdc:	8bfa      	ldrh	r2, [r7, #30]
 8113fde:	8a7b      	ldrh	r3, [r7, #18]
 8113fe0:	4413      	add	r3, r2
 8113fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8113fe6:	db05      	blt.n	8113ff4 <ip_reass_free_complete_datagram+0x98>
 8113fe8:	4b27      	ldr	r3, [pc, #156]	@ (8114088 <ip_reass_free_complete_datagram+0x12c>)
 8113fea:	22bc      	movs	r2, #188	@ 0xbc
 8113fec:	492a      	ldr	r1, [pc, #168]	@ (8114098 <ip_reass_free_complete_datagram+0x13c>)
 8113fee:	4828      	ldr	r0, [pc, #160]	@ (8114090 <ip_reass_free_complete_datagram+0x134>)
 8113ff0:	f009 fef4 	bl	811dddc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8113ff4:	8bfa      	ldrh	r2, [r7, #30]
 8113ff6:	8a7b      	ldrh	r3, [r7, #18]
 8113ff8:	4413      	add	r3, r2
 8113ffa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8113ffc:	69b8      	ldr	r0, [r7, #24]
 8113ffe:	f002 f957 	bl	81162b0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8114002:	687b      	ldr	r3, [r7, #4]
 8114004:	685b      	ldr	r3, [r3, #4]
 8114006:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8114008:	e01f      	b.n	811404a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 811400a:	69bb      	ldr	r3, [r7, #24]
 811400c:	685b      	ldr	r3, [r3, #4]
 811400e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8114010:	69bb      	ldr	r3, [r7, #24]
 8114012:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8114014:	697b      	ldr	r3, [r7, #20]
 8114016:	681b      	ldr	r3, [r3, #0]
 8114018:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 811401a:	68f8      	ldr	r0, [r7, #12]
 811401c:	f002 f9d6 	bl	81163cc <pbuf_clen>
 8114020:	4603      	mov	r3, r0
 8114022:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8114024:	8bfa      	ldrh	r2, [r7, #30]
 8114026:	8a7b      	ldrh	r3, [r7, #18]
 8114028:	4413      	add	r3, r2
 811402a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811402e:	db05      	blt.n	811403c <ip_reass_free_complete_datagram+0xe0>
 8114030:	4b15      	ldr	r3, [pc, #84]	@ (8114088 <ip_reass_free_complete_datagram+0x12c>)
 8114032:	22cc      	movs	r2, #204	@ 0xcc
 8114034:	4918      	ldr	r1, [pc, #96]	@ (8114098 <ip_reass_free_complete_datagram+0x13c>)
 8114036:	4816      	ldr	r0, [pc, #88]	@ (8114090 <ip_reass_free_complete_datagram+0x134>)
 8114038:	f009 fed0 	bl	811dddc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 811403c:	8bfa      	ldrh	r2, [r7, #30]
 811403e:	8a7b      	ldrh	r3, [r7, #18]
 8114040:	4413      	add	r3, r2
 8114042:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8114044:	68f8      	ldr	r0, [r7, #12]
 8114046:	f002 f933 	bl	81162b0 <pbuf_free>
  while (p != NULL) {
 811404a:	69bb      	ldr	r3, [r7, #24]
 811404c:	2b00      	cmp	r3, #0
 811404e:	d1dc      	bne.n	811400a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8114050:	6839      	ldr	r1, [r7, #0]
 8114052:	6878      	ldr	r0, [r7, #4]
 8114054:	f000 f8c2 	bl	81141dc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8114058:	4b10      	ldr	r3, [pc, #64]	@ (811409c <ip_reass_free_complete_datagram+0x140>)
 811405a:	881b      	ldrh	r3, [r3, #0]
 811405c:	8bfa      	ldrh	r2, [r7, #30]
 811405e:	429a      	cmp	r2, r3
 8114060:	d905      	bls.n	811406e <ip_reass_free_complete_datagram+0x112>
 8114062:	4b09      	ldr	r3, [pc, #36]	@ (8114088 <ip_reass_free_complete_datagram+0x12c>)
 8114064:	22d2      	movs	r2, #210	@ 0xd2
 8114066:	490e      	ldr	r1, [pc, #56]	@ (81140a0 <ip_reass_free_complete_datagram+0x144>)
 8114068:	4809      	ldr	r0, [pc, #36]	@ (8114090 <ip_reass_free_complete_datagram+0x134>)
 811406a:	f009 feb7 	bl	811dddc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 811406e:	4b0b      	ldr	r3, [pc, #44]	@ (811409c <ip_reass_free_complete_datagram+0x140>)
 8114070:	881a      	ldrh	r2, [r3, #0]
 8114072:	8bfb      	ldrh	r3, [r7, #30]
 8114074:	1ad3      	subs	r3, r2, r3
 8114076:	b29a      	uxth	r2, r3
 8114078:	4b08      	ldr	r3, [pc, #32]	@ (811409c <ip_reass_free_complete_datagram+0x140>)
 811407a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 811407c:	8bfb      	ldrh	r3, [r7, #30]
}
 811407e:	4618      	mov	r0, r3
 8114080:	3720      	adds	r7, #32
 8114082:	46bd      	mov	sp, r7
 8114084:	bd80      	pop	{r7, pc}
 8114086:	bf00      	nop
 8114088:	0811fb58 	.word	0x0811fb58
 811408c:	0811fbd0 	.word	0x0811fbd0
 8114090:	0811fbdc 	.word	0x0811fbdc
 8114094:	0811fc04 	.word	0x0811fc04
 8114098:	0811fc18 	.word	0x0811fc18
 811409c:	1000b2cc 	.word	0x1000b2cc
 81140a0:	0811fc38 	.word	0x0811fc38

081140a4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 81140a4:	b580      	push	{r7, lr}
 81140a6:	b08a      	sub	sp, #40	@ 0x28
 81140a8:	af00      	add	r7, sp, #0
 81140aa:	6078      	str	r0, [r7, #4]
 81140ac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 81140ae:	2300      	movs	r3, #0
 81140b0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 81140b2:	2300      	movs	r3, #0
 81140b4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 81140b6:	2300      	movs	r3, #0
 81140b8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 81140ba:	2300      	movs	r3, #0
 81140bc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 81140be:	2300      	movs	r3, #0
 81140c0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 81140c2:	4b28      	ldr	r3, [pc, #160]	@ (8114164 <ip_reass_remove_oldest_datagram+0xc0>)
 81140c4:	681b      	ldr	r3, [r3, #0]
 81140c6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 81140c8:	e030      	b.n	811412c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 81140ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81140cc:	695a      	ldr	r2, [r3, #20]
 81140ce:	687b      	ldr	r3, [r7, #4]
 81140d0:	68db      	ldr	r3, [r3, #12]
 81140d2:	429a      	cmp	r2, r3
 81140d4:	d10c      	bne.n	81140f0 <ip_reass_remove_oldest_datagram+0x4c>
 81140d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81140d8:	699a      	ldr	r2, [r3, #24]
 81140da:	687b      	ldr	r3, [r7, #4]
 81140dc:	691b      	ldr	r3, [r3, #16]
 81140de:	429a      	cmp	r2, r3
 81140e0:	d106      	bne.n	81140f0 <ip_reass_remove_oldest_datagram+0x4c>
 81140e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81140e4:	899a      	ldrh	r2, [r3, #12]
 81140e6:	687b      	ldr	r3, [r7, #4]
 81140e8:	889b      	ldrh	r3, [r3, #4]
 81140ea:	b29b      	uxth	r3, r3
 81140ec:	429a      	cmp	r2, r3
 81140ee:	d014      	beq.n	811411a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 81140f0:	693b      	ldr	r3, [r7, #16]
 81140f2:	3301      	adds	r3, #1
 81140f4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 81140f6:	6a3b      	ldr	r3, [r7, #32]
 81140f8:	2b00      	cmp	r3, #0
 81140fa:	d104      	bne.n	8114106 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 81140fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81140fe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8114100:	69fb      	ldr	r3, [r7, #28]
 8114102:	61bb      	str	r3, [r7, #24]
 8114104:	e009      	b.n	811411a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8114106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114108:	7fda      	ldrb	r2, [r3, #31]
 811410a:	6a3b      	ldr	r3, [r7, #32]
 811410c:	7fdb      	ldrb	r3, [r3, #31]
 811410e:	429a      	cmp	r2, r3
 8114110:	d803      	bhi.n	811411a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8114112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114114:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8114116:	69fb      	ldr	r3, [r7, #28]
 8114118:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 811411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811411c:	681b      	ldr	r3, [r3, #0]
 811411e:	2b00      	cmp	r3, #0
 8114120:	d001      	beq.n	8114126 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8114122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114124:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8114126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114128:	681b      	ldr	r3, [r3, #0]
 811412a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 811412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811412e:	2b00      	cmp	r3, #0
 8114130:	d1cb      	bne.n	81140ca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8114132:	6a3b      	ldr	r3, [r7, #32]
 8114134:	2b00      	cmp	r3, #0
 8114136:	d008      	beq.n	811414a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8114138:	69b9      	ldr	r1, [r7, #24]
 811413a:	6a38      	ldr	r0, [r7, #32]
 811413c:	f7ff ff0e 	bl	8113f5c <ip_reass_free_complete_datagram>
 8114140:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8114142:	697a      	ldr	r2, [r7, #20]
 8114144:	68fb      	ldr	r3, [r7, #12]
 8114146:	4413      	add	r3, r2
 8114148:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 811414a:	697a      	ldr	r2, [r7, #20]
 811414c:	683b      	ldr	r3, [r7, #0]
 811414e:	429a      	cmp	r2, r3
 8114150:	da02      	bge.n	8114158 <ip_reass_remove_oldest_datagram+0xb4>
 8114152:	693b      	ldr	r3, [r7, #16]
 8114154:	2b01      	cmp	r3, #1
 8114156:	dcac      	bgt.n	81140b2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8114158:	697b      	ldr	r3, [r7, #20]
}
 811415a:	4618      	mov	r0, r3
 811415c:	3728      	adds	r7, #40	@ 0x28
 811415e:	46bd      	mov	sp, r7
 8114160:	bd80      	pop	{r7, pc}
 8114162:	bf00      	nop
 8114164:	1000b2c8 	.word	0x1000b2c8

08114168 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8114168:	b580      	push	{r7, lr}
 811416a:	b084      	sub	sp, #16
 811416c:	af00      	add	r7, sp, #0
 811416e:	6078      	str	r0, [r7, #4]
 8114170:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8114172:	2004      	movs	r0, #4
 8114174:	f001 f982 	bl	811547c <memp_malloc>
 8114178:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 811417a:	68fb      	ldr	r3, [r7, #12]
 811417c:	2b00      	cmp	r3, #0
 811417e:	d110      	bne.n	81141a2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8114180:	6839      	ldr	r1, [r7, #0]
 8114182:	6878      	ldr	r0, [r7, #4]
 8114184:	f7ff ff8e 	bl	81140a4 <ip_reass_remove_oldest_datagram>
 8114188:	4602      	mov	r2, r0
 811418a:	683b      	ldr	r3, [r7, #0]
 811418c:	4293      	cmp	r3, r2
 811418e:	dc03      	bgt.n	8114198 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8114190:	2004      	movs	r0, #4
 8114192:	f001 f973 	bl	811547c <memp_malloc>
 8114196:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8114198:	68fb      	ldr	r3, [r7, #12]
 811419a:	2b00      	cmp	r3, #0
 811419c:	d101      	bne.n	81141a2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 811419e:	2300      	movs	r3, #0
 81141a0:	e016      	b.n	81141d0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 81141a2:	2220      	movs	r2, #32
 81141a4:	2100      	movs	r1, #0
 81141a6:	68f8      	ldr	r0, [r7, #12]
 81141a8:	f009 ff58 	bl	811e05c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 81141ac:	68fb      	ldr	r3, [r7, #12]
 81141ae:	220f      	movs	r2, #15
 81141b0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 81141b2:	4b09      	ldr	r3, [pc, #36]	@ (81141d8 <ip_reass_enqueue_new_datagram+0x70>)
 81141b4:	681a      	ldr	r2, [r3, #0]
 81141b6:	68fb      	ldr	r3, [r7, #12]
 81141b8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 81141ba:	4a07      	ldr	r2, [pc, #28]	@ (81141d8 <ip_reass_enqueue_new_datagram+0x70>)
 81141bc:	68fb      	ldr	r3, [r7, #12]
 81141be:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 81141c0:	68fb      	ldr	r3, [r7, #12]
 81141c2:	3308      	adds	r3, #8
 81141c4:	2214      	movs	r2, #20
 81141c6:	6879      	ldr	r1, [r7, #4]
 81141c8:	4618      	mov	r0, r3
 81141ca:	f00a f896 	bl	811e2fa <memcpy>
  return ipr;
 81141ce:	68fb      	ldr	r3, [r7, #12]
}
 81141d0:	4618      	mov	r0, r3
 81141d2:	3710      	adds	r7, #16
 81141d4:	46bd      	mov	sp, r7
 81141d6:	bd80      	pop	{r7, pc}
 81141d8:	1000b2c8 	.word	0x1000b2c8

081141dc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 81141dc:	b580      	push	{r7, lr}
 81141de:	b082      	sub	sp, #8
 81141e0:	af00      	add	r7, sp, #0
 81141e2:	6078      	str	r0, [r7, #4]
 81141e4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 81141e6:	4b10      	ldr	r3, [pc, #64]	@ (8114228 <ip_reass_dequeue_datagram+0x4c>)
 81141e8:	681b      	ldr	r3, [r3, #0]
 81141ea:	687a      	ldr	r2, [r7, #4]
 81141ec:	429a      	cmp	r2, r3
 81141ee:	d104      	bne.n	81141fa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 81141f0:	687b      	ldr	r3, [r7, #4]
 81141f2:	681b      	ldr	r3, [r3, #0]
 81141f4:	4a0c      	ldr	r2, [pc, #48]	@ (8114228 <ip_reass_dequeue_datagram+0x4c>)
 81141f6:	6013      	str	r3, [r2, #0]
 81141f8:	e00d      	b.n	8114216 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 81141fa:	683b      	ldr	r3, [r7, #0]
 81141fc:	2b00      	cmp	r3, #0
 81141fe:	d106      	bne.n	811420e <ip_reass_dequeue_datagram+0x32>
 8114200:	4b0a      	ldr	r3, [pc, #40]	@ (811422c <ip_reass_dequeue_datagram+0x50>)
 8114202:	f240 1245 	movw	r2, #325	@ 0x145
 8114206:	490a      	ldr	r1, [pc, #40]	@ (8114230 <ip_reass_dequeue_datagram+0x54>)
 8114208:	480a      	ldr	r0, [pc, #40]	@ (8114234 <ip_reass_dequeue_datagram+0x58>)
 811420a:	f009 fde7 	bl	811dddc <iprintf>
    prev->next = ipr->next;
 811420e:	687b      	ldr	r3, [r7, #4]
 8114210:	681a      	ldr	r2, [r3, #0]
 8114212:	683b      	ldr	r3, [r7, #0]
 8114214:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8114216:	6879      	ldr	r1, [r7, #4]
 8114218:	2004      	movs	r0, #4
 811421a:	f001 f9a5 	bl	8115568 <memp_free>
}
 811421e:	bf00      	nop
 8114220:	3708      	adds	r7, #8
 8114222:	46bd      	mov	sp, r7
 8114224:	bd80      	pop	{r7, pc}
 8114226:	bf00      	nop
 8114228:	1000b2c8 	.word	0x1000b2c8
 811422c:	0811fb58 	.word	0x0811fb58
 8114230:	0811fc5c 	.word	0x0811fc5c
 8114234:	0811fbdc 	.word	0x0811fbdc

08114238 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8114238:	b580      	push	{r7, lr}
 811423a:	b08c      	sub	sp, #48	@ 0x30
 811423c:	af00      	add	r7, sp, #0
 811423e:	60f8      	str	r0, [r7, #12]
 8114240:	60b9      	str	r1, [r7, #8]
 8114242:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8114244:	2300      	movs	r3, #0
 8114246:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8114248:	2301      	movs	r3, #1
 811424a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 811424c:	68bb      	ldr	r3, [r7, #8]
 811424e:	685b      	ldr	r3, [r3, #4]
 8114250:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8114252:	69fb      	ldr	r3, [r7, #28]
 8114254:	885b      	ldrh	r3, [r3, #2]
 8114256:	b29b      	uxth	r3, r3
 8114258:	4618      	mov	r0, r3
 811425a:	f7fd fe1f 	bl	8111e9c <lwip_htons>
 811425e:	4603      	mov	r3, r0
 8114260:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8114262:	69fb      	ldr	r3, [r7, #28]
 8114264:	781b      	ldrb	r3, [r3, #0]
 8114266:	f003 030f 	and.w	r3, r3, #15
 811426a:	b2db      	uxtb	r3, r3
 811426c:	009b      	lsls	r3, r3, #2
 811426e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8114270:	7e7b      	ldrb	r3, [r7, #25]
 8114272:	b29b      	uxth	r3, r3
 8114274:	8b7a      	ldrh	r2, [r7, #26]
 8114276:	429a      	cmp	r2, r3
 8114278:	d202      	bcs.n	8114280 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 811427a:	f04f 33ff 	mov.w	r3, #4294967295
 811427e:	e135      	b.n	81144ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8114280:	7e7b      	ldrb	r3, [r7, #25]
 8114282:	b29b      	uxth	r3, r3
 8114284:	8b7a      	ldrh	r2, [r7, #26]
 8114286:	1ad3      	subs	r3, r2, r3
 8114288:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 811428a:	69fb      	ldr	r3, [r7, #28]
 811428c:	88db      	ldrh	r3, [r3, #6]
 811428e:	b29b      	uxth	r3, r3
 8114290:	4618      	mov	r0, r3
 8114292:	f7fd fe03 	bl	8111e9c <lwip_htons>
 8114296:	4603      	mov	r3, r0
 8114298:	f3c3 030c 	ubfx	r3, r3, #0, #13
 811429c:	b29b      	uxth	r3, r3
 811429e:	00db      	lsls	r3, r3, #3
 81142a0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 81142a2:	68bb      	ldr	r3, [r7, #8]
 81142a4:	685b      	ldr	r3, [r3, #4]
 81142a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 81142a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81142aa:	2200      	movs	r2, #0
 81142ac:	701a      	strb	r2, [r3, #0]
 81142ae:	2200      	movs	r2, #0
 81142b0:	705a      	strb	r2, [r3, #1]
 81142b2:	2200      	movs	r2, #0
 81142b4:	709a      	strb	r2, [r3, #2]
 81142b6:	2200      	movs	r2, #0
 81142b8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 81142ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81142bc:	8afa      	ldrh	r2, [r7, #22]
 81142be:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 81142c0:	8afa      	ldrh	r2, [r7, #22]
 81142c2:	8b7b      	ldrh	r3, [r7, #26]
 81142c4:	4413      	add	r3, r2
 81142c6:	b29a      	uxth	r2, r3
 81142c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81142ca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 81142cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81142ce:	88db      	ldrh	r3, [r3, #6]
 81142d0:	b29b      	uxth	r3, r3
 81142d2:	8afa      	ldrh	r2, [r7, #22]
 81142d4:	429a      	cmp	r2, r3
 81142d6:	d902      	bls.n	81142de <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 81142d8:	f04f 33ff 	mov.w	r3, #4294967295
 81142dc:	e106      	b.n	81144ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 81142de:	68fb      	ldr	r3, [r7, #12]
 81142e0:	685b      	ldr	r3, [r3, #4]
 81142e2:	627b      	str	r3, [r7, #36]	@ 0x24
 81142e4:	e068      	b.n	81143b8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 81142e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81142e8:	685b      	ldr	r3, [r3, #4]
 81142ea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 81142ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81142ee:	889b      	ldrh	r3, [r3, #4]
 81142f0:	b29a      	uxth	r2, r3
 81142f2:	693b      	ldr	r3, [r7, #16]
 81142f4:	889b      	ldrh	r3, [r3, #4]
 81142f6:	b29b      	uxth	r3, r3
 81142f8:	429a      	cmp	r2, r3
 81142fa:	d235      	bcs.n	8114368 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 81142fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81142fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8114300:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8114302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114304:	2b00      	cmp	r3, #0
 8114306:	d020      	beq.n	811434a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8114308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811430a:	889b      	ldrh	r3, [r3, #4]
 811430c:	b29a      	uxth	r2, r3
 811430e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114310:	88db      	ldrh	r3, [r3, #6]
 8114312:	b29b      	uxth	r3, r3
 8114314:	429a      	cmp	r2, r3
 8114316:	d307      	bcc.n	8114328 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8114318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811431a:	88db      	ldrh	r3, [r3, #6]
 811431c:	b29a      	uxth	r2, r3
 811431e:	693b      	ldr	r3, [r7, #16]
 8114320:	889b      	ldrh	r3, [r3, #4]
 8114322:	b29b      	uxth	r3, r3
 8114324:	429a      	cmp	r2, r3
 8114326:	d902      	bls.n	811432e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8114328:	f04f 33ff 	mov.w	r3, #4294967295
 811432c:	e0de      	b.n	81144ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 811432e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114330:	68ba      	ldr	r2, [r7, #8]
 8114332:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8114334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114336:	88db      	ldrh	r3, [r3, #6]
 8114338:	b29a      	uxth	r2, r3
 811433a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811433c:	889b      	ldrh	r3, [r3, #4]
 811433e:	b29b      	uxth	r3, r3
 8114340:	429a      	cmp	r2, r3
 8114342:	d03d      	beq.n	81143c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8114344:	2300      	movs	r3, #0
 8114346:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8114348:	e03a      	b.n	81143c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 811434a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811434c:	88db      	ldrh	r3, [r3, #6]
 811434e:	b29a      	uxth	r2, r3
 8114350:	693b      	ldr	r3, [r7, #16]
 8114352:	889b      	ldrh	r3, [r3, #4]
 8114354:	b29b      	uxth	r3, r3
 8114356:	429a      	cmp	r2, r3
 8114358:	d902      	bls.n	8114360 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 811435a:	f04f 33ff 	mov.w	r3, #4294967295
 811435e:	e0c5      	b.n	81144ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8114360:	68fb      	ldr	r3, [r7, #12]
 8114362:	68ba      	ldr	r2, [r7, #8]
 8114364:	605a      	str	r2, [r3, #4]
      break;
 8114366:	e02b      	b.n	81143c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8114368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811436a:	889b      	ldrh	r3, [r3, #4]
 811436c:	b29a      	uxth	r2, r3
 811436e:	693b      	ldr	r3, [r7, #16]
 8114370:	889b      	ldrh	r3, [r3, #4]
 8114372:	b29b      	uxth	r3, r3
 8114374:	429a      	cmp	r2, r3
 8114376:	d102      	bne.n	811437e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8114378:	f04f 33ff 	mov.w	r3, #4294967295
 811437c:	e0b6      	b.n	81144ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 811437e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114380:	889b      	ldrh	r3, [r3, #4]
 8114382:	b29a      	uxth	r2, r3
 8114384:	693b      	ldr	r3, [r7, #16]
 8114386:	88db      	ldrh	r3, [r3, #6]
 8114388:	b29b      	uxth	r3, r3
 811438a:	429a      	cmp	r2, r3
 811438c:	d202      	bcs.n	8114394 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 811438e:	f04f 33ff 	mov.w	r3, #4294967295
 8114392:	e0ab      	b.n	81144ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8114394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114396:	2b00      	cmp	r3, #0
 8114398:	d009      	beq.n	81143ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 811439a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811439c:	88db      	ldrh	r3, [r3, #6]
 811439e:	b29a      	uxth	r2, r3
 81143a0:	693b      	ldr	r3, [r7, #16]
 81143a2:	889b      	ldrh	r3, [r3, #4]
 81143a4:	b29b      	uxth	r3, r3
 81143a6:	429a      	cmp	r2, r3
 81143a8:	d001      	beq.n	81143ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 81143aa:	2300      	movs	r3, #0
 81143ac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 81143ae:	693b      	ldr	r3, [r7, #16]
 81143b0:	681b      	ldr	r3, [r3, #0]
 81143b2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 81143b4:	693b      	ldr	r3, [r7, #16]
 81143b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 81143b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81143ba:	2b00      	cmp	r3, #0
 81143bc:	d193      	bne.n	81142e6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 81143be:	e000      	b.n	81143c2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 81143c0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 81143c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81143c4:	2b00      	cmp	r3, #0
 81143c6:	d12d      	bne.n	8114424 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 81143c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81143ca:	2b00      	cmp	r3, #0
 81143cc:	d01c      	beq.n	8114408 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 81143ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81143d0:	88db      	ldrh	r3, [r3, #6]
 81143d2:	b29a      	uxth	r2, r3
 81143d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81143d6:	889b      	ldrh	r3, [r3, #4]
 81143d8:	b29b      	uxth	r3, r3
 81143da:	429a      	cmp	r2, r3
 81143dc:	d906      	bls.n	81143ec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 81143de:	4b45      	ldr	r3, [pc, #276]	@ (81144f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 81143e0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 81143e4:	4944      	ldr	r1, [pc, #272]	@ (81144f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 81143e6:	4845      	ldr	r0, [pc, #276]	@ (81144fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 81143e8:	f009 fcf8 	bl	811dddc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 81143ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81143ee:	68ba      	ldr	r2, [r7, #8]
 81143f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 81143f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81143f4:	88db      	ldrh	r3, [r3, #6]
 81143f6:	b29a      	uxth	r2, r3
 81143f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81143fa:	889b      	ldrh	r3, [r3, #4]
 81143fc:	b29b      	uxth	r3, r3
 81143fe:	429a      	cmp	r2, r3
 8114400:	d010      	beq.n	8114424 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8114402:	2300      	movs	r3, #0
 8114404:	623b      	str	r3, [r7, #32]
 8114406:	e00d      	b.n	8114424 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8114408:	68fb      	ldr	r3, [r7, #12]
 811440a:	685b      	ldr	r3, [r3, #4]
 811440c:	2b00      	cmp	r3, #0
 811440e:	d006      	beq.n	811441e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8114410:	4b38      	ldr	r3, [pc, #224]	@ (81144f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8114412:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8114416:	493a      	ldr	r1, [pc, #232]	@ (8114500 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8114418:	4838      	ldr	r0, [pc, #224]	@ (81144fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 811441a:	f009 fcdf 	bl	811dddc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 811441e:	68fb      	ldr	r3, [r7, #12]
 8114420:	68ba      	ldr	r2, [r7, #8]
 8114422:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8114424:	687b      	ldr	r3, [r7, #4]
 8114426:	2b00      	cmp	r3, #0
 8114428:	d105      	bne.n	8114436 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 811442a:	68fb      	ldr	r3, [r7, #12]
 811442c:	7f9b      	ldrb	r3, [r3, #30]
 811442e:	f003 0301 	and.w	r3, r3, #1
 8114432:	2b00      	cmp	r3, #0
 8114434:	d059      	beq.n	81144ea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8114436:	6a3b      	ldr	r3, [r7, #32]
 8114438:	2b00      	cmp	r3, #0
 811443a:	d04f      	beq.n	81144dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 811443c:	68fb      	ldr	r3, [r7, #12]
 811443e:	685b      	ldr	r3, [r3, #4]
 8114440:	2b00      	cmp	r3, #0
 8114442:	d006      	beq.n	8114452 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8114444:	68fb      	ldr	r3, [r7, #12]
 8114446:	685b      	ldr	r3, [r3, #4]
 8114448:	685b      	ldr	r3, [r3, #4]
 811444a:	889b      	ldrh	r3, [r3, #4]
 811444c:	b29b      	uxth	r3, r3
 811444e:	2b00      	cmp	r3, #0
 8114450:	d002      	beq.n	8114458 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8114452:	2300      	movs	r3, #0
 8114454:	623b      	str	r3, [r7, #32]
 8114456:	e041      	b.n	81144dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8114458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811445a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 811445c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811445e:	681b      	ldr	r3, [r3, #0]
 8114460:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8114462:	e012      	b.n	811448a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8114464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114466:	685b      	ldr	r3, [r3, #4]
 8114468:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 811446a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811446c:	88db      	ldrh	r3, [r3, #6]
 811446e:	b29a      	uxth	r2, r3
 8114470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114472:	889b      	ldrh	r3, [r3, #4]
 8114474:	b29b      	uxth	r3, r3
 8114476:	429a      	cmp	r2, r3
 8114478:	d002      	beq.n	8114480 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 811447a:	2300      	movs	r3, #0
 811447c:	623b      	str	r3, [r7, #32]
            break;
 811447e:	e007      	b.n	8114490 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8114480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114482:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8114484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114486:	681b      	ldr	r3, [r3, #0]
 8114488:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 811448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811448c:	2b00      	cmp	r3, #0
 811448e:	d1e9      	bne.n	8114464 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8114490:	6a3b      	ldr	r3, [r7, #32]
 8114492:	2b00      	cmp	r3, #0
 8114494:	d022      	beq.n	81144dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8114496:	68fb      	ldr	r3, [r7, #12]
 8114498:	685b      	ldr	r3, [r3, #4]
 811449a:	2b00      	cmp	r3, #0
 811449c:	d106      	bne.n	81144ac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 811449e:	4b15      	ldr	r3, [pc, #84]	@ (81144f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 81144a0:	f240 12df 	movw	r2, #479	@ 0x1df
 81144a4:	4917      	ldr	r1, [pc, #92]	@ (8114504 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 81144a6:	4815      	ldr	r0, [pc, #84]	@ (81144fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 81144a8:	f009 fc98 	bl	811dddc <iprintf>
          LWIP_ASSERT("sanity check",
 81144ac:	68fb      	ldr	r3, [r7, #12]
 81144ae:	685b      	ldr	r3, [r3, #4]
 81144b0:	685b      	ldr	r3, [r3, #4]
 81144b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81144b4:	429a      	cmp	r2, r3
 81144b6:	d106      	bne.n	81144c6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 81144b8:	4b0e      	ldr	r3, [pc, #56]	@ (81144f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 81144ba:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 81144be:	4911      	ldr	r1, [pc, #68]	@ (8114504 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 81144c0:	480e      	ldr	r0, [pc, #56]	@ (81144fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 81144c2:	f009 fc8b 	bl	811dddc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 81144c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81144c8:	681b      	ldr	r3, [r3, #0]
 81144ca:	2b00      	cmp	r3, #0
 81144cc:	d006      	beq.n	81144dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 81144ce:	4b09      	ldr	r3, [pc, #36]	@ (81144f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 81144d0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 81144d4:	490c      	ldr	r1, [pc, #48]	@ (8114508 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 81144d6:	4809      	ldr	r0, [pc, #36]	@ (81144fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 81144d8:	f009 fc80 	bl	811dddc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 81144dc:	6a3b      	ldr	r3, [r7, #32]
 81144de:	2b00      	cmp	r3, #0
 81144e0:	bf14      	ite	ne
 81144e2:	2301      	movne	r3, #1
 81144e4:	2300      	moveq	r3, #0
 81144e6:	b2db      	uxtb	r3, r3
 81144e8:	e000      	b.n	81144ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 81144ea:	2300      	movs	r3, #0
}
 81144ec:	4618      	mov	r0, r3
 81144ee:	3730      	adds	r7, #48	@ 0x30
 81144f0:	46bd      	mov	sp, r7
 81144f2:	bd80      	pop	{r7, pc}
 81144f4:	0811fb58 	.word	0x0811fb58
 81144f8:	0811fc78 	.word	0x0811fc78
 81144fc:	0811fbdc 	.word	0x0811fbdc
 8114500:	0811fc98 	.word	0x0811fc98
 8114504:	0811fcd0 	.word	0x0811fcd0
 8114508:	0811fce0 	.word	0x0811fce0

0811450c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 811450c:	b580      	push	{r7, lr}
 811450e:	b08e      	sub	sp, #56	@ 0x38
 8114510:	af00      	add	r7, sp, #0
 8114512:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8114514:	687b      	ldr	r3, [r7, #4]
 8114516:	685b      	ldr	r3, [r3, #4]
 8114518:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 811451a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811451c:	781b      	ldrb	r3, [r3, #0]
 811451e:	f003 030f 	and.w	r3, r3, #15
 8114522:	b2db      	uxtb	r3, r3
 8114524:	009b      	lsls	r3, r3, #2
 8114526:	b2db      	uxtb	r3, r3
 8114528:	2b14      	cmp	r3, #20
 811452a:	f040 8171 	bne.w	8114810 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 811452e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114530:	88db      	ldrh	r3, [r3, #6]
 8114532:	b29b      	uxth	r3, r3
 8114534:	4618      	mov	r0, r3
 8114536:	f7fd fcb1 	bl	8111e9c <lwip_htons>
 811453a:	4603      	mov	r3, r0
 811453c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8114540:	b29b      	uxth	r3, r3
 8114542:	00db      	lsls	r3, r3, #3
 8114544:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8114546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114548:	885b      	ldrh	r3, [r3, #2]
 811454a:	b29b      	uxth	r3, r3
 811454c:	4618      	mov	r0, r3
 811454e:	f7fd fca5 	bl	8111e9c <lwip_htons>
 8114552:	4603      	mov	r3, r0
 8114554:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8114556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114558:	781b      	ldrb	r3, [r3, #0]
 811455a:	f003 030f 	and.w	r3, r3, #15
 811455e:	b2db      	uxtb	r3, r3
 8114560:	009b      	lsls	r3, r3, #2
 8114562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8114566:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 811456a:	b29b      	uxth	r3, r3
 811456c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811456e:	429a      	cmp	r2, r3
 8114570:	f0c0 8150 	bcc.w	8114814 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8114574:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8114578:	b29b      	uxth	r3, r3
 811457a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811457c:	1ad3      	subs	r3, r2, r3
 811457e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8114580:	6878      	ldr	r0, [r7, #4]
 8114582:	f001 ff23 	bl	81163cc <pbuf_clen>
 8114586:	4603      	mov	r3, r0
 8114588:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 811458a:	4b8c      	ldr	r3, [pc, #560]	@ (81147bc <ip4_reass+0x2b0>)
 811458c:	881b      	ldrh	r3, [r3, #0]
 811458e:	461a      	mov	r2, r3
 8114590:	8c3b      	ldrh	r3, [r7, #32]
 8114592:	4413      	add	r3, r2
 8114594:	2b0a      	cmp	r3, #10
 8114596:	dd10      	ble.n	81145ba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8114598:	8c3b      	ldrh	r3, [r7, #32]
 811459a:	4619      	mov	r1, r3
 811459c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811459e:	f7ff fd81 	bl	81140a4 <ip_reass_remove_oldest_datagram>
 81145a2:	4603      	mov	r3, r0
 81145a4:	2b00      	cmp	r3, #0
 81145a6:	f000 8137 	beq.w	8114818 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 81145aa:	4b84      	ldr	r3, [pc, #528]	@ (81147bc <ip4_reass+0x2b0>)
 81145ac:	881b      	ldrh	r3, [r3, #0]
 81145ae:	461a      	mov	r2, r3
 81145b0:	8c3b      	ldrh	r3, [r7, #32]
 81145b2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 81145b4:	2b0a      	cmp	r3, #10
 81145b6:	f300 812f 	bgt.w	8114818 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 81145ba:	4b81      	ldr	r3, [pc, #516]	@ (81147c0 <ip4_reass+0x2b4>)
 81145bc:	681b      	ldr	r3, [r3, #0]
 81145be:	633b      	str	r3, [r7, #48]	@ 0x30
 81145c0:	e015      	b.n	81145ee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 81145c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81145c4:	695a      	ldr	r2, [r3, #20]
 81145c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81145c8:	68db      	ldr	r3, [r3, #12]
 81145ca:	429a      	cmp	r2, r3
 81145cc:	d10c      	bne.n	81145e8 <ip4_reass+0xdc>
 81145ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81145d0:	699a      	ldr	r2, [r3, #24]
 81145d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81145d4:	691b      	ldr	r3, [r3, #16]
 81145d6:	429a      	cmp	r2, r3
 81145d8:	d106      	bne.n	81145e8 <ip4_reass+0xdc>
 81145da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81145dc:	899a      	ldrh	r2, [r3, #12]
 81145de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81145e0:	889b      	ldrh	r3, [r3, #4]
 81145e2:	b29b      	uxth	r3, r3
 81145e4:	429a      	cmp	r2, r3
 81145e6:	d006      	beq.n	81145f6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 81145e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81145ea:	681b      	ldr	r3, [r3, #0]
 81145ec:	633b      	str	r3, [r7, #48]	@ 0x30
 81145ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81145f0:	2b00      	cmp	r3, #0
 81145f2:	d1e6      	bne.n	81145c2 <ip4_reass+0xb6>
 81145f4:	e000      	b.n	81145f8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 81145f6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 81145f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81145fa:	2b00      	cmp	r3, #0
 81145fc:	d109      	bne.n	8114612 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 81145fe:	8c3b      	ldrh	r3, [r7, #32]
 8114600:	4619      	mov	r1, r3
 8114602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8114604:	f7ff fdb0 	bl	8114168 <ip_reass_enqueue_new_datagram>
 8114608:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 811460a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811460c:	2b00      	cmp	r3, #0
 811460e:	d11c      	bne.n	811464a <ip4_reass+0x13e>
      goto nullreturn;
 8114610:	e105      	b.n	811481e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8114612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114614:	88db      	ldrh	r3, [r3, #6]
 8114616:	b29b      	uxth	r3, r3
 8114618:	4618      	mov	r0, r3
 811461a:	f7fd fc3f 	bl	8111e9c <lwip_htons>
 811461e:	4603      	mov	r3, r0
 8114620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8114624:	2b00      	cmp	r3, #0
 8114626:	d110      	bne.n	811464a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8114628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811462a:	89db      	ldrh	r3, [r3, #14]
 811462c:	4618      	mov	r0, r3
 811462e:	f7fd fc35 	bl	8111e9c <lwip_htons>
 8114632:	4603      	mov	r3, r0
 8114634:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8114638:	2b00      	cmp	r3, #0
 811463a:	d006      	beq.n	811464a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 811463c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811463e:	3308      	adds	r3, #8
 8114640:	2214      	movs	r2, #20
 8114642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8114644:	4618      	mov	r0, r3
 8114646:	f009 fe58 	bl	811e2fa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 811464a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811464c:	88db      	ldrh	r3, [r3, #6]
 811464e:	b29b      	uxth	r3, r3
 8114650:	f003 0320 	and.w	r3, r3, #32
 8114654:	2b00      	cmp	r3, #0
 8114656:	bf0c      	ite	eq
 8114658:	2301      	moveq	r3, #1
 811465a:	2300      	movne	r3, #0
 811465c:	b2db      	uxtb	r3, r3
 811465e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8114660:	69fb      	ldr	r3, [r7, #28]
 8114662:	2b00      	cmp	r3, #0
 8114664:	d00e      	beq.n	8114684 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8114666:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8114668:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811466a:	4413      	add	r3, r2
 811466c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 811466e:	8b7a      	ldrh	r2, [r7, #26]
 8114670:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8114672:	429a      	cmp	r2, r3
 8114674:	f0c0 80a0 	bcc.w	81147b8 <ip4_reass+0x2ac>
 8114678:	8b7b      	ldrh	r3, [r7, #26]
 811467a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 811467e:	4293      	cmp	r3, r2
 8114680:	f200 809a 	bhi.w	81147b8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8114684:	69fa      	ldr	r2, [r7, #28]
 8114686:	6879      	ldr	r1, [r7, #4]
 8114688:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811468a:	f7ff fdd5 	bl	8114238 <ip_reass_chain_frag_into_datagram_and_validate>
 811468e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8114690:	697b      	ldr	r3, [r7, #20]
 8114692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8114696:	f000 809b 	beq.w	81147d0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 811469a:	4b48      	ldr	r3, [pc, #288]	@ (81147bc <ip4_reass+0x2b0>)
 811469c:	881a      	ldrh	r2, [r3, #0]
 811469e:	8c3b      	ldrh	r3, [r7, #32]
 81146a0:	4413      	add	r3, r2
 81146a2:	b29a      	uxth	r2, r3
 81146a4:	4b45      	ldr	r3, [pc, #276]	@ (81147bc <ip4_reass+0x2b0>)
 81146a6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 81146a8:	69fb      	ldr	r3, [r7, #28]
 81146aa:	2b00      	cmp	r3, #0
 81146ac:	d00d      	beq.n	81146ca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 81146ae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 81146b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81146b2:	4413      	add	r3, r2
 81146b4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 81146b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81146b8:	8a7a      	ldrh	r2, [r7, #18]
 81146ba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 81146bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81146be:	7f9b      	ldrb	r3, [r3, #30]
 81146c0:	f043 0301 	orr.w	r3, r3, #1
 81146c4:	b2da      	uxtb	r2, r3
 81146c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81146c8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 81146ca:	697b      	ldr	r3, [r7, #20]
 81146cc:	2b01      	cmp	r3, #1
 81146ce:	d171      	bne.n	81147b4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 81146d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81146d2:	8b9b      	ldrh	r3, [r3, #28]
 81146d4:	3314      	adds	r3, #20
 81146d6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 81146d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81146da:	685b      	ldr	r3, [r3, #4]
 81146dc:	685b      	ldr	r3, [r3, #4]
 81146de:	681b      	ldr	r3, [r3, #0]
 81146e0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 81146e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81146e4:	685b      	ldr	r3, [r3, #4]
 81146e6:	685b      	ldr	r3, [r3, #4]
 81146e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 81146ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81146ec:	3308      	adds	r3, #8
 81146ee:	2214      	movs	r2, #20
 81146f0:	4619      	mov	r1, r3
 81146f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81146f4:	f009 fe01 	bl	811e2fa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 81146f8:	8a3b      	ldrh	r3, [r7, #16]
 81146fa:	4618      	mov	r0, r3
 81146fc:	f7fd fbce 	bl	8111e9c <lwip_htons>
 8114700:	4603      	mov	r3, r0
 8114702:	461a      	mov	r2, r3
 8114704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114706:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8114708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811470a:	2200      	movs	r2, #0
 811470c:	719a      	strb	r2, [r3, #6]
 811470e:	2200      	movs	r2, #0
 8114710:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8114712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114714:	2200      	movs	r2, #0
 8114716:	729a      	strb	r2, [r3, #10]
 8114718:	2200      	movs	r2, #0
 811471a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 811471c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811471e:	685b      	ldr	r3, [r3, #4]
 8114720:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8114722:	e00d      	b.n	8114740 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8114724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114726:	685b      	ldr	r3, [r3, #4]
 8114728:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 811472a:	2114      	movs	r1, #20
 811472c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 811472e:	f001 fd39 	bl	81161a4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8114732:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8114734:	6878      	ldr	r0, [r7, #4]
 8114736:	f001 fe89 	bl	811644c <pbuf_cat>
      r = iprh->next_pbuf;
 811473a:	68fb      	ldr	r3, [r7, #12]
 811473c:	681b      	ldr	r3, [r3, #0]
 811473e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8114740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114742:	2b00      	cmp	r3, #0
 8114744:	d1ee      	bne.n	8114724 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8114746:	4b1e      	ldr	r3, [pc, #120]	@ (81147c0 <ip4_reass+0x2b4>)
 8114748:	681b      	ldr	r3, [r3, #0]
 811474a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811474c:	429a      	cmp	r2, r3
 811474e:	d102      	bne.n	8114756 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8114750:	2300      	movs	r3, #0
 8114752:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8114754:	e010      	b.n	8114778 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8114756:	4b1a      	ldr	r3, [pc, #104]	@ (81147c0 <ip4_reass+0x2b4>)
 8114758:	681b      	ldr	r3, [r3, #0]
 811475a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811475c:	e007      	b.n	811476e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 811475e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114760:	681b      	ldr	r3, [r3, #0]
 8114762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8114764:	429a      	cmp	r2, r3
 8114766:	d006      	beq.n	8114776 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8114768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811476a:	681b      	ldr	r3, [r3, #0]
 811476c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811476e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114770:	2b00      	cmp	r3, #0
 8114772:	d1f4      	bne.n	811475e <ip4_reass+0x252>
 8114774:	e000      	b.n	8114778 <ip4_reass+0x26c>
          break;
 8114776:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8114778:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 811477a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811477c:	f7ff fd2e 	bl	81141dc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8114780:	6878      	ldr	r0, [r7, #4]
 8114782:	f001 fe23 	bl	81163cc <pbuf_clen>
 8114786:	4603      	mov	r3, r0
 8114788:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 811478a:	4b0c      	ldr	r3, [pc, #48]	@ (81147bc <ip4_reass+0x2b0>)
 811478c:	881b      	ldrh	r3, [r3, #0]
 811478e:	8c3a      	ldrh	r2, [r7, #32]
 8114790:	429a      	cmp	r2, r3
 8114792:	d906      	bls.n	81147a2 <ip4_reass+0x296>
 8114794:	4b0b      	ldr	r3, [pc, #44]	@ (81147c4 <ip4_reass+0x2b8>)
 8114796:	f240 229b 	movw	r2, #667	@ 0x29b
 811479a:	490b      	ldr	r1, [pc, #44]	@ (81147c8 <ip4_reass+0x2bc>)
 811479c:	480b      	ldr	r0, [pc, #44]	@ (81147cc <ip4_reass+0x2c0>)
 811479e:	f009 fb1d 	bl	811dddc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 81147a2:	4b06      	ldr	r3, [pc, #24]	@ (81147bc <ip4_reass+0x2b0>)
 81147a4:	881a      	ldrh	r2, [r3, #0]
 81147a6:	8c3b      	ldrh	r3, [r7, #32]
 81147a8:	1ad3      	subs	r3, r2, r3
 81147aa:	b29a      	uxth	r2, r3
 81147ac:	4b03      	ldr	r3, [pc, #12]	@ (81147bc <ip4_reass+0x2b0>)
 81147ae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 81147b0:	687b      	ldr	r3, [r7, #4]
 81147b2:	e038      	b.n	8114826 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 81147b4:	2300      	movs	r3, #0
 81147b6:	e036      	b.n	8114826 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 81147b8:	bf00      	nop
 81147ba:	e00a      	b.n	81147d2 <ip4_reass+0x2c6>
 81147bc:	1000b2cc 	.word	0x1000b2cc
 81147c0:	1000b2c8 	.word	0x1000b2c8
 81147c4:	0811fb58 	.word	0x0811fb58
 81147c8:	0811fd04 	.word	0x0811fd04
 81147cc:	0811fbdc 	.word	0x0811fbdc
    goto nullreturn_ipr;
 81147d0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 81147d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81147d4:	2b00      	cmp	r3, #0
 81147d6:	d106      	bne.n	81147e6 <ip4_reass+0x2da>
 81147d8:	4b15      	ldr	r3, [pc, #84]	@ (8114830 <ip4_reass+0x324>)
 81147da:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 81147de:	4915      	ldr	r1, [pc, #84]	@ (8114834 <ip4_reass+0x328>)
 81147e0:	4815      	ldr	r0, [pc, #84]	@ (8114838 <ip4_reass+0x32c>)
 81147e2:	f009 fafb 	bl	811dddc <iprintf>
  if (ipr->p == NULL) {
 81147e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81147e8:	685b      	ldr	r3, [r3, #4]
 81147ea:	2b00      	cmp	r3, #0
 81147ec:	d116      	bne.n	811481c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 81147ee:	4b13      	ldr	r3, [pc, #76]	@ (811483c <ip4_reass+0x330>)
 81147f0:	681b      	ldr	r3, [r3, #0]
 81147f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81147f4:	429a      	cmp	r2, r3
 81147f6:	d006      	beq.n	8114806 <ip4_reass+0x2fa>
 81147f8:	4b0d      	ldr	r3, [pc, #52]	@ (8114830 <ip4_reass+0x324>)
 81147fa:	f240 22ab 	movw	r2, #683	@ 0x2ab
 81147fe:	4910      	ldr	r1, [pc, #64]	@ (8114840 <ip4_reass+0x334>)
 8114800:	480d      	ldr	r0, [pc, #52]	@ (8114838 <ip4_reass+0x32c>)
 8114802:	f009 faeb 	bl	811dddc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8114806:	2100      	movs	r1, #0
 8114808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811480a:	f7ff fce7 	bl	81141dc <ip_reass_dequeue_datagram>
 811480e:	e006      	b.n	811481e <ip4_reass+0x312>
    goto nullreturn;
 8114810:	bf00      	nop
 8114812:	e004      	b.n	811481e <ip4_reass+0x312>
    goto nullreturn;
 8114814:	bf00      	nop
 8114816:	e002      	b.n	811481e <ip4_reass+0x312>
      goto nullreturn;
 8114818:	bf00      	nop
 811481a:	e000      	b.n	811481e <ip4_reass+0x312>
  }

nullreturn:
 811481c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 811481e:	6878      	ldr	r0, [r7, #4]
 8114820:	f001 fd46 	bl	81162b0 <pbuf_free>
  return NULL;
 8114824:	2300      	movs	r3, #0
}
 8114826:	4618      	mov	r0, r3
 8114828:	3738      	adds	r7, #56	@ 0x38
 811482a:	46bd      	mov	sp, r7
 811482c:	bd80      	pop	{r7, pc}
 811482e:	bf00      	nop
 8114830:	0811fb58 	.word	0x0811fb58
 8114834:	0811fd20 	.word	0x0811fd20
 8114838:	0811fbdc 	.word	0x0811fbdc
 811483c:	1000b2c8 	.word	0x1000b2c8
 8114840:	0811fd2c 	.word	0x0811fd2c

08114844 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8114844:	b580      	push	{r7, lr}
 8114846:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8114848:	2005      	movs	r0, #5
 811484a:	f000 fe17 	bl	811547c <memp_malloc>
 811484e:	4603      	mov	r3, r0
}
 8114850:	4618      	mov	r0, r3
 8114852:	bd80      	pop	{r7, pc}

08114854 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8114854:	b580      	push	{r7, lr}
 8114856:	b082      	sub	sp, #8
 8114858:	af00      	add	r7, sp, #0
 811485a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 811485c:	687b      	ldr	r3, [r7, #4]
 811485e:	2b00      	cmp	r3, #0
 8114860:	d106      	bne.n	8114870 <ip_frag_free_pbuf_custom_ref+0x1c>
 8114862:	4b07      	ldr	r3, [pc, #28]	@ (8114880 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8114864:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8114868:	4906      	ldr	r1, [pc, #24]	@ (8114884 <ip_frag_free_pbuf_custom_ref+0x30>)
 811486a:	4807      	ldr	r0, [pc, #28]	@ (8114888 <ip_frag_free_pbuf_custom_ref+0x34>)
 811486c:	f009 fab6 	bl	811dddc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8114870:	6879      	ldr	r1, [r7, #4]
 8114872:	2005      	movs	r0, #5
 8114874:	f000 fe78 	bl	8115568 <memp_free>
}
 8114878:	bf00      	nop
 811487a:	3708      	adds	r7, #8
 811487c:	46bd      	mov	sp, r7
 811487e:	bd80      	pop	{r7, pc}
 8114880:	0811fb58 	.word	0x0811fb58
 8114884:	0811fd4c 	.word	0x0811fd4c
 8114888:	0811fbdc 	.word	0x0811fbdc

0811488c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 811488c:	b580      	push	{r7, lr}
 811488e:	b084      	sub	sp, #16
 8114890:	af00      	add	r7, sp, #0
 8114892:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8114894:	687b      	ldr	r3, [r7, #4]
 8114896:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8114898:	68fb      	ldr	r3, [r7, #12]
 811489a:	2b00      	cmp	r3, #0
 811489c:	d106      	bne.n	81148ac <ipfrag_free_pbuf_custom+0x20>
 811489e:	4b11      	ldr	r3, [pc, #68]	@ (81148e4 <ipfrag_free_pbuf_custom+0x58>)
 81148a0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 81148a4:	4910      	ldr	r1, [pc, #64]	@ (81148e8 <ipfrag_free_pbuf_custom+0x5c>)
 81148a6:	4811      	ldr	r0, [pc, #68]	@ (81148ec <ipfrag_free_pbuf_custom+0x60>)
 81148a8:	f009 fa98 	bl	811dddc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 81148ac:	68fa      	ldr	r2, [r7, #12]
 81148ae:	687b      	ldr	r3, [r7, #4]
 81148b0:	429a      	cmp	r2, r3
 81148b2:	d006      	beq.n	81148c2 <ipfrag_free_pbuf_custom+0x36>
 81148b4:	4b0b      	ldr	r3, [pc, #44]	@ (81148e4 <ipfrag_free_pbuf_custom+0x58>)
 81148b6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 81148ba:	490d      	ldr	r1, [pc, #52]	@ (81148f0 <ipfrag_free_pbuf_custom+0x64>)
 81148bc:	480b      	ldr	r0, [pc, #44]	@ (81148ec <ipfrag_free_pbuf_custom+0x60>)
 81148be:	f009 fa8d 	bl	811dddc <iprintf>
  if (pcr->original != NULL) {
 81148c2:	68fb      	ldr	r3, [r7, #12]
 81148c4:	695b      	ldr	r3, [r3, #20]
 81148c6:	2b00      	cmp	r3, #0
 81148c8:	d004      	beq.n	81148d4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 81148ca:	68fb      	ldr	r3, [r7, #12]
 81148cc:	695b      	ldr	r3, [r3, #20]
 81148ce:	4618      	mov	r0, r3
 81148d0:	f001 fcee 	bl	81162b0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 81148d4:	68f8      	ldr	r0, [r7, #12]
 81148d6:	f7ff ffbd 	bl	8114854 <ip_frag_free_pbuf_custom_ref>
}
 81148da:	bf00      	nop
 81148dc:	3710      	adds	r7, #16
 81148de:	46bd      	mov	sp, r7
 81148e0:	bd80      	pop	{r7, pc}
 81148e2:	bf00      	nop
 81148e4:	0811fb58 	.word	0x0811fb58
 81148e8:	0811fd58 	.word	0x0811fd58
 81148ec:	0811fbdc 	.word	0x0811fbdc
 81148f0:	0811fd64 	.word	0x0811fd64

081148f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 81148f4:	b580      	push	{r7, lr}
 81148f6:	b094      	sub	sp, #80	@ 0x50
 81148f8:	af02      	add	r7, sp, #8
 81148fa:	60f8      	str	r0, [r7, #12]
 81148fc:	60b9      	str	r1, [r7, #8]
 81148fe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8114900:	2300      	movs	r3, #0
 8114902:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8114906:	68bb      	ldr	r3, [r7, #8]
 8114908:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811490a:	3b14      	subs	r3, #20
 811490c:	2b00      	cmp	r3, #0
 811490e:	da00      	bge.n	8114912 <ip4_frag+0x1e>
 8114910:	3307      	adds	r3, #7
 8114912:	10db      	asrs	r3, r3, #3
 8114914:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8114916:	2314      	movs	r3, #20
 8114918:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 811491a:	68fb      	ldr	r3, [r7, #12]
 811491c:	685b      	ldr	r3, [r3, #4]
 811491e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8114920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8114922:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8114924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114926:	781b      	ldrb	r3, [r3, #0]
 8114928:	f003 030f 	and.w	r3, r3, #15
 811492c:	b2db      	uxtb	r3, r3
 811492e:	009b      	lsls	r3, r3, #2
 8114930:	b2db      	uxtb	r3, r3
 8114932:	2b14      	cmp	r3, #20
 8114934:	d002      	beq.n	811493c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8114936:	f06f 0305 	mvn.w	r3, #5
 811493a:	e110      	b.n	8114b5e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 811493c:	68fb      	ldr	r3, [r7, #12]
 811493e:	895b      	ldrh	r3, [r3, #10]
 8114940:	2b13      	cmp	r3, #19
 8114942:	d809      	bhi.n	8114958 <ip4_frag+0x64>
 8114944:	4b88      	ldr	r3, [pc, #544]	@ (8114b68 <ip4_frag+0x274>)
 8114946:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 811494a:	4988      	ldr	r1, [pc, #544]	@ (8114b6c <ip4_frag+0x278>)
 811494c:	4888      	ldr	r0, [pc, #544]	@ (8114b70 <ip4_frag+0x27c>)
 811494e:	f009 fa45 	bl	811dddc <iprintf>
 8114952:	f06f 0305 	mvn.w	r3, #5
 8114956:	e102      	b.n	8114b5e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8114958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811495a:	88db      	ldrh	r3, [r3, #6]
 811495c:	b29b      	uxth	r3, r3
 811495e:	4618      	mov	r0, r3
 8114960:	f7fd fa9c 	bl	8111e9c <lwip_htons>
 8114964:	4603      	mov	r3, r0
 8114966:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8114968:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811496a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 811496e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8114972:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8114974:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8114978:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 811497a:	68fb      	ldr	r3, [r7, #12]
 811497c:	891b      	ldrh	r3, [r3, #8]
 811497e:	3b14      	subs	r3, #20
 8114980:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8114984:	e0e1      	b.n	8114b4a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8114986:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8114988:	00db      	lsls	r3, r3, #3
 811498a:	b29b      	uxth	r3, r3
 811498c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8114990:	4293      	cmp	r3, r2
 8114992:	bf28      	it	cs
 8114994:	4613      	movcs	r3, r2
 8114996:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8114998:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811499c:	2114      	movs	r1, #20
 811499e:	200e      	movs	r0, #14
 81149a0:	f001 f9a2 	bl	8115ce8 <pbuf_alloc>
 81149a4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 81149a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81149a8:	2b00      	cmp	r3, #0
 81149aa:	f000 80d5 	beq.w	8114b58 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 81149ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81149b0:	895b      	ldrh	r3, [r3, #10]
 81149b2:	2b13      	cmp	r3, #19
 81149b4:	d806      	bhi.n	81149c4 <ip4_frag+0xd0>
 81149b6:	4b6c      	ldr	r3, [pc, #432]	@ (8114b68 <ip4_frag+0x274>)
 81149b8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 81149bc:	496d      	ldr	r1, [pc, #436]	@ (8114b74 <ip4_frag+0x280>)
 81149be:	486c      	ldr	r0, [pc, #432]	@ (8114b70 <ip4_frag+0x27c>)
 81149c0:	f009 fa0c 	bl	811dddc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 81149c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81149c6:	685b      	ldr	r3, [r3, #4]
 81149c8:	2214      	movs	r2, #20
 81149ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 81149cc:	4618      	mov	r0, r3
 81149ce:	f009 fc94 	bl	811e2fa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 81149d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81149d4:	685b      	ldr	r3, [r3, #4]
 81149d6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 81149d8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81149da:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 81149de:	e064      	b.n	8114aaa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 81149e0:	68fb      	ldr	r3, [r7, #12]
 81149e2:	895a      	ldrh	r2, [r3, #10]
 81149e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81149e6:	1ad3      	subs	r3, r2, r3
 81149e8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 81149ea:	68fb      	ldr	r3, [r7, #12]
 81149ec:	895b      	ldrh	r3, [r3, #10]
 81149ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 81149f0:	429a      	cmp	r2, r3
 81149f2:	d906      	bls.n	8114a02 <ip4_frag+0x10e>
 81149f4:	4b5c      	ldr	r3, [pc, #368]	@ (8114b68 <ip4_frag+0x274>)
 81149f6:	f240 322d 	movw	r2, #813	@ 0x32d
 81149fa:	495f      	ldr	r1, [pc, #380]	@ (8114b78 <ip4_frag+0x284>)
 81149fc:	485c      	ldr	r0, [pc, #368]	@ (8114b70 <ip4_frag+0x27c>)
 81149fe:	f009 f9ed 	bl	811dddc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8114a02:	8bfa      	ldrh	r2, [r7, #30]
 8114a04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8114a08:	4293      	cmp	r3, r2
 8114a0a:	bf28      	it	cs
 8114a0c:	4613      	movcs	r3, r2
 8114a0e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8114a12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8114a16:	2b00      	cmp	r3, #0
 8114a18:	d105      	bne.n	8114a26 <ip4_frag+0x132>
        poff = 0;
 8114a1a:	2300      	movs	r3, #0
 8114a1c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8114a1e:	68fb      	ldr	r3, [r7, #12]
 8114a20:	681b      	ldr	r3, [r3, #0]
 8114a22:	60fb      	str	r3, [r7, #12]
        continue;
 8114a24:	e041      	b.n	8114aaa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8114a26:	f7ff ff0d 	bl	8114844 <ip_frag_alloc_pbuf_custom_ref>
 8114a2a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8114a2c:	69bb      	ldr	r3, [r7, #24]
 8114a2e:	2b00      	cmp	r3, #0
 8114a30:	d103      	bne.n	8114a3a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8114a32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8114a34:	f001 fc3c 	bl	81162b0 <pbuf_free>
        goto memerr;
 8114a38:	e08f      	b.n	8114b5a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8114a3a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8114a3c:	68fb      	ldr	r3, [r7, #12]
 8114a3e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8114a40:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8114a42:	4413      	add	r3, r2
 8114a44:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8114a48:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8114a4c:	9201      	str	r2, [sp, #4]
 8114a4e:	9300      	str	r3, [sp, #0]
 8114a50:	4603      	mov	r3, r0
 8114a52:	2241      	movs	r2, #65	@ 0x41
 8114a54:	2000      	movs	r0, #0
 8114a56:	f001 fa73 	bl	8115f40 <pbuf_alloced_custom>
 8114a5a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8114a5c:	697b      	ldr	r3, [r7, #20]
 8114a5e:	2b00      	cmp	r3, #0
 8114a60:	d106      	bne.n	8114a70 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8114a62:	69b8      	ldr	r0, [r7, #24]
 8114a64:	f7ff fef6 	bl	8114854 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8114a68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8114a6a:	f001 fc21 	bl	81162b0 <pbuf_free>
        goto memerr;
 8114a6e:	e074      	b.n	8114b5a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8114a70:	68f8      	ldr	r0, [r7, #12]
 8114a72:	f001 fcc3 	bl	81163fc <pbuf_ref>
      pcr->original = p;
 8114a76:	69bb      	ldr	r3, [r7, #24]
 8114a78:	68fa      	ldr	r2, [r7, #12]
 8114a7a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8114a7c:	69bb      	ldr	r3, [r7, #24]
 8114a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8114b7c <ip4_frag+0x288>)
 8114a80:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8114a82:	6979      	ldr	r1, [r7, #20]
 8114a84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8114a86:	f001 fce1 	bl	811644c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8114a8a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8114a8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8114a92:	1ad3      	subs	r3, r2, r3
 8114a94:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8114a98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8114a9c:	2b00      	cmp	r3, #0
 8114a9e:	d004      	beq.n	8114aaa <ip4_frag+0x1b6>
        poff = 0;
 8114aa0:	2300      	movs	r3, #0
 8114aa2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8114aa4:	68fb      	ldr	r3, [r7, #12]
 8114aa6:	681b      	ldr	r3, [r3, #0]
 8114aa8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8114aaa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8114aae:	2b00      	cmp	r3, #0
 8114ab0:	d196      	bne.n	81149e0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8114ab2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8114ab4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8114ab8:	4413      	add	r3, r2
 8114aba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8114abc:	68bb      	ldr	r3, [r7, #8]
 8114abe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8114ac0:	f1a3 0213 	sub.w	r2, r3, #19
 8114ac4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8114ac8:	429a      	cmp	r2, r3
 8114aca:	bfcc      	ite	gt
 8114acc:	2301      	movgt	r3, #1
 8114ace:	2300      	movle	r3, #0
 8114ad0:	b2db      	uxtb	r3, r3
 8114ad2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8114ad4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8114ad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8114adc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8114ade:	6a3b      	ldr	r3, [r7, #32]
 8114ae0:	2b00      	cmp	r3, #0
 8114ae2:	d002      	beq.n	8114aea <ip4_frag+0x1f6>
 8114ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8114ae6:	2b00      	cmp	r3, #0
 8114ae8:	d003      	beq.n	8114af2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8114aea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8114aec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8114af0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8114af2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8114af4:	4618      	mov	r0, r3
 8114af6:	f7fd f9d1 	bl	8111e9c <lwip_htons>
 8114afa:	4603      	mov	r3, r0
 8114afc:	461a      	mov	r2, r3
 8114afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114b00:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8114b02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8114b04:	3314      	adds	r3, #20
 8114b06:	b29b      	uxth	r3, r3
 8114b08:	4618      	mov	r0, r3
 8114b0a:	f7fd f9c7 	bl	8111e9c <lwip_htons>
 8114b0e:	4603      	mov	r3, r0
 8114b10:	461a      	mov	r2, r3
 8114b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114b14:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8114b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8114b18:	2200      	movs	r2, #0
 8114b1a:	729a      	strb	r2, [r3, #10]
 8114b1c:	2200      	movs	r2, #0
 8114b1e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8114b20:	68bb      	ldr	r3, [r7, #8]
 8114b22:	695b      	ldr	r3, [r3, #20]
 8114b24:	687a      	ldr	r2, [r7, #4]
 8114b26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8114b28:	68b8      	ldr	r0, [r7, #8]
 8114b2a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8114b2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8114b2e:	f001 fbbf 	bl	81162b0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8114b32:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8114b36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8114b38:	1ad3      	subs	r3, r2, r3
 8114b3a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8114b3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8114b42:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8114b44:	4413      	add	r3, r2
 8114b46:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8114b4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8114b4e:	2b00      	cmp	r3, #0
 8114b50:	f47f af19 	bne.w	8114986 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8114b54:	2300      	movs	r3, #0
 8114b56:	e002      	b.n	8114b5e <ip4_frag+0x26a>
      goto memerr;
 8114b58:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8114b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8114b5e:	4618      	mov	r0, r3
 8114b60:	3748      	adds	r7, #72	@ 0x48
 8114b62:	46bd      	mov	sp, r7
 8114b64:	bd80      	pop	{r7, pc}
 8114b66:	bf00      	nop
 8114b68:	0811fb58 	.word	0x0811fb58
 8114b6c:	0811fd70 	.word	0x0811fd70
 8114b70:	0811fbdc 	.word	0x0811fbdc
 8114b74:	0811fd8c 	.word	0x0811fd8c
 8114b78:	0811fdac 	.word	0x0811fdac
 8114b7c:	0811488d 	.word	0x0811488d

08114b80 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8114b80:	b480      	push	{r7}
 8114b82:	b083      	sub	sp, #12
 8114b84:	af00      	add	r7, sp, #0
 8114b86:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 8114b88:	4b04      	ldr	r3, [pc, #16]	@ (8114b9c <ptr_to_mem+0x1c>)
 8114b8a:	681a      	ldr	r2, [r3, #0]
 8114b8c:	687b      	ldr	r3, [r7, #4]
 8114b8e:	4413      	add	r3, r2
}
 8114b90:	4618      	mov	r0, r3
 8114b92:	370c      	adds	r7, #12
 8114b94:	46bd      	mov	sp, r7
 8114b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114b9a:	4770      	bx	lr
 8114b9c:	1000b2d0 	.word	0x1000b2d0

08114ba0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8114ba0:	b480      	push	{r7}
 8114ba2:	b083      	sub	sp, #12
 8114ba4:	af00      	add	r7, sp, #0
 8114ba6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8114ba8:	4b04      	ldr	r3, [pc, #16]	@ (8114bbc <mem_to_ptr+0x1c>)
 8114baa:	681b      	ldr	r3, [r3, #0]
 8114bac:	687a      	ldr	r2, [r7, #4]
 8114bae:	1ad3      	subs	r3, r2, r3
}
 8114bb0:	4618      	mov	r0, r3
 8114bb2:	370c      	adds	r7, #12
 8114bb4:	46bd      	mov	sp, r7
 8114bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114bba:	4770      	bx	lr
 8114bbc:	1000b2d0 	.word	0x1000b2d0

08114bc0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8114bc0:	b590      	push	{r4, r7, lr}
 8114bc2:	b085      	sub	sp, #20
 8114bc4:	af00      	add	r7, sp, #0
 8114bc6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8114bc8:	4b45      	ldr	r3, [pc, #276]	@ (8114ce0 <plug_holes+0x120>)
 8114bca:	681b      	ldr	r3, [r3, #0]
 8114bcc:	687a      	ldr	r2, [r7, #4]
 8114bce:	429a      	cmp	r2, r3
 8114bd0:	d206      	bcs.n	8114be0 <plug_holes+0x20>
 8114bd2:	4b44      	ldr	r3, [pc, #272]	@ (8114ce4 <plug_holes+0x124>)
 8114bd4:	f240 12df 	movw	r2, #479	@ 0x1df
 8114bd8:	4943      	ldr	r1, [pc, #268]	@ (8114ce8 <plug_holes+0x128>)
 8114bda:	4844      	ldr	r0, [pc, #272]	@ (8114cec <plug_holes+0x12c>)
 8114bdc:	f009 f8fe 	bl	811dddc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8114be0:	4b43      	ldr	r3, [pc, #268]	@ (8114cf0 <plug_holes+0x130>)
 8114be2:	681b      	ldr	r3, [r3, #0]
 8114be4:	687a      	ldr	r2, [r7, #4]
 8114be6:	429a      	cmp	r2, r3
 8114be8:	d306      	bcc.n	8114bf8 <plug_holes+0x38>
 8114bea:	4b3e      	ldr	r3, [pc, #248]	@ (8114ce4 <plug_holes+0x124>)
 8114bec:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8114bf0:	4940      	ldr	r1, [pc, #256]	@ (8114cf4 <plug_holes+0x134>)
 8114bf2:	483e      	ldr	r0, [pc, #248]	@ (8114cec <plug_holes+0x12c>)
 8114bf4:	f009 f8f2 	bl	811dddc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8114bf8:	687b      	ldr	r3, [r7, #4]
 8114bfa:	7a1b      	ldrb	r3, [r3, #8]
 8114bfc:	2b00      	cmp	r3, #0
 8114bfe:	d006      	beq.n	8114c0e <plug_holes+0x4e>
 8114c00:	4b38      	ldr	r3, [pc, #224]	@ (8114ce4 <plug_holes+0x124>)
 8114c02:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8114c06:	493c      	ldr	r1, [pc, #240]	@ (8114cf8 <plug_holes+0x138>)
 8114c08:	4838      	ldr	r0, [pc, #224]	@ (8114cec <plug_holes+0x12c>)
 8114c0a:	f009 f8e7 	bl	811dddc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8114c0e:	687b      	ldr	r3, [r7, #4]
 8114c10:	681b      	ldr	r3, [r3, #0]
 8114c12:	4a3a      	ldr	r2, [pc, #232]	@ (8114cfc <plug_holes+0x13c>)
 8114c14:	4293      	cmp	r3, r2
 8114c16:	d906      	bls.n	8114c26 <plug_holes+0x66>
 8114c18:	4b32      	ldr	r3, [pc, #200]	@ (8114ce4 <plug_holes+0x124>)
 8114c1a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8114c1e:	4938      	ldr	r1, [pc, #224]	@ (8114d00 <plug_holes+0x140>)
 8114c20:	4832      	ldr	r0, [pc, #200]	@ (8114cec <plug_holes+0x12c>)
 8114c22:	f009 f8db 	bl	811dddc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8114c26:	687b      	ldr	r3, [r7, #4]
 8114c28:	681b      	ldr	r3, [r3, #0]
 8114c2a:	4618      	mov	r0, r3
 8114c2c:	f7ff ffa8 	bl	8114b80 <ptr_to_mem>
 8114c30:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8114c32:	687a      	ldr	r2, [r7, #4]
 8114c34:	68fb      	ldr	r3, [r7, #12]
 8114c36:	429a      	cmp	r2, r3
 8114c38:	d024      	beq.n	8114c84 <plug_holes+0xc4>
 8114c3a:	68fb      	ldr	r3, [r7, #12]
 8114c3c:	7a1b      	ldrb	r3, [r3, #8]
 8114c3e:	2b00      	cmp	r3, #0
 8114c40:	d120      	bne.n	8114c84 <plug_holes+0xc4>
 8114c42:	4b2b      	ldr	r3, [pc, #172]	@ (8114cf0 <plug_holes+0x130>)
 8114c44:	681b      	ldr	r3, [r3, #0]
 8114c46:	68fa      	ldr	r2, [r7, #12]
 8114c48:	429a      	cmp	r2, r3
 8114c4a:	d01b      	beq.n	8114c84 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8114c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8114d04 <plug_holes+0x144>)
 8114c4e:	681b      	ldr	r3, [r3, #0]
 8114c50:	68fa      	ldr	r2, [r7, #12]
 8114c52:	429a      	cmp	r2, r3
 8114c54:	d102      	bne.n	8114c5c <plug_holes+0x9c>
      lfree = mem;
 8114c56:	4a2b      	ldr	r2, [pc, #172]	@ (8114d04 <plug_holes+0x144>)
 8114c58:	687b      	ldr	r3, [r7, #4]
 8114c5a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8114c5c:	68fb      	ldr	r3, [r7, #12]
 8114c5e:	681a      	ldr	r2, [r3, #0]
 8114c60:	687b      	ldr	r3, [r7, #4]
 8114c62:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8114c64:	68fb      	ldr	r3, [r7, #12]
 8114c66:	681b      	ldr	r3, [r3, #0]
 8114c68:	4a24      	ldr	r2, [pc, #144]	@ (8114cfc <plug_holes+0x13c>)
 8114c6a:	4293      	cmp	r3, r2
 8114c6c:	d00a      	beq.n	8114c84 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8114c6e:	68fb      	ldr	r3, [r7, #12]
 8114c70:	681b      	ldr	r3, [r3, #0]
 8114c72:	4618      	mov	r0, r3
 8114c74:	f7ff ff84 	bl	8114b80 <ptr_to_mem>
 8114c78:	4604      	mov	r4, r0
 8114c7a:	6878      	ldr	r0, [r7, #4]
 8114c7c:	f7ff ff90 	bl	8114ba0 <mem_to_ptr>
 8114c80:	4603      	mov	r3, r0
 8114c82:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8114c84:	687b      	ldr	r3, [r7, #4]
 8114c86:	685b      	ldr	r3, [r3, #4]
 8114c88:	4618      	mov	r0, r3
 8114c8a:	f7ff ff79 	bl	8114b80 <ptr_to_mem>
 8114c8e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8114c90:	68ba      	ldr	r2, [r7, #8]
 8114c92:	687b      	ldr	r3, [r7, #4]
 8114c94:	429a      	cmp	r2, r3
 8114c96:	d01f      	beq.n	8114cd8 <plug_holes+0x118>
 8114c98:	68bb      	ldr	r3, [r7, #8]
 8114c9a:	7a1b      	ldrb	r3, [r3, #8]
 8114c9c:	2b00      	cmp	r3, #0
 8114c9e:	d11b      	bne.n	8114cd8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8114ca0:	4b18      	ldr	r3, [pc, #96]	@ (8114d04 <plug_holes+0x144>)
 8114ca2:	681b      	ldr	r3, [r3, #0]
 8114ca4:	687a      	ldr	r2, [r7, #4]
 8114ca6:	429a      	cmp	r2, r3
 8114ca8:	d102      	bne.n	8114cb0 <plug_holes+0xf0>
      lfree = pmem;
 8114caa:	4a16      	ldr	r2, [pc, #88]	@ (8114d04 <plug_holes+0x144>)
 8114cac:	68bb      	ldr	r3, [r7, #8]
 8114cae:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8114cb0:	687b      	ldr	r3, [r7, #4]
 8114cb2:	681a      	ldr	r2, [r3, #0]
 8114cb4:	68bb      	ldr	r3, [r7, #8]
 8114cb6:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8114cb8:	687b      	ldr	r3, [r7, #4]
 8114cba:	681b      	ldr	r3, [r3, #0]
 8114cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8114cfc <plug_holes+0x13c>)
 8114cbe:	4293      	cmp	r3, r2
 8114cc0:	d00a      	beq.n	8114cd8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8114cc2:	687b      	ldr	r3, [r7, #4]
 8114cc4:	681b      	ldr	r3, [r3, #0]
 8114cc6:	4618      	mov	r0, r3
 8114cc8:	f7ff ff5a 	bl	8114b80 <ptr_to_mem>
 8114ccc:	4604      	mov	r4, r0
 8114cce:	68b8      	ldr	r0, [r7, #8]
 8114cd0:	f7ff ff66 	bl	8114ba0 <mem_to_ptr>
 8114cd4:	4603      	mov	r3, r0
 8114cd6:	6063      	str	r3, [r4, #4]
    }
  }
}
 8114cd8:	bf00      	nop
 8114cda:	3714      	adds	r7, #20
 8114cdc:	46bd      	mov	sp, r7
 8114cde:	bd90      	pop	{r4, r7, pc}
 8114ce0:	1000b2d0 	.word	0x1000b2d0
 8114ce4:	0811fdbc 	.word	0x0811fdbc
 8114ce8:	0811fe2c 	.word	0x0811fe2c
 8114cec:	0811fe44 	.word	0x0811fe44
 8114cf0:	1000b2d4 	.word	0x1000b2d4
 8114cf4:	0811fe6c 	.word	0x0811fe6c
 8114cf8:	0811fe88 	.word	0x0811fe88
 8114cfc:	0001ffe8 	.word	0x0001ffe8
 8114d00:	0811fea4 	.word	0x0811fea4
 8114d04:	1000b2dc 	.word	0x1000b2dc

08114d08 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8114d08:	b580      	push	{r7, lr}
 8114d0a:	b082      	sub	sp, #8
 8114d0c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8114d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8114d7c <mem_init+0x74>)
 8114d10:	4a1b      	ldr	r2, [pc, #108]	@ (8114d80 <mem_init+0x78>)
 8114d12:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8114d14:	4b19      	ldr	r3, [pc, #100]	@ (8114d7c <mem_init+0x74>)
 8114d16:	681b      	ldr	r3, [r3, #0]
 8114d18:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8114d1a:	687b      	ldr	r3, [r7, #4]
 8114d1c:	4a19      	ldr	r2, [pc, #100]	@ (8114d84 <mem_init+0x7c>)
 8114d1e:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8114d20:	687b      	ldr	r3, [r7, #4]
 8114d22:	2200      	movs	r2, #0
 8114d24:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 8114d26:	687b      	ldr	r3, [r7, #4]
 8114d28:	2200      	movs	r2, #0
 8114d2a:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8114d2c:	4815      	ldr	r0, [pc, #84]	@ (8114d84 <mem_init+0x7c>)
 8114d2e:	f7ff ff27 	bl	8114b80 <ptr_to_mem>
 8114d32:	4603      	mov	r3, r0
 8114d34:	4a14      	ldr	r2, [pc, #80]	@ (8114d88 <mem_init+0x80>)
 8114d36:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8114d38:	4b13      	ldr	r3, [pc, #76]	@ (8114d88 <mem_init+0x80>)
 8114d3a:	681b      	ldr	r3, [r3, #0]
 8114d3c:	2201      	movs	r2, #1
 8114d3e:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 8114d40:	4b11      	ldr	r3, [pc, #68]	@ (8114d88 <mem_init+0x80>)
 8114d42:	681b      	ldr	r3, [r3, #0]
 8114d44:	4a0f      	ldr	r2, [pc, #60]	@ (8114d84 <mem_init+0x7c>)
 8114d46:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8114d48:	4b0f      	ldr	r3, [pc, #60]	@ (8114d88 <mem_init+0x80>)
 8114d4a:	681b      	ldr	r3, [r3, #0]
 8114d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8114d84 <mem_init+0x7c>)
 8114d4e:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8114d50:	4b0a      	ldr	r3, [pc, #40]	@ (8114d7c <mem_init+0x74>)
 8114d52:	681b      	ldr	r3, [r3, #0]
 8114d54:	4a0d      	ldr	r2, [pc, #52]	@ (8114d8c <mem_init+0x84>)
 8114d56:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8114d58:	480d      	ldr	r0, [pc, #52]	@ (8114d90 <mem_init+0x88>)
 8114d5a:	f001 fdd5 	bl	8116908 <sys_mutex_new>
 8114d5e:	4603      	mov	r3, r0
 8114d60:	2b00      	cmp	r3, #0
 8114d62:	d006      	beq.n	8114d72 <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8114d64:	4b0b      	ldr	r3, [pc, #44]	@ (8114d94 <mem_init+0x8c>)
 8114d66:	f240 221f 	movw	r2, #543	@ 0x21f
 8114d6a:	490b      	ldr	r1, [pc, #44]	@ (8114d98 <mem_init+0x90>)
 8114d6c:	480b      	ldr	r0, [pc, #44]	@ (8114d9c <mem_init+0x94>)
 8114d6e:	f009 f835 	bl	811dddc <iprintf>
  }
}
 8114d72:	bf00      	nop
 8114d74:	3708      	adds	r7, #8
 8114d76:	46bd      	mov	sp, r7
 8114d78:	bd80      	pop	{r7, pc}
 8114d7a:	bf00      	nop
 8114d7c:	1000b2d0 	.word	0x1000b2d0
 8114d80:	10020000 	.word	0x10020000
 8114d84:	0001ffe8 	.word	0x0001ffe8
 8114d88:	1000b2d4 	.word	0x1000b2d4
 8114d8c:	1000b2dc 	.word	0x1000b2dc
 8114d90:	1000b2d8 	.word	0x1000b2d8
 8114d94:	0811fdbc 	.word	0x0811fdbc
 8114d98:	0811fed0 	.word	0x0811fed0
 8114d9c:	0811fe44 	.word	0x0811fe44

08114da0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8114da0:	b580      	push	{r7, lr}
 8114da2:	b086      	sub	sp, #24
 8114da4:	af00      	add	r7, sp, #0
 8114da6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8114da8:	6878      	ldr	r0, [r7, #4]
 8114daa:	f7ff fef9 	bl	8114ba0 <mem_to_ptr>
 8114dae:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 8114db0:	687b      	ldr	r3, [r7, #4]
 8114db2:	681b      	ldr	r3, [r3, #0]
 8114db4:	4618      	mov	r0, r3
 8114db6:	f7ff fee3 	bl	8114b80 <ptr_to_mem>
 8114dba:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8114dbc:	687b      	ldr	r3, [r7, #4]
 8114dbe:	685b      	ldr	r3, [r3, #4]
 8114dc0:	4618      	mov	r0, r3
 8114dc2:	f7ff fedd 	bl	8114b80 <ptr_to_mem>
 8114dc6:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8114dc8:	687b      	ldr	r3, [r7, #4]
 8114dca:	681b      	ldr	r3, [r3, #0]
 8114dcc:	4a11      	ldr	r2, [pc, #68]	@ (8114e14 <mem_link_valid+0x74>)
 8114dce:	4293      	cmp	r3, r2
 8114dd0:	d818      	bhi.n	8114e04 <mem_link_valid+0x64>
 8114dd2:	687b      	ldr	r3, [r7, #4]
 8114dd4:	685b      	ldr	r3, [r3, #4]
 8114dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8114e14 <mem_link_valid+0x74>)
 8114dd8:	4293      	cmp	r3, r2
 8114dda:	d813      	bhi.n	8114e04 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8114ddc:	687b      	ldr	r3, [r7, #4]
 8114dde:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8114de0:	697a      	ldr	r2, [r7, #20]
 8114de2:	429a      	cmp	r2, r3
 8114de4:	d004      	beq.n	8114df0 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8114de6:	68fb      	ldr	r3, [r7, #12]
 8114de8:	681b      	ldr	r3, [r3, #0]
 8114dea:	697a      	ldr	r2, [r7, #20]
 8114dec:	429a      	cmp	r2, r3
 8114dee:	d109      	bne.n	8114e04 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8114df0:	4b09      	ldr	r3, [pc, #36]	@ (8114e18 <mem_link_valid+0x78>)
 8114df2:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8114df4:	693a      	ldr	r2, [r7, #16]
 8114df6:	429a      	cmp	r2, r3
 8114df8:	d006      	beq.n	8114e08 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8114dfa:	693b      	ldr	r3, [r7, #16]
 8114dfc:	685b      	ldr	r3, [r3, #4]
 8114dfe:	697a      	ldr	r2, [r7, #20]
 8114e00:	429a      	cmp	r2, r3
 8114e02:	d001      	beq.n	8114e08 <mem_link_valid+0x68>
    return 0;
 8114e04:	2300      	movs	r3, #0
 8114e06:	e000      	b.n	8114e0a <mem_link_valid+0x6a>
  }
  return 1;
 8114e08:	2301      	movs	r3, #1
}
 8114e0a:	4618      	mov	r0, r3
 8114e0c:	3718      	adds	r7, #24
 8114e0e:	46bd      	mov	sp, r7
 8114e10:	bd80      	pop	{r7, pc}
 8114e12:	bf00      	nop
 8114e14:	0001ffe8 	.word	0x0001ffe8
 8114e18:	1000b2d4 	.word	0x1000b2d4

08114e1c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8114e1c:	b580      	push	{r7, lr}
 8114e1e:	b088      	sub	sp, #32
 8114e20:	af00      	add	r7, sp, #0
 8114e22:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8114e24:	687b      	ldr	r3, [r7, #4]
 8114e26:	2b00      	cmp	r3, #0
 8114e28:	d070      	beq.n	8114f0c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8114e2a:	687b      	ldr	r3, [r7, #4]
 8114e2c:	f003 0303 	and.w	r3, r3, #3
 8114e30:	2b00      	cmp	r3, #0
 8114e32:	d00d      	beq.n	8114e50 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8114e34:	4b37      	ldr	r3, [pc, #220]	@ (8114f14 <mem_free+0xf8>)
 8114e36:	f240 2273 	movw	r2, #627	@ 0x273
 8114e3a:	4937      	ldr	r1, [pc, #220]	@ (8114f18 <mem_free+0xfc>)
 8114e3c:	4837      	ldr	r0, [pc, #220]	@ (8114f1c <mem_free+0x100>)
 8114e3e:	f008 ffcd 	bl	811dddc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8114e42:	f001 fdb3 	bl	81169ac <sys_arch_protect>
 8114e46:	60f8      	str	r0, [r7, #12]
 8114e48:	68f8      	ldr	r0, [r7, #12]
 8114e4a:	f001 fdbd 	bl	81169c8 <sys_arch_unprotect>
    return;
 8114e4e:	e05e      	b.n	8114f0e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8114e50:	687b      	ldr	r3, [r7, #4]
 8114e52:	3b0c      	subs	r3, #12
 8114e54:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8114e56:	4b32      	ldr	r3, [pc, #200]	@ (8114f20 <mem_free+0x104>)
 8114e58:	681b      	ldr	r3, [r3, #0]
 8114e5a:	69fa      	ldr	r2, [r7, #28]
 8114e5c:	429a      	cmp	r2, r3
 8114e5e:	d306      	bcc.n	8114e6e <mem_free+0x52>
 8114e60:	687b      	ldr	r3, [r7, #4]
 8114e62:	f103 020c 	add.w	r2, r3, #12
 8114e66:	4b2f      	ldr	r3, [pc, #188]	@ (8114f24 <mem_free+0x108>)
 8114e68:	681b      	ldr	r3, [r3, #0]
 8114e6a:	429a      	cmp	r2, r3
 8114e6c:	d90d      	bls.n	8114e8a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8114e6e:	4b29      	ldr	r3, [pc, #164]	@ (8114f14 <mem_free+0xf8>)
 8114e70:	f240 227f 	movw	r2, #639	@ 0x27f
 8114e74:	492c      	ldr	r1, [pc, #176]	@ (8114f28 <mem_free+0x10c>)
 8114e76:	4829      	ldr	r0, [pc, #164]	@ (8114f1c <mem_free+0x100>)
 8114e78:	f008 ffb0 	bl	811dddc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8114e7c:	f001 fd96 	bl	81169ac <sys_arch_protect>
 8114e80:	6138      	str	r0, [r7, #16]
 8114e82:	6938      	ldr	r0, [r7, #16]
 8114e84:	f001 fda0 	bl	81169c8 <sys_arch_unprotect>
    return;
 8114e88:	e041      	b.n	8114f0e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8114e8a:	4828      	ldr	r0, [pc, #160]	@ (8114f2c <mem_free+0x110>)
 8114e8c:	f001 fd52 	bl	8116934 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8114e90:	69fb      	ldr	r3, [r7, #28]
 8114e92:	7a1b      	ldrb	r3, [r3, #8]
 8114e94:	2b00      	cmp	r3, #0
 8114e96:	d110      	bne.n	8114eba <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8114e98:	4b1e      	ldr	r3, [pc, #120]	@ (8114f14 <mem_free+0xf8>)
 8114e9a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8114e9e:	4924      	ldr	r1, [pc, #144]	@ (8114f30 <mem_free+0x114>)
 8114ea0:	481e      	ldr	r0, [pc, #120]	@ (8114f1c <mem_free+0x100>)
 8114ea2:	f008 ff9b 	bl	811dddc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8114ea6:	4821      	ldr	r0, [pc, #132]	@ (8114f2c <mem_free+0x110>)
 8114ea8:	f001 fd53 	bl	8116952 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8114eac:	f001 fd7e 	bl	81169ac <sys_arch_protect>
 8114eb0:	6178      	str	r0, [r7, #20]
 8114eb2:	6978      	ldr	r0, [r7, #20]
 8114eb4:	f001 fd88 	bl	81169c8 <sys_arch_unprotect>
    return;
 8114eb8:	e029      	b.n	8114f0e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8114eba:	69f8      	ldr	r0, [r7, #28]
 8114ebc:	f7ff ff70 	bl	8114da0 <mem_link_valid>
 8114ec0:	4603      	mov	r3, r0
 8114ec2:	2b00      	cmp	r3, #0
 8114ec4:	d110      	bne.n	8114ee8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8114ec6:	4b13      	ldr	r3, [pc, #76]	@ (8114f14 <mem_free+0xf8>)
 8114ec8:	f240 2295 	movw	r2, #661	@ 0x295
 8114ecc:	4919      	ldr	r1, [pc, #100]	@ (8114f34 <mem_free+0x118>)
 8114ece:	4813      	ldr	r0, [pc, #76]	@ (8114f1c <mem_free+0x100>)
 8114ed0:	f008 ff84 	bl	811dddc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8114ed4:	4815      	ldr	r0, [pc, #84]	@ (8114f2c <mem_free+0x110>)
 8114ed6:	f001 fd3c 	bl	8116952 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8114eda:	f001 fd67 	bl	81169ac <sys_arch_protect>
 8114ede:	61b8      	str	r0, [r7, #24]
 8114ee0:	69b8      	ldr	r0, [r7, #24]
 8114ee2:	f001 fd71 	bl	81169c8 <sys_arch_unprotect>
    return;
 8114ee6:	e012      	b.n	8114f0e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8114ee8:	69fb      	ldr	r3, [r7, #28]
 8114eea:	2200      	movs	r2, #0
 8114eec:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 8114eee:	4b12      	ldr	r3, [pc, #72]	@ (8114f38 <mem_free+0x11c>)
 8114ef0:	681b      	ldr	r3, [r3, #0]
 8114ef2:	69fa      	ldr	r2, [r7, #28]
 8114ef4:	429a      	cmp	r2, r3
 8114ef6:	d202      	bcs.n	8114efe <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8114ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8114f38 <mem_free+0x11c>)
 8114efa:	69fb      	ldr	r3, [r7, #28]
 8114efc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8114efe:	69f8      	ldr	r0, [r7, #28]
 8114f00:	f7ff fe5e 	bl	8114bc0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8114f04:	4809      	ldr	r0, [pc, #36]	@ (8114f2c <mem_free+0x110>)
 8114f06:	f001 fd24 	bl	8116952 <sys_mutex_unlock>
 8114f0a:	e000      	b.n	8114f0e <mem_free+0xf2>
    return;
 8114f0c:	bf00      	nop
}
 8114f0e:	3720      	adds	r7, #32
 8114f10:	46bd      	mov	sp, r7
 8114f12:	bd80      	pop	{r7, pc}
 8114f14:	0811fdbc 	.word	0x0811fdbc
 8114f18:	0811feec 	.word	0x0811feec
 8114f1c:	0811fe44 	.word	0x0811fe44
 8114f20:	1000b2d0 	.word	0x1000b2d0
 8114f24:	1000b2d4 	.word	0x1000b2d4
 8114f28:	0811ff10 	.word	0x0811ff10
 8114f2c:	1000b2d8 	.word	0x1000b2d8
 8114f30:	0811ff2c 	.word	0x0811ff2c
 8114f34:	0811ff54 	.word	0x0811ff54
 8114f38:	1000b2dc 	.word	0x1000b2dc

08114f3c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8114f3c:	b580      	push	{r7, lr}
 8114f3e:	b08a      	sub	sp, #40	@ 0x28
 8114f40:	af00      	add	r7, sp, #0
 8114f42:	6078      	str	r0, [r7, #4]
 8114f44:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8114f46:	683b      	ldr	r3, [r7, #0]
 8114f48:	3303      	adds	r3, #3
 8114f4a:	f023 0303 	bic.w	r3, r3, #3
 8114f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 8114f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114f52:	2b0b      	cmp	r3, #11
 8114f54:	d801      	bhi.n	8114f5a <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8114f56:	230c      	movs	r3, #12
 8114f58:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8114f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114f5c:	4a6e      	ldr	r2, [pc, #440]	@ (8115118 <mem_trim+0x1dc>)
 8114f5e:	4293      	cmp	r3, r2
 8114f60:	d803      	bhi.n	8114f6a <mem_trim+0x2e>
 8114f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8114f64:	683b      	ldr	r3, [r7, #0]
 8114f66:	429a      	cmp	r2, r3
 8114f68:	d201      	bcs.n	8114f6e <mem_trim+0x32>
    return NULL;
 8114f6a:	2300      	movs	r3, #0
 8114f6c:	e0d0      	b.n	8115110 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8114f6e:	4b6b      	ldr	r3, [pc, #428]	@ (811511c <mem_trim+0x1e0>)
 8114f70:	681b      	ldr	r3, [r3, #0]
 8114f72:	687a      	ldr	r2, [r7, #4]
 8114f74:	429a      	cmp	r2, r3
 8114f76:	d304      	bcc.n	8114f82 <mem_trim+0x46>
 8114f78:	4b69      	ldr	r3, [pc, #420]	@ (8115120 <mem_trim+0x1e4>)
 8114f7a:	681b      	ldr	r3, [r3, #0]
 8114f7c:	687a      	ldr	r2, [r7, #4]
 8114f7e:	429a      	cmp	r2, r3
 8114f80:	d306      	bcc.n	8114f90 <mem_trim+0x54>
 8114f82:	4b68      	ldr	r3, [pc, #416]	@ (8115124 <mem_trim+0x1e8>)
 8114f84:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8114f88:	4967      	ldr	r1, [pc, #412]	@ (8115128 <mem_trim+0x1ec>)
 8114f8a:	4868      	ldr	r0, [pc, #416]	@ (811512c <mem_trim+0x1f0>)
 8114f8c:	f008 ff26 	bl	811dddc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8114f90:	4b62      	ldr	r3, [pc, #392]	@ (811511c <mem_trim+0x1e0>)
 8114f92:	681b      	ldr	r3, [r3, #0]
 8114f94:	687a      	ldr	r2, [r7, #4]
 8114f96:	429a      	cmp	r2, r3
 8114f98:	d304      	bcc.n	8114fa4 <mem_trim+0x68>
 8114f9a:	4b61      	ldr	r3, [pc, #388]	@ (8115120 <mem_trim+0x1e4>)
 8114f9c:	681b      	ldr	r3, [r3, #0]
 8114f9e:	687a      	ldr	r2, [r7, #4]
 8114fa0:	429a      	cmp	r2, r3
 8114fa2:	d307      	bcc.n	8114fb4 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8114fa4:	f001 fd02 	bl	81169ac <sys_arch_protect>
 8114fa8:	60b8      	str	r0, [r7, #8]
 8114faa:	68b8      	ldr	r0, [r7, #8]
 8114fac:	f001 fd0c 	bl	81169c8 <sys_arch_unprotect>
    return rmem;
 8114fb0:	687b      	ldr	r3, [r7, #4]
 8114fb2:	e0ad      	b.n	8115110 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8114fb4:	687b      	ldr	r3, [r7, #4]
 8114fb6:	3b0c      	subs	r3, #12
 8114fb8:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8114fba:	6a38      	ldr	r0, [r7, #32]
 8114fbc:	f7ff fdf0 	bl	8114ba0 <mem_to_ptr>
 8114fc0:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8114fc2:	6a3b      	ldr	r3, [r7, #32]
 8114fc4:	681a      	ldr	r2, [r3, #0]
 8114fc6:	69fb      	ldr	r3, [r7, #28]
 8114fc8:	1ad3      	subs	r3, r2, r3
 8114fca:	3b0c      	subs	r3, #12
 8114fcc:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8114fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8114fd0:	69bb      	ldr	r3, [r7, #24]
 8114fd2:	429a      	cmp	r2, r3
 8114fd4:	d906      	bls.n	8114fe4 <mem_trim+0xa8>
 8114fd6:	4b53      	ldr	r3, [pc, #332]	@ (8115124 <mem_trim+0x1e8>)
 8114fd8:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8114fdc:	4954      	ldr	r1, [pc, #336]	@ (8115130 <mem_trim+0x1f4>)
 8114fde:	4853      	ldr	r0, [pc, #332]	@ (811512c <mem_trim+0x1f0>)
 8114fe0:	f008 fefc 	bl	811dddc <iprintf>
  if (newsize > size) {
 8114fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8114fe6:	69bb      	ldr	r3, [r7, #24]
 8114fe8:	429a      	cmp	r2, r3
 8114fea:	d901      	bls.n	8114ff0 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 8114fec:	2300      	movs	r3, #0
 8114fee:	e08f      	b.n	8115110 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 8114ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8114ff2:	69bb      	ldr	r3, [r7, #24]
 8114ff4:	429a      	cmp	r2, r3
 8114ff6:	d101      	bne.n	8114ffc <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8114ff8:	687b      	ldr	r3, [r7, #4]
 8114ffa:	e089      	b.n	8115110 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8114ffc:	484d      	ldr	r0, [pc, #308]	@ (8115134 <mem_trim+0x1f8>)
 8114ffe:	f001 fc99 	bl	8116934 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8115002:	6a3b      	ldr	r3, [r7, #32]
 8115004:	681b      	ldr	r3, [r3, #0]
 8115006:	4618      	mov	r0, r3
 8115008:	f7ff fdba 	bl	8114b80 <ptr_to_mem>
 811500c:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 811500e:	697b      	ldr	r3, [r7, #20]
 8115010:	7a1b      	ldrb	r3, [r3, #8]
 8115012:	2b00      	cmp	r3, #0
 8115014:	d13c      	bne.n	8115090 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8115016:	6a3b      	ldr	r3, [r7, #32]
 8115018:	681b      	ldr	r3, [r3, #0]
 811501a:	4a3f      	ldr	r2, [pc, #252]	@ (8115118 <mem_trim+0x1dc>)
 811501c:	4293      	cmp	r3, r2
 811501e:	d106      	bne.n	811502e <mem_trim+0xf2>
 8115020:	4b40      	ldr	r3, [pc, #256]	@ (8115124 <mem_trim+0x1e8>)
 8115022:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8115026:	4944      	ldr	r1, [pc, #272]	@ (8115138 <mem_trim+0x1fc>)
 8115028:	4840      	ldr	r0, [pc, #256]	@ (811512c <mem_trim+0x1f0>)
 811502a:	f008 fed7 	bl	811dddc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 811502e:	697b      	ldr	r3, [r7, #20]
 8115030:	681b      	ldr	r3, [r3, #0]
 8115032:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8115034:	69fa      	ldr	r2, [r7, #28]
 8115036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115038:	4413      	add	r3, r2
 811503a:	330c      	adds	r3, #12
 811503c:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 811503e:	4b3f      	ldr	r3, [pc, #252]	@ (811513c <mem_trim+0x200>)
 8115040:	681b      	ldr	r3, [r3, #0]
 8115042:	697a      	ldr	r2, [r7, #20]
 8115044:	429a      	cmp	r2, r3
 8115046:	d105      	bne.n	8115054 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 8115048:	6938      	ldr	r0, [r7, #16]
 811504a:	f7ff fd99 	bl	8114b80 <ptr_to_mem>
 811504e:	4603      	mov	r3, r0
 8115050:	4a3a      	ldr	r2, [pc, #232]	@ (811513c <mem_trim+0x200>)
 8115052:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8115054:	6938      	ldr	r0, [r7, #16]
 8115056:	f7ff fd93 	bl	8114b80 <ptr_to_mem>
 811505a:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 811505c:	697b      	ldr	r3, [r7, #20]
 811505e:	2200      	movs	r2, #0
 8115060:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 8115062:	697b      	ldr	r3, [r7, #20]
 8115064:	68fa      	ldr	r2, [r7, #12]
 8115066:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8115068:	697b      	ldr	r3, [r7, #20]
 811506a:	69fa      	ldr	r2, [r7, #28]
 811506c:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 811506e:	6a3b      	ldr	r3, [r7, #32]
 8115070:	693a      	ldr	r2, [r7, #16]
 8115072:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8115074:	697b      	ldr	r3, [r7, #20]
 8115076:	681b      	ldr	r3, [r3, #0]
 8115078:	4a27      	ldr	r2, [pc, #156]	@ (8115118 <mem_trim+0x1dc>)
 811507a:	4293      	cmp	r3, r2
 811507c:	d044      	beq.n	8115108 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 811507e:	697b      	ldr	r3, [r7, #20]
 8115080:	681b      	ldr	r3, [r3, #0]
 8115082:	4618      	mov	r0, r3
 8115084:	f7ff fd7c 	bl	8114b80 <ptr_to_mem>
 8115088:	4602      	mov	r2, r0
 811508a:	693b      	ldr	r3, [r7, #16]
 811508c:	6053      	str	r3, [r2, #4]
 811508e:	e03b      	b.n	8115108 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8115090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115092:	3318      	adds	r3, #24
 8115094:	69ba      	ldr	r2, [r7, #24]
 8115096:	429a      	cmp	r2, r3
 8115098:	d336      	bcc.n	8115108 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 811509a:	69fa      	ldr	r2, [r7, #28]
 811509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811509e:	4413      	add	r3, r2
 81150a0:	330c      	adds	r3, #12
 81150a2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 81150a4:	6a3b      	ldr	r3, [r7, #32]
 81150a6:	681b      	ldr	r3, [r3, #0]
 81150a8:	4a1b      	ldr	r2, [pc, #108]	@ (8115118 <mem_trim+0x1dc>)
 81150aa:	4293      	cmp	r3, r2
 81150ac:	d106      	bne.n	81150bc <mem_trim+0x180>
 81150ae:	4b1d      	ldr	r3, [pc, #116]	@ (8115124 <mem_trim+0x1e8>)
 81150b0:	f240 3216 	movw	r2, #790	@ 0x316
 81150b4:	4920      	ldr	r1, [pc, #128]	@ (8115138 <mem_trim+0x1fc>)
 81150b6:	481d      	ldr	r0, [pc, #116]	@ (811512c <mem_trim+0x1f0>)
 81150b8:	f008 fe90 	bl	811dddc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 81150bc:	6938      	ldr	r0, [r7, #16]
 81150be:	f7ff fd5f 	bl	8114b80 <ptr_to_mem>
 81150c2:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 81150c4:	4b1d      	ldr	r3, [pc, #116]	@ (811513c <mem_trim+0x200>)
 81150c6:	681b      	ldr	r3, [r3, #0]
 81150c8:	697a      	ldr	r2, [r7, #20]
 81150ca:	429a      	cmp	r2, r3
 81150cc:	d202      	bcs.n	81150d4 <mem_trim+0x198>
      lfree = mem2;
 81150ce:	4a1b      	ldr	r2, [pc, #108]	@ (811513c <mem_trim+0x200>)
 81150d0:	697b      	ldr	r3, [r7, #20]
 81150d2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 81150d4:	697b      	ldr	r3, [r7, #20]
 81150d6:	2200      	movs	r2, #0
 81150d8:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 81150da:	6a3b      	ldr	r3, [r7, #32]
 81150dc:	681a      	ldr	r2, [r3, #0]
 81150de:	697b      	ldr	r3, [r7, #20]
 81150e0:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 81150e2:	697b      	ldr	r3, [r7, #20]
 81150e4:	69fa      	ldr	r2, [r7, #28]
 81150e6:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 81150e8:	6a3b      	ldr	r3, [r7, #32]
 81150ea:	693a      	ldr	r2, [r7, #16]
 81150ec:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 81150ee:	697b      	ldr	r3, [r7, #20]
 81150f0:	681b      	ldr	r3, [r3, #0]
 81150f2:	4a09      	ldr	r2, [pc, #36]	@ (8115118 <mem_trim+0x1dc>)
 81150f4:	4293      	cmp	r3, r2
 81150f6:	d007      	beq.n	8115108 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 81150f8:	697b      	ldr	r3, [r7, #20]
 81150fa:	681b      	ldr	r3, [r3, #0]
 81150fc:	4618      	mov	r0, r3
 81150fe:	f7ff fd3f 	bl	8114b80 <ptr_to_mem>
 8115102:	4602      	mov	r2, r0
 8115104:	693b      	ldr	r3, [r7, #16]
 8115106:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8115108:	480a      	ldr	r0, [pc, #40]	@ (8115134 <mem_trim+0x1f8>)
 811510a:	f001 fc22 	bl	8116952 <sys_mutex_unlock>
  return rmem;
 811510e:	687b      	ldr	r3, [r7, #4]
}
 8115110:	4618      	mov	r0, r3
 8115112:	3728      	adds	r7, #40	@ 0x28
 8115114:	46bd      	mov	sp, r7
 8115116:	bd80      	pop	{r7, pc}
 8115118:	0001ffe8 	.word	0x0001ffe8
 811511c:	1000b2d0 	.word	0x1000b2d0
 8115120:	1000b2d4 	.word	0x1000b2d4
 8115124:	0811fdbc 	.word	0x0811fdbc
 8115128:	0811ff88 	.word	0x0811ff88
 811512c:	0811fe44 	.word	0x0811fe44
 8115130:	0811ffa0 	.word	0x0811ffa0
 8115134:	1000b2d8 	.word	0x1000b2d8
 8115138:	0811ffc0 	.word	0x0811ffc0
 811513c:	1000b2dc 	.word	0x1000b2dc

08115140 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8115140:	b580      	push	{r7, lr}
 8115142:	b088      	sub	sp, #32
 8115144:	af00      	add	r7, sp, #0
 8115146:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8115148:	687b      	ldr	r3, [r7, #4]
 811514a:	2b00      	cmp	r3, #0
 811514c:	d101      	bne.n	8115152 <mem_malloc+0x12>
    return NULL;
 811514e:	2300      	movs	r3, #0
 8115150:	e0db      	b.n	811530a <mem_malloc+0x1ca>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8115152:	687b      	ldr	r3, [r7, #4]
 8115154:	3303      	adds	r3, #3
 8115156:	f023 0303 	bic.w	r3, r3, #3
 811515a:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 811515c:	69bb      	ldr	r3, [r7, #24]
 811515e:	2b0b      	cmp	r3, #11
 8115160:	d801      	bhi.n	8115166 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8115162:	230c      	movs	r3, #12
 8115164:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8115166:	69bb      	ldr	r3, [r7, #24]
 8115168:	4a6a      	ldr	r2, [pc, #424]	@ (8115314 <mem_malloc+0x1d4>)
 811516a:	4293      	cmp	r3, r2
 811516c:	d803      	bhi.n	8115176 <mem_malloc+0x36>
 811516e:	69ba      	ldr	r2, [r7, #24]
 8115170:	687b      	ldr	r3, [r7, #4]
 8115172:	429a      	cmp	r2, r3
 8115174:	d201      	bcs.n	811517a <mem_malloc+0x3a>
    return NULL;
 8115176:	2300      	movs	r3, #0
 8115178:	e0c7      	b.n	811530a <mem_malloc+0x1ca>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 811517a:	4867      	ldr	r0, [pc, #412]	@ (8115318 <mem_malloc+0x1d8>)
 811517c:	f001 fbda 	bl	8116934 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8115180:	4b66      	ldr	r3, [pc, #408]	@ (811531c <mem_malloc+0x1dc>)
 8115182:	681b      	ldr	r3, [r3, #0]
 8115184:	4618      	mov	r0, r3
 8115186:	f7ff fd0b 	bl	8114ba0 <mem_to_ptr>
 811518a:	61f8      	str	r0, [r7, #28]
 811518c:	e0b0      	b.n	81152f0 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 811518e:	69f8      	ldr	r0, [r7, #28]
 8115190:	f7ff fcf6 	bl	8114b80 <ptr_to_mem>
 8115194:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8115196:	693b      	ldr	r3, [r7, #16]
 8115198:	7a1b      	ldrb	r3, [r3, #8]
 811519a:	2b00      	cmp	r3, #0
 811519c:	f040 80a2 	bne.w	81152e4 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 81151a0:	693b      	ldr	r3, [r7, #16]
 81151a2:	681a      	ldr	r2, [r3, #0]
 81151a4:	69fb      	ldr	r3, [r7, #28]
 81151a6:	1ad3      	subs	r3, r2, r3
 81151a8:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 81151aa:	69ba      	ldr	r2, [r7, #24]
 81151ac:	429a      	cmp	r2, r3
 81151ae:	f200 8099 	bhi.w	81152e4 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 81151b2:	693b      	ldr	r3, [r7, #16]
 81151b4:	681a      	ldr	r2, [r3, #0]
 81151b6:	69fb      	ldr	r3, [r7, #28]
 81151b8:	1ad3      	subs	r3, r2, r3
 81151ba:	f1a3 020c 	sub.w	r2, r3, #12
 81151be:	69bb      	ldr	r3, [r7, #24]
 81151c0:	3318      	adds	r3, #24
 81151c2:	429a      	cmp	r2, r3
 81151c4:	d331      	bcc.n	811522a <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 81151c6:	69fa      	ldr	r2, [r7, #28]
 81151c8:	69bb      	ldr	r3, [r7, #24]
 81151ca:	4413      	add	r3, r2
 81151cc:	330c      	adds	r3, #12
 81151ce:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 81151d0:	68fb      	ldr	r3, [r7, #12]
 81151d2:	4a50      	ldr	r2, [pc, #320]	@ (8115314 <mem_malloc+0x1d4>)
 81151d4:	4293      	cmp	r3, r2
 81151d6:	d106      	bne.n	81151e6 <mem_malloc+0xa6>
 81151d8:	4b51      	ldr	r3, [pc, #324]	@ (8115320 <mem_malloc+0x1e0>)
 81151da:	f240 3287 	movw	r2, #903	@ 0x387
 81151de:	4951      	ldr	r1, [pc, #324]	@ (8115324 <mem_malloc+0x1e4>)
 81151e0:	4851      	ldr	r0, [pc, #324]	@ (8115328 <mem_malloc+0x1e8>)
 81151e2:	f008 fdfb 	bl	811dddc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 81151e6:	68f8      	ldr	r0, [r7, #12]
 81151e8:	f7ff fcca 	bl	8114b80 <ptr_to_mem>
 81151ec:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 81151ee:	68bb      	ldr	r3, [r7, #8]
 81151f0:	2200      	movs	r2, #0
 81151f2:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 81151f4:	693b      	ldr	r3, [r7, #16]
 81151f6:	681a      	ldr	r2, [r3, #0]
 81151f8:	68bb      	ldr	r3, [r7, #8]
 81151fa:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 81151fc:	68bb      	ldr	r3, [r7, #8]
 81151fe:	69fa      	ldr	r2, [r7, #28]
 8115200:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8115202:	693b      	ldr	r3, [r7, #16]
 8115204:	68fa      	ldr	r2, [r7, #12]
 8115206:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 8115208:	693b      	ldr	r3, [r7, #16]
 811520a:	2201      	movs	r2, #1
 811520c:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 811520e:	68bb      	ldr	r3, [r7, #8]
 8115210:	681b      	ldr	r3, [r3, #0]
 8115212:	4a40      	ldr	r2, [pc, #256]	@ (8115314 <mem_malloc+0x1d4>)
 8115214:	4293      	cmp	r3, r2
 8115216:	d00b      	beq.n	8115230 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8115218:	68bb      	ldr	r3, [r7, #8]
 811521a:	681b      	ldr	r3, [r3, #0]
 811521c:	4618      	mov	r0, r3
 811521e:	f7ff fcaf 	bl	8114b80 <ptr_to_mem>
 8115222:	4602      	mov	r2, r0
 8115224:	68fb      	ldr	r3, [r7, #12]
 8115226:	6053      	str	r3, [r2, #4]
 8115228:	e002      	b.n	8115230 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 811522a:	693b      	ldr	r3, [r7, #16]
 811522c:	2201      	movs	r2, #1
 811522e:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8115230:	4b3a      	ldr	r3, [pc, #232]	@ (811531c <mem_malloc+0x1dc>)
 8115232:	681b      	ldr	r3, [r3, #0]
 8115234:	693a      	ldr	r2, [r7, #16]
 8115236:	429a      	cmp	r2, r3
 8115238:	d127      	bne.n	811528a <mem_malloc+0x14a>
          struct mem *cur = lfree;
 811523a:	4b38      	ldr	r3, [pc, #224]	@ (811531c <mem_malloc+0x1dc>)
 811523c:	681b      	ldr	r3, [r3, #0]
 811523e:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8115240:	e005      	b.n	811524e <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8115242:	697b      	ldr	r3, [r7, #20]
 8115244:	681b      	ldr	r3, [r3, #0]
 8115246:	4618      	mov	r0, r3
 8115248:	f7ff fc9a 	bl	8114b80 <ptr_to_mem>
 811524c:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 811524e:	697b      	ldr	r3, [r7, #20]
 8115250:	7a1b      	ldrb	r3, [r3, #8]
 8115252:	2b00      	cmp	r3, #0
 8115254:	d004      	beq.n	8115260 <mem_malloc+0x120>
 8115256:	4b35      	ldr	r3, [pc, #212]	@ (811532c <mem_malloc+0x1ec>)
 8115258:	681b      	ldr	r3, [r3, #0]
 811525a:	697a      	ldr	r2, [r7, #20]
 811525c:	429a      	cmp	r2, r3
 811525e:	d1f0      	bne.n	8115242 <mem_malloc+0x102>
          }
          lfree = cur;
 8115260:	4a2e      	ldr	r2, [pc, #184]	@ (811531c <mem_malloc+0x1dc>)
 8115262:	697b      	ldr	r3, [r7, #20]
 8115264:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8115266:	4b2d      	ldr	r3, [pc, #180]	@ (811531c <mem_malloc+0x1dc>)
 8115268:	681a      	ldr	r2, [r3, #0]
 811526a:	4b30      	ldr	r3, [pc, #192]	@ (811532c <mem_malloc+0x1ec>)
 811526c:	681b      	ldr	r3, [r3, #0]
 811526e:	429a      	cmp	r2, r3
 8115270:	d00b      	beq.n	811528a <mem_malloc+0x14a>
 8115272:	4b2a      	ldr	r3, [pc, #168]	@ (811531c <mem_malloc+0x1dc>)
 8115274:	681b      	ldr	r3, [r3, #0]
 8115276:	7a1b      	ldrb	r3, [r3, #8]
 8115278:	2b00      	cmp	r3, #0
 811527a:	d006      	beq.n	811528a <mem_malloc+0x14a>
 811527c:	4b28      	ldr	r3, [pc, #160]	@ (8115320 <mem_malloc+0x1e0>)
 811527e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8115282:	492b      	ldr	r1, [pc, #172]	@ (8115330 <mem_malloc+0x1f0>)
 8115284:	4828      	ldr	r0, [pc, #160]	@ (8115328 <mem_malloc+0x1e8>)
 8115286:	f008 fda9 	bl	811dddc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 811528a:	4823      	ldr	r0, [pc, #140]	@ (8115318 <mem_malloc+0x1d8>)
 811528c:	f001 fb61 	bl	8116952 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8115290:	693a      	ldr	r2, [r7, #16]
 8115292:	69bb      	ldr	r3, [r7, #24]
 8115294:	4413      	add	r3, r2
 8115296:	330c      	adds	r3, #12
 8115298:	4a24      	ldr	r2, [pc, #144]	@ (811532c <mem_malloc+0x1ec>)
 811529a:	6812      	ldr	r2, [r2, #0]
 811529c:	4293      	cmp	r3, r2
 811529e:	d906      	bls.n	81152ae <mem_malloc+0x16e>
 81152a0:	4b1f      	ldr	r3, [pc, #124]	@ (8115320 <mem_malloc+0x1e0>)
 81152a2:	f240 32b9 	movw	r2, #953	@ 0x3b9
 81152a6:	4923      	ldr	r1, [pc, #140]	@ (8115334 <mem_malloc+0x1f4>)
 81152a8:	481f      	ldr	r0, [pc, #124]	@ (8115328 <mem_malloc+0x1e8>)
 81152aa:	f008 fd97 	bl	811dddc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 81152ae:	693b      	ldr	r3, [r7, #16]
 81152b0:	f003 0303 	and.w	r3, r3, #3
 81152b4:	2b00      	cmp	r3, #0
 81152b6:	d006      	beq.n	81152c6 <mem_malloc+0x186>
 81152b8:	4b19      	ldr	r3, [pc, #100]	@ (8115320 <mem_malloc+0x1e0>)
 81152ba:	f240 32bb 	movw	r2, #955	@ 0x3bb
 81152be:	491e      	ldr	r1, [pc, #120]	@ (8115338 <mem_malloc+0x1f8>)
 81152c0:	4819      	ldr	r0, [pc, #100]	@ (8115328 <mem_malloc+0x1e8>)
 81152c2:	f008 fd8b 	bl	811dddc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 81152c6:	693b      	ldr	r3, [r7, #16]
 81152c8:	f003 0303 	and.w	r3, r3, #3
 81152cc:	2b00      	cmp	r3, #0
 81152ce:	d006      	beq.n	81152de <mem_malloc+0x19e>
 81152d0:	4b13      	ldr	r3, [pc, #76]	@ (8115320 <mem_malloc+0x1e0>)
 81152d2:	f240 32bd 	movw	r2, #957	@ 0x3bd
 81152d6:	4919      	ldr	r1, [pc, #100]	@ (811533c <mem_malloc+0x1fc>)
 81152d8:	4813      	ldr	r0, [pc, #76]	@ (8115328 <mem_malloc+0x1e8>)
 81152da:	f008 fd7f 	bl	811dddc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 81152de:	693b      	ldr	r3, [r7, #16]
 81152e0:	330c      	adds	r3, #12
 81152e2:	e012      	b.n	811530a <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
 81152e4:	69f8      	ldr	r0, [r7, #28]
 81152e6:	f7ff fc4b 	bl	8114b80 <ptr_to_mem>
 81152ea:	4603      	mov	r3, r0
 81152ec:	681b      	ldr	r3, [r3, #0]
 81152ee:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 81152f0:	69bb      	ldr	r3, [r7, #24]
 81152f2:	f5c3 33ff 	rsb	r3, r3, #130560	@ 0x1fe00
 81152f6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 81152fa:	69fa      	ldr	r2, [r7, #28]
 81152fc:	429a      	cmp	r2, r3
 81152fe:	f4ff af46 	bcc.w	811518e <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8115302:	4805      	ldr	r0, [pc, #20]	@ (8115318 <mem_malloc+0x1d8>)
 8115304:	f001 fb25 	bl	8116952 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8115308:	2300      	movs	r3, #0
}
 811530a:	4618      	mov	r0, r3
 811530c:	3720      	adds	r7, #32
 811530e:	46bd      	mov	sp, r7
 8115310:	bd80      	pop	{r7, pc}
 8115312:	bf00      	nop
 8115314:	0001ffe8 	.word	0x0001ffe8
 8115318:	1000b2d8 	.word	0x1000b2d8
 811531c:	1000b2dc 	.word	0x1000b2dc
 8115320:	0811fdbc 	.word	0x0811fdbc
 8115324:	0811ffc0 	.word	0x0811ffc0
 8115328:	0811fe44 	.word	0x0811fe44
 811532c:	1000b2d4 	.word	0x1000b2d4
 8115330:	0811ffd4 	.word	0x0811ffd4
 8115334:	0811fff0 	.word	0x0811fff0
 8115338:	08120020 	.word	0x08120020
 811533c:	08120050 	.word	0x08120050

08115340 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8115340:	b480      	push	{r7}
 8115342:	b085      	sub	sp, #20
 8115344:	af00      	add	r7, sp, #0
 8115346:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8115348:	687b      	ldr	r3, [r7, #4]
 811534a:	689b      	ldr	r3, [r3, #8]
 811534c:	2200      	movs	r2, #0
 811534e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8115350:	687b      	ldr	r3, [r7, #4]
 8115352:	685b      	ldr	r3, [r3, #4]
 8115354:	3303      	adds	r3, #3
 8115356:	f023 0303 	bic.w	r3, r3, #3
 811535a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 811535c:	2300      	movs	r3, #0
 811535e:	60fb      	str	r3, [r7, #12]
 8115360:	e011      	b.n	8115386 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8115362:	687b      	ldr	r3, [r7, #4]
 8115364:	689b      	ldr	r3, [r3, #8]
 8115366:	681a      	ldr	r2, [r3, #0]
 8115368:	68bb      	ldr	r3, [r7, #8]
 811536a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 811536c:	687b      	ldr	r3, [r7, #4]
 811536e:	689b      	ldr	r3, [r3, #8]
 8115370:	68ba      	ldr	r2, [r7, #8]
 8115372:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8115374:	687b      	ldr	r3, [r7, #4]
 8115376:	881b      	ldrh	r3, [r3, #0]
 8115378:	461a      	mov	r2, r3
 811537a:	68bb      	ldr	r3, [r7, #8]
 811537c:	4413      	add	r3, r2
 811537e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8115380:	68fb      	ldr	r3, [r7, #12]
 8115382:	3301      	adds	r3, #1
 8115384:	60fb      	str	r3, [r7, #12]
 8115386:	687b      	ldr	r3, [r7, #4]
 8115388:	885b      	ldrh	r3, [r3, #2]
 811538a:	461a      	mov	r2, r3
 811538c:	68fb      	ldr	r3, [r7, #12]
 811538e:	4293      	cmp	r3, r2
 8115390:	dbe7      	blt.n	8115362 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8115392:	bf00      	nop
 8115394:	bf00      	nop
 8115396:	3714      	adds	r7, #20
 8115398:	46bd      	mov	sp, r7
 811539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811539e:	4770      	bx	lr

081153a0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 81153a0:	b580      	push	{r7, lr}
 81153a2:	b082      	sub	sp, #8
 81153a4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 81153a6:	2300      	movs	r3, #0
 81153a8:	80fb      	strh	r3, [r7, #6]
 81153aa:	e009      	b.n	81153c0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 81153ac:	88fb      	ldrh	r3, [r7, #6]
 81153ae:	4a08      	ldr	r2, [pc, #32]	@ (81153d0 <memp_init+0x30>)
 81153b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81153b4:	4618      	mov	r0, r3
 81153b6:	f7ff ffc3 	bl	8115340 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 81153ba:	88fb      	ldrh	r3, [r7, #6]
 81153bc:	3301      	adds	r3, #1
 81153be:	80fb      	strh	r3, [r7, #6]
 81153c0:	88fb      	ldrh	r3, [r7, #6]
 81153c2:	2b0c      	cmp	r3, #12
 81153c4:	d9f2      	bls.n	81153ac <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 81153c6:	bf00      	nop
 81153c8:	bf00      	nop
 81153ca:	3708      	adds	r7, #8
 81153cc:	46bd      	mov	sp, r7
 81153ce:	bd80      	pop	{r7, pc}
 81153d0:	08122578 	.word	0x08122578

081153d4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 81153d4:	b580      	push	{r7, lr}
 81153d6:	b084      	sub	sp, #16
 81153d8:	af00      	add	r7, sp, #0
 81153da:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 81153dc:	f001 fae6 	bl	81169ac <sys_arch_protect>
 81153e0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 81153e2:	687b      	ldr	r3, [r7, #4]
 81153e4:	689b      	ldr	r3, [r3, #8]
 81153e6:	681b      	ldr	r3, [r3, #0]
 81153e8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 81153ea:	68bb      	ldr	r3, [r7, #8]
 81153ec:	2b00      	cmp	r3, #0
 81153ee:	d015      	beq.n	811541c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 81153f0:	687b      	ldr	r3, [r7, #4]
 81153f2:	689b      	ldr	r3, [r3, #8]
 81153f4:	68ba      	ldr	r2, [r7, #8]
 81153f6:	6812      	ldr	r2, [r2, #0]
 81153f8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 81153fa:	68bb      	ldr	r3, [r7, #8]
 81153fc:	f003 0303 	and.w	r3, r3, #3
 8115400:	2b00      	cmp	r3, #0
 8115402:	d006      	beq.n	8115412 <do_memp_malloc_pool+0x3e>
 8115404:	4b09      	ldr	r3, [pc, #36]	@ (811542c <do_memp_malloc_pool+0x58>)
 8115406:	f44f 728c 	mov.w	r2, #280	@ 0x118
 811540a:	4909      	ldr	r1, [pc, #36]	@ (8115430 <do_memp_malloc_pool+0x5c>)
 811540c:	4809      	ldr	r0, [pc, #36]	@ (8115434 <do_memp_malloc_pool+0x60>)
 811540e:	f008 fce5 	bl	811dddc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8115412:	68f8      	ldr	r0, [r7, #12]
 8115414:	f001 fad8 	bl	81169c8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8115418:	68bb      	ldr	r3, [r7, #8]
 811541a:	e003      	b.n	8115424 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 811541c:	68f8      	ldr	r0, [r7, #12]
 811541e:	f001 fad3 	bl	81169c8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8115422:	2300      	movs	r3, #0
}
 8115424:	4618      	mov	r0, r3
 8115426:	3710      	adds	r7, #16
 8115428:	46bd      	mov	sp, r7
 811542a:	bd80      	pop	{r7, pc}
 811542c:	08120074 	.word	0x08120074
 8115430:	081200e4 	.word	0x081200e4
 8115434:	08120108 	.word	0x08120108

08115438 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8115438:	b580      	push	{r7, lr}
 811543a:	b082      	sub	sp, #8
 811543c:	af00      	add	r7, sp, #0
 811543e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8115440:	687b      	ldr	r3, [r7, #4]
 8115442:	2b00      	cmp	r3, #0
 8115444:	d106      	bne.n	8115454 <memp_malloc_pool+0x1c>
 8115446:	4b0a      	ldr	r3, [pc, #40]	@ (8115470 <memp_malloc_pool+0x38>)
 8115448:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 811544c:	4909      	ldr	r1, [pc, #36]	@ (8115474 <memp_malloc_pool+0x3c>)
 811544e:	480a      	ldr	r0, [pc, #40]	@ (8115478 <memp_malloc_pool+0x40>)
 8115450:	f008 fcc4 	bl	811dddc <iprintf>
  if (desc == NULL) {
 8115454:	687b      	ldr	r3, [r7, #4]
 8115456:	2b00      	cmp	r3, #0
 8115458:	d101      	bne.n	811545e <memp_malloc_pool+0x26>
    return NULL;
 811545a:	2300      	movs	r3, #0
 811545c:	e003      	b.n	8115466 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 811545e:	6878      	ldr	r0, [r7, #4]
 8115460:	f7ff ffb8 	bl	81153d4 <do_memp_malloc_pool>
 8115464:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8115466:	4618      	mov	r0, r3
 8115468:	3708      	adds	r7, #8
 811546a:	46bd      	mov	sp, r7
 811546c:	bd80      	pop	{r7, pc}
 811546e:	bf00      	nop
 8115470:	08120074 	.word	0x08120074
 8115474:	08120130 	.word	0x08120130
 8115478:	08120108 	.word	0x08120108

0811547c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 811547c:	b580      	push	{r7, lr}
 811547e:	b084      	sub	sp, #16
 8115480:	af00      	add	r7, sp, #0
 8115482:	4603      	mov	r3, r0
 8115484:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8115486:	79fb      	ldrb	r3, [r7, #7]
 8115488:	2b0c      	cmp	r3, #12
 811548a:	d908      	bls.n	811549e <memp_malloc+0x22>
 811548c:	4b0a      	ldr	r3, [pc, #40]	@ (81154b8 <memp_malloc+0x3c>)
 811548e:	f240 1257 	movw	r2, #343	@ 0x157
 8115492:	490a      	ldr	r1, [pc, #40]	@ (81154bc <memp_malloc+0x40>)
 8115494:	480a      	ldr	r0, [pc, #40]	@ (81154c0 <memp_malloc+0x44>)
 8115496:	f008 fca1 	bl	811dddc <iprintf>
 811549a:	2300      	movs	r3, #0
 811549c:	e008      	b.n	81154b0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 811549e:	79fb      	ldrb	r3, [r7, #7]
 81154a0:	4a08      	ldr	r2, [pc, #32]	@ (81154c4 <memp_malloc+0x48>)
 81154a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81154a6:	4618      	mov	r0, r3
 81154a8:	f7ff ff94 	bl	81153d4 <do_memp_malloc_pool>
 81154ac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 81154ae:	68fb      	ldr	r3, [r7, #12]
}
 81154b0:	4618      	mov	r0, r3
 81154b2:	3710      	adds	r7, #16
 81154b4:	46bd      	mov	sp, r7
 81154b6:	bd80      	pop	{r7, pc}
 81154b8:	08120074 	.word	0x08120074
 81154bc:	08120144 	.word	0x08120144
 81154c0:	08120108 	.word	0x08120108
 81154c4:	08122578 	.word	0x08122578

081154c8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 81154c8:	b580      	push	{r7, lr}
 81154ca:	b084      	sub	sp, #16
 81154cc:	af00      	add	r7, sp, #0
 81154ce:	6078      	str	r0, [r7, #4]
 81154d0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 81154d2:	683b      	ldr	r3, [r7, #0]
 81154d4:	f003 0303 	and.w	r3, r3, #3
 81154d8:	2b00      	cmp	r3, #0
 81154da:	d006      	beq.n	81154ea <do_memp_free_pool+0x22>
 81154dc:	4b0d      	ldr	r3, [pc, #52]	@ (8115514 <do_memp_free_pool+0x4c>)
 81154de:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 81154e2:	490d      	ldr	r1, [pc, #52]	@ (8115518 <do_memp_free_pool+0x50>)
 81154e4:	480d      	ldr	r0, [pc, #52]	@ (811551c <do_memp_free_pool+0x54>)
 81154e6:	f008 fc79 	bl	811dddc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 81154ea:	683b      	ldr	r3, [r7, #0]
 81154ec:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 81154ee:	f001 fa5d 	bl	81169ac <sys_arch_protect>
 81154f2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 81154f4:	687b      	ldr	r3, [r7, #4]
 81154f6:	689b      	ldr	r3, [r3, #8]
 81154f8:	681a      	ldr	r2, [r3, #0]
 81154fa:	68fb      	ldr	r3, [r7, #12]
 81154fc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 81154fe:	687b      	ldr	r3, [r7, #4]
 8115500:	689b      	ldr	r3, [r3, #8]
 8115502:	68fa      	ldr	r2, [r7, #12]
 8115504:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8115506:	68b8      	ldr	r0, [r7, #8]
 8115508:	f001 fa5e 	bl	81169c8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 811550c:	bf00      	nop
 811550e:	3710      	adds	r7, #16
 8115510:	46bd      	mov	sp, r7
 8115512:	bd80      	pop	{r7, pc}
 8115514:	08120074 	.word	0x08120074
 8115518:	08120164 	.word	0x08120164
 811551c:	08120108 	.word	0x08120108

08115520 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8115520:	b580      	push	{r7, lr}
 8115522:	b082      	sub	sp, #8
 8115524:	af00      	add	r7, sp, #0
 8115526:	6078      	str	r0, [r7, #4]
 8115528:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 811552a:	687b      	ldr	r3, [r7, #4]
 811552c:	2b00      	cmp	r3, #0
 811552e:	d106      	bne.n	811553e <memp_free_pool+0x1e>
 8115530:	4b0a      	ldr	r3, [pc, #40]	@ (811555c <memp_free_pool+0x3c>)
 8115532:	f240 1295 	movw	r2, #405	@ 0x195
 8115536:	490a      	ldr	r1, [pc, #40]	@ (8115560 <memp_free_pool+0x40>)
 8115538:	480a      	ldr	r0, [pc, #40]	@ (8115564 <memp_free_pool+0x44>)
 811553a:	f008 fc4f 	bl	811dddc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 811553e:	687b      	ldr	r3, [r7, #4]
 8115540:	2b00      	cmp	r3, #0
 8115542:	d007      	beq.n	8115554 <memp_free_pool+0x34>
 8115544:	683b      	ldr	r3, [r7, #0]
 8115546:	2b00      	cmp	r3, #0
 8115548:	d004      	beq.n	8115554 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 811554a:	6839      	ldr	r1, [r7, #0]
 811554c:	6878      	ldr	r0, [r7, #4]
 811554e:	f7ff ffbb 	bl	81154c8 <do_memp_free_pool>
 8115552:	e000      	b.n	8115556 <memp_free_pool+0x36>
    return;
 8115554:	bf00      	nop
}
 8115556:	3708      	adds	r7, #8
 8115558:	46bd      	mov	sp, r7
 811555a:	bd80      	pop	{r7, pc}
 811555c:	08120074 	.word	0x08120074
 8115560:	08120130 	.word	0x08120130
 8115564:	08120108 	.word	0x08120108

08115568 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8115568:	b580      	push	{r7, lr}
 811556a:	b082      	sub	sp, #8
 811556c:	af00      	add	r7, sp, #0
 811556e:	4603      	mov	r3, r0
 8115570:	6039      	str	r1, [r7, #0]
 8115572:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8115574:	79fb      	ldrb	r3, [r7, #7]
 8115576:	2b0c      	cmp	r3, #12
 8115578:	d907      	bls.n	811558a <memp_free+0x22>
 811557a:	4b0c      	ldr	r3, [pc, #48]	@ (81155ac <memp_free+0x44>)
 811557c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8115580:	490b      	ldr	r1, [pc, #44]	@ (81155b0 <memp_free+0x48>)
 8115582:	480c      	ldr	r0, [pc, #48]	@ (81155b4 <memp_free+0x4c>)
 8115584:	f008 fc2a 	bl	811dddc <iprintf>
 8115588:	e00c      	b.n	81155a4 <memp_free+0x3c>

  if (mem == NULL) {
 811558a:	683b      	ldr	r3, [r7, #0]
 811558c:	2b00      	cmp	r3, #0
 811558e:	d008      	beq.n	81155a2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8115590:	79fb      	ldrb	r3, [r7, #7]
 8115592:	4a09      	ldr	r2, [pc, #36]	@ (81155b8 <memp_free+0x50>)
 8115594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8115598:	6839      	ldr	r1, [r7, #0]
 811559a:	4618      	mov	r0, r3
 811559c:	f7ff ff94 	bl	81154c8 <do_memp_free_pool>
 81155a0:	e000      	b.n	81155a4 <memp_free+0x3c>
    return;
 81155a2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 81155a4:	3708      	adds	r7, #8
 81155a6:	46bd      	mov	sp, r7
 81155a8:	bd80      	pop	{r7, pc}
 81155aa:	bf00      	nop
 81155ac:	08120074 	.word	0x08120074
 81155b0:	08120184 	.word	0x08120184
 81155b4:	08120108 	.word	0x08120108
 81155b8:	08122578 	.word	0x08122578

081155bc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 81155bc:	b480      	push	{r7}
 81155be:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 81155c0:	bf00      	nop
 81155c2:	46bd      	mov	sp, r7
 81155c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81155c8:	4770      	bx	lr
	...

081155cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 81155cc:	b580      	push	{r7, lr}
 81155ce:	b086      	sub	sp, #24
 81155d0:	af00      	add	r7, sp, #0
 81155d2:	60f8      	str	r0, [r7, #12]
 81155d4:	60b9      	str	r1, [r7, #8]
 81155d6:	607a      	str	r2, [r7, #4]
 81155d8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 81155da:	68fb      	ldr	r3, [r7, #12]
 81155dc:	2b00      	cmp	r3, #0
 81155de:	d108      	bne.n	81155f2 <netif_add+0x26>
 81155e0:	4b57      	ldr	r3, [pc, #348]	@ (8115740 <netif_add+0x174>)
 81155e2:	f240 1227 	movw	r2, #295	@ 0x127
 81155e6:	4957      	ldr	r1, [pc, #348]	@ (8115744 <netif_add+0x178>)
 81155e8:	4857      	ldr	r0, [pc, #348]	@ (8115748 <netif_add+0x17c>)
 81155ea:	f008 fbf7 	bl	811dddc <iprintf>
 81155ee:	2300      	movs	r3, #0
 81155f0:	e0a2      	b.n	8115738 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 81155f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81155f4:	2b00      	cmp	r3, #0
 81155f6:	d108      	bne.n	811560a <netif_add+0x3e>
 81155f8:	4b51      	ldr	r3, [pc, #324]	@ (8115740 <netif_add+0x174>)
 81155fa:	f44f 7294 	mov.w	r2, #296	@ 0x128
 81155fe:	4953      	ldr	r1, [pc, #332]	@ (811574c <netif_add+0x180>)
 8115600:	4851      	ldr	r0, [pc, #324]	@ (8115748 <netif_add+0x17c>)
 8115602:	f008 fbeb 	bl	811dddc <iprintf>
 8115606:	2300      	movs	r3, #0
 8115608:	e096      	b.n	8115738 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 811560a:	68bb      	ldr	r3, [r7, #8]
 811560c:	2b00      	cmp	r3, #0
 811560e:	d101      	bne.n	8115614 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8115610:	4b4f      	ldr	r3, [pc, #316]	@ (8115750 <netif_add+0x184>)
 8115612:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8115614:	687b      	ldr	r3, [r7, #4]
 8115616:	2b00      	cmp	r3, #0
 8115618:	d101      	bne.n	811561e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 811561a:	4b4d      	ldr	r3, [pc, #308]	@ (8115750 <netif_add+0x184>)
 811561c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 811561e:	683b      	ldr	r3, [r7, #0]
 8115620:	2b00      	cmp	r3, #0
 8115622:	d101      	bne.n	8115628 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8115624:	4b4a      	ldr	r3, [pc, #296]	@ (8115750 <netif_add+0x184>)
 8115626:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8115628:	68fb      	ldr	r3, [r7, #12]
 811562a:	2200      	movs	r2, #0
 811562c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 811562e:	68fb      	ldr	r3, [r7, #12]
 8115630:	2200      	movs	r2, #0
 8115632:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8115634:	68fb      	ldr	r3, [r7, #12]
 8115636:	2200      	movs	r2, #0
 8115638:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 811563a:	68fb      	ldr	r3, [r7, #12]
 811563c:	4a45      	ldr	r2, [pc, #276]	@ (8115754 <netif_add+0x188>)
 811563e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8115640:	68fb      	ldr	r3, [r7, #12]
 8115642:	2200      	movs	r2, #0
 8115644:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8115646:	68fb      	ldr	r3, [r7, #12]
 8115648:	2200      	movs	r2, #0
 811564a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 811564e:	68fb      	ldr	r3, [r7, #12]
 8115650:	2200      	movs	r2, #0
 8115652:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8115654:	68fb      	ldr	r3, [r7, #12]
 8115656:	6a3a      	ldr	r2, [r7, #32]
 8115658:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 811565a:	4b3f      	ldr	r3, [pc, #252]	@ (8115758 <netif_add+0x18c>)
 811565c:	781a      	ldrb	r2, [r3, #0]
 811565e:	68fb      	ldr	r3, [r7, #12]
 8115660:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8115664:	68fb      	ldr	r3, [r7, #12]
 8115666:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8115668:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 811566a:	683b      	ldr	r3, [r7, #0]
 811566c:	687a      	ldr	r2, [r7, #4]
 811566e:	68b9      	ldr	r1, [r7, #8]
 8115670:	68f8      	ldr	r0, [r7, #12]
 8115672:	f000 f913 	bl	811589c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8115676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115678:	68f8      	ldr	r0, [r7, #12]
 811567a:	4798      	blx	r3
 811567c:	4603      	mov	r3, r0
 811567e:	2b00      	cmp	r3, #0
 8115680:	d001      	beq.n	8115686 <netif_add+0xba>
    return NULL;
 8115682:	2300      	movs	r3, #0
 8115684:	e058      	b.n	8115738 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8115686:	68fb      	ldr	r3, [r7, #12]
 8115688:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811568c:	2bff      	cmp	r3, #255	@ 0xff
 811568e:	d103      	bne.n	8115698 <netif_add+0xcc>
        netif->num = 0;
 8115690:	68fb      	ldr	r3, [r7, #12]
 8115692:	2200      	movs	r2, #0
 8115694:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8115698:	2300      	movs	r3, #0
 811569a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 811569c:	4b2f      	ldr	r3, [pc, #188]	@ (811575c <netif_add+0x190>)
 811569e:	681b      	ldr	r3, [r3, #0]
 81156a0:	617b      	str	r3, [r7, #20]
 81156a2:	e02b      	b.n	81156fc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 81156a4:	697a      	ldr	r2, [r7, #20]
 81156a6:	68fb      	ldr	r3, [r7, #12]
 81156a8:	429a      	cmp	r2, r3
 81156aa:	d106      	bne.n	81156ba <netif_add+0xee>
 81156ac:	4b24      	ldr	r3, [pc, #144]	@ (8115740 <netif_add+0x174>)
 81156ae:	f240 128b 	movw	r2, #395	@ 0x18b
 81156b2:	492b      	ldr	r1, [pc, #172]	@ (8115760 <netif_add+0x194>)
 81156b4:	4824      	ldr	r0, [pc, #144]	@ (8115748 <netif_add+0x17c>)
 81156b6:	f008 fb91 	bl	811dddc <iprintf>
        num_netifs++;
 81156ba:	693b      	ldr	r3, [r7, #16]
 81156bc:	3301      	adds	r3, #1
 81156be:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 81156c0:	693b      	ldr	r3, [r7, #16]
 81156c2:	2bff      	cmp	r3, #255	@ 0xff
 81156c4:	dd06      	ble.n	81156d4 <netif_add+0x108>
 81156c6:	4b1e      	ldr	r3, [pc, #120]	@ (8115740 <netif_add+0x174>)
 81156c8:	f240 128d 	movw	r2, #397	@ 0x18d
 81156cc:	4925      	ldr	r1, [pc, #148]	@ (8115764 <netif_add+0x198>)
 81156ce:	481e      	ldr	r0, [pc, #120]	@ (8115748 <netif_add+0x17c>)
 81156d0:	f008 fb84 	bl	811dddc <iprintf>
        if (netif2->num == netif->num) {
 81156d4:	697b      	ldr	r3, [r7, #20]
 81156d6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 81156da:	68fb      	ldr	r3, [r7, #12]
 81156dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81156e0:	429a      	cmp	r2, r3
 81156e2:	d108      	bne.n	81156f6 <netif_add+0x12a>
          netif->num++;
 81156e4:	68fb      	ldr	r3, [r7, #12]
 81156e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81156ea:	3301      	adds	r3, #1
 81156ec:	b2da      	uxtb	r2, r3
 81156ee:	68fb      	ldr	r3, [r7, #12]
 81156f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 81156f4:	e005      	b.n	8115702 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 81156f6:	697b      	ldr	r3, [r7, #20]
 81156f8:	681b      	ldr	r3, [r3, #0]
 81156fa:	617b      	str	r3, [r7, #20]
 81156fc:	697b      	ldr	r3, [r7, #20]
 81156fe:	2b00      	cmp	r3, #0
 8115700:	d1d0      	bne.n	81156a4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8115702:	697b      	ldr	r3, [r7, #20]
 8115704:	2b00      	cmp	r3, #0
 8115706:	d1be      	bne.n	8115686 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8115708:	68fb      	ldr	r3, [r7, #12]
 811570a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811570e:	2bfe      	cmp	r3, #254	@ 0xfe
 8115710:	d103      	bne.n	811571a <netif_add+0x14e>
    netif_num = 0;
 8115712:	4b11      	ldr	r3, [pc, #68]	@ (8115758 <netif_add+0x18c>)
 8115714:	2200      	movs	r2, #0
 8115716:	701a      	strb	r2, [r3, #0]
 8115718:	e006      	b.n	8115728 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 811571a:	68fb      	ldr	r3, [r7, #12]
 811571c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8115720:	3301      	adds	r3, #1
 8115722:	b2da      	uxtb	r2, r3
 8115724:	4b0c      	ldr	r3, [pc, #48]	@ (8115758 <netif_add+0x18c>)
 8115726:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8115728:	4b0c      	ldr	r3, [pc, #48]	@ (811575c <netif_add+0x190>)
 811572a:	681a      	ldr	r2, [r3, #0]
 811572c:	68fb      	ldr	r3, [r7, #12]
 811572e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8115730:	4a0a      	ldr	r2, [pc, #40]	@ (811575c <netif_add+0x190>)
 8115732:	68fb      	ldr	r3, [r7, #12]
 8115734:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8115736:	68fb      	ldr	r3, [r7, #12]
}
 8115738:	4618      	mov	r0, r3
 811573a:	3718      	adds	r7, #24
 811573c:	46bd      	mov	sp, r7
 811573e:	bd80      	pop	{r7, pc}
 8115740:	081201a0 	.word	0x081201a0
 8115744:	08120270 	.word	0x08120270
 8115748:	0812022c 	.word	0x0812022c
 811574c:	0812028c 	.word	0x0812028c
 8115750:	081224d8 	.word	0x081224d8
 8115754:	08115b77 	.word	0x08115b77
 8115758:	10012120 	.word	0x10012120
 811575c:	10012118 	.word	0x10012118
 8115760:	081202b0 	.word	0x081202b0
 8115764:	081202c4 	.word	0x081202c4

08115768 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8115768:	b580      	push	{r7, lr}
 811576a:	b082      	sub	sp, #8
 811576c:	af00      	add	r7, sp, #0
 811576e:	6078      	str	r0, [r7, #4]
 8115770:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8115772:	6839      	ldr	r1, [r7, #0]
 8115774:	6878      	ldr	r0, [r7, #4]
 8115776:	f002 fe4f 	bl	8118418 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 811577a:	6839      	ldr	r1, [r7, #0]
 811577c:	6878      	ldr	r0, [r7, #4]
 811577e:	f007 fbad 	bl	811cedc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8115782:	bf00      	nop
 8115784:	3708      	adds	r7, #8
 8115786:	46bd      	mov	sp, r7
 8115788:	bd80      	pop	{r7, pc}
	...

0811578c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 811578c:	b580      	push	{r7, lr}
 811578e:	b086      	sub	sp, #24
 8115790:	af00      	add	r7, sp, #0
 8115792:	60f8      	str	r0, [r7, #12]
 8115794:	60b9      	str	r1, [r7, #8]
 8115796:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8115798:	68bb      	ldr	r3, [r7, #8]
 811579a:	2b00      	cmp	r3, #0
 811579c:	d106      	bne.n	81157ac <netif_do_set_ipaddr+0x20>
 811579e:	4b1d      	ldr	r3, [pc, #116]	@ (8115814 <netif_do_set_ipaddr+0x88>)
 81157a0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 81157a4:	491c      	ldr	r1, [pc, #112]	@ (8115818 <netif_do_set_ipaddr+0x8c>)
 81157a6:	481d      	ldr	r0, [pc, #116]	@ (811581c <netif_do_set_ipaddr+0x90>)
 81157a8:	f008 fb18 	bl	811dddc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 81157ac:	687b      	ldr	r3, [r7, #4]
 81157ae:	2b00      	cmp	r3, #0
 81157b0:	d106      	bne.n	81157c0 <netif_do_set_ipaddr+0x34>
 81157b2:	4b18      	ldr	r3, [pc, #96]	@ (8115814 <netif_do_set_ipaddr+0x88>)
 81157b4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 81157b8:	4917      	ldr	r1, [pc, #92]	@ (8115818 <netif_do_set_ipaddr+0x8c>)
 81157ba:	4818      	ldr	r0, [pc, #96]	@ (811581c <netif_do_set_ipaddr+0x90>)
 81157bc:	f008 fb0e 	bl	811dddc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 81157c0:	68bb      	ldr	r3, [r7, #8]
 81157c2:	681a      	ldr	r2, [r3, #0]
 81157c4:	68fb      	ldr	r3, [r7, #12]
 81157c6:	3304      	adds	r3, #4
 81157c8:	681b      	ldr	r3, [r3, #0]
 81157ca:	429a      	cmp	r2, r3
 81157cc:	d01c      	beq.n	8115808 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 81157ce:	68bb      	ldr	r3, [r7, #8]
 81157d0:	681b      	ldr	r3, [r3, #0]
 81157d2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 81157d4:	68fb      	ldr	r3, [r7, #12]
 81157d6:	3304      	adds	r3, #4
 81157d8:	681a      	ldr	r2, [r3, #0]
 81157da:	687b      	ldr	r3, [r7, #4]
 81157dc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 81157de:	f107 0314 	add.w	r3, r7, #20
 81157e2:	4619      	mov	r1, r3
 81157e4:	6878      	ldr	r0, [r7, #4]
 81157e6:	f7ff ffbf 	bl	8115768 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 81157ea:	68bb      	ldr	r3, [r7, #8]
 81157ec:	2b00      	cmp	r3, #0
 81157ee:	d002      	beq.n	81157f6 <netif_do_set_ipaddr+0x6a>
 81157f0:	68bb      	ldr	r3, [r7, #8]
 81157f2:	681b      	ldr	r3, [r3, #0]
 81157f4:	e000      	b.n	81157f8 <netif_do_set_ipaddr+0x6c>
 81157f6:	2300      	movs	r3, #0
 81157f8:	68fa      	ldr	r2, [r7, #12]
 81157fa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 81157fc:	2101      	movs	r1, #1
 81157fe:	68f8      	ldr	r0, [r7, #12]
 8115800:	f000 f8d2 	bl	81159a8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8115804:	2301      	movs	r3, #1
 8115806:	e000      	b.n	811580a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8115808:	2300      	movs	r3, #0
}
 811580a:	4618      	mov	r0, r3
 811580c:	3718      	adds	r7, #24
 811580e:	46bd      	mov	sp, r7
 8115810:	bd80      	pop	{r7, pc}
 8115812:	bf00      	nop
 8115814:	081201a0 	.word	0x081201a0
 8115818:	081202f4 	.word	0x081202f4
 811581c:	0812022c 	.word	0x0812022c

08115820 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8115820:	b480      	push	{r7}
 8115822:	b085      	sub	sp, #20
 8115824:	af00      	add	r7, sp, #0
 8115826:	60f8      	str	r0, [r7, #12]
 8115828:	60b9      	str	r1, [r7, #8]
 811582a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 811582c:	68bb      	ldr	r3, [r7, #8]
 811582e:	681a      	ldr	r2, [r3, #0]
 8115830:	68fb      	ldr	r3, [r7, #12]
 8115832:	3308      	adds	r3, #8
 8115834:	681b      	ldr	r3, [r3, #0]
 8115836:	429a      	cmp	r2, r3
 8115838:	d00a      	beq.n	8115850 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 811583a:	68bb      	ldr	r3, [r7, #8]
 811583c:	2b00      	cmp	r3, #0
 811583e:	d002      	beq.n	8115846 <netif_do_set_netmask+0x26>
 8115840:	68bb      	ldr	r3, [r7, #8]
 8115842:	681b      	ldr	r3, [r3, #0]
 8115844:	e000      	b.n	8115848 <netif_do_set_netmask+0x28>
 8115846:	2300      	movs	r3, #0
 8115848:	68fa      	ldr	r2, [r7, #12]
 811584a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 811584c:	2301      	movs	r3, #1
 811584e:	e000      	b.n	8115852 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8115850:	2300      	movs	r3, #0
}
 8115852:	4618      	mov	r0, r3
 8115854:	3714      	adds	r7, #20
 8115856:	46bd      	mov	sp, r7
 8115858:	f85d 7b04 	ldr.w	r7, [sp], #4
 811585c:	4770      	bx	lr

0811585e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 811585e:	b480      	push	{r7}
 8115860:	b085      	sub	sp, #20
 8115862:	af00      	add	r7, sp, #0
 8115864:	60f8      	str	r0, [r7, #12]
 8115866:	60b9      	str	r1, [r7, #8]
 8115868:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 811586a:	68bb      	ldr	r3, [r7, #8]
 811586c:	681a      	ldr	r2, [r3, #0]
 811586e:	68fb      	ldr	r3, [r7, #12]
 8115870:	330c      	adds	r3, #12
 8115872:	681b      	ldr	r3, [r3, #0]
 8115874:	429a      	cmp	r2, r3
 8115876:	d00a      	beq.n	811588e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8115878:	68bb      	ldr	r3, [r7, #8]
 811587a:	2b00      	cmp	r3, #0
 811587c:	d002      	beq.n	8115884 <netif_do_set_gw+0x26>
 811587e:	68bb      	ldr	r3, [r7, #8]
 8115880:	681b      	ldr	r3, [r3, #0]
 8115882:	e000      	b.n	8115886 <netif_do_set_gw+0x28>
 8115884:	2300      	movs	r3, #0
 8115886:	68fa      	ldr	r2, [r7, #12]
 8115888:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 811588a:	2301      	movs	r3, #1
 811588c:	e000      	b.n	8115890 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 811588e:	2300      	movs	r3, #0
}
 8115890:	4618      	mov	r0, r3
 8115892:	3714      	adds	r7, #20
 8115894:	46bd      	mov	sp, r7
 8115896:	f85d 7b04 	ldr.w	r7, [sp], #4
 811589a:	4770      	bx	lr

0811589c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 811589c:	b580      	push	{r7, lr}
 811589e:	b088      	sub	sp, #32
 81158a0:	af00      	add	r7, sp, #0
 81158a2:	60f8      	str	r0, [r7, #12]
 81158a4:	60b9      	str	r1, [r7, #8]
 81158a6:	607a      	str	r2, [r7, #4]
 81158a8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 81158aa:	2300      	movs	r3, #0
 81158ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 81158ae:	2300      	movs	r3, #0
 81158b0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 81158b2:	68bb      	ldr	r3, [r7, #8]
 81158b4:	2b00      	cmp	r3, #0
 81158b6:	d101      	bne.n	81158bc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 81158b8:	4b1c      	ldr	r3, [pc, #112]	@ (811592c <netif_set_addr+0x90>)
 81158ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 81158bc:	687b      	ldr	r3, [r7, #4]
 81158be:	2b00      	cmp	r3, #0
 81158c0:	d101      	bne.n	81158c6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 81158c2:	4b1a      	ldr	r3, [pc, #104]	@ (811592c <netif_set_addr+0x90>)
 81158c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 81158c6:	683b      	ldr	r3, [r7, #0]
 81158c8:	2b00      	cmp	r3, #0
 81158ca:	d101      	bne.n	81158d0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 81158cc:	4b17      	ldr	r3, [pc, #92]	@ (811592c <netif_set_addr+0x90>)
 81158ce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 81158d0:	68bb      	ldr	r3, [r7, #8]
 81158d2:	2b00      	cmp	r3, #0
 81158d4:	d003      	beq.n	81158de <netif_set_addr+0x42>
 81158d6:	68bb      	ldr	r3, [r7, #8]
 81158d8:	681b      	ldr	r3, [r3, #0]
 81158da:	2b00      	cmp	r3, #0
 81158dc:	d101      	bne.n	81158e2 <netif_set_addr+0x46>
 81158de:	2301      	movs	r3, #1
 81158e0:	e000      	b.n	81158e4 <netif_set_addr+0x48>
 81158e2:	2300      	movs	r3, #0
 81158e4:	617b      	str	r3, [r7, #20]
  if (remove) {
 81158e6:	697b      	ldr	r3, [r7, #20]
 81158e8:	2b00      	cmp	r3, #0
 81158ea:	d006      	beq.n	81158fa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 81158ec:	f107 0310 	add.w	r3, r7, #16
 81158f0:	461a      	mov	r2, r3
 81158f2:	68b9      	ldr	r1, [r7, #8]
 81158f4:	68f8      	ldr	r0, [r7, #12]
 81158f6:	f7ff ff49 	bl	811578c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 81158fa:	69fa      	ldr	r2, [r7, #28]
 81158fc:	6879      	ldr	r1, [r7, #4]
 81158fe:	68f8      	ldr	r0, [r7, #12]
 8115900:	f7ff ff8e 	bl	8115820 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8115904:	69ba      	ldr	r2, [r7, #24]
 8115906:	6839      	ldr	r1, [r7, #0]
 8115908:	68f8      	ldr	r0, [r7, #12]
 811590a:	f7ff ffa8 	bl	811585e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 811590e:	697b      	ldr	r3, [r7, #20]
 8115910:	2b00      	cmp	r3, #0
 8115912:	d106      	bne.n	8115922 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8115914:	f107 0310 	add.w	r3, r7, #16
 8115918:	461a      	mov	r2, r3
 811591a:	68b9      	ldr	r1, [r7, #8]
 811591c:	68f8      	ldr	r0, [r7, #12]
 811591e:	f7ff ff35 	bl	811578c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8115922:	bf00      	nop
 8115924:	3720      	adds	r7, #32
 8115926:	46bd      	mov	sp, r7
 8115928:	bd80      	pop	{r7, pc}
 811592a:	bf00      	nop
 811592c:	081224d8 	.word	0x081224d8

08115930 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8115930:	b480      	push	{r7}
 8115932:	b083      	sub	sp, #12
 8115934:	af00      	add	r7, sp, #0
 8115936:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8115938:	4a04      	ldr	r2, [pc, #16]	@ (811594c <netif_set_default+0x1c>)
 811593a:	687b      	ldr	r3, [r7, #4]
 811593c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 811593e:	bf00      	nop
 8115940:	370c      	adds	r7, #12
 8115942:	46bd      	mov	sp, r7
 8115944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115948:	4770      	bx	lr
 811594a:	bf00      	nop
 811594c:	1001211c 	.word	0x1001211c

08115950 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8115950:	b580      	push	{r7, lr}
 8115952:	b082      	sub	sp, #8
 8115954:	af00      	add	r7, sp, #0
 8115956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8115958:	687b      	ldr	r3, [r7, #4]
 811595a:	2b00      	cmp	r3, #0
 811595c:	d107      	bne.n	811596e <netif_set_up+0x1e>
 811595e:	4b0f      	ldr	r3, [pc, #60]	@ (811599c <netif_set_up+0x4c>)
 8115960:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8115964:	490e      	ldr	r1, [pc, #56]	@ (81159a0 <netif_set_up+0x50>)
 8115966:	480f      	ldr	r0, [pc, #60]	@ (81159a4 <netif_set_up+0x54>)
 8115968:	f008 fa38 	bl	811dddc <iprintf>
 811596c:	e013      	b.n	8115996 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 811596e:	687b      	ldr	r3, [r7, #4]
 8115970:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115974:	f003 0301 	and.w	r3, r3, #1
 8115978:	2b00      	cmp	r3, #0
 811597a:	d10c      	bne.n	8115996 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 811597c:	687b      	ldr	r3, [r7, #4]
 811597e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115982:	f043 0301 	orr.w	r3, r3, #1
 8115986:	b2da      	uxtb	r2, r3
 8115988:	687b      	ldr	r3, [r7, #4]
 811598a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 811598e:	2103      	movs	r1, #3
 8115990:	6878      	ldr	r0, [r7, #4]
 8115992:	f000 f809 	bl	81159a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8115996:	3708      	adds	r7, #8
 8115998:	46bd      	mov	sp, r7
 811599a:	bd80      	pop	{r7, pc}
 811599c:	081201a0 	.word	0x081201a0
 81159a0:	08120364 	.word	0x08120364
 81159a4:	0812022c 	.word	0x0812022c

081159a8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 81159a8:	b580      	push	{r7, lr}
 81159aa:	b082      	sub	sp, #8
 81159ac:	af00      	add	r7, sp, #0
 81159ae:	6078      	str	r0, [r7, #4]
 81159b0:	460b      	mov	r3, r1
 81159b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 81159b4:	687b      	ldr	r3, [r7, #4]
 81159b6:	2b00      	cmp	r3, #0
 81159b8:	d106      	bne.n	81159c8 <netif_issue_reports+0x20>
 81159ba:	4b18      	ldr	r3, [pc, #96]	@ (8115a1c <netif_issue_reports+0x74>)
 81159bc:	f240 326d 	movw	r2, #877	@ 0x36d
 81159c0:	4917      	ldr	r1, [pc, #92]	@ (8115a20 <netif_issue_reports+0x78>)
 81159c2:	4818      	ldr	r0, [pc, #96]	@ (8115a24 <netif_issue_reports+0x7c>)
 81159c4:	f008 fa0a 	bl	811dddc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 81159c8:	687b      	ldr	r3, [r7, #4]
 81159ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81159ce:	f003 0304 	and.w	r3, r3, #4
 81159d2:	2b00      	cmp	r3, #0
 81159d4:	d01e      	beq.n	8115a14 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 81159d6:	687b      	ldr	r3, [r7, #4]
 81159d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81159dc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 81159e0:	2b00      	cmp	r3, #0
 81159e2:	d017      	beq.n	8115a14 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 81159e4:	78fb      	ldrb	r3, [r7, #3]
 81159e6:	f003 0301 	and.w	r3, r3, #1
 81159ea:	2b00      	cmp	r3, #0
 81159ec:	d013      	beq.n	8115a16 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 81159ee:	687b      	ldr	r3, [r7, #4]
 81159f0:	3304      	adds	r3, #4
 81159f2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 81159f4:	2b00      	cmp	r3, #0
 81159f6:	d00e      	beq.n	8115a16 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 81159f8:	687b      	ldr	r3, [r7, #4]
 81159fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81159fe:	f003 0308 	and.w	r3, r3, #8
 8115a02:	2b00      	cmp	r3, #0
 8115a04:	d007      	beq.n	8115a16 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8115a06:	687b      	ldr	r3, [r7, #4]
 8115a08:	3304      	adds	r3, #4
 8115a0a:	4619      	mov	r1, r3
 8115a0c:	6878      	ldr	r0, [r7, #4]
 8115a0e:	f7fd fa77 	bl	8112f00 <etharp_request>
 8115a12:	e000      	b.n	8115a16 <netif_issue_reports+0x6e>
    return;
 8115a14:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8115a16:	3708      	adds	r7, #8
 8115a18:	46bd      	mov	sp, r7
 8115a1a:	bd80      	pop	{r7, pc}
 8115a1c:	081201a0 	.word	0x081201a0
 8115a20:	08120380 	.word	0x08120380
 8115a24:	0812022c 	.word	0x0812022c

08115a28 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8115a28:	b580      	push	{r7, lr}
 8115a2a:	b082      	sub	sp, #8
 8115a2c:	af00      	add	r7, sp, #0
 8115a2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8115a30:	687b      	ldr	r3, [r7, #4]
 8115a32:	2b00      	cmp	r3, #0
 8115a34:	d107      	bne.n	8115a46 <netif_set_down+0x1e>
 8115a36:	4b12      	ldr	r3, [pc, #72]	@ (8115a80 <netif_set_down+0x58>)
 8115a38:	f240 329b 	movw	r2, #923	@ 0x39b
 8115a3c:	4911      	ldr	r1, [pc, #68]	@ (8115a84 <netif_set_down+0x5c>)
 8115a3e:	4812      	ldr	r0, [pc, #72]	@ (8115a88 <netif_set_down+0x60>)
 8115a40:	f008 f9cc 	bl	811dddc <iprintf>
 8115a44:	e019      	b.n	8115a7a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8115a46:	687b      	ldr	r3, [r7, #4]
 8115a48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115a4c:	f003 0301 	and.w	r3, r3, #1
 8115a50:	2b00      	cmp	r3, #0
 8115a52:	d012      	beq.n	8115a7a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8115a54:	687b      	ldr	r3, [r7, #4]
 8115a56:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115a5a:	f023 0301 	bic.w	r3, r3, #1
 8115a5e:	b2da      	uxtb	r2, r3
 8115a60:	687b      	ldr	r3, [r7, #4]
 8115a62:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8115a66:	687b      	ldr	r3, [r7, #4]
 8115a68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115a6c:	f003 0308 	and.w	r3, r3, #8
 8115a70:	2b00      	cmp	r3, #0
 8115a72:	d002      	beq.n	8115a7a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8115a74:	6878      	ldr	r0, [r7, #4]
 8115a76:	f7fc fdb5 	bl	81125e4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8115a7a:	3708      	adds	r7, #8
 8115a7c:	46bd      	mov	sp, r7
 8115a7e:	bd80      	pop	{r7, pc}
 8115a80:	081201a0 	.word	0x081201a0
 8115a84:	081203a4 	.word	0x081203a4
 8115a88:	0812022c 	.word	0x0812022c

08115a8c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8115a8c:	b580      	push	{r7, lr}
 8115a8e:	b082      	sub	sp, #8
 8115a90:	af00      	add	r7, sp, #0
 8115a92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8115a94:	687b      	ldr	r3, [r7, #4]
 8115a96:	2b00      	cmp	r3, #0
 8115a98:	d107      	bne.n	8115aaa <netif_set_link_up+0x1e>
 8115a9a:	4b13      	ldr	r3, [pc, #76]	@ (8115ae8 <netif_set_link_up+0x5c>)
 8115a9c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8115aa0:	4912      	ldr	r1, [pc, #72]	@ (8115aec <netif_set_link_up+0x60>)
 8115aa2:	4813      	ldr	r0, [pc, #76]	@ (8115af0 <netif_set_link_up+0x64>)
 8115aa4:	f008 f99a 	bl	811dddc <iprintf>
 8115aa8:	e01b      	b.n	8115ae2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8115aaa:	687b      	ldr	r3, [r7, #4]
 8115aac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115ab0:	f003 0304 	and.w	r3, r3, #4
 8115ab4:	2b00      	cmp	r3, #0
 8115ab6:	d114      	bne.n	8115ae2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8115ab8:	687b      	ldr	r3, [r7, #4]
 8115aba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115abe:	f043 0304 	orr.w	r3, r3, #4
 8115ac2:	b2da      	uxtb	r2, r3
 8115ac4:	687b      	ldr	r3, [r7, #4]
 8115ac6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8115aca:	2103      	movs	r1, #3
 8115acc:	6878      	ldr	r0, [r7, #4]
 8115ace:	f7ff ff6b 	bl	81159a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8115ad2:	687b      	ldr	r3, [r7, #4]
 8115ad4:	69db      	ldr	r3, [r3, #28]
 8115ad6:	2b00      	cmp	r3, #0
 8115ad8:	d003      	beq.n	8115ae2 <netif_set_link_up+0x56>
 8115ada:	687b      	ldr	r3, [r7, #4]
 8115adc:	69db      	ldr	r3, [r3, #28]
 8115ade:	6878      	ldr	r0, [r7, #4]
 8115ae0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8115ae2:	3708      	adds	r7, #8
 8115ae4:	46bd      	mov	sp, r7
 8115ae6:	bd80      	pop	{r7, pc}
 8115ae8:	081201a0 	.word	0x081201a0
 8115aec:	081203c4 	.word	0x081203c4
 8115af0:	0812022c 	.word	0x0812022c

08115af4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8115af4:	b580      	push	{r7, lr}
 8115af6:	b082      	sub	sp, #8
 8115af8:	af00      	add	r7, sp, #0
 8115afa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8115afc:	687b      	ldr	r3, [r7, #4]
 8115afe:	2b00      	cmp	r3, #0
 8115b00:	d107      	bne.n	8115b12 <netif_set_link_down+0x1e>
 8115b02:	4b11      	ldr	r3, [pc, #68]	@ (8115b48 <netif_set_link_down+0x54>)
 8115b04:	f240 4206 	movw	r2, #1030	@ 0x406
 8115b08:	4910      	ldr	r1, [pc, #64]	@ (8115b4c <netif_set_link_down+0x58>)
 8115b0a:	4811      	ldr	r0, [pc, #68]	@ (8115b50 <netif_set_link_down+0x5c>)
 8115b0c:	f008 f966 	bl	811dddc <iprintf>
 8115b10:	e017      	b.n	8115b42 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8115b12:	687b      	ldr	r3, [r7, #4]
 8115b14:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115b18:	f003 0304 	and.w	r3, r3, #4
 8115b1c:	2b00      	cmp	r3, #0
 8115b1e:	d010      	beq.n	8115b42 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8115b20:	687b      	ldr	r3, [r7, #4]
 8115b22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115b26:	f023 0304 	bic.w	r3, r3, #4
 8115b2a:	b2da      	uxtb	r2, r3
 8115b2c:	687b      	ldr	r3, [r7, #4]
 8115b2e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8115b32:	687b      	ldr	r3, [r7, #4]
 8115b34:	69db      	ldr	r3, [r3, #28]
 8115b36:	2b00      	cmp	r3, #0
 8115b38:	d003      	beq.n	8115b42 <netif_set_link_down+0x4e>
 8115b3a:	687b      	ldr	r3, [r7, #4]
 8115b3c:	69db      	ldr	r3, [r3, #28]
 8115b3e:	6878      	ldr	r0, [r7, #4]
 8115b40:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8115b42:	3708      	adds	r7, #8
 8115b44:	46bd      	mov	sp, r7
 8115b46:	bd80      	pop	{r7, pc}
 8115b48:	081201a0 	.word	0x081201a0
 8115b4c:	081203e8 	.word	0x081203e8
 8115b50:	0812022c 	.word	0x0812022c

08115b54 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8115b54:	b480      	push	{r7}
 8115b56:	b083      	sub	sp, #12
 8115b58:	af00      	add	r7, sp, #0
 8115b5a:	6078      	str	r0, [r7, #4]
 8115b5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8115b5e:	687b      	ldr	r3, [r7, #4]
 8115b60:	2b00      	cmp	r3, #0
 8115b62:	d002      	beq.n	8115b6a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8115b64:	687b      	ldr	r3, [r7, #4]
 8115b66:	683a      	ldr	r2, [r7, #0]
 8115b68:	61da      	str	r2, [r3, #28]
  }
}
 8115b6a:	bf00      	nop
 8115b6c:	370c      	adds	r7, #12
 8115b6e:	46bd      	mov	sp, r7
 8115b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115b74:	4770      	bx	lr

08115b76 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8115b76:	b480      	push	{r7}
 8115b78:	b085      	sub	sp, #20
 8115b7a:	af00      	add	r7, sp, #0
 8115b7c:	60f8      	str	r0, [r7, #12]
 8115b7e:	60b9      	str	r1, [r7, #8]
 8115b80:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8115b82:	f06f 030b 	mvn.w	r3, #11
}
 8115b86:	4618      	mov	r0, r3
 8115b88:	3714      	adds	r7, #20
 8115b8a:	46bd      	mov	sp, r7
 8115b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115b90:	4770      	bx	lr
	...

08115b94 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8115b94:	b480      	push	{r7}
 8115b96:	b085      	sub	sp, #20
 8115b98:	af00      	add	r7, sp, #0
 8115b9a:	4603      	mov	r3, r0
 8115b9c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8115b9e:	79fb      	ldrb	r3, [r7, #7]
 8115ba0:	2b00      	cmp	r3, #0
 8115ba2:	d013      	beq.n	8115bcc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8115ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8115bdc <netif_get_by_index+0x48>)
 8115ba6:	681b      	ldr	r3, [r3, #0]
 8115ba8:	60fb      	str	r3, [r7, #12]
 8115baa:	e00c      	b.n	8115bc6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8115bac:	68fb      	ldr	r3, [r7, #12]
 8115bae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8115bb2:	3301      	adds	r3, #1
 8115bb4:	b2db      	uxtb	r3, r3
 8115bb6:	79fa      	ldrb	r2, [r7, #7]
 8115bb8:	429a      	cmp	r2, r3
 8115bba:	d101      	bne.n	8115bc0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8115bbc:	68fb      	ldr	r3, [r7, #12]
 8115bbe:	e006      	b.n	8115bce <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8115bc0:	68fb      	ldr	r3, [r7, #12]
 8115bc2:	681b      	ldr	r3, [r3, #0]
 8115bc4:	60fb      	str	r3, [r7, #12]
 8115bc6:	68fb      	ldr	r3, [r7, #12]
 8115bc8:	2b00      	cmp	r3, #0
 8115bca:	d1ef      	bne.n	8115bac <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8115bcc:	2300      	movs	r3, #0
}
 8115bce:	4618      	mov	r0, r3
 8115bd0:	3714      	adds	r7, #20
 8115bd2:	46bd      	mov	sp, r7
 8115bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115bd8:	4770      	bx	lr
 8115bda:	bf00      	nop
 8115bdc:	10012118 	.word	0x10012118

08115be0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8115be0:	b580      	push	{r7, lr}
 8115be2:	b082      	sub	sp, #8
 8115be4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8115be6:	f000 fee1 	bl	81169ac <sys_arch_protect>
 8115bea:	6038      	str	r0, [r7, #0]
 8115bec:	4b0d      	ldr	r3, [pc, #52]	@ (8115c24 <pbuf_free_ooseq+0x44>)
 8115bee:	2200      	movs	r2, #0
 8115bf0:	701a      	strb	r2, [r3, #0]
 8115bf2:	6838      	ldr	r0, [r7, #0]
 8115bf4:	f000 fee8 	bl	81169c8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8115bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8115c28 <pbuf_free_ooseq+0x48>)
 8115bfa:	681b      	ldr	r3, [r3, #0]
 8115bfc:	607b      	str	r3, [r7, #4]
 8115bfe:	e00a      	b.n	8115c16 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8115c00:	687b      	ldr	r3, [r7, #4]
 8115c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8115c04:	2b00      	cmp	r3, #0
 8115c06:	d003      	beq.n	8115c10 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8115c08:	6878      	ldr	r0, [r7, #4]
 8115c0a:	f002 fc43 	bl	8118494 <tcp_free_ooseq>
      return;
 8115c0e:	e005      	b.n	8115c1c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8115c10:	687b      	ldr	r3, [r7, #4]
 8115c12:	68db      	ldr	r3, [r3, #12]
 8115c14:	607b      	str	r3, [r7, #4]
 8115c16:	687b      	ldr	r3, [r7, #4]
 8115c18:	2b00      	cmp	r3, #0
 8115c1a:	d1f1      	bne.n	8115c00 <pbuf_free_ooseq+0x20>
    }
  }
}
 8115c1c:	3708      	adds	r7, #8
 8115c1e:	46bd      	mov	sp, r7
 8115c20:	bd80      	pop	{r7, pc}
 8115c22:	bf00      	nop
 8115c24:	10012121 	.word	0x10012121
 8115c28:	10012134 	.word	0x10012134

08115c2c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8115c2c:	b580      	push	{r7, lr}
 8115c2e:	b082      	sub	sp, #8
 8115c30:	af00      	add	r7, sp, #0
 8115c32:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8115c34:	f7ff ffd4 	bl	8115be0 <pbuf_free_ooseq>
}
 8115c38:	bf00      	nop
 8115c3a:	3708      	adds	r7, #8
 8115c3c:	46bd      	mov	sp, r7
 8115c3e:	bd80      	pop	{r7, pc}

08115c40 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8115c40:	b580      	push	{r7, lr}
 8115c42:	b082      	sub	sp, #8
 8115c44:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8115c46:	f000 feb1 	bl	81169ac <sys_arch_protect>
 8115c4a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8115c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8115c8c <pbuf_pool_is_empty+0x4c>)
 8115c4e:	781b      	ldrb	r3, [r3, #0]
 8115c50:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8115c52:	4b0e      	ldr	r3, [pc, #56]	@ (8115c8c <pbuf_pool_is_empty+0x4c>)
 8115c54:	2201      	movs	r2, #1
 8115c56:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8115c58:	6878      	ldr	r0, [r7, #4]
 8115c5a:	f000 feb5 	bl	81169c8 <sys_arch_unprotect>

  if (!queued) {
 8115c5e:	78fb      	ldrb	r3, [r7, #3]
 8115c60:	2b00      	cmp	r3, #0
 8115c62:	d10f      	bne.n	8115c84 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8115c64:	2100      	movs	r1, #0
 8115c66:	480a      	ldr	r0, [pc, #40]	@ (8115c90 <pbuf_pool_is_empty+0x50>)
 8115c68:	f006 fa96 	bl	811c198 <tcpip_try_callback>
 8115c6c:	4603      	mov	r3, r0
 8115c6e:	2b00      	cmp	r3, #0
 8115c70:	d008      	beq.n	8115c84 <pbuf_pool_is_empty+0x44>
 8115c72:	f000 fe9b 	bl	81169ac <sys_arch_protect>
 8115c76:	6078      	str	r0, [r7, #4]
 8115c78:	4b04      	ldr	r3, [pc, #16]	@ (8115c8c <pbuf_pool_is_empty+0x4c>)
 8115c7a:	2200      	movs	r2, #0
 8115c7c:	701a      	strb	r2, [r3, #0]
 8115c7e:	6878      	ldr	r0, [r7, #4]
 8115c80:	f000 fea2 	bl	81169c8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8115c84:	bf00      	nop
 8115c86:	3708      	adds	r7, #8
 8115c88:	46bd      	mov	sp, r7
 8115c8a:	bd80      	pop	{r7, pc}
 8115c8c:	10012121 	.word	0x10012121
 8115c90:	08115c2d 	.word	0x08115c2d

08115c94 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8115c94:	b480      	push	{r7}
 8115c96:	b085      	sub	sp, #20
 8115c98:	af00      	add	r7, sp, #0
 8115c9a:	60f8      	str	r0, [r7, #12]
 8115c9c:	60b9      	str	r1, [r7, #8]
 8115c9e:	4611      	mov	r1, r2
 8115ca0:	461a      	mov	r2, r3
 8115ca2:	460b      	mov	r3, r1
 8115ca4:	80fb      	strh	r3, [r7, #6]
 8115ca6:	4613      	mov	r3, r2
 8115ca8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8115caa:	68fb      	ldr	r3, [r7, #12]
 8115cac:	2200      	movs	r2, #0
 8115cae:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8115cb0:	68fb      	ldr	r3, [r7, #12]
 8115cb2:	68ba      	ldr	r2, [r7, #8]
 8115cb4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8115cb6:	68fb      	ldr	r3, [r7, #12]
 8115cb8:	88fa      	ldrh	r2, [r7, #6]
 8115cba:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8115cbc:	68fb      	ldr	r3, [r7, #12]
 8115cbe:	88ba      	ldrh	r2, [r7, #4]
 8115cc0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8115cc2:	8b3b      	ldrh	r3, [r7, #24]
 8115cc4:	b2da      	uxtb	r2, r3
 8115cc6:	68fb      	ldr	r3, [r7, #12]
 8115cc8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8115cca:	68fb      	ldr	r3, [r7, #12]
 8115ccc:	7f3a      	ldrb	r2, [r7, #28]
 8115cce:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8115cd0:	68fb      	ldr	r3, [r7, #12]
 8115cd2:	2201      	movs	r2, #1
 8115cd4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8115cd6:	68fb      	ldr	r3, [r7, #12]
 8115cd8:	2200      	movs	r2, #0
 8115cda:	73da      	strb	r2, [r3, #15]
}
 8115cdc:	bf00      	nop
 8115cde:	3714      	adds	r7, #20
 8115ce0:	46bd      	mov	sp, r7
 8115ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115ce6:	4770      	bx	lr

08115ce8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8115ce8:	b580      	push	{r7, lr}
 8115cea:	b08c      	sub	sp, #48	@ 0x30
 8115cec:	af02      	add	r7, sp, #8
 8115cee:	4603      	mov	r3, r0
 8115cf0:	71fb      	strb	r3, [r7, #7]
 8115cf2:	460b      	mov	r3, r1
 8115cf4:	80bb      	strh	r3, [r7, #4]
 8115cf6:	4613      	mov	r3, r2
 8115cf8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8115cfa:	79fb      	ldrb	r3, [r7, #7]
 8115cfc:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8115cfe:	887b      	ldrh	r3, [r7, #2]
 8115d00:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8115d04:	f000 8082 	beq.w	8115e0c <pbuf_alloc+0x124>
 8115d08:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8115d0c:	f300 80c9 	bgt.w	8115ea2 <pbuf_alloc+0x1ba>
 8115d10:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8115d14:	d010      	beq.n	8115d38 <pbuf_alloc+0x50>
 8115d16:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8115d1a:	f300 80c2 	bgt.w	8115ea2 <pbuf_alloc+0x1ba>
 8115d1e:	2b01      	cmp	r3, #1
 8115d20:	d002      	beq.n	8115d28 <pbuf_alloc+0x40>
 8115d22:	2b41      	cmp	r3, #65	@ 0x41
 8115d24:	f040 80bd 	bne.w	8115ea2 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8115d28:	887a      	ldrh	r2, [r7, #2]
 8115d2a:	88bb      	ldrh	r3, [r7, #4]
 8115d2c:	4619      	mov	r1, r3
 8115d2e:	2000      	movs	r0, #0
 8115d30:	f000 f8d2 	bl	8115ed8 <pbuf_alloc_reference>
 8115d34:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8115d36:	e0be      	b.n	8115eb6 <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8115d38:	2300      	movs	r3, #0
 8115d3a:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8115d3c:	2300      	movs	r3, #0
 8115d3e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8115d40:	88bb      	ldrh	r3, [r7, #4]
 8115d42:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8115d44:	200c      	movs	r0, #12
 8115d46:	f7ff fb99 	bl	811547c <memp_malloc>
 8115d4a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8115d4c:	693b      	ldr	r3, [r7, #16]
 8115d4e:	2b00      	cmp	r3, #0
 8115d50:	d109      	bne.n	8115d66 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8115d52:	f7ff ff75 	bl	8115c40 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8115d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115d58:	2b00      	cmp	r3, #0
 8115d5a:	d002      	beq.n	8115d62 <pbuf_alloc+0x7a>
            pbuf_free(p);
 8115d5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8115d5e:	f000 faa7 	bl	81162b0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8115d62:	2300      	movs	r3, #0
 8115d64:	e0a8      	b.n	8115eb8 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8115d66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8115d68:	3303      	adds	r3, #3
 8115d6a:	b29b      	uxth	r3, r3
 8115d6c:	f023 0303 	bic.w	r3, r3, #3
 8115d70:	b29b      	uxth	r3, r3
 8115d72:	f5c3 63bd 	rsb	r3, r3, #1512	@ 0x5e8
 8115d76:	3304      	adds	r3, #4
 8115d78:	b29b      	uxth	r3, r3
 8115d7a:	8b7a      	ldrh	r2, [r7, #26]
 8115d7c:	4293      	cmp	r3, r2
 8115d7e:	bf28      	it	cs
 8115d80:	4613      	movcs	r3, r2
 8115d82:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8115d84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8115d86:	3310      	adds	r3, #16
 8115d88:	693a      	ldr	r2, [r7, #16]
 8115d8a:	4413      	add	r3, r2
 8115d8c:	3303      	adds	r3, #3
 8115d8e:	f023 0303 	bic.w	r3, r3, #3
 8115d92:	4618      	mov	r0, r3
 8115d94:	89f9      	ldrh	r1, [r7, #14]
 8115d96:	8b7a      	ldrh	r2, [r7, #26]
 8115d98:	2300      	movs	r3, #0
 8115d9a:	9301      	str	r3, [sp, #4]
 8115d9c:	887b      	ldrh	r3, [r7, #2]
 8115d9e:	9300      	str	r3, [sp, #0]
 8115da0:	460b      	mov	r3, r1
 8115da2:	4601      	mov	r1, r0
 8115da4:	6938      	ldr	r0, [r7, #16]
 8115da6:	f7ff ff75 	bl	8115c94 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8115daa:	693b      	ldr	r3, [r7, #16]
 8115dac:	685b      	ldr	r3, [r3, #4]
 8115dae:	f003 0303 	and.w	r3, r3, #3
 8115db2:	2b00      	cmp	r3, #0
 8115db4:	d006      	beq.n	8115dc4 <pbuf_alloc+0xdc>
 8115db6:	4b42      	ldr	r3, [pc, #264]	@ (8115ec0 <pbuf_alloc+0x1d8>)
 8115db8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8115dbc:	4941      	ldr	r1, [pc, #260]	@ (8115ec4 <pbuf_alloc+0x1dc>)
 8115dbe:	4842      	ldr	r0, [pc, #264]	@ (8115ec8 <pbuf_alloc+0x1e0>)
 8115dc0:	f008 f80c 	bl	811dddc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8115dc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8115dc6:	3303      	adds	r3, #3
 8115dc8:	f023 0303 	bic.w	r3, r3, #3
 8115dcc:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 8115dd0:	4293      	cmp	r3, r2
 8115dd2:	d106      	bne.n	8115de2 <pbuf_alloc+0xfa>
 8115dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8115ec0 <pbuf_alloc+0x1d8>)
 8115dd6:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8115dda:	493c      	ldr	r1, [pc, #240]	@ (8115ecc <pbuf_alloc+0x1e4>)
 8115ddc:	483a      	ldr	r0, [pc, #232]	@ (8115ec8 <pbuf_alloc+0x1e0>)
 8115dde:	f007 fffd 	bl	811dddc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8115de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115de4:	2b00      	cmp	r3, #0
 8115de6:	d102      	bne.n	8115dee <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8115de8:	693b      	ldr	r3, [r7, #16]
 8115dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8115dec:	e002      	b.n	8115df4 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8115dee:	69fb      	ldr	r3, [r7, #28]
 8115df0:	693a      	ldr	r2, [r7, #16]
 8115df2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8115df4:	693b      	ldr	r3, [r7, #16]
 8115df6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8115df8:	8b7a      	ldrh	r2, [r7, #26]
 8115dfa:	89fb      	ldrh	r3, [r7, #14]
 8115dfc:	1ad3      	subs	r3, r2, r3
 8115dfe:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8115e00:	2300      	movs	r3, #0
 8115e02:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8115e04:	8b7b      	ldrh	r3, [r7, #26]
 8115e06:	2b00      	cmp	r3, #0
 8115e08:	d19c      	bne.n	8115d44 <pbuf_alloc+0x5c>
      break;
 8115e0a:	e054      	b.n	8115eb6 <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8115e0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8115e0e:	3303      	adds	r3, #3
 8115e10:	b29b      	uxth	r3, r3
 8115e12:	f023 0303 	bic.w	r3, r3, #3
 8115e16:	b29a      	uxth	r2, r3
 8115e18:	88bb      	ldrh	r3, [r7, #4]
 8115e1a:	3303      	adds	r3, #3
 8115e1c:	b29b      	uxth	r3, r3
 8115e1e:	f023 0303 	bic.w	r3, r3, #3
 8115e22:	b29b      	uxth	r3, r3
 8115e24:	4413      	add	r3, r2
 8115e26:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8115e28:	8b3b      	ldrh	r3, [r7, #24]
 8115e2a:	3310      	adds	r3, #16
 8115e2c:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8115e2e:	8b3a      	ldrh	r2, [r7, #24]
 8115e30:	88bb      	ldrh	r3, [r7, #4]
 8115e32:	3303      	adds	r3, #3
 8115e34:	f023 0303 	bic.w	r3, r3, #3
 8115e38:	429a      	cmp	r2, r3
 8115e3a:	d306      	bcc.n	8115e4a <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8115e3c:	88bb      	ldrh	r3, [r7, #4]
 8115e3e:	3303      	adds	r3, #3
 8115e40:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8115e44:	697a      	ldr	r2, [r7, #20]
 8115e46:	429a      	cmp	r2, r3
 8115e48:	d201      	bcs.n	8115e4e <pbuf_alloc+0x166>
        return NULL;
 8115e4a:	2300      	movs	r3, #0
 8115e4c:	e034      	b.n	8115eb8 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8115e4e:	6978      	ldr	r0, [r7, #20]
 8115e50:	f7ff f976 	bl	8115140 <mem_malloc>
 8115e54:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8115e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115e58:	2b00      	cmp	r3, #0
 8115e5a:	d101      	bne.n	8115e60 <pbuf_alloc+0x178>
        return NULL;
 8115e5c:	2300      	movs	r3, #0
 8115e5e:	e02b      	b.n	8115eb8 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8115e60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8115e62:	3310      	adds	r3, #16
 8115e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8115e66:	4413      	add	r3, r2
 8115e68:	3303      	adds	r3, #3
 8115e6a:	f023 0303 	bic.w	r3, r3, #3
 8115e6e:	4618      	mov	r0, r3
 8115e70:	88b9      	ldrh	r1, [r7, #4]
 8115e72:	88ba      	ldrh	r2, [r7, #4]
 8115e74:	2300      	movs	r3, #0
 8115e76:	9301      	str	r3, [sp, #4]
 8115e78:	887b      	ldrh	r3, [r7, #2]
 8115e7a:	9300      	str	r3, [sp, #0]
 8115e7c:	460b      	mov	r3, r1
 8115e7e:	4601      	mov	r1, r0
 8115e80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8115e82:	f7ff ff07 	bl	8115c94 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8115e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115e88:	685b      	ldr	r3, [r3, #4]
 8115e8a:	f003 0303 	and.w	r3, r3, #3
 8115e8e:	2b00      	cmp	r3, #0
 8115e90:	d010      	beq.n	8115eb4 <pbuf_alloc+0x1cc>
 8115e92:	4b0b      	ldr	r3, [pc, #44]	@ (8115ec0 <pbuf_alloc+0x1d8>)
 8115e94:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8115e98:	490d      	ldr	r1, [pc, #52]	@ (8115ed0 <pbuf_alloc+0x1e8>)
 8115e9a:	480b      	ldr	r0, [pc, #44]	@ (8115ec8 <pbuf_alloc+0x1e0>)
 8115e9c:	f007 ff9e 	bl	811dddc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8115ea0:	e008      	b.n	8115eb4 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8115ea2:	4b07      	ldr	r3, [pc, #28]	@ (8115ec0 <pbuf_alloc+0x1d8>)
 8115ea4:	f240 1227 	movw	r2, #295	@ 0x127
 8115ea8:	490a      	ldr	r1, [pc, #40]	@ (8115ed4 <pbuf_alloc+0x1ec>)
 8115eaa:	4807      	ldr	r0, [pc, #28]	@ (8115ec8 <pbuf_alloc+0x1e0>)
 8115eac:	f007 ff96 	bl	811dddc <iprintf>
      return NULL;
 8115eb0:	2300      	movs	r3, #0
 8115eb2:	e001      	b.n	8115eb8 <pbuf_alloc+0x1d0>
      break;
 8115eb4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8115eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8115eb8:	4618      	mov	r0, r3
 8115eba:	3728      	adds	r7, #40	@ 0x28
 8115ebc:	46bd      	mov	sp, r7
 8115ebe:	bd80      	pop	{r7, pc}
 8115ec0:	0812040c 	.word	0x0812040c
 8115ec4:	0812047c 	.word	0x0812047c
 8115ec8:	081204ac 	.word	0x081204ac
 8115ecc:	081204d4 	.word	0x081204d4
 8115ed0:	08120508 	.word	0x08120508
 8115ed4:	08120534 	.word	0x08120534

08115ed8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8115ed8:	b580      	push	{r7, lr}
 8115eda:	b086      	sub	sp, #24
 8115edc:	af02      	add	r7, sp, #8
 8115ede:	6078      	str	r0, [r7, #4]
 8115ee0:	460b      	mov	r3, r1
 8115ee2:	807b      	strh	r3, [r7, #2]
 8115ee4:	4613      	mov	r3, r2
 8115ee6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8115ee8:	883b      	ldrh	r3, [r7, #0]
 8115eea:	2b41      	cmp	r3, #65	@ 0x41
 8115eec:	d009      	beq.n	8115f02 <pbuf_alloc_reference+0x2a>
 8115eee:	883b      	ldrh	r3, [r7, #0]
 8115ef0:	2b01      	cmp	r3, #1
 8115ef2:	d006      	beq.n	8115f02 <pbuf_alloc_reference+0x2a>
 8115ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8115f34 <pbuf_alloc_reference+0x5c>)
 8115ef6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8115efa:	490f      	ldr	r1, [pc, #60]	@ (8115f38 <pbuf_alloc_reference+0x60>)
 8115efc:	480f      	ldr	r0, [pc, #60]	@ (8115f3c <pbuf_alloc_reference+0x64>)
 8115efe:	f007 ff6d 	bl	811dddc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8115f02:	200b      	movs	r0, #11
 8115f04:	f7ff faba 	bl	811547c <memp_malloc>
 8115f08:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8115f0a:	68fb      	ldr	r3, [r7, #12]
 8115f0c:	2b00      	cmp	r3, #0
 8115f0e:	d101      	bne.n	8115f14 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8115f10:	2300      	movs	r3, #0
 8115f12:	e00b      	b.n	8115f2c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8115f14:	8879      	ldrh	r1, [r7, #2]
 8115f16:	887a      	ldrh	r2, [r7, #2]
 8115f18:	2300      	movs	r3, #0
 8115f1a:	9301      	str	r3, [sp, #4]
 8115f1c:	883b      	ldrh	r3, [r7, #0]
 8115f1e:	9300      	str	r3, [sp, #0]
 8115f20:	460b      	mov	r3, r1
 8115f22:	6879      	ldr	r1, [r7, #4]
 8115f24:	68f8      	ldr	r0, [r7, #12]
 8115f26:	f7ff feb5 	bl	8115c94 <pbuf_init_alloced_pbuf>
  return p;
 8115f2a:	68fb      	ldr	r3, [r7, #12]
}
 8115f2c:	4618      	mov	r0, r3
 8115f2e:	3710      	adds	r7, #16
 8115f30:	46bd      	mov	sp, r7
 8115f32:	bd80      	pop	{r7, pc}
 8115f34:	0812040c 	.word	0x0812040c
 8115f38:	08120550 	.word	0x08120550
 8115f3c:	081204ac 	.word	0x081204ac

08115f40 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8115f40:	b580      	push	{r7, lr}
 8115f42:	b088      	sub	sp, #32
 8115f44:	af02      	add	r7, sp, #8
 8115f46:	607b      	str	r3, [r7, #4]
 8115f48:	4603      	mov	r3, r0
 8115f4a:	73fb      	strb	r3, [r7, #15]
 8115f4c:	460b      	mov	r3, r1
 8115f4e:	81bb      	strh	r3, [r7, #12]
 8115f50:	4613      	mov	r3, r2
 8115f52:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8115f54:	7bfb      	ldrb	r3, [r7, #15]
 8115f56:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8115f58:	8a7b      	ldrh	r3, [r7, #18]
 8115f5a:	3303      	adds	r3, #3
 8115f5c:	f023 0203 	bic.w	r2, r3, #3
 8115f60:	89bb      	ldrh	r3, [r7, #12]
 8115f62:	441a      	add	r2, r3
 8115f64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8115f66:	429a      	cmp	r2, r3
 8115f68:	d901      	bls.n	8115f6e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8115f6a:	2300      	movs	r3, #0
 8115f6c:	e018      	b.n	8115fa0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8115f6e:	6a3b      	ldr	r3, [r7, #32]
 8115f70:	2b00      	cmp	r3, #0
 8115f72:	d007      	beq.n	8115f84 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8115f74:	8a7b      	ldrh	r3, [r7, #18]
 8115f76:	3303      	adds	r3, #3
 8115f78:	f023 0303 	bic.w	r3, r3, #3
 8115f7c:	6a3a      	ldr	r2, [r7, #32]
 8115f7e:	4413      	add	r3, r2
 8115f80:	617b      	str	r3, [r7, #20]
 8115f82:	e001      	b.n	8115f88 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8115f84:	2300      	movs	r3, #0
 8115f86:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8115f88:	6878      	ldr	r0, [r7, #4]
 8115f8a:	89b9      	ldrh	r1, [r7, #12]
 8115f8c:	89ba      	ldrh	r2, [r7, #12]
 8115f8e:	2302      	movs	r3, #2
 8115f90:	9301      	str	r3, [sp, #4]
 8115f92:	897b      	ldrh	r3, [r7, #10]
 8115f94:	9300      	str	r3, [sp, #0]
 8115f96:	460b      	mov	r3, r1
 8115f98:	6979      	ldr	r1, [r7, #20]
 8115f9a:	f7ff fe7b 	bl	8115c94 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8115f9e:	687b      	ldr	r3, [r7, #4]
}
 8115fa0:	4618      	mov	r0, r3
 8115fa2:	3718      	adds	r7, #24
 8115fa4:	46bd      	mov	sp, r7
 8115fa6:	bd80      	pop	{r7, pc}

08115fa8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8115fa8:	b580      	push	{r7, lr}
 8115faa:	b084      	sub	sp, #16
 8115fac:	af00      	add	r7, sp, #0
 8115fae:	6078      	str	r0, [r7, #4]
 8115fb0:	460b      	mov	r3, r1
 8115fb2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8115fb4:	687b      	ldr	r3, [r7, #4]
 8115fb6:	2b00      	cmp	r3, #0
 8115fb8:	d106      	bne.n	8115fc8 <pbuf_realloc+0x20>
 8115fba:	4b39      	ldr	r3, [pc, #228]	@ (81160a0 <pbuf_realloc+0xf8>)
 8115fbc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8115fc0:	4938      	ldr	r1, [pc, #224]	@ (81160a4 <pbuf_realloc+0xfc>)
 8115fc2:	4839      	ldr	r0, [pc, #228]	@ (81160a8 <pbuf_realloc+0x100>)
 8115fc4:	f007 ff0a 	bl	811dddc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8115fc8:	687b      	ldr	r3, [r7, #4]
 8115fca:	891b      	ldrh	r3, [r3, #8]
 8115fcc:	887a      	ldrh	r2, [r7, #2]
 8115fce:	429a      	cmp	r2, r3
 8115fd0:	d261      	bcs.n	8116096 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8115fd2:	687b      	ldr	r3, [r7, #4]
 8115fd4:	891a      	ldrh	r2, [r3, #8]
 8115fd6:	887b      	ldrh	r3, [r7, #2]
 8115fd8:	1ad3      	subs	r3, r2, r3
 8115fda:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8115fdc:	887b      	ldrh	r3, [r7, #2]
 8115fde:	817b      	strh	r3, [r7, #10]
  q = p;
 8115fe0:	687b      	ldr	r3, [r7, #4]
 8115fe2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8115fe4:	e018      	b.n	8116018 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8115fe6:	68fb      	ldr	r3, [r7, #12]
 8115fe8:	895b      	ldrh	r3, [r3, #10]
 8115fea:	897a      	ldrh	r2, [r7, #10]
 8115fec:	1ad3      	subs	r3, r2, r3
 8115fee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8115ff0:	68fb      	ldr	r3, [r7, #12]
 8115ff2:	891a      	ldrh	r2, [r3, #8]
 8115ff4:	893b      	ldrh	r3, [r7, #8]
 8115ff6:	1ad3      	subs	r3, r2, r3
 8115ff8:	b29a      	uxth	r2, r3
 8115ffa:	68fb      	ldr	r3, [r7, #12]
 8115ffc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8115ffe:	68fb      	ldr	r3, [r7, #12]
 8116000:	681b      	ldr	r3, [r3, #0]
 8116002:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8116004:	68fb      	ldr	r3, [r7, #12]
 8116006:	2b00      	cmp	r3, #0
 8116008:	d106      	bne.n	8116018 <pbuf_realloc+0x70>
 811600a:	4b25      	ldr	r3, [pc, #148]	@ (81160a0 <pbuf_realloc+0xf8>)
 811600c:	f240 12af 	movw	r2, #431	@ 0x1af
 8116010:	4926      	ldr	r1, [pc, #152]	@ (81160ac <pbuf_realloc+0x104>)
 8116012:	4825      	ldr	r0, [pc, #148]	@ (81160a8 <pbuf_realloc+0x100>)
 8116014:	f007 fee2 	bl	811dddc <iprintf>
  while (rem_len > q->len) {
 8116018:	68fb      	ldr	r3, [r7, #12]
 811601a:	895b      	ldrh	r3, [r3, #10]
 811601c:	897a      	ldrh	r2, [r7, #10]
 811601e:	429a      	cmp	r2, r3
 8116020:	d8e1      	bhi.n	8115fe6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8116022:	68fb      	ldr	r3, [r7, #12]
 8116024:	7b1b      	ldrb	r3, [r3, #12]
 8116026:	f003 030f 	and.w	r3, r3, #15
 811602a:	2b00      	cmp	r3, #0
 811602c:	d11f      	bne.n	811606e <pbuf_realloc+0xc6>
 811602e:	68fb      	ldr	r3, [r7, #12]
 8116030:	895b      	ldrh	r3, [r3, #10]
 8116032:	897a      	ldrh	r2, [r7, #10]
 8116034:	429a      	cmp	r2, r3
 8116036:	d01a      	beq.n	811606e <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8116038:	68fb      	ldr	r3, [r7, #12]
 811603a:	7b5b      	ldrb	r3, [r3, #13]
 811603c:	f003 0302 	and.w	r3, r3, #2
 8116040:	2b00      	cmp	r3, #0
 8116042:	d114      	bne.n	811606e <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8116044:	68fb      	ldr	r3, [r7, #12]
 8116046:	685a      	ldr	r2, [r3, #4]
 8116048:	68fb      	ldr	r3, [r7, #12]
 811604a:	1ad2      	subs	r2, r2, r3
 811604c:	897b      	ldrh	r3, [r7, #10]
 811604e:	4413      	add	r3, r2
 8116050:	4619      	mov	r1, r3
 8116052:	68f8      	ldr	r0, [r7, #12]
 8116054:	f7fe ff72 	bl	8114f3c <mem_trim>
 8116058:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 811605a:	68fb      	ldr	r3, [r7, #12]
 811605c:	2b00      	cmp	r3, #0
 811605e:	d106      	bne.n	811606e <pbuf_realloc+0xc6>
 8116060:	4b0f      	ldr	r3, [pc, #60]	@ (81160a0 <pbuf_realloc+0xf8>)
 8116062:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8116066:	4912      	ldr	r1, [pc, #72]	@ (81160b0 <pbuf_realloc+0x108>)
 8116068:	480f      	ldr	r0, [pc, #60]	@ (81160a8 <pbuf_realloc+0x100>)
 811606a:	f007 feb7 	bl	811dddc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 811606e:	68fb      	ldr	r3, [r7, #12]
 8116070:	897a      	ldrh	r2, [r7, #10]
 8116072:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8116074:	68fb      	ldr	r3, [r7, #12]
 8116076:	895a      	ldrh	r2, [r3, #10]
 8116078:	68fb      	ldr	r3, [r7, #12]
 811607a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 811607c:	68fb      	ldr	r3, [r7, #12]
 811607e:	681b      	ldr	r3, [r3, #0]
 8116080:	2b00      	cmp	r3, #0
 8116082:	d004      	beq.n	811608e <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8116084:	68fb      	ldr	r3, [r7, #12]
 8116086:	681b      	ldr	r3, [r3, #0]
 8116088:	4618      	mov	r0, r3
 811608a:	f000 f911 	bl	81162b0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 811608e:	68fb      	ldr	r3, [r7, #12]
 8116090:	2200      	movs	r2, #0
 8116092:	601a      	str	r2, [r3, #0]
 8116094:	e000      	b.n	8116098 <pbuf_realloc+0xf0>
    return;
 8116096:	bf00      	nop

}
 8116098:	3710      	adds	r7, #16
 811609a:	46bd      	mov	sp, r7
 811609c:	bd80      	pop	{r7, pc}
 811609e:	bf00      	nop
 81160a0:	0812040c 	.word	0x0812040c
 81160a4:	08120564 	.word	0x08120564
 81160a8:	081204ac 	.word	0x081204ac
 81160ac:	0812057c 	.word	0x0812057c
 81160b0:	08120594 	.word	0x08120594

081160b4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 81160b4:	b580      	push	{r7, lr}
 81160b6:	b086      	sub	sp, #24
 81160b8:	af00      	add	r7, sp, #0
 81160ba:	60f8      	str	r0, [r7, #12]
 81160bc:	60b9      	str	r1, [r7, #8]
 81160be:	4613      	mov	r3, r2
 81160c0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 81160c2:	68fb      	ldr	r3, [r7, #12]
 81160c4:	2b00      	cmp	r3, #0
 81160c6:	d106      	bne.n	81160d6 <pbuf_add_header_impl+0x22>
 81160c8:	4b2b      	ldr	r3, [pc, #172]	@ (8116178 <pbuf_add_header_impl+0xc4>)
 81160ca:	f240 12df 	movw	r2, #479	@ 0x1df
 81160ce:	492b      	ldr	r1, [pc, #172]	@ (811617c <pbuf_add_header_impl+0xc8>)
 81160d0:	482b      	ldr	r0, [pc, #172]	@ (8116180 <pbuf_add_header_impl+0xcc>)
 81160d2:	f007 fe83 	bl	811dddc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 81160d6:	68fb      	ldr	r3, [r7, #12]
 81160d8:	2b00      	cmp	r3, #0
 81160da:	d003      	beq.n	81160e4 <pbuf_add_header_impl+0x30>
 81160dc:	68bb      	ldr	r3, [r7, #8]
 81160de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81160e2:	d301      	bcc.n	81160e8 <pbuf_add_header_impl+0x34>
    return 1;
 81160e4:	2301      	movs	r3, #1
 81160e6:	e043      	b.n	8116170 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 81160e8:	68bb      	ldr	r3, [r7, #8]
 81160ea:	2b00      	cmp	r3, #0
 81160ec:	d101      	bne.n	81160f2 <pbuf_add_header_impl+0x3e>
    return 0;
 81160ee:	2300      	movs	r3, #0
 81160f0:	e03e      	b.n	8116170 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 81160f2:	68bb      	ldr	r3, [r7, #8]
 81160f4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 81160f6:	68fb      	ldr	r3, [r7, #12]
 81160f8:	891a      	ldrh	r2, [r3, #8]
 81160fa:	8a7b      	ldrh	r3, [r7, #18]
 81160fc:	4413      	add	r3, r2
 81160fe:	b29b      	uxth	r3, r3
 8116100:	8a7a      	ldrh	r2, [r7, #18]
 8116102:	429a      	cmp	r2, r3
 8116104:	d901      	bls.n	811610a <pbuf_add_header_impl+0x56>
    return 1;
 8116106:	2301      	movs	r3, #1
 8116108:	e032      	b.n	8116170 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 811610a:	68fb      	ldr	r3, [r7, #12]
 811610c:	7b1b      	ldrb	r3, [r3, #12]
 811610e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8116110:	8a3b      	ldrh	r3, [r7, #16]
 8116112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8116116:	2b00      	cmp	r3, #0
 8116118:	d00c      	beq.n	8116134 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 811611a:	68fb      	ldr	r3, [r7, #12]
 811611c:	685a      	ldr	r2, [r3, #4]
 811611e:	68bb      	ldr	r3, [r7, #8]
 8116120:	425b      	negs	r3, r3
 8116122:	4413      	add	r3, r2
 8116124:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8116126:	68fb      	ldr	r3, [r7, #12]
 8116128:	3310      	adds	r3, #16
 811612a:	697a      	ldr	r2, [r7, #20]
 811612c:	429a      	cmp	r2, r3
 811612e:	d20d      	bcs.n	811614c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8116130:	2301      	movs	r3, #1
 8116132:	e01d      	b.n	8116170 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8116134:	79fb      	ldrb	r3, [r7, #7]
 8116136:	2b00      	cmp	r3, #0
 8116138:	d006      	beq.n	8116148 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 811613a:	68fb      	ldr	r3, [r7, #12]
 811613c:	685a      	ldr	r2, [r3, #4]
 811613e:	68bb      	ldr	r3, [r7, #8]
 8116140:	425b      	negs	r3, r3
 8116142:	4413      	add	r3, r2
 8116144:	617b      	str	r3, [r7, #20]
 8116146:	e001      	b.n	811614c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8116148:	2301      	movs	r3, #1
 811614a:	e011      	b.n	8116170 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 811614c:	68fb      	ldr	r3, [r7, #12]
 811614e:	697a      	ldr	r2, [r7, #20]
 8116150:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8116152:	68fb      	ldr	r3, [r7, #12]
 8116154:	895a      	ldrh	r2, [r3, #10]
 8116156:	8a7b      	ldrh	r3, [r7, #18]
 8116158:	4413      	add	r3, r2
 811615a:	b29a      	uxth	r2, r3
 811615c:	68fb      	ldr	r3, [r7, #12]
 811615e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8116160:	68fb      	ldr	r3, [r7, #12]
 8116162:	891a      	ldrh	r2, [r3, #8]
 8116164:	8a7b      	ldrh	r3, [r7, #18]
 8116166:	4413      	add	r3, r2
 8116168:	b29a      	uxth	r2, r3
 811616a:	68fb      	ldr	r3, [r7, #12]
 811616c:	811a      	strh	r2, [r3, #8]


  return 0;
 811616e:	2300      	movs	r3, #0
}
 8116170:	4618      	mov	r0, r3
 8116172:	3718      	adds	r7, #24
 8116174:	46bd      	mov	sp, r7
 8116176:	bd80      	pop	{r7, pc}
 8116178:	0812040c 	.word	0x0812040c
 811617c:	081205b0 	.word	0x081205b0
 8116180:	081204ac 	.word	0x081204ac

08116184 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8116184:	b580      	push	{r7, lr}
 8116186:	b082      	sub	sp, #8
 8116188:	af00      	add	r7, sp, #0
 811618a:	6078      	str	r0, [r7, #4]
 811618c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 811618e:	2200      	movs	r2, #0
 8116190:	6839      	ldr	r1, [r7, #0]
 8116192:	6878      	ldr	r0, [r7, #4]
 8116194:	f7ff ff8e 	bl	81160b4 <pbuf_add_header_impl>
 8116198:	4603      	mov	r3, r0
}
 811619a:	4618      	mov	r0, r3
 811619c:	3708      	adds	r7, #8
 811619e:	46bd      	mov	sp, r7
 81161a0:	bd80      	pop	{r7, pc}
	...

081161a4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 81161a4:	b580      	push	{r7, lr}
 81161a6:	b084      	sub	sp, #16
 81161a8:	af00      	add	r7, sp, #0
 81161aa:	6078      	str	r0, [r7, #4]
 81161ac:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 81161ae:	687b      	ldr	r3, [r7, #4]
 81161b0:	2b00      	cmp	r3, #0
 81161b2:	d106      	bne.n	81161c2 <pbuf_remove_header+0x1e>
 81161b4:	4b20      	ldr	r3, [pc, #128]	@ (8116238 <pbuf_remove_header+0x94>)
 81161b6:	f240 224b 	movw	r2, #587	@ 0x24b
 81161ba:	4920      	ldr	r1, [pc, #128]	@ (811623c <pbuf_remove_header+0x98>)
 81161bc:	4820      	ldr	r0, [pc, #128]	@ (8116240 <pbuf_remove_header+0x9c>)
 81161be:	f007 fe0d 	bl	811dddc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 81161c2:	687b      	ldr	r3, [r7, #4]
 81161c4:	2b00      	cmp	r3, #0
 81161c6:	d003      	beq.n	81161d0 <pbuf_remove_header+0x2c>
 81161c8:	683b      	ldr	r3, [r7, #0]
 81161ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81161ce:	d301      	bcc.n	81161d4 <pbuf_remove_header+0x30>
    return 1;
 81161d0:	2301      	movs	r3, #1
 81161d2:	e02c      	b.n	811622e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 81161d4:	683b      	ldr	r3, [r7, #0]
 81161d6:	2b00      	cmp	r3, #0
 81161d8:	d101      	bne.n	81161de <pbuf_remove_header+0x3a>
    return 0;
 81161da:	2300      	movs	r3, #0
 81161dc:	e027      	b.n	811622e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 81161de:	683b      	ldr	r3, [r7, #0]
 81161e0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 81161e2:	687b      	ldr	r3, [r7, #4]
 81161e4:	895b      	ldrh	r3, [r3, #10]
 81161e6:	89fa      	ldrh	r2, [r7, #14]
 81161e8:	429a      	cmp	r2, r3
 81161ea:	d908      	bls.n	81161fe <pbuf_remove_header+0x5a>
 81161ec:	4b12      	ldr	r3, [pc, #72]	@ (8116238 <pbuf_remove_header+0x94>)
 81161ee:	f240 2255 	movw	r2, #597	@ 0x255
 81161f2:	4914      	ldr	r1, [pc, #80]	@ (8116244 <pbuf_remove_header+0xa0>)
 81161f4:	4812      	ldr	r0, [pc, #72]	@ (8116240 <pbuf_remove_header+0x9c>)
 81161f6:	f007 fdf1 	bl	811dddc <iprintf>
 81161fa:	2301      	movs	r3, #1
 81161fc:	e017      	b.n	811622e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 81161fe:	687b      	ldr	r3, [r7, #4]
 8116200:	685b      	ldr	r3, [r3, #4]
 8116202:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8116204:	687b      	ldr	r3, [r7, #4]
 8116206:	685a      	ldr	r2, [r3, #4]
 8116208:	683b      	ldr	r3, [r7, #0]
 811620a:	441a      	add	r2, r3
 811620c:	687b      	ldr	r3, [r7, #4]
 811620e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8116210:	687b      	ldr	r3, [r7, #4]
 8116212:	895a      	ldrh	r2, [r3, #10]
 8116214:	89fb      	ldrh	r3, [r7, #14]
 8116216:	1ad3      	subs	r3, r2, r3
 8116218:	b29a      	uxth	r2, r3
 811621a:	687b      	ldr	r3, [r7, #4]
 811621c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 811621e:	687b      	ldr	r3, [r7, #4]
 8116220:	891a      	ldrh	r2, [r3, #8]
 8116222:	89fb      	ldrh	r3, [r7, #14]
 8116224:	1ad3      	subs	r3, r2, r3
 8116226:	b29a      	uxth	r2, r3
 8116228:	687b      	ldr	r3, [r7, #4]
 811622a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 811622c:	2300      	movs	r3, #0
}
 811622e:	4618      	mov	r0, r3
 8116230:	3710      	adds	r7, #16
 8116232:	46bd      	mov	sp, r7
 8116234:	bd80      	pop	{r7, pc}
 8116236:	bf00      	nop
 8116238:	0812040c 	.word	0x0812040c
 811623c:	081205b0 	.word	0x081205b0
 8116240:	081204ac 	.word	0x081204ac
 8116244:	081205bc 	.word	0x081205bc

08116248 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8116248:	b580      	push	{r7, lr}
 811624a:	b082      	sub	sp, #8
 811624c:	af00      	add	r7, sp, #0
 811624e:	6078      	str	r0, [r7, #4]
 8116250:	460b      	mov	r3, r1
 8116252:	807b      	strh	r3, [r7, #2]
 8116254:	4613      	mov	r3, r2
 8116256:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8116258:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811625c:	2b00      	cmp	r3, #0
 811625e:	da08      	bge.n	8116272 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8116260:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8116264:	425b      	negs	r3, r3
 8116266:	4619      	mov	r1, r3
 8116268:	6878      	ldr	r0, [r7, #4]
 811626a:	f7ff ff9b 	bl	81161a4 <pbuf_remove_header>
 811626e:	4603      	mov	r3, r0
 8116270:	e007      	b.n	8116282 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8116272:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8116276:	787a      	ldrb	r2, [r7, #1]
 8116278:	4619      	mov	r1, r3
 811627a:	6878      	ldr	r0, [r7, #4]
 811627c:	f7ff ff1a 	bl	81160b4 <pbuf_add_header_impl>
 8116280:	4603      	mov	r3, r0
  }
}
 8116282:	4618      	mov	r0, r3
 8116284:	3708      	adds	r7, #8
 8116286:	46bd      	mov	sp, r7
 8116288:	bd80      	pop	{r7, pc}

0811628a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 811628a:	b580      	push	{r7, lr}
 811628c:	b082      	sub	sp, #8
 811628e:	af00      	add	r7, sp, #0
 8116290:	6078      	str	r0, [r7, #4]
 8116292:	460b      	mov	r3, r1
 8116294:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8116296:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811629a:	2201      	movs	r2, #1
 811629c:	4619      	mov	r1, r3
 811629e:	6878      	ldr	r0, [r7, #4]
 81162a0:	f7ff ffd2 	bl	8116248 <pbuf_header_impl>
 81162a4:	4603      	mov	r3, r0
}
 81162a6:	4618      	mov	r0, r3
 81162a8:	3708      	adds	r7, #8
 81162aa:	46bd      	mov	sp, r7
 81162ac:	bd80      	pop	{r7, pc}
	...

081162b0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 81162b0:	b580      	push	{r7, lr}
 81162b2:	b088      	sub	sp, #32
 81162b4:	af00      	add	r7, sp, #0
 81162b6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 81162b8:	687b      	ldr	r3, [r7, #4]
 81162ba:	2b00      	cmp	r3, #0
 81162bc:	d10b      	bne.n	81162d6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 81162be:	687b      	ldr	r3, [r7, #4]
 81162c0:	2b00      	cmp	r3, #0
 81162c2:	d106      	bne.n	81162d2 <pbuf_free+0x22>
 81162c4:	4b3b      	ldr	r3, [pc, #236]	@ (81163b4 <pbuf_free+0x104>)
 81162c6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 81162ca:	493b      	ldr	r1, [pc, #236]	@ (81163b8 <pbuf_free+0x108>)
 81162cc:	483b      	ldr	r0, [pc, #236]	@ (81163bc <pbuf_free+0x10c>)
 81162ce:	f007 fd85 	bl	811dddc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 81162d2:	2300      	movs	r3, #0
 81162d4:	e069      	b.n	81163aa <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 81162d6:	2300      	movs	r3, #0
 81162d8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 81162da:	e062      	b.n	81163a2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 81162dc:	f000 fb66 	bl	81169ac <sys_arch_protect>
 81162e0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 81162e2:	687b      	ldr	r3, [r7, #4]
 81162e4:	7b9b      	ldrb	r3, [r3, #14]
 81162e6:	2b00      	cmp	r3, #0
 81162e8:	d106      	bne.n	81162f8 <pbuf_free+0x48>
 81162ea:	4b32      	ldr	r3, [pc, #200]	@ (81163b4 <pbuf_free+0x104>)
 81162ec:	f240 22f1 	movw	r2, #753	@ 0x2f1
 81162f0:	4933      	ldr	r1, [pc, #204]	@ (81163c0 <pbuf_free+0x110>)
 81162f2:	4832      	ldr	r0, [pc, #200]	@ (81163bc <pbuf_free+0x10c>)
 81162f4:	f007 fd72 	bl	811dddc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 81162f8:	687b      	ldr	r3, [r7, #4]
 81162fa:	7b9b      	ldrb	r3, [r3, #14]
 81162fc:	3b01      	subs	r3, #1
 81162fe:	b2da      	uxtb	r2, r3
 8116300:	687b      	ldr	r3, [r7, #4]
 8116302:	739a      	strb	r2, [r3, #14]
 8116304:	687b      	ldr	r3, [r7, #4]
 8116306:	7b9b      	ldrb	r3, [r3, #14]
 8116308:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 811630a:	69b8      	ldr	r0, [r7, #24]
 811630c:	f000 fb5c 	bl	81169c8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8116310:	7dfb      	ldrb	r3, [r7, #23]
 8116312:	2b00      	cmp	r3, #0
 8116314:	d143      	bne.n	811639e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8116316:	687b      	ldr	r3, [r7, #4]
 8116318:	681b      	ldr	r3, [r3, #0]
 811631a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 811631c:	687b      	ldr	r3, [r7, #4]
 811631e:	7b1b      	ldrb	r3, [r3, #12]
 8116320:	f003 030f 	and.w	r3, r3, #15
 8116324:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8116326:	687b      	ldr	r3, [r7, #4]
 8116328:	7b5b      	ldrb	r3, [r3, #13]
 811632a:	f003 0302 	and.w	r3, r3, #2
 811632e:	2b00      	cmp	r3, #0
 8116330:	d011      	beq.n	8116356 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8116332:	687b      	ldr	r3, [r7, #4]
 8116334:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8116336:	68bb      	ldr	r3, [r7, #8]
 8116338:	691b      	ldr	r3, [r3, #16]
 811633a:	2b00      	cmp	r3, #0
 811633c:	d106      	bne.n	811634c <pbuf_free+0x9c>
 811633e:	4b1d      	ldr	r3, [pc, #116]	@ (81163b4 <pbuf_free+0x104>)
 8116340:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8116344:	491f      	ldr	r1, [pc, #124]	@ (81163c4 <pbuf_free+0x114>)
 8116346:	481d      	ldr	r0, [pc, #116]	@ (81163bc <pbuf_free+0x10c>)
 8116348:	f007 fd48 	bl	811dddc <iprintf>
        pc->custom_free_function(p);
 811634c:	68bb      	ldr	r3, [r7, #8]
 811634e:	691b      	ldr	r3, [r3, #16]
 8116350:	6878      	ldr	r0, [r7, #4]
 8116352:	4798      	blx	r3
 8116354:	e01d      	b.n	8116392 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8116356:	7bfb      	ldrb	r3, [r7, #15]
 8116358:	2b02      	cmp	r3, #2
 811635a:	d104      	bne.n	8116366 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 811635c:	6879      	ldr	r1, [r7, #4]
 811635e:	200c      	movs	r0, #12
 8116360:	f7ff f902 	bl	8115568 <memp_free>
 8116364:	e015      	b.n	8116392 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8116366:	7bfb      	ldrb	r3, [r7, #15]
 8116368:	2b01      	cmp	r3, #1
 811636a:	d104      	bne.n	8116376 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 811636c:	6879      	ldr	r1, [r7, #4]
 811636e:	200b      	movs	r0, #11
 8116370:	f7ff f8fa 	bl	8115568 <memp_free>
 8116374:	e00d      	b.n	8116392 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8116376:	7bfb      	ldrb	r3, [r7, #15]
 8116378:	2b00      	cmp	r3, #0
 811637a:	d103      	bne.n	8116384 <pbuf_free+0xd4>
          mem_free(p);
 811637c:	6878      	ldr	r0, [r7, #4]
 811637e:	f7fe fd4d 	bl	8114e1c <mem_free>
 8116382:	e006      	b.n	8116392 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8116384:	4b0b      	ldr	r3, [pc, #44]	@ (81163b4 <pbuf_free+0x104>)
 8116386:	f240 320f 	movw	r2, #783	@ 0x30f
 811638a:	490f      	ldr	r1, [pc, #60]	@ (81163c8 <pbuf_free+0x118>)
 811638c:	480b      	ldr	r0, [pc, #44]	@ (81163bc <pbuf_free+0x10c>)
 811638e:	f007 fd25 	bl	811dddc <iprintf>
        }
      }
      count++;
 8116392:	7ffb      	ldrb	r3, [r7, #31]
 8116394:	3301      	adds	r3, #1
 8116396:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8116398:	693b      	ldr	r3, [r7, #16]
 811639a:	607b      	str	r3, [r7, #4]
 811639c:	e001      	b.n	81163a2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 811639e:	2300      	movs	r3, #0
 81163a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 81163a2:	687b      	ldr	r3, [r7, #4]
 81163a4:	2b00      	cmp	r3, #0
 81163a6:	d199      	bne.n	81162dc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 81163a8:	7ffb      	ldrb	r3, [r7, #31]
}
 81163aa:	4618      	mov	r0, r3
 81163ac:	3720      	adds	r7, #32
 81163ae:	46bd      	mov	sp, r7
 81163b0:	bd80      	pop	{r7, pc}
 81163b2:	bf00      	nop
 81163b4:	0812040c 	.word	0x0812040c
 81163b8:	081205b0 	.word	0x081205b0
 81163bc:	081204ac 	.word	0x081204ac
 81163c0:	081205dc 	.word	0x081205dc
 81163c4:	081205f4 	.word	0x081205f4
 81163c8:	08120618 	.word	0x08120618

081163cc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 81163cc:	b480      	push	{r7}
 81163ce:	b085      	sub	sp, #20
 81163d0:	af00      	add	r7, sp, #0
 81163d2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 81163d4:	2300      	movs	r3, #0
 81163d6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 81163d8:	e005      	b.n	81163e6 <pbuf_clen+0x1a>
    ++len;
 81163da:	89fb      	ldrh	r3, [r7, #14]
 81163dc:	3301      	adds	r3, #1
 81163de:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 81163e0:	687b      	ldr	r3, [r7, #4]
 81163e2:	681b      	ldr	r3, [r3, #0]
 81163e4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 81163e6:	687b      	ldr	r3, [r7, #4]
 81163e8:	2b00      	cmp	r3, #0
 81163ea:	d1f6      	bne.n	81163da <pbuf_clen+0xe>
  }
  return len;
 81163ec:	89fb      	ldrh	r3, [r7, #14]
}
 81163ee:	4618      	mov	r0, r3
 81163f0:	3714      	adds	r7, #20
 81163f2:	46bd      	mov	sp, r7
 81163f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81163f8:	4770      	bx	lr
	...

081163fc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 81163fc:	b580      	push	{r7, lr}
 81163fe:	b084      	sub	sp, #16
 8116400:	af00      	add	r7, sp, #0
 8116402:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8116404:	687b      	ldr	r3, [r7, #4]
 8116406:	2b00      	cmp	r3, #0
 8116408:	d016      	beq.n	8116438 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 811640a:	f000 facf 	bl	81169ac <sys_arch_protect>
 811640e:	60f8      	str	r0, [r7, #12]
 8116410:	687b      	ldr	r3, [r7, #4]
 8116412:	7b9b      	ldrb	r3, [r3, #14]
 8116414:	3301      	adds	r3, #1
 8116416:	b2da      	uxtb	r2, r3
 8116418:	687b      	ldr	r3, [r7, #4]
 811641a:	739a      	strb	r2, [r3, #14]
 811641c:	68f8      	ldr	r0, [r7, #12]
 811641e:	f000 fad3 	bl	81169c8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8116422:	687b      	ldr	r3, [r7, #4]
 8116424:	7b9b      	ldrb	r3, [r3, #14]
 8116426:	2b00      	cmp	r3, #0
 8116428:	d106      	bne.n	8116438 <pbuf_ref+0x3c>
 811642a:	4b05      	ldr	r3, [pc, #20]	@ (8116440 <pbuf_ref+0x44>)
 811642c:	f240 3242 	movw	r2, #834	@ 0x342
 8116430:	4904      	ldr	r1, [pc, #16]	@ (8116444 <pbuf_ref+0x48>)
 8116432:	4805      	ldr	r0, [pc, #20]	@ (8116448 <pbuf_ref+0x4c>)
 8116434:	f007 fcd2 	bl	811dddc <iprintf>
  }
}
 8116438:	bf00      	nop
 811643a:	3710      	adds	r7, #16
 811643c:	46bd      	mov	sp, r7
 811643e:	bd80      	pop	{r7, pc}
 8116440:	0812040c 	.word	0x0812040c
 8116444:	0812062c 	.word	0x0812062c
 8116448:	081204ac 	.word	0x081204ac

0811644c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 811644c:	b580      	push	{r7, lr}
 811644e:	b084      	sub	sp, #16
 8116450:	af00      	add	r7, sp, #0
 8116452:	6078      	str	r0, [r7, #4]
 8116454:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8116456:	687b      	ldr	r3, [r7, #4]
 8116458:	2b00      	cmp	r3, #0
 811645a:	d002      	beq.n	8116462 <pbuf_cat+0x16>
 811645c:	683b      	ldr	r3, [r7, #0]
 811645e:	2b00      	cmp	r3, #0
 8116460:	d107      	bne.n	8116472 <pbuf_cat+0x26>
 8116462:	4b20      	ldr	r3, [pc, #128]	@ (81164e4 <pbuf_cat+0x98>)
 8116464:	f240 3259 	movw	r2, #857	@ 0x359
 8116468:	491f      	ldr	r1, [pc, #124]	@ (81164e8 <pbuf_cat+0x9c>)
 811646a:	4820      	ldr	r0, [pc, #128]	@ (81164ec <pbuf_cat+0xa0>)
 811646c:	f007 fcb6 	bl	811dddc <iprintf>
 8116470:	e034      	b.n	81164dc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8116472:	687b      	ldr	r3, [r7, #4]
 8116474:	60fb      	str	r3, [r7, #12]
 8116476:	e00a      	b.n	811648e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8116478:	68fb      	ldr	r3, [r7, #12]
 811647a:	891a      	ldrh	r2, [r3, #8]
 811647c:	683b      	ldr	r3, [r7, #0]
 811647e:	891b      	ldrh	r3, [r3, #8]
 8116480:	4413      	add	r3, r2
 8116482:	b29a      	uxth	r2, r3
 8116484:	68fb      	ldr	r3, [r7, #12]
 8116486:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8116488:	68fb      	ldr	r3, [r7, #12]
 811648a:	681b      	ldr	r3, [r3, #0]
 811648c:	60fb      	str	r3, [r7, #12]
 811648e:	68fb      	ldr	r3, [r7, #12]
 8116490:	681b      	ldr	r3, [r3, #0]
 8116492:	2b00      	cmp	r3, #0
 8116494:	d1f0      	bne.n	8116478 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8116496:	68fb      	ldr	r3, [r7, #12]
 8116498:	891a      	ldrh	r2, [r3, #8]
 811649a:	68fb      	ldr	r3, [r7, #12]
 811649c:	895b      	ldrh	r3, [r3, #10]
 811649e:	429a      	cmp	r2, r3
 81164a0:	d006      	beq.n	81164b0 <pbuf_cat+0x64>
 81164a2:	4b10      	ldr	r3, [pc, #64]	@ (81164e4 <pbuf_cat+0x98>)
 81164a4:	f240 3262 	movw	r2, #866	@ 0x362
 81164a8:	4911      	ldr	r1, [pc, #68]	@ (81164f0 <pbuf_cat+0xa4>)
 81164aa:	4810      	ldr	r0, [pc, #64]	@ (81164ec <pbuf_cat+0xa0>)
 81164ac:	f007 fc96 	bl	811dddc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 81164b0:	68fb      	ldr	r3, [r7, #12]
 81164b2:	681b      	ldr	r3, [r3, #0]
 81164b4:	2b00      	cmp	r3, #0
 81164b6:	d006      	beq.n	81164c6 <pbuf_cat+0x7a>
 81164b8:	4b0a      	ldr	r3, [pc, #40]	@ (81164e4 <pbuf_cat+0x98>)
 81164ba:	f240 3263 	movw	r2, #867	@ 0x363
 81164be:	490d      	ldr	r1, [pc, #52]	@ (81164f4 <pbuf_cat+0xa8>)
 81164c0:	480a      	ldr	r0, [pc, #40]	@ (81164ec <pbuf_cat+0xa0>)
 81164c2:	f007 fc8b 	bl	811dddc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 81164c6:	68fb      	ldr	r3, [r7, #12]
 81164c8:	891a      	ldrh	r2, [r3, #8]
 81164ca:	683b      	ldr	r3, [r7, #0]
 81164cc:	891b      	ldrh	r3, [r3, #8]
 81164ce:	4413      	add	r3, r2
 81164d0:	b29a      	uxth	r2, r3
 81164d2:	68fb      	ldr	r3, [r7, #12]
 81164d4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 81164d6:	68fb      	ldr	r3, [r7, #12]
 81164d8:	683a      	ldr	r2, [r7, #0]
 81164da:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 81164dc:	3710      	adds	r7, #16
 81164de:	46bd      	mov	sp, r7
 81164e0:	bd80      	pop	{r7, pc}
 81164e2:	bf00      	nop
 81164e4:	0812040c 	.word	0x0812040c
 81164e8:	08120640 	.word	0x08120640
 81164ec:	081204ac 	.word	0x081204ac
 81164f0:	08120678 	.word	0x08120678
 81164f4:	081206a8 	.word	0x081206a8

081164f8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 81164f8:	b580      	push	{r7, lr}
 81164fa:	b082      	sub	sp, #8
 81164fc:	af00      	add	r7, sp, #0
 81164fe:	6078      	str	r0, [r7, #4]
 8116500:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8116502:	6839      	ldr	r1, [r7, #0]
 8116504:	6878      	ldr	r0, [r7, #4]
 8116506:	f7ff ffa1 	bl	811644c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 811650a:	6838      	ldr	r0, [r7, #0]
 811650c:	f7ff ff76 	bl	81163fc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8116510:	bf00      	nop
 8116512:	3708      	adds	r7, #8
 8116514:	46bd      	mov	sp, r7
 8116516:	bd80      	pop	{r7, pc}

08116518 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8116518:	b580      	push	{r7, lr}
 811651a:	b086      	sub	sp, #24
 811651c:	af00      	add	r7, sp, #0
 811651e:	6078      	str	r0, [r7, #4]
 8116520:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8116522:	2300      	movs	r3, #0
 8116524:	617b      	str	r3, [r7, #20]
 8116526:	2300      	movs	r3, #0
 8116528:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 811652a:	687b      	ldr	r3, [r7, #4]
 811652c:	2b00      	cmp	r3, #0
 811652e:	d008      	beq.n	8116542 <pbuf_copy+0x2a>
 8116530:	683b      	ldr	r3, [r7, #0]
 8116532:	2b00      	cmp	r3, #0
 8116534:	d005      	beq.n	8116542 <pbuf_copy+0x2a>
 8116536:	687b      	ldr	r3, [r7, #4]
 8116538:	891a      	ldrh	r2, [r3, #8]
 811653a:	683b      	ldr	r3, [r7, #0]
 811653c:	891b      	ldrh	r3, [r3, #8]
 811653e:	429a      	cmp	r2, r3
 8116540:	d209      	bcs.n	8116556 <pbuf_copy+0x3e>
 8116542:	4b57      	ldr	r3, [pc, #348]	@ (81166a0 <pbuf_copy+0x188>)
 8116544:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8116548:	4956      	ldr	r1, [pc, #344]	@ (81166a4 <pbuf_copy+0x18c>)
 811654a:	4857      	ldr	r0, [pc, #348]	@ (81166a8 <pbuf_copy+0x190>)
 811654c:	f007 fc46 	bl	811dddc <iprintf>
 8116550:	f06f 030f 	mvn.w	r3, #15
 8116554:	e09f      	b.n	8116696 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8116556:	687b      	ldr	r3, [r7, #4]
 8116558:	895b      	ldrh	r3, [r3, #10]
 811655a:	461a      	mov	r2, r3
 811655c:	697b      	ldr	r3, [r7, #20]
 811655e:	1ad2      	subs	r2, r2, r3
 8116560:	683b      	ldr	r3, [r7, #0]
 8116562:	895b      	ldrh	r3, [r3, #10]
 8116564:	4619      	mov	r1, r3
 8116566:	693b      	ldr	r3, [r7, #16]
 8116568:	1acb      	subs	r3, r1, r3
 811656a:	429a      	cmp	r2, r3
 811656c:	d306      	bcc.n	811657c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 811656e:	683b      	ldr	r3, [r7, #0]
 8116570:	895b      	ldrh	r3, [r3, #10]
 8116572:	461a      	mov	r2, r3
 8116574:	693b      	ldr	r3, [r7, #16]
 8116576:	1ad3      	subs	r3, r2, r3
 8116578:	60fb      	str	r3, [r7, #12]
 811657a:	e005      	b.n	8116588 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 811657c:	687b      	ldr	r3, [r7, #4]
 811657e:	895b      	ldrh	r3, [r3, #10]
 8116580:	461a      	mov	r2, r3
 8116582:	697b      	ldr	r3, [r7, #20]
 8116584:	1ad3      	subs	r3, r2, r3
 8116586:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8116588:	687b      	ldr	r3, [r7, #4]
 811658a:	685a      	ldr	r2, [r3, #4]
 811658c:	697b      	ldr	r3, [r7, #20]
 811658e:	18d0      	adds	r0, r2, r3
 8116590:	683b      	ldr	r3, [r7, #0]
 8116592:	685a      	ldr	r2, [r3, #4]
 8116594:	693b      	ldr	r3, [r7, #16]
 8116596:	4413      	add	r3, r2
 8116598:	68fa      	ldr	r2, [r7, #12]
 811659a:	4619      	mov	r1, r3
 811659c:	f007 fead 	bl	811e2fa <memcpy>
    offset_to += len;
 81165a0:	697a      	ldr	r2, [r7, #20]
 81165a2:	68fb      	ldr	r3, [r7, #12]
 81165a4:	4413      	add	r3, r2
 81165a6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 81165a8:	693a      	ldr	r2, [r7, #16]
 81165aa:	68fb      	ldr	r3, [r7, #12]
 81165ac:	4413      	add	r3, r2
 81165ae:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 81165b0:	687b      	ldr	r3, [r7, #4]
 81165b2:	895b      	ldrh	r3, [r3, #10]
 81165b4:	461a      	mov	r2, r3
 81165b6:	697b      	ldr	r3, [r7, #20]
 81165b8:	4293      	cmp	r3, r2
 81165ba:	d906      	bls.n	81165ca <pbuf_copy+0xb2>
 81165bc:	4b38      	ldr	r3, [pc, #224]	@ (81166a0 <pbuf_copy+0x188>)
 81165be:	f240 32d9 	movw	r2, #985	@ 0x3d9
 81165c2:	493a      	ldr	r1, [pc, #232]	@ (81166ac <pbuf_copy+0x194>)
 81165c4:	4838      	ldr	r0, [pc, #224]	@ (81166a8 <pbuf_copy+0x190>)
 81165c6:	f007 fc09 	bl	811dddc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 81165ca:	683b      	ldr	r3, [r7, #0]
 81165cc:	895b      	ldrh	r3, [r3, #10]
 81165ce:	461a      	mov	r2, r3
 81165d0:	693b      	ldr	r3, [r7, #16]
 81165d2:	4293      	cmp	r3, r2
 81165d4:	d906      	bls.n	81165e4 <pbuf_copy+0xcc>
 81165d6:	4b32      	ldr	r3, [pc, #200]	@ (81166a0 <pbuf_copy+0x188>)
 81165d8:	f240 32da 	movw	r2, #986	@ 0x3da
 81165dc:	4934      	ldr	r1, [pc, #208]	@ (81166b0 <pbuf_copy+0x198>)
 81165de:	4832      	ldr	r0, [pc, #200]	@ (81166a8 <pbuf_copy+0x190>)
 81165e0:	f007 fbfc 	bl	811dddc <iprintf>
    if (offset_from >= p_from->len) {
 81165e4:	683b      	ldr	r3, [r7, #0]
 81165e6:	895b      	ldrh	r3, [r3, #10]
 81165e8:	461a      	mov	r2, r3
 81165ea:	693b      	ldr	r3, [r7, #16]
 81165ec:	4293      	cmp	r3, r2
 81165ee:	d304      	bcc.n	81165fa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 81165f0:	2300      	movs	r3, #0
 81165f2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 81165f4:	683b      	ldr	r3, [r7, #0]
 81165f6:	681b      	ldr	r3, [r3, #0]
 81165f8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 81165fa:	687b      	ldr	r3, [r7, #4]
 81165fc:	895b      	ldrh	r3, [r3, #10]
 81165fe:	461a      	mov	r2, r3
 8116600:	697b      	ldr	r3, [r7, #20]
 8116602:	4293      	cmp	r3, r2
 8116604:	d114      	bne.n	8116630 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8116606:	2300      	movs	r3, #0
 8116608:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 811660a:	687b      	ldr	r3, [r7, #4]
 811660c:	681b      	ldr	r3, [r3, #0]
 811660e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8116610:	687b      	ldr	r3, [r7, #4]
 8116612:	2b00      	cmp	r3, #0
 8116614:	d10c      	bne.n	8116630 <pbuf_copy+0x118>
 8116616:	683b      	ldr	r3, [r7, #0]
 8116618:	2b00      	cmp	r3, #0
 811661a:	d009      	beq.n	8116630 <pbuf_copy+0x118>
 811661c:	4b20      	ldr	r3, [pc, #128]	@ (81166a0 <pbuf_copy+0x188>)
 811661e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8116622:	4924      	ldr	r1, [pc, #144]	@ (81166b4 <pbuf_copy+0x19c>)
 8116624:	4820      	ldr	r0, [pc, #128]	@ (81166a8 <pbuf_copy+0x190>)
 8116626:	f007 fbd9 	bl	811dddc <iprintf>
 811662a:	f06f 030f 	mvn.w	r3, #15
 811662e:	e032      	b.n	8116696 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8116630:	683b      	ldr	r3, [r7, #0]
 8116632:	2b00      	cmp	r3, #0
 8116634:	d013      	beq.n	811665e <pbuf_copy+0x146>
 8116636:	683b      	ldr	r3, [r7, #0]
 8116638:	895a      	ldrh	r2, [r3, #10]
 811663a:	683b      	ldr	r3, [r7, #0]
 811663c:	891b      	ldrh	r3, [r3, #8]
 811663e:	429a      	cmp	r2, r3
 8116640:	d10d      	bne.n	811665e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8116642:	683b      	ldr	r3, [r7, #0]
 8116644:	681b      	ldr	r3, [r3, #0]
 8116646:	2b00      	cmp	r3, #0
 8116648:	d009      	beq.n	811665e <pbuf_copy+0x146>
 811664a:	4b15      	ldr	r3, [pc, #84]	@ (81166a0 <pbuf_copy+0x188>)
 811664c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8116650:	4919      	ldr	r1, [pc, #100]	@ (81166b8 <pbuf_copy+0x1a0>)
 8116652:	4815      	ldr	r0, [pc, #84]	@ (81166a8 <pbuf_copy+0x190>)
 8116654:	f007 fbc2 	bl	811dddc <iprintf>
 8116658:	f06f 0305 	mvn.w	r3, #5
 811665c:	e01b      	b.n	8116696 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 811665e:	687b      	ldr	r3, [r7, #4]
 8116660:	2b00      	cmp	r3, #0
 8116662:	d013      	beq.n	811668c <pbuf_copy+0x174>
 8116664:	687b      	ldr	r3, [r7, #4]
 8116666:	895a      	ldrh	r2, [r3, #10]
 8116668:	687b      	ldr	r3, [r7, #4]
 811666a:	891b      	ldrh	r3, [r3, #8]
 811666c:	429a      	cmp	r2, r3
 811666e:	d10d      	bne.n	811668c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8116670:	687b      	ldr	r3, [r7, #4]
 8116672:	681b      	ldr	r3, [r3, #0]
 8116674:	2b00      	cmp	r3, #0
 8116676:	d009      	beq.n	811668c <pbuf_copy+0x174>
 8116678:	4b09      	ldr	r3, [pc, #36]	@ (81166a0 <pbuf_copy+0x188>)
 811667a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 811667e:	490e      	ldr	r1, [pc, #56]	@ (81166b8 <pbuf_copy+0x1a0>)
 8116680:	4809      	ldr	r0, [pc, #36]	@ (81166a8 <pbuf_copy+0x190>)
 8116682:	f007 fbab 	bl	811dddc <iprintf>
 8116686:	f06f 0305 	mvn.w	r3, #5
 811668a:	e004      	b.n	8116696 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 811668c:	683b      	ldr	r3, [r7, #0]
 811668e:	2b00      	cmp	r3, #0
 8116690:	f47f af61 	bne.w	8116556 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8116694:	2300      	movs	r3, #0
}
 8116696:	4618      	mov	r0, r3
 8116698:	3718      	adds	r7, #24
 811669a:	46bd      	mov	sp, r7
 811669c:	bd80      	pop	{r7, pc}
 811669e:	bf00      	nop
 81166a0:	0812040c 	.word	0x0812040c
 81166a4:	081206f4 	.word	0x081206f4
 81166a8:	081204ac 	.word	0x081204ac
 81166ac:	08120724 	.word	0x08120724
 81166b0:	0812073c 	.word	0x0812073c
 81166b4:	08120758 	.word	0x08120758
 81166b8:	08120768 	.word	0x08120768

081166bc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 81166bc:	b580      	push	{r7, lr}
 81166be:	b088      	sub	sp, #32
 81166c0:	af00      	add	r7, sp, #0
 81166c2:	60f8      	str	r0, [r7, #12]
 81166c4:	60b9      	str	r1, [r7, #8]
 81166c6:	4611      	mov	r1, r2
 81166c8:	461a      	mov	r2, r3
 81166ca:	460b      	mov	r3, r1
 81166cc:	80fb      	strh	r3, [r7, #6]
 81166ce:	4613      	mov	r3, r2
 81166d0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 81166d2:	2300      	movs	r3, #0
 81166d4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 81166d6:	2300      	movs	r3, #0
 81166d8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 81166da:	68fb      	ldr	r3, [r7, #12]
 81166dc:	2b00      	cmp	r3, #0
 81166de:	d108      	bne.n	81166f2 <pbuf_copy_partial+0x36>
 81166e0:	4b2b      	ldr	r3, [pc, #172]	@ (8116790 <pbuf_copy_partial+0xd4>)
 81166e2:	f240 420a 	movw	r2, #1034	@ 0x40a
 81166e6:	492b      	ldr	r1, [pc, #172]	@ (8116794 <pbuf_copy_partial+0xd8>)
 81166e8:	482b      	ldr	r0, [pc, #172]	@ (8116798 <pbuf_copy_partial+0xdc>)
 81166ea:	f007 fb77 	bl	811dddc <iprintf>
 81166ee:	2300      	movs	r3, #0
 81166f0:	e04a      	b.n	8116788 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 81166f2:	68bb      	ldr	r3, [r7, #8]
 81166f4:	2b00      	cmp	r3, #0
 81166f6:	d108      	bne.n	811670a <pbuf_copy_partial+0x4e>
 81166f8:	4b25      	ldr	r3, [pc, #148]	@ (8116790 <pbuf_copy_partial+0xd4>)
 81166fa:	f240 420b 	movw	r2, #1035	@ 0x40b
 81166fe:	4927      	ldr	r1, [pc, #156]	@ (811679c <pbuf_copy_partial+0xe0>)
 8116700:	4825      	ldr	r0, [pc, #148]	@ (8116798 <pbuf_copy_partial+0xdc>)
 8116702:	f007 fb6b 	bl	811dddc <iprintf>
 8116706:	2300      	movs	r3, #0
 8116708:	e03e      	b.n	8116788 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 811670a:	68fb      	ldr	r3, [r7, #12]
 811670c:	61fb      	str	r3, [r7, #28]
 811670e:	e034      	b.n	811677a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8116710:	88bb      	ldrh	r3, [r7, #4]
 8116712:	2b00      	cmp	r3, #0
 8116714:	d00a      	beq.n	811672c <pbuf_copy_partial+0x70>
 8116716:	69fb      	ldr	r3, [r7, #28]
 8116718:	895b      	ldrh	r3, [r3, #10]
 811671a:	88ba      	ldrh	r2, [r7, #4]
 811671c:	429a      	cmp	r2, r3
 811671e:	d305      	bcc.n	811672c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8116720:	69fb      	ldr	r3, [r7, #28]
 8116722:	895b      	ldrh	r3, [r3, #10]
 8116724:	88ba      	ldrh	r2, [r7, #4]
 8116726:	1ad3      	subs	r3, r2, r3
 8116728:	80bb      	strh	r3, [r7, #4]
 811672a:	e023      	b.n	8116774 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 811672c:	69fb      	ldr	r3, [r7, #28]
 811672e:	895a      	ldrh	r2, [r3, #10]
 8116730:	88bb      	ldrh	r3, [r7, #4]
 8116732:	1ad3      	subs	r3, r2, r3
 8116734:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8116736:	8b3a      	ldrh	r2, [r7, #24]
 8116738:	88fb      	ldrh	r3, [r7, #6]
 811673a:	429a      	cmp	r2, r3
 811673c:	d901      	bls.n	8116742 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 811673e:	88fb      	ldrh	r3, [r7, #6]
 8116740:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8116742:	8b7b      	ldrh	r3, [r7, #26]
 8116744:	68ba      	ldr	r2, [r7, #8]
 8116746:	18d0      	adds	r0, r2, r3
 8116748:	69fb      	ldr	r3, [r7, #28]
 811674a:	685a      	ldr	r2, [r3, #4]
 811674c:	88bb      	ldrh	r3, [r7, #4]
 811674e:	4413      	add	r3, r2
 8116750:	8b3a      	ldrh	r2, [r7, #24]
 8116752:	4619      	mov	r1, r3
 8116754:	f007 fdd1 	bl	811e2fa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8116758:	8afa      	ldrh	r2, [r7, #22]
 811675a:	8b3b      	ldrh	r3, [r7, #24]
 811675c:	4413      	add	r3, r2
 811675e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8116760:	8b7a      	ldrh	r2, [r7, #26]
 8116762:	8b3b      	ldrh	r3, [r7, #24]
 8116764:	4413      	add	r3, r2
 8116766:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8116768:	88fa      	ldrh	r2, [r7, #6]
 811676a:	8b3b      	ldrh	r3, [r7, #24]
 811676c:	1ad3      	subs	r3, r2, r3
 811676e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8116770:	2300      	movs	r3, #0
 8116772:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8116774:	69fb      	ldr	r3, [r7, #28]
 8116776:	681b      	ldr	r3, [r3, #0]
 8116778:	61fb      	str	r3, [r7, #28]
 811677a:	88fb      	ldrh	r3, [r7, #6]
 811677c:	2b00      	cmp	r3, #0
 811677e:	d002      	beq.n	8116786 <pbuf_copy_partial+0xca>
 8116780:	69fb      	ldr	r3, [r7, #28]
 8116782:	2b00      	cmp	r3, #0
 8116784:	d1c4      	bne.n	8116710 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8116786:	8afb      	ldrh	r3, [r7, #22]
}
 8116788:	4618      	mov	r0, r3
 811678a:	3720      	adds	r7, #32
 811678c:	46bd      	mov	sp, r7
 811678e:	bd80      	pop	{r7, pc}
 8116790:	0812040c 	.word	0x0812040c
 8116794:	08120794 	.word	0x08120794
 8116798:	081204ac 	.word	0x081204ac
 811679c:	081207b4 	.word	0x081207b4

081167a0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 81167a0:	b580      	push	{r7, lr}
 81167a2:	b084      	sub	sp, #16
 81167a4:	af00      	add	r7, sp, #0
 81167a6:	4603      	mov	r3, r0
 81167a8:	603a      	str	r2, [r7, #0]
 81167aa:	71fb      	strb	r3, [r7, #7]
 81167ac:	460b      	mov	r3, r1
 81167ae:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 81167b0:	683b      	ldr	r3, [r7, #0]
 81167b2:	8919      	ldrh	r1, [r3, #8]
 81167b4:	88ba      	ldrh	r2, [r7, #4]
 81167b6:	79fb      	ldrb	r3, [r7, #7]
 81167b8:	4618      	mov	r0, r3
 81167ba:	f7ff fa95 	bl	8115ce8 <pbuf_alloc>
 81167be:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 81167c0:	68fb      	ldr	r3, [r7, #12]
 81167c2:	2b00      	cmp	r3, #0
 81167c4:	d101      	bne.n	81167ca <pbuf_clone+0x2a>
    return NULL;
 81167c6:	2300      	movs	r3, #0
 81167c8:	e011      	b.n	81167ee <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 81167ca:	6839      	ldr	r1, [r7, #0]
 81167cc:	68f8      	ldr	r0, [r7, #12]
 81167ce:	f7ff fea3 	bl	8116518 <pbuf_copy>
 81167d2:	4603      	mov	r3, r0
 81167d4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 81167d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 81167da:	2b00      	cmp	r3, #0
 81167dc:	d006      	beq.n	81167ec <pbuf_clone+0x4c>
 81167de:	4b06      	ldr	r3, [pc, #24]	@ (81167f8 <pbuf_clone+0x58>)
 81167e0:	f240 5224 	movw	r2, #1316	@ 0x524
 81167e4:	4905      	ldr	r1, [pc, #20]	@ (81167fc <pbuf_clone+0x5c>)
 81167e6:	4806      	ldr	r0, [pc, #24]	@ (8116800 <pbuf_clone+0x60>)
 81167e8:	f007 faf8 	bl	811dddc <iprintf>
  return q;
 81167ec:	68fb      	ldr	r3, [r7, #12]
}
 81167ee:	4618      	mov	r0, r3
 81167f0:	3710      	adds	r7, #16
 81167f2:	46bd      	mov	sp, r7
 81167f4:	bd80      	pop	{r7, pc}
 81167f6:	bf00      	nop
 81167f8:	0812040c 	.word	0x0812040c
 81167fc:	081208c0 	.word	0x081208c0
 8116800:	081204ac 	.word	0x081204ac

08116804 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8116804:	b580      	push	{r7, lr}
 8116806:	b082      	sub	sp, #8
 8116808:	af00      	add	r7, sp, #0
 811680a:	6078      	str	r0, [r7, #4]
 811680c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 811680e:	683b      	ldr	r3, [r7, #0]
 8116810:	2200      	movs	r2, #0
 8116812:	2104      	movs	r1, #4
 8116814:	4618      	mov	r0, r3
 8116816:	f7f7 fa8d 	bl	810dd34 <osMessageQueueNew>
 811681a:	4602      	mov	r2, r0
 811681c:	687b      	ldr	r3, [r7, #4]
 811681e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8116820:	687b      	ldr	r3, [r7, #4]
 8116822:	681b      	ldr	r3, [r3, #0]
 8116824:	2b00      	cmp	r3, #0
 8116826:	d102      	bne.n	811682e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8116828:	f04f 33ff 	mov.w	r3, #4294967295
 811682c:	e000      	b.n	8116830 <sys_mbox_new+0x2c>

  return ERR_OK;
 811682e:	2300      	movs	r3, #0
}
 8116830:	4618      	mov	r0, r3
 8116832:	3708      	adds	r7, #8
 8116834:	46bd      	mov	sp, r7
 8116836:	bd80      	pop	{r7, pc}

08116838 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8116838:	b580      	push	{r7, lr}
 811683a:	b084      	sub	sp, #16
 811683c:	af00      	add	r7, sp, #0
 811683e:	6078      	str	r0, [r7, #4]
 8116840:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8116842:	687b      	ldr	r3, [r7, #4]
 8116844:	6818      	ldr	r0, [r3, #0]
 8116846:	4639      	mov	r1, r7
 8116848:	2300      	movs	r3, #0
 811684a:	2200      	movs	r2, #0
 811684c:	f7f7 fae6 	bl	810de1c <osMessageQueuePut>
 8116850:	4603      	mov	r3, r0
 8116852:	2b00      	cmp	r3, #0
 8116854:	d102      	bne.n	811685c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8116856:	2300      	movs	r3, #0
 8116858:	73fb      	strb	r3, [r7, #15]
 811685a:	e001      	b.n	8116860 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 811685c:	23ff      	movs	r3, #255	@ 0xff
 811685e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8116860:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8116864:	4618      	mov	r0, r3
 8116866:	3710      	adds	r7, #16
 8116868:	46bd      	mov	sp, r7
 811686a:	bd80      	pop	{r7, pc}

0811686c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 811686c:	b580      	push	{r7, lr}
 811686e:	b086      	sub	sp, #24
 8116870:	af00      	add	r7, sp, #0
 8116872:	60f8      	str	r0, [r7, #12]
 8116874:	60b9      	str	r1, [r7, #8]
 8116876:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8116878:	f7f6 ff6c 	bl	810d754 <osKernelGetTickCount>
 811687c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 811687e:	687b      	ldr	r3, [r7, #4]
 8116880:	2b00      	cmp	r3, #0
 8116882:	d013      	beq.n	81168ac <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8116884:	68fb      	ldr	r3, [r7, #12]
 8116886:	6818      	ldr	r0, [r3, #0]
 8116888:	687b      	ldr	r3, [r7, #4]
 811688a:	2200      	movs	r2, #0
 811688c:	68b9      	ldr	r1, [r7, #8]
 811688e:	f7f7 fb25 	bl	810dedc <osMessageQueueGet>
 8116892:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8116894:	693b      	ldr	r3, [r7, #16]
 8116896:	2b00      	cmp	r3, #0
 8116898:	d105      	bne.n	81168a6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 811689a:	f7f6 ff5b 	bl	810d754 <osKernelGetTickCount>
 811689e:	4602      	mov	r2, r0
 81168a0:	697b      	ldr	r3, [r7, #20]
 81168a2:	1ad3      	subs	r3, r2, r3
 81168a4:	e00f      	b.n	81168c6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 81168a6:	f04f 33ff 	mov.w	r3, #4294967295
 81168aa:	e00c      	b.n	81168c6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 81168ac:	68fb      	ldr	r3, [r7, #12]
 81168ae:	6818      	ldr	r0, [r3, #0]
 81168b0:	f04f 33ff 	mov.w	r3, #4294967295
 81168b4:	2200      	movs	r2, #0
 81168b6:	68b9      	ldr	r1, [r7, #8]
 81168b8:	f7f7 fb10 	bl	810dedc <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 81168bc:	f7f6 ff4a 	bl	810d754 <osKernelGetTickCount>
 81168c0:	4602      	mov	r2, r0
 81168c2:	697b      	ldr	r3, [r7, #20]
 81168c4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 81168c6:	4618      	mov	r0, r3
 81168c8:	3718      	adds	r7, #24
 81168ca:	46bd      	mov	sp, r7
 81168cc:	bd80      	pop	{r7, pc}

081168ce <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 81168ce:	b480      	push	{r7}
 81168d0:	b083      	sub	sp, #12
 81168d2:	af00      	add	r7, sp, #0
 81168d4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 81168d6:	687b      	ldr	r3, [r7, #4]
 81168d8:	681b      	ldr	r3, [r3, #0]
 81168da:	2b00      	cmp	r3, #0
 81168dc:	d101      	bne.n	81168e2 <sys_mbox_valid+0x14>
    return 0;
 81168de:	2300      	movs	r3, #0
 81168e0:	e000      	b.n	81168e4 <sys_mbox_valid+0x16>
  else
    return 1;
 81168e2:	2301      	movs	r3, #1
}
 81168e4:	4618      	mov	r0, r3
 81168e6:	370c      	adds	r7, #12
 81168e8:	46bd      	mov	sp, r7
 81168ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81168ee:	4770      	bx	lr

081168f0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 81168f0:	b580      	push	{r7, lr}
 81168f2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 81168f4:	2000      	movs	r0, #0
 81168f6:	f7f6 ffef 	bl	810d8d8 <osMutexNew>
 81168fa:	4603      	mov	r3, r0
 81168fc:	4a01      	ldr	r2, [pc, #4]	@ (8116904 <sys_init+0x14>)
 81168fe:	6013      	str	r3, [r2, #0]
#endif
}
 8116900:	bf00      	nop
 8116902:	bd80      	pop	{r7, pc}
 8116904:	10012124 	.word	0x10012124

08116908 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8116908:	b580      	push	{r7, lr}
 811690a:	b082      	sub	sp, #8
 811690c:	af00      	add	r7, sp, #0
 811690e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8116910:	2000      	movs	r0, #0
 8116912:	f7f6 ffe1 	bl	810d8d8 <osMutexNew>
 8116916:	4602      	mov	r2, r0
 8116918:	687b      	ldr	r3, [r7, #4]
 811691a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 811691c:	687b      	ldr	r3, [r7, #4]
 811691e:	681b      	ldr	r3, [r3, #0]
 8116920:	2b00      	cmp	r3, #0
 8116922:	d102      	bne.n	811692a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8116924:	f04f 33ff 	mov.w	r3, #4294967295
 8116928:	e000      	b.n	811692c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 811692a:	2300      	movs	r3, #0
}
 811692c:	4618      	mov	r0, r3
 811692e:	3708      	adds	r7, #8
 8116930:	46bd      	mov	sp, r7
 8116932:	bd80      	pop	{r7, pc}

08116934 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8116934:	b580      	push	{r7, lr}
 8116936:	b082      	sub	sp, #8
 8116938:	af00      	add	r7, sp, #0
 811693a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 811693c:	687b      	ldr	r3, [r7, #4]
 811693e:	681b      	ldr	r3, [r3, #0]
 8116940:	f04f 31ff 	mov.w	r1, #4294967295
 8116944:	4618      	mov	r0, r3
 8116946:	f7f7 f84d 	bl	810d9e4 <osMutexAcquire>
#endif
}
 811694a:	bf00      	nop
 811694c:	3708      	adds	r7, #8
 811694e:	46bd      	mov	sp, r7
 8116950:	bd80      	pop	{r7, pc}

08116952 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8116952:	b580      	push	{r7, lr}
 8116954:	b082      	sub	sp, #8
 8116956:	af00      	add	r7, sp, #0
 8116958:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 811695a:	687b      	ldr	r3, [r7, #4]
 811695c:	681b      	ldr	r3, [r3, #0]
 811695e:	4618      	mov	r0, r3
 8116960:	f7f7 f88b 	bl	810da7a <osMutexRelease>
}
 8116964:	bf00      	nop
 8116966:	3708      	adds	r7, #8
 8116968:	46bd      	mov	sp, r7
 811696a:	bd80      	pop	{r7, pc}

0811696c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 811696c:	b580      	push	{r7, lr}
 811696e:	b08e      	sub	sp, #56	@ 0x38
 8116970:	af00      	add	r7, sp, #0
 8116972:	60f8      	str	r0, [r7, #12]
 8116974:	60b9      	str	r1, [r7, #8]
 8116976:	607a      	str	r2, [r7, #4]
 8116978:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 811697a:	f107 0314 	add.w	r3, r7, #20
 811697e:	2224      	movs	r2, #36	@ 0x24
 8116980:	2100      	movs	r1, #0
 8116982:	4618      	mov	r0, r3
 8116984:	f007 fb6a 	bl	811e05c <memset>
 8116988:	68fb      	ldr	r3, [r7, #12]
 811698a:	617b      	str	r3, [r7, #20]
 811698c:	683b      	ldr	r3, [r7, #0]
 811698e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8116990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8116992:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8116994:	f107 0314 	add.w	r3, r7, #20
 8116998:	461a      	mov	r2, r3
 811699a:	6879      	ldr	r1, [r7, #4]
 811699c:	68b8      	ldr	r0, [r7, #8]
 811699e:	f7f6 feee 	bl	810d77e <osThreadNew>
 81169a2:	4603      	mov	r3, r0
#endif
}
 81169a4:	4618      	mov	r0, r3
 81169a6:	3738      	adds	r7, #56	@ 0x38
 81169a8:	46bd      	mov	sp, r7
 81169aa:	bd80      	pop	{r7, pc}

081169ac <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 81169ac:	b580      	push	{r7, lr}
 81169ae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 81169b0:	4b04      	ldr	r3, [pc, #16]	@ (81169c4 <sys_arch_protect+0x18>)
 81169b2:	681b      	ldr	r3, [r3, #0]
 81169b4:	f04f 31ff 	mov.w	r1, #4294967295
 81169b8:	4618      	mov	r0, r3
 81169ba:	f7f7 f813 	bl	810d9e4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 81169be:	2301      	movs	r3, #1
}
 81169c0:	4618      	mov	r0, r3
 81169c2:	bd80      	pop	{r7, pc}
 81169c4:	10012124 	.word	0x10012124

081169c8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 81169c8:	b580      	push	{r7, lr}
 81169ca:	b082      	sub	sp, #8
 81169cc:	af00      	add	r7, sp, #0
 81169ce:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 81169d0:	4b04      	ldr	r3, [pc, #16]	@ (81169e4 <sys_arch_unprotect+0x1c>)
 81169d2:	681b      	ldr	r3, [r3, #0]
 81169d4:	4618      	mov	r0, r3
 81169d6:	f7f7 f850 	bl	810da7a <osMutexRelease>
}
 81169da:	bf00      	nop
 81169dc:	3708      	adds	r7, #8
 81169de:	46bd      	mov	sp, r7
 81169e0:	bd80      	pop	{r7, pc}
 81169e2:	bf00      	nop
 81169e4:	10012124 	.word	0x10012124

081169e8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 81169e8:	b580      	push	{r7, lr}
 81169ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 81169ec:	f006 fc86 	bl	811d2fc <rand>
 81169f0:	4603      	mov	r3, r0
 81169f2:	b29b      	uxth	r3, r3
 81169f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 81169f8:	b29b      	uxth	r3, r3
 81169fa:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 81169fe:	b29a      	uxth	r2, r3
 8116a00:	4b01      	ldr	r3, [pc, #4]	@ (8116a08 <tcp_init+0x20>)
 8116a02:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8116a04:	bf00      	nop
 8116a06:	bd80      	pop	{r7, pc}
 8116a08:	10000028 	.word	0x10000028

08116a0c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8116a0c:	b580      	push	{r7, lr}
 8116a0e:	b082      	sub	sp, #8
 8116a10:	af00      	add	r7, sp, #0
 8116a12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8116a14:	687b      	ldr	r3, [r7, #4]
 8116a16:	7d1b      	ldrb	r3, [r3, #20]
 8116a18:	2b01      	cmp	r3, #1
 8116a1a:	d105      	bne.n	8116a28 <tcp_free+0x1c>
 8116a1c:	4b06      	ldr	r3, [pc, #24]	@ (8116a38 <tcp_free+0x2c>)
 8116a1e:	22d4      	movs	r2, #212	@ 0xd4
 8116a20:	4906      	ldr	r1, [pc, #24]	@ (8116a3c <tcp_free+0x30>)
 8116a22:	4807      	ldr	r0, [pc, #28]	@ (8116a40 <tcp_free+0x34>)
 8116a24:	f007 f9da 	bl	811dddc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8116a28:	6879      	ldr	r1, [r7, #4]
 8116a2a:	2001      	movs	r0, #1
 8116a2c:	f7fe fd9c 	bl	8115568 <memp_free>
}
 8116a30:	bf00      	nop
 8116a32:	3708      	adds	r7, #8
 8116a34:	46bd      	mov	sp, r7
 8116a36:	bd80      	pop	{r7, pc}
 8116a38:	0812094c 	.word	0x0812094c
 8116a3c:	081209bc 	.word	0x081209bc
 8116a40:	081209d0 	.word	0x081209d0

08116a44 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8116a44:	b580      	push	{r7, lr}
 8116a46:	b082      	sub	sp, #8
 8116a48:	af00      	add	r7, sp, #0
 8116a4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8116a4c:	687b      	ldr	r3, [r7, #4]
 8116a4e:	7d1b      	ldrb	r3, [r3, #20]
 8116a50:	2b01      	cmp	r3, #1
 8116a52:	d105      	bne.n	8116a60 <tcp_free_listen+0x1c>
 8116a54:	4b06      	ldr	r3, [pc, #24]	@ (8116a70 <tcp_free_listen+0x2c>)
 8116a56:	22df      	movs	r2, #223	@ 0xdf
 8116a58:	4906      	ldr	r1, [pc, #24]	@ (8116a74 <tcp_free_listen+0x30>)
 8116a5a:	4807      	ldr	r0, [pc, #28]	@ (8116a78 <tcp_free_listen+0x34>)
 8116a5c:	f007 f9be 	bl	811dddc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8116a60:	6879      	ldr	r1, [r7, #4]
 8116a62:	2002      	movs	r0, #2
 8116a64:	f7fe fd80 	bl	8115568 <memp_free>
}
 8116a68:	bf00      	nop
 8116a6a:	3708      	adds	r7, #8
 8116a6c:	46bd      	mov	sp, r7
 8116a6e:	bd80      	pop	{r7, pc}
 8116a70:	0812094c 	.word	0x0812094c
 8116a74:	081209f8 	.word	0x081209f8
 8116a78:	081209d0 	.word	0x081209d0

08116a7c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8116a7c:	b580      	push	{r7, lr}
 8116a7e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8116a80:	f001 f808 	bl	8117a94 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8116a84:	4b07      	ldr	r3, [pc, #28]	@ (8116aa4 <tcp_tmr+0x28>)
 8116a86:	781b      	ldrb	r3, [r3, #0]
 8116a88:	3301      	adds	r3, #1
 8116a8a:	b2da      	uxtb	r2, r3
 8116a8c:	4b05      	ldr	r3, [pc, #20]	@ (8116aa4 <tcp_tmr+0x28>)
 8116a8e:	701a      	strb	r2, [r3, #0]
 8116a90:	4b04      	ldr	r3, [pc, #16]	@ (8116aa4 <tcp_tmr+0x28>)
 8116a92:	781b      	ldrb	r3, [r3, #0]
 8116a94:	f003 0301 	and.w	r3, r3, #1
 8116a98:	2b00      	cmp	r3, #0
 8116a9a:	d001      	beq.n	8116aa0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8116a9c:	f000 fcb4 	bl	8117408 <tcp_slowtmr>
  }
}
 8116aa0:	bf00      	nop
 8116aa2:	bd80      	pop	{r7, pc}
 8116aa4:	1001213d 	.word	0x1001213d

08116aa8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8116aa8:	b580      	push	{r7, lr}
 8116aaa:	b084      	sub	sp, #16
 8116aac:	af00      	add	r7, sp, #0
 8116aae:	6078      	str	r0, [r7, #4]
 8116ab0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8116ab2:	683b      	ldr	r3, [r7, #0]
 8116ab4:	2b00      	cmp	r3, #0
 8116ab6:	d105      	bne.n	8116ac4 <tcp_remove_listener+0x1c>
 8116ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8116af0 <tcp_remove_listener+0x48>)
 8116aba:	22ff      	movs	r2, #255	@ 0xff
 8116abc:	490d      	ldr	r1, [pc, #52]	@ (8116af4 <tcp_remove_listener+0x4c>)
 8116abe:	480e      	ldr	r0, [pc, #56]	@ (8116af8 <tcp_remove_listener+0x50>)
 8116ac0:	f007 f98c 	bl	811dddc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8116ac4:	687b      	ldr	r3, [r7, #4]
 8116ac6:	60fb      	str	r3, [r7, #12]
 8116ac8:	e00a      	b.n	8116ae0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8116aca:	68fb      	ldr	r3, [r7, #12]
 8116acc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8116ace:	683a      	ldr	r2, [r7, #0]
 8116ad0:	429a      	cmp	r2, r3
 8116ad2:	d102      	bne.n	8116ada <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8116ad4:	68fb      	ldr	r3, [r7, #12]
 8116ad6:	2200      	movs	r2, #0
 8116ad8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8116ada:	68fb      	ldr	r3, [r7, #12]
 8116adc:	68db      	ldr	r3, [r3, #12]
 8116ade:	60fb      	str	r3, [r7, #12]
 8116ae0:	68fb      	ldr	r3, [r7, #12]
 8116ae2:	2b00      	cmp	r3, #0
 8116ae4:	d1f1      	bne.n	8116aca <tcp_remove_listener+0x22>
    }
  }
}
 8116ae6:	bf00      	nop
 8116ae8:	bf00      	nop
 8116aea:	3710      	adds	r7, #16
 8116aec:	46bd      	mov	sp, r7
 8116aee:	bd80      	pop	{r7, pc}
 8116af0:	0812094c 	.word	0x0812094c
 8116af4:	08120a14 	.word	0x08120a14
 8116af8:	081209d0 	.word	0x081209d0

08116afc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8116afc:	b580      	push	{r7, lr}
 8116afe:	b084      	sub	sp, #16
 8116b00:	af00      	add	r7, sp, #0
 8116b02:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8116b04:	687b      	ldr	r3, [r7, #4]
 8116b06:	2b00      	cmp	r3, #0
 8116b08:	d106      	bne.n	8116b18 <tcp_listen_closed+0x1c>
 8116b0a:	4b14      	ldr	r3, [pc, #80]	@ (8116b5c <tcp_listen_closed+0x60>)
 8116b0c:	f240 1211 	movw	r2, #273	@ 0x111
 8116b10:	4913      	ldr	r1, [pc, #76]	@ (8116b60 <tcp_listen_closed+0x64>)
 8116b12:	4814      	ldr	r0, [pc, #80]	@ (8116b64 <tcp_listen_closed+0x68>)
 8116b14:	f007 f962 	bl	811dddc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8116b18:	687b      	ldr	r3, [r7, #4]
 8116b1a:	7d1b      	ldrb	r3, [r3, #20]
 8116b1c:	2b01      	cmp	r3, #1
 8116b1e:	d006      	beq.n	8116b2e <tcp_listen_closed+0x32>
 8116b20:	4b0e      	ldr	r3, [pc, #56]	@ (8116b5c <tcp_listen_closed+0x60>)
 8116b22:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8116b26:	4910      	ldr	r1, [pc, #64]	@ (8116b68 <tcp_listen_closed+0x6c>)
 8116b28:	480e      	ldr	r0, [pc, #56]	@ (8116b64 <tcp_listen_closed+0x68>)
 8116b2a:	f007 f957 	bl	811dddc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8116b2e:	2301      	movs	r3, #1
 8116b30:	60fb      	str	r3, [r7, #12]
 8116b32:	e00b      	b.n	8116b4c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8116b34:	4a0d      	ldr	r2, [pc, #52]	@ (8116b6c <tcp_listen_closed+0x70>)
 8116b36:	68fb      	ldr	r3, [r7, #12]
 8116b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8116b3c:	681b      	ldr	r3, [r3, #0]
 8116b3e:	6879      	ldr	r1, [r7, #4]
 8116b40:	4618      	mov	r0, r3
 8116b42:	f7ff ffb1 	bl	8116aa8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8116b46:	68fb      	ldr	r3, [r7, #12]
 8116b48:	3301      	adds	r3, #1
 8116b4a:	60fb      	str	r3, [r7, #12]
 8116b4c:	68fb      	ldr	r3, [r7, #12]
 8116b4e:	2b03      	cmp	r3, #3
 8116b50:	d9f0      	bls.n	8116b34 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8116b52:	bf00      	nop
 8116b54:	bf00      	nop
 8116b56:	3710      	adds	r7, #16
 8116b58:	46bd      	mov	sp, r7
 8116b5a:	bd80      	pop	{r7, pc}
 8116b5c:	0812094c 	.word	0x0812094c
 8116b60:	08120a3c 	.word	0x08120a3c
 8116b64:	081209d0 	.word	0x081209d0
 8116b68:	08120a48 	.word	0x08120a48
 8116b6c:	081225c4 	.word	0x081225c4

08116b70 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8116b70:	b5b0      	push	{r4, r5, r7, lr}
 8116b72:	b088      	sub	sp, #32
 8116b74:	af04      	add	r7, sp, #16
 8116b76:	6078      	str	r0, [r7, #4]
 8116b78:	460b      	mov	r3, r1
 8116b7a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8116b7c:	687b      	ldr	r3, [r7, #4]
 8116b7e:	2b00      	cmp	r3, #0
 8116b80:	d106      	bne.n	8116b90 <tcp_close_shutdown+0x20>
 8116b82:	4b63      	ldr	r3, [pc, #396]	@ (8116d10 <tcp_close_shutdown+0x1a0>)
 8116b84:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8116b88:	4962      	ldr	r1, [pc, #392]	@ (8116d14 <tcp_close_shutdown+0x1a4>)
 8116b8a:	4863      	ldr	r0, [pc, #396]	@ (8116d18 <tcp_close_shutdown+0x1a8>)
 8116b8c:	f007 f926 	bl	811dddc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8116b90:	78fb      	ldrb	r3, [r7, #3]
 8116b92:	2b00      	cmp	r3, #0
 8116b94:	d067      	beq.n	8116c66 <tcp_close_shutdown+0xf6>
 8116b96:	687b      	ldr	r3, [r7, #4]
 8116b98:	7d1b      	ldrb	r3, [r3, #20]
 8116b9a:	2b04      	cmp	r3, #4
 8116b9c:	d003      	beq.n	8116ba6 <tcp_close_shutdown+0x36>
 8116b9e:	687b      	ldr	r3, [r7, #4]
 8116ba0:	7d1b      	ldrb	r3, [r3, #20]
 8116ba2:	2b07      	cmp	r3, #7
 8116ba4:	d15f      	bne.n	8116c66 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8116ba6:	687b      	ldr	r3, [r7, #4]
 8116ba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8116baa:	2b00      	cmp	r3, #0
 8116bac:	d105      	bne.n	8116bba <tcp_close_shutdown+0x4a>
 8116bae:	687b      	ldr	r3, [r7, #4]
 8116bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8116bb2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8116bb6:	4293      	cmp	r3, r2
 8116bb8:	d055      	beq.n	8116c66 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8116bba:	687b      	ldr	r3, [r7, #4]
 8116bbc:	8b5b      	ldrh	r3, [r3, #26]
 8116bbe:	f003 0310 	and.w	r3, r3, #16
 8116bc2:	2b00      	cmp	r3, #0
 8116bc4:	d106      	bne.n	8116bd4 <tcp_close_shutdown+0x64>
 8116bc6:	4b52      	ldr	r3, [pc, #328]	@ (8116d10 <tcp_close_shutdown+0x1a0>)
 8116bc8:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8116bcc:	4953      	ldr	r1, [pc, #332]	@ (8116d1c <tcp_close_shutdown+0x1ac>)
 8116bce:	4852      	ldr	r0, [pc, #328]	@ (8116d18 <tcp_close_shutdown+0x1a8>)
 8116bd0:	f007 f904 	bl	811dddc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8116bd4:	687b      	ldr	r3, [r7, #4]
 8116bd6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8116bd8:	687b      	ldr	r3, [r7, #4]
 8116bda:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8116bdc:	687d      	ldr	r5, [r7, #4]
 8116bde:	687b      	ldr	r3, [r7, #4]
 8116be0:	3304      	adds	r3, #4
 8116be2:	687a      	ldr	r2, [r7, #4]
 8116be4:	8ad2      	ldrh	r2, [r2, #22]
 8116be6:	6879      	ldr	r1, [r7, #4]
 8116be8:	8b09      	ldrh	r1, [r1, #24]
 8116bea:	9102      	str	r1, [sp, #8]
 8116bec:	9201      	str	r2, [sp, #4]
 8116bee:	9300      	str	r3, [sp, #0]
 8116bf0:	462b      	mov	r3, r5
 8116bf2:	4622      	mov	r2, r4
 8116bf4:	4601      	mov	r1, r0
 8116bf6:	6878      	ldr	r0, [r7, #4]
 8116bf8:	f005 f85c 	bl	811bcb4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8116bfc:	6878      	ldr	r0, [r7, #4]
 8116bfe:	f001 fa95 	bl	811812c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8116c02:	4b47      	ldr	r3, [pc, #284]	@ (8116d20 <tcp_close_shutdown+0x1b0>)
 8116c04:	681b      	ldr	r3, [r3, #0]
 8116c06:	687a      	ldr	r2, [r7, #4]
 8116c08:	429a      	cmp	r2, r3
 8116c0a:	d105      	bne.n	8116c18 <tcp_close_shutdown+0xa8>
 8116c0c:	4b44      	ldr	r3, [pc, #272]	@ (8116d20 <tcp_close_shutdown+0x1b0>)
 8116c0e:	681b      	ldr	r3, [r3, #0]
 8116c10:	68db      	ldr	r3, [r3, #12]
 8116c12:	4a43      	ldr	r2, [pc, #268]	@ (8116d20 <tcp_close_shutdown+0x1b0>)
 8116c14:	6013      	str	r3, [r2, #0]
 8116c16:	e013      	b.n	8116c40 <tcp_close_shutdown+0xd0>
 8116c18:	4b41      	ldr	r3, [pc, #260]	@ (8116d20 <tcp_close_shutdown+0x1b0>)
 8116c1a:	681b      	ldr	r3, [r3, #0]
 8116c1c:	60fb      	str	r3, [r7, #12]
 8116c1e:	e00c      	b.n	8116c3a <tcp_close_shutdown+0xca>
 8116c20:	68fb      	ldr	r3, [r7, #12]
 8116c22:	68db      	ldr	r3, [r3, #12]
 8116c24:	687a      	ldr	r2, [r7, #4]
 8116c26:	429a      	cmp	r2, r3
 8116c28:	d104      	bne.n	8116c34 <tcp_close_shutdown+0xc4>
 8116c2a:	687b      	ldr	r3, [r7, #4]
 8116c2c:	68da      	ldr	r2, [r3, #12]
 8116c2e:	68fb      	ldr	r3, [r7, #12]
 8116c30:	60da      	str	r2, [r3, #12]
 8116c32:	e005      	b.n	8116c40 <tcp_close_shutdown+0xd0>
 8116c34:	68fb      	ldr	r3, [r7, #12]
 8116c36:	68db      	ldr	r3, [r3, #12]
 8116c38:	60fb      	str	r3, [r7, #12]
 8116c3a:	68fb      	ldr	r3, [r7, #12]
 8116c3c:	2b00      	cmp	r3, #0
 8116c3e:	d1ef      	bne.n	8116c20 <tcp_close_shutdown+0xb0>
 8116c40:	687b      	ldr	r3, [r7, #4]
 8116c42:	2200      	movs	r2, #0
 8116c44:	60da      	str	r2, [r3, #12]
 8116c46:	4b37      	ldr	r3, [pc, #220]	@ (8116d24 <tcp_close_shutdown+0x1b4>)
 8116c48:	2201      	movs	r2, #1
 8116c4a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8116c4c:	4b36      	ldr	r3, [pc, #216]	@ (8116d28 <tcp_close_shutdown+0x1b8>)
 8116c4e:	681b      	ldr	r3, [r3, #0]
 8116c50:	687a      	ldr	r2, [r7, #4]
 8116c52:	429a      	cmp	r2, r3
 8116c54:	d102      	bne.n	8116c5c <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8116c56:	f003 ff2b 	bl	811aab0 <tcp_trigger_input_pcb_close>
 8116c5a:	e002      	b.n	8116c62 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8116c5c:	6878      	ldr	r0, [r7, #4]
 8116c5e:	f7ff fed5 	bl	8116a0c <tcp_free>
      }
      return ERR_OK;
 8116c62:	2300      	movs	r3, #0
 8116c64:	e050      	b.n	8116d08 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8116c66:	687b      	ldr	r3, [r7, #4]
 8116c68:	7d1b      	ldrb	r3, [r3, #20]
 8116c6a:	2b02      	cmp	r3, #2
 8116c6c:	d03b      	beq.n	8116ce6 <tcp_close_shutdown+0x176>
 8116c6e:	2b02      	cmp	r3, #2
 8116c70:	dc44      	bgt.n	8116cfc <tcp_close_shutdown+0x18c>
 8116c72:	2b00      	cmp	r3, #0
 8116c74:	d002      	beq.n	8116c7c <tcp_close_shutdown+0x10c>
 8116c76:	2b01      	cmp	r3, #1
 8116c78:	d02a      	beq.n	8116cd0 <tcp_close_shutdown+0x160>
 8116c7a:	e03f      	b.n	8116cfc <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8116c7c:	687b      	ldr	r3, [r7, #4]
 8116c7e:	8adb      	ldrh	r3, [r3, #22]
 8116c80:	2b00      	cmp	r3, #0
 8116c82:	d021      	beq.n	8116cc8 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8116c84:	4b29      	ldr	r3, [pc, #164]	@ (8116d2c <tcp_close_shutdown+0x1bc>)
 8116c86:	681b      	ldr	r3, [r3, #0]
 8116c88:	687a      	ldr	r2, [r7, #4]
 8116c8a:	429a      	cmp	r2, r3
 8116c8c:	d105      	bne.n	8116c9a <tcp_close_shutdown+0x12a>
 8116c8e:	4b27      	ldr	r3, [pc, #156]	@ (8116d2c <tcp_close_shutdown+0x1bc>)
 8116c90:	681b      	ldr	r3, [r3, #0]
 8116c92:	68db      	ldr	r3, [r3, #12]
 8116c94:	4a25      	ldr	r2, [pc, #148]	@ (8116d2c <tcp_close_shutdown+0x1bc>)
 8116c96:	6013      	str	r3, [r2, #0]
 8116c98:	e013      	b.n	8116cc2 <tcp_close_shutdown+0x152>
 8116c9a:	4b24      	ldr	r3, [pc, #144]	@ (8116d2c <tcp_close_shutdown+0x1bc>)
 8116c9c:	681b      	ldr	r3, [r3, #0]
 8116c9e:	60bb      	str	r3, [r7, #8]
 8116ca0:	e00c      	b.n	8116cbc <tcp_close_shutdown+0x14c>
 8116ca2:	68bb      	ldr	r3, [r7, #8]
 8116ca4:	68db      	ldr	r3, [r3, #12]
 8116ca6:	687a      	ldr	r2, [r7, #4]
 8116ca8:	429a      	cmp	r2, r3
 8116caa:	d104      	bne.n	8116cb6 <tcp_close_shutdown+0x146>
 8116cac:	687b      	ldr	r3, [r7, #4]
 8116cae:	68da      	ldr	r2, [r3, #12]
 8116cb0:	68bb      	ldr	r3, [r7, #8]
 8116cb2:	60da      	str	r2, [r3, #12]
 8116cb4:	e005      	b.n	8116cc2 <tcp_close_shutdown+0x152>
 8116cb6:	68bb      	ldr	r3, [r7, #8]
 8116cb8:	68db      	ldr	r3, [r3, #12]
 8116cba:	60bb      	str	r3, [r7, #8]
 8116cbc:	68bb      	ldr	r3, [r7, #8]
 8116cbe:	2b00      	cmp	r3, #0
 8116cc0:	d1ef      	bne.n	8116ca2 <tcp_close_shutdown+0x132>
 8116cc2:	687b      	ldr	r3, [r7, #4]
 8116cc4:	2200      	movs	r2, #0
 8116cc6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8116cc8:	6878      	ldr	r0, [r7, #4]
 8116cca:	f7ff fe9f 	bl	8116a0c <tcp_free>
      break;
 8116cce:	e01a      	b.n	8116d06 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8116cd0:	6878      	ldr	r0, [r7, #4]
 8116cd2:	f7ff ff13 	bl	8116afc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8116cd6:	6879      	ldr	r1, [r7, #4]
 8116cd8:	4815      	ldr	r0, [pc, #84]	@ (8116d30 <tcp_close_shutdown+0x1c0>)
 8116cda:	f001 fa77 	bl	81181cc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8116cde:	6878      	ldr	r0, [r7, #4]
 8116ce0:	f7ff feb0 	bl	8116a44 <tcp_free_listen>
      break;
 8116ce4:	e00f      	b.n	8116d06 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8116ce6:	6879      	ldr	r1, [r7, #4]
 8116ce8:	480d      	ldr	r0, [pc, #52]	@ (8116d20 <tcp_close_shutdown+0x1b0>)
 8116cea:	f001 fa6f 	bl	81181cc <tcp_pcb_remove>
 8116cee:	4b0d      	ldr	r3, [pc, #52]	@ (8116d24 <tcp_close_shutdown+0x1b4>)
 8116cf0:	2201      	movs	r2, #1
 8116cf2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8116cf4:	6878      	ldr	r0, [r7, #4]
 8116cf6:	f7ff fe89 	bl	8116a0c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8116cfa:	e004      	b.n	8116d06 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8116cfc:	6878      	ldr	r0, [r7, #4]
 8116cfe:	f000 f819 	bl	8116d34 <tcp_close_shutdown_fin>
 8116d02:	4603      	mov	r3, r0
 8116d04:	e000      	b.n	8116d08 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8116d06:	2300      	movs	r3, #0
}
 8116d08:	4618      	mov	r0, r3
 8116d0a:	3710      	adds	r7, #16
 8116d0c:	46bd      	mov	sp, r7
 8116d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8116d10:	0812094c 	.word	0x0812094c
 8116d14:	08120a60 	.word	0x08120a60
 8116d18:	081209d0 	.word	0x081209d0
 8116d1c:	08120a80 	.word	0x08120a80
 8116d20:	10012134 	.word	0x10012134
 8116d24:	1001213c 	.word	0x1001213c
 8116d28:	10012174 	.word	0x10012174
 8116d2c:	1001212c 	.word	0x1001212c
 8116d30:	10012130 	.word	0x10012130

08116d34 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8116d34:	b580      	push	{r7, lr}
 8116d36:	b084      	sub	sp, #16
 8116d38:	af00      	add	r7, sp, #0
 8116d3a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8116d3c:	687b      	ldr	r3, [r7, #4]
 8116d3e:	2b00      	cmp	r3, #0
 8116d40:	d106      	bne.n	8116d50 <tcp_close_shutdown_fin+0x1c>
 8116d42:	4b2e      	ldr	r3, [pc, #184]	@ (8116dfc <tcp_close_shutdown_fin+0xc8>)
 8116d44:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8116d48:	492d      	ldr	r1, [pc, #180]	@ (8116e00 <tcp_close_shutdown_fin+0xcc>)
 8116d4a:	482e      	ldr	r0, [pc, #184]	@ (8116e04 <tcp_close_shutdown_fin+0xd0>)
 8116d4c:	f007 f846 	bl	811dddc <iprintf>

  switch (pcb->state) {
 8116d50:	687b      	ldr	r3, [r7, #4]
 8116d52:	7d1b      	ldrb	r3, [r3, #20]
 8116d54:	2b07      	cmp	r3, #7
 8116d56:	d020      	beq.n	8116d9a <tcp_close_shutdown_fin+0x66>
 8116d58:	2b07      	cmp	r3, #7
 8116d5a:	dc2b      	bgt.n	8116db4 <tcp_close_shutdown_fin+0x80>
 8116d5c:	2b03      	cmp	r3, #3
 8116d5e:	d002      	beq.n	8116d66 <tcp_close_shutdown_fin+0x32>
 8116d60:	2b04      	cmp	r3, #4
 8116d62:	d00d      	beq.n	8116d80 <tcp_close_shutdown_fin+0x4c>
 8116d64:	e026      	b.n	8116db4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8116d66:	6878      	ldr	r0, [r7, #4]
 8116d68:	f004 f8b2 	bl	811aed0 <tcp_send_fin>
 8116d6c:	4603      	mov	r3, r0
 8116d6e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8116d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8116d74:	2b00      	cmp	r3, #0
 8116d76:	d11f      	bne.n	8116db8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8116d78:	687b      	ldr	r3, [r7, #4]
 8116d7a:	2205      	movs	r2, #5
 8116d7c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8116d7e:	e01b      	b.n	8116db8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8116d80:	6878      	ldr	r0, [r7, #4]
 8116d82:	f004 f8a5 	bl	811aed0 <tcp_send_fin>
 8116d86:	4603      	mov	r3, r0
 8116d88:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8116d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8116d8e:	2b00      	cmp	r3, #0
 8116d90:	d114      	bne.n	8116dbc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8116d92:	687b      	ldr	r3, [r7, #4]
 8116d94:	2205      	movs	r2, #5
 8116d96:	751a      	strb	r2, [r3, #20]
      }
      break;
 8116d98:	e010      	b.n	8116dbc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8116d9a:	6878      	ldr	r0, [r7, #4]
 8116d9c:	f004 f898 	bl	811aed0 <tcp_send_fin>
 8116da0:	4603      	mov	r3, r0
 8116da2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8116da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8116da8:	2b00      	cmp	r3, #0
 8116daa:	d109      	bne.n	8116dc0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8116dac:	687b      	ldr	r3, [r7, #4]
 8116dae:	2209      	movs	r2, #9
 8116db0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8116db2:	e005      	b.n	8116dc0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8116db4:	2300      	movs	r3, #0
 8116db6:	e01c      	b.n	8116df2 <tcp_close_shutdown_fin+0xbe>
      break;
 8116db8:	bf00      	nop
 8116dba:	e002      	b.n	8116dc2 <tcp_close_shutdown_fin+0x8e>
      break;
 8116dbc:	bf00      	nop
 8116dbe:	e000      	b.n	8116dc2 <tcp_close_shutdown_fin+0x8e>
      break;
 8116dc0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8116dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8116dc6:	2b00      	cmp	r3, #0
 8116dc8:	d103      	bne.n	8116dd2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8116dca:	6878      	ldr	r0, [r7, #4]
 8116dcc:	f004 f9be 	bl	811b14c <tcp_output>
 8116dd0:	e00d      	b.n	8116dee <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8116dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8116dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8116dda:	d108      	bne.n	8116dee <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8116ddc:	687b      	ldr	r3, [r7, #4]
 8116dde:	8b5b      	ldrh	r3, [r3, #26]
 8116de0:	f043 0308 	orr.w	r3, r3, #8
 8116de4:	b29a      	uxth	r2, r3
 8116de6:	687b      	ldr	r3, [r7, #4]
 8116de8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8116dea:	2300      	movs	r3, #0
 8116dec:	e001      	b.n	8116df2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8116dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8116df2:	4618      	mov	r0, r3
 8116df4:	3710      	adds	r7, #16
 8116df6:	46bd      	mov	sp, r7
 8116df8:	bd80      	pop	{r7, pc}
 8116dfa:	bf00      	nop
 8116dfc:	0812094c 	.word	0x0812094c
 8116e00:	08120a3c 	.word	0x08120a3c
 8116e04:	081209d0 	.word	0x081209d0

08116e08 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8116e08:	b580      	push	{r7, lr}
 8116e0a:	b082      	sub	sp, #8
 8116e0c:	af00      	add	r7, sp, #0
 8116e0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8116e10:	687b      	ldr	r3, [r7, #4]
 8116e12:	2b00      	cmp	r3, #0
 8116e14:	d109      	bne.n	8116e2a <tcp_close+0x22>
 8116e16:	4b0f      	ldr	r3, [pc, #60]	@ (8116e54 <tcp_close+0x4c>)
 8116e18:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8116e1c:	490e      	ldr	r1, [pc, #56]	@ (8116e58 <tcp_close+0x50>)
 8116e1e:	480f      	ldr	r0, [pc, #60]	@ (8116e5c <tcp_close+0x54>)
 8116e20:	f006 ffdc 	bl	811dddc <iprintf>
 8116e24:	f06f 030f 	mvn.w	r3, #15
 8116e28:	e00f      	b.n	8116e4a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8116e2a:	687b      	ldr	r3, [r7, #4]
 8116e2c:	7d1b      	ldrb	r3, [r3, #20]
 8116e2e:	2b01      	cmp	r3, #1
 8116e30:	d006      	beq.n	8116e40 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8116e32:	687b      	ldr	r3, [r7, #4]
 8116e34:	8b5b      	ldrh	r3, [r3, #26]
 8116e36:	f043 0310 	orr.w	r3, r3, #16
 8116e3a:	b29a      	uxth	r2, r3
 8116e3c:	687b      	ldr	r3, [r7, #4]
 8116e3e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8116e40:	2101      	movs	r1, #1
 8116e42:	6878      	ldr	r0, [r7, #4]
 8116e44:	f7ff fe94 	bl	8116b70 <tcp_close_shutdown>
 8116e48:	4603      	mov	r3, r0
}
 8116e4a:	4618      	mov	r0, r3
 8116e4c:	3708      	adds	r7, #8
 8116e4e:	46bd      	mov	sp, r7
 8116e50:	bd80      	pop	{r7, pc}
 8116e52:	bf00      	nop
 8116e54:	0812094c 	.word	0x0812094c
 8116e58:	08120a9c 	.word	0x08120a9c
 8116e5c:	081209d0 	.word	0x081209d0

08116e60 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8116e60:	b580      	push	{r7, lr}
 8116e62:	b08e      	sub	sp, #56	@ 0x38
 8116e64:	af04      	add	r7, sp, #16
 8116e66:	6078      	str	r0, [r7, #4]
 8116e68:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8116e6a:	687b      	ldr	r3, [r7, #4]
 8116e6c:	2b00      	cmp	r3, #0
 8116e6e:	d107      	bne.n	8116e80 <tcp_abandon+0x20>
 8116e70:	4b52      	ldr	r3, [pc, #328]	@ (8116fbc <tcp_abandon+0x15c>)
 8116e72:	f240 223d 	movw	r2, #573	@ 0x23d
 8116e76:	4952      	ldr	r1, [pc, #328]	@ (8116fc0 <tcp_abandon+0x160>)
 8116e78:	4852      	ldr	r0, [pc, #328]	@ (8116fc4 <tcp_abandon+0x164>)
 8116e7a:	f006 ffaf 	bl	811dddc <iprintf>
 8116e7e:	e099      	b.n	8116fb4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8116e80:	687b      	ldr	r3, [r7, #4]
 8116e82:	7d1b      	ldrb	r3, [r3, #20]
 8116e84:	2b01      	cmp	r3, #1
 8116e86:	d106      	bne.n	8116e96 <tcp_abandon+0x36>
 8116e88:	4b4c      	ldr	r3, [pc, #304]	@ (8116fbc <tcp_abandon+0x15c>)
 8116e8a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8116e8e:	494e      	ldr	r1, [pc, #312]	@ (8116fc8 <tcp_abandon+0x168>)
 8116e90:	484c      	ldr	r0, [pc, #304]	@ (8116fc4 <tcp_abandon+0x164>)
 8116e92:	f006 ffa3 	bl	811dddc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8116e96:	687b      	ldr	r3, [r7, #4]
 8116e98:	7d1b      	ldrb	r3, [r3, #20]
 8116e9a:	2b0a      	cmp	r3, #10
 8116e9c:	d107      	bne.n	8116eae <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8116e9e:	6879      	ldr	r1, [r7, #4]
 8116ea0:	484a      	ldr	r0, [pc, #296]	@ (8116fcc <tcp_abandon+0x16c>)
 8116ea2:	f001 f993 	bl	81181cc <tcp_pcb_remove>
    tcp_free(pcb);
 8116ea6:	6878      	ldr	r0, [r7, #4]
 8116ea8:	f7ff fdb0 	bl	8116a0c <tcp_free>
 8116eac:	e082      	b.n	8116fb4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8116eae:	2300      	movs	r3, #0
 8116eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8116eb2:	2300      	movs	r3, #0
 8116eb4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8116eb6:	687b      	ldr	r3, [r7, #4]
 8116eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8116eba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8116ebc:	687b      	ldr	r3, [r7, #4]
 8116ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8116ec0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8116ec2:	687b      	ldr	r3, [r7, #4]
 8116ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8116ec8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8116eca:	687b      	ldr	r3, [r7, #4]
 8116ecc:	691b      	ldr	r3, [r3, #16]
 8116ece:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8116ed0:	687b      	ldr	r3, [r7, #4]
 8116ed2:	7d1b      	ldrb	r3, [r3, #20]
 8116ed4:	2b00      	cmp	r3, #0
 8116ed6:	d126      	bne.n	8116f26 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8116ed8:	687b      	ldr	r3, [r7, #4]
 8116eda:	8adb      	ldrh	r3, [r3, #22]
 8116edc:	2b00      	cmp	r3, #0
 8116ede:	d02e      	beq.n	8116f3e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8116ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8116fd0 <tcp_abandon+0x170>)
 8116ee2:	681b      	ldr	r3, [r3, #0]
 8116ee4:	687a      	ldr	r2, [r7, #4]
 8116ee6:	429a      	cmp	r2, r3
 8116ee8:	d105      	bne.n	8116ef6 <tcp_abandon+0x96>
 8116eea:	4b39      	ldr	r3, [pc, #228]	@ (8116fd0 <tcp_abandon+0x170>)
 8116eec:	681b      	ldr	r3, [r3, #0]
 8116eee:	68db      	ldr	r3, [r3, #12]
 8116ef0:	4a37      	ldr	r2, [pc, #220]	@ (8116fd0 <tcp_abandon+0x170>)
 8116ef2:	6013      	str	r3, [r2, #0]
 8116ef4:	e013      	b.n	8116f1e <tcp_abandon+0xbe>
 8116ef6:	4b36      	ldr	r3, [pc, #216]	@ (8116fd0 <tcp_abandon+0x170>)
 8116ef8:	681b      	ldr	r3, [r3, #0]
 8116efa:	61fb      	str	r3, [r7, #28]
 8116efc:	e00c      	b.n	8116f18 <tcp_abandon+0xb8>
 8116efe:	69fb      	ldr	r3, [r7, #28]
 8116f00:	68db      	ldr	r3, [r3, #12]
 8116f02:	687a      	ldr	r2, [r7, #4]
 8116f04:	429a      	cmp	r2, r3
 8116f06:	d104      	bne.n	8116f12 <tcp_abandon+0xb2>
 8116f08:	687b      	ldr	r3, [r7, #4]
 8116f0a:	68da      	ldr	r2, [r3, #12]
 8116f0c:	69fb      	ldr	r3, [r7, #28]
 8116f0e:	60da      	str	r2, [r3, #12]
 8116f10:	e005      	b.n	8116f1e <tcp_abandon+0xbe>
 8116f12:	69fb      	ldr	r3, [r7, #28]
 8116f14:	68db      	ldr	r3, [r3, #12]
 8116f16:	61fb      	str	r3, [r7, #28]
 8116f18:	69fb      	ldr	r3, [r7, #28]
 8116f1a:	2b00      	cmp	r3, #0
 8116f1c:	d1ef      	bne.n	8116efe <tcp_abandon+0x9e>
 8116f1e:	687b      	ldr	r3, [r7, #4]
 8116f20:	2200      	movs	r2, #0
 8116f22:	60da      	str	r2, [r3, #12]
 8116f24:	e00b      	b.n	8116f3e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8116f26:	683b      	ldr	r3, [r7, #0]
 8116f28:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8116f2a:	687b      	ldr	r3, [r7, #4]
 8116f2c:	8adb      	ldrh	r3, [r3, #22]
 8116f2e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8116f30:	6879      	ldr	r1, [r7, #4]
 8116f32:	4828      	ldr	r0, [pc, #160]	@ (8116fd4 <tcp_abandon+0x174>)
 8116f34:	f001 f94a 	bl	81181cc <tcp_pcb_remove>
 8116f38:	4b27      	ldr	r3, [pc, #156]	@ (8116fd8 <tcp_abandon+0x178>)
 8116f3a:	2201      	movs	r2, #1
 8116f3c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8116f3e:	687b      	ldr	r3, [r7, #4]
 8116f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8116f42:	2b00      	cmp	r3, #0
 8116f44:	d004      	beq.n	8116f50 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8116f46:	687b      	ldr	r3, [r7, #4]
 8116f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8116f4a:	4618      	mov	r0, r3
 8116f4c:	f000 fe84 	bl	8117c58 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8116f50:	687b      	ldr	r3, [r7, #4]
 8116f52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8116f54:	2b00      	cmp	r3, #0
 8116f56:	d004      	beq.n	8116f62 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8116f58:	687b      	ldr	r3, [r7, #4]
 8116f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8116f5c:	4618      	mov	r0, r3
 8116f5e:	f000 fe7b 	bl	8117c58 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8116f62:	687b      	ldr	r3, [r7, #4]
 8116f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8116f66:	2b00      	cmp	r3, #0
 8116f68:	d004      	beq.n	8116f74 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8116f6a:	687b      	ldr	r3, [r7, #4]
 8116f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8116f6e:	4618      	mov	r0, r3
 8116f70:	f000 fe72 	bl	8117c58 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8116f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116f76:	2b00      	cmp	r3, #0
 8116f78:	d00e      	beq.n	8116f98 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8116f7a:	6879      	ldr	r1, [r7, #4]
 8116f7c:	687b      	ldr	r3, [r7, #4]
 8116f7e:	3304      	adds	r3, #4
 8116f80:	687a      	ldr	r2, [r7, #4]
 8116f82:	8b12      	ldrh	r2, [r2, #24]
 8116f84:	9202      	str	r2, [sp, #8]
 8116f86:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8116f88:	9201      	str	r2, [sp, #4]
 8116f8a:	9300      	str	r3, [sp, #0]
 8116f8c:	460b      	mov	r3, r1
 8116f8e:	697a      	ldr	r2, [r7, #20]
 8116f90:	69b9      	ldr	r1, [r7, #24]
 8116f92:	6878      	ldr	r0, [r7, #4]
 8116f94:	f004 fe8e 	bl	811bcb4 <tcp_rst>
    }
    last_state = pcb->state;
 8116f98:	687b      	ldr	r3, [r7, #4]
 8116f9a:	7d1b      	ldrb	r3, [r3, #20]
 8116f9c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8116f9e:	6878      	ldr	r0, [r7, #4]
 8116fa0:	f7ff fd34 	bl	8116a0c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8116fa4:	693b      	ldr	r3, [r7, #16]
 8116fa6:	2b00      	cmp	r3, #0
 8116fa8:	d004      	beq.n	8116fb4 <tcp_abandon+0x154>
 8116faa:	693b      	ldr	r3, [r7, #16]
 8116fac:	f06f 010c 	mvn.w	r1, #12
 8116fb0:	68f8      	ldr	r0, [r7, #12]
 8116fb2:	4798      	blx	r3
  }
}
 8116fb4:	3728      	adds	r7, #40	@ 0x28
 8116fb6:	46bd      	mov	sp, r7
 8116fb8:	bd80      	pop	{r7, pc}
 8116fba:	bf00      	nop
 8116fbc:	0812094c 	.word	0x0812094c
 8116fc0:	08120ad0 	.word	0x08120ad0
 8116fc4:	081209d0 	.word	0x081209d0
 8116fc8:	08120aec 	.word	0x08120aec
 8116fcc:	10012138 	.word	0x10012138
 8116fd0:	1001212c 	.word	0x1001212c
 8116fd4:	10012134 	.word	0x10012134
 8116fd8:	1001213c 	.word	0x1001213c

08116fdc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8116fdc:	b580      	push	{r7, lr}
 8116fde:	b082      	sub	sp, #8
 8116fe0:	af00      	add	r7, sp, #0
 8116fe2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8116fe4:	2101      	movs	r1, #1
 8116fe6:	6878      	ldr	r0, [r7, #4]
 8116fe8:	f7ff ff3a 	bl	8116e60 <tcp_abandon>
}
 8116fec:	bf00      	nop
 8116fee:	3708      	adds	r7, #8
 8116ff0:	46bd      	mov	sp, r7
 8116ff2:	bd80      	pop	{r7, pc}

08116ff4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8116ff4:	b580      	push	{r7, lr}
 8116ff6:	b084      	sub	sp, #16
 8116ff8:	af00      	add	r7, sp, #0
 8116ffa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8116ffc:	687b      	ldr	r3, [r7, #4]
 8116ffe:	2b00      	cmp	r3, #0
 8117000:	d106      	bne.n	8117010 <tcp_update_rcv_ann_wnd+0x1c>
 8117002:	4b25      	ldr	r3, [pc, #148]	@ (8117098 <tcp_update_rcv_ann_wnd+0xa4>)
 8117004:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8117008:	4924      	ldr	r1, [pc, #144]	@ (811709c <tcp_update_rcv_ann_wnd+0xa8>)
 811700a:	4825      	ldr	r0, [pc, #148]	@ (81170a0 <tcp_update_rcv_ann_wnd+0xac>)
 811700c:	f006 fee6 	bl	811dddc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8117010:	687b      	ldr	r3, [r7, #4]
 8117012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8117014:	687a      	ldr	r2, [r7, #4]
 8117016:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8117018:	4413      	add	r3, r2
 811701a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 811701c:	687b      	ldr	r3, [r7, #4]
 811701e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8117020:	687a      	ldr	r2, [r7, #4]
 8117022:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8117024:	f640 3168 	movw	r1, #2920	@ 0xb68
 8117028:	428a      	cmp	r2, r1
 811702a:	bf28      	it	cs
 811702c:	460a      	movcs	r2, r1
 811702e:	b292      	uxth	r2, r2
 8117030:	4413      	add	r3, r2
 8117032:	68fa      	ldr	r2, [r7, #12]
 8117034:	1ad3      	subs	r3, r2, r3
 8117036:	2b00      	cmp	r3, #0
 8117038:	db08      	blt.n	811704c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 811703a:	687b      	ldr	r3, [r7, #4]
 811703c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811703e:	687b      	ldr	r3, [r7, #4]
 8117040:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8117042:	687b      	ldr	r3, [r7, #4]
 8117044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8117046:	68fa      	ldr	r2, [r7, #12]
 8117048:	1ad3      	subs	r3, r2, r3
 811704a:	e020      	b.n	811708e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 811704c:	687b      	ldr	r3, [r7, #4]
 811704e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8117050:	687b      	ldr	r3, [r7, #4]
 8117052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8117054:	1ad3      	subs	r3, r2, r3
 8117056:	2b00      	cmp	r3, #0
 8117058:	dd03      	ble.n	8117062 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 811705a:	687b      	ldr	r3, [r7, #4]
 811705c:	2200      	movs	r2, #0
 811705e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8117060:	e014      	b.n	811708c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8117062:	687b      	ldr	r3, [r7, #4]
 8117064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8117066:	687b      	ldr	r3, [r7, #4]
 8117068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811706a:	1ad3      	subs	r3, r2, r3
 811706c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 811706e:	68bb      	ldr	r3, [r7, #8]
 8117070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8117074:	d306      	bcc.n	8117084 <tcp_update_rcv_ann_wnd+0x90>
 8117076:	4b08      	ldr	r3, [pc, #32]	@ (8117098 <tcp_update_rcv_ann_wnd+0xa4>)
 8117078:	f240 32b6 	movw	r2, #950	@ 0x3b6
 811707c:	4909      	ldr	r1, [pc, #36]	@ (81170a4 <tcp_update_rcv_ann_wnd+0xb0>)
 811707e:	4808      	ldr	r0, [pc, #32]	@ (81170a0 <tcp_update_rcv_ann_wnd+0xac>)
 8117080:	f006 feac 	bl	811dddc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8117084:	68bb      	ldr	r3, [r7, #8]
 8117086:	b29a      	uxth	r2, r3
 8117088:	687b      	ldr	r3, [r7, #4]
 811708a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 811708c:	2300      	movs	r3, #0
  }
}
 811708e:	4618      	mov	r0, r3
 8117090:	3710      	adds	r7, #16
 8117092:	46bd      	mov	sp, r7
 8117094:	bd80      	pop	{r7, pc}
 8117096:	bf00      	nop
 8117098:	0812094c 	.word	0x0812094c
 811709c:	08120be8 	.word	0x08120be8
 81170a0:	081209d0 	.word	0x081209d0
 81170a4:	08120c0c 	.word	0x08120c0c

081170a8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 81170a8:	b580      	push	{r7, lr}
 81170aa:	b084      	sub	sp, #16
 81170ac:	af00      	add	r7, sp, #0
 81170ae:	6078      	str	r0, [r7, #4]
 81170b0:	460b      	mov	r3, r1
 81170b2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 81170b4:	687b      	ldr	r3, [r7, #4]
 81170b6:	2b00      	cmp	r3, #0
 81170b8:	d107      	bne.n	81170ca <tcp_recved+0x22>
 81170ba:	4b20      	ldr	r3, [pc, #128]	@ (811713c <tcp_recved+0x94>)
 81170bc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 81170c0:	491f      	ldr	r1, [pc, #124]	@ (8117140 <tcp_recved+0x98>)
 81170c2:	4820      	ldr	r0, [pc, #128]	@ (8117144 <tcp_recved+0x9c>)
 81170c4:	f006 fe8a 	bl	811dddc <iprintf>
 81170c8:	e034      	b.n	8117134 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 81170ca:	687b      	ldr	r3, [r7, #4]
 81170cc:	7d1b      	ldrb	r3, [r3, #20]
 81170ce:	2b01      	cmp	r3, #1
 81170d0:	d106      	bne.n	81170e0 <tcp_recved+0x38>
 81170d2:	4b1a      	ldr	r3, [pc, #104]	@ (811713c <tcp_recved+0x94>)
 81170d4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 81170d8:	491b      	ldr	r1, [pc, #108]	@ (8117148 <tcp_recved+0xa0>)
 81170da:	481a      	ldr	r0, [pc, #104]	@ (8117144 <tcp_recved+0x9c>)
 81170dc:	f006 fe7e 	bl	811dddc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 81170e0:	687b      	ldr	r3, [r7, #4]
 81170e2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 81170e4:	887b      	ldrh	r3, [r7, #2]
 81170e6:	4413      	add	r3, r2
 81170e8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 81170ea:	89fb      	ldrh	r3, [r7, #14]
 81170ec:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81170f0:	4293      	cmp	r3, r2
 81170f2:	d804      	bhi.n	81170fe <tcp_recved+0x56>
 81170f4:	687b      	ldr	r3, [r7, #4]
 81170f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81170f8:	89fa      	ldrh	r2, [r7, #14]
 81170fa:	429a      	cmp	r2, r3
 81170fc:	d204      	bcs.n	8117108 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 81170fe:	687b      	ldr	r3, [r7, #4]
 8117100:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8117104:	851a      	strh	r2, [r3, #40]	@ 0x28
 8117106:	e002      	b.n	811710e <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8117108:	687b      	ldr	r3, [r7, #4]
 811710a:	89fa      	ldrh	r2, [r7, #14]
 811710c:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 811710e:	6878      	ldr	r0, [r7, #4]
 8117110:	f7ff ff70 	bl	8116ff4 <tcp_update_rcv_ann_wnd>
 8117114:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8117116:	68bb      	ldr	r3, [r7, #8]
 8117118:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 811711c:	4293      	cmp	r3, r2
 811711e:	d909      	bls.n	8117134 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8117120:	687b      	ldr	r3, [r7, #4]
 8117122:	8b5b      	ldrh	r3, [r3, #26]
 8117124:	f043 0302 	orr.w	r3, r3, #2
 8117128:	b29a      	uxth	r2, r3
 811712a:	687b      	ldr	r3, [r7, #4]
 811712c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811712e:	6878      	ldr	r0, [r7, #4]
 8117130:	f004 f80c 	bl	811b14c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8117134:	3710      	adds	r7, #16
 8117136:	46bd      	mov	sp, r7
 8117138:	bd80      	pop	{r7, pc}
 811713a:	bf00      	nop
 811713c:	0812094c 	.word	0x0812094c
 8117140:	08120c28 	.word	0x08120c28
 8117144:	081209d0 	.word	0x081209d0
 8117148:	08120c40 	.word	0x08120c40

0811714c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 811714c:	b480      	push	{r7}
 811714e:	b083      	sub	sp, #12
 8117150:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8117152:	2300      	movs	r3, #0
 8117154:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8117156:	4b1e      	ldr	r3, [pc, #120]	@ (81171d0 <tcp_new_port+0x84>)
 8117158:	881b      	ldrh	r3, [r3, #0]
 811715a:	3301      	adds	r3, #1
 811715c:	b29a      	uxth	r2, r3
 811715e:	4b1c      	ldr	r3, [pc, #112]	@ (81171d0 <tcp_new_port+0x84>)
 8117160:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8117162:	4b1b      	ldr	r3, [pc, #108]	@ (81171d0 <tcp_new_port+0x84>)
 8117164:	881b      	ldrh	r3, [r3, #0]
 8117166:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811716a:	4293      	cmp	r3, r2
 811716c:	d103      	bne.n	8117176 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 811716e:	4b18      	ldr	r3, [pc, #96]	@ (81171d0 <tcp_new_port+0x84>)
 8117170:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8117174:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8117176:	2300      	movs	r3, #0
 8117178:	71fb      	strb	r3, [r7, #7]
 811717a:	e01e      	b.n	81171ba <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 811717c:	79fb      	ldrb	r3, [r7, #7]
 811717e:	4a15      	ldr	r2, [pc, #84]	@ (81171d4 <tcp_new_port+0x88>)
 8117180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8117184:	681b      	ldr	r3, [r3, #0]
 8117186:	603b      	str	r3, [r7, #0]
 8117188:	e011      	b.n	81171ae <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 811718a:	683b      	ldr	r3, [r7, #0]
 811718c:	8ada      	ldrh	r2, [r3, #22]
 811718e:	4b10      	ldr	r3, [pc, #64]	@ (81171d0 <tcp_new_port+0x84>)
 8117190:	881b      	ldrh	r3, [r3, #0]
 8117192:	429a      	cmp	r2, r3
 8117194:	d108      	bne.n	81171a8 <tcp_new_port+0x5c>
        n++;
 8117196:	88bb      	ldrh	r3, [r7, #4]
 8117198:	3301      	adds	r3, #1
 811719a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 811719c:	88bb      	ldrh	r3, [r7, #4]
 811719e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81171a2:	d3d8      	bcc.n	8117156 <tcp_new_port+0xa>
          return 0;
 81171a4:	2300      	movs	r3, #0
 81171a6:	e00d      	b.n	81171c4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 81171a8:	683b      	ldr	r3, [r7, #0]
 81171aa:	68db      	ldr	r3, [r3, #12]
 81171ac:	603b      	str	r3, [r7, #0]
 81171ae:	683b      	ldr	r3, [r7, #0]
 81171b0:	2b00      	cmp	r3, #0
 81171b2:	d1ea      	bne.n	811718a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 81171b4:	79fb      	ldrb	r3, [r7, #7]
 81171b6:	3301      	adds	r3, #1
 81171b8:	71fb      	strb	r3, [r7, #7]
 81171ba:	79fb      	ldrb	r3, [r7, #7]
 81171bc:	2b03      	cmp	r3, #3
 81171be:	d9dd      	bls.n	811717c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 81171c0:	4b03      	ldr	r3, [pc, #12]	@ (81171d0 <tcp_new_port+0x84>)
 81171c2:	881b      	ldrh	r3, [r3, #0]
}
 81171c4:	4618      	mov	r0, r3
 81171c6:	370c      	adds	r7, #12
 81171c8:	46bd      	mov	sp, r7
 81171ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81171ce:	4770      	bx	lr
 81171d0:	10000028 	.word	0x10000028
 81171d4:	081225c4 	.word	0x081225c4

081171d8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 81171d8:	b580      	push	{r7, lr}
 81171da:	b08a      	sub	sp, #40	@ 0x28
 81171dc:	af00      	add	r7, sp, #0
 81171de:	60f8      	str	r0, [r7, #12]
 81171e0:	60b9      	str	r1, [r7, #8]
 81171e2:	603b      	str	r3, [r7, #0]
 81171e4:	4613      	mov	r3, r2
 81171e6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 81171e8:	2300      	movs	r3, #0
 81171ea:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 81171ec:	68fb      	ldr	r3, [r7, #12]
 81171ee:	2b00      	cmp	r3, #0
 81171f0:	d109      	bne.n	8117206 <tcp_connect+0x2e>
 81171f2:	4b7d      	ldr	r3, [pc, #500]	@ (81173e8 <tcp_connect+0x210>)
 81171f4:	f240 4235 	movw	r2, #1077	@ 0x435
 81171f8:	497c      	ldr	r1, [pc, #496]	@ (81173ec <tcp_connect+0x214>)
 81171fa:	487d      	ldr	r0, [pc, #500]	@ (81173f0 <tcp_connect+0x218>)
 81171fc:	f006 fdee 	bl	811dddc <iprintf>
 8117200:	f06f 030f 	mvn.w	r3, #15
 8117204:	e0ec      	b.n	81173e0 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8117206:	68bb      	ldr	r3, [r7, #8]
 8117208:	2b00      	cmp	r3, #0
 811720a:	d109      	bne.n	8117220 <tcp_connect+0x48>
 811720c:	4b76      	ldr	r3, [pc, #472]	@ (81173e8 <tcp_connect+0x210>)
 811720e:	f240 4236 	movw	r2, #1078	@ 0x436
 8117212:	4978      	ldr	r1, [pc, #480]	@ (81173f4 <tcp_connect+0x21c>)
 8117214:	4876      	ldr	r0, [pc, #472]	@ (81173f0 <tcp_connect+0x218>)
 8117216:	f006 fde1 	bl	811dddc <iprintf>
 811721a:	f06f 030f 	mvn.w	r3, #15
 811721e:	e0df      	b.n	81173e0 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8117220:	68fb      	ldr	r3, [r7, #12]
 8117222:	7d1b      	ldrb	r3, [r3, #20]
 8117224:	2b00      	cmp	r3, #0
 8117226:	d009      	beq.n	811723c <tcp_connect+0x64>
 8117228:	4b6f      	ldr	r3, [pc, #444]	@ (81173e8 <tcp_connect+0x210>)
 811722a:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 811722e:	4972      	ldr	r1, [pc, #456]	@ (81173f8 <tcp_connect+0x220>)
 8117230:	486f      	ldr	r0, [pc, #444]	@ (81173f0 <tcp_connect+0x218>)
 8117232:	f006 fdd3 	bl	811dddc <iprintf>
 8117236:	f06f 0309 	mvn.w	r3, #9
 811723a:	e0d1      	b.n	81173e0 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 811723c:	68bb      	ldr	r3, [r7, #8]
 811723e:	2b00      	cmp	r3, #0
 8117240:	d002      	beq.n	8117248 <tcp_connect+0x70>
 8117242:	68bb      	ldr	r3, [r7, #8]
 8117244:	681b      	ldr	r3, [r3, #0]
 8117246:	e000      	b.n	811724a <tcp_connect+0x72>
 8117248:	2300      	movs	r3, #0
 811724a:	68fa      	ldr	r2, [r7, #12]
 811724c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 811724e:	68fb      	ldr	r3, [r7, #12]
 8117250:	88fa      	ldrh	r2, [r7, #6]
 8117252:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8117254:	68fb      	ldr	r3, [r7, #12]
 8117256:	7a1b      	ldrb	r3, [r3, #8]
 8117258:	2b00      	cmp	r3, #0
 811725a:	d006      	beq.n	811726a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 811725c:	68fb      	ldr	r3, [r7, #12]
 811725e:	7a1b      	ldrb	r3, [r3, #8]
 8117260:	4618      	mov	r0, r3
 8117262:	f7fe fc97 	bl	8115b94 <netif_get_by_index>
 8117266:	6278      	str	r0, [r7, #36]	@ 0x24
 8117268:	e005      	b.n	8117276 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 811726a:	68fb      	ldr	r3, [r7, #12]
 811726c:	3304      	adds	r3, #4
 811726e:	4618      	mov	r0, r3
 8117270:	f7fc f9b6 	bl	81135e0 <ip4_route>
 8117274:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 8117276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117278:	2b00      	cmp	r3, #0
 811727a:	d102      	bne.n	8117282 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 811727c:	f06f 0303 	mvn.w	r3, #3
 8117280:	e0ae      	b.n	81173e0 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8117282:	68fb      	ldr	r3, [r7, #12]
 8117284:	2b00      	cmp	r3, #0
 8117286:	d003      	beq.n	8117290 <tcp_connect+0xb8>
 8117288:	68fb      	ldr	r3, [r7, #12]
 811728a:	681b      	ldr	r3, [r3, #0]
 811728c:	2b00      	cmp	r3, #0
 811728e:	d111      	bne.n	81172b4 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8117290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117292:	2b00      	cmp	r3, #0
 8117294:	d002      	beq.n	811729c <tcp_connect+0xc4>
 8117296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117298:	3304      	adds	r3, #4
 811729a:	e000      	b.n	811729e <tcp_connect+0xc6>
 811729c:	2300      	movs	r3, #0
 811729e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 81172a0:	69fb      	ldr	r3, [r7, #28]
 81172a2:	2b00      	cmp	r3, #0
 81172a4:	d102      	bne.n	81172ac <tcp_connect+0xd4>
      return ERR_RTE;
 81172a6:	f06f 0303 	mvn.w	r3, #3
 81172aa:	e099      	b.n	81173e0 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 81172ac:	69fb      	ldr	r3, [r7, #28]
 81172ae:	681a      	ldr	r2, [r3, #0]
 81172b0:	68fb      	ldr	r3, [r7, #12]
 81172b2:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 81172b4:	68fb      	ldr	r3, [r7, #12]
 81172b6:	8adb      	ldrh	r3, [r3, #22]
 81172b8:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 81172ba:	68fb      	ldr	r3, [r7, #12]
 81172bc:	8adb      	ldrh	r3, [r3, #22]
 81172be:	2b00      	cmp	r3, #0
 81172c0:	d10c      	bne.n	81172dc <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 81172c2:	f7ff ff43 	bl	811714c <tcp_new_port>
 81172c6:	4603      	mov	r3, r0
 81172c8:	461a      	mov	r2, r3
 81172ca:	68fb      	ldr	r3, [r7, #12]
 81172cc:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 81172ce:	68fb      	ldr	r3, [r7, #12]
 81172d0:	8adb      	ldrh	r3, [r3, #22]
 81172d2:	2b00      	cmp	r3, #0
 81172d4:	d102      	bne.n	81172dc <tcp_connect+0x104>
      return ERR_BUF;
 81172d6:	f06f 0301 	mvn.w	r3, #1
 81172da:	e081      	b.n	81173e0 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 81172dc:	68f8      	ldr	r0, [r7, #12]
 81172de:	f001 f809 	bl	81182f4 <tcp_next_iss>
 81172e2:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 81172e4:	68fb      	ldr	r3, [r7, #12]
 81172e6:	2200      	movs	r2, #0
 81172e8:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 81172ea:	68fb      	ldr	r3, [r7, #12]
 81172ec:	697a      	ldr	r2, [r7, #20]
 81172ee:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 81172f0:	697b      	ldr	r3, [r7, #20]
 81172f2:	1e5a      	subs	r2, r3, #1
 81172f4:	68fb      	ldr	r3, [r7, #12]
 81172f6:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 81172f8:	697b      	ldr	r3, [r7, #20]
 81172fa:	1e5a      	subs	r2, r3, #1
 81172fc:	68fb      	ldr	r3, [r7, #12]
 81172fe:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 8117300:	697b      	ldr	r3, [r7, #20]
 8117302:	1e5a      	subs	r2, r3, #1
 8117304:	68fb      	ldr	r3, [r7, #12]
 8117306:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8117308:	68fb      	ldr	r3, [r7, #12]
 811730a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 811730e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8117310:	68fb      	ldr	r3, [r7, #12]
 8117312:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8117314:	68fb      	ldr	r3, [r7, #12]
 8117316:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8117318:	68fb      	ldr	r3, [r7, #12]
 811731a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811731c:	68fb      	ldr	r3, [r7, #12]
 811731e:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 8117320:	68fb      	ldr	r3, [r7, #12]
 8117322:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8117326:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 811732a:	68fb      	ldr	r3, [r7, #12]
 811732c:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8117330:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8117332:	68fb      	ldr	r3, [r7, #12]
 8117334:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 8117336:	68fb      	ldr	r3, [r7, #12]
 8117338:	3304      	adds	r3, #4
 811733a:	461a      	mov	r2, r3
 811733c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811733e:	f000 ffff 	bl	8118340 <tcp_eff_send_mss_netif>
 8117342:	4603      	mov	r3, r0
 8117344:	461a      	mov	r2, r3
 8117346:	68fb      	ldr	r3, [r7, #12]
 8117348:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 811734a:	68fb      	ldr	r3, [r7, #12]
 811734c:	2201      	movs	r2, #1
 811734e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8117352:	68fb      	ldr	r3, [r7, #12]
 8117354:	683a      	ldr	r2, [r7, #0]
 8117356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 811735a:	2102      	movs	r1, #2
 811735c:	68f8      	ldr	r0, [r7, #12]
 811735e:	f003 fe07 	bl	811af70 <tcp_enqueue_flags>
 8117362:	4603      	mov	r3, r0
 8117364:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8117366:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811736a:	2b00      	cmp	r3, #0
 811736c:	d136      	bne.n	81173dc <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 811736e:	68fb      	ldr	r3, [r7, #12]
 8117370:	2202      	movs	r2, #2
 8117372:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8117374:	8b7b      	ldrh	r3, [r7, #26]
 8117376:	2b00      	cmp	r3, #0
 8117378:	d021      	beq.n	81173be <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 811737a:	4b20      	ldr	r3, [pc, #128]	@ (81173fc <tcp_connect+0x224>)
 811737c:	681b      	ldr	r3, [r3, #0]
 811737e:	68fa      	ldr	r2, [r7, #12]
 8117380:	429a      	cmp	r2, r3
 8117382:	d105      	bne.n	8117390 <tcp_connect+0x1b8>
 8117384:	4b1d      	ldr	r3, [pc, #116]	@ (81173fc <tcp_connect+0x224>)
 8117386:	681b      	ldr	r3, [r3, #0]
 8117388:	68db      	ldr	r3, [r3, #12]
 811738a:	4a1c      	ldr	r2, [pc, #112]	@ (81173fc <tcp_connect+0x224>)
 811738c:	6013      	str	r3, [r2, #0]
 811738e:	e013      	b.n	81173b8 <tcp_connect+0x1e0>
 8117390:	4b1a      	ldr	r3, [pc, #104]	@ (81173fc <tcp_connect+0x224>)
 8117392:	681b      	ldr	r3, [r3, #0]
 8117394:	623b      	str	r3, [r7, #32]
 8117396:	e00c      	b.n	81173b2 <tcp_connect+0x1da>
 8117398:	6a3b      	ldr	r3, [r7, #32]
 811739a:	68db      	ldr	r3, [r3, #12]
 811739c:	68fa      	ldr	r2, [r7, #12]
 811739e:	429a      	cmp	r2, r3
 81173a0:	d104      	bne.n	81173ac <tcp_connect+0x1d4>
 81173a2:	68fb      	ldr	r3, [r7, #12]
 81173a4:	68da      	ldr	r2, [r3, #12]
 81173a6:	6a3b      	ldr	r3, [r7, #32]
 81173a8:	60da      	str	r2, [r3, #12]
 81173aa:	e005      	b.n	81173b8 <tcp_connect+0x1e0>
 81173ac:	6a3b      	ldr	r3, [r7, #32]
 81173ae:	68db      	ldr	r3, [r3, #12]
 81173b0:	623b      	str	r3, [r7, #32]
 81173b2:	6a3b      	ldr	r3, [r7, #32]
 81173b4:	2b00      	cmp	r3, #0
 81173b6:	d1ef      	bne.n	8117398 <tcp_connect+0x1c0>
 81173b8:	68fb      	ldr	r3, [r7, #12]
 81173ba:	2200      	movs	r2, #0
 81173bc:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 81173be:	4b10      	ldr	r3, [pc, #64]	@ (8117400 <tcp_connect+0x228>)
 81173c0:	681a      	ldr	r2, [r3, #0]
 81173c2:	68fb      	ldr	r3, [r7, #12]
 81173c4:	60da      	str	r2, [r3, #12]
 81173c6:	4a0e      	ldr	r2, [pc, #56]	@ (8117400 <tcp_connect+0x228>)
 81173c8:	68fb      	ldr	r3, [r7, #12]
 81173ca:	6013      	str	r3, [r2, #0]
 81173cc:	f004 ff92 	bl	811c2f4 <tcp_timer_needed>
 81173d0:	4b0c      	ldr	r3, [pc, #48]	@ (8117404 <tcp_connect+0x22c>)
 81173d2:	2201      	movs	r2, #1
 81173d4:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 81173d6:	68f8      	ldr	r0, [r7, #12]
 81173d8:	f003 feb8 	bl	811b14c <tcp_output>
  }
  return ret;
 81173dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 81173e0:	4618      	mov	r0, r3
 81173e2:	3728      	adds	r7, #40	@ 0x28
 81173e4:	46bd      	mov	sp, r7
 81173e6:	bd80      	pop	{r7, pc}
 81173e8:	0812094c 	.word	0x0812094c
 81173ec:	08120c68 	.word	0x08120c68
 81173f0:	081209d0 	.word	0x081209d0
 81173f4:	08120c84 	.word	0x08120c84
 81173f8:	08120ca0 	.word	0x08120ca0
 81173fc:	1001212c 	.word	0x1001212c
 8117400:	10012134 	.word	0x10012134
 8117404:	1001213c 	.word	0x1001213c

08117408 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8117408:	b5b0      	push	{r4, r5, r7, lr}
 811740a:	b090      	sub	sp, #64	@ 0x40
 811740c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 811740e:	2300      	movs	r3, #0
 8117410:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8117414:	4b95      	ldr	r3, [pc, #596]	@ (811766c <tcp_slowtmr+0x264>)
 8117416:	681b      	ldr	r3, [r3, #0]
 8117418:	3301      	adds	r3, #1
 811741a:	4a94      	ldr	r2, [pc, #592]	@ (811766c <tcp_slowtmr+0x264>)
 811741c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 811741e:	4b94      	ldr	r3, [pc, #592]	@ (8117670 <tcp_slowtmr+0x268>)
 8117420:	781b      	ldrb	r3, [r3, #0]
 8117422:	3301      	adds	r3, #1
 8117424:	b2da      	uxtb	r2, r3
 8117426:	4b92      	ldr	r3, [pc, #584]	@ (8117670 <tcp_slowtmr+0x268>)
 8117428:	701a      	strb	r2, [r3, #0]
 811742a:	e000      	b.n	811742e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 811742c:	bf00      	nop
  prev = NULL;
 811742e:	2300      	movs	r3, #0
 8117430:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8117432:	4b90      	ldr	r3, [pc, #576]	@ (8117674 <tcp_slowtmr+0x26c>)
 8117434:	681b      	ldr	r3, [r3, #0]
 8117436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8117438:	e2b7      	b.n	81179aa <tcp_slowtmr+0x5a2>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 811743a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811743c:	7d1b      	ldrb	r3, [r3, #20]
 811743e:	2b00      	cmp	r3, #0
 8117440:	d106      	bne.n	8117450 <tcp_slowtmr+0x48>
 8117442:	4b8d      	ldr	r3, [pc, #564]	@ (8117678 <tcp_slowtmr+0x270>)
 8117444:	f240 42be 	movw	r2, #1214	@ 0x4be
 8117448:	498c      	ldr	r1, [pc, #560]	@ (811767c <tcp_slowtmr+0x274>)
 811744a:	488d      	ldr	r0, [pc, #564]	@ (8117680 <tcp_slowtmr+0x278>)
 811744c:	f006 fcc6 	bl	811dddc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8117450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117452:	7d1b      	ldrb	r3, [r3, #20]
 8117454:	2b01      	cmp	r3, #1
 8117456:	d106      	bne.n	8117466 <tcp_slowtmr+0x5e>
 8117458:	4b87      	ldr	r3, [pc, #540]	@ (8117678 <tcp_slowtmr+0x270>)
 811745a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 811745e:	4989      	ldr	r1, [pc, #548]	@ (8117684 <tcp_slowtmr+0x27c>)
 8117460:	4887      	ldr	r0, [pc, #540]	@ (8117680 <tcp_slowtmr+0x278>)
 8117462:	f006 fcbb 	bl	811dddc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8117466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117468:	7d1b      	ldrb	r3, [r3, #20]
 811746a:	2b0a      	cmp	r3, #10
 811746c:	d106      	bne.n	811747c <tcp_slowtmr+0x74>
 811746e:	4b82      	ldr	r3, [pc, #520]	@ (8117678 <tcp_slowtmr+0x270>)
 8117470:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8117474:	4984      	ldr	r1, [pc, #528]	@ (8117688 <tcp_slowtmr+0x280>)
 8117476:	4882      	ldr	r0, [pc, #520]	@ (8117680 <tcp_slowtmr+0x278>)
 8117478:	f006 fcb0 	bl	811dddc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 811747c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811747e:	7f9a      	ldrb	r2, [r3, #30]
 8117480:	4b7b      	ldr	r3, [pc, #492]	@ (8117670 <tcp_slowtmr+0x268>)
 8117482:	781b      	ldrb	r3, [r3, #0]
 8117484:	429a      	cmp	r2, r3
 8117486:	d105      	bne.n	8117494 <tcp_slowtmr+0x8c>
      prev = pcb;
 8117488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811748a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 811748c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811748e:	68db      	ldr	r3, [r3, #12]
 8117490:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8117492:	e28a      	b.n	81179aa <tcp_slowtmr+0x5a2>
    pcb->last_timer = tcp_timer_ctr;
 8117494:	4b76      	ldr	r3, [pc, #472]	@ (8117670 <tcp_slowtmr+0x268>)
 8117496:	781a      	ldrb	r2, [r3, #0]
 8117498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811749a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 811749c:	2300      	movs	r3, #0
 811749e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 81174a2:	2300      	movs	r3, #0
 81174a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 81174a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81174aa:	7d1b      	ldrb	r3, [r3, #20]
 81174ac:	2b02      	cmp	r3, #2
 81174ae:	d10a      	bne.n	81174c6 <tcp_slowtmr+0xbe>
 81174b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81174b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81174b6:	2b05      	cmp	r3, #5
 81174b8:	d905      	bls.n	81174c6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 81174ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81174be:	3301      	adds	r3, #1
 81174c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 81174c4:	e11e      	b.n	8117704 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 81174c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81174c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81174cc:	2b0b      	cmp	r3, #11
 81174ce:	d905      	bls.n	81174dc <tcp_slowtmr+0xd4>
      ++pcb_remove;
 81174d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81174d4:	3301      	adds	r3, #1
 81174d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 81174da:	e113      	b.n	8117704 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 81174dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81174de:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 81174e2:	2b00      	cmp	r3, #0
 81174e4:	d075      	beq.n	81175d2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 81174e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81174e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81174ea:	2b00      	cmp	r3, #0
 81174ec:	d006      	beq.n	81174fc <tcp_slowtmr+0xf4>
 81174ee:	4b62      	ldr	r3, [pc, #392]	@ (8117678 <tcp_slowtmr+0x270>)
 81174f0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 81174f4:	4965      	ldr	r1, [pc, #404]	@ (811768c <tcp_slowtmr+0x284>)
 81174f6:	4862      	ldr	r0, [pc, #392]	@ (8117680 <tcp_slowtmr+0x278>)
 81174f8:	f006 fc70 	bl	811dddc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 81174fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81174fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8117500:	2b00      	cmp	r3, #0
 8117502:	d106      	bne.n	8117512 <tcp_slowtmr+0x10a>
 8117504:	4b5c      	ldr	r3, [pc, #368]	@ (8117678 <tcp_slowtmr+0x270>)
 8117506:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 811750a:	4961      	ldr	r1, [pc, #388]	@ (8117690 <tcp_slowtmr+0x288>)
 811750c:	485c      	ldr	r0, [pc, #368]	@ (8117680 <tcp_slowtmr+0x278>)
 811750e:	f006 fc65 	bl	811dddc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8117512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117514:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8117518:	2b0b      	cmp	r3, #11
 811751a:	d905      	bls.n	8117528 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 811751c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8117520:	3301      	adds	r3, #1
 8117522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8117526:	e0ed      	b.n	8117704 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8117528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811752a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811752e:	3b01      	subs	r3, #1
 8117530:	4a58      	ldr	r2, [pc, #352]	@ (8117694 <tcp_slowtmr+0x28c>)
 8117532:	5cd3      	ldrb	r3, [r2, r3]
 8117534:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8117536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117538:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 811753c:	7c7a      	ldrb	r2, [r7, #17]
 811753e:	429a      	cmp	r2, r3
 8117540:	d907      	bls.n	8117552 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8117542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117544:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8117548:	3301      	adds	r3, #1
 811754a:	b2da      	uxtb	r2, r3
 811754c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811754e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
          if (pcb->persist_cnt >= backoff_cnt) {
 8117552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117554:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8117558:	7c7a      	ldrb	r2, [r7, #17]
 811755a:	429a      	cmp	r2, r3
 811755c:	f200 80d2 	bhi.w	8117704 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8117560:	2301      	movs	r3, #1
 8117562:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8117564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117566:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811756a:	2b00      	cmp	r3, #0
 811756c:	d108      	bne.n	8117580 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 811756e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117570:	f004 fc94 	bl	811be9c <tcp_zero_window_probe>
 8117574:	4603      	mov	r3, r0
 8117576:	2b00      	cmp	r3, #0
 8117578:	d014      	beq.n	81175a4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 811757a:	2300      	movs	r3, #0
 811757c:	623b      	str	r3, [r7, #32]
 811757e:	e011      	b.n	81175a4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8117580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117582:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8117586:	4619      	mov	r1, r3
 8117588:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811758a:	f003 fb59 	bl	811ac40 <tcp_split_unsent_seg>
 811758e:	4603      	mov	r3, r0
 8117590:	2b00      	cmp	r3, #0
 8117592:	d107      	bne.n	81175a4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8117594:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117596:	f003 fdd9 	bl	811b14c <tcp_output>
 811759a:	4603      	mov	r3, r0
 811759c:	2b00      	cmp	r3, #0
 811759e:	d101      	bne.n	81175a4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 81175a0:	2300      	movs	r3, #0
 81175a2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 81175a4:	6a3b      	ldr	r3, [r7, #32]
 81175a6:	2b00      	cmp	r3, #0
 81175a8:	f000 80ac 	beq.w	8117704 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 81175ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81175ae:	2200      	movs	r2, #0
 81175b0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 81175b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81175b6:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 81175ba:	2b06      	cmp	r3, #6
 81175bc:	f200 80a2 	bhi.w	8117704 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 81175c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81175c2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 81175c6:	3301      	adds	r3, #1
 81175c8:	b2da      	uxtb	r2, r3
 81175ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81175cc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 81175d0:	e098      	b.n	8117704 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 81175d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81175d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 81175d8:	2b00      	cmp	r3, #0
 81175da:	db0f      	blt.n	81175fc <tcp_slowtmr+0x1f4>
 81175dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81175de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 81175e2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 81175e6:	4293      	cmp	r3, r2
 81175e8:	d008      	beq.n	81175fc <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 81175ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81175ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 81175f0:	b29b      	uxth	r3, r3
 81175f2:	3301      	adds	r3, #1
 81175f4:	b29b      	uxth	r3, r3
 81175f6:	b21a      	sxth	r2, r3
 81175f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81175fa:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 81175fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81175fe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8117602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117604:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8117608:	429a      	cmp	r2, r3
 811760a:	db7b      	blt.n	8117704 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 811760c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811760e:	f004 f891 	bl	811b734 <tcp_rexmit_rto_prepare>
 8117612:	4603      	mov	r3, r0
 8117614:	2b00      	cmp	r3, #0
 8117616:	d007      	beq.n	8117628 <tcp_slowtmr+0x220>
 8117618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811761a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811761c:	2b00      	cmp	r3, #0
 811761e:	d171      	bne.n	8117704 <tcp_slowtmr+0x2fc>
 8117620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8117624:	2b00      	cmp	r3, #0
 8117626:	d06d      	beq.n	8117704 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8117628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811762a:	7d1b      	ldrb	r3, [r3, #20]
 811762c:	2b02      	cmp	r3, #2
 811762e:	d03a      	beq.n	81176a6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8117630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117632:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8117636:	2b0c      	cmp	r3, #12
 8117638:	bf28      	it	cs
 811763a:	230c      	movcs	r3, #12
 811763c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 811763e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117640:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8117644:	10db      	asrs	r3, r3, #3
 8117646:	b21b      	sxth	r3, r3
 8117648:	461a      	mov	r2, r3
 811764a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811764c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8117650:	4413      	add	r3, r2
 8117652:	7efa      	ldrb	r2, [r7, #27]
 8117654:	4910      	ldr	r1, [pc, #64]	@ (8117698 <tcp_slowtmr+0x290>)
 8117656:	5c8a      	ldrb	r2, [r1, r2]
 8117658:	4093      	lsls	r3, r2
 811765a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 811765c:	697b      	ldr	r3, [r7, #20]
 811765e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8117662:	4293      	cmp	r3, r2
 8117664:	dc1a      	bgt.n	811769c <tcp_slowtmr+0x294>
 8117666:	697b      	ldr	r3, [r7, #20]
 8117668:	b21a      	sxth	r2, r3
 811766a:	e019      	b.n	81176a0 <tcp_slowtmr+0x298>
 811766c:	10012128 	.word	0x10012128
 8117670:	1001213e 	.word	0x1001213e
 8117674:	10012134 	.word	0x10012134
 8117678:	0812094c 	.word	0x0812094c
 811767c:	08120cd0 	.word	0x08120cd0
 8117680:	081209d0 	.word	0x081209d0
 8117684:	08120cfc 	.word	0x08120cfc
 8117688:	08120d28 	.word	0x08120d28
 811768c:	08120d58 	.word	0x08120d58
 8117690:	08120d8c 	.word	0x08120d8c
 8117694:	081225bc 	.word	0x081225bc
 8117698:	081225ac 	.word	0x081225ac
 811769c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 81176a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 81176a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176a8:	2200      	movs	r2, #0
 81176aa:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 81176ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 81176b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 81176b8:	4293      	cmp	r3, r2
 81176ba:	bf28      	it	cs
 81176bc:	4613      	movcs	r3, r2
 81176be:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 81176c0:	8a7b      	ldrh	r3, [r7, #18]
 81176c2:	085b      	lsrs	r3, r3, #1
 81176c4:	b29a      	uxth	r2, r3
 81176c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176c8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 81176cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 81176d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81176d6:	005b      	lsls	r3, r3, #1
 81176d8:	b29b      	uxth	r3, r3
 81176da:	429a      	cmp	r2, r3
 81176dc:	d206      	bcs.n	81176ec <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 81176de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81176e2:	005b      	lsls	r3, r3, #1
 81176e4:	b29a      	uxth	r2, r3
 81176e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176e8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 81176ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176ee:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 81176f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 81176f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81176f8:	2200      	movs	r2, #0
 81176fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 81176fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117700:	f004 f888 	bl	811b814 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8117704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117706:	7d1b      	ldrb	r3, [r3, #20]
 8117708:	2b06      	cmp	r3, #6
 811770a:	d111      	bne.n	8117730 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 811770c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811770e:	8b5b      	ldrh	r3, [r3, #26]
 8117710:	f003 0310 	and.w	r3, r3, #16
 8117714:	2b00      	cmp	r3, #0
 8117716:	d00b      	beq.n	8117730 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8117718:	4b94      	ldr	r3, [pc, #592]	@ (811796c <tcp_slowtmr+0x564>)
 811771a:	681a      	ldr	r2, [r3, #0]
 811771c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811771e:	6a1b      	ldr	r3, [r3, #32]
 8117720:	1ad3      	subs	r3, r2, r3
 8117722:	2b28      	cmp	r3, #40	@ 0x28
 8117724:	d904      	bls.n	8117730 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8117726:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811772a:	3301      	adds	r3, #1
 811772c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8117730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117732:	7a5b      	ldrb	r3, [r3, #9]
 8117734:	f003 0308 	and.w	r3, r3, #8
 8117738:	2b00      	cmp	r3, #0
 811773a:	d053      	beq.n	81177e4 <tcp_slowtmr+0x3dc>
        ((pcb->state == ESTABLISHED) ||
 811773c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811773e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8117740:	2b04      	cmp	r3, #4
 8117742:	d003      	beq.n	811774c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8117744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117746:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8117748:	2b07      	cmp	r3, #7
 811774a:	d14b      	bne.n	81177e4 <tcp_slowtmr+0x3dc>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811774c:	4b87      	ldr	r3, [pc, #540]	@ (811796c <tcp_slowtmr+0x564>)
 811774e:	681a      	ldr	r2, [r3, #0]
 8117750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117752:	6a1b      	ldr	r3, [r3, #32]
 8117754:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8117756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117758:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 811775c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811775e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8117762:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117764:	f8d0 0098 	ldr.w	r0, [r0, #152]	@ 0x98
 8117768:	fb00 f303 	mul.w	r3, r0, r3
 811776c:	440b      	add	r3, r1
 811776e:	4980      	ldr	r1, [pc, #512]	@ (8117970 <tcp_slowtmr+0x568>)
 8117770:	fba1 1303 	umull	r1, r3, r1, r3
 8117774:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8117776:	429a      	cmp	r2, r3
 8117778:	d90a      	bls.n	8117790 <tcp_slowtmr+0x388>
        ++pcb_remove;
 811777a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811777e:	3301      	adds	r3, #1
 8117780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8117784:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8117788:	3301      	adds	r3, #1
 811778a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 811778e:	e029      	b.n	81177e4 <tcp_slowtmr+0x3dc>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8117790:	4b76      	ldr	r3, [pc, #472]	@ (811796c <tcp_slowtmr+0x564>)
 8117792:	681a      	ldr	r2, [r3, #0]
 8117794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117796:	6a1b      	ldr	r3, [r3, #32]
 8117798:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 811779a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811779c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 81177a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81177a2:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 81177a6:	4618      	mov	r0, r3
 81177a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81177aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81177ae:	fb00 f303 	mul.w	r3, r0, r3
 81177b2:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 81177b4:	496e      	ldr	r1, [pc, #440]	@ (8117970 <tcp_slowtmr+0x568>)
 81177b6:	fba1 1303 	umull	r1, r3, r1, r3
 81177ba:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 81177bc:	429a      	cmp	r2, r3
 81177be:	d911      	bls.n	81177e4 <tcp_slowtmr+0x3dc>
        err = tcp_keepalive(pcb);
 81177c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81177c2:	f004 fb2b 	bl	811be1c <tcp_keepalive>
 81177c6:	4603      	mov	r3, r0
 81177c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 81177cc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 81177d0:	2b00      	cmp	r3, #0
 81177d2:	d107      	bne.n	81177e4 <tcp_slowtmr+0x3dc>
          pcb->keep_cnt_sent++;
 81177d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81177d6:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 81177da:	3301      	adds	r3, #1
 81177dc:	b2da      	uxtb	r2, r3
 81177de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81177e0:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
    if (pcb->ooseq != NULL &&
 81177e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81177e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81177e8:	2b00      	cmp	r3, #0
 81177ea:	d011      	beq.n	8117810 <tcp_slowtmr+0x408>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 81177ec:	4b5f      	ldr	r3, [pc, #380]	@ (811796c <tcp_slowtmr+0x564>)
 81177ee:	681a      	ldr	r2, [r3, #0]
 81177f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81177f2:	6a1b      	ldr	r3, [r3, #32]
 81177f4:	1ad2      	subs	r2, r2, r3
 81177f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81177f8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 81177fc:	4619      	mov	r1, r3
 81177fe:	460b      	mov	r3, r1
 8117800:	005b      	lsls	r3, r3, #1
 8117802:	440b      	add	r3, r1
 8117804:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8117806:	429a      	cmp	r2, r3
 8117808:	d302      	bcc.n	8117810 <tcp_slowtmr+0x408>
      tcp_free_ooseq(pcb);
 811780a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811780c:	f000 fe42 	bl	8118494 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8117810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117812:	7d1b      	ldrb	r3, [r3, #20]
 8117814:	2b03      	cmp	r3, #3
 8117816:	d10b      	bne.n	8117830 <tcp_slowtmr+0x428>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8117818:	4b54      	ldr	r3, [pc, #336]	@ (811796c <tcp_slowtmr+0x564>)
 811781a:	681a      	ldr	r2, [r3, #0]
 811781c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811781e:	6a1b      	ldr	r3, [r3, #32]
 8117820:	1ad3      	subs	r3, r2, r3
 8117822:	2b28      	cmp	r3, #40	@ 0x28
 8117824:	d904      	bls.n	8117830 <tcp_slowtmr+0x428>
        ++pcb_remove;
 8117826:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811782a:	3301      	adds	r3, #1
 811782c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8117830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117832:	7d1b      	ldrb	r3, [r3, #20]
 8117834:	2b09      	cmp	r3, #9
 8117836:	d10b      	bne.n	8117850 <tcp_slowtmr+0x448>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8117838:	4b4c      	ldr	r3, [pc, #304]	@ (811796c <tcp_slowtmr+0x564>)
 811783a:	681a      	ldr	r2, [r3, #0]
 811783c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811783e:	6a1b      	ldr	r3, [r3, #32]
 8117840:	1ad3      	subs	r3, r2, r3
 8117842:	2bf0      	cmp	r3, #240	@ 0xf0
 8117844:	d904      	bls.n	8117850 <tcp_slowtmr+0x448>
        ++pcb_remove;
 8117846:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811784a:	3301      	adds	r3, #1
 811784c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8117850:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8117854:	2b00      	cmp	r3, #0
 8117856:	d060      	beq.n	811791a <tcp_slowtmr+0x512>
      tcp_err_fn err_fn = pcb->errf;
 8117858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811785a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811785e:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8117860:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8117862:	f000 fc63 	bl	811812c <tcp_pcb_purge>
      if (prev != NULL) {
 8117866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117868:	2b00      	cmp	r3, #0
 811786a:	d010      	beq.n	811788e <tcp_slowtmr+0x486>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 811786c:	4b41      	ldr	r3, [pc, #260]	@ (8117974 <tcp_slowtmr+0x56c>)
 811786e:	681b      	ldr	r3, [r3, #0]
 8117870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8117872:	429a      	cmp	r2, r3
 8117874:	d106      	bne.n	8117884 <tcp_slowtmr+0x47c>
 8117876:	4b40      	ldr	r3, [pc, #256]	@ (8117978 <tcp_slowtmr+0x570>)
 8117878:	f240 526d 	movw	r2, #1389	@ 0x56d
 811787c:	493f      	ldr	r1, [pc, #252]	@ (811797c <tcp_slowtmr+0x574>)
 811787e:	4840      	ldr	r0, [pc, #256]	@ (8117980 <tcp_slowtmr+0x578>)
 8117880:	f006 faac 	bl	811dddc <iprintf>
        prev->next = pcb->next;
 8117884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117886:	68da      	ldr	r2, [r3, #12]
 8117888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811788a:	60da      	str	r2, [r3, #12]
 811788c:	e00f      	b.n	81178ae <tcp_slowtmr+0x4a6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 811788e:	4b39      	ldr	r3, [pc, #228]	@ (8117974 <tcp_slowtmr+0x56c>)
 8117890:	681b      	ldr	r3, [r3, #0]
 8117892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8117894:	429a      	cmp	r2, r3
 8117896:	d006      	beq.n	81178a6 <tcp_slowtmr+0x49e>
 8117898:	4b37      	ldr	r3, [pc, #220]	@ (8117978 <tcp_slowtmr+0x570>)
 811789a:	f240 5271 	movw	r2, #1393	@ 0x571
 811789e:	4939      	ldr	r1, [pc, #228]	@ (8117984 <tcp_slowtmr+0x57c>)
 81178a0:	4837      	ldr	r0, [pc, #220]	@ (8117980 <tcp_slowtmr+0x578>)
 81178a2:	f006 fa9b 	bl	811dddc <iprintf>
        tcp_active_pcbs = pcb->next;
 81178a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81178a8:	68db      	ldr	r3, [r3, #12]
 81178aa:	4a32      	ldr	r2, [pc, #200]	@ (8117974 <tcp_slowtmr+0x56c>)
 81178ac:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 81178ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 81178b2:	2b00      	cmp	r3, #0
 81178b4:	d013      	beq.n	81178de <tcp_slowtmr+0x4d6>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 81178b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81178b8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 81178ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81178bc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 81178be:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 81178c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81178c2:	3304      	adds	r3, #4
 81178c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81178c6:	8ad2      	ldrh	r2, [r2, #22]
 81178c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81178ca:	8b09      	ldrh	r1, [r1, #24]
 81178cc:	9102      	str	r1, [sp, #8]
 81178ce:	9201      	str	r2, [sp, #4]
 81178d0:	9300      	str	r3, [sp, #0]
 81178d2:	462b      	mov	r3, r5
 81178d4:	4622      	mov	r2, r4
 81178d6:	4601      	mov	r1, r0
 81178d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81178da:	f004 f9eb 	bl	811bcb4 <tcp_rst>
      err_arg = pcb->callback_arg;
 81178de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81178e0:	691b      	ldr	r3, [r3, #16]
 81178e2:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 81178e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81178e6:	7d1b      	ldrb	r3, [r3, #20]
 81178e8:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 81178ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81178ec:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 81178ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81178f0:	68db      	ldr	r3, [r3, #12]
 81178f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 81178f4:	6838      	ldr	r0, [r7, #0]
 81178f6:	f7ff f889 	bl	8116a0c <tcp_free>
      tcp_active_pcbs_changed = 0;
 81178fa:	4b23      	ldr	r3, [pc, #140]	@ (8117988 <tcp_slowtmr+0x580>)
 81178fc:	2200      	movs	r2, #0
 81178fe:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8117900:	68fb      	ldr	r3, [r7, #12]
 8117902:	2b00      	cmp	r3, #0
 8117904:	d004      	beq.n	8117910 <tcp_slowtmr+0x508>
 8117906:	68fb      	ldr	r3, [r7, #12]
 8117908:	f06f 010c 	mvn.w	r1, #12
 811790c:	68b8      	ldr	r0, [r7, #8]
 811790e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8117910:	4b1d      	ldr	r3, [pc, #116]	@ (8117988 <tcp_slowtmr+0x580>)
 8117912:	781b      	ldrb	r3, [r3, #0]
 8117914:	2b00      	cmp	r3, #0
 8117916:	d048      	beq.n	81179aa <tcp_slowtmr+0x5a2>
        goto tcp_slowtmr_start;
 8117918:	e589      	b.n	811742e <tcp_slowtmr+0x26>
      prev = pcb;
 811791a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811791c:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 811791e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117920:	68db      	ldr	r3, [r3, #12]
 8117922:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8117924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117926:	7f1b      	ldrb	r3, [r3, #28]
 8117928:	3301      	adds	r3, #1
 811792a:	b2da      	uxtb	r2, r3
 811792c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811792e:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8117930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117932:	7f1a      	ldrb	r2, [r3, #28]
 8117934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117936:	7f5b      	ldrb	r3, [r3, #29]
 8117938:	429a      	cmp	r2, r3
 811793a:	d336      	bcc.n	81179aa <tcp_slowtmr+0x5a2>
        prev->polltmr = 0;
 811793c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811793e:	2200      	movs	r2, #0
 8117940:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8117942:	4b11      	ldr	r3, [pc, #68]	@ (8117988 <tcp_slowtmr+0x580>)
 8117944:	2200      	movs	r2, #0
 8117946:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8117948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811794a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 811794e:	2b00      	cmp	r3, #0
 8117950:	d01c      	beq.n	811798c <tcp_slowtmr+0x584>
 8117952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8117958:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811795a:	6912      	ldr	r2, [r2, #16]
 811795c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 811795e:	4610      	mov	r0, r2
 8117960:	4798      	blx	r3
 8117962:	4603      	mov	r3, r0
 8117964:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8117968:	e013      	b.n	8117992 <tcp_slowtmr+0x58a>
 811796a:	bf00      	nop
 811796c:	10012128 	.word	0x10012128
 8117970:	10624dd3 	.word	0x10624dd3
 8117974:	10012134 	.word	0x10012134
 8117978:	0812094c 	.word	0x0812094c
 811797c:	08120dc4 	.word	0x08120dc4
 8117980:	081209d0 	.word	0x081209d0
 8117984:	08120df0 	.word	0x08120df0
 8117988:	1001213c 	.word	0x1001213c
 811798c:	2300      	movs	r3, #0
 811798e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8117992:	4b38      	ldr	r3, [pc, #224]	@ (8117a74 <tcp_slowtmr+0x66c>)
 8117994:	781b      	ldrb	r3, [r3, #0]
 8117996:	2b00      	cmp	r3, #0
 8117998:	f47f ad48 	bne.w	811742c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 811799c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 81179a0:	2b00      	cmp	r3, #0
 81179a2:	d102      	bne.n	81179aa <tcp_slowtmr+0x5a2>
          tcp_output(prev);
 81179a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81179a6:	f003 fbd1 	bl	811b14c <tcp_output>
  while (pcb != NULL) {
 81179aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81179ac:	2b00      	cmp	r3, #0
 81179ae:	f47f ad44 	bne.w	811743a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 81179b2:	2300      	movs	r3, #0
 81179b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 81179b6:	4b30      	ldr	r3, [pc, #192]	@ (8117a78 <tcp_slowtmr+0x670>)
 81179b8:	681b      	ldr	r3, [r3, #0]
 81179ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 81179bc:	e052      	b.n	8117a64 <tcp_slowtmr+0x65c>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 81179be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81179c0:	7d1b      	ldrb	r3, [r3, #20]
 81179c2:	2b0a      	cmp	r3, #10
 81179c4:	d006      	beq.n	81179d4 <tcp_slowtmr+0x5cc>
 81179c6:	4b2d      	ldr	r3, [pc, #180]	@ (8117a7c <tcp_slowtmr+0x674>)
 81179c8:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 81179cc:	492c      	ldr	r1, [pc, #176]	@ (8117a80 <tcp_slowtmr+0x678>)
 81179ce:	482d      	ldr	r0, [pc, #180]	@ (8117a84 <tcp_slowtmr+0x67c>)
 81179d0:	f006 fa04 	bl	811dddc <iprintf>
    pcb_remove = 0;
 81179d4:	2300      	movs	r3, #0
 81179d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 81179da:	4b2b      	ldr	r3, [pc, #172]	@ (8117a88 <tcp_slowtmr+0x680>)
 81179dc:	681a      	ldr	r2, [r3, #0]
 81179de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81179e0:	6a1b      	ldr	r3, [r3, #32]
 81179e2:	1ad3      	subs	r3, r2, r3
 81179e4:	2bf0      	cmp	r3, #240	@ 0xf0
 81179e6:	d904      	bls.n	81179f2 <tcp_slowtmr+0x5ea>
      ++pcb_remove;
 81179e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81179ec:	3301      	adds	r3, #1
 81179ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 81179f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81179f6:	2b00      	cmp	r3, #0
 81179f8:	d02f      	beq.n	8117a5a <tcp_slowtmr+0x652>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 81179fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81179fc:	f000 fb96 	bl	811812c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8117a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117a02:	2b00      	cmp	r3, #0
 8117a04:	d010      	beq.n	8117a28 <tcp_slowtmr+0x620>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8117a06:	4b1c      	ldr	r3, [pc, #112]	@ (8117a78 <tcp_slowtmr+0x670>)
 8117a08:	681b      	ldr	r3, [r3, #0]
 8117a0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8117a0c:	429a      	cmp	r2, r3
 8117a0e:	d106      	bne.n	8117a1e <tcp_slowtmr+0x616>
 8117a10:	4b1a      	ldr	r3, [pc, #104]	@ (8117a7c <tcp_slowtmr+0x674>)
 8117a12:	f240 52af 	movw	r2, #1455	@ 0x5af
 8117a16:	491d      	ldr	r1, [pc, #116]	@ (8117a8c <tcp_slowtmr+0x684>)
 8117a18:	481a      	ldr	r0, [pc, #104]	@ (8117a84 <tcp_slowtmr+0x67c>)
 8117a1a:	f006 f9df 	bl	811dddc <iprintf>
        prev->next = pcb->next;
 8117a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117a20:	68da      	ldr	r2, [r3, #12]
 8117a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117a24:	60da      	str	r2, [r3, #12]
 8117a26:	e00f      	b.n	8117a48 <tcp_slowtmr+0x640>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8117a28:	4b13      	ldr	r3, [pc, #76]	@ (8117a78 <tcp_slowtmr+0x670>)
 8117a2a:	681b      	ldr	r3, [r3, #0]
 8117a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8117a2e:	429a      	cmp	r2, r3
 8117a30:	d006      	beq.n	8117a40 <tcp_slowtmr+0x638>
 8117a32:	4b12      	ldr	r3, [pc, #72]	@ (8117a7c <tcp_slowtmr+0x674>)
 8117a34:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8117a38:	4915      	ldr	r1, [pc, #84]	@ (8117a90 <tcp_slowtmr+0x688>)
 8117a3a:	4812      	ldr	r0, [pc, #72]	@ (8117a84 <tcp_slowtmr+0x67c>)
 8117a3c:	f006 f9ce 	bl	811dddc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8117a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117a42:	68db      	ldr	r3, [r3, #12]
 8117a44:	4a0c      	ldr	r2, [pc, #48]	@ (8117a78 <tcp_slowtmr+0x670>)
 8117a46:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8117a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117a4a:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8117a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117a4e:	68db      	ldr	r3, [r3, #12]
 8117a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8117a52:	69f8      	ldr	r0, [r7, #28]
 8117a54:	f7fe ffda 	bl	8116a0c <tcp_free>
 8117a58:	e004      	b.n	8117a64 <tcp_slowtmr+0x65c>
    } else {
      prev = pcb;
 8117a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8117a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117a60:	68db      	ldr	r3, [r3, #12]
 8117a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8117a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117a66:	2b00      	cmp	r3, #0
 8117a68:	d1a9      	bne.n	81179be <tcp_slowtmr+0x5b6>
    }
  }
}
 8117a6a:	bf00      	nop
 8117a6c:	bf00      	nop
 8117a6e:	3730      	adds	r7, #48	@ 0x30
 8117a70:	46bd      	mov	sp, r7
 8117a72:	bdb0      	pop	{r4, r5, r7, pc}
 8117a74:	1001213c 	.word	0x1001213c
 8117a78:	10012138 	.word	0x10012138
 8117a7c:	0812094c 	.word	0x0812094c
 8117a80:	08120e1c 	.word	0x08120e1c
 8117a84:	081209d0 	.word	0x081209d0
 8117a88:	10012128 	.word	0x10012128
 8117a8c:	08120e4c 	.word	0x08120e4c
 8117a90:	08120e74 	.word	0x08120e74

08117a94 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8117a94:	b580      	push	{r7, lr}
 8117a96:	b082      	sub	sp, #8
 8117a98:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8117a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8117b50 <tcp_fasttmr+0xbc>)
 8117a9c:	781b      	ldrb	r3, [r3, #0]
 8117a9e:	3301      	adds	r3, #1
 8117aa0:	b2da      	uxtb	r2, r3
 8117aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8117b50 <tcp_fasttmr+0xbc>)
 8117aa4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8117aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8117b54 <tcp_fasttmr+0xc0>)
 8117aa8:	681b      	ldr	r3, [r3, #0]
 8117aaa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8117aac:	e048      	b.n	8117b40 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8117aae:	687b      	ldr	r3, [r7, #4]
 8117ab0:	7f9a      	ldrb	r2, [r3, #30]
 8117ab2:	4b27      	ldr	r3, [pc, #156]	@ (8117b50 <tcp_fasttmr+0xbc>)
 8117ab4:	781b      	ldrb	r3, [r3, #0]
 8117ab6:	429a      	cmp	r2, r3
 8117ab8:	d03f      	beq.n	8117b3a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8117aba:	4b25      	ldr	r3, [pc, #148]	@ (8117b50 <tcp_fasttmr+0xbc>)
 8117abc:	781a      	ldrb	r2, [r3, #0]
 8117abe:	687b      	ldr	r3, [r7, #4]
 8117ac0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8117ac2:	687b      	ldr	r3, [r7, #4]
 8117ac4:	8b5b      	ldrh	r3, [r3, #26]
 8117ac6:	f003 0301 	and.w	r3, r3, #1
 8117aca:	2b00      	cmp	r3, #0
 8117acc:	d010      	beq.n	8117af0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8117ace:	687b      	ldr	r3, [r7, #4]
 8117ad0:	8b5b      	ldrh	r3, [r3, #26]
 8117ad2:	f043 0302 	orr.w	r3, r3, #2
 8117ad6:	b29a      	uxth	r2, r3
 8117ad8:	687b      	ldr	r3, [r7, #4]
 8117ada:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8117adc:	6878      	ldr	r0, [r7, #4]
 8117ade:	f003 fb35 	bl	811b14c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8117ae2:	687b      	ldr	r3, [r7, #4]
 8117ae4:	8b5b      	ldrh	r3, [r3, #26]
 8117ae6:	f023 0303 	bic.w	r3, r3, #3
 8117aea:	b29a      	uxth	r2, r3
 8117aec:	687b      	ldr	r3, [r7, #4]
 8117aee:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8117af0:	687b      	ldr	r3, [r7, #4]
 8117af2:	8b5b      	ldrh	r3, [r3, #26]
 8117af4:	f003 0308 	and.w	r3, r3, #8
 8117af8:	2b00      	cmp	r3, #0
 8117afa:	d009      	beq.n	8117b10 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8117afc:	687b      	ldr	r3, [r7, #4]
 8117afe:	8b5b      	ldrh	r3, [r3, #26]
 8117b00:	f023 0308 	bic.w	r3, r3, #8
 8117b04:	b29a      	uxth	r2, r3
 8117b06:	687b      	ldr	r3, [r7, #4]
 8117b08:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8117b0a:	6878      	ldr	r0, [r7, #4]
 8117b0c:	f7ff f912 	bl	8116d34 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8117b10:	687b      	ldr	r3, [r7, #4]
 8117b12:	68db      	ldr	r3, [r3, #12]
 8117b14:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8117b16:	687b      	ldr	r3, [r7, #4]
 8117b18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8117b1a:	2b00      	cmp	r3, #0
 8117b1c:	d00a      	beq.n	8117b34 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8117b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8117b58 <tcp_fasttmr+0xc4>)
 8117b20:	2200      	movs	r2, #0
 8117b22:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8117b24:	6878      	ldr	r0, [r7, #4]
 8117b26:	f000 f819 	bl	8117b5c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8117b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8117b58 <tcp_fasttmr+0xc4>)
 8117b2c:	781b      	ldrb	r3, [r3, #0]
 8117b2e:	2b00      	cmp	r3, #0
 8117b30:	d000      	beq.n	8117b34 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8117b32:	e7b8      	b.n	8117aa6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8117b34:	683b      	ldr	r3, [r7, #0]
 8117b36:	607b      	str	r3, [r7, #4]
 8117b38:	e002      	b.n	8117b40 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8117b3a:	687b      	ldr	r3, [r7, #4]
 8117b3c:	68db      	ldr	r3, [r3, #12]
 8117b3e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8117b40:	687b      	ldr	r3, [r7, #4]
 8117b42:	2b00      	cmp	r3, #0
 8117b44:	d1b3      	bne.n	8117aae <tcp_fasttmr+0x1a>
    }
  }
}
 8117b46:	bf00      	nop
 8117b48:	bf00      	nop
 8117b4a:	3708      	adds	r7, #8
 8117b4c:	46bd      	mov	sp, r7
 8117b4e:	bd80      	pop	{r7, pc}
 8117b50:	1001213e 	.word	0x1001213e
 8117b54:	10012134 	.word	0x10012134
 8117b58:	1001213c 	.word	0x1001213c

08117b5c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8117b5c:	b590      	push	{r4, r7, lr}
 8117b5e:	b085      	sub	sp, #20
 8117b60:	af00      	add	r7, sp, #0
 8117b62:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8117b64:	687b      	ldr	r3, [r7, #4]
 8117b66:	2b00      	cmp	r3, #0
 8117b68:	d109      	bne.n	8117b7e <tcp_process_refused_data+0x22>
 8117b6a:	4b38      	ldr	r3, [pc, #224]	@ (8117c4c <tcp_process_refused_data+0xf0>)
 8117b6c:	f240 6209 	movw	r2, #1545	@ 0x609
 8117b70:	4937      	ldr	r1, [pc, #220]	@ (8117c50 <tcp_process_refused_data+0xf4>)
 8117b72:	4838      	ldr	r0, [pc, #224]	@ (8117c54 <tcp_process_refused_data+0xf8>)
 8117b74:	f006 f932 	bl	811dddc <iprintf>
 8117b78:	f06f 030f 	mvn.w	r3, #15
 8117b7c:	e061      	b.n	8117c42 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8117b7e:	687b      	ldr	r3, [r7, #4]
 8117b80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8117b82:	7b5b      	ldrb	r3, [r3, #13]
 8117b84:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8117b86:	687b      	ldr	r3, [r7, #4]
 8117b88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8117b8a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8117b8c:	687b      	ldr	r3, [r7, #4]
 8117b8e:	2200      	movs	r2, #0
 8117b90:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8117b92:	687b      	ldr	r3, [r7, #4]
 8117b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8117b98:	2b00      	cmp	r3, #0
 8117b9a:	d00b      	beq.n	8117bb4 <tcp_process_refused_data+0x58>
 8117b9c:	687b      	ldr	r3, [r7, #4]
 8117b9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8117ba2:	687b      	ldr	r3, [r7, #4]
 8117ba4:	6918      	ldr	r0, [r3, #16]
 8117ba6:	2300      	movs	r3, #0
 8117ba8:	68ba      	ldr	r2, [r7, #8]
 8117baa:	6879      	ldr	r1, [r7, #4]
 8117bac:	47a0      	blx	r4
 8117bae:	4603      	mov	r3, r0
 8117bb0:	73fb      	strb	r3, [r7, #15]
 8117bb2:	e007      	b.n	8117bc4 <tcp_process_refused_data+0x68>
 8117bb4:	2300      	movs	r3, #0
 8117bb6:	68ba      	ldr	r2, [r7, #8]
 8117bb8:	6879      	ldr	r1, [r7, #4]
 8117bba:	2000      	movs	r0, #0
 8117bbc:	f000 f8a6 	bl	8117d0c <tcp_recv_null>
 8117bc0:	4603      	mov	r3, r0
 8117bc2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8117bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8117bc8:	2b00      	cmp	r3, #0
 8117bca:	d12b      	bne.n	8117c24 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8117bcc:	7bbb      	ldrb	r3, [r7, #14]
 8117bce:	f003 0320 	and.w	r3, r3, #32
 8117bd2:	2b00      	cmp	r3, #0
 8117bd4:	d034      	beq.n	8117c40 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8117bd6:	687b      	ldr	r3, [r7, #4]
 8117bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8117bda:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8117bde:	4293      	cmp	r3, r2
 8117be0:	d005      	beq.n	8117bee <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8117be2:	687b      	ldr	r3, [r7, #4]
 8117be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8117be6:	3301      	adds	r3, #1
 8117be8:	b29a      	uxth	r2, r3
 8117bea:	687b      	ldr	r3, [r7, #4]
 8117bec:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8117bee:	687b      	ldr	r3, [r7, #4]
 8117bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8117bf4:	2b00      	cmp	r3, #0
 8117bf6:	d00b      	beq.n	8117c10 <tcp_process_refused_data+0xb4>
 8117bf8:	687b      	ldr	r3, [r7, #4]
 8117bfa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8117bfe:	687b      	ldr	r3, [r7, #4]
 8117c00:	6918      	ldr	r0, [r3, #16]
 8117c02:	2300      	movs	r3, #0
 8117c04:	2200      	movs	r2, #0
 8117c06:	6879      	ldr	r1, [r7, #4]
 8117c08:	47a0      	blx	r4
 8117c0a:	4603      	mov	r3, r0
 8117c0c:	73fb      	strb	r3, [r7, #15]
 8117c0e:	e001      	b.n	8117c14 <tcp_process_refused_data+0xb8>
 8117c10:	2300      	movs	r3, #0
 8117c12:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8117c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8117c18:	f113 0f0d 	cmn.w	r3, #13
 8117c1c:	d110      	bne.n	8117c40 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8117c1e:	f06f 030c 	mvn.w	r3, #12
 8117c22:	e00e      	b.n	8117c42 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8117c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8117c28:	f113 0f0d 	cmn.w	r3, #13
 8117c2c:	d102      	bne.n	8117c34 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8117c2e:	f06f 030c 	mvn.w	r3, #12
 8117c32:	e006      	b.n	8117c42 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8117c34:	687b      	ldr	r3, [r7, #4]
 8117c36:	68ba      	ldr	r2, [r7, #8]
 8117c38:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8117c3a:	f06f 0304 	mvn.w	r3, #4
 8117c3e:	e000      	b.n	8117c42 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8117c40:	2300      	movs	r3, #0
}
 8117c42:	4618      	mov	r0, r3
 8117c44:	3714      	adds	r7, #20
 8117c46:	46bd      	mov	sp, r7
 8117c48:	bd90      	pop	{r4, r7, pc}
 8117c4a:	bf00      	nop
 8117c4c:	0812094c 	.word	0x0812094c
 8117c50:	08120e9c 	.word	0x08120e9c
 8117c54:	081209d0 	.word	0x081209d0

08117c58 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8117c58:	b580      	push	{r7, lr}
 8117c5a:	b084      	sub	sp, #16
 8117c5c:	af00      	add	r7, sp, #0
 8117c5e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8117c60:	e007      	b.n	8117c72 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8117c62:	687b      	ldr	r3, [r7, #4]
 8117c64:	681b      	ldr	r3, [r3, #0]
 8117c66:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8117c68:	6878      	ldr	r0, [r7, #4]
 8117c6a:	f000 f80a 	bl	8117c82 <tcp_seg_free>
    seg = next;
 8117c6e:	68fb      	ldr	r3, [r7, #12]
 8117c70:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8117c72:	687b      	ldr	r3, [r7, #4]
 8117c74:	2b00      	cmp	r3, #0
 8117c76:	d1f4      	bne.n	8117c62 <tcp_segs_free+0xa>
  }
}
 8117c78:	bf00      	nop
 8117c7a:	bf00      	nop
 8117c7c:	3710      	adds	r7, #16
 8117c7e:	46bd      	mov	sp, r7
 8117c80:	bd80      	pop	{r7, pc}

08117c82 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8117c82:	b580      	push	{r7, lr}
 8117c84:	b082      	sub	sp, #8
 8117c86:	af00      	add	r7, sp, #0
 8117c88:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8117c8a:	687b      	ldr	r3, [r7, #4]
 8117c8c:	2b00      	cmp	r3, #0
 8117c8e:	d00c      	beq.n	8117caa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8117c90:	687b      	ldr	r3, [r7, #4]
 8117c92:	685b      	ldr	r3, [r3, #4]
 8117c94:	2b00      	cmp	r3, #0
 8117c96:	d004      	beq.n	8117ca2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8117c98:	687b      	ldr	r3, [r7, #4]
 8117c9a:	685b      	ldr	r3, [r3, #4]
 8117c9c:	4618      	mov	r0, r3
 8117c9e:	f7fe fb07 	bl	81162b0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8117ca2:	6879      	ldr	r1, [r7, #4]
 8117ca4:	2003      	movs	r0, #3
 8117ca6:	f7fd fc5f 	bl	8115568 <memp_free>
  }
}
 8117caa:	bf00      	nop
 8117cac:	3708      	adds	r7, #8
 8117cae:	46bd      	mov	sp, r7
 8117cb0:	bd80      	pop	{r7, pc}
	...

08117cb4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8117cb4:	b580      	push	{r7, lr}
 8117cb6:	b084      	sub	sp, #16
 8117cb8:	af00      	add	r7, sp, #0
 8117cba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8117cbc:	687b      	ldr	r3, [r7, #4]
 8117cbe:	2b00      	cmp	r3, #0
 8117cc0:	d106      	bne.n	8117cd0 <tcp_seg_copy+0x1c>
 8117cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8117d00 <tcp_seg_copy+0x4c>)
 8117cc4:	f240 6282 	movw	r2, #1666	@ 0x682
 8117cc8:	490e      	ldr	r1, [pc, #56]	@ (8117d04 <tcp_seg_copy+0x50>)
 8117cca:	480f      	ldr	r0, [pc, #60]	@ (8117d08 <tcp_seg_copy+0x54>)
 8117ccc:	f006 f886 	bl	811dddc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8117cd0:	2003      	movs	r0, #3
 8117cd2:	f7fd fbd3 	bl	811547c <memp_malloc>
 8117cd6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8117cd8:	68fb      	ldr	r3, [r7, #12]
 8117cda:	2b00      	cmp	r3, #0
 8117cdc:	d101      	bne.n	8117ce2 <tcp_seg_copy+0x2e>
    return NULL;
 8117cde:	2300      	movs	r3, #0
 8117ce0:	e00a      	b.n	8117cf8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8117ce2:	2210      	movs	r2, #16
 8117ce4:	6879      	ldr	r1, [r7, #4]
 8117ce6:	68f8      	ldr	r0, [r7, #12]
 8117ce8:	f006 fb07 	bl	811e2fa <memcpy>
  pbuf_ref(cseg->p);
 8117cec:	68fb      	ldr	r3, [r7, #12]
 8117cee:	685b      	ldr	r3, [r3, #4]
 8117cf0:	4618      	mov	r0, r3
 8117cf2:	f7fe fb83 	bl	81163fc <pbuf_ref>
  return cseg;
 8117cf6:	68fb      	ldr	r3, [r7, #12]
}
 8117cf8:	4618      	mov	r0, r3
 8117cfa:	3710      	adds	r7, #16
 8117cfc:	46bd      	mov	sp, r7
 8117cfe:	bd80      	pop	{r7, pc}
 8117d00:	0812094c 	.word	0x0812094c
 8117d04:	08120ee0 	.word	0x08120ee0
 8117d08:	081209d0 	.word	0x081209d0

08117d0c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8117d0c:	b580      	push	{r7, lr}
 8117d0e:	b084      	sub	sp, #16
 8117d10:	af00      	add	r7, sp, #0
 8117d12:	60f8      	str	r0, [r7, #12]
 8117d14:	60b9      	str	r1, [r7, #8]
 8117d16:	607a      	str	r2, [r7, #4]
 8117d18:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8117d1a:	68bb      	ldr	r3, [r7, #8]
 8117d1c:	2b00      	cmp	r3, #0
 8117d1e:	d109      	bne.n	8117d34 <tcp_recv_null+0x28>
 8117d20:	4b12      	ldr	r3, [pc, #72]	@ (8117d6c <tcp_recv_null+0x60>)
 8117d22:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8117d26:	4912      	ldr	r1, [pc, #72]	@ (8117d70 <tcp_recv_null+0x64>)
 8117d28:	4812      	ldr	r0, [pc, #72]	@ (8117d74 <tcp_recv_null+0x68>)
 8117d2a:	f006 f857 	bl	811dddc <iprintf>
 8117d2e:	f06f 030f 	mvn.w	r3, #15
 8117d32:	e016      	b.n	8117d62 <tcp_recv_null+0x56>

  if (p != NULL) {
 8117d34:	687b      	ldr	r3, [r7, #4]
 8117d36:	2b00      	cmp	r3, #0
 8117d38:	d009      	beq.n	8117d4e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8117d3a:	687b      	ldr	r3, [r7, #4]
 8117d3c:	891b      	ldrh	r3, [r3, #8]
 8117d3e:	4619      	mov	r1, r3
 8117d40:	68b8      	ldr	r0, [r7, #8]
 8117d42:	f7ff f9b1 	bl	81170a8 <tcp_recved>
    pbuf_free(p);
 8117d46:	6878      	ldr	r0, [r7, #4]
 8117d48:	f7fe fab2 	bl	81162b0 <pbuf_free>
 8117d4c:	e008      	b.n	8117d60 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8117d4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8117d52:	2b00      	cmp	r3, #0
 8117d54:	d104      	bne.n	8117d60 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8117d56:	68b8      	ldr	r0, [r7, #8]
 8117d58:	f7ff f856 	bl	8116e08 <tcp_close>
 8117d5c:	4603      	mov	r3, r0
 8117d5e:	e000      	b.n	8117d62 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8117d60:	2300      	movs	r3, #0
}
 8117d62:	4618      	mov	r0, r3
 8117d64:	3710      	adds	r7, #16
 8117d66:	46bd      	mov	sp, r7
 8117d68:	bd80      	pop	{r7, pc}
 8117d6a:	bf00      	nop
 8117d6c:	0812094c 	.word	0x0812094c
 8117d70:	08120efc 	.word	0x08120efc
 8117d74:	081209d0 	.word	0x081209d0

08117d78 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8117d78:	b580      	push	{r7, lr}
 8117d7a:	b086      	sub	sp, #24
 8117d7c:	af00      	add	r7, sp, #0
 8117d7e:	4603      	mov	r3, r0
 8117d80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8117d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8117d86:	2b00      	cmp	r3, #0
 8117d88:	db01      	blt.n	8117d8e <tcp_kill_prio+0x16>
 8117d8a:	79fb      	ldrb	r3, [r7, #7]
 8117d8c:	e000      	b.n	8117d90 <tcp_kill_prio+0x18>
 8117d8e:	237f      	movs	r3, #127	@ 0x7f
 8117d90:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8117d92:	7afb      	ldrb	r3, [r7, #11]
 8117d94:	2b00      	cmp	r3, #0
 8117d96:	d034      	beq.n	8117e02 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8117d98:	7afb      	ldrb	r3, [r7, #11]
 8117d9a:	3b01      	subs	r3, #1
 8117d9c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8117d9e:	2300      	movs	r3, #0
 8117da0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8117da2:	2300      	movs	r3, #0
 8117da4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8117da6:	4b19      	ldr	r3, [pc, #100]	@ (8117e0c <tcp_kill_prio+0x94>)
 8117da8:	681b      	ldr	r3, [r3, #0]
 8117daa:	617b      	str	r3, [r7, #20]
 8117dac:	e01f      	b.n	8117dee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8117dae:	697b      	ldr	r3, [r7, #20]
 8117db0:	7d5b      	ldrb	r3, [r3, #21]
 8117db2:	7afa      	ldrb	r2, [r7, #11]
 8117db4:	429a      	cmp	r2, r3
 8117db6:	d80c      	bhi.n	8117dd2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8117db8:	697b      	ldr	r3, [r7, #20]
 8117dba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8117dbc:	7afa      	ldrb	r2, [r7, #11]
 8117dbe:	429a      	cmp	r2, r3
 8117dc0:	d112      	bne.n	8117de8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8117dc2:	4b13      	ldr	r3, [pc, #76]	@ (8117e10 <tcp_kill_prio+0x98>)
 8117dc4:	681a      	ldr	r2, [r3, #0]
 8117dc6:	697b      	ldr	r3, [r7, #20]
 8117dc8:	6a1b      	ldr	r3, [r3, #32]
 8117dca:	1ad3      	subs	r3, r2, r3
 8117dcc:	68fa      	ldr	r2, [r7, #12]
 8117dce:	429a      	cmp	r2, r3
 8117dd0:	d80a      	bhi.n	8117de8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8117dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8117e10 <tcp_kill_prio+0x98>)
 8117dd4:	681a      	ldr	r2, [r3, #0]
 8117dd6:	697b      	ldr	r3, [r7, #20]
 8117dd8:	6a1b      	ldr	r3, [r3, #32]
 8117dda:	1ad3      	subs	r3, r2, r3
 8117ddc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8117dde:	697b      	ldr	r3, [r7, #20]
 8117de0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8117de2:	697b      	ldr	r3, [r7, #20]
 8117de4:	7d5b      	ldrb	r3, [r3, #21]
 8117de6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8117de8:	697b      	ldr	r3, [r7, #20]
 8117dea:	68db      	ldr	r3, [r3, #12]
 8117dec:	617b      	str	r3, [r7, #20]
 8117dee:	697b      	ldr	r3, [r7, #20]
 8117df0:	2b00      	cmp	r3, #0
 8117df2:	d1dc      	bne.n	8117dae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8117df4:	693b      	ldr	r3, [r7, #16]
 8117df6:	2b00      	cmp	r3, #0
 8117df8:	d004      	beq.n	8117e04 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8117dfa:	6938      	ldr	r0, [r7, #16]
 8117dfc:	f7ff f8ee 	bl	8116fdc <tcp_abort>
 8117e00:	e000      	b.n	8117e04 <tcp_kill_prio+0x8c>
    return;
 8117e02:	bf00      	nop
  }
}
 8117e04:	3718      	adds	r7, #24
 8117e06:	46bd      	mov	sp, r7
 8117e08:	bd80      	pop	{r7, pc}
 8117e0a:	bf00      	nop
 8117e0c:	10012134 	.word	0x10012134
 8117e10:	10012128 	.word	0x10012128

08117e14 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8117e14:	b580      	push	{r7, lr}
 8117e16:	b086      	sub	sp, #24
 8117e18:	af00      	add	r7, sp, #0
 8117e1a:	4603      	mov	r3, r0
 8117e1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8117e1e:	79fb      	ldrb	r3, [r7, #7]
 8117e20:	2b08      	cmp	r3, #8
 8117e22:	d009      	beq.n	8117e38 <tcp_kill_state+0x24>
 8117e24:	79fb      	ldrb	r3, [r7, #7]
 8117e26:	2b09      	cmp	r3, #9
 8117e28:	d006      	beq.n	8117e38 <tcp_kill_state+0x24>
 8117e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8117e94 <tcp_kill_state+0x80>)
 8117e2c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8117e30:	4919      	ldr	r1, [pc, #100]	@ (8117e98 <tcp_kill_state+0x84>)
 8117e32:	481a      	ldr	r0, [pc, #104]	@ (8117e9c <tcp_kill_state+0x88>)
 8117e34:	f005 ffd2 	bl	811dddc <iprintf>

  inactivity = 0;
 8117e38:	2300      	movs	r3, #0
 8117e3a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8117e3c:	2300      	movs	r3, #0
 8117e3e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8117e40:	4b17      	ldr	r3, [pc, #92]	@ (8117ea0 <tcp_kill_state+0x8c>)
 8117e42:	681b      	ldr	r3, [r3, #0]
 8117e44:	617b      	str	r3, [r7, #20]
 8117e46:	e017      	b.n	8117e78 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8117e48:	697b      	ldr	r3, [r7, #20]
 8117e4a:	7d1b      	ldrb	r3, [r3, #20]
 8117e4c:	79fa      	ldrb	r2, [r7, #7]
 8117e4e:	429a      	cmp	r2, r3
 8117e50:	d10f      	bne.n	8117e72 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8117e52:	4b14      	ldr	r3, [pc, #80]	@ (8117ea4 <tcp_kill_state+0x90>)
 8117e54:	681a      	ldr	r2, [r3, #0]
 8117e56:	697b      	ldr	r3, [r7, #20]
 8117e58:	6a1b      	ldr	r3, [r3, #32]
 8117e5a:	1ad3      	subs	r3, r2, r3
 8117e5c:	68fa      	ldr	r2, [r7, #12]
 8117e5e:	429a      	cmp	r2, r3
 8117e60:	d807      	bhi.n	8117e72 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8117e62:	4b10      	ldr	r3, [pc, #64]	@ (8117ea4 <tcp_kill_state+0x90>)
 8117e64:	681a      	ldr	r2, [r3, #0]
 8117e66:	697b      	ldr	r3, [r7, #20]
 8117e68:	6a1b      	ldr	r3, [r3, #32]
 8117e6a:	1ad3      	subs	r3, r2, r3
 8117e6c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8117e6e:	697b      	ldr	r3, [r7, #20]
 8117e70:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8117e72:	697b      	ldr	r3, [r7, #20]
 8117e74:	68db      	ldr	r3, [r3, #12]
 8117e76:	617b      	str	r3, [r7, #20]
 8117e78:	697b      	ldr	r3, [r7, #20]
 8117e7a:	2b00      	cmp	r3, #0
 8117e7c:	d1e4      	bne.n	8117e48 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8117e7e:	693b      	ldr	r3, [r7, #16]
 8117e80:	2b00      	cmp	r3, #0
 8117e82:	d003      	beq.n	8117e8c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8117e84:	2100      	movs	r1, #0
 8117e86:	6938      	ldr	r0, [r7, #16]
 8117e88:	f7fe ffea 	bl	8116e60 <tcp_abandon>
  }
}
 8117e8c:	bf00      	nop
 8117e8e:	3718      	adds	r7, #24
 8117e90:	46bd      	mov	sp, r7
 8117e92:	bd80      	pop	{r7, pc}
 8117e94:	0812094c 	.word	0x0812094c
 8117e98:	08120f18 	.word	0x08120f18
 8117e9c:	081209d0 	.word	0x081209d0
 8117ea0:	10012134 	.word	0x10012134
 8117ea4:	10012128 	.word	0x10012128

08117ea8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8117ea8:	b580      	push	{r7, lr}
 8117eaa:	b084      	sub	sp, #16
 8117eac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8117eae:	2300      	movs	r3, #0
 8117eb0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8117eb2:	2300      	movs	r3, #0
 8117eb4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8117eb6:	4b12      	ldr	r3, [pc, #72]	@ (8117f00 <tcp_kill_timewait+0x58>)
 8117eb8:	681b      	ldr	r3, [r3, #0]
 8117eba:	60fb      	str	r3, [r7, #12]
 8117ebc:	e012      	b.n	8117ee4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8117ebe:	4b11      	ldr	r3, [pc, #68]	@ (8117f04 <tcp_kill_timewait+0x5c>)
 8117ec0:	681a      	ldr	r2, [r3, #0]
 8117ec2:	68fb      	ldr	r3, [r7, #12]
 8117ec4:	6a1b      	ldr	r3, [r3, #32]
 8117ec6:	1ad3      	subs	r3, r2, r3
 8117ec8:	687a      	ldr	r2, [r7, #4]
 8117eca:	429a      	cmp	r2, r3
 8117ecc:	d807      	bhi.n	8117ede <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8117ece:	4b0d      	ldr	r3, [pc, #52]	@ (8117f04 <tcp_kill_timewait+0x5c>)
 8117ed0:	681a      	ldr	r2, [r3, #0]
 8117ed2:	68fb      	ldr	r3, [r7, #12]
 8117ed4:	6a1b      	ldr	r3, [r3, #32]
 8117ed6:	1ad3      	subs	r3, r2, r3
 8117ed8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8117eda:	68fb      	ldr	r3, [r7, #12]
 8117edc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8117ede:	68fb      	ldr	r3, [r7, #12]
 8117ee0:	68db      	ldr	r3, [r3, #12]
 8117ee2:	60fb      	str	r3, [r7, #12]
 8117ee4:	68fb      	ldr	r3, [r7, #12]
 8117ee6:	2b00      	cmp	r3, #0
 8117ee8:	d1e9      	bne.n	8117ebe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8117eea:	68bb      	ldr	r3, [r7, #8]
 8117eec:	2b00      	cmp	r3, #0
 8117eee:	d002      	beq.n	8117ef6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8117ef0:	68b8      	ldr	r0, [r7, #8]
 8117ef2:	f7ff f873 	bl	8116fdc <tcp_abort>
  }
}
 8117ef6:	bf00      	nop
 8117ef8:	3710      	adds	r7, #16
 8117efa:	46bd      	mov	sp, r7
 8117efc:	bd80      	pop	{r7, pc}
 8117efe:	bf00      	nop
 8117f00:	10012138 	.word	0x10012138
 8117f04:	10012128 	.word	0x10012128

08117f08 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8117f08:	b580      	push	{r7, lr}
 8117f0a:	b082      	sub	sp, #8
 8117f0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8117f0e:	4b10      	ldr	r3, [pc, #64]	@ (8117f50 <tcp_handle_closepend+0x48>)
 8117f10:	681b      	ldr	r3, [r3, #0]
 8117f12:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8117f14:	e014      	b.n	8117f40 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8117f16:	687b      	ldr	r3, [r7, #4]
 8117f18:	68db      	ldr	r3, [r3, #12]
 8117f1a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8117f1c:	687b      	ldr	r3, [r7, #4]
 8117f1e:	8b5b      	ldrh	r3, [r3, #26]
 8117f20:	f003 0308 	and.w	r3, r3, #8
 8117f24:	2b00      	cmp	r3, #0
 8117f26:	d009      	beq.n	8117f3c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8117f28:	687b      	ldr	r3, [r7, #4]
 8117f2a:	8b5b      	ldrh	r3, [r3, #26]
 8117f2c:	f023 0308 	bic.w	r3, r3, #8
 8117f30:	b29a      	uxth	r2, r3
 8117f32:	687b      	ldr	r3, [r7, #4]
 8117f34:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8117f36:	6878      	ldr	r0, [r7, #4]
 8117f38:	f7fe fefc 	bl	8116d34 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8117f3c:	683b      	ldr	r3, [r7, #0]
 8117f3e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8117f40:	687b      	ldr	r3, [r7, #4]
 8117f42:	2b00      	cmp	r3, #0
 8117f44:	d1e7      	bne.n	8117f16 <tcp_handle_closepend+0xe>
  }
}
 8117f46:	bf00      	nop
 8117f48:	bf00      	nop
 8117f4a:	3708      	adds	r7, #8
 8117f4c:	46bd      	mov	sp, r7
 8117f4e:	bd80      	pop	{r7, pc}
 8117f50:	10012134 	.word	0x10012134

08117f54 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8117f54:	b580      	push	{r7, lr}
 8117f56:	b084      	sub	sp, #16
 8117f58:	af00      	add	r7, sp, #0
 8117f5a:	4603      	mov	r3, r0
 8117f5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8117f5e:	2001      	movs	r0, #1
 8117f60:	f7fd fa8c 	bl	811547c <memp_malloc>
 8117f64:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8117f66:	68fb      	ldr	r3, [r7, #12]
 8117f68:	2b00      	cmp	r3, #0
 8117f6a:	d126      	bne.n	8117fba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8117f6c:	f7ff ffcc 	bl	8117f08 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8117f70:	f7ff ff9a 	bl	8117ea8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8117f74:	2001      	movs	r0, #1
 8117f76:	f7fd fa81 	bl	811547c <memp_malloc>
 8117f7a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8117f7c:	68fb      	ldr	r3, [r7, #12]
 8117f7e:	2b00      	cmp	r3, #0
 8117f80:	d11b      	bne.n	8117fba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8117f82:	2009      	movs	r0, #9
 8117f84:	f7ff ff46 	bl	8117e14 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8117f88:	2001      	movs	r0, #1
 8117f8a:	f7fd fa77 	bl	811547c <memp_malloc>
 8117f8e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8117f90:	68fb      	ldr	r3, [r7, #12]
 8117f92:	2b00      	cmp	r3, #0
 8117f94:	d111      	bne.n	8117fba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8117f96:	2008      	movs	r0, #8
 8117f98:	f7ff ff3c 	bl	8117e14 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8117f9c:	2001      	movs	r0, #1
 8117f9e:	f7fd fa6d 	bl	811547c <memp_malloc>
 8117fa2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8117fa4:	68fb      	ldr	r3, [r7, #12]
 8117fa6:	2b00      	cmp	r3, #0
 8117fa8:	d107      	bne.n	8117fba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8117faa:	79fb      	ldrb	r3, [r7, #7]
 8117fac:	4618      	mov	r0, r3
 8117fae:	f7ff fee3 	bl	8117d78 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8117fb2:	2001      	movs	r0, #1
 8117fb4:	f7fd fa62 	bl	811547c <memp_malloc>
 8117fb8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8117fba:	68fb      	ldr	r3, [r7, #12]
 8117fbc:	2b00      	cmp	r3, #0
 8117fbe:	d047      	beq.n	8118050 <tcp_alloc+0xfc>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8117fc0:	22a4      	movs	r2, #164	@ 0xa4
 8117fc2:	2100      	movs	r1, #0
 8117fc4:	68f8      	ldr	r0, [r7, #12]
 8117fc6:	f006 f849 	bl	811e05c <memset>
    pcb->prio = prio;
 8117fca:	68fb      	ldr	r3, [r7, #12]
 8117fcc:	79fa      	ldrb	r2, [r7, #7]
 8117fce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8117fd0:	68fb      	ldr	r3, [r7, #12]
 8117fd2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8117fd6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8117fda:	68fb      	ldr	r3, [r7, #12]
 8117fdc:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8117fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8117fe2:	68fb      	ldr	r3, [r7, #12]
 8117fe4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8117fe6:	68fb      	ldr	r3, [r7, #12]
 8117fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8117fea:	68fb      	ldr	r3, [r7, #12]
 8117fec:	22ff      	movs	r2, #255	@ 0xff
 8117fee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8117ff0:	68fb      	ldr	r3, [r7, #12]
 8117ff2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8117ff6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8117ff8:	68fb      	ldr	r3, [r7, #12]
 8117ffa:	2206      	movs	r2, #6
 8117ffc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8118000:	68fb      	ldr	r3, [r7, #12]
 8118002:	2206      	movs	r2, #6
 8118004:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8118006:	68fb      	ldr	r3, [r7, #12]
 8118008:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811800c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 811800e:	68fb      	ldr	r3, [r7, #12]
 8118010:	2201      	movs	r2, #1
 8118012:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8118016:	4b11      	ldr	r3, [pc, #68]	@ (811805c <tcp_alloc+0x108>)
 8118018:	681a      	ldr	r2, [r3, #0]
 811801a:	68fb      	ldr	r3, [r7, #12]
 811801c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 811801e:	4b10      	ldr	r3, [pc, #64]	@ (8118060 <tcp_alloc+0x10c>)
 8118020:	781a      	ldrb	r2, [r3, #0]
 8118022:	68fb      	ldr	r3, [r7, #12]
 8118024:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8118026:	68fb      	ldr	r3, [r7, #12]
 8118028:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 811802c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8118030:	68fb      	ldr	r3, [r7, #12]
 8118032:	4a0c      	ldr	r2, [pc, #48]	@ (8118064 <tcp_alloc+0x110>)
 8118034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8118038:	68fb      	ldr	r3, [r7, #12]
 811803a:	4a0b      	ldr	r2, [pc, #44]	@ (8118068 <tcp_alloc+0x114>)
 811803c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 8118040:	68fb      	ldr	r3, [r7, #12]
 8118042:	4a0a      	ldr	r2, [pc, #40]	@ (811806c <tcp_alloc+0x118>)
 8118044:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 8118048:	68fb      	ldr	r3, [r7, #12]
 811804a:	2209      	movs	r2, #9
 811804c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8118050:	68fb      	ldr	r3, [r7, #12]
}
 8118052:	4618      	mov	r0, r3
 8118054:	3710      	adds	r7, #16
 8118056:	46bd      	mov	sp, r7
 8118058:	bd80      	pop	{r7, pc}
 811805a:	bf00      	nop
 811805c:	10012128 	.word	0x10012128
 8118060:	1001213e 	.word	0x1001213e
 8118064:	08117d0d 	.word	0x08117d0d
 8118068:	006ddd00 	.word	0x006ddd00
 811806c:	000124f8 	.word	0x000124f8

08118070 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8118070:	b580      	push	{r7, lr}
 8118072:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8118074:	2040      	movs	r0, #64	@ 0x40
 8118076:	f7ff ff6d 	bl	8117f54 <tcp_alloc>
 811807a:	4603      	mov	r3, r0
}
 811807c:	4618      	mov	r0, r3
 811807e:	bd80      	pop	{r7, pc}

08118080 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8118080:	b480      	push	{r7}
 8118082:	b083      	sub	sp, #12
 8118084:	af00      	add	r7, sp, #0
 8118086:	6078      	str	r0, [r7, #4]
 8118088:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 811808a:	687b      	ldr	r3, [r7, #4]
 811808c:	2b00      	cmp	r3, #0
 811808e:	d002      	beq.n	8118096 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8118090:	687b      	ldr	r3, [r7, #4]
 8118092:	683a      	ldr	r2, [r7, #0]
 8118094:	611a      	str	r2, [r3, #16]
  }
}
 8118096:	bf00      	nop
 8118098:	370c      	adds	r7, #12
 811809a:	46bd      	mov	sp, r7
 811809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81180a0:	4770      	bx	lr
	...

081180a4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 81180a4:	b580      	push	{r7, lr}
 81180a6:	b082      	sub	sp, #8
 81180a8:	af00      	add	r7, sp, #0
 81180aa:	6078      	str	r0, [r7, #4]
 81180ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 81180ae:	687b      	ldr	r3, [r7, #4]
 81180b0:	2b00      	cmp	r3, #0
 81180b2:	d00e      	beq.n	81180d2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 81180b4:	687b      	ldr	r3, [r7, #4]
 81180b6:	7d1b      	ldrb	r3, [r3, #20]
 81180b8:	2b01      	cmp	r3, #1
 81180ba:	d106      	bne.n	81180ca <tcp_recv+0x26>
 81180bc:	4b07      	ldr	r3, [pc, #28]	@ (81180dc <tcp_recv+0x38>)
 81180be:	f240 72df 	movw	r2, #2015	@ 0x7df
 81180c2:	4907      	ldr	r1, [pc, #28]	@ (81180e0 <tcp_recv+0x3c>)
 81180c4:	4807      	ldr	r0, [pc, #28]	@ (81180e4 <tcp_recv+0x40>)
 81180c6:	f005 fe89 	bl	811dddc <iprintf>
    pcb->recv = recv;
 81180ca:	687b      	ldr	r3, [r7, #4]
 81180cc:	683a      	ldr	r2, [r7, #0]
 81180ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 81180d2:	bf00      	nop
 81180d4:	3708      	adds	r7, #8
 81180d6:	46bd      	mov	sp, r7
 81180d8:	bd80      	pop	{r7, pc}
 81180da:	bf00      	nop
 81180dc:	0812094c 	.word	0x0812094c
 81180e0:	08120f28 	.word	0x08120f28
 81180e4:	081209d0 	.word	0x081209d0

081180e8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 81180e8:	b580      	push	{r7, lr}
 81180ea:	b082      	sub	sp, #8
 81180ec:	af00      	add	r7, sp, #0
 81180ee:	6078      	str	r0, [r7, #4]
 81180f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 81180f2:	687b      	ldr	r3, [r7, #4]
 81180f4:	2b00      	cmp	r3, #0
 81180f6:	d00e      	beq.n	8118116 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 81180f8:	687b      	ldr	r3, [r7, #4]
 81180fa:	7d1b      	ldrb	r3, [r3, #20]
 81180fc:	2b01      	cmp	r3, #1
 81180fe:	d106      	bne.n	811810e <tcp_err+0x26>
 8118100:	4b07      	ldr	r3, [pc, #28]	@ (8118120 <tcp_err+0x38>)
 8118102:	f640 020d 	movw	r2, #2061	@ 0x80d
 8118106:	4907      	ldr	r1, [pc, #28]	@ (8118124 <tcp_err+0x3c>)
 8118108:	4807      	ldr	r0, [pc, #28]	@ (8118128 <tcp_err+0x40>)
 811810a:	f005 fe67 	bl	811dddc <iprintf>
    pcb->errf = err;
 811810e:	687b      	ldr	r3, [r7, #4]
 8118110:	683a      	ldr	r2, [r7, #0]
 8118112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8118116:	bf00      	nop
 8118118:	3708      	adds	r7, #8
 811811a:	46bd      	mov	sp, r7
 811811c:	bd80      	pop	{r7, pc}
 811811e:	bf00      	nop
 8118120:	0812094c 	.word	0x0812094c
 8118124:	08120f78 	.word	0x08120f78
 8118128:	081209d0 	.word	0x081209d0

0811812c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 811812c:	b580      	push	{r7, lr}
 811812e:	b082      	sub	sp, #8
 8118130:	af00      	add	r7, sp, #0
 8118132:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8118134:	687b      	ldr	r3, [r7, #4]
 8118136:	2b00      	cmp	r3, #0
 8118138:	d107      	bne.n	811814a <tcp_pcb_purge+0x1e>
 811813a:	4b21      	ldr	r3, [pc, #132]	@ (81181c0 <tcp_pcb_purge+0x94>)
 811813c:	f640 0251 	movw	r2, #2129	@ 0x851
 8118140:	4920      	ldr	r1, [pc, #128]	@ (81181c4 <tcp_pcb_purge+0x98>)
 8118142:	4821      	ldr	r0, [pc, #132]	@ (81181c8 <tcp_pcb_purge+0x9c>)
 8118144:	f005 fe4a 	bl	811dddc <iprintf>
 8118148:	e037      	b.n	81181ba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 811814a:	687b      	ldr	r3, [r7, #4]
 811814c:	7d1b      	ldrb	r3, [r3, #20]
 811814e:	2b00      	cmp	r3, #0
 8118150:	d033      	beq.n	81181ba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8118152:	687b      	ldr	r3, [r7, #4]
 8118154:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8118156:	2b0a      	cmp	r3, #10
 8118158:	d02f      	beq.n	81181ba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 811815a:	687b      	ldr	r3, [r7, #4]
 811815c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 811815e:	2b01      	cmp	r3, #1
 8118160:	d02b      	beq.n	81181ba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8118162:	687b      	ldr	r3, [r7, #4]
 8118164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8118166:	2b00      	cmp	r3, #0
 8118168:	d007      	beq.n	811817a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 811816a:	687b      	ldr	r3, [r7, #4]
 811816c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811816e:	4618      	mov	r0, r3
 8118170:	f7fe f89e 	bl	81162b0 <pbuf_free>
      pcb->refused_data = NULL;
 8118174:	687b      	ldr	r3, [r7, #4]
 8118176:	2200      	movs	r2, #0
 8118178:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 811817a:	687b      	ldr	r3, [r7, #4]
 811817c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811817e:	2b00      	cmp	r3, #0
 8118180:	d002      	beq.n	8118188 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8118182:	6878      	ldr	r0, [r7, #4]
 8118184:	f000 f986 	bl	8118494 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8118188:	687b      	ldr	r3, [r7, #4]
 811818a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811818e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8118190:	687b      	ldr	r3, [r7, #4]
 8118192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8118194:	4618      	mov	r0, r3
 8118196:	f7ff fd5f 	bl	8117c58 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 811819a:	687b      	ldr	r3, [r7, #4]
 811819c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811819e:	4618      	mov	r0, r3
 81181a0:	f7ff fd5a 	bl	8117c58 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 81181a4:	687b      	ldr	r3, [r7, #4]
 81181a6:	2200      	movs	r2, #0
 81181a8:	66da      	str	r2, [r3, #108]	@ 0x6c
 81181aa:	687b      	ldr	r3, [r7, #4]
 81181ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81181ae:	687b      	ldr	r3, [r7, #4]
 81181b0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 81181b2:	687b      	ldr	r3, [r7, #4]
 81181b4:	2200      	movs	r2, #0
 81181b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 81181ba:	3708      	adds	r7, #8
 81181bc:	46bd      	mov	sp, r7
 81181be:	bd80      	pop	{r7, pc}
 81181c0:	0812094c 	.word	0x0812094c
 81181c4:	08120fd8 	.word	0x08120fd8
 81181c8:	081209d0 	.word	0x081209d0

081181cc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 81181cc:	b580      	push	{r7, lr}
 81181ce:	b084      	sub	sp, #16
 81181d0:	af00      	add	r7, sp, #0
 81181d2:	6078      	str	r0, [r7, #4]
 81181d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 81181d6:	683b      	ldr	r3, [r7, #0]
 81181d8:	2b00      	cmp	r3, #0
 81181da:	d106      	bne.n	81181ea <tcp_pcb_remove+0x1e>
 81181dc:	4b3e      	ldr	r3, [pc, #248]	@ (81182d8 <tcp_pcb_remove+0x10c>)
 81181de:	f640 0283 	movw	r2, #2179	@ 0x883
 81181e2:	493e      	ldr	r1, [pc, #248]	@ (81182dc <tcp_pcb_remove+0x110>)
 81181e4:	483e      	ldr	r0, [pc, #248]	@ (81182e0 <tcp_pcb_remove+0x114>)
 81181e6:	f005 fdf9 	bl	811dddc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 81181ea:	687b      	ldr	r3, [r7, #4]
 81181ec:	2b00      	cmp	r3, #0
 81181ee:	d106      	bne.n	81181fe <tcp_pcb_remove+0x32>
 81181f0:	4b39      	ldr	r3, [pc, #228]	@ (81182d8 <tcp_pcb_remove+0x10c>)
 81181f2:	f640 0284 	movw	r2, #2180	@ 0x884
 81181f6:	493b      	ldr	r1, [pc, #236]	@ (81182e4 <tcp_pcb_remove+0x118>)
 81181f8:	4839      	ldr	r0, [pc, #228]	@ (81182e0 <tcp_pcb_remove+0x114>)
 81181fa:	f005 fdef 	bl	811dddc <iprintf>

  TCP_RMV(pcblist, pcb);
 81181fe:	687b      	ldr	r3, [r7, #4]
 8118200:	681b      	ldr	r3, [r3, #0]
 8118202:	683a      	ldr	r2, [r7, #0]
 8118204:	429a      	cmp	r2, r3
 8118206:	d105      	bne.n	8118214 <tcp_pcb_remove+0x48>
 8118208:	687b      	ldr	r3, [r7, #4]
 811820a:	681b      	ldr	r3, [r3, #0]
 811820c:	68da      	ldr	r2, [r3, #12]
 811820e:	687b      	ldr	r3, [r7, #4]
 8118210:	601a      	str	r2, [r3, #0]
 8118212:	e013      	b.n	811823c <tcp_pcb_remove+0x70>
 8118214:	687b      	ldr	r3, [r7, #4]
 8118216:	681b      	ldr	r3, [r3, #0]
 8118218:	60fb      	str	r3, [r7, #12]
 811821a:	e00c      	b.n	8118236 <tcp_pcb_remove+0x6a>
 811821c:	68fb      	ldr	r3, [r7, #12]
 811821e:	68db      	ldr	r3, [r3, #12]
 8118220:	683a      	ldr	r2, [r7, #0]
 8118222:	429a      	cmp	r2, r3
 8118224:	d104      	bne.n	8118230 <tcp_pcb_remove+0x64>
 8118226:	683b      	ldr	r3, [r7, #0]
 8118228:	68da      	ldr	r2, [r3, #12]
 811822a:	68fb      	ldr	r3, [r7, #12]
 811822c:	60da      	str	r2, [r3, #12]
 811822e:	e005      	b.n	811823c <tcp_pcb_remove+0x70>
 8118230:	68fb      	ldr	r3, [r7, #12]
 8118232:	68db      	ldr	r3, [r3, #12]
 8118234:	60fb      	str	r3, [r7, #12]
 8118236:	68fb      	ldr	r3, [r7, #12]
 8118238:	2b00      	cmp	r3, #0
 811823a:	d1ef      	bne.n	811821c <tcp_pcb_remove+0x50>
 811823c:	683b      	ldr	r3, [r7, #0]
 811823e:	2200      	movs	r2, #0
 8118240:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8118242:	6838      	ldr	r0, [r7, #0]
 8118244:	f7ff ff72 	bl	811812c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8118248:	683b      	ldr	r3, [r7, #0]
 811824a:	7d1b      	ldrb	r3, [r3, #20]
 811824c:	2b0a      	cmp	r3, #10
 811824e:	d013      	beq.n	8118278 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8118250:	683b      	ldr	r3, [r7, #0]
 8118252:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8118254:	2b01      	cmp	r3, #1
 8118256:	d00f      	beq.n	8118278 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8118258:	683b      	ldr	r3, [r7, #0]
 811825a:	8b5b      	ldrh	r3, [r3, #26]
 811825c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8118260:	2b00      	cmp	r3, #0
 8118262:	d009      	beq.n	8118278 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8118264:	683b      	ldr	r3, [r7, #0]
 8118266:	8b5b      	ldrh	r3, [r3, #26]
 8118268:	f043 0302 	orr.w	r3, r3, #2
 811826c:	b29a      	uxth	r2, r3
 811826e:	683b      	ldr	r3, [r7, #0]
 8118270:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8118272:	6838      	ldr	r0, [r7, #0]
 8118274:	f002 ff6a 	bl	811b14c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8118278:	683b      	ldr	r3, [r7, #0]
 811827a:	7d1b      	ldrb	r3, [r3, #20]
 811827c:	2b01      	cmp	r3, #1
 811827e:	d020      	beq.n	81182c2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8118280:	683b      	ldr	r3, [r7, #0]
 8118282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8118284:	2b00      	cmp	r3, #0
 8118286:	d006      	beq.n	8118296 <tcp_pcb_remove+0xca>
 8118288:	4b13      	ldr	r3, [pc, #76]	@ (81182d8 <tcp_pcb_remove+0x10c>)
 811828a:	f640 0293 	movw	r2, #2195	@ 0x893
 811828e:	4916      	ldr	r1, [pc, #88]	@ (81182e8 <tcp_pcb_remove+0x11c>)
 8118290:	4813      	ldr	r0, [pc, #76]	@ (81182e0 <tcp_pcb_remove+0x114>)
 8118292:	f005 fda3 	bl	811dddc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8118296:	683b      	ldr	r3, [r7, #0]
 8118298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811829a:	2b00      	cmp	r3, #0
 811829c:	d006      	beq.n	81182ac <tcp_pcb_remove+0xe0>
 811829e:	4b0e      	ldr	r3, [pc, #56]	@ (81182d8 <tcp_pcb_remove+0x10c>)
 81182a0:	f640 0294 	movw	r2, #2196	@ 0x894
 81182a4:	4911      	ldr	r1, [pc, #68]	@ (81182ec <tcp_pcb_remove+0x120>)
 81182a6:	480e      	ldr	r0, [pc, #56]	@ (81182e0 <tcp_pcb_remove+0x114>)
 81182a8:	f005 fd98 	bl	811dddc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 81182ac:	683b      	ldr	r3, [r7, #0]
 81182ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81182b0:	2b00      	cmp	r3, #0
 81182b2:	d006      	beq.n	81182c2 <tcp_pcb_remove+0xf6>
 81182b4:	4b08      	ldr	r3, [pc, #32]	@ (81182d8 <tcp_pcb_remove+0x10c>)
 81182b6:	f640 0296 	movw	r2, #2198	@ 0x896
 81182ba:	490d      	ldr	r1, [pc, #52]	@ (81182f0 <tcp_pcb_remove+0x124>)
 81182bc:	4808      	ldr	r0, [pc, #32]	@ (81182e0 <tcp_pcb_remove+0x114>)
 81182be:	f005 fd8d 	bl	811dddc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 81182c2:	683b      	ldr	r3, [r7, #0]
 81182c4:	2200      	movs	r2, #0
 81182c6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 81182c8:	683b      	ldr	r3, [r7, #0]
 81182ca:	2200      	movs	r2, #0
 81182cc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 81182ce:	bf00      	nop
 81182d0:	3710      	adds	r7, #16
 81182d2:	46bd      	mov	sp, r7
 81182d4:	bd80      	pop	{r7, pc}
 81182d6:	bf00      	nop
 81182d8:	0812094c 	.word	0x0812094c
 81182dc:	08120ff4 	.word	0x08120ff4
 81182e0:	081209d0 	.word	0x081209d0
 81182e4:	08121010 	.word	0x08121010
 81182e8:	08121030 	.word	0x08121030
 81182ec:	08121048 	.word	0x08121048
 81182f0:	08121064 	.word	0x08121064

081182f4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 81182f4:	b580      	push	{r7, lr}
 81182f6:	b082      	sub	sp, #8
 81182f8:	af00      	add	r7, sp, #0
 81182fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 81182fc:	687b      	ldr	r3, [r7, #4]
 81182fe:	2b00      	cmp	r3, #0
 8118300:	d106      	bne.n	8118310 <tcp_next_iss+0x1c>
 8118302:	4b0a      	ldr	r3, [pc, #40]	@ (811832c <tcp_next_iss+0x38>)
 8118304:	f640 02af 	movw	r2, #2223	@ 0x8af
 8118308:	4909      	ldr	r1, [pc, #36]	@ (8118330 <tcp_next_iss+0x3c>)
 811830a:	480a      	ldr	r0, [pc, #40]	@ (8118334 <tcp_next_iss+0x40>)
 811830c:	f005 fd66 	bl	811dddc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8118310:	4b09      	ldr	r3, [pc, #36]	@ (8118338 <tcp_next_iss+0x44>)
 8118312:	681a      	ldr	r2, [r3, #0]
 8118314:	4b09      	ldr	r3, [pc, #36]	@ (811833c <tcp_next_iss+0x48>)
 8118316:	681b      	ldr	r3, [r3, #0]
 8118318:	4413      	add	r3, r2
 811831a:	4a07      	ldr	r2, [pc, #28]	@ (8118338 <tcp_next_iss+0x44>)
 811831c:	6013      	str	r3, [r2, #0]
  return iss;
 811831e:	4b06      	ldr	r3, [pc, #24]	@ (8118338 <tcp_next_iss+0x44>)
 8118320:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8118322:	4618      	mov	r0, r3
 8118324:	3708      	adds	r7, #8
 8118326:	46bd      	mov	sp, r7
 8118328:	bd80      	pop	{r7, pc}
 811832a:	bf00      	nop
 811832c:	0812094c 	.word	0x0812094c
 8118330:	0812107c 	.word	0x0812107c
 8118334:	081209d0 	.word	0x081209d0
 8118338:	1000002c 	.word	0x1000002c
 811833c:	10012128 	.word	0x10012128

08118340 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8118340:	b580      	push	{r7, lr}
 8118342:	b086      	sub	sp, #24
 8118344:	af00      	add	r7, sp, #0
 8118346:	4603      	mov	r3, r0
 8118348:	60b9      	str	r1, [r7, #8]
 811834a:	607a      	str	r2, [r7, #4]
 811834c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 811834e:	687b      	ldr	r3, [r7, #4]
 8118350:	2b00      	cmp	r3, #0
 8118352:	d106      	bne.n	8118362 <tcp_eff_send_mss_netif+0x22>
 8118354:	4b14      	ldr	r3, [pc, #80]	@ (81183a8 <tcp_eff_send_mss_netif+0x68>)
 8118356:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 811835a:	4914      	ldr	r1, [pc, #80]	@ (81183ac <tcp_eff_send_mss_netif+0x6c>)
 811835c:	4814      	ldr	r0, [pc, #80]	@ (81183b0 <tcp_eff_send_mss_netif+0x70>)
 811835e:	f005 fd3d 	bl	811dddc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8118362:	68bb      	ldr	r3, [r7, #8]
 8118364:	2b00      	cmp	r3, #0
 8118366:	d101      	bne.n	811836c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8118368:	89fb      	ldrh	r3, [r7, #14]
 811836a:	e019      	b.n	81183a0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 811836c:	68bb      	ldr	r3, [r7, #8]
 811836e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8118370:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8118372:	8afb      	ldrh	r3, [r7, #22]
 8118374:	2b00      	cmp	r3, #0
 8118376:	d012      	beq.n	811839e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8118378:	2328      	movs	r3, #40	@ 0x28
 811837a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 811837c:	8afa      	ldrh	r2, [r7, #22]
 811837e:	8abb      	ldrh	r3, [r7, #20]
 8118380:	429a      	cmp	r2, r3
 8118382:	d904      	bls.n	811838e <tcp_eff_send_mss_netif+0x4e>
 8118384:	8afa      	ldrh	r2, [r7, #22]
 8118386:	8abb      	ldrh	r3, [r7, #20]
 8118388:	1ad3      	subs	r3, r2, r3
 811838a:	b29b      	uxth	r3, r3
 811838c:	e000      	b.n	8118390 <tcp_eff_send_mss_netif+0x50>
 811838e:	2300      	movs	r3, #0
 8118390:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8118392:	8a7a      	ldrh	r2, [r7, #18]
 8118394:	89fb      	ldrh	r3, [r7, #14]
 8118396:	4293      	cmp	r3, r2
 8118398:	bf28      	it	cs
 811839a:	4613      	movcs	r3, r2
 811839c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 811839e:	89fb      	ldrh	r3, [r7, #14]
}
 81183a0:	4618      	mov	r0, r3
 81183a2:	3718      	adds	r7, #24
 81183a4:	46bd      	mov	sp, r7
 81183a6:	bd80      	pop	{r7, pc}
 81183a8:	0812094c 	.word	0x0812094c
 81183ac:	08121098 	.word	0x08121098
 81183b0:	081209d0 	.word	0x081209d0

081183b4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 81183b4:	b580      	push	{r7, lr}
 81183b6:	b084      	sub	sp, #16
 81183b8:	af00      	add	r7, sp, #0
 81183ba:	6078      	str	r0, [r7, #4]
 81183bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 81183be:	683b      	ldr	r3, [r7, #0]
 81183c0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 81183c2:	687b      	ldr	r3, [r7, #4]
 81183c4:	2b00      	cmp	r3, #0
 81183c6:	d119      	bne.n	81183fc <tcp_netif_ip_addr_changed_pcblist+0x48>
 81183c8:	4b10      	ldr	r3, [pc, #64]	@ (811840c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 81183ca:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 81183ce:	4910      	ldr	r1, [pc, #64]	@ (8118410 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 81183d0:	4810      	ldr	r0, [pc, #64]	@ (8118414 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 81183d2:	f005 fd03 	bl	811dddc <iprintf>

  while (pcb != NULL) {
 81183d6:	e011      	b.n	81183fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 81183d8:	68fb      	ldr	r3, [r7, #12]
 81183da:	681a      	ldr	r2, [r3, #0]
 81183dc:	687b      	ldr	r3, [r7, #4]
 81183de:	681b      	ldr	r3, [r3, #0]
 81183e0:	429a      	cmp	r2, r3
 81183e2:	d108      	bne.n	81183f6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 81183e4:	68fb      	ldr	r3, [r7, #12]
 81183e6:	68db      	ldr	r3, [r3, #12]
 81183e8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 81183ea:	68f8      	ldr	r0, [r7, #12]
 81183ec:	f7fe fdf6 	bl	8116fdc <tcp_abort>
      pcb = next;
 81183f0:	68bb      	ldr	r3, [r7, #8]
 81183f2:	60fb      	str	r3, [r7, #12]
 81183f4:	e002      	b.n	81183fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 81183f6:	68fb      	ldr	r3, [r7, #12]
 81183f8:	68db      	ldr	r3, [r3, #12]
 81183fa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 81183fc:	68fb      	ldr	r3, [r7, #12]
 81183fe:	2b00      	cmp	r3, #0
 8118400:	d1ea      	bne.n	81183d8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8118402:	bf00      	nop
 8118404:	bf00      	nop
 8118406:	3710      	adds	r7, #16
 8118408:	46bd      	mov	sp, r7
 811840a:	bd80      	pop	{r7, pc}
 811840c:	0812094c 	.word	0x0812094c
 8118410:	081210c0 	.word	0x081210c0
 8118414:	081209d0 	.word	0x081209d0

08118418 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8118418:	b580      	push	{r7, lr}
 811841a:	b084      	sub	sp, #16
 811841c:	af00      	add	r7, sp, #0
 811841e:	6078      	str	r0, [r7, #4]
 8118420:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8118422:	687b      	ldr	r3, [r7, #4]
 8118424:	2b00      	cmp	r3, #0
 8118426:	d02a      	beq.n	811847e <tcp_netif_ip_addr_changed+0x66>
 8118428:	687b      	ldr	r3, [r7, #4]
 811842a:	681b      	ldr	r3, [r3, #0]
 811842c:	2b00      	cmp	r3, #0
 811842e:	d026      	beq.n	811847e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8118430:	4b15      	ldr	r3, [pc, #84]	@ (8118488 <tcp_netif_ip_addr_changed+0x70>)
 8118432:	681b      	ldr	r3, [r3, #0]
 8118434:	4619      	mov	r1, r3
 8118436:	6878      	ldr	r0, [r7, #4]
 8118438:	f7ff ffbc 	bl	81183b4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 811843c:	4b13      	ldr	r3, [pc, #76]	@ (811848c <tcp_netif_ip_addr_changed+0x74>)
 811843e:	681b      	ldr	r3, [r3, #0]
 8118440:	4619      	mov	r1, r3
 8118442:	6878      	ldr	r0, [r7, #4]
 8118444:	f7ff ffb6 	bl	81183b4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8118448:	683b      	ldr	r3, [r7, #0]
 811844a:	2b00      	cmp	r3, #0
 811844c:	d017      	beq.n	811847e <tcp_netif_ip_addr_changed+0x66>
 811844e:	683b      	ldr	r3, [r7, #0]
 8118450:	681b      	ldr	r3, [r3, #0]
 8118452:	2b00      	cmp	r3, #0
 8118454:	d013      	beq.n	811847e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8118456:	4b0e      	ldr	r3, [pc, #56]	@ (8118490 <tcp_netif_ip_addr_changed+0x78>)
 8118458:	681b      	ldr	r3, [r3, #0]
 811845a:	60fb      	str	r3, [r7, #12]
 811845c:	e00c      	b.n	8118478 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 811845e:	68fb      	ldr	r3, [r7, #12]
 8118460:	681a      	ldr	r2, [r3, #0]
 8118462:	687b      	ldr	r3, [r7, #4]
 8118464:	681b      	ldr	r3, [r3, #0]
 8118466:	429a      	cmp	r2, r3
 8118468:	d103      	bne.n	8118472 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 811846a:	683b      	ldr	r3, [r7, #0]
 811846c:	681a      	ldr	r2, [r3, #0]
 811846e:	68fb      	ldr	r3, [r7, #12]
 8118470:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8118472:	68fb      	ldr	r3, [r7, #12]
 8118474:	68db      	ldr	r3, [r3, #12]
 8118476:	60fb      	str	r3, [r7, #12]
 8118478:	68fb      	ldr	r3, [r7, #12]
 811847a:	2b00      	cmp	r3, #0
 811847c:	d1ef      	bne.n	811845e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 811847e:	bf00      	nop
 8118480:	3710      	adds	r7, #16
 8118482:	46bd      	mov	sp, r7
 8118484:	bd80      	pop	{r7, pc}
 8118486:	bf00      	nop
 8118488:	10012134 	.word	0x10012134
 811848c:	1001212c 	.word	0x1001212c
 8118490:	10012130 	.word	0x10012130

08118494 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8118494:	b580      	push	{r7, lr}
 8118496:	b082      	sub	sp, #8
 8118498:	af00      	add	r7, sp, #0
 811849a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 811849c:	687b      	ldr	r3, [r7, #4]
 811849e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81184a0:	2b00      	cmp	r3, #0
 81184a2:	d007      	beq.n	81184b4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 81184a4:	687b      	ldr	r3, [r7, #4]
 81184a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81184a8:	4618      	mov	r0, r3
 81184aa:	f7ff fbd5 	bl	8117c58 <tcp_segs_free>
    pcb->ooseq = NULL;
 81184ae:	687b      	ldr	r3, [r7, #4]
 81184b0:	2200      	movs	r2, #0
 81184b2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 81184b4:	bf00      	nop
 81184b6:	3708      	adds	r7, #8
 81184b8:	46bd      	mov	sp, r7
 81184ba:	bd80      	pop	{r7, pc}

081184bc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 81184bc:	b590      	push	{r4, r7, lr}
 81184be:	b08d      	sub	sp, #52	@ 0x34
 81184c0:	af04      	add	r7, sp, #16
 81184c2:	6078      	str	r0, [r7, #4]
 81184c4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 81184c6:	687b      	ldr	r3, [r7, #4]
 81184c8:	2b00      	cmp	r3, #0
 81184ca:	d105      	bne.n	81184d8 <tcp_input+0x1c>
 81184cc:	4b9b      	ldr	r3, [pc, #620]	@ (811873c <tcp_input+0x280>)
 81184ce:	2283      	movs	r2, #131	@ 0x83
 81184d0:	499b      	ldr	r1, [pc, #620]	@ (8118740 <tcp_input+0x284>)
 81184d2:	489c      	ldr	r0, [pc, #624]	@ (8118744 <tcp_input+0x288>)
 81184d4:	f005 fc82 	bl	811dddc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 81184d8:	687b      	ldr	r3, [r7, #4]
 81184da:	685b      	ldr	r3, [r3, #4]
 81184dc:	4a9a      	ldr	r2, [pc, #616]	@ (8118748 <tcp_input+0x28c>)
 81184de:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 81184e0:	687b      	ldr	r3, [r7, #4]
 81184e2:	895b      	ldrh	r3, [r3, #10]
 81184e4:	2b13      	cmp	r3, #19
 81184e6:	f240 83d1 	bls.w	8118c8c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 81184ea:	4b98      	ldr	r3, [pc, #608]	@ (811874c <tcp_input+0x290>)
 81184ec:	695b      	ldr	r3, [r3, #20]
 81184ee:	4a97      	ldr	r2, [pc, #604]	@ (811874c <tcp_input+0x290>)
 81184f0:	6812      	ldr	r2, [r2, #0]
 81184f2:	4611      	mov	r1, r2
 81184f4:	4618      	mov	r0, r3
 81184f6:	f7fb fb09 	bl	8113b0c <ip4_addr_isbroadcast_u32>
 81184fa:	4603      	mov	r3, r0
 81184fc:	2b00      	cmp	r3, #0
 81184fe:	f040 83c7 	bne.w	8118c90 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8118502:	4b92      	ldr	r3, [pc, #584]	@ (811874c <tcp_input+0x290>)
 8118504:	695b      	ldr	r3, [r3, #20]
 8118506:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 811850a:	2be0      	cmp	r3, #224	@ 0xe0
 811850c:	f000 83c0 	beq.w	8118c90 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8118510:	4b8d      	ldr	r3, [pc, #564]	@ (8118748 <tcp_input+0x28c>)
 8118512:	681b      	ldr	r3, [r3, #0]
 8118514:	899b      	ldrh	r3, [r3, #12]
 8118516:	b29b      	uxth	r3, r3
 8118518:	4618      	mov	r0, r3
 811851a:	f7f9 fcbf 	bl	8111e9c <lwip_htons>
 811851e:	4603      	mov	r3, r0
 8118520:	0b1b      	lsrs	r3, r3, #12
 8118522:	b29b      	uxth	r3, r3
 8118524:	b2db      	uxtb	r3, r3
 8118526:	009b      	lsls	r3, r3, #2
 8118528:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 811852a:	7cbb      	ldrb	r3, [r7, #18]
 811852c:	2b13      	cmp	r3, #19
 811852e:	f240 83b1 	bls.w	8118c94 <tcp_input+0x7d8>
 8118532:	7cbb      	ldrb	r3, [r7, #18]
 8118534:	b29a      	uxth	r2, r3
 8118536:	687b      	ldr	r3, [r7, #4]
 8118538:	891b      	ldrh	r3, [r3, #8]
 811853a:	429a      	cmp	r2, r3
 811853c:	f200 83aa 	bhi.w	8118c94 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8118540:	7cbb      	ldrb	r3, [r7, #18]
 8118542:	b29b      	uxth	r3, r3
 8118544:	3b14      	subs	r3, #20
 8118546:	b29a      	uxth	r2, r3
 8118548:	4b81      	ldr	r3, [pc, #516]	@ (8118750 <tcp_input+0x294>)
 811854a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 811854c:	4b81      	ldr	r3, [pc, #516]	@ (8118754 <tcp_input+0x298>)
 811854e:	2200      	movs	r2, #0
 8118550:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8118552:	687b      	ldr	r3, [r7, #4]
 8118554:	895a      	ldrh	r2, [r3, #10]
 8118556:	7cbb      	ldrb	r3, [r7, #18]
 8118558:	b29b      	uxth	r3, r3
 811855a:	429a      	cmp	r2, r3
 811855c:	d309      	bcc.n	8118572 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 811855e:	4b7c      	ldr	r3, [pc, #496]	@ (8118750 <tcp_input+0x294>)
 8118560:	881a      	ldrh	r2, [r3, #0]
 8118562:	4b7d      	ldr	r3, [pc, #500]	@ (8118758 <tcp_input+0x29c>)
 8118564:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8118566:	7cbb      	ldrb	r3, [r7, #18]
 8118568:	4619      	mov	r1, r3
 811856a:	6878      	ldr	r0, [r7, #4]
 811856c:	f7fd fe1a 	bl	81161a4 <pbuf_remove_header>
 8118570:	e04e      	b.n	8118610 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8118572:	687b      	ldr	r3, [r7, #4]
 8118574:	681b      	ldr	r3, [r3, #0]
 8118576:	2b00      	cmp	r3, #0
 8118578:	d105      	bne.n	8118586 <tcp_input+0xca>
 811857a:	4b70      	ldr	r3, [pc, #448]	@ (811873c <tcp_input+0x280>)
 811857c:	22c2      	movs	r2, #194	@ 0xc2
 811857e:	4977      	ldr	r1, [pc, #476]	@ (811875c <tcp_input+0x2a0>)
 8118580:	4870      	ldr	r0, [pc, #448]	@ (8118744 <tcp_input+0x288>)
 8118582:	f005 fc2b 	bl	811dddc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8118586:	2114      	movs	r1, #20
 8118588:	6878      	ldr	r0, [r7, #4]
 811858a:	f7fd fe0b 	bl	81161a4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 811858e:	687b      	ldr	r3, [r7, #4]
 8118590:	895a      	ldrh	r2, [r3, #10]
 8118592:	4b71      	ldr	r3, [pc, #452]	@ (8118758 <tcp_input+0x29c>)
 8118594:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8118596:	4b6e      	ldr	r3, [pc, #440]	@ (8118750 <tcp_input+0x294>)
 8118598:	881a      	ldrh	r2, [r3, #0]
 811859a:	4b6f      	ldr	r3, [pc, #444]	@ (8118758 <tcp_input+0x29c>)
 811859c:	881b      	ldrh	r3, [r3, #0]
 811859e:	1ad3      	subs	r3, r2, r3
 81185a0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 81185a2:	4b6d      	ldr	r3, [pc, #436]	@ (8118758 <tcp_input+0x29c>)
 81185a4:	881b      	ldrh	r3, [r3, #0]
 81185a6:	4619      	mov	r1, r3
 81185a8:	6878      	ldr	r0, [r7, #4]
 81185aa:	f7fd fdfb 	bl	81161a4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 81185ae:	687b      	ldr	r3, [r7, #4]
 81185b0:	681b      	ldr	r3, [r3, #0]
 81185b2:	895b      	ldrh	r3, [r3, #10]
 81185b4:	8a3a      	ldrh	r2, [r7, #16]
 81185b6:	429a      	cmp	r2, r3
 81185b8:	f200 836e 	bhi.w	8118c98 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 81185bc:	687b      	ldr	r3, [r7, #4]
 81185be:	681b      	ldr	r3, [r3, #0]
 81185c0:	685b      	ldr	r3, [r3, #4]
 81185c2:	4a64      	ldr	r2, [pc, #400]	@ (8118754 <tcp_input+0x298>)
 81185c4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 81185c6:	687b      	ldr	r3, [r7, #4]
 81185c8:	681b      	ldr	r3, [r3, #0]
 81185ca:	8a3a      	ldrh	r2, [r7, #16]
 81185cc:	4611      	mov	r1, r2
 81185ce:	4618      	mov	r0, r3
 81185d0:	f7fd fde8 	bl	81161a4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 81185d4:	687b      	ldr	r3, [r7, #4]
 81185d6:	891a      	ldrh	r2, [r3, #8]
 81185d8:	8a3b      	ldrh	r3, [r7, #16]
 81185da:	1ad3      	subs	r3, r2, r3
 81185dc:	b29a      	uxth	r2, r3
 81185de:	687b      	ldr	r3, [r7, #4]
 81185e0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 81185e2:	687b      	ldr	r3, [r7, #4]
 81185e4:	895b      	ldrh	r3, [r3, #10]
 81185e6:	2b00      	cmp	r3, #0
 81185e8:	d005      	beq.n	81185f6 <tcp_input+0x13a>
 81185ea:	4b54      	ldr	r3, [pc, #336]	@ (811873c <tcp_input+0x280>)
 81185ec:	22df      	movs	r2, #223	@ 0xdf
 81185ee:	495c      	ldr	r1, [pc, #368]	@ (8118760 <tcp_input+0x2a4>)
 81185f0:	4854      	ldr	r0, [pc, #336]	@ (8118744 <tcp_input+0x288>)
 81185f2:	f005 fbf3 	bl	811dddc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 81185f6:	687b      	ldr	r3, [r7, #4]
 81185f8:	891a      	ldrh	r2, [r3, #8]
 81185fa:	687b      	ldr	r3, [r7, #4]
 81185fc:	681b      	ldr	r3, [r3, #0]
 81185fe:	891b      	ldrh	r3, [r3, #8]
 8118600:	429a      	cmp	r2, r3
 8118602:	d005      	beq.n	8118610 <tcp_input+0x154>
 8118604:	4b4d      	ldr	r3, [pc, #308]	@ (811873c <tcp_input+0x280>)
 8118606:	22e0      	movs	r2, #224	@ 0xe0
 8118608:	4956      	ldr	r1, [pc, #344]	@ (8118764 <tcp_input+0x2a8>)
 811860a:	484e      	ldr	r0, [pc, #312]	@ (8118744 <tcp_input+0x288>)
 811860c:	f005 fbe6 	bl	811dddc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8118610:	4b4d      	ldr	r3, [pc, #308]	@ (8118748 <tcp_input+0x28c>)
 8118612:	681b      	ldr	r3, [r3, #0]
 8118614:	881b      	ldrh	r3, [r3, #0]
 8118616:	b29b      	uxth	r3, r3
 8118618:	4a4b      	ldr	r2, [pc, #300]	@ (8118748 <tcp_input+0x28c>)
 811861a:	6814      	ldr	r4, [r2, #0]
 811861c:	4618      	mov	r0, r3
 811861e:	f7f9 fc3d 	bl	8111e9c <lwip_htons>
 8118622:	4603      	mov	r3, r0
 8118624:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8118626:	4b48      	ldr	r3, [pc, #288]	@ (8118748 <tcp_input+0x28c>)
 8118628:	681b      	ldr	r3, [r3, #0]
 811862a:	885b      	ldrh	r3, [r3, #2]
 811862c:	b29b      	uxth	r3, r3
 811862e:	4a46      	ldr	r2, [pc, #280]	@ (8118748 <tcp_input+0x28c>)
 8118630:	6814      	ldr	r4, [r2, #0]
 8118632:	4618      	mov	r0, r3
 8118634:	f7f9 fc32 	bl	8111e9c <lwip_htons>
 8118638:	4603      	mov	r3, r0
 811863a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 811863c:	4b42      	ldr	r3, [pc, #264]	@ (8118748 <tcp_input+0x28c>)
 811863e:	681b      	ldr	r3, [r3, #0]
 8118640:	685b      	ldr	r3, [r3, #4]
 8118642:	4a41      	ldr	r2, [pc, #260]	@ (8118748 <tcp_input+0x28c>)
 8118644:	6814      	ldr	r4, [r2, #0]
 8118646:	4618      	mov	r0, r3
 8118648:	f7f9 fc3d 	bl	8111ec6 <lwip_htonl>
 811864c:	4603      	mov	r3, r0
 811864e:	6063      	str	r3, [r4, #4]
 8118650:	6863      	ldr	r3, [r4, #4]
 8118652:	4a45      	ldr	r2, [pc, #276]	@ (8118768 <tcp_input+0x2ac>)
 8118654:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8118656:	4b3c      	ldr	r3, [pc, #240]	@ (8118748 <tcp_input+0x28c>)
 8118658:	681b      	ldr	r3, [r3, #0]
 811865a:	689b      	ldr	r3, [r3, #8]
 811865c:	4a3a      	ldr	r2, [pc, #232]	@ (8118748 <tcp_input+0x28c>)
 811865e:	6814      	ldr	r4, [r2, #0]
 8118660:	4618      	mov	r0, r3
 8118662:	f7f9 fc30 	bl	8111ec6 <lwip_htonl>
 8118666:	4603      	mov	r3, r0
 8118668:	60a3      	str	r3, [r4, #8]
 811866a:	68a3      	ldr	r3, [r4, #8]
 811866c:	4a3f      	ldr	r2, [pc, #252]	@ (811876c <tcp_input+0x2b0>)
 811866e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8118670:	4b35      	ldr	r3, [pc, #212]	@ (8118748 <tcp_input+0x28c>)
 8118672:	681b      	ldr	r3, [r3, #0]
 8118674:	89db      	ldrh	r3, [r3, #14]
 8118676:	b29b      	uxth	r3, r3
 8118678:	4a33      	ldr	r2, [pc, #204]	@ (8118748 <tcp_input+0x28c>)
 811867a:	6814      	ldr	r4, [r2, #0]
 811867c:	4618      	mov	r0, r3
 811867e:	f7f9 fc0d 	bl	8111e9c <lwip_htons>
 8118682:	4603      	mov	r3, r0
 8118684:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8118686:	4b30      	ldr	r3, [pc, #192]	@ (8118748 <tcp_input+0x28c>)
 8118688:	681b      	ldr	r3, [r3, #0]
 811868a:	899b      	ldrh	r3, [r3, #12]
 811868c:	b29b      	uxth	r3, r3
 811868e:	4618      	mov	r0, r3
 8118690:	f7f9 fc04 	bl	8111e9c <lwip_htons>
 8118694:	4603      	mov	r3, r0
 8118696:	b2db      	uxtb	r3, r3
 8118698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 811869c:	b2da      	uxtb	r2, r3
 811869e:	4b34      	ldr	r3, [pc, #208]	@ (8118770 <tcp_input+0x2b4>)
 81186a0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 81186a2:	687b      	ldr	r3, [r7, #4]
 81186a4:	891a      	ldrh	r2, [r3, #8]
 81186a6:	4b33      	ldr	r3, [pc, #204]	@ (8118774 <tcp_input+0x2b8>)
 81186a8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 81186aa:	4b31      	ldr	r3, [pc, #196]	@ (8118770 <tcp_input+0x2b4>)
 81186ac:	781b      	ldrb	r3, [r3, #0]
 81186ae:	f003 0303 	and.w	r3, r3, #3
 81186b2:	2b00      	cmp	r3, #0
 81186b4:	d00c      	beq.n	81186d0 <tcp_input+0x214>
    tcplen++;
 81186b6:	4b2f      	ldr	r3, [pc, #188]	@ (8118774 <tcp_input+0x2b8>)
 81186b8:	881b      	ldrh	r3, [r3, #0]
 81186ba:	3301      	adds	r3, #1
 81186bc:	b29a      	uxth	r2, r3
 81186be:	4b2d      	ldr	r3, [pc, #180]	@ (8118774 <tcp_input+0x2b8>)
 81186c0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 81186c2:	687b      	ldr	r3, [r7, #4]
 81186c4:	891a      	ldrh	r2, [r3, #8]
 81186c6:	4b2b      	ldr	r3, [pc, #172]	@ (8118774 <tcp_input+0x2b8>)
 81186c8:	881b      	ldrh	r3, [r3, #0]
 81186ca:	429a      	cmp	r2, r3
 81186cc:	f200 82e6 	bhi.w	8118c9c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 81186d0:	2300      	movs	r3, #0
 81186d2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 81186d4:	4b28      	ldr	r3, [pc, #160]	@ (8118778 <tcp_input+0x2bc>)
 81186d6:	681b      	ldr	r3, [r3, #0]
 81186d8:	61fb      	str	r3, [r7, #28]
 81186da:	e09d      	b.n	8118818 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 81186dc:	69fb      	ldr	r3, [r7, #28]
 81186de:	7d1b      	ldrb	r3, [r3, #20]
 81186e0:	2b00      	cmp	r3, #0
 81186e2:	d105      	bne.n	81186f0 <tcp_input+0x234>
 81186e4:	4b15      	ldr	r3, [pc, #84]	@ (811873c <tcp_input+0x280>)
 81186e6:	22fb      	movs	r2, #251	@ 0xfb
 81186e8:	4924      	ldr	r1, [pc, #144]	@ (811877c <tcp_input+0x2c0>)
 81186ea:	4816      	ldr	r0, [pc, #88]	@ (8118744 <tcp_input+0x288>)
 81186ec:	f005 fb76 	bl	811dddc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 81186f0:	69fb      	ldr	r3, [r7, #28]
 81186f2:	7d1b      	ldrb	r3, [r3, #20]
 81186f4:	2b0a      	cmp	r3, #10
 81186f6:	d105      	bne.n	8118704 <tcp_input+0x248>
 81186f8:	4b10      	ldr	r3, [pc, #64]	@ (811873c <tcp_input+0x280>)
 81186fa:	22fc      	movs	r2, #252	@ 0xfc
 81186fc:	4920      	ldr	r1, [pc, #128]	@ (8118780 <tcp_input+0x2c4>)
 81186fe:	4811      	ldr	r0, [pc, #68]	@ (8118744 <tcp_input+0x288>)
 8118700:	f005 fb6c 	bl	811dddc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8118704:	69fb      	ldr	r3, [r7, #28]
 8118706:	7d1b      	ldrb	r3, [r3, #20]
 8118708:	2b01      	cmp	r3, #1
 811870a:	d105      	bne.n	8118718 <tcp_input+0x25c>
 811870c:	4b0b      	ldr	r3, [pc, #44]	@ (811873c <tcp_input+0x280>)
 811870e:	22fd      	movs	r2, #253	@ 0xfd
 8118710:	491c      	ldr	r1, [pc, #112]	@ (8118784 <tcp_input+0x2c8>)
 8118712:	480c      	ldr	r0, [pc, #48]	@ (8118744 <tcp_input+0x288>)
 8118714:	f005 fb62 	bl	811dddc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8118718:	69fb      	ldr	r3, [r7, #28]
 811871a:	7a1b      	ldrb	r3, [r3, #8]
 811871c:	2b00      	cmp	r3, #0
 811871e:	d033      	beq.n	8118788 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8118720:	69fb      	ldr	r3, [r7, #28]
 8118722:	7a1a      	ldrb	r2, [r3, #8]
 8118724:	4b09      	ldr	r3, [pc, #36]	@ (811874c <tcp_input+0x290>)
 8118726:	685b      	ldr	r3, [r3, #4]
 8118728:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811872c:	3301      	adds	r3, #1
 811872e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8118730:	429a      	cmp	r2, r3
 8118732:	d029      	beq.n	8118788 <tcp_input+0x2cc>
      prev = pcb;
 8118734:	69fb      	ldr	r3, [r7, #28]
 8118736:	61bb      	str	r3, [r7, #24]
      continue;
 8118738:	e06b      	b.n	8118812 <tcp_input+0x356>
 811873a:	bf00      	nop
 811873c:	081210f4 	.word	0x081210f4
 8118740:	08121168 	.word	0x08121168
 8118744:	08121180 	.word	0x08121180
 8118748:	10012150 	.word	0x10012150
 811874c:	1000b29c 	.word	0x1000b29c
 8118750:	10012154 	.word	0x10012154
 8118754:	10012158 	.word	0x10012158
 8118758:	10012156 	.word	0x10012156
 811875c:	081211a8 	.word	0x081211a8
 8118760:	081211b8 	.word	0x081211b8
 8118764:	081211c4 	.word	0x081211c4
 8118768:	10012160 	.word	0x10012160
 811876c:	10012164 	.word	0x10012164
 8118770:	1001216c 	.word	0x1001216c
 8118774:	1001216a 	.word	0x1001216a
 8118778:	10012134 	.word	0x10012134
 811877c:	081211e4 	.word	0x081211e4
 8118780:	0812120c 	.word	0x0812120c
 8118784:	08121238 	.word	0x08121238
    }

    if (pcb->remote_port == tcphdr->src &&
 8118788:	69fb      	ldr	r3, [r7, #28]
 811878a:	8b1a      	ldrh	r2, [r3, #24]
 811878c:	4b72      	ldr	r3, [pc, #456]	@ (8118958 <tcp_input+0x49c>)
 811878e:	681b      	ldr	r3, [r3, #0]
 8118790:	881b      	ldrh	r3, [r3, #0]
 8118792:	b29b      	uxth	r3, r3
 8118794:	429a      	cmp	r2, r3
 8118796:	d13a      	bne.n	811880e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8118798:	69fb      	ldr	r3, [r7, #28]
 811879a:	8ada      	ldrh	r2, [r3, #22]
 811879c:	4b6e      	ldr	r3, [pc, #440]	@ (8118958 <tcp_input+0x49c>)
 811879e:	681b      	ldr	r3, [r3, #0]
 81187a0:	885b      	ldrh	r3, [r3, #2]
 81187a2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 81187a4:	429a      	cmp	r2, r3
 81187a6:	d132      	bne.n	811880e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 81187a8:	69fb      	ldr	r3, [r7, #28]
 81187aa:	685a      	ldr	r2, [r3, #4]
 81187ac:	4b6b      	ldr	r3, [pc, #428]	@ (811895c <tcp_input+0x4a0>)
 81187ae:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 81187b0:	429a      	cmp	r2, r3
 81187b2:	d12c      	bne.n	811880e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 81187b4:	69fb      	ldr	r3, [r7, #28]
 81187b6:	681a      	ldr	r2, [r3, #0]
 81187b8:	4b68      	ldr	r3, [pc, #416]	@ (811895c <tcp_input+0x4a0>)
 81187ba:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 81187bc:	429a      	cmp	r2, r3
 81187be:	d126      	bne.n	811880e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 81187c0:	69fb      	ldr	r3, [r7, #28]
 81187c2:	68db      	ldr	r3, [r3, #12]
 81187c4:	69fa      	ldr	r2, [r7, #28]
 81187c6:	429a      	cmp	r2, r3
 81187c8:	d106      	bne.n	81187d8 <tcp_input+0x31c>
 81187ca:	4b65      	ldr	r3, [pc, #404]	@ (8118960 <tcp_input+0x4a4>)
 81187cc:	f240 120d 	movw	r2, #269	@ 0x10d
 81187d0:	4964      	ldr	r1, [pc, #400]	@ (8118964 <tcp_input+0x4a8>)
 81187d2:	4865      	ldr	r0, [pc, #404]	@ (8118968 <tcp_input+0x4ac>)
 81187d4:	f005 fb02 	bl	811dddc <iprintf>
      if (prev != NULL) {
 81187d8:	69bb      	ldr	r3, [r7, #24]
 81187da:	2b00      	cmp	r3, #0
 81187dc:	d00a      	beq.n	81187f4 <tcp_input+0x338>
        prev->next = pcb->next;
 81187de:	69fb      	ldr	r3, [r7, #28]
 81187e0:	68da      	ldr	r2, [r3, #12]
 81187e2:	69bb      	ldr	r3, [r7, #24]
 81187e4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 81187e6:	4b61      	ldr	r3, [pc, #388]	@ (811896c <tcp_input+0x4b0>)
 81187e8:	681a      	ldr	r2, [r3, #0]
 81187ea:	69fb      	ldr	r3, [r7, #28]
 81187ec:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 81187ee:	4a5f      	ldr	r2, [pc, #380]	@ (811896c <tcp_input+0x4b0>)
 81187f0:	69fb      	ldr	r3, [r7, #28]
 81187f2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 81187f4:	69fb      	ldr	r3, [r7, #28]
 81187f6:	68db      	ldr	r3, [r3, #12]
 81187f8:	69fa      	ldr	r2, [r7, #28]
 81187fa:	429a      	cmp	r2, r3
 81187fc:	d111      	bne.n	8118822 <tcp_input+0x366>
 81187fe:	4b58      	ldr	r3, [pc, #352]	@ (8118960 <tcp_input+0x4a4>)
 8118800:	f240 1215 	movw	r2, #277	@ 0x115
 8118804:	495a      	ldr	r1, [pc, #360]	@ (8118970 <tcp_input+0x4b4>)
 8118806:	4858      	ldr	r0, [pc, #352]	@ (8118968 <tcp_input+0x4ac>)
 8118808:	f005 fae8 	bl	811dddc <iprintf>
      break;
 811880c:	e009      	b.n	8118822 <tcp_input+0x366>
    }
    prev = pcb;
 811880e:	69fb      	ldr	r3, [r7, #28]
 8118810:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8118812:	69fb      	ldr	r3, [r7, #28]
 8118814:	68db      	ldr	r3, [r3, #12]
 8118816:	61fb      	str	r3, [r7, #28]
 8118818:	69fb      	ldr	r3, [r7, #28]
 811881a:	2b00      	cmp	r3, #0
 811881c:	f47f af5e 	bne.w	81186dc <tcp_input+0x220>
 8118820:	e000      	b.n	8118824 <tcp_input+0x368>
      break;
 8118822:	bf00      	nop
  }

  if (pcb == NULL) {
 8118824:	69fb      	ldr	r3, [r7, #28]
 8118826:	2b00      	cmp	r3, #0
 8118828:	f040 80aa 	bne.w	8118980 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811882c:	4b51      	ldr	r3, [pc, #324]	@ (8118974 <tcp_input+0x4b8>)
 811882e:	681b      	ldr	r3, [r3, #0]
 8118830:	61fb      	str	r3, [r7, #28]
 8118832:	e03f      	b.n	81188b4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8118834:	69fb      	ldr	r3, [r7, #28]
 8118836:	7d1b      	ldrb	r3, [r3, #20]
 8118838:	2b0a      	cmp	r3, #10
 811883a:	d006      	beq.n	811884a <tcp_input+0x38e>
 811883c:	4b48      	ldr	r3, [pc, #288]	@ (8118960 <tcp_input+0x4a4>)
 811883e:	f240 121f 	movw	r2, #287	@ 0x11f
 8118842:	494d      	ldr	r1, [pc, #308]	@ (8118978 <tcp_input+0x4bc>)
 8118844:	4848      	ldr	r0, [pc, #288]	@ (8118968 <tcp_input+0x4ac>)
 8118846:	f005 fac9 	bl	811dddc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811884a:	69fb      	ldr	r3, [r7, #28]
 811884c:	7a1b      	ldrb	r3, [r3, #8]
 811884e:	2b00      	cmp	r3, #0
 8118850:	d009      	beq.n	8118866 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8118852:	69fb      	ldr	r3, [r7, #28]
 8118854:	7a1a      	ldrb	r2, [r3, #8]
 8118856:	4b41      	ldr	r3, [pc, #260]	@ (811895c <tcp_input+0x4a0>)
 8118858:	685b      	ldr	r3, [r3, #4]
 811885a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811885e:	3301      	adds	r3, #1
 8118860:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8118862:	429a      	cmp	r2, r3
 8118864:	d122      	bne.n	81188ac <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8118866:	69fb      	ldr	r3, [r7, #28]
 8118868:	8b1a      	ldrh	r2, [r3, #24]
 811886a:	4b3b      	ldr	r3, [pc, #236]	@ (8118958 <tcp_input+0x49c>)
 811886c:	681b      	ldr	r3, [r3, #0]
 811886e:	881b      	ldrh	r3, [r3, #0]
 8118870:	b29b      	uxth	r3, r3
 8118872:	429a      	cmp	r2, r3
 8118874:	d11b      	bne.n	81188ae <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8118876:	69fb      	ldr	r3, [r7, #28]
 8118878:	8ada      	ldrh	r2, [r3, #22]
 811887a:	4b37      	ldr	r3, [pc, #220]	@ (8118958 <tcp_input+0x49c>)
 811887c:	681b      	ldr	r3, [r3, #0]
 811887e:	885b      	ldrh	r3, [r3, #2]
 8118880:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8118882:	429a      	cmp	r2, r3
 8118884:	d113      	bne.n	81188ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8118886:	69fb      	ldr	r3, [r7, #28]
 8118888:	685a      	ldr	r2, [r3, #4]
 811888a:	4b34      	ldr	r3, [pc, #208]	@ (811895c <tcp_input+0x4a0>)
 811888c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 811888e:	429a      	cmp	r2, r3
 8118890:	d10d      	bne.n	81188ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8118892:	69fb      	ldr	r3, [r7, #28]
 8118894:	681a      	ldr	r2, [r3, #0]
 8118896:	4b31      	ldr	r3, [pc, #196]	@ (811895c <tcp_input+0x4a0>)
 8118898:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811889a:	429a      	cmp	r2, r3
 811889c:	d107      	bne.n	81188ae <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 811889e:	69f8      	ldr	r0, [r7, #28]
 81188a0:	f000 fb56 	bl	8118f50 <tcp_timewait_input>
        }
        pbuf_free(p);
 81188a4:	6878      	ldr	r0, [r7, #4]
 81188a6:	f7fd fd03 	bl	81162b0 <pbuf_free>
        return;
 81188aa:	e1fd      	b.n	8118ca8 <tcp_input+0x7ec>
        continue;
 81188ac:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 81188ae:	69fb      	ldr	r3, [r7, #28]
 81188b0:	68db      	ldr	r3, [r3, #12]
 81188b2:	61fb      	str	r3, [r7, #28]
 81188b4:	69fb      	ldr	r3, [r7, #28]
 81188b6:	2b00      	cmp	r3, #0
 81188b8:	d1bc      	bne.n	8118834 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 81188ba:	2300      	movs	r3, #0
 81188bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 81188be:	4b2f      	ldr	r3, [pc, #188]	@ (811897c <tcp_input+0x4c0>)
 81188c0:	681b      	ldr	r3, [r3, #0]
 81188c2:	617b      	str	r3, [r7, #20]
 81188c4:	e02a      	b.n	811891c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 81188c6:	697b      	ldr	r3, [r7, #20]
 81188c8:	7a1b      	ldrb	r3, [r3, #8]
 81188ca:	2b00      	cmp	r3, #0
 81188cc:	d00c      	beq.n	81188e8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 81188ce:	697b      	ldr	r3, [r7, #20]
 81188d0:	7a1a      	ldrb	r2, [r3, #8]
 81188d2:	4b22      	ldr	r3, [pc, #136]	@ (811895c <tcp_input+0x4a0>)
 81188d4:	685b      	ldr	r3, [r3, #4]
 81188d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81188da:	3301      	adds	r3, #1
 81188dc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 81188de:	429a      	cmp	r2, r3
 81188e0:	d002      	beq.n	81188e8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 81188e2:	697b      	ldr	r3, [r7, #20]
 81188e4:	61bb      	str	r3, [r7, #24]
        continue;
 81188e6:	e016      	b.n	8118916 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 81188e8:	697b      	ldr	r3, [r7, #20]
 81188ea:	8ada      	ldrh	r2, [r3, #22]
 81188ec:	4b1a      	ldr	r3, [pc, #104]	@ (8118958 <tcp_input+0x49c>)
 81188ee:	681b      	ldr	r3, [r3, #0]
 81188f0:	885b      	ldrh	r3, [r3, #2]
 81188f2:	b29b      	uxth	r3, r3
 81188f4:	429a      	cmp	r2, r3
 81188f6:	d10c      	bne.n	8118912 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 81188f8:	697b      	ldr	r3, [r7, #20]
 81188fa:	681a      	ldr	r2, [r3, #0]
 81188fc:	4b17      	ldr	r3, [pc, #92]	@ (811895c <tcp_input+0x4a0>)
 81188fe:	695b      	ldr	r3, [r3, #20]
 8118900:	429a      	cmp	r2, r3
 8118902:	d00f      	beq.n	8118924 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8118904:	697b      	ldr	r3, [r7, #20]
 8118906:	2b00      	cmp	r3, #0
 8118908:	d00d      	beq.n	8118926 <tcp_input+0x46a>
 811890a:	697b      	ldr	r3, [r7, #20]
 811890c:	681b      	ldr	r3, [r3, #0]
 811890e:	2b00      	cmp	r3, #0
 8118910:	d009      	beq.n	8118926 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8118912:	697b      	ldr	r3, [r7, #20]
 8118914:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8118916:	697b      	ldr	r3, [r7, #20]
 8118918:	68db      	ldr	r3, [r3, #12]
 811891a:	617b      	str	r3, [r7, #20]
 811891c:	697b      	ldr	r3, [r7, #20]
 811891e:	2b00      	cmp	r3, #0
 8118920:	d1d1      	bne.n	81188c6 <tcp_input+0x40a>
 8118922:	e000      	b.n	8118926 <tcp_input+0x46a>
            break;
 8118924:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8118926:	697b      	ldr	r3, [r7, #20]
 8118928:	2b00      	cmp	r3, #0
 811892a:	d029      	beq.n	8118980 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 811892c:	69bb      	ldr	r3, [r7, #24]
 811892e:	2b00      	cmp	r3, #0
 8118930:	d00a      	beq.n	8118948 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8118932:	697b      	ldr	r3, [r7, #20]
 8118934:	68da      	ldr	r2, [r3, #12]
 8118936:	69bb      	ldr	r3, [r7, #24]
 8118938:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 811893a:	4b10      	ldr	r3, [pc, #64]	@ (811897c <tcp_input+0x4c0>)
 811893c:	681a      	ldr	r2, [r3, #0]
 811893e:	697b      	ldr	r3, [r7, #20]
 8118940:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8118942:	4a0e      	ldr	r2, [pc, #56]	@ (811897c <tcp_input+0x4c0>)
 8118944:	697b      	ldr	r3, [r7, #20]
 8118946:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8118948:	6978      	ldr	r0, [r7, #20]
 811894a:	f000 fa03 	bl	8118d54 <tcp_listen_input>
      }
      pbuf_free(p);
 811894e:	6878      	ldr	r0, [r7, #4]
 8118950:	f7fd fcae 	bl	81162b0 <pbuf_free>
      return;
 8118954:	e1a8      	b.n	8118ca8 <tcp_input+0x7ec>
 8118956:	bf00      	nop
 8118958:	10012150 	.word	0x10012150
 811895c:	1000b29c 	.word	0x1000b29c
 8118960:	081210f4 	.word	0x081210f4
 8118964:	08121260 	.word	0x08121260
 8118968:	08121180 	.word	0x08121180
 811896c:	10012134 	.word	0x10012134
 8118970:	0812128c 	.word	0x0812128c
 8118974:	10012138 	.word	0x10012138
 8118978:	081212b8 	.word	0x081212b8
 811897c:	10012130 	.word	0x10012130
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8118980:	69fb      	ldr	r3, [r7, #28]
 8118982:	2b00      	cmp	r3, #0
 8118984:	f000 8158 	beq.w	8118c38 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8118988:	4b95      	ldr	r3, [pc, #596]	@ (8118be0 <tcp_input+0x724>)
 811898a:	2200      	movs	r2, #0
 811898c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 811898e:	687b      	ldr	r3, [r7, #4]
 8118990:	891a      	ldrh	r2, [r3, #8]
 8118992:	4b93      	ldr	r3, [pc, #588]	@ (8118be0 <tcp_input+0x724>)
 8118994:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8118996:	4a92      	ldr	r2, [pc, #584]	@ (8118be0 <tcp_input+0x724>)
 8118998:	687b      	ldr	r3, [r7, #4]
 811899a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 811899c:	4b91      	ldr	r3, [pc, #580]	@ (8118be4 <tcp_input+0x728>)
 811899e:	681b      	ldr	r3, [r3, #0]
 81189a0:	4a8f      	ldr	r2, [pc, #572]	@ (8118be0 <tcp_input+0x724>)
 81189a2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 81189a4:	4b90      	ldr	r3, [pc, #576]	@ (8118be8 <tcp_input+0x72c>)
 81189a6:	2200      	movs	r2, #0
 81189a8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 81189aa:	4b90      	ldr	r3, [pc, #576]	@ (8118bec <tcp_input+0x730>)
 81189ac:	2200      	movs	r2, #0
 81189ae:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 81189b0:	4b8f      	ldr	r3, [pc, #572]	@ (8118bf0 <tcp_input+0x734>)
 81189b2:	2200      	movs	r2, #0
 81189b4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 81189b6:	4b8f      	ldr	r3, [pc, #572]	@ (8118bf4 <tcp_input+0x738>)
 81189b8:	781b      	ldrb	r3, [r3, #0]
 81189ba:	f003 0308 	and.w	r3, r3, #8
 81189be:	2b00      	cmp	r3, #0
 81189c0:	d006      	beq.n	81189d0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 81189c2:	687b      	ldr	r3, [r7, #4]
 81189c4:	7b5b      	ldrb	r3, [r3, #13]
 81189c6:	f043 0301 	orr.w	r3, r3, #1
 81189ca:	b2da      	uxtb	r2, r3
 81189cc:	687b      	ldr	r3, [r7, #4]
 81189ce:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 81189d0:	69fb      	ldr	r3, [r7, #28]
 81189d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81189d4:	2b00      	cmp	r3, #0
 81189d6:	d017      	beq.n	8118a08 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 81189d8:	69f8      	ldr	r0, [r7, #28]
 81189da:	f7ff f8bf 	bl	8117b5c <tcp_process_refused_data>
 81189de:	4603      	mov	r3, r0
 81189e0:	f113 0f0d 	cmn.w	r3, #13
 81189e4:	d007      	beq.n	81189f6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 81189e6:	69fb      	ldr	r3, [r7, #28]
 81189e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 81189ea:	2b00      	cmp	r3, #0
 81189ec:	d00c      	beq.n	8118a08 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 81189ee:	4b82      	ldr	r3, [pc, #520]	@ (8118bf8 <tcp_input+0x73c>)
 81189f0:	881b      	ldrh	r3, [r3, #0]
 81189f2:	2b00      	cmp	r3, #0
 81189f4:	d008      	beq.n	8118a08 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 81189f6:	69fb      	ldr	r3, [r7, #28]
 81189f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81189fa:	2b00      	cmp	r3, #0
 81189fc:	f040 80e4 	bne.w	8118bc8 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8118a00:	69f8      	ldr	r0, [r7, #28]
 8118a02:	f003 f9a9 	bl	811bd58 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8118a06:	e0df      	b.n	8118bc8 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8118a08:	4a7c      	ldr	r2, [pc, #496]	@ (8118bfc <tcp_input+0x740>)
 8118a0a:	69fb      	ldr	r3, [r7, #28]
 8118a0c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8118a0e:	69f8      	ldr	r0, [r7, #28]
 8118a10:	f000 fb18 	bl	8119044 <tcp_process>
 8118a14:	4603      	mov	r3, r0
 8118a16:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8118a18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8118a1c:	f113 0f0d 	cmn.w	r3, #13
 8118a20:	f000 80d4 	beq.w	8118bcc <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8118a24:	4b71      	ldr	r3, [pc, #452]	@ (8118bec <tcp_input+0x730>)
 8118a26:	781b      	ldrb	r3, [r3, #0]
 8118a28:	f003 0308 	and.w	r3, r3, #8
 8118a2c:	2b00      	cmp	r3, #0
 8118a2e:	d015      	beq.n	8118a5c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8118a30:	69fb      	ldr	r3, [r7, #28]
 8118a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8118a36:	2b00      	cmp	r3, #0
 8118a38:	d008      	beq.n	8118a4c <tcp_input+0x590>
 8118a3a:	69fb      	ldr	r3, [r7, #28]
 8118a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8118a40:	69fa      	ldr	r2, [r7, #28]
 8118a42:	6912      	ldr	r2, [r2, #16]
 8118a44:	f06f 010d 	mvn.w	r1, #13
 8118a48:	4610      	mov	r0, r2
 8118a4a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8118a4c:	69f9      	ldr	r1, [r7, #28]
 8118a4e:	486c      	ldr	r0, [pc, #432]	@ (8118c00 <tcp_input+0x744>)
 8118a50:	f7ff fbbc 	bl	81181cc <tcp_pcb_remove>
        tcp_free(pcb);
 8118a54:	69f8      	ldr	r0, [r7, #28]
 8118a56:	f7fd ffd9 	bl	8116a0c <tcp_free>
 8118a5a:	e0da      	b.n	8118c12 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8118a5c:	2300      	movs	r3, #0
 8118a5e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8118a60:	4b63      	ldr	r3, [pc, #396]	@ (8118bf0 <tcp_input+0x734>)
 8118a62:	881b      	ldrh	r3, [r3, #0]
 8118a64:	2b00      	cmp	r3, #0
 8118a66:	d01d      	beq.n	8118aa4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8118a68:	4b61      	ldr	r3, [pc, #388]	@ (8118bf0 <tcp_input+0x734>)
 8118a6a:	881b      	ldrh	r3, [r3, #0]
 8118a6c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8118a6e:	69fb      	ldr	r3, [r7, #28]
 8118a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8118a74:	2b00      	cmp	r3, #0
 8118a76:	d00a      	beq.n	8118a8e <tcp_input+0x5d2>
 8118a78:	69fb      	ldr	r3, [r7, #28]
 8118a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8118a7e:	69fa      	ldr	r2, [r7, #28]
 8118a80:	6910      	ldr	r0, [r2, #16]
 8118a82:	89fa      	ldrh	r2, [r7, #14]
 8118a84:	69f9      	ldr	r1, [r7, #28]
 8118a86:	4798      	blx	r3
 8118a88:	4603      	mov	r3, r0
 8118a8a:	74fb      	strb	r3, [r7, #19]
 8118a8c:	e001      	b.n	8118a92 <tcp_input+0x5d6>
 8118a8e:	2300      	movs	r3, #0
 8118a90:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8118a92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8118a96:	f113 0f0d 	cmn.w	r3, #13
 8118a9a:	f000 8099 	beq.w	8118bd0 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8118a9e:	4b54      	ldr	r3, [pc, #336]	@ (8118bf0 <tcp_input+0x734>)
 8118aa0:	2200      	movs	r2, #0
 8118aa2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8118aa4:	69f8      	ldr	r0, [r7, #28]
 8118aa6:	f000 f915 	bl	8118cd4 <tcp_input_delayed_close>
 8118aaa:	4603      	mov	r3, r0
 8118aac:	2b00      	cmp	r3, #0
 8118aae:	f040 8091 	bne.w	8118bd4 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8118ab2:	4b4d      	ldr	r3, [pc, #308]	@ (8118be8 <tcp_input+0x72c>)
 8118ab4:	681b      	ldr	r3, [r3, #0]
 8118ab6:	2b00      	cmp	r3, #0
 8118ab8:	d041      	beq.n	8118b3e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8118aba:	69fb      	ldr	r3, [r7, #28]
 8118abc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8118abe:	2b00      	cmp	r3, #0
 8118ac0:	d006      	beq.n	8118ad0 <tcp_input+0x614>
 8118ac2:	4b50      	ldr	r3, [pc, #320]	@ (8118c04 <tcp_input+0x748>)
 8118ac4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8118ac8:	494f      	ldr	r1, [pc, #316]	@ (8118c08 <tcp_input+0x74c>)
 8118aca:	4850      	ldr	r0, [pc, #320]	@ (8118c0c <tcp_input+0x750>)
 8118acc:	f005 f986 	bl	811dddc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8118ad0:	69fb      	ldr	r3, [r7, #28]
 8118ad2:	8b5b      	ldrh	r3, [r3, #26]
 8118ad4:	f003 0310 	and.w	r3, r3, #16
 8118ad8:	2b00      	cmp	r3, #0
 8118ada:	d008      	beq.n	8118aee <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8118adc:	4b42      	ldr	r3, [pc, #264]	@ (8118be8 <tcp_input+0x72c>)
 8118ade:	681b      	ldr	r3, [r3, #0]
 8118ae0:	4618      	mov	r0, r3
 8118ae2:	f7fd fbe5 	bl	81162b0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8118ae6:	69f8      	ldr	r0, [r7, #28]
 8118ae8:	f7fe fa78 	bl	8116fdc <tcp_abort>
            goto aborted;
 8118aec:	e091      	b.n	8118c12 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8118aee:	69fb      	ldr	r3, [r7, #28]
 8118af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8118af4:	2b00      	cmp	r3, #0
 8118af6:	d00c      	beq.n	8118b12 <tcp_input+0x656>
 8118af8:	69fb      	ldr	r3, [r7, #28]
 8118afa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8118afe:	69fb      	ldr	r3, [r7, #28]
 8118b00:	6918      	ldr	r0, [r3, #16]
 8118b02:	4b39      	ldr	r3, [pc, #228]	@ (8118be8 <tcp_input+0x72c>)
 8118b04:	681a      	ldr	r2, [r3, #0]
 8118b06:	2300      	movs	r3, #0
 8118b08:	69f9      	ldr	r1, [r7, #28]
 8118b0a:	47a0      	blx	r4
 8118b0c:	4603      	mov	r3, r0
 8118b0e:	74fb      	strb	r3, [r7, #19]
 8118b10:	e008      	b.n	8118b24 <tcp_input+0x668>
 8118b12:	4b35      	ldr	r3, [pc, #212]	@ (8118be8 <tcp_input+0x72c>)
 8118b14:	681a      	ldr	r2, [r3, #0]
 8118b16:	2300      	movs	r3, #0
 8118b18:	69f9      	ldr	r1, [r7, #28]
 8118b1a:	2000      	movs	r0, #0
 8118b1c:	f7ff f8f6 	bl	8117d0c <tcp_recv_null>
 8118b20:	4603      	mov	r3, r0
 8118b22:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8118b24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8118b28:	f113 0f0d 	cmn.w	r3, #13
 8118b2c:	d054      	beq.n	8118bd8 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8118b2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8118b32:	2b00      	cmp	r3, #0
 8118b34:	d003      	beq.n	8118b3e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8118b36:	4b2c      	ldr	r3, [pc, #176]	@ (8118be8 <tcp_input+0x72c>)
 8118b38:	681a      	ldr	r2, [r3, #0]
 8118b3a:	69fb      	ldr	r3, [r7, #28]
 8118b3c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8118b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8118bec <tcp_input+0x730>)
 8118b40:	781b      	ldrb	r3, [r3, #0]
 8118b42:	f003 0320 	and.w	r3, r3, #32
 8118b46:	2b00      	cmp	r3, #0
 8118b48:	d031      	beq.n	8118bae <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8118b4a:	69fb      	ldr	r3, [r7, #28]
 8118b4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8118b4e:	2b00      	cmp	r3, #0
 8118b50:	d009      	beq.n	8118b66 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8118b52:	69fb      	ldr	r3, [r7, #28]
 8118b54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8118b56:	7b5a      	ldrb	r2, [r3, #13]
 8118b58:	69fb      	ldr	r3, [r7, #28]
 8118b5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8118b5c:	f042 0220 	orr.w	r2, r2, #32
 8118b60:	b2d2      	uxtb	r2, r2
 8118b62:	735a      	strb	r2, [r3, #13]
 8118b64:	e023      	b.n	8118bae <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8118b66:	69fb      	ldr	r3, [r7, #28]
 8118b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8118b6a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8118b6e:	4293      	cmp	r3, r2
 8118b70:	d005      	beq.n	8118b7e <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8118b72:	69fb      	ldr	r3, [r7, #28]
 8118b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8118b76:	3301      	adds	r3, #1
 8118b78:	b29a      	uxth	r2, r3
 8118b7a:	69fb      	ldr	r3, [r7, #28]
 8118b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8118b7e:	69fb      	ldr	r3, [r7, #28]
 8118b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8118b84:	2b00      	cmp	r3, #0
 8118b86:	d00b      	beq.n	8118ba0 <tcp_input+0x6e4>
 8118b88:	69fb      	ldr	r3, [r7, #28]
 8118b8a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8118b8e:	69fb      	ldr	r3, [r7, #28]
 8118b90:	6918      	ldr	r0, [r3, #16]
 8118b92:	2300      	movs	r3, #0
 8118b94:	2200      	movs	r2, #0
 8118b96:	69f9      	ldr	r1, [r7, #28]
 8118b98:	47a0      	blx	r4
 8118b9a:	4603      	mov	r3, r0
 8118b9c:	74fb      	strb	r3, [r7, #19]
 8118b9e:	e001      	b.n	8118ba4 <tcp_input+0x6e8>
 8118ba0:	2300      	movs	r3, #0
 8118ba2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8118ba4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8118ba8:	f113 0f0d 	cmn.w	r3, #13
 8118bac:	d016      	beq.n	8118bdc <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8118bae:	4b13      	ldr	r3, [pc, #76]	@ (8118bfc <tcp_input+0x740>)
 8118bb0:	2200      	movs	r2, #0
 8118bb2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8118bb4:	69f8      	ldr	r0, [r7, #28]
 8118bb6:	f000 f88d 	bl	8118cd4 <tcp_input_delayed_close>
 8118bba:	4603      	mov	r3, r0
 8118bbc:	2b00      	cmp	r3, #0
 8118bbe:	d127      	bne.n	8118c10 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8118bc0:	69f8      	ldr	r0, [r7, #28]
 8118bc2:	f002 fac3 	bl	811b14c <tcp_output>
 8118bc6:	e024      	b.n	8118c12 <tcp_input+0x756>
        goto aborted;
 8118bc8:	bf00      	nop
 8118bca:	e022      	b.n	8118c12 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8118bcc:	bf00      	nop
 8118bce:	e020      	b.n	8118c12 <tcp_input+0x756>
              goto aborted;
 8118bd0:	bf00      	nop
 8118bd2:	e01e      	b.n	8118c12 <tcp_input+0x756>
          goto aborted;
 8118bd4:	bf00      	nop
 8118bd6:	e01c      	b.n	8118c12 <tcp_input+0x756>
            goto aborted;
 8118bd8:	bf00      	nop
 8118bda:	e01a      	b.n	8118c12 <tcp_input+0x756>
              goto aborted;
 8118bdc:	bf00      	nop
 8118bde:	e018      	b.n	8118c12 <tcp_input+0x756>
 8118be0:	10012140 	.word	0x10012140
 8118be4:	10012150 	.word	0x10012150
 8118be8:	10012170 	.word	0x10012170
 8118bec:	1001216d 	.word	0x1001216d
 8118bf0:	10012168 	.word	0x10012168
 8118bf4:	1001216c 	.word	0x1001216c
 8118bf8:	1001216a 	.word	0x1001216a
 8118bfc:	10012174 	.word	0x10012174
 8118c00:	10012134 	.word	0x10012134
 8118c04:	081210f4 	.word	0x081210f4
 8118c08:	081212e8 	.word	0x081212e8
 8118c0c:	08121180 	.word	0x08121180
          goto aborted;
 8118c10:	bf00      	nop
    tcp_input_pcb = NULL;
 8118c12:	4b27      	ldr	r3, [pc, #156]	@ (8118cb0 <tcp_input+0x7f4>)
 8118c14:	2200      	movs	r2, #0
 8118c16:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8118c18:	4b26      	ldr	r3, [pc, #152]	@ (8118cb4 <tcp_input+0x7f8>)
 8118c1a:	2200      	movs	r2, #0
 8118c1c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8118c1e:	4b26      	ldr	r3, [pc, #152]	@ (8118cb8 <tcp_input+0x7fc>)
 8118c20:	685b      	ldr	r3, [r3, #4]
 8118c22:	2b00      	cmp	r3, #0
 8118c24:	d03f      	beq.n	8118ca6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8118c26:	4b24      	ldr	r3, [pc, #144]	@ (8118cb8 <tcp_input+0x7fc>)
 8118c28:	685b      	ldr	r3, [r3, #4]
 8118c2a:	4618      	mov	r0, r3
 8118c2c:	f7fd fb40 	bl	81162b0 <pbuf_free>
      inseg.p = NULL;
 8118c30:	4b21      	ldr	r3, [pc, #132]	@ (8118cb8 <tcp_input+0x7fc>)
 8118c32:	2200      	movs	r2, #0
 8118c34:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8118c36:	e036      	b.n	8118ca6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8118c38:	4b20      	ldr	r3, [pc, #128]	@ (8118cbc <tcp_input+0x800>)
 8118c3a:	681b      	ldr	r3, [r3, #0]
 8118c3c:	899b      	ldrh	r3, [r3, #12]
 8118c3e:	b29b      	uxth	r3, r3
 8118c40:	4618      	mov	r0, r3
 8118c42:	f7f9 f92b 	bl	8111e9c <lwip_htons>
 8118c46:	4603      	mov	r3, r0
 8118c48:	b2db      	uxtb	r3, r3
 8118c4a:	f003 0304 	and.w	r3, r3, #4
 8118c4e:	2b00      	cmp	r3, #0
 8118c50:	d118      	bne.n	8118c84 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8118c52:	4b1b      	ldr	r3, [pc, #108]	@ (8118cc0 <tcp_input+0x804>)
 8118c54:	6819      	ldr	r1, [r3, #0]
 8118c56:	4b1b      	ldr	r3, [pc, #108]	@ (8118cc4 <tcp_input+0x808>)
 8118c58:	881b      	ldrh	r3, [r3, #0]
 8118c5a:	461a      	mov	r2, r3
 8118c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8118cc8 <tcp_input+0x80c>)
 8118c5e:	681b      	ldr	r3, [r3, #0]
 8118c60:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8118c62:	4b16      	ldr	r3, [pc, #88]	@ (8118cbc <tcp_input+0x800>)
 8118c64:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8118c66:	885b      	ldrh	r3, [r3, #2]
 8118c68:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8118c6a:	4a14      	ldr	r2, [pc, #80]	@ (8118cbc <tcp_input+0x800>)
 8118c6c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8118c6e:	8812      	ldrh	r2, [r2, #0]
 8118c70:	b292      	uxth	r2, r2
 8118c72:	9202      	str	r2, [sp, #8]
 8118c74:	9301      	str	r3, [sp, #4]
 8118c76:	4b15      	ldr	r3, [pc, #84]	@ (8118ccc <tcp_input+0x810>)
 8118c78:	9300      	str	r3, [sp, #0]
 8118c7a:	4b15      	ldr	r3, [pc, #84]	@ (8118cd0 <tcp_input+0x814>)
 8118c7c:	4602      	mov	r2, r0
 8118c7e:	2000      	movs	r0, #0
 8118c80:	f003 f818 	bl	811bcb4 <tcp_rst>
    pbuf_free(p);
 8118c84:	6878      	ldr	r0, [r7, #4]
 8118c86:	f7fd fb13 	bl	81162b0 <pbuf_free>
  return;
 8118c8a:	e00c      	b.n	8118ca6 <tcp_input+0x7ea>
    goto dropped;
 8118c8c:	bf00      	nop
 8118c8e:	e006      	b.n	8118c9e <tcp_input+0x7e2>
    goto dropped;
 8118c90:	bf00      	nop
 8118c92:	e004      	b.n	8118c9e <tcp_input+0x7e2>
    goto dropped;
 8118c94:	bf00      	nop
 8118c96:	e002      	b.n	8118c9e <tcp_input+0x7e2>
      goto dropped;
 8118c98:	bf00      	nop
 8118c9a:	e000      	b.n	8118c9e <tcp_input+0x7e2>
      goto dropped;
 8118c9c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8118c9e:	6878      	ldr	r0, [r7, #4]
 8118ca0:	f7fd fb06 	bl	81162b0 <pbuf_free>
 8118ca4:	e000      	b.n	8118ca8 <tcp_input+0x7ec>
  return;
 8118ca6:	bf00      	nop
}
 8118ca8:	3724      	adds	r7, #36	@ 0x24
 8118caa:	46bd      	mov	sp, r7
 8118cac:	bd90      	pop	{r4, r7, pc}
 8118cae:	bf00      	nop
 8118cb0:	10012174 	.word	0x10012174
 8118cb4:	10012170 	.word	0x10012170
 8118cb8:	10012140 	.word	0x10012140
 8118cbc:	10012150 	.word	0x10012150
 8118cc0:	10012164 	.word	0x10012164
 8118cc4:	1001216a 	.word	0x1001216a
 8118cc8:	10012160 	.word	0x10012160
 8118ccc:	1000b2ac 	.word	0x1000b2ac
 8118cd0:	1000b2b0 	.word	0x1000b2b0

08118cd4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8118cd4:	b580      	push	{r7, lr}
 8118cd6:	b082      	sub	sp, #8
 8118cd8:	af00      	add	r7, sp, #0
 8118cda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8118cdc:	687b      	ldr	r3, [r7, #4]
 8118cde:	2b00      	cmp	r3, #0
 8118ce0:	d106      	bne.n	8118cf0 <tcp_input_delayed_close+0x1c>
 8118ce2:	4b17      	ldr	r3, [pc, #92]	@ (8118d40 <tcp_input_delayed_close+0x6c>)
 8118ce4:	f240 225a 	movw	r2, #602	@ 0x25a
 8118ce8:	4916      	ldr	r1, [pc, #88]	@ (8118d44 <tcp_input_delayed_close+0x70>)
 8118cea:	4817      	ldr	r0, [pc, #92]	@ (8118d48 <tcp_input_delayed_close+0x74>)
 8118cec:	f005 f876 	bl	811dddc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8118cf0:	4b16      	ldr	r3, [pc, #88]	@ (8118d4c <tcp_input_delayed_close+0x78>)
 8118cf2:	781b      	ldrb	r3, [r3, #0]
 8118cf4:	f003 0310 	and.w	r3, r3, #16
 8118cf8:	2b00      	cmp	r3, #0
 8118cfa:	d01c      	beq.n	8118d36 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8118cfc:	687b      	ldr	r3, [r7, #4]
 8118cfe:	8b5b      	ldrh	r3, [r3, #26]
 8118d00:	f003 0310 	and.w	r3, r3, #16
 8118d04:	2b00      	cmp	r3, #0
 8118d06:	d10d      	bne.n	8118d24 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8118d08:	687b      	ldr	r3, [r7, #4]
 8118d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8118d0e:	2b00      	cmp	r3, #0
 8118d10:	d008      	beq.n	8118d24 <tcp_input_delayed_close+0x50>
 8118d12:	687b      	ldr	r3, [r7, #4]
 8118d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8118d18:	687a      	ldr	r2, [r7, #4]
 8118d1a:	6912      	ldr	r2, [r2, #16]
 8118d1c:	f06f 010e 	mvn.w	r1, #14
 8118d20:	4610      	mov	r0, r2
 8118d22:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8118d24:	6879      	ldr	r1, [r7, #4]
 8118d26:	480a      	ldr	r0, [pc, #40]	@ (8118d50 <tcp_input_delayed_close+0x7c>)
 8118d28:	f7ff fa50 	bl	81181cc <tcp_pcb_remove>
    tcp_free(pcb);
 8118d2c:	6878      	ldr	r0, [r7, #4]
 8118d2e:	f7fd fe6d 	bl	8116a0c <tcp_free>
    return 1;
 8118d32:	2301      	movs	r3, #1
 8118d34:	e000      	b.n	8118d38 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8118d36:	2300      	movs	r3, #0
}
 8118d38:	4618      	mov	r0, r3
 8118d3a:	3708      	adds	r7, #8
 8118d3c:	46bd      	mov	sp, r7
 8118d3e:	bd80      	pop	{r7, pc}
 8118d40:	081210f4 	.word	0x081210f4
 8118d44:	08121304 	.word	0x08121304
 8118d48:	08121180 	.word	0x08121180
 8118d4c:	1001216d 	.word	0x1001216d
 8118d50:	10012134 	.word	0x10012134

08118d54 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8118d54:	b590      	push	{r4, r7, lr}
 8118d56:	b08b      	sub	sp, #44	@ 0x2c
 8118d58:	af04      	add	r7, sp, #16
 8118d5a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8118d5c:	4b6f      	ldr	r3, [pc, #444]	@ (8118f1c <tcp_listen_input+0x1c8>)
 8118d5e:	781b      	ldrb	r3, [r3, #0]
 8118d60:	f003 0304 	and.w	r3, r3, #4
 8118d64:	2b00      	cmp	r3, #0
 8118d66:	f040 80d2 	bne.w	8118f0e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8118d6a:	687b      	ldr	r3, [r7, #4]
 8118d6c:	2b00      	cmp	r3, #0
 8118d6e:	d106      	bne.n	8118d7e <tcp_listen_input+0x2a>
 8118d70:	4b6b      	ldr	r3, [pc, #428]	@ (8118f20 <tcp_listen_input+0x1cc>)
 8118d72:	f240 2281 	movw	r2, #641	@ 0x281
 8118d76:	496b      	ldr	r1, [pc, #428]	@ (8118f24 <tcp_listen_input+0x1d0>)
 8118d78:	486b      	ldr	r0, [pc, #428]	@ (8118f28 <tcp_listen_input+0x1d4>)
 8118d7a:	f005 f82f 	bl	811dddc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8118d7e:	4b67      	ldr	r3, [pc, #412]	@ (8118f1c <tcp_listen_input+0x1c8>)
 8118d80:	781b      	ldrb	r3, [r3, #0]
 8118d82:	f003 0310 	and.w	r3, r3, #16
 8118d86:	2b00      	cmp	r3, #0
 8118d88:	d019      	beq.n	8118dbe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8118d8a:	4b68      	ldr	r3, [pc, #416]	@ (8118f2c <tcp_listen_input+0x1d8>)
 8118d8c:	6819      	ldr	r1, [r3, #0]
 8118d8e:	4b68      	ldr	r3, [pc, #416]	@ (8118f30 <tcp_listen_input+0x1dc>)
 8118d90:	881b      	ldrh	r3, [r3, #0]
 8118d92:	461a      	mov	r2, r3
 8118d94:	4b67      	ldr	r3, [pc, #412]	@ (8118f34 <tcp_listen_input+0x1e0>)
 8118d96:	681b      	ldr	r3, [r3, #0]
 8118d98:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8118d9a:	4b67      	ldr	r3, [pc, #412]	@ (8118f38 <tcp_listen_input+0x1e4>)
 8118d9c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8118d9e:	885b      	ldrh	r3, [r3, #2]
 8118da0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8118da2:	4a65      	ldr	r2, [pc, #404]	@ (8118f38 <tcp_listen_input+0x1e4>)
 8118da4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8118da6:	8812      	ldrh	r2, [r2, #0]
 8118da8:	b292      	uxth	r2, r2
 8118daa:	9202      	str	r2, [sp, #8]
 8118dac:	9301      	str	r3, [sp, #4]
 8118dae:	4b63      	ldr	r3, [pc, #396]	@ (8118f3c <tcp_listen_input+0x1e8>)
 8118db0:	9300      	str	r3, [sp, #0]
 8118db2:	4b63      	ldr	r3, [pc, #396]	@ (8118f40 <tcp_listen_input+0x1ec>)
 8118db4:	4602      	mov	r2, r0
 8118db6:	6878      	ldr	r0, [r7, #4]
 8118db8:	f002 ff7c 	bl	811bcb4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8118dbc:	e0a9      	b.n	8118f12 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8118dbe:	4b57      	ldr	r3, [pc, #348]	@ (8118f1c <tcp_listen_input+0x1c8>)
 8118dc0:	781b      	ldrb	r3, [r3, #0]
 8118dc2:	f003 0302 	and.w	r3, r3, #2
 8118dc6:	2b00      	cmp	r3, #0
 8118dc8:	f000 80a3 	beq.w	8118f12 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8118dcc:	687b      	ldr	r3, [r7, #4]
 8118dce:	7d5b      	ldrb	r3, [r3, #21]
 8118dd0:	4618      	mov	r0, r3
 8118dd2:	f7ff f8bf 	bl	8117f54 <tcp_alloc>
 8118dd6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8118dd8:	697b      	ldr	r3, [r7, #20]
 8118dda:	2b00      	cmp	r3, #0
 8118ddc:	d111      	bne.n	8118e02 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8118dde:	687b      	ldr	r3, [r7, #4]
 8118de0:	699b      	ldr	r3, [r3, #24]
 8118de2:	2b00      	cmp	r3, #0
 8118de4:	d00a      	beq.n	8118dfc <tcp_listen_input+0xa8>
 8118de6:	687b      	ldr	r3, [r7, #4]
 8118de8:	699b      	ldr	r3, [r3, #24]
 8118dea:	687a      	ldr	r2, [r7, #4]
 8118dec:	6910      	ldr	r0, [r2, #16]
 8118dee:	f04f 32ff 	mov.w	r2, #4294967295
 8118df2:	2100      	movs	r1, #0
 8118df4:	4798      	blx	r3
 8118df6:	4603      	mov	r3, r0
 8118df8:	73bb      	strb	r3, [r7, #14]
      return;
 8118dfa:	e08b      	b.n	8118f14 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8118dfc:	23f0      	movs	r3, #240	@ 0xf0
 8118dfe:	73bb      	strb	r3, [r7, #14]
      return;
 8118e00:	e088      	b.n	8118f14 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8118e02:	4b50      	ldr	r3, [pc, #320]	@ (8118f44 <tcp_listen_input+0x1f0>)
 8118e04:	695a      	ldr	r2, [r3, #20]
 8118e06:	697b      	ldr	r3, [r7, #20]
 8118e08:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8118e0a:	4b4e      	ldr	r3, [pc, #312]	@ (8118f44 <tcp_listen_input+0x1f0>)
 8118e0c:	691a      	ldr	r2, [r3, #16]
 8118e0e:	697b      	ldr	r3, [r7, #20]
 8118e10:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8118e12:	687b      	ldr	r3, [r7, #4]
 8118e14:	8ada      	ldrh	r2, [r3, #22]
 8118e16:	697b      	ldr	r3, [r7, #20]
 8118e18:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8118e1a:	4b47      	ldr	r3, [pc, #284]	@ (8118f38 <tcp_listen_input+0x1e4>)
 8118e1c:	681b      	ldr	r3, [r3, #0]
 8118e1e:	881b      	ldrh	r3, [r3, #0]
 8118e20:	b29a      	uxth	r2, r3
 8118e22:	697b      	ldr	r3, [r7, #20]
 8118e24:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8118e26:	697b      	ldr	r3, [r7, #20]
 8118e28:	2203      	movs	r2, #3
 8118e2a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8118e2c:	4b41      	ldr	r3, [pc, #260]	@ (8118f34 <tcp_listen_input+0x1e0>)
 8118e2e:	681b      	ldr	r3, [r3, #0]
 8118e30:	1c5a      	adds	r2, r3, #1
 8118e32:	697b      	ldr	r3, [r7, #20]
 8118e34:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8118e36:	697b      	ldr	r3, [r7, #20]
 8118e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8118e3a:	697b      	ldr	r3, [r7, #20]
 8118e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8118e3e:	6978      	ldr	r0, [r7, #20]
 8118e40:	f7ff fa58 	bl	81182f4 <tcp_next_iss>
 8118e44:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8118e46:	697b      	ldr	r3, [r7, #20]
 8118e48:	693a      	ldr	r2, [r7, #16]
 8118e4a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8118e4c:	697b      	ldr	r3, [r7, #20]
 8118e4e:	693a      	ldr	r2, [r7, #16]
 8118e50:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8118e52:	697b      	ldr	r3, [r7, #20]
 8118e54:	693a      	ldr	r2, [r7, #16]
 8118e56:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8118e58:	697b      	ldr	r3, [r7, #20]
 8118e5a:	693a      	ldr	r2, [r7, #16]
 8118e5c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8118e5e:	4b35      	ldr	r3, [pc, #212]	@ (8118f34 <tcp_listen_input+0x1e0>)
 8118e60:	681b      	ldr	r3, [r3, #0]
 8118e62:	1e5a      	subs	r2, r3, #1
 8118e64:	697b      	ldr	r3, [r7, #20]
 8118e66:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8118e68:	687b      	ldr	r3, [r7, #4]
 8118e6a:	691a      	ldr	r2, [r3, #16]
 8118e6c:	697b      	ldr	r3, [r7, #20]
 8118e6e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8118e70:	697b      	ldr	r3, [r7, #20]
 8118e72:	687a      	ldr	r2, [r7, #4]
 8118e74:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8118e76:	687b      	ldr	r3, [r7, #4]
 8118e78:	7a5b      	ldrb	r3, [r3, #9]
 8118e7a:	f003 030c 	and.w	r3, r3, #12
 8118e7e:	b2da      	uxtb	r2, r3
 8118e80:	697b      	ldr	r3, [r7, #20]
 8118e82:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8118e84:	687b      	ldr	r3, [r7, #4]
 8118e86:	7a1a      	ldrb	r2, [r3, #8]
 8118e88:	697b      	ldr	r3, [r7, #20]
 8118e8a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8118e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8118f48 <tcp_listen_input+0x1f4>)
 8118e8e:	681a      	ldr	r2, [r3, #0]
 8118e90:	697b      	ldr	r3, [r7, #20]
 8118e92:	60da      	str	r2, [r3, #12]
 8118e94:	4a2c      	ldr	r2, [pc, #176]	@ (8118f48 <tcp_listen_input+0x1f4>)
 8118e96:	697b      	ldr	r3, [r7, #20]
 8118e98:	6013      	str	r3, [r2, #0]
 8118e9a:	f003 fa2b 	bl	811c2f4 <tcp_timer_needed>
 8118e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8118f4c <tcp_listen_input+0x1f8>)
 8118ea0:	2201      	movs	r2, #1
 8118ea2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8118ea4:	6978      	ldr	r0, [r7, #20]
 8118ea6:	f001 fd8b 	bl	811a9c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8118eaa:	4b23      	ldr	r3, [pc, #140]	@ (8118f38 <tcp_listen_input+0x1e4>)
 8118eac:	681b      	ldr	r3, [r3, #0]
 8118eae:	89db      	ldrh	r3, [r3, #14]
 8118eb0:	b29a      	uxth	r2, r3
 8118eb2:	697b      	ldr	r3, [r7, #20]
 8118eb4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8118eb8:	697b      	ldr	r3, [r7, #20]
 8118eba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8118ebe:	697b      	ldr	r3, [r7, #20]
 8118ec0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8118ec4:	697b      	ldr	r3, [r7, #20]
 8118ec6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8118ec8:	697b      	ldr	r3, [r7, #20]
 8118eca:	3304      	adds	r3, #4
 8118ecc:	4618      	mov	r0, r3
 8118ece:	f7fa fb87 	bl	81135e0 <ip4_route>
 8118ed2:	4601      	mov	r1, r0
 8118ed4:	697b      	ldr	r3, [r7, #20]
 8118ed6:	3304      	adds	r3, #4
 8118ed8:	461a      	mov	r2, r3
 8118eda:	4620      	mov	r0, r4
 8118edc:	f7ff fa30 	bl	8118340 <tcp_eff_send_mss_netif>
 8118ee0:	4603      	mov	r3, r0
 8118ee2:	461a      	mov	r2, r3
 8118ee4:	697b      	ldr	r3, [r7, #20]
 8118ee6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8118ee8:	2112      	movs	r1, #18
 8118eea:	6978      	ldr	r0, [r7, #20]
 8118eec:	f002 f840 	bl	811af70 <tcp_enqueue_flags>
 8118ef0:	4603      	mov	r3, r0
 8118ef2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8118ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8118ef8:	2b00      	cmp	r3, #0
 8118efa:	d004      	beq.n	8118f06 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8118efc:	2100      	movs	r1, #0
 8118efe:	6978      	ldr	r0, [r7, #20]
 8118f00:	f7fd ffae 	bl	8116e60 <tcp_abandon>
      return;
 8118f04:	e006      	b.n	8118f14 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8118f06:	6978      	ldr	r0, [r7, #20]
 8118f08:	f002 f920 	bl	811b14c <tcp_output>
  return;
 8118f0c:	e001      	b.n	8118f12 <tcp_listen_input+0x1be>
    return;
 8118f0e:	bf00      	nop
 8118f10:	e000      	b.n	8118f14 <tcp_listen_input+0x1c0>
  return;
 8118f12:	bf00      	nop
}
 8118f14:	371c      	adds	r7, #28
 8118f16:	46bd      	mov	sp, r7
 8118f18:	bd90      	pop	{r4, r7, pc}
 8118f1a:	bf00      	nop
 8118f1c:	1001216c 	.word	0x1001216c
 8118f20:	081210f4 	.word	0x081210f4
 8118f24:	0812132c 	.word	0x0812132c
 8118f28:	08121180 	.word	0x08121180
 8118f2c:	10012164 	.word	0x10012164
 8118f30:	1001216a 	.word	0x1001216a
 8118f34:	10012160 	.word	0x10012160
 8118f38:	10012150 	.word	0x10012150
 8118f3c:	1000b2ac 	.word	0x1000b2ac
 8118f40:	1000b2b0 	.word	0x1000b2b0
 8118f44:	1000b29c 	.word	0x1000b29c
 8118f48:	10012134 	.word	0x10012134
 8118f4c:	1001213c 	.word	0x1001213c

08118f50 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8118f50:	b580      	push	{r7, lr}
 8118f52:	b086      	sub	sp, #24
 8118f54:	af04      	add	r7, sp, #16
 8118f56:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8118f58:	4b2f      	ldr	r3, [pc, #188]	@ (8119018 <tcp_timewait_input+0xc8>)
 8118f5a:	781b      	ldrb	r3, [r3, #0]
 8118f5c:	f003 0304 	and.w	r3, r3, #4
 8118f60:	2b00      	cmp	r3, #0
 8118f62:	d153      	bne.n	811900c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8118f64:	687b      	ldr	r3, [r7, #4]
 8118f66:	2b00      	cmp	r3, #0
 8118f68:	d106      	bne.n	8118f78 <tcp_timewait_input+0x28>
 8118f6a:	4b2c      	ldr	r3, [pc, #176]	@ (811901c <tcp_timewait_input+0xcc>)
 8118f6c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8118f70:	492b      	ldr	r1, [pc, #172]	@ (8119020 <tcp_timewait_input+0xd0>)
 8118f72:	482c      	ldr	r0, [pc, #176]	@ (8119024 <tcp_timewait_input+0xd4>)
 8118f74:	f004 ff32 	bl	811dddc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8118f78:	4b27      	ldr	r3, [pc, #156]	@ (8119018 <tcp_timewait_input+0xc8>)
 8118f7a:	781b      	ldrb	r3, [r3, #0]
 8118f7c:	f003 0302 	and.w	r3, r3, #2
 8118f80:	2b00      	cmp	r3, #0
 8118f82:	d02a      	beq.n	8118fda <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8118f84:	4b28      	ldr	r3, [pc, #160]	@ (8119028 <tcp_timewait_input+0xd8>)
 8118f86:	681a      	ldr	r2, [r3, #0]
 8118f88:	687b      	ldr	r3, [r7, #4]
 8118f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118f8c:	1ad3      	subs	r3, r2, r3
 8118f8e:	2b00      	cmp	r3, #0
 8118f90:	db2d      	blt.n	8118fee <tcp_timewait_input+0x9e>
 8118f92:	4b25      	ldr	r3, [pc, #148]	@ (8119028 <tcp_timewait_input+0xd8>)
 8118f94:	681a      	ldr	r2, [r3, #0]
 8118f96:	687b      	ldr	r3, [r7, #4]
 8118f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118f9a:	6879      	ldr	r1, [r7, #4]
 8118f9c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8118f9e:	440b      	add	r3, r1
 8118fa0:	1ad3      	subs	r3, r2, r3
 8118fa2:	2b00      	cmp	r3, #0
 8118fa4:	dc23      	bgt.n	8118fee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8118fa6:	4b21      	ldr	r3, [pc, #132]	@ (811902c <tcp_timewait_input+0xdc>)
 8118fa8:	6819      	ldr	r1, [r3, #0]
 8118faa:	4b21      	ldr	r3, [pc, #132]	@ (8119030 <tcp_timewait_input+0xe0>)
 8118fac:	881b      	ldrh	r3, [r3, #0]
 8118fae:	461a      	mov	r2, r3
 8118fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8119028 <tcp_timewait_input+0xd8>)
 8118fb2:	681b      	ldr	r3, [r3, #0]
 8118fb4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8118fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8119034 <tcp_timewait_input+0xe4>)
 8118fb8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8118fba:	885b      	ldrh	r3, [r3, #2]
 8118fbc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8118fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8119034 <tcp_timewait_input+0xe4>)
 8118fc0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8118fc2:	8812      	ldrh	r2, [r2, #0]
 8118fc4:	b292      	uxth	r2, r2
 8118fc6:	9202      	str	r2, [sp, #8]
 8118fc8:	9301      	str	r3, [sp, #4]
 8118fca:	4b1b      	ldr	r3, [pc, #108]	@ (8119038 <tcp_timewait_input+0xe8>)
 8118fcc:	9300      	str	r3, [sp, #0]
 8118fce:	4b1b      	ldr	r3, [pc, #108]	@ (811903c <tcp_timewait_input+0xec>)
 8118fd0:	4602      	mov	r2, r0
 8118fd2:	6878      	ldr	r0, [r7, #4]
 8118fd4:	f002 fe6e 	bl	811bcb4 <tcp_rst>
      return;
 8118fd8:	e01b      	b.n	8119012 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8118fda:	4b0f      	ldr	r3, [pc, #60]	@ (8119018 <tcp_timewait_input+0xc8>)
 8118fdc:	781b      	ldrb	r3, [r3, #0]
 8118fde:	f003 0301 	and.w	r3, r3, #1
 8118fe2:	2b00      	cmp	r3, #0
 8118fe4:	d003      	beq.n	8118fee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8118fe6:	4b16      	ldr	r3, [pc, #88]	@ (8119040 <tcp_timewait_input+0xf0>)
 8118fe8:	681a      	ldr	r2, [r3, #0]
 8118fea:	687b      	ldr	r3, [r7, #4]
 8118fec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8118fee:	4b10      	ldr	r3, [pc, #64]	@ (8119030 <tcp_timewait_input+0xe0>)
 8118ff0:	881b      	ldrh	r3, [r3, #0]
 8118ff2:	2b00      	cmp	r3, #0
 8118ff4:	d00c      	beq.n	8119010 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8118ff6:	687b      	ldr	r3, [r7, #4]
 8118ff8:	8b5b      	ldrh	r3, [r3, #26]
 8118ffa:	f043 0302 	orr.w	r3, r3, #2
 8118ffe:	b29a      	uxth	r2, r3
 8119000:	687b      	ldr	r3, [r7, #4]
 8119002:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8119004:	6878      	ldr	r0, [r7, #4]
 8119006:	f002 f8a1 	bl	811b14c <tcp_output>
  }
  return;
 811900a:	e001      	b.n	8119010 <tcp_timewait_input+0xc0>
    return;
 811900c:	bf00      	nop
 811900e:	e000      	b.n	8119012 <tcp_timewait_input+0xc2>
  return;
 8119010:	bf00      	nop
}
 8119012:	3708      	adds	r7, #8
 8119014:	46bd      	mov	sp, r7
 8119016:	bd80      	pop	{r7, pc}
 8119018:	1001216c 	.word	0x1001216c
 811901c:	081210f4 	.word	0x081210f4
 8119020:	0812134c 	.word	0x0812134c
 8119024:	08121180 	.word	0x08121180
 8119028:	10012160 	.word	0x10012160
 811902c:	10012164 	.word	0x10012164
 8119030:	1001216a 	.word	0x1001216a
 8119034:	10012150 	.word	0x10012150
 8119038:	1000b2ac 	.word	0x1000b2ac
 811903c:	1000b2b0 	.word	0x1000b2b0
 8119040:	10012128 	.word	0x10012128

08119044 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8119044:	b590      	push	{r4, r7, lr}
 8119046:	b08d      	sub	sp, #52	@ 0x34
 8119048:	af04      	add	r7, sp, #16
 811904a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 811904c:	2300      	movs	r3, #0
 811904e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8119050:	2300      	movs	r3, #0
 8119052:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8119054:	687b      	ldr	r3, [r7, #4]
 8119056:	2b00      	cmp	r3, #0
 8119058:	d106      	bne.n	8119068 <tcp_process+0x24>
 811905a:	4b9d      	ldr	r3, [pc, #628]	@ (81192d0 <tcp_process+0x28c>)
 811905c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8119060:	499c      	ldr	r1, [pc, #624]	@ (81192d4 <tcp_process+0x290>)
 8119062:	489d      	ldr	r0, [pc, #628]	@ (81192d8 <tcp_process+0x294>)
 8119064:	f004 feba 	bl	811dddc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8119068:	4b9c      	ldr	r3, [pc, #624]	@ (81192dc <tcp_process+0x298>)
 811906a:	781b      	ldrb	r3, [r3, #0]
 811906c:	f003 0304 	and.w	r3, r3, #4
 8119070:	2b00      	cmp	r3, #0
 8119072:	d04e      	beq.n	8119112 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8119074:	687b      	ldr	r3, [r7, #4]
 8119076:	7d1b      	ldrb	r3, [r3, #20]
 8119078:	2b02      	cmp	r3, #2
 811907a:	d108      	bne.n	811908e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 811907c:	687b      	ldr	r3, [r7, #4]
 811907e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8119080:	4b97      	ldr	r3, [pc, #604]	@ (81192e0 <tcp_process+0x29c>)
 8119082:	681b      	ldr	r3, [r3, #0]
 8119084:	429a      	cmp	r2, r3
 8119086:	d123      	bne.n	81190d0 <tcp_process+0x8c>
        acceptable = 1;
 8119088:	2301      	movs	r3, #1
 811908a:	76fb      	strb	r3, [r7, #27]
 811908c:	e020      	b.n	81190d0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 811908e:	687b      	ldr	r3, [r7, #4]
 8119090:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8119092:	4b94      	ldr	r3, [pc, #592]	@ (81192e4 <tcp_process+0x2a0>)
 8119094:	681b      	ldr	r3, [r3, #0]
 8119096:	429a      	cmp	r2, r3
 8119098:	d102      	bne.n	81190a0 <tcp_process+0x5c>
        acceptable = 1;
 811909a:	2301      	movs	r3, #1
 811909c:	76fb      	strb	r3, [r7, #27]
 811909e:	e017      	b.n	81190d0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 81190a0:	4b90      	ldr	r3, [pc, #576]	@ (81192e4 <tcp_process+0x2a0>)
 81190a2:	681a      	ldr	r2, [r3, #0]
 81190a4:	687b      	ldr	r3, [r7, #4]
 81190a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81190a8:	1ad3      	subs	r3, r2, r3
 81190aa:	2b00      	cmp	r3, #0
 81190ac:	db10      	blt.n	81190d0 <tcp_process+0x8c>
 81190ae:	4b8d      	ldr	r3, [pc, #564]	@ (81192e4 <tcp_process+0x2a0>)
 81190b0:	681a      	ldr	r2, [r3, #0]
 81190b2:	687b      	ldr	r3, [r7, #4]
 81190b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81190b6:	6879      	ldr	r1, [r7, #4]
 81190b8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 81190ba:	440b      	add	r3, r1
 81190bc:	1ad3      	subs	r3, r2, r3
 81190be:	2b00      	cmp	r3, #0
 81190c0:	dc06      	bgt.n	81190d0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 81190c2:	687b      	ldr	r3, [r7, #4]
 81190c4:	8b5b      	ldrh	r3, [r3, #26]
 81190c6:	f043 0302 	orr.w	r3, r3, #2
 81190ca:	b29a      	uxth	r2, r3
 81190cc:	687b      	ldr	r3, [r7, #4]
 81190ce:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 81190d0:	7efb      	ldrb	r3, [r7, #27]
 81190d2:	2b00      	cmp	r3, #0
 81190d4:	d01b      	beq.n	811910e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 81190d6:	687b      	ldr	r3, [r7, #4]
 81190d8:	7d1b      	ldrb	r3, [r3, #20]
 81190da:	2b00      	cmp	r3, #0
 81190dc:	d106      	bne.n	81190ec <tcp_process+0xa8>
 81190de:	4b7c      	ldr	r3, [pc, #496]	@ (81192d0 <tcp_process+0x28c>)
 81190e0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 81190e4:	4980      	ldr	r1, [pc, #512]	@ (81192e8 <tcp_process+0x2a4>)
 81190e6:	487c      	ldr	r0, [pc, #496]	@ (81192d8 <tcp_process+0x294>)
 81190e8:	f004 fe78 	bl	811dddc <iprintf>
      recv_flags |= TF_RESET;
 81190ec:	4b7f      	ldr	r3, [pc, #508]	@ (81192ec <tcp_process+0x2a8>)
 81190ee:	781b      	ldrb	r3, [r3, #0]
 81190f0:	f043 0308 	orr.w	r3, r3, #8
 81190f4:	b2da      	uxtb	r2, r3
 81190f6:	4b7d      	ldr	r3, [pc, #500]	@ (81192ec <tcp_process+0x2a8>)
 81190f8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 81190fa:	687b      	ldr	r3, [r7, #4]
 81190fc:	8b5b      	ldrh	r3, [r3, #26]
 81190fe:	f023 0301 	bic.w	r3, r3, #1
 8119102:	b29a      	uxth	r2, r3
 8119104:	687b      	ldr	r3, [r7, #4]
 8119106:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8119108:	f06f 030d 	mvn.w	r3, #13
 811910c:	e37a      	b.n	8119804 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 811910e:	2300      	movs	r3, #0
 8119110:	e378      	b.n	8119804 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8119112:	4b72      	ldr	r3, [pc, #456]	@ (81192dc <tcp_process+0x298>)
 8119114:	781b      	ldrb	r3, [r3, #0]
 8119116:	f003 0302 	and.w	r3, r3, #2
 811911a:	2b00      	cmp	r3, #0
 811911c:	d010      	beq.n	8119140 <tcp_process+0xfc>
 811911e:	687b      	ldr	r3, [r7, #4]
 8119120:	7d1b      	ldrb	r3, [r3, #20]
 8119122:	2b02      	cmp	r3, #2
 8119124:	d00c      	beq.n	8119140 <tcp_process+0xfc>
 8119126:	687b      	ldr	r3, [r7, #4]
 8119128:	7d1b      	ldrb	r3, [r3, #20]
 811912a:	2b03      	cmp	r3, #3
 811912c:	d008      	beq.n	8119140 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 811912e:	687b      	ldr	r3, [r7, #4]
 8119130:	8b5b      	ldrh	r3, [r3, #26]
 8119132:	f043 0302 	orr.w	r3, r3, #2
 8119136:	b29a      	uxth	r2, r3
 8119138:	687b      	ldr	r3, [r7, #4]
 811913a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 811913c:	2300      	movs	r3, #0
 811913e:	e361      	b.n	8119804 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8119140:	687b      	ldr	r3, [r7, #4]
 8119142:	8b5b      	ldrh	r3, [r3, #26]
 8119144:	f003 0310 	and.w	r3, r3, #16
 8119148:	2b00      	cmp	r3, #0
 811914a:	d103      	bne.n	8119154 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 811914c:	4b68      	ldr	r3, [pc, #416]	@ (81192f0 <tcp_process+0x2ac>)
 811914e:	681a      	ldr	r2, [r3, #0]
 8119150:	687b      	ldr	r3, [r7, #4]
 8119152:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8119154:	687b      	ldr	r3, [r7, #4]
 8119156:	2200      	movs	r2, #0
 8119158:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
  pcb->persist_probe = 0;
 811915c:	687b      	ldr	r3, [r7, #4]
 811915e:	2200      	movs	r2, #0
 8119160:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

  tcp_parseopt(pcb);
 8119164:	6878      	ldr	r0, [r7, #4]
 8119166:	f001 fc2b 	bl	811a9c0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 811916a:	687b      	ldr	r3, [r7, #4]
 811916c:	7d1b      	ldrb	r3, [r3, #20]
 811916e:	3b02      	subs	r3, #2
 8119170:	2b07      	cmp	r3, #7
 8119172:	f200 8337 	bhi.w	81197e4 <tcp_process+0x7a0>
 8119176:	a201      	add	r2, pc, #4	@ (adr r2, 811917c <tcp_process+0x138>)
 8119178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811917c:	0811919d 	.word	0x0811919d
 8119180:	081193cd 	.word	0x081193cd
 8119184:	08119545 	.word	0x08119545
 8119188:	0811956f 	.word	0x0811956f
 811918c:	08119693 	.word	0x08119693
 8119190:	08119545 	.word	0x08119545
 8119194:	0811971f 	.word	0x0811971f
 8119198:	081197af 	.word	0x081197af
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 811919c:	4b4f      	ldr	r3, [pc, #316]	@ (81192dc <tcp_process+0x298>)
 811919e:	781b      	ldrb	r3, [r3, #0]
 81191a0:	f003 0310 	and.w	r3, r3, #16
 81191a4:	2b00      	cmp	r3, #0
 81191a6:	f000 80e4 	beq.w	8119372 <tcp_process+0x32e>
 81191aa:	4b4c      	ldr	r3, [pc, #304]	@ (81192dc <tcp_process+0x298>)
 81191ac:	781b      	ldrb	r3, [r3, #0]
 81191ae:	f003 0302 	and.w	r3, r3, #2
 81191b2:	2b00      	cmp	r3, #0
 81191b4:	f000 80dd 	beq.w	8119372 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 81191b8:	687b      	ldr	r3, [r7, #4]
 81191ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81191bc:	1c5a      	adds	r2, r3, #1
 81191be:	4b48      	ldr	r3, [pc, #288]	@ (81192e0 <tcp_process+0x29c>)
 81191c0:	681b      	ldr	r3, [r3, #0]
 81191c2:	429a      	cmp	r2, r3
 81191c4:	f040 80d5 	bne.w	8119372 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 81191c8:	4b46      	ldr	r3, [pc, #280]	@ (81192e4 <tcp_process+0x2a0>)
 81191ca:	681b      	ldr	r3, [r3, #0]
 81191cc:	1c5a      	adds	r2, r3, #1
 81191ce:	687b      	ldr	r3, [r7, #4]
 81191d0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 81191d2:	687b      	ldr	r3, [r7, #4]
 81191d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81191d6:	687b      	ldr	r3, [r7, #4]
 81191d8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 81191da:	4b41      	ldr	r3, [pc, #260]	@ (81192e0 <tcp_process+0x29c>)
 81191dc:	681a      	ldr	r2, [r3, #0]
 81191de:	687b      	ldr	r3, [r7, #4]
 81191e0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 81191e2:	4b44      	ldr	r3, [pc, #272]	@ (81192f4 <tcp_process+0x2b0>)
 81191e4:	681b      	ldr	r3, [r3, #0]
 81191e6:	89db      	ldrh	r3, [r3, #14]
 81191e8:	b29a      	uxth	r2, r3
 81191ea:	687b      	ldr	r3, [r7, #4]
 81191ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 81191f0:	687b      	ldr	r3, [r7, #4]
 81191f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 81191f6:	687b      	ldr	r3, [r7, #4]
 81191f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 81191fc:	4b39      	ldr	r3, [pc, #228]	@ (81192e4 <tcp_process+0x2a0>)
 81191fe:	681b      	ldr	r3, [r3, #0]
 8119200:	1e5a      	subs	r2, r3, #1
 8119202:	687b      	ldr	r3, [r7, #4]
 8119204:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8119206:	687b      	ldr	r3, [r7, #4]
 8119208:	2204      	movs	r2, #4
 811920a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 811920c:	687b      	ldr	r3, [r7, #4]
 811920e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8119210:	687b      	ldr	r3, [r7, #4]
 8119212:	3304      	adds	r3, #4
 8119214:	4618      	mov	r0, r3
 8119216:	f7fa f9e3 	bl	81135e0 <ip4_route>
 811921a:	4601      	mov	r1, r0
 811921c:	687b      	ldr	r3, [r7, #4]
 811921e:	3304      	adds	r3, #4
 8119220:	461a      	mov	r2, r3
 8119222:	4620      	mov	r0, r4
 8119224:	f7ff f88c 	bl	8118340 <tcp_eff_send_mss_netif>
 8119228:	4603      	mov	r3, r0
 811922a:	461a      	mov	r2, r3
 811922c:	687b      	ldr	r3, [r7, #4]
 811922e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8119230:	687b      	ldr	r3, [r7, #4]
 8119232:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8119234:	009a      	lsls	r2, r3, #2
 8119236:	687b      	ldr	r3, [r7, #4]
 8119238:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811923a:	005b      	lsls	r3, r3, #1
 811923c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8119240:	428b      	cmp	r3, r1
 8119242:	bf38      	it	cc
 8119244:	460b      	movcc	r3, r1
 8119246:	429a      	cmp	r2, r3
 8119248:	d204      	bcs.n	8119254 <tcp_process+0x210>
 811924a:	687b      	ldr	r3, [r7, #4]
 811924c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811924e:	009b      	lsls	r3, r3, #2
 8119250:	b29b      	uxth	r3, r3
 8119252:	e00d      	b.n	8119270 <tcp_process+0x22c>
 8119254:	687b      	ldr	r3, [r7, #4]
 8119256:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8119258:	005b      	lsls	r3, r3, #1
 811925a:	f241 121c 	movw	r2, #4380	@ 0x111c
 811925e:	4293      	cmp	r3, r2
 8119260:	d904      	bls.n	811926c <tcp_process+0x228>
 8119262:	687b      	ldr	r3, [r7, #4]
 8119264:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8119266:	005b      	lsls	r3, r3, #1
 8119268:	b29b      	uxth	r3, r3
 811926a:	e001      	b.n	8119270 <tcp_process+0x22c>
 811926c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8119270:	687a      	ldr	r2, [r7, #4]
 8119272:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8119276:	687b      	ldr	r3, [r7, #4]
 8119278:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811927c:	2b00      	cmp	r3, #0
 811927e:	d106      	bne.n	811928e <tcp_process+0x24a>
 8119280:	4b13      	ldr	r3, [pc, #76]	@ (81192d0 <tcp_process+0x28c>)
 8119282:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8119286:	491c      	ldr	r1, [pc, #112]	@ (81192f8 <tcp_process+0x2b4>)
 8119288:	4813      	ldr	r0, [pc, #76]	@ (81192d8 <tcp_process+0x294>)
 811928a:	f004 fda7 	bl	811dddc <iprintf>
        --pcb->snd_queuelen;
 811928e:	687b      	ldr	r3, [r7, #4]
 8119290:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119294:	3b01      	subs	r3, #1
 8119296:	b29a      	uxth	r2, r3
 8119298:	687b      	ldr	r3, [r7, #4]
 811929a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 811929e:	687b      	ldr	r3, [r7, #4]
 81192a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81192a2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 81192a4:	69fb      	ldr	r3, [r7, #28]
 81192a6:	2b00      	cmp	r3, #0
 81192a8:	d12a      	bne.n	8119300 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 81192aa:	687b      	ldr	r3, [r7, #4]
 81192ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81192ae:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 81192b0:	69fb      	ldr	r3, [r7, #28]
 81192b2:	2b00      	cmp	r3, #0
 81192b4:	d106      	bne.n	81192c4 <tcp_process+0x280>
 81192b6:	4b06      	ldr	r3, [pc, #24]	@ (81192d0 <tcp_process+0x28c>)
 81192b8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 81192bc:	490f      	ldr	r1, [pc, #60]	@ (81192fc <tcp_process+0x2b8>)
 81192be:	4806      	ldr	r0, [pc, #24]	@ (81192d8 <tcp_process+0x294>)
 81192c0:	f004 fd8c 	bl	811dddc <iprintf>
          pcb->unsent = rseg->next;
 81192c4:	69fb      	ldr	r3, [r7, #28]
 81192c6:	681a      	ldr	r2, [r3, #0]
 81192c8:	687b      	ldr	r3, [r7, #4]
 81192ca:	66da      	str	r2, [r3, #108]	@ 0x6c
 81192cc:	e01c      	b.n	8119308 <tcp_process+0x2c4>
 81192ce:	bf00      	nop
 81192d0:	081210f4 	.word	0x081210f4
 81192d4:	0812136c 	.word	0x0812136c
 81192d8:	08121180 	.word	0x08121180
 81192dc:	1001216c 	.word	0x1001216c
 81192e0:	10012164 	.word	0x10012164
 81192e4:	10012160 	.word	0x10012160
 81192e8:	08121388 	.word	0x08121388
 81192ec:	1001216d 	.word	0x1001216d
 81192f0:	10012128 	.word	0x10012128
 81192f4:	10012150 	.word	0x10012150
 81192f8:	081213a8 	.word	0x081213a8
 81192fc:	081213c0 	.word	0x081213c0
        } else {
          pcb->unacked = rseg->next;
 8119300:	69fb      	ldr	r3, [r7, #28]
 8119302:	681a      	ldr	r2, [r3, #0]
 8119304:	687b      	ldr	r3, [r7, #4]
 8119306:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8119308:	69f8      	ldr	r0, [r7, #28]
 811930a:	f7fe fcba 	bl	8117c82 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 811930e:	687b      	ldr	r3, [r7, #4]
 8119310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8119312:	2b00      	cmp	r3, #0
 8119314:	d104      	bne.n	8119320 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8119316:	687b      	ldr	r3, [r7, #4]
 8119318:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811931c:	861a      	strh	r2, [r3, #48]	@ 0x30
 811931e:	e006      	b.n	811932e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8119320:	687b      	ldr	r3, [r7, #4]
 8119322:	2200      	movs	r2, #0
 8119324:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8119326:	687b      	ldr	r3, [r7, #4]
 8119328:	2200      	movs	r2, #0
 811932a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 811932e:	687b      	ldr	r3, [r7, #4]
 8119330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8119334:	2b00      	cmp	r3, #0
 8119336:	d00a      	beq.n	811934e <tcp_process+0x30a>
 8119338:	687b      	ldr	r3, [r7, #4]
 811933a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 811933e:	687a      	ldr	r2, [r7, #4]
 8119340:	6910      	ldr	r0, [r2, #16]
 8119342:	2200      	movs	r2, #0
 8119344:	6879      	ldr	r1, [r7, #4]
 8119346:	4798      	blx	r3
 8119348:	4603      	mov	r3, r0
 811934a:	76bb      	strb	r3, [r7, #26]
 811934c:	e001      	b.n	8119352 <tcp_process+0x30e>
 811934e:	2300      	movs	r3, #0
 8119350:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8119352:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8119356:	f113 0f0d 	cmn.w	r3, #13
 811935a:	d102      	bne.n	8119362 <tcp_process+0x31e>
          return ERR_ABRT;
 811935c:	f06f 030c 	mvn.w	r3, #12
 8119360:	e250      	b.n	8119804 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8119362:	687b      	ldr	r3, [r7, #4]
 8119364:	8b5b      	ldrh	r3, [r3, #26]
 8119366:	f043 0302 	orr.w	r3, r3, #2
 811936a:	b29a      	uxth	r2, r3
 811936c:	687b      	ldr	r3, [r7, #4]
 811936e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8119370:	e23a      	b.n	81197e8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8119372:	4b98      	ldr	r3, [pc, #608]	@ (81195d4 <tcp_process+0x590>)
 8119374:	781b      	ldrb	r3, [r3, #0]
 8119376:	f003 0310 	and.w	r3, r3, #16
 811937a:	2b00      	cmp	r3, #0
 811937c:	f000 8234 	beq.w	81197e8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8119380:	4b95      	ldr	r3, [pc, #596]	@ (81195d8 <tcp_process+0x594>)
 8119382:	6819      	ldr	r1, [r3, #0]
 8119384:	4b95      	ldr	r3, [pc, #596]	@ (81195dc <tcp_process+0x598>)
 8119386:	881b      	ldrh	r3, [r3, #0]
 8119388:	461a      	mov	r2, r3
 811938a:	4b95      	ldr	r3, [pc, #596]	@ (81195e0 <tcp_process+0x59c>)
 811938c:	681b      	ldr	r3, [r3, #0]
 811938e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8119390:	4b94      	ldr	r3, [pc, #592]	@ (81195e4 <tcp_process+0x5a0>)
 8119392:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8119394:	885b      	ldrh	r3, [r3, #2]
 8119396:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8119398:	4a92      	ldr	r2, [pc, #584]	@ (81195e4 <tcp_process+0x5a0>)
 811939a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811939c:	8812      	ldrh	r2, [r2, #0]
 811939e:	b292      	uxth	r2, r2
 81193a0:	9202      	str	r2, [sp, #8]
 81193a2:	9301      	str	r3, [sp, #4]
 81193a4:	4b90      	ldr	r3, [pc, #576]	@ (81195e8 <tcp_process+0x5a4>)
 81193a6:	9300      	str	r3, [sp, #0]
 81193a8:	4b90      	ldr	r3, [pc, #576]	@ (81195ec <tcp_process+0x5a8>)
 81193aa:	4602      	mov	r2, r0
 81193ac:	6878      	ldr	r0, [r7, #4]
 81193ae:	f002 fc81 	bl	811bcb4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 81193b2:	687b      	ldr	r3, [r7, #4]
 81193b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81193b8:	2b05      	cmp	r3, #5
 81193ba:	f200 8215 	bhi.w	81197e8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 81193be:	687b      	ldr	r3, [r7, #4]
 81193c0:	2200      	movs	r2, #0
 81193c2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 81193c4:	6878      	ldr	r0, [r7, #4]
 81193c6:	f002 fa4d 	bl	811b864 <tcp_rexmit_rto>
      break;
 81193ca:	e20d      	b.n	81197e8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 81193cc:	4b81      	ldr	r3, [pc, #516]	@ (81195d4 <tcp_process+0x590>)
 81193ce:	781b      	ldrb	r3, [r3, #0]
 81193d0:	f003 0310 	and.w	r3, r3, #16
 81193d4:	2b00      	cmp	r3, #0
 81193d6:	f000 80a1 	beq.w	811951c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 81193da:	4b7f      	ldr	r3, [pc, #508]	@ (81195d8 <tcp_process+0x594>)
 81193dc:	681a      	ldr	r2, [r3, #0]
 81193de:	687b      	ldr	r3, [r7, #4]
 81193e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81193e2:	1ad3      	subs	r3, r2, r3
 81193e4:	3b01      	subs	r3, #1
 81193e6:	2b00      	cmp	r3, #0
 81193e8:	db7e      	blt.n	81194e8 <tcp_process+0x4a4>
 81193ea:	4b7b      	ldr	r3, [pc, #492]	@ (81195d8 <tcp_process+0x594>)
 81193ec:	681a      	ldr	r2, [r3, #0]
 81193ee:	687b      	ldr	r3, [r7, #4]
 81193f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81193f2:	1ad3      	subs	r3, r2, r3
 81193f4:	2b00      	cmp	r3, #0
 81193f6:	dc77      	bgt.n	81194e8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 81193f8:	687b      	ldr	r3, [r7, #4]
 81193fa:	2204      	movs	r2, #4
 81193fc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 81193fe:	687b      	ldr	r3, [r7, #4]
 8119400:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8119402:	2b00      	cmp	r3, #0
 8119404:	d102      	bne.n	811940c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8119406:	23fa      	movs	r3, #250	@ 0xfa
 8119408:	76bb      	strb	r3, [r7, #26]
 811940a:	e01d      	b.n	8119448 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 811940c:	687b      	ldr	r3, [r7, #4]
 811940e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8119410:	699b      	ldr	r3, [r3, #24]
 8119412:	2b00      	cmp	r3, #0
 8119414:	d106      	bne.n	8119424 <tcp_process+0x3e0>
 8119416:	4b76      	ldr	r3, [pc, #472]	@ (81195f0 <tcp_process+0x5ac>)
 8119418:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 811941c:	4975      	ldr	r1, [pc, #468]	@ (81195f4 <tcp_process+0x5b0>)
 811941e:	4876      	ldr	r0, [pc, #472]	@ (81195f8 <tcp_process+0x5b4>)
 8119420:	f004 fcdc 	bl	811dddc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8119424:	687b      	ldr	r3, [r7, #4]
 8119426:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8119428:	699b      	ldr	r3, [r3, #24]
 811942a:	2b00      	cmp	r3, #0
 811942c:	d00a      	beq.n	8119444 <tcp_process+0x400>
 811942e:	687b      	ldr	r3, [r7, #4]
 8119430:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8119432:	699b      	ldr	r3, [r3, #24]
 8119434:	687a      	ldr	r2, [r7, #4]
 8119436:	6910      	ldr	r0, [r2, #16]
 8119438:	2200      	movs	r2, #0
 811943a:	6879      	ldr	r1, [r7, #4]
 811943c:	4798      	blx	r3
 811943e:	4603      	mov	r3, r0
 8119440:	76bb      	strb	r3, [r7, #26]
 8119442:	e001      	b.n	8119448 <tcp_process+0x404>
 8119444:	23f0      	movs	r3, #240	@ 0xf0
 8119446:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8119448:	f997 301a 	ldrsb.w	r3, [r7, #26]
 811944c:	2b00      	cmp	r3, #0
 811944e:	d00a      	beq.n	8119466 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8119450:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8119454:	f113 0f0d 	cmn.w	r3, #13
 8119458:	d002      	beq.n	8119460 <tcp_process+0x41c>
              tcp_abort(pcb);
 811945a:	6878      	ldr	r0, [r7, #4]
 811945c:	f7fd fdbe 	bl	8116fdc <tcp_abort>
            }
            return ERR_ABRT;
 8119460:	f06f 030c 	mvn.w	r3, #12
 8119464:	e1ce      	b.n	8119804 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8119466:	6878      	ldr	r0, [r7, #4]
 8119468:	f000 fae0 	bl	8119a2c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 811946c:	4b63      	ldr	r3, [pc, #396]	@ (81195fc <tcp_process+0x5b8>)
 811946e:	881b      	ldrh	r3, [r3, #0]
 8119470:	2b00      	cmp	r3, #0
 8119472:	d005      	beq.n	8119480 <tcp_process+0x43c>
            recv_acked--;
 8119474:	4b61      	ldr	r3, [pc, #388]	@ (81195fc <tcp_process+0x5b8>)
 8119476:	881b      	ldrh	r3, [r3, #0]
 8119478:	3b01      	subs	r3, #1
 811947a:	b29a      	uxth	r2, r3
 811947c:	4b5f      	ldr	r3, [pc, #380]	@ (81195fc <tcp_process+0x5b8>)
 811947e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8119480:	687b      	ldr	r3, [r7, #4]
 8119482:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8119484:	009a      	lsls	r2, r3, #2
 8119486:	687b      	ldr	r3, [r7, #4]
 8119488:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811948a:	005b      	lsls	r3, r3, #1
 811948c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8119490:	428b      	cmp	r3, r1
 8119492:	bf38      	it	cc
 8119494:	460b      	movcc	r3, r1
 8119496:	429a      	cmp	r2, r3
 8119498:	d204      	bcs.n	81194a4 <tcp_process+0x460>
 811949a:	687b      	ldr	r3, [r7, #4]
 811949c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811949e:	009b      	lsls	r3, r3, #2
 81194a0:	b29b      	uxth	r3, r3
 81194a2:	e00d      	b.n	81194c0 <tcp_process+0x47c>
 81194a4:	687b      	ldr	r3, [r7, #4]
 81194a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81194a8:	005b      	lsls	r3, r3, #1
 81194aa:	f241 121c 	movw	r2, #4380	@ 0x111c
 81194ae:	4293      	cmp	r3, r2
 81194b0:	d904      	bls.n	81194bc <tcp_process+0x478>
 81194b2:	687b      	ldr	r3, [r7, #4]
 81194b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81194b6:	005b      	lsls	r3, r3, #1
 81194b8:	b29b      	uxth	r3, r3
 81194ba:	e001      	b.n	81194c0 <tcp_process+0x47c>
 81194bc:	f241 131c 	movw	r3, #4380	@ 0x111c
 81194c0:	687a      	ldr	r2, [r7, #4]
 81194c2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 81194c6:	4b4e      	ldr	r3, [pc, #312]	@ (8119600 <tcp_process+0x5bc>)
 81194c8:	781b      	ldrb	r3, [r3, #0]
 81194ca:	f003 0320 	and.w	r3, r3, #32
 81194ce:	2b00      	cmp	r3, #0
 81194d0:	d037      	beq.n	8119542 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 81194d2:	687b      	ldr	r3, [r7, #4]
 81194d4:	8b5b      	ldrh	r3, [r3, #26]
 81194d6:	f043 0302 	orr.w	r3, r3, #2
 81194da:	b29a      	uxth	r2, r3
 81194dc:	687b      	ldr	r3, [r7, #4]
 81194de:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 81194e0:	687b      	ldr	r3, [r7, #4]
 81194e2:	2207      	movs	r2, #7
 81194e4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 81194e6:	e02c      	b.n	8119542 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81194e8:	4b3b      	ldr	r3, [pc, #236]	@ (81195d8 <tcp_process+0x594>)
 81194ea:	6819      	ldr	r1, [r3, #0]
 81194ec:	4b3b      	ldr	r3, [pc, #236]	@ (81195dc <tcp_process+0x598>)
 81194ee:	881b      	ldrh	r3, [r3, #0]
 81194f0:	461a      	mov	r2, r3
 81194f2:	4b3b      	ldr	r3, [pc, #236]	@ (81195e0 <tcp_process+0x59c>)
 81194f4:	681b      	ldr	r3, [r3, #0]
 81194f6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81194f8:	4b3a      	ldr	r3, [pc, #232]	@ (81195e4 <tcp_process+0x5a0>)
 81194fa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81194fc:	885b      	ldrh	r3, [r3, #2]
 81194fe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8119500:	4a38      	ldr	r2, [pc, #224]	@ (81195e4 <tcp_process+0x5a0>)
 8119502:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8119504:	8812      	ldrh	r2, [r2, #0]
 8119506:	b292      	uxth	r2, r2
 8119508:	9202      	str	r2, [sp, #8]
 811950a:	9301      	str	r3, [sp, #4]
 811950c:	4b36      	ldr	r3, [pc, #216]	@ (81195e8 <tcp_process+0x5a4>)
 811950e:	9300      	str	r3, [sp, #0]
 8119510:	4b36      	ldr	r3, [pc, #216]	@ (81195ec <tcp_process+0x5a8>)
 8119512:	4602      	mov	r2, r0
 8119514:	6878      	ldr	r0, [r7, #4]
 8119516:	f002 fbcd 	bl	811bcb4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 811951a:	e167      	b.n	81197ec <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 811951c:	4b2d      	ldr	r3, [pc, #180]	@ (81195d4 <tcp_process+0x590>)
 811951e:	781b      	ldrb	r3, [r3, #0]
 8119520:	f003 0302 	and.w	r3, r3, #2
 8119524:	2b00      	cmp	r3, #0
 8119526:	f000 8161 	beq.w	81197ec <tcp_process+0x7a8>
 811952a:	687b      	ldr	r3, [r7, #4]
 811952c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811952e:	1e5a      	subs	r2, r3, #1
 8119530:	4b2b      	ldr	r3, [pc, #172]	@ (81195e0 <tcp_process+0x59c>)
 8119532:	681b      	ldr	r3, [r3, #0]
 8119534:	429a      	cmp	r2, r3
 8119536:	f040 8159 	bne.w	81197ec <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 811953a:	6878      	ldr	r0, [r7, #4]
 811953c:	f002 f9b4 	bl	811b8a8 <tcp_rexmit>
      break;
 8119540:	e154      	b.n	81197ec <tcp_process+0x7a8>
 8119542:	e153      	b.n	81197ec <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8119544:	6878      	ldr	r0, [r7, #4]
 8119546:	f000 fa71 	bl	8119a2c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 811954a:	4b2d      	ldr	r3, [pc, #180]	@ (8119600 <tcp_process+0x5bc>)
 811954c:	781b      	ldrb	r3, [r3, #0]
 811954e:	f003 0320 	and.w	r3, r3, #32
 8119552:	2b00      	cmp	r3, #0
 8119554:	f000 814c 	beq.w	81197f0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8119558:	687b      	ldr	r3, [r7, #4]
 811955a:	8b5b      	ldrh	r3, [r3, #26]
 811955c:	f043 0302 	orr.w	r3, r3, #2
 8119560:	b29a      	uxth	r2, r3
 8119562:	687b      	ldr	r3, [r7, #4]
 8119564:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8119566:	687b      	ldr	r3, [r7, #4]
 8119568:	2207      	movs	r2, #7
 811956a:	751a      	strb	r2, [r3, #20]
      }
      break;
 811956c:	e140      	b.n	81197f0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 811956e:	6878      	ldr	r0, [r7, #4]
 8119570:	f000 fa5c 	bl	8119a2c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8119574:	4b22      	ldr	r3, [pc, #136]	@ (8119600 <tcp_process+0x5bc>)
 8119576:	781b      	ldrb	r3, [r3, #0]
 8119578:	f003 0320 	and.w	r3, r3, #32
 811957c:	2b00      	cmp	r3, #0
 811957e:	d071      	beq.n	8119664 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8119580:	4b14      	ldr	r3, [pc, #80]	@ (81195d4 <tcp_process+0x590>)
 8119582:	781b      	ldrb	r3, [r3, #0]
 8119584:	f003 0310 	and.w	r3, r3, #16
 8119588:	2b00      	cmp	r3, #0
 811958a:	d060      	beq.n	811964e <tcp_process+0x60a>
 811958c:	687b      	ldr	r3, [r7, #4]
 811958e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8119590:	4b11      	ldr	r3, [pc, #68]	@ (81195d8 <tcp_process+0x594>)
 8119592:	681b      	ldr	r3, [r3, #0]
 8119594:	429a      	cmp	r2, r3
 8119596:	d15a      	bne.n	811964e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8119598:	687b      	ldr	r3, [r7, #4]
 811959a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811959c:	2b00      	cmp	r3, #0
 811959e:	d156      	bne.n	811964e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 81195a0:	687b      	ldr	r3, [r7, #4]
 81195a2:	8b5b      	ldrh	r3, [r3, #26]
 81195a4:	f043 0302 	orr.w	r3, r3, #2
 81195a8:	b29a      	uxth	r2, r3
 81195aa:	687b      	ldr	r3, [r7, #4]
 81195ac:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 81195ae:	6878      	ldr	r0, [r7, #4]
 81195b0:	f7fe fdbc 	bl	811812c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 81195b4:	4b13      	ldr	r3, [pc, #76]	@ (8119604 <tcp_process+0x5c0>)
 81195b6:	681b      	ldr	r3, [r3, #0]
 81195b8:	687a      	ldr	r2, [r7, #4]
 81195ba:	429a      	cmp	r2, r3
 81195bc:	d105      	bne.n	81195ca <tcp_process+0x586>
 81195be:	4b11      	ldr	r3, [pc, #68]	@ (8119604 <tcp_process+0x5c0>)
 81195c0:	681b      	ldr	r3, [r3, #0]
 81195c2:	68db      	ldr	r3, [r3, #12]
 81195c4:	4a0f      	ldr	r2, [pc, #60]	@ (8119604 <tcp_process+0x5c0>)
 81195c6:	6013      	str	r3, [r2, #0]
 81195c8:	e02e      	b.n	8119628 <tcp_process+0x5e4>
 81195ca:	4b0e      	ldr	r3, [pc, #56]	@ (8119604 <tcp_process+0x5c0>)
 81195cc:	681b      	ldr	r3, [r3, #0]
 81195ce:	617b      	str	r3, [r7, #20]
 81195d0:	e027      	b.n	8119622 <tcp_process+0x5de>
 81195d2:	bf00      	nop
 81195d4:	1001216c 	.word	0x1001216c
 81195d8:	10012164 	.word	0x10012164
 81195dc:	1001216a 	.word	0x1001216a
 81195e0:	10012160 	.word	0x10012160
 81195e4:	10012150 	.word	0x10012150
 81195e8:	1000b2ac 	.word	0x1000b2ac
 81195ec:	1000b2b0 	.word	0x1000b2b0
 81195f0:	081210f4 	.word	0x081210f4
 81195f4:	081213d4 	.word	0x081213d4
 81195f8:	08121180 	.word	0x08121180
 81195fc:	10012168 	.word	0x10012168
 8119600:	1001216d 	.word	0x1001216d
 8119604:	10012134 	.word	0x10012134
 8119608:	697b      	ldr	r3, [r7, #20]
 811960a:	68db      	ldr	r3, [r3, #12]
 811960c:	687a      	ldr	r2, [r7, #4]
 811960e:	429a      	cmp	r2, r3
 8119610:	d104      	bne.n	811961c <tcp_process+0x5d8>
 8119612:	687b      	ldr	r3, [r7, #4]
 8119614:	68da      	ldr	r2, [r3, #12]
 8119616:	697b      	ldr	r3, [r7, #20]
 8119618:	60da      	str	r2, [r3, #12]
 811961a:	e005      	b.n	8119628 <tcp_process+0x5e4>
 811961c:	697b      	ldr	r3, [r7, #20]
 811961e:	68db      	ldr	r3, [r3, #12]
 8119620:	617b      	str	r3, [r7, #20]
 8119622:	697b      	ldr	r3, [r7, #20]
 8119624:	2b00      	cmp	r3, #0
 8119626:	d1ef      	bne.n	8119608 <tcp_process+0x5c4>
 8119628:	687b      	ldr	r3, [r7, #4]
 811962a:	2200      	movs	r2, #0
 811962c:	60da      	str	r2, [r3, #12]
 811962e:	4b77      	ldr	r3, [pc, #476]	@ (811980c <tcp_process+0x7c8>)
 8119630:	2201      	movs	r2, #1
 8119632:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8119634:	687b      	ldr	r3, [r7, #4]
 8119636:	220a      	movs	r2, #10
 8119638:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 811963a:	4b75      	ldr	r3, [pc, #468]	@ (8119810 <tcp_process+0x7cc>)
 811963c:	681a      	ldr	r2, [r3, #0]
 811963e:	687b      	ldr	r3, [r7, #4]
 8119640:	60da      	str	r2, [r3, #12]
 8119642:	4a73      	ldr	r2, [pc, #460]	@ (8119810 <tcp_process+0x7cc>)
 8119644:	687b      	ldr	r3, [r7, #4]
 8119646:	6013      	str	r3, [r2, #0]
 8119648:	f002 fe54 	bl	811c2f4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 811964c:	e0d2      	b.n	81197f4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 811964e:	687b      	ldr	r3, [r7, #4]
 8119650:	8b5b      	ldrh	r3, [r3, #26]
 8119652:	f043 0302 	orr.w	r3, r3, #2
 8119656:	b29a      	uxth	r2, r3
 8119658:	687b      	ldr	r3, [r7, #4]
 811965a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 811965c:	687b      	ldr	r3, [r7, #4]
 811965e:	2208      	movs	r2, #8
 8119660:	751a      	strb	r2, [r3, #20]
      break;
 8119662:	e0c7      	b.n	81197f4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8119664:	4b6b      	ldr	r3, [pc, #428]	@ (8119814 <tcp_process+0x7d0>)
 8119666:	781b      	ldrb	r3, [r3, #0]
 8119668:	f003 0310 	and.w	r3, r3, #16
 811966c:	2b00      	cmp	r3, #0
 811966e:	f000 80c1 	beq.w	81197f4 <tcp_process+0x7b0>
 8119672:	687b      	ldr	r3, [r7, #4]
 8119674:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8119676:	4b68      	ldr	r3, [pc, #416]	@ (8119818 <tcp_process+0x7d4>)
 8119678:	681b      	ldr	r3, [r3, #0]
 811967a:	429a      	cmp	r2, r3
 811967c:	f040 80ba 	bne.w	81197f4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8119680:	687b      	ldr	r3, [r7, #4]
 8119682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8119684:	2b00      	cmp	r3, #0
 8119686:	f040 80b5 	bne.w	81197f4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 811968a:	687b      	ldr	r3, [r7, #4]
 811968c:	2206      	movs	r2, #6
 811968e:	751a      	strb	r2, [r3, #20]
      break;
 8119690:	e0b0      	b.n	81197f4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8119692:	6878      	ldr	r0, [r7, #4]
 8119694:	f000 f9ca 	bl	8119a2c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8119698:	4b60      	ldr	r3, [pc, #384]	@ (811981c <tcp_process+0x7d8>)
 811969a:	781b      	ldrb	r3, [r3, #0]
 811969c:	f003 0320 	and.w	r3, r3, #32
 81196a0:	2b00      	cmp	r3, #0
 81196a2:	f000 80a9 	beq.w	81197f8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 81196a6:	687b      	ldr	r3, [r7, #4]
 81196a8:	8b5b      	ldrh	r3, [r3, #26]
 81196aa:	f043 0302 	orr.w	r3, r3, #2
 81196ae:	b29a      	uxth	r2, r3
 81196b0:	687b      	ldr	r3, [r7, #4]
 81196b2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 81196b4:	6878      	ldr	r0, [r7, #4]
 81196b6:	f7fe fd39 	bl	811812c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 81196ba:	4b59      	ldr	r3, [pc, #356]	@ (8119820 <tcp_process+0x7dc>)
 81196bc:	681b      	ldr	r3, [r3, #0]
 81196be:	687a      	ldr	r2, [r7, #4]
 81196c0:	429a      	cmp	r2, r3
 81196c2:	d105      	bne.n	81196d0 <tcp_process+0x68c>
 81196c4:	4b56      	ldr	r3, [pc, #344]	@ (8119820 <tcp_process+0x7dc>)
 81196c6:	681b      	ldr	r3, [r3, #0]
 81196c8:	68db      	ldr	r3, [r3, #12]
 81196ca:	4a55      	ldr	r2, [pc, #340]	@ (8119820 <tcp_process+0x7dc>)
 81196cc:	6013      	str	r3, [r2, #0]
 81196ce:	e013      	b.n	81196f8 <tcp_process+0x6b4>
 81196d0:	4b53      	ldr	r3, [pc, #332]	@ (8119820 <tcp_process+0x7dc>)
 81196d2:	681b      	ldr	r3, [r3, #0]
 81196d4:	613b      	str	r3, [r7, #16]
 81196d6:	e00c      	b.n	81196f2 <tcp_process+0x6ae>
 81196d8:	693b      	ldr	r3, [r7, #16]
 81196da:	68db      	ldr	r3, [r3, #12]
 81196dc:	687a      	ldr	r2, [r7, #4]
 81196de:	429a      	cmp	r2, r3
 81196e0:	d104      	bne.n	81196ec <tcp_process+0x6a8>
 81196e2:	687b      	ldr	r3, [r7, #4]
 81196e4:	68da      	ldr	r2, [r3, #12]
 81196e6:	693b      	ldr	r3, [r7, #16]
 81196e8:	60da      	str	r2, [r3, #12]
 81196ea:	e005      	b.n	81196f8 <tcp_process+0x6b4>
 81196ec:	693b      	ldr	r3, [r7, #16]
 81196ee:	68db      	ldr	r3, [r3, #12]
 81196f0:	613b      	str	r3, [r7, #16]
 81196f2:	693b      	ldr	r3, [r7, #16]
 81196f4:	2b00      	cmp	r3, #0
 81196f6:	d1ef      	bne.n	81196d8 <tcp_process+0x694>
 81196f8:	687b      	ldr	r3, [r7, #4]
 81196fa:	2200      	movs	r2, #0
 81196fc:	60da      	str	r2, [r3, #12]
 81196fe:	4b43      	ldr	r3, [pc, #268]	@ (811980c <tcp_process+0x7c8>)
 8119700:	2201      	movs	r2, #1
 8119702:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8119704:	687b      	ldr	r3, [r7, #4]
 8119706:	220a      	movs	r2, #10
 8119708:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 811970a:	4b41      	ldr	r3, [pc, #260]	@ (8119810 <tcp_process+0x7cc>)
 811970c:	681a      	ldr	r2, [r3, #0]
 811970e:	687b      	ldr	r3, [r7, #4]
 8119710:	60da      	str	r2, [r3, #12]
 8119712:	4a3f      	ldr	r2, [pc, #252]	@ (8119810 <tcp_process+0x7cc>)
 8119714:	687b      	ldr	r3, [r7, #4]
 8119716:	6013      	str	r3, [r2, #0]
 8119718:	f002 fdec 	bl	811c2f4 <tcp_timer_needed>
      }
      break;
 811971c:	e06c      	b.n	81197f8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 811971e:	6878      	ldr	r0, [r7, #4]
 8119720:	f000 f984 	bl	8119a2c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8119724:	4b3b      	ldr	r3, [pc, #236]	@ (8119814 <tcp_process+0x7d0>)
 8119726:	781b      	ldrb	r3, [r3, #0]
 8119728:	f003 0310 	and.w	r3, r3, #16
 811972c:	2b00      	cmp	r3, #0
 811972e:	d065      	beq.n	81197fc <tcp_process+0x7b8>
 8119730:	687b      	ldr	r3, [r7, #4]
 8119732:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8119734:	4b38      	ldr	r3, [pc, #224]	@ (8119818 <tcp_process+0x7d4>)
 8119736:	681b      	ldr	r3, [r3, #0]
 8119738:	429a      	cmp	r2, r3
 811973a:	d15f      	bne.n	81197fc <tcp_process+0x7b8>
 811973c:	687b      	ldr	r3, [r7, #4]
 811973e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119740:	2b00      	cmp	r3, #0
 8119742:	d15b      	bne.n	81197fc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8119744:	6878      	ldr	r0, [r7, #4]
 8119746:	f7fe fcf1 	bl	811812c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 811974a:	4b35      	ldr	r3, [pc, #212]	@ (8119820 <tcp_process+0x7dc>)
 811974c:	681b      	ldr	r3, [r3, #0]
 811974e:	687a      	ldr	r2, [r7, #4]
 8119750:	429a      	cmp	r2, r3
 8119752:	d105      	bne.n	8119760 <tcp_process+0x71c>
 8119754:	4b32      	ldr	r3, [pc, #200]	@ (8119820 <tcp_process+0x7dc>)
 8119756:	681b      	ldr	r3, [r3, #0]
 8119758:	68db      	ldr	r3, [r3, #12]
 811975a:	4a31      	ldr	r2, [pc, #196]	@ (8119820 <tcp_process+0x7dc>)
 811975c:	6013      	str	r3, [r2, #0]
 811975e:	e013      	b.n	8119788 <tcp_process+0x744>
 8119760:	4b2f      	ldr	r3, [pc, #188]	@ (8119820 <tcp_process+0x7dc>)
 8119762:	681b      	ldr	r3, [r3, #0]
 8119764:	60fb      	str	r3, [r7, #12]
 8119766:	e00c      	b.n	8119782 <tcp_process+0x73e>
 8119768:	68fb      	ldr	r3, [r7, #12]
 811976a:	68db      	ldr	r3, [r3, #12]
 811976c:	687a      	ldr	r2, [r7, #4]
 811976e:	429a      	cmp	r2, r3
 8119770:	d104      	bne.n	811977c <tcp_process+0x738>
 8119772:	687b      	ldr	r3, [r7, #4]
 8119774:	68da      	ldr	r2, [r3, #12]
 8119776:	68fb      	ldr	r3, [r7, #12]
 8119778:	60da      	str	r2, [r3, #12]
 811977a:	e005      	b.n	8119788 <tcp_process+0x744>
 811977c:	68fb      	ldr	r3, [r7, #12]
 811977e:	68db      	ldr	r3, [r3, #12]
 8119780:	60fb      	str	r3, [r7, #12]
 8119782:	68fb      	ldr	r3, [r7, #12]
 8119784:	2b00      	cmp	r3, #0
 8119786:	d1ef      	bne.n	8119768 <tcp_process+0x724>
 8119788:	687b      	ldr	r3, [r7, #4]
 811978a:	2200      	movs	r2, #0
 811978c:	60da      	str	r2, [r3, #12]
 811978e:	4b1f      	ldr	r3, [pc, #124]	@ (811980c <tcp_process+0x7c8>)
 8119790:	2201      	movs	r2, #1
 8119792:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8119794:	687b      	ldr	r3, [r7, #4]
 8119796:	220a      	movs	r2, #10
 8119798:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 811979a:	4b1d      	ldr	r3, [pc, #116]	@ (8119810 <tcp_process+0x7cc>)
 811979c:	681a      	ldr	r2, [r3, #0]
 811979e:	687b      	ldr	r3, [r7, #4]
 81197a0:	60da      	str	r2, [r3, #12]
 81197a2:	4a1b      	ldr	r2, [pc, #108]	@ (8119810 <tcp_process+0x7cc>)
 81197a4:	687b      	ldr	r3, [r7, #4]
 81197a6:	6013      	str	r3, [r2, #0]
 81197a8:	f002 fda4 	bl	811c2f4 <tcp_timer_needed>
      }
      break;
 81197ac:	e026      	b.n	81197fc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 81197ae:	6878      	ldr	r0, [r7, #4]
 81197b0:	f000 f93c 	bl	8119a2c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 81197b4:	4b17      	ldr	r3, [pc, #92]	@ (8119814 <tcp_process+0x7d0>)
 81197b6:	781b      	ldrb	r3, [r3, #0]
 81197b8:	f003 0310 	and.w	r3, r3, #16
 81197bc:	2b00      	cmp	r3, #0
 81197be:	d01f      	beq.n	8119800 <tcp_process+0x7bc>
 81197c0:	687b      	ldr	r3, [r7, #4]
 81197c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81197c4:	4b14      	ldr	r3, [pc, #80]	@ (8119818 <tcp_process+0x7d4>)
 81197c6:	681b      	ldr	r3, [r3, #0]
 81197c8:	429a      	cmp	r2, r3
 81197ca:	d119      	bne.n	8119800 <tcp_process+0x7bc>
 81197cc:	687b      	ldr	r3, [r7, #4]
 81197ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81197d0:	2b00      	cmp	r3, #0
 81197d2:	d115      	bne.n	8119800 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 81197d4:	4b11      	ldr	r3, [pc, #68]	@ (811981c <tcp_process+0x7d8>)
 81197d6:	781b      	ldrb	r3, [r3, #0]
 81197d8:	f043 0310 	orr.w	r3, r3, #16
 81197dc:	b2da      	uxtb	r2, r3
 81197de:	4b0f      	ldr	r3, [pc, #60]	@ (811981c <tcp_process+0x7d8>)
 81197e0:	701a      	strb	r2, [r3, #0]
      }
      break;
 81197e2:	e00d      	b.n	8119800 <tcp_process+0x7bc>
    default:
      break;
 81197e4:	bf00      	nop
 81197e6:	e00c      	b.n	8119802 <tcp_process+0x7be>
      break;
 81197e8:	bf00      	nop
 81197ea:	e00a      	b.n	8119802 <tcp_process+0x7be>
      break;
 81197ec:	bf00      	nop
 81197ee:	e008      	b.n	8119802 <tcp_process+0x7be>
      break;
 81197f0:	bf00      	nop
 81197f2:	e006      	b.n	8119802 <tcp_process+0x7be>
      break;
 81197f4:	bf00      	nop
 81197f6:	e004      	b.n	8119802 <tcp_process+0x7be>
      break;
 81197f8:	bf00      	nop
 81197fa:	e002      	b.n	8119802 <tcp_process+0x7be>
      break;
 81197fc:	bf00      	nop
 81197fe:	e000      	b.n	8119802 <tcp_process+0x7be>
      break;
 8119800:	bf00      	nop
  }
  return ERR_OK;
 8119802:	2300      	movs	r3, #0
}
 8119804:	4618      	mov	r0, r3
 8119806:	3724      	adds	r7, #36	@ 0x24
 8119808:	46bd      	mov	sp, r7
 811980a:	bd90      	pop	{r4, r7, pc}
 811980c:	1001213c 	.word	0x1001213c
 8119810:	10012138 	.word	0x10012138
 8119814:	1001216c 	.word	0x1001216c
 8119818:	10012164 	.word	0x10012164
 811981c:	1001216d 	.word	0x1001216d
 8119820:	10012134 	.word	0x10012134

08119824 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8119824:	b590      	push	{r4, r7, lr}
 8119826:	b085      	sub	sp, #20
 8119828:	af00      	add	r7, sp, #0
 811982a:	6078      	str	r0, [r7, #4]
 811982c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 811982e:	687b      	ldr	r3, [r7, #4]
 8119830:	2b00      	cmp	r3, #0
 8119832:	d106      	bne.n	8119842 <tcp_oos_insert_segment+0x1e>
 8119834:	4b3b      	ldr	r3, [pc, #236]	@ (8119924 <tcp_oos_insert_segment+0x100>)
 8119836:	f240 421f 	movw	r2, #1055	@ 0x41f
 811983a:	493b      	ldr	r1, [pc, #236]	@ (8119928 <tcp_oos_insert_segment+0x104>)
 811983c:	483b      	ldr	r0, [pc, #236]	@ (811992c <tcp_oos_insert_segment+0x108>)
 811983e:	f004 facd 	bl	811dddc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8119842:	687b      	ldr	r3, [r7, #4]
 8119844:	68db      	ldr	r3, [r3, #12]
 8119846:	899b      	ldrh	r3, [r3, #12]
 8119848:	b29b      	uxth	r3, r3
 811984a:	4618      	mov	r0, r3
 811984c:	f7f8 fb26 	bl	8111e9c <lwip_htons>
 8119850:	4603      	mov	r3, r0
 8119852:	b2db      	uxtb	r3, r3
 8119854:	f003 0301 	and.w	r3, r3, #1
 8119858:	2b00      	cmp	r3, #0
 811985a:	d028      	beq.n	81198ae <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 811985c:	6838      	ldr	r0, [r7, #0]
 811985e:	f7fe f9fb 	bl	8117c58 <tcp_segs_free>
    next = NULL;
 8119862:	2300      	movs	r3, #0
 8119864:	603b      	str	r3, [r7, #0]
 8119866:	e056      	b.n	8119916 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8119868:	683b      	ldr	r3, [r7, #0]
 811986a:	68db      	ldr	r3, [r3, #12]
 811986c:	899b      	ldrh	r3, [r3, #12]
 811986e:	b29b      	uxth	r3, r3
 8119870:	4618      	mov	r0, r3
 8119872:	f7f8 fb13 	bl	8111e9c <lwip_htons>
 8119876:	4603      	mov	r3, r0
 8119878:	b2db      	uxtb	r3, r3
 811987a:	f003 0301 	and.w	r3, r3, #1
 811987e:	2b00      	cmp	r3, #0
 8119880:	d00d      	beq.n	811989e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8119882:	687b      	ldr	r3, [r7, #4]
 8119884:	68db      	ldr	r3, [r3, #12]
 8119886:	899b      	ldrh	r3, [r3, #12]
 8119888:	b29c      	uxth	r4, r3
 811988a:	2001      	movs	r0, #1
 811988c:	f7f8 fb06 	bl	8111e9c <lwip_htons>
 8119890:	4603      	mov	r3, r0
 8119892:	461a      	mov	r2, r3
 8119894:	687b      	ldr	r3, [r7, #4]
 8119896:	68db      	ldr	r3, [r3, #12]
 8119898:	4322      	orrs	r2, r4
 811989a:	b292      	uxth	r2, r2
 811989c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 811989e:	683b      	ldr	r3, [r7, #0]
 81198a0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 81198a2:	683b      	ldr	r3, [r7, #0]
 81198a4:	681b      	ldr	r3, [r3, #0]
 81198a6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 81198a8:	68f8      	ldr	r0, [r7, #12]
 81198aa:	f7fe f9ea 	bl	8117c82 <tcp_seg_free>
    while (next &&
 81198ae:	683b      	ldr	r3, [r7, #0]
 81198b0:	2b00      	cmp	r3, #0
 81198b2:	d00e      	beq.n	81198d2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 81198b4:	687b      	ldr	r3, [r7, #4]
 81198b6:	891b      	ldrh	r3, [r3, #8]
 81198b8:	461a      	mov	r2, r3
 81198ba:	4b1d      	ldr	r3, [pc, #116]	@ (8119930 <tcp_oos_insert_segment+0x10c>)
 81198bc:	681b      	ldr	r3, [r3, #0]
 81198be:	441a      	add	r2, r3
 81198c0:	683b      	ldr	r3, [r7, #0]
 81198c2:	68db      	ldr	r3, [r3, #12]
 81198c4:	685b      	ldr	r3, [r3, #4]
 81198c6:	6839      	ldr	r1, [r7, #0]
 81198c8:	8909      	ldrh	r1, [r1, #8]
 81198ca:	440b      	add	r3, r1
 81198cc:	1ad3      	subs	r3, r2, r3
    while (next &&
 81198ce:	2b00      	cmp	r3, #0
 81198d0:	daca      	bge.n	8119868 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 81198d2:	683b      	ldr	r3, [r7, #0]
 81198d4:	2b00      	cmp	r3, #0
 81198d6:	d01e      	beq.n	8119916 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 81198d8:	687b      	ldr	r3, [r7, #4]
 81198da:	891b      	ldrh	r3, [r3, #8]
 81198dc:	461a      	mov	r2, r3
 81198de:	4b14      	ldr	r3, [pc, #80]	@ (8119930 <tcp_oos_insert_segment+0x10c>)
 81198e0:	681b      	ldr	r3, [r3, #0]
 81198e2:	441a      	add	r2, r3
 81198e4:	683b      	ldr	r3, [r7, #0]
 81198e6:	68db      	ldr	r3, [r3, #12]
 81198e8:	685b      	ldr	r3, [r3, #4]
 81198ea:	1ad3      	subs	r3, r2, r3
    if (next &&
 81198ec:	2b00      	cmp	r3, #0
 81198ee:	dd12      	ble.n	8119916 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 81198f0:	683b      	ldr	r3, [r7, #0]
 81198f2:	68db      	ldr	r3, [r3, #12]
 81198f4:	685b      	ldr	r3, [r3, #4]
 81198f6:	b29a      	uxth	r2, r3
 81198f8:	4b0d      	ldr	r3, [pc, #52]	@ (8119930 <tcp_oos_insert_segment+0x10c>)
 81198fa:	681b      	ldr	r3, [r3, #0]
 81198fc:	b29b      	uxth	r3, r3
 81198fe:	1ad3      	subs	r3, r2, r3
 8119900:	b29a      	uxth	r2, r3
 8119902:	687b      	ldr	r3, [r7, #4]
 8119904:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8119906:	687b      	ldr	r3, [r7, #4]
 8119908:	685a      	ldr	r2, [r3, #4]
 811990a:	687b      	ldr	r3, [r7, #4]
 811990c:	891b      	ldrh	r3, [r3, #8]
 811990e:	4619      	mov	r1, r3
 8119910:	4610      	mov	r0, r2
 8119912:	f7fc fb49 	bl	8115fa8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8119916:	687b      	ldr	r3, [r7, #4]
 8119918:	683a      	ldr	r2, [r7, #0]
 811991a:	601a      	str	r2, [r3, #0]
}
 811991c:	bf00      	nop
 811991e:	3714      	adds	r7, #20
 8119920:	46bd      	mov	sp, r7
 8119922:	bd90      	pop	{r4, r7, pc}
 8119924:	081210f4 	.word	0x081210f4
 8119928:	081213f4 	.word	0x081213f4
 811992c:	08121180 	.word	0x08121180
 8119930:	10012160 	.word	0x10012160

08119934 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8119934:	b5b0      	push	{r4, r5, r7, lr}
 8119936:	b086      	sub	sp, #24
 8119938:	af00      	add	r7, sp, #0
 811993a:	60f8      	str	r0, [r7, #12]
 811993c:	60b9      	str	r1, [r7, #8]
 811993e:	607a      	str	r2, [r7, #4]
 8119940:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8119942:	e03e      	b.n	81199c2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8119944:	68bb      	ldr	r3, [r7, #8]
 8119946:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8119948:	68bb      	ldr	r3, [r7, #8]
 811994a:	681b      	ldr	r3, [r3, #0]
 811994c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 811994e:	697b      	ldr	r3, [r7, #20]
 8119950:	685b      	ldr	r3, [r3, #4]
 8119952:	4618      	mov	r0, r3
 8119954:	f7fc fd3a 	bl	81163cc <pbuf_clen>
 8119958:	4603      	mov	r3, r0
 811995a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 811995c:	68fb      	ldr	r3, [r7, #12]
 811995e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119962:	8a7a      	ldrh	r2, [r7, #18]
 8119964:	429a      	cmp	r2, r3
 8119966:	d906      	bls.n	8119976 <tcp_free_acked_segments+0x42>
 8119968:	4b2a      	ldr	r3, [pc, #168]	@ (8119a14 <tcp_free_acked_segments+0xe0>)
 811996a:	f240 4257 	movw	r2, #1111	@ 0x457
 811996e:	492a      	ldr	r1, [pc, #168]	@ (8119a18 <tcp_free_acked_segments+0xe4>)
 8119970:	482a      	ldr	r0, [pc, #168]	@ (8119a1c <tcp_free_acked_segments+0xe8>)
 8119972:	f004 fa33 	bl	811dddc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8119976:	68fb      	ldr	r3, [r7, #12]
 8119978:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 811997c:	8a7b      	ldrh	r3, [r7, #18]
 811997e:	1ad3      	subs	r3, r2, r3
 8119980:	b29a      	uxth	r2, r3
 8119982:	68fb      	ldr	r3, [r7, #12]
 8119984:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8119988:	697b      	ldr	r3, [r7, #20]
 811998a:	891a      	ldrh	r2, [r3, #8]
 811998c:	4b24      	ldr	r3, [pc, #144]	@ (8119a20 <tcp_free_acked_segments+0xec>)
 811998e:	881b      	ldrh	r3, [r3, #0]
 8119990:	4413      	add	r3, r2
 8119992:	b29a      	uxth	r2, r3
 8119994:	4b22      	ldr	r3, [pc, #136]	@ (8119a20 <tcp_free_acked_segments+0xec>)
 8119996:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8119998:	6978      	ldr	r0, [r7, #20]
 811999a:	f7fe f972 	bl	8117c82 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 811999e:	68fb      	ldr	r3, [r7, #12]
 81199a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81199a4:	2b00      	cmp	r3, #0
 81199a6:	d00c      	beq.n	81199c2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 81199a8:	68bb      	ldr	r3, [r7, #8]
 81199aa:	2b00      	cmp	r3, #0
 81199ac:	d109      	bne.n	81199c2 <tcp_free_acked_segments+0x8e>
 81199ae:	683b      	ldr	r3, [r7, #0]
 81199b0:	2b00      	cmp	r3, #0
 81199b2:	d106      	bne.n	81199c2 <tcp_free_acked_segments+0x8e>
 81199b4:	4b17      	ldr	r3, [pc, #92]	@ (8119a14 <tcp_free_acked_segments+0xe0>)
 81199b6:	f240 4261 	movw	r2, #1121	@ 0x461
 81199ba:	491a      	ldr	r1, [pc, #104]	@ (8119a24 <tcp_free_acked_segments+0xf0>)
 81199bc:	4817      	ldr	r0, [pc, #92]	@ (8119a1c <tcp_free_acked_segments+0xe8>)
 81199be:	f004 fa0d 	bl	811dddc <iprintf>
  while (seg_list != NULL &&
 81199c2:	68bb      	ldr	r3, [r7, #8]
 81199c4:	2b00      	cmp	r3, #0
 81199c6:	d020      	beq.n	8119a0a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 81199c8:	68bb      	ldr	r3, [r7, #8]
 81199ca:	68db      	ldr	r3, [r3, #12]
 81199cc:	685b      	ldr	r3, [r3, #4]
 81199ce:	4618      	mov	r0, r3
 81199d0:	f7f8 fa79 	bl	8111ec6 <lwip_htonl>
 81199d4:	4604      	mov	r4, r0
 81199d6:	68bb      	ldr	r3, [r7, #8]
 81199d8:	891b      	ldrh	r3, [r3, #8]
 81199da:	461d      	mov	r5, r3
 81199dc:	68bb      	ldr	r3, [r7, #8]
 81199de:	68db      	ldr	r3, [r3, #12]
 81199e0:	899b      	ldrh	r3, [r3, #12]
 81199e2:	b29b      	uxth	r3, r3
 81199e4:	4618      	mov	r0, r3
 81199e6:	f7f8 fa59 	bl	8111e9c <lwip_htons>
 81199ea:	4603      	mov	r3, r0
 81199ec:	b2db      	uxtb	r3, r3
 81199ee:	f003 0303 	and.w	r3, r3, #3
 81199f2:	2b00      	cmp	r3, #0
 81199f4:	d001      	beq.n	81199fa <tcp_free_acked_segments+0xc6>
 81199f6:	2301      	movs	r3, #1
 81199f8:	e000      	b.n	81199fc <tcp_free_acked_segments+0xc8>
 81199fa:	2300      	movs	r3, #0
 81199fc:	442b      	add	r3, r5
 81199fe:	18e2      	adds	r2, r4, r3
 8119a00:	4b09      	ldr	r3, [pc, #36]	@ (8119a28 <tcp_free_acked_segments+0xf4>)
 8119a02:	681b      	ldr	r3, [r3, #0]
 8119a04:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8119a06:	2b00      	cmp	r3, #0
 8119a08:	dd9c      	ble.n	8119944 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8119a0a:	68bb      	ldr	r3, [r7, #8]
}
 8119a0c:	4618      	mov	r0, r3
 8119a0e:	3718      	adds	r7, #24
 8119a10:	46bd      	mov	sp, r7
 8119a12:	bdb0      	pop	{r4, r5, r7, pc}
 8119a14:	081210f4 	.word	0x081210f4
 8119a18:	0812141c 	.word	0x0812141c
 8119a1c:	08121180 	.word	0x08121180
 8119a20:	10012168 	.word	0x10012168
 8119a24:	08121444 	.word	0x08121444
 8119a28:	10012164 	.word	0x10012164

08119a2c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8119a2c:	b5b0      	push	{r4, r5, r7, lr}
 8119a2e:	b094      	sub	sp, #80	@ 0x50
 8119a30:	af00      	add	r7, sp, #0
 8119a32:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8119a34:	2300      	movs	r3, #0
 8119a36:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8119a38:	687b      	ldr	r3, [r7, #4]
 8119a3a:	2b00      	cmp	r3, #0
 8119a3c:	d106      	bne.n	8119a4c <tcp_receive+0x20>
 8119a3e:	4b91      	ldr	r3, [pc, #580]	@ (8119c84 <tcp_receive+0x258>)
 8119a40:	f240 427b 	movw	r2, #1147	@ 0x47b
 8119a44:	4990      	ldr	r1, [pc, #576]	@ (8119c88 <tcp_receive+0x25c>)
 8119a46:	4891      	ldr	r0, [pc, #580]	@ (8119c8c <tcp_receive+0x260>)
 8119a48:	f004 f9c8 	bl	811dddc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8119a4c:	687b      	ldr	r3, [r7, #4]
 8119a4e:	7d1b      	ldrb	r3, [r3, #20]
 8119a50:	2b03      	cmp	r3, #3
 8119a52:	d806      	bhi.n	8119a62 <tcp_receive+0x36>
 8119a54:	4b8b      	ldr	r3, [pc, #556]	@ (8119c84 <tcp_receive+0x258>)
 8119a56:	f240 427c 	movw	r2, #1148	@ 0x47c
 8119a5a:	498d      	ldr	r1, [pc, #564]	@ (8119c90 <tcp_receive+0x264>)
 8119a5c:	488b      	ldr	r0, [pc, #556]	@ (8119c8c <tcp_receive+0x260>)
 8119a5e:	f004 f9bd 	bl	811dddc <iprintf>

  if (flags & TCP_ACK) {
 8119a62:	4b8c      	ldr	r3, [pc, #560]	@ (8119c94 <tcp_receive+0x268>)
 8119a64:	781b      	ldrb	r3, [r3, #0]
 8119a66:	f003 0310 	and.w	r3, r3, #16
 8119a6a:	2b00      	cmp	r3, #0
 8119a6c:	f000 8264 	beq.w	8119f38 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8119a70:	687b      	ldr	r3, [r7, #4]
 8119a72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8119a76:	461a      	mov	r2, r3
 8119a78:	687b      	ldr	r3, [r7, #4]
 8119a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8119a7c:	4413      	add	r3, r2
 8119a7e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8119a80:	687b      	ldr	r3, [r7, #4]
 8119a82:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8119a84:	4b84      	ldr	r3, [pc, #528]	@ (8119c98 <tcp_receive+0x26c>)
 8119a86:	681b      	ldr	r3, [r3, #0]
 8119a88:	1ad3      	subs	r3, r2, r3
 8119a8a:	2b00      	cmp	r3, #0
 8119a8c:	db1b      	blt.n	8119ac6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8119a8e:	687b      	ldr	r3, [r7, #4]
 8119a90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8119a92:	4b81      	ldr	r3, [pc, #516]	@ (8119c98 <tcp_receive+0x26c>)
 8119a94:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8119a96:	429a      	cmp	r2, r3
 8119a98:	d106      	bne.n	8119aa8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8119a9a:	687b      	ldr	r3, [r7, #4]
 8119a9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8119a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8119c9c <tcp_receive+0x270>)
 8119aa0:	681b      	ldr	r3, [r3, #0]
 8119aa2:	1ad3      	subs	r3, r2, r3
 8119aa4:	2b00      	cmp	r3, #0
 8119aa6:	db0e      	blt.n	8119ac6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8119aa8:	687b      	ldr	r3, [r7, #4]
 8119aaa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8119aac:	4b7b      	ldr	r3, [pc, #492]	@ (8119c9c <tcp_receive+0x270>)
 8119aae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8119ab0:	429a      	cmp	r2, r3
 8119ab2:	d125      	bne.n	8119b00 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8119ab4:	4b7a      	ldr	r3, [pc, #488]	@ (8119ca0 <tcp_receive+0x274>)
 8119ab6:	681b      	ldr	r3, [r3, #0]
 8119ab8:	89db      	ldrh	r3, [r3, #14]
 8119aba:	b29a      	uxth	r2, r3
 8119abc:	687b      	ldr	r3, [r7, #4]
 8119abe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8119ac2:	429a      	cmp	r2, r3
 8119ac4:	d91c      	bls.n	8119b00 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8119ac6:	4b76      	ldr	r3, [pc, #472]	@ (8119ca0 <tcp_receive+0x274>)
 8119ac8:	681b      	ldr	r3, [r3, #0]
 8119aca:	89db      	ldrh	r3, [r3, #14]
 8119acc:	b29a      	uxth	r2, r3
 8119ace:	687b      	ldr	r3, [r7, #4]
 8119ad0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8119ad4:	687b      	ldr	r3, [r7, #4]
 8119ad6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8119ada:	687b      	ldr	r3, [r7, #4]
 8119adc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8119ae0:	429a      	cmp	r2, r3
 8119ae2:	d205      	bcs.n	8119af0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8119ae4:	687b      	ldr	r3, [r7, #4]
 8119ae6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8119aea:	687b      	ldr	r3, [r7, #4]
 8119aec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8119af0:	4b69      	ldr	r3, [pc, #420]	@ (8119c98 <tcp_receive+0x26c>)
 8119af2:	681a      	ldr	r2, [r3, #0]
 8119af4:	687b      	ldr	r3, [r7, #4]
 8119af6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8119af8:	4b68      	ldr	r3, [pc, #416]	@ (8119c9c <tcp_receive+0x270>)
 8119afa:	681a      	ldr	r2, [r3, #0]
 8119afc:	687b      	ldr	r3, [r7, #4]
 8119afe:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8119b00:	4b66      	ldr	r3, [pc, #408]	@ (8119c9c <tcp_receive+0x270>)
 8119b02:	681a      	ldr	r2, [r3, #0]
 8119b04:	687b      	ldr	r3, [r7, #4]
 8119b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8119b08:	1ad3      	subs	r3, r2, r3
 8119b0a:	2b00      	cmp	r3, #0
 8119b0c:	dc58      	bgt.n	8119bc0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8119b0e:	4b65      	ldr	r3, [pc, #404]	@ (8119ca4 <tcp_receive+0x278>)
 8119b10:	881b      	ldrh	r3, [r3, #0]
 8119b12:	2b00      	cmp	r3, #0
 8119b14:	d14b      	bne.n	8119bae <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8119b16:	687b      	ldr	r3, [r7, #4]
 8119b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8119b1a:	687a      	ldr	r2, [r7, #4]
 8119b1c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8119b20:	4413      	add	r3, r2
 8119b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8119b24:	429a      	cmp	r2, r3
 8119b26:	d142      	bne.n	8119bae <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8119b28:	687b      	ldr	r3, [r7, #4]
 8119b2a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8119b2e:	2b00      	cmp	r3, #0
 8119b30:	db3d      	blt.n	8119bae <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8119b32:	687b      	ldr	r3, [r7, #4]
 8119b34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8119b36:	4b59      	ldr	r3, [pc, #356]	@ (8119c9c <tcp_receive+0x270>)
 8119b38:	681b      	ldr	r3, [r3, #0]
 8119b3a:	429a      	cmp	r2, r3
 8119b3c:	d137      	bne.n	8119bae <tcp_receive+0x182>
              found_dupack = 1;
 8119b3e:	2301      	movs	r3, #1
 8119b40:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8119b42:	687b      	ldr	r3, [r7, #4]
 8119b44:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8119b48:	2bff      	cmp	r3, #255	@ 0xff
 8119b4a:	d007      	beq.n	8119b5c <tcp_receive+0x130>
                ++pcb->dupacks;
 8119b4c:	687b      	ldr	r3, [r7, #4]
 8119b4e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8119b52:	3301      	adds	r3, #1
 8119b54:	b2da      	uxtb	r2, r3
 8119b56:	687b      	ldr	r3, [r7, #4]
 8119b58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8119b5c:	687b      	ldr	r3, [r7, #4]
 8119b5e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8119b62:	2b03      	cmp	r3, #3
 8119b64:	d91b      	bls.n	8119b9e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8119b66:	687b      	ldr	r3, [r7, #4]
 8119b68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8119b6c:	687b      	ldr	r3, [r7, #4]
 8119b6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8119b70:	4413      	add	r3, r2
 8119b72:	b29a      	uxth	r2, r3
 8119b74:	687b      	ldr	r3, [r7, #4]
 8119b76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8119b7a:	429a      	cmp	r2, r3
 8119b7c:	d30a      	bcc.n	8119b94 <tcp_receive+0x168>
 8119b7e:	687b      	ldr	r3, [r7, #4]
 8119b80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8119b84:	687b      	ldr	r3, [r7, #4]
 8119b86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8119b88:	4413      	add	r3, r2
 8119b8a:	b29a      	uxth	r2, r3
 8119b8c:	687b      	ldr	r3, [r7, #4]
 8119b8e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8119b92:	e004      	b.n	8119b9e <tcp_receive+0x172>
 8119b94:	687b      	ldr	r3, [r7, #4]
 8119b96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8119b9a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8119b9e:	687b      	ldr	r3, [r7, #4]
 8119ba0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8119ba4:	2b02      	cmp	r3, #2
 8119ba6:	d902      	bls.n	8119bae <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8119ba8:	6878      	ldr	r0, [r7, #4]
 8119baa:	f001 fee9 	bl	811b980 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8119bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8119bb0:	2b00      	cmp	r3, #0
 8119bb2:	f040 8161 	bne.w	8119e78 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8119bb6:	687b      	ldr	r3, [r7, #4]
 8119bb8:	2200      	movs	r2, #0
 8119bba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8119bbe:	e15b      	b.n	8119e78 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8119bc0:	4b36      	ldr	r3, [pc, #216]	@ (8119c9c <tcp_receive+0x270>)
 8119bc2:	681a      	ldr	r2, [r3, #0]
 8119bc4:	687b      	ldr	r3, [r7, #4]
 8119bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8119bc8:	1ad3      	subs	r3, r2, r3
 8119bca:	3b01      	subs	r3, #1
 8119bcc:	2b00      	cmp	r3, #0
 8119bce:	f2c0 814e 	blt.w	8119e6e <tcp_receive+0x442>
 8119bd2:	4b32      	ldr	r3, [pc, #200]	@ (8119c9c <tcp_receive+0x270>)
 8119bd4:	681a      	ldr	r2, [r3, #0]
 8119bd6:	687b      	ldr	r3, [r7, #4]
 8119bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8119bda:	1ad3      	subs	r3, r2, r3
 8119bdc:	2b00      	cmp	r3, #0
 8119bde:	f300 8146 	bgt.w	8119e6e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8119be2:	687b      	ldr	r3, [r7, #4]
 8119be4:	8b5b      	ldrh	r3, [r3, #26]
 8119be6:	f003 0304 	and.w	r3, r3, #4
 8119bea:	2b00      	cmp	r3, #0
 8119bec:	d010      	beq.n	8119c10 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8119bee:	687b      	ldr	r3, [r7, #4]
 8119bf0:	8b5b      	ldrh	r3, [r3, #26]
 8119bf2:	f023 0304 	bic.w	r3, r3, #4
 8119bf6:	b29a      	uxth	r2, r3
 8119bf8:	687b      	ldr	r3, [r7, #4]
 8119bfa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8119bfc:	687b      	ldr	r3, [r7, #4]
 8119bfe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8119c02:	687b      	ldr	r3, [r7, #4]
 8119c04:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8119c08:	687b      	ldr	r3, [r7, #4]
 8119c0a:	2200      	movs	r2, #0
 8119c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8119c10:	687b      	ldr	r3, [r7, #4]
 8119c12:	2200      	movs	r2, #0
 8119c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8119c18:	687b      	ldr	r3, [r7, #4]
 8119c1a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8119c1e:	10db      	asrs	r3, r3, #3
 8119c20:	b21b      	sxth	r3, r3
 8119c22:	b29a      	uxth	r2, r3
 8119c24:	687b      	ldr	r3, [r7, #4]
 8119c26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8119c2a:	b29b      	uxth	r3, r3
 8119c2c:	4413      	add	r3, r2
 8119c2e:	b29b      	uxth	r3, r3
 8119c30:	b21a      	sxth	r2, r3
 8119c32:	687b      	ldr	r3, [r7, #4]
 8119c34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8119c38:	4b18      	ldr	r3, [pc, #96]	@ (8119c9c <tcp_receive+0x270>)
 8119c3a:	681b      	ldr	r3, [r3, #0]
 8119c3c:	b29a      	uxth	r2, r3
 8119c3e:	687b      	ldr	r3, [r7, #4]
 8119c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8119c42:	b29b      	uxth	r3, r3
 8119c44:	1ad3      	subs	r3, r2, r3
 8119c46:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8119c48:	687b      	ldr	r3, [r7, #4]
 8119c4a:	2200      	movs	r2, #0
 8119c4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8119c50:	4b12      	ldr	r3, [pc, #72]	@ (8119c9c <tcp_receive+0x270>)
 8119c52:	681a      	ldr	r2, [r3, #0]
 8119c54:	687b      	ldr	r3, [r7, #4]
 8119c56:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8119c58:	687b      	ldr	r3, [r7, #4]
 8119c5a:	7d1b      	ldrb	r3, [r3, #20]
 8119c5c:	2b03      	cmp	r3, #3
 8119c5e:	f240 8097 	bls.w	8119d90 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8119c62:	687b      	ldr	r3, [r7, #4]
 8119c64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8119c68:	687b      	ldr	r3, [r7, #4]
 8119c6a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8119c6e:	429a      	cmp	r2, r3
 8119c70:	d245      	bcs.n	8119cfe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8119c72:	687b      	ldr	r3, [r7, #4]
 8119c74:	8b5b      	ldrh	r3, [r3, #26]
 8119c76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8119c7a:	2b00      	cmp	r3, #0
 8119c7c:	d014      	beq.n	8119ca8 <tcp_receive+0x27c>
 8119c7e:	2301      	movs	r3, #1
 8119c80:	e013      	b.n	8119caa <tcp_receive+0x27e>
 8119c82:	bf00      	nop
 8119c84:	081210f4 	.word	0x081210f4
 8119c88:	08121464 	.word	0x08121464
 8119c8c:	08121180 	.word	0x08121180
 8119c90:	08121480 	.word	0x08121480
 8119c94:	1001216c 	.word	0x1001216c
 8119c98:	10012160 	.word	0x10012160
 8119c9c:	10012164 	.word	0x10012164
 8119ca0:	10012150 	.word	0x10012150
 8119ca4:	1001216a 	.word	0x1001216a
 8119ca8:	2302      	movs	r3, #2
 8119caa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8119cae:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8119cb2:	b29a      	uxth	r2, r3
 8119cb4:	687b      	ldr	r3, [r7, #4]
 8119cb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8119cb8:	fb12 f303 	smulbb	r3, r2, r3
 8119cbc:	b29b      	uxth	r3, r3
 8119cbe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8119cc0:	4293      	cmp	r3, r2
 8119cc2:	bf28      	it	cs
 8119cc4:	4613      	movcs	r3, r2
 8119cc6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8119cc8:	687b      	ldr	r3, [r7, #4]
 8119cca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8119cce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8119cd0:	4413      	add	r3, r2
 8119cd2:	b29a      	uxth	r2, r3
 8119cd4:	687b      	ldr	r3, [r7, #4]
 8119cd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8119cda:	429a      	cmp	r2, r3
 8119cdc:	d309      	bcc.n	8119cf2 <tcp_receive+0x2c6>
 8119cde:	687b      	ldr	r3, [r7, #4]
 8119ce0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8119ce4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8119ce6:	4413      	add	r3, r2
 8119ce8:	b29a      	uxth	r2, r3
 8119cea:	687b      	ldr	r3, [r7, #4]
 8119cec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8119cf0:	e04e      	b.n	8119d90 <tcp_receive+0x364>
 8119cf2:	687b      	ldr	r3, [r7, #4]
 8119cf4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8119cf8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8119cfc:	e048      	b.n	8119d90 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8119cfe:	687b      	ldr	r3, [r7, #4]
 8119d00:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8119d04:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8119d06:	4413      	add	r3, r2
 8119d08:	b29a      	uxth	r2, r3
 8119d0a:	687b      	ldr	r3, [r7, #4]
 8119d0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8119d10:	429a      	cmp	r2, r3
 8119d12:	d309      	bcc.n	8119d28 <tcp_receive+0x2fc>
 8119d14:	687b      	ldr	r3, [r7, #4]
 8119d16:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8119d1a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8119d1c:	4413      	add	r3, r2
 8119d1e:	b29a      	uxth	r2, r3
 8119d20:	687b      	ldr	r3, [r7, #4]
 8119d22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8119d26:	e004      	b.n	8119d32 <tcp_receive+0x306>
 8119d28:	687b      	ldr	r3, [r7, #4]
 8119d2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8119d2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8119d32:	687b      	ldr	r3, [r7, #4]
 8119d34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8119d38:	687b      	ldr	r3, [r7, #4]
 8119d3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8119d3e:	429a      	cmp	r2, r3
 8119d40:	d326      	bcc.n	8119d90 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8119d42:	687b      	ldr	r3, [r7, #4]
 8119d44:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8119d48:	687b      	ldr	r3, [r7, #4]
 8119d4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8119d4e:	1ad3      	subs	r3, r2, r3
 8119d50:	b29a      	uxth	r2, r3
 8119d52:	687b      	ldr	r3, [r7, #4]
 8119d54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8119d58:	687b      	ldr	r3, [r7, #4]
 8119d5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8119d5e:	687b      	ldr	r3, [r7, #4]
 8119d60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8119d62:	4413      	add	r3, r2
 8119d64:	b29a      	uxth	r2, r3
 8119d66:	687b      	ldr	r3, [r7, #4]
 8119d68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8119d6c:	429a      	cmp	r2, r3
 8119d6e:	d30a      	bcc.n	8119d86 <tcp_receive+0x35a>
 8119d70:	687b      	ldr	r3, [r7, #4]
 8119d72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8119d76:	687b      	ldr	r3, [r7, #4]
 8119d78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8119d7a:	4413      	add	r3, r2
 8119d7c:	b29a      	uxth	r2, r3
 8119d7e:	687b      	ldr	r3, [r7, #4]
 8119d80:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8119d84:	e004      	b.n	8119d90 <tcp_receive+0x364>
 8119d86:	687b      	ldr	r3, [r7, #4]
 8119d88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8119d8c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8119d90:	687b      	ldr	r3, [r7, #4]
 8119d92:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8119d94:	687b      	ldr	r3, [r7, #4]
 8119d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119d98:	4a98      	ldr	r2, [pc, #608]	@ (8119ffc <tcp_receive+0x5d0>)
 8119d9a:	6878      	ldr	r0, [r7, #4]
 8119d9c:	f7ff fdca 	bl	8119934 <tcp_free_acked_segments>
 8119da0:	4602      	mov	r2, r0
 8119da2:	687b      	ldr	r3, [r7, #4]
 8119da4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8119da6:	687b      	ldr	r3, [r7, #4]
 8119da8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8119daa:	687b      	ldr	r3, [r7, #4]
 8119dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8119dae:	4a94      	ldr	r2, [pc, #592]	@ (811a000 <tcp_receive+0x5d4>)
 8119db0:	6878      	ldr	r0, [r7, #4]
 8119db2:	f7ff fdbf 	bl	8119934 <tcp_free_acked_segments>
 8119db6:	4602      	mov	r2, r0
 8119db8:	687b      	ldr	r3, [r7, #4]
 8119dba:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8119dbc:	687b      	ldr	r3, [r7, #4]
 8119dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8119dc0:	2b00      	cmp	r3, #0
 8119dc2:	d104      	bne.n	8119dce <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8119dc4:	687b      	ldr	r3, [r7, #4]
 8119dc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8119dca:	861a      	strh	r2, [r3, #48]	@ 0x30
 8119dcc:	e002      	b.n	8119dd4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8119dce:	687b      	ldr	r3, [r7, #4]
 8119dd0:	2200      	movs	r2, #0
 8119dd2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8119dd4:	687b      	ldr	r3, [r7, #4]
 8119dd6:	2200      	movs	r2, #0
 8119dd8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8119dda:	687b      	ldr	r3, [r7, #4]
 8119ddc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119dde:	2b00      	cmp	r3, #0
 8119de0:	d103      	bne.n	8119dea <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8119de2:	687b      	ldr	r3, [r7, #4]
 8119de4:	2200      	movs	r2, #0
 8119de6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8119dea:	687b      	ldr	r3, [r7, #4]
 8119dec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8119df0:	4b84      	ldr	r3, [pc, #528]	@ (811a004 <tcp_receive+0x5d8>)
 8119df2:	881b      	ldrh	r3, [r3, #0]
 8119df4:	4413      	add	r3, r2
 8119df6:	b29a      	uxth	r2, r3
 8119df8:	687b      	ldr	r3, [r7, #4]
 8119dfa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8119dfe:	687b      	ldr	r3, [r7, #4]
 8119e00:	8b5b      	ldrh	r3, [r3, #26]
 8119e02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8119e06:	2b00      	cmp	r3, #0
 8119e08:	d035      	beq.n	8119e76 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8119e0a:	687b      	ldr	r3, [r7, #4]
 8119e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8119e0e:	2b00      	cmp	r3, #0
 8119e10:	d118      	bne.n	8119e44 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8119e12:	687b      	ldr	r3, [r7, #4]
 8119e14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119e16:	2b00      	cmp	r3, #0
 8119e18:	d00c      	beq.n	8119e34 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8119e1a:	687b      	ldr	r3, [r7, #4]
 8119e1c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8119e1e:	687b      	ldr	r3, [r7, #4]
 8119e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119e22:	68db      	ldr	r3, [r3, #12]
 8119e24:	685b      	ldr	r3, [r3, #4]
 8119e26:	4618      	mov	r0, r3
 8119e28:	f7f8 f84d 	bl	8111ec6 <lwip_htonl>
 8119e2c:	4603      	mov	r3, r0
 8119e2e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8119e30:	2b00      	cmp	r3, #0
 8119e32:	dc20      	bgt.n	8119e76 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8119e34:	687b      	ldr	r3, [r7, #4]
 8119e36:	8b5b      	ldrh	r3, [r3, #26]
 8119e38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8119e3c:	b29a      	uxth	r2, r3
 8119e3e:	687b      	ldr	r3, [r7, #4]
 8119e40:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8119e42:	e018      	b.n	8119e76 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8119e44:	687b      	ldr	r3, [r7, #4]
 8119e46:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8119e48:	687b      	ldr	r3, [r7, #4]
 8119e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8119e4c:	68db      	ldr	r3, [r3, #12]
 8119e4e:	685b      	ldr	r3, [r3, #4]
 8119e50:	4618      	mov	r0, r3
 8119e52:	f7f8 f838 	bl	8111ec6 <lwip_htonl>
 8119e56:	4603      	mov	r3, r0
 8119e58:	1ae3      	subs	r3, r4, r3
 8119e5a:	2b00      	cmp	r3, #0
 8119e5c:	dc0b      	bgt.n	8119e76 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8119e5e:	687b      	ldr	r3, [r7, #4]
 8119e60:	8b5b      	ldrh	r3, [r3, #26]
 8119e62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8119e66:	b29a      	uxth	r2, r3
 8119e68:	687b      	ldr	r3, [r7, #4]
 8119e6a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8119e6c:	e003      	b.n	8119e76 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8119e6e:	6878      	ldr	r0, [r7, #4]
 8119e70:	f001 ff72 	bl	811bd58 <tcp_send_empty_ack>
 8119e74:	e000      	b.n	8119e78 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8119e76:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8119e78:	687b      	ldr	r3, [r7, #4]
 8119e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8119e7c:	2b00      	cmp	r3, #0
 8119e7e:	d05b      	beq.n	8119f38 <tcp_receive+0x50c>
 8119e80:	687b      	ldr	r3, [r7, #4]
 8119e82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8119e84:	4b60      	ldr	r3, [pc, #384]	@ (811a008 <tcp_receive+0x5dc>)
 8119e86:	681b      	ldr	r3, [r3, #0]
 8119e88:	1ad3      	subs	r3, r2, r3
 8119e8a:	2b00      	cmp	r3, #0
 8119e8c:	da54      	bge.n	8119f38 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8119e8e:	4b5f      	ldr	r3, [pc, #380]	@ (811a00c <tcp_receive+0x5e0>)
 8119e90:	681b      	ldr	r3, [r3, #0]
 8119e92:	b29a      	uxth	r2, r3
 8119e94:	687b      	ldr	r3, [r7, #4]
 8119e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8119e98:	b29b      	uxth	r3, r3
 8119e9a:	1ad3      	subs	r3, r2, r3
 8119e9c:	b29b      	uxth	r3, r3
 8119e9e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8119ea2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8119ea6:	687b      	ldr	r3, [r7, #4]
 8119ea8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8119eac:	10db      	asrs	r3, r3, #3
 8119eae:	b21b      	sxth	r3, r3
 8119eb0:	b29b      	uxth	r3, r3
 8119eb2:	1ad3      	subs	r3, r2, r3
 8119eb4:	b29b      	uxth	r3, r3
 8119eb6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8119eba:	687b      	ldr	r3, [r7, #4]
 8119ebc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8119ec0:	b29a      	uxth	r2, r3
 8119ec2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8119ec6:	4413      	add	r3, r2
 8119ec8:	b29b      	uxth	r3, r3
 8119eca:	b21a      	sxth	r2, r3
 8119ecc:	687b      	ldr	r3, [r7, #4]
 8119ece:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8119ed0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8119ed4:	2b00      	cmp	r3, #0
 8119ed6:	da05      	bge.n	8119ee4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8119ed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8119edc:	425b      	negs	r3, r3
 8119ede:	b29b      	uxth	r3, r3
 8119ee0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8119ee4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8119ee8:	687b      	ldr	r3, [r7, #4]
 8119eea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8119eee:	109b      	asrs	r3, r3, #2
 8119ef0:	b21b      	sxth	r3, r3
 8119ef2:	b29b      	uxth	r3, r3
 8119ef4:	1ad3      	subs	r3, r2, r3
 8119ef6:	b29b      	uxth	r3, r3
 8119ef8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8119efc:	687b      	ldr	r3, [r7, #4]
 8119efe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8119f02:	b29a      	uxth	r2, r3
 8119f04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8119f08:	4413      	add	r3, r2
 8119f0a:	b29b      	uxth	r3, r3
 8119f0c:	b21a      	sxth	r2, r3
 8119f0e:	687b      	ldr	r3, [r7, #4]
 8119f10:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8119f12:	687b      	ldr	r3, [r7, #4]
 8119f14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8119f18:	10db      	asrs	r3, r3, #3
 8119f1a:	b21b      	sxth	r3, r3
 8119f1c:	b29a      	uxth	r2, r3
 8119f1e:	687b      	ldr	r3, [r7, #4]
 8119f20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8119f24:	b29b      	uxth	r3, r3
 8119f26:	4413      	add	r3, r2
 8119f28:	b29b      	uxth	r3, r3
 8119f2a:	b21a      	sxth	r2, r3
 8119f2c:	687b      	ldr	r3, [r7, #4]
 8119f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8119f32:	687b      	ldr	r3, [r7, #4]
 8119f34:	2200      	movs	r2, #0
 8119f36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8119f38:	4b35      	ldr	r3, [pc, #212]	@ (811a010 <tcp_receive+0x5e4>)
 8119f3a:	881b      	ldrh	r3, [r3, #0]
 8119f3c:	2b00      	cmp	r3, #0
 8119f3e:	f000 84df 	beq.w	811a900 <tcp_receive+0xed4>
 8119f42:	687b      	ldr	r3, [r7, #4]
 8119f44:	7d1b      	ldrb	r3, [r3, #20]
 8119f46:	2b06      	cmp	r3, #6
 8119f48:	f200 84da 	bhi.w	811a900 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8119f4c:	687b      	ldr	r3, [r7, #4]
 8119f4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8119f50:	4b30      	ldr	r3, [pc, #192]	@ (811a014 <tcp_receive+0x5e8>)
 8119f52:	681b      	ldr	r3, [r3, #0]
 8119f54:	1ad3      	subs	r3, r2, r3
 8119f56:	3b01      	subs	r3, #1
 8119f58:	2b00      	cmp	r3, #0
 8119f5a:	f2c0 808f 	blt.w	811a07c <tcp_receive+0x650>
 8119f5e:	687b      	ldr	r3, [r7, #4]
 8119f60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8119f62:	4b2b      	ldr	r3, [pc, #172]	@ (811a010 <tcp_receive+0x5e4>)
 8119f64:	881b      	ldrh	r3, [r3, #0]
 8119f66:	4619      	mov	r1, r3
 8119f68:	4b2a      	ldr	r3, [pc, #168]	@ (811a014 <tcp_receive+0x5e8>)
 8119f6a:	681b      	ldr	r3, [r3, #0]
 8119f6c:	440b      	add	r3, r1
 8119f6e:	1ad3      	subs	r3, r2, r3
 8119f70:	3301      	adds	r3, #1
 8119f72:	2b00      	cmp	r3, #0
 8119f74:	f300 8082 	bgt.w	811a07c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8119f78:	4b27      	ldr	r3, [pc, #156]	@ (811a018 <tcp_receive+0x5ec>)
 8119f7a:	685b      	ldr	r3, [r3, #4]
 8119f7c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8119f7e:	687b      	ldr	r3, [r7, #4]
 8119f80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8119f82:	4b24      	ldr	r3, [pc, #144]	@ (811a014 <tcp_receive+0x5e8>)
 8119f84:	681b      	ldr	r3, [r3, #0]
 8119f86:	1ad3      	subs	r3, r2, r3
 8119f88:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8119f8a:	4b23      	ldr	r3, [pc, #140]	@ (811a018 <tcp_receive+0x5ec>)
 8119f8c:	685b      	ldr	r3, [r3, #4]
 8119f8e:	2b00      	cmp	r3, #0
 8119f90:	d106      	bne.n	8119fa0 <tcp_receive+0x574>
 8119f92:	4b22      	ldr	r3, [pc, #136]	@ (811a01c <tcp_receive+0x5f0>)
 8119f94:	f240 5294 	movw	r2, #1428	@ 0x594
 8119f98:	4921      	ldr	r1, [pc, #132]	@ (811a020 <tcp_receive+0x5f4>)
 8119f9a:	4822      	ldr	r0, [pc, #136]	@ (811a024 <tcp_receive+0x5f8>)
 8119f9c:	f003 ff1e 	bl	811dddc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8119fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119fa2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8119fa6:	4293      	cmp	r3, r2
 8119fa8:	d906      	bls.n	8119fb8 <tcp_receive+0x58c>
 8119faa:	4b1c      	ldr	r3, [pc, #112]	@ (811a01c <tcp_receive+0x5f0>)
 8119fac:	f240 5295 	movw	r2, #1429	@ 0x595
 8119fb0:	491d      	ldr	r1, [pc, #116]	@ (811a028 <tcp_receive+0x5fc>)
 8119fb2:	481c      	ldr	r0, [pc, #112]	@ (811a024 <tcp_receive+0x5f8>)
 8119fb4:	f003 ff12 	bl	811dddc <iprintf>
      off = (u16_t)off32;
 8119fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119fba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8119fbe:	4b16      	ldr	r3, [pc, #88]	@ (811a018 <tcp_receive+0x5ec>)
 8119fc0:	685b      	ldr	r3, [r3, #4]
 8119fc2:	891b      	ldrh	r3, [r3, #8]
 8119fc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8119fc8:	429a      	cmp	r2, r3
 8119fca:	d906      	bls.n	8119fda <tcp_receive+0x5ae>
 8119fcc:	4b13      	ldr	r3, [pc, #76]	@ (811a01c <tcp_receive+0x5f0>)
 8119fce:	f240 5297 	movw	r2, #1431	@ 0x597
 8119fd2:	4916      	ldr	r1, [pc, #88]	@ (811a02c <tcp_receive+0x600>)
 8119fd4:	4813      	ldr	r0, [pc, #76]	@ (811a024 <tcp_receive+0x5f8>)
 8119fd6:	f003 ff01 	bl	811dddc <iprintf>
      inseg.len -= off;
 8119fda:	4b0f      	ldr	r3, [pc, #60]	@ (811a018 <tcp_receive+0x5ec>)
 8119fdc:	891a      	ldrh	r2, [r3, #8]
 8119fde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8119fe2:	1ad3      	subs	r3, r2, r3
 8119fe4:	b29a      	uxth	r2, r3
 8119fe6:	4b0c      	ldr	r3, [pc, #48]	@ (811a018 <tcp_receive+0x5ec>)
 8119fe8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8119fea:	4b0b      	ldr	r3, [pc, #44]	@ (811a018 <tcp_receive+0x5ec>)
 8119fec:	685b      	ldr	r3, [r3, #4]
 8119fee:	891a      	ldrh	r2, [r3, #8]
 8119ff0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8119ff4:	1ad3      	subs	r3, r2, r3
 8119ff6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8119ff8:	e02a      	b.n	811a050 <tcp_receive+0x624>
 8119ffa:	bf00      	nop
 8119ffc:	0812149c 	.word	0x0812149c
 811a000:	081214a4 	.word	0x081214a4
 811a004:	10012168 	.word	0x10012168
 811a008:	10012164 	.word	0x10012164
 811a00c:	10012128 	.word	0x10012128
 811a010:	1001216a 	.word	0x1001216a
 811a014:	10012160 	.word	0x10012160
 811a018:	10012140 	.word	0x10012140
 811a01c:	081210f4 	.word	0x081210f4
 811a020:	081214ac 	.word	0x081214ac
 811a024:	08121180 	.word	0x08121180
 811a028:	081214bc 	.word	0x081214bc
 811a02c:	081214cc 	.word	0x081214cc
        off -= p->len;
 811a030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811a032:	895b      	ldrh	r3, [r3, #10]
 811a034:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811a038:	1ad3      	subs	r3, r2, r3
 811a03a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 811a03e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811a040:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 811a042:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 811a044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811a046:	2200      	movs	r2, #0
 811a048:	815a      	strh	r2, [r3, #10]
        p = p->next;
 811a04a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811a04c:	681b      	ldr	r3, [r3, #0]
 811a04e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 811a050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811a052:	895b      	ldrh	r3, [r3, #10]
 811a054:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811a058:	429a      	cmp	r2, r3
 811a05a:	d8e9      	bhi.n	811a030 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 811a05c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811a060:	4619      	mov	r1, r3
 811a062:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 811a064:	f7fc f89e 	bl	81161a4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 811a068:	687b      	ldr	r3, [r7, #4]
 811a06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a06c:	4a90      	ldr	r2, [pc, #576]	@ (811a2b0 <tcp_receive+0x884>)
 811a06e:	6013      	str	r3, [r2, #0]
 811a070:	4b90      	ldr	r3, [pc, #576]	@ (811a2b4 <tcp_receive+0x888>)
 811a072:	68db      	ldr	r3, [r3, #12]
 811a074:	4a8e      	ldr	r2, [pc, #568]	@ (811a2b0 <tcp_receive+0x884>)
 811a076:	6812      	ldr	r2, [r2, #0]
 811a078:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 811a07a:	e00d      	b.n	811a098 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 811a07c:	4b8c      	ldr	r3, [pc, #560]	@ (811a2b0 <tcp_receive+0x884>)
 811a07e:	681a      	ldr	r2, [r3, #0]
 811a080:	687b      	ldr	r3, [r7, #4]
 811a082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a084:	1ad3      	subs	r3, r2, r3
 811a086:	2b00      	cmp	r3, #0
 811a088:	da06      	bge.n	811a098 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 811a08a:	687b      	ldr	r3, [r7, #4]
 811a08c:	8b5b      	ldrh	r3, [r3, #26]
 811a08e:	f043 0302 	orr.w	r3, r3, #2
 811a092:	b29a      	uxth	r2, r3
 811a094:	687b      	ldr	r3, [r7, #4]
 811a096:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 811a098:	4b85      	ldr	r3, [pc, #532]	@ (811a2b0 <tcp_receive+0x884>)
 811a09a:	681a      	ldr	r2, [r3, #0]
 811a09c:	687b      	ldr	r3, [r7, #4]
 811a09e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a0a0:	1ad3      	subs	r3, r2, r3
 811a0a2:	2b00      	cmp	r3, #0
 811a0a4:	f2c0 8427 	blt.w	811a8f6 <tcp_receive+0xeca>
 811a0a8:	4b81      	ldr	r3, [pc, #516]	@ (811a2b0 <tcp_receive+0x884>)
 811a0aa:	681a      	ldr	r2, [r3, #0]
 811a0ac:	687b      	ldr	r3, [r7, #4]
 811a0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a0b0:	6879      	ldr	r1, [r7, #4]
 811a0b2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811a0b4:	440b      	add	r3, r1
 811a0b6:	1ad3      	subs	r3, r2, r3
 811a0b8:	3301      	adds	r3, #1
 811a0ba:	2b00      	cmp	r3, #0
 811a0bc:	f300 841b 	bgt.w	811a8f6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 811a0c0:	687b      	ldr	r3, [r7, #4]
 811a0c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811a0c4:	4b7a      	ldr	r3, [pc, #488]	@ (811a2b0 <tcp_receive+0x884>)
 811a0c6:	681b      	ldr	r3, [r3, #0]
 811a0c8:	429a      	cmp	r2, r3
 811a0ca:	f040 8298 	bne.w	811a5fe <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 811a0ce:	4b79      	ldr	r3, [pc, #484]	@ (811a2b4 <tcp_receive+0x888>)
 811a0d0:	891c      	ldrh	r4, [r3, #8]
 811a0d2:	4b78      	ldr	r3, [pc, #480]	@ (811a2b4 <tcp_receive+0x888>)
 811a0d4:	68db      	ldr	r3, [r3, #12]
 811a0d6:	899b      	ldrh	r3, [r3, #12]
 811a0d8:	b29b      	uxth	r3, r3
 811a0da:	4618      	mov	r0, r3
 811a0dc:	f7f7 fede 	bl	8111e9c <lwip_htons>
 811a0e0:	4603      	mov	r3, r0
 811a0e2:	b2db      	uxtb	r3, r3
 811a0e4:	f003 0303 	and.w	r3, r3, #3
 811a0e8:	2b00      	cmp	r3, #0
 811a0ea:	d001      	beq.n	811a0f0 <tcp_receive+0x6c4>
 811a0ec:	2301      	movs	r3, #1
 811a0ee:	e000      	b.n	811a0f2 <tcp_receive+0x6c6>
 811a0f0:	2300      	movs	r3, #0
 811a0f2:	4423      	add	r3, r4
 811a0f4:	b29a      	uxth	r2, r3
 811a0f6:	4b70      	ldr	r3, [pc, #448]	@ (811a2b8 <tcp_receive+0x88c>)
 811a0f8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 811a0fa:	687b      	ldr	r3, [r7, #4]
 811a0fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811a0fe:	4b6e      	ldr	r3, [pc, #440]	@ (811a2b8 <tcp_receive+0x88c>)
 811a100:	881b      	ldrh	r3, [r3, #0]
 811a102:	429a      	cmp	r2, r3
 811a104:	d274      	bcs.n	811a1f0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811a106:	4b6b      	ldr	r3, [pc, #428]	@ (811a2b4 <tcp_receive+0x888>)
 811a108:	68db      	ldr	r3, [r3, #12]
 811a10a:	899b      	ldrh	r3, [r3, #12]
 811a10c:	b29b      	uxth	r3, r3
 811a10e:	4618      	mov	r0, r3
 811a110:	f7f7 fec4 	bl	8111e9c <lwip_htons>
 811a114:	4603      	mov	r3, r0
 811a116:	b2db      	uxtb	r3, r3
 811a118:	f003 0301 	and.w	r3, r3, #1
 811a11c:	2b00      	cmp	r3, #0
 811a11e:	d01e      	beq.n	811a15e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 811a120:	4b64      	ldr	r3, [pc, #400]	@ (811a2b4 <tcp_receive+0x888>)
 811a122:	68db      	ldr	r3, [r3, #12]
 811a124:	899b      	ldrh	r3, [r3, #12]
 811a126:	b29b      	uxth	r3, r3
 811a128:	b21b      	sxth	r3, r3
 811a12a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811a12e:	b21c      	sxth	r4, r3
 811a130:	4b60      	ldr	r3, [pc, #384]	@ (811a2b4 <tcp_receive+0x888>)
 811a132:	68db      	ldr	r3, [r3, #12]
 811a134:	899b      	ldrh	r3, [r3, #12]
 811a136:	b29b      	uxth	r3, r3
 811a138:	4618      	mov	r0, r3
 811a13a:	f7f7 feaf 	bl	8111e9c <lwip_htons>
 811a13e:	4603      	mov	r3, r0
 811a140:	b2db      	uxtb	r3, r3
 811a142:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 811a146:	b29b      	uxth	r3, r3
 811a148:	4618      	mov	r0, r3
 811a14a:	f7f7 fea7 	bl	8111e9c <lwip_htons>
 811a14e:	4603      	mov	r3, r0
 811a150:	b21b      	sxth	r3, r3
 811a152:	4323      	orrs	r3, r4
 811a154:	b21a      	sxth	r2, r3
 811a156:	4b57      	ldr	r3, [pc, #348]	@ (811a2b4 <tcp_receive+0x888>)
 811a158:	68db      	ldr	r3, [r3, #12]
 811a15a:	b292      	uxth	r2, r2
 811a15c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 811a15e:	687b      	ldr	r3, [r7, #4]
 811a160:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811a162:	4b54      	ldr	r3, [pc, #336]	@ (811a2b4 <tcp_receive+0x888>)
 811a164:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 811a166:	4b53      	ldr	r3, [pc, #332]	@ (811a2b4 <tcp_receive+0x888>)
 811a168:	68db      	ldr	r3, [r3, #12]
 811a16a:	899b      	ldrh	r3, [r3, #12]
 811a16c:	b29b      	uxth	r3, r3
 811a16e:	4618      	mov	r0, r3
 811a170:	f7f7 fe94 	bl	8111e9c <lwip_htons>
 811a174:	4603      	mov	r3, r0
 811a176:	b2db      	uxtb	r3, r3
 811a178:	f003 0302 	and.w	r3, r3, #2
 811a17c:	2b00      	cmp	r3, #0
 811a17e:	d005      	beq.n	811a18c <tcp_receive+0x760>
            inseg.len -= 1;
 811a180:	4b4c      	ldr	r3, [pc, #304]	@ (811a2b4 <tcp_receive+0x888>)
 811a182:	891b      	ldrh	r3, [r3, #8]
 811a184:	3b01      	subs	r3, #1
 811a186:	b29a      	uxth	r2, r3
 811a188:	4b4a      	ldr	r3, [pc, #296]	@ (811a2b4 <tcp_receive+0x888>)
 811a18a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 811a18c:	4b49      	ldr	r3, [pc, #292]	@ (811a2b4 <tcp_receive+0x888>)
 811a18e:	685b      	ldr	r3, [r3, #4]
 811a190:	4a48      	ldr	r2, [pc, #288]	@ (811a2b4 <tcp_receive+0x888>)
 811a192:	8912      	ldrh	r2, [r2, #8]
 811a194:	4611      	mov	r1, r2
 811a196:	4618      	mov	r0, r3
 811a198:	f7fb ff06 	bl	8115fa8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 811a19c:	4b45      	ldr	r3, [pc, #276]	@ (811a2b4 <tcp_receive+0x888>)
 811a19e:	891c      	ldrh	r4, [r3, #8]
 811a1a0:	4b44      	ldr	r3, [pc, #272]	@ (811a2b4 <tcp_receive+0x888>)
 811a1a2:	68db      	ldr	r3, [r3, #12]
 811a1a4:	899b      	ldrh	r3, [r3, #12]
 811a1a6:	b29b      	uxth	r3, r3
 811a1a8:	4618      	mov	r0, r3
 811a1aa:	f7f7 fe77 	bl	8111e9c <lwip_htons>
 811a1ae:	4603      	mov	r3, r0
 811a1b0:	b2db      	uxtb	r3, r3
 811a1b2:	f003 0303 	and.w	r3, r3, #3
 811a1b6:	2b00      	cmp	r3, #0
 811a1b8:	d001      	beq.n	811a1be <tcp_receive+0x792>
 811a1ba:	2301      	movs	r3, #1
 811a1bc:	e000      	b.n	811a1c0 <tcp_receive+0x794>
 811a1be:	2300      	movs	r3, #0
 811a1c0:	4423      	add	r3, r4
 811a1c2:	b29a      	uxth	r2, r3
 811a1c4:	4b3c      	ldr	r3, [pc, #240]	@ (811a2b8 <tcp_receive+0x88c>)
 811a1c6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 811a1c8:	4b3b      	ldr	r3, [pc, #236]	@ (811a2b8 <tcp_receive+0x88c>)
 811a1ca:	881b      	ldrh	r3, [r3, #0]
 811a1cc:	461a      	mov	r2, r3
 811a1ce:	4b38      	ldr	r3, [pc, #224]	@ (811a2b0 <tcp_receive+0x884>)
 811a1d0:	681b      	ldr	r3, [r3, #0]
 811a1d2:	441a      	add	r2, r3
 811a1d4:	687b      	ldr	r3, [r7, #4]
 811a1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a1d8:	6879      	ldr	r1, [r7, #4]
 811a1da:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811a1dc:	440b      	add	r3, r1
 811a1de:	429a      	cmp	r2, r3
 811a1e0:	d006      	beq.n	811a1f0 <tcp_receive+0x7c4>
 811a1e2:	4b36      	ldr	r3, [pc, #216]	@ (811a2bc <tcp_receive+0x890>)
 811a1e4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 811a1e8:	4935      	ldr	r1, [pc, #212]	@ (811a2c0 <tcp_receive+0x894>)
 811a1ea:	4836      	ldr	r0, [pc, #216]	@ (811a2c4 <tcp_receive+0x898>)
 811a1ec:	f003 fdf6 	bl	811dddc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 811a1f0:	687b      	ldr	r3, [r7, #4]
 811a1f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811a1f4:	2b00      	cmp	r3, #0
 811a1f6:	f000 80e6 	beq.w	811a3c6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811a1fa:	4b2e      	ldr	r3, [pc, #184]	@ (811a2b4 <tcp_receive+0x888>)
 811a1fc:	68db      	ldr	r3, [r3, #12]
 811a1fe:	899b      	ldrh	r3, [r3, #12]
 811a200:	b29b      	uxth	r3, r3
 811a202:	4618      	mov	r0, r3
 811a204:	f7f7 fe4a 	bl	8111e9c <lwip_htons>
 811a208:	4603      	mov	r3, r0
 811a20a:	b2db      	uxtb	r3, r3
 811a20c:	f003 0301 	and.w	r3, r3, #1
 811a210:	2b00      	cmp	r3, #0
 811a212:	d010      	beq.n	811a236 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 811a214:	e00a      	b.n	811a22c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 811a216:	687b      	ldr	r3, [r7, #4]
 811a218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811a21a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 811a21c:	687b      	ldr	r3, [r7, #4]
 811a21e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811a220:	681a      	ldr	r2, [r3, #0]
 811a222:	687b      	ldr	r3, [r7, #4]
 811a224:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 811a226:	68f8      	ldr	r0, [r7, #12]
 811a228:	f7fd fd2b 	bl	8117c82 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 811a22c:	687b      	ldr	r3, [r7, #4]
 811a22e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811a230:	2b00      	cmp	r3, #0
 811a232:	d1f0      	bne.n	811a216 <tcp_receive+0x7ea>
 811a234:	e0c7      	b.n	811a3c6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 811a236:	687b      	ldr	r3, [r7, #4]
 811a238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811a23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 811a23c:	e051      	b.n	811a2e2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 811a23e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811a240:	68db      	ldr	r3, [r3, #12]
 811a242:	899b      	ldrh	r3, [r3, #12]
 811a244:	b29b      	uxth	r3, r3
 811a246:	4618      	mov	r0, r3
 811a248:	f7f7 fe28 	bl	8111e9c <lwip_htons>
 811a24c:	4603      	mov	r3, r0
 811a24e:	b2db      	uxtb	r3, r3
 811a250:	f003 0301 	and.w	r3, r3, #1
 811a254:	2b00      	cmp	r3, #0
 811a256:	d03c      	beq.n	811a2d2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 811a258:	4b16      	ldr	r3, [pc, #88]	@ (811a2b4 <tcp_receive+0x888>)
 811a25a:	68db      	ldr	r3, [r3, #12]
 811a25c:	899b      	ldrh	r3, [r3, #12]
 811a25e:	b29b      	uxth	r3, r3
 811a260:	4618      	mov	r0, r3
 811a262:	f7f7 fe1b 	bl	8111e9c <lwip_htons>
 811a266:	4603      	mov	r3, r0
 811a268:	b2db      	uxtb	r3, r3
 811a26a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 811a26e:	2b00      	cmp	r3, #0
 811a270:	d12f      	bne.n	811a2d2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 811a272:	4b10      	ldr	r3, [pc, #64]	@ (811a2b4 <tcp_receive+0x888>)
 811a274:	68db      	ldr	r3, [r3, #12]
 811a276:	899b      	ldrh	r3, [r3, #12]
 811a278:	b29c      	uxth	r4, r3
 811a27a:	2001      	movs	r0, #1
 811a27c:	f7f7 fe0e 	bl	8111e9c <lwip_htons>
 811a280:	4603      	mov	r3, r0
 811a282:	461a      	mov	r2, r3
 811a284:	4b0b      	ldr	r3, [pc, #44]	@ (811a2b4 <tcp_receive+0x888>)
 811a286:	68db      	ldr	r3, [r3, #12]
 811a288:	4322      	orrs	r2, r4
 811a28a:	b292      	uxth	r2, r2
 811a28c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 811a28e:	4b09      	ldr	r3, [pc, #36]	@ (811a2b4 <tcp_receive+0x888>)
 811a290:	891c      	ldrh	r4, [r3, #8]
 811a292:	4b08      	ldr	r3, [pc, #32]	@ (811a2b4 <tcp_receive+0x888>)
 811a294:	68db      	ldr	r3, [r3, #12]
 811a296:	899b      	ldrh	r3, [r3, #12]
 811a298:	b29b      	uxth	r3, r3
 811a29a:	4618      	mov	r0, r3
 811a29c:	f7f7 fdfe 	bl	8111e9c <lwip_htons>
 811a2a0:	4603      	mov	r3, r0
 811a2a2:	b2db      	uxtb	r3, r3
 811a2a4:	f003 0303 	and.w	r3, r3, #3
 811a2a8:	2b00      	cmp	r3, #0
 811a2aa:	d00d      	beq.n	811a2c8 <tcp_receive+0x89c>
 811a2ac:	2301      	movs	r3, #1
 811a2ae:	e00c      	b.n	811a2ca <tcp_receive+0x89e>
 811a2b0:	10012160 	.word	0x10012160
 811a2b4:	10012140 	.word	0x10012140
 811a2b8:	1001216a 	.word	0x1001216a
 811a2bc:	081210f4 	.word	0x081210f4
 811a2c0:	081214dc 	.word	0x081214dc
 811a2c4:	08121180 	.word	0x08121180
 811a2c8:	2300      	movs	r3, #0
 811a2ca:	4423      	add	r3, r4
 811a2cc:	b29a      	uxth	r2, r3
 811a2ce:	4b98      	ldr	r3, [pc, #608]	@ (811a530 <tcp_receive+0xb04>)
 811a2d0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 811a2d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811a2d4:	613b      	str	r3, [r7, #16]
              next = next->next;
 811a2d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811a2d8:	681b      	ldr	r3, [r3, #0]
 811a2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 811a2dc:	6938      	ldr	r0, [r7, #16]
 811a2de:	f7fd fcd0 	bl	8117c82 <tcp_seg_free>
            while (next &&
 811a2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811a2e4:	2b00      	cmp	r3, #0
 811a2e6:	d00e      	beq.n	811a306 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 811a2e8:	4b91      	ldr	r3, [pc, #580]	@ (811a530 <tcp_receive+0xb04>)
 811a2ea:	881b      	ldrh	r3, [r3, #0]
 811a2ec:	461a      	mov	r2, r3
 811a2ee:	4b91      	ldr	r3, [pc, #580]	@ (811a534 <tcp_receive+0xb08>)
 811a2f0:	681b      	ldr	r3, [r3, #0]
 811a2f2:	441a      	add	r2, r3
 811a2f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811a2f6:	68db      	ldr	r3, [r3, #12]
 811a2f8:	685b      	ldr	r3, [r3, #4]
 811a2fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 811a2fc:	8909      	ldrh	r1, [r1, #8]
 811a2fe:	440b      	add	r3, r1
 811a300:	1ad3      	subs	r3, r2, r3
            while (next &&
 811a302:	2b00      	cmp	r3, #0
 811a304:	da9b      	bge.n	811a23e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 811a306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811a308:	2b00      	cmp	r3, #0
 811a30a:	d059      	beq.n	811a3c0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 811a30c:	4b88      	ldr	r3, [pc, #544]	@ (811a530 <tcp_receive+0xb04>)
 811a30e:	881b      	ldrh	r3, [r3, #0]
 811a310:	461a      	mov	r2, r3
 811a312:	4b88      	ldr	r3, [pc, #544]	@ (811a534 <tcp_receive+0xb08>)
 811a314:	681b      	ldr	r3, [r3, #0]
 811a316:	441a      	add	r2, r3
 811a318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811a31a:	68db      	ldr	r3, [r3, #12]
 811a31c:	685b      	ldr	r3, [r3, #4]
 811a31e:	1ad3      	subs	r3, r2, r3
            if (next &&
 811a320:	2b00      	cmp	r3, #0
 811a322:	dd4d      	ble.n	811a3c0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 811a324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811a326:	68db      	ldr	r3, [r3, #12]
 811a328:	685b      	ldr	r3, [r3, #4]
 811a32a:	b29a      	uxth	r2, r3
 811a32c:	4b81      	ldr	r3, [pc, #516]	@ (811a534 <tcp_receive+0xb08>)
 811a32e:	681b      	ldr	r3, [r3, #0]
 811a330:	b29b      	uxth	r3, r3
 811a332:	1ad3      	subs	r3, r2, r3
 811a334:	b29a      	uxth	r2, r3
 811a336:	4b80      	ldr	r3, [pc, #512]	@ (811a538 <tcp_receive+0xb0c>)
 811a338:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 811a33a:	4b7f      	ldr	r3, [pc, #508]	@ (811a538 <tcp_receive+0xb0c>)
 811a33c:	68db      	ldr	r3, [r3, #12]
 811a33e:	899b      	ldrh	r3, [r3, #12]
 811a340:	b29b      	uxth	r3, r3
 811a342:	4618      	mov	r0, r3
 811a344:	f7f7 fdaa 	bl	8111e9c <lwip_htons>
 811a348:	4603      	mov	r3, r0
 811a34a:	b2db      	uxtb	r3, r3
 811a34c:	f003 0302 	and.w	r3, r3, #2
 811a350:	2b00      	cmp	r3, #0
 811a352:	d005      	beq.n	811a360 <tcp_receive+0x934>
                inseg.len -= 1;
 811a354:	4b78      	ldr	r3, [pc, #480]	@ (811a538 <tcp_receive+0xb0c>)
 811a356:	891b      	ldrh	r3, [r3, #8]
 811a358:	3b01      	subs	r3, #1
 811a35a:	b29a      	uxth	r2, r3
 811a35c:	4b76      	ldr	r3, [pc, #472]	@ (811a538 <tcp_receive+0xb0c>)
 811a35e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 811a360:	4b75      	ldr	r3, [pc, #468]	@ (811a538 <tcp_receive+0xb0c>)
 811a362:	685b      	ldr	r3, [r3, #4]
 811a364:	4a74      	ldr	r2, [pc, #464]	@ (811a538 <tcp_receive+0xb0c>)
 811a366:	8912      	ldrh	r2, [r2, #8]
 811a368:	4611      	mov	r1, r2
 811a36a:	4618      	mov	r0, r3
 811a36c:	f7fb fe1c 	bl	8115fa8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 811a370:	4b71      	ldr	r3, [pc, #452]	@ (811a538 <tcp_receive+0xb0c>)
 811a372:	891c      	ldrh	r4, [r3, #8]
 811a374:	4b70      	ldr	r3, [pc, #448]	@ (811a538 <tcp_receive+0xb0c>)
 811a376:	68db      	ldr	r3, [r3, #12]
 811a378:	899b      	ldrh	r3, [r3, #12]
 811a37a:	b29b      	uxth	r3, r3
 811a37c:	4618      	mov	r0, r3
 811a37e:	f7f7 fd8d 	bl	8111e9c <lwip_htons>
 811a382:	4603      	mov	r3, r0
 811a384:	b2db      	uxtb	r3, r3
 811a386:	f003 0303 	and.w	r3, r3, #3
 811a38a:	2b00      	cmp	r3, #0
 811a38c:	d001      	beq.n	811a392 <tcp_receive+0x966>
 811a38e:	2301      	movs	r3, #1
 811a390:	e000      	b.n	811a394 <tcp_receive+0x968>
 811a392:	2300      	movs	r3, #0
 811a394:	4423      	add	r3, r4
 811a396:	b29a      	uxth	r2, r3
 811a398:	4b65      	ldr	r3, [pc, #404]	@ (811a530 <tcp_receive+0xb04>)
 811a39a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 811a39c:	4b64      	ldr	r3, [pc, #400]	@ (811a530 <tcp_receive+0xb04>)
 811a39e:	881b      	ldrh	r3, [r3, #0]
 811a3a0:	461a      	mov	r2, r3
 811a3a2:	4b64      	ldr	r3, [pc, #400]	@ (811a534 <tcp_receive+0xb08>)
 811a3a4:	681b      	ldr	r3, [r3, #0]
 811a3a6:	441a      	add	r2, r3
 811a3a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811a3aa:	68db      	ldr	r3, [r3, #12]
 811a3ac:	685b      	ldr	r3, [r3, #4]
 811a3ae:	429a      	cmp	r2, r3
 811a3b0:	d006      	beq.n	811a3c0 <tcp_receive+0x994>
 811a3b2:	4b62      	ldr	r3, [pc, #392]	@ (811a53c <tcp_receive+0xb10>)
 811a3b4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 811a3b8:	4961      	ldr	r1, [pc, #388]	@ (811a540 <tcp_receive+0xb14>)
 811a3ba:	4862      	ldr	r0, [pc, #392]	@ (811a544 <tcp_receive+0xb18>)
 811a3bc:	f003 fd0e 	bl	811dddc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 811a3c0:	687b      	ldr	r3, [r7, #4]
 811a3c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 811a3c4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 811a3c6:	4b5a      	ldr	r3, [pc, #360]	@ (811a530 <tcp_receive+0xb04>)
 811a3c8:	881b      	ldrh	r3, [r3, #0]
 811a3ca:	461a      	mov	r2, r3
 811a3cc:	4b59      	ldr	r3, [pc, #356]	@ (811a534 <tcp_receive+0xb08>)
 811a3ce:	681b      	ldr	r3, [r3, #0]
 811a3d0:	441a      	add	r2, r3
 811a3d2:	687b      	ldr	r3, [r7, #4]
 811a3d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 811a3d6:	687b      	ldr	r3, [r7, #4]
 811a3d8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811a3da:	4b55      	ldr	r3, [pc, #340]	@ (811a530 <tcp_receive+0xb04>)
 811a3dc:	881b      	ldrh	r3, [r3, #0]
 811a3de:	429a      	cmp	r2, r3
 811a3e0:	d206      	bcs.n	811a3f0 <tcp_receive+0x9c4>
 811a3e2:	4b56      	ldr	r3, [pc, #344]	@ (811a53c <tcp_receive+0xb10>)
 811a3e4:	f240 6207 	movw	r2, #1543	@ 0x607
 811a3e8:	4957      	ldr	r1, [pc, #348]	@ (811a548 <tcp_receive+0xb1c>)
 811a3ea:	4856      	ldr	r0, [pc, #344]	@ (811a544 <tcp_receive+0xb18>)
 811a3ec:	f003 fcf6 	bl	811dddc <iprintf>
        pcb->rcv_wnd -= tcplen;
 811a3f0:	687b      	ldr	r3, [r7, #4]
 811a3f2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811a3f4:	4b4e      	ldr	r3, [pc, #312]	@ (811a530 <tcp_receive+0xb04>)
 811a3f6:	881b      	ldrh	r3, [r3, #0]
 811a3f8:	1ad3      	subs	r3, r2, r3
 811a3fa:	b29a      	uxth	r2, r3
 811a3fc:	687b      	ldr	r3, [r7, #4]
 811a3fe:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 811a400:	6878      	ldr	r0, [r7, #4]
 811a402:	f7fc fdf7 	bl	8116ff4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 811a406:	4b4c      	ldr	r3, [pc, #304]	@ (811a538 <tcp_receive+0xb0c>)
 811a408:	685b      	ldr	r3, [r3, #4]
 811a40a:	891b      	ldrh	r3, [r3, #8]
 811a40c:	2b00      	cmp	r3, #0
 811a40e:	d006      	beq.n	811a41e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 811a410:	4b49      	ldr	r3, [pc, #292]	@ (811a538 <tcp_receive+0xb0c>)
 811a412:	685b      	ldr	r3, [r3, #4]
 811a414:	4a4d      	ldr	r2, [pc, #308]	@ (811a54c <tcp_receive+0xb20>)
 811a416:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 811a418:	4b47      	ldr	r3, [pc, #284]	@ (811a538 <tcp_receive+0xb0c>)
 811a41a:	2200      	movs	r2, #0
 811a41c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811a41e:	4b46      	ldr	r3, [pc, #280]	@ (811a538 <tcp_receive+0xb0c>)
 811a420:	68db      	ldr	r3, [r3, #12]
 811a422:	899b      	ldrh	r3, [r3, #12]
 811a424:	b29b      	uxth	r3, r3
 811a426:	4618      	mov	r0, r3
 811a428:	f7f7 fd38 	bl	8111e9c <lwip_htons>
 811a42c:	4603      	mov	r3, r0
 811a42e:	b2db      	uxtb	r3, r3
 811a430:	f003 0301 	and.w	r3, r3, #1
 811a434:	2b00      	cmp	r3, #0
 811a436:	f000 80b8 	beq.w	811a5aa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 811a43a:	4b45      	ldr	r3, [pc, #276]	@ (811a550 <tcp_receive+0xb24>)
 811a43c:	781b      	ldrb	r3, [r3, #0]
 811a43e:	f043 0320 	orr.w	r3, r3, #32
 811a442:	b2da      	uxtb	r2, r3
 811a444:	4b42      	ldr	r3, [pc, #264]	@ (811a550 <tcp_receive+0xb24>)
 811a446:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 811a448:	e0af      	b.n	811a5aa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 811a44a:	687b      	ldr	r3, [r7, #4]
 811a44c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811a44e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 811a450:	687b      	ldr	r3, [r7, #4]
 811a452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811a454:	68db      	ldr	r3, [r3, #12]
 811a456:	685b      	ldr	r3, [r3, #4]
 811a458:	4a36      	ldr	r2, [pc, #216]	@ (811a534 <tcp_receive+0xb08>)
 811a45a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 811a45c:	68bb      	ldr	r3, [r7, #8]
 811a45e:	891b      	ldrh	r3, [r3, #8]
 811a460:	461c      	mov	r4, r3
 811a462:	68bb      	ldr	r3, [r7, #8]
 811a464:	68db      	ldr	r3, [r3, #12]
 811a466:	899b      	ldrh	r3, [r3, #12]
 811a468:	b29b      	uxth	r3, r3
 811a46a:	4618      	mov	r0, r3
 811a46c:	f7f7 fd16 	bl	8111e9c <lwip_htons>
 811a470:	4603      	mov	r3, r0
 811a472:	b2db      	uxtb	r3, r3
 811a474:	f003 0303 	and.w	r3, r3, #3
 811a478:	2b00      	cmp	r3, #0
 811a47a:	d001      	beq.n	811a480 <tcp_receive+0xa54>
 811a47c:	2301      	movs	r3, #1
 811a47e:	e000      	b.n	811a482 <tcp_receive+0xa56>
 811a480:	2300      	movs	r3, #0
 811a482:	191a      	adds	r2, r3, r4
 811a484:	687b      	ldr	r3, [r7, #4]
 811a486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a488:	441a      	add	r2, r3
 811a48a:	687b      	ldr	r3, [r7, #4]
 811a48c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 811a48e:	687b      	ldr	r3, [r7, #4]
 811a490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811a492:	461c      	mov	r4, r3
 811a494:	68bb      	ldr	r3, [r7, #8]
 811a496:	891b      	ldrh	r3, [r3, #8]
 811a498:	461d      	mov	r5, r3
 811a49a:	68bb      	ldr	r3, [r7, #8]
 811a49c:	68db      	ldr	r3, [r3, #12]
 811a49e:	899b      	ldrh	r3, [r3, #12]
 811a4a0:	b29b      	uxth	r3, r3
 811a4a2:	4618      	mov	r0, r3
 811a4a4:	f7f7 fcfa 	bl	8111e9c <lwip_htons>
 811a4a8:	4603      	mov	r3, r0
 811a4aa:	b2db      	uxtb	r3, r3
 811a4ac:	f003 0303 	and.w	r3, r3, #3
 811a4b0:	2b00      	cmp	r3, #0
 811a4b2:	d001      	beq.n	811a4b8 <tcp_receive+0xa8c>
 811a4b4:	2301      	movs	r3, #1
 811a4b6:	e000      	b.n	811a4ba <tcp_receive+0xa8e>
 811a4b8:	2300      	movs	r3, #0
 811a4ba:	442b      	add	r3, r5
 811a4bc:	429c      	cmp	r4, r3
 811a4be:	d206      	bcs.n	811a4ce <tcp_receive+0xaa2>
 811a4c0:	4b1e      	ldr	r3, [pc, #120]	@ (811a53c <tcp_receive+0xb10>)
 811a4c2:	f240 622b 	movw	r2, #1579	@ 0x62b
 811a4c6:	4923      	ldr	r1, [pc, #140]	@ (811a554 <tcp_receive+0xb28>)
 811a4c8:	481e      	ldr	r0, [pc, #120]	@ (811a544 <tcp_receive+0xb18>)
 811a4ca:	f003 fc87 	bl	811dddc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 811a4ce:	68bb      	ldr	r3, [r7, #8]
 811a4d0:	891b      	ldrh	r3, [r3, #8]
 811a4d2:	461c      	mov	r4, r3
 811a4d4:	68bb      	ldr	r3, [r7, #8]
 811a4d6:	68db      	ldr	r3, [r3, #12]
 811a4d8:	899b      	ldrh	r3, [r3, #12]
 811a4da:	b29b      	uxth	r3, r3
 811a4dc:	4618      	mov	r0, r3
 811a4de:	f7f7 fcdd 	bl	8111e9c <lwip_htons>
 811a4e2:	4603      	mov	r3, r0
 811a4e4:	b2db      	uxtb	r3, r3
 811a4e6:	f003 0303 	and.w	r3, r3, #3
 811a4ea:	2b00      	cmp	r3, #0
 811a4ec:	d001      	beq.n	811a4f2 <tcp_receive+0xac6>
 811a4ee:	2301      	movs	r3, #1
 811a4f0:	e000      	b.n	811a4f4 <tcp_receive+0xac8>
 811a4f2:	2300      	movs	r3, #0
 811a4f4:	1919      	adds	r1, r3, r4
 811a4f6:	687b      	ldr	r3, [r7, #4]
 811a4f8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811a4fa:	b28b      	uxth	r3, r1
 811a4fc:	1ad3      	subs	r3, r2, r3
 811a4fe:	b29a      	uxth	r2, r3
 811a500:	687b      	ldr	r3, [r7, #4]
 811a502:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 811a504:	6878      	ldr	r0, [r7, #4]
 811a506:	f7fc fd75 	bl	8116ff4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 811a50a:	68bb      	ldr	r3, [r7, #8]
 811a50c:	685b      	ldr	r3, [r3, #4]
 811a50e:	891b      	ldrh	r3, [r3, #8]
 811a510:	2b00      	cmp	r3, #0
 811a512:	d028      	beq.n	811a566 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 811a514:	4b0d      	ldr	r3, [pc, #52]	@ (811a54c <tcp_receive+0xb20>)
 811a516:	681b      	ldr	r3, [r3, #0]
 811a518:	2b00      	cmp	r3, #0
 811a51a:	d01d      	beq.n	811a558 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 811a51c:	4b0b      	ldr	r3, [pc, #44]	@ (811a54c <tcp_receive+0xb20>)
 811a51e:	681a      	ldr	r2, [r3, #0]
 811a520:	68bb      	ldr	r3, [r7, #8]
 811a522:	685b      	ldr	r3, [r3, #4]
 811a524:	4619      	mov	r1, r3
 811a526:	4610      	mov	r0, r2
 811a528:	f7fb ff90 	bl	811644c <pbuf_cat>
 811a52c:	e018      	b.n	811a560 <tcp_receive+0xb34>
 811a52e:	bf00      	nop
 811a530:	1001216a 	.word	0x1001216a
 811a534:	10012160 	.word	0x10012160
 811a538:	10012140 	.word	0x10012140
 811a53c:	081210f4 	.word	0x081210f4
 811a540:	08121514 	.word	0x08121514
 811a544:	08121180 	.word	0x08121180
 811a548:	08121550 	.word	0x08121550
 811a54c:	10012170 	.word	0x10012170
 811a550:	1001216d 	.word	0x1001216d
 811a554:	08121570 	.word	0x08121570
            } else {
              recv_data = cseg->p;
 811a558:	68bb      	ldr	r3, [r7, #8]
 811a55a:	685b      	ldr	r3, [r3, #4]
 811a55c:	4a70      	ldr	r2, [pc, #448]	@ (811a720 <tcp_receive+0xcf4>)
 811a55e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 811a560:	68bb      	ldr	r3, [r7, #8]
 811a562:	2200      	movs	r2, #0
 811a564:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 811a566:	68bb      	ldr	r3, [r7, #8]
 811a568:	68db      	ldr	r3, [r3, #12]
 811a56a:	899b      	ldrh	r3, [r3, #12]
 811a56c:	b29b      	uxth	r3, r3
 811a56e:	4618      	mov	r0, r3
 811a570:	f7f7 fc94 	bl	8111e9c <lwip_htons>
 811a574:	4603      	mov	r3, r0
 811a576:	b2db      	uxtb	r3, r3
 811a578:	f003 0301 	and.w	r3, r3, #1
 811a57c:	2b00      	cmp	r3, #0
 811a57e:	d00d      	beq.n	811a59c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 811a580:	4b68      	ldr	r3, [pc, #416]	@ (811a724 <tcp_receive+0xcf8>)
 811a582:	781b      	ldrb	r3, [r3, #0]
 811a584:	f043 0320 	orr.w	r3, r3, #32
 811a588:	b2da      	uxtb	r2, r3
 811a58a:	4b66      	ldr	r3, [pc, #408]	@ (811a724 <tcp_receive+0xcf8>)
 811a58c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 811a58e:	687b      	ldr	r3, [r7, #4]
 811a590:	7d1b      	ldrb	r3, [r3, #20]
 811a592:	2b04      	cmp	r3, #4
 811a594:	d102      	bne.n	811a59c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 811a596:	687b      	ldr	r3, [r7, #4]
 811a598:	2207      	movs	r2, #7
 811a59a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 811a59c:	68bb      	ldr	r3, [r7, #8]
 811a59e:	681a      	ldr	r2, [r3, #0]
 811a5a0:	687b      	ldr	r3, [r7, #4]
 811a5a2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 811a5a4:	68b8      	ldr	r0, [r7, #8]
 811a5a6:	f7fd fb6c 	bl	8117c82 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 811a5aa:	687b      	ldr	r3, [r7, #4]
 811a5ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811a5ae:	2b00      	cmp	r3, #0
 811a5b0:	d008      	beq.n	811a5c4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 811a5b2:	687b      	ldr	r3, [r7, #4]
 811a5b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811a5b6:	68db      	ldr	r3, [r3, #12]
 811a5b8:	685a      	ldr	r2, [r3, #4]
 811a5ba:	687b      	ldr	r3, [r7, #4]
 811a5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 811a5be:	429a      	cmp	r2, r3
 811a5c0:	f43f af43 	beq.w	811a44a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 811a5c4:	687b      	ldr	r3, [r7, #4]
 811a5c6:	8b5b      	ldrh	r3, [r3, #26]
 811a5c8:	f003 0301 	and.w	r3, r3, #1
 811a5cc:	2b00      	cmp	r3, #0
 811a5ce:	d00e      	beq.n	811a5ee <tcp_receive+0xbc2>
 811a5d0:	687b      	ldr	r3, [r7, #4]
 811a5d2:	8b5b      	ldrh	r3, [r3, #26]
 811a5d4:	f023 0301 	bic.w	r3, r3, #1
 811a5d8:	b29a      	uxth	r2, r3
 811a5da:	687b      	ldr	r3, [r7, #4]
 811a5dc:	835a      	strh	r2, [r3, #26]
 811a5de:	687b      	ldr	r3, [r7, #4]
 811a5e0:	8b5b      	ldrh	r3, [r3, #26]
 811a5e2:	f043 0302 	orr.w	r3, r3, #2
 811a5e6:	b29a      	uxth	r2, r3
 811a5e8:	687b      	ldr	r3, [r7, #4]
 811a5ea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 811a5ec:	e187      	b.n	811a8fe <tcp_receive+0xed2>
        tcp_ack(pcb);
 811a5ee:	687b      	ldr	r3, [r7, #4]
 811a5f0:	8b5b      	ldrh	r3, [r3, #26]
 811a5f2:	f043 0301 	orr.w	r3, r3, #1
 811a5f6:	b29a      	uxth	r2, r3
 811a5f8:	687b      	ldr	r3, [r7, #4]
 811a5fa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 811a5fc:	e17f      	b.n	811a8fe <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 811a5fe:	687b      	ldr	r3, [r7, #4]
 811a600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811a602:	2b00      	cmp	r3, #0
 811a604:	d106      	bne.n	811a614 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 811a606:	4848      	ldr	r0, [pc, #288]	@ (811a728 <tcp_receive+0xcfc>)
 811a608:	f7fd fb54 	bl	8117cb4 <tcp_seg_copy>
 811a60c:	4602      	mov	r2, r0
 811a60e:	687b      	ldr	r3, [r7, #4]
 811a610:	675a      	str	r2, [r3, #116]	@ 0x74
 811a612:	e16c      	b.n	811a8ee <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 811a614:	2300      	movs	r3, #0
 811a616:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 811a618:	687b      	ldr	r3, [r7, #4]
 811a61a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811a61c:	63bb      	str	r3, [r7, #56]	@ 0x38
 811a61e:	e156      	b.n	811a8ce <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 811a620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a622:	68db      	ldr	r3, [r3, #12]
 811a624:	685a      	ldr	r2, [r3, #4]
 811a626:	4b41      	ldr	r3, [pc, #260]	@ (811a72c <tcp_receive+0xd00>)
 811a628:	681b      	ldr	r3, [r3, #0]
 811a62a:	429a      	cmp	r2, r3
 811a62c:	d11d      	bne.n	811a66a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 811a62e:	4b3e      	ldr	r3, [pc, #248]	@ (811a728 <tcp_receive+0xcfc>)
 811a630:	891a      	ldrh	r2, [r3, #8]
 811a632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a634:	891b      	ldrh	r3, [r3, #8]
 811a636:	429a      	cmp	r2, r3
 811a638:	f240 814e 	bls.w	811a8d8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 811a63c:	483a      	ldr	r0, [pc, #232]	@ (811a728 <tcp_receive+0xcfc>)
 811a63e:	f7fd fb39 	bl	8117cb4 <tcp_seg_copy>
 811a642:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 811a644:	697b      	ldr	r3, [r7, #20]
 811a646:	2b00      	cmp	r3, #0
 811a648:	f000 8148 	beq.w	811a8dc <tcp_receive+0xeb0>
                  if (prev != NULL) {
 811a64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811a64e:	2b00      	cmp	r3, #0
 811a650:	d003      	beq.n	811a65a <tcp_receive+0xc2e>
                    prev->next = cseg;
 811a652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811a654:	697a      	ldr	r2, [r7, #20]
 811a656:	601a      	str	r2, [r3, #0]
 811a658:	e002      	b.n	811a660 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 811a65a:	687b      	ldr	r3, [r7, #4]
 811a65c:	697a      	ldr	r2, [r7, #20]
 811a65e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 811a660:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 811a662:	6978      	ldr	r0, [r7, #20]
 811a664:	f7ff f8de 	bl	8119824 <tcp_oos_insert_segment>
                }
                break;
 811a668:	e138      	b.n	811a8dc <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 811a66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811a66c:	2b00      	cmp	r3, #0
 811a66e:	d117      	bne.n	811a6a0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 811a670:	4b2e      	ldr	r3, [pc, #184]	@ (811a72c <tcp_receive+0xd00>)
 811a672:	681a      	ldr	r2, [r3, #0]
 811a674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a676:	68db      	ldr	r3, [r3, #12]
 811a678:	685b      	ldr	r3, [r3, #4]
 811a67a:	1ad3      	subs	r3, r2, r3
 811a67c:	2b00      	cmp	r3, #0
 811a67e:	da57      	bge.n	811a730 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 811a680:	4829      	ldr	r0, [pc, #164]	@ (811a728 <tcp_receive+0xcfc>)
 811a682:	f7fd fb17 	bl	8117cb4 <tcp_seg_copy>
 811a686:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 811a688:	69bb      	ldr	r3, [r7, #24]
 811a68a:	2b00      	cmp	r3, #0
 811a68c:	f000 8128 	beq.w	811a8e0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 811a690:	687b      	ldr	r3, [r7, #4]
 811a692:	69ba      	ldr	r2, [r7, #24]
 811a694:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 811a696:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 811a698:	69b8      	ldr	r0, [r7, #24]
 811a69a:	f7ff f8c3 	bl	8119824 <tcp_oos_insert_segment>
                  }
                  break;
 811a69e:	e11f      	b.n	811a8e0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 811a6a0:	4b22      	ldr	r3, [pc, #136]	@ (811a72c <tcp_receive+0xd00>)
 811a6a2:	681a      	ldr	r2, [r3, #0]
 811a6a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811a6a6:	68db      	ldr	r3, [r3, #12]
 811a6a8:	685b      	ldr	r3, [r3, #4]
 811a6aa:	1ad3      	subs	r3, r2, r3
 811a6ac:	3b01      	subs	r3, #1
 811a6ae:	2b00      	cmp	r3, #0
 811a6b0:	db3e      	blt.n	811a730 <tcp_receive+0xd04>
 811a6b2:	4b1e      	ldr	r3, [pc, #120]	@ (811a72c <tcp_receive+0xd00>)
 811a6b4:	681a      	ldr	r2, [r3, #0]
 811a6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a6b8:	68db      	ldr	r3, [r3, #12]
 811a6ba:	685b      	ldr	r3, [r3, #4]
 811a6bc:	1ad3      	subs	r3, r2, r3
 811a6be:	3301      	adds	r3, #1
 811a6c0:	2b00      	cmp	r3, #0
 811a6c2:	dc35      	bgt.n	811a730 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 811a6c4:	4818      	ldr	r0, [pc, #96]	@ (811a728 <tcp_receive+0xcfc>)
 811a6c6:	f7fd faf5 	bl	8117cb4 <tcp_seg_copy>
 811a6ca:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 811a6cc:	69fb      	ldr	r3, [r7, #28]
 811a6ce:	2b00      	cmp	r3, #0
 811a6d0:	f000 8108 	beq.w	811a8e4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 811a6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811a6d6:	68db      	ldr	r3, [r3, #12]
 811a6d8:	685b      	ldr	r3, [r3, #4]
 811a6da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811a6dc:	8912      	ldrh	r2, [r2, #8]
 811a6de:	441a      	add	r2, r3
 811a6e0:	4b12      	ldr	r3, [pc, #72]	@ (811a72c <tcp_receive+0xd00>)
 811a6e2:	681b      	ldr	r3, [r3, #0]
 811a6e4:	1ad3      	subs	r3, r2, r3
 811a6e6:	2b00      	cmp	r3, #0
 811a6e8:	dd12      	ble.n	811a710 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 811a6ea:	4b10      	ldr	r3, [pc, #64]	@ (811a72c <tcp_receive+0xd00>)
 811a6ec:	681b      	ldr	r3, [r3, #0]
 811a6ee:	b29a      	uxth	r2, r3
 811a6f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811a6f2:	68db      	ldr	r3, [r3, #12]
 811a6f4:	685b      	ldr	r3, [r3, #4]
 811a6f6:	b29b      	uxth	r3, r3
 811a6f8:	1ad3      	subs	r3, r2, r3
 811a6fa:	b29a      	uxth	r2, r3
 811a6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811a6fe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 811a700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811a702:	685a      	ldr	r2, [r3, #4]
 811a704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811a706:	891b      	ldrh	r3, [r3, #8]
 811a708:	4619      	mov	r1, r3
 811a70a:	4610      	mov	r0, r2
 811a70c:	f7fb fc4c 	bl	8115fa8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 811a710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811a712:	69fa      	ldr	r2, [r7, #28]
 811a714:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 811a716:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 811a718:	69f8      	ldr	r0, [r7, #28]
 811a71a:	f7ff f883 	bl	8119824 <tcp_oos_insert_segment>
                  }
                  break;
 811a71e:	e0e1      	b.n	811a8e4 <tcp_receive+0xeb8>
 811a720:	10012170 	.word	0x10012170
 811a724:	1001216d 	.word	0x1001216d
 811a728:	10012140 	.word	0x10012140
 811a72c:	10012160 	.word	0x10012160
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 811a730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a732:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 811a734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a736:	681b      	ldr	r3, [r3, #0]
 811a738:	2b00      	cmp	r3, #0
 811a73a:	f040 80c5 	bne.w	811a8c8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 811a73e:	4b7f      	ldr	r3, [pc, #508]	@ (811a93c <tcp_receive+0xf10>)
 811a740:	681a      	ldr	r2, [r3, #0]
 811a742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a744:	68db      	ldr	r3, [r3, #12]
 811a746:	685b      	ldr	r3, [r3, #4]
 811a748:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 811a74a:	2b00      	cmp	r3, #0
 811a74c:	f340 80bc 	ble.w	811a8c8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 811a750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a752:	68db      	ldr	r3, [r3, #12]
 811a754:	899b      	ldrh	r3, [r3, #12]
 811a756:	b29b      	uxth	r3, r3
 811a758:	4618      	mov	r0, r3
 811a75a:	f7f7 fb9f 	bl	8111e9c <lwip_htons>
 811a75e:	4603      	mov	r3, r0
 811a760:	b2db      	uxtb	r3, r3
 811a762:	f003 0301 	and.w	r3, r3, #1
 811a766:	2b00      	cmp	r3, #0
 811a768:	f040 80be 	bne.w	811a8e8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 811a76c:	4874      	ldr	r0, [pc, #464]	@ (811a940 <tcp_receive+0xf14>)
 811a76e:	f7fd faa1 	bl	8117cb4 <tcp_seg_copy>
 811a772:	4602      	mov	r2, r0
 811a774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a776:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 811a778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a77a:	681b      	ldr	r3, [r3, #0]
 811a77c:	2b00      	cmp	r3, #0
 811a77e:	f000 80b5 	beq.w	811a8ec <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 811a782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a784:	68db      	ldr	r3, [r3, #12]
 811a786:	685b      	ldr	r3, [r3, #4]
 811a788:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 811a78a:	8912      	ldrh	r2, [r2, #8]
 811a78c:	441a      	add	r2, r3
 811a78e:	4b6b      	ldr	r3, [pc, #428]	@ (811a93c <tcp_receive+0xf10>)
 811a790:	681b      	ldr	r3, [r3, #0]
 811a792:	1ad3      	subs	r3, r2, r3
 811a794:	2b00      	cmp	r3, #0
 811a796:	dd12      	ble.n	811a7be <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 811a798:	4b68      	ldr	r3, [pc, #416]	@ (811a93c <tcp_receive+0xf10>)
 811a79a:	681b      	ldr	r3, [r3, #0]
 811a79c:	b29a      	uxth	r2, r3
 811a79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a7a0:	68db      	ldr	r3, [r3, #12]
 811a7a2:	685b      	ldr	r3, [r3, #4]
 811a7a4:	b29b      	uxth	r3, r3
 811a7a6:	1ad3      	subs	r3, r2, r3
 811a7a8:	b29a      	uxth	r2, r3
 811a7aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a7ac:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 811a7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a7b0:	685a      	ldr	r2, [r3, #4]
 811a7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a7b4:	891b      	ldrh	r3, [r3, #8]
 811a7b6:	4619      	mov	r1, r3
 811a7b8:	4610      	mov	r0, r2
 811a7ba:	f7fb fbf5 	bl	8115fa8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 811a7be:	4b61      	ldr	r3, [pc, #388]	@ (811a944 <tcp_receive+0xf18>)
 811a7c0:	881b      	ldrh	r3, [r3, #0]
 811a7c2:	461a      	mov	r2, r3
 811a7c4:	4b5d      	ldr	r3, [pc, #372]	@ (811a93c <tcp_receive+0xf10>)
 811a7c6:	681b      	ldr	r3, [r3, #0]
 811a7c8:	441a      	add	r2, r3
 811a7ca:	687b      	ldr	r3, [r7, #4]
 811a7cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a7ce:	6879      	ldr	r1, [r7, #4]
 811a7d0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811a7d2:	440b      	add	r3, r1
 811a7d4:	1ad3      	subs	r3, r2, r3
 811a7d6:	2b00      	cmp	r3, #0
 811a7d8:	f340 8088 	ble.w	811a8ec <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 811a7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a7de:	681b      	ldr	r3, [r3, #0]
 811a7e0:	68db      	ldr	r3, [r3, #12]
 811a7e2:	899b      	ldrh	r3, [r3, #12]
 811a7e4:	b29b      	uxth	r3, r3
 811a7e6:	4618      	mov	r0, r3
 811a7e8:	f7f7 fb58 	bl	8111e9c <lwip_htons>
 811a7ec:	4603      	mov	r3, r0
 811a7ee:	b2db      	uxtb	r3, r3
 811a7f0:	f003 0301 	and.w	r3, r3, #1
 811a7f4:	2b00      	cmp	r3, #0
 811a7f6:	d021      	beq.n	811a83c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 811a7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a7fa:	681b      	ldr	r3, [r3, #0]
 811a7fc:	68db      	ldr	r3, [r3, #12]
 811a7fe:	899b      	ldrh	r3, [r3, #12]
 811a800:	b29b      	uxth	r3, r3
 811a802:	b21b      	sxth	r3, r3
 811a804:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811a808:	b21c      	sxth	r4, r3
 811a80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a80c:	681b      	ldr	r3, [r3, #0]
 811a80e:	68db      	ldr	r3, [r3, #12]
 811a810:	899b      	ldrh	r3, [r3, #12]
 811a812:	b29b      	uxth	r3, r3
 811a814:	4618      	mov	r0, r3
 811a816:	f7f7 fb41 	bl	8111e9c <lwip_htons>
 811a81a:	4603      	mov	r3, r0
 811a81c:	b2db      	uxtb	r3, r3
 811a81e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 811a822:	b29b      	uxth	r3, r3
 811a824:	4618      	mov	r0, r3
 811a826:	f7f7 fb39 	bl	8111e9c <lwip_htons>
 811a82a:	4603      	mov	r3, r0
 811a82c:	b21b      	sxth	r3, r3
 811a82e:	4323      	orrs	r3, r4
 811a830:	b21a      	sxth	r2, r3
 811a832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a834:	681b      	ldr	r3, [r3, #0]
 811a836:	68db      	ldr	r3, [r3, #12]
 811a838:	b292      	uxth	r2, r2
 811a83a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 811a83c:	687b      	ldr	r3, [r7, #4]
 811a83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a840:	b29a      	uxth	r2, r3
 811a842:	687b      	ldr	r3, [r7, #4]
 811a844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811a846:	4413      	add	r3, r2
 811a848:	b299      	uxth	r1, r3
 811a84a:	4b3c      	ldr	r3, [pc, #240]	@ (811a93c <tcp_receive+0xf10>)
 811a84c:	681b      	ldr	r3, [r3, #0]
 811a84e:	b29a      	uxth	r2, r3
 811a850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a852:	681b      	ldr	r3, [r3, #0]
 811a854:	1a8a      	subs	r2, r1, r2
 811a856:	b292      	uxth	r2, r2
 811a858:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 811a85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a85c:	681b      	ldr	r3, [r3, #0]
 811a85e:	685a      	ldr	r2, [r3, #4]
 811a860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a862:	681b      	ldr	r3, [r3, #0]
 811a864:	891b      	ldrh	r3, [r3, #8]
 811a866:	4619      	mov	r1, r3
 811a868:	4610      	mov	r0, r2
 811a86a:	f7fb fb9d 	bl	8115fa8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 811a86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a870:	681b      	ldr	r3, [r3, #0]
 811a872:	891c      	ldrh	r4, [r3, #8]
 811a874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a876:	681b      	ldr	r3, [r3, #0]
 811a878:	68db      	ldr	r3, [r3, #12]
 811a87a:	899b      	ldrh	r3, [r3, #12]
 811a87c:	b29b      	uxth	r3, r3
 811a87e:	4618      	mov	r0, r3
 811a880:	f7f7 fb0c 	bl	8111e9c <lwip_htons>
 811a884:	4603      	mov	r3, r0
 811a886:	b2db      	uxtb	r3, r3
 811a888:	f003 0303 	and.w	r3, r3, #3
 811a88c:	2b00      	cmp	r3, #0
 811a88e:	d001      	beq.n	811a894 <tcp_receive+0xe68>
 811a890:	2301      	movs	r3, #1
 811a892:	e000      	b.n	811a896 <tcp_receive+0xe6a>
 811a894:	2300      	movs	r3, #0
 811a896:	4423      	add	r3, r4
 811a898:	b29a      	uxth	r2, r3
 811a89a:	4b2a      	ldr	r3, [pc, #168]	@ (811a944 <tcp_receive+0xf18>)
 811a89c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 811a89e:	4b29      	ldr	r3, [pc, #164]	@ (811a944 <tcp_receive+0xf18>)
 811a8a0:	881b      	ldrh	r3, [r3, #0]
 811a8a2:	461a      	mov	r2, r3
 811a8a4:	4b25      	ldr	r3, [pc, #148]	@ (811a93c <tcp_receive+0xf10>)
 811a8a6:	681b      	ldr	r3, [r3, #0]
 811a8a8:	441a      	add	r2, r3
 811a8aa:	687b      	ldr	r3, [r7, #4]
 811a8ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a8ae:	6879      	ldr	r1, [r7, #4]
 811a8b0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811a8b2:	440b      	add	r3, r1
 811a8b4:	429a      	cmp	r2, r3
 811a8b6:	d019      	beq.n	811a8ec <tcp_receive+0xec0>
 811a8b8:	4b23      	ldr	r3, [pc, #140]	@ (811a948 <tcp_receive+0xf1c>)
 811a8ba:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 811a8be:	4923      	ldr	r1, [pc, #140]	@ (811a94c <tcp_receive+0xf20>)
 811a8c0:	4823      	ldr	r0, [pc, #140]	@ (811a950 <tcp_receive+0xf24>)
 811a8c2:	f003 fa8b 	bl	811dddc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 811a8c6:	e011      	b.n	811a8ec <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 811a8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a8ca:	681b      	ldr	r3, [r3, #0]
 811a8cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 811a8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811a8d0:	2b00      	cmp	r3, #0
 811a8d2:	f47f aea5 	bne.w	811a620 <tcp_receive+0xbf4>
 811a8d6:	e00a      	b.n	811a8ee <tcp_receive+0xec2>
                break;
 811a8d8:	bf00      	nop
 811a8da:	e008      	b.n	811a8ee <tcp_receive+0xec2>
                break;
 811a8dc:	bf00      	nop
 811a8de:	e006      	b.n	811a8ee <tcp_receive+0xec2>
                  break;
 811a8e0:	bf00      	nop
 811a8e2:	e004      	b.n	811a8ee <tcp_receive+0xec2>
                  break;
 811a8e4:	bf00      	nop
 811a8e6:	e002      	b.n	811a8ee <tcp_receive+0xec2>
                  break;
 811a8e8:	bf00      	nop
 811a8ea:	e000      	b.n	811a8ee <tcp_receive+0xec2>
                break;
 811a8ec:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 811a8ee:	6878      	ldr	r0, [r7, #4]
 811a8f0:	f001 fa32 	bl	811bd58 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 811a8f4:	e003      	b.n	811a8fe <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 811a8f6:	6878      	ldr	r0, [r7, #4]
 811a8f8:	f001 fa2e 	bl	811bd58 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 811a8fc:	e01a      	b.n	811a934 <tcp_receive+0xf08>
 811a8fe:	e019      	b.n	811a934 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 811a900:	4b0e      	ldr	r3, [pc, #56]	@ (811a93c <tcp_receive+0xf10>)
 811a902:	681a      	ldr	r2, [r3, #0]
 811a904:	687b      	ldr	r3, [r7, #4]
 811a906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a908:	1ad3      	subs	r3, r2, r3
 811a90a:	2b00      	cmp	r3, #0
 811a90c:	db0a      	blt.n	811a924 <tcp_receive+0xef8>
 811a90e:	4b0b      	ldr	r3, [pc, #44]	@ (811a93c <tcp_receive+0xf10>)
 811a910:	681a      	ldr	r2, [r3, #0]
 811a912:	687b      	ldr	r3, [r7, #4]
 811a914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a916:	6879      	ldr	r1, [r7, #4]
 811a918:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811a91a:	440b      	add	r3, r1
 811a91c:	1ad3      	subs	r3, r2, r3
 811a91e:	3301      	adds	r3, #1
 811a920:	2b00      	cmp	r3, #0
 811a922:	dd07      	ble.n	811a934 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 811a924:	687b      	ldr	r3, [r7, #4]
 811a926:	8b5b      	ldrh	r3, [r3, #26]
 811a928:	f043 0302 	orr.w	r3, r3, #2
 811a92c:	b29a      	uxth	r2, r3
 811a92e:	687b      	ldr	r3, [r7, #4]
 811a930:	835a      	strh	r2, [r3, #26]
    }
  }
}
 811a932:	e7ff      	b.n	811a934 <tcp_receive+0xf08>
 811a934:	bf00      	nop
 811a936:	3750      	adds	r7, #80	@ 0x50
 811a938:	46bd      	mov	sp, r7
 811a93a:	bdb0      	pop	{r4, r5, r7, pc}
 811a93c:	10012160 	.word	0x10012160
 811a940:	10012140 	.word	0x10012140
 811a944:	1001216a 	.word	0x1001216a
 811a948:	081210f4 	.word	0x081210f4
 811a94c:	081214dc 	.word	0x081214dc
 811a950:	08121180 	.word	0x08121180

0811a954 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 811a954:	b480      	push	{r7}
 811a956:	b083      	sub	sp, #12
 811a958:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 811a95a:	4b15      	ldr	r3, [pc, #84]	@ (811a9b0 <tcp_get_next_optbyte+0x5c>)
 811a95c:	881b      	ldrh	r3, [r3, #0]
 811a95e:	1c5a      	adds	r2, r3, #1
 811a960:	b291      	uxth	r1, r2
 811a962:	4a13      	ldr	r2, [pc, #76]	@ (811a9b0 <tcp_get_next_optbyte+0x5c>)
 811a964:	8011      	strh	r1, [r2, #0]
 811a966:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 811a968:	4b12      	ldr	r3, [pc, #72]	@ (811a9b4 <tcp_get_next_optbyte+0x60>)
 811a96a:	681b      	ldr	r3, [r3, #0]
 811a96c:	2b00      	cmp	r3, #0
 811a96e:	d004      	beq.n	811a97a <tcp_get_next_optbyte+0x26>
 811a970:	4b11      	ldr	r3, [pc, #68]	@ (811a9b8 <tcp_get_next_optbyte+0x64>)
 811a972:	881b      	ldrh	r3, [r3, #0]
 811a974:	88fa      	ldrh	r2, [r7, #6]
 811a976:	429a      	cmp	r2, r3
 811a978:	d208      	bcs.n	811a98c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 811a97a:	4b10      	ldr	r3, [pc, #64]	@ (811a9bc <tcp_get_next_optbyte+0x68>)
 811a97c:	681b      	ldr	r3, [r3, #0]
 811a97e:	3314      	adds	r3, #20
 811a980:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 811a982:	88fb      	ldrh	r3, [r7, #6]
 811a984:	683a      	ldr	r2, [r7, #0]
 811a986:	4413      	add	r3, r2
 811a988:	781b      	ldrb	r3, [r3, #0]
 811a98a:	e00b      	b.n	811a9a4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 811a98c:	88fb      	ldrh	r3, [r7, #6]
 811a98e:	b2da      	uxtb	r2, r3
 811a990:	4b09      	ldr	r3, [pc, #36]	@ (811a9b8 <tcp_get_next_optbyte+0x64>)
 811a992:	881b      	ldrh	r3, [r3, #0]
 811a994:	b2db      	uxtb	r3, r3
 811a996:	1ad3      	subs	r3, r2, r3
 811a998:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 811a99a:	4b06      	ldr	r3, [pc, #24]	@ (811a9b4 <tcp_get_next_optbyte+0x60>)
 811a99c:	681a      	ldr	r2, [r3, #0]
 811a99e:	797b      	ldrb	r3, [r7, #5]
 811a9a0:	4413      	add	r3, r2
 811a9a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 811a9a4:	4618      	mov	r0, r3
 811a9a6:	370c      	adds	r7, #12
 811a9a8:	46bd      	mov	sp, r7
 811a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 811a9ae:	4770      	bx	lr
 811a9b0:	1001215c 	.word	0x1001215c
 811a9b4:	10012158 	.word	0x10012158
 811a9b8:	10012156 	.word	0x10012156
 811a9bc:	10012150 	.word	0x10012150

0811a9c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 811a9c0:	b580      	push	{r7, lr}
 811a9c2:	b084      	sub	sp, #16
 811a9c4:	af00      	add	r7, sp, #0
 811a9c6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 811a9c8:	687b      	ldr	r3, [r7, #4]
 811a9ca:	2b00      	cmp	r3, #0
 811a9cc:	d106      	bne.n	811a9dc <tcp_parseopt+0x1c>
 811a9ce:	4b33      	ldr	r3, [pc, #204]	@ (811aa9c <tcp_parseopt+0xdc>)
 811a9d0:	f240 727d 	movw	r2, #1917	@ 0x77d
 811a9d4:	4932      	ldr	r1, [pc, #200]	@ (811aaa0 <tcp_parseopt+0xe0>)
 811a9d6:	4833      	ldr	r0, [pc, #204]	@ (811aaa4 <tcp_parseopt+0xe4>)
 811a9d8:	f003 fa00 	bl	811dddc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 811a9dc:	4b32      	ldr	r3, [pc, #200]	@ (811aaa8 <tcp_parseopt+0xe8>)
 811a9de:	881b      	ldrh	r3, [r3, #0]
 811a9e0:	2b00      	cmp	r3, #0
 811a9e2:	d057      	beq.n	811aa94 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 811a9e4:	4b31      	ldr	r3, [pc, #196]	@ (811aaac <tcp_parseopt+0xec>)
 811a9e6:	2200      	movs	r2, #0
 811a9e8:	801a      	strh	r2, [r3, #0]
 811a9ea:	e047      	b.n	811aa7c <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 811a9ec:	f7ff ffb2 	bl	811a954 <tcp_get_next_optbyte>
 811a9f0:	4603      	mov	r3, r0
 811a9f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 811a9f4:	7bfb      	ldrb	r3, [r7, #15]
 811a9f6:	2b02      	cmp	r3, #2
 811a9f8:	d006      	beq.n	811aa08 <tcp_parseopt+0x48>
 811a9fa:	2b02      	cmp	r3, #2
 811a9fc:	dc2b      	bgt.n	811aa56 <tcp_parseopt+0x96>
 811a9fe:	2b00      	cmp	r3, #0
 811aa00:	d043      	beq.n	811aa8a <tcp_parseopt+0xca>
 811aa02:	2b01      	cmp	r3, #1
 811aa04:	d039      	beq.n	811aa7a <tcp_parseopt+0xba>
 811aa06:	e026      	b.n	811aa56 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 811aa08:	f7ff ffa4 	bl	811a954 <tcp_get_next_optbyte>
 811aa0c:	4603      	mov	r3, r0
 811aa0e:	2b04      	cmp	r3, #4
 811aa10:	d13d      	bne.n	811aa8e <tcp_parseopt+0xce>
 811aa12:	4b26      	ldr	r3, [pc, #152]	@ (811aaac <tcp_parseopt+0xec>)
 811aa14:	881b      	ldrh	r3, [r3, #0]
 811aa16:	3301      	adds	r3, #1
 811aa18:	4a23      	ldr	r2, [pc, #140]	@ (811aaa8 <tcp_parseopt+0xe8>)
 811aa1a:	8812      	ldrh	r2, [r2, #0]
 811aa1c:	4293      	cmp	r3, r2
 811aa1e:	da36      	bge.n	811aa8e <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 811aa20:	f7ff ff98 	bl	811a954 <tcp_get_next_optbyte>
 811aa24:	4603      	mov	r3, r0
 811aa26:	021b      	lsls	r3, r3, #8
 811aa28:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 811aa2a:	f7ff ff93 	bl	811a954 <tcp_get_next_optbyte>
 811aa2e:	4603      	mov	r3, r0
 811aa30:	461a      	mov	r2, r3
 811aa32:	89bb      	ldrh	r3, [r7, #12]
 811aa34:	4313      	orrs	r3, r2
 811aa36:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 811aa38:	89bb      	ldrh	r3, [r7, #12]
 811aa3a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 811aa3e:	4293      	cmp	r3, r2
 811aa40:	d804      	bhi.n	811aa4c <tcp_parseopt+0x8c>
 811aa42:	89bb      	ldrh	r3, [r7, #12]
 811aa44:	2b00      	cmp	r3, #0
 811aa46:	d001      	beq.n	811aa4c <tcp_parseopt+0x8c>
 811aa48:	89ba      	ldrh	r2, [r7, #12]
 811aa4a:	e001      	b.n	811aa50 <tcp_parseopt+0x90>
 811aa4c:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 811aa50:	687b      	ldr	r3, [r7, #4]
 811aa52:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 811aa54:	e012      	b.n	811aa7c <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 811aa56:	f7ff ff7d 	bl	811a954 <tcp_get_next_optbyte>
 811aa5a:	4603      	mov	r3, r0
 811aa5c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 811aa5e:	7afb      	ldrb	r3, [r7, #11]
 811aa60:	2b01      	cmp	r3, #1
 811aa62:	d916      	bls.n	811aa92 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 811aa64:	7afb      	ldrb	r3, [r7, #11]
 811aa66:	b29a      	uxth	r2, r3
 811aa68:	4b10      	ldr	r3, [pc, #64]	@ (811aaac <tcp_parseopt+0xec>)
 811aa6a:	881b      	ldrh	r3, [r3, #0]
 811aa6c:	4413      	add	r3, r2
 811aa6e:	b29b      	uxth	r3, r3
 811aa70:	3b02      	subs	r3, #2
 811aa72:	b29a      	uxth	r2, r3
 811aa74:	4b0d      	ldr	r3, [pc, #52]	@ (811aaac <tcp_parseopt+0xec>)
 811aa76:	801a      	strh	r2, [r3, #0]
 811aa78:	e000      	b.n	811aa7c <tcp_parseopt+0xbc>
          break;
 811aa7a:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 811aa7c:	4b0b      	ldr	r3, [pc, #44]	@ (811aaac <tcp_parseopt+0xec>)
 811aa7e:	881a      	ldrh	r2, [r3, #0]
 811aa80:	4b09      	ldr	r3, [pc, #36]	@ (811aaa8 <tcp_parseopt+0xe8>)
 811aa82:	881b      	ldrh	r3, [r3, #0]
 811aa84:	429a      	cmp	r2, r3
 811aa86:	d3b1      	bcc.n	811a9ec <tcp_parseopt+0x2c>
 811aa88:	e004      	b.n	811aa94 <tcp_parseopt+0xd4>
          return;
 811aa8a:	bf00      	nop
 811aa8c:	e002      	b.n	811aa94 <tcp_parseopt+0xd4>
            return;
 811aa8e:	bf00      	nop
 811aa90:	e000      	b.n	811aa94 <tcp_parseopt+0xd4>
            return;
 811aa92:	bf00      	nop
      }
    }
  }
}
 811aa94:	3710      	adds	r7, #16
 811aa96:	46bd      	mov	sp, r7
 811aa98:	bd80      	pop	{r7, pc}
 811aa9a:	bf00      	nop
 811aa9c:	081210f4 	.word	0x081210f4
 811aaa0:	08121598 	.word	0x08121598
 811aaa4:	08121180 	.word	0x08121180
 811aaa8:	10012154 	.word	0x10012154
 811aaac:	1001215c 	.word	0x1001215c

0811aab0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 811aab0:	b480      	push	{r7}
 811aab2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 811aab4:	4b05      	ldr	r3, [pc, #20]	@ (811aacc <tcp_trigger_input_pcb_close+0x1c>)
 811aab6:	781b      	ldrb	r3, [r3, #0]
 811aab8:	f043 0310 	orr.w	r3, r3, #16
 811aabc:	b2da      	uxtb	r2, r3
 811aabe:	4b03      	ldr	r3, [pc, #12]	@ (811aacc <tcp_trigger_input_pcb_close+0x1c>)
 811aac0:	701a      	strb	r2, [r3, #0]
}
 811aac2:	bf00      	nop
 811aac4:	46bd      	mov	sp, r7
 811aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 811aaca:	4770      	bx	lr
 811aacc:	1001216d 	.word	0x1001216d

0811aad0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 811aad0:	b580      	push	{r7, lr}
 811aad2:	b084      	sub	sp, #16
 811aad4:	af00      	add	r7, sp, #0
 811aad6:	60f8      	str	r0, [r7, #12]
 811aad8:	60b9      	str	r1, [r7, #8]
 811aada:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 811aadc:	68fb      	ldr	r3, [r7, #12]
 811aade:	2b00      	cmp	r3, #0
 811aae0:	d00a      	beq.n	811aaf8 <tcp_route+0x28>
 811aae2:	68fb      	ldr	r3, [r7, #12]
 811aae4:	7a1b      	ldrb	r3, [r3, #8]
 811aae6:	2b00      	cmp	r3, #0
 811aae8:	d006      	beq.n	811aaf8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 811aaea:	68fb      	ldr	r3, [r7, #12]
 811aaec:	7a1b      	ldrb	r3, [r3, #8]
 811aaee:	4618      	mov	r0, r3
 811aaf0:	f7fb f850 	bl	8115b94 <netif_get_by_index>
 811aaf4:	4603      	mov	r3, r0
 811aaf6:	e003      	b.n	811ab00 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 811aaf8:	6878      	ldr	r0, [r7, #4]
 811aafa:	f7f8 fd71 	bl	81135e0 <ip4_route>
 811aafe:	4603      	mov	r3, r0
  }
}
 811ab00:	4618      	mov	r0, r3
 811ab02:	3710      	adds	r7, #16
 811ab04:	46bd      	mov	sp, r7
 811ab06:	bd80      	pop	{r7, pc}

0811ab08 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 811ab08:	b590      	push	{r4, r7, lr}
 811ab0a:	b087      	sub	sp, #28
 811ab0c:	af00      	add	r7, sp, #0
 811ab0e:	60f8      	str	r0, [r7, #12]
 811ab10:	60b9      	str	r1, [r7, #8]
 811ab12:	603b      	str	r3, [r7, #0]
 811ab14:	4613      	mov	r3, r2
 811ab16:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 811ab18:	68fb      	ldr	r3, [r7, #12]
 811ab1a:	2b00      	cmp	r3, #0
 811ab1c:	d105      	bne.n	811ab2a <tcp_create_segment+0x22>
 811ab1e:	4b43      	ldr	r3, [pc, #268]	@ (811ac2c <tcp_create_segment+0x124>)
 811ab20:	22a3      	movs	r2, #163	@ 0xa3
 811ab22:	4943      	ldr	r1, [pc, #268]	@ (811ac30 <tcp_create_segment+0x128>)
 811ab24:	4843      	ldr	r0, [pc, #268]	@ (811ac34 <tcp_create_segment+0x12c>)
 811ab26:	f003 f959 	bl	811dddc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 811ab2a:	68bb      	ldr	r3, [r7, #8]
 811ab2c:	2b00      	cmp	r3, #0
 811ab2e:	d105      	bne.n	811ab3c <tcp_create_segment+0x34>
 811ab30:	4b3e      	ldr	r3, [pc, #248]	@ (811ac2c <tcp_create_segment+0x124>)
 811ab32:	22a4      	movs	r2, #164	@ 0xa4
 811ab34:	4940      	ldr	r1, [pc, #256]	@ (811ac38 <tcp_create_segment+0x130>)
 811ab36:	483f      	ldr	r0, [pc, #252]	@ (811ac34 <tcp_create_segment+0x12c>)
 811ab38:	f003 f950 	bl	811dddc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 811ab3c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 811ab40:	009b      	lsls	r3, r3, #2
 811ab42:	b2db      	uxtb	r3, r3
 811ab44:	f003 0304 	and.w	r3, r3, #4
 811ab48:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 811ab4a:	2003      	movs	r0, #3
 811ab4c:	f7fa fc96 	bl	811547c <memp_malloc>
 811ab50:	6138      	str	r0, [r7, #16]
 811ab52:	693b      	ldr	r3, [r7, #16]
 811ab54:	2b00      	cmp	r3, #0
 811ab56:	d104      	bne.n	811ab62 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 811ab58:	68b8      	ldr	r0, [r7, #8]
 811ab5a:	f7fb fba9 	bl	81162b0 <pbuf_free>
    return NULL;
 811ab5e:	2300      	movs	r3, #0
 811ab60:	e060      	b.n	811ac24 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 811ab62:	693b      	ldr	r3, [r7, #16]
 811ab64:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 811ab68:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 811ab6a:	693b      	ldr	r3, [r7, #16]
 811ab6c:	2200      	movs	r2, #0
 811ab6e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 811ab70:	693b      	ldr	r3, [r7, #16]
 811ab72:	68ba      	ldr	r2, [r7, #8]
 811ab74:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 811ab76:	68bb      	ldr	r3, [r7, #8]
 811ab78:	891a      	ldrh	r2, [r3, #8]
 811ab7a:	7dfb      	ldrb	r3, [r7, #23]
 811ab7c:	b29b      	uxth	r3, r3
 811ab7e:	429a      	cmp	r2, r3
 811ab80:	d205      	bcs.n	811ab8e <tcp_create_segment+0x86>
 811ab82:	4b2a      	ldr	r3, [pc, #168]	@ (811ac2c <tcp_create_segment+0x124>)
 811ab84:	22b0      	movs	r2, #176	@ 0xb0
 811ab86:	492d      	ldr	r1, [pc, #180]	@ (811ac3c <tcp_create_segment+0x134>)
 811ab88:	482a      	ldr	r0, [pc, #168]	@ (811ac34 <tcp_create_segment+0x12c>)
 811ab8a:	f003 f927 	bl	811dddc <iprintf>
  seg->len = p->tot_len - optlen;
 811ab8e:	68bb      	ldr	r3, [r7, #8]
 811ab90:	891a      	ldrh	r2, [r3, #8]
 811ab92:	7dfb      	ldrb	r3, [r7, #23]
 811ab94:	b29b      	uxth	r3, r3
 811ab96:	1ad3      	subs	r3, r2, r3
 811ab98:	b29a      	uxth	r2, r3
 811ab9a:	693b      	ldr	r3, [r7, #16]
 811ab9c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 811ab9e:	2114      	movs	r1, #20
 811aba0:	68b8      	ldr	r0, [r7, #8]
 811aba2:	f7fb faef 	bl	8116184 <pbuf_add_header>
 811aba6:	4603      	mov	r3, r0
 811aba8:	2b00      	cmp	r3, #0
 811abaa:	d004      	beq.n	811abb6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 811abac:	6938      	ldr	r0, [r7, #16]
 811abae:	f7fd f868 	bl	8117c82 <tcp_seg_free>
    return NULL;
 811abb2:	2300      	movs	r3, #0
 811abb4:	e036      	b.n	811ac24 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 811abb6:	693b      	ldr	r3, [r7, #16]
 811abb8:	685b      	ldr	r3, [r3, #4]
 811abba:	685a      	ldr	r2, [r3, #4]
 811abbc:	693b      	ldr	r3, [r7, #16]
 811abbe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 811abc0:	68fb      	ldr	r3, [r7, #12]
 811abc2:	8ada      	ldrh	r2, [r3, #22]
 811abc4:	693b      	ldr	r3, [r7, #16]
 811abc6:	68dc      	ldr	r4, [r3, #12]
 811abc8:	4610      	mov	r0, r2
 811abca:	f7f7 f967 	bl	8111e9c <lwip_htons>
 811abce:	4603      	mov	r3, r0
 811abd0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 811abd2:	68fb      	ldr	r3, [r7, #12]
 811abd4:	8b1a      	ldrh	r2, [r3, #24]
 811abd6:	693b      	ldr	r3, [r7, #16]
 811abd8:	68dc      	ldr	r4, [r3, #12]
 811abda:	4610      	mov	r0, r2
 811abdc:	f7f7 f95e 	bl	8111e9c <lwip_htons>
 811abe0:	4603      	mov	r3, r0
 811abe2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 811abe4:	693b      	ldr	r3, [r7, #16]
 811abe6:	68dc      	ldr	r4, [r3, #12]
 811abe8:	6838      	ldr	r0, [r7, #0]
 811abea:	f7f7 f96c 	bl	8111ec6 <lwip_htonl>
 811abee:	4603      	mov	r3, r0
 811abf0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 811abf2:	7dfb      	ldrb	r3, [r7, #23]
 811abf4:	089b      	lsrs	r3, r3, #2
 811abf6:	b2db      	uxtb	r3, r3
 811abf8:	3305      	adds	r3, #5
 811abfa:	b29b      	uxth	r3, r3
 811abfc:	031b      	lsls	r3, r3, #12
 811abfe:	b29a      	uxth	r2, r3
 811ac00:	79fb      	ldrb	r3, [r7, #7]
 811ac02:	b29b      	uxth	r3, r3
 811ac04:	4313      	orrs	r3, r2
 811ac06:	b29a      	uxth	r2, r3
 811ac08:	693b      	ldr	r3, [r7, #16]
 811ac0a:	68dc      	ldr	r4, [r3, #12]
 811ac0c:	4610      	mov	r0, r2
 811ac0e:	f7f7 f945 	bl	8111e9c <lwip_htons>
 811ac12:	4603      	mov	r3, r0
 811ac14:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 811ac16:	693b      	ldr	r3, [r7, #16]
 811ac18:	68db      	ldr	r3, [r3, #12]
 811ac1a:	2200      	movs	r2, #0
 811ac1c:	749a      	strb	r2, [r3, #18]
 811ac1e:	2200      	movs	r2, #0
 811ac20:	74da      	strb	r2, [r3, #19]
  return seg;
 811ac22:	693b      	ldr	r3, [r7, #16]
}
 811ac24:	4618      	mov	r0, r3
 811ac26:	371c      	adds	r7, #28
 811ac28:	46bd      	mov	sp, r7
 811ac2a:	bd90      	pop	{r4, r7, pc}
 811ac2c:	081215b4 	.word	0x081215b4
 811ac30:	08121628 	.word	0x08121628
 811ac34:	08121648 	.word	0x08121648
 811ac38:	08121670 	.word	0x08121670
 811ac3c:	08121694 	.word	0x08121694

0811ac40 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 811ac40:	b590      	push	{r4, r7, lr}
 811ac42:	b08b      	sub	sp, #44	@ 0x2c
 811ac44:	af02      	add	r7, sp, #8
 811ac46:	6078      	str	r0, [r7, #4]
 811ac48:	460b      	mov	r3, r1
 811ac4a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 811ac4c:	2300      	movs	r3, #0
 811ac4e:	61fb      	str	r3, [r7, #28]
 811ac50:	2300      	movs	r3, #0
 811ac52:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 811ac54:	2300      	movs	r3, #0
 811ac56:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 811ac58:	687b      	ldr	r3, [r7, #4]
 811ac5a:	2b00      	cmp	r3, #0
 811ac5c:	d106      	bne.n	811ac6c <tcp_split_unsent_seg+0x2c>
 811ac5e:	4b95      	ldr	r3, [pc, #596]	@ (811aeb4 <tcp_split_unsent_seg+0x274>)
 811ac60:	f240 324b 	movw	r2, #843	@ 0x34b
 811ac64:	4994      	ldr	r1, [pc, #592]	@ (811aeb8 <tcp_split_unsent_seg+0x278>)
 811ac66:	4895      	ldr	r0, [pc, #596]	@ (811aebc <tcp_split_unsent_seg+0x27c>)
 811ac68:	f003 f8b8 	bl	811dddc <iprintf>

  useg = pcb->unsent;
 811ac6c:	687b      	ldr	r3, [r7, #4]
 811ac6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811ac70:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 811ac72:	697b      	ldr	r3, [r7, #20]
 811ac74:	2b00      	cmp	r3, #0
 811ac76:	d102      	bne.n	811ac7e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 811ac78:	f04f 33ff 	mov.w	r3, #4294967295
 811ac7c:	e116      	b.n	811aeac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 811ac7e:	887b      	ldrh	r3, [r7, #2]
 811ac80:	2b00      	cmp	r3, #0
 811ac82:	d109      	bne.n	811ac98 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 811ac84:	4b8b      	ldr	r3, [pc, #556]	@ (811aeb4 <tcp_split_unsent_seg+0x274>)
 811ac86:	f240 3253 	movw	r2, #851	@ 0x353
 811ac8a:	498d      	ldr	r1, [pc, #564]	@ (811aec0 <tcp_split_unsent_seg+0x280>)
 811ac8c:	488b      	ldr	r0, [pc, #556]	@ (811aebc <tcp_split_unsent_seg+0x27c>)
 811ac8e:	f003 f8a5 	bl	811dddc <iprintf>
    return ERR_VAL;
 811ac92:	f06f 0305 	mvn.w	r3, #5
 811ac96:	e109      	b.n	811aeac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 811ac98:	697b      	ldr	r3, [r7, #20]
 811ac9a:	891b      	ldrh	r3, [r3, #8]
 811ac9c:	887a      	ldrh	r2, [r7, #2]
 811ac9e:	429a      	cmp	r2, r3
 811aca0:	d301      	bcc.n	811aca6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 811aca2:	2300      	movs	r3, #0
 811aca4:	e102      	b.n	811aeac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 811aca6:	687b      	ldr	r3, [r7, #4]
 811aca8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811acaa:	887a      	ldrh	r2, [r7, #2]
 811acac:	429a      	cmp	r2, r3
 811acae:	d906      	bls.n	811acbe <tcp_split_unsent_seg+0x7e>
 811acb0:	4b80      	ldr	r3, [pc, #512]	@ (811aeb4 <tcp_split_unsent_seg+0x274>)
 811acb2:	f240 325b 	movw	r2, #859	@ 0x35b
 811acb6:	4983      	ldr	r1, [pc, #524]	@ (811aec4 <tcp_split_unsent_seg+0x284>)
 811acb8:	4880      	ldr	r0, [pc, #512]	@ (811aebc <tcp_split_unsent_seg+0x27c>)
 811acba:	f003 f88f 	bl	811dddc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 811acbe:	697b      	ldr	r3, [r7, #20]
 811acc0:	891b      	ldrh	r3, [r3, #8]
 811acc2:	2b00      	cmp	r3, #0
 811acc4:	d106      	bne.n	811acd4 <tcp_split_unsent_seg+0x94>
 811acc6:	4b7b      	ldr	r3, [pc, #492]	@ (811aeb4 <tcp_split_unsent_seg+0x274>)
 811acc8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 811accc:	497e      	ldr	r1, [pc, #504]	@ (811aec8 <tcp_split_unsent_seg+0x288>)
 811acce:	487b      	ldr	r0, [pc, #492]	@ (811aebc <tcp_split_unsent_seg+0x27c>)
 811acd0:	f003 f884 	bl	811dddc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 811acd4:	697b      	ldr	r3, [r7, #20]
 811acd6:	7a9b      	ldrb	r3, [r3, #10]
 811acd8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 811acda:	7bfb      	ldrb	r3, [r7, #15]
 811acdc:	009b      	lsls	r3, r3, #2
 811acde:	b2db      	uxtb	r3, r3
 811ace0:	f003 0304 	and.w	r3, r3, #4
 811ace4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 811ace6:	697b      	ldr	r3, [r7, #20]
 811ace8:	891a      	ldrh	r2, [r3, #8]
 811acea:	887b      	ldrh	r3, [r7, #2]
 811acec:	1ad3      	subs	r3, r2, r3
 811acee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 811acf0:	7bbb      	ldrb	r3, [r7, #14]
 811acf2:	b29a      	uxth	r2, r3
 811acf4:	89bb      	ldrh	r3, [r7, #12]
 811acf6:	4413      	add	r3, r2
 811acf8:	b29b      	uxth	r3, r3
 811acfa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811acfe:	4619      	mov	r1, r3
 811ad00:	2036      	movs	r0, #54	@ 0x36
 811ad02:	f7fa fff1 	bl	8115ce8 <pbuf_alloc>
 811ad06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 811ad08:	693b      	ldr	r3, [r7, #16]
 811ad0a:	2b00      	cmp	r3, #0
 811ad0c:	f000 80b7 	beq.w	811ae7e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 811ad10:	697b      	ldr	r3, [r7, #20]
 811ad12:	685b      	ldr	r3, [r3, #4]
 811ad14:	891a      	ldrh	r2, [r3, #8]
 811ad16:	697b      	ldr	r3, [r7, #20]
 811ad18:	891b      	ldrh	r3, [r3, #8]
 811ad1a:	1ad3      	subs	r3, r2, r3
 811ad1c:	b29a      	uxth	r2, r3
 811ad1e:	887b      	ldrh	r3, [r7, #2]
 811ad20:	4413      	add	r3, r2
 811ad22:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 811ad24:	697b      	ldr	r3, [r7, #20]
 811ad26:	6858      	ldr	r0, [r3, #4]
 811ad28:	693b      	ldr	r3, [r7, #16]
 811ad2a:	685a      	ldr	r2, [r3, #4]
 811ad2c:	7bbb      	ldrb	r3, [r7, #14]
 811ad2e:	18d1      	adds	r1, r2, r3
 811ad30:	897b      	ldrh	r3, [r7, #10]
 811ad32:	89ba      	ldrh	r2, [r7, #12]
 811ad34:	f7fb fcc2 	bl	81166bc <pbuf_copy_partial>
 811ad38:	4603      	mov	r3, r0
 811ad3a:	461a      	mov	r2, r3
 811ad3c:	89bb      	ldrh	r3, [r7, #12]
 811ad3e:	4293      	cmp	r3, r2
 811ad40:	f040 809f 	bne.w	811ae82 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 811ad44:	697b      	ldr	r3, [r7, #20]
 811ad46:	68db      	ldr	r3, [r3, #12]
 811ad48:	899b      	ldrh	r3, [r3, #12]
 811ad4a:	b29b      	uxth	r3, r3
 811ad4c:	4618      	mov	r0, r3
 811ad4e:	f7f7 f8a5 	bl	8111e9c <lwip_htons>
 811ad52:	4603      	mov	r3, r0
 811ad54:	b2db      	uxtb	r3, r3
 811ad56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 811ad5a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 811ad5c:	2300      	movs	r3, #0
 811ad5e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 811ad60:	7efb      	ldrb	r3, [r7, #27]
 811ad62:	f003 0308 	and.w	r3, r3, #8
 811ad66:	2b00      	cmp	r3, #0
 811ad68:	d007      	beq.n	811ad7a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 811ad6a:	7efb      	ldrb	r3, [r7, #27]
 811ad6c:	f023 0308 	bic.w	r3, r3, #8
 811ad70:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 811ad72:	7ebb      	ldrb	r3, [r7, #26]
 811ad74:	f043 0308 	orr.w	r3, r3, #8
 811ad78:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 811ad7a:	7efb      	ldrb	r3, [r7, #27]
 811ad7c:	f003 0301 	and.w	r3, r3, #1
 811ad80:	2b00      	cmp	r3, #0
 811ad82:	d007      	beq.n	811ad94 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 811ad84:	7efb      	ldrb	r3, [r7, #27]
 811ad86:	f023 0301 	bic.w	r3, r3, #1
 811ad8a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 811ad8c:	7ebb      	ldrb	r3, [r7, #26]
 811ad8e:	f043 0301 	orr.w	r3, r3, #1
 811ad92:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 811ad94:	697b      	ldr	r3, [r7, #20]
 811ad96:	68db      	ldr	r3, [r3, #12]
 811ad98:	685b      	ldr	r3, [r3, #4]
 811ad9a:	4618      	mov	r0, r3
 811ad9c:	f7f7 f893 	bl	8111ec6 <lwip_htonl>
 811ada0:	4602      	mov	r2, r0
 811ada2:	887b      	ldrh	r3, [r7, #2]
 811ada4:	18d1      	adds	r1, r2, r3
 811ada6:	7eba      	ldrb	r2, [r7, #26]
 811ada8:	7bfb      	ldrb	r3, [r7, #15]
 811adaa:	9300      	str	r3, [sp, #0]
 811adac:	460b      	mov	r3, r1
 811adae:	6939      	ldr	r1, [r7, #16]
 811adb0:	6878      	ldr	r0, [r7, #4]
 811adb2:	f7ff fea9 	bl	811ab08 <tcp_create_segment>
 811adb6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 811adb8:	69fb      	ldr	r3, [r7, #28]
 811adba:	2b00      	cmp	r3, #0
 811adbc:	d063      	beq.n	811ae86 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 811adbe:	697b      	ldr	r3, [r7, #20]
 811adc0:	685b      	ldr	r3, [r3, #4]
 811adc2:	4618      	mov	r0, r3
 811adc4:	f7fb fb02 	bl	81163cc <pbuf_clen>
 811adc8:	4603      	mov	r3, r0
 811adca:	461a      	mov	r2, r3
 811adcc:	687b      	ldr	r3, [r7, #4]
 811adce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811add2:	1a9b      	subs	r3, r3, r2
 811add4:	b29a      	uxth	r2, r3
 811add6:	687b      	ldr	r3, [r7, #4]
 811add8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 811addc:	697b      	ldr	r3, [r7, #20]
 811adde:	6858      	ldr	r0, [r3, #4]
 811ade0:	697b      	ldr	r3, [r7, #20]
 811ade2:	685b      	ldr	r3, [r3, #4]
 811ade4:	891a      	ldrh	r2, [r3, #8]
 811ade6:	89bb      	ldrh	r3, [r7, #12]
 811ade8:	1ad3      	subs	r3, r2, r3
 811adea:	b29b      	uxth	r3, r3
 811adec:	4619      	mov	r1, r3
 811adee:	f7fb f8db 	bl	8115fa8 <pbuf_realloc>
  useg->len -= remainder;
 811adf2:	697b      	ldr	r3, [r7, #20]
 811adf4:	891a      	ldrh	r2, [r3, #8]
 811adf6:	89bb      	ldrh	r3, [r7, #12]
 811adf8:	1ad3      	subs	r3, r2, r3
 811adfa:	b29a      	uxth	r2, r3
 811adfc:	697b      	ldr	r3, [r7, #20]
 811adfe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 811ae00:	697b      	ldr	r3, [r7, #20]
 811ae02:	68db      	ldr	r3, [r3, #12]
 811ae04:	899b      	ldrh	r3, [r3, #12]
 811ae06:	b29c      	uxth	r4, r3
 811ae08:	7efb      	ldrb	r3, [r7, #27]
 811ae0a:	b29b      	uxth	r3, r3
 811ae0c:	4618      	mov	r0, r3
 811ae0e:	f7f7 f845 	bl	8111e9c <lwip_htons>
 811ae12:	4603      	mov	r3, r0
 811ae14:	461a      	mov	r2, r3
 811ae16:	697b      	ldr	r3, [r7, #20]
 811ae18:	68db      	ldr	r3, [r3, #12]
 811ae1a:	4322      	orrs	r2, r4
 811ae1c:	b292      	uxth	r2, r2
 811ae1e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 811ae20:	697b      	ldr	r3, [r7, #20]
 811ae22:	685b      	ldr	r3, [r3, #4]
 811ae24:	4618      	mov	r0, r3
 811ae26:	f7fb fad1 	bl	81163cc <pbuf_clen>
 811ae2a:	4603      	mov	r3, r0
 811ae2c:	461a      	mov	r2, r3
 811ae2e:	687b      	ldr	r3, [r7, #4]
 811ae30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811ae34:	4413      	add	r3, r2
 811ae36:	b29a      	uxth	r2, r3
 811ae38:	687b      	ldr	r3, [r7, #4]
 811ae3a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 811ae3e:	69fb      	ldr	r3, [r7, #28]
 811ae40:	685b      	ldr	r3, [r3, #4]
 811ae42:	4618      	mov	r0, r3
 811ae44:	f7fb fac2 	bl	81163cc <pbuf_clen>
 811ae48:	4603      	mov	r3, r0
 811ae4a:	461a      	mov	r2, r3
 811ae4c:	687b      	ldr	r3, [r7, #4]
 811ae4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811ae52:	4413      	add	r3, r2
 811ae54:	b29a      	uxth	r2, r3
 811ae56:	687b      	ldr	r3, [r7, #4]
 811ae58:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 811ae5c:	697b      	ldr	r3, [r7, #20]
 811ae5e:	681a      	ldr	r2, [r3, #0]
 811ae60:	69fb      	ldr	r3, [r7, #28]
 811ae62:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 811ae64:	697b      	ldr	r3, [r7, #20]
 811ae66:	69fa      	ldr	r2, [r7, #28]
 811ae68:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 811ae6a:	69fb      	ldr	r3, [r7, #28]
 811ae6c:	681b      	ldr	r3, [r3, #0]
 811ae6e:	2b00      	cmp	r3, #0
 811ae70:	d103      	bne.n	811ae7a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 811ae72:	687b      	ldr	r3, [r7, #4]
 811ae74:	2200      	movs	r2, #0
 811ae76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 811ae7a:	2300      	movs	r3, #0
 811ae7c:	e016      	b.n	811aeac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 811ae7e:	bf00      	nop
 811ae80:	e002      	b.n	811ae88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 811ae82:	bf00      	nop
 811ae84:	e000      	b.n	811ae88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 811ae86:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 811ae88:	69fb      	ldr	r3, [r7, #28]
 811ae8a:	2b00      	cmp	r3, #0
 811ae8c:	d006      	beq.n	811ae9c <tcp_split_unsent_seg+0x25c>
 811ae8e:	4b09      	ldr	r3, [pc, #36]	@ (811aeb4 <tcp_split_unsent_seg+0x274>)
 811ae90:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 811ae94:	490d      	ldr	r1, [pc, #52]	@ (811aecc <tcp_split_unsent_seg+0x28c>)
 811ae96:	4809      	ldr	r0, [pc, #36]	@ (811aebc <tcp_split_unsent_seg+0x27c>)
 811ae98:	f002 ffa0 	bl	811dddc <iprintf>
  if (p != NULL) {
 811ae9c:	693b      	ldr	r3, [r7, #16]
 811ae9e:	2b00      	cmp	r3, #0
 811aea0:	d002      	beq.n	811aea8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 811aea2:	6938      	ldr	r0, [r7, #16]
 811aea4:	f7fb fa04 	bl	81162b0 <pbuf_free>
  }

  return ERR_MEM;
 811aea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 811aeac:	4618      	mov	r0, r3
 811aeae:	3724      	adds	r7, #36	@ 0x24
 811aeb0:	46bd      	mov	sp, r7
 811aeb2:	bd90      	pop	{r4, r7, pc}
 811aeb4:	081215b4 	.word	0x081215b4
 811aeb8:	08121988 	.word	0x08121988
 811aebc:	08121648 	.word	0x08121648
 811aec0:	081219ac 	.word	0x081219ac
 811aec4:	081219d0 	.word	0x081219d0
 811aec8:	081219e0 	.word	0x081219e0
 811aecc:	081219f0 	.word	0x081219f0

0811aed0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 811aed0:	b590      	push	{r4, r7, lr}
 811aed2:	b085      	sub	sp, #20
 811aed4:	af00      	add	r7, sp, #0
 811aed6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 811aed8:	687b      	ldr	r3, [r7, #4]
 811aeda:	2b00      	cmp	r3, #0
 811aedc:	d106      	bne.n	811aeec <tcp_send_fin+0x1c>
 811aede:	4b21      	ldr	r3, [pc, #132]	@ (811af64 <tcp_send_fin+0x94>)
 811aee0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 811aee4:	4920      	ldr	r1, [pc, #128]	@ (811af68 <tcp_send_fin+0x98>)
 811aee6:	4821      	ldr	r0, [pc, #132]	@ (811af6c <tcp_send_fin+0x9c>)
 811aee8:	f002 ff78 	bl	811dddc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 811aeec:	687b      	ldr	r3, [r7, #4]
 811aeee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811aef0:	2b00      	cmp	r3, #0
 811aef2:	d02e      	beq.n	811af52 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 811aef4:	687b      	ldr	r3, [r7, #4]
 811aef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811aef8:	60fb      	str	r3, [r7, #12]
 811aefa:	e002      	b.n	811af02 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 811aefc:	68fb      	ldr	r3, [r7, #12]
 811aefe:	681b      	ldr	r3, [r3, #0]
 811af00:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 811af02:	68fb      	ldr	r3, [r7, #12]
 811af04:	681b      	ldr	r3, [r3, #0]
 811af06:	2b00      	cmp	r3, #0
 811af08:	d1f8      	bne.n	811aefc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 811af0a:	68fb      	ldr	r3, [r7, #12]
 811af0c:	68db      	ldr	r3, [r3, #12]
 811af0e:	899b      	ldrh	r3, [r3, #12]
 811af10:	b29b      	uxth	r3, r3
 811af12:	4618      	mov	r0, r3
 811af14:	f7f6 ffc2 	bl	8111e9c <lwip_htons>
 811af18:	4603      	mov	r3, r0
 811af1a:	b2db      	uxtb	r3, r3
 811af1c:	f003 0307 	and.w	r3, r3, #7
 811af20:	2b00      	cmp	r3, #0
 811af22:	d116      	bne.n	811af52 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 811af24:	68fb      	ldr	r3, [r7, #12]
 811af26:	68db      	ldr	r3, [r3, #12]
 811af28:	899b      	ldrh	r3, [r3, #12]
 811af2a:	b29c      	uxth	r4, r3
 811af2c:	2001      	movs	r0, #1
 811af2e:	f7f6 ffb5 	bl	8111e9c <lwip_htons>
 811af32:	4603      	mov	r3, r0
 811af34:	461a      	mov	r2, r3
 811af36:	68fb      	ldr	r3, [r7, #12]
 811af38:	68db      	ldr	r3, [r3, #12]
 811af3a:	4322      	orrs	r2, r4
 811af3c:	b292      	uxth	r2, r2
 811af3e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 811af40:	687b      	ldr	r3, [r7, #4]
 811af42:	8b5b      	ldrh	r3, [r3, #26]
 811af44:	f043 0320 	orr.w	r3, r3, #32
 811af48:	b29a      	uxth	r2, r3
 811af4a:	687b      	ldr	r3, [r7, #4]
 811af4c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 811af4e:	2300      	movs	r3, #0
 811af50:	e004      	b.n	811af5c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 811af52:	2101      	movs	r1, #1
 811af54:	6878      	ldr	r0, [r7, #4]
 811af56:	f000 f80b 	bl	811af70 <tcp_enqueue_flags>
 811af5a:	4603      	mov	r3, r0
}
 811af5c:	4618      	mov	r0, r3
 811af5e:	3714      	adds	r7, #20
 811af60:	46bd      	mov	sp, r7
 811af62:	bd90      	pop	{r4, r7, pc}
 811af64:	081215b4 	.word	0x081215b4
 811af68:	081219fc 	.word	0x081219fc
 811af6c:	08121648 	.word	0x08121648

0811af70 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 811af70:	b580      	push	{r7, lr}
 811af72:	b08a      	sub	sp, #40	@ 0x28
 811af74:	af02      	add	r7, sp, #8
 811af76:	6078      	str	r0, [r7, #4]
 811af78:	460b      	mov	r3, r1
 811af7a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 811af7c:	2300      	movs	r3, #0
 811af7e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 811af80:	2300      	movs	r3, #0
 811af82:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 811af84:	78fb      	ldrb	r3, [r7, #3]
 811af86:	f003 0303 	and.w	r3, r3, #3
 811af8a:	2b00      	cmp	r3, #0
 811af8c:	d106      	bne.n	811af9c <tcp_enqueue_flags+0x2c>
 811af8e:	4b67      	ldr	r3, [pc, #412]	@ (811b12c <tcp_enqueue_flags+0x1bc>)
 811af90:	f240 4211 	movw	r2, #1041	@ 0x411
 811af94:	4966      	ldr	r1, [pc, #408]	@ (811b130 <tcp_enqueue_flags+0x1c0>)
 811af96:	4867      	ldr	r0, [pc, #412]	@ (811b134 <tcp_enqueue_flags+0x1c4>)
 811af98:	f002 ff20 	bl	811dddc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 811af9c:	687b      	ldr	r3, [r7, #4]
 811af9e:	2b00      	cmp	r3, #0
 811afa0:	d106      	bne.n	811afb0 <tcp_enqueue_flags+0x40>
 811afa2:	4b62      	ldr	r3, [pc, #392]	@ (811b12c <tcp_enqueue_flags+0x1bc>)
 811afa4:	f240 4213 	movw	r2, #1043	@ 0x413
 811afa8:	4963      	ldr	r1, [pc, #396]	@ (811b138 <tcp_enqueue_flags+0x1c8>)
 811afaa:	4862      	ldr	r0, [pc, #392]	@ (811b134 <tcp_enqueue_flags+0x1c4>)
 811afac:	f002 ff16 	bl	811dddc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 811afb0:	78fb      	ldrb	r3, [r7, #3]
 811afb2:	f003 0302 	and.w	r3, r3, #2
 811afb6:	2b00      	cmp	r3, #0
 811afb8:	d001      	beq.n	811afbe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 811afba:	2301      	movs	r3, #1
 811afbc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 811afbe:	7ffb      	ldrb	r3, [r7, #31]
 811afc0:	009b      	lsls	r3, r3, #2
 811afc2:	b2db      	uxtb	r3, r3
 811afc4:	f003 0304 	and.w	r3, r3, #4
 811afc8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 811afca:	7dfb      	ldrb	r3, [r7, #23]
 811afcc:	b29b      	uxth	r3, r3
 811afce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811afd2:	4619      	mov	r1, r3
 811afd4:	2036      	movs	r0, #54	@ 0x36
 811afd6:	f7fa fe87 	bl	8115ce8 <pbuf_alloc>
 811afda:	6138      	str	r0, [r7, #16]
 811afdc:	693b      	ldr	r3, [r7, #16]
 811afde:	2b00      	cmp	r3, #0
 811afe0:	d109      	bne.n	811aff6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811afe2:	687b      	ldr	r3, [r7, #4]
 811afe4:	8b5b      	ldrh	r3, [r3, #26]
 811afe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811afea:	b29a      	uxth	r2, r3
 811afec:	687b      	ldr	r3, [r7, #4]
 811afee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 811aff0:	f04f 33ff 	mov.w	r3, #4294967295
 811aff4:	e095      	b.n	811b122 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 811aff6:	693b      	ldr	r3, [r7, #16]
 811aff8:	895a      	ldrh	r2, [r3, #10]
 811affa:	7dfb      	ldrb	r3, [r7, #23]
 811affc:	b29b      	uxth	r3, r3
 811affe:	429a      	cmp	r2, r3
 811b000:	d206      	bcs.n	811b010 <tcp_enqueue_flags+0xa0>
 811b002:	4b4a      	ldr	r3, [pc, #296]	@ (811b12c <tcp_enqueue_flags+0x1bc>)
 811b004:	f240 4239 	movw	r2, #1081	@ 0x439
 811b008:	494c      	ldr	r1, [pc, #304]	@ (811b13c <tcp_enqueue_flags+0x1cc>)
 811b00a:	484a      	ldr	r0, [pc, #296]	@ (811b134 <tcp_enqueue_flags+0x1c4>)
 811b00c:	f002 fee6 	bl	811dddc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 811b010:	687b      	ldr	r3, [r7, #4]
 811b012:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 811b014:	78fa      	ldrb	r2, [r7, #3]
 811b016:	7ffb      	ldrb	r3, [r7, #31]
 811b018:	9300      	str	r3, [sp, #0]
 811b01a:	460b      	mov	r3, r1
 811b01c:	6939      	ldr	r1, [r7, #16]
 811b01e:	6878      	ldr	r0, [r7, #4]
 811b020:	f7ff fd72 	bl	811ab08 <tcp_create_segment>
 811b024:	60f8      	str	r0, [r7, #12]
 811b026:	68fb      	ldr	r3, [r7, #12]
 811b028:	2b00      	cmp	r3, #0
 811b02a:	d109      	bne.n	811b040 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811b02c:	687b      	ldr	r3, [r7, #4]
 811b02e:	8b5b      	ldrh	r3, [r3, #26]
 811b030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811b034:	b29a      	uxth	r2, r3
 811b036:	687b      	ldr	r3, [r7, #4]
 811b038:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 811b03a:	f04f 33ff 	mov.w	r3, #4294967295
 811b03e:	e070      	b.n	811b122 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 811b040:	68fb      	ldr	r3, [r7, #12]
 811b042:	68db      	ldr	r3, [r3, #12]
 811b044:	f003 0303 	and.w	r3, r3, #3
 811b048:	2b00      	cmp	r3, #0
 811b04a:	d006      	beq.n	811b05a <tcp_enqueue_flags+0xea>
 811b04c:	4b37      	ldr	r3, [pc, #220]	@ (811b12c <tcp_enqueue_flags+0x1bc>)
 811b04e:	f240 4242 	movw	r2, #1090	@ 0x442
 811b052:	493b      	ldr	r1, [pc, #236]	@ (811b140 <tcp_enqueue_flags+0x1d0>)
 811b054:	4837      	ldr	r0, [pc, #220]	@ (811b134 <tcp_enqueue_flags+0x1c4>)
 811b056:	f002 fec1 	bl	811dddc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 811b05a:	68fb      	ldr	r3, [r7, #12]
 811b05c:	891b      	ldrh	r3, [r3, #8]
 811b05e:	2b00      	cmp	r3, #0
 811b060:	d006      	beq.n	811b070 <tcp_enqueue_flags+0x100>
 811b062:	4b32      	ldr	r3, [pc, #200]	@ (811b12c <tcp_enqueue_flags+0x1bc>)
 811b064:	f240 4243 	movw	r2, #1091	@ 0x443
 811b068:	4936      	ldr	r1, [pc, #216]	@ (811b144 <tcp_enqueue_flags+0x1d4>)
 811b06a:	4832      	ldr	r0, [pc, #200]	@ (811b134 <tcp_enqueue_flags+0x1c4>)
 811b06c:	f002 feb6 	bl	811dddc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 811b070:	687b      	ldr	r3, [r7, #4]
 811b072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811b074:	2b00      	cmp	r3, #0
 811b076:	d103      	bne.n	811b080 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 811b078:	687b      	ldr	r3, [r7, #4]
 811b07a:	68fa      	ldr	r2, [r7, #12]
 811b07c:	66da      	str	r2, [r3, #108]	@ 0x6c
 811b07e:	e00d      	b.n	811b09c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 811b080:	687b      	ldr	r3, [r7, #4]
 811b082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811b084:	61bb      	str	r3, [r7, #24]
 811b086:	e002      	b.n	811b08e <tcp_enqueue_flags+0x11e>
 811b088:	69bb      	ldr	r3, [r7, #24]
 811b08a:	681b      	ldr	r3, [r3, #0]
 811b08c:	61bb      	str	r3, [r7, #24]
 811b08e:	69bb      	ldr	r3, [r7, #24]
 811b090:	681b      	ldr	r3, [r3, #0]
 811b092:	2b00      	cmp	r3, #0
 811b094:	d1f8      	bne.n	811b088 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 811b096:	69bb      	ldr	r3, [r7, #24]
 811b098:	68fa      	ldr	r2, [r7, #12]
 811b09a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 811b09c:	687b      	ldr	r3, [r7, #4]
 811b09e:	2200      	movs	r2, #0
 811b0a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 811b0a4:	78fb      	ldrb	r3, [r7, #3]
 811b0a6:	f003 0302 	and.w	r3, r3, #2
 811b0aa:	2b00      	cmp	r3, #0
 811b0ac:	d104      	bne.n	811b0b8 <tcp_enqueue_flags+0x148>
 811b0ae:	78fb      	ldrb	r3, [r7, #3]
 811b0b0:	f003 0301 	and.w	r3, r3, #1
 811b0b4:	2b00      	cmp	r3, #0
 811b0b6:	d004      	beq.n	811b0c2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 811b0b8:	687b      	ldr	r3, [r7, #4]
 811b0ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 811b0bc:	1c5a      	adds	r2, r3, #1
 811b0be:	687b      	ldr	r3, [r7, #4]
 811b0c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 811b0c2:	78fb      	ldrb	r3, [r7, #3]
 811b0c4:	f003 0301 	and.w	r3, r3, #1
 811b0c8:	2b00      	cmp	r3, #0
 811b0ca:	d006      	beq.n	811b0da <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 811b0cc:	687b      	ldr	r3, [r7, #4]
 811b0ce:	8b5b      	ldrh	r3, [r3, #26]
 811b0d0:	f043 0320 	orr.w	r3, r3, #32
 811b0d4:	b29a      	uxth	r2, r3
 811b0d6:	687b      	ldr	r3, [r7, #4]
 811b0d8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 811b0da:	68fb      	ldr	r3, [r7, #12]
 811b0dc:	685b      	ldr	r3, [r3, #4]
 811b0de:	4618      	mov	r0, r3
 811b0e0:	f7fb f974 	bl	81163cc <pbuf_clen>
 811b0e4:	4603      	mov	r3, r0
 811b0e6:	461a      	mov	r2, r3
 811b0e8:	687b      	ldr	r3, [r7, #4]
 811b0ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811b0ee:	4413      	add	r3, r2
 811b0f0:	b29a      	uxth	r2, r3
 811b0f2:	687b      	ldr	r3, [r7, #4]
 811b0f4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 811b0f8:	687b      	ldr	r3, [r7, #4]
 811b0fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811b0fe:	2b00      	cmp	r3, #0
 811b100:	d00e      	beq.n	811b120 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 811b102:	687b      	ldr	r3, [r7, #4]
 811b104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811b106:	2b00      	cmp	r3, #0
 811b108:	d10a      	bne.n	811b120 <tcp_enqueue_flags+0x1b0>
 811b10a:	687b      	ldr	r3, [r7, #4]
 811b10c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811b10e:	2b00      	cmp	r3, #0
 811b110:	d106      	bne.n	811b120 <tcp_enqueue_flags+0x1b0>
 811b112:	4b06      	ldr	r3, [pc, #24]	@ (811b12c <tcp_enqueue_flags+0x1bc>)
 811b114:	f240 4265 	movw	r2, #1125	@ 0x465
 811b118:	490b      	ldr	r1, [pc, #44]	@ (811b148 <tcp_enqueue_flags+0x1d8>)
 811b11a:	4806      	ldr	r0, [pc, #24]	@ (811b134 <tcp_enqueue_flags+0x1c4>)
 811b11c:	f002 fe5e 	bl	811dddc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 811b120:	2300      	movs	r3, #0
}
 811b122:	4618      	mov	r0, r3
 811b124:	3720      	adds	r7, #32
 811b126:	46bd      	mov	sp, r7
 811b128:	bd80      	pop	{r7, pc}
 811b12a:	bf00      	nop
 811b12c:	081215b4 	.word	0x081215b4
 811b130:	08121a18 	.word	0x08121a18
 811b134:	08121648 	.word	0x08121648
 811b138:	08121a70 	.word	0x08121a70
 811b13c:	08121a90 	.word	0x08121a90
 811b140:	08121acc 	.word	0x08121acc
 811b144:	08121ae4 	.word	0x08121ae4
 811b148:	08121b10 	.word	0x08121b10

0811b14c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 811b14c:	b5b0      	push	{r4, r5, r7, lr}
 811b14e:	b08a      	sub	sp, #40	@ 0x28
 811b150:	af00      	add	r7, sp, #0
 811b152:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 811b154:	687b      	ldr	r3, [r7, #4]
 811b156:	2b00      	cmp	r3, #0
 811b158:	d106      	bne.n	811b168 <tcp_output+0x1c>
 811b15a:	4b8a      	ldr	r3, [pc, #552]	@ (811b384 <tcp_output+0x238>)
 811b15c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 811b160:	4989      	ldr	r1, [pc, #548]	@ (811b388 <tcp_output+0x23c>)
 811b162:	488a      	ldr	r0, [pc, #552]	@ (811b38c <tcp_output+0x240>)
 811b164:	f002 fe3a 	bl	811dddc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 811b168:	687b      	ldr	r3, [r7, #4]
 811b16a:	7d1b      	ldrb	r3, [r3, #20]
 811b16c:	2b01      	cmp	r3, #1
 811b16e:	d106      	bne.n	811b17e <tcp_output+0x32>
 811b170:	4b84      	ldr	r3, [pc, #528]	@ (811b384 <tcp_output+0x238>)
 811b172:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 811b176:	4986      	ldr	r1, [pc, #536]	@ (811b390 <tcp_output+0x244>)
 811b178:	4884      	ldr	r0, [pc, #528]	@ (811b38c <tcp_output+0x240>)
 811b17a:	f002 fe2f 	bl	811dddc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 811b17e:	4b85      	ldr	r3, [pc, #532]	@ (811b394 <tcp_output+0x248>)
 811b180:	681b      	ldr	r3, [r3, #0]
 811b182:	687a      	ldr	r2, [r7, #4]
 811b184:	429a      	cmp	r2, r3
 811b186:	d101      	bne.n	811b18c <tcp_output+0x40>
    return ERR_OK;
 811b188:	2300      	movs	r3, #0
 811b18a:	e1ce      	b.n	811b52a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 811b18c:	687b      	ldr	r3, [r7, #4]
 811b18e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811b192:	687b      	ldr	r3, [r7, #4]
 811b194:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811b198:	4293      	cmp	r3, r2
 811b19a:	bf28      	it	cs
 811b19c:	4613      	movcs	r3, r2
 811b19e:	b29b      	uxth	r3, r3
 811b1a0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 811b1a2:	687b      	ldr	r3, [r7, #4]
 811b1a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811b1a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 811b1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b1aa:	2b00      	cmp	r3, #0
 811b1ac:	d10b      	bne.n	811b1c6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 811b1ae:	687b      	ldr	r3, [r7, #4]
 811b1b0:	8b5b      	ldrh	r3, [r3, #26]
 811b1b2:	f003 0302 	and.w	r3, r3, #2
 811b1b6:	2b00      	cmp	r3, #0
 811b1b8:	f000 81aa 	beq.w	811b510 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 811b1bc:	6878      	ldr	r0, [r7, #4]
 811b1be:	f000 fdcb 	bl	811bd58 <tcp_send_empty_ack>
 811b1c2:	4603      	mov	r3, r0
 811b1c4:	e1b1      	b.n	811b52a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 811b1c6:	6879      	ldr	r1, [r7, #4]
 811b1c8:	687b      	ldr	r3, [r7, #4]
 811b1ca:	3304      	adds	r3, #4
 811b1cc:	461a      	mov	r2, r3
 811b1ce:	6878      	ldr	r0, [r7, #4]
 811b1d0:	f7ff fc7e 	bl	811aad0 <tcp_route>
 811b1d4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 811b1d6:	697b      	ldr	r3, [r7, #20]
 811b1d8:	2b00      	cmp	r3, #0
 811b1da:	d102      	bne.n	811b1e2 <tcp_output+0x96>
    return ERR_RTE;
 811b1dc:	f06f 0303 	mvn.w	r3, #3
 811b1e0:	e1a3      	b.n	811b52a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 811b1e2:	687b      	ldr	r3, [r7, #4]
 811b1e4:	2b00      	cmp	r3, #0
 811b1e6:	d003      	beq.n	811b1f0 <tcp_output+0xa4>
 811b1e8:	687b      	ldr	r3, [r7, #4]
 811b1ea:	681b      	ldr	r3, [r3, #0]
 811b1ec:	2b00      	cmp	r3, #0
 811b1ee:	d111      	bne.n	811b214 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 811b1f0:	697b      	ldr	r3, [r7, #20]
 811b1f2:	2b00      	cmp	r3, #0
 811b1f4:	d002      	beq.n	811b1fc <tcp_output+0xb0>
 811b1f6:	697b      	ldr	r3, [r7, #20]
 811b1f8:	3304      	adds	r3, #4
 811b1fa:	e000      	b.n	811b1fe <tcp_output+0xb2>
 811b1fc:	2300      	movs	r3, #0
 811b1fe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 811b200:	693b      	ldr	r3, [r7, #16]
 811b202:	2b00      	cmp	r3, #0
 811b204:	d102      	bne.n	811b20c <tcp_output+0xc0>
      return ERR_RTE;
 811b206:	f06f 0303 	mvn.w	r3, #3
 811b20a:	e18e      	b.n	811b52a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 811b20c:	693b      	ldr	r3, [r7, #16]
 811b20e:	681a      	ldr	r2, [r3, #0]
 811b210:	687b      	ldr	r3, [r7, #4]
 811b212:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 811b214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b216:	68db      	ldr	r3, [r3, #12]
 811b218:	685b      	ldr	r3, [r3, #4]
 811b21a:	4618      	mov	r0, r3
 811b21c:	f7f6 fe53 	bl	8111ec6 <lwip_htonl>
 811b220:	4602      	mov	r2, r0
 811b222:	687b      	ldr	r3, [r7, #4]
 811b224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811b226:	1ad3      	subs	r3, r2, r3
 811b228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811b22a:	8912      	ldrh	r2, [r2, #8]
 811b22c:	4413      	add	r3, r2
 811b22e:	69ba      	ldr	r2, [r7, #24]
 811b230:	429a      	cmp	r2, r3
 811b232:	d227      	bcs.n	811b284 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 811b234:	687b      	ldr	r3, [r7, #4]
 811b236:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811b23a:	461a      	mov	r2, r3
 811b23c:	69bb      	ldr	r3, [r7, #24]
 811b23e:	4293      	cmp	r3, r2
 811b240:	d114      	bne.n	811b26c <tcp_output+0x120>
 811b242:	687b      	ldr	r3, [r7, #4]
 811b244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811b246:	2b00      	cmp	r3, #0
 811b248:	d110      	bne.n	811b26c <tcp_output+0x120>
 811b24a:	687b      	ldr	r3, [r7, #4]
 811b24c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811b250:	2b00      	cmp	r3, #0
 811b252:	d10b      	bne.n	811b26c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 811b254:	687b      	ldr	r3, [r7, #4]
 811b256:	2200      	movs	r2, #0
 811b258:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      pcb->persist_backoff = 1;
 811b25c:	687b      	ldr	r3, [r7, #4]
 811b25e:	2201      	movs	r2, #1
 811b260:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
      pcb->persist_probe = 0;
 811b264:	687b      	ldr	r3, [r7, #4]
 811b266:	2200      	movs	r2, #0
 811b268:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 811b26c:	687b      	ldr	r3, [r7, #4]
 811b26e:	8b5b      	ldrh	r3, [r3, #26]
 811b270:	f003 0302 	and.w	r3, r3, #2
 811b274:	2b00      	cmp	r3, #0
 811b276:	f000 814d 	beq.w	811b514 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 811b27a:	6878      	ldr	r0, [r7, #4]
 811b27c:	f000 fd6c 	bl	811bd58 <tcp_send_empty_ack>
 811b280:	4603      	mov	r3, r0
 811b282:	e152      	b.n	811b52a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 811b284:	687b      	ldr	r3, [r7, #4]
 811b286:	2200      	movs	r2, #0
 811b288:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 811b28c:	687b      	ldr	r3, [r7, #4]
 811b28e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811b290:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 811b292:	6a3b      	ldr	r3, [r7, #32]
 811b294:	2b00      	cmp	r3, #0
 811b296:	f000 811c 	beq.w	811b4d2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 811b29a:	e002      	b.n	811b2a2 <tcp_output+0x156>
 811b29c:	6a3b      	ldr	r3, [r7, #32]
 811b29e:	681b      	ldr	r3, [r3, #0]
 811b2a0:	623b      	str	r3, [r7, #32]
 811b2a2:	6a3b      	ldr	r3, [r7, #32]
 811b2a4:	681b      	ldr	r3, [r3, #0]
 811b2a6:	2b00      	cmp	r3, #0
 811b2a8:	d1f8      	bne.n	811b29c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 811b2aa:	e112      	b.n	811b4d2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 811b2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b2ae:	68db      	ldr	r3, [r3, #12]
 811b2b0:	899b      	ldrh	r3, [r3, #12]
 811b2b2:	b29b      	uxth	r3, r3
 811b2b4:	4618      	mov	r0, r3
 811b2b6:	f7f6 fdf1 	bl	8111e9c <lwip_htons>
 811b2ba:	4603      	mov	r3, r0
 811b2bc:	b2db      	uxtb	r3, r3
 811b2be:	f003 0304 	and.w	r3, r3, #4
 811b2c2:	2b00      	cmp	r3, #0
 811b2c4:	d006      	beq.n	811b2d4 <tcp_output+0x188>
 811b2c6:	4b2f      	ldr	r3, [pc, #188]	@ (811b384 <tcp_output+0x238>)
 811b2c8:	f240 5236 	movw	r2, #1334	@ 0x536
 811b2cc:	4932      	ldr	r1, [pc, #200]	@ (811b398 <tcp_output+0x24c>)
 811b2ce:	482f      	ldr	r0, [pc, #188]	@ (811b38c <tcp_output+0x240>)
 811b2d0:	f002 fd84 	bl	811dddc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 811b2d4:	687b      	ldr	r3, [r7, #4]
 811b2d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811b2d8:	2b00      	cmp	r3, #0
 811b2da:	d01f      	beq.n	811b31c <tcp_output+0x1d0>
 811b2dc:	687b      	ldr	r3, [r7, #4]
 811b2de:	8b5b      	ldrh	r3, [r3, #26]
 811b2e0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 811b2e4:	2b00      	cmp	r3, #0
 811b2e6:	d119      	bne.n	811b31c <tcp_output+0x1d0>
 811b2e8:	687b      	ldr	r3, [r7, #4]
 811b2ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811b2ec:	2b00      	cmp	r3, #0
 811b2ee:	d00b      	beq.n	811b308 <tcp_output+0x1bc>
 811b2f0:	687b      	ldr	r3, [r7, #4]
 811b2f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811b2f4:	681b      	ldr	r3, [r3, #0]
 811b2f6:	2b00      	cmp	r3, #0
 811b2f8:	d110      	bne.n	811b31c <tcp_output+0x1d0>
 811b2fa:	687b      	ldr	r3, [r7, #4]
 811b2fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811b2fe:	891a      	ldrh	r2, [r3, #8]
 811b300:	687b      	ldr	r3, [r7, #4]
 811b302:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811b304:	429a      	cmp	r2, r3
 811b306:	d209      	bcs.n	811b31c <tcp_output+0x1d0>
 811b308:	687b      	ldr	r3, [r7, #4]
 811b30a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 811b30e:	2b00      	cmp	r3, #0
 811b310:	d004      	beq.n	811b31c <tcp_output+0x1d0>
 811b312:	687b      	ldr	r3, [r7, #4]
 811b314:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811b318:	2b0f      	cmp	r3, #15
 811b31a:	d901      	bls.n	811b320 <tcp_output+0x1d4>
 811b31c:	2301      	movs	r3, #1
 811b31e:	e000      	b.n	811b322 <tcp_output+0x1d6>
 811b320:	2300      	movs	r3, #0
 811b322:	2b00      	cmp	r3, #0
 811b324:	d106      	bne.n	811b334 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 811b326:	687b      	ldr	r3, [r7, #4]
 811b328:	8b5b      	ldrh	r3, [r3, #26]
 811b32a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 811b32e:	2b00      	cmp	r3, #0
 811b330:	f000 80e4 	beq.w	811b4fc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 811b334:	687b      	ldr	r3, [r7, #4]
 811b336:	7d1b      	ldrb	r3, [r3, #20]
 811b338:	2b02      	cmp	r3, #2
 811b33a:	d00d      	beq.n	811b358 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 811b33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b33e:	68db      	ldr	r3, [r3, #12]
 811b340:	899b      	ldrh	r3, [r3, #12]
 811b342:	b29c      	uxth	r4, r3
 811b344:	2010      	movs	r0, #16
 811b346:	f7f6 fda9 	bl	8111e9c <lwip_htons>
 811b34a:	4603      	mov	r3, r0
 811b34c:	461a      	mov	r2, r3
 811b34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b350:	68db      	ldr	r3, [r3, #12]
 811b352:	4322      	orrs	r2, r4
 811b354:	b292      	uxth	r2, r2
 811b356:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 811b358:	697a      	ldr	r2, [r7, #20]
 811b35a:	6879      	ldr	r1, [r7, #4]
 811b35c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811b35e:	f000 f909 	bl	811b574 <tcp_output_segment>
 811b362:	4603      	mov	r3, r0
 811b364:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 811b366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811b36a:	2b00      	cmp	r3, #0
 811b36c:	d016      	beq.n	811b39c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811b36e:	687b      	ldr	r3, [r7, #4]
 811b370:	8b5b      	ldrh	r3, [r3, #26]
 811b372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811b376:	b29a      	uxth	r2, r3
 811b378:	687b      	ldr	r3, [r7, #4]
 811b37a:	835a      	strh	r2, [r3, #26]
      return err;
 811b37c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811b380:	e0d3      	b.n	811b52a <tcp_output+0x3de>
 811b382:	bf00      	nop
 811b384:	081215b4 	.word	0x081215b4
 811b388:	08121b38 	.word	0x08121b38
 811b38c:	08121648 	.word	0x08121648
 811b390:	08121b50 	.word	0x08121b50
 811b394:	10012174 	.word	0x10012174
 811b398:	08121b78 	.word	0x08121b78
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 811b39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b39e:	681a      	ldr	r2, [r3, #0]
 811b3a0:	687b      	ldr	r3, [r7, #4]
 811b3a2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 811b3a4:	687b      	ldr	r3, [r7, #4]
 811b3a6:	7d1b      	ldrb	r3, [r3, #20]
 811b3a8:	2b02      	cmp	r3, #2
 811b3aa:	d006      	beq.n	811b3ba <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811b3ac:	687b      	ldr	r3, [r7, #4]
 811b3ae:	8b5b      	ldrh	r3, [r3, #26]
 811b3b0:	f023 0303 	bic.w	r3, r3, #3
 811b3b4:	b29a      	uxth	r2, r3
 811b3b6:	687b      	ldr	r3, [r7, #4]
 811b3b8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 811b3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b3bc:	68db      	ldr	r3, [r3, #12]
 811b3be:	685b      	ldr	r3, [r3, #4]
 811b3c0:	4618      	mov	r0, r3
 811b3c2:	f7f6 fd80 	bl	8111ec6 <lwip_htonl>
 811b3c6:	4604      	mov	r4, r0
 811b3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b3ca:	891b      	ldrh	r3, [r3, #8]
 811b3cc:	461d      	mov	r5, r3
 811b3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b3d0:	68db      	ldr	r3, [r3, #12]
 811b3d2:	899b      	ldrh	r3, [r3, #12]
 811b3d4:	b29b      	uxth	r3, r3
 811b3d6:	4618      	mov	r0, r3
 811b3d8:	f7f6 fd60 	bl	8111e9c <lwip_htons>
 811b3dc:	4603      	mov	r3, r0
 811b3de:	b2db      	uxtb	r3, r3
 811b3e0:	f003 0303 	and.w	r3, r3, #3
 811b3e4:	2b00      	cmp	r3, #0
 811b3e6:	d001      	beq.n	811b3ec <tcp_output+0x2a0>
 811b3e8:	2301      	movs	r3, #1
 811b3ea:	e000      	b.n	811b3ee <tcp_output+0x2a2>
 811b3ec:	2300      	movs	r3, #0
 811b3ee:	442b      	add	r3, r5
 811b3f0:	4423      	add	r3, r4
 811b3f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 811b3f4:	687b      	ldr	r3, [r7, #4]
 811b3f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811b3f8:	68bb      	ldr	r3, [r7, #8]
 811b3fa:	1ad3      	subs	r3, r2, r3
 811b3fc:	2b00      	cmp	r3, #0
 811b3fe:	da02      	bge.n	811b406 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 811b400:	687b      	ldr	r3, [r7, #4]
 811b402:	68ba      	ldr	r2, [r7, #8]
 811b404:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 811b406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b408:	891b      	ldrh	r3, [r3, #8]
 811b40a:	461c      	mov	r4, r3
 811b40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b40e:	68db      	ldr	r3, [r3, #12]
 811b410:	899b      	ldrh	r3, [r3, #12]
 811b412:	b29b      	uxth	r3, r3
 811b414:	4618      	mov	r0, r3
 811b416:	f7f6 fd41 	bl	8111e9c <lwip_htons>
 811b41a:	4603      	mov	r3, r0
 811b41c:	b2db      	uxtb	r3, r3
 811b41e:	f003 0303 	and.w	r3, r3, #3
 811b422:	2b00      	cmp	r3, #0
 811b424:	d001      	beq.n	811b42a <tcp_output+0x2de>
 811b426:	2301      	movs	r3, #1
 811b428:	e000      	b.n	811b42c <tcp_output+0x2e0>
 811b42a:	2300      	movs	r3, #0
 811b42c:	4423      	add	r3, r4
 811b42e:	2b00      	cmp	r3, #0
 811b430:	d049      	beq.n	811b4c6 <tcp_output+0x37a>
      seg->next = NULL;
 811b432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b434:	2200      	movs	r2, #0
 811b436:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 811b438:	687b      	ldr	r3, [r7, #4]
 811b43a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811b43c:	2b00      	cmp	r3, #0
 811b43e:	d105      	bne.n	811b44c <tcp_output+0x300>
        pcb->unacked = seg;
 811b440:	687b      	ldr	r3, [r7, #4]
 811b442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811b444:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 811b446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b448:	623b      	str	r3, [r7, #32]
 811b44a:	e03f      	b.n	811b4cc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 811b44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b44e:	68db      	ldr	r3, [r3, #12]
 811b450:	685b      	ldr	r3, [r3, #4]
 811b452:	4618      	mov	r0, r3
 811b454:	f7f6 fd37 	bl	8111ec6 <lwip_htonl>
 811b458:	4604      	mov	r4, r0
 811b45a:	6a3b      	ldr	r3, [r7, #32]
 811b45c:	68db      	ldr	r3, [r3, #12]
 811b45e:	685b      	ldr	r3, [r3, #4]
 811b460:	4618      	mov	r0, r3
 811b462:	f7f6 fd30 	bl	8111ec6 <lwip_htonl>
 811b466:	4603      	mov	r3, r0
 811b468:	1ae3      	subs	r3, r4, r3
 811b46a:	2b00      	cmp	r3, #0
 811b46c:	da24      	bge.n	811b4b8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 811b46e:	687b      	ldr	r3, [r7, #4]
 811b470:	3370      	adds	r3, #112	@ 0x70
 811b472:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 811b474:	e002      	b.n	811b47c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 811b476:	69fb      	ldr	r3, [r7, #28]
 811b478:	681b      	ldr	r3, [r3, #0]
 811b47a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 811b47c:	69fb      	ldr	r3, [r7, #28]
 811b47e:	681b      	ldr	r3, [r3, #0]
 811b480:	2b00      	cmp	r3, #0
 811b482:	d011      	beq.n	811b4a8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 811b484:	69fb      	ldr	r3, [r7, #28]
 811b486:	681b      	ldr	r3, [r3, #0]
 811b488:	68db      	ldr	r3, [r3, #12]
 811b48a:	685b      	ldr	r3, [r3, #4]
 811b48c:	4618      	mov	r0, r3
 811b48e:	f7f6 fd1a 	bl	8111ec6 <lwip_htonl>
 811b492:	4604      	mov	r4, r0
 811b494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b496:	68db      	ldr	r3, [r3, #12]
 811b498:	685b      	ldr	r3, [r3, #4]
 811b49a:	4618      	mov	r0, r3
 811b49c:	f7f6 fd13 	bl	8111ec6 <lwip_htonl>
 811b4a0:	4603      	mov	r3, r0
 811b4a2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 811b4a4:	2b00      	cmp	r3, #0
 811b4a6:	dbe6      	blt.n	811b476 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 811b4a8:	69fb      	ldr	r3, [r7, #28]
 811b4aa:	681a      	ldr	r2, [r3, #0]
 811b4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b4ae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 811b4b0:	69fb      	ldr	r3, [r7, #28]
 811b4b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811b4b4:	601a      	str	r2, [r3, #0]
 811b4b6:	e009      	b.n	811b4cc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 811b4b8:	6a3b      	ldr	r3, [r7, #32]
 811b4ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811b4bc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 811b4be:	6a3b      	ldr	r3, [r7, #32]
 811b4c0:	681b      	ldr	r3, [r3, #0]
 811b4c2:	623b      	str	r3, [r7, #32]
 811b4c4:	e002      	b.n	811b4cc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 811b4c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811b4c8:	f7fc fbdb 	bl	8117c82 <tcp_seg_free>
    }
    seg = pcb->unsent;
 811b4cc:	687b      	ldr	r3, [r7, #4]
 811b4ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811b4d0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 811b4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b4d4:	2b00      	cmp	r3, #0
 811b4d6:	d012      	beq.n	811b4fe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 811b4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b4da:	68db      	ldr	r3, [r3, #12]
 811b4dc:	685b      	ldr	r3, [r3, #4]
 811b4de:	4618      	mov	r0, r3
 811b4e0:	f7f6 fcf1 	bl	8111ec6 <lwip_htonl>
 811b4e4:	4602      	mov	r2, r0
 811b4e6:	687b      	ldr	r3, [r7, #4]
 811b4e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811b4ea:	1ad3      	subs	r3, r2, r3
 811b4ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811b4ee:	8912      	ldrh	r2, [r2, #8]
 811b4f0:	4413      	add	r3, r2
  while (seg != NULL &&
 811b4f2:	69ba      	ldr	r2, [r7, #24]
 811b4f4:	429a      	cmp	r2, r3
 811b4f6:	f4bf aed9 	bcs.w	811b2ac <tcp_output+0x160>
 811b4fa:	e000      	b.n	811b4fe <tcp_output+0x3b2>
      break;
 811b4fc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 811b4fe:	687b      	ldr	r3, [r7, #4]
 811b500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811b502:	2b00      	cmp	r3, #0
 811b504:	d108      	bne.n	811b518 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 811b506:	687b      	ldr	r3, [r7, #4]
 811b508:	2200      	movs	r2, #0
 811b50a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 811b50e:	e004      	b.n	811b51a <tcp_output+0x3ce>
    goto output_done;
 811b510:	bf00      	nop
 811b512:	e002      	b.n	811b51a <tcp_output+0x3ce>
    goto output_done;
 811b514:	bf00      	nop
 811b516:	e000      	b.n	811b51a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 811b518:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 811b51a:	687b      	ldr	r3, [r7, #4]
 811b51c:	8b5b      	ldrh	r3, [r3, #26]
 811b51e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 811b522:	b29a      	uxth	r2, r3
 811b524:	687b      	ldr	r3, [r7, #4]
 811b526:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 811b528:	2300      	movs	r3, #0
}
 811b52a:	4618      	mov	r0, r3
 811b52c:	3728      	adds	r7, #40	@ 0x28
 811b52e:	46bd      	mov	sp, r7
 811b530:	bdb0      	pop	{r4, r5, r7, pc}
 811b532:	bf00      	nop

0811b534 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 811b534:	b580      	push	{r7, lr}
 811b536:	b082      	sub	sp, #8
 811b538:	af00      	add	r7, sp, #0
 811b53a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 811b53c:	687b      	ldr	r3, [r7, #4]
 811b53e:	2b00      	cmp	r3, #0
 811b540:	d106      	bne.n	811b550 <tcp_output_segment_busy+0x1c>
 811b542:	4b09      	ldr	r3, [pc, #36]	@ (811b568 <tcp_output_segment_busy+0x34>)
 811b544:	f240 529a 	movw	r2, #1434	@ 0x59a
 811b548:	4908      	ldr	r1, [pc, #32]	@ (811b56c <tcp_output_segment_busy+0x38>)
 811b54a:	4809      	ldr	r0, [pc, #36]	@ (811b570 <tcp_output_segment_busy+0x3c>)
 811b54c:	f002 fc46 	bl	811dddc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 811b550:	687b      	ldr	r3, [r7, #4]
 811b552:	685b      	ldr	r3, [r3, #4]
 811b554:	7b9b      	ldrb	r3, [r3, #14]
 811b556:	2b01      	cmp	r3, #1
 811b558:	d001      	beq.n	811b55e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 811b55a:	2301      	movs	r3, #1
 811b55c:	e000      	b.n	811b560 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 811b55e:	2300      	movs	r3, #0
}
 811b560:	4618      	mov	r0, r3
 811b562:	3708      	adds	r7, #8
 811b564:	46bd      	mov	sp, r7
 811b566:	bd80      	pop	{r7, pc}
 811b568:	081215b4 	.word	0x081215b4
 811b56c:	08121b90 	.word	0x08121b90
 811b570:	08121648 	.word	0x08121648

0811b574 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 811b574:	b5b0      	push	{r4, r5, r7, lr}
 811b576:	b08c      	sub	sp, #48	@ 0x30
 811b578:	af04      	add	r7, sp, #16
 811b57a:	60f8      	str	r0, [r7, #12]
 811b57c:	60b9      	str	r1, [r7, #8]
 811b57e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 811b580:	68fb      	ldr	r3, [r7, #12]
 811b582:	2b00      	cmp	r3, #0
 811b584:	d106      	bne.n	811b594 <tcp_output_segment+0x20>
 811b586:	4b64      	ldr	r3, [pc, #400]	@ (811b718 <tcp_output_segment+0x1a4>)
 811b588:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 811b58c:	4963      	ldr	r1, [pc, #396]	@ (811b71c <tcp_output_segment+0x1a8>)
 811b58e:	4864      	ldr	r0, [pc, #400]	@ (811b720 <tcp_output_segment+0x1ac>)
 811b590:	f002 fc24 	bl	811dddc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 811b594:	68bb      	ldr	r3, [r7, #8]
 811b596:	2b00      	cmp	r3, #0
 811b598:	d106      	bne.n	811b5a8 <tcp_output_segment+0x34>
 811b59a:	4b5f      	ldr	r3, [pc, #380]	@ (811b718 <tcp_output_segment+0x1a4>)
 811b59c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 811b5a0:	4960      	ldr	r1, [pc, #384]	@ (811b724 <tcp_output_segment+0x1b0>)
 811b5a2:	485f      	ldr	r0, [pc, #380]	@ (811b720 <tcp_output_segment+0x1ac>)
 811b5a4:	f002 fc1a 	bl	811dddc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 811b5a8:	687b      	ldr	r3, [r7, #4]
 811b5aa:	2b00      	cmp	r3, #0
 811b5ac:	d106      	bne.n	811b5bc <tcp_output_segment+0x48>
 811b5ae:	4b5a      	ldr	r3, [pc, #360]	@ (811b718 <tcp_output_segment+0x1a4>)
 811b5b0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 811b5b4:	495c      	ldr	r1, [pc, #368]	@ (811b728 <tcp_output_segment+0x1b4>)
 811b5b6:	485a      	ldr	r0, [pc, #360]	@ (811b720 <tcp_output_segment+0x1ac>)
 811b5b8:	f002 fc10 	bl	811dddc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 811b5bc:	68f8      	ldr	r0, [r7, #12]
 811b5be:	f7ff ffb9 	bl	811b534 <tcp_output_segment_busy>
 811b5c2:	4603      	mov	r3, r0
 811b5c4:	2b00      	cmp	r3, #0
 811b5c6:	d001      	beq.n	811b5cc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 811b5c8:	2300      	movs	r3, #0
 811b5ca:	e0a1      	b.n	811b710 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 811b5cc:	68bb      	ldr	r3, [r7, #8]
 811b5ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811b5d0:	68fb      	ldr	r3, [r7, #12]
 811b5d2:	68dc      	ldr	r4, [r3, #12]
 811b5d4:	4610      	mov	r0, r2
 811b5d6:	f7f6 fc76 	bl	8111ec6 <lwip_htonl>
 811b5da:	4603      	mov	r3, r0
 811b5dc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 811b5de:	68bb      	ldr	r3, [r7, #8]
 811b5e0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811b5e2:	68fb      	ldr	r3, [r7, #12]
 811b5e4:	68dc      	ldr	r4, [r3, #12]
 811b5e6:	4610      	mov	r0, r2
 811b5e8:	f7f6 fc58 	bl	8111e9c <lwip_htons>
 811b5ec:	4603      	mov	r3, r0
 811b5ee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 811b5f0:	68bb      	ldr	r3, [r7, #8]
 811b5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811b5f4:	68ba      	ldr	r2, [r7, #8]
 811b5f6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 811b5f8:	441a      	add	r2, r3
 811b5fa:	68bb      	ldr	r3, [r7, #8]
 811b5fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 811b5fe:	68fb      	ldr	r3, [r7, #12]
 811b600:	68db      	ldr	r3, [r3, #12]
 811b602:	3314      	adds	r3, #20
 811b604:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 811b606:	68fb      	ldr	r3, [r7, #12]
 811b608:	7a9b      	ldrb	r3, [r3, #10]
 811b60a:	f003 0301 	and.w	r3, r3, #1
 811b60e:	2b00      	cmp	r3, #0
 811b610:	d015      	beq.n	811b63e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 811b612:	68bb      	ldr	r3, [r7, #8]
 811b614:	3304      	adds	r3, #4
 811b616:	461a      	mov	r2, r3
 811b618:	6879      	ldr	r1, [r7, #4]
 811b61a:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 811b61e:	f7fc fe8f 	bl	8118340 <tcp_eff_send_mss_netif>
 811b622:	4603      	mov	r3, r0
 811b624:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 811b626:	8b7b      	ldrh	r3, [r7, #26]
 811b628:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 811b62c:	4618      	mov	r0, r3
 811b62e:	f7f6 fc4a 	bl	8111ec6 <lwip_htonl>
 811b632:	4602      	mov	r2, r0
 811b634:	69fb      	ldr	r3, [r7, #28]
 811b636:	601a      	str	r2, [r3, #0]
    opts += 1;
 811b638:	69fb      	ldr	r3, [r7, #28]
 811b63a:	3304      	adds	r3, #4
 811b63c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 811b63e:	68bb      	ldr	r3, [r7, #8]
 811b640:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811b644:	2b00      	cmp	r3, #0
 811b646:	da02      	bge.n	811b64e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 811b648:	68bb      	ldr	r3, [r7, #8]
 811b64a:	2200      	movs	r2, #0
 811b64c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 811b64e:	68bb      	ldr	r3, [r7, #8]
 811b650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 811b652:	2b00      	cmp	r3, #0
 811b654:	d10c      	bne.n	811b670 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 811b656:	4b35      	ldr	r3, [pc, #212]	@ (811b72c <tcp_output_segment+0x1b8>)
 811b658:	681a      	ldr	r2, [r3, #0]
 811b65a:	68bb      	ldr	r3, [r7, #8]
 811b65c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 811b65e:	68fb      	ldr	r3, [r7, #12]
 811b660:	68db      	ldr	r3, [r3, #12]
 811b662:	685b      	ldr	r3, [r3, #4]
 811b664:	4618      	mov	r0, r3
 811b666:	f7f6 fc2e 	bl	8111ec6 <lwip_htonl>
 811b66a:	4602      	mov	r2, r0
 811b66c:	68bb      	ldr	r3, [r7, #8]
 811b66e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 811b670:	68fb      	ldr	r3, [r7, #12]
 811b672:	68da      	ldr	r2, [r3, #12]
 811b674:	68fb      	ldr	r3, [r7, #12]
 811b676:	685b      	ldr	r3, [r3, #4]
 811b678:	685b      	ldr	r3, [r3, #4]
 811b67a:	1ad3      	subs	r3, r2, r3
 811b67c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 811b67e:	68fb      	ldr	r3, [r7, #12]
 811b680:	685b      	ldr	r3, [r3, #4]
 811b682:	8959      	ldrh	r1, [r3, #10]
 811b684:	68fb      	ldr	r3, [r7, #12]
 811b686:	685b      	ldr	r3, [r3, #4]
 811b688:	8b3a      	ldrh	r2, [r7, #24]
 811b68a:	1a8a      	subs	r2, r1, r2
 811b68c:	b292      	uxth	r2, r2
 811b68e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 811b690:	68fb      	ldr	r3, [r7, #12]
 811b692:	685b      	ldr	r3, [r3, #4]
 811b694:	8919      	ldrh	r1, [r3, #8]
 811b696:	68fb      	ldr	r3, [r7, #12]
 811b698:	685b      	ldr	r3, [r3, #4]
 811b69a:	8b3a      	ldrh	r2, [r7, #24]
 811b69c:	1a8a      	subs	r2, r1, r2
 811b69e:	b292      	uxth	r2, r2
 811b6a0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 811b6a2:	68fb      	ldr	r3, [r7, #12]
 811b6a4:	685b      	ldr	r3, [r3, #4]
 811b6a6:	68fa      	ldr	r2, [r7, #12]
 811b6a8:	68d2      	ldr	r2, [r2, #12]
 811b6aa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 811b6ac:	68fb      	ldr	r3, [r7, #12]
 811b6ae:	68db      	ldr	r3, [r3, #12]
 811b6b0:	2200      	movs	r2, #0
 811b6b2:	741a      	strb	r2, [r3, #16]
 811b6b4:	2200      	movs	r2, #0
 811b6b6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 811b6b8:	68fb      	ldr	r3, [r7, #12]
 811b6ba:	68da      	ldr	r2, [r3, #12]
 811b6bc:	68fb      	ldr	r3, [r7, #12]
 811b6be:	7a9b      	ldrb	r3, [r3, #10]
 811b6c0:	f003 0301 	and.w	r3, r3, #1
 811b6c4:	2b00      	cmp	r3, #0
 811b6c6:	d001      	beq.n	811b6cc <tcp_output_segment+0x158>
 811b6c8:	2318      	movs	r3, #24
 811b6ca:	e000      	b.n	811b6ce <tcp_output_segment+0x15a>
 811b6cc:	2314      	movs	r3, #20
 811b6ce:	4413      	add	r3, r2
 811b6d0:	69fa      	ldr	r2, [r7, #28]
 811b6d2:	429a      	cmp	r2, r3
 811b6d4:	d006      	beq.n	811b6e4 <tcp_output_segment+0x170>
 811b6d6:	4b10      	ldr	r3, [pc, #64]	@ (811b718 <tcp_output_segment+0x1a4>)
 811b6d8:	f240 621c 	movw	r2, #1564	@ 0x61c
 811b6dc:	4914      	ldr	r1, [pc, #80]	@ (811b730 <tcp_output_segment+0x1bc>)
 811b6de:	4810      	ldr	r0, [pc, #64]	@ (811b720 <tcp_output_segment+0x1ac>)
 811b6e0:	f002 fb7c 	bl	811dddc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 811b6e4:	68fb      	ldr	r3, [r7, #12]
 811b6e6:	6858      	ldr	r0, [r3, #4]
 811b6e8:	68b9      	ldr	r1, [r7, #8]
 811b6ea:	68bb      	ldr	r3, [r7, #8]
 811b6ec:	1d1c      	adds	r4, r3, #4
 811b6ee:	68bb      	ldr	r3, [r7, #8]
 811b6f0:	7add      	ldrb	r5, [r3, #11]
 811b6f2:	68bb      	ldr	r3, [r7, #8]
 811b6f4:	7a9b      	ldrb	r3, [r3, #10]
 811b6f6:	687a      	ldr	r2, [r7, #4]
 811b6f8:	9202      	str	r2, [sp, #8]
 811b6fa:	2206      	movs	r2, #6
 811b6fc:	9201      	str	r2, [sp, #4]
 811b6fe:	9300      	str	r3, [sp, #0]
 811b700:	462b      	mov	r3, r5
 811b702:	4622      	mov	r2, r4
 811b704:	f7f8 f92a 	bl	811395c <ip4_output_if>
 811b708:	4603      	mov	r3, r0
 811b70a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 811b70c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 811b710:	4618      	mov	r0, r3
 811b712:	3720      	adds	r7, #32
 811b714:	46bd      	mov	sp, r7
 811b716:	bdb0      	pop	{r4, r5, r7, pc}
 811b718:	081215b4 	.word	0x081215b4
 811b71c:	08121bb8 	.word	0x08121bb8
 811b720:	08121648 	.word	0x08121648
 811b724:	08121bd8 	.word	0x08121bd8
 811b728:	08121bf8 	.word	0x08121bf8
 811b72c:	10012128 	.word	0x10012128
 811b730:	08121c1c 	.word	0x08121c1c

0811b734 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 811b734:	b5b0      	push	{r4, r5, r7, lr}
 811b736:	b084      	sub	sp, #16
 811b738:	af00      	add	r7, sp, #0
 811b73a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 811b73c:	687b      	ldr	r3, [r7, #4]
 811b73e:	2b00      	cmp	r3, #0
 811b740:	d106      	bne.n	811b750 <tcp_rexmit_rto_prepare+0x1c>
 811b742:	4b31      	ldr	r3, [pc, #196]	@ (811b808 <tcp_rexmit_rto_prepare+0xd4>)
 811b744:	f240 6263 	movw	r2, #1635	@ 0x663
 811b748:	4930      	ldr	r1, [pc, #192]	@ (811b80c <tcp_rexmit_rto_prepare+0xd8>)
 811b74a:	4831      	ldr	r0, [pc, #196]	@ (811b810 <tcp_rexmit_rto_prepare+0xdc>)
 811b74c:	f002 fb46 	bl	811dddc <iprintf>

  if (pcb->unacked == NULL) {
 811b750:	687b      	ldr	r3, [r7, #4]
 811b752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811b754:	2b00      	cmp	r3, #0
 811b756:	d102      	bne.n	811b75e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 811b758:	f06f 0305 	mvn.w	r3, #5
 811b75c:	e050      	b.n	811b800 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 811b75e:	687b      	ldr	r3, [r7, #4]
 811b760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811b762:	60fb      	str	r3, [r7, #12]
 811b764:	e00b      	b.n	811b77e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 811b766:	68f8      	ldr	r0, [r7, #12]
 811b768:	f7ff fee4 	bl	811b534 <tcp_output_segment_busy>
 811b76c:	4603      	mov	r3, r0
 811b76e:	2b00      	cmp	r3, #0
 811b770:	d002      	beq.n	811b778 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 811b772:	f06f 0305 	mvn.w	r3, #5
 811b776:	e043      	b.n	811b800 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 811b778:	68fb      	ldr	r3, [r7, #12]
 811b77a:	681b      	ldr	r3, [r3, #0]
 811b77c:	60fb      	str	r3, [r7, #12]
 811b77e:	68fb      	ldr	r3, [r7, #12]
 811b780:	681b      	ldr	r3, [r3, #0]
 811b782:	2b00      	cmp	r3, #0
 811b784:	d1ef      	bne.n	811b766 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 811b786:	68f8      	ldr	r0, [r7, #12]
 811b788:	f7ff fed4 	bl	811b534 <tcp_output_segment_busy>
 811b78c:	4603      	mov	r3, r0
 811b78e:	2b00      	cmp	r3, #0
 811b790:	d002      	beq.n	811b798 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 811b792:	f06f 0305 	mvn.w	r3, #5
 811b796:	e033      	b.n	811b800 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 811b798:	687b      	ldr	r3, [r7, #4]
 811b79a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 811b79c:	68fb      	ldr	r3, [r7, #12]
 811b79e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 811b7a0:	687b      	ldr	r3, [r7, #4]
 811b7a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 811b7a4:	687b      	ldr	r3, [r7, #4]
 811b7a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 811b7a8:	687b      	ldr	r3, [r7, #4]
 811b7aa:	2200      	movs	r2, #0
 811b7ac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 811b7ae:	687b      	ldr	r3, [r7, #4]
 811b7b0:	8b5b      	ldrh	r3, [r3, #26]
 811b7b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 811b7b6:	b29a      	uxth	r2, r3
 811b7b8:	687b      	ldr	r3, [r7, #4]
 811b7ba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 811b7bc:	68fb      	ldr	r3, [r7, #12]
 811b7be:	68db      	ldr	r3, [r3, #12]
 811b7c0:	685b      	ldr	r3, [r3, #4]
 811b7c2:	4618      	mov	r0, r3
 811b7c4:	f7f6 fb7f 	bl	8111ec6 <lwip_htonl>
 811b7c8:	4604      	mov	r4, r0
 811b7ca:	68fb      	ldr	r3, [r7, #12]
 811b7cc:	891b      	ldrh	r3, [r3, #8]
 811b7ce:	461d      	mov	r5, r3
 811b7d0:	68fb      	ldr	r3, [r7, #12]
 811b7d2:	68db      	ldr	r3, [r3, #12]
 811b7d4:	899b      	ldrh	r3, [r3, #12]
 811b7d6:	b29b      	uxth	r3, r3
 811b7d8:	4618      	mov	r0, r3
 811b7da:	f7f6 fb5f 	bl	8111e9c <lwip_htons>
 811b7de:	4603      	mov	r3, r0
 811b7e0:	b2db      	uxtb	r3, r3
 811b7e2:	f003 0303 	and.w	r3, r3, #3
 811b7e6:	2b00      	cmp	r3, #0
 811b7e8:	d001      	beq.n	811b7ee <tcp_rexmit_rto_prepare+0xba>
 811b7ea:	2301      	movs	r3, #1
 811b7ec:	e000      	b.n	811b7f0 <tcp_rexmit_rto_prepare+0xbc>
 811b7ee:	2300      	movs	r3, #0
 811b7f0:	442b      	add	r3, r5
 811b7f2:	18e2      	adds	r2, r4, r3
 811b7f4:	687b      	ldr	r3, [r7, #4]
 811b7f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 811b7f8:	687b      	ldr	r3, [r7, #4]
 811b7fa:	2200      	movs	r2, #0
 811b7fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 811b7fe:	2300      	movs	r3, #0
}
 811b800:	4618      	mov	r0, r3
 811b802:	3710      	adds	r7, #16
 811b804:	46bd      	mov	sp, r7
 811b806:	bdb0      	pop	{r4, r5, r7, pc}
 811b808:	081215b4 	.word	0x081215b4
 811b80c:	08121c30 	.word	0x08121c30
 811b810:	08121648 	.word	0x08121648

0811b814 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 811b814:	b580      	push	{r7, lr}
 811b816:	b082      	sub	sp, #8
 811b818:	af00      	add	r7, sp, #0
 811b81a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 811b81c:	687b      	ldr	r3, [r7, #4]
 811b81e:	2b00      	cmp	r3, #0
 811b820:	d106      	bne.n	811b830 <tcp_rexmit_rto_commit+0x1c>
 811b822:	4b0d      	ldr	r3, [pc, #52]	@ (811b858 <tcp_rexmit_rto_commit+0x44>)
 811b824:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 811b828:	490c      	ldr	r1, [pc, #48]	@ (811b85c <tcp_rexmit_rto_commit+0x48>)
 811b82a:	480d      	ldr	r0, [pc, #52]	@ (811b860 <tcp_rexmit_rto_commit+0x4c>)
 811b82c:	f002 fad6 	bl	811dddc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 811b830:	687b      	ldr	r3, [r7, #4]
 811b832:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811b836:	2bff      	cmp	r3, #255	@ 0xff
 811b838:	d007      	beq.n	811b84a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 811b83a:	687b      	ldr	r3, [r7, #4]
 811b83c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811b840:	3301      	adds	r3, #1
 811b842:	b2da      	uxtb	r2, r3
 811b844:	687b      	ldr	r3, [r7, #4]
 811b846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 811b84a:	6878      	ldr	r0, [r7, #4]
 811b84c:	f7ff fc7e 	bl	811b14c <tcp_output>
}
 811b850:	bf00      	nop
 811b852:	3708      	adds	r7, #8
 811b854:	46bd      	mov	sp, r7
 811b856:	bd80      	pop	{r7, pc}
 811b858:	081215b4 	.word	0x081215b4
 811b85c:	08121c54 	.word	0x08121c54
 811b860:	08121648 	.word	0x08121648

0811b864 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 811b864:	b580      	push	{r7, lr}
 811b866:	b082      	sub	sp, #8
 811b868:	af00      	add	r7, sp, #0
 811b86a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 811b86c:	687b      	ldr	r3, [r7, #4]
 811b86e:	2b00      	cmp	r3, #0
 811b870:	d106      	bne.n	811b880 <tcp_rexmit_rto+0x1c>
 811b872:	4b0a      	ldr	r3, [pc, #40]	@ (811b89c <tcp_rexmit_rto+0x38>)
 811b874:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 811b878:	4909      	ldr	r1, [pc, #36]	@ (811b8a0 <tcp_rexmit_rto+0x3c>)
 811b87a:	480a      	ldr	r0, [pc, #40]	@ (811b8a4 <tcp_rexmit_rto+0x40>)
 811b87c:	f002 faae 	bl	811dddc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 811b880:	6878      	ldr	r0, [r7, #4]
 811b882:	f7ff ff57 	bl	811b734 <tcp_rexmit_rto_prepare>
 811b886:	4603      	mov	r3, r0
 811b888:	2b00      	cmp	r3, #0
 811b88a:	d102      	bne.n	811b892 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 811b88c:	6878      	ldr	r0, [r7, #4]
 811b88e:	f7ff ffc1 	bl	811b814 <tcp_rexmit_rto_commit>
  }
}
 811b892:	bf00      	nop
 811b894:	3708      	adds	r7, #8
 811b896:	46bd      	mov	sp, r7
 811b898:	bd80      	pop	{r7, pc}
 811b89a:	bf00      	nop
 811b89c:	081215b4 	.word	0x081215b4
 811b8a0:	08121c78 	.word	0x08121c78
 811b8a4:	08121648 	.word	0x08121648

0811b8a8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 811b8a8:	b590      	push	{r4, r7, lr}
 811b8aa:	b085      	sub	sp, #20
 811b8ac:	af00      	add	r7, sp, #0
 811b8ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 811b8b0:	687b      	ldr	r3, [r7, #4]
 811b8b2:	2b00      	cmp	r3, #0
 811b8b4:	d106      	bne.n	811b8c4 <tcp_rexmit+0x1c>
 811b8b6:	4b2f      	ldr	r3, [pc, #188]	@ (811b974 <tcp_rexmit+0xcc>)
 811b8b8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 811b8bc:	492e      	ldr	r1, [pc, #184]	@ (811b978 <tcp_rexmit+0xd0>)
 811b8be:	482f      	ldr	r0, [pc, #188]	@ (811b97c <tcp_rexmit+0xd4>)
 811b8c0:	f002 fa8c 	bl	811dddc <iprintf>

  if (pcb->unacked == NULL) {
 811b8c4:	687b      	ldr	r3, [r7, #4]
 811b8c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811b8c8:	2b00      	cmp	r3, #0
 811b8ca:	d102      	bne.n	811b8d2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 811b8cc:	f06f 0305 	mvn.w	r3, #5
 811b8d0:	e04c      	b.n	811b96c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 811b8d2:	687b      	ldr	r3, [r7, #4]
 811b8d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811b8d6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 811b8d8:	68b8      	ldr	r0, [r7, #8]
 811b8da:	f7ff fe2b 	bl	811b534 <tcp_output_segment_busy>
 811b8de:	4603      	mov	r3, r0
 811b8e0:	2b00      	cmp	r3, #0
 811b8e2:	d002      	beq.n	811b8ea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 811b8e4:	f06f 0305 	mvn.w	r3, #5
 811b8e8:	e040      	b.n	811b96c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 811b8ea:	68bb      	ldr	r3, [r7, #8]
 811b8ec:	681a      	ldr	r2, [r3, #0]
 811b8ee:	687b      	ldr	r3, [r7, #4]
 811b8f0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 811b8f2:	687b      	ldr	r3, [r7, #4]
 811b8f4:	336c      	adds	r3, #108	@ 0x6c
 811b8f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 811b8f8:	e002      	b.n	811b900 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 811b8fa:	68fb      	ldr	r3, [r7, #12]
 811b8fc:	681b      	ldr	r3, [r3, #0]
 811b8fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 811b900:	68fb      	ldr	r3, [r7, #12]
 811b902:	681b      	ldr	r3, [r3, #0]
 811b904:	2b00      	cmp	r3, #0
 811b906:	d011      	beq.n	811b92c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 811b908:	68fb      	ldr	r3, [r7, #12]
 811b90a:	681b      	ldr	r3, [r3, #0]
 811b90c:	68db      	ldr	r3, [r3, #12]
 811b90e:	685b      	ldr	r3, [r3, #4]
 811b910:	4618      	mov	r0, r3
 811b912:	f7f6 fad8 	bl	8111ec6 <lwip_htonl>
 811b916:	4604      	mov	r4, r0
 811b918:	68bb      	ldr	r3, [r7, #8]
 811b91a:	68db      	ldr	r3, [r3, #12]
 811b91c:	685b      	ldr	r3, [r3, #4]
 811b91e:	4618      	mov	r0, r3
 811b920:	f7f6 fad1 	bl	8111ec6 <lwip_htonl>
 811b924:	4603      	mov	r3, r0
 811b926:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 811b928:	2b00      	cmp	r3, #0
 811b92a:	dbe6      	blt.n	811b8fa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 811b92c:	68fb      	ldr	r3, [r7, #12]
 811b92e:	681a      	ldr	r2, [r3, #0]
 811b930:	68bb      	ldr	r3, [r7, #8]
 811b932:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 811b934:	68fb      	ldr	r3, [r7, #12]
 811b936:	68ba      	ldr	r2, [r7, #8]
 811b938:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 811b93a:	68bb      	ldr	r3, [r7, #8]
 811b93c:	681b      	ldr	r3, [r3, #0]
 811b93e:	2b00      	cmp	r3, #0
 811b940:	d103      	bne.n	811b94a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 811b942:	687b      	ldr	r3, [r7, #4]
 811b944:	2200      	movs	r2, #0
 811b946:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 811b94a:	687b      	ldr	r3, [r7, #4]
 811b94c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811b950:	2bff      	cmp	r3, #255	@ 0xff
 811b952:	d007      	beq.n	811b964 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 811b954:	687b      	ldr	r3, [r7, #4]
 811b956:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811b95a:	3301      	adds	r3, #1
 811b95c:	b2da      	uxtb	r2, r3
 811b95e:	687b      	ldr	r3, [r7, #4]
 811b960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 811b964:	687b      	ldr	r3, [r7, #4]
 811b966:	2200      	movs	r2, #0
 811b968:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 811b96a:	2300      	movs	r3, #0
}
 811b96c:	4618      	mov	r0, r3
 811b96e:	3714      	adds	r7, #20
 811b970:	46bd      	mov	sp, r7
 811b972:	bd90      	pop	{r4, r7, pc}
 811b974:	081215b4 	.word	0x081215b4
 811b978:	08121c94 	.word	0x08121c94
 811b97c:	08121648 	.word	0x08121648

0811b980 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 811b980:	b580      	push	{r7, lr}
 811b982:	b082      	sub	sp, #8
 811b984:	af00      	add	r7, sp, #0
 811b986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 811b988:	687b      	ldr	r3, [r7, #4]
 811b98a:	2b00      	cmp	r3, #0
 811b98c:	d106      	bne.n	811b99c <tcp_rexmit_fast+0x1c>
 811b98e:	4b2a      	ldr	r3, [pc, #168]	@ (811ba38 <tcp_rexmit_fast+0xb8>)
 811b990:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 811b994:	4929      	ldr	r1, [pc, #164]	@ (811ba3c <tcp_rexmit_fast+0xbc>)
 811b996:	482a      	ldr	r0, [pc, #168]	@ (811ba40 <tcp_rexmit_fast+0xc0>)
 811b998:	f002 fa20 	bl	811dddc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 811b99c:	687b      	ldr	r3, [r7, #4]
 811b99e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811b9a0:	2b00      	cmp	r3, #0
 811b9a2:	d044      	beq.n	811ba2e <tcp_rexmit_fast+0xae>
 811b9a4:	687b      	ldr	r3, [r7, #4]
 811b9a6:	8b5b      	ldrh	r3, [r3, #26]
 811b9a8:	f003 0304 	and.w	r3, r3, #4
 811b9ac:	2b00      	cmp	r3, #0
 811b9ae:	d13e      	bne.n	811ba2e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 811b9b0:	6878      	ldr	r0, [r7, #4]
 811b9b2:	f7ff ff79 	bl	811b8a8 <tcp_rexmit>
 811b9b6:	4603      	mov	r3, r0
 811b9b8:	2b00      	cmp	r3, #0
 811b9ba:	d138      	bne.n	811ba2e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 811b9bc:	687b      	ldr	r3, [r7, #4]
 811b9be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811b9c2:	687b      	ldr	r3, [r7, #4]
 811b9c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811b9c8:	4293      	cmp	r3, r2
 811b9ca:	bf28      	it	cs
 811b9cc:	4613      	movcs	r3, r2
 811b9ce:	b29b      	uxth	r3, r3
 811b9d0:	0fda      	lsrs	r2, r3, #31
 811b9d2:	4413      	add	r3, r2
 811b9d4:	105b      	asrs	r3, r3, #1
 811b9d6:	b29a      	uxth	r2, r3
 811b9d8:	687b      	ldr	r3, [r7, #4]
 811b9da:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 811b9de:	687b      	ldr	r3, [r7, #4]
 811b9e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 811b9e4:	461a      	mov	r2, r3
 811b9e6:	687b      	ldr	r3, [r7, #4]
 811b9e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811b9ea:	005b      	lsls	r3, r3, #1
 811b9ec:	429a      	cmp	r2, r3
 811b9ee:	d206      	bcs.n	811b9fe <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 811b9f0:	687b      	ldr	r3, [r7, #4]
 811b9f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811b9f4:	005b      	lsls	r3, r3, #1
 811b9f6:	b29a      	uxth	r2, r3
 811b9f8:	687b      	ldr	r3, [r7, #4]
 811b9fa:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 811b9fe:	687b      	ldr	r3, [r7, #4]
 811ba00:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 811ba04:	687b      	ldr	r3, [r7, #4]
 811ba06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811ba08:	4619      	mov	r1, r3
 811ba0a:	0049      	lsls	r1, r1, #1
 811ba0c:	440b      	add	r3, r1
 811ba0e:	b29b      	uxth	r3, r3
 811ba10:	4413      	add	r3, r2
 811ba12:	b29a      	uxth	r2, r3
 811ba14:	687b      	ldr	r3, [r7, #4]
 811ba16:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 811ba1a:	687b      	ldr	r3, [r7, #4]
 811ba1c:	8b5b      	ldrh	r3, [r3, #26]
 811ba1e:	f043 0304 	orr.w	r3, r3, #4
 811ba22:	b29a      	uxth	r2, r3
 811ba24:	687b      	ldr	r3, [r7, #4]
 811ba26:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 811ba28:	687b      	ldr	r3, [r7, #4]
 811ba2a:	2200      	movs	r2, #0
 811ba2c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 811ba2e:	bf00      	nop
 811ba30:	3708      	adds	r7, #8
 811ba32:	46bd      	mov	sp, r7
 811ba34:	bd80      	pop	{r7, pc}
 811ba36:	bf00      	nop
 811ba38:	081215b4 	.word	0x081215b4
 811ba3c:	08121cac 	.word	0x08121cac
 811ba40:	08121648 	.word	0x08121648

0811ba44 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 811ba44:	b580      	push	{r7, lr}
 811ba46:	b086      	sub	sp, #24
 811ba48:	af00      	add	r7, sp, #0
 811ba4a:	60f8      	str	r0, [r7, #12]
 811ba4c:	607b      	str	r3, [r7, #4]
 811ba4e:	460b      	mov	r3, r1
 811ba50:	817b      	strh	r3, [r7, #10]
 811ba52:	4613      	mov	r3, r2
 811ba54:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 811ba56:	897a      	ldrh	r2, [r7, #10]
 811ba58:	893b      	ldrh	r3, [r7, #8]
 811ba5a:	4413      	add	r3, r2
 811ba5c:	b29b      	uxth	r3, r3
 811ba5e:	3314      	adds	r3, #20
 811ba60:	b29b      	uxth	r3, r3
 811ba62:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811ba66:	4619      	mov	r1, r3
 811ba68:	2022      	movs	r0, #34	@ 0x22
 811ba6a:	f7fa f93d 	bl	8115ce8 <pbuf_alloc>
 811ba6e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 811ba70:	697b      	ldr	r3, [r7, #20]
 811ba72:	2b00      	cmp	r3, #0
 811ba74:	d04d      	beq.n	811bb12 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 811ba76:	897b      	ldrh	r3, [r7, #10]
 811ba78:	3313      	adds	r3, #19
 811ba7a:	697a      	ldr	r2, [r7, #20]
 811ba7c:	8952      	ldrh	r2, [r2, #10]
 811ba7e:	4293      	cmp	r3, r2
 811ba80:	db06      	blt.n	811ba90 <tcp_output_alloc_header_common+0x4c>
 811ba82:	4b26      	ldr	r3, [pc, #152]	@ (811bb1c <tcp_output_alloc_header_common+0xd8>)
 811ba84:	f240 7223 	movw	r2, #1827	@ 0x723
 811ba88:	4925      	ldr	r1, [pc, #148]	@ (811bb20 <tcp_output_alloc_header_common+0xdc>)
 811ba8a:	4826      	ldr	r0, [pc, #152]	@ (811bb24 <tcp_output_alloc_header_common+0xe0>)
 811ba8c:	f002 f9a6 	bl	811dddc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 811ba90:	697b      	ldr	r3, [r7, #20]
 811ba92:	685b      	ldr	r3, [r3, #4]
 811ba94:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 811ba96:	8c3b      	ldrh	r3, [r7, #32]
 811ba98:	4618      	mov	r0, r3
 811ba9a:	f7f6 f9ff 	bl	8111e9c <lwip_htons>
 811ba9e:	4603      	mov	r3, r0
 811baa0:	461a      	mov	r2, r3
 811baa2:	693b      	ldr	r3, [r7, #16]
 811baa4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 811baa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811baa8:	4618      	mov	r0, r3
 811baaa:	f7f6 f9f7 	bl	8111e9c <lwip_htons>
 811baae:	4603      	mov	r3, r0
 811bab0:	461a      	mov	r2, r3
 811bab2:	693b      	ldr	r3, [r7, #16]
 811bab4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 811bab6:	693b      	ldr	r3, [r7, #16]
 811bab8:	687a      	ldr	r2, [r7, #4]
 811baba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 811babc:	68f8      	ldr	r0, [r7, #12]
 811babe:	f7f6 fa02 	bl	8111ec6 <lwip_htonl>
 811bac2:	4602      	mov	r2, r0
 811bac4:	693b      	ldr	r3, [r7, #16]
 811bac6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 811bac8:	897b      	ldrh	r3, [r7, #10]
 811baca:	089b      	lsrs	r3, r3, #2
 811bacc:	b29b      	uxth	r3, r3
 811bace:	3305      	adds	r3, #5
 811bad0:	b29b      	uxth	r3, r3
 811bad2:	031b      	lsls	r3, r3, #12
 811bad4:	b29a      	uxth	r2, r3
 811bad6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 811bada:	b29b      	uxth	r3, r3
 811badc:	4313      	orrs	r3, r2
 811bade:	b29b      	uxth	r3, r3
 811bae0:	4618      	mov	r0, r3
 811bae2:	f7f6 f9db 	bl	8111e9c <lwip_htons>
 811bae6:	4603      	mov	r3, r0
 811bae8:	461a      	mov	r2, r3
 811baea:	693b      	ldr	r3, [r7, #16]
 811baec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 811baee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 811baf0:	4618      	mov	r0, r3
 811baf2:	f7f6 f9d3 	bl	8111e9c <lwip_htons>
 811baf6:	4603      	mov	r3, r0
 811baf8:	461a      	mov	r2, r3
 811bafa:	693b      	ldr	r3, [r7, #16]
 811bafc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 811bafe:	693b      	ldr	r3, [r7, #16]
 811bb00:	2200      	movs	r2, #0
 811bb02:	741a      	strb	r2, [r3, #16]
 811bb04:	2200      	movs	r2, #0
 811bb06:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 811bb08:	693b      	ldr	r3, [r7, #16]
 811bb0a:	2200      	movs	r2, #0
 811bb0c:	749a      	strb	r2, [r3, #18]
 811bb0e:	2200      	movs	r2, #0
 811bb10:	74da      	strb	r2, [r3, #19]
  }
  return p;
 811bb12:	697b      	ldr	r3, [r7, #20]
}
 811bb14:	4618      	mov	r0, r3
 811bb16:	3718      	adds	r7, #24
 811bb18:	46bd      	mov	sp, r7
 811bb1a:	bd80      	pop	{r7, pc}
 811bb1c:	081215b4 	.word	0x081215b4
 811bb20:	08121ccc 	.word	0x08121ccc
 811bb24:	08121648 	.word	0x08121648

0811bb28 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 811bb28:	b5b0      	push	{r4, r5, r7, lr}
 811bb2a:	b08a      	sub	sp, #40	@ 0x28
 811bb2c:	af04      	add	r7, sp, #16
 811bb2e:	60f8      	str	r0, [r7, #12]
 811bb30:	607b      	str	r3, [r7, #4]
 811bb32:	460b      	mov	r3, r1
 811bb34:	817b      	strh	r3, [r7, #10]
 811bb36:	4613      	mov	r3, r2
 811bb38:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 811bb3a:	68fb      	ldr	r3, [r7, #12]
 811bb3c:	2b00      	cmp	r3, #0
 811bb3e:	d106      	bne.n	811bb4e <tcp_output_alloc_header+0x26>
 811bb40:	4b15      	ldr	r3, [pc, #84]	@ (811bb98 <tcp_output_alloc_header+0x70>)
 811bb42:	f240 7242 	movw	r2, #1858	@ 0x742
 811bb46:	4915      	ldr	r1, [pc, #84]	@ (811bb9c <tcp_output_alloc_header+0x74>)
 811bb48:	4815      	ldr	r0, [pc, #84]	@ (811bba0 <tcp_output_alloc_header+0x78>)
 811bb4a:	f002 f947 	bl	811dddc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 811bb4e:	68fb      	ldr	r3, [r7, #12]
 811bb50:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 811bb52:	68fb      	ldr	r3, [r7, #12]
 811bb54:	8adb      	ldrh	r3, [r3, #22]
 811bb56:	68fa      	ldr	r2, [r7, #12]
 811bb58:	8b12      	ldrh	r2, [r2, #24]
 811bb5a:	68f9      	ldr	r1, [r7, #12]
 811bb5c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 811bb5e:	893d      	ldrh	r5, [r7, #8]
 811bb60:	897c      	ldrh	r4, [r7, #10]
 811bb62:	9103      	str	r1, [sp, #12]
 811bb64:	2110      	movs	r1, #16
 811bb66:	9102      	str	r1, [sp, #8]
 811bb68:	9201      	str	r2, [sp, #4]
 811bb6a:	9300      	str	r3, [sp, #0]
 811bb6c:	687b      	ldr	r3, [r7, #4]
 811bb6e:	462a      	mov	r2, r5
 811bb70:	4621      	mov	r1, r4
 811bb72:	f7ff ff67 	bl	811ba44 <tcp_output_alloc_header_common>
 811bb76:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 811bb78:	697b      	ldr	r3, [r7, #20]
 811bb7a:	2b00      	cmp	r3, #0
 811bb7c:	d006      	beq.n	811bb8c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 811bb7e:	68fb      	ldr	r3, [r7, #12]
 811bb80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811bb82:	68fa      	ldr	r2, [r7, #12]
 811bb84:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 811bb86:	441a      	add	r2, r3
 811bb88:	68fb      	ldr	r3, [r7, #12]
 811bb8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 811bb8c:	697b      	ldr	r3, [r7, #20]
}
 811bb8e:	4618      	mov	r0, r3
 811bb90:	3718      	adds	r7, #24
 811bb92:	46bd      	mov	sp, r7
 811bb94:	bdb0      	pop	{r4, r5, r7, pc}
 811bb96:	bf00      	nop
 811bb98:	081215b4 	.word	0x081215b4
 811bb9c:	08121cfc 	.word	0x08121cfc
 811bba0:	08121648 	.word	0x08121648

0811bba4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 811bba4:	b580      	push	{r7, lr}
 811bba6:	b088      	sub	sp, #32
 811bba8:	af00      	add	r7, sp, #0
 811bbaa:	60f8      	str	r0, [r7, #12]
 811bbac:	60b9      	str	r1, [r7, #8]
 811bbae:	4611      	mov	r1, r2
 811bbb0:	461a      	mov	r2, r3
 811bbb2:	460b      	mov	r3, r1
 811bbb4:	71fb      	strb	r3, [r7, #7]
 811bbb6:	4613      	mov	r3, r2
 811bbb8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 811bbba:	2300      	movs	r3, #0
 811bbbc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 811bbbe:	68bb      	ldr	r3, [r7, #8]
 811bbc0:	2b00      	cmp	r3, #0
 811bbc2:	d106      	bne.n	811bbd2 <tcp_output_fill_options+0x2e>
 811bbc4:	4b12      	ldr	r3, [pc, #72]	@ (811bc10 <tcp_output_fill_options+0x6c>)
 811bbc6:	f240 7256 	movw	r2, #1878	@ 0x756
 811bbca:	4912      	ldr	r1, [pc, #72]	@ (811bc14 <tcp_output_fill_options+0x70>)
 811bbcc:	4812      	ldr	r0, [pc, #72]	@ (811bc18 <tcp_output_fill_options+0x74>)
 811bbce:	f002 f905 	bl	811dddc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 811bbd2:	68bb      	ldr	r3, [r7, #8]
 811bbd4:	685b      	ldr	r3, [r3, #4]
 811bbd6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 811bbd8:	69bb      	ldr	r3, [r7, #24]
 811bbda:	3314      	adds	r3, #20
 811bbdc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 811bbde:	8bfb      	ldrh	r3, [r7, #30]
 811bbe0:	009b      	lsls	r3, r3, #2
 811bbe2:	461a      	mov	r2, r3
 811bbe4:	79fb      	ldrb	r3, [r7, #7]
 811bbe6:	009b      	lsls	r3, r3, #2
 811bbe8:	f003 0304 	and.w	r3, r3, #4
 811bbec:	4413      	add	r3, r2
 811bbee:	3314      	adds	r3, #20
 811bbf0:	69ba      	ldr	r2, [r7, #24]
 811bbf2:	4413      	add	r3, r2
 811bbf4:	697a      	ldr	r2, [r7, #20]
 811bbf6:	429a      	cmp	r2, r3
 811bbf8:	d006      	beq.n	811bc08 <tcp_output_fill_options+0x64>
 811bbfa:	4b05      	ldr	r3, [pc, #20]	@ (811bc10 <tcp_output_fill_options+0x6c>)
 811bbfc:	f240 7275 	movw	r2, #1909	@ 0x775
 811bc00:	4906      	ldr	r1, [pc, #24]	@ (811bc1c <tcp_output_fill_options+0x78>)
 811bc02:	4805      	ldr	r0, [pc, #20]	@ (811bc18 <tcp_output_fill_options+0x74>)
 811bc04:	f002 f8ea 	bl	811dddc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 811bc08:	bf00      	nop
 811bc0a:	3720      	adds	r7, #32
 811bc0c:	46bd      	mov	sp, r7
 811bc0e:	bd80      	pop	{r7, pc}
 811bc10:	081215b4 	.word	0x081215b4
 811bc14:	08121d24 	.word	0x08121d24
 811bc18:	08121648 	.word	0x08121648
 811bc1c:	08121c1c 	.word	0x08121c1c

0811bc20 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 811bc20:	b580      	push	{r7, lr}
 811bc22:	b08a      	sub	sp, #40	@ 0x28
 811bc24:	af04      	add	r7, sp, #16
 811bc26:	60f8      	str	r0, [r7, #12]
 811bc28:	60b9      	str	r1, [r7, #8]
 811bc2a:	607a      	str	r2, [r7, #4]
 811bc2c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 811bc2e:	68bb      	ldr	r3, [r7, #8]
 811bc30:	2b00      	cmp	r3, #0
 811bc32:	d106      	bne.n	811bc42 <tcp_output_control_segment+0x22>
 811bc34:	4b1c      	ldr	r3, [pc, #112]	@ (811bca8 <tcp_output_control_segment+0x88>)
 811bc36:	f240 7287 	movw	r2, #1927	@ 0x787
 811bc3a:	491c      	ldr	r1, [pc, #112]	@ (811bcac <tcp_output_control_segment+0x8c>)
 811bc3c:	481c      	ldr	r0, [pc, #112]	@ (811bcb0 <tcp_output_control_segment+0x90>)
 811bc3e:	f002 f8cd 	bl	811dddc <iprintf>

  netif = tcp_route(pcb, src, dst);
 811bc42:	683a      	ldr	r2, [r7, #0]
 811bc44:	6879      	ldr	r1, [r7, #4]
 811bc46:	68f8      	ldr	r0, [r7, #12]
 811bc48:	f7fe ff42 	bl	811aad0 <tcp_route>
 811bc4c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 811bc4e:	693b      	ldr	r3, [r7, #16]
 811bc50:	2b00      	cmp	r3, #0
 811bc52:	d102      	bne.n	811bc5a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 811bc54:	23fc      	movs	r3, #252	@ 0xfc
 811bc56:	75fb      	strb	r3, [r7, #23]
 811bc58:	e01c      	b.n	811bc94 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 811bc5a:	68fb      	ldr	r3, [r7, #12]
 811bc5c:	2b00      	cmp	r3, #0
 811bc5e:	d006      	beq.n	811bc6e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 811bc60:	68fb      	ldr	r3, [r7, #12]
 811bc62:	7adb      	ldrb	r3, [r3, #11]
 811bc64:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 811bc66:	68fb      	ldr	r3, [r7, #12]
 811bc68:	7a9b      	ldrb	r3, [r3, #10]
 811bc6a:	757b      	strb	r3, [r7, #21]
 811bc6c:	e003      	b.n	811bc76 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 811bc6e:	23ff      	movs	r3, #255	@ 0xff
 811bc70:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 811bc72:	2300      	movs	r3, #0
 811bc74:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 811bc76:	7dba      	ldrb	r2, [r7, #22]
 811bc78:	693b      	ldr	r3, [r7, #16]
 811bc7a:	9302      	str	r3, [sp, #8]
 811bc7c:	2306      	movs	r3, #6
 811bc7e:	9301      	str	r3, [sp, #4]
 811bc80:	7d7b      	ldrb	r3, [r7, #21]
 811bc82:	9300      	str	r3, [sp, #0]
 811bc84:	4613      	mov	r3, r2
 811bc86:	683a      	ldr	r2, [r7, #0]
 811bc88:	6879      	ldr	r1, [r7, #4]
 811bc8a:	68b8      	ldr	r0, [r7, #8]
 811bc8c:	f7f7 fe66 	bl	811395c <ip4_output_if>
 811bc90:	4603      	mov	r3, r0
 811bc92:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 811bc94:	68b8      	ldr	r0, [r7, #8]
 811bc96:	f7fa fb0b 	bl	81162b0 <pbuf_free>
  return err;
 811bc9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 811bc9e:	4618      	mov	r0, r3
 811bca0:	3718      	adds	r7, #24
 811bca2:	46bd      	mov	sp, r7
 811bca4:	bd80      	pop	{r7, pc}
 811bca6:	bf00      	nop
 811bca8:	081215b4 	.word	0x081215b4
 811bcac:	08121d4c 	.word	0x08121d4c
 811bcb0:	08121648 	.word	0x08121648

0811bcb4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 811bcb4:	b590      	push	{r4, r7, lr}
 811bcb6:	b08b      	sub	sp, #44	@ 0x2c
 811bcb8:	af04      	add	r7, sp, #16
 811bcba:	60f8      	str	r0, [r7, #12]
 811bcbc:	60b9      	str	r1, [r7, #8]
 811bcbe:	607a      	str	r2, [r7, #4]
 811bcc0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 811bcc2:	683b      	ldr	r3, [r7, #0]
 811bcc4:	2b00      	cmp	r3, #0
 811bcc6:	d106      	bne.n	811bcd6 <tcp_rst+0x22>
 811bcc8:	4b1f      	ldr	r3, [pc, #124]	@ (811bd48 <tcp_rst+0x94>)
 811bcca:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 811bcce:	491f      	ldr	r1, [pc, #124]	@ (811bd4c <tcp_rst+0x98>)
 811bcd0:	481f      	ldr	r0, [pc, #124]	@ (811bd50 <tcp_rst+0x9c>)
 811bcd2:	f002 f883 	bl	811dddc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 811bcd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811bcd8:	2b00      	cmp	r3, #0
 811bcda:	d106      	bne.n	811bcea <tcp_rst+0x36>
 811bcdc:	4b1a      	ldr	r3, [pc, #104]	@ (811bd48 <tcp_rst+0x94>)
 811bcde:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 811bce2:	491c      	ldr	r1, [pc, #112]	@ (811bd54 <tcp_rst+0xa0>)
 811bce4:	481a      	ldr	r0, [pc, #104]	@ (811bd50 <tcp_rst+0x9c>)
 811bce6:	f002 f879 	bl	811dddc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 811bcea:	2300      	movs	r3, #0
 811bcec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 811bcee:	f24d 0316 	movw	r3, #53270	@ 0xd016
 811bcf2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 811bcf4:	7dfb      	ldrb	r3, [r7, #23]
 811bcf6:	b29c      	uxth	r4, r3
 811bcf8:	68b8      	ldr	r0, [r7, #8]
 811bcfa:	f7f6 f8e4 	bl	8111ec6 <lwip_htonl>
 811bcfe:	4602      	mov	r2, r0
 811bd00:	8abb      	ldrh	r3, [r7, #20]
 811bd02:	9303      	str	r3, [sp, #12]
 811bd04:	2314      	movs	r3, #20
 811bd06:	9302      	str	r3, [sp, #8]
 811bd08:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 811bd0a:	9301      	str	r3, [sp, #4]
 811bd0c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 811bd0e:	9300      	str	r3, [sp, #0]
 811bd10:	4613      	mov	r3, r2
 811bd12:	2200      	movs	r2, #0
 811bd14:	4621      	mov	r1, r4
 811bd16:	6878      	ldr	r0, [r7, #4]
 811bd18:	f7ff fe94 	bl	811ba44 <tcp_output_alloc_header_common>
 811bd1c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 811bd1e:	693b      	ldr	r3, [r7, #16]
 811bd20:	2b00      	cmp	r3, #0
 811bd22:	d00c      	beq.n	811bd3e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 811bd24:	7dfb      	ldrb	r3, [r7, #23]
 811bd26:	2200      	movs	r2, #0
 811bd28:	6939      	ldr	r1, [r7, #16]
 811bd2a:	68f8      	ldr	r0, [r7, #12]
 811bd2c:	f7ff ff3a 	bl	811bba4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 811bd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811bd32:	683a      	ldr	r2, [r7, #0]
 811bd34:	6939      	ldr	r1, [r7, #16]
 811bd36:	68f8      	ldr	r0, [r7, #12]
 811bd38:	f7ff ff72 	bl	811bc20 <tcp_output_control_segment>
 811bd3c:	e000      	b.n	811bd40 <tcp_rst+0x8c>
    return;
 811bd3e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 811bd40:	371c      	adds	r7, #28
 811bd42:	46bd      	mov	sp, r7
 811bd44:	bd90      	pop	{r4, r7, pc}
 811bd46:	bf00      	nop
 811bd48:	081215b4 	.word	0x081215b4
 811bd4c:	08121d78 	.word	0x08121d78
 811bd50:	08121648 	.word	0x08121648
 811bd54:	08121d94 	.word	0x08121d94

0811bd58 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 811bd58:	b590      	push	{r4, r7, lr}
 811bd5a:	b087      	sub	sp, #28
 811bd5c:	af00      	add	r7, sp, #0
 811bd5e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 811bd60:	2300      	movs	r3, #0
 811bd62:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 811bd64:	2300      	movs	r3, #0
 811bd66:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 811bd68:	687b      	ldr	r3, [r7, #4]
 811bd6a:	2b00      	cmp	r3, #0
 811bd6c:	d106      	bne.n	811bd7c <tcp_send_empty_ack+0x24>
 811bd6e:	4b28      	ldr	r3, [pc, #160]	@ (811be10 <tcp_send_empty_ack+0xb8>)
 811bd70:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 811bd74:	4927      	ldr	r1, [pc, #156]	@ (811be14 <tcp_send_empty_ack+0xbc>)
 811bd76:	4828      	ldr	r0, [pc, #160]	@ (811be18 <tcp_send_empty_ack+0xc0>)
 811bd78:	f002 f830 	bl	811dddc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 811bd7c:	7dfb      	ldrb	r3, [r7, #23]
 811bd7e:	009b      	lsls	r3, r3, #2
 811bd80:	b2db      	uxtb	r3, r3
 811bd82:	f003 0304 	and.w	r3, r3, #4
 811bd86:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 811bd88:	7d7b      	ldrb	r3, [r7, #21]
 811bd8a:	b29c      	uxth	r4, r3
 811bd8c:	687b      	ldr	r3, [r7, #4]
 811bd8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811bd90:	4618      	mov	r0, r3
 811bd92:	f7f6 f898 	bl	8111ec6 <lwip_htonl>
 811bd96:	4603      	mov	r3, r0
 811bd98:	2200      	movs	r2, #0
 811bd9a:	4621      	mov	r1, r4
 811bd9c:	6878      	ldr	r0, [r7, #4]
 811bd9e:	f7ff fec3 	bl	811bb28 <tcp_output_alloc_header>
 811bda2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 811bda4:	693b      	ldr	r3, [r7, #16]
 811bda6:	2b00      	cmp	r3, #0
 811bda8:	d109      	bne.n	811bdbe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811bdaa:	687b      	ldr	r3, [r7, #4]
 811bdac:	8b5b      	ldrh	r3, [r3, #26]
 811bdae:	f043 0303 	orr.w	r3, r3, #3
 811bdb2:	b29a      	uxth	r2, r3
 811bdb4:	687b      	ldr	r3, [r7, #4]
 811bdb6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 811bdb8:	f06f 0301 	mvn.w	r3, #1
 811bdbc:	e023      	b.n	811be06 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 811bdbe:	7dbb      	ldrb	r3, [r7, #22]
 811bdc0:	7dfa      	ldrb	r2, [r7, #23]
 811bdc2:	6939      	ldr	r1, [r7, #16]
 811bdc4:	6878      	ldr	r0, [r7, #4]
 811bdc6:	f7ff feed 	bl	811bba4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 811bdca:	687a      	ldr	r2, [r7, #4]
 811bdcc:	687b      	ldr	r3, [r7, #4]
 811bdce:	3304      	adds	r3, #4
 811bdd0:	6939      	ldr	r1, [r7, #16]
 811bdd2:	6878      	ldr	r0, [r7, #4]
 811bdd4:	f7ff ff24 	bl	811bc20 <tcp_output_control_segment>
 811bdd8:	4603      	mov	r3, r0
 811bdda:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 811bddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811bde0:	2b00      	cmp	r3, #0
 811bde2:	d007      	beq.n	811bdf4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811bde4:	687b      	ldr	r3, [r7, #4]
 811bde6:	8b5b      	ldrh	r3, [r3, #26]
 811bde8:	f043 0303 	orr.w	r3, r3, #3
 811bdec:	b29a      	uxth	r2, r3
 811bdee:	687b      	ldr	r3, [r7, #4]
 811bdf0:	835a      	strh	r2, [r3, #26]
 811bdf2:	e006      	b.n	811be02 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811bdf4:	687b      	ldr	r3, [r7, #4]
 811bdf6:	8b5b      	ldrh	r3, [r3, #26]
 811bdf8:	f023 0303 	bic.w	r3, r3, #3
 811bdfc:	b29a      	uxth	r2, r3
 811bdfe:	687b      	ldr	r3, [r7, #4]
 811be00:	835a      	strh	r2, [r3, #26]
  }

  return err;
 811be02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 811be06:	4618      	mov	r0, r3
 811be08:	371c      	adds	r7, #28
 811be0a:	46bd      	mov	sp, r7
 811be0c:	bd90      	pop	{r4, r7, pc}
 811be0e:	bf00      	nop
 811be10:	081215b4 	.word	0x081215b4
 811be14:	08121db0 	.word	0x08121db0
 811be18:	08121648 	.word	0x08121648

0811be1c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 811be1c:	b590      	push	{r4, r7, lr}
 811be1e:	b087      	sub	sp, #28
 811be20:	af00      	add	r7, sp, #0
 811be22:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 811be24:	2300      	movs	r3, #0
 811be26:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 811be28:	687b      	ldr	r3, [r7, #4]
 811be2a:	2b00      	cmp	r3, #0
 811be2c:	d106      	bne.n	811be3c <tcp_keepalive+0x20>
 811be2e:	4b18      	ldr	r3, [pc, #96]	@ (811be90 <tcp_keepalive+0x74>)
 811be30:	f640 0224 	movw	r2, #2084	@ 0x824
 811be34:	4917      	ldr	r1, [pc, #92]	@ (811be94 <tcp_keepalive+0x78>)
 811be36:	4818      	ldr	r0, [pc, #96]	@ (811be98 <tcp_keepalive+0x7c>)
 811be38:	f001 ffd0 	bl	811dddc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 811be3c:	7dfb      	ldrb	r3, [r7, #23]
 811be3e:	b29c      	uxth	r4, r3
 811be40:	687b      	ldr	r3, [r7, #4]
 811be42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811be44:	3b01      	subs	r3, #1
 811be46:	4618      	mov	r0, r3
 811be48:	f7f6 f83d 	bl	8111ec6 <lwip_htonl>
 811be4c:	4603      	mov	r3, r0
 811be4e:	2200      	movs	r2, #0
 811be50:	4621      	mov	r1, r4
 811be52:	6878      	ldr	r0, [r7, #4]
 811be54:	f7ff fe68 	bl	811bb28 <tcp_output_alloc_header>
 811be58:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 811be5a:	693b      	ldr	r3, [r7, #16]
 811be5c:	2b00      	cmp	r3, #0
 811be5e:	d102      	bne.n	811be66 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 811be60:	f04f 33ff 	mov.w	r3, #4294967295
 811be64:	e010      	b.n	811be88 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 811be66:	7dfb      	ldrb	r3, [r7, #23]
 811be68:	2200      	movs	r2, #0
 811be6a:	6939      	ldr	r1, [r7, #16]
 811be6c:	6878      	ldr	r0, [r7, #4]
 811be6e:	f7ff fe99 	bl	811bba4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 811be72:	687a      	ldr	r2, [r7, #4]
 811be74:	687b      	ldr	r3, [r7, #4]
 811be76:	3304      	adds	r3, #4
 811be78:	6939      	ldr	r1, [r7, #16]
 811be7a:	6878      	ldr	r0, [r7, #4]
 811be7c:	f7ff fed0 	bl	811bc20 <tcp_output_control_segment>
 811be80:	4603      	mov	r3, r0
 811be82:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 811be84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 811be88:	4618      	mov	r0, r3
 811be8a:	371c      	adds	r7, #28
 811be8c:	46bd      	mov	sp, r7
 811be8e:	bd90      	pop	{r4, r7, pc}
 811be90:	081215b4 	.word	0x081215b4
 811be94:	08121dd0 	.word	0x08121dd0
 811be98:	08121648 	.word	0x08121648

0811be9c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 811be9c:	b590      	push	{r4, r7, lr}
 811be9e:	b08b      	sub	sp, #44	@ 0x2c
 811bea0:	af00      	add	r7, sp, #0
 811bea2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 811bea4:	2300      	movs	r3, #0
 811bea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 811beaa:	687b      	ldr	r3, [r7, #4]
 811beac:	2b00      	cmp	r3, #0
 811beae:	d106      	bne.n	811bebe <tcp_zero_window_probe+0x22>
 811beb0:	4b4c      	ldr	r3, [pc, #304]	@ (811bfe4 <tcp_zero_window_probe+0x148>)
 811beb2:	f640 024f 	movw	r2, #2127	@ 0x84f
 811beb6:	494c      	ldr	r1, [pc, #304]	@ (811bfe8 <tcp_zero_window_probe+0x14c>)
 811beb8:	484c      	ldr	r0, [pc, #304]	@ (811bfec <tcp_zero_window_probe+0x150>)
 811beba:	f001 ff8f 	bl	811dddc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 811bebe:	687b      	ldr	r3, [r7, #4]
 811bec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811bec2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 811bec4:	6a3b      	ldr	r3, [r7, #32]
 811bec6:	2b00      	cmp	r3, #0
 811bec8:	d101      	bne.n	811bece <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 811beca:	2300      	movs	r3, #0
 811becc:	e086      	b.n	811bfdc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 811bece:	687b      	ldr	r3, [r7, #4]
 811bed0:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 811bed4:	2bff      	cmp	r3, #255	@ 0xff
 811bed6:	d007      	beq.n	811bee8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 811bed8:	687b      	ldr	r3, [r7, #4]
 811beda:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 811bede:	3301      	adds	r3, #1
 811bee0:	b2da      	uxtb	r2, r3
 811bee2:	687b      	ldr	r3, [r7, #4]
 811bee4:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 811bee8:	6a3b      	ldr	r3, [r7, #32]
 811beea:	68db      	ldr	r3, [r3, #12]
 811beec:	899b      	ldrh	r3, [r3, #12]
 811beee:	b29b      	uxth	r3, r3
 811bef0:	4618      	mov	r0, r3
 811bef2:	f7f5 ffd3 	bl	8111e9c <lwip_htons>
 811bef6:	4603      	mov	r3, r0
 811bef8:	b2db      	uxtb	r3, r3
 811befa:	f003 0301 	and.w	r3, r3, #1
 811befe:	2b00      	cmp	r3, #0
 811bf00:	d005      	beq.n	811bf0e <tcp_zero_window_probe+0x72>
 811bf02:	6a3b      	ldr	r3, [r7, #32]
 811bf04:	891b      	ldrh	r3, [r3, #8]
 811bf06:	2b00      	cmp	r3, #0
 811bf08:	d101      	bne.n	811bf0e <tcp_zero_window_probe+0x72>
 811bf0a:	2301      	movs	r3, #1
 811bf0c:	e000      	b.n	811bf10 <tcp_zero_window_probe+0x74>
 811bf0e:	2300      	movs	r3, #0
 811bf10:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 811bf12:	7ffb      	ldrb	r3, [r7, #31]
 811bf14:	2b00      	cmp	r3, #0
 811bf16:	bf0c      	ite	eq
 811bf18:	2301      	moveq	r3, #1
 811bf1a:	2300      	movne	r3, #0
 811bf1c:	b2db      	uxtb	r3, r3
 811bf1e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 811bf20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811bf24:	b299      	uxth	r1, r3
 811bf26:	6a3b      	ldr	r3, [r7, #32]
 811bf28:	68db      	ldr	r3, [r3, #12]
 811bf2a:	685b      	ldr	r3, [r3, #4]
 811bf2c:	8bba      	ldrh	r2, [r7, #28]
 811bf2e:	6878      	ldr	r0, [r7, #4]
 811bf30:	f7ff fdfa 	bl	811bb28 <tcp_output_alloc_header>
 811bf34:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 811bf36:	69bb      	ldr	r3, [r7, #24]
 811bf38:	2b00      	cmp	r3, #0
 811bf3a:	d102      	bne.n	811bf42 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 811bf3c:	f04f 33ff 	mov.w	r3, #4294967295
 811bf40:	e04c      	b.n	811bfdc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 811bf42:	69bb      	ldr	r3, [r7, #24]
 811bf44:	685b      	ldr	r3, [r3, #4]
 811bf46:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 811bf48:	7ffb      	ldrb	r3, [r7, #31]
 811bf4a:	2b00      	cmp	r3, #0
 811bf4c:	d011      	beq.n	811bf72 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 811bf4e:	697b      	ldr	r3, [r7, #20]
 811bf50:	899b      	ldrh	r3, [r3, #12]
 811bf52:	b29b      	uxth	r3, r3
 811bf54:	b21b      	sxth	r3, r3
 811bf56:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811bf5a:	b21c      	sxth	r4, r3
 811bf5c:	2011      	movs	r0, #17
 811bf5e:	f7f5 ff9d 	bl	8111e9c <lwip_htons>
 811bf62:	4603      	mov	r3, r0
 811bf64:	b21b      	sxth	r3, r3
 811bf66:	4323      	orrs	r3, r4
 811bf68:	b21b      	sxth	r3, r3
 811bf6a:	b29a      	uxth	r2, r3
 811bf6c:	697b      	ldr	r3, [r7, #20]
 811bf6e:	819a      	strh	r2, [r3, #12]
 811bf70:	e010      	b.n	811bf94 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 811bf72:	69bb      	ldr	r3, [r7, #24]
 811bf74:	685b      	ldr	r3, [r3, #4]
 811bf76:	3314      	adds	r3, #20
 811bf78:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 811bf7a:	6a3b      	ldr	r3, [r7, #32]
 811bf7c:	6858      	ldr	r0, [r3, #4]
 811bf7e:	6a3b      	ldr	r3, [r7, #32]
 811bf80:	685b      	ldr	r3, [r3, #4]
 811bf82:	891a      	ldrh	r2, [r3, #8]
 811bf84:	6a3b      	ldr	r3, [r7, #32]
 811bf86:	891b      	ldrh	r3, [r3, #8]
 811bf88:	1ad3      	subs	r3, r2, r3
 811bf8a:	b29b      	uxth	r3, r3
 811bf8c:	2201      	movs	r2, #1
 811bf8e:	6939      	ldr	r1, [r7, #16]
 811bf90:	f7fa fb94 	bl	81166bc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 811bf94:	6a3b      	ldr	r3, [r7, #32]
 811bf96:	68db      	ldr	r3, [r3, #12]
 811bf98:	685b      	ldr	r3, [r3, #4]
 811bf9a:	4618      	mov	r0, r3
 811bf9c:	f7f5 ff93 	bl	8111ec6 <lwip_htonl>
 811bfa0:	4603      	mov	r3, r0
 811bfa2:	3301      	adds	r3, #1
 811bfa4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 811bfa6:	687b      	ldr	r3, [r7, #4]
 811bfa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811bfaa:	68fb      	ldr	r3, [r7, #12]
 811bfac:	1ad3      	subs	r3, r2, r3
 811bfae:	2b00      	cmp	r3, #0
 811bfb0:	da02      	bge.n	811bfb8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 811bfb2:	687b      	ldr	r3, [r7, #4]
 811bfb4:	68fa      	ldr	r2, [r7, #12]
 811bfb6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 811bfb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811bfbc:	2200      	movs	r2, #0
 811bfbe:	69b9      	ldr	r1, [r7, #24]
 811bfc0:	6878      	ldr	r0, [r7, #4]
 811bfc2:	f7ff fdef 	bl	811bba4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 811bfc6:	687a      	ldr	r2, [r7, #4]
 811bfc8:	687b      	ldr	r3, [r7, #4]
 811bfca:	3304      	adds	r3, #4
 811bfcc:	69b9      	ldr	r1, [r7, #24]
 811bfce:	6878      	ldr	r0, [r7, #4]
 811bfd0:	f7ff fe26 	bl	811bc20 <tcp_output_control_segment>
 811bfd4:	4603      	mov	r3, r0
 811bfd6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 811bfd8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 811bfdc:	4618      	mov	r0, r3
 811bfde:	372c      	adds	r7, #44	@ 0x2c
 811bfe0:	46bd      	mov	sp, r7
 811bfe2:	bd90      	pop	{r4, r7, pc}
 811bfe4:	081215b4 	.word	0x081215b4
 811bfe8:	08121dec 	.word	0x08121dec
 811bfec:	08121648 	.word	0x08121648

0811bff0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 811bff0:	b580      	push	{r7, lr}
 811bff2:	b084      	sub	sp, #16
 811bff4:	af00      	add	r7, sp, #0
 811bff6:	6078      	str	r0, [r7, #4]
 811bff8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 811bffa:	f000 fabd 	bl	811c578 <sys_timeouts_sleeptime>
 811bffe:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 811c000:	68fb      	ldr	r3, [r7, #12]
 811c002:	f1b3 3fff 	cmp.w	r3, #4294967295
 811c006:	d10b      	bne.n	811c020 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 811c008:	4813      	ldr	r0, [pc, #76]	@ (811c058 <tcpip_timeouts_mbox_fetch+0x68>)
 811c00a:	f7fa fca2 	bl	8116952 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 811c00e:	2200      	movs	r2, #0
 811c010:	6839      	ldr	r1, [r7, #0]
 811c012:	6878      	ldr	r0, [r7, #4]
 811c014:	f7fa fc2a 	bl	811686c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 811c018:	480f      	ldr	r0, [pc, #60]	@ (811c058 <tcpip_timeouts_mbox_fetch+0x68>)
 811c01a:	f7fa fc8b 	bl	8116934 <sys_mutex_lock>
    return;
 811c01e:	e018      	b.n	811c052 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 811c020:	68fb      	ldr	r3, [r7, #12]
 811c022:	2b00      	cmp	r3, #0
 811c024:	d102      	bne.n	811c02c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 811c026:	f000 fa6d 	bl	811c504 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 811c02a:	e7e6      	b.n	811bffa <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 811c02c:	480a      	ldr	r0, [pc, #40]	@ (811c058 <tcpip_timeouts_mbox_fetch+0x68>)
 811c02e:	f7fa fc90 	bl	8116952 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 811c032:	68fa      	ldr	r2, [r7, #12]
 811c034:	6839      	ldr	r1, [r7, #0]
 811c036:	6878      	ldr	r0, [r7, #4]
 811c038:	f7fa fc18 	bl	811686c <sys_arch_mbox_fetch>
 811c03c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 811c03e:	4806      	ldr	r0, [pc, #24]	@ (811c058 <tcpip_timeouts_mbox_fetch+0x68>)
 811c040:	f7fa fc78 	bl	8116934 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 811c044:	68bb      	ldr	r3, [r7, #8]
 811c046:	f1b3 3fff 	cmp.w	r3, #4294967295
 811c04a:	d102      	bne.n	811c052 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 811c04c:	f000 fa5a 	bl	811c504 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 811c050:	e7d3      	b.n	811bffa <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 811c052:	3710      	adds	r7, #16
 811c054:	46bd      	mov	sp, r7
 811c056:	bd80      	pop	{r7, pc}
 811c058:	10012184 	.word	0x10012184

0811c05c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 811c05c:	b580      	push	{r7, lr}
 811c05e:	b084      	sub	sp, #16
 811c060:	af00      	add	r7, sp, #0
 811c062:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 811c064:	4810      	ldr	r0, [pc, #64]	@ (811c0a8 <tcpip_thread+0x4c>)
 811c066:	f7fa fc65 	bl	8116934 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 811c06a:	4b10      	ldr	r3, [pc, #64]	@ (811c0ac <tcpip_thread+0x50>)
 811c06c:	681b      	ldr	r3, [r3, #0]
 811c06e:	2b00      	cmp	r3, #0
 811c070:	d005      	beq.n	811c07e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 811c072:	4b0e      	ldr	r3, [pc, #56]	@ (811c0ac <tcpip_thread+0x50>)
 811c074:	681b      	ldr	r3, [r3, #0]
 811c076:	4a0e      	ldr	r2, [pc, #56]	@ (811c0b0 <tcpip_thread+0x54>)
 811c078:	6812      	ldr	r2, [r2, #0]
 811c07a:	4610      	mov	r0, r2
 811c07c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 811c07e:	f107 030c 	add.w	r3, r7, #12
 811c082:	4619      	mov	r1, r3
 811c084:	480b      	ldr	r0, [pc, #44]	@ (811c0b4 <tcpip_thread+0x58>)
 811c086:	f7ff ffb3 	bl	811bff0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 811c08a:	68fb      	ldr	r3, [r7, #12]
 811c08c:	2b00      	cmp	r3, #0
 811c08e:	d106      	bne.n	811c09e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 811c090:	4b09      	ldr	r3, [pc, #36]	@ (811c0b8 <tcpip_thread+0x5c>)
 811c092:	2291      	movs	r2, #145	@ 0x91
 811c094:	4909      	ldr	r1, [pc, #36]	@ (811c0bc <tcpip_thread+0x60>)
 811c096:	480a      	ldr	r0, [pc, #40]	@ (811c0c0 <tcpip_thread+0x64>)
 811c098:	f001 fea0 	bl	811dddc <iprintf>
      continue;
 811c09c:	e003      	b.n	811c0a6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 811c09e:	68fb      	ldr	r3, [r7, #12]
 811c0a0:	4618      	mov	r0, r3
 811c0a2:	f000 f80f 	bl	811c0c4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 811c0a6:	e7ea      	b.n	811c07e <tcpip_thread+0x22>
 811c0a8:	10012184 	.word	0x10012184
 811c0ac:	10012178 	.word	0x10012178
 811c0b0:	1001217c 	.word	0x1001217c
 811c0b4:	10012180 	.word	0x10012180
 811c0b8:	08121e10 	.word	0x08121e10
 811c0bc:	08121e80 	.word	0x08121e80
 811c0c0:	08121ea0 	.word	0x08121ea0

0811c0c4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 811c0c4:	b580      	push	{r7, lr}
 811c0c6:	b082      	sub	sp, #8
 811c0c8:	af00      	add	r7, sp, #0
 811c0ca:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 811c0cc:	687b      	ldr	r3, [r7, #4]
 811c0ce:	781b      	ldrb	r3, [r3, #0]
 811c0d0:	2b00      	cmp	r3, #0
 811c0d2:	d002      	beq.n	811c0da <tcpip_thread_handle_msg+0x16>
 811c0d4:	2b01      	cmp	r3, #1
 811c0d6:	d00b      	beq.n	811c0f0 <tcpip_thread_handle_msg+0x2c>
 811c0d8:	e011      	b.n	811c0fe <tcpip_thread_handle_msg+0x3a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 811c0da:	687b      	ldr	r3, [r7, #4]
 811c0dc:	685b      	ldr	r3, [r3, #4]
 811c0de:	687a      	ldr	r2, [r7, #4]
 811c0e0:	6892      	ldr	r2, [r2, #8]
 811c0e2:	4610      	mov	r0, r2
 811c0e4:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 811c0e6:	6879      	ldr	r1, [r7, #4]
 811c0e8:	2008      	movs	r0, #8
 811c0ea:	f7f9 fa3d 	bl	8115568 <memp_free>
      break;
 811c0ee:	e00d      	b.n	811c10c <tcpip_thread_handle_msg+0x48>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 811c0f0:	687b      	ldr	r3, [r7, #4]
 811c0f2:	685b      	ldr	r3, [r3, #4]
 811c0f4:	687a      	ldr	r2, [r7, #4]
 811c0f6:	6892      	ldr	r2, [r2, #8]
 811c0f8:	4610      	mov	r0, r2
 811c0fa:	4798      	blx	r3
      break;
 811c0fc:	e006      	b.n	811c10c <tcpip_thread_handle_msg+0x48>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 811c0fe:	4b05      	ldr	r3, [pc, #20]	@ (811c114 <tcpip_thread_handle_msg+0x50>)
 811c100:	22cf      	movs	r2, #207	@ 0xcf
 811c102:	4905      	ldr	r1, [pc, #20]	@ (811c118 <tcpip_thread_handle_msg+0x54>)
 811c104:	4805      	ldr	r0, [pc, #20]	@ (811c11c <tcpip_thread_handle_msg+0x58>)
 811c106:	f001 fe69 	bl	811dddc <iprintf>
      break;
 811c10a:	bf00      	nop
  }
}
 811c10c:	bf00      	nop
 811c10e:	3708      	adds	r7, #8
 811c110:	46bd      	mov	sp, r7
 811c112:	bd80      	pop	{r7, pc}
 811c114:	08121e10 	.word	0x08121e10
 811c118:	08121e80 	.word	0x08121e80
 811c11c:	08121ea0 	.word	0x08121ea0

0811c120 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 811c120:	b580      	push	{r7, lr}
 811c122:	b086      	sub	sp, #24
 811c124:	af00      	add	r7, sp, #0
 811c126:	60f8      	str	r0, [r7, #12]
 811c128:	60b9      	str	r1, [r7, #8]
 811c12a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING_INPUT
  err_t ret;
  LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_inpkt: PACKET %p/%p\n", (void *)p, (void *)inp));
  LOCK_TCPIP_CORE();
 811c12c:	4808      	ldr	r0, [pc, #32]	@ (811c150 <tcpip_inpkt+0x30>)
 811c12e:	f7fa fc01 	bl	8116934 <sys_mutex_lock>
  ret = input_fn(p, inp);
 811c132:	687b      	ldr	r3, [r7, #4]
 811c134:	68b9      	ldr	r1, [r7, #8]
 811c136:	68f8      	ldr	r0, [r7, #12]
 811c138:	4798      	blx	r3
 811c13a:	4603      	mov	r3, r0
 811c13c:	75fb      	strb	r3, [r7, #23]
  UNLOCK_TCPIP_CORE();
 811c13e:	4804      	ldr	r0, [pc, #16]	@ (811c150 <tcpip_inpkt+0x30>)
 811c140:	f7fa fc07 	bl	8116952 <sys_mutex_unlock>
  return ret;
 811c144:	f997 3017 	ldrsb.w	r3, [r7, #23]
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 811c148:	4618      	mov	r0, r3
 811c14a:	3718      	adds	r7, #24
 811c14c:	46bd      	mov	sp, r7
 811c14e:	bd80      	pop	{r7, pc}
 811c150:	10012184 	.word	0x10012184

0811c154 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 811c154:	b580      	push	{r7, lr}
 811c156:	b082      	sub	sp, #8
 811c158:	af00      	add	r7, sp, #0
 811c15a:	6078      	str	r0, [r7, #4]
 811c15c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 811c15e:	683b      	ldr	r3, [r7, #0]
 811c160:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811c164:	f003 0318 	and.w	r3, r3, #24
 811c168:	2b00      	cmp	r3, #0
 811c16a:	d006      	beq.n	811c17a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 811c16c:	4a08      	ldr	r2, [pc, #32]	@ (811c190 <tcpip_input+0x3c>)
 811c16e:	6839      	ldr	r1, [r7, #0]
 811c170:	6878      	ldr	r0, [r7, #4]
 811c172:	f7ff ffd5 	bl	811c120 <tcpip_inpkt>
 811c176:	4603      	mov	r3, r0
 811c178:	e005      	b.n	811c186 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 811c17a:	4a06      	ldr	r2, [pc, #24]	@ (811c194 <tcpip_input+0x40>)
 811c17c:	6839      	ldr	r1, [r7, #0]
 811c17e:	6878      	ldr	r0, [r7, #4]
 811c180:	f7ff ffce 	bl	811c120 <tcpip_inpkt>
 811c184:	4603      	mov	r3, r0
}
 811c186:	4618      	mov	r0, r3
 811c188:	3708      	adds	r7, #8
 811c18a:	46bd      	mov	sp, r7
 811c18c:	bd80      	pop	{r7, pc}
 811c18e:	bf00      	nop
 811c190:	08112f25 	.word	0x08112f25
 811c194:	08113715 	.word	0x08113715

0811c198 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 811c198:	b580      	push	{r7, lr}
 811c19a:	b084      	sub	sp, #16
 811c19c:	af00      	add	r7, sp, #0
 811c19e:	6078      	str	r0, [r7, #4]
 811c1a0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 811c1a2:	4819      	ldr	r0, [pc, #100]	@ (811c208 <tcpip_try_callback+0x70>)
 811c1a4:	f7fa fb93 	bl	81168ce <sys_mbox_valid>
 811c1a8:	4603      	mov	r3, r0
 811c1aa:	2b00      	cmp	r3, #0
 811c1ac:	d106      	bne.n	811c1bc <tcpip_try_callback+0x24>
 811c1ae:	4b17      	ldr	r3, [pc, #92]	@ (811c20c <tcpip_try_callback+0x74>)
 811c1b0:	f240 125d 	movw	r2, #349	@ 0x15d
 811c1b4:	4916      	ldr	r1, [pc, #88]	@ (811c210 <tcpip_try_callback+0x78>)
 811c1b6:	4817      	ldr	r0, [pc, #92]	@ (811c214 <tcpip_try_callback+0x7c>)
 811c1b8:	f001 fe10 	bl	811dddc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 811c1bc:	2008      	movs	r0, #8
 811c1be:	f7f9 f95d 	bl	811547c <memp_malloc>
 811c1c2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 811c1c4:	68fb      	ldr	r3, [r7, #12]
 811c1c6:	2b00      	cmp	r3, #0
 811c1c8:	d102      	bne.n	811c1d0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 811c1ca:	f04f 33ff 	mov.w	r3, #4294967295
 811c1ce:	e017      	b.n	811c200 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 811c1d0:	68fb      	ldr	r3, [r7, #12]
 811c1d2:	2200      	movs	r2, #0
 811c1d4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 811c1d6:	68fb      	ldr	r3, [r7, #12]
 811c1d8:	687a      	ldr	r2, [r7, #4]
 811c1da:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 811c1dc:	68fb      	ldr	r3, [r7, #12]
 811c1de:	683a      	ldr	r2, [r7, #0]
 811c1e0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 811c1e2:	68f9      	ldr	r1, [r7, #12]
 811c1e4:	4808      	ldr	r0, [pc, #32]	@ (811c208 <tcpip_try_callback+0x70>)
 811c1e6:	f7fa fb27 	bl	8116838 <sys_mbox_trypost>
 811c1ea:	4603      	mov	r3, r0
 811c1ec:	2b00      	cmp	r3, #0
 811c1ee:	d006      	beq.n	811c1fe <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 811c1f0:	68f9      	ldr	r1, [r7, #12]
 811c1f2:	2008      	movs	r0, #8
 811c1f4:	f7f9 f9b8 	bl	8115568 <memp_free>
    return ERR_MEM;
 811c1f8:	f04f 33ff 	mov.w	r3, #4294967295
 811c1fc:	e000      	b.n	811c200 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 811c1fe:	2300      	movs	r3, #0
}
 811c200:	4618      	mov	r0, r3
 811c202:	3710      	adds	r7, #16
 811c204:	46bd      	mov	sp, r7
 811c206:	bd80      	pop	{r7, pc}
 811c208:	10012180 	.word	0x10012180
 811c20c:	08121e10 	.word	0x08121e10
 811c210:	08121ec8 	.word	0x08121ec8
 811c214:	08121ea0 	.word	0x08121ea0

0811c218 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 811c218:	b580      	push	{r7, lr}
 811c21a:	b084      	sub	sp, #16
 811c21c:	af02      	add	r7, sp, #8
 811c21e:	6078      	str	r0, [r7, #4]
 811c220:	6039      	str	r1, [r7, #0]
  lwip_init();
 811c222:	f7f7 f9c5 	bl	81135b0 <lwip_init>

  tcpip_init_done = initfunc;
 811c226:	4a17      	ldr	r2, [pc, #92]	@ (811c284 <tcpip_init+0x6c>)
 811c228:	687b      	ldr	r3, [r7, #4]
 811c22a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 811c22c:	4a16      	ldr	r2, [pc, #88]	@ (811c288 <tcpip_init+0x70>)
 811c22e:	683b      	ldr	r3, [r7, #0]
 811c230:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 811c232:	2106      	movs	r1, #6
 811c234:	4815      	ldr	r0, [pc, #84]	@ (811c28c <tcpip_init+0x74>)
 811c236:	f7fa fae5 	bl	8116804 <sys_mbox_new>
 811c23a:	4603      	mov	r3, r0
 811c23c:	2b00      	cmp	r3, #0
 811c23e:	d006      	beq.n	811c24e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 811c240:	4b13      	ldr	r3, [pc, #76]	@ (811c290 <tcpip_init+0x78>)
 811c242:	f240 2261 	movw	r2, #609	@ 0x261
 811c246:	4913      	ldr	r1, [pc, #76]	@ (811c294 <tcpip_init+0x7c>)
 811c248:	4813      	ldr	r0, [pc, #76]	@ (811c298 <tcpip_init+0x80>)
 811c24a:	f001 fdc7 	bl	811dddc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 811c24e:	4813      	ldr	r0, [pc, #76]	@ (811c29c <tcpip_init+0x84>)
 811c250:	f7fa fb5a 	bl	8116908 <sys_mutex_new>
 811c254:	4603      	mov	r3, r0
 811c256:	2b00      	cmp	r3, #0
 811c258:	d006      	beq.n	811c268 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 811c25a:	4b0d      	ldr	r3, [pc, #52]	@ (811c290 <tcpip_init+0x78>)
 811c25c:	f240 2265 	movw	r2, #613	@ 0x265
 811c260:	490f      	ldr	r1, [pc, #60]	@ (811c2a0 <tcpip_init+0x88>)
 811c262:	480d      	ldr	r0, [pc, #52]	@ (811c298 <tcpip_init+0x80>)
 811c264:	f001 fdba 	bl	811dddc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 811c268:	2301      	movs	r3, #1
 811c26a:	9300      	str	r3, [sp, #0]
 811c26c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 811c270:	2200      	movs	r2, #0
 811c272:	490c      	ldr	r1, [pc, #48]	@ (811c2a4 <tcpip_init+0x8c>)
 811c274:	480c      	ldr	r0, [pc, #48]	@ (811c2a8 <tcpip_init+0x90>)
 811c276:	f7fa fb79 	bl	811696c <sys_thread_new>
}
 811c27a:	bf00      	nop
 811c27c:	3708      	adds	r7, #8
 811c27e:	46bd      	mov	sp, r7
 811c280:	bd80      	pop	{r7, pc}
 811c282:	bf00      	nop
 811c284:	10012178 	.word	0x10012178
 811c288:	1001217c 	.word	0x1001217c
 811c28c:	10012180 	.word	0x10012180
 811c290:	08121e10 	.word	0x08121e10
 811c294:	08121ed8 	.word	0x08121ed8
 811c298:	08121ea0 	.word	0x08121ea0
 811c29c:	10012184 	.word	0x10012184
 811c2a0:	08121efc 	.word	0x08121efc
 811c2a4:	0811c05d 	.word	0x0811c05d
 811c2a8:	08121f20 	.word	0x08121f20

0811c2ac <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 811c2ac:	b580      	push	{r7, lr}
 811c2ae:	b082      	sub	sp, #8
 811c2b0:	af00      	add	r7, sp, #0
 811c2b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 811c2b4:	f7fa fbe2 	bl	8116a7c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 811c2b8:	4b0a      	ldr	r3, [pc, #40]	@ (811c2e4 <tcpip_tcp_timer+0x38>)
 811c2ba:	681b      	ldr	r3, [r3, #0]
 811c2bc:	2b00      	cmp	r3, #0
 811c2be:	d103      	bne.n	811c2c8 <tcpip_tcp_timer+0x1c>
 811c2c0:	4b09      	ldr	r3, [pc, #36]	@ (811c2e8 <tcpip_tcp_timer+0x3c>)
 811c2c2:	681b      	ldr	r3, [r3, #0]
 811c2c4:	2b00      	cmp	r3, #0
 811c2c6:	d005      	beq.n	811c2d4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 811c2c8:	2200      	movs	r2, #0
 811c2ca:	4908      	ldr	r1, [pc, #32]	@ (811c2ec <tcpip_tcp_timer+0x40>)
 811c2cc:	20fa      	movs	r0, #250	@ 0xfa
 811c2ce:	f000 f8f3 	bl	811c4b8 <sys_timeout>
 811c2d2:	e003      	b.n	811c2dc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 811c2d4:	4b06      	ldr	r3, [pc, #24]	@ (811c2f0 <tcpip_tcp_timer+0x44>)
 811c2d6:	2200      	movs	r2, #0
 811c2d8:	601a      	str	r2, [r3, #0]
  }
}
 811c2da:	bf00      	nop
 811c2dc:	bf00      	nop
 811c2de:	3708      	adds	r7, #8
 811c2e0:	46bd      	mov	sp, r7
 811c2e2:	bd80      	pop	{r7, pc}
 811c2e4:	10012134 	.word	0x10012134
 811c2e8:	10012138 	.word	0x10012138
 811c2ec:	0811c2ad 	.word	0x0811c2ad
 811c2f0:	10012190 	.word	0x10012190

0811c2f4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 811c2f4:	b580      	push	{r7, lr}
 811c2f6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 811c2f8:	4b0a      	ldr	r3, [pc, #40]	@ (811c324 <tcp_timer_needed+0x30>)
 811c2fa:	681b      	ldr	r3, [r3, #0]
 811c2fc:	2b00      	cmp	r3, #0
 811c2fe:	d10f      	bne.n	811c320 <tcp_timer_needed+0x2c>
 811c300:	4b09      	ldr	r3, [pc, #36]	@ (811c328 <tcp_timer_needed+0x34>)
 811c302:	681b      	ldr	r3, [r3, #0]
 811c304:	2b00      	cmp	r3, #0
 811c306:	d103      	bne.n	811c310 <tcp_timer_needed+0x1c>
 811c308:	4b08      	ldr	r3, [pc, #32]	@ (811c32c <tcp_timer_needed+0x38>)
 811c30a:	681b      	ldr	r3, [r3, #0]
 811c30c:	2b00      	cmp	r3, #0
 811c30e:	d007      	beq.n	811c320 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 811c310:	4b04      	ldr	r3, [pc, #16]	@ (811c324 <tcp_timer_needed+0x30>)
 811c312:	2201      	movs	r2, #1
 811c314:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 811c316:	2200      	movs	r2, #0
 811c318:	4905      	ldr	r1, [pc, #20]	@ (811c330 <tcp_timer_needed+0x3c>)
 811c31a:	20fa      	movs	r0, #250	@ 0xfa
 811c31c:	f000 f8cc 	bl	811c4b8 <sys_timeout>
  }
}
 811c320:	bf00      	nop
 811c322:	bd80      	pop	{r7, pc}
 811c324:	10012190 	.word	0x10012190
 811c328:	10012134 	.word	0x10012134
 811c32c:	10012138 	.word	0x10012138
 811c330:	0811c2ad 	.word	0x0811c2ad

0811c334 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 811c334:	b580      	push	{r7, lr}
 811c336:	b086      	sub	sp, #24
 811c338:	af00      	add	r7, sp, #0
 811c33a:	60f8      	str	r0, [r7, #12]
 811c33c:	60b9      	str	r1, [r7, #8]
 811c33e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 811c340:	200a      	movs	r0, #10
 811c342:	f7f9 f89b 	bl	811547c <memp_malloc>
 811c346:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 811c348:	693b      	ldr	r3, [r7, #16]
 811c34a:	2b00      	cmp	r3, #0
 811c34c:	d109      	bne.n	811c362 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 811c34e:	693b      	ldr	r3, [r7, #16]
 811c350:	2b00      	cmp	r3, #0
 811c352:	d151      	bne.n	811c3f8 <sys_timeout_abs+0xc4>
 811c354:	4b2a      	ldr	r3, [pc, #168]	@ (811c400 <sys_timeout_abs+0xcc>)
 811c356:	22be      	movs	r2, #190	@ 0xbe
 811c358:	492a      	ldr	r1, [pc, #168]	@ (811c404 <sys_timeout_abs+0xd0>)
 811c35a:	482b      	ldr	r0, [pc, #172]	@ (811c408 <sys_timeout_abs+0xd4>)
 811c35c:	f001 fd3e 	bl	811dddc <iprintf>
    return;
 811c360:	e04a      	b.n	811c3f8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 811c362:	693b      	ldr	r3, [r7, #16]
 811c364:	2200      	movs	r2, #0
 811c366:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 811c368:	693b      	ldr	r3, [r7, #16]
 811c36a:	68ba      	ldr	r2, [r7, #8]
 811c36c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 811c36e:	693b      	ldr	r3, [r7, #16]
 811c370:	687a      	ldr	r2, [r7, #4]
 811c372:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 811c374:	693b      	ldr	r3, [r7, #16]
 811c376:	68fa      	ldr	r2, [r7, #12]
 811c378:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 811c37a:	4b24      	ldr	r3, [pc, #144]	@ (811c40c <sys_timeout_abs+0xd8>)
 811c37c:	681b      	ldr	r3, [r3, #0]
 811c37e:	2b00      	cmp	r3, #0
 811c380:	d103      	bne.n	811c38a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 811c382:	4a22      	ldr	r2, [pc, #136]	@ (811c40c <sys_timeout_abs+0xd8>)
 811c384:	693b      	ldr	r3, [r7, #16]
 811c386:	6013      	str	r3, [r2, #0]
    return;
 811c388:	e037      	b.n	811c3fa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 811c38a:	693b      	ldr	r3, [r7, #16]
 811c38c:	685a      	ldr	r2, [r3, #4]
 811c38e:	4b1f      	ldr	r3, [pc, #124]	@ (811c40c <sys_timeout_abs+0xd8>)
 811c390:	681b      	ldr	r3, [r3, #0]
 811c392:	685b      	ldr	r3, [r3, #4]
 811c394:	1ad3      	subs	r3, r2, r3
 811c396:	0fdb      	lsrs	r3, r3, #31
 811c398:	f003 0301 	and.w	r3, r3, #1
 811c39c:	b2db      	uxtb	r3, r3
 811c39e:	2b00      	cmp	r3, #0
 811c3a0:	d007      	beq.n	811c3b2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 811c3a2:	4b1a      	ldr	r3, [pc, #104]	@ (811c40c <sys_timeout_abs+0xd8>)
 811c3a4:	681a      	ldr	r2, [r3, #0]
 811c3a6:	693b      	ldr	r3, [r7, #16]
 811c3a8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 811c3aa:	4a18      	ldr	r2, [pc, #96]	@ (811c40c <sys_timeout_abs+0xd8>)
 811c3ac:	693b      	ldr	r3, [r7, #16]
 811c3ae:	6013      	str	r3, [r2, #0]
 811c3b0:	e023      	b.n	811c3fa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 811c3b2:	4b16      	ldr	r3, [pc, #88]	@ (811c40c <sys_timeout_abs+0xd8>)
 811c3b4:	681b      	ldr	r3, [r3, #0]
 811c3b6:	617b      	str	r3, [r7, #20]
 811c3b8:	e01a      	b.n	811c3f0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 811c3ba:	697b      	ldr	r3, [r7, #20]
 811c3bc:	681b      	ldr	r3, [r3, #0]
 811c3be:	2b00      	cmp	r3, #0
 811c3c0:	d00b      	beq.n	811c3da <sys_timeout_abs+0xa6>
 811c3c2:	693b      	ldr	r3, [r7, #16]
 811c3c4:	685a      	ldr	r2, [r3, #4]
 811c3c6:	697b      	ldr	r3, [r7, #20]
 811c3c8:	681b      	ldr	r3, [r3, #0]
 811c3ca:	685b      	ldr	r3, [r3, #4]
 811c3cc:	1ad3      	subs	r3, r2, r3
 811c3ce:	0fdb      	lsrs	r3, r3, #31
 811c3d0:	f003 0301 	and.w	r3, r3, #1
 811c3d4:	b2db      	uxtb	r3, r3
 811c3d6:	2b00      	cmp	r3, #0
 811c3d8:	d007      	beq.n	811c3ea <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 811c3da:	697b      	ldr	r3, [r7, #20]
 811c3dc:	681a      	ldr	r2, [r3, #0]
 811c3de:	693b      	ldr	r3, [r7, #16]
 811c3e0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 811c3e2:	697b      	ldr	r3, [r7, #20]
 811c3e4:	693a      	ldr	r2, [r7, #16]
 811c3e6:	601a      	str	r2, [r3, #0]
        break;
 811c3e8:	e007      	b.n	811c3fa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 811c3ea:	697b      	ldr	r3, [r7, #20]
 811c3ec:	681b      	ldr	r3, [r3, #0]
 811c3ee:	617b      	str	r3, [r7, #20]
 811c3f0:	697b      	ldr	r3, [r7, #20]
 811c3f2:	2b00      	cmp	r3, #0
 811c3f4:	d1e1      	bne.n	811c3ba <sys_timeout_abs+0x86>
 811c3f6:	e000      	b.n	811c3fa <sys_timeout_abs+0xc6>
    return;
 811c3f8:	bf00      	nop
      }
    }
  }
}
 811c3fa:	3718      	adds	r7, #24
 811c3fc:	46bd      	mov	sp, r7
 811c3fe:	bd80      	pop	{r7, pc}
 811c400:	08121f30 	.word	0x08121f30
 811c404:	08121fa4 	.word	0x08121fa4
 811c408:	08121fe4 	.word	0x08121fe4
 811c40c:	10012188 	.word	0x10012188

0811c410 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 811c410:	b580      	push	{r7, lr}
 811c412:	b086      	sub	sp, #24
 811c414:	af00      	add	r7, sp, #0
 811c416:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 811c418:	687b      	ldr	r3, [r7, #4]
 811c41a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 811c41c:	697b      	ldr	r3, [r7, #20]
 811c41e:	685b      	ldr	r3, [r3, #4]
 811c420:	4798      	blx	r3

  now = sys_now();
 811c422:	f7e9 f9f7 	bl	8105814 <sys_now>
 811c426:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 811c428:	697b      	ldr	r3, [r7, #20]
 811c42a:	681a      	ldr	r2, [r3, #0]
 811c42c:	4b0f      	ldr	r3, [pc, #60]	@ (811c46c <lwip_cyclic_timer+0x5c>)
 811c42e:	681b      	ldr	r3, [r3, #0]
 811c430:	4413      	add	r3, r2
 811c432:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 811c434:	68fa      	ldr	r2, [r7, #12]
 811c436:	693b      	ldr	r3, [r7, #16]
 811c438:	1ad3      	subs	r3, r2, r3
 811c43a:	0fdb      	lsrs	r3, r3, #31
 811c43c:	f003 0301 	and.w	r3, r3, #1
 811c440:	b2db      	uxtb	r3, r3
 811c442:	2b00      	cmp	r3, #0
 811c444:	d009      	beq.n	811c45a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 811c446:	697b      	ldr	r3, [r7, #20]
 811c448:	681a      	ldr	r2, [r3, #0]
 811c44a:	693b      	ldr	r3, [r7, #16]
 811c44c:	4413      	add	r3, r2
 811c44e:	687a      	ldr	r2, [r7, #4]
 811c450:	4907      	ldr	r1, [pc, #28]	@ (811c470 <lwip_cyclic_timer+0x60>)
 811c452:	4618      	mov	r0, r3
 811c454:	f7ff ff6e 	bl	811c334 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 811c458:	e004      	b.n	811c464 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 811c45a:	687a      	ldr	r2, [r7, #4]
 811c45c:	4904      	ldr	r1, [pc, #16]	@ (811c470 <lwip_cyclic_timer+0x60>)
 811c45e:	68f8      	ldr	r0, [r7, #12]
 811c460:	f7ff ff68 	bl	811c334 <sys_timeout_abs>
}
 811c464:	bf00      	nop
 811c466:	3718      	adds	r7, #24
 811c468:	46bd      	mov	sp, r7
 811c46a:	bd80      	pop	{r7, pc}
 811c46c:	1001218c 	.word	0x1001218c
 811c470:	0811c411 	.word	0x0811c411

0811c474 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 811c474:	b580      	push	{r7, lr}
 811c476:	b082      	sub	sp, #8
 811c478:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 811c47a:	2301      	movs	r3, #1
 811c47c:	607b      	str	r3, [r7, #4]
 811c47e:	e00e      	b.n	811c49e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 811c480:	4a0b      	ldr	r2, [pc, #44]	@ (811c4b0 <sys_timeouts_init+0x3c>)
 811c482:	687b      	ldr	r3, [r7, #4]
 811c484:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 811c488:	687b      	ldr	r3, [r7, #4]
 811c48a:	00db      	lsls	r3, r3, #3
 811c48c:	4a08      	ldr	r2, [pc, #32]	@ (811c4b0 <sys_timeouts_init+0x3c>)
 811c48e:	4413      	add	r3, r2
 811c490:	461a      	mov	r2, r3
 811c492:	4908      	ldr	r1, [pc, #32]	@ (811c4b4 <sys_timeouts_init+0x40>)
 811c494:	f000 f810 	bl	811c4b8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 811c498:	687b      	ldr	r3, [r7, #4]
 811c49a:	3301      	adds	r3, #1
 811c49c:	607b      	str	r3, [r7, #4]
 811c49e:	687b      	ldr	r3, [r7, #4]
 811c4a0:	2b02      	cmp	r3, #2
 811c4a2:	d9ed      	bls.n	811c480 <sys_timeouts_init+0xc>
  }
}
 811c4a4:	bf00      	nop
 811c4a6:	bf00      	nop
 811c4a8:	3708      	adds	r7, #8
 811c4aa:	46bd      	mov	sp, r7
 811c4ac:	bd80      	pop	{r7, pc}
 811c4ae:	bf00      	nop
 811c4b0:	081225d4 	.word	0x081225d4
 811c4b4:	0811c411 	.word	0x0811c411

0811c4b8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 811c4b8:	b580      	push	{r7, lr}
 811c4ba:	b086      	sub	sp, #24
 811c4bc:	af00      	add	r7, sp, #0
 811c4be:	60f8      	str	r0, [r7, #12]
 811c4c0:	60b9      	str	r1, [r7, #8]
 811c4c2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 811c4c4:	68fb      	ldr	r3, [r7, #12]
 811c4c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 811c4ca:	d306      	bcc.n	811c4da <sys_timeout+0x22>
 811c4cc:	4b0a      	ldr	r3, [pc, #40]	@ (811c4f8 <sys_timeout+0x40>)
 811c4ce:	f240 1229 	movw	r2, #297	@ 0x129
 811c4d2:	490a      	ldr	r1, [pc, #40]	@ (811c4fc <sys_timeout+0x44>)
 811c4d4:	480a      	ldr	r0, [pc, #40]	@ (811c500 <sys_timeout+0x48>)
 811c4d6:	f001 fc81 	bl	811dddc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 811c4da:	f7e9 f99b 	bl	8105814 <sys_now>
 811c4de:	4602      	mov	r2, r0
 811c4e0:	68fb      	ldr	r3, [r7, #12]
 811c4e2:	4413      	add	r3, r2
 811c4e4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 811c4e6:	687a      	ldr	r2, [r7, #4]
 811c4e8:	68b9      	ldr	r1, [r7, #8]
 811c4ea:	6978      	ldr	r0, [r7, #20]
 811c4ec:	f7ff ff22 	bl	811c334 <sys_timeout_abs>
#endif
}
 811c4f0:	bf00      	nop
 811c4f2:	3718      	adds	r7, #24
 811c4f4:	46bd      	mov	sp, r7
 811c4f6:	bd80      	pop	{r7, pc}
 811c4f8:	08121f30 	.word	0x08121f30
 811c4fc:	0812200c 	.word	0x0812200c
 811c500:	08121fe4 	.word	0x08121fe4

0811c504 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 811c504:	b580      	push	{r7, lr}
 811c506:	b084      	sub	sp, #16
 811c508:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 811c50a:	f7e9 f983 	bl	8105814 <sys_now>
 811c50e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 811c510:	4b17      	ldr	r3, [pc, #92]	@ (811c570 <sys_check_timeouts+0x6c>)
 811c512:	681b      	ldr	r3, [r3, #0]
 811c514:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 811c516:	68bb      	ldr	r3, [r7, #8]
 811c518:	2b00      	cmp	r3, #0
 811c51a:	d022      	beq.n	811c562 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 811c51c:	68bb      	ldr	r3, [r7, #8]
 811c51e:	685b      	ldr	r3, [r3, #4]
 811c520:	68fa      	ldr	r2, [r7, #12]
 811c522:	1ad3      	subs	r3, r2, r3
 811c524:	0fdb      	lsrs	r3, r3, #31
 811c526:	f003 0301 	and.w	r3, r3, #1
 811c52a:	b2db      	uxtb	r3, r3
 811c52c:	2b00      	cmp	r3, #0
 811c52e:	d11a      	bne.n	811c566 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 811c530:	68bb      	ldr	r3, [r7, #8]
 811c532:	681b      	ldr	r3, [r3, #0]
 811c534:	4a0e      	ldr	r2, [pc, #56]	@ (811c570 <sys_check_timeouts+0x6c>)
 811c536:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 811c538:	68bb      	ldr	r3, [r7, #8]
 811c53a:	689b      	ldr	r3, [r3, #8]
 811c53c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 811c53e:	68bb      	ldr	r3, [r7, #8]
 811c540:	68db      	ldr	r3, [r3, #12]
 811c542:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 811c544:	68bb      	ldr	r3, [r7, #8]
 811c546:	685b      	ldr	r3, [r3, #4]
 811c548:	4a0a      	ldr	r2, [pc, #40]	@ (811c574 <sys_check_timeouts+0x70>)
 811c54a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 811c54c:	68b9      	ldr	r1, [r7, #8]
 811c54e:	200a      	movs	r0, #10
 811c550:	f7f9 f80a 	bl	8115568 <memp_free>
    if (handler != NULL) {
 811c554:	687b      	ldr	r3, [r7, #4]
 811c556:	2b00      	cmp	r3, #0
 811c558:	d0da      	beq.n	811c510 <sys_check_timeouts+0xc>
      handler(arg);
 811c55a:	687b      	ldr	r3, [r7, #4]
 811c55c:	6838      	ldr	r0, [r7, #0]
 811c55e:	4798      	blx	r3
  do {
 811c560:	e7d6      	b.n	811c510 <sys_check_timeouts+0xc>
      return;
 811c562:	bf00      	nop
 811c564:	e000      	b.n	811c568 <sys_check_timeouts+0x64>
      return;
 811c566:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 811c568:	3710      	adds	r7, #16
 811c56a:	46bd      	mov	sp, r7
 811c56c:	bd80      	pop	{r7, pc}
 811c56e:	bf00      	nop
 811c570:	10012188 	.word	0x10012188
 811c574:	1001218c 	.word	0x1001218c

0811c578 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 811c578:	b580      	push	{r7, lr}
 811c57a:	b082      	sub	sp, #8
 811c57c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 811c57e:	4b16      	ldr	r3, [pc, #88]	@ (811c5d8 <sys_timeouts_sleeptime+0x60>)
 811c580:	681b      	ldr	r3, [r3, #0]
 811c582:	2b00      	cmp	r3, #0
 811c584:	d102      	bne.n	811c58c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 811c586:	f04f 33ff 	mov.w	r3, #4294967295
 811c58a:	e020      	b.n	811c5ce <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 811c58c:	f7e9 f942 	bl	8105814 <sys_now>
 811c590:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 811c592:	4b11      	ldr	r3, [pc, #68]	@ (811c5d8 <sys_timeouts_sleeptime+0x60>)
 811c594:	681b      	ldr	r3, [r3, #0]
 811c596:	685a      	ldr	r2, [r3, #4]
 811c598:	687b      	ldr	r3, [r7, #4]
 811c59a:	1ad3      	subs	r3, r2, r3
 811c59c:	0fdb      	lsrs	r3, r3, #31
 811c59e:	f003 0301 	and.w	r3, r3, #1
 811c5a2:	b2db      	uxtb	r3, r3
 811c5a4:	2b00      	cmp	r3, #0
 811c5a6:	d001      	beq.n	811c5ac <sys_timeouts_sleeptime+0x34>
    return 0;
 811c5a8:	2300      	movs	r3, #0
 811c5aa:	e010      	b.n	811c5ce <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 811c5ac:	4b0a      	ldr	r3, [pc, #40]	@ (811c5d8 <sys_timeouts_sleeptime+0x60>)
 811c5ae:	681b      	ldr	r3, [r3, #0]
 811c5b0:	685a      	ldr	r2, [r3, #4]
 811c5b2:	687b      	ldr	r3, [r7, #4]
 811c5b4:	1ad3      	subs	r3, r2, r3
 811c5b6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 811c5b8:	683b      	ldr	r3, [r7, #0]
 811c5ba:	2b00      	cmp	r3, #0
 811c5bc:	da06      	bge.n	811c5cc <sys_timeouts_sleeptime+0x54>
 811c5be:	4b07      	ldr	r3, [pc, #28]	@ (811c5dc <sys_timeouts_sleeptime+0x64>)
 811c5c0:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 811c5c4:	4906      	ldr	r1, [pc, #24]	@ (811c5e0 <sys_timeouts_sleeptime+0x68>)
 811c5c6:	4807      	ldr	r0, [pc, #28]	@ (811c5e4 <sys_timeouts_sleeptime+0x6c>)
 811c5c8:	f001 fc08 	bl	811dddc <iprintf>
    return ret;
 811c5cc:	683b      	ldr	r3, [r7, #0]
  }
}
 811c5ce:	4618      	mov	r0, r3
 811c5d0:	3708      	adds	r7, #8
 811c5d2:	46bd      	mov	sp, r7
 811c5d4:	bd80      	pop	{r7, pc}
 811c5d6:	bf00      	nop
 811c5d8:	10012188 	.word	0x10012188
 811c5dc:	08121f30 	.word	0x08121f30
 811c5e0:	08122044 	.word	0x08122044
 811c5e4:	08121fe4 	.word	0x08121fe4

0811c5e8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 811c5e8:	b580      	push	{r7, lr}
 811c5ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 811c5ec:	f000 fe86 	bl	811d2fc <rand>
 811c5f0:	4603      	mov	r3, r0
 811c5f2:	b29b      	uxth	r3, r3
 811c5f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 811c5f8:	b29b      	uxth	r3, r3
 811c5fa:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 811c5fe:	b29a      	uxth	r2, r3
 811c600:	4b01      	ldr	r3, [pc, #4]	@ (811c608 <udp_init+0x20>)
 811c602:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 811c604:	bf00      	nop
 811c606:	bd80      	pop	{r7, pc}
 811c608:	10000030 	.word	0x10000030

0811c60c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 811c60c:	b480      	push	{r7}
 811c60e:	b083      	sub	sp, #12
 811c610:	af00      	add	r7, sp, #0
  u16_t n = 0;
 811c612:	2300      	movs	r3, #0
 811c614:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 811c616:	4b17      	ldr	r3, [pc, #92]	@ (811c674 <udp_new_port+0x68>)
 811c618:	881b      	ldrh	r3, [r3, #0]
 811c61a:	1c5a      	adds	r2, r3, #1
 811c61c:	b291      	uxth	r1, r2
 811c61e:	4a15      	ldr	r2, [pc, #84]	@ (811c674 <udp_new_port+0x68>)
 811c620:	8011      	strh	r1, [r2, #0]
 811c622:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811c626:	4293      	cmp	r3, r2
 811c628:	d103      	bne.n	811c632 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 811c62a:	4b12      	ldr	r3, [pc, #72]	@ (811c674 <udp_new_port+0x68>)
 811c62c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 811c630:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 811c632:	4b11      	ldr	r3, [pc, #68]	@ (811c678 <udp_new_port+0x6c>)
 811c634:	681b      	ldr	r3, [r3, #0]
 811c636:	603b      	str	r3, [r7, #0]
 811c638:	e011      	b.n	811c65e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 811c63a:	683b      	ldr	r3, [r7, #0]
 811c63c:	8a5a      	ldrh	r2, [r3, #18]
 811c63e:	4b0d      	ldr	r3, [pc, #52]	@ (811c674 <udp_new_port+0x68>)
 811c640:	881b      	ldrh	r3, [r3, #0]
 811c642:	429a      	cmp	r2, r3
 811c644:	d108      	bne.n	811c658 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 811c646:	88fb      	ldrh	r3, [r7, #6]
 811c648:	3301      	adds	r3, #1
 811c64a:	80fb      	strh	r3, [r7, #6]
 811c64c:	88fb      	ldrh	r3, [r7, #6]
 811c64e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 811c652:	d3e0      	bcc.n	811c616 <udp_new_port+0xa>
        return 0;
 811c654:	2300      	movs	r3, #0
 811c656:	e007      	b.n	811c668 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 811c658:	683b      	ldr	r3, [r7, #0]
 811c65a:	68db      	ldr	r3, [r3, #12]
 811c65c:	603b      	str	r3, [r7, #0]
 811c65e:	683b      	ldr	r3, [r7, #0]
 811c660:	2b00      	cmp	r3, #0
 811c662:	d1ea      	bne.n	811c63a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 811c664:	4b03      	ldr	r3, [pc, #12]	@ (811c674 <udp_new_port+0x68>)
 811c666:	881b      	ldrh	r3, [r3, #0]
}
 811c668:	4618      	mov	r0, r3
 811c66a:	370c      	adds	r7, #12
 811c66c:	46bd      	mov	sp, r7
 811c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 811c672:	4770      	bx	lr
 811c674:	10000030 	.word	0x10000030
 811c678:	10012194 	.word	0x10012194

0811c67c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 811c67c:	b580      	push	{r7, lr}
 811c67e:	b084      	sub	sp, #16
 811c680:	af00      	add	r7, sp, #0
 811c682:	60f8      	str	r0, [r7, #12]
 811c684:	60b9      	str	r1, [r7, #8]
 811c686:	4613      	mov	r3, r2
 811c688:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 811c68a:	68fb      	ldr	r3, [r7, #12]
 811c68c:	2b00      	cmp	r3, #0
 811c68e:	d105      	bne.n	811c69c <udp_input_local_match+0x20>
 811c690:	4b27      	ldr	r3, [pc, #156]	@ (811c730 <udp_input_local_match+0xb4>)
 811c692:	2287      	movs	r2, #135	@ 0x87
 811c694:	4927      	ldr	r1, [pc, #156]	@ (811c734 <udp_input_local_match+0xb8>)
 811c696:	4828      	ldr	r0, [pc, #160]	@ (811c738 <udp_input_local_match+0xbc>)
 811c698:	f001 fba0 	bl	811dddc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 811c69c:	68bb      	ldr	r3, [r7, #8]
 811c69e:	2b00      	cmp	r3, #0
 811c6a0:	d105      	bne.n	811c6ae <udp_input_local_match+0x32>
 811c6a2:	4b23      	ldr	r3, [pc, #140]	@ (811c730 <udp_input_local_match+0xb4>)
 811c6a4:	2288      	movs	r2, #136	@ 0x88
 811c6a6:	4925      	ldr	r1, [pc, #148]	@ (811c73c <udp_input_local_match+0xc0>)
 811c6a8:	4823      	ldr	r0, [pc, #140]	@ (811c738 <udp_input_local_match+0xbc>)
 811c6aa:	f001 fb97 	bl	811dddc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811c6ae:	68fb      	ldr	r3, [r7, #12]
 811c6b0:	7a1b      	ldrb	r3, [r3, #8]
 811c6b2:	2b00      	cmp	r3, #0
 811c6b4:	d00b      	beq.n	811c6ce <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811c6b6:	68fb      	ldr	r3, [r7, #12]
 811c6b8:	7a1a      	ldrb	r2, [r3, #8]
 811c6ba:	4b21      	ldr	r3, [pc, #132]	@ (811c740 <udp_input_local_match+0xc4>)
 811c6bc:	685b      	ldr	r3, [r3, #4]
 811c6be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811c6c2:	3301      	adds	r3, #1
 811c6c4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811c6c6:	429a      	cmp	r2, r3
 811c6c8:	d001      	beq.n	811c6ce <udp_input_local_match+0x52>
    return 0;
 811c6ca:	2300      	movs	r3, #0
 811c6cc:	e02b      	b.n	811c726 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 811c6ce:	79fb      	ldrb	r3, [r7, #7]
 811c6d0:	2b00      	cmp	r3, #0
 811c6d2:	d018      	beq.n	811c706 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 811c6d4:	68fb      	ldr	r3, [r7, #12]
 811c6d6:	2b00      	cmp	r3, #0
 811c6d8:	d013      	beq.n	811c702 <udp_input_local_match+0x86>
 811c6da:	68fb      	ldr	r3, [r7, #12]
 811c6dc:	681b      	ldr	r3, [r3, #0]
 811c6de:	2b00      	cmp	r3, #0
 811c6e0:	d00f      	beq.n	811c702 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 811c6e2:	4b17      	ldr	r3, [pc, #92]	@ (811c740 <udp_input_local_match+0xc4>)
 811c6e4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 811c6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 811c6ea:	d00a      	beq.n	811c702 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 811c6ec:	68fb      	ldr	r3, [r7, #12]
 811c6ee:	681a      	ldr	r2, [r3, #0]
 811c6f0:	4b13      	ldr	r3, [pc, #76]	@ (811c740 <udp_input_local_match+0xc4>)
 811c6f2:	695b      	ldr	r3, [r3, #20]
 811c6f4:	405a      	eors	r2, r3
 811c6f6:	68bb      	ldr	r3, [r7, #8]
 811c6f8:	3308      	adds	r3, #8
 811c6fa:	681b      	ldr	r3, [r3, #0]
 811c6fc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 811c6fe:	2b00      	cmp	r3, #0
 811c700:	d110      	bne.n	811c724 <udp_input_local_match+0xa8>
          return 1;
 811c702:	2301      	movs	r3, #1
 811c704:	e00f      	b.n	811c726 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 811c706:	68fb      	ldr	r3, [r7, #12]
 811c708:	2b00      	cmp	r3, #0
 811c70a:	d009      	beq.n	811c720 <udp_input_local_match+0xa4>
 811c70c:	68fb      	ldr	r3, [r7, #12]
 811c70e:	681b      	ldr	r3, [r3, #0]
 811c710:	2b00      	cmp	r3, #0
 811c712:	d005      	beq.n	811c720 <udp_input_local_match+0xa4>
 811c714:	68fb      	ldr	r3, [r7, #12]
 811c716:	681a      	ldr	r2, [r3, #0]
 811c718:	4b09      	ldr	r3, [pc, #36]	@ (811c740 <udp_input_local_match+0xc4>)
 811c71a:	695b      	ldr	r3, [r3, #20]
 811c71c:	429a      	cmp	r2, r3
 811c71e:	d101      	bne.n	811c724 <udp_input_local_match+0xa8>
        return 1;
 811c720:	2301      	movs	r3, #1
 811c722:	e000      	b.n	811c726 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 811c724:	2300      	movs	r3, #0
}
 811c726:	4618      	mov	r0, r3
 811c728:	3710      	adds	r7, #16
 811c72a:	46bd      	mov	sp, r7
 811c72c:	bd80      	pop	{r7, pc}
 811c72e:	bf00      	nop
 811c730:	08122058 	.word	0x08122058
 811c734:	081220c8 	.word	0x081220c8
 811c738:	081220ec 	.word	0x081220ec
 811c73c:	08122114 	.word	0x08122114
 811c740:	1000b29c 	.word	0x1000b29c

0811c744 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 811c744:	b590      	push	{r4, r7, lr}
 811c746:	b08d      	sub	sp, #52	@ 0x34
 811c748:	af02      	add	r7, sp, #8
 811c74a:	6078      	str	r0, [r7, #4]
 811c74c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 811c74e:	2300      	movs	r3, #0
 811c750:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 811c752:	687b      	ldr	r3, [r7, #4]
 811c754:	2b00      	cmp	r3, #0
 811c756:	d105      	bne.n	811c764 <udp_input+0x20>
 811c758:	4b7c      	ldr	r3, [pc, #496]	@ (811c94c <udp_input+0x208>)
 811c75a:	22cf      	movs	r2, #207	@ 0xcf
 811c75c:	497c      	ldr	r1, [pc, #496]	@ (811c950 <udp_input+0x20c>)
 811c75e:	487d      	ldr	r0, [pc, #500]	@ (811c954 <udp_input+0x210>)
 811c760:	f001 fb3c 	bl	811dddc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 811c764:	683b      	ldr	r3, [r7, #0]
 811c766:	2b00      	cmp	r3, #0
 811c768:	d105      	bne.n	811c776 <udp_input+0x32>
 811c76a:	4b78      	ldr	r3, [pc, #480]	@ (811c94c <udp_input+0x208>)
 811c76c:	22d0      	movs	r2, #208	@ 0xd0
 811c76e:	497a      	ldr	r1, [pc, #488]	@ (811c958 <udp_input+0x214>)
 811c770:	4878      	ldr	r0, [pc, #480]	@ (811c954 <udp_input+0x210>)
 811c772:	f001 fb33 	bl	811dddc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 811c776:	687b      	ldr	r3, [r7, #4]
 811c778:	895b      	ldrh	r3, [r3, #10]
 811c77a:	2b07      	cmp	r3, #7
 811c77c:	d803      	bhi.n	811c786 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 811c77e:	6878      	ldr	r0, [r7, #4]
 811c780:	f7f9 fd96 	bl	81162b0 <pbuf_free>
    goto end;
 811c784:	e0de      	b.n	811c944 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 811c786:	687b      	ldr	r3, [r7, #4]
 811c788:	685b      	ldr	r3, [r3, #4]
 811c78a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 811c78c:	4b73      	ldr	r3, [pc, #460]	@ (811c95c <udp_input+0x218>)
 811c78e:	695b      	ldr	r3, [r3, #20]
 811c790:	4a72      	ldr	r2, [pc, #456]	@ (811c95c <udp_input+0x218>)
 811c792:	6812      	ldr	r2, [r2, #0]
 811c794:	4611      	mov	r1, r2
 811c796:	4618      	mov	r0, r3
 811c798:	f7f7 f9b8 	bl	8113b0c <ip4_addr_isbroadcast_u32>
 811c79c:	4603      	mov	r3, r0
 811c79e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 811c7a0:	697b      	ldr	r3, [r7, #20]
 811c7a2:	881b      	ldrh	r3, [r3, #0]
 811c7a4:	b29b      	uxth	r3, r3
 811c7a6:	4618      	mov	r0, r3
 811c7a8:	f7f5 fb78 	bl	8111e9c <lwip_htons>
 811c7ac:	4603      	mov	r3, r0
 811c7ae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 811c7b0:	697b      	ldr	r3, [r7, #20]
 811c7b2:	885b      	ldrh	r3, [r3, #2]
 811c7b4:	b29b      	uxth	r3, r3
 811c7b6:	4618      	mov	r0, r3
 811c7b8:	f7f5 fb70 	bl	8111e9c <lwip_htons>
 811c7bc:	4603      	mov	r3, r0
 811c7be:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 811c7c0:	2300      	movs	r3, #0
 811c7c2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 811c7c4:	2300      	movs	r3, #0
 811c7c6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 811c7c8:	2300      	movs	r3, #0
 811c7ca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 811c7cc:	4b64      	ldr	r3, [pc, #400]	@ (811c960 <udp_input+0x21c>)
 811c7ce:	681b      	ldr	r3, [r3, #0]
 811c7d0:	627b      	str	r3, [r7, #36]	@ 0x24
 811c7d2:	e054      	b.n	811c87e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 811c7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c7d6:	8a5b      	ldrh	r3, [r3, #18]
 811c7d8:	89fa      	ldrh	r2, [r7, #14]
 811c7da:	429a      	cmp	r2, r3
 811c7dc:	d14a      	bne.n	811c874 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 811c7de:	7cfb      	ldrb	r3, [r7, #19]
 811c7e0:	461a      	mov	r2, r3
 811c7e2:	6839      	ldr	r1, [r7, #0]
 811c7e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811c7e6:	f7ff ff49 	bl	811c67c <udp_input_local_match>
 811c7ea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 811c7ec:	2b00      	cmp	r3, #0
 811c7ee:	d041      	beq.n	811c874 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 811c7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c7f2:	7c1b      	ldrb	r3, [r3, #16]
 811c7f4:	f003 0304 	and.w	r3, r3, #4
 811c7f8:	2b00      	cmp	r3, #0
 811c7fa:	d11d      	bne.n	811c838 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 811c7fc:	69fb      	ldr	r3, [r7, #28]
 811c7fe:	2b00      	cmp	r3, #0
 811c800:	d102      	bne.n	811c808 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 811c802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c804:	61fb      	str	r3, [r7, #28]
 811c806:	e017      	b.n	811c838 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 811c808:	7cfb      	ldrb	r3, [r7, #19]
 811c80a:	2b00      	cmp	r3, #0
 811c80c:	d014      	beq.n	811c838 <udp_input+0xf4>
 811c80e:	4b53      	ldr	r3, [pc, #332]	@ (811c95c <udp_input+0x218>)
 811c810:	695b      	ldr	r3, [r3, #20]
 811c812:	f1b3 3fff 	cmp.w	r3, #4294967295
 811c816:	d10f      	bne.n	811c838 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 811c818:	69fb      	ldr	r3, [r7, #28]
 811c81a:	681a      	ldr	r2, [r3, #0]
 811c81c:	683b      	ldr	r3, [r7, #0]
 811c81e:	3304      	adds	r3, #4
 811c820:	681b      	ldr	r3, [r3, #0]
 811c822:	429a      	cmp	r2, r3
 811c824:	d008      	beq.n	811c838 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 811c826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c828:	681a      	ldr	r2, [r3, #0]
 811c82a:	683b      	ldr	r3, [r7, #0]
 811c82c:	3304      	adds	r3, #4
 811c82e:	681b      	ldr	r3, [r3, #0]
 811c830:	429a      	cmp	r2, r3
 811c832:	d101      	bne.n	811c838 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 811c834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c836:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 811c838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c83a:	8a9b      	ldrh	r3, [r3, #20]
 811c83c:	8a3a      	ldrh	r2, [r7, #16]
 811c83e:	429a      	cmp	r2, r3
 811c840:	d118      	bne.n	811c874 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 811c842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c844:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 811c846:	2b00      	cmp	r3, #0
 811c848:	d005      	beq.n	811c856 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 811c84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c84c:	685a      	ldr	r2, [r3, #4]
 811c84e:	4b43      	ldr	r3, [pc, #268]	@ (811c95c <udp_input+0x218>)
 811c850:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 811c852:	429a      	cmp	r2, r3
 811c854:	d10e      	bne.n	811c874 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 811c856:	6a3b      	ldr	r3, [r7, #32]
 811c858:	2b00      	cmp	r3, #0
 811c85a:	d014      	beq.n	811c886 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 811c85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c85e:	68da      	ldr	r2, [r3, #12]
 811c860:	6a3b      	ldr	r3, [r7, #32]
 811c862:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 811c864:	4b3e      	ldr	r3, [pc, #248]	@ (811c960 <udp_input+0x21c>)
 811c866:	681a      	ldr	r2, [r3, #0]
 811c868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c86a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 811c86c:	4a3c      	ldr	r2, [pc, #240]	@ (811c960 <udp_input+0x21c>)
 811c86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c870:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 811c872:	e008      	b.n	811c886 <udp_input+0x142>
      }
    }

    prev = pcb;
 811c874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c876:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 811c878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c87a:	68db      	ldr	r3, [r3, #12]
 811c87c:	627b      	str	r3, [r7, #36]	@ 0x24
 811c87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c880:	2b00      	cmp	r3, #0
 811c882:	d1a7      	bne.n	811c7d4 <udp_input+0x90>
 811c884:	e000      	b.n	811c888 <udp_input+0x144>
        break;
 811c886:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 811c888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c88a:	2b00      	cmp	r3, #0
 811c88c:	d101      	bne.n	811c892 <udp_input+0x14e>
    pcb = uncon_pcb;
 811c88e:	69fb      	ldr	r3, [r7, #28]
 811c890:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 811c892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c894:	2b00      	cmp	r3, #0
 811c896:	d002      	beq.n	811c89e <udp_input+0x15a>
    for_us = 1;
 811c898:	2301      	movs	r3, #1
 811c89a:	76fb      	strb	r3, [r7, #27]
 811c89c:	e00a      	b.n	811c8b4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 811c89e:	683b      	ldr	r3, [r7, #0]
 811c8a0:	3304      	adds	r3, #4
 811c8a2:	681a      	ldr	r2, [r3, #0]
 811c8a4:	4b2d      	ldr	r3, [pc, #180]	@ (811c95c <udp_input+0x218>)
 811c8a6:	695b      	ldr	r3, [r3, #20]
 811c8a8:	429a      	cmp	r2, r3
 811c8aa:	bf0c      	ite	eq
 811c8ac:	2301      	moveq	r3, #1
 811c8ae:	2300      	movne	r3, #0
 811c8b0:	b2db      	uxtb	r3, r3
 811c8b2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 811c8b4:	7efb      	ldrb	r3, [r7, #27]
 811c8b6:	2b00      	cmp	r3, #0
 811c8b8:	d041      	beq.n	811c93e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 811c8ba:	2108      	movs	r1, #8
 811c8bc:	6878      	ldr	r0, [r7, #4]
 811c8be:	f7f9 fc71 	bl	81161a4 <pbuf_remove_header>
 811c8c2:	4603      	mov	r3, r0
 811c8c4:	2b00      	cmp	r3, #0
 811c8c6:	d00a      	beq.n	811c8de <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 811c8c8:	4b20      	ldr	r3, [pc, #128]	@ (811c94c <udp_input+0x208>)
 811c8ca:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 811c8ce:	4925      	ldr	r1, [pc, #148]	@ (811c964 <udp_input+0x220>)
 811c8d0:	4820      	ldr	r0, [pc, #128]	@ (811c954 <udp_input+0x210>)
 811c8d2:	f001 fa83 	bl	811dddc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 811c8d6:	6878      	ldr	r0, [r7, #4]
 811c8d8:	f7f9 fcea 	bl	81162b0 <pbuf_free>
      goto end;
 811c8dc:	e032      	b.n	811c944 <udp_input+0x200>
    }

    if (pcb != NULL) {
 811c8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c8e0:	2b00      	cmp	r3, #0
 811c8e2:	d012      	beq.n	811c90a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 811c8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c8e6:	699b      	ldr	r3, [r3, #24]
 811c8e8:	2b00      	cmp	r3, #0
 811c8ea:	d00a      	beq.n	811c902 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 811c8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c8ee:	699c      	ldr	r4, [r3, #24]
 811c8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811c8f2:	69d8      	ldr	r0, [r3, #28]
 811c8f4:	8a3b      	ldrh	r3, [r7, #16]
 811c8f6:	9300      	str	r3, [sp, #0]
 811c8f8:	4b1b      	ldr	r3, [pc, #108]	@ (811c968 <udp_input+0x224>)
 811c8fa:	687a      	ldr	r2, [r7, #4]
 811c8fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811c8fe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 811c900:	e021      	b.n	811c946 <udp_input+0x202>
        pbuf_free(p);
 811c902:	6878      	ldr	r0, [r7, #4]
 811c904:	f7f9 fcd4 	bl	81162b0 <pbuf_free>
        goto end;
 811c908:	e01c      	b.n	811c944 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 811c90a:	7cfb      	ldrb	r3, [r7, #19]
 811c90c:	2b00      	cmp	r3, #0
 811c90e:	d112      	bne.n	811c936 <udp_input+0x1f2>
 811c910:	4b12      	ldr	r3, [pc, #72]	@ (811c95c <udp_input+0x218>)
 811c912:	695b      	ldr	r3, [r3, #20]
 811c914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 811c918:	2be0      	cmp	r3, #224	@ 0xe0
 811c91a:	d00c      	beq.n	811c936 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 811c91c:	4b0f      	ldr	r3, [pc, #60]	@ (811c95c <udp_input+0x218>)
 811c91e:	899b      	ldrh	r3, [r3, #12]
 811c920:	3308      	adds	r3, #8
 811c922:	b29b      	uxth	r3, r3
 811c924:	b21b      	sxth	r3, r3
 811c926:	4619      	mov	r1, r3
 811c928:	6878      	ldr	r0, [r7, #4]
 811c92a:	f7f9 fcae 	bl	811628a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 811c92e:	2103      	movs	r1, #3
 811c930:	6878      	ldr	r0, [r7, #4]
 811c932:	f7f6 fced 	bl	8113310 <icmp_dest_unreach>
      pbuf_free(p);
 811c936:	6878      	ldr	r0, [r7, #4]
 811c938:	f7f9 fcba 	bl	81162b0 <pbuf_free>
  return;
 811c93c:	e003      	b.n	811c946 <udp_input+0x202>
    pbuf_free(p);
 811c93e:	6878      	ldr	r0, [r7, #4]
 811c940:	f7f9 fcb6 	bl	81162b0 <pbuf_free>
  return;
 811c944:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 811c946:	372c      	adds	r7, #44	@ 0x2c
 811c948:	46bd      	mov	sp, r7
 811c94a:	bd90      	pop	{r4, r7, pc}
 811c94c:	08122058 	.word	0x08122058
 811c950:	0812213c 	.word	0x0812213c
 811c954:	081220ec 	.word	0x081220ec
 811c958:	08122154 	.word	0x08122154
 811c95c:	1000b29c 	.word	0x1000b29c
 811c960:	10012194 	.word	0x10012194
 811c964:	08122170 	.word	0x08122170
 811c968:	1000b2ac 	.word	0x1000b2ac

0811c96c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 811c96c:	b580      	push	{r7, lr}
 811c96e:	b088      	sub	sp, #32
 811c970:	af02      	add	r7, sp, #8
 811c972:	60f8      	str	r0, [r7, #12]
 811c974:	60b9      	str	r1, [r7, #8]
 811c976:	607a      	str	r2, [r7, #4]
 811c978:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 811c97a:	68fb      	ldr	r3, [r7, #12]
 811c97c:	2b00      	cmp	r3, #0
 811c97e:	d109      	bne.n	811c994 <udp_sendto+0x28>
 811c980:	4b23      	ldr	r3, [pc, #140]	@ (811ca10 <udp_sendto+0xa4>)
 811c982:	f44f 7206 	mov.w	r2, #536	@ 0x218
 811c986:	4923      	ldr	r1, [pc, #140]	@ (811ca14 <udp_sendto+0xa8>)
 811c988:	4823      	ldr	r0, [pc, #140]	@ (811ca18 <udp_sendto+0xac>)
 811c98a:	f001 fa27 	bl	811dddc <iprintf>
 811c98e:	f06f 030f 	mvn.w	r3, #15
 811c992:	e038      	b.n	811ca06 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 811c994:	68bb      	ldr	r3, [r7, #8]
 811c996:	2b00      	cmp	r3, #0
 811c998:	d109      	bne.n	811c9ae <udp_sendto+0x42>
 811c99a:	4b1d      	ldr	r3, [pc, #116]	@ (811ca10 <udp_sendto+0xa4>)
 811c99c:	f240 2219 	movw	r2, #537	@ 0x219
 811c9a0:	491e      	ldr	r1, [pc, #120]	@ (811ca1c <udp_sendto+0xb0>)
 811c9a2:	481d      	ldr	r0, [pc, #116]	@ (811ca18 <udp_sendto+0xac>)
 811c9a4:	f001 fa1a 	bl	811dddc <iprintf>
 811c9a8:	f06f 030f 	mvn.w	r3, #15
 811c9ac:	e02b      	b.n	811ca06 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 811c9ae:	687b      	ldr	r3, [r7, #4]
 811c9b0:	2b00      	cmp	r3, #0
 811c9b2:	d109      	bne.n	811c9c8 <udp_sendto+0x5c>
 811c9b4:	4b16      	ldr	r3, [pc, #88]	@ (811ca10 <udp_sendto+0xa4>)
 811c9b6:	f240 221a 	movw	r2, #538	@ 0x21a
 811c9ba:	4919      	ldr	r1, [pc, #100]	@ (811ca20 <udp_sendto+0xb4>)
 811c9bc:	4816      	ldr	r0, [pc, #88]	@ (811ca18 <udp_sendto+0xac>)
 811c9be:	f001 fa0d 	bl	811dddc <iprintf>
 811c9c2:	f06f 030f 	mvn.w	r3, #15
 811c9c6:	e01e      	b.n	811ca06 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 811c9c8:	68fb      	ldr	r3, [r7, #12]
 811c9ca:	7a1b      	ldrb	r3, [r3, #8]
 811c9cc:	2b00      	cmp	r3, #0
 811c9ce:	d006      	beq.n	811c9de <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 811c9d0:	68fb      	ldr	r3, [r7, #12]
 811c9d2:	7a1b      	ldrb	r3, [r3, #8]
 811c9d4:	4618      	mov	r0, r3
 811c9d6:	f7f9 f8dd 	bl	8115b94 <netif_get_by_index>
 811c9da:	6178      	str	r0, [r7, #20]
 811c9dc:	e003      	b.n	811c9e6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 811c9de:	6878      	ldr	r0, [r7, #4]
 811c9e0:	f7f6 fdfe 	bl	81135e0 <ip4_route>
 811c9e4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 811c9e6:	697b      	ldr	r3, [r7, #20]
 811c9e8:	2b00      	cmp	r3, #0
 811c9ea:	d102      	bne.n	811c9f2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 811c9ec:	f06f 0303 	mvn.w	r3, #3
 811c9f0:	e009      	b.n	811ca06 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 811c9f2:	887a      	ldrh	r2, [r7, #2]
 811c9f4:	697b      	ldr	r3, [r7, #20]
 811c9f6:	9300      	str	r3, [sp, #0]
 811c9f8:	4613      	mov	r3, r2
 811c9fa:	687a      	ldr	r2, [r7, #4]
 811c9fc:	68b9      	ldr	r1, [r7, #8]
 811c9fe:	68f8      	ldr	r0, [r7, #12]
 811ca00:	f000 f810 	bl	811ca24 <udp_sendto_if>
 811ca04:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 811ca06:	4618      	mov	r0, r3
 811ca08:	3718      	adds	r7, #24
 811ca0a:	46bd      	mov	sp, r7
 811ca0c:	bd80      	pop	{r7, pc}
 811ca0e:	bf00      	nop
 811ca10:	08122058 	.word	0x08122058
 811ca14:	081221bc 	.word	0x081221bc
 811ca18:	081220ec 	.word	0x081220ec
 811ca1c:	081221d4 	.word	0x081221d4
 811ca20:	081221f0 	.word	0x081221f0

0811ca24 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 811ca24:	b580      	push	{r7, lr}
 811ca26:	b088      	sub	sp, #32
 811ca28:	af02      	add	r7, sp, #8
 811ca2a:	60f8      	str	r0, [r7, #12]
 811ca2c:	60b9      	str	r1, [r7, #8]
 811ca2e:	607a      	str	r2, [r7, #4]
 811ca30:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 811ca32:	68fb      	ldr	r3, [r7, #12]
 811ca34:	2b00      	cmp	r3, #0
 811ca36:	d109      	bne.n	811ca4c <udp_sendto_if+0x28>
 811ca38:	4b2e      	ldr	r3, [pc, #184]	@ (811caf4 <udp_sendto_if+0xd0>)
 811ca3a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811ca3e:	492e      	ldr	r1, [pc, #184]	@ (811caf8 <udp_sendto_if+0xd4>)
 811ca40:	482e      	ldr	r0, [pc, #184]	@ (811cafc <udp_sendto_if+0xd8>)
 811ca42:	f001 f9cb 	bl	811dddc <iprintf>
 811ca46:	f06f 030f 	mvn.w	r3, #15
 811ca4a:	e04f      	b.n	811caec <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 811ca4c:	68bb      	ldr	r3, [r7, #8]
 811ca4e:	2b00      	cmp	r3, #0
 811ca50:	d109      	bne.n	811ca66 <udp_sendto_if+0x42>
 811ca52:	4b28      	ldr	r3, [pc, #160]	@ (811caf4 <udp_sendto_if+0xd0>)
 811ca54:	f240 2281 	movw	r2, #641	@ 0x281
 811ca58:	4929      	ldr	r1, [pc, #164]	@ (811cb00 <udp_sendto_if+0xdc>)
 811ca5a:	4828      	ldr	r0, [pc, #160]	@ (811cafc <udp_sendto_if+0xd8>)
 811ca5c:	f001 f9be 	bl	811dddc <iprintf>
 811ca60:	f06f 030f 	mvn.w	r3, #15
 811ca64:	e042      	b.n	811caec <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 811ca66:	687b      	ldr	r3, [r7, #4]
 811ca68:	2b00      	cmp	r3, #0
 811ca6a:	d109      	bne.n	811ca80 <udp_sendto_if+0x5c>
 811ca6c:	4b21      	ldr	r3, [pc, #132]	@ (811caf4 <udp_sendto_if+0xd0>)
 811ca6e:	f240 2282 	movw	r2, #642	@ 0x282
 811ca72:	4924      	ldr	r1, [pc, #144]	@ (811cb04 <udp_sendto_if+0xe0>)
 811ca74:	4821      	ldr	r0, [pc, #132]	@ (811cafc <udp_sendto_if+0xd8>)
 811ca76:	f001 f9b1 	bl	811dddc <iprintf>
 811ca7a:	f06f 030f 	mvn.w	r3, #15
 811ca7e:	e035      	b.n	811caec <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 811ca80:	6a3b      	ldr	r3, [r7, #32]
 811ca82:	2b00      	cmp	r3, #0
 811ca84:	d109      	bne.n	811ca9a <udp_sendto_if+0x76>
 811ca86:	4b1b      	ldr	r3, [pc, #108]	@ (811caf4 <udp_sendto_if+0xd0>)
 811ca88:	f240 2283 	movw	r2, #643	@ 0x283
 811ca8c:	491e      	ldr	r1, [pc, #120]	@ (811cb08 <udp_sendto_if+0xe4>)
 811ca8e:	481b      	ldr	r0, [pc, #108]	@ (811cafc <udp_sendto_if+0xd8>)
 811ca90:	f001 f9a4 	bl	811dddc <iprintf>
 811ca94:	f06f 030f 	mvn.w	r3, #15
 811ca98:	e028      	b.n	811caec <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 811ca9a:	68fb      	ldr	r3, [r7, #12]
 811ca9c:	2b00      	cmp	r3, #0
 811ca9e:	d009      	beq.n	811cab4 <udp_sendto_if+0x90>
 811caa0:	68fb      	ldr	r3, [r7, #12]
 811caa2:	681b      	ldr	r3, [r3, #0]
 811caa4:	2b00      	cmp	r3, #0
 811caa6:	d005      	beq.n	811cab4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 811caa8:	68fb      	ldr	r3, [r7, #12]
 811caaa:	681b      	ldr	r3, [r3, #0]
 811caac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 811cab0:	2be0      	cmp	r3, #224	@ 0xe0
 811cab2:	d103      	bne.n	811cabc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 811cab4:	6a3b      	ldr	r3, [r7, #32]
 811cab6:	3304      	adds	r3, #4
 811cab8:	617b      	str	r3, [r7, #20]
 811caba:	e00b      	b.n	811cad4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 811cabc:	68fb      	ldr	r3, [r7, #12]
 811cabe:	681a      	ldr	r2, [r3, #0]
 811cac0:	6a3b      	ldr	r3, [r7, #32]
 811cac2:	3304      	adds	r3, #4
 811cac4:	681b      	ldr	r3, [r3, #0]
 811cac6:	429a      	cmp	r2, r3
 811cac8:	d002      	beq.n	811cad0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 811caca:	f06f 0303 	mvn.w	r3, #3
 811cace:	e00d      	b.n	811caec <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 811cad0:	68fb      	ldr	r3, [r7, #12]
 811cad2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 811cad4:	887a      	ldrh	r2, [r7, #2]
 811cad6:	697b      	ldr	r3, [r7, #20]
 811cad8:	9301      	str	r3, [sp, #4]
 811cada:	6a3b      	ldr	r3, [r7, #32]
 811cadc:	9300      	str	r3, [sp, #0]
 811cade:	4613      	mov	r3, r2
 811cae0:	687a      	ldr	r2, [r7, #4]
 811cae2:	68b9      	ldr	r1, [r7, #8]
 811cae4:	68f8      	ldr	r0, [r7, #12]
 811cae6:	f000 f811 	bl	811cb0c <udp_sendto_if_src>
 811caea:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 811caec:	4618      	mov	r0, r3
 811caee:	3718      	adds	r7, #24
 811caf0:	46bd      	mov	sp, r7
 811caf2:	bd80      	pop	{r7, pc}
 811caf4:	08122058 	.word	0x08122058
 811caf8:	0812220c 	.word	0x0812220c
 811cafc:	081220ec 	.word	0x081220ec
 811cb00:	08122228 	.word	0x08122228
 811cb04:	08122244 	.word	0x08122244
 811cb08:	08122264 	.word	0x08122264

0811cb0c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 811cb0c:	b580      	push	{r7, lr}
 811cb0e:	b08c      	sub	sp, #48	@ 0x30
 811cb10:	af04      	add	r7, sp, #16
 811cb12:	60f8      	str	r0, [r7, #12]
 811cb14:	60b9      	str	r1, [r7, #8]
 811cb16:	607a      	str	r2, [r7, #4]
 811cb18:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 811cb1a:	68fb      	ldr	r3, [r7, #12]
 811cb1c:	2b00      	cmp	r3, #0
 811cb1e:	d109      	bne.n	811cb34 <udp_sendto_if_src+0x28>
 811cb20:	4b65      	ldr	r3, [pc, #404]	@ (811ccb8 <udp_sendto_if_src+0x1ac>)
 811cb22:	f240 22d1 	movw	r2, #721	@ 0x2d1
 811cb26:	4965      	ldr	r1, [pc, #404]	@ (811ccbc <udp_sendto_if_src+0x1b0>)
 811cb28:	4865      	ldr	r0, [pc, #404]	@ (811ccc0 <udp_sendto_if_src+0x1b4>)
 811cb2a:	f001 f957 	bl	811dddc <iprintf>
 811cb2e:	f06f 030f 	mvn.w	r3, #15
 811cb32:	e0bc      	b.n	811ccae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 811cb34:	68bb      	ldr	r3, [r7, #8]
 811cb36:	2b00      	cmp	r3, #0
 811cb38:	d109      	bne.n	811cb4e <udp_sendto_if_src+0x42>
 811cb3a:	4b5f      	ldr	r3, [pc, #380]	@ (811ccb8 <udp_sendto_if_src+0x1ac>)
 811cb3c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 811cb40:	4960      	ldr	r1, [pc, #384]	@ (811ccc4 <udp_sendto_if_src+0x1b8>)
 811cb42:	485f      	ldr	r0, [pc, #380]	@ (811ccc0 <udp_sendto_if_src+0x1b4>)
 811cb44:	f001 f94a 	bl	811dddc <iprintf>
 811cb48:	f06f 030f 	mvn.w	r3, #15
 811cb4c:	e0af      	b.n	811ccae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 811cb4e:	687b      	ldr	r3, [r7, #4]
 811cb50:	2b00      	cmp	r3, #0
 811cb52:	d109      	bne.n	811cb68 <udp_sendto_if_src+0x5c>
 811cb54:	4b58      	ldr	r3, [pc, #352]	@ (811ccb8 <udp_sendto_if_src+0x1ac>)
 811cb56:	f240 22d3 	movw	r2, #723	@ 0x2d3
 811cb5a:	495b      	ldr	r1, [pc, #364]	@ (811ccc8 <udp_sendto_if_src+0x1bc>)
 811cb5c:	4858      	ldr	r0, [pc, #352]	@ (811ccc0 <udp_sendto_if_src+0x1b4>)
 811cb5e:	f001 f93d 	bl	811dddc <iprintf>
 811cb62:	f06f 030f 	mvn.w	r3, #15
 811cb66:	e0a2      	b.n	811ccae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 811cb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811cb6a:	2b00      	cmp	r3, #0
 811cb6c:	d109      	bne.n	811cb82 <udp_sendto_if_src+0x76>
 811cb6e:	4b52      	ldr	r3, [pc, #328]	@ (811ccb8 <udp_sendto_if_src+0x1ac>)
 811cb70:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 811cb74:	4955      	ldr	r1, [pc, #340]	@ (811cccc <udp_sendto_if_src+0x1c0>)
 811cb76:	4852      	ldr	r0, [pc, #328]	@ (811ccc0 <udp_sendto_if_src+0x1b4>)
 811cb78:	f001 f930 	bl	811dddc <iprintf>
 811cb7c:	f06f 030f 	mvn.w	r3, #15
 811cb80:	e095      	b.n	811ccae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 811cb82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811cb84:	2b00      	cmp	r3, #0
 811cb86:	d109      	bne.n	811cb9c <udp_sendto_if_src+0x90>
 811cb88:	4b4b      	ldr	r3, [pc, #300]	@ (811ccb8 <udp_sendto_if_src+0x1ac>)
 811cb8a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 811cb8e:	4950      	ldr	r1, [pc, #320]	@ (811ccd0 <udp_sendto_if_src+0x1c4>)
 811cb90:	484b      	ldr	r0, [pc, #300]	@ (811ccc0 <udp_sendto_if_src+0x1b4>)
 811cb92:	f001 f923 	bl	811dddc <iprintf>
 811cb96:	f06f 030f 	mvn.w	r3, #15
 811cb9a:	e088      	b.n	811ccae <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 811cb9c:	68fb      	ldr	r3, [r7, #12]
 811cb9e:	8a5b      	ldrh	r3, [r3, #18]
 811cba0:	2b00      	cmp	r3, #0
 811cba2:	d10f      	bne.n	811cbc4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 811cba4:	68f9      	ldr	r1, [r7, #12]
 811cba6:	68fb      	ldr	r3, [r7, #12]
 811cba8:	8a5b      	ldrh	r3, [r3, #18]
 811cbaa:	461a      	mov	r2, r3
 811cbac:	68f8      	ldr	r0, [r7, #12]
 811cbae:	f000 f893 	bl	811ccd8 <udp_bind>
 811cbb2:	4603      	mov	r3, r0
 811cbb4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 811cbb6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 811cbba:	2b00      	cmp	r3, #0
 811cbbc:	d002      	beq.n	811cbc4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 811cbbe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 811cbc2:	e074      	b.n	811ccae <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 811cbc4:	68bb      	ldr	r3, [r7, #8]
 811cbc6:	891b      	ldrh	r3, [r3, #8]
 811cbc8:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 811cbcc:	4293      	cmp	r3, r2
 811cbce:	d902      	bls.n	811cbd6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 811cbd0:	f04f 33ff 	mov.w	r3, #4294967295
 811cbd4:	e06b      	b.n	811ccae <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 811cbd6:	2108      	movs	r1, #8
 811cbd8:	68b8      	ldr	r0, [r7, #8]
 811cbda:	f7f9 fad3 	bl	8116184 <pbuf_add_header>
 811cbde:	4603      	mov	r3, r0
 811cbe0:	2b00      	cmp	r3, #0
 811cbe2:	d015      	beq.n	811cc10 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 811cbe4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811cbe8:	2108      	movs	r1, #8
 811cbea:	2022      	movs	r0, #34	@ 0x22
 811cbec:	f7f9 f87c 	bl	8115ce8 <pbuf_alloc>
 811cbf0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 811cbf2:	69fb      	ldr	r3, [r7, #28]
 811cbf4:	2b00      	cmp	r3, #0
 811cbf6:	d102      	bne.n	811cbfe <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 811cbf8:	f04f 33ff 	mov.w	r3, #4294967295
 811cbfc:	e057      	b.n	811ccae <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 811cbfe:	68bb      	ldr	r3, [r7, #8]
 811cc00:	891b      	ldrh	r3, [r3, #8]
 811cc02:	2b00      	cmp	r3, #0
 811cc04:	d006      	beq.n	811cc14 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 811cc06:	68b9      	ldr	r1, [r7, #8]
 811cc08:	69f8      	ldr	r0, [r7, #28]
 811cc0a:	f7f9 fc75 	bl	81164f8 <pbuf_chain>
 811cc0e:	e001      	b.n	811cc14 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 811cc10:	68bb      	ldr	r3, [r7, #8]
 811cc12:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 811cc14:	69fb      	ldr	r3, [r7, #28]
 811cc16:	895b      	ldrh	r3, [r3, #10]
 811cc18:	2b07      	cmp	r3, #7
 811cc1a:	d806      	bhi.n	811cc2a <udp_sendto_if_src+0x11e>
 811cc1c:	4b26      	ldr	r3, [pc, #152]	@ (811ccb8 <udp_sendto_if_src+0x1ac>)
 811cc1e:	f240 320d 	movw	r2, #781	@ 0x30d
 811cc22:	492c      	ldr	r1, [pc, #176]	@ (811ccd4 <udp_sendto_if_src+0x1c8>)
 811cc24:	4826      	ldr	r0, [pc, #152]	@ (811ccc0 <udp_sendto_if_src+0x1b4>)
 811cc26:	f001 f8d9 	bl	811dddc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 811cc2a:	69fb      	ldr	r3, [r7, #28]
 811cc2c:	685b      	ldr	r3, [r3, #4]
 811cc2e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 811cc30:	68fb      	ldr	r3, [r7, #12]
 811cc32:	8a5b      	ldrh	r3, [r3, #18]
 811cc34:	4618      	mov	r0, r3
 811cc36:	f7f5 f931 	bl	8111e9c <lwip_htons>
 811cc3a:	4603      	mov	r3, r0
 811cc3c:	461a      	mov	r2, r3
 811cc3e:	697b      	ldr	r3, [r7, #20]
 811cc40:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 811cc42:	887b      	ldrh	r3, [r7, #2]
 811cc44:	4618      	mov	r0, r3
 811cc46:	f7f5 f929 	bl	8111e9c <lwip_htons>
 811cc4a:	4603      	mov	r3, r0
 811cc4c:	461a      	mov	r2, r3
 811cc4e:	697b      	ldr	r3, [r7, #20]
 811cc50:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 811cc52:	697b      	ldr	r3, [r7, #20]
 811cc54:	2200      	movs	r2, #0
 811cc56:	719a      	strb	r2, [r3, #6]
 811cc58:	2200      	movs	r2, #0
 811cc5a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 811cc5c:	69fb      	ldr	r3, [r7, #28]
 811cc5e:	891b      	ldrh	r3, [r3, #8]
 811cc60:	4618      	mov	r0, r3
 811cc62:	f7f5 f91b 	bl	8111e9c <lwip_htons>
 811cc66:	4603      	mov	r3, r0
 811cc68:	461a      	mov	r2, r3
 811cc6a:	697b      	ldr	r3, [r7, #20]
 811cc6c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 811cc6e:	2311      	movs	r3, #17
 811cc70:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 811cc72:	68fb      	ldr	r3, [r7, #12]
 811cc74:	7adb      	ldrb	r3, [r3, #11]
 811cc76:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 811cc78:	68fb      	ldr	r3, [r7, #12]
 811cc7a:	7a9b      	ldrb	r3, [r3, #10]
 811cc7c:	7cb9      	ldrb	r1, [r7, #18]
 811cc7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811cc80:	9202      	str	r2, [sp, #8]
 811cc82:	7cfa      	ldrb	r2, [r7, #19]
 811cc84:	9201      	str	r2, [sp, #4]
 811cc86:	9300      	str	r3, [sp, #0]
 811cc88:	460b      	mov	r3, r1
 811cc8a:	687a      	ldr	r2, [r7, #4]
 811cc8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 811cc8e:	69f8      	ldr	r0, [r7, #28]
 811cc90:	f7f6 fe8e 	bl	81139b0 <ip4_output_if_src>
 811cc94:	4603      	mov	r3, r0
 811cc96:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 811cc98:	69fa      	ldr	r2, [r7, #28]
 811cc9a:	68bb      	ldr	r3, [r7, #8]
 811cc9c:	429a      	cmp	r2, r3
 811cc9e:	d004      	beq.n	811ccaa <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 811cca0:	69f8      	ldr	r0, [r7, #28]
 811cca2:	f7f9 fb05 	bl	81162b0 <pbuf_free>
    q = NULL;
 811cca6:	2300      	movs	r3, #0
 811cca8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 811ccaa:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 811ccae:	4618      	mov	r0, r3
 811ccb0:	3720      	adds	r7, #32
 811ccb2:	46bd      	mov	sp, r7
 811ccb4:	bd80      	pop	{r7, pc}
 811ccb6:	bf00      	nop
 811ccb8:	08122058 	.word	0x08122058
 811ccbc:	08122284 	.word	0x08122284
 811ccc0:	081220ec 	.word	0x081220ec
 811ccc4:	081222a4 	.word	0x081222a4
 811ccc8:	081222c4 	.word	0x081222c4
 811cccc:	081222e8 	.word	0x081222e8
 811ccd0:	0812230c 	.word	0x0812230c
 811ccd4:	08122330 	.word	0x08122330

0811ccd8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 811ccd8:	b580      	push	{r7, lr}
 811ccda:	b086      	sub	sp, #24
 811ccdc:	af00      	add	r7, sp, #0
 811ccde:	60f8      	str	r0, [r7, #12]
 811cce0:	60b9      	str	r1, [r7, #8]
 811cce2:	4613      	mov	r3, r2
 811cce4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 811cce6:	68bb      	ldr	r3, [r7, #8]
 811cce8:	2b00      	cmp	r3, #0
 811ccea:	d101      	bne.n	811ccf0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 811ccec:	4b39      	ldr	r3, [pc, #228]	@ (811cdd4 <udp_bind+0xfc>)
 811ccee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 811ccf0:	68fb      	ldr	r3, [r7, #12]
 811ccf2:	2b00      	cmp	r3, #0
 811ccf4:	d109      	bne.n	811cd0a <udp_bind+0x32>
 811ccf6:	4b38      	ldr	r3, [pc, #224]	@ (811cdd8 <udp_bind+0x100>)
 811ccf8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 811ccfc:	4937      	ldr	r1, [pc, #220]	@ (811cddc <udp_bind+0x104>)
 811ccfe:	4838      	ldr	r0, [pc, #224]	@ (811cde0 <udp_bind+0x108>)
 811cd00:	f001 f86c 	bl	811dddc <iprintf>
 811cd04:	f06f 030f 	mvn.w	r3, #15
 811cd08:	e060      	b.n	811cdcc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 811cd0a:	2300      	movs	r3, #0
 811cd0c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 811cd0e:	4b35      	ldr	r3, [pc, #212]	@ (811cde4 <udp_bind+0x10c>)
 811cd10:	681b      	ldr	r3, [r3, #0]
 811cd12:	617b      	str	r3, [r7, #20]
 811cd14:	e009      	b.n	811cd2a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 811cd16:	68fa      	ldr	r2, [r7, #12]
 811cd18:	697b      	ldr	r3, [r7, #20]
 811cd1a:	429a      	cmp	r2, r3
 811cd1c:	d102      	bne.n	811cd24 <udp_bind+0x4c>
      rebind = 1;
 811cd1e:	2301      	movs	r3, #1
 811cd20:	74fb      	strb	r3, [r7, #19]
      break;
 811cd22:	e005      	b.n	811cd30 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 811cd24:	697b      	ldr	r3, [r7, #20]
 811cd26:	68db      	ldr	r3, [r3, #12]
 811cd28:	617b      	str	r3, [r7, #20]
 811cd2a:	697b      	ldr	r3, [r7, #20]
 811cd2c:	2b00      	cmp	r3, #0
 811cd2e:	d1f2      	bne.n	811cd16 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 811cd30:	88fb      	ldrh	r3, [r7, #6]
 811cd32:	2b00      	cmp	r3, #0
 811cd34:	d109      	bne.n	811cd4a <udp_bind+0x72>
    port = udp_new_port();
 811cd36:	f7ff fc69 	bl	811c60c <udp_new_port>
 811cd3a:	4603      	mov	r3, r0
 811cd3c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 811cd3e:	88fb      	ldrh	r3, [r7, #6]
 811cd40:	2b00      	cmp	r3, #0
 811cd42:	d12c      	bne.n	811cd9e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 811cd44:	f06f 0307 	mvn.w	r3, #7
 811cd48:	e040      	b.n	811cdcc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 811cd4a:	4b26      	ldr	r3, [pc, #152]	@ (811cde4 <udp_bind+0x10c>)
 811cd4c:	681b      	ldr	r3, [r3, #0]
 811cd4e:	617b      	str	r3, [r7, #20]
 811cd50:	e022      	b.n	811cd98 <udp_bind+0xc0>
      if (pcb != ipcb) {
 811cd52:	68fa      	ldr	r2, [r7, #12]
 811cd54:	697b      	ldr	r3, [r7, #20]
 811cd56:	429a      	cmp	r2, r3
 811cd58:	d01b      	beq.n	811cd92 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 811cd5a:	697b      	ldr	r3, [r7, #20]
 811cd5c:	8a5b      	ldrh	r3, [r3, #18]
 811cd5e:	88fa      	ldrh	r2, [r7, #6]
 811cd60:	429a      	cmp	r2, r3
 811cd62:	d116      	bne.n	811cd92 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 811cd64:	697b      	ldr	r3, [r7, #20]
 811cd66:	681a      	ldr	r2, [r3, #0]
 811cd68:	68bb      	ldr	r3, [r7, #8]
 811cd6a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 811cd6c:	429a      	cmp	r2, r3
 811cd6e:	d00d      	beq.n	811cd8c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 811cd70:	68bb      	ldr	r3, [r7, #8]
 811cd72:	2b00      	cmp	r3, #0
 811cd74:	d00a      	beq.n	811cd8c <udp_bind+0xb4>
 811cd76:	68bb      	ldr	r3, [r7, #8]
 811cd78:	681b      	ldr	r3, [r3, #0]
 811cd7a:	2b00      	cmp	r3, #0
 811cd7c:	d006      	beq.n	811cd8c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 811cd7e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 811cd80:	2b00      	cmp	r3, #0
 811cd82:	d003      	beq.n	811cd8c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 811cd84:	697b      	ldr	r3, [r7, #20]
 811cd86:	681b      	ldr	r3, [r3, #0]
 811cd88:	2b00      	cmp	r3, #0
 811cd8a:	d102      	bne.n	811cd92 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 811cd8c:	f06f 0307 	mvn.w	r3, #7
 811cd90:	e01c      	b.n	811cdcc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 811cd92:	697b      	ldr	r3, [r7, #20]
 811cd94:	68db      	ldr	r3, [r3, #12]
 811cd96:	617b      	str	r3, [r7, #20]
 811cd98:	697b      	ldr	r3, [r7, #20]
 811cd9a:	2b00      	cmp	r3, #0
 811cd9c:	d1d9      	bne.n	811cd52 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 811cd9e:	68bb      	ldr	r3, [r7, #8]
 811cda0:	2b00      	cmp	r3, #0
 811cda2:	d002      	beq.n	811cdaa <udp_bind+0xd2>
 811cda4:	68bb      	ldr	r3, [r7, #8]
 811cda6:	681b      	ldr	r3, [r3, #0]
 811cda8:	e000      	b.n	811cdac <udp_bind+0xd4>
 811cdaa:	2300      	movs	r3, #0
 811cdac:	68fa      	ldr	r2, [r7, #12]
 811cdae:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 811cdb0:	68fb      	ldr	r3, [r7, #12]
 811cdb2:	88fa      	ldrh	r2, [r7, #6]
 811cdb4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 811cdb6:	7cfb      	ldrb	r3, [r7, #19]
 811cdb8:	2b00      	cmp	r3, #0
 811cdba:	d106      	bne.n	811cdca <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 811cdbc:	4b09      	ldr	r3, [pc, #36]	@ (811cde4 <udp_bind+0x10c>)
 811cdbe:	681a      	ldr	r2, [r3, #0]
 811cdc0:	68fb      	ldr	r3, [r7, #12]
 811cdc2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 811cdc4:	4a07      	ldr	r2, [pc, #28]	@ (811cde4 <udp_bind+0x10c>)
 811cdc6:	68fb      	ldr	r3, [r7, #12]
 811cdc8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 811cdca:	2300      	movs	r3, #0
}
 811cdcc:	4618      	mov	r0, r3
 811cdce:	3718      	adds	r7, #24
 811cdd0:	46bd      	mov	sp, r7
 811cdd2:	bd80      	pop	{r7, pc}
 811cdd4:	081224d8 	.word	0x081224d8
 811cdd8:	08122058 	.word	0x08122058
 811cddc:	08122360 	.word	0x08122360
 811cde0:	081220ec 	.word	0x081220ec
 811cde4:	10012194 	.word	0x10012194

0811cde8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 811cde8:	b580      	push	{r7, lr}
 811cdea:	b084      	sub	sp, #16
 811cdec:	af00      	add	r7, sp, #0
 811cdee:	60f8      	str	r0, [r7, #12]
 811cdf0:	60b9      	str	r1, [r7, #8]
 811cdf2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 811cdf4:	68fb      	ldr	r3, [r7, #12]
 811cdf6:	2b00      	cmp	r3, #0
 811cdf8:	d107      	bne.n	811ce0a <udp_recv+0x22>
 811cdfa:	4b08      	ldr	r3, [pc, #32]	@ (811ce1c <udp_recv+0x34>)
 811cdfc:	f240 428a 	movw	r2, #1162	@ 0x48a
 811ce00:	4907      	ldr	r1, [pc, #28]	@ (811ce20 <udp_recv+0x38>)
 811ce02:	4808      	ldr	r0, [pc, #32]	@ (811ce24 <udp_recv+0x3c>)
 811ce04:	f000 ffea 	bl	811dddc <iprintf>
 811ce08:	e005      	b.n	811ce16 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 811ce0a:	68fb      	ldr	r3, [r7, #12]
 811ce0c:	68ba      	ldr	r2, [r7, #8]
 811ce0e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 811ce10:	68fb      	ldr	r3, [r7, #12]
 811ce12:	687a      	ldr	r2, [r7, #4]
 811ce14:	61da      	str	r2, [r3, #28]
}
 811ce16:	3710      	adds	r7, #16
 811ce18:	46bd      	mov	sp, r7
 811ce1a:	bd80      	pop	{r7, pc}
 811ce1c:	08122058 	.word	0x08122058
 811ce20:	081223cc 	.word	0x081223cc
 811ce24:	081220ec 	.word	0x081220ec

0811ce28 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 811ce28:	b580      	push	{r7, lr}
 811ce2a:	b084      	sub	sp, #16
 811ce2c:	af00      	add	r7, sp, #0
 811ce2e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 811ce30:	687b      	ldr	r3, [r7, #4]
 811ce32:	2b00      	cmp	r3, #0
 811ce34:	d107      	bne.n	811ce46 <udp_remove+0x1e>
 811ce36:	4b19      	ldr	r3, [pc, #100]	@ (811ce9c <udp_remove+0x74>)
 811ce38:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 811ce3c:	4918      	ldr	r1, [pc, #96]	@ (811cea0 <udp_remove+0x78>)
 811ce3e:	4819      	ldr	r0, [pc, #100]	@ (811cea4 <udp_remove+0x7c>)
 811ce40:	f000 ffcc 	bl	811dddc <iprintf>
 811ce44:	e026      	b.n	811ce94 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 811ce46:	4b18      	ldr	r3, [pc, #96]	@ (811cea8 <udp_remove+0x80>)
 811ce48:	681b      	ldr	r3, [r3, #0]
 811ce4a:	687a      	ldr	r2, [r7, #4]
 811ce4c:	429a      	cmp	r2, r3
 811ce4e:	d105      	bne.n	811ce5c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 811ce50:	4b15      	ldr	r3, [pc, #84]	@ (811cea8 <udp_remove+0x80>)
 811ce52:	681b      	ldr	r3, [r3, #0]
 811ce54:	68db      	ldr	r3, [r3, #12]
 811ce56:	4a14      	ldr	r2, [pc, #80]	@ (811cea8 <udp_remove+0x80>)
 811ce58:	6013      	str	r3, [r2, #0]
 811ce5a:	e017      	b.n	811ce8c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 811ce5c:	4b12      	ldr	r3, [pc, #72]	@ (811cea8 <udp_remove+0x80>)
 811ce5e:	681b      	ldr	r3, [r3, #0]
 811ce60:	60fb      	str	r3, [r7, #12]
 811ce62:	e010      	b.n	811ce86 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 811ce64:	68fb      	ldr	r3, [r7, #12]
 811ce66:	68db      	ldr	r3, [r3, #12]
 811ce68:	2b00      	cmp	r3, #0
 811ce6a:	d009      	beq.n	811ce80 <udp_remove+0x58>
 811ce6c:	68fb      	ldr	r3, [r7, #12]
 811ce6e:	68db      	ldr	r3, [r3, #12]
 811ce70:	687a      	ldr	r2, [r7, #4]
 811ce72:	429a      	cmp	r2, r3
 811ce74:	d104      	bne.n	811ce80 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 811ce76:	687b      	ldr	r3, [r7, #4]
 811ce78:	68da      	ldr	r2, [r3, #12]
 811ce7a:	68fb      	ldr	r3, [r7, #12]
 811ce7c:	60da      	str	r2, [r3, #12]
        break;
 811ce7e:	e005      	b.n	811ce8c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 811ce80:	68fb      	ldr	r3, [r7, #12]
 811ce82:	68db      	ldr	r3, [r3, #12]
 811ce84:	60fb      	str	r3, [r7, #12]
 811ce86:	68fb      	ldr	r3, [r7, #12]
 811ce88:	2b00      	cmp	r3, #0
 811ce8a:	d1eb      	bne.n	811ce64 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 811ce8c:	6879      	ldr	r1, [r7, #4]
 811ce8e:	2000      	movs	r0, #0
 811ce90:	f7f8 fb6a 	bl	8115568 <memp_free>
}
 811ce94:	3710      	adds	r7, #16
 811ce96:	46bd      	mov	sp, r7
 811ce98:	bd80      	pop	{r7, pc}
 811ce9a:	bf00      	nop
 811ce9c:	08122058 	.word	0x08122058
 811cea0:	081223e4 	.word	0x081223e4
 811cea4:	081220ec 	.word	0x081220ec
 811cea8:	10012194 	.word	0x10012194

0811ceac <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 811ceac:	b580      	push	{r7, lr}
 811ceae:	b082      	sub	sp, #8
 811ceb0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 811ceb2:	2000      	movs	r0, #0
 811ceb4:	f7f8 fae2 	bl	811547c <memp_malloc>
 811ceb8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 811ceba:	687b      	ldr	r3, [r7, #4]
 811cebc:	2b00      	cmp	r3, #0
 811cebe:	d007      	beq.n	811ced0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 811cec0:	2220      	movs	r2, #32
 811cec2:	2100      	movs	r1, #0
 811cec4:	6878      	ldr	r0, [r7, #4]
 811cec6:	f001 f8c9 	bl	811e05c <memset>
    pcb->ttl = UDP_TTL;
 811ceca:	687b      	ldr	r3, [r7, #4]
 811cecc:	22ff      	movs	r2, #255	@ 0xff
 811cece:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 811ced0:	687b      	ldr	r3, [r7, #4]
}
 811ced2:	4618      	mov	r0, r3
 811ced4:	3708      	adds	r7, #8
 811ced6:	46bd      	mov	sp, r7
 811ced8:	bd80      	pop	{r7, pc}
	...

0811cedc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 811cedc:	b480      	push	{r7}
 811cede:	b085      	sub	sp, #20
 811cee0:	af00      	add	r7, sp, #0
 811cee2:	6078      	str	r0, [r7, #4]
 811cee4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 811cee6:	687b      	ldr	r3, [r7, #4]
 811cee8:	2b00      	cmp	r3, #0
 811ceea:	d01e      	beq.n	811cf2a <udp_netif_ip_addr_changed+0x4e>
 811ceec:	687b      	ldr	r3, [r7, #4]
 811ceee:	681b      	ldr	r3, [r3, #0]
 811cef0:	2b00      	cmp	r3, #0
 811cef2:	d01a      	beq.n	811cf2a <udp_netif_ip_addr_changed+0x4e>
 811cef4:	683b      	ldr	r3, [r7, #0]
 811cef6:	2b00      	cmp	r3, #0
 811cef8:	d017      	beq.n	811cf2a <udp_netif_ip_addr_changed+0x4e>
 811cefa:	683b      	ldr	r3, [r7, #0]
 811cefc:	681b      	ldr	r3, [r3, #0]
 811cefe:	2b00      	cmp	r3, #0
 811cf00:	d013      	beq.n	811cf2a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 811cf02:	4b0d      	ldr	r3, [pc, #52]	@ (811cf38 <udp_netif_ip_addr_changed+0x5c>)
 811cf04:	681b      	ldr	r3, [r3, #0]
 811cf06:	60fb      	str	r3, [r7, #12]
 811cf08:	e00c      	b.n	811cf24 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 811cf0a:	68fb      	ldr	r3, [r7, #12]
 811cf0c:	681a      	ldr	r2, [r3, #0]
 811cf0e:	687b      	ldr	r3, [r7, #4]
 811cf10:	681b      	ldr	r3, [r3, #0]
 811cf12:	429a      	cmp	r2, r3
 811cf14:	d103      	bne.n	811cf1e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 811cf16:	683b      	ldr	r3, [r7, #0]
 811cf18:	681a      	ldr	r2, [r3, #0]
 811cf1a:	68fb      	ldr	r3, [r7, #12]
 811cf1c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 811cf1e:	68fb      	ldr	r3, [r7, #12]
 811cf20:	68db      	ldr	r3, [r3, #12]
 811cf22:	60fb      	str	r3, [r7, #12]
 811cf24:	68fb      	ldr	r3, [r7, #12]
 811cf26:	2b00      	cmp	r3, #0
 811cf28:	d1ef      	bne.n	811cf0a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 811cf2a:	bf00      	nop
 811cf2c:	3714      	adds	r7, #20
 811cf2e:	46bd      	mov	sp, r7
 811cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 811cf34:	4770      	bx	lr
 811cf36:	bf00      	nop
 811cf38:	10012194 	.word	0x10012194

0811cf3c <_ZdlPvj>:
 811cf3c:	f000 b8e9 	b.w	811d112 <_ZdlPv>

0811cf40 <__cxa_guard_acquire>:
 811cf40:	6802      	ldr	r2, [r0, #0]
 811cf42:	07d2      	lsls	r2, r2, #31
 811cf44:	4603      	mov	r3, r0
 811cf46:	d405      	bmi.n	811cf54 <__cxa_guard_acquire+0x14>
 811cf48:	7842      	ldrb	r2, [r0, #1]
 811cf4a:	b102      	cbz	r2, 811cf4e <__cxa_guard_acquire+0xe>
 811cf4c:	deff      	udf	#255	@ 0xff
 811cf4e:	2001      	movs	r0, #1
 811cf50:	7058      	strb	r0, [r3, #1]
 811cf52:	4770      	bx	lr
 811cf54:	2000      	movs	r0, #0
 811cf56:	4770      	bx	lr

0811cf58 <__cxa_guard_release>:
 811cf58:	2301      	movs	r3, #1
 811cf5a:	6003      	str	r3, [r0, #0]
 811cf5c:	4770      	bx	lr

0811cf5e <_Znwj>:
 811cf5e:	2801      	cmp	r0, #1
 811cf60:	bf38      	it	cc
 811cf62:	2001      	movcc	r0, #1
 811cf64:	b510      	push	{r4, lr}
 811cf66:	4604      	mov	r4, r0
 811cf68:	4620      	mov	r0, r4
 811cf6a:	f000 f909 	bl	811d180 <malloc>
 811cf6e:	b100      	cbz	r0, 811cf72 <_Znwj+0x14>
 811cf70:	bd10      	pop	{r4, pc}
 811cf72:	f000 f8d1 	bl	811d118 <_ZSt15get_new_handlerv>
 811cf76:	b908      	cbnz	r0, 811cf7c <_Znwj+0x1e>
 811cf78:	f000 f8fa 	bl	811d170 <abort>
 811cf7c:	4780      	blx	r0
 811cf7e:	e7f3      	b.n	811cf68 <_Znwj+0xa>

0811cf80 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 811cf80:	68c3      	ldr	r3, [r0, #12]
 811cf82:	689a      	ldr	r2, [r3, #8]
 811cf84:	60c2      	str	r2, [r0, #12]
 811cf86:	b510      	push	{r4, lr}
 811cf88:	b102      	cbz	r2, 811cf8c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 811cf8a:	6050      	str	r0, [r2, #4]
 811cf8c:	6842      	ldr	r2, [r0, #4]
 811cf8e:	605a      	str	r2, [r3, #4]
 811cf90:	680c      	ldr	r4, [r1, #0]
 811cf92:	4284      	cmp	r4, r0
 811cf94:	d103      	bne.n	811cf9e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 811cf96:	600b      	str	r3, [r1, #0]
 811cf98:	6098      	str	r0, [r3, #8]
 811cf9a:	6043      	str	r3, [r0, #4]
 811cf9c:	bd10      	pop	{r4, pc}
 811cf9e:	6891      	ldr	r1, [r2, #8]
 811cfa0:	4281      	cmp	r1, r0
 811cfa2:	bf0c      	ite	eq
 811cfa4:	6093      	streq	r3, [r2, #8]
 811cfa6:	60d3      	strne	r3, [r2, #12]
 811cfa8:	e7f6      	b.n	811cf98 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0811cfaa <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 811cfaa:	6883      	ldr	r3, [r0, #8]
 811cfac:	68da      	ldr	r2, [r3, #12]
 811cfae:	6082      	str	r2, [r0, #8]
 811cfb0:	b510      	push	{r4, lr}
 811cfb2:	b102      	cbz	r2, 811cfb6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 811cfb4:	6050      	str	r0, [r2, #4]
 811cfb6:	6842      	ldr	r2, [r0, #4]
 811cfb8:	605a      	str	r2, [r3, #4]
 811cfba:	680c      	ldr	r4, [r1, #0]
 811cfbc:	4284      	cmp	r4, r0
 811cfbe:	d103      	bne.n	811cfc8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 811cfc0:	600b      	str	r3, [r1, #0]
 811cfc2:	60d8      	str	r0, [r3, #12]
 811cfc4:	6043      	str	r3, [r0, #4]
 811cfc6:	bd10      	pop	{r4, pc}
 811cfc8:	68d1      	ldr	r1, [r2, #12]
 811cfca:	4281      	cmp	r1, r0
 811cfcc:	bf0c      	ite	eq
 811cfce:	60d3      	streq	r3, [r2, #12]
 811cfd0:	6093      	strne	r3, [r2, #8]
 811cfd2:	e7f6      	b.n	811cfc2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0811cfd4 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 811cfd4:	68c3      	ldr	r3, [r0, #12]
 811cfd6:	b123      	cbz	r3, 811cfe2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 811cfd8:	4618      	mov	r0, r3
 811cfda:	689b      	ldr	r3, [r3, #8]
 811cfdc:	2b00      	cmp	r3, #0
 811cfde:	d1fb      	bne.n	811cfd8 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 811cfe0:	4770      	bx	lr
 811cfe2:	6843      	ldr	r3, [r0, #4]
 811cfe4:	68da      	ldr	r2, [r3, #12]
 811cfe6:	4282      	cmp	r2, r0
 811cfe8:	d004      	beq.n	811cff4 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 811cfea:	68c2      	ldr	r2, [r0, #12]
 811cfec:	4293      	cmp	r3, r2
 811cfee:	bf18      	it	ne
 811cff0:	4618      	movne	r0, r3
 811cff2:	4770      	bx	lr
 811cff4:	4618      	mov	r0, r3
 811cff6:	685b      	ldr	r3, [r3, #4]
 811cff8:	e7f4      	b.n	811cfe4 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

0811cffa <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 811cffa:	7802      	ldrb	r2, [r0, #0]
 811cffc:	4603      	mov	r3, r0
 811cffe:	b92a      	cbnz	r2, 811d00c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 811d000:	6842      	ldr	r2, [r0, #4]
 811d002:	6852      	ldr	r2, [r2, #4]
 811d004:	4282      	cmp	r2, r0
 811d006:	d101      	bne.n	811d00c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 811d008:	68d0      	ldr	r0, [r2, #12]
 811d00a:	4770      	bx	lr
 811d00c:	689a      	ldr	r2, [r3, #8]
 811d00e:	b122      	cbz	r2, 811d01a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 811d010:	4610      	mov	r0, r2
 811d012:	68d2      	ldr	r2, [r2, #12]
 811d014:	2a00      	cmp	r2, #0
 811d016:	d1fb      	bne.n	811d010 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 811d018:	4770      	bx	lr
 811d01a:	6858      	ldr	r0, [r3, #4]
 811d01c:	6882      	ldr	r2, [r0, #8]
 811d01e:	429a      	cmp	r2, r3
 811d020:	d000      	beq.n	811d024 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 811d022:	4770      	bx	lr
 811d024:	4603      	mov	r3, r0
 811d026:	6840      	ldr	r0, [r0, #4]
 811d028:	e7f8      	b.n	811d01c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0811d02a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 811d02a:	f7ff bfd3 	b.w	811cfd4 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

0811d02e <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 811d02e:	f7ff bfe4 	b.w	811cffa <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0811d032 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 811d032:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811d036:	461d      	mov	r5, r3
 811d038:	1d1f      	adds	r7, r3, #4
 811d03a:	2300      	movs	r3, #0
 811d03c:	e9c1 3302 	strd	r3, r3, [r1, #8]
 811d040:	460c      	mov	r4, r1
 811d042:	604a      	str	r2, [r1, #4]
 811d044:	700b      	strb	r3, [r1, #0]
 811d046:	b1a0      	cbz	r0, 811d072 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 811d048:	4295      	cmp	r5, r2
 811d04a:	6091      	str	r1, [r2, #8]
 811d04c:	d102      	bne.n	811d054 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 811d04e:	6069      	str	r1, [r5, #4]
 811d050:	60ec      	str	r4, [r5, #12]
 811d052:	e003      	b.n	811d05c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 811d054:	68ab      	ldr	r3, [r5, #8]
 811d056:	4293      	cmp	r3, r2
 811d058:	bf08      	it	eq
 811d05a:	60a9      	streq	r1, [r5, #8]
 811d05c:	f04f 0900 	mov.w	r9, #0
 811d060:	f04f 0801 	mov.w	r8, #1
 811d064:	686b      	ldr	r3, [r5, #4]
 811d066:	42a3      	cmp	r3, r4
 811d068:	d132      	bne.n	811d0d0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 811d06a:	2201      	movs	r2, #1
 811d06c:	701a      	strb	r2, [r3, #0]
 811d06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811d072:	60d1      	str	r1, [r2, #12]
 811d074:	68eb      	ldr	r3, [r5, #12]
 811d076:	4293      	cmp	r3, r2
 811d078:	d1f0      	bne.n	811d05c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 811d07a:	e7e9      	b.n	811d050 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 811d07c:	68c3      	ldr	r3, [r0, #12]
 811d07e:	42a3      	cmp	r3, r4
 811d080:	d103      	bne.n	811d08a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 811d082:	4639      	mov	r1, r7
 811d084:	f7ff ff7c 	bl	811cf80 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 811d088:	4604      	mov	r4, r0
 811d08a:	6863      	ldr	r3, [r4, #4]
 811d08c:	4639      	mov	r1, r7
 811d08e:	f883 8000 	strb.w	r8, [r3]
 811d092:	4630      	mov	r0, r6
 811d094:	f886 9000 	strb.w	r9, [r6]
 811d098:	f7ff ff87 	bl	811cfaa <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 811d09c:	e7e2      	b.n	811d064 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 811d09e:	b133      	cbz	r3, 811d0ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 811d0a0:	781a      	ldrb	r2, [r3, #0]
 811d0a2:	b922      	cbnz	r2, 811d0ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 811d0a4:	f880 8000 	strb.w	r8, [r0]
 811d0a8:	f883 8000 	strb.w	r8, [r3]
 811d0ac:	e021      	b.n	811d0f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 811d0ae:	6883      	ldr	r3, [r0, #8]
 811d0b0:	42a3      	cmp	r3, r4
 811d0b2:	d103      	bne.n	811d0bc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 811d0b4:	4639      	mov	r1, r7
 811d0b6:	f7ff ff78 	bl	811cfaa <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 811d0ba:	4604      	mov	r4, r0
 811d0bc:	6863      	ldr	r3, [r4, #4]
 811d0be:	4639      	mov	r1, r7
 811d0c0:	f883 8000 	strb.w	r8, [r3]
 811d0c4:	4630      	mov	r0, r6
 811d0c6:	f886 9000 	strb.w	r9, [r6]
 811d0ca:	f7ff ff59 	bl	811cf80 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 811d0ce:	e7c9      	b.n	811d064 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 811d0d0:	6860      	ldr	r0, [r4, #4]
 811d0d2:	7802      	ldrb	r2, [r0, #0]
 811d0d4:	2a00      	cmp	r2, #0
 811d0d6:	d1c8      	bne.n	811d06a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 811d0d8:	6846      	ldr	r6, [r0, #4]
 811d0da:	68b3      	ldr	r3, [r6, #8]
 811d0dc:	4283      	cmp	r3, r0
 811d0de:	d1de      	bne.n	811d09e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 811d0e0:	68f2      	ldr	r2, [r6, #12]
 811d0e2:	2a00      	cmp	r2, #0
 811d0e4:	d0ca      	beq.n	811d07c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 811d0e6:	7811      	ldrb	r1, [r2, #0]
 811d0e8:	2900      	cmp	r1, #0
 811d0ea:	d1c7      	bne.n	811d07c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 811d0ec:	2101      	movs	r1, #1
 811d0ee:	7019      	strb	r1, [r3, #0]
 811d0f0:	7011      	strb	r1, [r2, #0]
 811d0f2:	f886 9000 	strb.w	r9, [r6]
 811d0f6:	4634      	mov	r4, r6
 811d0f8:	e7b4      	b.n	811d064 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

0811d0fa <_ZSt17__throw_bad_allocv>:
 811d0fa:	b508      	push	{r3, lr}
 811d0fc:	f000 f838 	bl	811d170 <abort>

0811d100 <_ZSt28__throw_bad_array_new_lengthv>:
 811d100:	b508      	push	{r3, lr}
 811d102:	f000 f835 	bl	811d170 <abort>

0811d106 <_ZSt20__throw_length_errorPKc>:
 811d106:	b508      	push	{r3, lr}
 811d108:	f000 f832 	bl	811d170 <abort>

0811d10c <_ZSt25__throw_bad_function_callv>:
 811d10c:	b508      	push	{r3, lr}
 811d10e:	f000 f82f 	bl	811d170 <abort>

0811d112 <_ZdlPv>:
 811d112:	f000 b83d 	b.w	811d190 <free>
	...

0811d118 <_ZSt15get_new_handlerv>:
 811d118:	4b02      	ldr	r3, [pc, #8]	@ (811d124 <_ZSt15get_new_handlerv+0xc>)
 811d11a:	6818      	ldr	r0, [r3, #0]
 811d11c:	f3bf 8f5b 	dmb	ish
 811d120:	4770      	bx	lr
 811d122:	bf00      	nop
 811d124:	10012198 	.word	0x10012198

0811d128 <roundf>:
 811d128:	ee10 0a10 	vmov	r0, s0
 811d12c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 811d130:	3a7f      	subs	r2, #127	@ 0x7f
 811d132:	2a16      	cmp	r2, #22
 811d134:	dc15      	bgt.n	811d162 <roundf+0x3a>
 811d136:	2a00      	cmp	r2, #0
 811d138:	da08      	bge.n	811d14c <roundf+0x24>
 811d13a:	3201      	adds	r2, #1
 811d13c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 811d140:	d101      	bne.n	811d146 <roundf+0x1e>
 811d142:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 811d146:	ee00 3a10 	vmov	s0, r3
 811d14a:	4770      	bx	lr
 811d14c:	4907      	ldr	r1, [pc, #28]	@ (811d16c <roundf+0x44>)
 811d14e:	4111      	asrs	r1, r2
 811d150:	4201      	tst	r1, r0
 811d152:	d0fa      	beq.n	811d14a <roundf+0x22>
 811d154:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 811d158:	4113      	asrs	r3, r2
 811d15a:	4403      	add	r3, r0
 811d15c:	ea23 0301 	bic.w	r3, r3, r1
 811d160:	e7f1      	b.n	811d146 <roundf+0x1e>
 811d162:	2a80      	cmp	r2, #128	@ 0x80
 811d164:	d1f1      	bne.n	811d14a <roundf+0x22>
 811d166:	ee30 0a00 	vadd.f32	s0, s0, s0
 811d16a:	4770      	bx	lr
 811d16c:	007fffff 	.word	0x007fffff

0811d170 <abort>:
 811d170:	b508      	push	{r3, lr}
 811d172:	2006      	movs	r0, #6
 811d174:	f000 ffcc 	bl	811e110 <raise>
 811d178:	2001      	movs	r0, #1
 811d17a:	f7e3 fddf 	bl	8100d3c <_exit>
	...

0811d180 <malloc>:
 811d180:	4b02      	ldr	r3, [pc, #8]	@ (811d18c <malloc+0xc>)
 811d182:	4601      	mov	r1, r0
 811d184:	6818      	ldr	r0, [r3, #0]
 811d186:	f000 b82d 	b.w	811d1e4 <_malloc_r>
 811d18a:	bf00      	nop
 811d18c:	10000040 	.word	0x10000040

0811d190 <free>:
 811d190:	4b02      	ldr	r3, [pc, #8]	@ (811d19c <free+0xc>)
 811d192:	4601      	mov	r1, r0
 811d194:	6818      	ldr	r0, [r3, #0]
 811d196:	f001 b8dd 	b.w	811e354 <_free_r>
 811d19a:	bf00      	nop
 811d19c:	10000040 	.word	0x10000040

0811d1a0 <sbrk_aligned>:
 811d1a0:	b570      	push	{r4, r5, r6, lr}
 811d1a2:	4e0f      	ldr	r6, [pc, #60]	@ (811d1e0 <sbrk_aligned+0x40>)
 811d1a4:	460c      	mov	r4, r1
 811d1a6:	6831      	ldr	r1, [r6, #0]
 811d1a8:	4605      	mov	r5, r0
 811d1aa:	b911      	cbnz	r1, 811d1b2 <sbrk_aligned+0x12>
 811d1ac:	f001 f856 	bl	811e25c <_sbrk_r>
 811d1b0:	6030      	str	r0, [r6, #0]
 811d1b2:	4621      	mov	r1, r4
 811d1b4:	4628      	mov	r0, r5
 811d1b6:	f001 f851 	bl	811e25c <_sbrk_r>
 811d1ba:	1c43      	adds	r3, r0, #1
 811d1bc:	d103      	bne.n	811d1c6 <sbrk_aligned+0x26>
 811d1be:	f04f 34ff 	mov.w	r4, #4294967295
 811d1c2:	4620      	mov	r0, r4
 811d1c4:	bd70      	pop	{r4, r5, r6, pc}
 811d1c6:	1cc4      	adds	r4, r0, #3
 811d1c8:	f024 0403 	bic.w	r4, r4, #3
 811d1cc:	42a0      	cmp	r0, r4
 811d1ce:	d0f8      	beq.n	811d1c2 <sbrk_aligned+0x22>
 811d1d0:	1a21      	subs	r1, r4, r0
 811d1d2:	4628      	mov	r0, r5
 811d1d4:	f001 f842 	bl	811e25c <_sbrk_r>
 811d1d8:	3001      	adds	r0, #1
 811d1da:	d1f2      	bne.n	811d1c2 <sbrk_aligned+0x22>
 811d1dc:	e7ef      	b.n	811d1be <sbrk_aligned+0x1e>
 811d1de:	bf00      	nop
 811d1e0:	1001219c 	.word	0x1001219c

0811d1e4 <_malloc_r>:
 811d1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811d1e8:	1ccd      	adds	r5, r1, #3
 811d1ea:	f025 0503 	bic.w	r5, r5, #3
 811d1ee:	3508      	adds	r5, #8
 811d1f0:	2d0c      	cmp	r5, #12
 811d1f2:	bf38      	it	cc
 811d1f4:	250c      	movcc	r5, #12
 811d1f6:	2d00      	cmp	r5, #0
 811d1f8:	4606      	mov	r6, r0
 811d1fa:	db01      	blt.n	811d200 <_malloc_r+0x1c>
 811d1fc:	42a9      	cmp	r1, r5
 811d1fe:	d904      	bls.n	811d20a <_malloc_r+0x26>
 811d200:	230c      	movs	r3, #12
 811d202:	6033      	str	r3, [r6, #0]
 811d204:	2000      	movs	r0, #0
 811d206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811d20a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 811d2e0 <_malloc_r+0xfc>
 811d20e:	f000 f869 	bl	811d2e4 <__malloc_lock>
 811d212:	f8d8 3000 	ldr.w	r3, [r8]
 811d216:	461c      	mov	r4, r3
 811d218:	bb44      	cbnz	r4, 811d26c <_malloc_r+0x88>
 811d21a:	4629      	mov	r1, r5
 811d21c:	4630      	mov	r0, r6
 811d21e:	f7ff ffbf 	bl	811d1a0 <sbrk_aligned>
 811d222:	1c43      	adds	r3, r0, #1
 811d224:	4604      	mov	r4, r0
 811d226:	d158      	bne.n	811d2da <_malloc_r+0xf6>
 811d228:	f8d8 4000 	ldr.w	r4, [r8]
 811d22c:	4627      	mov	r7, r4
 811d22e:	2f00      	cmp	r7, #0
 811d230:	d143      	bne.n	811d2ba <_malloc_r+0xd6>
 811d232:	2c00      	cmp	r4, #0
 811d234:	d04b      	beq.n	811d2ce <_malloc_r+0xea>
 811d236:	6823      	ldr	r3, [r4, #0]
 811d238:	4639      	mov	r1, r7
 811d23a:	4630      	mov	r0, r6
 811d23c:	eb04 0903 	add.w	r9, r4, r3
 811d240:	f001 f80c 	bl	811e25c <_sbrk_r>
 811d244:	4581      	cmp	r9, r0
 811d246:	d142      	bne.n	811d2ce <_malloc_r+0xea>
 811d248:	6821      	ldr	r1, [r4, #0]
 811d24a:	1a6d      	subs	r5, r5, r1
 811d24c:	4629      	mov	r1, r5
 811d24e:	4630      	mov	r0, r6
 811d250:	f7ff ffa6 	bl	811d1a0 <sbrk_aligned>
 811d254:	3001      	adds	r0, #1
 811d256:	d03a      	beq.n	811d2ce <_malloc_r+0xea>
 811d258:	6823      	ldr	r3, [r4, #0]
 811d25a:	442b      	add	r3, r5
 811d25c:	6023      	str	r3, [r4, #0]
 811d25e:	f8d8 3000 	ldr.w	r3, [r8]
 811d262:	685a      	ldr	r2, [r3, #4]
 811d264:	bb62      	cbnz	r2, 811d2c0 <_malloc_r+0xdc>
 811d266:	f8c8 7000 	str.w	r7, [r8]
 811d26a:	e00f      	b.n	811d28c <_malloc_r+0xa8>
 811d26c:	6822      	ldr	r2, [r4, #0]
 811d26e:	1b52      	subs	r2, r2, r5
 811d270:	d420      	bmi.n	811d2b4 <_malloc_r+0xd0>
 811d272:	2a0b      	cmp	r2, #11
 811d274:	d917      	bls.n	811d2a6 <_malloc_r+0xc2>
 811d276:	1961      	adds	r1, r4, r5
 811d278:	42a3      	cmp	r3, r4
 811d27a:	6025      	str	r5, [r4, #0]
 811d27c:	bf18      	it	ne
 811d27e:	6059      	strne	r1, [r3, #4]
 811d280:	6863      	ldr	r3, [r4, #4]
 811d282:	bf08      	it	eq
 811d284:	f8c8 1000 	streq.w	r1, [r8]
 811d288:	5162      	str	r2, [r4, r5]
 811d28a:	604b      	str	r3, [r1, #4]
 811d28c:	4630      	mov	r0, r6
 811d28e:	f000 f82f 	bl	811d2f0 <__malloc_unlock>
 811d292:	f104 000b 	add.w	r0, r4, #11
 811d296:	1d23      	adds	r3, r4, #4
 811d298:	f020 0007 	bic.w	r0, r0, #7
 811d29c:	1ac2      	subs	r2, r0, r3
 811d29e:	bf1c      	itt	ne
 811d2a0:	1a1b      	subne	r3, r3, r0
 811d2a2:	50a3      	strne	r3, [r4, r2]
 811d2a4:	e7af      	b.n	811d206 <_malloc_r+0x22>
 811d2a6:	6862      	ldr	r2, [r4, #4]
 811d2a8:	42a3      	cmp	r3, r4
 811d2aa:	bf0c      	ite	eq
 811d2ac:	f8c8 2000 	streq.w	r2, [r8]
 811d2b0:	605a      	strne	r2, [r3, #4]
 811d2b2:	e7eb      	b.n	811d28c <_malloc_r+0xa8>
 811d2b4:	4623      	mov	r3, r4
 811d2b6:	6864      	ldr	r4, [r4, #4]
 811d2b8:	e7ae      	b.n	811d218 <_malloc_r+0x34>
 811d2ba:	463c      	mov	r4, r7
 811d2bc:	687f      	ldr	r7, [r7, #4]
 811d2be:	e7b6      	b.n	811d22e <_malloc_r+0x4a>
 811d2c0:	461a      	mov	r2, r3
 811d2c2:	685b      	ldr	r3, [r3, #4]
 811d2c4:	42a3      	cmp	r3, r4
 811d2c6:	d1fb      	bne.n	811d2c0 <_malloc_r+0xdc>
 811d2c8:	2300      	movs	r3, #0
 811d2ca:	6053      	str	r3, [r2, #4]
 811d2cc:	e7de      	b.n	811d28c <_malloc_r+0xa8>
 811d2ce:	230c      	movs	r3, #12
 811d2d0:	6033      	str	r3, [r6, #0]
 811d2d2:	4630      	mov	r0, r6
 811d2d4:	f000 f80c 	bl	811d2f0 <__malloc_unlock>
 811d2d8:	e794      	b.n	811d204 <_malloc_r+0x20>
 811d2da:	6005      	str	r5, [r0, #0]
 811d2dc:	e7d6      	b.n	811d28c <_malloc_r+0xa8>
 811d2de:	bf00      	nop
 811d2e0:	100121a0 	.word	0x100121a0

0811d2e4 <__malloc_lock>:
 811d2e4:	4801      	ldr	r0, [pc, #4]	@ (811d2ec <__malloc_lock+0x8>)
 811d2e6:	f001 b806 	b.w	811e2f6 <__retarget_lock_acquire_recursive>
 811d2ea:	bf00      	nop
 811d2ec:	100122e4 	.word	0x100122e4

0811d2f0 <__malloc_unlock>:
 811d2f0:	4801      	ldr	r0, [pc, #4]	@ (811d2f8 <__malloc_unlock+0x8>)
 811d2f2:	f001 b801 	b.w	811e2f8 <__retarget_lock_release_recursive>
 811d2f6:	bf00      	nop
 811d2f8:	100122e4 	.word	0x100122e4

0811d2fc <rand>:
 811d2fc:	4b16      	ldr	r3, [pc, #88]	@ (811d358 <rand+0x5c>)
 811d2fe:	b510      	push	{r4, lr}
 811d300:	681c      	ldr	r4, [r3, #0]
 811d302:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 811d304:	b9b3      	cbnz	r3, 811d334 <rand+0x38>
 811d306:	2018      	movs	r0, #24
 811d308:	f7ff ff3a 	bl	811d180 <malloc>
 811d30c:	4602      	mov	r2, r0
 811d30e:	6320      	str	r0, [r4, #48]	@ 0x30
 811d310:	b920      	cbnz	r0, 811d31c <rand+0x20>
 811d312:	4b12      	ldr	r3, [pc, #72]	@ (811d35c <rand+0x60>)
 811d314:	4812      	ldr	r0, [pc, #72]	@ (811d360 <rand+0x64>)
 811d316:	2152      	movs	r1, #82	@ 0x52
 811d318:	f000 fffe 	bl	811e318 <__assert_func>
 811d31c:	4911      	ldr	r1, [pc, #68]	@ (811d364 <rand+0x68>)
 811d31e:	4b12      	ldr	r3, [pc, #72]	@ (811d368 <rand+0x6c>)
 811d320:	e9c0 1300 	strd	r1, r3, [r0]
 811d324:	4b11      	ldr	r3, [pc, #68]	@ (811d36c <rand+0x70>)
 811d326:	6083      	str	r3, [r0, #8]
 811d328:	230b      	movs	r3, #11
 811d32a:	8183      	strh	r3, [r0, #12]
 811d32c:	2100      	movs	r1, #0
 811d32e:	2001      	movs	r0, #1
 811d330:	e9c2 0104 	strd	r0, r1, [r2, #16]
 811d334:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 811d336:	480e      	ldr	r0, [pc, #56]	@ (811d370 <rand+0x74>)
 811d338:	690b      	ldr	r3, [r1, #16]
 811d33a:	694c      	ldr	r4, [r1, #20]
 811d33c:	4a0d      	ldr	r2, [pc, #52]	@ (811d374 <rand+0x78>)
 811d33e:	4358      	muls	r0, r3
 811d340:	fb02 0004 	mla	r0, r2, r4, r0
 811d344:	fba3 3202 	umull	r3, r2, r3, r2
 811d348:	3301      	adds	r3, #1
 811d34a:	eb40 0002 	adc.w	r0, r0, r2
 811d34e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 811d352:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 811d356:	bd10      	pop	{r4, pc}
 811d358:	10000040 	.word	0x10000040
 811d35c:	081225ec 	.word	0x081225ec
 811d360:	08122603 	.word	0x08122603
 811d364:	abcd330e 	.word	0xabcd330e
 811d368:	e66d1234 	.word	0xe66d1234
 811d36c:	0005deec 	.word	0x0005deec
 811d370:	5851f42d 	.word	0x5851f42d
 811d374:	4c957f2d 	.word	0x4c957f2d

0811d378 <_strtol_l.constprop.0>:
 811d378:	2b24      	cmp	r3, #36	@ 0x24
 811d37a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 811d37e:	4686      	mov	lr, r0
 811d380:	4690      	mov	r8, r2
 811d382:	d801      	bhi.n	811d388 <_strtol_l.constprop.0+0x10>
 811d384:	2b01      	cmp	r3, #1
 811d386:	d106      	bne.n	811d396 <_strtol_l.constprop.0+0x1e>
 811d388:	f000 ff8a 	bl	811e2a0 <__errno>
 811d38c:	2316      	movs	r3, #22
 811d38e:	6003      	str	r3, [r0, #0]
 811d390:	2000      	movs	r0, #0
 811d392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811d396:	4834      	ldr	r0, [pc, #208]	@ (811d468 <_strtol_l.constprop.0+0xf0>)
 811d398:	460d      	mov	r5, r1
 811d39a:	462a      	mov	r2, r5
 811d39c:	f815 4b01 	ldrb.w	r4, [r5], #1
 811d3a0:	5d06      	ldrb	r6, [r0, r4]
 811d3a2:	f016 0608 	ands.w	r6, r6, #8
 811d3a6:	d1f8      	bne.n	811d39a <_strtol_l.constprop.0+0x22>
 811d3a8:	2c2d      	cmp	r4, #45	@ 0x2d
 811d3aa:	d12d      	bne.n	811d408 <_strtol_l.constprop.0+0x90>
 811d3ac:	782c      	ldrb	r4, [r5, #0]
 811d3ae:	2601      	movs	r6, #1
 811d3b0:	1c95      	adds	r5, r2, #2
 811d3b2:	f033 0210 	bics.w	r2, r3, #16
 811d3b6:	d109      	bne.n	811d3cc <_strtol_l.constprop.0+0x54>
 811d3b8:	2c30      	cmp	r4, #48	@ 0x30
 811d3ba:	d12a      	bne.n	811d412 <_strtol_l.constprop.0+0x9a>
 811d3bc:	782a      	ldrb	r2, [r5, #0]
 811d3be:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 811d3c2:	2a58      	cmp	r2, #88	@ 0x58
 811d3c4:	d125      	bne.n	811d412 <_strtol_l.constprop.0+0x9a>
 811d3c6:	786c      	ldrb	r4, [r5, #1]
 811d3c8:	2310      	movs	r3, #16
 811d3ca:	3502      	adds	r5, #2
 811d3cc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 811d3d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 811d3d4:	2200      	movs	r2, #0
 811d3d6:	fbbc f9f3 	udiv	r9, ip, r3
 811d3da:	4610      	mov	r0, r2
 811d3dc:	fb03 ca19 	mls	sl, r3, r9, ip
 811d3e0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 811d3e4:	2f09      	cmp	r7, #9
 811d3e6:	d81b      	bhi.n	811d420 <_strtol_l.constprop.0+0xa8>
 811d3e8:	463c      	mov	r4, r7
 811d3ea:	42a3      	cmp	r3, r4
 811d3ec:	dd27      	ble.n	811d43e <_strtol_l.constprop.0+0xc6>
 811d3ee:	1c57      	adds	r7, r2, #1
 811d3f0:	d007      	beq.n	811d402 <_strtol_l.constprop.0+0x8a>
 811d3f2:	4581      	cmp	r9, r0
 811d3f4:	d320      	bcc.n	811d438 <_strtol_l.constprop.0+0xc0>
 811d3f6:	d101      	bne.n	811d3fc <_strtol_l.constprop.0+0x84>
 811d3f8:	45a2      	cmp	sl, r4
 811d3fa:	db1d      	blt.n	811d438 <_strtol_l.constprop.0+0xc0>
 811d3fc:	fb00 4003 	mla	r0, r0, r3, r4
 811d400:	2201      	movs	r2, #1
 811d402:	f815 4b01 	ldrb.w	r4, [r5], #1
 811d406:	e7eb      	b.n	811d3e0 <_strtol_l.constprop.0+0x68>
 811d408:	2c2b      	cmp	r4, #43	@ 0x2b
 811d40a:	bf04      	itt	eq
 811d40c:	782c      	ldrbeq	r4, [r5, #0]
 811d40e:	1c95      	addeq	r5, r2, #2
 811d410:	e7cf      	b.n	811d3b2 <_strtol_l.constprop.0+0x3a>
 811d412:	2b00      	cmp	r3, #0
 811d414:	d1da      	bne.n	811d3cc <_strtol_l.constprop.0+0x54>
 811d416:	2c30      	cmp	r4, #48	@ 0x30
 811d418:	bf0c      	ite	eq
 811d41a:	2308      	moveq	r3, #8
 811d41c:	230a      	movne	r3, #10
 811d41e:	e7d5      	b.n	811d3cc <_strtol_l.constprop.0+0x54>
 811d420:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 811d424:	2f19      	cmp	r7, #25
 811d426:	d801      	bhi.n	811d42c <_strtol_l.constprop.0+0xb4>
 811d428:	3c37      	subs	r4, #55	@ 0x37
 811d42a:	e7de      	b.n	811d3ea <_strtol_l.constprop.0+0x72>
 811d42c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 811d430:	2f19      	cmp	r7, #25
 811d432:	d804      	bhi.n	811d43e <_strtol_l.constprop.0+0xc6>
 811d434:	3c57      	subs	r4, #87	@ 0x57
 811d436:	e7d8      	b.n	811d3ea <_strtol_l.constprop.0+0x72>
 811d438:	f04f 32ff 	mov.w	r2, #4294967295
 811d43c:	e7e1      	b.n	811d402 <_strtol_l.constprop.0+0x8a>
 811d43e:	1c53      	adds	r3, r2, #1
 811d440:	d108      	bne.n	811d454 <_strtol_l.constprop.0+0xdc>
 811d442:	2322      	movs	r3, #34	@ 0x22
 811d444:	f8ce 3000 	str.w	r3, [lr]
 811d448:	4660      	mov	r0, ip
 811d44a:	f1b8 0f00 	cmp.w	r8, #0
 811d44e:	d0a0      	beq.n	811d392 <_strtol_l.constprop.0+0x1a>
 811d450:	1e69      	subs	r1, r5, #1
 811d452:	e006      	b.n	811d462 <_strtol_l.constprop.0+0xea>
 811d454:	b106      	cbz	r6, 811d458 <_strtol_l.constprop.0+0xe0>
 811d456:	4240      	negs	r0, r0
 811d458:	f1b8 0f00 	cmp.w	r8, #0
 811d45c:	d099      	beq.n	811d392 <_strtol_l.constprop.0+0x1a>
 811d45e:	2a00      	cmp	r2, #0
 811d460:	d1f6      	bne.n	811d450 <_strtol_l.constprop.0+0xd8>
 811d462:	f8c8 1000 	str.w	r1, [r8]
 811d466:	e794      	b.n	811d392 <_strtol_l.constprop.0+0x1a>
 811d468:	0812265c 	.word	0x0812265c

0811d46c <_strtol_r>:
 811d46c:	f7ff bf84 	b.w	811d378 <_strtol_l.constprop.0>

0811d470 <__sfputc_r>:
 811d470:	6893      	ldr	r3, [r2, #8]
 811d472:	3b01      	subs	r3, #1
 811d474:	2b00      	cmp	r3, #0
 811d476:	b410      	push	{r4}
 811d478:	6093      	str	r3, [r2, #8]
 811d47a:	da08      	bge.n	811d48e <__sfputc_r+0x1e>
 811d47c:	6994      	ldr	r4, [r2, #24]
 811d47e:	42a3      	cmp	r3, r4
 811d480:	db01      	blt.n	811d486 <__sfputc_r+0x16>
 811d482:	290a      	cmp	r1, #10
 811d484:	d103      	bne.n	811d48e <__sfputc_r+0x1e>
 811d486:	f85d 4b04 	ldr.w	r4, [sp], #4
 811d48a:	f000 bd28 	b.w	811dede <__swbuf_r>
 811d48e:	6813      	ldr	r3, [r2, #0]
 811d490:	1c58      	adds	r0, r3, #1
 811d492:	6010      	str	r0, [r2, #0]
 811d494:	7019      	strb	r1, [r3, #0]
 811d496:	4608      	mov	r0, r1
 811d498:	f85d 4b04 	ldr.w	r4, [sp], #4
 811d49c:	4770      	bx	lr

0811d49e <__sfputs_r>:
 811d49e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811d4a0:	4606      	mov	r6, r0
 811d4a2:	460f      	mov	r7, r1
 811d4a4:	4614      	mov	r4, r2
 811d4a6:	18d5      	adds	r5, r2, r3
 811d4a8:	42ac      	cmp	r4, r5
 811d4aa:	d101      	bne.n	811d4b0 <__sfputs_r+0x12>
 811d4ac:	2000      	movs	r0, #0
 811d4ae:	e007      	b.n	811d4c0 <__sfputs_r+0x22>
 811d4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 811d4b4:	463a      	mov	r2, r7
 811d4b6:	4630      	mov	r0, r6
 811d4b8:	f7ff ffda 	bl	811d470 <__sfputc_r>
 811d4bc:	1c43      	adds	r3, r0, #1
 811d4be:	d1f3      	bne.n	811d4a8 <__sfputs_r+0xa>
 811d4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0811d4c4 <_vfiprintf_r>:
 811d4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811d4c8:	460d      	mov	r5, r1
 811d4ca:	b09d      	sub	sp, #116	@ 0x74
 811d4cc:	4614      	mov	r4, r2
 811d4ce:	4698      	mov	r8, r3
 811d4d0:	4606      	mov	r6, r0
 811d4d2:	b118      	cbz	r0, 811d4dc <_vfiprintf_r+0x18>
 811d4d4:	6a03      	ldr	r3, [r0, #32]
 811d4d6:	b90b      	cbnz	r3, 811d4dc <_vfiprintf_r+0x18>
 811d4d8:	f000 fbf0 	bl	811dcbc <__sinit>
 811d4dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811d4de:	07d9      	lsls	r1, r3, #31
 811d4e0:	d405      	bmi.n	811d4ee <_vfiprintf_r+0x2a>
 811d4e2:	89ab      	ldrh	r3, [r5, #12]
 811d4e4:	059a      	lsls	r2, r3, #22
 811d4e6:	d402      	bmi.n	811d4ee <_vfiprintf_r+0x2a>
 811d4e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811d4ea:	f000 ff04 	bl	811e2f6 <__retarget_lock_acquire_recursive>
 811d4ee:	89ab      	ldrh	r3, [r5, #12]
 811d4f0:	071b      	lsls	r3, r3, #28
 811d4f2:	d501      	bpl.n	811d4f8 <_vfiprintf_r+0x34>
 811d4f4:	692b      	ldr	r3, [r5, #16]
 811d4f6:	b99b      	cbnz	r3, 811d520 <_vfiprintf_r+0x5c>
 811d4f8:	4629      	mov	r1, r5
 811d4fa:	4630      	mov	r0, r6
 811d4fc:	f000 fd2e 	bl	811df5c <__swsetup_r>
 811d500:	b170      	cbz	r0, 811d520 <_vfiprintf_r+0x5c>
 811d502:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811d504:	07dc      	lsls	r4, r3, #31
 811d506:	d504      	bpl.n	811d512 <_vfiprintf_r+0x4e>
 811d508:	f04f 30ff 	mov.w	r0, #4294967295
 811d50c:	b01d      	add	sp, #116	@ 0x74
 811d50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811d512:	89ab      	ldrh	r3, [r5, #12]
 811d514:	0598      	lsls	r0, r3, #22
 811d516:	d4f7      	bmi.n	811d508 <_vfiprintf_r+0x44>
 811d518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811d51a:	f000 feed 	bl	811e2f8 <__retarget_lock_release_recursive>
 811d51e:	e7f3      	b.n	811d508 <_vfiprintf_r+0x44>
 811d520:	2300      	movs	r3, #0
 811d522:	9309      	str	r3, [sp, #36]	@ 0x24
 811d524:	2320      	movs	r3, #32
 811d526:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 811d52a:	f8cd 800c 	str.w	r8, [sp, #12]
 811d52e:	2330      	movs	r3, #48	@ 0x30
 811d530:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 811d6e0 <_vfiprintf_r+0x21c>
 811d534:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 811d538:	f04f 0901 	mov.w	r9, #1
 811d53c:	4623      	mov	r3, r4
 811d53e:	469a      	mov	sl, r3
 811d540:	f813 2b01 	ldrb.w	r2, [r3], #1
 811d544:	b10a      	cbz	r2, 811d54a <_vfiprintf_r+0x86>
 811d546:	2a25      	cmp	r2, #37	@ 0x25
 811d548:	d1f9      	bne.n	811d53e <_vfiprintf_r+0x7a>
 811d54a:	ebba 0b04 	subs.w	fp, sl, r4
 811d54e:	d00b      	beq.n	811d568 <_vfiprintf_r+0xa4>
 811d550:	465b      	mov	r3, fp
 811d552:	4622      	mov	r2, r4
 811d554:	4629      	mov	r1, r5
 811d556:	4630      	mov	r0, r6
 811d558:	f7ff ffa1 	bl	811d49e <__sfputs_r>
 811d55c:	3001      	adds	r0, #1
 811d55e:	f000 80a7 	beq.w	811d6b0 <_vfiprintf_r+0x1ec>
 811d562:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 811d564:	445a      	add	r2, fp
 811d566:	9209      	str	r2, [sp, #36]	@ 0x24
 811d568:	f89a 3000 	ldrb.w	r3, [sl]
 811d56c:	2b00      	cmp	r3, #0
 811d56e:	f000 809f 	beq.w	811d6b0 <_vfiprintf_r+0x1ec>
 811d572:	2300      	movs	r3, #0
 811d574:	f04f 32ff 	mov.w	r2, #4294967295
 811d578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 811d57c:	f10a 0a01 	add.w	sl, sl, #1
 811d580:	9304      	str	r3, [sp, #16]
 811d582:	9307      	str	r3, [sp, #28]
 811d584:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 811d588:	931a      	str	r3, [sp, #104]	@ 0x68
 811d58a:	4654      	mov	r4, sl
 811d58c:	2205      	movs	r2, #5
 811d58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 811d592:	4853      	ldr	r0, [pc, #332]	@ (811d6e0 <_vfiprintf_r+0x21c>)
 811d594:	f7e2 fea4 	bl	81002e0 <memchr>
 811d598:	9a04      	ldr	r2, [sp, #16]
 811d59a:	b9d8      	cbnz	r0, 811d5d4 <_vfiprintf_r+0x110>
 811d59c:	06d1      	lsls	r1, r2, #27
 811d59e:	bf44      	itt	mi
 811d5a0:	2320      	movmi	r3, #32
 811d5a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 811d5a6:	0713      	lsls	r3, r2, #28
 811d5a8:	bf44      	itt	mi
 811d5aa:	232b      	movmi	r3, #43	@ 0x2b
 811d5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 811d5b0:	f89a 3000 	ldrb.w	r3, [sl]
 811d5b4:	2b2a      	cmp	r3, #42	@ 0x2a
 811d5b6:	d015      	beq.n	811d5e4 <_vfiprintf_r+0x120>
 811d5b8:	9a07      	ldr	r2, [sp, #28]
 811d5ba:	4654      	mov	r4, sl
 811d5bc:	2000      	movs	r0, #0
 811d5be:	f04f 0c0a 	mov.w	ip, #10
 811d5c2:	4621      	mov	r1, r4
 811d5c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 811d5c8:	3b30      	subs	r3, #48	@ 0x30
 811d5ca:	2b09      	cmp	r3, #9
 811d5cc:	d94b      	bls.n	811d666 <_vfiprintf_r+0x1a2>
 811d5ce:	b1b0      	cbz	r0, 811d5fe <_vfiprintf_r+0x13a>
 811d5d0:	9207      	str	r2, [sp, #28]
 811d5d2:	e014      	b.n	811d5fe <_vfiprintf_r+0x13a>
 811d5d4:	eba0 0308 	sub.w	r3, r0, r8
 811d5d8:	fa09 f303 	lsl.w	r3, r9, r3
 811d5dc:	4313      	orrs	r3, r2
 811d5de:	9304      	str	r3, [sp, #16]
 811d5e0:	46a2      	mov	sl, r4
 811d5e2:	e7d2      	b.n	811d58a <_vfiprintf_r+0xc6>
 811d5e4:	9b03      	ldr	r3, [sp, #12]
 811d5e6:	1d19      	adds	r1, r3, #4
 811d5e8:	681b      	ldr	r3, [r3, #0]
 811d5ea:	9103      	str	r1, [sp, #12]
 811d5ec:	2b00      	cmp	r3, #0
 811d5ee:	bfbb      	ittet	lt
 811d5f0:	425b      	neglt	r3, r3
 811d5f2:	f042 0202 	orrlt.w	r2, r2, #2
 811d5f6:	9307      	strge	r3, [sp, #28]
 811d5f8:	9307      	strlt	r3, [sp, #28]
 811d5fa:	bfb8      	it	lt
 811d5fc:	9204      	strlt	r2, [sp, #16]
 811d5fe:	7823      	ldrb	r3, [r4, #0]
 811d600:	2b2e      	cmp	r3, #46	@ 0x2e
 811d602:	d10a      	bne.n	811d61a <_vfiprintf_r+0x156>
 811d604:	7863      	ldrb	r3, [r4, #1]
 811d606:	2b2a      	cmp	r3, #42	@ 0x2a
 811d608:	d132      	bne.n	811d670 <_vfiprintf_r+0x1ac>
 811d60a:	9b03      	ldr	r3, [sp, #12]
 811d60c:	1d1a      	adds	r2, r3, #4
 811d60e:	681b      	ldr	r3, [r3, #0]
 811d610:	9203      	str	r2, [sp, #12]
 811d612:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 811d616:	3402      	adds	r4, #2
 811d618:	9305      	str	r3, [sp, #20]
 811d61a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 811d6f0 <_vfiprintf_r+0x22c>
 811d61e:	7821      	ldrb	r1, [r4, #0]
 811d620:	2203      	movs	r2, #3
 811d622:	4650      	mov	r0, sl
 811d624:	f7e2 fe5c 	bl	81002e0 <memchr>
 811d628:	b138      	cbz	r0, 811d63a <_vfiprintf_r+0x176>
 811d62a:	9b04      	ldr	r3, [sp, #16]
 811d62c:	eba0 000a 	sub.w	r0, r0, sl
 811d630:	2240      	movs	r2, #64	@ 0x40
 811d632:	4082      	lsls	r2, r0
 811d634:	4313      	orrs	r3, r2
 811d636:	3401      	adds	r4, #1
 811d638:	9304      	str	r3, [sp, #16]
 811d63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 811d63e:	4829      	ldr	r0, [pc, #164]	@ (811d6e4 <_vfiprintf_r+0x220>)
 811d640:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 811d644:	2206      	movs	r2, #6
 811d646:	f7e2 fe4b 	bl	81002e0 <memchr>
 811d64a:	2800      	cmp	r0, #0
 811d64c:	d03f      	beq.n	811d6ce <_vfiprintf_r+0x20a>
 811d64e:	4b26      	ldr	r3, [pc, #152]	@ (811d6e8 <_vfiprintf_r+0x224>)
 811d650:	bb1b      	cbnz	r3, 811d69a <_vfiprintf_r+0x1d6>
 811d652:	9b03      	ldr	r3, [sp, #12]
 811d654:	3307      	adds	r3, #7
 811d656:	f023 0307 	bic.w	r3, r3, #7
 811d65a:	3308      	adds	r3, #8
 811d65c:	9303      	str	r3, [sp, #12]
 811d65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811d660:	443b      	add	r3, r7
 811d662:	9309      	str	r3, [sp, #36]	@ 0x24
 811d664:	e76a      	b.n	811d53c <_vfiprintf_r+0x78>
 811d666:	fb0c 3202 	mla	r2, ip, r2, r3
 811d66a:	460c      	mov	r4, r1
 811d66c:	2001      	movs	r0, #1
 811d66e:	e7a8      	b.n	811d5c2 <_vfiprintf_r+0xfe>
 811d670:	2300      	movs	r3, #0
 811d672:	3401      	adds	r4, #1
 811d674:	9305      	str	r3, [sp, #20]
 811d676:	4619      	mov	r1, r3
 811d678:	f04f 0c0a 	mov.w	ip, #10
 811d67c:	4620      	mov	r0, r4
 811d67e:	f810 2b01 	ldrb.w	r2, [r0], #1
 811d682:	3a30      	subs	r2, #48	@ 0x30
 811d684:	2a09      	cmp	r2, #9
 811d686:	d903      	bls.n	811d690 <_vfiprintf_r+0x1cc>
 811d688:	2b00      	cmp	r3, #0
 811d68a:	d0c6      	beq.n	811d61a <_vfiprintf_r+0x156>
 811d68c:	9105      	str	r1, [sp, #20]
 811d68e:	e7c4      	b.n	811d61a <_vfiprintf_r+0x156>
 811d690:	fb0c 2101 	mla	r1, ip, r1, r2
 811d694:	4604      	mov	r4, r0
 811d696:	2301      	movs	r3, #1
 811d698:	e7f0      	b.n	811d67c <_vfiprintf_r+0x1b8>
 811d69a:	ab03      	add	r3, sp, #12
 811d69c:	9300      	str	r3, [sp, #0]
 811d69e:	462a      	mov	r2, r5
 811d6a0:	4b12      	ldr	r3, [pc, #72]	@ (811d6ec <_vfiprintf_r+0x228>)
 811d6a2:	a904      	add	r1, sp, #16
 811d6a4:	4630      	mov	r0, r6
 811d6a6:	f3af 8000 	nop.w
 811d6aa:	4607      	mov	r7, r0
 811d6ac:	1c78      	adds	r0, r7, #1
 811d6ae:	d1d6      	bne.n	811d65e <_vfiprintf_r+0x19a>
 811d6b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811d6b2:	07d9      	lsls	r1, r3, #31
 811d6b4:	d405      	bmi.n	811d6c2 <_vfiprintf_r+0x1fe>
 811d6b6:	89ab      	ldrh	r3, [r5, #12]
 811d6b8:	059a      	lsls	r2, r3, #22
 811d6ba:	d402      	bmi.n	811d6c2 <_vfiprintf_r+0x1fe>
 811d6bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811d6be:	f000 fe1b 	bl	811e2f8 <__retarget_lock_release_recursive>
 811d6c2:	89ab      	ldrh	r3, [r5, #12]
 811d6c4:	065b      	lsls	r3, r3, #25
 811d6c6:	f53f af1f 	bmi.w	811d508 <_vfiprintf_r+0x44>
 811d6ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 811d6cc:	e71e      	b.n	811d50c <_vfiprintf_r+0x48>
 811d6ce:	ab03      	add	r3, sp, #12
 811d6d0:	9300      	str	r3, [sp, #0]
 811d6d2:	462a      	mov	r2, r5
 811d6d4:	4b05      	ldr	r3, [pc, #20]	@ (811d6ec <_vfiprintf_r+0x228>)
 811d6d6:	a904      	add	r1, sp, #16
 811d6d8:	4630      	mov	r0, r6
 811d6da:	f000 f883 	bl	811d7e4 <_printf_i>
 811d6de:	e7e4      	b.n	811d6aa <_vfiprintf_r+0x1e6>
 811d6e0:	0812275c 	.word	0x0812275c
 811d6e4:	08122766 	.word	0x08122766
 811d6e8:	00000000 	.word	0x00000000
 811d6ec:	0811d49f 	.word	0x0811d49f
 811d6f0:	08122762 	.word	0x08122762

0811d6f4 <vfiprintf>:
 811d6f4:	4613      	mov	r3, r2
 811d6f6:	460a      	mov	r2, r1
 811d6f8:	4601      	mov	r1, r0
 811d6fa:	4802      	ldr	r0, [pc, #8]	@ (811d704 <vfiprintf+0x10>)
 811d6fc:	6800      	ldr	r0, [r0, #0]
 811d6fe:	f7ff bee1 	b.w	811d4c4 <_vfiprintf_r>
 811d702:	bf00      	nop
 811d704:	10000040 	.word	0x10000040

0811d708 <_printf_common>:
 811d708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 811d70c:	4616      	mov	r6, r2
 811d70e:	4698      	mov	r8, r3
 811d710:	688a      	ldr	r2, [r1, #8]
 811d712:	690b      	ldr	r3, [r1, #16]
 811d714:	f8dd 9020 	ldr.w	r9, [sp, #32]
 811d718:	4293      	cmp	r3, r2
 811d71a:	bfb8      	it	lt
 811d71c:	4613      	movlt	r3, r2
 811d71e:	6033      	str	r3, [r6, #0]
 811d720:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 811d724:	4607      	mov	r7, r0
 811d726:	460c      	mov	r4, r1
 811d728:	b10a      	cbz	r2, 811d72e <_printf_common+0x26>
 811d72a:	3301      	adds	r3, #1
 811d72c:	6033      	str	r3, [r6, #0]
 811d72e:	6823      	ldr	r3, [r4, #0]
 811d730:	0699      	lsls	r1, r3, #26
 811d732:	bf42      	ittt	mi
 811d734:	6833      	ldrmi	r3, [r6, #0]
 811d736:	3302      	addmi	r3, #2
 811d738:	6033      	strmi	r3, [r6, #0]
 811d73a:	6825      	ldr	r5, [r4, #0]
 811d73c:	f015 0506 	ands.w	r5, r5, #6
 811d740:	d106      	bne.n	811d750 <_printf_common+0x48>
 811d742:	f104 0a19 	add.w	sl, r4, #25
 811d746:	68e3      	ldr	r3, [r4, #12]
 811d748:	6832      	ldr	r2, [r6, #0]
 811d74a:	1a9b      	subs	r3, r3, r2
 811d74c:	42ab      	cmp	r3, r5
 811d74e:	dc26      	bgt.n	811d79e <_printf_common+0x96>
 811d750:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 811d754:	6822      	ldr	r2, [r4, #0]
 811d756:	3b00      	subs	r3, #0
 811d758:	bf18      	it	ne
 811d75a:	2301      	movne	r3, #1
 811d75c:	0692      	lsls	r2, r2, #26
 811d75e:	d42b      	bmi.n	811d7b8 <_printf_common+0xb0>
 811d760:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 811d764:	4641      	mov	r1, r8
 811d766:	4638      	mov	r0, r7
 811d768:	47c8      	blx	r9
 811d76a:	3001      	adds	r0, #1
 811d76c:	d01e      	beq.n	811d7ac <_printf_common+0xa4>
 811d76e:	6823      	ldr	r3, [r4, #0]
 811d770:	6922      	ldr	r2, [r4, #16]
 811d772:	f003 0306 	and.w	r3, r3, #6
 811d776:	2b04      	cmp	r3, #4
 811d778:	bf02      	ittt	eq
 811d77a:	68e5      	ldreq	r5, [r4, #12]
 811d77c:	6833      	ldreq	r3, [r6, #0]
 811d77e:	1aed      	subeq	r5, r5, r3
 811d780:	68a3      	ldr	r3, [r4, #8]
 811d782:	bf0c      	ite	eq
 811d784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 811d788:	2500      	movne	r5, #0
 811d78a:	4293      	cmp	r3, r2
 811d78c:	bfc4      	itt	gt
 811d78e:	1a9b      	subgt	r3, r3, r2
 811d790:	18ed      	addgt	r5, r5, r3
 811d792:	2600      	movs	r6, #0
 811d794:	341a      	adds	r4, #26
 811d796:	42b5      	cmp	r5, r6
 811d798:	d11a      	bne.n	811d7d0 <_printf_common+0xc8>
 811d79a:	2000      	movs	r0, #0
 811d79c:	e008      	b.n	811d7b0 <_printf_common+0xa8>
 811d79e:	2301      	movs	r3, #1
 811d7a0:	4652      	mov	r2, sl
 811d7a2:	4641      	mov	r1, r8
 811d7a4:	4638      	mov	r0, r7
 811d7a6:	47c8      	blx	r9
 811d7a8:	3001      	adds	r0, #1
 811d7aa:	d103      	bne.n	811d7b4 <_printf_common+0xac>
 811d7ac:	f04f 30ff 	mov.w	r0, #4294967295
 811d7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811d7b4:	3501      	adds	r5, #1
 811d7b6:	e7c6      	b.n	811d746 <_printf_common+0x3e>
 811d7b8:	18e1      	adds	r1, r4, r3
 811d7ba:	1c5a      	adds	r2, r3, #1
 811d7bc:	2030      	movs	r0, #48	@ 0x30
 811d7be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 811d7c2:	4422      	add	r2, r4
 811d7c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 811d7c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 811d7cc:	3302      	adds	r3, #2
 811d7ce:	e7c7      	b.n	811d760 <_printf_common+0x58>
 811d7d0:	2301      	movs	r3, #1
 811d7d2:	4622      	mov	r2, r4
 811d7d4:	4641      	mov	r1, r8
 811d7d6:	4638      	mov	r0, r7
 811d7d8:	47c8      	blx	r9
 811d7da:	3001      	adds	r0, #1
 811d7dc:	d0e6      	beq.n	811d7ac <_printf_common+0xa4>
 811d7de:	3601      	adds	r6, #1
 811d7e0:	e7d9      	b.n	811d796 <_printf_common+0x8e>
	...

0811d7e4 <_printf_i>:
 811d7e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 811d7e8:	7e0f      	ldrb	r7, [r1, #24]
 811d7ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 811d7ec:	2f78      	cmp	r7, #120	@ 0x78
 811d7ee:	4691      	mov	r9, r2
 811d7f0:	4680      	mov	r8, r0
 811d7f2:	460c      	mov	r4, r1
 811d7f4:	469a      	mov	sl, r3
 811d7f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 811d7fa:	d807      	bhi.n	811d80c <_printf_i+0x28>
 811d7fc:	2f62      	cmp	r7, #98	@ 0x62
 811d7fe:	d80a      	bhi.n	811d816 <_printf_i+0x32>
 811d800:	2f00      	cmp	r7, #0
 811d802:	f000 80d2 	beq.w	811d9aa <_printf_i+0x1c6>
 811d806:	2f58      	cmp	r7, #88	@ 0x58
 811d808:	f000 80b9 	beq.w	811d97e <_printf_i+0x19a>
 811d80c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 811d810:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 811d814:	e03a      	b.n	811d88c <_printf_i+0xa8>
 811d816:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 811d81a:	2b15      	cmp	r3, #21
 811d81c:	d8f6      	bhi.n	811d80c <_printf_i+0x28>
 811d81e:	a101      	add	r1, pc, #4	@ (adr r1, 811d824 <_printf_i+0x40>)
 811d820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 811d824:	0811d87d 	.word	0x0811d87d
 811d828:	0811d891 	.word	0x0811d891
 811d82c:	0811d80d 	.word	0x0811d80d
 811d830:	0811d80d 	.word	0x0811d80d
 811d834:	0811d80d 	.word	0x0811d80d
 811d838:	0811d80d 	.word	0x0811d80d
 811d83c:	0811d891 	.word	0x0811d891
 811d840:	0811d80d 	.word	0x0811d80d
 811d844:	0811d80d 	.word	0x0811d80d
 811d848:	0811d80d 	.word	0x0811d80d
 811d84c:	0811d80d 	.word	0x0811d80d
 811d850:	0811d991 	.word	0x0811d991
 811d854:	0811d8bb 	.word	0x0811d8bb
 811d858:	0811d94b 	.word	0x0811d94b
 811d85c:	0811d80d 	.word	0x0811d80d
 811d860:	0811d80d 	.word	0x0811d80d
 811d864:	0811d9b3 	.word	0x0811d9b3
 811d868:	0811d80d 	.word	0x0811d80d
 811d86c:	0811d8bb 	.word	0x0811d8bb
 811d870:	0811d80d 	.word	0x0811d80d
 811d874:	0811d80d 	.word	0x0811d80d
 811d878:	0811d953 	.word	0x0811d953
 811d87c:	6833      	ldr	r3, [r6, #0]
 811d87e:	1d1a      	adds	r2, r3, #4
 811d880:	681b      	ldr	r3, [r3, #0]
 811d882:	6032      	str	r2, [r6, #0]
 811d884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 811d888:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 811d88c:	2301      	movs	r3, #1
 811d88e:	e09d      	b.n	811d9cc <_printf_i+0x1e8>
 811d890:	6833      	ldr	r3, [r6, #0]
 811d892:	6820      	ldr	r0, [r4, #0]
 811d894:	1d19      	adds	r1, r3, #4
 811d896:	6031      	str	r1, [r6, #0]
 811d898:	0606      	lsls	r6, r0, #24
 811d89a:	d501      	bpl.n	811d8a0 <_printf_i+0xbc>
 811d89c:	681d      	ldr	r5, [r3, #0]
 811d89e:	e003      	b.n	811d8a8 <_printf_i+0xc4>
 811d8a0:	0645      	lsls	r5, r0, #25
 811d8a2:	d5fb      	bpl.n	811d89c <_printf_i+0xb8>
 811d8a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 811d8a8:	2d00      	cmp	r5, #0
 811d8aa:	da03      	bge.n	811d8b4 <_printf_i+0xd0>
 811d8ac:	232d      	movs	r3, #45	@ 0x2d
 811d8ae:	426d      	negs	r5, r5
 811d8b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 811d8b4:	4859      	ldr	r0, [pc, #356]	@ (811da1c <_printf_i+0x238>)
 811d8b6:	230a      	movs	r3, #10
 811d8b8:	e011      	b.n	811d8de <_printf_i+0xfa>
 811d8ba:	6821      	ldr	r1, [r4, #0]
 811d8bc:	6833      	ldr	r3, [r6, #0]
 811d8be:	0608      	lsls	r0, r1, #24
 811d8c0:	f853 5b04 	ldr.w	r5, [r3], #4
 811d8c4:	d402      	bmi.n	811d8cc <_printf_i+0xe8>
 811d8c6:	0649      	lsls	r1, r1, #25
 811d8c8:	bf48      	it	mi
 811d8ca:	b2ad      	uxthmi	r5, r5
 811d8cc:	2f6f      	cmp	r7, #111	@ 0x6f
 811d8ce:	4853      	ldr	r0, [pc, #332]	@ (811da1c <_printf_i+0x238>)
 811d8d0:	6033      	str	r3, [r6, #0]
 811d8d2:	bf14      	ite	ne
 811d8d4:	230a      	movne	r3, #10
 811d8d6:	2308      	moveq	r3, #8
 811d8d8:	2100      	movs	r1, #0
 811d8da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 811d8de:	6866      	ldr	r6, [r4, #4]
 811d8e0:	60a6      	str	r6, [r4, #8]
 811d8e2:	2e00      	cmp	r6, #0
 811d8e4:	bfa2      	ittt	ge
 811d8e6:	6821      	ldrge	r1, [r4, #0]
 811d8e8:	f021 0104 	bicge.w	r1, r1, #4
 811d8ec:	6021      	strge	r1, [r4, #0]
 811d8ee:	b90d      	cbnz	r5, 811d8f4 <_printf_i+0x110>
 811d8f0:	2e00      	cmp	r6, #0
 811d8f2:	d04b      	beq.n	811d98c <_printf_i+0x1a8>
 811d8f4:	4616      	mov	r6, r2
 811d8f6:	fbb5 f1f3 	udiv	r1, r5, r3
 811d8fa:	fb03 5711 	mls	r7, r3, r1, r5
 811d8fe:	5dc7      	ldrb	r7, [r0, r7]
 811d900:	f806 7d01 	strb.w	r7, [r6, #-1]!
 811d904:	462f      	mov	r7, r5
 811d906:	42bb      	cmp	r3, r7
 811d908:	460d      	mov	r5, r1
 811d90a:	d9f4      	bls.n	811d8f6 <_printf_i+0x112>
 811d90c:	2b08      	cmp	r3, #8
 811d90e:	d10b      	bne.n	811d928 <_printf_i+0x144>
 811d910:	6823      	ldr	r3, [r4, #0]
 811d912:	07df      	lsls	r7, r3, #31
 811d914:	d508      	bpl.n	811d928 <_printf_i+0x144>
 811d916:	6923      	ldr	r3, [r4, #16]
 811d918:	6861      	ldr	r1, [r4, #4]
 811d91a:	4299      	cmp	r1, r3
 811d91c:	bfde      	ittt	le
 811d91e:	2330      	movle	r3, #48	@ 0x30
 811d920:	f806 3c01 	strble.w	r3, [r6, #-1]
 811d924:	f106 36ff 	addle.w	r6, r6, #4294967295
 811d928:	1b92      	subs	r2, r2, r6
 811d92a:	6122      	str	r2, [r4, #16]
 811d92c:	f8cd a000 	str.w	sl, [sp]
 811d930:	464b      	mov	r3, r9
 811d932:	aa03      	add	r2, sp, #12
 811d934:	4621      	mov	r1, r4
 811d936:	4640      	mov	r0, r8
 811d938:	f7ff fee6 	bl	811d708 <_printf_common>
 811d93c:	3001      	adds	r0, #1
 811d93e:	d14a      	bne.n	811d9d6 <_printf_i+0x1f2>
 811d940:	f04f 30ff 	mov.w	r0, #4294967295
 811d944:	b004      	add	sp, #16
 811d946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811d94a:	6823      	ldr	r3, [r4, #0]
 811d94c:	f043 0320 	orr.w	r3, r3, #32
 811d950:	6023      	str	r3, [r4, #0]
 811d952:	4833      	ldr	r0, [pc, #204]	@ (811da20 <_printf_i+0x23c>)
 811d954:	2778      	movs	r7, #120	@ 0x78
 811d956:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 811d95a:	6823      	ldr	r3, [r4, #0]
 811d95c:	6831      	ldr	r1, [r6, #0]
 811d95e:	061f      	lsls	r7, r3, #24
 811d960:	f851 5b04 	ldr.w	r5, [r1], #4
 811d964:	d402      	bmi.n	811d96c <_printf_i+0x188>
 811d966:	065f      	lsls	r7, r3, #25
 811d968:	bf48      	it	mi
 811d96a:	b2ad      	uxthmi	r5, r5
 811d96c:	6031      	str	r1, [r6, #0]
 811d96e:	07d9      	lsls	r1, r3, #31
 811d970:	bf44      	itt	mi
 811d972:	f043 0320 	orrmi.w	r3, r3, #32
 811d976:	6023      	strmi	r3, [r4, #0]
 811d978:	b11d      	cbz	r5, 811d982 <_printf_i+0x19e>
 811d97a:	2310      	movs	r3, #16
 811d97c:	e7ac      	b.n	811d8d8 <_printf_i+0xf4>
 811d97e:	4827      	ldr	r0, [pc, #156]	@ (811da1c <_printf_i+0x238>)
 811d980:	e7e9      	b.n	811d956 <_printf_i+0x172>
 811d982:	6823      	ldr	r3, [r4, #0]
 811d984:	f023 0320 	bic.w	r3, r3, #32
 811d988:	6023      	str	r3, [r4, #0]
 811d98a:	e7f6      	b.n	811d97a <_printf_i+0x196>
 811d98c:	4616      	mov	r6, r2
 811d98e:	e7bd      	b.n	811d90c <_printf_i+0x128>
 811d990:	6833      	ldr	r3, [r6, #0]
 811d992:	6825      	ldr	r5, [r4, #0]
 811d994:	6961      	ldr	r1, [r4, #20]
 811d996:	1d18      	adds	r0, r3, #4
 811d998:	6030      	str	r0, [r6, #0]
 811d99a:	062e      	lsls	r6, r5, #24
 811d99c:	681b      	ldr	r3, [r3, #0]
 811d99e:	d501      	bpl.n	811d9a4 <_printf_i+0x1c0>
 811d9a0:	6019      	str	r1, [r3, #0]
 811d9a2:	e002      	b.n	811d9aa <_printf_i+0x1c6>
 811d9a4:	0668      	lsls	r0, r5, #25
 811d9a6:	d5fb      	bpl.n	811d9a0 <_printf_i+0x1bc>
 811d9a8:	8019      	strh	r1, [r3, #0]
 811d9aa:	2300      	movs	r3, #0
 811d9ac:	6123      	str	r3, [r4, #16]
 811d9ae:	4616      	mov	r6, r2
 811d9b0:	e7bc      	b.n	811d92c <_printf_i+0x148>
 811d9b2:	6833      	ldr	r3, [r6, #0]
 811d9b4:	1d1a      	adds	r2, r3, #4
 811d9b6:	6032      	str	r2, [r6, #0]
 811d9b8:	681e      	ldr	r6, [r3, #0]
 811d9ba:	6862      	ldr	r2, [r4, #4]
 811d9bc:	2100      	movs	r1, #0
 811d9be:	4630      	mov	r0, r6
 811d9c0:	f7e2 fc8e 	bl	81002e0 <memchr>
 811d9c4:	b108      	cbz	r0, 811d9ca <_printf_i+0x1e6>
 811d9c6:	1b80      	subs	r0, r0, r6
 811d9c8:	6060      	str	r0, [r4, #4]
 811d9ca:	6863      	ldr	r3, [r4, #4]
 811d9cc:	6123      	str	r3, [r4, #16]
 811d9ce:	2300      	movs	r3, #0
 811d9d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 811d9d4:	e7aa      	b.n	811d92c <_printf_i+0x148>
 811d9d6:	6923      	ldr	r3, [r4, #16]
 811d9d8:	4632      	mov	r2, r6
 811d9da:	4649      	mov	r1, r9
 811d9dc:	4640      	mov	r0, r8
 811d9de:	47d0      	blx	sl
 811d9e0:	3001      	adds	r0, #1
 811d9e2:	d0ad      	beq.n	811d940 <_printf_i+0x15c>
 811d9e4:	6823      	ldr	r3, [r4, #0]
 811d9e6:	079b      	lsls	r3, r3, #30
 811d9e8:	d413      	bmi.n	811da12 <_printf_i+0x22e>
 811d9ea:	68e0      	ldr	r0, [r4, #12]
 811d9ec:	9b03      	ldr	r3, [sp, #12]
 811d9ee:	4298      	cmp	r0, r3
 811d9f0:	bfb8      	it	lt
 811d9f2:	4618      	movlt	r0, r3
 811d9f4:	e7a6      	b.n	811d944 <_printf_i+0x160>
 811d9f6:	2301      	movs	r3, #1
 811d9f8:	4632      	mov	r2, r6
 811d9fa:	4649      	mov	r1, r9
 811d9fc:	4640      	mov	r0, r8
 811d9fe:	47d0      	blx	sl
 811da00:	3001      	adds	r0, #1
 811da02:	d09d      	beq.n	811d940 <_printf_i+0x15c>
 811da04:	3501      	adds	r5, #1
 811da06:	68e3      	ldr	r3, [r4, #12]
 811da08:	9903      	ldr	r1, [sp, #12]
 811da0a:	1a5b      	subs	r3, r3, r1
 811da0c:	42ab      	cmp	r3, r5
 811da0e:	dcf2      	bgt.n	811d9f6 <_printf_i+0x212>
 811da10:	e7eb      	b.n	811d9ea <_printf_i+0x206>
 811da12:	2500      	movs	r5, #0
 811da14:	f104 0619 	add.w	r6, r4, #25
 811da18:	e7f5      	b.n	811da06 <_printf_i+0x222>
 811da1a:	bf00      	nop
 811da1c:	0812276d 	.word	0x0812276d
 811da20:	0812277e 	.word	0x0812277e

0811da24 <__sflush_r>:
 811da24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 811da28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811da2c:	0716      	lsls	r6, r2, #28
 811da2e:	4605      	mov	r5, r0
 811da30:	460c      	mov	r4, r1
 811da32:	d454      	bmi.n	811dade <__sflush_r+0xba>
 811da34:	684b      	ldr	r3, [r1, #4]
 811da36:	2b00      	cmp	r3, #0
 811da38:	dc02      	bgt.n	811da40 <__sflush_r+0x1c>
 811da3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 811da3c:	2b00      	cmp	r3, #0
 811da3e:	dd48      	ble.n	811dad2 <__sflush_r+0xae>
 811da40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 811da42:	2e00      	cmp	r6, #0
 811da44:	d045      	beq.n	811dad2 <__sflush_r+0xae>
 811da46:	2300      	movs	r3, #0
 811da48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 811da4c:	682f      	ldr	r7, [r5, #0]
 811da4e:	6a21      	ldr	r1, [r4, #32]
 811da50:	602b      	str	r3, [r5, #0]
 811da52:	d030      	beq.n	811dab6 <__sflush_r+0x92>
 811da54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 811da56:	89a3      	ldrh	r3, [r4, #12]
 811da58:	0759      	lsls	r1, r3, #29
 811da5a:	d505      	bpl.n	811da68 <__sflush_r+0x44>
 811da5c:	6863      	ldr	r3, [r4, #4]
 811da5e:	1ad2      	subs	r2, r2, r3
 811da60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 811da62:	b10b      	cbz	r3, 811da68 <__sflush_r+0x44>
 811da64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 811da66:	1ad2      	subs	r2, r2, r3
 811da68:	2300      	movs	r3, #0
 811da6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 811da6c:	6a21      	ldr	r1, [r4, #32]
 811da6e:	4628      	mov	r0, r5
 811da70:	47b0      	blx	r6
 811da72:	1c43      	adds	r3, r0, #1
 811da74:	89a3      	ldrh	r3, [r4, #12]
 811da76:	d106      	bne.n	811da86 <__sflush_r+0x62>
 811da78:	6829      	ldr	r1, [r5, #0]
 811da7a:	291d      	cmp	r1, #29
 811da7c:	d82b      	bhi.n	811dad6 <__sflush_r+0xb2>
 811da7e:	4a2a      	ldr	r2, [pc, #168]	@ (811db28 <__sflush_r+0x104>)
 811da80:	410a      	asrs	r2, r1
 811da82:	07d6      	lsls	r6, r2, #31
 811da84:	d427      	bmi.n	811dad6 <__sflush_r+0xb2>
 811da86:	2200      	movs	r2, #0
 811da88:	6062      	str	r2, [r4, #4]
 811da8a:	04d9      	lsls	r1, r3, #19
 811da8c:	6922      	ldr	r2, [r4, #16]
 811da8e:	6022      	str	r2, [r4, #0]
 811da90:	d504      	bpl.n	811da9c <__sflush_r+0x78>
 811da92:	1c42      	adds	r2, r0, #1
 811da94:	d101      	bne.n	811da9a <__sflush_r+0x76>
 811da96:	682b      	ldr	r3, [r5, #0]
 811da98:	b903      	cbnz	r3, 811da9c <__sflush_r+0x78>
 811da9a:	6560      	str	r0, [r4, #84]	@ 0x54
 811da9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811da9e:	602f      	str	r7, [r5, #0]
 811daa0:	b1b9      	cbz	r1, 811dad2 <__sflush_r+0xae>
 811daa2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 811daa6:	4299      	cmp	r1, r3
 811daa8:	d002      	beq.n	811dab0 <__sflush_r+0x8c>
 811daaa:	4628      	mov	r0, r5
 811daac:	f000 fc52 	bl	811e354 <_free_r>
 811dab0:	2300      	movs	r3, #0
 811dab2:	6363      	str	r3, [r4, #52]	@ 0x34
 811dab4:	e00d      	b.n	811dad2 <__sflush_r+0xae>
 811dab6:	2301      	movs	r3, #1
 811dab8:	4628      	mov	r0, r5
 811daba:	47b0      	blx	r6
 811dabc:	4602      	mov	r2, r0
 811dabe:	1c50      	adds	r0, r2, #1
 811dac0:	d1c9      	bne.n	811da56 <__sflush_r+0x32>
 811dac2:	682b      	ldr	r3, [r5, #0]
 811dac4:	2b00      	cmp	r3, #0
 811dac6:	d0c6      	beq.n	811da56 <__sflush_r+0x32>
 811dac8:	2b1d      	cmp	r3, #29
 811daca:	d001      	beq.n	811dad0 <__sflush_r+0xac>
 811dacc:	2b16      	cmp	r3, #22
 811dace:	d11e      	bne.n	811db0e <__sflush_r+0xea>
 811dad0:	602f      	str	r7, [r5, #0]
 811dad2:	2000      	movs	r0, #0
 811dad4:	e022      	b.n	811db1c <__sflush_r+0xf8>
 811dad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811dada:	b21b      	sxth	r3, r3
 811dadc:	e01b      	b.n	811db16 <__sflush_r+0xf2>
 811dade:	690f      	ldr	r7, [r1, #16]
 811dae0:	2f00      	cmp	r7, #0
 811dae2:	d0f6      	beq.n	811dad2 <__sflush_r+0xae>
 811dae4:	0793      	lsls	r3, r2, #30
 811dae6:	680e      	ldr	r6, [r1, #0]
 811dae8:	bf08      	it	eq
 811daea:	694b      	ldreq	r3, [r1, #20]
 811daec:	600f      	str	r7, [r1, #0]
 811daee:	bf18      	it	ne
 811daf0:	2300      	movne	r3, #0
 811daf2:	eba6 0807 	sub.w	r8, r6, r7
 811daf6:	608b      	str	r3, [r1, #8]
 811daf8:	f1b8 0f00 	cmp.w	r8, #0
 811dafc:	dde9      	ble.n	811dad2 <__sflush_r+0xae>
 811dafe:	6a21      	ldr	r1, [r4, #32]
 811db00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 811db02:	4643      	mov	r3, r8
 811db04:	463a      	mov	r2, r7
 811db06:	4628      	mov	r0, r5
 811db08:	47b0      	blx	r6
 811db0a:	2800      	cmp	r0, #0
 811db0c:	dc08      	bgt.n	811db20 <__sflush_r+0xfc>
 811db0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811db12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811db16:	81a3      	strh	r3, [r4, #12]
 811db18:	f04f 30ff 	mov.w	r0, #4294967295
 811db1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811db20:	4407      	add	r7, r0
 811db22:	eba8 0800 	sub.w	r8, r8, r0
 811db26:	e7e7      	b.n	811daf8 <__sflush_r+0xd4>
 811db28:	dfbffffe 	.word	0xdfbffffe

0811db2c <_fflush_r>:
 811db2c:	b538      	push	{r3, r4, r5, lr}
 811db2e:	690b      	ldr	r3, [r1, #16]
 811db30:	4605      	mov	r5, r0
 811db32:	460c      	mov	r4, r1
 811db34:	b913      	cbnz	r3, 811db3c <_fflush_r+0x10>
 811db36:	2500      	movs	r5, #0
 811db38:	4628      	mov	r0, r5
 811db3a:	bd38      	pop	{r3, r4, r5, pc}
 811db3c:	b118      	cbz	r0, 811db46 <_fflush_r+0x1a>
 811db3e:	6a03      	ldr	r3, [r0, #32]
 811db40:	b90b      	cbnz	r3, 811db46 <_fflush_r+0x1a>
 811db42:	f000 f8bb 	bl	811dcbc <__sinit>
 811db46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811db4a:	2b00      	cmp	r3, #0
 811db4c:	d0f3      	beq.n	811db36 <_fflush_r+0xa>
 811db4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 811db50:	07d0      	lsls	r0, r2, #31
 811db52:	d404      	bmi.n	811db5e <_fflush_r+0x32>
 811db54:	0599      	lsls	r1, r3, #22
 811db56:	d402      	bmi.n	811db5e <_fflush_r+0x32>
 811db58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811db5a:	f000 fbcc 	bl	811e2f6 <__retarget_lock_acquire_recursive>
 811db5e:	4628      	mov	r0, r5
 811db60:	4621      	mov	r1, r4
 811db62:	f7ff ff5f 	bl	811da24 <__sflush_r>
 811db66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 811db68:	07da      	lsls	r2, r3, #31
 811db6a:	4605      	mov	r5, r0
 811db6c:	d4e4      	bmi.n	811db38 <_fflush_r+0xc>
 811db6e:	89a3      	ldrh	r3, [r4, #12]
 811db70:	059b      	lsls	r3, r3, #22
 811db72:	d4e1      	bmi.n	811db38 <_fflush_r+0xc>
 811db74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811db76:	f000 fbbf 	bl	811e2f8 <__retarget_lock_release_recursive>
 811db7a:	e7dd      	b.n	811db38 <_fflush_r+0xc>

0811db7c <fflush>:
 811db7c:	4601      	mov	r1, r0
 811db7e:	b920      	cbnz	r0, 811db8a <fflush+0xe>
 811db80:	4a04      	ldr	r2, [pc, #16]	@ (811db94 <fflush+0x18>)
 811db82:	4905      	ldr	r1, [pc, #20]	@ (811db98 <fflush+0x1c>)
 811db84:	4805      	ldr	r0, [pc, #20]	@ (811db9c <fflush+0x20>)
 811db86:	f000 b8b1 	b.w	811dcec <_fwalk_sglue>
 811db8a:	4b05      	ldr	r3, [pc, #20]	@ (811dba0 <fflush+0x24>)
 811db8c:	6818      	ldr	r0, [r3, #0]
 811db8e:	f7ff bfcd 	b.w	811db2c <_fflush_r>
 811db92:	bf00      	nop
 811db94:	10000034 	.word	0x10000034
 811db98:	0811db2d 	.word	0x0811db2d
 811db9c:	10000044 	.word	0x10000044
 811dba0:	10000040 	.word	0x10000040

0811dba4 <std>:
 811dba4:	2300      	movs	r3, #0
 811dba6:	b510      	push	{r4, lr}
 811dba8:	4604      	mov	r4, r0
 811dbaa:	e9c0 3300 	strd	r3, r3, [r0]
 811dbae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 811dbb2:	6083      	str	r3, [r0, #8]
 811dbb4:	8181      	strh	r1, [r0, #12]
 811dbb6:	6643      	str	r3, [r0, #100]	@ 0x64
 811dbb8:	81c2      	strh	r2, [r0, #14]
 811dbba:	6183      	str	r3, [r0, #24]
 811dbbc:	4619      	mov	r1, r3
 811dbbe:	2208      	movs	r2, #8
 811dbc0:	305c      	adds	r0, #92	@ 0x5c
 811dbc2:	f000 fa4b 	bl	811e05c <memset>
 811dbc6:	4b0d      	ldr	r3, [pc, #52]	@ (811dbfc <std+0x58>)
 811dbc8:	6263      	str	r3, [r4, #36]	@ 0x24
 811dbca:	4b0d      	ldr	r3, [pc, #52]	@ (811dc00 <std+0x5c>)
 811dbcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 811dbce:	4b0d      	ldr	r3, [pc, #52]	@ (811dc04 <std+0x60>)
 811dbd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 811dbd2:	4b0d      	ldr	r3, [pc, #52]	@ (811dc08 <std+0x64>)
 811dbd4:	6323      	str	r3, [r4, #48]	@ 0x30
 811dbd6:	4b0d      	ldr	r3, [pc, #52]	@ (811dc0c <std+0x68>)
 811dbd8:	6224      	str	r4, [r4, #32]
 811dbda:	429c      	cmp	r4, r3
 811dbdc:	d006      	beq.n	811dbec <std+0x48>
 811dbde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 811dbe2:	4294      	cmp	r4, r2
 811dbe4:	d002      	beq.n	811dbec <std+0x48>
 811dbe6:	33d0      	adds	r3, #208	@ 0xd0
 811dbe8:	429c      	cmp	r4, r3
 811dbea:	d105      	bne.n	811dbf8 <std+0x54>
 811dbec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 811dbf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811dbf4:	f000 bb7e 	b.w	811e2f4 <__retarget_lock_init_recursive>
 811dbf8:	bd10      	pop	{r4, pc}
 811dbfa:	bf00      	nop
 811dbfc:	0811de55 	.word	0x0811de55
 811dc00:	0811de7b 	.word	0x0811de7b
 811dc04:	0811deb3 	.word	0x0811deb3
 811dc08:	0811ded7 	.word	0x0811ded7
 811dc0c:	100121a4 	.word	0x100121a4

0811dc10 <stdio_exit_handler>:
 811dc10:	4a02      	ldr	r2, [pc, #8]	@ (811dc1c <stdio_exit_handler+0xc>)
 811dc12:	4903      	ldr	r1, [pc, #12]	@ (811dc20 <stdio_exit_handler+0x10>)
 811dc14:	4803      	ldr	r0, [pc, #12]	@ (811dc24 <stdio_exit_handler+0x14>)
 811dc16:	f000 b869 	b.w	811dcec <_fwalk_sglue>
 811dc1a:	bf00      	nop
 811dc1c:	10000034 	.word	0x10000034
 811dc20:	0811db2d 	.word	0x0811db2d
 811dc24:	10000044 	.word	0x10000044

0811dc28 <cleanup_stdio>:
 811dc28:	6841      	ldr	r1, [r0, #4]
 811dc2a:	4b0c      	ldr	r3, [pc, #48]	@ (811dc5c <cleanup_stdio+0x34>)
 811dc2c:	4299      	cmp	r1, r3
 811dc2e:	b510      	push	{r4, lr}
 811dc30:	4604      	mov	r4, r0
 811dc32:	d001      	beq.n	811dc38 <cleanup_stdio+0x10>
 811dc34:	f7ff ff7a 	bl	811db2c <_fflush_r>
 811dc38:	68a1      	ldr	r1, [r4, #8]
 811dc3a:	4b09      	ldr	r3, [pc, #36]	@ (811dc60 <cleanup_stdio+0x38>)
 811dc3c:	4299      	cmp	r1, r3
 811dc3e:	d002      	beq.n	811dc46 <cleanup_stdio+0x1e>
 811dc40:	4620      	mov	r0, r4
 811dc42:	f7ff ff73 	bl	811db2c <_fflush_r>
 811dc46:	68e1      	ldr	r1, [r4, #12]
 811dc48:	4b06      	ldr	r3, [pc, #24]	@ (811dc64 <cleanup_stdio+0x3c>)
 811dc4a:	4299      	cmp	r1, r3
 811dc4c:	d004      	beq.n	811dc58 <cleanup_stdio+0x30>
 811dc4e:	4620      	mov	r0, r4
 811dc50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811dc54:	f7ff bf6a 	b.w	811db2c <_fflush_r>
 811dc58:	bd10      	pop	{r4, pc}
 811dc5a:	bf00      	nop
 811dc5c:	100121a4 	.word	0x100121a4
 811dc60:	1001220c 	.word	0x1001220c
 811dc64:	10012274 	.word	0x10012274

0811dc68 <global_stdio_init.part.0>:
 811dc68:	b510      	push	{r4, lr}
 811dc6a:	4b0b      	ldr	r3, [pc, #44]	@ (811dc98 <global_stdio_init.part.0+0x30>)
 811dc6c:	4c0b      	ldr	r4, [pc, #44]	@ (811dc9c <global_stdio_init.part.0+0x34>)
 811dc6e:	4a0c      	ldr	r2, [pc, #48]	@ (811dca0 <global_stdio_init.part.0+0x38>)
 811dc70:	601a      	str	r2, [r3, #0]
 811dc72:	4620      	mov	r0, r4
 811dc74:	2200      	movs	r2, #0
 811dc76:	2104      	movs	r1, #4
 811dc78:	f7ff ff94 	bl	811dba4 <std>
 811dc7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 811dc80:	2201      	movs	r2, #1
 811dc82:	2109      	movs	r1, #9
 811dc84:	f7ff ff8e 	bl	811dba4 <std>
 811dc88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 811dc8c:	2202      	movs	r2, #2
 811dc8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811dc92:	2112      	movs	r1, #18
 811dc94:	f7ff bf86 	b.w	811dba4 <std>
 811dc98:	100122dc 	.word	0x100122dc
 811dc9c:	100121a4 	.word	0x100121a4
 811dca0:	0811dc11 	.word	0x0811dc11

0811dca4 <__sfp_lock_acquire>:
 811dca4:	4801      	ldr	r0, [pc, #4]	@ (811dcac <__sfp_lock_acquire+0x8>)
 811dca6:	f000 bb26 	b.w	811e2f6 <__retarget_lock_acquire_recursive>
 811dcaa:	bf00      	nop
 811dcac:	100122e5 	.word	0x100122e5

0811dcb0 <__sfp_lock_release>:
 811dcb0:	4801      	ldr	r0, [pc, #4]	@ (811dcb8 <__sfp_lock_release+0x8>)
 811dcb2:	f000 bb21 	b.w	811e2f8 <__retarget_lock_release_recursive>
 811dcb6:	bf00      	nop
 811dcb8:	100122e5 	.word	0x100122e5

0811dcbc <__sinit>:
 811dcbc:	b510      	push	{r4, lr}
 811dcbe:	4604      	mov	r4, r0
 811dcc0:	f7ff fff0 	bl	811dca4 <__sfp_lock_acquire>
 811dcc4:	6a23      	ldr	r3, [r4, #32]
 811dcc6:	b11b      	cbz	r3, 811dcd0 <__sinit+0x14>
 811dcc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811dccc:	f7ff bff0 	b.w	811dcb0 <__sfp_lock_release>
 811dcd0:	4b04      	ldr	r3, [pc, #16]	@ (811dce4 <__sinit+0x28>)
 811dcd2:	6223      	str	r3, [r4, #32]
 811dcd4:	4b04      	ldr	r3, [pc, #16]	@ (811dce8 <__sinit+0x2c>)
 811dcd6:	681b      	ldr	r3, [r3, #0]
 811dcd8:	2b00      	cmp	r3, #0
 811dcda:	d1f5      	bne.n	811dcc8 <__sinit+0xc>
 811dcdc:	f7ff ffc4 	bl	811dc68 <global_stdio_init.part.0>
 811dce0:	e7f2      	b.n	811dcc8 <__sinit+0xc>
 811dce2:	bf00      	nop
 811dce4:	0811dc29 	.word	0x0811dc29
 811dce8:	100122dc 	.word	0x100122dc

0811dcec <_fwalk_sglue>:
 811dcec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811dcf0:	4607      	mov	r7, r0
 811dcf2:	4688      	mov	r8, r1
 811dcf4:	4614      	mov	r4, r2
 811dcf6:	2600      	movs	r6, #0
 811dcf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 811dcfc:	f1b9 0901 	subs.w	r9, r9, #1
 811dd00:	d505      	bpl.n	811dd0e <_fwalk_sglue+0x22>
 811dd02:	6824      	ldr	r4, [r4, #0]
 811dd04:	2c00      	cmp	r4, #0
 811dd06:	d1f7      	bne.n	811dcf8 <_fwalk_sglue+0xc>
 811dd08:	4630      	mov	r0, r6
 811dd0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811dd0e:	89ab      	ldrh	r3, [r5, #12]
 811dd10:	2b01      	cmp	r3, #1
 811dd12:	d907      	bls.n	811dd24 <_fwalk_sglue+0x38>
 811dd14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 811dd18:	3301      	adds	r3, #1
 811dd1a:	d003      	beq.n	811dd24 <_fwalk_sglue+0x38>
 811dd1c:	4629      	mov	r1, r5
 811dd1e:	4638      	mov	r0, r7
 811dd20:	47c0      	blx	r8
 811dd22:	4306      	orrs	r6, r0
 811dd24:	3568      	adds	r5, #104	@ 0x68
 811dd26:	e7e9      	b.n	811dcfc <_fwalk_sglue+0x10>

0811dd28 <_fwrite_r>:
 811dd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 811dd2c:	9c08      	ldr	r4, [sp, #32]
 811dd2e:	468a      	mov	sl, r1
 811dd30:	4690      	mov	r8, r2
 811dd32:	fb02 f903 	mul.w	r9, r2, r3
 811dd36:	4606      	mov	r6, r0
 811dd38:	b118      	cbz	r0, 811dd42 <_fwrite_r+0x1a>
 811dd3a:	6a03      	ldr	r3, [r0, #32]
 811dd3c:	b90b      	cbnz	r3, 811dd42 <_fwrite_r+0x1a>
 811dd3e:	f7ff ffbd 	bl	811dcbc <__sinit>
 811dd42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 811dd44:	07dd      	lsls	r5, r3, #31
 811dd46:	d405      	bmi.n	811dd54 <_fwrite_r+0x2c>
 811dd48:	89a3      	ldrh	r3, [r4, #12]
 811dd4a:	0598      	lsls	r0, r3, #22
 811dd4c:	d402      	bmi.n	811dd54 <_fwrite_r+0x2c>
 811dd4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811dd50:	f000 fad1 	bl	811e2f6 <__retarget_lock_acquire_recursive>
 811dd54:	89a3      	ldrh	r3, [r4, #12]
 811dd56:	0719      	lsls	r1, r3, #28
 811dd58:	d516      	bpl.n	811dd88 <_fwrite_r+0x60>
 811dd5a:	6923      	ldr	r3, [r4, #16]
 811dd5c:	b1a3      	cbz	r3, 811dd88 <_fwrite_r+0x60>
 811dd5e:	2500      	movs	r5, #0
 811dd60:	454d      	cmp	r5, r9
 811dd62:	d01f      	beq.n	811dda4 <_fwrite_r+0x7c>
 811dd64:	68a7      	ldr	r7, [r4, #8]
 811dd66:	f81a 1005 	ldrb.w	r1, [sl, r5]
 811dd6a:	3f01      	subs	r7, #1
 811dd6c:	2f00      	cmp	r7, #0
 811dd6e:	60a7      	str	r7, [r4, #8]
 811dd70:	da04      	bge.n	811dd7c <_fwrite_r+0x54>
 811dd72:	69a3      	ldr	r3, [r4, #24]
 811dd74:	429f      	cmp	r7, r3
 811dd76:	db0f      	blt.n	811dd98 <_fwrite_r+0x70>
 811dd78:	290a      	cmp	r1, #10
 811dd7a:	d00d      	beq.n	811dd98 <_fwrite_r+0x70>
 811dd7c:	6823      	ldr	r3, [r4, #0]
 811dd7e:	1c5a      	adds	r2, r3, #1
 811dd80:	6022      	str	r2, [r4, #0]
 811dd82:	7019      	strb	r1, [r3, #0]
 811dd84:	3501      	adds	r5, #1
 811dd86:	e7eb      	b.n	811dd60 <_fwrite_r+0x38>
 811dd88:	4621      	mov	r1, r4
 811dd8a:	4630      	mov	r0, r6
 811dd8c:	f000 f8e6 	bl	811df5c <__swsetup_r>
 811dd90:	2800      	cmp	r0, #0
 811dd92:	d0e4      	beq.n	811dd5e <_fwrite_r+0x36>
 811dd94:	2500      	movs	r5, #0
 811dd96:	e005      	b.n	811dda4 <_fwrite_r+0x7c>
 811dd98:	4622      	mov	r2, r4
 811dd9a:	4630      	mov	r0, r6
 811dd9c:	f000 f89f 	bl	811dede <__swbuf_r>
 811dda0:	3001      	adds	r0, #1
 811dda2:	d1ef      	bne.n	811dd84 <_fwrite_r+0x5c>
 811dda4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 811dda6:	07da      	lsls	r2, r3, #31
 811dda8:	d405      	bmi.n	811ddb6 <_fwrite_r+0x8e>
 811ddaa:	89a3      	ldrh	r3, [r4, #12]
 811ddac:	059b      	lsls	r3, r3, #22
 811ddae:	d402      	bmi.n	811ddb6 <_fwrite_r+0x8e>
 811ddb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811ddb2:	f000 faa1 	bl	811e2f8 <__retarget_lock_release_recursive>
 811ddb6:	fbb5 f0f8 	udiv	r0, r5, r8
 811ddba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0811ddc0 <fwrite>:
 811ddc0:	b507      	push	{r0, r1, r2, lr}
 811ddc2:	9300      	str	r3, [sp, #0]
 811ddc4:	4613      	mov	r3, r2
 811ddc6:	460a      	mov	r2, r1
 811ddc8:	4601      	mov	r1, r0
 811ddca:	4803      	ldr	r0, [pc, #12]	@ (811ddd8 <fwrite+0x18>)
 811ddcc:	6800      	ldr	r0, [r0, #0]
 811ddce:	f7ff ffab 	bl	811dd28 <_fwrite_r>
 811ddd2:	b003      	add	sp, #12
 811ddd4:	f85d fb04 	ldr.w	pc, [sp], #4
 811ddd8:	10000040 	.word	0x10000040

0811dddc <iprintf>:
 811dddc:	b40f      	push	{r0, r1, r2, r3}
 811ddde:	b507      	push	{r0, r1, r2, lr}
 811dde0:	4906      	ldr	r1, [pc, #24]	@ (811ddfc <iprintf+0x20>)
 811dde2:	ab04      	add	r3, sp, #16
 811dde4:	6808      	ldr	r0, [r1, #0]
 811dde6:	f853 2b04 	ldr.w	r2, [r3], #4
 811ddea:	6881      	ldr	r1, [r0, #8]
 811ddec:	9301      	str	r3, [sp, #4]
 811ddee:	f7ff fb69 	bl	811d4c4 <_vfiprintf_r>
 811ddf2:	b003      	add	sp, #12
 811ddf4:	f85d eb04 	ldr.w	lr, [sp], #4
 811ddf8:	b004      	add	sp, #16
 811ddfa:	4770      	bx	lr
 811ddfc:	10000040 	.word	0x10000040

0811de00 <siscanf>:
 811de00:	b40e      	push	{r1, r2, r3}
 811de02:	b530      	push	{r4, r5, lr}
 811de04:	b09c      	sub	sp, #112	@ 0x70
 811de06:	ac1f      	add	r4, sp, #124	@ 0x7c
 811de08:	f44f 7201 	mov.w	r2, #516	@ 0x204
 811de0c:	f854 5b04 	ldr.w	r5, [r4], #4
 811de10:	f8ad 2014 	strh.w	r2, [sp, #20]
 811de14:	9002      	str	r0, [sp, #8]
 811de16:	9006      	str	r0, [sp, #24]
 811de18:	f7e2 fab2 	bl	8100380 <strlen>
 811de1c:	4b0b      	ldr	r3, [pc, #44]	@ (811de4c <siscanf+0x4c>)
 811de1e:	9003      	str	r0, [sp, #12]
 811de20:	9007      	str	r0, [sp, #28]
 811de22:	930b      	str	r3, [sp, #44]	@ 0x2c
 811de24:	480a      	ldr	r0, [pc, #40]	@ (811de50 <siscanf+0x50>)
 811de26:	9401      	str	r4, [sp, #4]
 811de28:	2300      	movs	r3, #0
 811de2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 811de2c:	9314      	str	r3, [sp, #80]	@ 0x50
 811de2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 811de32:	f8ad 3016 	strh.w	r3, [sp, #22]
 811de36:	462a      	mov	r2, r5
 811de38:	4623      	mov	r3, r4
 811de3a:	a902      	add	r1, sp, #8
 811de3c:	6800      	ldr	r0, [r0, #0]
 811de3e:	f000 fb59 	bl	811e4f4 <__ssvfiscanf_r>
 811de42:	b01c      	add	sp, #112	@ 0x70
 811de44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 811de48:	b003      	add	sp, #12
 811de4a:	4770      	bx	lr
 811de4c:	0811de77 	.word	0x0811de77
 811de50:	10000040 	.word	0x10000040

0811de54 <__sread>:
 811de54:	b510      	push	{r4, lr}
 811de56:	460c      	mov	r4, r1
 811de58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811de5c:	f000 f9d8 	bl	811e210 <_read_r>
 811de60:	2800      	cmp	r0, #0
 811de62:	bfab      	itete	ge
 811de64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 811de66:	89a3      	ldrhlt	r3, [r4, #12]
 811de68:	181b      	addge	r3, r3, r0
 811de6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 811de6e:	bfac      	ite	ge
 811de70:	6563      	strge	r3, [r4, #84]	@ 0x54
 811de72:	81a3      	strhlt	r3, [r4, #12]
 811de74:	bd10      	pop	{r4, pc}

0811de76 <__seofread>:
 811de76:	2000      	movs	r0, #0
 811de78:	4770      	bx	lr

0811de7a <__swrite>:
 811de7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811de7e:	461f      	mov	r7, r3
 811de80:	898b      	ldrh	r3, [r1, #12]
 811de82:	05db      	lsls	r3, r3, #23
 811de84:	4605      	mov	r5, r0
 811de86:	460c      	mov	r4, r1
 811de88:	4616      	mov	r6, r2
 811de8a:	d505      	bpl.n	811de98 <__swrite+0x1e>
 811de8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811de90:	2302      	movs	r3, #2
 811de92:	2200      	movs	r2, #0
 811de94:	f000 f9aa 	bl	811e1ec <_lseek_r>
 811de98:	89a3      	ldrh	r3, [r4, #12]
 811de9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811de9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 811dea2:	81a3      	strh	r3, [r4, #12]
 811dea4:	4632      	mov	r2, r6
 811dea6:	463b      	mov	r3, r7
 811dea8:	4628      	mov	r0, r5
 811deaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 811deae:	f000 b9e5 	b.w	811e27c <_write_r>

0811deb2 <__sseek>:
 811deb2:	b510      	push	{r4, lr}
 811deb4:	460c      	mov	r4, r1
 811deb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811deba:	f000 f997 	bl	811e1ec <_lseek_r>
 811debe:	1c43      	adds	r3, r0, #1
 811dec0:	89a3      	ldrh	r3, [r4, #12]
 811dec2:	bf15      	itete	ne
 811dec4:	6560      	strne	r0, [r4, #84]	@ 0x54
 811dec6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 811deca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 811dece:	81a3      	strheq	r3, [r4, #12]
 811ded0:	bf18      	it	ne
 811ded2:	81a3      	strhne	r3, [r4, #12]
 811ded4:	bd10      	pop	{r4, pc}

0811ded6 <__sclose>:
 811ded6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811deda:	f000 b921 	b.w	811e120 <_close_r>

0811dede <__swbuf_r>:
 811dede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811dee0:	460e      	mov	r6, r1
 811dee2:	4614      	mov	r4, r2
 811dee4:	4605      	mov	r5, r0
 811dee6:	b118      	cbz	r0, 811def0 <__swbuf_r+0x12>
 811dee8:	6a03      	ldr	r3, [r0, #32]
 811deea:	b90b      	cbnz	r3, 811def0 <__swbuf_r+0x12>
 811deec:	f7ff fee6 	bl	811dcbc <__sinit>
 811def0:	69a3      	ldr	r3, [r4, #24]
 811def2:	60a3      	str	r3, [r4, #8]
 811def4:	89a3      	ldrh	r3, [r4, #12]
 811def6:	071a      	lsls	r2, r3, #28
 811def8:	d501      	bpl.n	811defe <__swbuf_r+0x20>
 811defa:	6923      	ldr	r3, [r4, #16]
 811defc:	b943      	cbnz	r3, 811df10 <__swbuf_r+0x32>
 811defe:	4621      	mov	r1, r4
 811df00:	4628      	mov	r0, r5
 811df02:	f000 f82b 	bl	811df5c <__swsetup_r>
 811df06:	b118      	cbz	r0, 811df10 <__swbuf_r+0x32>
 811df08:	f04f 37ff 	mov.w	r7, #4294967295
 811df0c:	4638      	mov	r0, r7
 811df0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811df10:	6823      	ldr	r3, [r4, #0]
 811df12:	6922      	ldr	r2, [r4, #16]
 811df14:	1a98      	subs	r0, r3, r2
 811df16:	6963      	ldr	r3, [r4, #20]
 811df18:	b2f6      	uxtb	r6, r6
 811df1a:	4283      	cmp	r3, r0
 811df1c:	4637      	mov	r7, r6
 811df1e:	dc05      	bgt.n	811df2c <__swbuf_r+0x4e>
 811df20:	4621      	mov	r1, r4
 811df22:	4628      	mov	r0, r5
 811df24:	f7ff fe02 	bl	811db2c <_fflush_r>
 811df28:	2800      	cmp	r0, #0
 811df2a:	d1ed      	bne.n	811df08 <__swbuf_r+0x2a>
 811df2c:	68a3      	ldr	r3, [r4, #8]
 811df2e:	3b01      	subs	r3, #1
 811df30:	60a3      	str	r3, [r4, #8]
 811df32:	6823      	ldr	r3, [r4, #0]
 811df34:	1c5a      	adds	r2, r3, #1
 811df36:	6022      	str	r2, [r4, #0]
 811df38:	701e      	strb	r6, [r3, #0]
 811df3a:	6962      	ldr	r2, [r4, #20]
 811df3c:	1c43      	adds	r3, r0, #1
 811df3e:	429a      	cmp	r2, r3
 811df40:	d004      	beq.n	811df4c <__swbuf_r+0x6e>
 811df42:	89a3      	ldrh	r3, [r4, #12]
 811df44:	07db      	lsls	r3, r3, #31
 811df46:	d5e1      	bpl.n	811df0c <__swbuf_r+0x2e>
 811df48:	2e0a      	cmp	r6, #10
 811df4a:	d1df      	bne.n	811df0c <__swbuf_r+0x2e>
 811df4c:	4621      	mov	r1, r4
 811df4e:	4628      	mov	r0, r5
 811df50:	f7ff fdec 	bl	811db2c <_fflush_r>
 811df54:	2800      	cmp	r0, #0
 811df56:	d0d9      	beq.n	811df0c <__swbuf_r+0x2e>
 811df58:	e7d6      	b.n	811df08 <__swbuf_r+0x2a>
	...

0811df5c <__swsetup_r>:
 811df5c:	b538      	push	{r3, r4, r5, lr}
 811df5e:	4b29      	ldr	r3, [pc, #164]	@ (811e004 <__swsetup_r+0xa8>)
 811df60:	4605      	mov	r5, r0
 811df62:	6818      	ldr	r0, [r3, #0]
 811df64:	460c      	mov	r4, r1
 811df66:	b118      	cbz	r0, 811df70 <__swsetup_r+0x14>
 811df68:	6a03      	ldr	r3, [r0, #32]
 811df6a:	b90b      	cbnz	r3, 811df70 <__swsetup_r+0x14>
 811df6c:	f7ff fea6 	bl	811dcbc <__sinit>
 811df70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811df74:	0719      	lsls	r1, r3, #28
 811df76:	d422      	bmi.n	811dfbe <__swsetup_r+0x62>
 811df78:	06da      	lsls	r2, r3, #27
 811df7a:	d407      	bmi.n	811df8c <__swsetup_r+0x30>
 811df7c:	2209      	movs	r2, #9
 811df7e:	602a      	str	r2, [r5, #0]
 811df80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811df84:	81a3      	strh	r3, [r4, #12]
 811df86:	f04f 30ff 	mov.w	r0, #4294967295
 811df8a:	e033      	b.n	811dff4 <__swsetup_r+0x98>
 811df8c:	0758      	lsls	r0, r3, #29
 811df8e:	d512      	bpl.n	811dfb6 <__swsetup_r+0x5a>
 811df90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811df92:	b141      	cbz	r1, 811dfa6 <__swsetup_r+0x4a>
 811df94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 811df98:	4299      	cmp	r1, r3
 811df9a:	d002      	beq.n	811dfa2 <__swsetup_r+0x46>
 811df9c:	4628      	mov	r0, r5
 811df9e:	f000 f9d9 	bl	811e354 <_free_r>
 811dfa2:	2300      	movs	r3, #0
 811dfa4:	6363      	str	r3, [r4, #52]	@ 0x34
 811dfa6:	89a3      	ldrh	r3, [r4, #12]
 811dfa8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 811dfac:	81a3      	strh	r3, [r4, #12]
 811dfae:	2300      	movs	r3, #0
 811dfb0:	6063      	str	r3, [r4, #4]
 811dfb2:	6923      	ldr	r3, [r4, #16]
 811dfb4:	6023      	str	r3, [r4, #0]
 811dfb6:	89a3      	ldrh	r3, [r4, #12]
 811dfb8:	f043 0308 	orr.w	r3, r3, #8
 811dfbc:	81a3      	strh	r3, [r4, #12]
 811dfbe:	6923      	ldr	r3, [r4, #16]
 811dfc0:	b94b      	cbnz	r3, 811dfd6 <__swsetup_r+0x7a>
 811dfc2:	89a3      	ldrh	r3, [r4, #12]
 811dfc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 811dfc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 811dfcc:	d003      	beq.n	811dfd6 <__swsetup_r+0x7a>
 811dfce:	4621      	mov	r1, r4
 811dfd0:	4628      	mov	r0, r5
 811dfd2:	f000 fd89 	bl	811eae8 <__smakebuf_r>
 811dfd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811dfda:	f013 0201 	ands.w	r2, r3, #1
 811dfde:	d00a      	beq.n	811dff6 <__swsetup_r+0x9a>
 811dfe0:	2200      	movs	r2, #0
 811dfe2:	60a2      	str	r2, [r4, #8]
 811dfe4:	6962      	ldr	r2, [r4, #20]
 811dfe6:	4252      	negs	r2, r2
 811dfe8:	61a2      	str	r2, [r4, #24]
 811dfea:	6922      	ldr	r2, [r4, #16]
 811dfec:	b942      	cbnz	r2, 811e000 <__swsetup_r+0xa4>
 811dfee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 811dff2:	d1c5      	bne.n	811df80 <__swsetup_r+0x24>
 811dff4:	bd38      	pop	{r3, r4, r5, pc}
 811dff6:	0799      	lsls	r1, r3, #30
 811dff8:	bf58      	it	pl
 811dffa:	6962      	ldrpl	r2, [r4, #20]
 811dffc:	60a2      	str	r2, [r4, #8]
 811dffe:	e7f4      	b.n	811dfea <__swsetup_r+0x8e>
 811e000:	2000      	movs	r0, #0
 811e002:	e7f7      	b.n	811dff4 <__swsetup_r+0x98>
 811e004:	10000040 	.word	0x10000040

0811e008 <memcmp>:
 811e008:	b510      	push	{r4, lr}
 811e00a:	3901      	subs	r1, #1
 811e00c:	4402      	add	r2, r0
 811e00e:	4290      	cmp	r0, r2
 811e010:	d101      	bne.n	811e016 <memcmp+0xe>
 811e012:	2000      	movs	r0, #0
 811e014:	e005      	b.n	811e022 <memcmp+0x1a>
 811e016:	7803      	ldrb	r3, [r0, #0]
 811e018:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 811e01c:	42a3      	cmp	r3, r4
 811e01e:	d001      	beq.n	811e024 <memcmp+0x1c>
 811e020:	1b18      	subs	r0, r3, r4
 811e022:	bd10      	pop	{r4, pc}
 811e024:	3001      	adds	r0, #1
 811e026:	e7f2      	b.n	811e00e <memcmp+0x6>

0811e028 <memmove>:
 811e028:	4288      	cmp	r0, r1
 811e02a:	b510      	push	{r4, lr}
 811e02c:	eb01 0402 	add.w	r4, r1, r2
 811e030:	d902      	bls.n	811e038 <memmove+0x10>
 811e032:	4284      	cmp	r4, r0
 811e034:	4623      	mov	r3, r4
 811e036:	d807      	bhi.n	811e048 <memmove+0x20>
 811e038:	1e43      	subs	r3, r0, #1
 811e03a:	42a1      	cmp	r1, r4
 811e03c:	d008      	beq.n	811e050 <memmove+0x28>
 811e03e:	f811 2b01 	ldrb.w	r2, [r1], #1
 811e042:	f803 2f01 	strb.w	r2, [r3, #1]!
 811e046:	e7f8      	b.n	811e03a <memmove+0x12>
 811e048:	4402      	add	r2, r0
 811e04a:	4601      	mov	r1, r0
 811e04c:	428a      	cmp	r2, r1
 811e04e:	d100      	bne.n	811e052 <memmove+0x2a>
 811e050:	bd10      	pop	{r4, pc}
 811e052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 811e056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 811e05a:	e7f7      	b.n	811e04c <memmove+0x24>

0811e05c <memset>:
 811e05c:	4402      	add	r2, r0
 811e05e:	4603      	mov	r3, r0
 811e060:	4293      	cmp	r3, r2
 811e062:	d100      	bne.n	811e066 <memset+0xa>
 811e064:	4770      	bx	lr
 811e066:	f803 1b01 	strb.w	r1, [r3], #1
 811e06a:	e7f9      	b.n	811e060 <memset+0x4>

0811e06c <strncpy>:
 811e06c:	b510      	push	{r4, lr}
 811e06e:	3901      	subs	r1, #1
 811e070:	4603      	mov	r3, r0
 811e072:	b132      	cbz	r2, 811e082 <strncpy+0x16>
 811e074:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 811e078:	f803 4b01 	strb.w	r4, [r3], #1
 811e07c:	3a01      	subs	r2, #1
 811e07e:	2c00      	cmp	r4, #0
 811e080:	d1f7      	bne.n	811e072 <strncpy+0x6>
 811e082:	441a      	add	r2, r3
 811e084:	2100      	movs	r1, #0
 811e086:	4293      	cmp	r3, r2
 811e088:	d100      	bne.n	811e08c <strncpy+0x20>
 811e08a:	bd10      	pop	{r4, pc}
 811e08c:	f803 1b01 	strb.w	r1, [r3], #1
 811e090:	e7f9      	b.n	811e086 <strncpy+0x1a>

0811e092 <strstr>:
 811e092:	780a      	ldrb	r2, [r1, #0]
 811e094:	b570      	push	{r4, r5, r6, lr}
 811e096:	b96a      	cbnz	r2, 811e0b4 <strstr+0x22>
 811e098:	bd70      	pop	{r4, r5, r6, pc}
 811e09a:	429a      	cmp	r2, r3
 811e09c:	d109      	bne.n	811e0b2 <strstr+0x20>
 811e09e:	460c      	mov	r4, r1
 811e0a0:	4605      	mov	r5, r0
 811e0a2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 811e0a6:	2b00      	cmp	r3, #0
 811e0a8:	d0f6      	beq.n	811e098 <strstr+0x6>
 811e0aa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 811e0ae:	429e      	cmp	r6, r3
 811e0b0:	d0f7      	beq.n	811e0a2 <strstr+0x10>
 811e0b2:	3001      	adds	r0, #1
 811e0b4:	7803      	ldrb	r3, [r0, #0]
 811e0b6:	2b00      	cmp	r3, #0
 811e0b8:	d1ef      	bne.n	811e09a <strstr+0x8>
 811e0ba:	4618      	mov	r0, r3
 811e0bc:	e7ec      	b.n	811e098 <strstr+0x6>

0811e0be <_raise_r>:
 811e0be:	291f      	cmp	r1, #31
 811e0c0:	b538      	push	{r3, r4, r5, lr}
 811e0c2:	4605      	mov	r5, r0
 811e0c4:	460c      	mov	r4, r1
 811e0c6:	d904      	bls.n	811e0d2 <_raise_r+0x14>
 811e0c8:	2316      	movs	r3, #22
 811e0ca:	6003      	str	r3, [r0, #0]
 811e0cc:	f04f 30ff 	mov.w	r0, #4294967295
 811e0d0:	bd38      	pop	{r3, r4, r5, pc}
 811e0d2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 811e0d4:	b112      	cbz	r2, 811e0dc <_raise_r+0x1e>
 811e0d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 811e0da:	b94b      	cbnz	r3, 811e0f0 <_raise_r+0x32>
 811e0dc:	4628      	mov	r0, r5
 811e0de:	f000 f8bb 	bl	811e258 <_getpid_r>
 811e0e2:	4622      	mov	r2, r4
 811e0e4:	4601      	mov	r1, r0
 811e0e6:	4628      	mov	r0, r5
 811e0e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811e0ec:	f000 b8a2 	b.w	811e234 <_kill_r>
 811e0f0:	2b01      	cmp	r3, #1
 811e0f2:	d00a      	beq.n	811e10a <_raise_r+0x4c>
 811e0f4:	1c59      	adds	r1, r3, #1
 811e0f6:	d103      	bne.n	811e100 <_raise_r+0x42>
 811e0f8:	2316      	movs	r3, #22
 811e0fa:	6003      	str	r3, [r0, #0]
 811e0fc:	2001      	movs	r0, #1
 811e0fe:	e7e7      	b.n	811e0d0 <_raise_r+0x12>
 811e100:	2100      	movs	r1, #0
 811e102:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 811e106:	4620      	mov	r0, r4
 811e108:	4798      	blx	r3
 811e10a:	2000      	movs	r0, #0
 811e10c:	e7e0      	b.n	811e0d0 <_raise_r+0x12>
	...

0811e110 <raise>:
 811e110:	4b02      	ldr	r3, [pc, #8]	@ (811e11c <raise+0xc>)
 811e112:	4601      	mov	r1, r0
 811e114:	6818      	ldr	r0, [r3, #0]
 811e116:	f7ff bfd2 	b.w	811e0be <_raise_r>
 811e11a:	bf00      	nop
 811e11c:	10000040 	.word	0x10000040

0811e120 <_close_r>:
 811e120:	b538      	push	{r3, r4, r5, lr}
 811e122:	4d06      	ldr	r5, [pc, #24]	@ (811e13c <_close_r+0x1c>)
 811e124:	2300      	movs	r3, #0
 811e126:	4604      	mov	r4, r0
 811e128:	4608      	mov	r0, r1
 811e12a:	602b      	str	r3, [r5, #0]
 811e12c:	f7e2 fe4a 	bl	8100dc4 <_close>
 811e130:	1c43      	adds	r3, r0, #1
 811e132:	d102      	bne.n	811e13a <_close_r+0x1a>
 811e134:	682b      	ldr	r3, [r5, #0]
 811e136:	b103      	cbz	r3, 811e13a <_close_r+0x1a>
 811e138:	6023      	str	r3, [r4, #0]
 811e13a:	bd38      	pop	{r3, r4, r5, pc}
 811e13c:	100122e0 	.word	0x100122e0

0811e140 <_reclaim_reent>:
 811e140:	4b29      	ldr	r3, [pc, #164]	@ (811e1e8 <_reclaim_reent+0xa8>)
 811e142:	681b      	ldr	r3, [r3, #0]
 811e144:	4283      	cmp	r3, r0
 811e146:	b570      	push	{r4, r5, r6, lr}
 811e148:	4604      	mov	r4, r0
 811e14a:	d04b      	beq.n	811e1e4 <_reclaim_reent+0xa4>
 811e14c:	69c3      	ldr	r3, [r0, #28]
 811e14e:	b1ab      	cbz	r3, 811e17c <_reclaim_reent+0x3c>
 811e150:	68db      	ldr	r3, [r3, #12]
 811e152:	b16b      	cbz	r3, 811e170 <_reclaim_reent+0x30>
 811e154:	2500      	movs	r5, #0
 811e156:	69e3      	ldr	r3, [r4, #28]
 811e158:	68db      	ldr	r3, [r3, #12]
 811e15a:	5959      	ldr	r1, [r3, r5]
 811e15c:	2900      	cmp	r1, #0
 811e15e:	d13b      	bne.n	811e1d8 <_reclaim_reent+0x98>
 811e160:	3504      	adds	r5, #4
 811e162:	2d80      	cmp	r5, #128	@ 0x80
 811e164:	d1f7      	bne.n	811e156 <_reclaim_reent+0x16>
 811e166:	69e3      	ldr	r3, [r4, #28]
 811e168:	4620      	mov	r0, r4
 811e16a:	68d9      	ldr	r1, [r3, #12]
 811e16c:	f000 f8f2 	bl	811e354 <_free_r>
 811e170:	69e3      	ldr	r3, [r4, #28]
 811e172:	6819      	ldr	r1, [r3, #0]
 811e174:	b111      	cbz	r1, 811e17c <_reclaim_reent+0x3c>
 811e176:	4620      	mov	r0, r4
 811e178:	f000 f8ec 	bl	811e354 <_free_r>
 811e17c:	6961      	ldr	r1, [r4, #20]
 811e17e:	b111      	cbz	r1, 811e186 <_reclaim_reent+0x46>
 811e180:	4620      	mov	r0, r4
 811e182:	f000 f8e7 	bl	811e354 <_free_r>
 811e186:	69e1      	ldr	r1, [r4, #28]
 811e188:	b111      	cbz	r1, 811e190 <_reclaim_reent+0x50>
 811e18a:	4620      	mov	r0, r4
 811e18c:	f000 f8e2 	bl	811e354 <_free_r>
 811e190:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 811e192:	b111      	cbz	r1, 811e19a <_reclaim_reent+0x5a>
 811e194:	4620      	mov	r0, r4
 811e196:	f000 f8dd 	bl	811e354 <_free_r>
 811e19a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811e19c:	b111      	cbz	r1, 811e1a4 <_reclaim_reent+0x64>
 811e19e:	4620      	mov	r0, r4
 811e1a0:	f000 f8d8 	bl	811e354 <_free_r>
 811e1a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 811e1a6:	b111      	cbz	r1, 811e1ae <_reclaim_reent+0x6e>
 811e1a8:	4620      	mov	r0, r4
 811e1aa:	f000 f8d3 	bl	811e354 <_free_r>
 811e1ae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 811e1b0:	b111      	cbz	r1, 811e1b8 <_reclaim_reent+0x78>
 811e1b2:	4620      	mov	r0, r4
 811e1b4:	f000 f8ce 	bl	811e354 <_free_r>
 811e1b8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 811e1ba:	b111      	cbz	r1, 811e1c2 <_reclaim_reent+0x82>
 811e1bc:	4620      	mov	r0, r4
 811e1be:	f000 f8c9 	bl	811e354 <_free_r>
 811e1c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 811e1c4:	b111      	cbz	r1, 811e1cc <_reclaim_reent+0x8c>
 811e1c6:	4620      	mov	r0, r4
 811e1c8:	f000 f8c4 	bl	811e354 <_free_r>
 811e1cc:	6a23      	ldr	r3, [r4, #32]
 811e1ce:	b14b      	cbz	r3, 811e1e4 <_reclaim_reent+0xa4>
 811e1d0:	4620      	mov	r0, r4
 811e1d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 811e1d6:	4718      	bx	r3
 811e1d8:	680e      	ldr	r6, [r1, #0]
 811e1da:	4620      	mov	r0, r4
 811e1dc:	f000 f8ba 	bl	811e354 <_free_r>
 811e1e0:	4631      	mov	r1, r6
 811e1e2:	e7bb      	b.n	811e15c <_reclaim_reent+0x1c>
 811e1e4:	bd70      	pop	{r4, r5, r6, pc}
 811e1e6:	bf00      	nop
 811e1e8:	10000040 	.word	0x10000040

0811e1ec <_lseek_r>:
 811e1ec:	b538      	push	{r3, r4, r5, lr}
 811e1ee:	4d07      	ldr	r5, [pc, #28]	@ (811e20c <_lseek_r+0x20>)
 811e1f0:	4604      	mov	r4, r0
 811e1f2:	4608      	mov	r0, r1
 811e1f4:	4611      	mov	r1, r2
 811e1f6:	2200      	movs	r2, #0
 811e1f8:	602a      	str	r2, [r5, #0]
 811e1fa:	461a      	mov	r2, r3
 811e1fc:	f7e2 fe09 	bl	8100e12 <_lseek>
 811e200:	1c43      	adds	r3, r0, #1
 811e202:	d102      	bne.n	811e20a <_lseek_r+0x1e>
 811e204:	682b      	ldr	r3, [r5, #0]
 811e206:	b103      	cbz	r3, 811e20a <_lseek_r+0x1e>
 811e208:	6023      	str	r3, [r4, #0]
 811e20a:	bd38      	pop	{r3, r4, r5, pc}
 811e20c:	100122e0 	.word	0x100122e0

0811e210 <_read_r>:
 811e210:	b538      	push	{r3, r4, r5, lr}
 811e212:	4d07      	ldr	r5, [pc, #28]	@ (811e230 <_read_r+0x20>)
 811e214:	4604      	mov	r4, r0
 811e216:	4608      	mov	r0, r1
 811e218:	4611      	mov	r1, r2
 811e21a:	2200      	movs	r2, #0
 811e21c:	602a      	str	r2, [r5, #0]
 811e21e:	461a      	mov	r2, r3
 811e220:	f7e2 fd97 	bl	8100d52 <_read>
 811e224:	1c43      	adds	r3, r0, #1
 811e226:	d102      	bne.n	811e22e <_read_r+0x1e>
 811e228:	682b      	ldr	r3, [r5, #0]
 811e22a:	b103      	cbz	r3, 811e22e <_read_r+0x1e>
 811e22c:	6023      	str	r3, [r4, #0]
 811e22e:	bd38      	pop	{r3, r4, r5, pc}
 811e230:	100122e0 	.word	0x100122e0

0811e234 <_kill_r>:
 811e234:	b538      	push	{r3, r4, r5, lr}
 811e236:	4d07      	ldr	r5, [pc, #28]	@ (811e254 <_kill_r+0x20>)
 811e238:	2300      	movs	r3, #0
 811e23a:	4604      	mov	r4, r0
 811e23c:	4608      	mov	r0, r1
 811e23e:	4611      	mov	r1, r2
 811e240:	602b      	str	r3, [r5, #0]
 811e242:	f7e2 fd69 	bl	8100d18 <_kill>
 811e246:	1c43      	adds	r3, r0, #1
 811e248:	d102      	bne.n	811e250 <_kill_r+0x1c>
 811e24a:	682b      	ldr	r3, [r5, #0]
 811e24c:	b103      	cbz	r3, 811e250 <_kill_r+0x1c>
 811e24e:	6023      	str	r3, [r4, #0]
 811e250:	bd38      	pop	{r3, r4, r5, pc}
 811e252:	bf00      	nop
 811e254:	100122e0 	.word	0x100122e0

0811e258 <_getpid_r>:
 811e258:	f7e2 bd56 	b.w	8100d08 <_getpid>

0811e25c <_sbrk_r>:
 811e25c:	b538      	push	{r3, r4, r5, lr}
 811e25e:	4d06      	ldr	r5, [pc, #24]	@ (811e278 <_sbrk_r+0x1c>)
 811e260:	2300      	movs	r3, #0
 811e262:	4604      	mov	r4, r0
 811e264:	4608      	mov	r0, r1
 811e266:	602b      	str	r3, [r5, #0]
 811e268:	f7e2 fde0 	bl	8100e2c <_sbrk>
 811e26c:	1c43      	adds	r3, r0, #1
 811e26e:	d102      	bne.n	811e276 <_sbrk_r+0x1a>
 811e270:	682b      	ldr	r3, [r5, #0]
 811e272:	b103      	cbz	r3, 811e276 <_sbrk_r+0x1a>
 811e274:	6023      	str	r3, [r4, #0]
 811e276:	bd38      	pop	{r3, r4, r5, pc}
 811e278:	100122e0 	.word	0x100122e0

0811e27c <_write_r>:
 811e27c:	b538      	push	{r3, r4, r5, lr}
 811e27e:	4d07      	ldr	r5, [pc, #28]	@ (811e29c <_write_r+0x20>)
 811e280:	4604      	mov	r4, r0
 811e282:	4608      	mov	r0, r1
 811e284:	4611      	mov	r1, r2
 811e286:	2200      	movs	r2, #0
 811e288:	602a      	str	r2, [r5, #0]
 811e28a:	461a      	mov	r2, r3
 811e28c:	f7e2 fd7e 	bl	8100d8c <_write>
 811e290:	1c43      	adds	r3, r0, #1
 811e292:	d102      	bne.n	811e29a <_write_r+0x1e>
 811e294:	682b      	ldr	r3, [r5, #0]
 811e296:	b103      	cbz	r3, 811e29a <_write_r+0x1e>
 811e298:	6023      	str	r3, [r4, #0]
 811e29a:	bd38      	pop	{r3, r4, r5, pc}
 811e29c:	100122e0 	.word	0x100122e0

0811e2a0 <__errno>:
 811e2a0:	4b01      	ldr	r3, [pc, #4]	@ (811e2a8 <__errno+0x8>)
 811e2a2:	6818      	ldr	r0, [r3, #0]
 811e2a4:	4770      	bx	lr
 811e2a6:	bf00      	nop
 811e2a8:	10000040 	.word	0x10000040

0811e2ac <__libc_init_array>:
 811e2ac:	b570      	push	{r4, r5, r6, lr}
 811e2ae:	4d0d      	ldr	r5, [pc, #52]	@ (811e2e4 <__libc_init_array+0x38>)
 811e2b0:	4c0d      	ldr	r4, [pc, #52]	@ (811e2e8 <__libc_init_array+0x3c>)
 811e2b2:	1b64      	subs	r4, r4, r5
 811e2b4:	10a4      	asrs	r4, r4, #2
 811e2b6:	2600      	movs	r6, #0
 811e2b8:	42a6      	cmp	r6, r4
 811e2ba:	d109      	bne.n	811e2d0 <__libc_init_array+0x24>
 811e2bc:	4d0b      	ldr	r5, [pc, #44]	@ (811e2ec <__libc_init_array+0x40>)
 811e2be:	4c0c      	ldr	r4, [pc, #48]	@ (811e2f0 <__libc_init_array+0x44>)
 811e2c0:	f000 fd5c 	bl	811ed7c <_init>
 811e2c4:	1b64      	subs	r4, r4, r5
 811e2c6:	10a4      	asrs	r4, r4, #2
 811e2c8:	2600      	movs	r6, #0
 811e2ca:	42a6      	cmp	r6, r4
 811e2cc:	d105      	bne.n	811e2da <__libc_init_array+0x2e>
 811e2ce:	bd70      	pop	{r4, r5, r6, pc}
 811e2d0:	f855 3b04 	ldr.w	r3, [r5], #4
 811e2d4:	4798      	blx	r3
 811e2d6:	3601      	adds	r6, #1
 811e2d8:	e7ee      	b.n	811e2b8 <__libc_init_array+0xc>
 811e2da:	f855 3b04 	ldr.w	r3, [r5], #4
 811e2de:	4798      	blx	r3
 811e2e0:	3601      	adds	r6, #1
 811e2e2:	e7f2      	b.n	811e2ca <__libc_init_array+0x1e>
 811e2e4:	081227f0 	.word	0x081227f0
 811e2e8:	081227f0 	.word	0x081227f0
 811e2ec:	081227f0 	.word	0x081227f0
 811e2f0:	081227f8 	.word	0x081227f8

0811e2f4 <__retarget_lock_init_recursive>:
 811e2f4:	4770      	bx	lr

0811e2f6 <__retarget_lock_acquire_recursive>:
 811e2f6:	4770      	bx	lr

0811e2f8 <__retarget_lock_release_recursive>:
 811e2f8:	4770      	bx	lr

0811e2fa <memcpy>:
 811e2fa:	440a      	add	r2, r1
 811e2fc:	4291      	cmp	r1, r2
 811e2fe:	f100 33ff 	add.w	r3, r0, #4294967295
 811e302:	d100      	bne.n	811e306 <memcpy+0xc>
 811e304:	4770      	bx	lr
 811e306:	b510      	push	{r4, lr}
 811e308:	f811 4b01 	ldrb.w	r4, [r1], #1
 811e30c:	f803 4f01 	strb.w	r4, [r3, #1]!
 811e310:	4291      	cmp	r1, r2
 811e312:	d1f9      	bne.n	811e308 <memcpy+0xe>
 811e314:	bd10      	pop	{r4, pc}
	...

0811e318 <__assert_func>:
 811e318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 811e31a:	4614      	mov	r4, r2
 811e31c:	461a      	mov	r2, r3
 811e31e:	4b09      	ldr	r3, [pc, #36]	@ (811e344 <__assert_func+0x2c>)
 811e320:	681b      	ldr	r3, [r3, #0]
 811e322:	4605      	mov	r5, r0
 811e324:	68d8      	ldr	r0, [r3, #12]
 811e326:	b954      	cbnz	r4, 811e33e <__assert_func+0x26>
 811e328:	4b07      	ldr	r3, [pc, #28]	@ (811e348 <__assert_func+0x30>)
 811e32a:	461c      	mov	r4, r3
 811e32c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 811e330:	9100      	str	r1, [sp, #0]
 811e332:	462b      	mov	r3, r5
 811e334:	4905      	ldr	r1, [pc, #20]	@ (811e34c <__assert_func+0x34>)
 811e336:	f000 fb9f 	bl	811ea78 <fiprintf>
 811e33a:	f7fe ff19 	bl	811d170 <abort>
 811e33e:	4b04      	ldr	r3, [pc, #16]	@ (811e350 <__assert_func+0x38>)
 811e340:	e7f4      	b.n	811e32c <__assert_func+0x14>
 811e342:	bf00      	nop
 811e344:	10000040 	.word	0x10000040
 811e348:	081227ca 	.word	0x081227ca
 811e34c:	0812279c 	.word	0x0812279c
 811e350:	0812278f 	.word	0x0812278f

0811e354 <_free_r>:
 811e354:	b538      	push	{r3, r4, r5, lr}
 811e356:	4605      	mov	r5, r0
 811e358:	2900      	cmp	r1, #0
 811e35a:	d041      	beq.n	811e3e0 <_free_r+0x8c>
 811e35c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811e360:	1f0c      	subs	r4, r1, #4
 811e362:	2b00      	cmp	r3, #0
 811e364:	bfb8      	it	lt
 811e366:	18e4      	addlt	r4, r4, r3
 811e368:	f7fe ffbc 	bl	811d2e4 <__malloc_lock>
 811e36c:	4a1d      	ldr	r2, [pc, #116]	@ (811e3e4 <_free_r+0x90>)
 811e36e:	6813      	ldr	r3, [r2, #0]
 811e370:	b933      	cbnz	r3, 811e380 <_free_r+0x2c>
 811e372:	6063      	str	r3, [r4, #4]
 811e374:	6014      	str	r4, [r2, #0]
 811e376:	4628      	mov	r0, r5
 811e378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811e37c:	f7fe bfb8 	b.w	811d2f0 <__malloc_unlock>
 811e380:	42a3      	cmp	r3, r4
 811e382:	d908      	bls.n	811e396 <_free_r+0x42>
 811e384:	6820      	ldr	r0, [r4, #0]
 811e386:	1821      	adds	r1, r4, r0
 811e388:	428b      	cmp	r3, r1
 811e38a:	bf01      	itttt	eq
 811e38c:	6819      	ldreq	r1, [r3, #0]
 811e38e:	685b      	ldreq	r3, [r3, #4]
 811e390:	1809      	addeq	r1, r1, r0
 811e392:	6021      	streq	r1, [r4, #0]
 811e394:	e7ed      	b.n	811e372 <_free_r+0x1e>
 811e396:	461a      	mov	r2, r3
 811e398:	685b      	ldr	r3, [r3, #4]
 811e39a:	b10b      	cbz	r3, 811e3a0 <_free_r+0x4c>
 811e39c:	42a3      	cmp	r3, r4
 811e39e:	d9fa      	bls.n	811e396 <_free_r+0x42>
 811e3a0:	6811      	ldr	r1, [r2, #0]
 811e3a2:	1850      	adds	r0, r2, r1
 811e3a4:	42a0      	cmp	r0, r4
 811e3a6:	d10b      	bne.n	811e3c0 <_free_r+0x6c>
 811e3a8:	6820      	ldr	r0, [r4, #0]
 811e3aa:	4401      	add	r1, r0
 811e3ac:	1850      	adds	r0, r2, r1
 811e3ae:	4283      	cmp	r3, r0
 811e3b0:	6011      	str	r1, [r2, #0]
 811e3b2:	d1e0      	bne.n	811e376 <_free_r+0x22>
 811e3b4:	6818      	ldr	r0, [r3, #0]
 811e3b6:	685b      	ldr	r3, [r3, #4]
 811e3b8:	6053      	str	r3, [r2, #4]
 811e3ba:	4408      	add	r0, r1
 811e3bc:	6010      	str	r0, [r2, #0]
 811e3be:	e7da      	b.n	811e376 <_free_r+0x22>
 811e3c0:	d902      	bls.n	811e3c8 <_free_r+0x74>
 811e3c2:	230c      	movs	r3, #12
 811e3c4:	602b      	str	r3, [r5, #0]
 811e3c6:	e7d6      	b.n	811e376 <_free_r+0x22>
 811e3c8:	6820      	ldr	r0, [r4, #0]
 811e3ca:	1821      	adds	r1, r4, r0
 811e3cc:	428b      	cmp	r3, r1
 811e3ce:	bf04      	itt	eq
 811e3d0:	6819      	ldreq	r1, [r3, #0]
 811e3d2:	685b      	ldreq	r3, [r3, #4]
 811e3d4:	6063      	str	r3, [r4, #4]
 811e3d6:	bf04      	itt	eq
 811e3d8:	1809      	addeq	r1, r1, r0
 811e3da:	6021      	streq	r1, [r4, #0]
 811e3dc:	6054      	str	r4, [r2, #4]
 811e3de:	e7ca      	b.n	811e376 <_free_r+0x22>
 811e3e0:	bd38      	pop	{r3, r4, r5, pc}
 811e3e2:	bf00      	nop
 811e3e4:	100121a0 	.word	0x100121a0

0811e3e8 <_realloc_r>:
 811e3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811e3ec:	4680      	mov	r8, r0
 811e3ee:	4615      	mov	r5, r2
 811e3f0:	460c      	mov	r4, r1
 811e3f2:	b921      	cbnz	r1, 811e3fe <_realloc_r+0x16>
 811e3f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 811e3f8:	4611      	mov	r1, r2
 811e3fa:	f7fe bef3 	b.w	811d1e4 <_malloc_r>
 811e3fe:	b92a      	cbnz	r2, 811e40c <_realloc_r+0x24>
 811e400:	f7ff ffa8 	bl	811e354 <_free_r>
 811e404:	2400      	movs	r4, #0
 811e406:	4620      	mov	r0, r4
 811e408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811e40c:	f000 fc3e 	bl	811ec8c <_malloc_usable_size_r>
 811e410:	4285      	cmp	r5, r0
 811e412:	4606      	mov	r6, r0
 811e414:	d802      	bhi.n	811e41c <_realloc_r+0x34>
 811e416:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 811e41a:	d8f4      	bhi.n	811e406 <_realloc_r+0x1e>
 811e41c:	4629      	mov	r1, r5
 811e41e:	4640      	mov	r0, r8
 811e420:	f7fe fee0 	bl	811d1e4 <_malloc_r>
 811e424:	4607      	mov	r7, r0
 811e426:	2800      	cmp	r0, #0
 811e428:	d0ec      	beq.n	811e404 <_realloc_r+0x1c>
 811e42a:	42b5      	cmp	r5, r6
 811e42c:	462a      	mov	r2, r5
 811e42e:	4621      	mov	r1, r4
 811e430:	bf28      	it	cs
 811e432:	4632      	movcs	r2, r6
 811e434:	f7ff ff61 	bl	811e2fa <memcpy>
 811e438:	4621      	mov	r1, r4
 811e43a:	4640      	mov	r0, r8
 811e43c:	f7ff ff8a 	bl	811e354 <_free_r>
 811e440:	463c      	mov	r4, r7
 811e442:	e7e0      	b.n	811e406 <_realloc_r+0x1e>

0811e444 <_sungetc_r>:
 811e444:	b538      	push	{r3, r4, r5, lr}
 811e446:	1c4b      	adds	r3, r1, #1
 811e448:	4614      	mov	r4, r2
 811e44a:	d103      	bne.n	811e454 <_sungetc_r+0x10>
 811e44c:	f04f 35ff 	mov.w	r5, #4294967295
 811e450:	4628      	mov	r0, r5
 811e452:	bd38      	pop	{r3, r4, r5, pc}
 811e454:	8993      	ldrh	r3, [r2, #12]
 811e456:	f023 0320 	bic.w	r3, r3, #32
 811e45a:	8193      	strh	r3, [r2, #12]
 811e45c:	6853      	ldr	r3, [r2, #4]
 811e45e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 811e460:	b2cd      	uxtb	r5, r1
 811e462:	b18a      	cbz	r2, 811e488 <_sungetc_r+0x44>
 811e464:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 811e466:	429a      	cmp	r2, r3
 811e468:	dd08      	ble.n	811e47c <_sungetc_r+0x38>
 811e46a:	6823      	ldr	r3, [r4, #0]
 811e46c:	1e5a      	subs	r2, r3, #1
 811e46e:	6022      	str	r2, [r4, #0]
 811e470:	f803 5c01 	strb.w	r5, [r3, #-1]
 811e474:	6863      	ldr	r3, [r4, #4]
 811e476:	3301      	adds	r3, #1
 811e478:	6063      	str	r3, [r4, #4]
 811e47a:	e7e9      	b.n	811e450 <_sungetc_r+0xc>
 811e47c:	4621      	mov	r1, r4
 811e47e:	f000 fba8 	bl	811ebd2 <__submore>
 811e482:	2800      	cmp	r0, #0
 811e484:	d0f1      	beq.n	811e46a <_sungetc_r+0x26>
 811e486:	e7e1      	b.n	811e44c <_sungetc_r+0x8>
 811e488:	6921      	ldr	r1, [r4, #16]
 811e48a:	6822      	ldr	r2, [r4, #0]
 811e48c:	b141      	cbz	r1, 811e4a0 <_sungetc_r+0x5c>
 811e48e:	4291      	cmp	r1, r2
 811e490:	d206      	bcs.n	811e4a0 <_sungetc_r+0x5c>
 811e492:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 811e496:	42a9      	cmp	r1, r5
 811e498:	d102      	bne.n	811e4a0 <_sungetc_r+0x5c>
 811e49a:	3a01      	subs	r2, #1
 811e49c:	6022      	str	r2, [r4, #0]
 811e49e:	e7ea      	b.n	811e476 <_sungetc_r+0x32>
 811e4a0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 811e4a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 811e4a8:	6363      	str	r3, [r4, #52]	@ 0x34
 811e4aa:	2303      	movs	r3, #3
 811e4ac:	63a3      	str	r3, [r4, #56]	@ 0x38
 811e4ae:	4623      	mov	r3, r4
 811e4b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 811e4b4:	6023      	str	r3, [r4, #0]
 811e4b6:	2301      	movs	r3, #1
 811e4b8:	e7de      	b.n	811e478 <_sungetc_r+0x34>

0811e4ba <__ssrefill_r>:
 811e4ba:	b510      	push	{r4, lr}
 811e4bc:	460c      	mov	r4, r1
 811e4be:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 811e4c0:	b169      	cbz	r1, 811e4de <__ssrefill_r+0x24>
 811e4c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 811e4c6:	4299      	cmp	r1, r3
 811e4c8:	d001      	beq.n	811e4ce <__ssrefill_r+0x14>
 811e4ca:	f7ff ff43 	bl	811e354 <_free_r>
 811e4ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 811e4d0:	6063      	str	r3, [r4, #4]
 811e4d2:	2000      	movs	r0, #0
 811e4d4:	6360      	str	r0, [r4, #52]	@ 0x34
 811e4d6:	b113      	cbz	r3, 811e4de <__ssrefill_r+0x24>
 811e4d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 811e4da:	6023      	str	r3, [r4, #0]
 811e4dc:	bd10      	pop	{r4, pc}
 811e4de:	6923      	ldr	r3, [r4, #16]
 811e4e0:	6023      	str	r3, [r4, #0]
 811e4e2:	2300      	movs	r3, #0
 811e4e4:	6063      	str	r3, [r4, #4]
 811e4e6:	89a3      	ldrh	r3, [r4, #12]
 811e4e8:	f043 0320 	orr.w	r3, r3, #32
 811e4ec:	81a3      	strh	r3, [r4, #12]
 811e4ee:	f04f 30ff 	mov.w	r0, #4294967295
 811e4f2:	e7f3      	b.n	811e4dc <__ssrefill_r+0x22>

0811e4f4 <__ssvfiscanf_r>:
 811e4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 811e4f8:	460c      	mov	r4, r1
 811e4fa:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 811e4fe:	2100      	movs	r1, #0
 811e500:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 811e504:	49a5      	ldr	r1, [pc, #660]	@ (811e79c <__ssvfiscanf_r+0x2a8>)
 811e506:	91a0      	str	r1, [sp, #640]	@ 0x280
 811e508:	f10d 0804 	add.w	r8, sp, #4
 811e50c:	49a4      	ldr	r1, [pc, #656]	@ (811e7a0 <__ssvfiscanf_r+0x2ac>)
 811e50e:	4fa5      	ldr	r7, [pc, #660]	@ (811e7a4 <__ssvfiscanf_r+0x2b0>)
 811e510:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 811e514:	4606      	mov	r6, r0
 811e516:	91a1      	str	r1, [sp, #644]	@ 0x284
 811e518:	9300      	str	r3, [sp, #0]
 811e51a:	7813      	ldrb	r3, [r2, #0]
 811e51c:	2b00      	cmp	r3, #0
 811e51e:	f000 8158 	beq.w	811e7d2 <__ssvfiscanf_r+0x2de>
 811e522:	5cf9      	ldrb	r1, [r7, r3]
 811e524:	f011 0108 	ands.w	r1, r1, #8
 811e528:	f102 0501 	add.w	r5, r2, #1
 811e52c:	d019      	beq.n	811e562 <__ssvfiscanf_r+0x6e>
 811e52e:	6863      	ldr	r3, [r4, #4]
 811e530:	2b00      	cmp	r3, #0
 811e532:	dd0f      	ble.n	811e554 <__ssvfiscanf_r+0x60>
 811e534:	6823      	ldr	r3, [r4, #0]
 811e536:	781a      	ldrb	r2, [r3, #0]
 811e538:	5cba      	ldrb	r2, [r7, r2]
 811e53a:	0712      	lsls	r2, r2, #28
 811e53c:	d401      	bmi.n	811e542 <__ssvfiscanf_r+0x4e>
 811e53e:	462a      	mov	r2, r5
 811e540:	e7eb      	b.n	811e51a <__ssvfiscanf_r+0x26>
 811e542:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 811e544:	3201      	adds	r2, #1
 811e546:	9245      	str	r2, [sp, #276]	@ 0x114
 811e548:	6862      	ldr	r2, [r4, #4]
 811e54a:	3301      	adds	r3, #1
 811e54c:	3a01      	subs	r2, #1
 811e54e:	6062      	str	r2, [r4, #4]
 811e550:	6023      	str	r3, [r4, #0]
 811e552:	e7ec      	b.n	811e52e <__ssvfiscanf_r+0x3a>
 811e554:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 811e556:	4621      	mov	r1, r4
 811e558:	4630      	mov	r0, r6
 811e55a:	4798      	blx	r3
 811e55c:	2800      	cmp	r0, #0
 811e55e:	d0e9      	beq.n	811e534 <__ssvfiscanf_r+0x40>
 811e560:	e7ed      	b.n	811e53e <__ssvfiscanf_r+0x4a>
 811e562:	2b25      	cmp	r3, #37	@ 0x25
 811e564:	d012      	beq.n	811e58c <__ssvfiscanf_r+0x98>
 811e566:	4699      	mov	r9, r3
 811e568:	6863      	ldr	r3, [r4, #4]
 811e56a:	2b00      	cmp	r3, #0
 811e56c:	f340 8093 	ble.w	811e696 <__ssvfiscanf_r+0x1a2>
 811e570:	6822      	ldr	r2, [r4, #0]
 811e572:	7813      	ldrb	r3, [r2, #0]
 811e574:	454b      	cmp	r3, r9
 811e576:	f040 812c 	bne.w	811e7d2 <__ssvfiscanf_r+0x2de>
 811e57a:	6863      	ldr	r3, [r4, #4]
 811e57c:	3b01      	subs	r3, #1
 811e57e:	6063      	str	r3, [r4, #4]
 811e580:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 811e582:	3201      	adds	r2, #1
 811e584:	3301      	adds	r3, #1
 811e586:	6022      	str	r2, [r4, #0]
 811e588:	9345      	str	r3, [sp, #276]	@ 0x114
 811e58a:	e7d8      	b.n	811e53e <__ssvfiscanf_r+0x4a>
 811e58c:	9141      	str	r1, [sp, #260]	@ 0x104
 811e58e:	9143      	str	r1, [sp, #268]	@ 0x10c
 811e590:	7853      	ldrb	r3, [r2, #1]
 811e592:	2b2a      	cmp	r3, #42	@ 0x2a
 811e594:	bf02      	ittt	eq
 811e596:	2310      	moveq	r3, #16
 811e598:	1c95      	addeq	r5, r2, #2
 811e59a:	9341      	streq	r3, [sp, #260]	@ 0x104
 811e59c:	220a      	movs	r2, #10
 811e59e:	46a9      	mov	r9, r5
 811e5a0:	f819 1b01 	ldrb.w	r1, [r9], #1
 811e5a4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 811e5a8:	2b09      	cmp	r3, #9
 811e5aa:	d91e      	bls.n	811e5ea <__ssvfiscanf_r+0xf6>
 811e5ac:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 811e7a8 <__ssvfiscanf_r+0x2b4>
 811e5b0:	2203      	movs	r2, #3
 811e5b2:	4650      	mov	r0, sl
 811e5b4:	f7e1 fe94 	bl	81002e0 <memchr>
 811e5b8:	b138      	cbz	r0, 811e5ca <__ssvfiscanf_r+0xd6>
 811e5ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 811e5bc:	eba0 000a 	sub.w	r0, r0, sl
 811e5c0:	2301      	movs	r3, #1
 811e5c2:	4083      	lsls	r3, r0
 811e5c4:	4313      	orrs	r3, r2
 811e5c6:	9341      	str	r3, [sp, #260]	@ 0x104
 811e5c8:	464d      	mov	r5, r9
 811e5ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 811e5ce:	2b78      	cmp	r3, #120	@ 0x78
 811e5d0:	d806      	bhi.n	811e5e0 <__ssvfiscanf_r+0xec>
 811e5d2:	2b57      	cmp	r3, #87	@ 0x57
 811e5d4:	d810      	bhi.n	811e5f8 <__ssvfiscanf_r+0x104>
 811e5d6:	2b25      	cmp	r3, #37	@ 0x25
 811e5d8:	d0c5      	beq.n	811e566 <__ssvfiscanf_r+0x72>
 811e5da:	d857      	bhi.n	811e68c <__ssvfiscanf_r+0x198>
 811e5dc:	2b00      	cmp	r3, #0
 811e5de:	d065      	beq.n	811e6ac <__ssvfiscanf_r+0x1b8>
 811e5e0:	2303      	movs	r3, #3
 811e5e2:	9347      	str	r3, [sp, #284]	@ 0x11c
 811e5e4:	230a      	movs	r3, #10
 811e5e6:	9342      	str	r3, [sp, #264]	@ 0x108
 811e5e8:	e078      	b.n	811e6dc <__ssvfiscanf_r+0x1e8>
 811e5ea:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 811e5ec:	fb02 1103 	mla	r1, r2, r3, r1
 811e5f0:	3930      	subs	r1, #48	@ 0x30
 811e5f2:	9143      	str	r1, [sp, #268]	@ 0x10c
 811e5f4:	464d      	mov	r5, r9
 811e5f6:	e7d2      	b.n	811e59e <__ssvfiscanf_r+0xaa>
 811e5f8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 811e5fc:	2a20      	cmp	r2, #32
 811e5fe:	d8ef      	bhi.n	811e5e0 <__ssvfiscanf_r+0xec>
 811e600:	a101      	add	r1, pc, #4	@ (adr r1, 811e608 <__ssvfiscanf_r+0x114>)
 811e602:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 811e606:	bf00      	nop
 811e608:	0811e6bb 	.word	0x0811e6bb
 811e60c:	0811e5e1 	.word	0x0811e5e1
 811e610:	0811e5e1 	.word	0x0811e5e1
 811e614:	0811e715 	.word	0x0811e715
 811e618:	0811e5e1 	.word	0x0811e5e1
 811e61c:	0811e5e1 	.word	0x0811e5e1
 811e620:	0811e5e1 	.word	0x0811e5e1
 811e624:	0811e5e1 	.word	0x0811e5e1
 811e628:	0811e5e1 	.word	0x0811e5e1
 811e62c:	0811e5e1 	.word	0x0811e5e1
 811e630:	0811e5e1 	.word	0x0811e5e1
 811e634:	0811e72b 	.word	0x0811e72b
 811e638:	0811e711 	.word	0x0811e711
 811e63c:	0811e693 	.word	0x0811e693
 811e640:	0811e693 	.word	0x0811e693
 811e644:	0811e693 	.word	0x0811e693
 811e648:	0811e5e1 	.word	0x0811e5e1
 811e64c:	0811e6cd 	.word	0x0811e6cd
 811e650:	0811e5e1 	.word	0x0811e5e1
 811e654:	0811e5e1 	.word	0x0811e5e1
 811e658:	0811e5e1 	.word	0x0811e5e1
 811e65c:	0811e5e1 	.word	0x0811e5e1
 811e660:	0811e73b 	.word	0x0811e73b
 811e664:	0811e6d5 	.word	0x0811e6d5
 811e668:	0811e6b3 	.word	0x0811e6b3
 811e66c:	0811e5e1 	.word	0x0811e5e1
 811e670:	0811e5e1 	.word	0x0811e5e1
 811e674:	0811e737 	.word	0x0811e737
 811e678:	0811e5e1 	.word	0x0811e5e1
 811e67c:	0811e711 	.word	0x0811e711
 811e680:	0811e5e1 	.word	0x0811e5e1
 811e684:	0811e5e1 	.word	0x0811e5e1
 811e688:	0811e6bb 	.word	0x0811e6bb
 811e68c:	3b45      	subs	r3, #69	@ 0x45
 811e68e:	2b02      	cmp	r3, #2
 811e690:	d8a6      	bhi.n	811e5e0 <__ssvfiscanf_r+0xec>
 811e692:	2305      	movs	r3, #5
 811e694:	e021      	b.n	811e6da <__ssvfiscanf_r+0x1e6>
 811e696:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 811e698:	4621      	mov	r1, r4
 811e69a:	4630      	mov	r0, r6
 811e69c:	4798      	blx	r3
 811e69e:	2800      	cmp	r0, #0
 811e6a0:	f43f af66 	beq.w	811e570 <__ssvfiscanf_r+0x7c>
 811e6a4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 811e6a6:	2800      	cmp	r0, #0
 811e6a8:	f040 808b 	bne.w	811e7c2 <__ssvfiscanf_r+0x2ce>
 811e6ac:	f04f 30ff 	mov.w	r0, #4294967295
 811e6b0:	e08b      	b.n	811e7ca <__ssvfiscanf_r+0x2d6>
 811e6b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 811e6b4:	f042 0220 	orr.w	r2, r2, #32
 811e6b8:	9241      	str	r2, [sp, #260]	@ 0x104
 811e6ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 811e6bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 811e6c0:	9241      	str	r2, [sp, #260]	@ 0x104
 811e6c2:	2210      	movs	r2, #16
 811e6c4:	2b6e      	cmp	r3, #110	@ 0x6e
 811e6c6:	9242      	str	r2, [sp, #264]	@ 0x108
 811e6c8:	d902      	bls.n	811e6d0 <__ssvfiscanf_r+0x1dc>
 811e6ca:	e005      	b.n	811e6d8 <__ssvfiscanf_r+0x1e4>
 811e6cc:	2300      	movs	r3, #0
 811e6ce:	9342      	str	r3, [sp, #264]	@ 0x108
 811e6d0:	2303      	movs	r3, #3
 811e6d2:	e002      	b.n	811e6da <__ssvfiscanf_r+0x1e6>
 811e6d4:	2308      	movs	r3, #8
 811e6d6:	9342      	str	r3, [sp, #264]	@ 0x108
 811e6d8:	2304      	movs	r3, #4
 811e6da:	9347      	str	r3, [sp, #284]	@ 0x11c
 811e6dc:	6863      	ldr	r3, [r4, #4]
 811e6de:	2b00      	cmp	r3, #0
 811e6e0:	dd39      	ble.n	811e756 <__ssvfiscanf_r+0x262>
 811e6e2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 811e6e4:	0659      	lsls	r1, r3, #25
 811e6e6:	d404      	bmi.n	811e6f2 <__ssvfiscanf_r+0x1fe>
 811e6e8:	6823      	ldr	r3, [r4, #0]
 811e6ea:	781a      	ldrb	r2, [r3, #0]
 811e6ec:	5cba      	ldrb	r2, [r7, r2]
 811e6ee:	0712      	lsls	r2, r2, #28
 811e6f0:	d438      	bmi.n	811e764 <__ssvfiscanf_r+0x270>
 811e6f2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 811e6f4:	2b02      	cmp	r3, #2
 811e6f6:	dc47      	bgt.n	811e788 <__ssvfiscanf_r+0x294>
 811e6f8:	466b      	mov	r3, sp
 811e6fa:	4622      	mov	r2, r4
 811e6fc:	a941      	add	r1, sp, #260	@ 0x104
 811e6fe:	4630      	mov	r0, r6
 811e700:	f000 f86c 	bl	811e7dc <_scanf_chars>
 811e704:	2801      	cmp	r0, #1
 811e706:	d064      	beq.n	811e7d2 <__ssvfiscanf_r+0x2de>
 811e708:	2802      	cmp	r0, #2
 811e70a:	f47f af18 	bne.w	811e53e <__ssvfiscanf_r+0x4a>
 811e70e:	e7c9      	b.n	811e6a4 <__ssvfiscanf_r+0x1b0>
 811e710:	220a      	movs	r2, #10
 811e712:	e7d7      	b.n	811e6c4 <__ssvfiscanf_r+0x1d0>
 811e714:	4629      	mov	r1, r5
 811e716:	4640      	mov	r0, r8
 811e718:	f000 fa22 	bl	811eb60 <__sccl>
 811e71c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 811e71e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811e722:	9341      	str	r3, [sp, #260]	@ 0x104
 811e724:	4605      	mov	r5, r0
 811e726:	2301      	movs	r3, #1
 811e728:	e7d7      	b.n	811e6da <__ssvfiscanf_r+0x1e6>
 811e72a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 811e72c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811e730:	9341      	str	r3, [sp, #260]	@ 0x104
 811e732:	2300      	movs	r3, #0
 811e734:	e7d1      	b.n	811e6da <__ssvfiscanf_r+0x1e6>
 811e736:	2302      	movs	r3, #2
 811e738:	e7cf      	b.n	811e6da <__ssvfiscanf_r+0x1e6>
 811e73a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 811e73c:	06c3      	lsls	r3, r0, #27
 811e73e:	f53f aefe 	bmi.w	811e53e <__ssvfiscanf_r+0x4a>
 811e742:	9b00      	ldr	r3, [sp, #0]
 811e744:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 811e746:	1d19      	adds	r1, r3, #4
 811e748:	9100      	str	r1, [sp, #0]
 811e74a:	681b      	ldr	r3, [r3, #0]
 811e74c:	07c0      	lsls	r0, r0, #31
 811e74e:	bf4c      	ite	mi
 811e750:	801a      	strhmi	r2, [r3, #0]
 811e752:	601a      	strpl	r2, [r3, #0]
 811e754:	e6f3      	b.n	811e53e <__ssvfiscanf_r+0x4a>
 811e756:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 811e758:	4621      	mov	r1, r4
 811e75a:	4630      	mov	r0, r6
 811e75c:	4798      	blx	r3
 811e75e:	2800      	cmp	r0, #0
 811e760:	d0bf      	beq.n	811e6e2 <__ssvfiscanf_r+0x1ee>
 811e762:	e79f      	b.n	811e6a4 <__ssvfiscanf_r+0x1b0>
 811e764:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 811e766:	3201      	adds	r2, #1
 811e768:	9245      	str	r2, [sp, #276]	@ 0x114
 811e76a:	6862      	ldr	r2, [r4, #4]
 811e76c:	3a01      	subs	r2, #1
 811e76e:	2a00      	cmp	r2, #0
 811e770:	6062      	str	r2, [r4, #4]
 811e772:	dd02      	ble.n	811e77a <__ssvfiscanf_r+0x286>
 811e774:	3301      	adds	r3, #1
 811e776:	6023      	str	r3, [r4, #0]
 811e778:	e7b6      	b.n	811e6e8 <__ssvfiscanf_r+0x1f4>
 811e77a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 811e77c:	4621      	mov	r1, r4
 811e77e:	4630      	mov	r0, r6
 811e780:	4798      	blx	r3
 811e782:	2800      	cmp	r0, #0
 811e784:	d0b0      	beq.n	811e6e8 <__ssvfiscanf_r+0x1f4>
 811e786:	e78d      	b.n	811e6a4 <__ssvfiscanf_r+0x1b0>
 811e788:	2b04      	cmp	r3, #4
 811e78a:	dc0f      	bgt.n	811e7ac <__ssvfiscanf_r+0x2b8>
 811e78c:	466b      	mov	r3, sp
 811e78e:	4622      	mov	r2, r4
 811e790:	a941      	add	r1, sp, #260	@ 0x104
 811e792:	4630      	mov	r0, r6
 811e794:	f000 f87c 	bl	811e890 <_scanf_i>
 811e798:	e7b4      	b.n	811e704 <__ssvfiscanf_r+0x210>
 811e79a:	bf00      	nop
 811e79c:	0811e445 	.word	0x0811e445
 811e7a0:	0811e4bb 	.word	0x0811e4bb
 811e7a4:	0812265c 	.word	0x0812265c
 811e7a8:	08122762 	.word	0x08122762
 811e7ac:	4b0a      	ldr	r3, [pc, #40]	@ (811e7d8 <__ssvfiscanf_r+0x2e4>)
 811e7ae:	2b00      	cmp	r3, #0
 811e7b0:	f43f aec5 	beq.w	811e53e <__ssvfiscanf_r+0x4a>
 811e7b4:	466b      	mov	r3, sp
 811e7b6:	4622      	mov	r2, r4
 811e7b8:	a941      	add	r1, sp, #260	@ 0x104
 811e7ba:	4630      	mov	r0, r6
 811e7bc:	f3af 8000 	nop.w
 811e7c0:	e7a0      	b.n	811e704 <__ssvfiscanf_r+0x210>
 811e7c2:	89a3      	ldrh	r3, [r4, #12]
 811e7c4:	065b      	lsls	r3, r3, #25
 811e7c6:	f53f af71 	bmi.w	811e6ac <__ssvfiscanf_r+0x1b8>
 811e7ca:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 811e7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811e7d2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 811e7d4:	e7f9      	b.n	811e7ca <__ssvfiscanf_r+0x2d6>
 811e7d6:	bf00      	nop
 811e7d8:	00000000 	.word	0x00000000

0811e7dc <_scanf_chars>:
 811e7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811e7e0:	4615      	mov	r5, r2
 811e7e2:	688a      	ldr	r2, [r1, #8]
 811e7e4:	4680      	mov	r8, r0
 811e7e6:	460c      	mov	r4, r1
 811e7e8:	b932      	cbnz	r2, 811e7f8 <_scanf_chars+0x1c>
 811e7ea:	698a      	ldr	r2, [r1, #24]
 811e7ec:	2a00      	cmp	r2, #0
 811e7ee:	bf14      	ite	ne
 811e7f0:	f04f 32ff 	movne.w	r2, #4294967295
 811e7f4:	2201      	moveq	r2, #1
 811e7f6:	608a      	str	r2, [r1, #8]
 811e7f8:	6822      	ldr	r2, [r4, #0]
 811e7fa:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 811e88c <_scanf_chars+0xb0>
 811e7fe:	06d1      	lsls	r1, r2, #27
 811e800:	bf5f      	itttt	pl
 811e802:	681a      	ldrpl	r2, [r3, #0]
 811e804:	1d11      	addpl	r1, r2, #4
 811e806:	6019      	strpl	r1, [r3, #0]
 811e808:	6816      	ldrpl	r6, [r2, #0]
 811e80a:	2700      	movs	r7, #0
 811e80c:	69a0      	ldr	r0, [r4, #24]
 811e80e:	b188      	cbz	r0, 811e834 <_scanf_chars+0x58>
 811e810:	2801      	cmp	r0, #1
 811e812:	d107      	bne.n	811e824 <_scanf_chars+0x48>
 811e814:	682b      	ldr	r3, [r5, #0]
 811e816:	781a      	ldrb	r2, [r3, #0]
 811e818:	6963      	ldr	r3, [r4, #20]
 811e81a:	5c9b      	ldrb	r3, [r3, r2]
 811e81c:	b953      	cbnz	r3, 811e834 <_scanf_chars+0x58>
 811e81e:	2f00      	cmp	r7, #0
 811e820:	d031      	beq.n	811e886 <_scanf_chars+0xaa>
 811e822:	e022      	b.n	811e86a <_scanf_chars+0x8e>
 811e824:	2802      	cmp	r0, #2
 811e826:	d120      	bne.n	811e86a <_scanf_chars+0x8e>
 811e828:	682b      	ldr	r3, [r5, #0]
 811e82a:	781b      	ldrb	r3, [r3, #0]
 811e82c:	f819 3003 	ldrb.w	r3, [r9, r3]
 811e830:	071b      	lsls	r3, r3, #28
 811e832:	d41a      	bmi.n	811e86a <_scanf_chars+0x8e>
 811e834:	6823      	ldr	r3, [r4, #0]
 811e836:	06da      	lsls	r2, r3, #27
 811e838:	bf5e      	ittt	pl
 811e83a:	682b      	ldrpl	r3, [r5, #0]
 811e83c:	781b      	ldrbpl	r3, [r3, #0]
 811e83e:	f806 3b01 	strbpl.w	r3, [r6], #1
 811e842:	682a      	ldr	r2, [r5, #0]
 811e844:	686b      	ldr	r3, [r5, #4]
 811e846:	3201      	adds	r2, #1
 811e848:	602a      	str	r2, [r5, #0]
 811e84a:	68a2      	ldr	r2, [r4, #8]
 811e84c:	3b01      	subs	r3, #1
 811e84e:	3a01      	subs	r2, #1
 811e850:	606b      	str	r3, [r5, #4]
 811e852:	3701      	adds	r7, #1
 811e854:	60a2      	str	r2, [r4, #8]
 811e856:	b142      	cbz	r2, 811e86a <_scanf_chars+0x8e>
 811e858:	2b00      	cmp	r3, #0
 811e85a:	dcd7      	bgt.n	811e80c <_scanf_chars+0x30>
 811e85c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 811e860:	4629      	mov	r1, r5
 811e862:	4640      	mov	r0, r8
 811e864:	4798      	blx	r3
 811e866:	2800      	cmp	r0, #0
 811e868:	d0d0      	beq.n	811e80c <_scanf_chars+0x30>
 811e86a:	6823      	ldr	r3, [r4, #0]
 811e86c:	f013 0310 	ands.w	r3, r3, #16
 811e870:	d105      	bne.n	811e87e <_scanf_chars+0xa2>
 811e872:	68e2      	ldr	r2, [r4, #12]
 811e874:	3201      	adds	r2, #1
 811e876:	60e2      	str	r2, [r4, #12]
 811e878:	69a2      	ldr	r2, [r4, #24]
 811e87a:	b102      	cbz	r2, 811e87e <_scanf_chars+0xa2>
 811e87c:	7033      	strb	r3, [r6, #0]
 811e87e:	6923      	ldr	r3, [r4, #16]
 811e880:	443b      	add	r3, r7
 811e882:	6123      	str	r3, [r4, #16]
 811e884:	2000      	movs	r0, #0
 811e886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811e88a:	bf00      	nop
 811e88c:	0812265c 	.word	0x0812265c

0811e890 <_scanf_i>:
 811e890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811e894:	4698      	mov	r8, r3
 811e896:	4b74      	ldr	r3, [pc, #464]	@ (811ea68 <_scanf_i+0x1d8>)
 811e898:	460c      	mov	r4, r1
 811e89a:	4682      	mov	sl, r0
 811e89c:	4616      	mov	r6, r2
 811e89e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 811e8a2:	b087      	sub	sp, #28
 811e8a4:	ab03      	add	r3, sp, #12
 811e8a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 811e8aa:	4b70      	ldr	r3, [pc, #448]	@ (811ea6c <_scanf_i+0x1dc>)
 811e8ac:	69a1      	ldr	r1, [r4, #24]
 811e8ae:	4a70      	ldr	r2, [pc, #448]	@ (811ea70 <_scanf_i+0x1e0>)
 811e8b0:	2903      	cmp	r1, #3
 811e8b2:	bf08      	it	eq
 811e8b4:	461a      	moveq	r2, r3
 811e8b6:	68a3      	ldr	r3, [r4, #8]
 811e8b8:	9201      	str	r2, [sp, #4]
 811e8ba:	1e5a      	subs	r2, r3, #1
 811e8bc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 811e8c0:	bf88      	it	hi
 811e8c2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 811e8c6:	4627      	mov	r7, r4
 811e8c8:	bf82      	ittt	hi
 811e8ca:	eb03 0905 	addhi.w	r9, r3, r5
 811e8ce:	f240 135d 	movwhi	r3, #349	@ 0x15d
 811e8d2:	60a3      	strhi	r3, [r4, #8]
 811e8d4:	f857 3b1c 	ldr.w	r3, [r7], #28
 811e8d8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 811e8dc:	bf98      	it	ls
 811e8de:	f04f 0900 	movls.w	r9, #0
 811e8e2:	6023      	str	r3, [r4, #0]
 811e8e4:	463d      	mov	r5, r7
 811e8e6:	f04f 0b00 	mov.w	fp, #0
 811e8ea:	6831      	ldr	r1, [r6, #0]
 811e8ec:	ab03      	add	r3, sp, #12
 811e8ee:	7809      	ldrb	r1, [r1, #0]
 811e8f0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 811e8f4:	2202      	movs	r2, #2
 811e8f6:	f7e1 fcf3 	bl	81002e0 <memchr>
 811e8fa:	b328      	cbz	r0, 811e948 <_scanf_i+0xb8>
 811e8fc:	f1bb 0f01 	cmp.w	fp, #1
 811e900:	d159      	bne.n	811e9b6 <_scanf_i+0x126>
 811e902:	6862      	ldr	r2, [r4, #4]
 811e904:	b92a      	cbnz	r2, 811e912 <_scanf_i+0x82>
 811e906:	6822      	ldr	r2, [r4, #0]
 811e908:	2108      	movs	r1, #8
 811e90a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 811e90e:	6061      	str	r1, [r4, #4]
 811e910:	6022      	str	r2, [r4, #0]
 811e912:	6822      	ldr	r2, [r4, #0]
 811e914:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 811e918:	6022      	str	r2, [r4, #0]
 811e91a:	68a2      	ldr	r2, [r4, #8]
 811e91c:	1e51      	subs	r1, r2, #1
 811e91e:	60a1      	str	r1, [r4, #8]
 811e920:	b192      	cbz	r2, 811e948 <_scanf_i+0xb8>
 811e922:	6832      	ldr	r2, [r6, #0]
 811e924:	1c51      	adds	r1, r2, #1
 811e926:	6031      	str	r1, [r6, #0]
 811e928:	7812      	ldrb	r2, [r2, #0]
 811e92a:	f805 2b01 	strb.w	r2, [r5], #1
 811e92e:	6872      	ldr	r2, [r6, #4]
 811e930:	3a01      	subs	r2, #1
 811e932:	2a00      	cmp	r2, #0
 811e934:	6072      	str	r2, [r6, #4]
 811e936:	dc07      	bgt.n	811e948 <_scanf_i+0xb8>
 811e938:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 811e93c:	4631      	mov	r1, r6
 811e93e:	4650      	mov	r0, sl
 811e940:	4790      	blx	r2
 811e942:	2800      	cmp	r0, #0
 811e944:	f040 8085 	bne.w	811ea52 <_scanf_i+0x1c2>
 811e948:	f10b 0b01 	add.w	fp, fp, #1
 811e94c:	f1bb 0f03 	cmp.w	fp, #3
 811e950:	d1cb      	bne.n	811e8ea <_scanf_i+0x5a>
 811e952:	6863      	ldr	r3, [r4, #4]
 811e954:	b90b      	cbnz	r3, 811e95a <_scanf_i+0xca>
 811e956:	230a      	movs	r3, #10
 811e958:	6063      	str	r3, [r4, #4]
 811e95a:	6863      	ldr	r3, [r4, #4]
 811e95c:	4945      	ldr	r1, [pc, #276]	@ (811ea74 <_scanf_i+0x1e4>)
 811e95e:	6960      	ldr	r0, [r4, #20]
 811e960:	1ac9      	subs	r1, r1, r3
 811e962:	f000 f8fd 	bl	811eb60 <__sccl>
 811e966:	f04f 0b00 	mov.w	fp, #0
 811e96a:	68a3      	ldr	r3, [r4, #8]
 811e96c:	6822      	ldr	r2, [r4, #0]
 811e96e:	2b00      	cmp	r3, #0
 811e970:	d03d      	beq.n	811e9ee <_scanf_i+0x15e>
 811e972:	6831      	ldr	r1, [r6, #0]
 811e974:	6960      	ldr	r0, [r4, #20]
 811e976:	f891 c000 	ldrb.w	ip, [r1]
 811e97a:	f810 000c 	ldrb.w	r0, [r0, ip]
 811e97e:	2800      	cmp	r0, #0
 811e980:	d035      	beq.n	811e9ee <_scanf_i+0x15e>
 811e982:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 811e986:	d124      	bne.n	811e9d2 <_scanf_i+0x142>
 811e988:	0510      	lsls	r0, r2, #20
 811e98a:	d522      	bpl.n	811e9d2 <_scanf_i+0x142>
 811e98c:	f10b 0b01 	add.w	fp, fp, #1
 811e990:	f1b9 0f00 	cmp.w	r9, #0
 811e994:	d003      	beq.n	811e99e <_scanf_i+0x10e>
 811e996:	3301      	adds	r3, #1
 811e998:	f109 39ff 	add.w	r9, r9, #4294967295
 811e99c:	60a3      	str	r3, [r4, #8]
 811e99e:	6873      	ldr	r3, [r6, #4]
 811e9a0:	3b01      	subs	r3, #1
 811e9a2:	2b00      	cmp	r3, #0
 811e9a4:	6073      	str	r3, [r6, #4]
 811e9a6:	dd1b      	ble.n	811e9e0 <_scanf_i+0x150>
 811e9a8:	6833      	ldr	r3, [r6, #0]
 811e9aa:	3301      	adds	r3, #1
 811e9ac:	6033      	str	r3, [r6, #0]
 811e9ae:	68a3      	ldr	r3, [r4, #8]
 811e9b0:	3b01      	subs	r3, #1
 811e9b2:	60a3      	str	r3, [r4, #8]
 811e9b4:	e7d9      	b.n	811e96a <_scanf_i+0xda>
 811e9b6:	f1bb 0f02 	cmp.w	fp, #2
 811e9ba:	d1ae      	bne.n	811e91a <_scanf_i+0x8a>
 811e9bc:	6822      	ldr	r2, [r4, #0]
 811e9be:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 811e9c2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 811e9c6:	d1bf      	bne.n	811e948 <_scanf_i+0xb8>
 811e9c8:	2110      	movs	r1, #16
 811e9ca:	6061      	str	r1, [r4, #4]
 811e9cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 811e9d0:	e7a2      	b.n	811e918 <_scanf_i+0x88>
 811e9d2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 811e9d6:	6022      	str	r2, [r4, #0]
 811e9d8:	780b      	ldrb	r3, [r1, #0]
 811e9da:	f805 3b01 	strb.w	r3, [r5], #1
 811e9de:	e7de      	b.n	811e99e <_scanf_i+0x10e>
 811e9e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 811e9e4:	4631      	mov	r1, r6
 811e9e6:	4650      	mov	r0, sl
 811e9e8:	4798      	blx	r3
 811e9ea:	2800      	cmp	r0, #0
 811e9ec:	d0df      	beq.n	811e9ae <_scanf_i+0x11e>
 811e9ee:	6823      	ldr	r3, [r4, #0]
 811e9f0:	05d9      	lsls	r1, r3, #23
 811e9f2:	d50d      	bpl.n	811ea10 <_scanf_i+0x180>
 811e9f4:	42bd      	cmp	r5, r7
 811e9f6:	d909      	bls.n	811ea0c <_scanf_i+0x17c>
 811e9f8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 811e9fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 811ea00:	4632      	mov	r2, r6
 811ea02:	4650      	mov	r0, sl
 811ea04:	4798      	blx	r3
 811ea06:	f105 39ff 	add.w	r9, r5, #4294967295
 811ea0a:	464d      	mov	r5, r9
 811ea0c:	42bd      	cmp	r5, r7
 811ea0e:	d028      	beq.n	811ea62 <_scanf_i+0x1d2>
 811ea10:	6822      	ldr	r2, [r4, #0]
 811ea12:	f012 0210 	ands.w	r2, r2, #16
 811ea16:	d113      	bne.n	811ea40 <_scanf_i+0x1b0>
 811ea18:	702a      	strb	r2, [r5, #0]
 811ea1a:	6863      	ldr	r3, [r4, #4]
 811ea1c:	9e01      	ldr	r6, [sp, #4]
 811ea1e:	4639      	mov	r1, r7
 811ea20:	4650      	mov	r0, sl
 811ea22:	47b0      	blx	r6
 811ea24:	f8d8 3000 	ldr.w	r3, [r8]
 811ea28:	6821      	ldr	r1, [r4, #0]
 811ea2a:	1d1a      	adds	r2, r3, #4
 811ea2c:	f8c8 2000 	str.w	r2, [r8]
 811ea30:	f011 0f20 	tst.w	r1, #32
 811ea34:	681b      	ldr	r3, [r3, #0]
 811ea36:	d00f      	beq.n	811ea58 <_scanf_i+0x1c8>
 811ea38:	6018      	str	r0, [r3, #0]
 811ea3a:	68e3      	ldr	r3, [r4, #12]
 811ea3c:	3301      	adds	r3, #1
 811ea3e:	60e3      	str	r3, [r4, #12]
 811ea40:	6923      	ldr	r3, [r4, #16]
 811ea42:	1bed      	subs	r5, r5, r7
 811ea44:	445d      	add	r5, fp
 811ea46:	442b      	add	r3, r5
 811ea48:	6123      	str	r3, [r4, #16]
 811ea4a:	2000      	movs	r0, #0
 811ea4c:	b007      	add	sp, #28
 811ea4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811ea52:	f04f 0b00 	mov.w	fp, #0
 811ea56:	e7ca      	b.n	811e9ee <_scanf_i+0x15e>
 811ea58:	07ca      	lsls	r2, r1, #31
 811ea5a:	bf4c      	ite	mi
 811ea5c:	8018      	strhmi	r0, [r3, #0]
 811ea5e:	6018      	strpl	r0, [r3, #0]
 811ea60:	e7eb      	b.n	811ea3a <_scanf_i+0x1aa>
 811ea62:	2001      	movs	r0, #1
 811ea64:	e7f2      	b.n	811ea4c <_scanf_i+0x1bc>
 811ea66:	bf00      	nop
 811ea68:	081223fc 	.word	0x081223fc
 811ea6c:	0811d46d 	.word	0x0811d46d
 811ea70:	0811ed79 	.word	0x0811ed79
 811ea74:	081227db 	.word	0x081227db

0811ea78 <fiprintf>:
 811ea78:	b40e      	push	{r1, r2, r3}
 811ea7a:	b503      	push	{r0, r1, lr}
 811ea7c:	4601      	mov	r1, r0
 811ea7e:	ab03      	add	r3, sp, #12
 811ea80:	4805      	ldr	r0, [pc, #20]	@ (811ea98 <fiprintf+0x20>)
 811ea82:	f853 2b04 	ldr.w	r2, [r3], #4
 811ea86:	6800      	ldr	r0, [r0, #0]
 811ea88:	9301      	str	r3, [sp, #4]
 811ea8a:	f7fe fd1b 	bl	811d4c4 <_vfiprintf_r>
 811ea8e:	b002      	add	sp, #8
 811ea90:	f85d eb04 	ldr.w	lr, [sp], #4
 811ea94:	b003      	add	sp, #12
 811ea96:	4770      	bx	lr
 811ea98:	10000040 	.word	0x10000040

0811ea9c <__swhatbuf_r>:
 811ea9c:	b570      	push	{r4, r5, r6, lr}
 811ea9e:	460c      	mov	r4, r1
 811eaa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811eaa4:	2900      	cmp	r1, #0
 811eaa6:	b096      	sub	sp, #88	@ 0x58
 811eaa8:	4615      	mov	r5, r2
 811eaaa:	461e      	mov	r6, r3
 811eaac:	da0d      	bge.n	811eaca <__swhatbuf_r+0x2e>
 811eaae:	89a3      	ldrh	r3, [r4, #12]
 811eab0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 811eab4:	f04f 0100 	mov.w	r1, #0
 811eab8:	bf14      	ite	ne
 811eaba:	2340      	movne	r3, #64	@ 0x40
 811eabc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 811eac0:	2000      	movs	r0, #0
 811eac2:	6031      	str	r1, [r6, #0]
 811eac4:	602b      	str	r3, [r5, #0]
 811eac6:	b016      	add	sp, #88	@ 0x58
 811eac8:	bd70      	pop	{r4, r5, r6, pc}
 811eaca:	466a      	mov	r2, sp
 811eacc:	f000 f8bc 	bl	811ec48 <_fstat_r>
 811ead0:	2800      	cmp	r0, #0
 811ead2:	dbec      	blt.n	811eaae <__swhatbuf_r+0x12>
 811ead4:	9901      	ldr	r1, [sp, #4]
 811ead6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 811eada:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 811eade:	4259      	negs	r1, r3
 811eae0:	4159      	adcs	r1, r3
 811eae2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 811eae6:	e7eb      	b.n	811eac0 <__swhatbuf_r+0x24>

0811eae8 <__smakebuf_r>:
 811eae8:	898b      	ldrh	r3, [r1, #12]
 811eaea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 811eaec:	079d      	lsls	r5, r3, #30
 811eaee:	4606      	mov	r6, r0
 811eaf0:	460c      	mov	r4, r1
 811eaf2:	d507      	bpl.n	811eb04 <__smakebuf_r+0x1c>
 811eaf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 811eaf8:	6023      	str	r3, [r4, #0]
 811eafa:	6123      	str	r3, [r4, #16]
 811eafc:	2301      	movs	r3, #1
 811eafe:	6163      	str	r3, [r4, #20]
 811eb00:	b003      	add	sp, #12
 811eb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 811eb04:	ab01      	add	r3, sp, #4
 811eb06:	466a      	mov	r2, sp
 811eb08:	f7ff ffc8 	bl	811ea9c <__swhatbuf_r>
 811eb0c:	9f00      	ldr	r7, [sp, #0]
 811eb0e:	4605      	mov	r5, r0
 811eb10:	4639      	mov	r1, r7
 811eb12:	4630      	mov	r0, r6
 811eb14:	f7fe fb66 	bl	811d1e4 <_malloc_r>
 811eb18:	b948      	cbnz	r0, 811eb2e <__smakebuf_r+0x46>
 811eb1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811eb1e:	059a      	lsls	r2, r3, #22
 811eb20:	d4ee      	bmi.n	811eb00 <__smakebuf_r+0x18>
 811eb22:	f023 0303 	bic.w	r3, r3, #3
 811eb26:	f043 0302 	orr.w	r3, r3, #2
 811eb2a:	81a3      	strh	r3, [r4, #12]
 811eb2c:	e7e2      	b.n	811eaf4 <__smakebuf_r+0xc>
 811eb2e:	89a3      	ldrh	r3, [r4, #12]
 811eb30:	6020      	str	r0, [r4, #0]
 811eb32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811eb36:	81a3      	strh	r3, [r4, #12]
 811eb38:	9b01      	ldr	r3, [sp, #4]
 811eb3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 811eb3e:	b15b      	cbz	r3, 811eb58 <__smakebuf_r+0x70>
 811eb40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811eb44:	4630      	mov	r0, r6
 811eb46:	f000 f891 	bl	811ec6c <_isatty_r>
 811eb4a:	b128      	cbz	r0, 811eb58 <__smakebuf_r+0x70>
 811eb4c:	89a3      	ldrh	r3, [r4, #12]
 811eb4e:	f023 0303 	bic.w	r3, r3, #3
 811eb52:	f043 0301 	orr.w	r3, r3, #1
 811eb56:	81a3      	strh	r3, [r4, #12]
 811eb58:	89a3      	ldrh	r3, [r4, #12]
 811eb5a:	431d      	orrs	r5, r3
 811eb5c:	81a5      	strh	r5, [r4, #12]
 811eb5e:	e7cf      	b.n	811eb00 <__smakebuf_r+0x18>

0811eb60 <__sccl>:
 811eb60:	b570      	push	{r4, r5, r6, lr}
 811eb62:	780b      	ldrb	r3, [r1, #0]
 811eb64:	4604      	mov	r4, r0
 811eb66:	2b5e      	cmp	r3, #94	@ 0x5e
 811eb68:	bf0b      	itete	eq
 811eb6a:	784b      	ldrbeq	r3, [r1, #1]
 811eb6c:	1c4a      	addne	r2, r1, #1
 811eb6e:	1c8a      	addeq	r2, r1, #2
 811eb70:	2100      	movne	r1, #0
 811eb72:	bf08      	it	eq
 811eb74:	2101      	moveq	r1, #1
 811eb76:	3801      	subs	r0, #1
 811eb78:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 811eb7c:	f800 1f01 	strb.w	r1, [r0, #1]!
 811eb80:	42a8      	cmp	r0, r5
 811eb82:	d1fb      	bne.n	811eb7c <__sccl+0x1c>
 811eb84:	b90b      	cbnz	r3, 811eb8a <__sccl+0x2a>
 811eb86:	1e50      	subs	r0, r2, #1
 811eb88:	bd70      	pop	{r4, r5, r6, pc}
 811eb8a:	f081 0101 	eor.w	r1, r1, #1
 811eb8e:	54e1      	strb	r1, [r4, r3]
 811eb90:	4610      	mov	r0, r2
 811eb92:	4602      	mov	r2, r0
 811eb94:	f812 5b01 	ldrb.w	r5, [r2], #1
 811eb98:	2d2d      	cmp	r5, #45	@ 0x2d
 811eb9a:	d005      	beq.n	811eba8 <__sccl+0x48>
 811eb9c:	2d5d      	cmp	r5, #93	@ 0x5d
 811eb9e:	d016      	beq.n	811ebce <__sccl+0x6e>
 811eba0:	2d00      	cmp	r5, #0
 811eba2:	d0f1      	beq.n	811eb88 <__sccl+0x28>
 811eba4:	462b      	mov	r3, r5
 811eba6:	e7f2      	b.n	811eb8e <__sccl+0x2e>
 811eba8:	7846      	ldrb	r6, [r0, #1]
 811ebaa:	2e5d      	cmp	r6, #93	@ 0x5d
 811ebac:	d0fa      	beq.n	811eba4 <__sccl+0x44>
 811ebae:	42b3      	cmp	r3, r6
 811ebb0:	dcf8      	bgt.n	811eba4 <__sccl+0x44>
 811ebb2:	3002      	adds	r0, #2
 811ebb4:	461a      	mov	r2, r3
 811ebb6:	3201      	adds	r2, #1
 811ebb8:	4296      	cmp	r6, r2
 811ebba:	54a1      	strb	r1, [r4, r2]
 811ebbc:	dcfb      	bgt.n	811ebb6 <__sccl+0x56>
 811ebbe:	1af2      	subs	r2, r6, r3
 811ebc0:	3a01      	subs	r2, #1
 811ebc2:	1c5d      	adds	r5, r3, #1
 811ebc4:	42b3      	cmp	r3, r6
 811ebc6:	bfa8      	it	ge
 811ebc8:	2200      	movge	r2, #0
 811ebca:	18ab      	adds	r3, r5, r2
 811ebcc:	e7e1      	b.n	811eb92 <__sccl+0x32>
 811ebce:	4610      	mov	r0, r2
 811ebd0:	e7da      	b.n	811eb88 <__sccl+0x28>

0811ebd2 <__submore>:
 811ebd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811ebd6:	460c      	mov	r4, r1
 811ebd8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 811ebda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 811ebde:	4299      	cmp	r1, r3
 811ebe0:	d11d      	bne.n	811ec1e <__submore+0x4c>
 811ebe2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 811ebe6:	f7fe fafd 	bl	811d1e4 <_malloc_r>
 811ebea:	b918      	cbnz	r0, 811ebf4 <__submore+0x22>
 811ebec:	f04f 30ff 	mov.w	r0, #4294967295
 811ebf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811ebf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 811ebf8:	63a3      	str	r3, [r4, #56]	@ 0x38
 811ebfa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 811ebfe:	6360      	str	r0, [r4, #52]	@ 0x34
 811ec00:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 811ec04:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 811ec08:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 811ec0c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 811ec10:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 811ec14:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 811ec18:	6020      	str	r0, [r4, #0]
 811ec1a:	2000      	movs	r0, #0
 811ec1c:	e7e8      	b.n	811ebf0 <__submore+0x1e>
 811ec1e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 811ec20:	0077      	lsls	r7, r6, #1
 811ec22:	463a      	mov	r2, r7
 811ec24:	f7ff fbe0 	bl	811e3e8 <_realloc_r>
 811ec28:	4605      	mov	r5, r0
 811ec2a:	2800      	cmp	r0, #0
 811ec2c:	d0de      	beq.n	811ebec <__submore+0x1a>
 811ec2e:	eb00 0806 	add.w	r8, r0, r6
 811ec32:	4601      	mov	r1, r0
 811ec34:	4632      	mov	r2, r6
 811ec36:	4640      	mov	r0, r8
 811ec38:	f7ff fb5f 	bl	811e2fa <memcpy>
 811ec3c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 811ec40:	f8c4 8000 	str.w	r8, [r4]
 811ec44:	e7e9      	b.n	811ec1a <__submore+0x48>
	...

0811ec48 <_fstat_r>:
 811ec48:	b538      	push	{r3, r4, r5, lr}
 811ec4a:	4d07      	ldr	r5, [pc, #28]	@ (811ec68 <_fstat_r+0x20>)
 811ec4c:	2300      	movs	r3, #0
 811ec4e:	4604      	mov	r4, r0
 811ec50:	4608      	mov	r0, r1
 811ec52:	4611      	mov	r1, r2
 811ec54:	602b      	str	r3, [r5, #0]
 811ec56:	f7e2 f8c1 	bl	8100ddc <_fstat>
 811ec5a:	1c43      	adds	r3, r0, #1
 811ec5c:	d102      	bne.n	811ec64 <_fstat_r+0x1c>
 811ec5e:	682b      	ldr	r3, [r5, #0]
 811ec60:	b103      	cbz	r3, 811ec64 <_fstat_r+0x1c>
 811ec62:	6023      	str	r3, [r4, #0]
 811ec64:	bd38      	pop	{r3, r4, r5, pc}
 811ec66:	bf00      	nop
 811ec68:	100122e0 	.word	0x100122e0

0811ec6c <_isatty_r>:
 811ec6c:	b538      	push	{r3, r4, r5, lr}
 811ec6e:	4d06      	ldr	r5, [pc, #24]	@ (811ec88 <_isatty_r+0x1c>)
 811ec70:	2300      	movs	r3, #0
 811ec72:	4604      	mov	r4, r0
 811ec74:	4608      	mov	r0, r1
 811ec76:	602b      	str	r3, [r5, #0]
 811ec78:	f7e2 f8c0 	bl	8100dfc <_isatty>
 811ec7c:	1c43      	adds	r3, r0, #1
 811ec7e:	d102      	bne.n	811ec86 <_isatty_r+0x1a>
 811ec80:	682b      	ldr	r3, [r5, #0]
 811ec82:	b103      	cbz	r3, 811ec86 <_isatty_r+0x1a>
 811ec84:	6023      	str	r3, [r4, #0]
 811ec86:	bd38      	pop	{r3, r4, r5, pc}
 811ec88:	100122e0 	.word	0x100122e0

0811ec8c <_malloc_usable_size_r>:
 811ec8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811ec90:	1f18      	subs	r0, r3, #4
 811ec92:	2b00      	cmp	r3, #0
 811ec94:	bfbc      	itt	lt
 811ec96:	580b      	ldrlt	r3, [r1, r0]
 811ec98:	18c0      	addlt	r0, r0, r3
 811ec9a:	4770      	bx	lr

0811ec9c <_strtoul_l.constprop.0>:
 811ec9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 811eca0:	4e34      	ldr	r6, [pc, #208]	@ (811ed74 <_strtoul_l.constprop.0+0xd8>)
 811eca2:	4686      	mov	lr, r0
 811eca4:	460d      	mov	r5, r1
 811eca6:	4628      	mov	r0, r5
 811eca8:	f815 4b01 	ldrb.w	r4, [r5], #1
 811ecac:	5d37      	ldrb	r7, [r6, r4]
 811ecae:	f017 0708 	ands.w	r7, r7, #8
 811ecb2:	d1f8      	bne.n	811eca6 <_strtoul_l.constprop.0+0xa>
 811ecb4:	2c2d      	cmp	r4, #45	@ 0x2d
 811ecb6:	d12f      	bne.n	811ed18 <_strtoul_l.constprop.0+0x7c>
 811ecb8:	782c      	ldrb	r4, [r5, #0]
 811ecba:	2701      	movs	r7, #1
 811ecbc:	1c85      	adds	r5, r0, #2
 811ecbe:	f033 0010 	bics.w	r0, r3, #16
 811ecc2:	d109      	bne.n	811ecd8 <_strtoul_l.constprop.0+0x3c>
 811ecc4:	2c30      	cmp	r4, #48	@ 0x30
 811ecc6:	d12c      	bne.n	811ed22 <_strtoul_l.constprop.0+0x86>
 811ecc8:	7828      	ldrb	r0, [r5, #0]
 811ecca:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 811ecce:	2858      	cmp	r0, #88	@ 0x58
 811ecd0:	d127      	bne.n	811ed22 <_strtoul_l.constprop.0+0x86>
 811ecd2:	786c      	ldrb	r4, [r5, #1]
 811ecd4:	2310      	movs	r3, #16
 811ecd6:	3502      	adds	r5, #2
 811ecd8:	f04f 38ff 	mov.w	r8, #4294967295
 811ecdc:	2600      	movs	r6, #0
 811ecde:	fbb8 f8f3 	udiv	r8, r8, r3
 811ece2:	fb03 f908 	mul.w	r9, r3, r8
 811ece6:	ea6f 0909 	mvn.w	r9, r9
 811ecea:	4630      	mov	r0, r6
 811ecec:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 811ecf0:	f1bc 0f09 	cmp.w	ip, #9
 811ecf4:	d81c      	bhi.n	811ed30 <_strtoul_l.constprop.0+0x94>
 811ecf6:	4664      	mov	r4, ip
 811ecf8:	42a3      	cmp	r3, r4
 811ecfa:	dd2a      	ble.n	811ed52 <_strtoul_l.constprop.0+0xb6>
 811ecfc:	f1b6 3fff 	cmp.w	r6, #4294967295
 811ed00:	d007      	beq.n	811ed12 <_strtoul_l.constprop.0+0x76>
 811ed02:	4580      	cmp	r8, r0
 811ed04:	d322      	bcc.n	811ed4c <_strtoul_l.constprop.0+0xb0>
 811ed06:	d101      	bne.n	811ed0c <_strtoul_l.constprop.0+0x70>
 811ed08:	45a1      	cmp	r9, r4
 811ed0a:	db1f      	blt.n	811ed4c <_strtoul_l.constprop.0+0xb0>
 811ed0c:	fb00 4003 	mla	r0, r0, r3, r4
 811ed10:	2601      	movs	r6, #1
 811ed12:	f815 4b01 	ldrb.w	r4, [r5], #1
 811ed16:	e7e9      	b.n	811ecec <_strtoul_l.constprop.0+0x50>
 811ed18:	2c2b      	cmp	r4, #43	@ 0x2b
 811ed1a:	bf04      	itt	eq
 811ed1c:	782c      	ldrbeq	r4, [r5, #0]
 811ed1e:	1c85      	addeq	r5, r0, #2
 811ed20:	e7cd      	b.n	811ecbe <_strtoul_l.constprop.0+0x22>
 811ed22:	2b00      	cmp	r3, #0
 811ed24:	d1d8      	bne.n	811ecd8 <_strtoul_l.constprop.0+0x3c>
 811ed26:	2c30      	cmp	r4, #48	@ 0x30
 811ed28:	bf0c      	ite	eq
 811ed2a:	2308      	moveq	r3, #8
 811ed2c:	230a      	movne	r3, #10
 811ed2e:	e7d3      	b.n	811ecd8 <_strtoul_l.constprop.0+0x3c>
 811ed30:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 811ed34:	f1bc 0f19 	cmp.w	ip, #25
 811ed38:	d801      	bhi.n	811ed3e <_strtoul_l.constprop.0+0xa2>
 811ed3a:	3c37      	subs	r4, #55	@ 0x37
 811ed3c:	e7dc      	b.n	811ecf8 <_strtoul_l.constprop.0+0x5c>
 811ed3e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 811ed42:	f1bc 0f19 	cmp.w	ip, #25
 811ed46:	d804      	bhi.n	811ed52 <_strtoul_l.constprop.0+0xb6>
 811ed48:	3c57      	subs	r4, #87	@ 0x57
 811ed4a:	e7d5      	b.n	811ecf8 <_strtoul_l.constprop.0+0x5c>
 811ed4c:	f04f 36ff 	mov.w	r6, #4294967295
 811ed50:	e7df      	b.n	811ed12 <_strtoul_l.constprop.0+0x76>
 811ed52:	1c73      	adds	r3, r6, #1
 811ed54:	d106      	bne.n	811ed64 <_strtoul_l.constprop.0+0xc8>
 811ed56:	2322      	movs	r3, #34	@ 0x22
 811ed58:	f8ce 3000 	str.w	r3, [lr]
 811ed5c:	4630      	mov	r0, r6
 811ed5e:	b932      	cbnz	r2, 811ed6e <_strtoul_l.constprop.0+0xd2>
 811ed60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 811ed64:	b107      	cbz	r7, 811ed68 <_strtoul_l.constprop.0+0xcc>
 811ed66:	4240      	negs	r0, r0
 811ed68:	2a00      	cmp	r2, #0
 811ed6a:	d0f9      	beq.n	811ed60 <_strtoul_l.constprop.0+0xc4>
 811ed6c:	b106      	cbz	r6, 811ed70 <_strtoul_l.constprop.0+0xd4>
 811ed6e:	1e69      	subs	r1, r5, #1
 811ed70:	6011      	str	r1, [r2, #0]
 811ed72:	e7f5      	b.n	811ed60 <_strtoul_l.constprop.0+0xc4>
 811ed74:	0812265c 	.word	0x0812265c

0811ed78 <_strtoul_r>:
 811ed78:	f7ff bf90 	b.w	811ec9c <_strtoul_l.constprop.0>

0811ed7c <_init>:
 811ed7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811ed7e:	bf00      	nop
 811ed80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811ed82:	bc08      	pop	{r3}
 811ed84:	469e      	mov	lr, r3
 811ed86:	4770      	bx	lr

0811ed88 <_fini>:
 811ed88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811ed8a:	bf00      	nop
 811ed8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811ed8e:	bc08      	pop	{r3}
 811ed90:	469e      	mov	lr, r3
 811ed92:	4770      	bx	lr
